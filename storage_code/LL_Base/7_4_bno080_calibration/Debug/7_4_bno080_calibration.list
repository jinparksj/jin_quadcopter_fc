
7_4_bno080_calibration.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b17c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000654  0800b310  0800b310  0001b310  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b964  0800b964  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b964  0800b964  0001b964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b96c  0800b96c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b96c  0800b96c  0001b96c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b970  0800b970  0001b970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800b974  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  200001e4  0800bb58  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000474  0800bb58  00020474  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017a17  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003eb5  00000000  00000000  00037c2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001460  00000000  00000000  0003bae0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012a0  00000000  00000000  0003cf40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00007ed0  00000000  00000000  0003e1e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013241  00000000  00000000  000460b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d0f44  00000000  00000000  000592f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012a235  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006384  00000000  00000000  0012a2b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b2f4 	.word	0x0800b2f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	0800b2f4 	.word	0x0800b2f4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c5c:	f000 b972 	b.w	8000f44 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	4688      	mov	r8, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14b      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4615      	mov	r5, r2
 8000c8a:	d967      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0720 	rsb	r7, r2, #32
 8000c96:	fa01 f302 	lsl.w	r3, r1, r2
 8000c9a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c9e:	4095      	lsls	r5, r2
 8000ca0:	ea47 0803 	orr.w	r8, r7, r3
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cb0:	fa1f fc85 	uxth.w	ip, r5
 8000cb4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cb8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18eb      	adds	r3, r5, r3
 8000cc6:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000cca:	f080 811b 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8118 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000cd4:	3f02      	subs	r7, #2
 8000cd6:	442b      	add	r3, r5
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cec:	45a4      	cmp	ip, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	192c      	adds	r4, r5, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cf6:	f080 8107 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cfa:	45a4      	cmp	ip, r4
 8000cfc:	f240 8104 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000d00:	3802      	subs	r0, #2
 8000d02:	442c      	add	r4, r5
 8000d04:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d08:	eba4 040c 	sub.w	r4, r4, ip
 8000d0c:	2700      	movs	r7, #0
 8000d0e:	b11e      	cbz	r6, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c6 4300 	strd	r4, r3, [r6]
 8000d18:	4639      	mov	r1, r7
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0xbe>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80eb 	beq.w	8000efe <__udivmoddi4+0x286>
 8000d28:	2700      	movs	r7, #0
 8000d2a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d2e:	4638      	mov	r0, r7
 8000d30:	4639      	mov	r1, r7
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	fab3 f783 	clz	r7, r3
 8000d3a:	2f00      	cmp	r7, #0
 8000d3c:	d147      	bne.n	8000dce <__udivmoddi4+0x156>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0xd0>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	f200 80fa 	bhi.w	8000f3c <__udivmoddi4+0x2c4>
 8000d48:	1a84      	subs	r4, r0, r2
 8000d4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	4698      	mov	r8, r3
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d0e0      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000d56:	e9c6 4800 	strd	r4, r8, [r6]
 8000d5a:	e7dd      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000d5c:	b902      	cbnz	r2, 8000d60 <__udivmoddi4+0xe8>
 8000d5e:	deff      	udf	#255	; 0xff
 8000d60:	fab2 f282 	clz	r2, r2
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f040 808f 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d6a:	1b49      	subs	r1, r1, r5
 8000d6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d70:	fa1f f885 	uxth.w	r8, r5
 8000d74:	2701      	movs	r7, #1
 8000d76:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d7a:	0c23      	lsrs	r3, r4, #16
 8000d7c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d84:	fb08 f10c 	mul.w	r1, r8, ip
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8c:	18eb      	adds	r3, r5, r3
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4299      	cmp	r1, r3
 8000d96:	f200 80cd 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1a59      	subs	r1, r3, r1
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000da8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x14c>
 8000db4:	192c      	adds	r4, r5, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x14a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80b6 	bhi.w	8000f2e <__udivmoddi4+0x2b6>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e79f      	b.n	8000d0e <__udivmoddi4+0x96>
 8000dce:	f1c7 0c20 	rsb	ip, r7, #32
 8000dd2:	40bb      	lsls	r3, r7
 8000dd4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dd8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ddc:	fa01 f407 	lsl.w	r4, r1, r7
 8000de0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000de4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000de8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dec:	4325      	orrs	r5, r4
 8000dee:	fbb3 f9f8 	udiv	r9, r3, r8
 8000df2:	0c2c      	lsrs	r4, r5, #16
 8000df4:	fb08 3319 	mls	r3, r8, r9, r3
 8000df8:	fa1f fa8e 	uxth.w	sl, lr
 8000dfc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e00:	fb09 f40a 	mul.w	r4, r9, sl
 8000e04:	429c      	cmp	r4, r3
 8000e06:	fa02 f207 	lsl.w	r2, r2, r7
 8000e0a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1e 0303 	adds.w	r3, lr, r3
 8000e14:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e18:	f080 8087 	bcs.w	8000f2a <__udivmoddi4+0x2b2>
 8000e1c:	429c      	cmp	r4, r3
 8000e1e:	f240 8084 	bls.w	8000f2a <__udivmoddi4+0x2b2>
 8000e22:	f1a9 0902 	sub.w	r9, r9, #2
 8000e26:	4473      	add	r3, lr
 8000e28:	1b1b      	subs	r3, r3, r4
 8000e2a:	b2ad      	uxth	r5, r5
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e38:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e3c:	45a2      	cmp	sl, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1e 0404 	adds.w	r4, lr, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e48:	d26b      	bcs.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4a:	45a2      	cmp	sl, r4
 8000e4c:	d969      	bls.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	4474      	add	r4, lr
 8000e52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e56:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5a:	eba4 040a 	sub.w	r4, r4, sl
 8000e5e:	454c      	cmp	r4, r9
 8000e60:	46c2      	mov	sl, r8
 8000e62:	464b      	mov	r3, r9
 8000e64:	d354      	bcc.n	8000f10 <__udivmoddi4+0x298>
 8000e66:	d051      	beq.n	8000f0c <__udivmoddi4+0x294>
 8000e68:	2e00      	cmp	r6, #0
 8000e6a:	d069      	beq.n	8000f40 <__udivmoddi4+0x2c8>
 8000e6c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e70:	eb64 0403 	sbc.w	r4, r4, r3
 8000e74:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e78:	40fd      	lsrs	r5, r7
 8000e7a:	40fc      	lsrs	r4, r7
 8000e7c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e80:	e9c6 5400 	strd	r5, r4, [r6]
 8000e84:	2700      	movs	r7, #0
 8000e86:	e747      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e90:	4095      	lsls	r5, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	fa21 f303 	lsr.w	r3, r1, r3
 8000e9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e9e:	4338      	orrs	r0, r7
 8000ea0:	0c01      	lsrs	r1, r0, #16
 8000ea2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ea6:	fa1f f885 	uxth.w	r8, r5
 8000eaa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb2:	fb07 f308 	mul.w	r3, r7, r8
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ebc:	d907      	bls.n	8000ece <__udivmoddi4+0x256>
 8000ebe:	1869      	adds	r1, r5, r1
 8000ec0:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000ec4:	d22f      	bcs.n	8000f26 <__udivmoddi4+0x2ae>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d92d      	bls.n	8000f26 <__udivmoddi4+0x2ae>
 8000eca:	3f02      	subs	r7, #2
 8000ecc:	4429      	add	r1, r5
 8000ece:	1acb      	subs	r3, r1, r3
 8000ed0:	b281      	uxth	r1, r0
 8000ed2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ede:	fb00 f308 	mul.w	r3, r0, r8
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x27e>
 8000ee6:	1869      	adds	r1, r5, r1
 8000ee8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000eec:	d217      	bcs.n	8000f1e <__udivmoddi4+0x2a6>
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	d915      	bls.n	8000f1e <__udivmoddi4+0x2a6>
 8000ef2:	3802      	subs	r0, #2
 8000ef4:	4429      	add	r1, r5
 8000ef6:	1ac9      	subs	r1, r1, r3
 8000ef8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000efc:	e73b      	b.n	8000d76 <__udivmoddi4+0xfe>
 8000efe:	4637      	mov	r7, r6
 8000f00:	4630      	mov	r0, r6
 8000f02:	e709      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f04:	4607      	mov	r7, r0
 8000f06:	e6e7      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f08:	4618      	mov	r0, r3
 8000f0a:	e6fb      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f0c:	4541      	cmp	r1, r8
 8000f0e:	d2ab      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f10:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f14:	eb69 020e 	sbc.w	r2, r9, lr
 8000f18:	3801      	subs	r0, #1
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	e7a4      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f1e:	4660      	mov	r0, ip
 8000f20:	e7e9      	b.n	8000ef6 <__udivmoddi4+0x27e>
 8000f22:	4618      	mov	r0, r3
 8000f24:	e795      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f26:	4667      	mov	r7, ip
 8000f28:	e7d1      	b.n	8000ece <__udivmoddi4+0x256>
 8000f2a:	4681      	mov	r9, r0
 8000f2c:	e77c      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f2e:	3802      	subs	r0, #2
 8000f30:	442c      	add	r4, r5
 8000f32:	e747      	b.n	8000dc4 <__udivmoddi4+0x14c>
 8000f34:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f38:	442b      	add	r3, r5
 8000f3a:	e72f      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f3c:	4638      	mov	r0, r7
 8000f3e:	e708      	b.n	8000d52 <__udivmoddi4+0xda>
 8000f40:	4637      	mov	r7, r6
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0xa0>

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	601a      	str	r2, [r3, #0]
}
 8000f5c:	bf00      	nop
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f023 0210 	bic.w	r2, r3, #16
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	431a      	orrs	r2, r3
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	605a      	str	r2, [r3, #4]
}
 8000f82:	bf00      	nop
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr

08000f8e <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	b083      	sub	sp, #12
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	689b      	ldr	r3, [r3, #8]
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d101      	bne.n	8000fa6 <LL_SPI_IsActiveFlag_RXNE+0x18>
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e000      	b.n	8000fa8 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8000fa6:	2300      	movs	r3, #0
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	689b      	ldr	r3, [r3, #8]
 8000fc0:	f003 0302 	and.w	r3, r3, #2
 8000fc4:	2b02      	cmp	r3, #2
 8000fc6:	d101      	bne.n	8000fcc <LL_SPI_IsActiveFlag_TXE+0x18>
 8000fc8:	2301      	movs	r3, #1
 8000fca:	e000      	b.n	8000fce <LL_SPI_IsActiveFlag_TXE+0x1a>
 8000fcc:	2300      	movs	r3, #0
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	370c      	adds	r7, #12
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr

08000fda <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	b083      	sub	sp, #12
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_REG(SPIx->DR));
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	68db      	ldr	r3, [r3, #12]
 8000fe6:	b2db      	uxtb	r3, r3
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	330c      	adds	r3, #12
 8001004:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	78fa      	ldrb	r2, [r7, #3]
 800100a:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 800100c:	bf00      	nop
 800100e:	3714      	adds	r7, #20
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr

08001018 <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	691a      	ldr	r2, [r3, #16]
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	4013      	ands	r3, r2
 800102a:	683a      	ldr	r2, [r7, #0]
 800102c:	429a      	cmp	r2, r3
 800102e:	bf0c      	ite	eq
 8001030:	2301      	moveq	r3, #1
 8001032:	2300      	movne	r3, #0
 8001034:	b2db      	uxtb	r3, r3
}
 8001036:	4618      	mov	r0, r3
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr

08001042 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001042:	b480      	push	{r7}
 8001044:	b083      	sub	sp, #12
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
 800104a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	683a      	ldr	r2, [r7, #0]
 8001050:	619a      	str	r2, [r3, #24]
}
 8001052:	bf00      	nop
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr

0800105e <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800105e:	b480      	push	{r7}
 8001060:	b083      	sub	sp, #12
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
 8001066:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	041a      	lsls	r2, r3, #16
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	619a      	str	r2, [r3, #24]
}
 8001070:	bf00      	nop
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001084:	4b08      	ldr	r3, [pc, #32]	; (80010a8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001086:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001088:	4907      	ldr	r1, [pc, #28]	; (80010a8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4313      	orrs	r3, r2
 800108e:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001090:	4b05      	ldr	r3, [pc, #20]	; (80010a8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001092:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	4013      	ands	r3, r2
 8001098:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800109a:	68fb      	ldr	r3, [r7, #12]
}
 800109c:	bf00      	nop
 800109e:	3714      	adds	r7, #20
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	40023800 	.word	0x40023800

080010ac <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80010b4:	4b08      	ldr	r3, [pc, #32]	; (80010d8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80010b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010b8:	4907      	ldr	r1, [pc, #28]	; (80010d8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4313      	orrs	r3, r2
 80010be:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80010c0:	4b05      	ldr	r3, [pc, #20]	; (80010d8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80010c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4013      	ands	r3, r2
 80010c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010ca:	68fb      	ldr	r3, [r7, #12]
}
 80010cc:	bf00      	nop
 80010ce:	3714      	adds	r7, #20
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	40023800 	.word	0x40023800

080010dc <BNO080_GPIO_SPI_Initialization>:
int16_t gyro_Q1 = 9;
int16_t magnetometer_Q1 = 4;


void BNO080_GPIO_SPI_Initialization(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b090      	sub	sp, #64	; 0x40
 80010e0:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80010e2:	f107 0318 	add.w	r3, r7, #24
 80010e6:	2228      	movs	r2, #40	; 0x28
 80010e8:	2100      	movs	r1, #0
 80010ea:	4618      	mov	r0, r3
 80010ec:	f006 fd9c 	bl	8007c28 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f0:	463b      	mov	r3, r7
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	605a      	str	r2, [r3, #4]
 80010f8:	609a      	str	r2, [r3, #8]
 80010fa:	60da      	str	r2, [r3, #12]
 80010fc:	611a      	str	r2, [r3, #16]
 80010fe:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8001100:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001104:	f7ff ffd2 	bl	80010ac <LL_APB1_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001108:	2002      	movs	r0, #2
 800110a:	f7ff ffb7 	bl	800107c <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800110e:	2004      	movs	r0, #4
 8001110:	f7ff ffb4 	bl	800107c <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001114:	2001      	movs	r0, #1
 8001116:	f7ff ffb1 	bl	800107c <LL_AHB1_GRP1_EnableClock>
	/**SPI2 GPIO Configuration
	PB13   ------> SPI2_SCK
	PB14   ------> SPI2_MISO
	PB15   ------> SPI2_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 800111a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800111e:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001120:	2302      	movs	r3, #2
 8001122:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001124:	2303      	movs	r3, #3
 8001126:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001128:	2300      	movs	r3, #0
 800112a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800112c:	2300      	movs	r3, #0
 800112e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001130:	2305      	movs	r3, #5
 8001132:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001134:	463b      	mov	r3, r7
 8001136:	4619      	mov	r1, r3
 8001138:	4841      	ldr	r0, [pc, #260]	; (8001240 <BNO080_GPIO_SPI_Initialization+0x164>)
 800113a:	f005 fde0 	bl	8006cfe <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800113e:	2300      	movs	r3, #0
 8001140:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001142:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001146:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001148:	2300      	movs	r3, #0
 800114a:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 800114c:	2302      	movs	r3, #2
 800114e:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001150:	2301      	movs	r3, #1
 8001152:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001154:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001158:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 800115a:	2318      	movs	r3, #24
 800115c:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800115e:	2300      	movs	r3, #0
 8001160:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001162:	2300      	movs	r3, #0
 8001164:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 8001166:	230a      	movs	r3, #10
 8001168:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(BNO080_SPI_CHANNEL, &SPI_InitStruct);
 800116a:	f107 0318 	add.w	r3, r7, #24
 800116e:	4619      	mov	r1, r3
 8001170:	4834      	ldr	r0, [pc, #208]	; (8001244 <BNO080_GPIO_SPI_Initialization+0x168>)
 8001172:	f005 ff92 	bl	800709a <LL_SPI_Init>
	LL_SPI_SetStandard(BNO080_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 8001176:	2100      	movs	r1, #0
 8001178:	4832      	ldr	r0, [pc, #200]	; (8001244 <BNO080_GPIO_SPI_Initialization+0x168>)
 800117a:	f7ff fef5 	bl	8000f68 <LL_SPI_SetStandard>
	 * PA8  ------> BNO080_PS0/WAKE (output)
	 * PC9  ------> BNO080_RST (output)
	 * PC8  ------> BNO080_INT (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(BNO080_RST_PORT, BNO080_RST_PIN);
 800117e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001182:	4831      	ldr	r0, [pc, #196]	; (8001248 <BNO080_GPIO_SPI_Initialization+0x16c>)
 8001184:	f7ff ff6b 	bl	800105e <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_SPI_CS_PORT, BNO080_SPI_CS_PIN);
 8001188:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800118c:	482c      	ldr	r0, [pc, #176]	; (8001240 <BNO080_GPIO_SPI_Initialization+0x164>)
 800118e:	f7ff ff66 	bl	800105e <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_PS0_WAKE_PORT, BNO080_PS0_WAKE_PIN);
 8001192:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001196:	482d      	ldr	r0, [pc, #180]	; (800124c <BNO080_GPIO_SPI_Initialization+0x170>)
 8001198:	f7ff ff61 	bl	800105e <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_SPI_CS_PIN;
 800119c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011a0:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80011a2:	2301      	movs	r3, #1
 80011a4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80011a6:	2303      	movs	r3, #3
 80011a8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80011aa:	2300      	movs	r3, #0
 80011ac:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80011ae:	2300      	movs	r3, #0
 80011b0:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_SPI_CS_PORT, &GPIO_InitStruct);
 80011b2:	463b      	mov	r3, r7
 80011b4:	4619      	mov	r1, r3
 80011b6:	4822      	ldr	r0, [pc, #136]	; (8001240 <BNO080_GPIO_SPI_Initialization+0x164>)
 80011b8:	f005 fda1 	bl	8006cfe <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_RST_PIN;
 80011bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011c0:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80011c2:	2301      	movs	r3, #1
 80011c4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80011c6:	2303      	movs	r3, #3
 80011c8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80011ca:	2300      	movs	r3, #0
 80011cc:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80011ce:	2300      	movs	r3, #0
 80011d0:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_RST_PORT, &GPIO_InitStruct);
 80011d2:	463b      	mov	r3, r7
 80011d4:	4619      	mov	r1, r3
 80011d6:	481c      	ldr	r0, [pc, #112]	; (8001248 <BNO080_GPIO_SPI_Initialization+0x16c>)
 80011d8:	f005 fd91 	bl	8006cfe <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_PS0_WAKE_PIN;
 80011dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011e0:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80011e2:	2301      	movs	r3, #1
 80011e4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80011e6:	2303      	movs	r3, #3
 80011e8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80011ee:	2300      	movs	r3, #0
 80011f0:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_PS0_WAKE_PORT, &GPIO_InitStruct);
 80011f2:	463b      	mov	r3, r7
 80011f4:	4619      	mov	r1, r3
 80011f6:	4815      	ldr	r0, [pc, #84]	; (800124c <BNO080_GPIO_SPI_Initialization+0x170>)
 80011f8:	f005 fd81 	bl	8006cfe <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_INT_PIN;
 80011fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001200:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001202:	2300      	movs	r3, #0
 8001204:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001206:	2301      	movs	r3, #1
 8001208:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_INT_PORT, &GPIO_InitStruct);
 800120a:	463b      	mov	r3, r7
 800120c:	4619      	mov	r1, r3
 800120e:	480e      	ldr	r0, [pc, #56]	; (8001248 <BNO080_GPIO_SPI_Initialization+0x16c>)
 8001210:	f005 fd75 	bl	8006cfe <LL_GPIO_Init>

	LL_SPI_Enable(BNO080_SPI_CHANNEL);
 8001214:	480b      	ldr	r0, [pc, #44]	; (8001244 <BNO080_GPIO_SPI_Initialization+0x168>)
 8001216:	f7ff fe97 	bl	8000f48 <LL_SPI_Enable>

	CHIP_DESELECT(BNO080);
 800121a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800121e:	4808      	ldr	r0, [pc, #32]	; (8001240 <BNO080_GPIO_SPI_Initialization+0x164>)
 8001220:	f7ff ff0f 	bl	8001042 <LL_GPIO_SetOutputPin>
	WAKE_HIGH();
 8001224:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001228:	4808      	ldr	r0, [pc, #32]	; (800124c <BNO080_GPIO_SPI_Initialization+0x170>)
 800122a:	f7ff ff0a 	bl	8001042 <LL_GPIO_SetOutputPin>
	RESET_HIGH();
 800122e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001232:	4805      	ldr	r0, [pc, #20]	; (8001248 <BNO080_GPIO_SPI_Initialization+0x16c>)
 8001234:	f7ff ff05 	bl	8001042 <LL_GPIO_SetOutputPin>
}
 8001238:	bf00      	nop
 800123a:	3740      	adds	r7, #64	; 0x40
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40020400 	.word	0x40020400
 8001244:	40003800 	.word	0x40003800
 8001248:	40020800 	.word	0x40020800
 800124c:	40020000 	.word	0x40020000

08001250 <BNO080_Initialization>:

int BNO080_Initialization(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af02      	add	r7, sp, #8
	BNO080_GPIO_SPI_Initialization();
 8001256:	f7ff ff41 	bl	80010dc <BNO080_GPIO_SPI_Initialization>
	
	printf("Checking BNO080...");
 800125a:	482e      	ldr	r0, [pc, #184]	; (8001314 <BNO080_Initialization+0xc4>)
 800125c:	f007 f948 	bl	80084f0 <iprintf>
	
	CHIP_DESELECT(BNO080);
 8001260:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001264:	482c      	ldr	r0, [pc, #176]	; (8001318 <BNO080_Initialization+0xc8>)
 8001266:	f7ff feec 	bl	8001042 <LL_GPIO_SetOutputPin>
	
	//Configure the BNO080 for SPI communication
	WAKE_HIGH();	//Before boot up the PS0/WAK pin must be high to enter SPI mode
 800126a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800126e:	482b      	ldr	r0, [pc, #172]	; (800131c <BNO080_Initialization+0xcc>)
 8001270:	f7ff fee7 	bl	8001042 <LL_GPIO_SetOutputPin>
	RESET_LOW();	//Reset BNO080
 8001274:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001278:	4829      	ldr	r0, [pc, #164]	; (8001320 <BNO080_Initialization+0xd0>)
 800127a:	f7ff fef0 	bl	800105e <LL_GPIO_ResetOutputPin>
	HAL_Delay(200);	//Min length not specified in datasheet?
 800127e:	20c8      	movs	r0, #200	; 0xc8
 8001280:	f003 fc82 	bl	8004b88 <HAL_Delay>
	RESET_HIGH();	//Bring out of reset
 8001284:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001288:	4825      	ldr	r0, [pc, #148]	; (8001320 <BNO080_Initialization+0xd0>)
 800128a:	f7ff feda 	bl	8001042 <LL_GPIO_SetOutputPin>
	
	BNO080_waitForSPI(); //Wait until INT pin goes low.
 800128e:	f000 fc25 	bl	8001adc <BNO080_waitForSPI>
	
	//At system startup, the hub must send its full advertisement message (see 5.2 and 5.3) to the
	//host. It must not send any other data until this step is complete.
	//When BNO080 first boots it broadcasts big startup packet
	//Read it and dump it
	BNO080_waitForSPI(); //Wait for assertion of INT before reading advert message.
 8001292:	f000 fc23 	bl	8001adc <BNO080_waitForSPI>
	BNO080_receivePacket();
 8001296:	f000 fc45 	bl	8001b24 <BNO080_receivePacket>
	
	//The BNO080 will then transmit an unsolicited Initialize Response (see 6.4.5.2)
	//Read it and dump it
	BNO080_waitForSPI();  //Wait for assertion of INT before reading Init response
 800129a:	f000 fc1f 	bl	8001adc <BNO080_waitForSPI>
	BNO080_receivePacket();
 800129e:	f000 fc41 	bl	8001b24 <BNO080_receivePacket>
	
	//Check communication with device
	shtpData[0] = SHTP_REPORT_PRODUCT_ID_REQUEST; //Request the product ID and reset info
 80012a2:	4b20      	ldr	r3, [pc, #128]	; (8001324 <BNO080_Initialization+0xd4>)
 80012a4:	22f9      	movs	r2, #249	; 0xf9
 80012a6:	701a      	strb	r2, [r3, #0]
	shtpData[1] = 0;						 //Reserved
 80012a8:	4b1e      	ldr	r3, [pc, #120]	; (8001324 <BNO080_Initialization+0xd4>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	705a      	strb	r2, [r3, #1]
	
	//Transmit packet on channel 2, 2 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 2);
 80012ae:	2102      	movs	r1, #2
 80012b0:	2002      	movs	r0, #2
 80012b2:	f000 fca7 	bl	8001c04 <BNO080_sendPacket>
	
	//Now we wait for response
	BNO080_waitForSPI();
 80012b6:	f000 fc11 	bl	8001adc <BNO080_waitForSPI>
	if (BNO080_receivePacket() == 1)
 80012ba:	f000 fc33 	bl	8001b24 <BNO080_receivePacket>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d11b      	bne.n	80012fc <BNO080_Initialization+0xac>
	{
		printf("header: %d %d %d %d\n", shtpHeader[0], shtpHeader[1], shtpHeader[2], shtpHeader[3]);
 80012c4:	4b18      	ldr	r3, [pc, #96]	; (8001328 <BNO080_Initialization+0xd8>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	4619      	mov	r1, r3
 80012ca:	4b17      	ldr	r3, [pc, #92]	; (8001328 <BNO080_Initialization+0xd8>)
 80012cc:	785b      	ldrb	r3, [r3, #1]
 80012ce:	461a      	mov	r2, r3
 80012d0:	4b15      	ldr	r3, [pc, #84]	; (8001328 <BNO080_Initialization+0xd8>)
 80012d2:	789b      	ldrb	r3, [r3, #2]
 80012d4:	4618      	mov	r0, r3
 80012d6:	4b14      	ldr	r3, [pc, #80]	; (8001328 <BNO080_Initialization+0xd8>)
 80012d8:	78db      	ldrb	r3, [r3, #3]
 80012da:	9300      	str	r3, [sp, #0]
 80012dc:	4603      	mov	r3, r0
 80012de:	4813      	ldr	r0, [pc, #76]	; (800132c <BNO080_Initialization+0xdc>)
 80012e0:	f007 f906 	bl	80084f0 <iprintf>
		if (shtpData[0] == SHTP_REPORT_PRODUCT_ID_RESPONSE)
 80012e4:	4b0f      	ldr	r3, [pc, #60]	; (8001324 <BNO080_Initialization+0xd4>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	2bf8      	cmp	r3, #248	; 0xf8
 80012ea:	d107      	bne.n	80012fc <BNO080_Initialization+0xac>
		{
			printf("BNO080 who_am_i = 0x%02x...ok\n\n", shtpData[0]);
 80012ec:	4b0d      	ldr	r3, [pc, #52]	; (8001324 <BNO080_Initialization+0xd4>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	4619      	mov	r1, r3
 80012f2:	480f      	ldr	r0, [pc, #60]	; (8001330 <BNO080_Initialization+0xe0>)
 80012f4:	f007 f8fc 	bl	80084f0 <iprintf>
			return (0);
 80012f8:	2300      	movs	r3, #0
 80012fa:	e007      	b.n	800130c <BNO080_Initialization+0xbc>
		}// Sensor OK
	}
	
	printf("BNO080 Not OK: 0x%02x Should be 0x%02x\n", shtpData[0], SHTP_REPORT_PRODUCT_ID_RESPONSE);
 80012fc:	4b09      	ldr	r3, [pc, #36]	; (8001324 <BNO080_Initialization+0xd4>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	22f8      	movs	r2, #248	; 0xf8
 8001302:	4619      	mov	r1, r3
 8001304:	480b      	ldr	r0, [pc, #44]	; (8001334 <BNO080_Initialization+0xe4>)
 8001306:	f007 f8f3 	bl	80084f0 <iprintf>
	return (1); //Something went wrong
 800130a:	2301      	movs	r3, #1
}
 800130c:	4618      	mov	r0, r3
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	0800b310 	.word	0x0800b310
 8001318:	40020400 	.word	0x40020400
 800131c:	40020000 	.word	0x40020000
 8001320:	40020800 	.word	0x40020800
 8001324:	20000278 	.word	0x20000278
 8001328:	20000224 	.word	0x20000224
 800132c:	0800b324 	.word	0x0800b324
 8001330:	0800b33c 	.word	0x0800b33c
 8001334:	0800b35c 	.word	0x0800b35c

08001338 <SPI2_SendByte>:

unsigned char SPI2_SendByte(unsigned char data)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(BNO080_SPI_CHANNEL)==RESET);
 8001342:	bf00      	nop
 8001344:	480c      	ldr	r0, [pc, #48]	; (8001378 <SPI2_SendByte+0x40>)
 8001346:	f7ff fe35 	bl	8000fb4 <LL_SPI_IsActiveFlag_TXE>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d0f9      	beq.n	8001344 <SPI2_SendByte+0xc>
	LL_SPI_TransmitData8(BNO080_SPI_CHANNEL, data);
 8001350:	79fb      	ldrb	r3, [r7, #7]
 8001352:	4619      	mov	r1, r3
 8001354:	4808      	ldr	r0, [pc, #32]	; (8001378 <SPI2_SendByte+0x40>)
 8001356:	f7ff fe4d 	bl	8000ff4 <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(BNO080_SPI_CHANNEL)==RESET);
 800135a:	bf00      	nop
 800135c:	4806      	ldr	r0, [pc, #24]	; (8001378 <SPI2_SendByte+0x40>)
 800135e:	f7ff fe16 	bl	8000f8e <LL_SPI_IsActiveFlag_RXNE>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d0f9      	beq.n	800135c <SPI2_SendByte+0x24>
	return LL_SPI_ReceiveData8(BNO080_SPI_CHANNEL);
 8001368:	4803      	ldr	r0, [pc, #12]	; (8001378 <SPI2_SendByte+0x40>)
 800136a:	f7ff fe36 	bl	8000fda <LL_SPI_ReceiveData8>
 800136e:	4603      	mov	r3, r0
}
 8001370:	4618      	mov	r0, r3
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	40003800 	.word	0x40003800

0800137c <BNO080_dataAvailable>:
//////////////////////////////////////////////////////////////////////////

//Updates the latest variables if possible
//Returns false if new readings are not available
int BNO080_dataAvailable(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
	//If we have an interrupt pin connection available, check if data is available.
	//If int pin is NULL, then we'll rely on BNO080_receivePacket() to timeout
	//See issue 13: https://github.com/sparkfun/SparkFun_BNO080_Arduino_Library/issues/13
	if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 1)
 8001380:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001384:	4811      	ldr	r0, [pc, #68]	; (80013cc <BNO080_dataAvailable+0x50>)
 8001386:	f7ff fe47 	bl	8001018 <LL_GPIO_IsInputPinSet>
 800138a:	4603      	mov	r3, r0
 800138c:	2b01      	cmp	r3, #1
 800138e:	d101      	bne.n	8001394 <BNO080_dataAvailable+0x18>
		return (0);
 8001390:	2300      	movs	r3, #0
 8001392:	e019      	b.n	80013c8 <BNO080_dataAvailable+0x4c>

	if (BNO080_receivePacket() == 1)
 8001394:	f000 fbc6 	bl	8001b24 <BNO080_receivePacket>
 8001398:	4603      	mov	r3, r0
 800139a:	2b01      	cmp	r3, #1
 800139c:	d113      	bne.n	80013c6 <BNO080_dataAvailable+0x4a>
	{
		//Check to see if this packet is a sensor reporting its data to us
		if (shtpHeader[2] == CHANNEL_REPORTS && shtpData[0] == SHTP_REPORT_BASE_TIMESTAMP)
 800139e:	4b0c      	ldr	r3, [pc, #48]	; (80013d0 <BNO080_dataAvailable+0x54>)
 80013a0:	789b      	ldrb	r3, [r3, #2]
 80013a2:	2b03      	cmp	r3, #3
 80013a4:	d107      	bne.n	80013b6 <BNO080_dataAvailable+0x3a>
 80013a6:	4b0b      	ldr	r3, [pc, #44]	; (80013d4 <BNO080_dataAvailable+0x58>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	2bfb      	cmp	r3, #251	; 0xfb
 80013ac:	d103      	bne.n	80013b6 <BNO080_dataAvailable+0x3a>
		{
			BNO080_parseInputReport(); //This will update the rawAccelX, etc variables depending on which feature report is found
 80013ae:	f000 f82f 	bl	8001410 <BNO080_parseInputReport>
			return (1);
 80013b2:	2301      	movs	r3, #1
 80013b4:	e008      	b.n	80013c8 <BNO080_dataAvailable+0x4c>
		}
		else if (shtpHeader[2] == CHANNEL_CONTROL)
 80013b6:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <BNO080_dataAvailable+0x54>)
 80013b8:	789b      	ldrb	r3, [r3, #2]
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d103      	bne.n	80013c6 <BNO080_dataAvailable+0x4a>
		{
			BNO080_parseCommandReport(); //This will update responses to commands, calibrationStatus, etc.
 80013be:	f000 f80b 	bl	80013d8 <BNO080_parseCommandReport>
			return (1);
 80013c2:	2301      	movs	r3, #1
 80013c4:	e000      	b.n	80013c8 <BNO080_dataAvailable+0x4c>
		}
	}
	return (0);
 80013c6:	2300      	movs	r3, #0
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40020800 	.word	0x40020800
 80013d0:	20000224 	.word	0x20000224
 80013d4:	20000278 	.word	0x20000278

080013d8 <BNO080_parseCommandReport>:
//shtpData[5 + 5]: R5
//shtpData[5 + 6]: R6
//shtpData[5 + 7]: R7
//shtpData[5 + 8]: R8
void BNO080_parseCommandReport(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
	if (shtpData[0] == SHTP_REPORT_COMMAND_RESPONSE)
 80013de:	4b0a      	ldr	r3, [pc, #40]	; (8001408 <BNO080_parseCommandReport+0x30>)
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	2bf1      	cmp	r3, #241	; 0xf1
 80013e4:	d109      	bne.n	80013fa <BNO080_parseCommandReport+0x22>
	{
		//The BNO080 responds with this report to command requests. It's up to use to remember which command we issued.
		uint8_t command = shtpData[2]; //This is the Command byte of the response
 80013e6:	4b08      	ldr	r3, [pc, #32]	; (8001408 <BNO080_parseCommandReport+0x30>)
 80013e8:	789b      	ldrb	r3, [r3, #2]
 80013ea:	71fb      	strb	r3, [r7, #7]

		if (command == COMMAND_ME_CALIBRATE)
 80013ec:	79fb      	ldrb	r3, [r7, #7]
 80013ee:	2b07      	cmp	r3, #7
 80013f0:	d103      	bne.n	80013fa <BNO080_parseCommandReport+0x22>
		{
			calibrationStatus = shtpData[5]; //R0 - Status (0 = success, non-zero = fail)
 80013f2:	4b05      	ldr	r3, [pc, #20]	; (8001408 <BNO080_parseCommandReport+0x30>)
 80013f4:	795a      	ldrb	r2, [r3, #5]
 80013f6:	4b05      	ldr	r3, [pc, #20]	; (800140c <BNO080_parseCommandReport+0x34>)
 80013f8:	701a      	strb	r2, [r3, #0]
		//This sensor report ID is unhandled.
		//See reference manual to add additional feature reports as needed
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 80013fa:	bf00      	nop
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	20000278 	.word	0x20000278
 800140c:	200002fb 	.word	0x200002fb

08001410 <BNO080_parseInputReport>:
//shtpData[6:7]: j/accel y/gyro y/etc
//shtpData[8:9]: k/accel z/gyro z/etc
//shtpData[10:11]: real/gyro temp/etc
//shtpData[12:13]: Accuracy estimate
void BNO080_parseInputReport(void)
{
 8001410:	b480      	push	{r7}
 8001412:	b087      	sub	sp, #28
 8001414:	af00      	add	r7, sp, #0
	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)shtpHeader[1] << 8 | shtpHeader[0]);
 8001416:	4b81      	ldr	r3, [pc, #516]	; (800161c <BNO080_parseInputReport+0x20c>)
 8001418:	785b      	ldrb	r3, [r3, #1]
 800141a:	021b      	lsls	r3, r3, #8
 800141c:	b21a      	sxth	r2, r3
 800141e:	4b7f      	ldr	r3, [pc, #508]	; (800161c <BNO080_parseInputReport+0x20c>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	b21b      	sxth	r3, r3
 8001424:	4313      	orrs	r3, r2
 8001426:	823b      	strh	r3, [r7, #16]
	dataLength &= ~(1 << 15); //Clear the MSbit. This bit indicates if this package is a continuation of the last.
 8001428:	8a3b      	ldrh	r3, [r7, #16]
 800142a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800142e:	823b      	strh	r3, [r7, #16]
	//Ignore it for now. TODO catch this as an error and exit

	dataLength -= 4; //Remove the header bytes from the data count
 8001430:	8a3b      	ldrh	r3, [r7, #16]
 8001432:	3b04      	subs	r3, #4
 8001434:	b29b      	uxth	r3, r3
 8001436:	823b      	strh	r3, [r7, #16]

	timeStamp = ((uint32_t)shtpData[4] << (8 * 3)) | (shtpData[3] << (8 * 2)) | (shtpData[2] << (8 * 1)) | (shtpData[1] << (8 * 0));
 8001438:	4b79      	ldr	r3, [pc, #484]	; (8001620 <BNO080_parseInputReport+0x210>)
 800143a:	791b      	ldrb	r3, [r3, #4]
 800143c:	061b      	lsls	r3, r3, #24
 800143e:	4a78      	ldr	r2, [pc, #480]	; (8001620 <BNO080_parseInputReport+0x210>)
 8001440:	78d2      	ldrb	r2, [r2, #3]
 8001442:	0412      	lsls	r2, r2, #16
 8001444:	4313      	orrs	r3, r2
 8001446:	4a76      	ldr	r2, [pc, #472]	; (8001620 <BNO080_parseInputReport+0x210>)
 8001448:	7892      	ldrb	r2, [r2, #2]
 800144a:	0212      	lsls	r2, r2, #8
 800144c:	4313      	orrs	r3, r2
 800144e:	4a74      	ldr	r2, [pc, #464]	; (8001620 <BNO080_parseInputReport+0x210>)
 8001450:	7852      	ldrb	r2, [r2, #1]
 8001452:	4313      	orrs	r3, r2
 8001454:	4a73      	ldr	r2, [pc, #460]	; (8001624 <BNO080_parseInputReport+0x214>)
 8001456:	6013      	str	r3, [r2, #0]

	uint8_t status = shtpData[7] & 0x03; //Get status bits
 8001458:	4b71      	ldr	r3, [pc, #452]	; (8001620 <BNO080_parseInputReport+0x210>)
 800145a:	79db      	ldrb	r3, [r3, #7]
 800145c:	f003 0303 	and.w	r3, r3, #3
 8001460:	73fb      	strb	r3, [r7, #15]
	uint16_t data1 = (uint16_t)shtpData[10] << 8 | shtpData[9];
 8001462:	4b6f      	ldr	r3, [pc, #444]	; (8001620 <BNO080_parseInputReport+0x210>)
 8001464:	7a9b      	ldrb	r3, [r3, #10]
 8001466:	021b      	lsls	r3, r3, #8
 8001468:	b21a      	sxth	r2, r3
 800146a:	4b6d      	ldr	r3, [pc, #436]	; (8001620 <BNO080_parseInputReport+0x210>)
 800146c:	7a5b      	ldrb	r3, [r3, #9]
 800146e:	b21b      	sxth	r3, r3
 8001470:	4313      	orrs	r3, r2
 8001472:	b21b      	sxth	r3, r3
 8001474:	81bb      	strh	r3, [r7, #12]
	uint16_t data2 = (uint16_t)shtpData[12] << 8 | shtpData[11];
 8001476:	4b6a      	ldr	r3, [pc, #424]	; (8001620 <BNO080_parseInputReport+0x210>)
 8001478:	7b1b      	ldrb	r3, [r3, #12]
 800147a:	021b      	lsls	r3, r3, #8
 800147c:	b21a      	sxth	r2, r3
 800147e:	4b68      	ldr	r3, [pc, #416]	; (8001620 <BNO080_parseInputReport+0x210>)
 8001480:	7adb      	ldrb	r3, [r3, #11]
 8001482:	b21b      	sxth	r3, r3
 8001484:	4313      	orrs	r3, r2
 8001486:	b21b      	sxth	r3, r3
 8001488:	817b      	strh	r3, [r7, #10]
	uint16_t data3 = (uint16_t)shtpData[14] << 8 | shtpData[13];
 800148a:	4b65      	ldr	r3, [pc, #404]	; (8001620 <BNO080_parseInputReport+0x210>)
 800148c:	7b9b      	ldrb	r3, [r3, #14]
 800148e:	021b      	lsls	r3, r3, #8
 8001490:	b21a      	sxth	r2, r3
 8001492:	4b63      	ldr	r3, [pc, #396]	; (8001620 <BNO080_parseInputReport+0x210>)
 8001494:	7b5b      	ldrb	r3, [r3, #13]
 8001496:	b21b      	sxth	r3, r3
 8001498:	4313      	orrs	r3, r2
 800149a:	b21b      	sxth	r3, r3
 800149c:	813b      	strh	r3, [r7, #8]
	uint16_t data4 = 0;
 800149e:	2300      	movs	r3, #0
 80014a0:	82fb      	strh	r3, [r7, #22]
	uint16_t data5 = 0;
 80014a2:	2300      	movs	r3, #0
 80014a4:	82bb      	strh	r3, [r7, #20]

	if (dataLength > 14)
 80014a6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80014aa:	2b0e      	cmp	r3, #14
 80014ac:	dd09      	ble.n	80014c2 <BNO080_parseInputReport+0xb2>
	{
		data4 = (uint16_t)shtpData[16] << 8 | shtpData[15];
 80014ae:	4b5c      	ldr	r3, [pc, #368]	; (8001620 <BNO080_parseInputReport+0x210>)
 80014b0:	7c1b      	ldrb	r3, [r3, #16]
 80014b2:	021b      	lsls	r3, r3, #8
 80014b4:	b21a      	sxth	r2, r3
 80014b6:	4b5a      	ldr	r3, [pc, #360]	; (8001620 <BNO080_parseInputReport+0x210>)
 80014b8:	7bdb      	ldrb	r3, [r3, #15]
 80014ba:	b21b      	sxth	r3, r3
 80014bc:	4313      	orrs	r3, r2
 80014be:	b21b      	sxth	r3, r3
 80014c0:	82fb      	strh	r3, [r7, #22]
	}
	if (dataLength > 16)
 80014c2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80014c6:	2b10      	cmp	r3, #16
 80014c8:	dd09      	ble.n	80014de <BNO080_parseInputReport+0xce>
	{
		data5 = (uint16_t)shtpData[18] << 8 | shtpData[17];
 80014ca:	4b55      	ldr	r3, [pc, #340]	; (8001620 <BNO080_parseInputReport+0x210>)
 80014cc:	7c9b      	ldrb	r3, [r3, #18]
 80014ce:	021b      	lsls	r3, r3, #8
 80014d0:	b21a      	sxth	r2, r3
 80014d2:	4b53      	ldr	r3, [pc, #332]	; (8001620 <BNO080_parseInputReport+0x210>)
 80014d4:	7c5b      	ldrb	r3, [r3, #17]
 80014d6:	b21b      	sxth	r3, r3
 80014d8:	4313      	orrs	r3, r2
 80014da:	b21b      	sxth	r3, r3
 80014dc:	82bb      	strh	r3, [r7, #20]
	}

	//Store these generic values to their proper global variable
	switch(shtpData[5])
 80014de:	4b50      	ldr	r3, [pc, #320]	; (8001620 <BNO080_parseInputReport+0x210>)
 80014e0:	795b      	ldrb	r3, [r3, #5]
 80014e2:	2b05      	cmp	r3, #5
 80014e4:	d053      	beq.n	800158e <BNO080_parseInputReport+0x17e>
 80014e6:	2b05      	cmp	r3, #5
 80014e8:	dc0b      	bgt.n	8001502 <BNO080_parseInputReport+0xf2>
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d033      	beq.n	8001556 <BNO080_parseInputReport+0x146>
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	dc02      	bgt.n	80014f8 <BNO080_parseInputReport+0xe8>
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d013      	beq.n	800151e <BNO080_parseInputReport+0x10e>
			//See reference manual to add additional feature reports as needed
		}
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 80014f6:	e08a      	b.n	800160e <BNO080_parseInputReport+0x1fe>
	switch(shtpData[5])
 80014f8:	2b03      	cmp	r3, #3
 80014fa:	d03a      	beq.n	8001572 <BNO080_parseInputReport+0x162>
 80014fc:	2b04      	cmp	r3, #4
 80014fe:	d01c      	beq.n	800153a <BNO080_parseInputReport+0x12a>
}
 8001500:	e085      	b.n	800160e <BNO080_parseInputReport+0x1fe>
	switch(shtpData[5])
 8001502:	2b13      	cmp	r3, #19
 8001504:	d05b      	beq.n	80015be <BNO080_parseInputReport+0x1ae>
 8001506:	2b13      	cmp	r3, #19
 8001508:	dc04      	bgt.n	8001514 <BNO080_parseInputReport+0x104>
 800150a:	2b08      	cmp	r3, #8
 800150c:	d03f      	beq.n	800158e <BNO080_parseInputReport+0x17e>
 800150e:	2b11      	cmp	r3, #17
 8001510:	d051      	beq.n	80015b6 <BNO080_parseInputReport+0x1a6>
}
 8001512:	e07c      	b.n	800160e <BNO080_parseInputReport+0x1fe>
	switch(shtpData[5])
 8001514:	2b1e      	cmp	r3, #30
 8001516:	d057      	beq.n	80015c8 <BNO080_parseInputReport+0x1b8>
 8001518:	2bf1      	cmp	r3, #241	; 0xf1
 800151a:	d06d      	beq.n	80015f8 <BNO080_parseInputReport+0x1e8>
}
 800151c:	e077      	b.n	800160e <BNO080_parseInputReport+0x1fe>
			accelAccuracy = status;
 800151e:	7bfb      	ldrb	r3, [r7, #15]
 8001520:	b29a      	uxth	r2, r3
 8001522:	4b41      	ldr	r3, [pc, #260]	; (8001628 <BNO080_parseInputReport+0x218>)
 8001524:	801a      	strh	r2, [r3, #0]
			rawAccelX = data1;
 8001526:	4a41      	ldr	r2, [pc, #260]	; (800162c <BNO080_parseInputReport+0x21c>)
 8001528:	89bb      	ldrh	r3, [r7, #12]
 800152a:	8013      	strh	r3, [r2, #0]
			rawAccelY = data2;
 800152c:	4a40      	ldr	r2, [pc, #256]	; (8001630 <BNO080_parseInputReport+0x220>)
 800152e:	897b      	ldrh	r3, [r7, #10]
 8001530:	8013      	strh	r3, [r2, #0]
			rawAccelZ = data3;
 8001532:	4a40      	ldr	r2, [pc, #256]	; (8001634 <BNO080_parseInputReport+0x224>)
 8001534:	893b      	ldrh	r3, [r7, #8]
 8001536:	8013      	strh	r3, [r2, #0]
			break;
 8001538:	e069      	b.n	800160e <BNO080_parseInputReport+0x1fe>
			accelLinAccuracy = status;
 800153a:	7bfb      	ldrb	r3, [r7, #15]
 800153c:	b29a      	uxth	r2, r3
 800153e:	4b3e      	ldr	r3, [pc, #248]	; (8001638 <BNO080_parseInputReport+0x228>)
 8001540:	801a      	strh	r2, [r3, #0]
			rawLinAccelX = data1;
 8001542:	4a3e      	ldr	r2, [pc, #248]	; (800163c <BNO080_parseInputReport+0x22c>)
 8001544:	89bb      	ldrh	r3, [r7, #12]
 8001546:	8013      	strh	r3, [r2, #0]
			rawLinAccelY = data2;
 8001548:	4a3d      	ldr	r2, [pc, #244]	; (8001640 <BNO080_parseInputReport+0x230>)
 800154a:	897b      	ldrh	r3, [r7, #10]
 800154c:	8013      	strh	r3, [r2, #0]
			rawLinAccelZ = data3;
 800154e:	4a3d      	ldr	r2, [pc, #244]	; (8001644 <BNO080_parseInputReport+0x234>)
 8001550:	893b      	ldrh	r3, [r7, #8]
 8001552:	8013      	strh	r3, [r2, #0]
			break;
 8001554:	e05b      	b.n	800160e <BNO080_parseInputReport+0x1fe>
			gyroAccuracy = status;
 8001556:	7bfb      	ldrb	r3, [r7, #15]
 8001558:	b29a      	uxth	r2, r3
 800155a:	4b3b      	ldr	r3, [pc, #236]	; (8001648 <BNO080_parseInputReport+0x238>)
 800155c:	801a      	strh	r2, [r3, #0]
			rawGyroX = data1;
 800155e:	4a3b      	ldr	r2, [pc, #236]	; (800164c <BNO080_parseInputReport+0x23c>)
 8001560:	89bb      	ldrh	r3, [r7, #12]
 8001562:	8013      	strh	r3, [r2, #0]
			rawGyroY = data2;
 8001564:	4a3a      	ldr	r2, [pc, #232]	; (8001650 <BNO080_parseInputReport+0x240>)
 8001566:	897b      	ldrh	r3, [r7, #10]
 8001568:	8013      	strh	r3, [r2, #0]
			rawGyroZ = data3;
 800156a:	4a3a      	ldr	r2, [pc, #232]	; (8001654 <BNO080_parseInputReport+0x244>)
 800156c:	893b      	ldrh	r3, [r7, #8]
 800156e:	8013      	strh	r3, [r2, #0]
			break;
 8001570:	e04d      	b.n	800160e <BNO080_parseInputReport+0x1fe>
			magAccuracy = status;
 8001572:	7bfb      	ldrb	r3, [r7, #15]
 8001574:	b29a      	uxth	r2, r3
 8001576:	4b38      	ldr	r3, [pc, #224]	; (8001658 <BNO080_parseInputReport+0x248>)
 8001578:	801a      	strh	r2, [r3, #0]
			rawMagX = data1;
 800157a:	4a38      	ldr	r2, [pc, #224]	; (800165c <BNO080_parseInputReport+0x24c>)
 800157c:	89bb      	ldrh	r3, [r7, #12]
 800157e:	8013      	strh	r3, [r2, #0]
			rawMagY = data2;
 8001580:	4a37      	ldr	r2, [pc, #220]	; (8001660 <BNO080_parseInputReport+0x250>)
 8001582:	897b      	ldrh	r3, [r7, #10]
 8001584:	8013      	strh	r3, [r2, #0]
			rawMagZ = data3;
 8001586:	4a37      	ldr	r2, [pc, #220]	; (8001664 <BNO080_parseInputReport+0x254>)
 8001588:	893b      	ldrh	r3, [r7, #8]
 800158a:	8013      	strh	r3, [r2, #0]
			break;
 800158c:	e03f      	b.n	800160e <BNO080_parseInputReport+0x1fe>
			quatAccuracy = status;
 800158e:	7bfb      	ldrb	r3, [r7, #15]
 8001590:	b29a      	uxth	r2, r3
 8001592:	4b35      	ldr	r3, [pc, #212]	; (8001668 <BNO080_parseInputReport+0x258>)
 8001594:	801a      	strh	r2, [r3, #0]
			rawQuatI = data1;
 8001596:	4a35      	ldr	r2, [pc, #212]	; (800166c <BNO080_parseInputReport+0x25c>)
 8001598:	89bb      	ldrh	r3, [r7, #12]
 800159a:	8013      	strh	r3, [r2, #0]
			rawQuatJ = data2;
 800159c:	4a34      	ldr	r2, [pc, #208]	; (8001670 <BNO080_parseInputReport+0x260>)
 800159e:	897b      	ldrh	r3, [r7, #10]
 80015a0:	8013      	strh	r3, [r2, #0]
			rawQuatK = data3;
 80015a2:	4a34      	ldr	r2, [pc, #208]	; (8001674 <BNO080_parseInputReport+0x264>)
 80015a4:	893b      	ldrh	r3, [r7, #8]
 80015a6:	8013      	strh	r3, [r2, #0]
			rawQuatReal = data4;
 80015a8:	4a33      	ldr	r2, [pc, #204]	; (8001678 <BNO080_parseInputReport+0x268>)
 80015aa:	8afb      	ldrh	r3, [r7, #22]
 80015ac:	8013      	strh	r3, [r2, #0]
			rawQuatRadianAccuracy = data5; //Only available on rotation vector, not game rot vector
 80015ae:	4a33      	ldr	r2, [pc, #204]	; (800167c <BNO080_parseInputReport+0x26c>)
 80015b0:	8abb      	ldrh	r3, [r7, #20]
 80015b2:	8013      	strh	r3, [r2, #0]
			break;
 80015b4:	e02b      	b.n	800160e <BNO080_parseInputReport+0x1fe>
			stepCount = data3; //Bytes 8/9
 80015b6:	4a32      	ldr	r2, [pc, #200]	; (8001680 <BNO080_parseInputReport+0x270>)
 80015b8:	893b      	ldrh	r3, [r7, #8]
 80015ba:	8013      	strh	r3, [r2, #0]
			break;
 80015bc:	e027      	b.n	800160e <BNO080_parseInputReport+0x1fe>
			stabilityClassifier = shtpData[5 + 4]; //Byte 4 only
 80015be:	4b18      	ldr	r3, [pc, #96]	; (8001620 <BNO080_parseInputReport+0x210>)
 80015c0:	7a5a      	ldrb	r2, [r3, #9]
 80015c2:	4b30      	ldr	r3, [pc, #192]	; (8001684 <BNO080_parseInputReport+0x274>)
 80015c4:	701a      	strb	r2, [r3, #0]
			break;
 80015c6:	e022      	b.n	800160e <BNO080_parseInputReport+0x1fe>
			activityClassifier = shtpData[5 + 5]; //Most likely state
 80015c8:	4b15      	ldr	r3, [pc, #84]	; (8001620 <BNO080_parseInputReport+0x210>)
 80015ca:	7a9a      	ldrb	r2, [r3, #10]
 80015cc:	4b2e      	ldr	r3, [pc, #184]	; (8001688 <BNO080_parseInputReport+0x278>)
 80015ce:	701a      	strb	r2, [r3, #0]
			for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 80015d0:	2300      	movs	r3, #0
 80015d2:	74fb      	strb	r3, [r7, #19]
 80015d4:	e00c      	b.n	80015f0 <BNO080_parseInputReport+0x1e0>
				_activityConfidences[x] = shtpData[11 + x]; //5 bytes of timestamp, byte 6 is first confidence byte
 80015d6:	7cfb      	ldrb	r3, [r7, #19]
 80015d8:	f103 020b 	add.w	r2, r3, #11
 80015dc:	4b2b      	ldr	r3, [pc, #172]	; (800168c <BNO080_parseInputReport+0x27c>)
 80015de:	6819      	ldr	r1, [r3, #0]
 80015e0:	7cfb      	ldrb	r3, [r7, #19]
 80015e2:	440b      	add	r3, r1
 80015e4:	490e      	ldr	r1, [pc, #56]	; (8001620 <BNO080_parseInputReport+0x210>)
 80015e6:	5c8a      	ldrb	r2, [r1, r2]
 80015e8:	701a      	strb	r2, [r3, #0]
			for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 80015ea:	7cfb      	ldrb	r3, [r7, #19]
 80015ec:	3301      	adds	r3, #1
 80015ee:	74fb      	strb	r3, [r7, #19]
 80015f0:	7cfb      	ldrb	r3, [r7, #19]
 80015f2:	2b08      	cmp	r3, #8
 80015f4:	d9ef      	bls.n	80015d6 <BNO080_parseInputReport+0x1c6>
			break;
 80015f6:	e00a      	b.n	800160e <BNO080_parseInputReport+0x1fe>
			uint8_t command = shtpData[5 + 2]; //This is the Command byte of the response
 80015f8:	4b09      	ldr	r3, [pc, #36]	; (8001620 <BNO080_parseInputReport+0x210>)
 80015fa:	79db      	ldrb	r3, [r3, #7]
 80015fc:	71fb      	strb	r3, [r7, #7]
			if (command == COMMAND_ME_CALIBRATE)
 80015fe:	79fb      	ldrb	r3, [r7, #7]
 8001600:	2b07      	cmp	r3, #7
 8001602:	d103      	bne.n	800160c <BNO080_parseInputReport+0x1fc>
				calibrationStatus = shtpData[5 + 5]; //R0 - Status (0 = success, non-zero = fail)
 8001604:	4b06      	ldr	r3, [pc, #24]	; (8001620 <BNO080_parseInputReport+0x210>)
 8001606:	7a9a      	ldrb	r2, [r3, #10]
 8001608:	4b21      	ldr	r3, [pc, #132]	; (8001690 <BNO080_parseInputReport+0x280>)
 800160a:	701a      	strb	r2, [r3, #0]
			break;
 800160c:	bf00      	nop
}
 800160e:	bf00      	nop
 8001610:	371c      	adds	r7, #28
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	20000224 	.word	0x20000224
 8001620:	20000278 	.word	0x20000278
 8001624:	2000022c 	.word	0x2000022c
 8001628:	20000300 	.word	0x20000300
 800162c:	200002f8 	.word	0x200002f8
 8001630:	20000304 	.word	0x20000304
 8001634:	20000262 	.word	0x20000262
 8001638:	2000025e 	.word	0x2000025e
 800163c:	20000232 	.word	0x20000232
 8001640:	200002fc 	.word	0x200002fc
 8001644:	2000026e 	.word	0x2000026e
 8001648:	20000270 	.word	0x20000270
 800164c:	20000272 	.word	0x20000272
 8001650:	2000025a 	.word	0x2000025a
 8001654:	20000258 	.word	0x20000258
 8001658:	20000228 	.word	0x20000228
 800165c:	2000025c 	.word	0x2000025c
 8001660:	200002fe 	.word	0x200002fe
 8001664:	20000260 	.word	0x20000260
 8001668:	20000230 	.word	0x20000230
 800166c:	20000302 	.word	0x20000302
 8001670:	2000026c 	.word	0x2000026c
 8001674:	20000220 	.word	0x20000220
 8001678:	2000022a 	.word	0x2000022a
 800167c:	20000264 	.word	0x20000264
 8001680:	20000306 	.word	0x20000306
 8001684:	20000274 	.word	0x20000274
 8001688:	200002fa 	.word	0x200002fa
 800168c:	20000268 	.word	0x20000268
 8001690:	200002fb 	.word	0x200002fb

08001694 <BNO080_getQuatI>:

//Return the rotation vector quaternion I
float BNO080_getQuatI()
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatI, rotationVector_Q1);
 8001698:	4b07      	ldr	r3, [pc, #28]	; (80016b8 <BNO080_getQuatI+0x24>)
 800169a:	881b      	ldrh	r3, [r3, #0]
 800169c:	b21a      	sxth	r2, r3
 800169e:	4b07      	ldr	r3, [pc, #28]	; (80016bc <BNO080_getQuatI+0x28>)
 80016a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	4619      	mov	r1, r3
 80016a8:	4610      	mov	r0, r2
 80016aa:	f000 f8bb 	bl	8001824 <BNO080_qToFloat>
 80016ae:	eef0 7a40 	vmov.f32	s15, s0
}
 80016b2:	eeb0 0a67 	vmov.f32	s0, s15
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	20000302 	.word	0x20000302
 80016bc:	20000000 	.word	0x20000000

080016c0 <BNO080_getQuatJ>:

//Return the rotation vector quaternion J
float BNO080_getQuatJ()
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatJ, rotationVector_Q1);
 80016c4:	4b07      	ldr	r3, [pc, #28]	; (80016e4 <BNO080_getQuatJ+0x24>)
 80016c6:	881b      	ldrh	r3, [r3, #0]
 80016c8:	b21a      	sxth	r2, r3
 80016ca:	4b07      	ldr	r3, [pc, #28]	; (80016e8 <BNO080_getQuatJ+0x28>)
 80016cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	4619      	mov	r1, r3
 80016d4:	4610      	mov	r0, r2
 80016d6:	f000 f8a5 	bl	8001824 <BNO080_qToFloat>
 80016da:	eef0 7a40 	vmov.f32	s15, s0
}
 80016de:	eeb0 0a67 	vmov.f32	s0, s15
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	2000026c 	.word	0x2000026c
 80016e8:	20000000 	.word	0x20000000

080016ec <BNO080_getQuatK>:

//Return the rotation vector quaternion K
float BNO080_getQuatK()
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatK, rotationVector_Q1);
 80016f0:	4b07      	ldr	r3, [pc, #28]	; (8001710 <BNO080_getQuatK+0x24>)
 80016f2:	881b      	ldrh	r3, [r3, #0]
 80016f4:	b21a      	sxth	r2, r3
 80016f6:	4b07      	ldr	r3, [pc, #28]	; (8001714 <BNO080_getQuatK+0x28>)
 80016f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	4619      	mov	r1, r3
 8001700:	4610      	mov	r0, r2
 8001702:	f000 f88f 	bl	8001824 <BNO080_qToFloat>
 8001706:	eef0 7a40 	vmov.f32	s15, s0
}
 800170a:	eeb0 0a67 	vmov.f32	s0, s15
 800170e:	bd80      	pop	{r7, pc}
 8001710:	20000220 	.word	0x20000220
 8001714:	20000000 	.word	0x20000000

08001718 <BNO080_getQuatReal>:

//Return the rotation vector quaternion Real
float BNO080_getQuatReal()
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatReal, rotationVector_Q1);
 800171c:	4b07      	ldr	r3, [pc, #28]	; (800173c <BNO080_getQuatReal+0x24>)
 800171e:	881b      	ldrh	r3, [r3, #0]
 8001720:	b21a      	sxth	r2, r3
 8001722:	4b07      	ldr	r3, [pc, #28]	; (8001740 <BNO080_getQuatReal+0x28>)
 8001724:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001728:	b2db      	uxtb	r3, r3
 800172a:	4619      	mov	r1, r3
 800172c:	4610      	mov	r0, r2
 800172e:	f000 f879 	bl	8001824 <BNO080_qToFloat>
 8001732:	eef0 7a40 	vmov.f32	s15, s0
}
 8001736:	eeb0 0a67 	vmov.f32	s0, s15
 800173a:	bd80      	pop	{r7, pc}
 800173c:	2000022a 	.word	0x2000022a
 8001740:	20000000 	.word	0x20000000

08001744 <BNO080_getQuatRadianAccuracy>:

//Return the rotation vector accuracy
float BNO080_getQuatRadianAccuracy()
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatRadianAccuracy, rotationVector_Q1);
 8001748:	4b07      	ldr	r3, [pc, #28]	; (8001768 <BNO080_getQuatRadianAccuracy+0x24>)
 800174a:	881b      	ldrh	r3, [r3, #0]
 800174c:	b21a      	sxth	r2, r3
 800174e:	4b07      	ldr	r3, [pc, #28]	; (800176c <BNO080_getQuatRadianAccuracy+0x28>)
 8001750:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001754:	b2db      	uxtb	r3, r3
 8001756:	4619      	mov	r1, r3
 8001758:	4610      	mov	r0, r2
 800175a:	f000 f863 	bl	8001824 <BNO080_qToFloat>
 800175e:	eef0 7a40 	vmov.f32	s15, s0
}
 8001762:	eeb0 0a67 	vmov.f32	s0, s15
 8001766:	bd80      	pop	{r7, pc}
 8001768:	20000264 	.word	0x20000264
 800176c:	20000000 	.word	0x20000000

08001770 <BNO080_getQuatAccuracy>:

//Return the acceleration component
uint8_t BNO080_getQuatAccuracy()
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
	return (quatAccuracy);
 8001774:	4b03      	ldr	r3, [pc, #12]	; (8001784 <BNO080_getQuatAccuracy+0x14>)
 8001776:	881b      	ldrh	r3, [r3, #0]
 8001778:	b2db      	uxtb	r3, r3
}
 800177a:	4618      	mov	r0, r3
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr
 8001784:	20000230 	.word	0x20000230

08001788 <BNO080_getMagX>:
	return (gyroAccuracy);
}

//Return the magnetometer component
float BNO080_getMagX()
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawMagX, magnetometer_Q1);
 800178c:	4b07      	ldr	r3, [pc, #28]	; (80017ac <BNO080_getMagX+0x24>)
 800178e:	881b      	ldrh	r3, [r3, #0]
 8001790:	b21a      	sxth	r2, r3
 8001792:	4b07      	ldr	r3, [pc, #28]	; (80017b0 <BNO080_getMagX+0x28>)
 8001794:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001798:	b2db      	uxtb	r3, r3
 800179a:	4619      	mov	r1, r3
 800179c:	4610      	mov	r0, r2
 800179e:	f000 f841 	bl	8001824 <BNO080_qToFloat>
 80017a2:	eef0 7a40 	vmov.f32	s15, s0
}
 80017a6:	eeb0 0a67 	vmov.f32	s0, s15
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	2000025c 	.word	0x2000025c
 80017b0:	20000002 	.word	0x20000002

080017b4 <BNO080_getMagY>:

//Return the magnetometer component
float BNO080_getMagY()
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawMagY, magnetometer_Q1);
 80017b8:	4b07      	ldr	r3, [pc, #28]	; (80017d8 <BNO080_getMagY+0x24>)
 80017ba:	881b      	ldrh	r3, [r3, #0]
 80017bc:	b21a      	sxth	r2, r3
 80017be:	4b07      	ldr	r3, [pc, #28]	; (80017dc <BNO080_getMagY+0x28>)
 80017c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	4619      	mov	r1, r3
 80017c8:	4610      	mov	r0, r2
 80017ca:	f000 f82b 	bl	8001824 <BNO080_qToFloat>
 80017ce:	eef0 7a40 	vmov.f32	s15, s0
}
 80017d2:	eeb0 0a67 	vmov.f32	s0, s15
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	200002fe 	.word	0x200002fe
 80017dc:	20000002 	.word	0x20000002

080017e0 <BNO080_getMagZ>:

//Return the magnetometer component
float BNO080_getMagZ()
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawMagZ, magnetometer_Q1);
 80017e4:	4b07      	ldr	r3, [pc, #28]	; (8001804 <BNO080_getMagZ+0x24>)
 80017e6:	881b      	ldrh	r3, [r3, #0]
 80017e8:	b21a      	sxth	r2, r3
 80017ea:	4b07      	ldr	r3, [pc, #28]	; (8001808 <BNO080_getMagZ+0x28>)
 80017ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	4619      	mov	r1, r3
 80017f4:	4610      	mov	r0, r2
 80017f6:	f000 f815 	bl	8001824 <BNO080_qToFloat>
 80017fa:	eef0 7a40 	vmov.f32	s15, s0
}
 80017fe:	eeb0 0a67 	vmov.f32	s0, s15
 8001802:	bd80      	pop	{r7, pc}
 8001804:	20000260 	.word	0x20000260
 8001808:	20000002 	.word	0x20000002

0800180c <BNO080_getMagAccuracy>:

//Return the mag component
uint8_t BNO080_getMagAccuracy()
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
	return (magAccuracy);
 8001810:	4b03      	ldr	r3, [pc, #12]	; (8001820 <BNO080_getMagAccuracy+0x14>)
 8001812:	881b      	ldrh	r3, [r3, #0]
 8001814:	b2db      	uxtb	r3, r3
}
 8001816:	4618      	mov	r0, r3
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr
 8001820:	20000228 	.word	0x20000228

08001824 <BNO080_qToFloat>:
}

//Given a register value and a Q point, convert to float
//See https://en.wikipedia.org/wiki/Q_(number_format)
float BNO080_qToFloat(int16_t fixedPointValue, uint8_t qPoint)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	ed2d 8b02 	vpush	{d8}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	460a      	mov	r2, r1
 8001832:	80fb      	strh	r3, [r7, #6]
 8001834:	4613      	mov	r3, r2
 8001836:	717b      	strb	r3, [r7, #5]
	return fixedPointValue * powf(2, qPoint * -1);
 8001838:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800183c:	ee07 3a90 	vmov	s15, r3
 8001840:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001844:	797b      	ldrb	r3, [r7, #5]
 8001846:	425b      	negs	r3, r3
 8001848:	ee07 3a90 	vmov	s15, r3
 800184c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001850:	eef0 0a67 	vmov.f32	s1, s15
 8001854:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001858:	f008 fdd2 	bl	800a400 <powf>
 800185c:	eef0 7a40 	vmov.f32	s15, s0
 8001860:	ee68 7a27 	vmul.f32	s15, s16, s15
}
 8001864:	eeb0 0a67 	vmov.f32	s0, s15
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	ecbd 8b02 	vpop	{d8}
 8001870:	bd80      	pop	{r7, pc}

08001872 <BNO080_enableRotationVector>:

//Sends the packet to enable the rotation vector
void BNO080_enableRotationVector(uint16_t timeBetweenReports)
{
 8001872:	b580      	push	{r7, lr}
 8001874:	b082      	sub	sp, #8
 8001876:	af00      	add	r7, sp, #0
 8001878:	4603      	mov	r3, r0
 800187a:	80fb      	strh	r3, [r7, #6]
	BNO080_setFeatureCommand(SENSOR_REPORTID_ROTATION_VECTOR, timeBetweenReports, 0);
 800187c:	88fb      	ldrh	r3, [r7, #6]
 800187e:	2200      	movs	r2, #0
 8001880:	4619      	mov	r1, r3
 8001882:	2005      	movs	r0, #5
 8001884:	f000 f83a 	bl	80018fc <BNO080_setFeatureCommand>
}
 8001888:	bf00      	nop
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}

08001890 <BNO080_enableGameRotationVector>:

//Sends the packet to enable the rotation vector
void BNO080_enableGameRotationVector(uint16_t timeBetweenReports)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	4603      	mov	r3, r0
 8001898:	80fb      	strh	r3, [r7, #6]
	BNO080_setFeatureCommand(SENSOR_REPORTID_GAME_ROTATION_VECTOR, timeBetweenReports, 0);
 800189a:	88fb      	ldrh	r3, [r7, #6]
 800189c:	2200      	movs	r2, #0
 800189e:	4619      	mov	r1, r3
 80018a0:	2008      	movs	r0, #8
 80018a2:	f000 f82b 	bl	80018fc <BNO080_setFeatureCommand>
}
 80018a6:	bf00      	nop
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <BNO080_enableMagnetometer>:
	BNO080_setFeatureCommand(SENSOR_REPORTID_GYROSCOPE, timeBetweenReports, 0);
}

//Sends the packet to enable the magnetometer
void BNO080_enableMagnetometer(uint16_t timeBetweenReports)
{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b082      	sub	sp, #8
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	4603      	mov	r3, r0
 80018b6:	80fb      	strh	r3, [r7, #6]
	BNO080_setFeatureCommand(SENSOR_REPORTID_MAGNETIC_FIELD, timeBetweenReports, 0);
 80018b8:	88fb      	ldrh	r3, [r7, #6]
 80018ba:	2200      	movs	r2, #0
 80018bc:	4619      	mov	r1, r3
 80018be:	2003      	movs	r0, #3
 80018c0:	f000 f81c 	bl	80018fc <BNO080_setFeatureCommand>
}
 80018c4:	bf00      	nop
 80018c6:	3708      	adds	r7, #8
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}

080018cc <BNO080_calibrateAll>:
	BNO080_sendCalibrateCommand(CALIBRATE_PLANAR_ACCEL);
}

//See 2.2 of the Calibration Procedure document 1000-4044
void BNO080_calibrateAll()
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
	BNO080_sendCalibrateCommand(CALIBRATE_ACCEL_GYRO_MAG);
 80018d0:	2004      	movs	r0, #4
 80018d2:	f000 f885 	bl	80019e0 <BNO080_sendCalibrateCommand>
}
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}
	...

080018dc <BNO080_calibrationComplete>:
}

//See page 51 of reference manual - ME Calibration Response
//Byte 5 is parsed during the readPacket and stored in calibrationStatus
int BNO080_calibrationComplete()
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
	if (calibrationStatus == 0)
 80018e0:	4b05      	ldr	r3, [pc, #20]	; (80018f8 <BNO080_calibrationComplete+0x1c>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d101      	bne.n	80018ec <BNO080_calibrationComplete+0x10>
		return (1);
 80018e8:	2301      	movs	r3, #1
 80018ea:	e000      	b.n	80018ee <BNO080_calibrationComplete+0x12>
	return (0);
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr
 80018f8:	200002fb 	.word	0x200002fb

080018fc <BNO080_setFeatureCommand>:

//Given a sensor's report ID, this tells the BNO080 to begin reporting the values
//Also sets the specific config word. Useful for personal activity classifier
void BNO080_setFeatureCommand(uint8_t reportID, uint32_t microsBetweenReports, uint32_t specificConfig)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	4603      	mov	r3, r0
 8001904:	60b9      	str	r1, [r7, #8]
 8001906:	607a      	str	r2, [r7, #4]
 8001908:	73fb      	strb	r3, [r7, #15]
	shtpData[0] = SHTP_REPORT_SET_FEATURE_COMMAND;	 //Set feature command. Reference page 55
 800190a:	4b24      	ldr	r3, [pc, #144]	; (800199c <BNO080_setFeatureCommand+0xa0>)
 800190c:	22fd      	movs	r2, #253	; 0xfd
 800190e:	701a      	strb	r2, [r3, #0]
	shtpData[1] = reportID;						 //Feature Report ID. 0x01 = Accelerometer, 0x05 = Rotation vector
 8001910:	4a22      	ldr	r2, [pc, #136]	; (800199c <BNO080_setFeatureCommand+0xa0>)
 8001912:	7bfb      	ldrb	r3, [r7, #15]
 8001914:	7053      	strb	r3, [r2, #1]
	shtpData[2] = 0;							 //Feature flags
 8001916:	4b21      	ldr	r3, [pc, #132]	; (800199c <BNO080_setFeatureCommand+0xa0>)
 8001918:	2200      	movs	r2, #0
 800191a:	709a      	strb	r2, [r3, #2]
	shtpData[3] = 0;							 //Change sensitivity (LSB)
 800191c:	4b1f      	ldr	r3, [pc, #124]	; (800199c <BNO080_setFeatureCommand+0xa0>)
 800191e:	2200      	movs	r2, #0
 8001920:	70da      	strb	r2, [r3, #3]
	shtpData[4] = 0;							 //Change sensitivity (MSB)
 8001922:	4b1e      	ldr	r3, [pc, #120]	; (800199c <BNO080_setFeatureCommand+0xa0>)
 8001924:	2200      	movs	r2, #0
 8001926:	711a      	strb	r2, [r3, #4]
	shtpData[5] = (microsBetweenReports >> 0) & 0xFF;  //Report interval (LSB) in microseconds. 0x7A120 = 500ms
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	b2da      	uxtb	r2, r3
 800192c:	4b1b      	ldr	r3, [pc, #108]	; (800199c <BNO080_setFeatureCommand+0xa0>)
 800192e:	715a      	strb	r2, [r3, #5]
	shtpData[6] = (microsBetweenReports >> 8) & 0xFF;  //Report interval
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	0a1b      	lsrs	r3, r3, #8
 8001934:	b2da      	uxtb	r2, r3
 8001936:	4b19      	ldr	r3, [pc, #100]	; (800199c <BNO080_setFeatureCommand+0xa0>)
 8001938:	719a      	strb	r2, [r3, #6]
	shtpData[7] = (microsBetweenReports >> 16) & 0xFF; //Report interval
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	0c1b      	lsrs	r3, r3, #16
 800193e:	b2da      	uxtb	r2, r3
 8001940:	4b16      	ldr	r3, [pc, #88]	; (800199c <BNO080_setFeatureCommand+0xa0>)
 8001942:	71da      	strb	r2, [r3, #7]
	shtpData[8] = (microsBetweenReports >> 24) & 0xFF; //Report interval (MSB)
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	0e1b      	lsrs	r3, r3, #24
 8001948:	b2da      	uxtb	r2, r3
 800194a:	4b14      	ldr	r3, [pc, #80]	; (800199c <BNO080_setFeatureCommand+0xa0>)
 800194c:	721a      	strb	r2, [r3, #8]
	shtpData[9] = 0;							 //Batch Interval (LSB)
 800194e:	4b13      	ldr	r3, [pc, #76]	; (800199c <BNO080_setFeatureCommand+0xa0>)
 8001950:	2200      	movs	r2, #0
 8001952:	725a      	strb	r2, [r3, #9]
	shtpData[10] = 0;							 //Batch Interval
 8001954:	4b11      	ldr	r3, [pc, #68]	; (800199c <BNO080_setFeatureCommand+0xa0>)
 8001956:	2200      	movs	r2, #0
 8001958:	729a      	strb	r2, [r3, #10]
	shtpData[11] = 0;							 //Batch Interval
 800195a:	4b10      	ldr	r3, [pc, #64]	; (800199c <BNO080_setFeatureCommand+0xa0>)
 800195c:	2200      	movs	r2, #0
 800195e:	72da      	strb	r2, [r3, #11]
	shtpData[12] = 0;							 //Batch Interval (MSB)
 8001960:	4b0e      	ldr	r3, [pc, #56]	; (800199c <BNO080_setFeatureCommand+0xa0>)
 8001962:	2200      	movs	r2, #0
 8001964:	731a      	strb	r2, [r3, #12]
	shtpData[13] = (specificConfig >> 0) & 0xFF;	   	 //Sensor-specific config (LSB)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	b2da      	uxtb	r2, r3
 800196a:	4b0c      	ldr	r3, [pc, #48]	; (800199c <BNO080_setFeatureCommand+0xa0>)
 800196c:	735a      	strb	r2, [r3, #13]
	shtpData[14] = (specificConfig >> 8) & 0xFF;	   	 //Sensor-specific config
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	0a1b      	lsrs	r3, r3, #8
 8001972:	b2da      	uxtb	r2, r3
 8001974:	4b09      	ldr	r3, [pc, #36]	; (800199c <BNO080_setFeatureCommand+0xa0>)
 8001976:	739a      	strb	r2, [r3, #14]
	shtpData[15] = (specificConfig >> 16) & 0xFF;	 //Sensor-specific config
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	0c1b      	lsrs	r3, r3, #16
 800197c:	b2da      	uxtb	r2, r3
 800197e:	4b07      	ldr	r3, [pc, #28]	; (800199c <BNO080_setFeatureCommand+0xa0>)
 8001980:	73da      	strb	r2, [r3, #15]
	shtpData[16] = (specificConfig >> 24) & 0xFF;	 //Sensor-specific config (MSB)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	0e1b      	lsrs	r3, r3, #24
 8001986:	b2da      	uxtb	r2, r3
 8001988:	4b04      	ldr	r3, [pc, #16]	; (800199c <BNO080_setFeatureCommand+0xa0>)
 800198a:	741a      	strb	r2, [r3, #16]

	//Transmit packet on channel 2, 17 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 17);
 800198c:	2111      	movs	r1, #17
 800198e:	2002      	movs	r0, #2
 8001990:	f000 f938 	bl	8001c04 <BNO080_sendPacket>
}
 8001994:	bf00      	nop
 8001996:	3710      	adds	r7, #16
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	20000278 	.word	0x20000278

080019a0 <BNO080_sendCommand>:

//Tell the sensor to do a command
//See 6.3.8 page 41, Command request
//The caller is expected to set P0 through P8 prior to calling
void BNO080_sendCommand(uint8_t command)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	4603      	mov	r3, r0
 80019a8:	71fb      	strb	r3, [r7, #7]
	shtpData[0] = SHTP_REPORT_COMMAND_REQUEST; //Command Request
 80019aa:	4b0b      	ldr	r3, [pc, #44]	; (80019d8 <BNO080_sendCommand+0x38>)
 80019ac:	22f2      	movs	r2, #242	; 0xf2
 80019ae:	701a      	strb	r2, [r3, #0]
	shtpData[1] = commandSequenceNumber++;	 //Increments automatically each function call
 80019b0:	4b0a      	ldr	r3, [pc, #40]	; (80019dc <BNO080_sendCommand+0x3c>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	1c5a      	adds	r2, r3, #1
 80019b6:	b2d1      	uxtb	r1, r2
 80019b8:	4a08      	ldr	r2, [pc, #32]	; (80019dc <BNO080_sendCommand+0x3c>)
 80019ba:	7011      	strb	r1, [r2, #0]
 80019bc:	4a06      	ldr	r2, [pc, #24]	; (80019d8 <BNO080_sendCommand+0x38>)
 80019be:	7053      	strb	r3, [r2, #1]
	shtpData[2] = command;					   //Command
 80019c0:	4a05      	ldr	r2, [pc, #20]	; (80019d8 <BNO080_sendCommand+0x38>)
 80019c2:	79fb      	ldrb	r3, [r7, #7]
 80019c4:	7093      	strb	r3, [r2, #2]
	shtpData[9] = 0;
	shtpData[10] = 0;
	shtpData[11] = 0;*/

	//Transmit packet on channel 2, 12 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 12);
 80019c6:	210c      	movs	r1, #12
 80019c8:	2002      	movs	r0, #2
 80019ca:	f000 f91b 	bl	8001c04 <BNO080_sendPacket>
}
 80019ce:	bf00      	nop
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	20000278 	.word	0x20000278
 80019dc:	20000206 	.word	0x20000206

080019e0 <BNO080_sendCalibrateCommand>:

//This tells the BNO080 to begin calibrating
//See page 50 of reference manual and the 1000-4044 calibration doc
void BNO080_sendCalibrateCommand(uint8_t thingToCalibrate)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	4603      	mov	r3, r0
 80019e8:	71fb      	strb	r3, [r7, #7]
	shtpData[8] = 0; //P5 - Reserved
	shtpData[9] = 0; //P6 - Reserved
	shtpData[10] = 0; //P7 - Reserved
	shtpData[11] = 0; //P8 - Reserved*/

	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 80019ea:	2303      	movs	r3, #3
 80019ec:	73fb      	strb	r3, [r7, #15]
 80019ee:	e006      	b.n	80019fe <BNO080_sendCalibrateCommand+0x1e>
		shtpData[x] = 0;
 80019f0:	7bfb      	ldrb	r3, [r7, #15]
 80019f2:	4a1d      	ldr	r2, [pc, #116]	; (8001a68 <BNO080_sendCalibrateCommand+0x88>)
 80019f4:	2100      	movs	r1, #0
 80019f6:	54d1      	strb	r1, [r2, r3]
	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 80019f8:	7bfb      	ldrb	r3, [r7, #15]
 80019fa:	3301      	adds	r3, #1
 80019fc:	73fb      	strb	r3, [r7, #15]
 80019fe:	7bfb      	ldrb	r3, [r7, #15]
 8001a00:	2b0b      	cmp	r3, #11
 8001a02:	d9f5      	bls.n	80019f0 <BNO080_sendCalibrateCommand+0x10>

	if (thingToCalibrate == CALIBRATE_ACCEL)
 8001a04:	79fb      	ldrb	r3, [r7, #7]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d103      	bne.n	8001a12 <BNO080_sendCalibrateCommand+0x32>
		shtpData[3] = 1;
 8001a0a:	4b17      	ldr	r3, [pc, #92]	; (8001a68 <BNO080_sendCalibrateCommand+0x88>)
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	70da      	strb	r2, [r3, #3]
 8001a10:	e020      	b.n	8001a54 <BNO080_sendCalibrateCommand+0x74>
	else if (thingToCalibrate == CALIBRATE_GYRO)
 8001a12:	79fb      	ldrb	r3, [r7, #7]
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d103      	bne.n	8001a20 <BNO080_sendCalibrateCommand+0x40>
		shtpData[4] = 1;
 8001a18:	4b13      	ldr	r3, [pc, #76]	; (8001a68 <BNO080_sendCalibrateCommand+0x88>)
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	711a      	strb	r2, [r3, #4]
 8001a1e:	e019      	b.n	8001a54 <BNO080_sendCalibrateCommand+0x74>
	else if (thingToCalibrate == CALIBRATE_MAG)
 8001a20:	79fb      	ldrb	r3, [r7, #7]
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d103      	bne.n	8001a2e <BNO080_sendCalibrateCommand+0x4e>
		shtpData[5] = 1;
 8001a26:	4b10      	ldr	r3, [pc, #64]	; (8001a68 <BNO080_sendCalibrateCommand+0x88>)
 8001a28:	2201      	movs	r2, #1
 8001a2a:	715a      	strb	r2, [r3, #5]
 8001a2c:	e012      	b.n	8001a54 <BNO080_sendCalibrateCommand+0x74>
	else if (thingToCalibrate == CALIBRATE_PLANAR_ACCEL)
 8001a2e:	79fb      	ldrb	r3, [r7, #7]
 8001a30:	2b03      	cmp	r3, #3
 8001a32:	d103      	bne.n	8001a3c <BNO080_sendCalibrateCommand+0x5c>
		shtpData[7] = 1;
 8001a34:	4b0c      	ldr	r3, [pc, #48]	; (8001a68 <BNO080_sendCalibrateCommand+0x88>)
 8001a36:	2201      	movs	r2, #1
 8001a38:	71da      	strb	r2, [r3, #7]
 8001a3a:	e00b      	b.n	8001a54 <BNO080_sendCalibrateCommand+0x74>
	else if (thingToCalibrate == CALIBRATE_ACCEL_GYRO_MAG)
 8001a3c:	79fb      	ldrb	r3, [r7, #7]
 8001a3e:	2b04      	cmp	r3, #4
 8001a40:	d108      	bne.n	8001a54 <BNO080_sendCalibrateCommand+0x74>
	{
		shtpData[3] = 1;
 8001a42:	4b09      	ldr	r3, [pc, #36]	; (8001a68 <BNO080_sendCalibrateCommand+0x88>)
 8001a44:	2201      	movs	r2, #1
 8001a46:	70da      	strb	r2, [r3, #3]
		shtpData[4] = 1;
 8001a48:	4b07      	ldr	r3, [pc, #28]	; (8001a68 <BNO080_sendCalibrateCommand+0x88>)
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	711a      	strb	r2, [r3, #4]
		shtpData[5] = 1;
 8001a4e:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <BNO080_sendCalibrateCommand+0x88>)
 8001a50:	2201      	movs	r2, #1
 8001a52:	715a      	strb	r2, [r3, #5]
	}
	else if (thingToCalibrate == CALIBRATE_STOP)
		; //Do nothing, bytes are set to zero

	//Make the internal calStatus variable non-zero (operation failed) so that user can test while we wait
	calibrationStatus = 1;
 8001a54:	4b05      	ldr	r3, [pc, #20]	; (8001a6c <BNO080_sendCalibrateCommand+0x8c>)
 8001a56:	2201      	movs	r2, #1
 8001a58:	701a      	strb	r2, [r3, #0]

	//Using this shtpData packet, send a command
	BNO080_sendCommand(COMMAND_ME_CALIBRATE);
 8001a5a:	2007      	movs	r0, #7
 8001a5c:	f7ff ffa0 	bl	80019a0 <BNO080_sendCommand>
}
 8001a60:	bf00      	nop
 8001a62:	3710      	adds	r7, #16
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	20000278 	.word	0x20000278
 8001a6c:	200002fb 	.word	0x200002fb

08001a70 <BNO080_requestCalibrationStatus>:

//Request ME Calibration Status from BNO080
//See page 51 of reference manual
void BNO080_requestCalibrationStatus()
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
	shtpData[8] = 0; //P5 - Reserved
	shtpData[9] = 0; //P6 - Reserved
	shtpData[10] = 0; //P7 - Reserved
	shtpData[11] = 0; //P8 - Reserved*/

	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8001a76:	2303      	movs	r3, #3
 8001a78:	71fb      	strb	r3, [r7, #7]
 8001a7a:	e006      	b.n	8001a8a <BNO080_requestCalibrationStatus+0x1a>
		shtpData[x] = 0;
 8001a7c:	79fb      	ldrb	r3, [r7, #7]
 8001a7e:	4a09      	ldr	r2, [pc, #36]	; (8001aa4 <BNO080_requestCalibrationStatus+0x34>)
 8001a80:	2100      	movs	r1, #0
 8001a82:	54d1      	strb	r1, [r2, r3]
	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8001a84:	79fb      	ldrb	r3, [r7, #7]
 8001a86:	3301      	adds	r3, #1
 8001a88:	71fb      	strb	r3, [r7, #7]
 8001a8a:	79fb      	ldrb	r3, [r7, #7]
 8001a8c:	2b0b      	cmp	r3, #11
 8001a8e:	d9f5      	bls.n	8001a7c <BNO080_requestCalibrationStatus+0xc>

	shtpData[6] = 0x01; //P3 - 0x01 - Subcommand: Get ME Calibration
 8001a90:	4b04      	ldr	r3, [pc, #16]	; (8001aa4 <BNO080_requestCalibrationStatus+0x34>)
 8001a92:	2201      	movs	r2, #1
 8001a94:	719a      	strb	r2, [r3, #6]

	//Using this shtpData packet, send a command
	BNO080_sendCommand(COMMAND_ME_CALIBRATE);
 8001a96:	2007      	movs	r0, #7
 8001a98:	f7ff ff82 	bl	80019a0 <BNO080_sendCommand>
}
 8001a9c:	bf00      	nop
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	20000278 	.word	0x20000278

08001aa8 <BNO080_saveCalibration>:

//This tells the BNO080 to save the Dynamic Calibration Data (DCD) to flash
//See page 49 of reference manual and the 1000-4044 calibration doc
void BNO080_saveCalibration()
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
	shtpData[8] = 0; //P5 - Reserved
	shtpData[9] = 0; //P6 - Reserved
	shtpData[10] = 0; //P7 - Reserved
	shtpData[11] = 0; //P8 - Reserved*/

	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8001aae:	2303      	movs	r3, #3
 8001ab0:	71fb      	strb	r3, [r7, #7]
 8001ab2:	e006      	b.n	8001ac2 <BNO080_saveCalibration+0x1a>
		shtpData[x] = 0;
 8001ab4:	79fb      	ldrb	r3, [r7, #7]
 8001ab6:	4a08      	ldr	r2, [pc, #32]	; (8001ad8 <BNO080_saveCalibration+0x30>)
 8001ab8:	2100      	movs	r1, #0
 8001aba:	54d1      	strb	r1, [r2, r3]
	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8001abc:	79fb      	ldrb	r3, [r7, #7]
 8001abe:	3301      	adds	r3, #1
 8001ac0:	71fb      	strb	r3, [r7, #7]
 8001ac2:	79fb      	ldrb	r3, [r7, #7]
 8001ac4:	2b0b      	cmp	r3, #11
 8001ac6:	d9f5      	bls.n	8001ab4 <BNO080_saveCalibration+0xc>

	//Using this shtpData packet, send a command
	BNO080_sendCommand(COMMAND_DCD); //Save DCD command
 8001ac8:	2006      	movs	r0, #6
 8001aca:	f7ff ff69 	bl	80019a0 <BNO080_sendCommand>
}
 8001ace:	bf00      	nop
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	20000278 	.word	0x20000278

08001adc <BNO080_waitForSPI>:

//Blocking wait for BNO080 to assert (pull low) the INT pin
//indicating it's ready for comm. Can take more than 104ms
//after a hardware reset
int BNO080_waitForSPI(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	607b      	str	r3, [r7, #4]
 8001ae6:	e00c      	b.n	8001b02 <BNO080_waitForSPI+0x26>
	{
		if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 0)
 8001ae8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001aec:	480b      	ldr	r0, [pc, #44]	; (8001b1c <BNO080_waitForSPI+0x40>)
 8001aee:	f7ff fa93 	bl	8001018 <LL_GPIO_IsInputPinSet>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d101      	bne.n	8001afc <BNO080_waitForSPI+0x20>
		{
			//printf("\nData available\n");
			return (1);
 8001af8:	2301      	movs	r3, #1
 8001afa:	e00a      	b.n	8001b12 <BNO080_waitForSPI+0x36>
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	3301      	adds	r3, #1
 8001b00:	607b      	str	r3, [r7, #4]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b08:	d1ee      	bne.n	8001ae8 <BNO080_waitForSPI+0xc>
		}
		//printf("SPI Wait %d\n", counter);
	}
	printf("\nData not available\n");
 8001b0a:	4805      	ldr	r0, [pc, #20]	; (8001b20 <BNO080_waitForSPI+0x44>)
 8001b0c:	f006 fd64 	bl	80085d8 <puts>
	return (0);
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	40020800 	.word	0x40020800
 8001b20:	0800b3a8 	.word	0x0800b3a8

08001b24 <BNO080_receivePacket>:


//Check to see if there is any new data available
//Read the contents of the incoming packet into the shtpData array
int BNO080_receivePacket(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
	uint8_t incoming;

	if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 1)
 8001b2a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b2e:	4831      	ldr	r0, [pc, #196]	; (8001bf4 <BNO080_receivePacket+0xd0>)
 8001b30:	f7ff fa72 	bl	8001018 <LL_GPIO_IsInputPinSet>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d101      	bne.n	8001b3e <BNO080_receivePacket+0x1a>
		return (0); //Data is not available
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	e056      	b.n	8001bec <BNO080_receivePacket+0xc8>

	//Old way: if (BNO080_waitForSPI() == 0) return (0); //Something went wrong

	//Get first four bytes to find out how much data we need to read

	CHIP_SELECT(BNO080);
 8001b3e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b42:	482d      	ldr	r0, [pc, #180]	; (8001bf8 <BNO080_receivePacket+0xd4>)
 8001b44:	f7ff fa8b 	bl	800105e <LL_GPIO_ResetOutputPin>

	//Get the first four bytes, aka the packet header
	uint8_t packetLSB = SPI2_SendByte(0);
 8001b48:	2000      	movs	r0, #0
 8001b4a:	f7ff fbf5 	bl	8001338 <SPI2_SendByte>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	737b      	strb	r3, [r7, #13]
	uint8_t packetMSB = SPI2_SendByte(0);
 8001b52:	2000      	movs	r0, #0
 8001b54:	f7ff fbf0 	bl	8001338 <SPI2_SendByte>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	733b      	strb	r3, [r7, #12]
	uint8_t channelNumber = SPI2_SendByte(0);
 8001b5c:	2000      	movs	r0, #0
 8001b5e:	f7ff fbeb 	bl	8001338 <SPI2_SendByte>
 8001b62:	4603      	mov	r3, r0
 8001b64:	72fb      	strb	r3, [r7, #11]
	uint8_t sequenceNumber = SPI2_SendByte(0); //Not sure if we need to store this or not
 8001b66:	2000      	movs	r0, #0
 8001b68:	f7ff fbe6 	bl	8001338 <SPI2_SendByte>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	72bb      	strb	r3, [r7, #10]

	//Store the header info
	shtpHeader[0] = packetLSB;
 8001b70:	4a22      	ldr	r2, [pc, #136]	; (8001bfc <BNO080_receivePacket+0xd8>)
 8001b72:	7b7b      	ldrb	r3, [r7, #13]
 8001b74:	7013      	strb	r3, [r2, #0]
	shtpHeader[1] = packetMSB;
 8001b76:	4a21      	ldr	r2, [pc, #132]	; (8001bfc <BNO080_receivePacket+0xd8>)
 8001b78:	7b3b      	ldrb	r3, [r7, #12]
 8001b7a:	7053      	strb	r3, [r2, #1]
	shtpHeader[2] = channelNumber;
 8001b7c:	4a1f      	ldr	r2, [pc, #124]	; (8001bfc <BNO080_receivePacket+0xd8>)
 8001b7e:	7afb      	ldrb	r3, [r7, #11]
 8001b80:	7093      	strb	r3, [r2, #2]
	shtpHeader[3] = sequenceNumber;
 8001b82:	4a1e      	ldr	r2, [pc, #120]	; (8001bfc <BNO080_receivePacket+0xd8>)
 8001b84:	7abb      	ldrb	r3, [r7, #10]
 8001b86:	70d3      	strb	r3, [r2, #3]

	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)packetMSB << 8 | packetLSB);
 8001b88:	7b3b      	ldrb	r3, [r7, #12]
 8001b8a:	021b      	lsls	r3, r3, #8
 8001b8c:	b21a      	sxth	r2, r3
 8001b8e:	7b7b      	ldrb	r3, [r7, #13]
 8001b90:	b21b      	sxth	r3, r3
 8001b92:	4313      	orrs	r3, r2
 8001b94:	813b      	strh	r3, [r7, #8]
	dataLength &= 0x7fff; //Clear the MSbit.
 8001b96:	893b      	ldrh	r3, [r7, #8]
 8001b98:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001b9c:	813b      	strh	r3, [r7, #8]
	//This bit indicates if this package is a continuation of the last. Ignore it for now.
	//TODO catch this as an error and exit
	if (dataLength == 0)
 8001b9e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d101      	bne.n	8001baa <BNO080_receivePacket+0x86>
	{
		//Packet is empty
		return (0); //All done
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	e020      	b.n	8001bec <BNO080_receivePacket+0xc8>
	}
	dataLength -= 4; //Remove the header bytes from the data count
 8001baa:	893b      	ldrh	r3, [r7, #8]
 8001bac:	3b04      	subs	r3, #4
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	813b      	strh	r3, [r7, #8]

	//printf("length: %d\n", dataLength);

	//Read incoming data into the shtpData array
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	81fb      	strh	r3, [r7, #14]
 8001bb6:	e00e      	b.n	8001bd6 <BNO080_receivePacket+0xb2>
	{
		incoming = SPI2_SendByte(0xFF);
 8001bb8:	20ff      	movs	r0, #255	; 0xff
 8001bba:	f7ff fbbd 	bl	8001338 <SPI2_SendByte>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	71fb      	strb	r3, [r7, #7]
		//printf("%d ", incoming);
		if (dataSpot < MAX_PACKET_SIZE)	//BNO080 can respond with upto 270 bytes, avoid overflow
 8001bc2:	89fb      	ldrh	r3, [r7, #14]
 8001bc4:	2b7f      	cmp	r3, #127	; 0x7f
 8001bc6:	d803      	bhi.n	8001bd0 <BNO080_receivePacket+0xac>
			shtpData[dataSpot] = incoming; //Store data into the shtpData array
 8001bc8:	89fb      	ldrh	r3, [r7, #14]
 8001bca:	490d      	ldr	r1, [pc, #52]	; (8001c00 <BNO080_receivePacket+0xdc>)
 8001bcc:	79fa      	ldrb	r2, [r7, #7]
 8001bce:	54ca      	strb	r2, [r1, r3]
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 8001bd0:	89fb      	ldrh	r3, [r7, #14]
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	81fb      	strh	r3, [r7, #14]
 8001bd6:	89fa      	ldrh	r2, [r7, #14]
 8001bd8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	dbeb      	blt.n	8001bb8 <BNO080_receivePacket+0x94>
	}
	//printf("\n");

	CHIP_DESELECT(BNO080); //Release BNO080
 8001be0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001be4:	4804      	ldr	r0, [pc, #16]	; (8001bf8 <BNO080_receivePacket+0xd4>)
 8001be6:	f7ff fa2c 	bl	8001042 <LL_GPIO_SetOutputPin>
	return (1); //We're done!
 8001bea:	2301      	movs	r3, #1
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3710      	adds	r7, #16
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	40020800 	.word	0x40020800
 8001bf8:	40020400 	.word	0x40020400
 8001bfc:	20000224 	.word	0x20000224
 8001c00:	20000278 	.word	0x20000278

08001c04 <BNO080_sendPacket>:

//Given the data packet, send the header then the data
//Returns false if sensor does not ACK
//TODO - Arduino has a max 32 byte send. Break sending into multi packets if needed.
int BNO080_sendPacket(uint8_t channelNumber, uint8_t dataLength)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	460a      	mov	r2, r1
 8001c0e:	71fb      	strb	r3, [r7, #7]
 8001c10:	4613      	mov	r3, r2
 8001c12:	71bb      	strb	r3, [r7, #6]
	uint8_t packetLength = dataLength + 4; //Add four bytes for the header
 8001c14:	79bb      	ldrb	r3, [r7, #6]
 8001c16:	3304      	adds	r3, #4
 8001c18:	73bb      	strb	r3, [r7, #14]

	//Wait for BNO080 to indicate it is available for communication
	if (BNO080_waitForSPI() == 0)
 8001c1a:	f7ff ff5f 	bl	8001adc <BNO080_waitForSPI>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d101      	bne.n	8001c28 <BNO080_sendPacket+0x24>
		return (0); //Data is not available
 8001c24:	2300      	movs	r3, #0
 8001c26:	e032      	b.n	8001c8e <BNO080_sendPacket+0x8a>

	//BNO080 has max CLK of 3MHz, MSB first,
	//The BNO080 uses CPOL = 1 and CPHA = 1. This is mode3
	CHIP_SELECT(BNO080);
 8001c28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c2c:	481a      	ldr	r0, [pc, #104]	; (8001c98 <BNO080_sendPacket+0x94>)
 8001c2e:	f7ff fa16 	bl	800105e <LL_GPIO_ResetOutputPin>

	//Send the 4 byte packet header
	SPI2_SendByte(packetLength & 0xFF);			//Packet length LSB
 8001c32:	7bbb      	ldrb	r3, [r7, #14]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff fb7f 	bl	8001338 <SPI2_SendByte>
	SPI2_SendByte(packetLength >> 8);				//Packet length MSB
 8001c3a:	7bbb      	ldrb	r3, [r7, #14]
 8001c3c:	121b      	asrs	r3, r3, #8
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff fb79 	bl	8001338 <SPI2_SendByte>
	SPI2_SendByte(channelNumber);					//Channel number
 8001c46:	79fb      	ldrb	r3, [r7, #7]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7ff fb75 	bl	8001338 <SPI2_SendByte>
	SPI2_SendByte(sequenceNumber[channelNumber]++); 	//Send the sequence number, increments with each packet sent, different counter for each channel
 8001c4e:	79fb      	ldrb	r3, [r7, #7]
 8001c50:	4a12      	ldr	r2, [pc, #72]	; (8001c9c <BNO080_sendPacket+0x98>)
 8001c52:	5cd2      	ldrb	r2, [r2, r3]
 8001c54:	1c51      	adds	r1, r2, #1
 8001c56:	b2c8      	uxtb	r0, r1
 8001c58:	4910      	ldr	r1, [pc, #64]	; (8001c9c <BNO080_sendPacket+0x98>)
 8001c5a:	54c8      	strb	r0, [r1, r3]
 8001c5c:	4610      	mov	r0, r2
 8001c5e:	f7ff fb6b 	bl	8001338 <SPI2_SendByte>

	//Send the user's data packet
	for (uint8_t i = 0; i < dataLength; i++)
 8001c62:	2300      	movs	r3, #0
 8001c64:	73fb      	strb	r3, [r7, #15]
 8001c66:	e008      	b.n	8001c7a <BNO080_sendPacket+0x76>
	{
		SPI2_SendByte(shtpData[i]);
 8001c68:	7bfb      	ldrb	r3, [r7, #15]
 8001c6a:	4a0d      	ldr	r2, [pc, #52]	; (8001ca0 <BNO080_sendPacket+0x9c>)
 8001c6c:	5cd3      	ldrb	r3, [r2, r3]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7ff fb62 	bl	8001338 <SPI2_SendByte>
	for (uint8_t i = 0; i < dataLength; i++)
 8001c74:	7bfb      	ldrb	r3, [r7, #15]
 8001c76:	3301      	adds	r3, #1
 8001c78:	73fb      	strb	r3, [r7, #15]
 8001c7a:	7bfa      	ldrb	r2, [r7, #15]
 8001c7c:	79bb      	ldrb	r3, [r7, #6]
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d3f2      	bcc.n	8001c68 <BNO080_sendPacket+0x64>
	}

	CHIP_DESELECT(BNO080);
 8001c82:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c86:	4804      	ldr	r0, [pc, #16]	; (8001c98 <BNO080_sendPacket+0x94>)
 8001c88:	f7ff f9db 	bl	8001042 <LL_GPIO_SetOutputPin>

	return (1);
 8001c8c:	2301      	movs	r3, #1
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3710      	adds	r7, #16
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	40020400 	.word	0x40020400
 8001c9c:	20000200 	.word	0x20000200
 8001ca0:	20000278 	.word	0x20000278

08001ca4 <iBus_Check_CHECKSUM>:

#include "FS_iA6B.h"

FSiA6B_iBus iBus;

unsigned char iBus_Check_CHECKSUM(unsigned char *data, unsigned char len) {
 8001ca4:	b480      	push	{r7}
 8001ca6:	b085      	sub	sp, #20
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	460b      	mov	r3, r1
 8001cae:	70fb      	strb	r3, [r7, #3]

	unsigned short checksum = 0xffff;
 8001cb0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cb4:	81fb      	strh	r3, [r7, #14]

	for (int i = 0; i < len - 2; i++) {
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	60bb      	str	r3, [r7, #8]
 8001cba:	e00a      	b.n	8001cd2 <iBus_Check_CHECKSUM+0x2e>
		checksum = checksum - data[i];
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	b29b      	uxth	r3, r3
 8001cc6:	89fa      	ldrh	r2, [r7, #14]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	81fb      	strh	r3, [r7, #14]
	for (int i = 0; i < len - 2; i++) {
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	60bb      	str	r3, [r7, #8]
 8001cd2:	78fb      	ldrb	r3, [r7, #3]
 8001cd4:	3b02      	subs	r3, #2
 8001cd6:	68ba      	ldr	r2, [r7, #8]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	dbef      	blt.n	8001cbc <iBus_Check_CHECKSUM+0x18>
	}

	return ((checksum & 0x00ff) == data[30]) && ((checksum >> 8) == data[31]);
 8001cdc:	89fb      	ldrh	r3, [r7, #14]
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	687a      	ldr	r2, [r7, #4]
 8001ce2:	321e      	adds	r2, #30
 8001ce4:	7812      	ldrb	r2, [r2, #0]
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d10a      	bne.n	8001d00 <iBus_Check_CHECKSUM+0x5c>
 8001cea:	89fb      	ldrh	r3, [r7, #14]
 8001cec:	0a1b      	lsrs	r3, r3, #8
 8001cee:	b29a      	uxth	r2, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	331f      	adds	r3, #31
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	b29b      	uxth	r3, r3
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d101      	bne.n	8001d00 <iBus_Check_CHECKSUM+0x5c>
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e000      	b.n	8001d02 <iBus_Check_CHECKSUM+0x5e>
 8001d00:	2300      	movs	r3, #0
 8001d02:	b2db      	uxtb	r3, r3
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3714      	adds	r7, #20
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <iBus_Parsing>:

void iBus_Parsing(unsigned char *data, FSiA6B_iBus *iBus) {
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	6039      	str	r1, [r7, #0]
	iBus->RH = (data[2] | data[3] << 8) & 0x0fff;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	3302      	adds	r3, #2
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	b21a      	sxth	r2, r3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	3303      	adds	r3, #3
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	021b      	lsls	r3, r3, #8
 8001d2a:	b21b      	sxth	r3, r3
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	b21b      	sxth	r3, r3
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d36:	b29a      	uxth	r2, r3
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	801a      	strh	r2, [r3, #0]
	iBus->RV = (data[4] | data[5] << 8) & 0x0fff;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	3304      	adds	r3, #4
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	b21a      	sxth	r2, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	3305      	adds	r3, #5
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	021b      	lsls	r3, r3, #8
 8001d4c:	b21b      	sxth	r3, r3
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	b21b      	sxth	r3, r3
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d58:	b29a      	uxth	r2, r3
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	805a      	strh	r2, [r3, #2]
	iBus->LV = (data[6] | data[7] << 8) & 0x0fff;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	3306      	adds	r3, #6
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	b21a      	sxth	r2, r3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	3307      	adds	r3, #7
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	021b      	lsls	r3, r3, #8
 8001d6e:	b21b      	sxth	r3, r3
 8001d70:	4313      	orrs	r3, r2
 8001d72:	b21b      	sxth	r3, r3
 8001d74:	b29b      	uxth	r3, r3
 8001d76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d7a:	b29a      	uxth	r2, r3
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	809a      	strh	r2, [r3, #4]
	iBus->LH = (data[8] | data[9] << 8) & 0x0fff;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	3308      	adds	r3, #8
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	b21a      	sxth	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	3309      	adds	r3, #9
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	021b      	lsls	r3, r3, #8
 8001d90:	b21b      	sxth	r3, r3
 8001d92:	4313      	orrs	r3, r2
 8001d94:	b21b      	sxth	r3, r3
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d9c:	b29a      	uxth	r2, r3
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	80da      	strh	r2, [r3, #6]
	iBus->SwA = (data[10] | data[11] << 8) & 0x0fff;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	330a      	adds	r3, #10
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	b21a      	sxth	r2, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	330b      	adds	r3, #11
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	021b      	lsls	r3, r3, #8
 8001db2:	b21b      	sxth	r3, r3
 8001db4:	4313      	orrs	r3, r2
 8001db6:	b21b      	sxth	r3, r3
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dbe:	b29a      	uxth	r2, r3
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	811a      	strh	r2, [r3, #8]
	iBus->SwC = (data[12] | data[13] << 8) & 0x0fff;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	330c      	adds	r3, #12
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	b21a      	sxth	r2, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	330d      	adds	r3, #13
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	021b      	lsls	r3, r3, #8
 8001dd4:	b21b      	sxth	r3, r3
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	b21b      	sxth	r3, r3
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001de0:	b29a      	uxth	r2, r3
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	819a      	strh	r2, [r3, #12]

	iBus->FailSafe = (data[13] >> 4);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	330d      	adds	r3, #13
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	091b      	lsrs	r3, r3, #4
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	b29a      	uxth	r2, r3
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	829a      	strh	r2, [r3, #20]
}
 8001df6:	bf00      	nop
 8001df8:	370c      	adds	r7, #12
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr

08001e02 <LL_SPI_Enable>:
{
 8001e02:	b480      	push	{r7}
 8001e04:	b083      	sub	sp, #12
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	601a      	str	r2, [r3, #0]
}
 8001e16:	bf00      	nop
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr

08001e22 <LL_SPI_SetStandard>:
{
 8001e22:	b480      	push	{r7}
 8001e24:	b083      	sub	sp, #12
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
 8001e2a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f023 0210 	bic.w	r2, r3, #16
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	431a      	orrs	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	605a      	str	r2, [r3, #4]
}
 8001e3c:	bf00      	nop
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <LL_SPI_IsActiveFlag_RXNE>:
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	f003 0301 	and.w	r3, r3, #1
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d101      	bne.n	8001e60 <LL_SPI_IsActiveFlag_RXNE+0x18>
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e000      	b.n	8001e62 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr

08001e6e <LL_SPI_IsActiveFlag_TXE>:
{
 8001e6e:	b480      	push	{r7}
 8001e70:	b083      	sub	sp, #12
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d101      	bne.n	8001e86 <LL_SPI_IsActiveFlag_TXE+0x18>
 8001e82:	2301      	movs	r3, #1
 8001e84:	e000      	b.n	8001e88 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8001e86:	2300      	movs	r3, #0
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <LL_SPI_ReceiveData8>:
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_REG(SPIx->DR));
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	b2db      	uxtb	r3, r3
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	370c      	adds	r7, #12
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr

08001eae <LL_SPI_TransmitData8>:
{
 8001eae:	b480      	push	{r7}
 8001eb0:	b085      	sub	sp, #20
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	330c      	adds	r3, #12
 8001ebe:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	78fa      	ldrb	r2, [r7, #3]
 8001ec4:	701a      	strb	r2, [r3, #0]
}
 8001ec6:	bf00      	nop
 8001ec8:	3714      	adds	r7, #20
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr

08001ed2 <LL_GPIO_SetOutputPin>:
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	b083      	sub	sp, #12
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
 8001eda:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	683a      	ldr	r2, [r7, #0]
 8001ee0:	619a      	str	r2, [r3, #24]
}
 8001ee2:	bf00      	nop
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr

08001eee <LL_GPIO_ResetOutputPin>:
{
 8001eee:	b480      	push	{r7}
 8001ef0:	b083      	sub	sp, #12
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
 8001ef6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	041a      	lsls	r2, r3, #16
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	619a      	str	r2, [r3, #24]
}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <LL_AHB1_GRP1_EnableClock>:
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b085      	sub	sp, #20
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001f14:	4b08      	ldr	r3, [pc, #32]	; (8001f38 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001f16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f18:	4907      	ldr	r1, [pc, #28]	; (8001f38 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001f20:	4b05      	ldr	r3, [pc, #20]	; (8001f38 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001f22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	4013      	ands	r3, r2
 8001f28:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
}
 8001f2c:	bf00      	nop
 8001f2e:	3714      	adds	r7, #20
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr
 8001f38:	40023800 	.word	0x40023800

08001f3c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b085      	sub	sp, #20
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001f44:	4b08      	ldr	r3, [pc, #32]	; (8001f68 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001f46:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f48:	4907      	ldr	r1, [pc, #28]	; (8001f68 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001f50:	4b05      	ldr	r3, [pc, #20]	; (8001f68 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001f52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4013      	ands	r3, r2
 8001f58:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
}
 8001f5c:	bf00      	nop
 8001f5e:	3714      	adds	r7, #20
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr
 8001f68:	40023800 	.word	0x40023800

08001f6c <ICM20602_GPIO_SPI_Initialization>:
Struct_ICM20602 ICM20602;
int32_t gyro_x_offset, gyro_y_offset, gyro_z_offset; // To remove offset


void ICM20602_GPIO_SPI_Initialization(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b090      	sub	sp, #64	; 0x40
 8001f70:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001f72:	f107 0318 	add.w	r3, r7, #24
 8001f76:	2228      	movs	r2, #40	; 0x28
 8001f78:	2100      	movs	r1, #0
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f005 fe54 	bl	8007c28 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f80:	463b      	mov	r3, r7
 8001f82:	2200      	movs	r2, #0
 8001f84:	601a      	str	r2, [r3, #0]
 8001f86:	605a      	str	r2, [r3, #4]
 8001f88:	609a      	str	r2, [r3, #8]
 8001f8a:	60da      	str	r2, [r3, #12]
 8001f8c:	611a      	str	r2, [r3, #16]
 8001f8e:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8001f90:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001f94:	f7ff ffd2 	bl	8001f3c <LL_APB2_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001f98:	2001      	movs	r0, #1
 8001f9a:	f7ff ffb7 	bl	8001f0c <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001f9e:	2004      	movs	r0, #4
 8001fa0:	f7ff ffb4 	bl	8001f0c <LL_AHB1_GRP1_EnableClock>
	/**SPI1 GPIO Configuration
	PA5   ------> SPI1_SCK
	PA6   ------> SPI1_MISO
	PA7   ------> SPI1_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8001fa4:	23e0      	movs	r3, #224	; 0xe0
 8001fa6:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001fa8:	2302      	movs	r3, #2
 8001faa:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001fac:	2303      	movs	r3, #3
 8001fae:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001fb8:	2305      	movs	r3, #5
 8001fba:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fbc:	463b      	mov	r3, r7
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	4825      	ldr	r0, [pc, #148]	; (8002058 <ICM20602_GPIO_SPI_Initialization+0xec>)
 8001fc2:	f004 fe9c 	bl	8006cfe <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001fca:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001fce:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001fdc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8; //ICM-20602 MAX SPI CLK is 10MHz. But DIV2(42MHz) is available.
 8001fe2:	2310      	movs	r3, #16
 8001fe4:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001fea:	2300      	movs	r3, #0
 8001fec:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 8001fee:	230a      	movs	r3, #10
 8001ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(ICM20602_SPI_CHANNEL, &SPI_InitStruct);
 8001ff2:	f107 0318 	add.w	r3, r7, #24
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	4818      	ldr	r0, [pc, #96]	; (800205c <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8001ffa:	f005 f84e 	bl	800709a <LL_SPI_Init>
	LL_SPI_SetStandard(ICM20602_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 8001ffe:	2100      	movs	r1, #0
 8002000:	4816      	ldr	r0, [pc, #88]	; (800205c <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8002002:	f7ff ff0e 	bl	8001e22 <LL_SPI_SetStandard>
	/**ICM20602 GPIO Control Configuration
	 * PC4  ------> ICM20602_SPI_CS_PIN (output)
	 * PC5  ------> ICM20602_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(ICM20602_SPI_CS_PORT, ICM20602_SPI_CS_PIN);
 8002006:	2110      	movs	r1, #16
 8002008:	4815      	ldr	r0, [pc, #84]	; (8002060 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 800200a:	f7ff ff70 	bl	8001eee <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_SPI_CS_PIN;
 800200e:	2310      	movs	r3, #16
 8002010:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002012:	2301      	movs	r3, #1
 8002014:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002016:	2303      	movs	r3, #3
 8002018:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800201a:	2300      	movs	r3, #0
 800201c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800201e:	2300      	movs	r3, #0
 8002020:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_SPI_CS_PORT, &GPIO_InitStruct);
 8002022:	463b      	mov	r3, r7
 8002024:	4619      	mov	r1, r3
 8002026:	480e      	ldr	r0, [pc, #56]	; (8002060 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8002028:	f004 fe69 	bl	8006cfe <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_INT_PIN;
 800202c:	2320      	movs	r3, #32
 800202e:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002030:	2300      	movs	r3, #0
 8002032:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002034:	2301      	movs	r3, #1
 8002036:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_INT_PORT, &GPIO_InitStruct);
 8002038:	463b      	mov	r3, r7
 800203a:	4619      	mov	r1, r3
 800203c:	4808      	ldr	r0, [pc, #32]	; (8002060 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 800203e:	f004 fe5e 	bl	8006cfe <LL_GPIO_Init>

	LL_SPI_Enable(ICM20602_SPI_CHANNEL);
 8002042:	4806      	ldr	r0, [pc, #24]	; (800205c <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8002044:	f7ff fedd 	bl	8001e02 <LL_SPI_Enable>

	CHIP_DESELECT(ICM20602);
 8002048:	2110      	movs	r1, #16
 800204a:	4805      	ldr	r0, [pc, #20]	; (8002060 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 800204c:	f7ff ff41 	bl	8001ed2 <LL_GPIO_SetOutputPin>
}
 8002050:	bf00      	nop
 8002052:	3740      	adds	r7, #64	; 0x40
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	40020000 	.word	0x40020000
 800205c:	40013000 	.word	0x40013000
 8002060:	40020800 	.word	0x40020800

08002064 <SPI1_SendByte>:


unsigned char SPI1_SendByte(unsigned char data)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	4603      	mov	r3, r0
 800206c:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(ICM20602_SPI_CHANNEL)==RESET);
 800206e:	bf00      	nop
 8002070:	480c      	ldr	r0, [pc, #48]	; (80020a4 <SPI1_SendByte+0x40>)
 8002072:	f7ff fefc 	bl	8001e6e <LL_SPI_IsActiveFlag_TXE>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d0f9      	beq.n	8002070 <SPI1_SendByte+0xc>
	LL_SPI_TransmitData8(ICM20602_SPI_CHANNEL, data);
 800207c:	79fb      	ldrb	r3, [r7, #7]
 800207e:	4619      	mov	r1, r3
 8002080:	4808      	ldr	r0, [pc, #32]	; (80020a4 <SPI1_SendByte+0x40>)
 8002082:	f7ff ff14 	bl	8001eae <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(ICM20602_SPI_CHANNEL)==RESET);
 8002086:	bf00      	nop
 8002088:	4806      	ldr	r0, [pc, #24]	; (80020a4 <SPI1_SendByte+0x40>)
 800208a:	f7ff fedd 	bl	8001e48 <LL_SPI_IsActiveFlag_RXNE>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d0f9      	beq.n	8002088 <SPI1_SendByte+0x24>
	return LL_SPI_ReceiveData8(ICM20602_SPI_CHANNEL);
 8002094:	4803      	ldr	r0, [pc, #12]	; (80020a4 <SPI1_SendByte+0x40>)
 8002096:	f7ff fefd 	bl	8001e94 <LL_SPI_ReceiveData8>
 800209a:	4603      	mov	r3, r0
}
 800209c:	4618      	mov	r0, r3
 800209e:	3708      	adds	r7, #8
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	40013000 	.word	0x40013000

080020a8 <ICM20602_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t ICM20602_Readbyte(uint8_t reg_addr)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	4603      	mov	r3, r0
 80020b0:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(ICM20602);
 80020b2:	2110      	movs	r1, #16
 80020b4:	480b      	ldr	r0, [pc, #44]	; (80020e4 <ICM20602_Readbyte+0x3c>)
 80020b6:	f7ff ff1a 	bl	8001eee <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 80020ba:	79fb      	ldrb	r3, [r7, #7]
 80020bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7ff ffce 	bl	8002064 <SPI1_SendByte>
	val = SPI1_SendByte(0x00); //Send DUMMY to read data
 80020c8:	2000      	movs	r0, #0
 80020ca:	f7ff ffcb 	bl	8002064 <SPI1_SendByte>
 80020ce:	4603      	mov	r3, r0
 80020d0:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(ICM20602);
 80020d2:	2110      	movs	r1, #16
 80020d4:	4803      	ldr	r0, [pc, #12]	; (80020e4 <ICM20602_Readbyte+0x3c>)
 80020d6:	f7ff fefc 	bl	8001ed2 <LL_GPIO_SetOutputPin>
	
	return val;
 80020da:	7bfb      	ldrb	r3, [r7, #15]
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3710      	adds	r7, #16
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	40020800 	.word	0x40020800

080020e8 <ICM20602_Writebyte>:
	}
	CHIP_DESELECT(ICM20602);
}

void ICM20602_Writebyte(uint8_t reg_addr, uint8_t val)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	4603      	mov	r3, r0
 80020f0:	460a      	mov	r2, r1
 80020f2:	71fb      	strb	r3, [r7, #7]
 80020f4:	4613      	mov	r3, r2
 80020f6:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(ICM20602);
 80020f8:	2110      	movs	r1, #16
 80020fa:	480b      	ldr	r0, [pc, #44]	; (8002128 <ICM20602_Writebyte+0x40>)
 80020fc:	f7ff fef7 	bl	8001eee <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 8002100:	79fb      	ldrb	r3, [r7, #7]
 8002102:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002106:	b2db      	uxtb	r3, r3
 8002108:	4618      	mov	r0, r3
 800210a:	f7ff ffab 	bl	8002064 <SPI1_SendByte>
	SPI1_SendByte(val); //Send Data to write
 800210e:	79bb      	ldrb	r3, [r7, #6]
 8002110:	4618      	mov	r0, r3
 8002112:	f7ff ffa7 	bl	8002064 <SPI1_SendByte>
	CHIP_DESELECT(ICM20602);
 8002116:	2110      	movs	r1, #16
 8002118:	4803      	ldr	r0, [pc, #12]	; (8002128 <ICM20602_Writebyte+0x40>)
 800211a:	f7ff feda 	bl	8001ed2 <LL_GPIO_SetOutputPin>
}
 800211e:	bf00      	nop
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	40020800 	.word	0x40020800

0800212c <ICM20602_Initialization>:
	CHIP_DESELECT(ICM20602);
}


int ICM20602_Initialization(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 8002132:	2300      	movs	r3, #0
 8002134:	73fb      	strb	r3, [r7, #15]
	int16_t accel_raw_data[3] = {0};  // To remove offset
 8002136:	f107 0308 	add.w	r3, r7, #8
 800213a:	2200      	movs	r2, #0
 800213c:	601a      	str	r2, [r3, #0]
 800213e:	809a      	strh	r2, [r3, #4]
	int16_t gyro_raw_data[3] = {0};   // To remove offset
 8002140:	463b      	mov	r3, r7
 8002142:	2200      	movs	r2, #0
 8002144:	601a      	str	r2, [r3, #0]
 8002146:	809a      	strh	r2, [r3, #4]
	
	ICM20602_GPIO_SPI_Initialization();
 8002148:	f7ff ff10 	bl	8001f6c <ICM20602_GPIO_SPI_Initialization>
	
	printf("Checking ICM20602...");
 800214c:	4833      	ldr	r0, [pc, #204]	; (800221c <ICM20602_Initialization+0xf0>)
 800214e:	f006 f9cf 	bl	80084f0 <iprintf>
	
	// check WHO_AM_I (0x75)
	who_am_i = ICM20602_Readbyte(WHO_AM_I); 
 8002152:	2075      	movs	r0, #117	; 0x75
 8002154:	f7ff ffa8 	bl	80020a8 <ICM20602_Readbyte>
 8002158:	4603      	mov	r3, r0
 800215a:	73fb      	strb	r3, [r7, #15]

	// who am i = 0x12
	if(who_am_i == 0x12)
 800215c:	7bfb      	ldrb	r3, [r7, #15]
 800215e:	2b12      	cmp	r3, #18
 8002160:	d105      	bne.n	800216e <ICM20602_Initialization+0x42>
	{
		printf("\nICM20602 who_am_i = 0x%02x...OK\n\n", who_am_i);
 8002162:	7bfb      	ldrb	r3, [r7, #15]
 8002164:	4619      	mov	r1, r3
 8002166:	482e      	ldr	r0, [pc, #184]	; (8002220 <ICM20602_Initialization+0xf4>)
 8002168:	f006 f9c2 	bl	80084f0 <iprintf>
 800216c:	e012      	b.n	8002194 <ICM20602_Initialization+0x68>
	}
	// recheck
	else if(who_am_i != 0x12)
 800216e:	7bfb      	ldrb	r3, [r7, #15]
 8002170:	2b12      	cmp	r3, #18
 8002172:	d00f      	beq.n	8002194 <ICM20602_Initialization+0x68>
	{
		who_am_i = ICM20602_Readbyte(WHO_AM_I); // check again WHO_AM_I (0x75)
 8002174:	2075      	movs	r0, #117	; 0x75
 8002176:	f7ff ff97 	bl	80020a8 <ICM20602_Readbyte>
 800217a:	4603      	mov	r3, r0
 800217c:	73fb      	strb	r3, [r7, #15]

		if (who_am_i != 0x12){
 800217e:	7bfb      	ldrb	r3, [r7, #15]
 8002180:	2b12      	cmp	r3, #18
 8002182:	d007      	beq.n	8002194 <ICM20602_Initialization+0x68>
			printf( "ICM20602 Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0x12);
 8002184:	7bfb      	ldrb	r3, [r7, #15]
 8002186:	2212      	movs	r2, #18
 8002188:	4619      	mov	r1, r3
 800218a:	4826      	ldr	r0, [pc, #152]	; (8002224 <ICM20602_Initialization+0xf8>)
 800218c:	f006 f9b0 	bl	80084f0 <iprintf>
			return 1; //ERROR
 8002190:	2301      	movs	r3, #1
 8002192:	e03f      	b.n	8002214 <ICM20602_Initialization+0xe8>
		}
	}
	
	// Reset ICM20602
	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x80); //Reset ICM20602
 8002194:	2180      	movs	r1, #128	; 0x80
 8002196:	206b      	movs	r0, #107	; 0x6b
 8002198:	f7ff ffa6 	bl	80020e8 <ICM20602_Writebyte>
	HAL_Delay(50);
 800219c:	2032      	movs	r0, #50	; 0x32
 800219e:	f002 fcf3 	bl	8004b88 <HAL_Delay>

	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x01); // Enable Temperature sensor(bit4-0), Use PLL(bit2:0-01)
 80021a2:	2101      	movs	r1, #1
 80021a4:	206b      	movs	r0, #107	; 0x6b
 80021a6:	f7ff ff9f 	bl	80020e8 <ICM20602_Writebyte>
									// 온도센서 끄면 자이로 값 이상하게 출력됨
	HAL_Delay(50);
 80021aa:	2032      	movs	r0, #50	; 0x32
 80021ac:	f002 fcec 	bl	8004b88 <HAL_Delay>

	// PWR_MGMT_2 0x6C
	ICM20602_Writebyte(PWR_MGMT_2, 0x38); // Disable Acc(bit5:3-111), Enable Gyro(bit2:0-000)
 80021b0:	2138      	movs	r1, #56	; 0x38
 80021b2:	206c      	movs	r0, #108	; 0x6c
 80021b4:	f7ff ff98 	bl	80020e8 <ICM20602_Writebyte>
	//ICM20602_Writebyte( PWR_MGMT_2, 0x00 ); // Enable Acc(bit5:3-000), Enable Gyro(bit2:0-000)
	HAL_Delay(50);
 80021b8:	2032      	movs	r0, #50	; 0x32
 80021ba:	f002 fce5 	bl	8004b88 <HAL_Delay>
	
	// set sample rate to 1000Hz and apply a software filter
	ICM20602_Writebyte(SMPLRT_DIV, 0x00);
 80021be:	2100      	movs	r1, #0
 80021c0:	2019      	movs	r0, #25
 80021c2:	f7ff ff91 	bl	80020e8 <ICM20602_Writebyte>
	HAL_Delay(50);
 80021c6:	2032      	movs	r0, #50	; 0x32
 80021c8:	f002 fcde 	bl	8004b88 <HAL_Delay>
	
	// Gyro DLPF Config
	//ICM20602_Writebyte(CONFIG, 0x00); // Gyro LPF fc 250Hz(bit2:0-000)
	ICM20602_Writebyte(CONFIG, 0x05); // Gyro LPF fc 20Hz(bit2:0-100) at 1kHz sample rate
 80021cc:	2105      	movs	r1, #5
 80021ce:	201a      	movs	r0, #26
 80021d0:	f7ff ff8a 	bl	80020e8 <ICM20602_Writebyte>
	HAL_Delay(50);
 80021d4:	2032      	movs	r0, #50	; 0x32
 80021d6:	f002 fcd7 	bl	8004b88 <HAL_Delay>

	// GYRO_CONFIG 0x1B
	ICM20602_Writebyte(GYRO_CONFIG, 0x18); // Gyro sensitivity 2000 dps(bit4:3-11), FCHOICE (bit1:0-00)
 80021da:	2118      	movs	r1, #24
 80021dc:	201b      	movs	r0, #27
 80021de:	f7ff ff83 	bl	80020e8 <ICM20602_Writebyte>
	HAL_Delay(50);
 80021e2:	2032      	movs	r0, #50	; 0x32
 80021e4:	f002 fcd0 	bl	8004b88 <HAL_Delay>

	// ACCEL_CONFIG 0x1C
	ICM20602_Writebyte(ACCEL_CONFIG, 0x18); // Acc sensitivity 16g
 80021e8:	2118      	movs	r1, #24
 80021ea:	201c      	movs	r0, #28
 80021ec:	f7ff ff7c 	bl	80020e8 <ICM20602_Writebyte>
	HAL_Delay(50);
 80021f0:	2032      	movs	r0, #50	; 0x32
 80021f2:	f002 fcc9 	bl	8004b88 <HAL_Delay>
	
	// ACCEL_CONFIG2 0x1D
	ICM20602_Writebyte(ACCEL_CONFIG2, 0x03); // Acc FCHOICE 1kHz(bit3-0), DLPF fc 44.8Hz(bit2:0-011)
 80021f6:	2103      	movs	r1, #3
 80021f8:	201d      	movs	r0, #29
 80021fa:	f7ff ff75 	bl	80020e8 <ICM20602_Writebyte>
	HAL_Delay(50);
 80021fe:	2032      	movs	r0, #50	; 0x32
 8002200:	f002 fcc2 	bl	8004b88 <HAL_Delay>
	
	// Enable Interrupts when data is ready
	ICM20602_Writebyte(INT_ENABLE, 0x01); // Enable DRDY Interrupt
 8002204:	2101      	movs	r1, #1
 8002206:	2038      	movs	r0, #56	; 0x38
 8002208:	f7ff ff6e 	bl	80020e8 <ICM20602_Writebyte>
	HAL_Delay(50);
 800220c:	2032      	movs	r0, #50	; 0x32
 800220e:	f002 fcbb 	bl	8004b88 <HAL_Delay>
//	
//	// Remove Gyro Z offset
//	ICM20602_Writebyte( ZG_OFFS_USRH, offset_z>>8 );	// gyro z offset high byte
//	ICM20602_Writebyte( ZG_OFFS_USRL, offset_z );	// gyro z offset low byte

	return 0; //OK
 8002212:	2300      	movs	r3, #0
}
 8002214:	4618      	mov	r0, r3
 8002216:	3710      	adds	r7, #16
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	0800b3bc 	.word	0x0800b3bc
 8002220:	0800b3d4 	.word	0x0800b3d4
 8002224:	0800b3f8 	.word	0x0800b3f8

08002228 <LL_SPI_Enable>:
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	601a      	str	r2, [r3, #0]
}
 800223c:	bf00      	nop
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <LL_SPI_SetStandard>:
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f023 0210 	bic.w	r2, r3, #16
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	431a      	orrs	r2, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	605a      	str	r2, [r3, #4]
}
 8002262:	bf00      	nop
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr

0800226e <LL_SPI_IsActiveFlag_RXNE>:
{
 800226e:	b480      	push	{r7}
 8002270:	b083      	sub	sp, #12
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	2b01      	cmp	r3, #1
 8002280:	d101      	bne.n	8002286 <LL_SPI_IsActiveFlag_RXNE+0x18>
 8002282:	2301      	movs	r3, #1
 8002284:	e000      	b.n	8002288 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8002286:	2300      	movs	r3, #0
}
 8002288:	4618      	mov	r0, r3
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <LL_SPI_IsActiveFlag_TXE>:
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d101      	bne.n	80022ac <LL_SPI_IsActiveFlag_TXE+0x18>
 80022a8:	2301      	movs	r3, #1
 80022aa:	e000      	b.n	80022ae <LL_SPI_IsActiveFlag_TXE+0x1a>
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	370c      	adds	r7, #12
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr

080022ba <LL_SPI_ReceiveData8>:
{
 80022ba:	b480      	push	{r7}
 80022bc:	b083      	sub	sp, #12
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_REG(SPIx->DR));
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	b2db      	uxtb	r3, r3
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <LL_SPI_TransmitData8>:
{
 80022d4:	b480      	push	{r7}
 80022d6:	b085      	sub	sp, #20
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	460b      	mov	r3, r1
 80022de:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	330c      	adds	r3, #12
 80022e4:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	78fa      	ldrb	r2, [r7, #3]
 80022ea:	701a      	strb	r2, [r3, #0]
}
 80022ec:	bf00      	nop
 80022ee:	3714      	adds	r7, #20
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <LL_GPIO_SetOutputPin>:
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	683a      	ldr	r2, [r7, #0]
 8002306:	619a      	str	r2, [r3, #24]
}
 8002308:	bf00      	nop
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <LL_GPIO_ResetOutputPin>:
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	041a      	lsls	r2, r3, #16
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	619a      	str	r2, [r3, #24]
}
 8002326:	bf00      	nop
 8002328:	370c      	adds	r7, #12
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
	...

08002334 <LL_AHB1_GRP1_EnableClock>:
{
 8002334:	b480      	push	{r7}
 8002336:	b085      	sub	sp, #20
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800233c:	4b08      	ldr	r3, [pc, #32]	; (8002360 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800233e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002340:	4907      	ldr	r1, [pc, #28]	; (8002360 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4313      	orrs	r3, r2
 8002346:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002348:	4b05      	ldr	r3, [pc, #20]	; (8002360 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800234a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	4013      	ands	r3, r2
 8002350:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002352:	68fb      	ldr	r3, [r7, #12]
}
 8002354:	bf00      	nop
 8002356:	3714      	adds	r7, #20
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr
 8002360:	40023800 	.word	0x40023800

08002364 <LL_APB1_GRP1_EnableClock>:
{
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 800236c:	4b08      	ldr	r3, [pc, #32]	; (8002390 <LL_APB1_GRP1_EnableClock+0x2c>)
 800236e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002370:	4907      	ldr	r1, [pc, #28]	; (8002390 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4313      	orrs	r3, r2
 8002376:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002378:	4b05      	ldr	r3, [pc, #20]	; (8002390 <LL_APB1_GRP1_EnableClock+0x2c>)
 800237a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	4013      	ands	r3, r2
 8002380:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002382:	68fb      	ldr	r3, [r7, #12]
}
 8002384:	bf00      	nop
 8002386:	3714      	adds	r7, #20
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr
 8002390:	40023800 	.word	0x40023800

08002394 <LPS22HH_GPIO_SPI_Initialization>:

Struct_LPS22HH LPS22HH;


void LPS22HH_GPIO_SPI_Initialization(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b090      	sub	sp, #64	; 0x40
 8002398:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800239a:	f107 0318 	add.w	r3, r7, #24
 800239e:	2228      	movs	r2, #40	; 0x28
 80023a0:	2100      	movs	r1, #0
 80023a2:	4618      	mov	r0, r3
 80023a4:	f005 fc40 	bl	8007c28 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a8:	463b      	mov	r3, r7
 80023aa:	2200      	movs	r2, #0
 80023ac:	601a      	str	r2, [r3, #0]
 80023ae:	605a      	str	r2, [r3, #4]
 80023b0:	609a      	str	r2, [r3, #8]
 80023b2:	60da      	str	r2, [r3, #12]
 80023b4:	611a      	str	r2, [r3, #16]
 80023b6:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 80023b8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80023bc:	f7ff ffd2 	bl	8002364 <LL_APB1_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80023c0:	2002      	movs	r0, #2
 80023c2:	f7ff ffb7 	bl	8002334 <LL_AHB1_GRP1_EnableClock>
	/**SPI3 GPIO Configuration
	PB3   ------> SPI3_SCK
	PB4   ------> SPI3_MISO
	PB5   ------> SPI3_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 80023c6:	2338      	movs	r3, #56	; 0x38
 80023c8:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80023ca:	2302      	movs	r3, #2
 80023cc:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80023ce:	2303      	movs	r3, #3
 80023d0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80023d2:	2300      	movs	r3, #0
 80023d4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80023d6:	2300      	movs	r3, #0
 80023d8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 80023da:	2306      	movs	r3, #6
 80023dc:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023de:	463b      	mov	r3, r7
 80023e0:	4619      	mov	r1, r3
 80023e2:	4826      	ldr	r0, [pc, #152]	; (800247c <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 80023e4:	f004 fc8b 	bl	8006cfe <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80023e8:	2300      	movs	r3, #0
 80023ea:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80023ec:	f44f 7382 	mov.w	r3, #260	; 0x104
 80023f0:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80023f2:	2300      	movs	r3, #0
 80023f4:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80023f6:	2302      	movs	r3, #2
 80023f8:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80023fa:	2301      	movs	r3, #1
 80023fc:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80023fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002402:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8002404:	2308      	movs	r3, #8
 8002406:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8002408:	2300      	movs	r3, #0
 800240a:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800240c:	2300      	movs	r3, #0
 800240e:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 8002410:	230a      	movs	r3, #10
 8002412:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(LPS22HH_SPI_CHANNEL, &SPI_InitStruct);
 8002414:	f107 0318 	add.w	r3, r7, #24
 8002418:	4619      	mov	r1, r3
 800241a:	4819      	ldr	r0, [pc, #100]	; (8002480 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 800241c:	f004 fe3d 	bl	800709a <LL_SPI_Init>
	LL_SPI_SetStandard(LPS22HH_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 8002420:	2100      	movs	r1, #0
 8002422:	4817      	ldr	r0, [pc, #92]	; (8002480 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 8002424:	f7ff ff10 	bl	8002248 <LL_SPI_SetStandard>
	/**LPS22HH GPIO Control Configuration
	 * PB6  ------> LPS22HH_SPI_CS_PIN (output)
	 * PB7  ------> LPS22HH_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(LPS22HH_SPI_CS_PORT, LPS22HH_SPI_CS_PIN);
 8002428:	2140      	movs	r1, #64	; 0x40
 800242a:	4814      	ldr	r0, [pc, #80]	; (800247c <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 800242c:	f7ff ff72 	bl	8002314 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = LPS22HH_SPI_CS_PIN;
 8002430:	2340      	movs	r3, #64	; 0x40
 8002432:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002434:	2301      	movs	r3, #1
 8002436:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002438:	2303      	movs	r3, #3
 800243a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800243c:	2300      	movs	r3, #0
 800243e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002440:	2300      	movs	r3, #0
 8002442:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(LPS22HH_SPI_CS_PORT, &GPIO_InitStruct);
 8002444:	463b      	mov	r3, r7
 8002446:	4619      	mov	r1, r3
 8002448:	480c      	ldr	r0, [pc, #48]	; (800247c <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 800244a:	f004 fc58 	bl	8006cfe <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = LPS22HH_INT_PIN;
 800244e:	2380      	movs	r3, #128	; 0x80
 8002450:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002452:	2300      	movs	r3, #0
 8002454:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002456:	2301      	movs	r3, #1
 8002458:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(LPS22HH_INT_PORT, &GPIO_InitStruct);
 800245a:	463b      	mov	r3, r7
 800245c:	4619      	mov	r1, r3
 800245e:	4807      	ldr	r0, [pc, #28]	; (800247c <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8002460:	f004 fc4d 	bl	8006cfe <LL_GPIO_Init>
	
	LL_SPI_Enable(LPS22HH_SPI_CHANNEL);
 8002464:	4806      	ldr	r0, [pc, #24]	; (8002480 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 8002466:	f7ff fedf 	bl	8002228 <LL_SPI_Enable>
	
	CHIP_DESELECT(LPS22HH);
 800246a:	2140      	movs	r1, #64	; 0x40
 800246c:	4803      	ldr	r0, [pc, #12]	; (800247c <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 800246e:	f7ff ff43 	bl	80022f8 <LL_GPIO_SetOutputPin>
}
 8002472:	bf00      	nop
 8002474:	3740      	adds	r7, #64	; 0x40
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	40020400 	.word	0x40020400
 8002480:	40003c00 	.word	0x40003c00

08002484 <SPI3_SendByte>:


unsigned char SPI3_SendByte(unsigned char data)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	4603      	mov	r3, r0
 800248c:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(LPS22HH_SPI_CHANNEL)==RESET);
 800248e:	bf00      	nop
 8002490:	480c      	ldr	r0, [pc, #48]	; (80024c4 <SPI3_SendByte+0x40>)
 8002492:	f7ff feff 	bl	8002294 <LL_SPI_IsActiveFlag_TXE>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d0f9      	beq.n	8002490 <SPI3_SendByte+0xc>
	LL_SPI_TransmitData8(LPS22HH_SPI_CHANNEL, data);
 800249c:	79fb      	ldrb	r3, [r7, #7]
 800249e:	4619      	mov	r1, r3
 80024a0:	4808      	ldr	r0, [pc, #32]	; (80024c4 <SPI3_SendByte+0x40>)
 80024a2:	f7ff ff17 	bl	80022d4 <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(LPS22HH_SPI_CHANNEL)==RESET);
 80024a6:	bf00      	nop
 80024a8:	4806      	ldr	r0, [pc, #24]	; (80024c4 <SPI3_SendByte+0x40>)
 80024aa:	f7ff fee0 	bl	800226e <LL_SPI_IsActiveFlag_RXNE>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d0f9      	beq.n	80024a8 <SPI3_SendByte+0x24>
	return LL_SPI_ReceiveData8(LPS22HH_SPI_CHANNEL);
 80024b4:	4803      	ldr	r0, [pc, #12]	; (80024c4 <SPI3_SendByte+0x40>)
 80024b6:	f7ff ff00 	bl	80022ba <LL_SPI_ReceiveData8>
 80024ba:	4603      	mov	r3, r0
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3708      	adds	r7, #8
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	40003c00 	.word	0x40003c00

080024c8 <LPS22HH_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t LPS22HH_Readbyte(uint8_t reg_addr)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	4603      	mov	r3, r0
 80024d0:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(LPS22HH);
 80024d2:	2140      	movs	r1, #64	; 0x40
 80024d4:	480b      	ldr	r0, [pc, #44]	; (8002504 <LPS22HH_Readbyte+0x3c>)
 80024d6:	f7ff ff1d 	bl	8002314 <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 80024da:	79fb      	ldrb	r3, [r7, #7]
 80024dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7ff ffce 	bl	8002484 <SPI3_SendByte>
	val = SPI3_SendByte(0x00); //Send DUMMY
 80024e8:	2000      	movs	r0, #0
 80024ea:	f7ff ffcb 	bl	8002484 <SPI3_SendByte>
 80024ee:	4603      	mov	r3, r0
 80024f0:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(LPS22HH);
 80024f2:	2140      	movs	r1, #64	; 0x40
 80024f4:	4803      	ldr	r0, [pc, #12]	; (8002504 <LPS22HH_Readbyte+0x3c>)
 80024f6:	f7ff feff 	bl	80022f8 <LL_GPIO_SetOutputPin>
	
	return val;
 80024fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3710      	adds	r7, #16
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	40020400 	.word	0x40020400

08002508 <LPS22HH_Writebyte>:
	}
	CHIP_DESELECT(LPS22HH);
}

void LPS22HH_Writebyte(uint8_t reg_addr, uint8_t val)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	4603      	mov	r3, r0
 8002510:	460a      	mov	r2, r1
 8002512:	71fb      	strb	r3, [r7, #7]
 8002514:	4613      	mov	r3, r2
 8002516:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(LPS22HH);
 8002518:	2140      	movs	r1, #64	; 0x40
 800251a:	480b      	ldr	r0, [pc, #44]	; (8002548 <LPS22HH_Writebyte+0x40>)
 800251c:	f7ff fefa 	bl	8002314 <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 8002520:	79fb      	ldrb	r3, [r7, #7]
 8002522:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002526:	b2db      	uxtb	r3, r3
 8002528:	4618      	mov	r0, r3
 800252a:	f7ff ffab 	bl	8002484 <SPI3_SendByte>
	SPI3_SendByte(val); //Data
 800252e:	79bb      	ldrb	r3, [r7, #6]
 8002530:	4618      	mov	r0, r3
 8002532:	f7ff ffa7 	bl	8002484 <SPI3_SendByte>
	CHIP_DESELECT(LPS22HH);
 8002536:	2140      	movs	r1, #64	; 0x40
 8002538:	4803      	ldr	r0, [pc, #12]	; (8002548 <LPS22HH_Writebyte+0x40>)
 800253a:	f7ff fedd 	bl	80022f8 <LL_GPIO_SetOutputPin>
}
 800253e:	bf00      	nop
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	40020400 	.word	0x40020400

0800254c <LPS22HH_Initialization>:




int LPS22HH_Initialization(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
	uint8_t temp_reg;
	uint8_t who_am_i = 0;
 8002552:	2300      	movs	r3, #0
 8002554:	71fb      	strb	r3, [r7, #7]
	
	LPS22HH_GPIO_SPI_Initialization();
 8002556:	f7ff ff1d 	bl	8002394 <LPS22HH_GPIO_SPI_Initialization>
	
	printf("Checking LPS22HH...");
 800255a:	4841      	ldr	r0, [pc, #260]	; (8002660 <LPS22HH_Initialization+0x114>)
 800255c:	f005 ffc8 	bl	80084f0 <iprintf>
	
	// check WHO_AM_I (0x0F)
	who_am_i = LPS22HH_Readbyte(0x0F); 
 8002560:	200f      	movs	r0, #15
 8002562:	f7ff ffb1 	bl	80024c8 <LPS22HH_Readbyte>
 8002566:	4603      	mov	r3, r0
 8002568:	71fb      	strb	r3, [r7, #7]

	// who am i = 0xb3
	if( who_am_i == 0xb3)
 800256a:	79fb      	ldrb	r3, [r7, #7]
 800256c:	2bb3      	cmp	r3, #179	; 0xb3
 800256e:	d105      	bne.n	800257c <LPS22HH_Initialization+0x30>
	{
		printf("\nLPS22HH who_am_i = 0x%02x...OK\n\n", who_am_i );
 8002570:	79fb      	ldrb	r3, [r7, #7]
 8002572:	4619      	mov	r1, r3
 8002574:	483b      	ldr	r0, [pc, #236]	; (8002664 <LPS22HH_Initialization+0x118>)
 8002576:	f005 ffbb 	bl	80084f0 <iprintf>
 800257a:	e012      	b.n	80025a2 <LPS22HH_Initialization+0x56>
	}
	// recheck
	else if( who_am_i != 0xb3)
 800257c:	79fb      	ldrb	r3, [r7, #7]
 800257e:	2bb3      	cmp	r3, #179	; 0xb3
 8002580:	d00f      	beq.n	80025a2 <LPS22HH_Initialization+0x56>
	{
		who_am_i = LPS22HH_Readbyte(0x0F); // check WHO_AM_I (0x0F)
 8002582:	200f      	movs	r0, #15
 8002584:	f7ff ffa0 	bl	80024c8 <LPS22HH_Readbyte>
 8002588:	4603      	mov	r3, r0
 800258a:	71fb      	strb	r3, [r7, #7]

		if ( who_am_i != 0xb3 ){
 800258c:	79fb      	ldrb	r3, [r7, #7]
 800258e:	2bb3      	cmp	r3, #179	; 0xb3
 8002590:	d007      	beq.n	80025a2 <LPS22HH_Initialization+0x56>
			printf( "nLPS22HH Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0xb3);
 8002592:	79fb      	ldrb	r3, [r7, #7]
 8002594:	22b3      	movs	r2, #179	; 0xb3
 8002596:	4619      	mov	r1, r3
 8002598:	4833      	ldr	r0, [pc, #204]	; (8002668 <LPS22HH_Initialization+0x11c>)
 800259a:	f005 ffa9 	bl	80084f0 <iprintf>
			return 1; //ERROR
 800259e:	2301      	movs	r3, #1
 80025a0:	e059      	b.n	8002656 <LPS22HH_Initialization+0x10a>
		}
	}
	
	// Reset LPS22HH
	// CTRL_REG2 0x11
	LPS22HH_Writebyte(CTRL_REG2, 0x04);
 80025a2:	2104      	movs	r1, #4
 80025a4:	2011      	movs	r0, #17
 80025a6:	f7ff ffaf 	bl	8002508 <LPS22HH_Writebyte>
	//printf("LPS22HH Reset");
	do{
		//printf(".");
	}
	while((LPS22HH_Readbyte(CTRL_REG2) & 0x04) != 0x00);
 80025aa:	2011      	movs	r0, #17
 80025ac:	f7ff ff8c 	bl	80024c8 <LPS22HH_Readbyte>
 80025b0:	4603      	mov	r3, r0
 80025b2:	f003 0304 	and.w	r3, r3, #4
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d1f7      	bne.n	80025aa <LPS22HH_Initialization+0x5e>
	
	// Set Output Data Rate
	//0x00: One Shot
	//0x10: 1Hz	0x20: 10Hz	0x30: 25Hz	0x40: 50Hz
	//0x50: 75Hz	0x60: 100Hz	0x70: 200Hz
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 80025ba:	2010      	movs	r0, #16
 80025bc:	f7ff ff84 	bl	80024c8 <LPS22HH_Readbyte>
 80025c0:	4603      	mov	r3, r0
 80025c2:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x40;
 80025c4:	79bb      	ldrb	r3, [r7, #6]
 80025c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025ca:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 80025cc:	79bb      	ldrb	r3, [r7, #6]
 80025ce:	4619      	mov	r1, r3
 80025d0:	2010      	movs	r0, #16
 80025d2:	f7ff ff99 	bl	8002508 <LPS22HH_Writebyte>
	temp_reg = 0;
 80025d6:	2300      	movs	r3, #0
 80025d8:	71bb      	strb	r3, [r7, #6]
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 80025da:	2010      	movs	r0, #16
 80025dc:	f7ff ff74 	bl	80024c8 <LPS22HH_Readbyte>
 80025e0:	4603      	mov	r3, r0
 80025e2:	71bb      	strb	r3, [r7, #6]
	//printf("%x\n", temp_reg);
	
	// Enable LPF, Cut-off frequency
	//0x08: ODR/9	0x0c: ODR/20
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 80025e4:	2010      	movs	r0, #16
 80025e6:	f7ff ff6f 	bl	80024c8 <LPS22HH_Readbyte>
 80025ea:	4603      	mov	r3, r0
 80025ec:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x0c;
 80025ee:	79bb      	ldrb	r3, [r7, #6]
 80025f0:	f043 030c 	orr.w	r3, r3, #12
 80025f4:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 80025f6:	79bb      	ldrb	r3, [r7, #6]
 80025f8:	4619      	mov	r1, r3
 80025fa:	2010      	movs	r0, #16
 80025fc:	f7ff ff84 	bl	8002508 <LPS22HH_Writebyte>
	
	// Enable Block Data Update
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8002600:	2010      	movs	r0, #16
 8002602:	f7ff ff61 	bl	80024c8 <LPS22HH_Readbyte>
 8002606:	4603      	mov	r3, r0
 8002608:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x02;
 800260a:	79bb      	ldrb	r3, [r7, #6]
 800260c:	f043 0302 	orr.w	r3, r3, #2
 8002610:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 8002612:	79bb      	ldrb	r3, [r7, #6]
 8002614:	4619      	mov	r1, r3
 8002616:	2010      	movs	r0, #16
 8002618:	f7ff ff76 	bl	8002508 <LPS22HH_Writebyte>
	
	// Enable Low Noise Mode (ODR should be lower than 100Hz. This is igonored when ODR = 100Hz or 200Hz)
	temp_reg = LPS22HH_Readbyte(CTRL_REG2);
 800261c:	2011      	movs	r0, #17
 800261e:	f7ff ff53 	bl	80024c8 <LPS22HH_Readbyte>
 8002622:	4603      	mov	r3, r0
 8002624:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x02;
 8002626:	79bb      	ldrb	r3, [r7, #6]
 8002628:	f043 0302 	orr.w	r3, r3, #2
 800262c:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG2, temp_reg);
 800262e:	79bb      	ldrb	r3, [r7, #6]
 8002630:	4619      	mov	r1, r3
 8002632:	2011      	movs	r0, #17
 8002634:	f7ff ff68 	bl	8002508 <LPS22HH_Writebyte>
	
	// Enable Data-ready signal on INT-DRDY pin
	temp_reg = LPS22HH_Readbyte(CTRL_REG3);
 8002638:	2012      	movs	r0, #18
 800263a:	f7ff ff45 	bl	80024c8 <LPS22HH_Readbyte>
 800263e:	4603      	mov	r3, r0
 8002640:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x04;
 8002642:	79bb      	ldrb	r3, [r7, #6]
 8002644:	f043 0304 	orr.w	r3, r3, #4
 8002648:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG3, temp_reg);
 800264a:	79bb      	ldrb	r3, [r7, #6]
 800264c:	4619      	mov	r1, r3
 800264e:	2012      	movs	r0, #18
 8002650:	f7ff ff5a 	bl	8002508 <LPS22HH_Writebyte>
	
	return 0; //OK
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	3708      	adds	r7, #8
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	0800b424 	.word	0x0800b424
 8002664:	0800b438 	.word	0x0800b438
 8002668:	0800b45c 	.word	0x0800b45c

0800266c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002670:	4b04      	ldr	r3, [pc, #16]	; (8002684 <__NVIC_GetPriorityGrouping+0x18>)
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	0a1b      	lsrs	r3, r3, #8
 8002676:	f003 0307 	and.w	r3, r3, #7
}
 800267a:	4618      	mov	r0, r3
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr
 8002684:	e000ed00 	.word	0xe000ed00

08002688 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	4603      	mov	r3, r0
 8002690:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002696:	2b00      	cmp	r3, #0
 8002698:	db0b      	blt.n	80026b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800269a:	79fb      	ldrb	r3, [r7, #7]
 800269c:	f003 021f 	and.w	r2, r3, #31
 80026a0:	4907      	ldr	r1, [pc, #28]	; (80026c0 <__NVIC_EnableIRQ+0x38>)
 80026a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a6:	095b      	lsrs	r3, r3, #5
 80026a8:	2001      	movs	r0, #1
 80026aa:	fa00 f202 	lsl.w	r2, r0, r2
 80026ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026b2:	bf00      	nop
 80026b4:	370c      	adds	r7, #12
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	e000e100 	.word	0xe000e100

080026c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	4603      	mov	r3, r0
 80026cc:	6039      	str	r1, [r7, #0]
 80026ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	db0a      	blt.n	80026ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	b2da      	uxtb	r2, r3
 80026dc:	490c      	ldr	r1, [pc, #48]	; (8002710 <__NVIC_SetPriority+0x4c>)
 80026de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e2:	0112      	lsls	r2, r2, #4
 80026e4:	b2d2      	uxtb	r2, r2
 80026e6:	440b      	add	r3, r1
 80026e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026ec:	e00a      	b.n	8002704 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	b2da      	uxtb	r2, r3
 80026f2:	4908      	ldr	r1, [pc, #32]	; (8002714 <__NVIC_SetPriority+0x50>)
 80026f4:	79fb      	ldrb	r3, [r7, #7]
 80026f6:	f003 030f 	and.w	r3, r3, #15
 80026fa:	3b04      	subs	r3, #4
 80026fc:	0112      	lsls	r2, r2, #4
 80026fe:	b2d2      	uxtb	r2, r2
 8002700:	440b      	add	r3, r1
 8002702:	761a      	strb	r2, [r3, #24]
}
 8002704:	bf00      	nop
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr
 8002710:	e000e100 	.word	0xe000e100
 8002714:	e000ed00 	.word	0xe000ed00

08002718 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002718:	b480      	push	{r7}
 800271a:	b089      	sub	sp, #36	; 0x24
 800271c:	af00      	add	r7, sp, #0
 800271e:	60f8      	str	r0, [r7, #12]
 8002720:	60b9      	str	r1, [r7, #8]
 8002722:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f003 0307 	and.w	r3, r3, #7
 800272a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	f1c3 0307 	rsb	r3, r3, #7
 8002732:	2b04      	cmp	r3, #4
 8002734:	bf28      	it	cs
 8002736:	2304      	movcs	r3, #4
 8002738:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	3304      	adds	r3, #4
 800273e:	2b06      	cmp	r3, #6
 8002740:	d902      	bls.n	8002748 <NVIC_EncodePriority+0x30>
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	3b03      	subs	r3, #3
 8002746:	e000      	b.n	800274a <NVIC_EncodePriority+0x32>
 8002748:	2300      	movs	r3, #0
 800274a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800274c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	fa02 f303 	lsl.w	r3, r2, r3
 8002756:	43da      	mvns	r2, r3
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	401a      	ands	r2, r3
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002760:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	fa01 f303 	lsl.w	r3, r1, r3
 800276a:	43d9      	mvns	r1, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002770:	4313      	orrs	r3, r2
         );
}
 8002772:	4618      	mov	r0, r3
 8002774:	3724      	adds	r7, #36	; 0x24
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr

0800277e <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 800277e:	b480      	push	{r7}
 8002780:	b083      	sub	sp, #12
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	60da      	str	r2, [r3, #12]
}
 8002792:	bf00      	nop
 8002794:	370c      	adds	r7, #12
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr

0800279e <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 800279e:	b480      	push	{r7}
 80027a0:	b083      	sub	sp, #12
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	691b      	ldr	r3, [r3, #16]
 80027aa:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	695b      	ldr	r3, [r3, #20]
 80027b6:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	615a      	str	r2, [r3, #20]
}
 80027be:	bf00      	nop
 80027c0:	370c      	adds	r7, #12
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr

080027ca <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 80027ca:	b480      	push	{r7}
 80027cc:	b083      	sub	sp, #12
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027da:	2b80      	cmp	r3, #128	; 0x80
 80027dc:	bf0c      	ite	eq
 80027de:	2301      	moveq	r3, #1
 80027e0:	2300      	movne	r3, #0
 80027e2:	b2db      	uxtb	r3, r3
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr

080027f0 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	460b      	mov	r3, r1
 80027fa:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 80027fc:	78fa      	ldrb	r2, [r7, #3]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	605a      	str	r2, [r3, #4]
}
 8002802:	bf00      	nop
 8002804:	370c      	adds	r7, #12
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
	...

08002810 <LL_AHB1_GRP1_EnableClock>:
{
 8002810:	b480      	push	{r7}
 8002812:	b085      	sub	sp, #20
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002818:	4b08      	ldr	r3, [pc, #32]	; (800283c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800281a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800281c:	4907      	ldr	r1, [pc, #28]	; (800283c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4313      	orrs	r3, r2
 8002822:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002824:	4b05      	ldr	r3, [pc, #20]	; (800283c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002826:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4013      	ands	r3, r2
 800282c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800282e:	68fb      	ldr	r3, [r7, #12]
}
 8002830:	bf00      	nop
 8002832:	3714      	adds	r7, #20
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr
 800283c:	40023800 	.word	0x40023800

08002840 <LL_APB1_GRP1_EnableClock>:
{
 8002840:	b480      	push	{r7}
 8002842:	b085      	sub	sp, #20
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002848:	4b08      	ldr	r3, [pc, #32]	; (800286c <LL_APB1_GRP1_EnableClock+0x2c>)
 800284a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800284c:	4907      	ldr	r1, [pc, #28]	; (800286c <LL_APB1_GRP1_EnableClock+0x2c>)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4313      	orrs	r3, r2
 8002852:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002854:	4b05      	ldr	r3, [pc, #20]	; (800286c <LL_APB1_GRP1_EnableClock+0x2c>)
 8002856:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	4013      	ands	r3, r2
 800285c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800285e:	68fb      	ldr	r3, [r7, #12]
}
 8002860:	bf00      	nop
 8002862:	3714      	adds	r7, #20
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr
 800286c:	40023800 	.word	0x40023800

08002870 <M8N_TransmitData>:
		0xB5, 0x62, 0x06, 0x09, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00,
		0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x31,
		0xBF
};

void M8N_TransmitData(unsigned char *data, unsigned char len) {
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	460b      	mov	r3, r1
 800287a:	70fb      	strb	r3, [r7, #3]
	for (int i = 0; i < len; i++) {
 800287c:	2300      	movs	r3, #0
 800287e:	60fb      	str	r3, [r7, #12]
 8002880:	e011      	b.n	80028a6 <M8N_TransmitData+0x36>
		while(!LL_USART_IsActiveFlag_TXE(UART4));
 8002882:	bf00      	nop
 8002884:	480c      	ldr	r0, [pc, #48]	; (80028b8 <M8N_TransmitData+0x48>)
 8002886:	f7ff ffa0 	bl	80027ca <LL_USART_IsActiveFlag_TXE>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d0f9      	beq.n	8002884 <M8N_TransmitData+0x14>
		LL_USART_TransmitData8(UART4, *(data + i));
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	4413      	add	r3, r2
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	4619      	mov	r1, r3
 800289a:	4807      	ldr	r0, [pc, #28]	; (80028b8 <M8N_TransmitData+0x48>)
 800289c:	f7ff ffa8 	bl	80027f0 <LL_USART_TransmitData8>
	for (int i = 0; i < len; i++) {
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	3301      	adds	r3, #1
 80028a4:	60fb      	str	r3, [r7, #12]
 80028a6:	78fb      	ldrb	r3, [r7, #3]
 80028a8:	68fa      	ldr	r2, [r7, #12]
 80028aa:	429a      	cmp	r2, r3
 80028ac:	dbe9      	blt.n	8002882 <M8N_TransmitData+0x12>
	}
}
 80028ae:	bf00      	nop
 80028b0:	3710      	adds	r7, #16
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	40004c00 	.word	0x40004c00

080028bc <M8N_UART4_Initialization>:

void M8N_UART4_Initialization(void) {
 80028bc:	b580      	push	{r7, lr}
 80028be:	b08e      	sub	sp, #56	; 0x38
 80028c0:	af00      	add	r7, sp, #0
	  LL_USART_InitTypeDef USART_InitStruct = {0};
 80028c2:	f107 031c 	add.w	r3, r7, #28
 80028c6:	2200      	movs	r2, #0
 80028c8:	601a      	str	r2, [r3, #0]
 80028ca:	605a      	str	r2, [r3, #4]
 80028cc:	609a      	str	r2, [r3, #8]
 80028ce:	60da      	str	r2, [r3, #12]
 80028d0:	611a      	str	r2, [r3, #16]
 80028d2:	615a      	str	r2, [r3, #20]
 80028d4:	619a      	str	r2, [r3, #24]

	  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028d6:	1d3b      	adds	r3, r7, #4
 80028d8:	2200      	movs	r2, #0
 80028da:	601a      	str	r2, [r3, #0]
 80028dc:	605a      	str	r2, [r3, #4]
 80028de:	609a      	str	r2, [r3, #8]
 80028e0:	60da      	str	r2, [r3, #12]
 80028e2:	611a      	str	r2, [r3, #16]
 80028e4:	615a      	str	r2, [r3, #20]

	  /* Peripheral clock enable */
	  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 80028e6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80028ea:	f7ff ffa9 	bl	8002840 <LL_APB1_GRP1_EnableClock>

	  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80028ee:	2004      	movs	r0, #4
 80028f0:	f7ff ff8e 	bl	8002810 <LL_AHB1_GRP1_EnableClock>
	  /**UART4 GPIO Configuration
	  PC10   ------> UART4_TX
	  PC11   ------> UART4_RX
	  */
	  GPIO_InitStruct.Pin = M8N_TX4_Pin|M8N_RX4_Pin;
 80028f4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80028f8:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80028fa:	2302      	movs	r3, #2
 80028fc:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80028fe:	2303      	movs	r3, #3
 8002900:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002902:	2300      	movs	r3, #0
 8002904:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002906:	2301      	movs	r3, #1
 8002908:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 800290a:	2308      	movs	r3, #8
 800290c:	61bb      	str	r3, [r7, #24]
	  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800290e:	1d3b      	adds	r3, r7, #4
 8002910:	4619      	mov	r1, r3
 8002912:	4819      	ldr	r0, [pc, #100]	; (8002978 <M8N_UART4_Initialization+0xbc>)
 8002914:	f004 f9f3 	bl	8006cfe <LL_GPIO_Init>

	  /* UART4 interrupt Init */
	  NVIC_SetPriority(UART4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002918:	f7ff fea8 	bl	800266c <__NVIC_GetPriorityGrouping>
 800291c:	4603      	mov	r3, r0
 800291e:	2200      	movs	r2, #0
 8002920:	2100      	movs	r1, #0
 8002922:	4618      	mov	r0, r3
 8002924:	f7ff fef8 	bl	8002718 <NVIC_EncodePriority>
 8002928:	4603      	mov	r3, r0
 800292a:	4619      	mov	r1, r3
 800292c:	2034      	movs	r0, #52	; 0x34
 800292e:	f7ff fec9 	bl	80026c4 <__NVIC_SetPriority>
	  NVIC_EnableIRQ(UART4_IRQn);
 8002932:	2034      	movs	r0, #52	; 0x34
 8002934:	f7ff fea8 	bl	8002688 <__NVIC_EnableIRQ>

	  USART_InitStruct.BaudRate = 9600;
 8002938:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800293c:	61fb      	str	r3, [r7, #28]
	  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800293e:	2300      	movs	r3, #0
 8002940:	623b      	str	r3, [r7, #32]
	  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002942:	2300      	movs	r3, #0
 8002944:	627b      	str	r3, [r7, #36]	; 0x24
	  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002946:	2300      	movs	r3, #0
 8002948:	62bb      	str	r3, [r7, #40]	; 0x28
	  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800294a:	230c      	movs	r3, #12
 800294c:	62fb      	str	r3, [r7, #44]	; 0x2c
	  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800294e:	2300      	movs	r3, #0
 8002950:	633b      	str	r3, [r7, #48]	; 0x30
	  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002952:	2300      	movs	r3, #0
 8002954:	637b      	str	r3, [r7, #52]	; 0x34
	  LL_USART_Init(UART4, &USART_InitStruct);
 8002956:	f107 031c 	add.w	r3, r7, #28
 800295a:	4619      	mov	r1, r3
 800295c:	4807      	ldr	r0, [pc, #28]	; (800297c <M8N_UART4_Initialization+0xc0>)
 800295e:	f005 f8b9 	bl	8007ad4 <LL_USART_Init>
	  LL_USART_ConfigAsyncMode(UART4);
 8002962:	4806      	ldr	r0, [pc, #24]	; (800297c <M8N_UART4_Initialization+0xc0>)
 8002964:	f7ff ff1b 	bl	800279e <LL_USART_ConfigAsyncMode>
	  LL_USART_Enable(UART4);
 8002968:	4804      	ldr	r0, [pc, #16]	; (800297c <M8N_UART4_Initialization+0xc0>)
 800296a:	f7ff ff08 	bl	800277e <LL_USART_Enable>
}
 800296e:	bf00      	nop
 8002970:	3738      	adds	r7, #56	; 0x38
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	40020800 	.word	0x40020800
 800297c:	40004c00 	.word	0x40004c00

08002980 <M8N_Initialization>:

void M8N_Initialization(void) {
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0
	M8N_UART4_Initialization();
 8002984:	f7ff ff9a 	bl	80028bc <M8N_UART4_Initialization>

	M8N_TransmitData(&UBX_CFG_PRT[0], sizeof(UBX_CFG_PRT));
 8002988:	211c      	movs	r1, #28
 800298a:	480d      	ldr	r0, [pc, #52]	; (80029c0 <M8N_Initialization+0x40>)
 800298c:	f7ff ff70 	bl	8002870 <M8N_TransmitData>
	HAL_Delay(100);
 8002990:	2064      	movs	r0, #100	; 0x64
 8002992:	f002 f8f9 	bl	8004b88 <HAL_Delay>
	M8N_TransmitData(&UBX_CFG_MSG[0], sizeof(UBX_CFG_MSG));
 8002996:	2110      	movs	r1, #16
 8002998:	480a      	ldr	r0, [pc, #40]	; (80029c4 <M8N_Initialization+0x44>)
 800299a:	f7ff ff69 	bl	8002870 <M8N_TransmitData>
	HAL_Delay(100);
 800299e:	2064      	movs	r0, #100	; 0x64
 80029a0:	f002 f8f2 	bl	8004b88 <HAL_Delay>
	M8N_TransmitData(&UBX_CFG_RATE[0], sizeof(UBX_CFG_RATE));
 80029a4:	210e      	movs	r1, #14
 80029a6:	4808      	ldr	r0, [pc, #32]	; (80029c8 <M8N_Initialization+0x48>)
 80029a8:	f7ff ff62 	bl	8002870 <M8N_TransmitData>
	HAL_Delay(100);
 80029ac:	2064      	movs	r0, #100	; 0x64
 80029ae:	f002 f8eb 	bl	8004b88 <HAL_Delay>
	M8N_TransmitData(&UBX_CFG_CFG[0], sizeof(UBX_CFG_CFG));
 80029b2:	2115      	movs	r1, #21
 80029b4:	4805      	ldr	r0, [pc, #20]	; (80029cc <M8N_Initialization+0x4c>)
 80029b6:	f7ff ff5b 	bl	8002870 <M8N_TransmitData>
}
 80029ba:	bf00      	nop
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	0800b5d8 	.word	0x0800b5d8
 80029c4:	0800b5f4 	.word	0x0800b5f4
 80029c8:	0800b604 	.word	0x0800b604
 80029cc:	0800b614 	.word	0x0800b614

080029d0 <Quaternion_Update>:
float BNO080_Roll;
float BNO080_Pitch;
float BNO080_Yaw;

void Quaternion_Update(float* q)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b088      	sub	sp, #32
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
	float q1, q2, q3, q4;
	float norm;

	norm = invSqrt(q[0]*q[0] + q[1]*q[1] + q[2]*q[2] + q[3]*q[3]);    // normalize quaternion
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	ed93 7a00 	vldr	s14, [r3]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	edd3 7a00 	vldr	s15, [r3]
 80029e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	3304      	adds	r3, #4
 80029ec:	edd3 6a00 	vldr	s13, [r3]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	3304      	adds	r3, #4
 80029f4:	edd3 7a00 	vldr	s15, [r3]
 80029f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	3308      	adds	r3, #8
 8002a04:	edd3 6a00 	vldr	s13, [r3]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	3308      	adds	r3, #8
 8002a0c:	edd3 7a00 	vldr	s15, [r3]
 8002a10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a14:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	330c      	adds	r3, #12
 8002a1c:	edd3 6a00 	vldr	s13, [r3]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	330c      	adds	r3, #12
 8002a24:	edd3 7a00 	vldr	s15, [r3]
 8002a28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a30:	eeb0 0a67 	vmov.f32	s0, s15
 8002a34:	f000 f91e 	bl	8002c74 <invSqrt>
 8002a38:	ed87 0a07 	vstr	s0, [r7, #28]
	
	q1 = q[0] * norm; //x
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	edd3 7a00 	vldr	s15, [r3]
 8002a42:	ed97 7a07 	vldr	s14, [r7, #28]
 8002a46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a4a:	edc7 7a06 	vstr	s15, [r7, #24]
	q2 = q[1] * norm; //y
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	3304      	adds	r3, #4
 8002a52:	edd3 7a00 	vldr	s15, [r3]
 8002a56:	ed97 7a07 	vldr	s14, [r7, #28]
 8002a5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a5e:	edc7 7a05 	vstr	s15, [r7, #20]
	q3 = q[2] * norm; //z
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	3308      	adds	r3, #8
 8002a66:	edd3 7a00 	vldr	s15, [r3]
 8002a6a:	ed97 7a07 	vldr	s14, [r7, #28]
 8002a6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a72:	edc7 7a04 	vstr	s15, [r7, #16]
	q4 = q[3] * norm; //w
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	330c      	adds	r3, #12
 8002a7a:	edd3 7a00 	vldr	s15, [r3]
 8002a7e:	ed97 7a07 	vldr	s14, [r7, #28]
 8002a82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a86:	edc7 7a03 	vstr	s15, [r7, #12]

	BNO080_Pitch = atan2f(2.0f * (q2*q3 + q1*q4), q1*q1 + q2*q2 - q3*q3 - q4*q4);
 8002a8a:	ed97 7a05 	vldr	s14, [r7, #20]
 8002a8e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002a92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a96:	edd7 6a06 	vldr	s13, [r7, #24]
 8002a9a:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002aa2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002aa6:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8002aaa:	ed97 7a06 	vldr	s14, [r7, #24]
 8002aae:	edd7 7a06 	vldr	s15, [r7, #24]
 8002ab2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ab6:	edd7 6a05 	vldr	s13, [r7, #20]
 8002aba:	edd7 7a05 	vldr	s15, [r7, #20]
 8002abe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ac2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ac6:	edd7 6a04 	vldr	s13, [r7, #16]
 8002aca:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ace:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ad2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002ad6:	edd7 6a03 	vldr	s13, [r7, #12]
 8002ada:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ade:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ae2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ae6:	eef0 0a67 	vmov.f32	s1, s15
 8002aea:	eeb0 0a46 	vmov.f32	s0, s12
 8002aee:	f007 fc85 	bl	800a3fc <atan2f>
 8002af2:	eef0 7a40 	vmov.f32	s15, s0
 8002af6:	4b59      	ldr	r3, [pc, #356]	; (8002c5c <Quaternion_Update+0x28c>)
 8002af8:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Roll  = -asinf(2.0f * (q2*q4 - q1*q3));
 8002afc:	ed97 7a05 	vldr	s14, [r7, #20]
 8002b00:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b04:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b08:	edd7 6a06 	vldr	s13, [r7, #24]
 8002b0c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b18:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002b1c:	eeb0 0a67 	vmov.f32	s0, s15
 8002b20:	f007 fc14 	bl	800a34c <asinf>
 8002b24:	eef0 7a40 	vmov.f32	s15, s0
 8002b28:	eef1 7a67 	vneg.f32	s15, s15
 8002b2c:	4b4c      	ldr	r3, [pc, #304]	; (8002c60 <Quaternion_Update+0x290>)
 8002b2e:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Yaw   = atan2f(2.0f * (q1*q2 + q3*q4), q1*q1 - q2*q2 - q3*q3 + q4*q4);
 8002b32:	ed97 7a06 	vldr	s14, [r7, #24]
 8002b36:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b3a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b3e:	edd7 6a04 	vldr	s13, [r7, #16]
 8002b42:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b4e:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8002b52:	ed97 7a06 	vldr	s14, [r7, #24]
 8002b56:	edd7 7a06 	vldr	s15, [r7, #24]
 8002b5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b5e:	edd7 6a05 	vldr	s13, [r7, #20]
 8002b62:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b6a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b6e:	edd7 6a04 	vldr	s13, [r7, #16]
 8002b72:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b7a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b7e:	edd7 6a03 	vldr	s13, [r7, #12]
 8002b82:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b8e:	eef0 0a67 	vmov.f32	s1, s15
 8002b92:	eeb0 0a46 	vmov.f32	s0, s12
 8002b96:	f007 fc31 	bl	800a3fc <atan2f>
 8002b9a:	eef0 7a40 	vmov.f32	s15, s0
 8002b9e:	4b31      	ldr	r3, [pc, #196]	; (8002c64 <Quaternion_Update+0x294>)
 8002ba0:	edc3 7a00 	vstr	s15, [r3]

	BNO080_Pitch *= _180_DIV_PI;
 8002ba4:	4b2d      	ldr	r3, [pc, #180]	; (8002c5c <Quaternion_Update+0x28c>)
 8002ba6:	edd3 7a00 	vldr	s15, [r3]
 8002baa:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002c68 <Quaternion_Update+0x298>
 8002bae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bb2:	4b2a      	ldr	r3, [pc, #168]	; (8002c5c <Quaternion_Update+0x28c>)
 8002bb4:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Roll  *= _180_DIV_PI;
 8002bb8:	4b29      	ldr	r3, [pc, #164]	; (8002c60 <Quaternion_Update+0x290>)
 8002bba:	edd3 7a00 	vldr	s15, [r3]
 8002bbe:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002c68 <Quaternion_Update+0x298>
 8002bc2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bc6:	4b26      	ldr	r3, [pc, #152]	; (8002c60 <Quaternion_Update+0x290>)
 8002bc8:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Yaw   *= _180_DIV_PI;
 8002bcc:	4b25      	ldr	r3, [pc, #148]	; (8002c64 <Quaternion_Update+0x294>)
 8002bce:	edd3 7a00 	vldr	s15, [r3]
 8002bd2:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8002c68 <Quaternion_Update+0x298>
 8002bd6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bda:	4b22      	ldr	r3, [pc, #136]	; (8002c64 <Quaternion_Update+0x294>)
 8002bdc:	edc3 7a00 	vstr	s15, [r3]
	
	if(BNO080_Yaw>=0)
 8002be0:	4b20      	ldr	r3, [pc, #128]	; (8002c64 <Quaternion_Update+0x294>)
 8002be2:	edd3 7a00 	vldr	s15, [r3]
 8002be6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bee:	db0a      	blt.n	8002c06 <Quaternion_Update+0x236>
		BNO080_Yaw = 360.f - BNO080_Yaw;
 8002bf0:	4b1c      	ldr	r3, [pc, #112]	; (8002c64 <Quaternion_Update+0x294>)
 8002bf2:	edd3 7a00 	vldr	s15, [r3]
 8002bf6:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8002c6c <Quaternion_Update+0x29c>
 8002bfa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bfe:	4b19      	ldr	r3, [pc, #100]	; (8002c64 <Quaternion_Update+0x294>)
 8002c00:	edc3 7a00 	vstr	s15, [r3]
 8002c04:	e007      	b.n	8002c16 <Quaternion_Update+0x246>
	else	
		BNO080_Yaw = -BNO080_Yaw;
 8002c06:	4b17      	ldr	r3, [pc, #92]	; (8002c64 <Quaternion_Update+0x294>)
 8002c08:	edd3 7a00 	vldr	s15, [r3]
 8002c0c:	eef1 7a67 	vneg.f32	s15, s15
 8002c10:	4b14      	ldr	r3, [pc, #80]	; (8002c64 <Quaternion_Update+0x294>)
 8002c12:	edc3 7a00 	vstr	s15, [r3]
	
	
	if(BNO080_Pitch>=0)
 8002c16:	4b11      	ldr	r3, [pc, #68]	; (8002c5c <Quaternion_Update+0x28c>)
 8002c18:	edd3 7a00 	vldr	s15, [r3]
 8002c1c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c24:	db0a      	blt.n	8002c3c <Quaternion_Update+0x26c>
		BNO080_Pitch = 180.f - BNO080_Pitch;
 8002c26:	4b0d      	ldr	r3, [pc, #52]	; (8002c5c <Quaternion_Update+0x28c>)
 8002c28:	edd3 7a00 	vldr	s15, [r3]
 8002c2c:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002c70 <Quaternion_Update+0x2a0>
 8002c30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c34:	4b09      	ldr	r3, [pc, #36]	; (8002c5c <Quaternion_Update+0x28c>)
 8002c36:	edc3 7a00 	vstr	s15, [r3]
	else
		BNO080_Pitch = -(BNO080_Pitch + 180.f);
}
 8002c3a:	e00b      	b.n	8002c54 <Quaternion_Update+0x284>
		BNO080_Pitch = -(BNO080_Pitch + 180.f);
 8002c3c:	4b07      	ldr	r3, [pc, #28]	; (8002c5c <Quaternion_Update+0x28c>)
 8002c3e:	edd3 7a00 	vldr	s15, [r3]
 8002c42:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8002c70 <Quaternion_Update+0x2a0>
 8002c46:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002c4a:	eef1 7a67 	vneg.f32	s15, s15
 8002c4e:	4b03      	ldr	r3, [pc, #12]	; (8002c5c <Quaternion_Update+0x28c>)
 8002c50:	edc3 7a00 	vstr	s15, [r3]
}
 8002c54:	bf00      	nop
 8002c56:	3720      	adds	r7, #32
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	20000328 	.word	0x20000328
 8002c60:	20000320 	.word	0x20000320
 8002c64:	20000324 	.word	0x20000324
 8002c68:	42652ee1 	.word	0x42652ee1
 8002c6c:	43b40000 	.word	0x43b40000
 8002c70:	43340000 	.word	0x43340000

08002c74 <invSqrt>:

// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b087      	sub	sp, #28
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 8002c7e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c82:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002c86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c8a:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 8002c92:	f107 0310 	add.w	r3, r7, #16
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	105a      	asrs	r2, r3, #1
 8002c9e:	4b12      	ldr	r3, [pc, #72]	; (8002ce8 <invSqrt+0x74>)
 8002ca0:	1a9b      	subs	r3, r3, r2
 8002ca2:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8002ca4:	f107 030c 	add.w	r3, r7, #12
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8002cac:	ed97 7a04 	vldr	s14, [r7, #16]
 8002cb0:	edd7 7a05 	vldr	s15, [r7, #20]
 8002cb4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cb8:	edd7 7a04 	vldr	s15, [r7, #16]
 8002cbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cc0:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002cc4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002cc8:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ccc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cd0:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	ee07 3a90 	vmov	s15, r3
}
 8002cda:	eeb0 0a67 	vmov.f32	s0, s15
 8002cde:	371c      	adds	r7, #28
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr
 8002ce8:	5f3759df 	.word	0x5f3759df

08002cec <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8002cf2:	463b      	mov	r3, r7
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	601a      	str	r2, [r3, #0]
 8002cf8:	605a      	str	r2, [r3, #4]
 8002cfa:	609a      	str	r2, [r3, #8]
 8002cfc:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8002cfe:	4b21      	ldr	r3, [pc, #132]	; (8002d84 <MX_ADC1_Init+0x98>)
 8002d00:	4a21      	ldr	r2, [pc, #132]	; (8002d88 <MX_ADC1_Init+0x9c>)
 8002d02:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8002d04:	4b1f      	ldr	r3, [pc, #124]	; (8002d84 <MX_ADC1_Init+0x98>)
 8002d06:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002d0a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002d0c:	4b1d      	ldr	r3, [pc, #116]	; (8002d84 <MX_ADC1_Init+0x98>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002d12:	4b1c      	ldr	r3, [pc, #112]	; (8002d84 <MX_ADC1_Init+0x98>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002d18:	4b1a      	ldr	r3, [pc, #104]	; (8002d84 <MX_ADC1_Init+0x98>)
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002d1e:	4b19      	ldr	r3, [pc, #100]	; (8002d84 <MX_ADC1_Init+0x98>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002d26:	4b17      	ldr	r3, [pc, #92]	; (8002d84 <MX_ADC1_Init+0x98>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002d2c:	4b15      	ldr	r3, [pc, #84]	; (8002d84 <MX_ADC1_Init+0x98>)
 8002d2e:	4a17      	ldr	r2, [pc, #92]	; (8002d8c <MX_ADC1_Init+0xa0>)
 8002d30:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002d32:	4b14      	ldr	r3, [pc, #80]	; (8002d84 <MX_ADC1_Init+0x98>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002d38:	4b12      	ldr	r3, [pc, #72]	; (8002d84 <MX_ADC1_Init+0x98>)
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002d3e:	4b11      	ldr	r3, [pc, #68]	; (8002d84 <MX_ADC1_Init+0x98>)
 8002d40:	2201      	movs	r2, #1
 8002d42:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002d46:	4b0f      	ldr	r3, [pc, #60]	; (8002d84 <MX_ADC1_Init+0x98>)
 8002d48:	2201      	movs	r2, #1
 8002d4a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002d4c:	480d      	ldr	r0, [pc, #52]	; (8002d84 <MX_ADC1_Init+0x98>)
 8002d4e:	f001 ff3d 	bl	8004bcc <HAL_ADC_Init>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d001      	beq.n	8002d5c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002d58:	f000 feb2 	bl	8003ac0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002d5c:	2308      	movs	r3, #8
 8002d5e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002d60:	2301      	movs	r3, #1
 8002d62:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002d64:	2307      	movs	r3, #7
 8002d66:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d68:	463b      	mov	r3, r7
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	4805      	ldr	r0, [pc, #20]	; (8002d84 <MX_ADC1_Init+0x98>)
 8002d6e:	f002 f881 	bl	8004e74 <HAL_ADC_ConfigChannel>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d001      	beq.n	8002d7c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002d78:	f000 fea2 	bl	8003ac0 <Error_Handler>
  }

}
 8002d7c:	bf00      	nop
 8002d7e:	3710      	adds	r7, #16
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	2000032c 	.word	0x2000032c
 8002d88:	40012000 	.word	0x40012000
 8002d8c:	0f000001 	.word	0x0f000001

08002d90 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b08a      	sub	sp, #40	; 0x28
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d98:	f107 0314 	add.w	r3, r7, #20
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	601a      	str	r2, [r3, #0]
 8002da0:	605a      	str	r2, [r3, #4]
 8002da2:	609a      	str	r2, [r3, #8]
 8002da4:	60da      	str	r2, [r3, #12]
 8002da6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a2e      	ldr	r2, [pc, #184]	; (8002e68 <HAL_ADC_MspInit+0xd8>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d156      	bne.n	8002e60 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002db2:	2300      	movs	r3, #0
 8002db4:	613b      	str	r3, [r7, #16]
 8002db6:	4b2d      	ldr	r3, [pc, #180]	; (8002e6c <HAL_ADC_MspInit+0xdc>)
 8002db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dba:	4a2c      	ldr	r2, [pc, #176]	; (8002e6c <HAL_ADC_MspInit+0xdc>)
 8002dbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dc0:	6453      	str	r3, [r2, #68]	; 0x44
 8002dc2:	4b2a      	ldr	r3, [pc, #168]	; (8002e6c <HAL_ADC_MspInit+0xdc>)
 8002dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dca:	613b      	str	r3, [r7, #16]
 8002dcc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dce:	2300      	movs	r3, #0
 8002dd0:	60fb      	str	r3, [r7, #12]
 8002dd2:	4b26      	ldr	r3, [pc, #152]	; (8002e6c <HAL_ADC_MspInit+0xdc>)
 8002dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd6:	4a25      	ldr	r2, [pc, #148]	; (8002e6c <HAL_ADC_MspInit+0xdc>)
 8002dd8:	f043 0302 	orr.w	r3, r3, #2
 8002ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8002dde:	4b23      	ldr	r3, [pc, #140]	; (8002e6c <HAL_ADC_MspInit+0xdc>)
 8002de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de2:	f003 0302 	and.w	r3, r3, #2
 8002de6:	60fb      	str	r3, [r7, #12]
 8002de8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PB0     ------> ADC1_IN8 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002dea:	2301      	movs	r3, #1
 8002dec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002dee:	2303      	movs	r3, #3
 8002df0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df2:	2300      	movs	r3, #0
 8002df4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002df6:	f107 0314 	add.w	r3, r7, #20
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	481c      	ldr	r0, [pc, #112]	; (8002e70 <HAL_ADC_MspInit+0xe0>)
 8002dfe:	f002 ff59 	bl	8005cb4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002e02:	4b1c      	ldr	r3, [pc, #112]	; (8002e74 <HAL_ADC_MspInit+0xe4>)
 8002e04:	4a1c      	ldr	r2, [pc, #112]	; (8002e78 <HAL_ADC_MspInit+0xe8>)
 8002e06:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002e08:	4b1a      	ldr	r3, [pc, #104]	; (8002e74 <HAL_ADC_MspInit+0xe4>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e0e:	4b19      	ldr	r3, [pc, #100]	; (8002e74 <HAL_ADC_MspInit+0xe4>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e14:	4b17      	ldr	r3, [pc, #92]	; (8002e74 <HAL_ADC_MspInit+0xe4>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_DISABLE;
 8002e1a:	4b16      	ldr	r3, [pc, #88]	; (8002e74 <HAL_ADC_MspInit+0xe4>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002e20:	4b14      	ldr	r3, [pc, #80]	; (8002e74 <HAL_ADC_MspInit+0xe4>)
 8002e22:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e26:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002e28:	4b12      	ldr	r3, [pc, #72]	; (8002e74 <HAL_ADC_MspInit+0xe4>)
 8002e2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e2e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002e30:	4b10      	ldr	r3, [pc, #64]	; (8002e74 <HAL_ADC_MspInit+0xe4>)
 8002e32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e36:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002e38:	4b0e      	ldr	r3, [pc, #56]	; (8002e74 <HAL_ADC_MspInit+0xe4>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e3e:	4b0d      	ldr	r3, [pc, #52]	; (8002e74 <HAL_ADC_MspInit+0xe4>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002e44:	480b      	ldr	r0, [pc, #44]	; (8002e74 <HAL_ADC_MspInit+0xe4>)
 8002e46:	f002 fbc7 	bl	80055d8 <HAL_DMA_Init>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d001      	beq.n	8002e54 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8002e50:	f000 fe36 	bl	8003ac0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4a07      	ldr	r2, [pc, #28]	; (8002e74 <HAL_ADC_MspInit+0xe4>)
 8002e58:	639a      	str	r2, [r3, #56]	; 0x38
 8002e5a:	4a06      	ldr	r2, [pc, #24]	; (8002e74 <HAL_ADC_MspInit+0xe4>)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002e60:	bf00      	nop
 8002e62:	3728      	adds	r7, #40	; 0x28
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	40012000 	.word	0x40012000
 8002e6c:	40023800 	.word	0x40023800
 8002e70:	40020400 	.word	0x40020400
 8002e74:	20000374 	.word	0x20000374
 8002e78:	40026410 	.word	0x40026410

08002e7c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002e82:	2300      	movs	r3, #0
 8002e84:	607b      	str	r3, [r7, #4]
 8002e86:	4b0c      	ldr	r3, [pc, #48]	; (8002eb8 <MX_DMA_Init+0x3c>)
 8002e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8a:	4a0b      	ldr	r2, [pc, #44]	; (8002eb8 <MX_DMA_Init+0x3c>)
 8002e8c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e90:	6313      	str	r3, [r2, #48]	; 0x30
 8002e92:	4b09      	ldr	r3, [pc, #36]	; (8002eb8 <MX_DMA_Init+0x3c>)
 8002e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e9a:	607b      	str	r3, [r7, #4]
 8002e9c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	2100      	movs	r1, #0
 8002ea2:	2038      	movs	r0, #56	; 0x38
 8002ea4:	f002 fb61 	bl	800556a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002ea8:	2038      	movs	r0, #56	; 0x38
 8002eaa:	f002 fb7a 	bl	80055a2 <HAL_NVIC_EnableIRQ>

}
 8002eae:	bf00      	nop
 8002eb0:	3708      	adds	r7, #8
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	40023800 	.word	0x40023800

08002ebc <LL_GPIO_SetOutputPin>:
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	683a      	ldr	r2, [r7, #0]
 8002eca:	619a      	str	r2, [r3, #24]
}
 8002ecc:	bf00      	nop
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr

08002ed8 <LL_GPIO_ResetOutputPin>:
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	041a      	lsls	r2, r3, #16
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	619a      	str	r2, [r3, #24]
}
 8002eea:	bf00      	nop
 8002eec:	370c      	adds	r7, #12
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
	...

08002ef8 <LL_AHB1_GRP1_EnableClock>:
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b085      	sub	sp, #20
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002f00:	4b08      	ldr	r3, [pc, #32]	; (8002f24 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002f02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f04:	4907      	ldr	r1, [pc, #28]	; (8002f24 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002f0c:	4b05      	ldr	r3, [pc, #20]	; (8002f24 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002f0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	4013      	ands	r3, r2
 8002f14:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002f16:	68fb      	ldr	r3, [r7, #12]
}
 8002f18:	bf00      	nop
 8002f1a:	3714      	adds	r7, #20
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr
 8002f24:	40023800 	.word	0x40023800

08002f28 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b086      	sub	sp, #24
 8002f2c:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f2e:	463b      	mov	r3, r7
 8002f30:	2200      	movs	r2, #0
 8002f32:	601a      	str	r2, [r3, #0]
 8002f34:	605a      	str	r2, [r3, #4]
 8002f36:	609a      	str	r2, [r3, #8]
 8002f38:	60da      	str	r2, [r3, #12]
 8002f3a:	611a      	str	r2, [r3, #16]
 8002f3c:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8002f3e:	2004      	movs	r0, #4
 8002f40:	f7ff ffda 	bl	8002ef8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8002f44:	2080      	movs	r0, #128	; 0x80
 8002f46:	f7ff ffd7 	bl	8002ef8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002f4a:	2001      	movs	r0, #1
 8002f4c:	f7ff ffd4 	bl	8002ef8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002f50:	2002      	movs	r0, #2
 8002f52:	f7ff ffd1 	bl	8002ef8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8002f56:	2008      	movs	r0, #8
 8002f58:	f7ff ffce 	bl	8002ef8 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_13);
 8002f5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002f60:	482e      	ldr	r0, [pc, #184]	; (800301c <MX_GPIO_Init+0xf4>)
 8002f62:	f7ff ffab 	bl	8002ebc <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_4 
 8002f66:	f240 2117 	movw	r1, #535	; 0x217
 8002f6a:	482c      	ldr	r0, [pc, #176]	; (800301c <MX_GPIO_Init+0xf4>)
 8002f6c:	f7ff ffb4 	bl	8002ed8 <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_9);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_12|LL_GPIO_PIN_6);
 8002f70:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8002f74:	482a      	ldr	r0, [pc, #168]	; (8003020 <MX_GPIO_Init+0xf8>)
 8002f76:	f7ff ffaf 	bl	8002ed8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8002f7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f7e:	4829      	ldr	r0, [pc, #164]	; (8003024 <MX_GPIO_Init+0xfc>)
 8002f80:	f7ff ffaa 	bl	8002ed8 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2 
 8002f84:	f242 2317 	movw	r3, #8727	; 0x2217
 8002f88:	603b      	str	r3, [r7, #0]
                          |LL_GPIO_PIN_4|LL_GPIO_PIN_9;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002f92:	2300      	movs	r3, #0
 8002f94:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002f96:	2300      	movs	r3, #0
 8002f98:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f9a:	463b      	mov	r3, r7
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	481f      	ldr	r0, [pc, #124]	; (800301c <MX_GPIO_Init+0xf4>)
 8002fa0:	f003 fead 	bl	8006cfe <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_8;
 8002fa4:	f44f 7390 	mov.w	r3, #288	; 0x120
 8002fa8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002faa:	2300      	movs	r3, #0
 8002fac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fb2:	463b      	mov	r3, r7
 8002fb4:	4619      	mov	r1, r3
 8002fb6:	4819      	ldr	r0, [pc, #100]	; (800301c <MX_GPIO_Init+0xf4>)
 8002fb8:	f003 fea1 	bl	8006cfe <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12|LL_GPIO_PIN_6;
 8002fbc:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 8002fc0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fd2:	463b      	mov	r3, r7
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	4812      	ldr	r0, [pc, #72]	; (8003020 <MX_GPIO_Init+0xf8>)
 8002fd8:	f003 fe91 	bl	8006cfe <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8002fdc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fe0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002fea:	2300      	movs	r3, #0
 8002fec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ff2:	463b      	mov	r3, r7
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	480b      	ldr	r0, [pc, #44]	; (8003024 <MX_GPIO_Init+0xfc>)
 8002ff8:	f003 fe81 	bl	8006cfe <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8002ffc:	2380      	movs	r3, #128	; 0x80
 8002ffe:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8003000:	2300      	movs	r3, #0
 8003002:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003004:	2300      	movs	r3, #0
 8003006:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003008:	463b      	mov	r3, r7
 800300a:	4619      	mov	r1, r3
 800300c:	4804      	ldr	r0, [pc, #16]	; (8003020 <MX_GPIO_Init+0xf8>)
 800300e:	f003 fe76 	bl	8006cfe <LL_GPIO_Init>

}
 8003012:	bf00      	nop
 8003014:	3718      	adds	r7, #24
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	40020800 	.word	0x40020800
 8003020:	40020400 	.word	0x40020400
 8003024:	40020000 	.word	0x40020000

08003028 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 800302c:	4b12      	ldr	r3, [pc, #72]	; (8003078 <MX_I2C1_Init+0x50>)
 800302e:	4a13      	ldr	r2, [pc, #76]	; (800307c <MX_I2C1_Init+0x54>)
 8003030:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8003032:	4b11      	ldr	r3, [pc, #68]	; (8003078 <MX_I2C1_Init+0x50>)
 8003034:	4a12      	ldr	r2, [pc, #72]	; (8003080 <MX_I2C1_Init+0x58>)
 8003036:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003038:	4b0f      	ldr	r3, [pc, #60]	; (8003078 <MX_I2C1_Init+0x50>)
 800303a:	2200      	movs	r2, #0
 800303c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800303e:	4b0e      	ldr	r3, [pc, #56]	; (8003078 <MX_I2C1_Init+0x50>)
 8003040:	2200      	movs	r2, #0
 8003042:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003044:	4b0c      	ldr	r3, [pc, #48]	; (8003078 <MX_I2C1_Init+0x50>)
 8003046:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800304a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800304c:	4b0a      	ldr	r3, [pc, #40]	; (8003078 <MX_I2C1_Init+0x50>)
 800304e:	2200      	movs	r2, #0
 8003050:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003052:	4b09      	ldr	r3, [pc, #36]	; (8003078 <MX_I2C1_Init+0x50>)
 8003054:	2200      	movs	r2, #0
 8003056:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003058:	4b07      	ldr	r3, [pc, #28]	; (8003078 <MX_I2C1_Init+0x50>)
 800305a:	2200      	movs	r2, #0
 800305c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800305e:	4b06      	ldr	r3, [pc, #24]	; (8003078 <MX_I2C1_Init+0x50>)
 8003060:	2200      	movs	r2, #0
 8003062:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003064:	4804      	ldr	r0, [pc, #16]	; (8003078 <MX_I2C1_Init+0x50>)
 8003066:	f002 ffbf 	bl	8005fe8 <HAL_I2C_Init>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d001      	beq.n	8003074 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003070:	f000 fd26 	bl	8003ac0 <Error_Handler>
  }

}
 8003074:	bf00      	nop
 8003076:	bd80      	pop	{r7, pc}
 8003078:	200003d4 	.word	0x200003d4
 800307c:	40005400 	.word	0x40005400
 8003080:	00061a80 	.word	0x00061a80

08003084 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b08a      	sub	sp, #40	; 0x28
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800308c:	f107 0314 	add.w	r3, r7, #20
 8003090:	2200      	movs	r2, #0
 8003092:	601a      	str	r2, [r3, #0]
 8003094:	605a      	str	r2, [r3, #4]
 8003096:	609a      	str	r2, [r3, #8]
 8003098:	60da      	str	r2, [r3, #12]
 800309a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a19      	ldr	r2, [pc, #100]	; (8003108 <HAL_I2C_MspInit+0x84>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d12c      	bne.n	8003100 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030a6:	2300      	movs	r3, #0
 80030a8:	613b      	str	r3, [r7, #16]
 80030aa:	4b18      	ldr	r3, [pc, #96]	; (800310c <HAL_I2C_MspInit+0x88>)
 80030ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ae:	4a17      	ldr	r2, [pc, #92]	; (800310c <HAL_I2C_MspInit+0x88>)
 80030b0:	f043 0302 	orr.w	r3, r3, #2
 80030b4:	6313      	str	r3, [r2, #48]	; 0x30
 80030b6:	4b15      	ldr	r3, [pc, #84]	; (800310c <HAL_I2C_MspInit+0x88>)
 80030b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	613b      	str	r3, [r7, #16]
 80030c0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80030c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80030c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80030c8:	2312      	movs	r3, #18
 80030ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80030cc:	2301      	movs	r3, #1
 80030ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030d0:	2303      	movs	r3, #3
 80030d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80030d4:	2304      	movs	r3, #4
 80030d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030d8:	f107 0314 	add.w	r3, r7, #20
 80030dc:	4619      	mov	r1, r3
 80030de:	480c      	ldr	r0, [pc, #48]	; (8003110 <HAL_I2C_MspInit+0x8c>)
 80030e0:	f002 fde8 	bl	8005cb4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80030e4:	2300      	movs	r3, #0
 80030e6:	60fb      	str	r3, [r7, #12]
 80030e8:	4b08      	ldr	r3, [pc, #32]	; (800310c <HAL_I2C_MspInit+0x88>)
 80030ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ec:	4a07      	ldr	r2, [pc, #28]	; (800310c <HAL_I2C_MspInit+0x88>)
 80030ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80030f2:	6413      	str	r3, [r2, #64]	; 0x40
 80030f4:	4b05      	ldr	r3, [pc, #20]	; (800310c <HAL_I2C_MspInit+0x88>)
 80030f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030fc:	60fb      	str	r3, [r7, #12]
 80030fe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003100:	bf00      	nop
 8003102:	3728      	adds	r7, #40	; 0x28
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	40005400 	.word	0x40005400
 800310c:	40023800 	.word	0x40023800
 8003110:	40020400 	.word	0x40020400

08003114 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f043 0201 	orr.w	r2, r3, #1
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	601a      	str	r2, [r3, #0]
}
 8003128:	bf00      	nop
 800312a:	370c      	adds	r7, #12
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr

08003134 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a1a      	ldr	r2, [r3, #32]
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	431a      	orrs	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	621a      	str	r2, [r3, #32]
}
 800314a:	bf00      	nop
 800314c:	370c      	adds	r7, #12
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr

08003156 <LL_TIM_CC_DisableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8003156:	b480      	push	{r7}
 8003158:	b083      	sub	sp, #12
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
 800315e:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6a1a      	ldr	r2, [r3, #32]
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	43db      	mvns	r3, r3
 8003168:	401a      	ands	r2, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	621a      	str	r2, [r3, #32]
}
 800316e:	bf00      	nop
 8003170:	370c      	adds	r7, #12
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr

0800317a <LL_USART_IsActiveFlag_TXE>:
{
 800317a:	b480      	push	{r7}
 800317c:	b083      	sub	sp, #12
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800318a:	2b80      	cmp	r3, #128	; 0x80
 800318c:	bf0c      	ite	eq
 800318e:	2301      	moveq	r3, #1
 8003190:	2300      	movne	r3, #0
 8003192:	b2db      	uxtb	r3, r3
}
 8003194:	4618      	mov	r0, r3
 8003196:	370c      	adds	r7, #12
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr

080031a0 <LL_USART_EnableIT_RXNE>:
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	f043 0220 	orr.w	r2, r3, #32
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	60da      	str	r2, [r3, #12]
}
 80031b4:	bf00      	nop
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <LL_USART_TransmitData8>:
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	460b      	mov	r3, r1
 80031ca:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 80031cc:	78fa      	ldrb	r2, [r7, #3]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	605a      	str	r2, [r3, #4]
}
 80031d2:	bf00      	nop
 80031d4:	370c      	adds	r7, #12
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr

080031de <LL_GPIO_SetOutputPin>:
{
 80031de:	b480      	push	{r7}
 80031e0:	b083      	sub	sp, #12
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
 80031e6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	683a      	ldr	r2, [r7, #0]
 80031ec:	619a      	str	r2, [r3, #24]
}
 80031ee:	bf00      	nop
 80031f0:	370c      	adds	r7, #12
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr

080031fa <LL_GPIO_ResetOutputPin>:
{
 80031fa:	b480      	push	{r7}
 80031fc:	b083      	sub	sp, #12
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
 8003202:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	041a      	lsls	r2, r3, #16
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	619a      	str	r2, [r3, #24]
}
 800320c:	bf00      	nop
 800320e:	370c      	adds	r7, #12
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr

08003218 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->ODR, READ_REG(GPIOx->ODR) ^ PinMask);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	695a      	ldr	r2, [r3, #20]
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	405a      	eors	r2, r3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	615a      	str	r2, [r3, #20]
}
 800322e:	bf00      	nop
 8003230:	370c      	adds	r7, #12
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
	...

0800323c <_write>:

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
int _write(int file, char *p, int len) {
 800323c:	b580      	push	{r7, lr}
 800323e:	b086      	sub	sp, #24
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < len; i++) {
 8003248:	2300      	movs	r3, #0
 800324a:	617b      	str	r3, [r7, #20]
 800324c:	e011      	b.n	8003272 <_write+0x36>
		while (!LL_USART_IsActiveFlag_TXE(USART6))
 800324e:	bf00      	nop
 8003250:	480c      	ldr	r0, [pc, #48]	; (8003284 <_write+0x48>)
 8003252:	f7ff ff92 	bl	800317a <LL_USART_IsActiveFlag_TXE>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d0f9      	beq.n	8003250 <_write+0x14>
			;
		LL_USART_TransmitData8(USART6, *(p + i));
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	68ba      	ldr	r2, [r7, #8]
 8003260:	4413      	add	r3, r2
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	4619      	mov	r1, r3
 8003266:	4807      	ldr	r0, [pc, #28]	; (8003284 <_write+0x48>)
 8003268:	f7ff ffaa 	bl	80031c0 <LL_USART_TransmitData8>
	for (int i = 0; i < len; i++) {
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	3301      	adds	r3, #1
 8003270:	617b      	str	r3, [r7, #20]
 8003272:	697a      	ldr	r2, [r7, #20]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	429a      	cmp	r2, r3
 8003278:	dbe9      	blt.n	800324e <_write+0x12>
	}
	return len;
 800327a:	687b      	ldr	r3, [r7, #4]
}
 800327c:	4618      	mov	r0, r3
 800327e:	3718      	adds	r7, #24
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}
 8003284:	40011400 	.word	0x40011400

08003288 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8003288:	b590      	push	{r4, r7, lr}
 800328a:	b091      	sub	sp, #68	; 0x44
 800328c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	float q[4];
	float quatRadianAccuracy;
	unsigned char buf_read[16] = {1};
 800328e:	f107 0318 	add.w	r3, r7, #24
 8003292:	2200      	movs	r2, #0
 8003294:	601a      	str	r2, [r3, #0]
 8003296:	605a      	str	r2, [r3, #4]
 8003298:	609a      	str	r2, [r3, #8]
 800329a:	60da      	str	r2, [r3, #12]
 800329c:	2301      	movs	r3, #1
 800329e:	763b      	strb	r3, [r7, #24]
	unsigned char buf_write[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 80032a0:	4bb5      	ldr	r3, [pc, #724]	; (8003578 <main+0x2f0>)
 80032a2:	f107 0408 	add.w	r4, r7, #8
 80032a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80032a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80032ac:	f001 fbfa 	bl	8004aa4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80032b0:	f000 f9ba 	bl	8003628 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80032b4:	f7ff fe38 	bl	8002f28 <MX_GPIO_Init>
	MX_DMA_Init();
 80032b8:	f7ff fde0 	bl	8002e7c <MX_DMA_Init>
	MX_TIM3_Init();
 80032bc:	f001 f87a 	bl	80043b4 <MX_TIM3_Init>
	MX_USART6_UART_Init();
 80032c0:	f001 fb66 	bl	8004990 <MX_USART6_UART_Init>
	MX_SPI2_Init();
 80032c4:	f000 fcb0 	bl	8003c28 <MX_SPI2_Init>
	MX_SPI1_Init();
 80032c8:	f000 fc5c 	bl	8003b84 <MX_SPI1_Init>
	MX_SPI3_Init();
 80032cc:	f000 fd00 	bl	8003cd0 <MX_SPI3_Init>
	MX_UART4_Init();
 80032d0:	f001 fa84 	bl	80047dc <MX_UART4_Init>
	MX_UART5_Init();
 80032d4:	f001 fae4 	bl	80048a0 <MX_UART5_Init>
	MX_TIM5_Init();
 80032d8:	f001 f8da 	bl	8004490 <MX_TIM5_Init>
	MX_I2C1_Init();
 80032dc:	f7ff fea4 	bl	8003028 <MX_I2C1_Init>
	MX_ADC1_Init();
 80032e0:	f7ff fd04 	bl	8002cec <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */
	LL_TIM_EnableCounter(TIM3);
 80032e4:	48a5      	ldr	r0, [pc, #660]	; (800357c <main+0x2f4>)
 80032e6:	f7ff ff15 	bl	8003114 <LL_TIM_EnableCounter>

	LL_USART_EnableIT_RXNE(USART6);
 80032ea:	48a5      	ldr	r0, [pc, #660]	; (8003580 <main+0x2f8>)
 80032ec:	f7ff ff58 	bl	80031a0 <LL_USART_EnableIT_RXNE>
	LL_USART_EnableIT_RXNE(UART4);
 80032f0:	48a4      	ldr	r0, [pc, #656]	; (8003584 <main+0x2fc>)
 80032f2:	f7ff ff55 	bl	80031a0 <LL_USART_EnableIT_RXNE>
	LL_USART_EnableIT_RXNE(UART5);
 80032f6:	48a4      	ldr	r0, [pc, #656]	; (8003588 <main+0x300>)
 80032f8:	f7ff ff52 	bl	80031a0 <LL_USART_EnableIT_RXNE>

	BNO080_Initialization();
 80032fc:	f7fd ffa8 	bl	8001250 <BNO080_Initialization>
	BNO080_enableRotationVector(2500); //400Hz, maximum value describing in datasheet
 8003300:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8003304:	f7fe fab5 	bl	8001872 <BNO080_enableRotationVector>

	ICM20602_Initialization();
 8003308:	f7fe ff10 	bl	800212c <ICM20602_Initialization>
	LPS22HH_Initialization();
 800330c:	f7ff f91e 	bl	800254c <LPS22HH_Initialization>
	M8N_Initialization();
 8003310:	f7ff fb36 	bl	8002980 <M8N_Initialization>

	//TIM5 Initialization
	LL_TIM_EnableCounter(TIM5);
 8003314:	489d      	ldr	r0, [pc, #628]	; (800358c <main+0x304>)
 8003316:	f7ff fefd 	bl	8003114 <LL_TIM_EnableCounter>
	LL_TIM_CC_EnableChannel(TIM5, LL_TIM_CHANNEL_CH1);
 800331a:	2101      	movs	r1, #1
 800331c:	489b      	ldr	r0, [pc, #620]	; (800358c <main+0x304>)
 800331e:	f7ff ff09 	bl	8003134 <LL_TIM_CC_EnableChannel>
	LL_TIM_CC_EnableChannel(TIM5, LL_TIM_CHANNEL_CH2);
 8003322:	2110      	movs	r1, #16
 8003324:	4899      	ldr	r0, [pc, #612]	; (800358c <main+0x304>)
 8003326:	f7ff ff05 	bl	8003134 <LL_TIM_CC_EnableChannel>
	LL_TIM_CC_EnableChannel(TIM5, LL_TIM_CHANNEL_CH3);
 800332a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800332e:	4897      	ldr	r0, [pc, #604]	; (800358c <main+0x304>)
 8003330:	f7ff ff00 	bl	8003134 <LL_TIM_CC_EnableChannel>
	LL_TIM_CC_EnableChannel(TIM5, LL_TIM_CHANNEL_CH4);
 8003334:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003338:	4894      	ldr	r0, [pc, #592]	; (800358c <main+0x304>)
 800333a:	f7ff fefb 	bl	8003134 <LL_TIM_CC_EnableChannel>

	HAL_ADC_Start_DMA(&hadc1, &adcVal, 1);
 800333e:	1dbb      	adds	r3, r7, #6
 8003340:	2201      	movs	r2, #1
 8003342:	4619      	mov	r1, r3
 8003344:	4892      	ldr	r0, [pc, #584]	; (8003590 <main+0x308>)
 8003346:	f001 fc85 	bl	8004c54 <HAL_ADC_Start_DMA>

	//	adcVal = ADC1 -> DR;

	while(Is_iBus_Received() == 0) {
 800334a:	e013      	b.n	8003374 <main+0xec>
		LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800334c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003350:	488a      	ldr	r0, [pc, #552]	; (800357c <main+0x2f4>)
 8003352:	f7ff feef 	bl	8003134 <LL_TIM_CC_EnableChannel>
		TIM3->PSC = 3000;
 8003356:	4b89      	ldr	r3, [pc, #548]	; (800357c <main+0x2f4>)
 8003358:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800335c:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(200);
 800335e:	20c8      	movs	r0, #200	; 0xc8
 8003360:	f001 fc12 	bl	8004b88 <HAL_Delay>
		LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003364:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003368:	4884      	ldr	r0, [pc, #528]	; (800357c <main+0x2f4>)
 800336a:	f7ff fef4 	bl	8003156 <LL_TIM_CC_DisableChannel>
		HAL_Delay(200);
 800336e:	20c8      	movs	r0, #200	; 0xc8
 8003370:	f001 fc0a 	bl	8004b88 <HAL_Delay>
	while(Is_iBus_Received() == 0) {
 8003374:	f000 fa16 	bl	80037a4 <Is_iBus_Received>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d0e6      	beq.n	800334c <main+0xc4>
	}


	//CALIBRATION BASED ON SwC
	if(iBus.SwC == 2000) {
 800337e:	4b85      	ldr	r3, [pc, #532]	; (8003594 <main+0x30c>)
 8003380:	899b      	ldrh	r3, [r3, #12]
 8003382:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003386:	d148      	bne.n	800341a <main+0x192>
		//ESC CALIBRATION
		LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003388:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800338c:	487b      	ldr	r0, [pc, #492]	; (800357c <main+0x2f4>)
 800338e:	f7ff fed1 	bl	8003134 <LL_TIM_CC_EnableChannel>
		TIM3->PSC = 1500;
 8003392:	4b7a      	ldr	r3, [pc, #488]	; (800357c <main+0x2f4>)
 8003394:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003398:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(200);
 800339a:	20c8      	movs	r0, #200	; 0xc8
 800339c:	f001 fbf4 	bl	8004b88 <HAL_Delay>
		TIM3->PSC = 4000;
 80033a0:	4b76      	ldr	r3, [pc, #472]	; (800357c <main+0x2f4>)
 80033a2:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80033a6:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(200);
 80033a8:	20c8      	movs	r0, #200	; 0xc8
 80033aa:	f001 fbed 	bl	8004b88 <HAL_Delay>
		TIM3->PSC = 1500;
 80033ae:	4b73      	ldr	r3, [pc, #460]	; (800357c <main+0x2f4>)
 80033b0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80033b4:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(200);
 80033b6:	20c8      	movs	r0, #200	; 0xc8
 80033b8:	f001 fbe6 	bl	8004b88 <HAL_Delay>
		TIM3->PSC = 4000;
 80033bc:	4b6f      	ldr	r3, [pc, #444]	; (800357c <main+0x2f4>)
 80033be:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80033c2:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(200);
 80033c4:	20c8      	movs	r0, #200	; 0xc8
 80033c6:	f001 fbdf 	bl	8004b88 <HAL_Delay>
		LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80033ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80033ce:	486b      	ldr	r0, [pc, #428]	; (800357c <main+0x2f4>)
 80033d0:	f7ff fec1 	bl	8003156 <LL_TIM_CC_DisableChannel>

		ESC_Calibration();
 80033d4:	f000 f9b8 	bl	8003748 <ESC_Calibration>
		while(iBus.SwC != 1000) {
 80033d8:	e019      	b.n	800340e <main+0x186>
			Is_iBus_Received();
 80033da:	f000 f9e3 	bl	80037a4 <Is_iBus_Received>
			LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80033de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80033e2:	4866      	ldr	r0, [pc, #408]	; (800357c <main+0x2f4>)
 80033e4:	f7ff fea6 	bl	8003134 <LL_TIM_CC_EnableChannel>
			TIM3->PSC = 1500;
 80033e8:	4b64      	ldr	r3, [pc, #400]	; (800357c <main+0x2f4>)
 80033ea:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80033ee:	629a      	str	r2, [r3, #40]	; 0x28
			HAL_Delay(200);
 80033f0:	20c8      	movs	r0, #200	; 0xc8
 80033f2:	f001 fbc9 	bl	8004b88 <HAL_Delay>
			TIM3->PSC = 6000;
 80033f6:	4b61      	ldr	r3, [pc, #388]	; (800357c <main+0x2f4>)
 80033f8:	f241 7270 	movw	r2, #6000	; 0x1770
 80033fc:	629a      	str	r2, [r3, #40]	; 0x28
			HAL_Delay(200);
 80033fe:	20c8      	movs	r0, #200	; 0xc8
 8003400:	f001 fbc2 	bl	8004b88 <HAL_Delay>
			LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003404:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003408:	485c      	ldr	r0, [pc, #368]	; (800357c <main+0x2f4>)
 800340a:	f7ff fea4 	bl	8003156 <LL_TIM_CC_DisableChannel>
		while(iBus.SwC != 1000) {
 800340e:	4b61      	ldr	r3, [pc, #388]	; (8003594 <main+0x30c>)
 8003410:	899b      	ldrh	r3, [r3, #12]
 8003412:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003416:	d1e0      	bne.n	80033da <main+0x152>
 8003418:	e062      	b.n	80034e0 <main+0x258>
		}
	}
	else if (iBus.SwC == 1500) {
 800341a:	4b5e      	ldr	r3, [pc, #376]	; (8003594 <main+0x30c>)
 800341c:	899b      	ldrh	r3, [r3, #12]
 800341e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003422:	4293      	cmp	r3, r2
 8003424:	d15c      	bne.n	80034e0 <main+0x258>
		//BNO080 CALIBRATION
		LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003426:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800342a:	4854      	ldr	r0, [pc, #336]	; (800357c <main+0x2f4>)
 800342c:	f7ff fe82 	bl	8003134 <LL_TIM_CC_EnableChannel>
		TIM3->PSC = 1500;
 8003430:	4b52      	ldr	r3, [pc, #328]	; (800357c <main+0x2f4>)
 8003432:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003436:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(200);
 8003438:	20c8      	movs	r0, #200	; 0xc8
 800343a:	f001 fba5 	bl	8004b88 <HAL_Delay>
		TIM3->PSC = 4000;
 800343e:	4b4f      	ldr	r3, [pc, #316]	; (800357c <main+0x2f4>)
 8003440:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8003444:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(200);
 8003446:	20c8      	movs	r0, #200	; 0xc8
 8003448:	f001 fb9e 	bl	8004b88 <HAL_Delay>
		TIM3->PSC = 1500;
 800344c:	4b4b      	ldr	r3, [pc, #300]	; (800357c <main+0x2f4>)
 800344e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003452:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(200);
 8003454:	20c8      	movs	r0, #200	; 0xc8
 8003456:	f001 fb97 	bl	8004b88 <HAL_Delay>
		TIM3->PSC = 4000;
 800345a:	4b48      	ldr	r3, [pc, #288]	; (800357c <main+0x2f4>)
 800345c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8003460:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(200);
 8003462:	20c8      	movs	r0, #200	; 0xc8
 8003464:	f001 fb90 	bl	8004b88 <HAL_Delay>
		LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003468:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800346c:	4843      	ldr	r0, [pc, #268]	; (800357c <main+0x2f4>)
 800346e:	f7ff fe72 	bl	8003156 <LL_TIM_CC_DisableChannel>

		BNO080_Calibration();
 8003472:	f000 f9b7 	bl	80037e4 <BNO080_Calibration>
		while(iBus.SwC != 1000) {
 8003476:	e019      	b.n	80034ac <main+0x224>
			Is_iBus_Received();
 8003478:	f000 f994 	bl	80037a4 <Is_iBus_Received>
			LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800347c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003480:	483e      	ldr	r0, [pc, #248]	; (800357c <main+0x2f4>)
 8003482:	f7ff fe57 	bl	8003134 <LL_TIM_CC_EnableChannel>
			TIM3->PSC = 1500;
 8003486:	4b3d      	ldr	r3, [pc, #244]	; (800357c <main+0x2f4>)
 8003488:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800348c:	629a      	str	r2, [r3, #40]	; 0x28
			HAL_Delay(200);
 800348e:	20c8      	movs	r0, #200	; 0xc8
 8003490:	f001 fb7a 	bl	8004b88 <HAL_Delay>
			TIM3->PSC = 6000;
 8003494:	4b39      	ldr	r3, [pc, #228]	; (800357c <main+0x2f4>)
 8003496:	f241 7270 	movw	r2, #6000	; 0x1770
 800349a:	629a      	str	r2, [r3, #40]	; 0x28
			HAL_Delay(200);
 800349c:	20c8      	movs	r0, #200	; 0xc8
 800349e:	f001 fb73 	bl	8004b88 <HAL_Delay>
			LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80034a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80034a6:	4835      	ldr	r0, [pc, #212]	; (800357c <main+0x2f4>)
 80034a8:	f7ff fe55 	bl	8003156 <LL_TIM_CC_DisableChannel>
		while(iBus.SwC != 1000) {
 80034ac:	4b39      	ldr	r3, [pc, #228]	; (8003594 <main+0x30c>)
 80034ae:	899b      	ldrh	r3, [r3, #12]
 80034b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80034b4:	d1e0      	bne.n	8003478 <main+0x1f0>
		}
	}



	while(Is_iBus_Throttle_Min() == 0) {
 80034b6:	e013      	b.n	80034e0 <main+0x258>
		LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80034b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80034bc:	482f      	ldr	r0, [pc, #188]	; (800357c <main+0x2f4>)
 80034be:	f7ff fe39 	bl	8003134 <LL_TIM_CC_EnableChannel>
		TIM3->PSC = 1500;
 80034c2:	4b2e      	ldr	r3, [pc, #184]	; (800357c <main+0x2f4>)
 80034c4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80034c8:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(100);
 80034ca:	2064      	movs	r0, #100	; 0x64
 80034cc:	f001 fb5c 	bl	8004b88 <HAL_Delay>
		LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80034d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80034d4:	4829      	ldr	r0, [pc, #164]	; (800357c <main+0x2f4>)
 80034d6:	f7ff fe3e 	bl	8003156 <LL_TIM_CC_DisableChannel>
		HAL_Delay(100);
 80034da:	2064      	movs	r0, #100	; 0x64
 80034dc:	f001 fb54 	bl	8004b88 <HAL_Delay>
	while(Is_iBus_Throttle_Min() == 0) {
 80034e0:	f000 f90c 	bl	80036fc <Is_iBus_Throttle_Min>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d0e6      	beq.n	80034b8 <main+0x230>
	//
	//	//EEPROM Read
	//	EP_PIDGain_Read(0, &p, &i, &d);
	//	printf("%f %f %f", p, i, d);

	LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80034ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80034ee:	4823      	ldr	r0, [pc, #140]	; (800357c <main+0x2f4>)
 80034f0:	f7ff fe20 	bl	8003134 <LL_TIM_CC_EnableChannel>
	TIM3->PSC = 6000;
 80034f4:	4b21      	ldr	r3, [pc, #132]	; (800357c <main+0x2f4>)
 80034f6:	f241 7270 	movw	r2, #6000	; 0x1770
 80034fa:	629a      	str	r2, [r3, #40]	; 0x28
	HAL_Delay(200);
 80034fc:	20c8      	movs	r0, #200	; 0xc8
 80034fe:	f001 fb43 	bl	8004b88 <HAL_Delay>
	TIM3->PSC = 4000;
 8003502:	4b1e      	ldr	r3, [pc, #120]	; (800357c <main+0x2f4>)
 8003504:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8003508:	629a      	str	r2, [r3, #40]	; 0x28
	HAL_Delay(100);
 800350a:	2064      	movs	r0, #100	; 0x64
 800350c:	f001 fb3c 	bl	8004b88 <HAL_Delay>
	TIM3->PSC = 4000;
 8003510:	4b1a      	ldr	r3, [pc, #104]	; (800357c <main+0x2f4>)
 8003512:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8003516:	629a      	str	r2, [r3, #40]	; 0x28
	HAL_Delay(100);
 8003518:	2064      	movs	r0, #100	; 0x64
 800351a:	f001 fb35 	bl	8004b88 <HAL_Delay>
	TIM3->PSC = 6000;
 800351e:	4b17      	ldr	r3, [pc, #92]	; (800357c <main+0x2f4>)
 8003520:	f241 7270 	movw	r2, #6000	; 0x1770
 8003524:	629a      	str	r2, [r3, #40]	; 0x28
	HAL_Delay(200);
 8003526:	20c8      	movs	r0, #200	; 0xc8
 8003528:	f001 fb2e 	bl	8004b88 <HAL_Delay>
	//  TIM3 -> CCR4 = TIM3 -> ARR / 2;
	LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800352c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003530:	4812      	ldr	r0, [pc, #72]	; (800357c <main+0x2f4>)
 8003532:	f7ff fe10 	bl	8003156 <LL_TIM_CC_DisableChannel>

	printf("Starts\n");
 8003536:	4818      	ldr	r0, [pc, #96]	; (8003598 <main+0x310>)
 8003538:	f005 f84e 	bl	80085d8 <puts>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		batteryVolt = adcVal * 0.003619f;
 800353c:	88fb      	ldrh	r3, [r7, #6]
 800353e:	ee07 3a90 	vmov	s15, r3
 8003542:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003546:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800359c <main+0x314>
 800354a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800354e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		//		printf("%d\t%.2f\n", adcVal, batteryVolt);
		if (batteryVolt < 10.0f) {
 8003552:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003556:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800355a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800355e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003562:	d51d      	bpl.n	80035a0 <main+0x318>
			LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003564:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003568:	4804      	ldr	r0, [pc, #16]	; (800357c <main+0x2f4>)
 800356a:	f7ff fde3 	bl	8003134 <LL_TIM_CC_EnableChannel>
			TIM3->PSC = 1500;
 800356e:	4b03      	ldr	r3, [pc, #12]	; (800357c <main+0x2f4>)
 8003570:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003574:	629a      	str	r2, [r3, #40]	; 0x28
 8003576:	e018      	b.n	80035aa <main+0x322>
 8003578:	0800b498 	.word	0x0800b498
 800357c:	40000400 	.word	0x40000400
 8003580:	40011400 	.word	0x40011400
 8003584:	40004c00 	.word	0x40004c00
 8003588:	40005000 	.word	0x40005000
 800358c:	40000c00 	.word	0x40000c00
 8003590:	2000032c 	.word	0x2000032c
 8003594:	20000308 	.word	0x20000308
 8003598:	0800b488 	.word	0x0800b488
 800359c:	3b6d2cbf 	.word	0x3b6d2cbf
		}
		else {
			LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80035a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80035a4:	481c      	ldr	r0, [pc, #112]	; (8003618 <main+0x390>)
 80035a6:	f7ff fdd6 	bl	8003156 <LL_TIM_CC_DisableChannel>
		}


		//BNO080 Value
		if (BNO080_dataAvailable() == 1) {
 80035aa:	f7fd fee7 	bl	800137c <BNO080_dataAvailable>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d1c3      	bne.n	800353c <main+0x2b4>
			LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_0);
 80035b4:	2101      	movs	r1, #1
 80035b6:	4819      	ldr	r0, [pc, #100]	; (800361c <main+0x394>)
 80035b8:	f7ff fe2e 	bl	8003218 <LL_GPIO_TogglePin>

			q[0] = BNO080_getQuatI();
 80035bc:	f7fe f86a 	bl	8001694 <BNO080_getQuatI>
 80035c0:	eef0 7a40 	vmov.f32	s15, s0
 80035c4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
			q[1] = BNO080_getQuatJ();
 80035c8:	f7fe f87a 	bl	80016c0 <BNO080_getQuatJ>
 80035cc:	eef0 7a40 	vmov.f32	s15, s0
 80035d0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
			q[2] = BNO080_getQuatK();
 80035d4:	f7fe f88a 	bl	80016ec <BNO080_getQuatK>
 80035d8:	eef0 7a40 	vmov.f32	s15, s0
 80035dc:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
			q[3] = BNO080_getQuatReal();
 80035e0:	f7fe f89a 	bl	8001718 <BNO080_getQuatReal>
 80035e4:	eef0 7a40 	vmov.f32	s15, s0
 80035e8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
			quatRadianAccuracy = BNO080_getQuatRadianAccuracy();
 80035ec:	f7fe f8aa 	bl	8001744 <BNO080_getQuatRadianAccuracy>
 80035f0:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38

			Quaternion_Update(&q[0]);
 80035f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80035f8:	4618      	mov	r0, r3
 80035fa:	f7ff f9e9 	bl	80029d0 <Quaternion_Update>
//			printf("%.2f\t%.2f\n", BNO080_Roll, BNO080_Pitch);
			printf("%.2f\n", BNO080_Yaw);
 80035fe:	4b08      	ldr	r3, [pc, #32]	; (8003620 <main+0x398>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4618      	mov	r0, r3
 8003604:	f7fc ffa0 	bl	8000548 <__aeabi_f2d>
 8003608:	4603      	mov	r3, r0
 800360a:	460c      	mov	r4, r1
 800360c:	461a      	mov	r2, r3
 800360e:	4623      	mov	r3, r4
 8003610:	4804      	ldr	r0, [pc, #16]	; (8003624 <main+0x39c>)
 8003612:	f004 ff6d 	bl	80084f0 <iprintf>
		batteryVolt = adcVal * 0.003619f;
 8003616:	e791      	b.n	800353c <main+0x2b4>
 8003618:	40000400 	.word	0x40000400
 800361c:	40020800 	.word	0x40020800
 8003620:	20000324 	.word	0x20000324
 8003624:	0800b490 	.word	0x0800b490

08003628 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b094      	sub	sp, #80	; 0x50
 800362c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800362e:	f107 0320 	add.w	r3, r7, #32
 8003632:	2230      	movs	r2, #48	; 0x30
 8003634:	2100      	movs	r1, #0
 8003636:	4618      	mov	r0, r3
 8003638:	f004 faf6 	bl	8007c28 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800363c:	f107 030c 	add.w	r3, r7, #12
 8003640:	2200      	movs	r2, #0
 8003642:	601a      	str	r2, [r3, #0]
 8003644:	605a      	str	r2, [r3, #4]
 8003646:	609a      	str	r2, [r3, #8]
 8003648:	60da      	str	r2, [r3, #12]
 800364a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800364c:	2300      	movs	r3, #0
 800364e:	60bb      	str	r3, [r7, #8]
 8003650:	4b28      	ldr	r3, [pc, #160]	; (80036f4 <SystemClock_Config+0xcc>)
 8003652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003654:	4a27      	ldr	r2, [pc, #156]	; (80036f4 <SystemClock_Config+0xcc>)
 8003656:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800365a:	6413      	str	r3, [r2, #64]	; 0x40
 800365c:	4b25      	ldr	r3, [pc, #148]	; (80036f4 <SystemClock_Config+0xcc>)
 800365e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003664:	60bb      	str	r3, [r7, #8]
 8003666:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003668:	2300      	movs	r3, #0
 800366a:	607b      	str	r3, [r7, #4]
 800366c:	4b22      	ldr	r3, [pc, #136]	; (80036f8 <SystemClock_Config+0xd0>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a21      	ldr	r2, [pc, #132]	; (80036f8 <SystemClock_Config+0xd0>)
 8003672:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003676:	6013      	str	r3, [r2, #0]
 8003678:	4b1f      	ldr	r3, [pc, #124]	; (80036f8 <SystemClock_Config+0xd0>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003680:	607b      	str	r3, [r7, #4]
 8003682:	687b      	ldr	r3, [r7, #4]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003684:	2301      	movs	r3, #1
 8003686:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003688:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800368c:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800368e:	2302      	movs	r3, #2
 8003690:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003692:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003696:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8003698:	2304      	movs	r3, #4
 800369a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 800369c:	23a8      	movs	r3, #168	; 0xa8
 800369e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80036a0:	2302      	movs	r3, #2
 80036a2:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80036a4:	2304      	movs	r3, #4
 80036a6:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80036a8:	f107 0320 	add.w	r3, r7, #32
 80036ac:	4618      	mov	r0, r3
 80036ae:	f002 fdd3 	bl	8006258 <HAL_RCC_OscConfig>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d001      	beq.n	80036bc <SystemClock_Config+0x94>
	{
		Error_Handler();
 80036b8:	f000 fa02 	bl	8003ac0 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80036bc:	230f      	movs	r3, #15
 80036be:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80036c0:	2302      	movs	r3, #2
 80036c2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80036c4:	2300      	movs	r3, #0
 80036c6:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80036c8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80036cc:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80036ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036d2:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80036d4:	f107 030c 	add.w	r3, r7, #12
 80036d8:	2105      	movs	r1, #5
 80036da:	4618      	mov	r0, r3
 80036dc:	f003 f82c 	bl	8006738 <HAL_RCC_ClockConfig>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d001      	beq.n	80036ea <SystemClock_Config+0xc2>
	{
		Error_Handler();
 80036e6:	f000 f9eb 	bl	8003ac0 <Error_Handler>
	}
}
 80036ea:	bf00      	nop
 80036ec:	3750      	adds	r7, #80	; 0x50
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	40023800 	.word	0x40023800
 80036f8:	40007000 	.word	0x40007000

080036fc <Is_iBus_Throttle_Min>:

/* USER CODE BEGIN 4 */
int Is_iBus_Throttle_Min(void) {
 80036fc:	b580      	push	{r7, lr}
 80036fe:	af00      	add	r7, sp, #0
	if (ibus_rx_cplt_flag == 1) {
 8003700:	4b0e      	ldr	r3, [pc, #56]	; (800373c <Is_iBus_Throttle_Min+0x40>)
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	2b01      	cmp	r3, #1
 8003706:	d115      	bne.n	8003734 <Is_iBus_Throttle_Min+0x38>
		ibus_rx_cplt_flag = 0;
 8003708:	4b0c      	ldr	r3, [pc, #48]	; (800373c <Is_iBus_Throttle_Min+0x40>)
 800370a:	2200      	movs	r2, #0
 800370c:	701a      	strb	r2, [r3, #0]
		if (iBus_Check_CHECKSUM(&ibus_rx_buf[0], 32) == 1) {
 800370e:	2120      	movs	r1, #32
 8003710:	480b      	ldr	r0, [pc, #44]	; (8003740 <Is_iBus_Throttle_Min+0x44>)
 8003712:	f7fe fac7 	bl	8001ca4 <iBus_Check_CHECKSUM>
 8003716:	4603      	mov	r3, r0
 8003718:	2b01      	cmp	r3, #1
 800371a:	d10b      	bne.n	8003734 <Is_iBus_Throttle_Min+0x38>
			iBus_Parsing(&ibus_rx_buf[0], &iBus);
 800371c:	4909      	ldr	r1, [pc, #36]	; (8003744 <Is_iBus_Throttle_Min+0x48>)
 800371e:	4808      	ldr	r0, [pc, #32]	; (8003740 <Is_iBus_Throttle_Min+0x44>)
 8003720:	f7fe faf6 	bl	8001d10 <iBus_Parsing>
			if(iBus.LV < 1010) return 1;
 8003724:	4b07      	ldr	r3, [pc, #28]	; (8003744 <Is_iBus_Throttle_Min+0x48>)
 8003726:	889b      	ldrh	r3, [r3, #4]
 8003728:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800372c:	4293      	cmp	r3, r2
 800372e:	d801      	bhi.n	8003734 <Is_iBus_Throttle_Min+0x38>
 8003730:	2301      	movs	r3, #1
 8003732:	e000      	b.n	8003736 <Is_iBus_Throttle_Min+0x3a>

		}
	}
	return 0;
 8003734:	2300      	movs	r3, #0
}
 8003736:	4618      	mov	r0, r3
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	2000020e 	.word	0x2000020e
 8003740:	20000428 	.word	0x20000428
 8003744:	20000308 	.word	0x20000308

08003748 <ESC_Calibration>:

void ESC_Calibration(void) {
 8003748:	b580      	push	{r7, lr}
 800374a:	af00      	add	r7, sp, #0
	TIM5 -> CCR1 = 21000;
 800374c:	4b14      	ldr	r3, [pc, #80]	; (80037a0 <ESC_Calibration+0x58>)
 800374e:	f245 2208 	movw	r2, #21000	; 0x5208
 8003752:	635a      	str	r2, [r3, #52]	; 0x34
	TIM5 -> CCR2 = 21000;
 8003754:	4b12      	ldr	r3, [pc, #72]	; (80037a0 <ESC_Calibration+0x58>)
 8003756:	f245 2208 	movw	r2, #21000	; 0x5208
 800375a:	639a      	str	r2, [r3, #56]	; 0x38
	TIM5 -> CCR3 = 21000;
 800375c:	4b10      	ldr	r3, [pc, #64]	; (80037a0 <ESC_Calibration+0x58>)
 800375e:	f245 2208 	movw	r2, #21000	; 0x5208
 8003762:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM5 -> CCR4 = 21000;
 8003764:	4b0e      	ldr	r3, [pc, #56]	; (80037a0 <ESC_Calibration+0x58>)
 8003766:	f245 2208 	movw	r2, #21000	; 0x5208
 800376a:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(7000);
 800376c:	f641 3058 	movw	r0, #7000	; 0x1b58
 8003770:	f001 fa0a 	bl	8004b88 <HAL_Delay>
	TIM5 -> CCR1 = 10500;
 8003774:	4b0a      	ldr	r3, [pc, #40]	; (80037a0 <ESC_Calibration+0x58>)
 8003776:	f642 1204 	movw	r2, #10500	; 0x2904
 800377a:	635a      	str	r2, [r3, #52]	; 0x34
	TIM5 -> CCR2 = 10500;
 800377c:	4b08      	ldr	r3, [pc, #32]	; (80037a0 <ESC_Calibration+0x58>)
 800377e:	f642 1204 	movw	r2, #10500	; 0x2904
 8003782:	639a      	str	r2, [r3, #56]	; 0x38
	TIM5 -> CCR3 = 10500;
 8003784:	4b06      	ldr	r3, [pc, #24]	; (80037a0 <ESC_Calibration+0x58>)
 8003786:	f642 1204 	movw	r2, #10500	; 0x2904
 800378a:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM5 -> CCR4 = 10500;
 800378c:	4b04      	ldr	r3, [pc, #16]	; (80037a0 <ESC_Calibration+0x58>)
 800378e:	f642 1204 	movw	r2, #10500	; 0x2904
 8003792:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(8000);
 8003794:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8003798:	f001 f9f6 	bl	8004b88 <HAL_Delay>
}
 800379c:	bf00      	nop
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	40000c00 	.word	0x40000c00

080037a4 <Is_iBus_Received>:

int Is_iBus_Received(void) {
 80037a4:	b580      	push	{r7, lr}
 80037a6:	af00      	add	r7, sp, #0
	if (ibus_rx_cplt_flag == 1) {
 80037a8:	4b0b      	ldr	r3, [pc, #44]	; (80037d8 <Is_iBus_Received+0x34>)
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d10f      	bne.n	80037d0 <Is_iBus_Received+0x2c>
		ibus_rx_cplt_flag = 0;
 80037b0:	4b09      	ldr	r3, [pc, #36]	; (80037d8 <Is_iBus_Received+0x34>)
 80037b2:	2200      	movs	r2, #0
 80037b4:	701a      	strb	r2, [r3, #0]
		if (iBus_Check_CHECKSUM(&ibus_rx_buf[0], 32) == 1) {
 80037b6:	2120      	movs	r1, #32
 80037b8:	4808      	ldr	r0, [pc, #32]	; (80037dc <Is_iBus_Received+0x38>)
 80037ba:	f7fe fa73 	bl	8001ca4 <iBus_Check_CHECKSUM>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d105      	bne.n	80037d0 <Is_iBus_Received+0x2c>
			iBus_Parsing(&ibus_rx_buf[0], &iBus);
 80037c4:	4906      	ldr	r1, [pc, #24]	; (80037e0 <Is_iBus_Received+0x3c>)
 80037c6:	4805      	ldr	r0, [pc, #20]	; (80037dc <Is_iBus_Received+0x38>)
 80037c8:	f7fe faa2 	bl	8001d10 <iBus_Parsing>
			return 1;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e000      	b.n	80037d2 <Is_iBus_Received+0x2e>
		}
	}
	return 0;
 80037d0:	2300      	movs	r3, #0
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	2000020e 	.word	0x2000020e
 80037dc:	20000428 	.word	0x20000428
 80037e0:	20000308 	.word	0x20000308

080037e4 <BNO080_Calibration>:


void BNO080_Calibration(void)
{
 80037e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037e8:	b090      	sub	sp, #64	; 0x40
 80037ea:	af06      	add	r7, sp, #24
	//Resets BNO080 to disable All output
	BNO080_Initialization();
 80037ec:	f7fd fd30 	bl	8001250 <BNO080_Initialization>

	//BNO080/BNO085 Configuration
	//Enable dynamic calibration for accelerometer, gyroscope, and magnetometer
	//Enable Game Rotation Vector output
	//Enable Magnetic Field output
	BNO080_calibrateAll(); //Turn on cal for Accel, Gyro, and Mag
 80037f0:	f7fe f86c 	bl	80018cc <BNO080_calibrateAll>
	BNO080_enableGameRotationVector(20000); //Send data update every 20ms (50Hz)
 80037f4:	f644 6020 	movw	r0, #20000	; 0x4e20
 80037f8:	f7fe f84a 	bl	8001890 <BNO080_enableGameRotationVector>
	BNO080_enableMagnetometer(20000); //Send data update every 20ms (50Hz)
 80037fc:	f644 6020 	movw	r0, #20000	; 0x4e20
 8003800:	f7fe f855 	bl	80018ae <BNO080_enableMagnetometer>

	//Once magnetic field is 2 or 3, run the Save DCD Now command
	printf("Calibrating BNO080. Pull up FS-i6 SWC to end calibration and save to flash\n");
 8003804:	489d      	ldr	r0, [pc, #628]	; (8003a7c <BNO080_Calibration+0x298>)
 8003806:	f004 fee7 	bl	80085d8 <puts>
	printf("Output in form x, y, z, in uTesla\n\n");
 800380a:	489d      	ldr	r0, [pc, #628]	; (8003a80 <BNO080_Calibration+0x29c>)
 800380c:	f004 fee4 	bl	80085d8 <puts>

	//while loop for calibration procedure
	//Iterates until iBus.SwC is mid point (1500)
	//Calibration procedure should be done while this loop is in iteration.
	while(iBus.SwC == 1500)
 8003810:	e0b8      	b.n	8003984 <BNO080_Calibration+0x1a0>
	{
		if(BNO080_dataAvailable() == 1)
 8003812:	f7fd fdb3 	bl	800137c <BNO080_dataAvailable>
 8003816:	4603      	mov	r3, r0
 8003818:	2b01      	cmp	r3, #1
 800381a:	f040 80ae 	bne.w	800397a <BNO080_Calibration+0x196>
		{
			//Observing the status bit of the magnetic field output
			float x = BNO080_getMagX();
 800381e:	f7fd ffb3 	bl	8001788 <BNO080_getMagX>
 8003822:	ed87 0a08 	vstr	s0, [r7, #32]
			float y = BNO080_getMagY();
 8003826:	f7fd ffc5 	bl	80017b4 <BNO080_getMagY>
 800382a:	ed87 0a07 	vstr	s0, [r7, #28]
			float z = BNO080_getMagZ();
 800382e:	f7fd ffd7 	bl	80017e0 <BNO080_getMagZ>
 8003832:	ed87 0a06 	vstr	s0, [r7, #24]
			unsigned char accuracy = BNO080_getMagAccuracy();
 8003836:	f7fd ffe9 	bl	800180c <BNO080_getMagAccuracy>
 800383a:	4603      	mov	r3, r0
 800383c:	75fb      	strb	r3, [r7, #23]

			float quatI = BNO080_getQuatI();
 800383e:	f7fd ff29 	bl	8001694 <BNO080_getQuatI>
 8003842:	ed87 0a04 	vstr	s0, [r7, #16]
			float quatJ = BNO080_getQuatJ();
 8003846:	f7fd ff3b 	bl	80016c0 <BNO080_getQuatJ>
 800384a:	ed87 0a03 	vstr	s0, [r7, #12]
			float quatK = BNO080_getQuatK();
 800384e:	f7fd ff4d 	bl	80016ec <BNO080_getQuatK>
 8003852:	ed87 0a02 	vstr	s0, [r7, #8]
			float quatReal = BNO080_getQuatReal();
 8003856:	f7fd ff5f 	bl	8001718 <BNO080_getQuatReal>
 800385a:	ed87 0a01 	vstr	s0, [r7, #4]
			unsigned char sensorAccuracy = BNO080_getQuatAccuracy();
 800385e:	f7fd ff87 	bl	8001770 <BNO080_getQuatAccuracy>
 8003862:	4603      	mov	r3, r0
 8003864:	70fb      	strb	r3, [r7, #3]

			printf("%f,%f,%f,", x, y, z);
 8003866:	6a38      	ldr	r0, [r7, #32]
 8003868:	f7fc fe6e 	bl	8000548 <__aeabi_f2d>
 800386c:	4680      	mov	r8, r0
 800386e:	4689      	mov	r9, r1
 8003870:	69f8      	ldr	r0, [r7, #28]
 8003872:	f7fc fe69 	bl	8000548 <__aeabi_f2d>
 8003876:	4604      	mov	r4, r0
 8003878:	460d      	mov	r5, r1
 800387a:	69b8      	ldr	r0, [r7, #24]
 800387c:	f7fc fe64 	bl	8000548 <__aeabi_f2d>
 8003880:	4602      	mov	r2, r0
 8003882:	460b      	mov	r3, r1
 8003884:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003888:	e9cd 4500 	strd	r4, r5, [sp]
 800388c:	4642      	mov	r2, r8
 800388e:	464b      	mov	r3, r9
 8003890:	487c      	ldr	r0, [pc, #496]	; (8003a84 <BNO080_Calibration+0x2a0>)
 8003892:	f004 fe2d 	bl	80084f0 <iprintf>
			if (accuracy == 0) printf("Unreliable\t");
 8003896:	7dfb      	ldrb	r3, [r7, #23]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d103      	bne.n	80038a4 <BNO080_Calibration+0xc0>
 800389c:	487a      	ldr	r0, [pc, #488]	; (8003a88 <BNO080_Calibration+0x2a4>)
 800389e:	f004 fe27 	bl	80084f0 <iprintf>
 80038a2:	e013      	b.n	80038cc <BNO080_Calibration+0xe8>
			else if (accuracy == 1) printf("Low\t");
 80038a4:	7dfb      	ldrb	r3, [r7, #23]
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d103      	bne.n	80038b2 <BNO080_Calibration+0xce>
 80038aa:	4878      	ldr	r0, [pc, #480]	; (8003a8c <BNO080_Calibration+0x2a8>)
 80038ac:	f004 fe20 	bl	80084f0 <iprintf>
 80038b0:	e00c      	b.n	80038cc <BNO080_Calibration+0xe8>
			else if (accuracy == 2) printf("Medium\t");
 80038b2:	7dfb      	ldrb	r3, [r7, #23]
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d103      	bne.n	80038c0 <BNO080_Calibration+0xdc>
 80038b8:	4875      	ldr	r0, [pc, #468]	; (8003a90 <BNO080_Calibration+0x2ac>)
 80038ba:	f004 fe19 	bl	80084f0 <iprintf>
 80038be:	e005      	b.n	80038cc <BNO080_Calibration+0xe8>
			else if (accuracy == 3) printf("High\t");
 80038c0:	7dfb      	ldrb	r3, [r7, #23]
 80038c2:	2b03      	cmp	r3, #3
 80038c4:	d102      	bne.n	80038cc <BNO080_Calibration+0xe8>
 80038c6:	4873      	ldr	r0, [pc, #460]	; (8003a94 <BNO080_Calibration+0x2b0>)
 80038c8:	f004 fe12 	bl	80084f0 <iprintf>

			printf("\t%f,%f,%f,%f,", quatI, quatI, quatI, quatReal);
 80038cc:	6938      	ldr	r0, [r7, #16]
 80038ce:	f7fc fe3b 	bl	8000548 <__aeabi_f2d>
 80038d2:	4682      	mov	sl, r0
 80038d4:	468b      	mov	fp, r1
 80038d6:	6938      	ldr	r0, [r7, #16]
 80038d8:	f7fc fe36 	bl	8000548 <__aeabi_f2d>
 80038dc:	4604      	mov	r4, r0
 80038de:	460d      	mov	r5, r1
 80038e0:	6938      	ldr	r0, [r7, #16]
 80038e2:	f7fc fe31 	bl	8000548 <__aeabi_f2d>
 80038e6:	4680      	mov	r8, r0
 80038e8:	4689      	mov	r9, r1
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f7fc fe2c 	bl	8000548 <__aeabi_f2d>
 80038f0:	4602      	mov	r2, r0
 80038f2:	460b      	mov	r3, r1
 80038f4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80038f8:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80038fc:	e9cd 4500 	strd	r4, r5, [sp]
 8003900:	4652      	mov	r2, sl
 8003902:	465b      	mov	r3, fp
 8003904:	4864      	ldr	r0, [pc, #400]	; (8003a98 <BNO080_Calibration+0x2b4>)
 8003906:	f004 fdf3 	bl	80084f0 <iprintf>
			if (sensorAccuracy == 0) printf("Unreliable\n");
 800390a:	78fb      	ldrb	r3, [r7, #3]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d103      	bne.n	8003918 <BNO080_Calibration+0x134>
 8003910:	4862      	ldr	r0, [pc, #392]	; (8003a9c <BNO080_Calibration+0x2b8>)
 8003912:	f004 fe61 	bl	80085d8 <puts>
 8003916:	e013      	b.n	8003940 <BNO080_Calibration+0x15c>
			else if (sensorAccuracy == 1) printf("Low\n");
 8003918:	78fb      	ldrb	r3, [r7, #3]
 800391a:	2b01      	cmp	r3, #1
 800391c:	d103      	bne.n	8003926 <BNO080_Calibration+0x142>
 800391e:	4860      	ldr	r0, [pc, #384]	; (8003aa0 <BNO080_Calibration+0x2bc>)
 8003920:	f004 fe5a 	bl	80085d8 <puts>
 8003924:	e00c      	b.n	8003940 <BNO080_Calibration+0x15c>
			else if (sensorAccuracy == 2) printf("Medium\n");
 8003926:	78fb      	ldrb	r3, [r7, #3]
 8003928:	2b02      	cmp	r3, #2
 800392a:	d103      	bne.n	8003934 <BNO080_Calibration+0x150>
 800392c:	485d      	ldr	r0, [pc, #372]	; (8003aa4 <BNO080_Calibration+0x2c0>)
 800392e:	f004 fe53 	bl	80085d8 <puts>
 8003932:	e005      	b.n	8003940 <BNO080_Calibration+0x15c>
			else if (sensorAccuracy == 3) printf("High\n");
 8003934:	78fb      	ldrb	r3, [r7, #3]
 8003936:	2b03      	cmp	r3, #3
 8003938:	d102      	bne.n	8003940 <BNO080_Calibration+0x15c>
 800393a:	485b      	ldr	r0, [pc, #364]	; (8003aa8 <BNO080_Calibration+0x2c4>)
 800393c:	f004 fe4c 	bl	80085d8 <puts>

			//Turn the LED and buzzer on when both accuracy and sensorAccuracy is high
			if(accuracy == 3 && sensorAccuracy == 3)
 8003940:	7dfb      	ldrb	r3, [r7, #23]
 8003942:	2b03      	cmp	r3, #3
 8003944:	d110      	bne.n	8003968 <BNO080_Calibration+0x184>
 8003946:	78fb      	ldrb	r3, [r7, #3]
 8003948:	2b03      	cmp	r3, #3
 800394a:	d10d      	bne.n	8003968 <BNO080_Calibration+0x184>
			{
				LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_0 | LL_GPIO_PIN_1 | LL_GPIO_PIN_2);
 800394c:	2107      	movs	r1, #7
 800394e:	4857      	ldr	r0, [pc, #348]	; (8003aac <BNO080_Calibration+0x2c8>)
 8003950:	f7ff fc45 	bl	80031de <LL_GPIO_SetOutputPin>
				TIM3->PSC = 65000; //Very low frequency
 8003954:	4b56      	ldr	r3, [pc, #344]	; (8003ab0 <BNO080_Calibration+0x2cc>)
 8003956:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 800395a:	629a      	str	r2, [r3, #40]	; 0x28
				LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800395c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003960:	4853      	ldr	r0, [pc, #332]	; (8003ab0 <BNO080_Calibration+0x2cc>)
 8003962:	f7ff fbe7 	bl	8003134 <LL_TIM_CC_EnableChannel>
 8003966:	e008      	b.n	800397a <BNO080_Calibration+0x196>
			}
			else
			{
				LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_0 | LL_GPIO_PIN_1 | LL_GPIO_PIN_2);
 8003968:	2107      	movs	r1, #7
 800396a:	4850      	ldr	r0, [pc, #320]	; (8003aac <BNO080_Calibration+0x2c8>)
 800396c:	f7ff fc45 	bl	80031fa <LL_GPIO_ResetOutputPin>
				LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003970:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003974:	484e      	ldr	r0, [pc, #312]	; (8003ab0 <BNO080_Calibration+0x2cc>)
 8003976:	f7ff fbee 	bl	8003156 <LL_TIM_CC_DisableChannel>
			}
		}

		Is_iBus_Received(); //Refreshes iBus Data for iBus.SwC
 800397a:	f7ff ff13 	bl	80037a4 <Is_iBus_Received>
		HAL_Delay(100);
 800397e:	2064      	movs	r0, #100	; 0x64
 8003980:	f001 f902 	bl	8004b88 <HAL_Delay>
	while(iBus.SwC == 1500)
 8003984:	4b4b      	ldr	r3, [pc, #300]	; (8003ab4 <BNO080_Calibration+0x2d0>)
 8003986:	899b      	ldrh	r3, [r3, #12]
 8003988:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800398c:	4293      	cmp	r3, r2
 800398e:	f43f af40 	beq.w	8003812 <BNO080_Calibration+0x2e>
	}

	//Ends the loop when iBus.SwC is not mid point
	//Turn the LED and buzzer off
	LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_0 | LL_GPIO_PIN_1 | LL_GPIO_PIN_2);
 8003992:	2107      	movs	r1, #7
 8003994:	4845      	ldr	r0, [pc, #276]	; (8003aac <BNO080_Calibration+0x2c8>)
 8003996:	f7ff fc30 	bl	80031fa <LL_GPIO_ResetOutputPin>
	LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800399a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800399e:	4844      	ldr	r0, [pc, #272]	; (8003ab0 <BNO080_Calibration+0x2cc>)
 80039a0:	f7ff fbd9 	bl	8003156 <LL_TIM_CC_DisableChannel>

	//Saves the current dynamic calibration data (DCD) to memory
	//Sends command to get the latest calibration status
	BNO080_saveCalibration();
 80039a4:	f7fe f880 	bl	8001aa8 <BNO080_saveCalibration>
	BNO080_requestCalibrationStatus();
 80039a8:	f7fe f862 	bl	8001a70 <BNO080_requestCalibrationStatus>

	//Wait for calibration response, timeout if no response
	int counter = 100;
 80039ac:	2364      	movs	r3, #100	; 0x64
 80039ae:	627b      	str	r3, [r7, #36]	; 0x24
	while(1)
	{
		if(--counter == 0) break;
 80039b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b2:	3b01      	subs	r3, #1
 80039b4:	627b      	str	r3, [r7, #36]	; 0x24
 80039b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d02f      	beq.n	8003a1c <BNO080_Calibration+0x238>
		if(BNO080_dataAvailable())
 80039bc:	f7fd fcde 	bl	800137c <BNO080_dataAvailable>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d026      	beq.n	8003a14 <BNO080_Calibration+0x230>
		{
			//The IMU can report many different things. We must wait
			//for the ME Calibration Response Status byte to go to zero
			if(BNO080_calibrationComplete() == 1)
 80039c6:	f7fd ff89 	bl	80018dc <BNO080_calibrationComplete>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d121      	bne.n	8003a14 <BNO080_Calibration+0x230>
			{
				printf("\nCalibration data successfully stored\n");
 80039d0:	4839      	ldr	r0, [pc, #228]	; (8003ab8 <BNO080_Calibration+0x2d4>)
 80039d2:	f004 fe01 	bl	80085d8 <puts>
				LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80039d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80039da:	4835      	ldr	r0, [pc, #212]	; (8003ab0 <BNO080_Calibration+0x2cc>)
 80039dc:	f7ff fbaa 	bl	8003134 <LL_TIM_CC_EnableChannel>
				TIM3->PSC = 2000;
 80039e0:	4b33      	ldr	r3, [pc, #204]	; (8003ab0 <BNO080_Calibration+0x2cc>)
 80039e2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80039e6:	629a      	str	r2, [r3, #40]	; 0x28
				HAL_Delay(300);
 80039e8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80039ec:	f001 f8cc 	bl	8004b88 <HAL_Delay>
				TIM3->PSC = 1500;
 80039f0:	4b2f      	ldr	r3, [pc, #188]	; (8003ab0 <BNO080_Calibration+0x2cc>)
 80039f2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80039f6:	629a      	str	r2, [r3, #40]	; 0x28
				HAL_Delay(300);
 80039f8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80039fc:	f001 f8c4 	bl	8004b88 <HAL_Delay>
				LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003a00:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003a04:	482a      	ldr	r0, [pc, #168]	; (8003ab0 <BNO080_Calibration+0x2cc>)
 8003a06:	f7ff fba6 	bl	8003156 <LL_TIM_CC_DisableChannel>
				HAL_Delay(1000);
 8003a0a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003a0e:	f001 f8bb 	bl	8004b88 <HAL_Delay>
				break;
 8003a12:	e004      	b.n	8003a1e <BNO080_Calibration+0x23a>
			}
		}
		HAL_Delay(10);
 8003a14:	200a      	movs	r0, #10
 8003a16:	f001 f8b7 	bl	8004b88 <HAL_Delay>
		if(--counter == 0) break;
 8003a1a:	e7c9      	b.n	80039b0 <BNO080_Calibration+0x1cc>
 8003a1c:	bf00      	nop
	}
	if(counter == 0)
 8003a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d120      	bne.n	8003a66 <BNO080_Calibration+0x282>
	{
		printf("\nCalibration data failed to store. Please try again.\n");
 8003a24:	4825      	ldr	r0, [pc, #148]	; (8003abc <BNO080_Calibration+0x2d8>)
 8003a26:	f004 fdd7 	bl	80085d8 <puts>
		LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003a2a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003a2e:	4820      	ldr	r0, [pc, #128]	; (8003ab0 <BNO080_Calibration+0x2cc>)
 8003a30:	f7ff fb80 	bl	8003134 <LL_TIM_CC_EnableChannel>
		TIM3->PSC = 1500;
 8003a34:	4b1e      	ldr	r3, [pc, #120]	; (8003ab0 <BNO080_Calibration+0x2cc>)
 8003a36:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003a3a:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(300);
 8003a3c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003a40:	f001 f8a2 	bl	8004b88 <HAL_Delay>
		TIM3->PSC = 2000;
 8003a44:	4b1a      	ldr	r3, [pc, #104]	; (8003ab0 <BNO080_Calibration+0x2cc>)
 8003a46:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003a4a:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(300);
 8003a4c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003a50:	f001 f89a 	bl	8004b88 <HAL_Delay>
		LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003a54:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003a58:	4815      	ldr	r0, [pc, #84]	; (8003ab0 <BNO080_Calibration+0x2cc>)
 8003a5a:	f7ff fb7c 	bl	8003156 <LL_TIM_CC_DisableChannel>
		HAL_Delay(1000);
 8003a5e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003a62:	f001 f891 	bl	8004b88 <HAL_Delay>
	//In general, calibration should be left on at all times. The BNO080
	//auto-calibrates and auto-records cal data roughly every 5 minutes

	//Resets BNO080 to disable Game Rotation Vector and Magnetometer
	//Enables Rotation Vector
	BNO080_Initialization();
 8003a66:	f7fd fbf3 	bl	8001250 <BNO080_Initialization>
	BNO080_enableRotationVector(2500); //Send data update every 2.5ms (400Hz)
 8003a6a:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8003a6e:	f7fd ff00 	bl	8001872 <BNO080_enableRotationVector>
}
 8003a72:	bf00      	nop
 8003a74:	3728      	adds	r7, #40	; 0x28
 8003a76:	46bd      	mov	sp, r7
 8003a78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a7c:	0800b4a8 	.word	0x0800b4a8
 8003a80:	0800b4f4 	.word	0x0800b4f4
 8003a84:	0800b518 	.word	0x0800b518
 8003a88:	0800b524 	.word	0x0800b524
 8003a8c:	0800b530 	.word	0x0800b530
 8003a90:	0800b538 	.word	0x0800b538
 8003a94:	0800b540 	.word	0x0800b540
 8003a98:	0800b548 	.word	0x0800b548
 8003a9c:	0800b558 	.word	0x0800b558
 8003aa0:	0800b564 	.word	0x0800b564
 8003aa4:	0800b568 	.word	0x0800b568
 8003aa8:	0800b570 	.word	0x0800b570
 8003aac:	40020800 	.word	0x40020800
 8003ab0:	40000400 	.word	0x40000400
 8003ab4:	20000308 	.word	0x20000308
 8003ab8:	0800b578 	.word	0x0800b578
 8003abc:	0800b5a0 	.word	0x0800b5a0

08003ac0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8003ac4:	bf00      	nop
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr

08003ace <LL_SPI_SetStandard>:
{
 8003ace:	b480      	push	{r7}
 8003ad0:	b083      	sub	sp, #12
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
 8003ad6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f023 0210 	bic.w	r2, r3, #16
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	431a      	orrs	r2, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	605a      	str	r2, [r3, #4]
}
 8003ae8:	bf00      	nop
 8003aea:	370c      	adds	r7, #12
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr

08003af4 <LL_AHB1_GRP1_EnableClock>:
{
 8003af4:	b480      	push	{r7}
 8003af6:	b085      	sub	sp, #20
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8003afc:	4b08      	ldr	r3, [pc, #32]	; (8003b20 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003afe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b00:	4907      	ldr	r1, [pc, #28]	; (8003b20 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8003b08:	4b05      	ldr	r3, [pc, #20]	; (8003b20 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003b0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	4013      	ands	r3, r2
 8003b10:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003b12:	68fb      	ldr	r3, [r7, #12]
}
 8003b14:	bf00      	nop
 8003b16:	3714      	adds	r7, #20
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr
 8003b20:	40023800 	.word	0x40023800

08003b24 <LL_APB1_GRP1_EnableClock>:
{
 8003b24:	b480      	push	{r7}
 8003b26:	b085      	sub	sp, #20
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8003b2c:	4b08      	ldr	r3, [pc, #32]	; (8003b50 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003b2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b30:	4907      	ldr	r1, [pc, #28]	; (8003b50 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8003b38:	4b05      	ldr	r3, [pc, #20]	; (8003b50 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003b3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	4013      	ands	r3, r2
 8003b40:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003b42:	68fb      	ldr	r3, [r7, #12]
}
 8003b44:	bf00      	nop
 8003b46:	3714      	adds	r7, #20
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr
 8003b50:	40023800 	.word	0x40023800

08003b54 <LL_APB2_GRP1_EnableClock>:
{
 8003b54:	b480      	push	{r7}
 8003b56:	b085      	sub	sp, #20
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8003b5c:	4b08      	ldr	r3, [pc, #32]	; (8003b80 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003b5e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b60:	4907      	ldr	r1, [pc, #28]	; (8003b80 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003b68:	4b05      	ldr	r3, [pc, #20]	; (8003b80 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003b6a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4013      	ands	r3, r2
 8003b70:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003b72:	68fb      	ldr	r3, [r7, #12]
}
 8003b74:	bf00      	nop
 8003b76:	3714      	adds	r7, #20
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr
 8003b80:	40023800 	.word	0x40023800

08003b84 <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b090      	sub	sp, #64	; 0x40
 8003b88:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8003b8a:	f107 0318 	add.w	r3, r7, #24
 8003b8e:	2228      	movs	r2, #40	; 0x28
 8003b90:	2100      	movs	r1, #0
 8003b92:	4618      	mov	r0, r3
 8003b94:	f004 f848 	bl	8007c28 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b98:	463b      	mov	r3, r7
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	601a      	str	r2, [r3, #0]
 8003b9e:	605a      	str	r2, [r3, #4]
 8003ba0:	609a      	str	r2, [r3, #8]
 8003ba2:	60da      	str	r2, [r3, #12]
 8003ba4:	611a      	str	r2, [r3, #16]
 8003ba6:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8003ba8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003bac:	f7ff ffd2 	bl	8003b54 <LL_APB2_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8003bb0:	2001      	movs	r0, #1
 8003bb2:	f7ff ff9f 	bl	8003af4 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration  
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8003bb6:	23e0      	movs	r3, #224	; 0xe0
 8003bb8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003bba:	2302      	movs	r3, #2
 8003bbc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8003bca:	2305      	movs	r3, #5
 8003bcc:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bce:	463b      	mov	r3, r7
 8003bd0:	4619      	mov	r1, r3
 8003bd2:	4813      	ldr	r0, [pc, #76]	; (8003c20 <MX_SPI1_Init+0x9c>)
 8003bd4:	f003 f893 	bl	8006cfe <LL_GPIO_Init>

  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8003bdc:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003be0:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8003be2:	2300      	movs	r3, #0
 8003be4:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8003be6:	2302      	movs	r3, #2
 8003be8:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8003bea:	2301      	movs	r3, #1
 8003bec:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8003bee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 8003bf4:	2310      	movs	r3, #16
 8003bf6:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8003c00:	230a      	movs	r3, #10
 8003c02:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8003c04:	f107 0318 	add.w	r3, r7, #24
 8003c08:	4619      	mov	r1, r3
 8003c0a:	4806      	ldr	r0, [pc, #24]	; (8003c24 <MX_SPI1_Init+0xa0>)
 8003c0c:	f003 fa45 	bl	800709a <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8003c10:	2100      	movs	r1, #0
 8003c12:	4804      	ldr	r0, [pc, #16]	; (8003c24 <MX_SPI1_Init+0xa0>)
 8003c14:	f7ff ff5b 	bl	8003ace <LL_SPI_SetStandard>

}
 8003c18:	bf00      	nop
 8003c1a:	3740      	adds	r7, #64	; 0x40
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	40020000 	.word	0x40020000
 8003c24:	40013000 	.word	0x40013000

08003c28 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b090      	sub	sp, #64	; 0x40
 8003c2c:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8003c2e:	f107 0318 	add.w	r3, r7, #24
 8003c32:	2228      	movs	r2, #40	; 0x28
 8003c34:	2100      	movs	r1, #0
 8003c36:	4618      	mov	r0, r3
 8003c38:	f003 fff6 	bl	8007c28 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c3c:	463b      	mov	r3, r7
 8003c3e:	2200      	movs	r2, #0
 8003c40:	601a      	str	r2, [r3, #0]
 8003c42:	605a      	str	r2, [r3, #4]
 8003c44:	609a      	str	r2, [r3, #8]
 8003c46:	60da      	str	r2, [r3, #12]
 8003c48:	611a      	str	r2, [r3, #16]
 8003c4a:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8003c4c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003c50:	f7ff ff68 	bl	8003b24 <LL_APB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8003c54:	2002      	movs	r0, #2
 8003c56:	f7ff ff4d 	bl	8003af4 <LL_AHB1_GRP1_EnableClock>
  /**SPI2 GPIO Configuration  
  PB13   ------> SPI2_SCK
  PB14   ------> SPI2_MISO
  PB15   ------> SPI2_MOSI 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 8003c5a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003c5e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003c60:	2302      	movs	r3, #2
 8003c62:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003c64:	2303      	movs	r3, #3
 8003c66:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8003c70:	2305      	movs	r3, #5
 8003c72:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c74:	463b      	mov	r3, r7
 8003c76:	4619      	mov	r1, r3
 8003c78:	4813      	ldr	r0, [pc, #76]	; (8003cc8 <MX_SPI2_Init+0xa0>)
 8003c7a:	f003 f840 	bl	8006cfe <LL_GPIO_Init>

  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8003c82:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003c86:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8003c8c:	2302      	movs	r3, #2
 8003c8e:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8003c90:	2301      	movs	r3, #1
 8003c92:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8003c94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c98:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 8003c9a:	2318      	movs	r3, #24
 8003c9c:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8003ca6:	230a      	movs	r3, #10
 8003ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8003caa:	f107 0318 	add.w	r3, r7, #24
 8003cae:	4619      	mov	r1, r3
 8003cb0:	4806      	ldr	r0, [pc, #24]	; (8003ccc <MX_SPI2_Init+0xa4>)
 8003cb2:	f003 f9f2 	bl	800709a <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 8003cb6:	2100      	movs	r1, #0
 8003cb8:	4804      	ldr	r0, [pc, #16]	; (8003ccc <MX_SPI2_Init+0xa4>)
 8003cba:	f7ff ff08 	bl	8003ace <LL_SPI_SetStandard>

}
 8003cbe:	bf00      	nop
 8003cc0:	3740      	adds	r7, #64	; 0x40
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	40020400 	.word	0x40020400
 8003ccc:	40003800 	.word	0x40003800

08003cd0 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b090      	sub	sp, #64	; 0x40
 8003cd4:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8003cd6:	f107 0318 	add.w	r3, r7, #24
 8003cda:	2228      	movs	r2, #40	; 0x28
 8003cdc:	2100      	movs	r1, #0
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f003 ffa2 	bl	8007c28 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ce4:	463b      	mov	r3, r7
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	601a      	str	r2, [r3, #0]
 8003cea:	605a      	str	r2, [r3, #4]
 8003cec:	609a      	str	r2, [r3, #8]
 8003cee:	60da      	str	r2, [r3, #12]
 8003cf0:	611a      	str	r2, [r3, #16]
 8003cf2:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 8003cf4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003cf8:	f7ff ff14 	bl	8003b24 <LL_APB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8003cfc:	2002      	movs	r0, #2
 8003cfe:	f7ff fef9 	bl	8003af4 <LL_AHB1_GRP1_EnableClock>
  /**SPI3 GPIO Configuration  
  PB3   ------> SPI3_SCK
  PB4   ------> SPI3_MISO
  PB5   ------> SPI3_MOSI 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 8003d02:	2338      	movs	r3, #56	; 0x38
 8003d04:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003d06:	2302      	movs	r3, #2
 8003d08:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003d12:	2300      	movs	r3, #0
 8003d14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8003d16:	2306      	movs	r3, #6
 8003d18:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d1a:	463b      	mov	r3, r7
 8003d1c:	4619      	mov	r1, r3
 8003d1e:	4813      	ldr	r0, [pc, #76]	; (8003d6c <MX_SPI3_Init+0x9c>)
 8003d20:	f002 ffed 	bl	8006cfe <LL_GPIO_Init>

  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8003d24:	2300      	movs	r3, #0
 8003d26:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8003d28:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003d2c:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8003d32:	2302      	movs	r3, #2
 8003d34:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8003d36:	2301      	movs	r3, #1
 8003d38:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8003d3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8003d40:	2308      	movs	r3, #8
 8003d42:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8003d44:	2300      	movs	r3, #0
 8003d46:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8003d4c:	230a      	movs	r3, #10
 8003d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 8003d50:	f107 0318 	add.w	r3, r7, #24
 8003d54:	4619      	mov	r1, r3
 8003d56:	4806      	ldr	r0, [pc, #24]	; (8003d70 <MX_SPI3_Init+0xa0>)
 8003d58:	f003 f99f 	bl	800709a <LL_SPI_Init>
  LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 8003d5c:	2100      	movs	r1, #0
 8003d5e:	4804      	ldr	r0, [pc, #16]	; (8003d70 <MX_SPI3_Init+0xa0>)
 8003d60:	f7ff feb5 	bl	8003ace <LL_SPI_SetStandard>

}
 8003d64:	bf00      	nop
 8003d66:	3740      	adds	r7, #64	; 0x40
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	40020400 	.word	0x40020400
 8003d70:	40003c00 	.word	0x40003c00

08003d74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	607b      	str	r3, [r7, #4]
 8003d7e:	4b10      	ldr	r3, [pc, #64]	; (8003dc0 <HAL_MspInit+0x4c>)
 8003d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d82:	4a0f      	ldr	r2, [pc, #60]	; (8003dc0 <HAL_MspInit+0x4c>)
 8003d84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d88:	6453      	str	r3, [r2, #68]	; 0x44
 8003d8a:	4b0d      	ldr	r3, [pc, #52]	; (8003dc0 <HAL_MspInit+0x4c>)
 8003d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d92:	607b      	str	r3, [r7, #4]
 8003d94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d96:	2300      	movs	r3, #0
 8003d98:	603b      	str	r3, [r7, #0]
 8003d9a:	4b09      	ldr	r3, [pc, #36]	; (8003dc0 <HAL_MspInit+0x4c>)
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9e:	4a08      	ldr	r2, [pc, #32]	; (8003dc0 <HAL_MspInit+0x4c>)
 8003da0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003da4:	6413      	str	r3, [r2, #64]	; 0x40
 8003da6:	4b06      	ldr	r3, [pc, #24]	; (8003dc0 <HAL_MspInit+0x4c>)
 8003da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dae:	603b      	str	r3, [r7, #0]
 8003db0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003db2:	bf00      	nop
 8003db4:	370c      	adds	r7, #12
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
 8003dbe:	bf00      	nop
 8003dc0:	40023800 	.word	0x40023800

08003dc4 <LL_USART_IsActiveFlag_RXNE>:
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 0320 	and.w	r3, r3, #32
 8003dd4:	2b20      	cmp	r3, #32
 8003dd6:	bf0c      	ite	eq
 8003dd8:	2301      	moveq	r3, #1
 8003dda:	2300      	movne	r3, #0
 8003ddc:	b2db      	uxtb	r3, r3
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	370c      	adds	r7, #12
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr

08003dea <LL_USART_ClearFlag_RXNE>:
{
 8003dea:	b480      	push	{r7}
 8003dec:	b083      	sub	sp, #12
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f06f 0220 	mvn.w	r2, #32
 8003df8:	601a      	str	r2, [r3, #0]
}
 8003dfa:	bf00      	nop
 8003dfc:	370c      	adds	r7, #12
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr

08003e06 <LL_USART_ReceiveData8>:
{
 8003e06:	b480      	push	{r7}
 8003e08:	b083      	sub	sp, #12
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	b2db      	uxtb	r3, r3
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	370c      	adds	r7, #12
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr

08003e20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e20:	b480      	push	{r7}
 8003e22:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003e24:	bf00      	nop
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr

08003e2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e2e:	b480      	push	{r7}
 8003e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e32:	e7fe      	b.n	8003e32 <HardFault_Handler+0x4>

08003e34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e34:	b480      	push	{r7}
 8003e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e38:	e7fe      	b.n	8003e38 <MemManage_Handler+0x4>

08003e3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e3a:	b480      	push	{r7}
 8003e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e3e:	e7fe      	b.n	8003e3e <BusFault_Handler+0x4>

08003e40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e40:	b480      	push	{r7}
 8003e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e44:	e7fe      	b.n	8003e44 <UsageFault_Handler+0x4>

08003e46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003e46:	b480      	push	{r7}
 8003e48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003e4a:	bf00      	nop
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e54:	b480      	push	{r7}
 8003e56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e58:	bf00      	nop
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr

08003e62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003e62:	b480      	push	{r7}
 8003e64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003e66:	bf00      	nop
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr

08003e70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e74:	f000 fe68 	bl	8004b48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003e78:	bf00      	nop
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
	static unsigned char cnt = 0;

	if (LL_USART_IsActiveFlag_RXNE(UART4)) {
 8003e80:	4831      	ldr	r0, [pc, #196]	; (8003f48 <UART4_IRQHandler+0xcc>)
 8003e82:	f7ff ff9f 	bl	8003dc4 <LL_USART_IsActiveFlag_RXNE>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d058      	beq.n	8003f3e <UART4_IRQHandler+0xc2>
		LL_USART_ClearFlag_RXNE(UART4);
 8003e8c:	482e      	ldr	r0, [pc, #184]	; (8003f48 <UART4_IRQHandler+0xcc>)
 8003e8e:	f7ff ffac 	bl	8003dea <LL_USART_ClearFlag_RXNE>
		uart4_rx_data = LL_USART_ReceiveData8(UART4);
 8003e92:	482d      	ldr	r0, [pc, #180]	; (8003f48 <UART4_IRQHandler+0xcc>)
 8003e94:	f7ff ffb7 	bl	8003e06 <LL_USART_ReceiveData8>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	4b2b      	ldr	r3, [pc, #172]	; (8003f4c <UART4_IRQHandler+0xd0>)
 8003e9e:	701a      	strb	r2, [r3, #0]
		uart4_rx_flag = 1;
 8003ea0:	4b2b      	ldr	r3, [pc, #172]	; (8003f50 <UART4_IRQHandler+0xd4>)
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	701a      	strb	r2, [r3, #0]
//		if (cnt == 35) {
//			m8n_rx_cplt_flag = 1;
//			cnt = 0;
//		}

		switch (cnt) {
 8003ea6:	4b2b      	ldr	r3, [pc, #172]	; (8003f54 <UART4_IRQHandler+0xd8>)
 8003ea8:	781b      	ldrb	r3, [r3, #0]
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d015      	beq.n	8003eda <UART4_IRQHandler+0x5e>
 8003eae:	2b23      	cmp	r3, #35	; 0x23
 8003eb0:	d029      	beq.n	8003f06 <UART4_IRQHandler+0x8a>
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d135      	bne.n	8003f22 <UART4_IRQHandler+0xa6>
		case 0:
			if (uart4_rx_data == 0xb5) {
 8003eb6:	4b25      	ldr	r3, [pc, #148]	; (8003f4c <UART4_IRQHandler+0xd0>)
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	2bb5      	cmp	r3, #181	; 0xb5
 8003ebc:	d141      	bne.n	8003f42 <UART4_IRQHandler+0xc6>
				m8n_rx_buf[cnt] = uart4_rx_data;
 8003ebe:	4b25      	ldr	r3, [pc, #148]	; (8003f54 <UART4_IRQHandler+0xd8>)
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	4b21      	ldr	r3, [pc, #132]	; (8003f4c <UART4_IRQHandler+0xd0>)
 8003ec6:	7819      	ldrb	r1, [r3, #0]
 8003ec8:	4b23      	ldr	r3, [pc, #140]	; (8003f58 <UART4_IRQHandler+0xdc>)
 8003eca:	5499      	strb	r1, [r3, r2]
				cnt++;
 8003ecc:	4b21      	ldr	r3, [pc, #132]	; (8003f54 <UART4_IRQHandler+0xd8>)
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	3301      	adds	r3, #1
 8003ed2:	b2da      	uxtb	r2, r3
 8003ed4:	4b1f      	ldr	r3, [pc, #124]	; (8003f54 <UART4_IRQHandler+0xd8>)
 8003ed6:	701a      	strb	r2, [r3, #0]
			}
			break;
 8003ed8:	e033      	b.n	8003f42 <UART4_IRQHandler+0xc6>
		case 1:
			if (uart4_rx_data == 0x62) {
 8003eda:	4b1c      	ldr	r3, [pc, #112]	; (8003f4c <UART4_IRQHandler+0xd0>)
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	2b62      	cmp	r3, #98	; 0x62
 8003ee0:	d10d      	bne.n	8003efe <UART4_IRQHandler+0x82>
				m8n_rx_buf[cnt] = uart4_rx_data;
 8003ee2:	4b1c      	ldr	r3, [pc, #112]	; (8003f54 <UART4_IRQHandler+0xd8>)
 8003ee4:	781b      	ldrb	r3, [r3, #0]
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	4b18      	ldr	r3, [pc, #96]	; (8003f4c <UART4_IRQHandler+0xd0>)
 8003eea:	7819      	ldrb	r1, [r3, #0]
 8003eec:	4b1a      	ldr	r3, [pc, #104]	; (8003f58 <UART4_IRQHandler+0xdc>)
 8003eee:	5499      	strb	r1, [r3, r2]
				cnt++;
 8003ef0:	4b18      	ldr	r3, [pc, #96]	; (8003f54 <UART4_IRQHandler+0xd8>)
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	3301      	adds	r3, #1
 8003ef6:	b2da      	uxtb	r2, r3
 8003ef8:	4b16      	ldr	r3, [pc, #88]	; (8003f54 <UART4_IRQHandler+0xd8>)
 8003efa:	701a      	strb	r2, [r3, #0]
			} else {
				cnt = 0;
			}
			break;
 8003efc:	e022      	b.n	8003f44 <UART4_IRQHandler+0xc8>
				cnt = 0;
 8003efe:	4b15      	ldr	r3, [pc, #84]	; (8003f54 <UART4_IRQHandler+0xd8>)
 8003f00:	2200      	movs	r2, #0
 8003f02:	701a      	strb	r2, [r3, #0]
			break;
 8003f04:	e01e      	b.n	8003f44 <UART4_IRQHandler+0xc8>
		case 35:
			m8n_rx_buf[cnt] = uart4_rx_data;
 8003f06:	4b13      	ldr	r3, [pc, #76]	; (8003f54 <UART4_IRQHandler+0xd8>)
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	4b0f      	ldr	r3, [pc, #60]	; (8003f4c <UART4_IRQHandler+0xd0>)
 8003f0e:	7819      	ldrb	r1, [r3, #0]
 8003f10:	4b11      	ldr	r3, [pc, #68]	; (8003f58 <UART4_IRQHandler+0xdc>)
 8003f12:	5499      	strb	r1, [r3, r2]
			cnt = 0;
 8003f14:	4b0f      	ldr	r3, [pc, #60]	; (8003f54 <UART4_IRQHandler+0xd8>)
 8003f16:	2200      	movs	r2, #0
 8003f18:	701a      	strb	r2, [r3, #0]
			m8n_rx_cplt_flag = 1;
 8003f1a:	4b10      	ldr	r3, [pc, #64]	; (8003f5c <UART4_IRQHandler+0xe0>)
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	701a      	strb	r2, [r3, #0]
			break;
 8003f20:	e010      	b.n	8003f44 <UART4_IRQHandler+0xc8>
		default:
			m8n_rx_buf[cnt] = uart4_rx_data;
 8003f22:	4b0c      	ldr	r3, [pc, #48]	; (8003f54 <UART4_IRQHandler+0xd8>)
 8003f24:	781b      	ldrb	r3, [r3, #0]
 8003f26:	461a      	mov	r2, r3
 8003f28:	4b08      	ldr	r3, [pc, #32]	; (8003f4c <UART4_IRQHandler+0xd0>)
 8003f2a:	7819      	ldrb	r1, [r3, #0]
 8003f2c:	4b0a      	ldr	r3, [pc, #40]	; (8003f58 <UART4_IRQHandler+0xdc>)
 8003f2e:	5499      	strb	r1, [r3, r2]
			cnt++;
 8003f30:	4b08      	ldr	r3, [pc, #32]	; (8003f54 <UART4_IRQHandler+0xd8>)
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	3301      	adds	r3, #1
 8003f36:	b2da      	uxtb	r2, r3
 8003f38:	4b06      	ldr	r3, [pc, #24]	; (8003f54 <UART4_IRQHandler+0xd8>)
 8003f3a:	701a      	strb	r2, [r3, #0]
			break;
 8003f3c:	e002      	b.n	8003f44 <UART4_IRQHandler+0xc8>
		}
	}
 8003f3e:	bf00      	nop
 8003f40:	e000      	b.n	8003f44 <UART4_IRQHandler+0xc8>
			break;
 8003f42:	bf00      	nop

  /* USER CODE END UART4_IRQn 0 */
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8003f44:	bf00      	nop
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	40004c00 	.word	0x40004c00
 8003f4c:	2000020c 	.word	0x2000020c
 8003f50:	2000020b 	.word	0x2000020b
 8003f54:	2000020f 	.word	0x2000020f
 8003f58:	20000448 	.word	0x20000448
 8003f5c:	2000020d 	.word	0x2000020d

08003f60 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */
	static unsigned char cnt = 0;

	if (LL_USART_IsActiveFlag_RXNE(UART5)) {
 8003f64:	4831      	ldr	r0, [pc, #196]	; (800402c <UART5_IRQHandler+0xcc>)
 8003f66:	f7ff ff2d 	bl	8003dc4 <LL_USART_IsActiveFlag_RXNE>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d058      	beq.n	8004022 <UART5_IRQHandler+0xc2>
		LL_USART_ClearFlag_RXNE(UART5);
 8003f70:	482e      	ldr	r0, [pc, #184]	; (800402c <UART5_IRQHandler+0xcc>)
 8003f72:	f7ff ff3a 	bl	8003dea <LL_USART_ClearFlag_RXNE>
		uart5_rx_data = LL_USART_ReceiveData8(UART5);
 8003f76:	482d      	ldr	r0, [pc, #180]	; (800402c <UART5_IRQHandler+0xcc>)
 8003f78:	f7ff ff45 	bl	8003e06 <LL_USART_ReceiveData8>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	461a      	mov	r2, r3
 8003f80:	4b2b      	ldr	r3, [pc, #172]	; (8004030 <UART5_IRQHandler+0xd0>)
 8003f82:	701a      	strb	r2, [r3, #0]
		uart5_rx_flag = 1;
 8003f84:	4b2b      	ldr	r3, [pc, #172]	; (8004034 <UART5_IRQHandler+0xd4>)
 8003f86:	2201      	movs	r2, #1
 8003f88:	701a      	strb	r2, [r3, #0]

		switch (cnt) {
 8003f8a:	4b2b      	ldr	r3, [pc, #172]	; (8004038 <UART5_IRQHandler+0xd8>)
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d015      	beq.n	8003fbe <UART5_IRQHandler+0x5e>
 8003f92:	2b1f      	cmp	r3, #31
 8003f94:	d029      	beq.n	8003fea <UART5_IRQHandler+0x8a>
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d135      	bne.n	8004006 <UART5_IRQHandler+0xa6>
		case 0:
			if (uart5_rx_data == 0x20) {
 8003f9a:	4b25      	ldr	r3, [pc, #148]	; (8004030 <UART5_IRQHandler+0xd0>)
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	2b20      	cmp	r3, #32
 8003fa0:	d141      	bne.n	8004026 <UART5_IRQHandler+0xc6>
				ibus_rx_buf[cnt] = uart5_rx_data;
 8003fa2:	4b25      	ldr	r3, [pc, #148]	; (8004038 <UART5_IRQHandler+0xd8>)
 8003fa4:	781b      	ldrb	r3, [r3, #0]
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	4b21      	ldr	r3, [pc, #132]	; (8004030 <UART5_IRQHandler+0xd0>)
 8003faa:	7819      	ldrb	r1, [r3, #0]
 8003fac:	4b23      	ldr	r3, [pc, #140]	; (800403c <UART5_IRQHandler+0xdc>)
 8003fae:	5499      	strb	r1, [r3, r2]
				cnt++;
 8003fb0:	4b21      	ldr	r3, [pc, #132]	; (8004038 <UART5_IRQHandler+0xd8>)
 8003fb2:	781b      	ldrb	r3, [r3, #0]
 8003fb4:	3301      	adds	r3, #1
 8003fb6:	b2da      	uxtb	r2, r3
 8003fb8:	4b1f      	ldr	r3, [pc, #124]	; (8004038 <UART5_IRQHandler+0xd8>)
 8003fba:	701a      	strb	r2, [r3, #0]
			}
			break;
 8003fbc:	e033      	b.n	8004026 <UART5_IRQHandler+0xc6>
		case 1:
			if (uart5_rx_data == 0x40) {
 8003fbe:	4b1c      	ldr	r3, [pc, #112]	; (8004030 <UART5_IRQHandler+0xd0>)
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	2b40      	cmp	r3, #64	; 0x40
 8003fc4:	d10d      	bne.n	8003fe2 <UART5_IRQHandler+0x82>
				ibus_rx_buf[cnt] = uart5_rx_data;
 8003fc6:	4b1c      	ldr	r3, [pc, #112]	; (8004038 <UART5_IRQHandler+0xd8>)
 8003fc8:	781b      	ldrb	r3, [r3, #0]
 8003fca:	461a      	mov	r2, r3
 8003fcc:	4b18      	ldr	r3, [pc, #96]	; (8004030 <UART5_IRQHandler+0xd0>)
 8003fce:	7819      	ldrb	r1, [r3, #0]
 8003fd0:	4b1a      	ldr	r3, [pc, #104]	; (800403c <UART5_IRQHandler+0xdc>)
 8003fd2:	5499      	strb	r1, [r3, r2]
				cnt++;
 8003fd4:	4b18      	ldr	r3, [pc, #96]	; (8004038 <UART5_IRQHandler+0xd8>)
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	3301      	adds	r3, #1
 8003fda:	b2da      	uxtb	r2, r3
 8003fdc:	4b16      	ldr	r3, [pc, #88]	; (8004038 <UART5_IRQHandler+0xd8>)
 8003fde:	701a      	strb	r2, [r3, #0]
			} else {
				cnt = 0;
			}
			break;
 8003fe0:	e022      	b.n	8004028 <UART5_IRQHandler+0xc8>
				cnt = 0;
 8003fe2:	4b15      	ldr	r3, [pc, #84]	; (8004038 <UART5_IRQHandler+0xd8>)
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	701a      	strb	r2, [r3, #0]
			break;
 8003fe8:	e01e      	b.n	8004028 <UART5_IRQHandler+0xc8>
		case 31:
			ibus_rx_buf[cnt] = uart5_rx_data;
 8003fea:	4b13      	ldr	r3, [pc, #76]	; (8004038 <UART5_IRQHandler+0xd8>)
 8003fec:	781b      	ldrb	r3, [r3, #0]
 8003fee:	461a      	mov	r2, r3
 8003ff0:	4b0f      	ldr	r3, [pc, #60]	; (8004030 <UART5_IRQHandler+0xd0>)
 8003ff2:	7819      	ldrb	r1, [r3, #0]
 8003ff4:	4b11      	ldr	r3, [pc, #68]	; (800403c <UART5_IRQHandler+0xdc>)
 8003ff6:	5499      	strb	r1, [r3, r2]
			cnt = 0;
 8003ff8:	4b0f      	ldr	r3, [pc, #60]	; (8004038 <UART5_IRQHandler+0xd8>)
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	701a      	strb	r2, [r3, #0]
			ibus_rx_cplt_flag = 1;
 8003ffe:	4b10      	ldr	r3, [pc, #64]	; (8004040 <UART5_IRQHandler+0xe0>)
 8004000:	2201      	movs	r2, #1
 8004002:	701a      	strb	r2, [r3, #0]
			break;
 8004004:	e010      	b.n	8004028 <UART5_IRQHandler+0xc8>
		default:
			ibus_rx_buf[cnt] = uart5_rx_data;
 8004006:	4b0c      	ldr	r3, [pc, #48]	; (8004038 <UART5_IRQHandler+0xd8>)
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	461a      	mov	r2, r3
 800400c:	4b08      	ldr	r3, [pc, #32]	; (8004030 <UART5_IRQHandler+0xd0>)
 800400e:	7819      	ldrb	r1, [r3, #0]
 8004010:	4b0a      	ldr	r3, [pc, #40]	; (800403c <UART5_IRQHandler+0xdc>)
 8004012:	5499      	strb	r1, [r3, r2]
			cnt++;
 8004014:	4b08      	ldr	r3, [pc, #32]	; (8004038 <UART5_IRQHandler+0xd8>)
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	3301      	adds	r3, #1
 800401a:	b2da      	uxtb	r2, r3
 800401c:	4b06      	ldr	r3, [pc, #24]	; (8004038 <UART5_IRQHandler+0xd8>)
 800401e:	701a      	strb	r2, [r3, #0]
			break;
 8004020:	e002      	b.n	8004028 <UART5_IRQHandler+0xc8>
		}

//		while(!LL_USART_IsActiveFlag_TXE(USART6));
//		LL_USART_TransmitData8(USART6, uart5_rx_data);
	}
 8004022:	bf00      	nop
 8004024:	e000      	b.n	8004028 <UART5_IRQHandler+0xc8>
			break;
 8004026:	bf00      	nop
  /* USER CODE END UART5_IRQn 0 */
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8004028:	bf00      	nop
 800402a:	bd80      	pop	{r7, pc}
 800402c:	40005000 	.word	0x40005000
 8004030:	2000020a 	.word	0x2000020a
 8004034:	20000209 	.word	0x20000209
 8004038:	20000210 	.word	0x20000210
 800403c:	20000428 	.word	0x20000428
 8004040:	2000020e 	.word	0x2000020e

08004044 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004048:	4802      	ldr	r0, [pc, #8]	; (8004054 <DMA2_Stream0_IRQHandler+0x10>)
 800404a:	f001 fbcb 	bl	80057e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800404e:	bf00      	nop
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	20000374 	.word	0x20000374

08004058 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	if (LL_USART_IsActiveFlag_RXNE(USART6)) {
 800405c:	480a      	ldr	r0, [pc, #40]	; (8004088 <USART6_IRQHandler+0x30>)
 800405e:	f7ff feb1 	bl	8003dc4 <LL_USART_IsActiveFlag_RXNE>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d00c      	beq.n	8004082 <USART6_IRQHandler+0x2a>
		LL_USART_ClearFlag_RXNE(USART6);
 8004068:	4807      	ldr	r0, [pc, #28]	; (8004088 <USART6_IRQHandler+0x30>)
 800406a:	f7ff febe 	bl	8003dea <LL_USART_ClearFlag_RXNE>
		uart6_rx_data = LL_USART_ReceiveData8(USART6);
 800406e:	4806      	ldr	r0, [pc, #24]	; (8004088 <USART6_IRQHandler+0x30>)
 8004070:	f7ff fec9 	bl	8003e06 <LL_USART_ReceiveData8>
 8004074:	4603      	mov	r3, r0
 8004076:	461a      	mov	r2, r3
 8004078:	4b04      	ldr	r3, [pc, #16]	; (800408c <USART6_IRQHandler+0x34>)
 800407a:	701a      	strb	r2, [r3, #0]
		uart6_rx_flag = 1;
 800407c:	4b04      	ldr	r3, [pc, #16]	; (8004090 <USART6_IRQHandler+0x38>)
 800407e:	2201      	movs	r2, #1
 8004080:	701a      	strb	r2, [r3, #0]

  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8004082:	bf00      	nop
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	40011400 	.word	0x40011400
 800408c:	20000208 	.word	0x20000208
 8004090:	20000207 	.word	0x20000207

08004094 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b086      	sub	sp, #24
 8004098:	af00      	add	r7, sp, #0
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	60b9      	str	r1, [r7, #8]
 800409e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040a0:	2300      	movs	r3, #0
 80040a2:	617b      	str	r3, [r7, #20]
 80040a4:	e00a      	b.n	80040bc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80040a6:	f3af 8000 	nop.w
 80040aa:	4601      	mov	r1, r0
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	1c5a      	adds	r2, r3, #1
 80040b0:	60ba      	str	r2, [r7, #8]
 80040b2:	b2ca      	uxtb	r2, r1
 80040b4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	3301      	adds	r3, #1
 80040ba:	617b      	str	r3, [r7, #20]
 80040bc:	697a      	ldr	r2, [r7, #20]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	dbf0      	blt.n	80040a6 <_read+0x12>
	}

return len;
 80040c4:	687b      	ldr	r3, [r7, #4]
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3718      	adds	r7, #24
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}

080040ce <_close>:
	}
	return len;
}

int _close(int file)
{
 80040ce:	b480      	push	{r7}
 80040d0:	b083      	sub	sp, #12
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	6078      	str	r0, [r7, #4]
	return -1;
 80040d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80040da:	4618      	mov	r0, r3
 80040dc:	370c      	adds	r7, #12
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr

080040e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80040e6:	b480      	push	{r7}
 80040e8:	b083      	sub	sp, #12
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
 80040ee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80040f6:	605a      	str	r2, [r3, #4]
	return 0;
 80040f8:	2300      	movs	r3, #0
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	370c      	adds	r7, #12
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr

08004106 <_isatty>:

int _isatty(int file)
{
 8004106:	b480      	push	{r7}
 8004108:	b083      	sub	sp, #12
 800410a:	af00      	add	r7, sp, #0
 800410c:	6078      	str	r0, [r7, #4]
	return 1;
 800410e:	2301      	movs	r3, #1
}
 8004110:	4618      	mov	r0, r3
 8004112:	370c      	adds	r7, #12
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr

0800411c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800411c:	b480      	push	{r7}
 800411e:	b085      	sub	sp, #20
 8004120:	af00      	add	r7, sp, #0
 8004122:	60f8      	str	r0, [r7, #12]
 8004124:	60b9      	str	r1, [r7, #8]
 8004126:	607a      	str	r2, [r7, #4]
	return 0;
 8004128:	2300      	movs	r3, #0
}
 800412a:	4618      	mov	r0, r3
 800412c:	3714      	adds	r7, #20
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr
	...

08004138 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004140:	4b11      	ldr	r3, [pc, #68]	; (8004188 <_sbrk+0x50>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d102      	bne.n	800414e <_sbrk+0x16>
		heap_end = &end;
 8004148:	4b0f      	ldr	r3, [pc, #60]	; (8004188 <_sbrk+0x50>)
 800414a:	4a10      	ldr	r2, [pc, #64]	; (800418c <_sbrk+0x54>)
 800414c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800414e:	4b0e      	ldr	r3, [pc, #56]	; (8004188 <_sbrk+0x50>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004154:	4b0c      	ldr	r3, [pc, #48]	; (8004188 <_sbrk+0x50>)
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	4413      	add	r3, r2
 800415c:	466a      	mov	r2, sp
 800415e:	4293      	cmp	r3, r2
 8004160:	d907      	bls.n	8004172 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8004162:	f003 fd37 	bl	8007bd4 <__errno>
 8004166:	4602      	mov	r2, r0
 8004168:	230c      	movs	r3, #12
 800416a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800416c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004170:	e006      	b.n	8004180 <_sbrk+0x48>
	}

	heap_end += incr;
 8004172:	4b05      	ldr	r3, [pc, #20]	; (8004188 <_sbrk+0x50>)
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4413      	add	r3, r2
 800417a:	4a03      	ldr	r2, [pc, #12]	; (8004188 <_sbrk+0x50>)
 800417c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800417e:	68fb      	ldr	r3, [r7, #12]
}
 8004180:	4618      	mov	r0, r3
 8004182:	3710      	adds	r7, #16
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}
 8004188:	20000214 	.word	0x20000214
 800418c:	20000478 	.word	0x20000478

08004190 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004190:	b480      	push	{r7}
 8004192:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004194:	4b08      	ldr	r3, [pc, #32]	; (80041b8 <SystemInit+0x28>)
 8004196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800419a:	4a07      	ldr	r2, [pc, #28]	; (80041b8 <SystemInit+0x28>)
 800419c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80041a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80041a4:	4b04      	ldr	r3, [pc, #16]	; (80041b8 <SystemInit+0x28>)
 80041a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80041aa:	609a      	str	r2, [r3, #8]
#endif
}
 80041ac:	bf00      	nop
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	e000ed00 	.word	0xe000ed00

080041bc <LL_TIM_EnableARRPreload>:
{
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	601a      	str	r2, [r3, #0]
}
 80041d0:	bf00      	nop
 80041d2:	370c      	adds	r7, #12
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <LL_TIM_OC_EnableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 80041dc:	b4b0      	push	{r4, r5, r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d01c      	beq.n	8004226 <LL_TIM_OC_EnableFast+0x4a>
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	2b04      	cmp	r3, #4
 80041f0:	d017      	beq.n	8004222 <LL_TIM_OC_EnableFast+0x46>
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	2b10      	cmp	r3, #16
 80041f6:	d012      	beq.n	800421e <LL_TIM_OC_EnableFast+0x42>
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	2b40      	cmp	r3, #64	; 0x40
 80041fc:	d00d      	beq.n	800421a <LL_TIM_OC_EnableFast+0x3e>
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004204:	d007      	beq.n	8004216 <LL_TIM_OC_EnableFast+0x3a>
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800420c:	d101      	bne.n	8004212 <LL_TIM_OC_EnableFast+0x36>
 800420e:	2305      	movs	r3, #5
 8004210:	e00a      	b.n	8004228 <LL_TIM_OC_EnableFast+0x4c>
 8004212:	2306      	movs	r3, #6
 8004214:	e008      	b.n	8004228 <LL_TIM_OC_EnableFast+0x4c>
 8004216:	2304      	movs	r3, #4
 8004218:	e006      	b.n	8004228 <LL_TIM_OC_EnableFast+0x4c>
 800421a:	2303      	movs	r3, #3
 800421c:	e004      	b.n	8004228 <LL_TIM_OC_EnableFast+0x4c>
 800421e:	2302      	movs	r3, #2
 8004220:	e002      	b.n	8004228 <LL_TIM_OC_EnableFast+0x4c>
 8004222:	2301      	movs	r3, #1
 8004224:	e000      	b.n	8004228 <LL_TIM_OC_EnableFast+0x4c>
 8004226:	2300      	movs	r3, #0
 8004228:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	3318      	adds	r3, #24
 800422e:	461a      	mov	r2, r3
 8004230:	4629      	mov	r1, r5
 8004232:	4b09      	ldr	r3, [pc, #36]	; (8004258 <LL_TIM_OC_EnableFast+0x7c>)
 8004234:	5c5b      	ldrb	r3, [r3, r1]
 8004236:	4413      	add	r3, r2
 8004238:	461c      	mov	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 800423a:	6822      	ldr	r2, [r4, #0]
 800423c:	4629      	mov	r1, r5
 800423e:	4b07      	ldr	r3, [pc, #28]	; (800425c <LL_TIM_OC_EnableFast+0x80>)
 8004240:	5c5b      	ldrb	r3, [r3, r1]
 8004242:	4619      	mov	r1, r3
 8004244:	2304      	movs	r3, #4
 8004246:	408b      	lsls	r3, r1
 8004248:	4313      	orrs	r3, r2
 800424a:	6023      	str	r3, [r4, #0]

}
 800424c:	bf00      	nop
 800424e:	370c      	adds	r7, #12
 8004250:	46bd      	mov	sp, r7
 8004252:	bcb0      	pop	{r4, r5, r7}
 8004254:	4770      	bx	lr
 8004256:	bf00      	nop
 8004258:	0800b644 	.word	0x0800b644
 800425c:	0800b64c 	.word	0x0800b64c

08004260 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8004260:	b4b0      	push	{r4, r5, r7}
 8004262:	b083      	sub	sp, #12
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	2b01      	cmp	r3, #1
 800426e:	d01c      	beq.n	80042aa <LL_TIM_OC_EnablePreload+0x4a>
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	2b04      	cmp	r3, #4
 8004274:	d017      	beq.n	80042a6 <LL_TIM_OC_EnablePreload+0x46>
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	2b10      	cmp	r3, #16
 800427a:	d012      	beq.n	80042a2 <LL_TIM_OC_EnablePreload+0x42>
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	2b40      	cmp	r3, #64	; 0x40
 8004280:	d00d      	beq.n	800429e <LL_TIM_OC_EnablePreload+0x3e>
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004288:	d007      	beq.n	800429a <LL_TIM_OC_EnablePreload+0x3a>
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004290:	d101      	bne.n	8004296 <LL_TIM_OC_EnablePreload+0x36>
 8004292:	2305      	movs	r3, #5
 8004294:	e00a      	b.n	80042ac <LL_TIM_OC_EnablePreload+0x4c>
 8004296:	2306      	movs	r3, #6
 8004298:	e008      	b.n	80042ac <LL_TIM_OC_EnablePreload+0x4c>
 800429a:	2304      	movs	r3, #4
 800429c:	e006      	b.n	80042ac <LL_TIM_OC_EnablePreload+0x4c>
 800429e:	2303      	movs	r3, #3
 80042a0:	e004      	b.n	80042ac <LL_TIM_OC_EnablePreload+0x4c>
 80042a2:	2302      	movs	r3, #2
 80042a4:	e002      	b.n	80042ac <LL_TIM_OC_EnablePreload+0x4c>
 80042a6:	2301      	movs	r3, #1
 80042a8:	e000      	b.n	80042ac <LL_TIM_OC_EnablePreload+0x4c>
 80042aa:	2300      	movs	r3, #0
 80042ac:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	3318      	adds	r3, #24
 80042b2:	461a      	mov	r2, r3
 80042b4:	4629      	mov	r1, r5
 80042b6:	4b09      	ldr	r3, [pc, #36]	; (80042dc <LL_TIM_OC_EnablePreload+0x7c>)
 80042b8:	5c5b      	ldrb	r3, [r3, r1]
 80042ba:	4413      	add	r3, r2
 80042bc:	461c      	mov	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80042be:	6822      	ldr	r2, [r4, #0]
 80042c0:	4629      	mov	r1, r5
 80042c2:	4b07      	ldr	r3, [pc, #28]	; (80042e0 <LL_TIM_OC_EnablePreload+0x80>)
 80042c4:	5c5b      	ldrb	r3, [r3, r1]
 80042c6:	4619      	mov	r1, r3
 80042c8:	2308      	movs	r3, #8
 80042ca:	408b      	lsls	r3, r1
 80042cc:	4313      	orrs	r3, r2
 80042ce:	6023      	str	r3, [r4, #0]
}
 80042d0:	bf00      	nop
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bcb0      	pop	{r4, r5, r7}
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	0800b644 	.word	0x0800b644
 80042e0:	0800b64c 	.word	0x0800b64c

080042e4 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b083      	sub	sp, #12
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042f6:	f023 0307 	bic.w	r3, r3, #7
 80042fa:	683a      	ldr	r2, [r7, #0]
 80042fc:	431a      	orrs	r2, r3
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	609a      	str	r2, [r3, #8]
}
 8004302:	bf00      	nop
 8004304:	370c      	adds	r7, #12
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr

0800430e <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 800430e:	b480      	push	{r7}
 8004310:	b083      	sub	sp, #12
 8004312:	af00      	add	r7, sp, #0
 8004314:	6078      	str	r0, [r7, #4]
 8004316:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	431a      	orrs	r2, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	605a      	str	r2, [r3, #4]
}
 8004328:	bf00      	nop
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	609a      	str	r2, [r3, #8]
}
 8004348:	bf00      	nop
 800434a:	370c      	adds	r7, #12
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr

08004354 <LL_AHB1_GRP1_EnableClock>:
{
 8004354:	b480      	push	{r7}
 8004356:	b085      	sub	sp, #20
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800435c:	4b08      	ldr	r3, [pc, #32]	; (8004380 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800435e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004360:	4907      	ldr	r1, [pc, #28]	; (8004380 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4313      	orrs	r3, r2
 8004366:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8004368:	4b05      	ldr	r3, [pc, #20]	; (8004380 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800436a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	4013      	ands	r3, r2
 8004370:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004372:	68fb      	ldr	r3, [r7, #12]
}
 8004374:	bf00      	nop
 8004376:	3714      	adds	r7, #20
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr
 8004380:	40023800 	.word	0x40023800

08004384 <LL_APB1_GRP1_EnableClock>:
{
 8004384:	b480      	push	{r7}
 8004386:	b085      	sub	sp, #20
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 800438c:	4b08      	ldr	r3, [pc, #32]	; (80043b0 <LL_APB1_GRP1_EnableClock+0x2c>)
 800438e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004390:	4907      	ldr	r1, [pc, #28]	; (80043b0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4313      	orrs	r3, r2
 8004396:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8004398:	4b05      	ldr	r3, [pc, #20]	; (80043b0 <LL_APB1_GRP1_EnableClock+0x2c>)
 800439a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	4013      	ands	r3, r2
 80043a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80043a2:	68fb      	ldr	r3, [r7, #12]
}
 80043a4:	bf00      	nop
 80043a6:	3714      	adds	r7, #20
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr
 80043b0:	40023800 	.word	0x40023800

080043b4 <MX_TIM3_Init>:

/* USER CODE END 0 */

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b094      	sub	sp, #80	; 0x50
 80043b8:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80043ba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80043be:	2200      	movs	r2, #0
 80043c0:	601a      	str	r2, [r3, #0]
 80043c2:	605a      	str	r2, [r3, #4]
 80043c4:	609a      	str	r2, [r3, #8]
 80043c6:	60da      	str	r2, [r3, #12]
 80043c8:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80043ca:	f107 031c 	add.w	r3, r7, #28
 80043ce:	2220      	movs	r2, #32
 80043d0:	2100      	movs	r1, #0
 80043d2:	4618      	mov	r0, r3
 80043d4:	f003 fc28 	bl	8007c28 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043d8:	1d3b      	adds	r3, r7, #4
 80043da:	2200      	movs	r2, #0
 80043dc:	601a      	str	r2, [r3, #0]
 80043de:	605a      	str	r2, [r3, #4]
 80043e0:	609a      	str	r2, [r3, #8]
 80043e2:	60da      	str	r2, [r3, #12]
 80043e4:	611a      	str	r2, [r3, #16]
 80043e6:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 80043e8:	2002      	movs	r0, #2
 80043ea:	f7ff ffcb 	bl	8004384 <LL_APB1_GRP1_EnableClock>

  TIM_InitStruct.Prescaler = 999;
 80043ee:	f240 33e7 	movw	r3, #999	; 0x3e7
 80043f2:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80043f4:	2300      	movs	r3, #0
 80043f6:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 20;
 80043f8:	2314      	movs	r3, #20
 80043fa:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80043fc:	2300      	movs	r3, #0
 80043fe:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8004400:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004404:	4619      	mov	r1, r3
 8004406:	4820      	ldr	r0, [pc, #128]	; (8004488 <MX_TIM3_Init+0xd4>)
 8004408:	f002 ff0c 	bl	8007224 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM3);
 800440c:	481e      	ldr	r0, [pc, #120]	; (8004488 <MX_TIM3_Init+0xd4>)
 800440e:	f7ff fed5 	bl	80041bc <LL_TIM_EnableARRPreload>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH4);
 8004412:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004416:	481c      	ldr	r0, [pc, #112]	; (8004488 <MX_TIM3_Init+0xd4>)
 8004418:	f7ff ff22 	bl	8004260 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 800441c:	2360      	movs	r3, #96	; 0x60
 800441e:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8004420:	2300      	movs	r3, #0
 8004422:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8004424:	2300      	movs	r3, #0
 8004426:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 10;
 8004428:	230a      	movs	r3, #10
 800442a:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 800442c:	2300      	movs	r3, #0
 800442e:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8004430:	f107 031c 	add.w	r3, r7, #28
 8004434:	461a      	mov	r2, r3
 8004436:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800443a:	4813      	ldr	r0, [pc, #76]	; (8004488 <MX_TIM3_Init+0xd4>)
 800443c:	f002 ff8c 	bl	8007358 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM3, LL_TIM_CHANNEL_CH4);
 8004440:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004444:	4810      	ldr	r0, [pc, #64]	; (8004488 <MX_TIM3_Init+0xd4>)
 8004446:	f7ff fec9 	bl	80041dc <LL_TIM_OC_EnableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 800444a:	2100      	movs	r1, #0
 800444c:	480e      	ldr	r0, [pc, #56]	; (8004488 <MX_TIM3_Init+0xd4>)
 800444e:	f7ff ff5e 	bl	800430e <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8004452:	480d      	ldr	r0, [pc, #52]	; (8004488 <MX_TIM3_Init+0xd4>)
 8004454:	f7ff ff6e 	bl	8004334 <LL_TIM_DisableMasterSlaveMode>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8004458:	2002      	movs	r0, #2
 800445a:	f7ff ff7b 	bl	8004354 <LL_AHB1_GRP1_EnableClock>
    /**TIM3 GPIO Configuration    
    PB1     ------> TIM3_CH4 
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 800445e:	2302      	movs	r3, #2
 8004460:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004462:	2302      	movs	r3, #2
 8004464:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004466:	2300      	movs	r3, #0
 8004468:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800446a:	2300      	movs	r3, #0
 800446c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800446e:	2300      	movs	r3, #0
 8004470:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8004472:	2302      	movs	r3, #2
 8004474:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004476:	1d3b      	adds	r3, r7, #4
 8004478:	4619      	mov	r1, r3
 800447a:	4804      	ldr	r0, [pc, #16]	; (800448c <MX_TIM3_Init+0xd8>)
 800447c:	f002 fc3f 	bl	8006cfe <LL_GPIO_Init>

}
 8004480:	bf00      	nop
 8004482:	3750      	adds	r7, #80	; 0x50
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}
 8004488:	40000400 	.word	0x40000400
 800448c:	40020400 	.word	0x40020400

08004490 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b094      	sub	sp, #80	; 0x50
 8004494:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8004496:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800449a:	2200      	movs	r2, #0
 800449c:	601a      	str	r2, [r3, #0]
 800449e:	605a      	str	r2, [r3, #4]
 80044a0:	609a      	str	r2, [r3, #8]
 80044a2:	60da      	str	r2, [r3, #12]
 80044a4:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80044a6:	f107 031c 	add.w	r3, r7, #28
 80044aa:	2220      	movs	r2, #32
 80044ac:	2100      	movs	r1, #0
 80044ae:	4618      	mov	r0, r3
 80044b0:	f003 fbba 	bl	8007c28 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044b4:	1d3b      	adds	r3, r7, #4
 80044b6:	2200      	movs	r2, #0
 80044b8:	601a      	str	r2, [r3, #0]
 80044ba:	605a      	str	r2, [r3, #4]
 80044bc:	609a      	str	r2, [r3, #8]
 80044be:	60da      	str	r2, [r3, #12]
 80044c0:	611a      	str	r2, [r3, #16]
 80044c2:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM5);
 80044c4:	2008      	movs	r0, #8
 80044c6:	f7ff ff5d 	bl	8004384 <LL_APB1_GRP1_EnableClock>

  TIM_InitStruct.Prescaler = 0;
 80044ca:	2300      	movs	r3, #0
 80044cc:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80044ce:	2300      	movs	r3, #0
 80044d0:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 41999;
 80044d2:	f24a 430f 	movw	r3, #41999	; 0xa40f
 80044d6:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80044d8:	2300      	movs	r3, #0
 80044da:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM5, &TIM_InitStruct);
 80044dc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80044e0:	4619      	mov	r1, r3
 80044e2:	4840      	ldr	r0, [pc, #256]	; (80045e4 <MX_TIM5_Init+0x154>)
 80044e4:	f002 fe9e 	bl	8007224 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM5);
 80044e8:	483e      	ldr	r0, [pc, #248]	; (80045e4 <MX_TIM5_Init+0x154>)
 80044ea:	f7ff fe67 	bl	80041bc <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM5, LL_TIM_CLOCKSOURCE_INTERNAL);
 80044ee:	2100      	movs	r1, #0
 80044f0:	483c      	ldr	r0, [pc, #240]	; (80045e4 <MX_TIM5_Init+0x154>)
 80044f2:	f7ff fef7 	bl	80042e4 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH1);
 80044f6:	2101      	movs	r1, #1
 80044f8:	483a      	ldr	r0, [pc, #232]	; (80045e4 <MX_TIM5_Init+0x154>)
 80044fa:	f7ff feb1 	bl	8004260 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80044fe:	2360      	movs	r3, #96	; 0x60
 8004500:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8004502:	2300      	movs	r3, #0
 8004504:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8004506:	2300      	movs	r3, #0
 8004508:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 800450a:	2300      	movs	r3, #0
 800450c:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 800450e:	2300      	movs	r3, #0
 8004510:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8004512:	f107 031c 	add.w	r3, r7, #28
 8004516:	461a      	mov	r2, r3
 8004518:	2101      	movs	r1, #1
 800451a:	4832      	ldr	r0, [pc, #200]	; (80045e4 <MX_TIM5_Init+0x154>)
 800451c:	f002 ff1c 	bl	8007358 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM5, LL_TIM_CHANNEL_CH1);
 8004520:	2101      	movs	r1, #1
 8004522:	4830      	ldr	r0, [pc, #192]	; (80045e4 <MX_TIM5_Init+0x154>)
 8004524:	f7ff fe5a 	bl	80041dc <LL_TIM_OC_EnableFast>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH2);
 8004528:	2110      	movs	r1, #16
 800452a:	482e      	ldr	r0, [pc, #184]	; (80045e4 <MX_TIM5_Init+0x154>)
 800452c:	f7ff fe98 	bl	8004260 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8004530:	2300      	movs	r3, #0
 8004532:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8004534:	2300      	movs	r3, #0
 8004536:	627b      	str	r3, [r7, #36]	; 0x24
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8004538:	f107 031c 	add.w	r3, r7, #28
 800453c:	461a      	mov	r2, r3
 800453e:	2110      	movs	r1, #16
 8004540:	4828      	ldr	r0, [pc, #160]	; (80045e4 <MX_TIM5_Init+0x154>)
 8004542:	f002 ff09 	bl	8007358 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM5, LL_TIM_CHANNEL_CH2);
 8004546:	2110      	movs	r1, #16
 8004548:	4826      	ldr	r0, [pc, #152]	; (80045e4 <MX_TIM5_Init+0x154>)
 800454a:	f7ff fe47 	bl	80041dc <LL_TIM_OC_EnableFast>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH3);
 800454e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004552:	4824      	ldr	r0, [pc, #144]	; (80045e4 <MX_TIM5_Init+0x154>)
 8004554:	f7ff fe84 	bl	8004260 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8004558:	2300      	movs	r3, #0
 800455a:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800455c:	2300      	movs	r3, #0
 800455e:	627b      	str	r3, [r7, #36]	; 0x24
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8004560:	f107 031c 	add.w	r3, r7, #28
 8004564:	461a      	mov	r2, r3
 8004566:	f44f 7180 	mov.w	r1, #256	; 0x100
 800456a:	481e      	ldr	r0, [pc, #120]	; (80045e4 <MX_TIM5_Init+0x154>)
 800456c:	f002 fef4 	bl	8007358 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM5, LL_TIM_CHANNEL_CH3);
 8004570:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004574:	481b      	ldr	r0, [pc, #108]	; (80045e4 <MX_TIM5_Init+0x154>)
 8004576:	f7ff fe31 	bl	80041dc <LL_TIM_OC_EnableFast>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH4);
 800457a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800457e:	4819      	ldr	r0, [pc, #100]	; (80045e4 <MX_TIM5_Init+0x154>)
 8004580:	f7ff fe6e 	bl	8004260 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8004584:	2300      	movs	r3, #0
 8004586:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8004588:	2300      	movs	r3, #0
 800458a:	627b      	str	r3, [r7, #36]	; 0x24
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 800458c:	f107 031c 	add.w	r3, r7, #28
 8004590:	461a      	mov	r2, r3
 8004592:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004596:	4813      	ldr	r0, [pc, #76]	; (80045e4 <MX_TIM5_Init+0x154>)
 8004598:	f002 fede 	bl	8007358 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM5, LL_TIM_CHANNEL_CH4);
 800459c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80045a0:	4810      	ldr	r0, [pc, #64]	; (80045e4 <MX_TIM5_Init+0x154>)
 80045a2:	f7ff fe1b 	bl	80041dc <LL_TIM_OC_EnableFast>
  LL_TIM_SetTriggerOutput(TIM5, LL_TIM_TRGO_RESET);
 80045a6:	2100      	movs	r1, #0
 80045a8:	480e      	ldr	r0, [pc, #56]	; (80045e4 <MX_TIM5_Init+0x154>)
 80045aa:	f7ff feb0 	bl	800430e <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM5);
 80045ae:	480d      	ldr	r0, [pc, #52]	; (80045e4 <MX_TIM5_Init+0x154>)
 80045b0:	f7ff fec0 	bl	8004334 <LL_TIM_DisableMasterSlaveMode>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80045b4:	2001      	movs	r0, #1
 80045b6:	f7ff fecd 	bl	8004354 <LL_AHB1_GRP1_EnableClock>
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    PA2     ------> TIM5_CH3
    PA3     ------> TIM5_CH4 
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 80045ba:	230f      	movs	r3, #15
 80045bc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80045be:	2302      	movs	r3, #2
 80045c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80045c2:	2300      	movs	r3, #0
 80045c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80045c6:	2300      	movs	r3, #0
 80045c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80045ca:	2300      	movs	r3, #0
 80045cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 80045ce:	2302      	movs	r3, #2
 80045d0:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045d2:	1d3b      	adds	r3, r7, #4
 80045d4:	4619      	mov	r1, r3
 80045d6:	4804      	ldr	r0, [pc, #16]	; (80045e8 <MX_TIM5_Init+0x158>)
 80045d8:	f002 fb91 	bl	8006cfe <LL_GPIO_Init>

}
 80045dc:	bf00      	nop
 80045de:	3750      	adds	r7, #80	; 0x50
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	40000c00 	.word	0x40000c00
 80045e8:	40020000 	.word	0x40020000

080045ec <__NVIC_GetPriorityGrouping>:
{
 80045ec:	b480      	push	{r7}
 80045ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80045f0:	4b04      	ldr	r3, [pc, #16]	; (8004604 <__NVIC_GetPriorityGrouping+0x18>)
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	0a1b      	lsrs	r3, r3, #8
 80045f6:	f003 0307 	and.w	r3, r3, #7
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr
 8004604:	e000ed00 	.word	0xe000ed00

08004608 <__NVIC_EnableIRQ>:
{
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
 800460e:	4603      	mov	r3, r0
 8004610:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004616:	2b00      	cmp	r3, #0
 8004618:	db0b      	blt.n	8004632 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800461a:	79fb      	ldrb	r3, [r7, #7]
 800461c:	f003 021f 	and.w	r2, r3, #31
 8004620:	4907      	ldr	r1, [pc, #28]	; (8004640 <__NVIC_EnableIRQ+0x38>)
 8004622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004626:	095b      	lsrs	r3, r3, #5
 8004628:	2001      	movs	r0, #1
 800462a:	fa00 f202 	lsl.w	r2, r0, r2
 800462e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004632:	bf00      	nop
 8004634:	370c      	adds	r7, #12
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr
 800463e:	bf00      	nop
 8004640:	e000e100 	.word	0xe000e100

08004644 <__NVIC_SetPriority>:
{
 8004644:	b480      	push	{r7}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
 800464a:	4603      	mov	r3, r0
 800464c:	6039      	str	r1, [r7, #0]
 800464e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004654:	2b00      	cmp	r3, #0
 8004656:	db0a      	blt.n	800466e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	b2da      	uxtb	r2, r3
 800465c:	490c      	ldr	r1, [pc, #48]	; (8004690 <__NVIC_SetPriority+0x4c>)
 800465e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004662:	0112      	lsls	r2, r2, #4
 8004664:	b2d2      	uxtb	r2, r2
 8004666:	440b      	add	r3, r1
 8004668:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800466c:	e00a      	b.n	8004684 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	b2da      	uxtb	r2, r3
 8004672:	4908      	ldr	r1, [pc, #32]	; (8004694 <__NVIC_SetPriority+0x50>)
 8004674:	79fb      	ldrb	r3, [r7, #7]
 8004676:	f003 030f 	and.w	r3, r3, #15
 800467a:	3b04      	subs	r3, #4
 800467c:	0112      	lsls	r2, r2, #4
 800467e:	b2d2      	uxtb	r2, r2
 8004680:	440b      	add	r3, r1
 8004682:	761a      	strb	r2, [r3, #24]
}
 8004684:	bf00      	nop
 8004686:	370c      	adds	r7, #12
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr
 8004690:	e000e100 	.word	0xe000e100
 8004694:	e000ed00 	.word	0xe000ed00

08004698 <NVIC_EncodePriority>:
{
 8004698:	b480      	push	{r7}
 800469a:	b089      	sub	sp, #36	; 0x24
 800469c:	af00      	add	r7, sp, #0
 800469e:	60f8      	str	r0, [r7, #12]
 80046a0:	60b9      	str	r1, [r7, #8]
 80046a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f003 0307 	and.w	r3, r3, #7
 80046aa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80046ac:	69fb      	ldr	r3, [r7, #28]
 80046ae:	f1c3 0307 	rsb	r3, r3, #7
 80046b2:	2b04      	cmp	r3, #4
 80046b4:	bf28      	it	cs
 80046b6:	2304      	movcs	r3, #4
 80046b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	3304      	adds	r3, #4
 80046be:	2b06      	cmp	r3, #6
 80046c0:	d902      	bls.n	80046c8 <NVIC_EncodePriority+0x30>
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	3b03      	subs	r3, #3
 80046c6:	e000      	b.n	80046ca <NVIC_EncodePriority+0x32>
 80046c8:	2300      	movs	r3, #0
 80046ca:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80046d0:	69bb      	ldr	r3, [r7, #24]
 80046d2:	fa02 f303 	lsl.w	r3, r2, r3
 80046d6:	43da      	mvns	r2, r3
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	401a      	ands	r2, r3
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80046e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	fa01 f303 	lsl.w	r3, r1, r3
 80046ea:	43d9      	mvns	r1, r3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046f0:	4313      	orrs	r3, r2
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3724      	adds	r7, #36	; 0x24
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr

080046fe <LL_USART_Enable>:
{
 80046fe:	b480      	push	{r7}
 8004700:	b083      	sub	sp, #12
 8004702:	af00      	add	r7, sp, #0
 8004704:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	68db      	ldr	r3, [r3, #12]
 800470a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	60da      	str	r2, [r3, #12]
}
 8004712:	bf00      	nop
 8004714:	370c      	adds	r7, #12
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr

0800471e <LL_USART_ConfigAsyncMode>:
{
 800471e:	b480      	push	{r7}
 8004720:	b083      	sub	sp, #12
 8004722:	af00      	add	r7, sp, #0
 8004724:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	691b      	ldr	r3, [r3, #16]
 800472a:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	695b      	ldr	r3, [r3, #20]
 8004736:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	615a      	str	r2, [r3, #20]
}
 800473e:	bf00      	nop
 8004740:	370c      	adds	r7, #12
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr
	...

0800474c <LL_AHB1_GRP1_EnableClock>:
{
 800474c:	b480      	push	{r7}
 800474e:	b085      	sub	sp, #20
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8004754:	4b08      	ldr	r3, [pc, #32]	; (8004778 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004756:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004758:	4907      	ldr	r1, [pc, #28]	; (8004778 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4313      	orrs	r3, r2
 800475e:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8004760:	4b05      	ldr	r3, [pc, #20]	; (8004778 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004762:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	4013      	ands	r3, r2
 8004768:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800476a:	68fb      	ldr	r3, [r7, #12]
}
 800476c:	bf00      	nop
 800476e:	3714      	adds	r7, #20
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr
 8004778:	40023800 	.word	0x40023800

0800477c <LL_APB1_GRP1_EnableClock>:
{
 800477c:	b480      	push	{r7}
 800477e:	b085      	sub	sp, #20
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8004784:	4b08      	ldr	r3, [pc, #32]	; (80047a8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8004786:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004788:	4907      	ldr	r1, [pc, #28]	; (80047a8 <LL_APB1_GRP1_EnableClock+0x2c>)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4313      	orrs	r3, r2
 800478e:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8004790:	4b05      	ldr	r3, [pc, #20]	; (80047a8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8004792:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	4013      	ands	r3, r2
 8004798:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800479a:	68fb      	ldr	r3, [r7, #12]
}
 800479c:	bf00      	nop
 800479e:	3714      	adds	r7, #20
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr
 80047a8:	40023800 	.word	0x40023800

080047ac <LL_APB2_GRP1_EnableClock>:
{
 80047ac:	b480      	push	{r7}
 80047ae:	b085      	sub	sp, #20
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80047b4:	4b08      	ldr	r3, [pc, #32]	; (80047d8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80047b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047b8:	4907      	ldr	r1, [pc, #28]	; (80047d8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4313      	orrs	r3, r2
 80047be:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80047c0:	4b05      	ldr	r3, [pc, #20]	; (80047d8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80047c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	4013      	ands	r3, r2
 80047c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80047ca:	68fb      	ldr	r3, [r7, #12]
}
 80047cc:	bf00      	nop
 80047ce:	3714      	adds	r7, #20
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr
 80047d8:	40023800 	.word	0x40023800

080047dc <MX_UART4_Init>:

/* USER CODE END 0 */

/* UART4 init function */
void MX_UART4_Init(void)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b08e      	sub	sp, #56	; 0x38
 80047e0:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 80047e2:	f107 031c 	add.w	r3, r7, #28
 80047e6:	2200      	movs	r2, #0
 80047e8:	601a      	str	r2, [r3, #0]
 80047ea:	605a      	str	r2, [r3, #4]
 80047ec:	609a      	str	r2, [r3, #8]
 80047ee:	60da      	str	r2, [r3, #12]
 80047f0:	611a      	str	r2, [r3, #16]
 80047f2:	615a      	str	r2, [r3, #20]
 80047f4:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047f6:	1d3b      	adds	r3, r7, #4
 80047f8:	2200      	movs	r2, #0
 80047fa:	601a      	str	r2, [r3, #0]
 80047fc:	605a      	str	r2, [r3, #4]
 80047fe:	609a      	str	r2, [r3, #8]
 8004800:	60da      	str	r2, [r3, #12]
 8004802:	611a      	str	r2, [r3, #16]
 8004804:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 8004806:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800480a:	f7ff ffb7 	bl	800477c <LL_APB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800480e:	2004      	movs	r0, #4
 8004810:	f7ff ff9c 	bl	800474c <LL_AHB1_GRP1_EnableClock>
  /**UART4 GPIO Configuration  
  PC10   ------> UART4_TX
  PC11   ------> UART4_RX 
  */
  GPIO_InitStruct.Pin = M8N_TX4_Pin|M8N_RX4_Pin;
 8004814:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004818:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800481a:	2302      	movs	r3, #2
 800481c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800481e:	2303      	movs	r3, #3
 8004820:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004822:	2300      	movs	r3, #0
 8004824:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8004826:	2301      	movs	r3, #1
 8004828:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 800482a:	2308      	movs	r3, #8
 800482c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800482e:	1d3b      	adds	r3, r7, #4
 8004830:	4619      	mov	r1, r3
 8004832:	4819      	ldr	r0, [pc, #100]	; (8004898 <MX_UART4_Init+0xbc>)
 8004834:	f002 fa63 	bl	8006cfe <LL_GPIO_Init>

  /* UART4 interrupt Init */
  NVIC_SetPriority(UART4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8004838:	f7ff fed8 	bl	80045ec <__NVIC_GetPriorityGrouping>
 800483c:	4603      	mov	r3, r0
 800483e:	2200      	movs	r2, #0
 8004840:	2100      	movs	r1, #0
 8004842:	4618      	mov	r0, r3
 8004844:	f7ff ff28 	bl	8004698 <NVIC_EncodePriority>
 8004848:	4603      	mov	r3, r0
 800484a:	4619      	mov	r1, r3
 800484c:	2034      	movs	r0, #52	; 0x34
 800484e:	f7ff fef9 	bl	8004644 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART4_IRQn);
 8004852:	2034      	movs	r0, #52	; 0x34
 8004854:	f7ff fed8 	bl	8004608 <__NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 9600;
 8004858:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800485c:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800485e:	2300      	movs	r3, #0
 8004860:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8004862:	2300      	movs	r3, #0
 8004864:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8004866:	2300      	movs	r3, #0
 8004868:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800486a:	230c      	movs	r3, #12
 800486c:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800486e:	2300      	movs	r3, #0
 8004870:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8004872:	2300      	movs	r3, #0
 8004874:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(UART4, &USART_InitStruct);
 8004876:	f107 031c 	add.w	r3, r7, #28
 800487a:	4619      	mov	r1, r3
 800487c:	4807      	ldr	r0, [pc, #28]	; (800489c <MX_UART4_Init+0xc0>)
 800487e:	f003 f929 	bl	8007ad4 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART4);
 8004882:	4806      	ldr	r0, [pc, #24]	; (800489c <MX_UART4_Init+0xc0>)
 8004884:	f7ff ff4b 	bl	800471e <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART4);
 8004888:	4804      	ldr	r0, [pc, #16]	; (800489c <MX_UART4_Init+0xc0>)
 800488a:	f7ff ff38 	bl	80046fe <LL_USART_Enable>

}
 800488e:	bf00      	nop
 8004890:	3738      	adds	r7, #56	; 0x38
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop
 8004898:	40020800 	.word	0x40020800
 800489c:	40004c00 	.word	0x40004c00

080048a0 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b08e      	sub	sp, #56	; 0x38
 80048a4:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 80048a6:	f107 031c 	add.w	r3, r7, #28
 80048aa:	2200      	movs	r2, #0
 80048ac:	601a      	str	r2, [r3, #0]
 80048ae:	605a      	str	r2, [r3, #4]
 80048b0:	609a      	str	r2, [r3, #8]
 80048b2:	60da      	str	r2, [r3, #12]
 80048b4:	611a      	str	r2, [r3, #16]
 80048b6:	615a      	str	r2, [r3, #20]
 80048b8:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048ba:	1d3b      	adds	r3, r7, #4
 80048bc:	2200      	movs	r2, #0
 80048be:	601a      	str	r2, [r3, #0]
 80048c0:	605a      	str	r2, [r3, #4]
 80048c2:	609a      	str	r2, [r3, #8]
 80048c4:	60da      	str	r2, [r3, #12]
 80048c6:	611a      	str	r2, [r3, #16]
 80048c8:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART5);
 80048ca:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80048ce:	f7ff ff55 	bl	800477c <LL_APB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80048d2:	2004      	movs	r0, #4
 80048d4:	f7ff ff3a 	bl	800474c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 80048d8:	2008      	movs	r0, #8
 80048da:	f7ff ff37 	bl	800474c <LL_AHB1_GRP1_EnableClock>
  /**UART5 GPIO Configuration  
  PC12   ------> UART5_TX
  PD2   ------> UART5_RX 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 80048de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80048e2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80048e4:	2302      	movs	r3, #2
 80048e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80048e8:	2303      	movs	r3, #3
 80048ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80048ec:	2300      	movs	r3, #0
 80048ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80048f0:	2301      	movs	r3, #1
 80048f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80048f4:	2308      	movs	r3, #8
 80048f6:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80048f8:	1d3b      	adds	r3, r7, #4
 80048fa:	4619      	mov	r1, r3
 80048fc:	4821      	ldr	r0, [pc, #132]	; (8004984 <MX_UART5_Init+0xe4>)
 80048fe:	f002 f9fe 	bl	8006cfe <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8004902:	2304      	movs	r3, #4
 8004904:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004906:	2302      	movs	r3, #2
 8004908:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800490a:	2303      	movs	r3, #3
 800490c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800490e:	2300      	movs	r3, #0
 8004910:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8004912:	2301      	movs	r3, #1
 8004914:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8004916:	2308      	movs	r3, #8
 8004918:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800491a:	1d3b      	adds	r3, r7, #4
 800491c:	4619      	mov	r1, r3
 800491e:	481a      	ldr	r0, [pc, #104]	; (8004988 <MX_UART5_Init+0xe8>)
 8004920:	f002 f9ed 	bl	8006cfe <LL_GPIO_Init>

  /* UART5 interrupt Init */
  NVIC_SetPriority(UART5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8004924:	f7ff fe62 	bl	80045ec <__NVIC_GetPriorityGrouping>
 8004928:	4603      	mov	r3, r0
 800492a:	2200      	movs	r2, #0
 800492c:	2100      	movs	r1, #0
 800492e:	4618      	mov	r0, r3
 8004930:	f7ff feb2 	bl	8004698 <NVIC_EncodePriority>
 8004934:	4603      	mov	r3, r0
 8004936:	4619      	mov	r1, r3
 8004938:	2035      	movs	r0, #53	; 0x35
 800493a:	f7ff fe83 	bl	8004644 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART5_IRQn);
 800493e:	2035      	movs	r0, #53	; 0x35
 8004940:	f7ff fe62 	bl	8004608 <__NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 115200;
 8004944:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8004948:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800494a:	2300      	movs	r3, #0
 800494c:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800494e:	2300      	movs	r3, #0
 8004950:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8004952:	2300      	movs	r3, #0
 8004954:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_RX;
 8004956:	2304      	movs	r3, #4
 8004958:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800495a:	2300      	movs	r3, #0
 800495c:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800495e:	2300      	movs	r3, #0
 8004960:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(UART5, &USART_InitStruct);
 8004962:	f107 031c 	add.w	r3, r7, #28
 8004966:	4619      	mov	r1, r3
 8004968:	4808      	ldr	r0, [pc, #32]	; (800498c <MX_UART5_Init+0xec>)
 800496a:	f003 f8b3 	bl	8007ad4 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART5);
 800496e:	4807      	ldr	r0, [pc, #28]	; (800498c <MX_UART5_Init+0xec>)
 8004970:	f7ff fed5 	bl	800471e <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART5);
 8004974:	4805      	ldr	r0, [pc, #20]	; (800498c <MX_UART5_Init+0xec>)
 8004976:	f7ff fec2 	bl	80046fe <LL_USART_Enable>

}
 800497a:	bf00      	nop
 800497c:	3738      	adds	r7, #56	; 0x38
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	40020800 	.word	0x40020800
 8004988:	40020c00 	.word	0x40020c00
 800498c:	40005000 	.word	0x40005000

08004990 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b08e      	sub	sp, #56	; 0x38
 8004994:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8004996:	f107 031c 	add.w	r3, r7, #28
 800499a:	2200      	movs	r2, #0
 800499c:	601a      	str	r2, [r3, #0]
 800499e:	605a      	str	r2, [r3, #4]
 80049a0:	609a      	str	r2, [r3, #8]
 80049a2:	60da      	str	r2, [r3, #12]
 80049a4:	611a      	str	r2, [r3, #16]
 80049a6:	615a      	str	r2, [r3, #20]
 80049a8:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049aa:	1d3b      	adds	r3, r7, #4
 80049ac:	2200      	movs	r2, #0
 80049ae:	601a      	str	r2, [r3, #0]
 80049b0:	605a      	str	r2, [r3, #4]
 80049b2:	609a      	str	r2, [r3, #8]
 80049b4:	60da      	str	r2, [r3, #12]
 80049b6:	611a      	str	r2, [r3, #16]
 80049b8:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 80049ba:	2020      	movs	r0, #32
 80049bc:	f7ff fef6 	bl	80047ac <LL_APB2_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80049c0:	2004      	movs	r0, #4
 80049c2:	f7ff fec3 	bl	800474c <LL_AHB1_GRP1_EnableClock>
  /**USART6 GPIO Configuration  
  PC6   ------> USART6_TX
  PC7   ------> USART6_RX 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80049c6:	23c0      	movs	r3, #192	; 0xc0
 80049c8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80049ca:	2302      	movs	r3, #2
 80049cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80049ce:	2303      	movs	r3, #3
 80049d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80049d2:	2300      	movs	r3, #0
 80049d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80049d6:	2300      	movs	r3, #0
 80049d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80049da:	2308      	movs	r3, #8
 80049dc:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80049de:	1d3b      	adds	r3, r7, #4
 80049e0:	4619      	mov	r1, r3
 80049e2:	4819      	ldr	r0, [pc, #100]	; (8004a48 <MX_USART6_UART_Init+0xb8>)
 80049e4:	f002 f98b 	bl	8006cfe <LL_GPIO_Init>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80049e8:	f7ff fe00 	bl	80045ec <__NVIC_GetPriorityGrouping>
 80049ec:	4603      	mov	r3, r0
 80049ee:	2200      	movs	r2, #0
 80049f0:	2100      	movs	r1, #0
 80049f2:	4618      	mov	r0, r3
 80049f4:	f7ff fe50 	bl	8004698 <NVIC_EncodePriority>
 80049f8:	4603      	mov	r3, r0
 80049fa:	4619      	mov	r1, r3
 80049fc:	2047      	movs	r0, #71	; 0x47
 80049fe:	f7ff fe21 	bl	8004644 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 8004a02:	2047      	movs	r0, #71	; 0x47
 8004a04:	f7ff fe00 	bl	8004608 <__NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 115200;
 8004a08:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8004a0c:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8004a12:	2300      	movs	r3, #0
 8004a14:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8004a16:	2300      	movs	r3, #0
 8004a18:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8004a1a:	230c      	movs	r3, #12
 8004a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8004a22:	2300      	movs	r3, #0
 8004a24:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART6, &USART_InitStruct);
 8004a26:	f107 031c 	add.w	r3, r7, #28
 8004a2a:	4619      	mov	r1, r3
 8004a2c:	4807      	ldr	r0, [pc, #28]	; (8004a4c <MX_USART6_UART_Init+0xbc>)
 8004a2e:	f003 f851 	bl	8007ad4 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART6);
 8004a32:	4806      	ldr	r0, [pc, #24]	; (8004a4c <MX_USART6_UART_Init+0xbc>)
 8004a34:	f7ff fe73 	bl	800471e <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART6);
 8004a38:	4804      	ldr	r0, [pc, #16]	; (8004a4c <MX_USART6_UART_Init+0xbc>)
 8004a3a:	f7ff fe60 	bl	80046fe <LL_USART_Enable>

}
 8004a3e:	bf00      	nop
 8004a40:	3738      	adds	r7, #56	; 0x38
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop
 8004a48:	40020800 	.word	0x40020800
 8004a4c:	40011400 	.word	0x40011400

08004a50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004a50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004a88 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004a54:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004a56:	e003      	b.n	8004a60 <LoopCopyDataInit>

08004a58 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004a58:	4b0c      	ldr	r3, [pc, #48]	; (8004a8c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004a5a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004a5c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004a5e:	3104      	adds	r1, #4

08004a60 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004a60:	480b      	ldr	r0, [pc, #44]	; (8004a90 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004a62:	4b0c      	ldr	r3, [pc, #48]	; (8004a94 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004a64:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004a66:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004a68:	d3f6      	bcc.n	8004a58 <CopyDataInit>
  ldr  r2, =_sbss
 8004a6a:	4a0b      	ldr	r2, [pc, #44]	; (8004a98 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004a6c:	e002      	b.n	8004a74 <LoopFillZerobss>

08004a6e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004a6e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004a70:	f842 3b04 	str.w	r3, [r2], #4

08004a74 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004a74:	4b09      	ldr	r3, [pc, #36]	; (8004a9c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004a76:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004a78:	d3f9      	bcc.n	8004a6e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004a7a:	f7ff fb89 	bl	8004190 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004a7e:	f003 f8af 	bl	8007be0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004a82:	f7fe fc01 	bl	8003288 <main>
  bx  lr    
 8004a86:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004a88:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004a8c:	0800b974 	.word	0x0800b974
  ldr  r0, =_sdata
 8004a90:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004a94:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8004a98:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 8004a9c:	20000474 	.word	0x20000474

08004aa0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004aa0:	e7fe      	b.n	8004aa0 <ADC_IRQHandler>
	...

08004aa4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004aa8:	4b0e      	ldr	r3, [pc, #56]	; (8004ae4 <HAL_Init+0x40>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a0d      	ldr	r2, [pc, #52]	; (8004ae4 <HAL_Init+0x40>)
 8004aae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004ab2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004ab4:	4b0b      	ldr	r3, [pc, #44]	; (8004ae4 <HAL_Init+0x40>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a0a      	ldr	r2, [pc, #40]	; (8004ae4 <HAL_Init+0x40>)
 8004aba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004abe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004ac0:	4b08      	ldr	r3, [pc, #32]	; (8004ae4 <HAL_Init+0x40>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a07      	ldr	r2, [pc, #28]	; (8004ae4 <HAL_Init+0x40>)
 8004ac6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004aca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004acc:	2003      	movs	r0, #3
 8004ace:	f000 fd41 	bl	8005554 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004ad2:	2000      	movs	r0, #0
 8004ad4:	f000 f808 	bl	8004ae8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004ad8:	f7ff f94c 	bl	8003d74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004adc:	2300      	movs	r3, #0
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	40023c00 	.word	0x40023c00

08004ae8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004af0:	4b12      	ldr	r3, [pc, #72]	; (8004b3c <HAL_InitTick+0x54>)
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	4b12      	ldr	r3, [pc, #72]	; (8004b40 <HAL_InitTick+0x58>)
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	4619      	mov	r1, r3
 8004afa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004afe:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b06:	4618      	mov	r0, r3
 8004b08:	f000 fd59 	bl	80055be <HAL_SYSTICK_Config>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d001      	beq.n	8004b16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e00e      	b.n	8004b34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2b0f      	cmp	r3, #15
 8004b1a:	d80a      	bhi.n	8004b32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	6879      	ldr	r1, [r7, #4]
 8004b20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b24:	f000 fd21 	bl	800556a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004b28:	4a06      	ldr	r2, [pc, #24]	; (8004b44 <HAL_InitTick+0x5c>)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	e000      	b.n	8004b34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3708      	adds	r7, #8
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	20000004 	.word	0x20000004
 8004b40:	2000000c 	.word	0x2000000c
 8004b44:	20000008 	.word	0x20000008

08004b48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004b4c:	4b06      	ldr	r3, [pc, #24]	; (8004b68 <HAL_IncTick+0x20>)
 8004b4e:	781b      	ldrb	r3, [r3, #0]
 8004b50:	461a      	mov	r2, r3
 8004b52:	4b06      	ldr	r3, [pc, #24]	; (8004b6c <HAL_IncTick+0x24>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4413      	add	r3, r2
 8004b58:	4a04      	ldr	r2, [pc, #16]	; (8004b6c <HAL_IncTick+0x24>)
 8004b5a:	6013      	str	r3, [r2, #0]
}
 8004b5c:	bf00      	nop
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr
 8004b66:	bf00      	nop
 8004b68:	2000000c 	.word	0x2000000c
 8004b6c:	2000046c 	.word	0x2000046c

08004b70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004b70:	b480      	push	{r7}
 8004b72:	af00      	add	r7, sp, #0
  return uwTick;
 8004b74:	4b03      	ldr	r3, [pc, #12]	; (8004b84 <HAL_GetTick+0x14>)
 8004b76:	681b      	ldr	r3, [r3, #0]
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	2000046c 	.word	0x2000046c

08004b88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004b90:	f7ff ffee 	bl	8004b70 <HAL_GetTick>
 8004b94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ba0:	d005      	beq.n	8004bae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004ba2:	4b09      	ldr	r3, [pc, #36]	; (8004bc8 <HAL_Delay+0x40>)
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	4413      	add	r3, r2
 8004bac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004bae:	bf00      	nop
 8004bb0:	f7ff ffde 	bl	8004b70 <HAL_GetTick>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	68fa      	ldr	r2, [r7, #12]
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d8f7      	bhi.n	8004bb0 <HAL_Delay+0x28>
  {
  }
}
 8004bc0:	bf00      	nop
 8004bc2:	3710      	adds	r7, #16
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	2000000c 	.word	0x2000000c

08004bcc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d101      	bne.n	8004be2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e033      	b.n	8004c4a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d109      	bne.n	8004bfe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f7fe f8d0 	bl	8002d90 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c02:	f003 0310 	and.w	r3, r3, #16
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d118      	bne.n	8004c3c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004c12:	f023 0302 	bic.w	r3, r3, #2
 8004c16:	f043 0202 	orr.w	r2, r3, #2
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 fa4a 	bl	80050b8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2e:	f023 0303 	bic.w	r3, r3, #3
 8004c32:	f043 0201 	orr.w	r2, r3, #1
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	641a      	str	r2, [r3, #64]	; 0x40
 8004c3a:	e001      	b.n	8004c40 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3710      	adds	r7, #16
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
	...

08004c54 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b086      	sub	sp, #24
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	60f8      	str	r0, [r7, #12]
 8004c5c:	60b9      	str	r1, [r7, #8]
 8004c5e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004c60:	2300      	movs	r3, #0
 8004c62:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d101      	bne.n	8004c72 <HAL_ADC_Start_DMA+0x1e>
 8004c6e:	2302      	movs	r3, #2
 8004c70:	e0cc      	b.n	8004e0c <HAL_ADC_Start_DMA+0x1b8>
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2201      	movs	r2, #1
 8004c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	f003 0301 	and.w	r3, r3, #1
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d018      	beq.n	8004cba <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	689a      	ldr	r2, [r3, #8]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f042 0201 	orr.w	r2, r2, #1
 8004c96:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004c98:	4b5e      	ldr	r3, [pc, #376]	; (8004e14 <HAL_ADC_Start_DMA+0x1c0>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a5e      	ldr	r2, [pc, #376]	; (8004e18 <HAL_ADC_Start_DMA+0x1c4>)
 8004c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004ca2:	0c9a      	lsrs	r2, r3, #18
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	005b      	lsls	r3, r3, #1
 8004ca8:	4413      	add	r3, r2
 8004caa:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004cac:	e002      	b.n	8004cb4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	3b01      	subs	r3, #1
 8004cb2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d1f9      	bne.n	8004cae <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	f003 0301 	and.w	r3, r3, #1
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	f040 80a0 	bne.w	8004e0a <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cce:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004cd2:	f023 0301 	bic.w	r3, r3, #1
 8004cd6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d007      	beq.n	8004cfc <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004cf4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d08:	d106      	bne.n	8004d18 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d0e:	f023 0206 	bic.w	r2, r3, #6
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	645a      	str	r2, [r3, #68]	; 0x44
 8004d16:	e002      	b.n	8004d1e <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2200      	movs	r2, #0
 8004d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004d26:	4b3d      	ldr	r3, [pc, #244]	; (8004e1c <HAL_ADC_Start_DMA+0x1c8>)
 8004d28:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d2e:	4a3c      	ldr	r2, [pc, #240]	; (8004e20 <HAL_ADC_Start_DMA+0x1cc>)
 8004d30:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d36:	4a3b      	ldr	r2, [pc, #236]	; (8004e24 <HAL_ADC_Start_DMA+0x1d0>)
 8004d38:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d3e:	4a3a      	ldr	r2, [pc, #232]	; (8004e28 <HAL_ADC_Start_DMA+0x1d4>)
 8004d40:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004d4a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	685a      	ldr	r2, [r3, #4]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004d5a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	689a      	ldr	r2, [r3, #8]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d6a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	334c      	adds	r3, #76	; 0x4c
 8004d76:	4619      	mov	r1, r3
 8004d78:	68ba      	ldr	r2, [r7, #8]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f000 fcda 	bl	8005734 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	f003 031f 	and.w	r3, r3, #31
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d12a      	bne.n	8004de2 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a26      	ldr	r2, [pc, #152]	; (8004e2c <HAL_ADC_Start_DMA+0x1d8>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d015      	beq.n	8004dc2 <HAL_ADC_Start_DMA+0x16e>
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a25      	ldr	r2, [pc, #148]	; (8004e30 <HAL_ADC_Start_DMA+0x1dc>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d105      	bne.n	8004dac <HAL_ADC_Start_DMA+0x158>
 8004da0:	4b1e      	ldr	r3, [pc, #120]	; (8004e1c <HAL_ADC_Start_DMA+0x1c8>)
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	f003 031f 	and.w	r3, r3, #31
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d00a      	beq.n	8004dc2 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a20      	ldr	r2, [pc, #128]	; (8004e34 <HAL_ADC_Start_DMA+0x1e0>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d129      	bne.n	8004e0a <HAL_ADC_Start_DMA+0x1b6>
 8004db6:	4b19      	ldr	r3, [pc, #100]	; (8004e1c <HAL_ADC_Start_DMA+0x1c8>)
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	f003 031f 	and.w	r3, r3, #31
 8004dbe:	2b0f      	cmp	r3, #15
 8004dc0:	d823      	bhi.n	8004e0a <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d11c      	bne.n	8004e0a <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	689a      	ldr	r2, [r3, #8]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004dde:	609a      	str	r2, [r3, #8]
 8004de0:	e013      	b.n	8004e0a <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a11      	ldr	r2, [pc, #68]	; (8004e2c <HAL_ADC_Start_DMA+0x1d8>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d10e      	bne.n	8004e0a <HAL_ADC_Start_DMA+0x1b6>
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d107      	bne.n	8004e0a <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	689a      	ldr	r2, [r3, #8]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004e08:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8004e0a:	2300      	movs	r3, #0
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3718      	adds	r7, #24
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}
 8004e14:	20000004 	.word	0x20000004
 8004e18:	431bde83 	.word	0x431bde83
 8004e1c:	40012300 	.word	0x40012300
 8004e20:	080052b1 	.word	0x080052b1
 8004e24:	0800536b 	.word	0x0800536b
 8004e28:	08005387 	.word	0x08005387
 8004e2c:	40012000 	.word	0x40012000
 8004e30:	40012100 	.word	0x40012100
 8004e34:	40012200 	.word	0x40012200

08004e38 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b083      	sub	sp, #12
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8004e40:	bf00      	nop
 8004e42:	370c      	adds	r7, #12
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr

08004e4c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b083      	sub	sp, #12
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004e54:	bf00      	nop
 8004e56:	370c      	adds	r7, #12
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr

08004e60 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b083      	sub	sp, #12
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004e68:	bf00      	nop
 8004e6a:	370c      	adds	r7, #12
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr

08004e74 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b085      	sub	sp, #20
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d101      	bne.n	8004e90 <HAL_ADC_ConfigChannel+0x1c>
 8004e8c:	2302      	movs	r3, #2
 8004e8e:	e105      	b.n	800509c <HAL_ADC_ConfigChannel+0x228>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2201      	movs	r2, #1
 8004e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	2b09      	cmp	r3, #9
 8004e9e:	d925      	bls.n	8004eec <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	68d9      	ldr	r1, [r3, #12]
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	461a      	mov	r2, r3
 8004eae:	4613      	mov	r3, r2
 8004eb0:	005b      	lsls	r3, r3, #1
 8004eb2:	4413      	add	r3, r2
 8004eb4:	3b1e      	subs	r3, #30
 8004eb6:	2207      	movs	r2, #7
 8004eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ebc:	43da      	mvns	r2, r3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	400a      	ands	r2, r1
 8004ec4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	68d9      	ldr	r1, [r3, #12]
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	689a      	ldr	r2, [r3, #8]
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	4603      	mov	r3, r0
 8004eda:	005b      	lsls	r3, r3, #1
 8004edc:	4403      	add	r3, r0
 8004ede:	3b1e      	subs	r3, #30
 8004ee0:	409a      	lsls	r2, r3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	430a      	orrs	r2, r1
 8004ee8:	60da      	str	r2, [r3, #12]
 8004eea:	e022      	b.n	8004f32 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	6919      	ldr	r1, [r3, #16]
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	461a      	mov	r2, r3
 8004efa:	4613      	mov	r3, r2
 8004efc:	005b      	lsls	r3, r3, #1
 8004efe:	4413      	add	r3, r2
 8004f00:	2207      	movs	r2, #7
 8004f02:	fa02 f303 	lsl.w	r3, r2, r3
 8004f06:	43da      	mvns	r2, r3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	400a      	ands	r2, r1
 8004f0e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	6919      	ldr	r1, [r3, #16]
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	689a      	ldr	r2, [r3, #8]
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	4618      	mov	r0, r3
 8004f22:	4603      	mov	r3, r0
 8004f24:	005b      	lsls	r3, r3, #1
 8004f26:	4403      	add	r3, r0
 8004f28:	409a      	lsls	r2, r3
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	430a      	orrs	r2, r1
 8004f30:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	2b06      	cmp	r3, #6
 8004f38:	d824      	bhi.n	8004f84 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	685a      	ldr	r2, [r3, #4]
 8004f44:	4613      	mov	r3, r2
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	4413      	add	r3, r2
 8004f4a:	3b05      	subs	r3, #5
 8004f4c:	221f      	movs	r2, #31
 8004f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f52:	43da      	mvns	r2, r3
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	400a      	ands	r2, r1
 8004f5a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	4618      	mov	r0, r3
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	685a      	ldr	r2, [r3, #4]
 8004f6e:	4613      	mov	r3, r2
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	4413      	add	r3, r2
 8004f74:	3b05      	subs	r3, #5
 8004f76:	fa00 f203 	lsl.w	r2, r0, r3
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	430a      	orrs	r2, r1
 8004f80:	635a      	str	r2, [r3, #52]	; 0x34
 8004f82:	e04c      	b.n	800501e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	2b0c      	cmp	r3, #12
 8004f8a:	d824      	bhi.n	8004fd6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	685a      	ldr	r2, [r3, #4]
 8004f96:	4613      	mov	r3, r2
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	4413      	add	r3, r2
 8004f9c:	3b23      	subs	r3, #35	; 0x23
 8004f9e:	221f      	movs	r2, #31
 8004fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa4:	43da      	mvns	r2, r3
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	400a      	ands	r2, r1
 8004fac:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	4618      	mov	r0, r3
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	685a      	ldr	r2, [r3, #4]
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	4413      	add	r3, r2
 8004fc6:	3b23      	subs	r3, #35	; 0x23
 8004fc8:	fa00 f203 	lsl.w	r2, r0, r3
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	430a      	orrs	r2, r1
 8004fd2:	631a      	str	r2, [r3, #48]	; 0x30
 8004fd4:	e023      	b.n	800501e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	685a      	ldr	r2, [r3, #4]
 8004fe0:	4613      	mov	r3, r2
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	4413      	add	r3, r2
 8004fe6:	3b41      	subs	r3, #65	; 0x41
 8004fe8:	221f      	movs	r2, #31
 8004fea:	fa02 f303 	lsl.w	r3, r2, r3
 8004fee:	43da      	mvns	r2, r3
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	400a      	ands	r2, r1
 8004ff6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	b29b      	uxth	r3, r3
 8005004:	4618      	mov	r0, r3
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	685a      	ldr	r2, [r3, #4]
 800500a:	4613      	mov	r3, r2
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	4413      	add	r3, r2
 8005010:	3b41      	subs	r3, #65	; 0x41
 8005012:	fa00 f203 	lsl.w	r2, r0, r3
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	430a      	orrs	r2, r1
 800501c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800501e:	4b22      	ldr	r3, [pc, #136]	; (80050a8 <HAL_ADC_ConfigChannel+0x234>)
 8005020:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a21      	ldr	r2, [pc, #132]	; (80050ac <HAL_ADC_ConfigChannel+0x238>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d109      	bne.n	8005040 <HAL_ADC_ConfigChannel+0x1cc>
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	2b12      	cmp	r3, #18
 8005032:	d105      	bne.n	8005040 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a19      	ldr	r2, [pc, #100]	; (80050ac <HAL_ADC_ConfigChannel+0x238>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d123      	bne.n	8005092 <HAL_ADC_ConfigChannel+0x21e>
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	2b10      	cmp	r3, #16
 8005050:	d003      	beq.n	800505a <HAL_ADC_ConfigChannel+0x1e6>
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	2b11      	cmp	r3, #17
 8005058:	d11b      	bne.n	8005092 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	2b10      	cmp	r3, #16
 800506c:	d111      	bne.n	8005092 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800506e:	4b10      	ldr	r3, [pc, #64]	; (80050b0 <HAL_ADC_ConfigChannel+0x23c>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a10      	ldr	r2, [pc, #64]	; (80050b4 <HAL_ADC_ConfigChannel+0x240>)
 8005074:	fba2 2303 	umull	r2, r3, r2, r3
 8005078:	0c9a      	lsrs	r2, r3, #18
 800507a:	4613      	mov	r3, r2
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	4413      	add	r3, r2
 8005080:	005b      	lsls	r3, r3, #1
 8005082:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005084:	e002      	b.n	800508c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	3b01      	subs	r3, #1
 800508a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d1f9      	bne.n	8005086 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800509a:	2300      	movs	r3, #0
}
 800509c:	4618      	mov	r0, r3
 800509e:	3714      	adds	r7, #20
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr
 80050a8:	40012300 	.word	0x40012300
 80050ac:	40012000 	.word	0x40012000
 80050b0:	20000004 	.word	0x20000004
 80050b4:	431bde83 	.word	0x431bde83

080050b8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b085      	sub	sp, #20
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80050c0:	4b79      	ldr	r3, [pc, #484]	; (80052a8 <ADC_Init+0x1f0>)
 80050c2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	685a      	ldr	r2, [r3, #4]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	431a      	orrs	r2, r3
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	685a      	ldr	r2, [r3, #4]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80050ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	6859      	ldr	r1, [r3, #4]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	691b      	ldr	r3, [r3, #16]
 80050f8:	021a      	lsls	r2, r3, #8
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	430a      	orrs	r2, r1
 8005100:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	685a      	ldr	r2, [r3, #4]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005110:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	6859      	ldr	r1, [r3, #4]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	689a      	ldr	r2, [r3, #8]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	430a      	orrs	r2, r1
 8005122:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	689a      	ldr	r2, [r3, #8]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005132:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	6899      	ldr	r1, [r3, #8]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	68da      	ldr	r2, [r3, #12]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	430a      	orrs	r2, r1
 8005144:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800514a:	4a58      	ldr	r2, [pc, #352]	; (80052ac <ADC_Init+0x1f4>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d022      	beq.n	8005196 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	689a      	ldr	r2, [r3, #8]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800515e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	6899      	ldr	r1, [r3, #8]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	430a      	orrs	r2, r1
 8005170:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	689a      	ldr	r2, [r3, #8]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005180:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	6899      	ldr	r1, [r3, #8]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	430a      	orrs	r2, r1
 8005192:	609a      	str	r2, [r3, #8]
 8005194:	e00f      	b.n	80051b6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	689a      	ldr	r2, [r3, #8]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80051a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	689a      	ldr	r2, [r3, #8]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80051b4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	689a      	ldr	r2, [r3, #8]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f022 0202 	bic.w	r2, r2, #2
 80051c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	6899      	ldr	r1, [r3, #8]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	7e1b      	ldrb	r3, [r3, #24]
 80051d0:	005a      	lsls	r2, r3, #1
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	430a      	orrs	r2, r1
 80051d8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d01b      	beq.n	800521c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	685a      	ldr	r2, [r3, #4]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051f2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	685a      	ldr	r2, [r3, #4]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005202:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	6859      	ldr	r1, [r3, #4]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520e:	3b01      	subs	r3, #1
 8005210:	035a      	lsls	r2, r3, #13
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	430a      	orrs	r2, r1
 8005218:	605a      	str	r2, [r3, #4]
 800521a:	e007      	b.n	800522c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	685a      	ldr	r2, [r3, #4]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800522a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800523a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	69db      	ldr	r3, [r3, #28]
 8005246:	3b01      	subs	r3, #1
 8005248:	051a      	lsls	r2, r3, #20
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	430a      	orrs	r2, r1
 8005250:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	689a      	ldr	r2, [r3, #8]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005260:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	6899      	ldr	r1, [r3, #8]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800526e:	025a      	lsls	r2, r3, #9
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	430a      	orrs	r2, r1
 8005276:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	689a      	ldr	r2, [r3, #8]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005286:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	6899      	ldr	r1, [r3, #8]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	695b      	ldr	r3, [r3, #20]
 8005292:	029a      	lsls	r2, r3, #10
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	430a      	orrs	r2, r1
 800529a:	609a      	str	r2, [r3, #8]
}
 800529c:	bf00      	nop
 800529e:	3714      	adds	r7, #20
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr
 80052a8:	40012300 	.word	0x40012300
 80052ac:	0f000001 	.word	0x0f000001

080052b0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b084      	sub	sp, #16
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052bc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d13c      	bne.n	8005344 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ce:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d12b      	bne.n	800533c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d127      	bne.n	800533c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d006      	beq.n	8005308 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005304:	2b00      	cmp	r3, #0
 8005306:	d119      	bne.n	800533c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	685a      	ldr	r2, [r3, #4]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f022 0220 	bic.w	r2, r2, #32
 8005316:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005328:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800532c:	2b00      	cmp	r3, #0
 800532e:	d105      	bne.n	800533c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005334:	f043 0201 	orr.w	r2, r3, #1
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800533c:	68f8      	ldr	r0, [r7, #12]
 800533e:	f7ff fd7b 	bl	8004e38 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005342:	e00e      	b.n	8005362 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005348:	f003 0310 	and.w	r3, r3, #16
 800534c:	2b00      	cmp	r3, #0
 800534e:	d003      	beq.n	8005358 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8005350:	68f8      	ldr	r0, [r7, #12]
 8005352:	f7ff fd85 	bl	8004e60 <HAL_ADC_ErrorCallback>
}
 8005356:	e004      	b.n	8005362 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800535c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	4798      	blx	r3
}
 8005362:	bf00      	nop
 8005364:	3710      	adds	r7, #16
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}

0800536a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800536a:	b580      	push	{r7, lr}
 800536c:	b084      	sub	sp, #16
 800536e:	af00      	add	r7, sp, #0
 8005370:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005376:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005378:	68f8      	ldr	r0, [r7, #12]
 800537a:	f7ff fd67 	bl	8004e4c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800537e:	bf00      	nop
 8005380:	3710      	adds	r7, #16
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}

08005386 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8005386:	b580      	push	{r7, lr}
 8005388:	b084      	sub	sp, #16
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005392:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2240      	movs	r2, #64	; 0x40
 8005398:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800539e:	f043 0204 	orr.w	r2, r3, #4
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80053a6:	68f8      	ldr	r0, [r7, #12]
 80053a8:	f7ff fd5a 	bl	8004e60 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80053ac:	bf00      	nop
 80053ae:	3710      	adds	r7, #16
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <__NVIC_SetPriorityGrouping>:
{
 80053b4:	b480      	push	{r7}
 80053b6:	b085      	sub	sp, #20
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f003 0307 	and.w	r3, r3, #7
 80053c2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80053c4:	4b0c      	ldr	r3, [pc, #48]	; (80053f8 <__NVIC_SetPriorityGrouping+0x44>)
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80053ca:	68ba      	ldr	r2, [r7, #8]
 80053cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80053d0:	4013      	ands	r3, r2
 80053d2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80053dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80053e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80053e6:	4a04      	ldr	r2, [pc, #16]	; (80053f8 <__NVIC_SetPriorityGrouping+0x44>)
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	60d3      	str	r3, [r2, #12]
}
 80053ec:	bf00      	nop
 80053ee:	3714      	adds	r7, #20
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr
 80053f8:	e000ed00 	.word	0xe000ed00

080053fc <__NVIC_GetPriorityGrouping>:
{
 80053fc:	b480      	push	{r7}
 80053fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005400:	4b04      	ldr	r3, [pc, #16]	; (8005414 <__NVIC_GetPriorityGrouping+0x18>)
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	0a1b      	lsrs	r3, r3, #8
 8005406:	f003 0307 	and.w	r3, r3, #7
}
 800540a:	4618      	mov	r0, r3
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr
 8005414:	e000ed00 	.word	0xe000ed00

08005418 <__NVIC_EnableIRQ>:
{
 8005418:	b480      	push	{r7}
 800541a:	b083      	sub	sp, #12
 800541c:	af00      	add	r7, sp, #0
 800541e:	4603      	mov	r3, r0
 8005420:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005426:	2b00      	cmp	r3, #0
 8005428:	db0b      	blt.n	8005442 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800542a:	79fb      	ldrb	r3, [r7, #7]
 800542c:	f003 021f 	and.w	r2, r3, #31
 8005430:	4907      	ldr	r1, [pc, #28]	; (8005450 <__NVIC_EnableIRQ+0x38>)
 8005432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005436:	095b      	lsrs	r3, r3, #5
 8005438:	2001      	movs	r0, #1
 800543a:	fa00 f202 	lsl.w	r2, r0, r2
 800543e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005442:	bf00      	nop
 8005444:	370c      	adds	r7, #12
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr
 800544e:	bf00      	nop
 8005450:	e000e100 	.word	0xe000e100

08005454 <__NVIC_SetPriority>:
{
 8005454:	b480      	push	{r7}
 8005456:	b083      	sub	sp, #12
 8005458:	af00      	add	r7, sp, #0
 800545a:	4603      	mov	r3, r0
 800545c:	6039      	str	r1, [r7, #0]
 800545e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005460:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005464:	2b00      	cmp	r3, #0
 8005466:	db0a      	blt.n	800547e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	b2da      	uxtb	r2, r3
 800546c:	490c      	ldr	r1, [pc, #48]	; (80054a0 <__NVIC_SetPriority+0x4c>)
 800546e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005472:	0112      	lsls	r2, r2, #4
 8005474:	b2d2      	uxtb	r2, r2
 8005476:	440b      	add	r3, r1
 8005478:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800547c:	e00a      	b.n	8005494 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	b2da      	uxtb	r2, r3
 8005482:	4908      	ldr	r1, [pc, #32]	; (80054a4 <__NVIC_SetPriority+0x50>)
 8005484:	79fb      	ldrb	r3, [r7, #7]
 8005486:	f003 030f 	and.w	r3, r3, #15
 800548a:	3b04      	subs	r3, #4
 800548c:	0112      	lsls	r2, r2, #4
 800548e:	b2d2      	uxtb	r2, r2
 8005490:	440b      	add	r3, r1
 8005492:	761a      	strb	r2, [r3, #24]
}
 8005494:	bf00      	nop
 8005496:	370c      	adds	r7, #12
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr
 80054a0:	e000e100 	.word	0xe000e100
 80054a4:	e000ed00 	.word	0xe000ed00

080054a8 <NVIC_EncodePriority>:
{
 80054a8:	b480      	push	{r7}
 80054aa:	b089      	sub	sp, #36	; 0x24
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	60f8      	str	r0, [r7, #12]
 80054b0:	60b9      	str	r1, [r7, #8]
 80054b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f003 0307 	and.w	r3, r3, #7
 80054ba:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80054bc:	69fb      	ldr	r3, [r7, #28]
 80054be:	f1c3 0307 	rsb	r3, r3, #7
 80054c2:	2b04      	cmp	r3, #4
 80054c4:	bf28      	it	cs
 80054c6:	2304      	movcs	r3, #4
 80054c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80054ca:	69fb      	ldr	r3, [r7, #28]
 80054cc:	3304      	adds	r3, #4
 80054ce:	2b06      	cmp	r3, #6
 80054d0:	d902      	bls.n	80054d8 <NVIC_EncodePriority+0x30>
 80054d2:	69fb      	ldr	r3, [r7, #28]
 80054d4:	3b03      	subs	r3, #3
 80054d6:	e000      	b.n	80054da <NVIC_EncodePriority+0x32>
 80054d8:	2300      	movs	r3, #0
 80054da:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80054e0:	69bb      	ldr	r3, [r7, #24]
 80054e2:	fa02 f303 	lsl.w	r3, r2, r3
 80054e6:	43da      	mvns	r2, r3
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	401a      	ands	r2, r3
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80054f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	fa01 f303 	lsl.w	r3, r1, r3
 80054fa:	43d9      	mvns	r1, r3
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005500:	4313      	orrs	r3, r2
}
 8005502:	4618      	mov	r0, r3
 8005504:	3724      	adds	r7, #36	; 0x24
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr
	...

08005510 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b082      	sub	sp, #8
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	3b01      	subs	r3, #1
 800551c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005520:	d301      	bcc.n	8005526 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005522:	2301      	movs	r3, #1
 8005524:	e00f      	b.n	8005546 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005526:	4a0a      	ldr	r2, [pc, #40]	; (8005550 <SysTick_Config+0x40>)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	3b01      	subs	r3, #1
 800552c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800552e:	210f      	movs	r1, #15
 8005530:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005534:	f7ff ff8e 	bl	8005454 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005538:	4b05      	ldr	r3, [pc, #20]	; (8005550 <SysTick_Config+0x40>)
 800553a:	2200      	movs	r2, #0
 800553c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800553e:	4b04      	ldr	r3, [pc, #16]	; (8005550 <SysTick_Config+0x40>)
 8005540:	2207      	movs	r2, #7
 8005542:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005544:	2300      	movs	r3, #0
}
 8005546:	4618      	mov	r0, r3
 8005548:	3708      	adds	r7, #8
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop
 8005550:	e000e010 	.word	0xe000e010

08005554 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b082      	sub	sp, #8
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f7ff ff29 	bl	80053b4 <__NVIC_SetPriorityGrouping>
}
 8005562:	bf00      	nop
 8005564:	3708      	adds	r7, #8
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}

0800556a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800556a:	b580      	push	{r7, lr}
 800556c:	b086      	sub	sp, #24
 800556e:	af00      	add	r7, sp, #0
 8005570:	4603      	mov	r3, r0
 8005572:	60b9      	str	r1, [r7, #8]
 8005574:	607a      	str	r2, [r7, #4]
 8005576:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005578:	2300      	movs	r3, #0
 800557a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800557c:	f7ff ff3e 	bl	80053fc <__NVIC_GetPriorityGrouping>
 8005580:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005582:	687a      	ldr	r2, [r7, #4]
 8005584:	68b9      	ldr	r1, [r7, #8]
 8005586:	6978      	ldr	r0, [r7, #20]
 8005588:	f7ff ff8e 	bl	80054a8 <NVIC_EncodePriority>
 800558c:	4602      	mov	r2, r0
 800558e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005592:	4611      	mov	r1, r2
 8005594:	4618      	mov	r0, r3
 8005596:	f7ff ff5d 	bl	8005454 <__NVIC_SetPriority>
}
 800559a:	bf00      	nop
 800559c:	3718      	adds	r7, #24
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}

080055a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80055a2:	b580      	push	{r7, lr}
 80055a4:	b082      	sub	sp, #8
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	4603      	mov	r3, r0
 80055aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80055ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055b0:	4618      	mov	r0, r3
 80055b2:	f7ff ff31 	bl	8005418 <__NVIC_EnableIRQ>
}
 80055b6:	bf00      	nop
 80055b8:	3708      	adds	r7, #8
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}

080055be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80055be:	b580      	push	{r7, lr}
 80055c0:	b082      	sub	sp, #8
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f7ff ffa2 	bl	8005510 <SysTick_Config>
 80055cc:	4603      	mov	r3, r0
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3708      	adds	r7, #8
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
	...

080055d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b086      	sub	sp, #24
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80055e0:	2300      	movs	r3, #0
 80055e2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80055e4:	f7ff fac4 	bl	8004b70 <HAL_GetTick>
 80055e8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d101      	bne.n	80055f4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	e099      	b.n	8005728 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2202      	movs	r2, #2
 8005600:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f022 0201 	bic.w	r2, r2, #1
 8005612:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005614:	e00f      	b.n	8005636 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005616:	f7ff faab 	bl	8004b70 <HAL_GetTick>
 800561a:	4602      	mov	r2, r0
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	1ad3      	subs	r3, r2, r3
 8005620:	2b05      	cmp	r3, #5
 8005622:	d908      	bls.n	8005636 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2220      	movs	r2, #32
 8005628:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2203      	movs	r2, #3
 800562e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005632:	2303      	movs	r3, #3
 8005634:	e078      	b.n	8005728 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f003 0301 	and.w	r3, r3, #1
 8005640:	2b00      	cmp	r3, #0
 8005642:	d1e8      	bne.n	8005616 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800564c:	697a      	ldr	r2, [r7, #20]
 800564e:	4b38      	ldr	r3, [pc, #224]	; (8005730 <HAL_DMA_Init+0x158>)
 8005650:	4013      	ands	r3, r2
 8005652:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	685a      	ldr	r2, [r3, #4]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005662:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	691b      	ldr	r3, [r3, #16]
 8005668:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800566e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	699b      	ldr	r3, [r3, #24]
 8005674:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800567a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6a1b      	ldr	r3, [r3, #32]
 8005680:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005682:	697a      	ldr	r2, [r7, #20]
 8005684:	4313      	orrs	r3, r2
 8005686:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800568c:	2b04      	cmp	r3, #4
 800568e:	d107      	bne.n	80056a0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005698:	4313      	orrs	r3, r2
 800569a:	697a      	ldr	r2, [r7, #20]
 800569c:	4313      	orrs	r3, r2
 800569e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	697a      	ldr	r2, [r7, #20]
 80056a6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	695b      	ldr	r3, [r3, #20]
 80056ae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	f023 0307 	bic.w	r3, r3, #7
 80056b6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056bc:	697a      	ldr	r2, [r7, #20]
 80056be:	4313      	orrs	r3, r2
 80056c0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c6:	2b04      	cmp	r3, #4
 80056c8:	d117      	bne.n	80056fa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ce:	697a      	ldr	r2, [r7, #20]
 80056d0:	4313      	orrs	r3, r2
 80056d2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d00e      	beq.n	80056fa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f000 fa6f 	bl	8005bc0 <DMA_CheckFifoParam>
 80056e2:	4603      	mov	r3, r0
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d008      	beq.n	80056fa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2240      	movs	r2, #64	; 0x40
 80056ec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2201      	movs	r2, #1
 80056f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80056f6:	2301      	movs	r3, #1
 80056f8:	e016      	b.n	8005728 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	697a      	ldr	r2, [r7, #20]
 8005700:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f000 fa26 	bl	8005b54 <DMA_CalcBaseAndBitshift>
 8005708:	4603      	mov	r3, r0
 800570a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005710:	223f      	movs	r2, #63	; 0x3f
 8005712:	409a      	lsls	r2, r3
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2200      	movs	r2, #0
 800571c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2201      	movs	r2, #1
 8005722:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005726:	2300      	movs	r3, #0
}
 8005728:	4618      	mov	r0, r3
 800572a:	3718      	adds	r7, #24
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}
 8005730:	f010803f 	.word	0xf010803f

08005734 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b086      	sub	sp, #24
 8005738:	af00      	add	r7, sp, #0
 800573a:	60f8      	str	r0, [r7, #12]
 800573c:	60b9      	str	r1, [r7, #8]
 800573e:	607a      	str	r2, [r7, #4]
 8005740:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005742:	2300      	movs	r3, #0
 8005744:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800574a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005752:	2b01      	cmp	r3, #1
 8005754:	d101      	bne.n	800575a <HAL_DMA_Start_IT+0x26>
 8005756:	2302      	movs	r3, #2
 8005758:	e040      	b.n	80057dc <HAL_DMA_Start_IT+0xa8>
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2201      	movs	r2, #1
 800575e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005768:	b2db      	uxtb	r3, r3
 800576a:	2b01      	cmp	r3, #1
 800576c:	d12f      	bne.n	80057ce <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2202      	movs	r2, #2
 8005772:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2200      	movs	r2, #0
 800577a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	68b9      	ldr	r1, [r7, #8]
 8005782:	68f8      	ldr	r0, [r7, #12]
 8005784:	f000 f9b8 	bl	8005af8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800578c:	223f      	movs	r2, #63	; 0x3f
 800578e:	409a      	lsls	r2, r3
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f042 0216 	orr.w	r2, r2, #22
 80057a2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d007      	beq.n	80057bc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f042 0208 	orr.w	r2, r2, #8
 80057ba:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f042 0201 	orr.w	r2, r2, #1
 80057ca:	601a      	str	r2, [r3, #0]
 80057cc:	e005      	b.n	80057da <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2200      	movs	r2, #0
 80057d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80057d6:	2302      	movs	r3, #2
 80057d8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80057da:	7dfb      	ldrb	r3, [r7, #23]
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3718      	adds	r7, #24
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}

080057e4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b086      	sub	sp, #24
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80057ec:	2300      	movs	r3, #0
 80057ee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80057f0:	4b92      	ldr	r3, [pc, #584]	; (8005a3c <HAL_DMA_IRQHandler+0x258>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a92      	ldr	r2, [pc, #584]	; (8005a40 <HAL_DMA_IRQHandler+0x25c>)
 80057f6:	fba2 2303 	umull	r2, r3, r2, r3
 80057fa:	0a9b      	lsrs	r3, r3, #10
 80057fc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005802:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800580e:	2208      	movs	r2, #8
 8005810:	409a      	lsls	r2, r3
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	4013      	ands	r3, r2
 8005816:	2b00      	cmp	r3, #0
 8005818:	d01a      	beq.n	8005850 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f003 0304 	and.w	r3, r3, #4
 8005824:	2b00      	cmp	r3, #0
 8005826:	d013      	beq.n	8005850 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f022 0204 	bic.w	r2, r2, #4
 8005836:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800583c:	2208      	movs	r2, #8
 800583e:	409a      	lsls	r2, r3
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005848:	f043 0201 	orr.w	r2, r3, #1
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005854:	2201      	movs	r2, #1
 8005856:	409a      	lsls	r2, r3
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	4013      	ands	r3, r2
 800585c:	2b00      	cmp	r3, #0
 800585e:	d012      	beq.n	8005886 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	695b      	ldr	r3, [r3, #20]
 8005866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800586a:	2b00      	cmp	r3, #0
 800586c:	d00b      	beq.n	8005886 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005872:	2201      	movs	r2, #1
 8005874:	409a      	lsls	r2, r3
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800587e:	f043 0202 	orr.w	r2, r3, #2
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800588a:	2204      	movs	r2, #4
 800588c:	409a      	lsls	r2, r3
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	4013      	ands	r3, r2
 8005892:	2b00      	cmp	r3, #0
 8005894:	d012      	beq.n	80058bc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 0302 	and.w	r3, r3, #2
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d00b      	beq.n	80058bc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058a8:	2204      	movs	r2, #4
 80058aa:	409a      	lsls	r2, r3
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058b4:	f043 0204 	orr.w	r2, r3, #4
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058c0:	2210      	movs	r2, #16
 80058c2:	409a      	lsls	r2, r3
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	4013      	ands	r3, r2
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d043      	beq.n	8005954 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f003 0308 	and.w	r3, r3, #8
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d03c      	beq.n	8005954 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058de:	2210      	movs	r2, #16
 80058e0:	409a      	lsls	r2, r3
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d018      	beq.n	8005926 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d108      	bne.n	8005914 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005906:	2b00      	cmp	r3, #0
 8005908:	d024      	beq.n	8005954 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	4798      	blx	r3
 8005912:	e01f      	b.n	8005954 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005918:	2b00      	cmp	r3, #0
 800591a:	d01b      	beq.n	8005954 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	4798      	blx	r3
 8005924:	e016      	b.n	8005954 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005930:	2b00      	cmp	r3, #0
 8005932:	d107      	bne.n	8005944 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f022 0208 	bic.w	r2, r2, #8
 8005942:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005948:	2b00      	cmp	r3, #0
 800594a:	d003      	beq.n	8005954 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005958:	2220      	movs	r2, #32
 800595a:	409a      	lsls	r2, r3
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	4013      	ands	r3, r2
 8005960:	2b00      	cmp	r3, #0
 8005962:	f000 808e 	beq.w	8005a82 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f003 0310 	and.w	r3, r3, #16
 8005970:	2b00      	cmp	r3, #0
 8005972:	f000 8086 	beq.w	8005a82 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800597a:	2220      	movs	r2, #32
 800597c:	409a      	lsls	r2, r3
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005988:	b2db      	uxtb	r3, r3
 800598a:	2b05      	cmp	r3, #5
 800598c:	d136      	bne.n	80059fc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f022 0216 	bic.w	r2, r2, #22
 800599c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	695a      	ldr	r2, [r3, #20]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80059ac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d103      	bne.n	80059be <HAL_DMA_IRQHandler+0x1da>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d007      	beq.n	80059ce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f022 0208 	bic.w	r2, r2, #8
 80059cc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059d2:	223f      	movs	r2, #63	; 0x3f
 80059d4:	409a      	lsls	r2, r3
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2200      	movs	r2, #0
 80059de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2201      	movs	r2, #1
 80059e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d07d      	beq.n	8005aee <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	4798      	blx	r3
        }
        return;
 80059fa:	e078      	b.n	8005aee <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d01c      	beq.n	8005a44 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d108      	bne.n	8005a2a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d030      	beq.n	8005a82 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	4798      	blx	r3
 8005a28:	e02b      	b.n	8005a82 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d027      	beq.n	8005a82 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	4798      	blx	r3
 8005a3a:	e022      	b.n	8005a82 <HAL_DMA_IRQHandler+0x29e>
 8005a3c:	20000004 	.word	0x20000004
 8005a40:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d10f      	bne.n	8005a72 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f022 0210 	bic.w	r2, r2, #16
 8005a60:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2200      	movs	r2, #0
 8005a66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d003      	beq.n	8005a82 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d032      	beq.n	8005af0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a8e:	f003 0301 	and.w	r3, r3, #1
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d022      	beq.n	8005adc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2205      	movs	r2, #5
 8005a9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f022 0201 	bic.w	r2, r2, #1
 8005aac:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	3301      	adds	r3, #1
 8005ab2:	60bb      	str	r3, [r7, #8]
 8005ab4:	697a      	ldr	r2, [r7, #20]
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d307      	bcc.n	8005aca <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f003 0301 	and.w	r3, r3, #1
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d1f2      	bne.n	8005aae <HAL_DMA_IRQHandler+0x2ca>
 8005ac8:	e000      	b.n	8005acc <HAL_DMA_IRQHandler+0x2e8>
          break;
 8005aca:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d005      	beq.n	8005af0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	4798      	blx	r3
 8005aec:	e000      	b.n	8005af0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8005aee:	bf00      	nop
    }
  }
}
 8005af0:	3718      	adds	r7, #24
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop

08005af8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b085      	sub	sp, #20
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	60f8      	str	r0, [r7, #12]
 8005b00:	60b9      	str	r1, [r7, #8]
 8005b02:	607a      	str	r2, [r7, #4]
 8005b04:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005b14:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	683a      	ldr	r2, [r7, #0]
 8005b1c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	2b40      	cmp	r3, #64	; 0x40
 8005b24:	d108      	bne.n	8005b38 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	68ba      	ldr	r2, [r7, #8]
 8005b34:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005b36:	e007      	b.n	8005b48 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	68ba      	ldr	r2, [r7, #8]
 8005b3e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	60da      	str	r2, [r3, #12]
}
 8005b48:	bf00      	nop
 8005b4a:	3714      	adds	r7, #20
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr

08005b54 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b085      	sub	sp, #20
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	3b10      	subs	r3, #16
 8005b64:	4a14      	ldr	r2, [pc, #80]	; (8005bb8 <DMA_CalcBaseAndBitshift+0x64>)
 8005b66:	fba2 2303 	umull	r2, r3, r2, r3
 8005b6a:	091b      	lsrs	r3, r3, #4
 8005b6c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005b6e:	4a13      	ldr	r2, [pc, #76]	; (8005bbc <DMA_CalcBaseAndBitshift+0x68>)
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	4413      	add	r3, r2
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	461a      	mov	r2, r3
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2b03      	cmp	r3, #3
 8005b80:	d909      	bls.n	8005b96 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005b8a:	f023 0303 	bic.w	r3, r3, #3
 8005b8e:	1d1a      	adds	r2, r3, #4
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	659a      	str	r2, [r3, #88]	; 0x58
 8005b94:	e007      	b.n	8005ba6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005b9e:	f023 0303 	bic.w	r3, r3, #3
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3714      	adds	r7, #20
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr
 8005bb6:	bf00      	nop
 8005bb8:	aaaaaaab 	.word	0xaaaaaaab
 8005bbc:	0800b654 	.word	0x0800b654

08005bc0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b085      	sub	sp, #20
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bd0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	699b      	ldr	r3, [r3, #24]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d11f      	bne.n	8005c1a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	2b03      	cmp	r3, #3
 8005bde:	d855      	bhi.n	8005c8c <DMA_CheckFifoParam+0xcc>
 8005be0:	a201      	add	r2, pc, #4	; (adr r2, 8005be8 <DMA_CheckFifoParam+0x28>)
 8005be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005be6:	bf00      	nop
 8005be8:	08005bf9 	.word	0x08005bf9
 8005bec:	08005c0b 	.word	0x08005c0b
 8005bf0:	08005bf9 	.word	0x08005bf9
 8005bf4:	08005c8d 	.word	0x08005c8d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bfc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d045      	beq.n	8005c90 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c08:	e042      	b.n	8005c90 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c0e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005c12:	d13f      	bne.n	8005c94 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c18:	e03c      	b.n	8005c94 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	699b      	ldr	r3, [r3, #24]
 8005c1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c22:	d121      	bne.n	8005c68 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	2b03      	cmp	r3, #3
 8005c28:	d836      	bhi.n	8005c98 <DMA_CheckFifoParam+0xd8>
 8005c2a:	a201      	add	r2, pc, #4	; (adr r2, 8005c30 <DMA_CheckFifoParam+0x70>)
 8005c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c30:	08005c41 	.word	0x08005c41
 8005c34:	08005c47 	.word	0x08005c47
 8005c38:	08005c41 	.word	0x08005c41
 8005c3c:	08005c59 	.word	0x08005c59
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005c40:	2301      	movs	r3, #1
 8005c42:	73fb      	strb	r3, [r7, #15]
      break;
 8005c44:	e02f      	b.n	8005ca6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d024      	beq.n	8005c9c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c56:	e021      	b.n	8005c9c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c5c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005c60:	d11e      	bne.n	8005ca0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8005c62:	2301      	movs	r3, #1
 8005c64:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005c66:	e01b      	b.n	8005ca0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	2b02      	cmp	r3, #2
 8005c6c:	d902      	bls.n	8005c74 <DMA_CheckFifoParam+0xb4>
 8005c6e:	2b03      	cmp	r3, #3
 8005c70:	d003      	beq.n	8005c7a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005c72:	e018      	b.n	8005ca6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	73fb      	strb	r3, [r7, #15]
      break;
 8005c78:	e015      	b.n	8005ca6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d00e      	beq.n	8005ca4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	73fb      	strb	r3, [r7, #15]
      break;
 8005c8a:	e00b      	b.n	8005ca4 <DMA_CheckFifoParam+0xe4>
      break;
 8005c8c:	bf00      	nop
 8005c8e:	e00a      	b.n	8005ca6 <DMA_CheckFifoParam+0xe6>
      break;
 8005c90:	bf00      	nop
 8005c92:	e008      	b.n	8005ca6 <DMA_CheckFifoParam+0xe6>
      break;
 8005c94:	bf00      	nop
 8005c96:	e006      	b.n	8005ca6 <DMA_CheckFifoParam+0xe6>
      break;
 8005c98:	bf00      	nop
 8005c9a:	e004      	b.n	8005ca6 <DMA_CheckFifoParam+0xe6>
      break;
 8005c9c:	bf00      	nop
 8005c9e:	e002      	b.n	8005ca6 <DMA_CheckFifoParam+0xe6>
      break;   
 8005ca0:	bf00      	nop
 8005ca2:	e000      	b.n	8005ca6 <DMA_CheckFifoParam+0xe6>
      break;
 8005ca4:	bf00      	nop
    }
  } 
  
  return status; 
 8005ca6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3714      	adds	r7, #20
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr

08005cb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b089      	sub	sp, #36	; 0x24
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005cca:	2300      	movs	r3, #0
 8005ccc:	61fb      	str	r3, [r7, #28]
 8005cce:	e16b      	b.n	8005fa8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	69fb      	ldr	r3, [r7, #28]
 8005cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8005cd8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	697a      	ldr	r2, [r7, #20]
 8005ce0:	4013      	ands	r3, r2
 8005ce2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005ce4:	693a      	ldr	r2, [r7, #16]
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	f040 815a 	bne.w	8005fa2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	d00b      	beq.n	8005d0e <HAL_GPIO_Init+0x5a>
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	2b02      	cmp	r3, #2
 8005cfc:	d007      	beq.n	8005d0e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005d02:	2b11      	cmp	r3, #17
 8005d04:	d003      	beq.n	8005d0e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	2b12      	cmp	r3, #18
 8005d0c:	d130      	bne.n	8005d70 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005d14:	69fb      	ldr	r3, [r7, #28]
 8005d16:	005b      	lsls	r3, r3, #1
 8005d18:	2203      	movs	r2, #3
 8005d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d1e:	43db      	mvns	r3, r3
 8005d20:	69ba      	ldr	r2, [r7, #24]
 8005d22:	4013      	ands	r3, r2
 8005d24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	68da      	ldr	r2, [r3, #12]
 8005d2a:	69fb      	ldr	r3, [r7, #28]
 8005d2c:	005b      	lsls	r3, r3, #1
 8005d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d32:	69ba      	ldr	r2, [r7, #24]
 8005d34:	4313      	orrs	r3, r2
 8005d36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	69ba      	ldr	r2, [r7, #24]
 8005d3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005d44:	2201      	movs	r2, #1
 8005d46:	69fb      	ldr	r3, [r7, #28]
 8005d48:	fa02 f303 	lsl.w	r3, r2, r3
 8005d4c:	43db      	mvns	r3, r3
 8005d4e:	69ba      	ldr	r2, [r7, #24]
 8005d50:	4013      	ands	r3, r2
 8005d52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	091b      	lsrs	r3, r3, #4
 8005d5a:	f003 0201 	and.w	r2, r3, #1
 8005d5e:	69fb      	ldr	r3, [r7, #28]
 8005d60:	fa02 f303 	lsl.w	r3, r2, r3
 8005d64:	69ba      	ldr	r2, [r7, #24]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	69ba      	ldr	r2, [r7, #24]
 8005d6e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	68db      	ldr	r3, [r3, #12]
 8005d74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005d76:	69fb      	ldr	r3, [r7, #28]
 8005d78:	005b      	lsls	r3, r3, #1
 8005d7a:	2203      	movs	r2, #3
 8005d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d80:	43db      	mvns	r3, r3
 8005d82:	69ba      	ldr	r2, [r7, #24]
 8005d84:	4013      	ands	r3, r2
 8005d86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	689a      	ldr	r2, [r3, #8]
 8005d8c:	69fb      	ldr	r3, [r7, #28]
 8005d8e:	005b      	lsls	r3, r3, #1
 8005d90:	fa02 f303 	lsl.w	r3, r2, r3
 8005d94:	69ba      	ldr	r2, [r7, #24]
 8005d96:	4313      	orrs	r3, r2
 8005d98:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	69ba      	ldr	r2, [r7, #24]
 8005d9e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	2b02      	cmp	r3, #2
 8005da6:	d003      	beq.n	8005db0 <HAL_GPIO_Init+0xfc>
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	2b12      	cmp	r3, #18
 8005dae:	d123      	bne.n	8005df8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005db0:	69fb      	ldr	r3, [r7, #28]
 8005db2:	08da      	lsrs	r2, r3, #3
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	3208      	adds	r2, #8
 8005db8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005dbe:	69fb      	ldr	r3, [r7, #28]
 8005dc0:	f003 0307 	and.w	r3, r3, #7
 8005dc4:	009b      	lsls	r3, r3, #2
 8005dc6:	220f      	movs	r2, #15
 8005dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8005dcc:	43db      	mvns	r3, r3
 8005dce:	69ba      	ldr	r2, [r7, #24]
 8005dd0:	4013      	ands	r3, r2
 8005dd2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	691a      	ldr	r2, [r3, #16]
 8005dd8:	69fb      	ldr	r3, [r7, #28]
 8005dda:	f003 0307 	and.w	r3, r3, #7
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	fa02 f303 	lsl.w	r3, r2, r3
 8005de4:	69ba      	ldr	r2, [r7, #24]
 8005de6:	4313      	orrs	r3, r2
 8005de8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005dea:	69fb      	ldr	r3, [r7, #28]
 8005dec:	08da      	lsrs	r2, r3, #3
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	3208      	adds	r2, #8
 8005df2:	69b9      	ldr	r1, [r7, #24]
 8005df4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005dfe:	69fb      	ldr	r3, [r7, #28]
 8005e00:	005b      	lsls	r3, r3, #1
 8005e02:	2203      	movs	r2, #3
 8005e04:	fa02 f303 	lsl.w	r3, r2, r3
 8005e08:	43db      	mvns	r3, r3
 8005e0a:	69ba      	ldr	r2, [r7, #24]
 8005e0c:	4013      	ands	r3, r2
 8005e0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	f003 0203 	and.w	r2, r3, #3
 8005e18:	69fb      	ldr	r3, [r7, #28]
 8005e1a:	005b      	lsls	r3, r3, #1
 8005e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e20:	69ba      	ldr	r2, [r7, #24]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	69ba      	ldr	r2, [r7, #24]
 8005e2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	f000 80b4 	beq.w	8005fa2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	60fb      	str	r3, [r7, #12]
 8005e3e:	4b5f      	ldr	r3, [pc, #380]	; (8005fbc <HAL_GPIO_Init+0x308>)
 8005e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e42:	4a5e      	ldr	r2, [pc, #376]	; (8005fbc <HAL_GPIO_Init+0x308>)
 8005e44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005e48:	6453      	str	r3, [r2, #68]	; 0x44
 8005e4a:	4b5c      	ldr	r3, [pc, #368]	; (8005fbc <HAL_GPIO_Init+0x308>)
 8005e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e52:	60fb      	str	r3, [r7, #12]
 8005e54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005e56:	4a5a      	ldr	r2, [pc, #360]	; (8005fc0 <HAL_GPIO_Init+0x30c>)
 8005e58:	69fb      	ldr	r3, [r7, #28]
 8005e5a:	089b      	lsrs	r3, r3, #2
 8005e5c:	3302      	adds	r3, #2
 8005e5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005e64:	69fb      	ldr	r3, [r7, #28]
 8005e66:	f003 0303 	and.w	r3, r3, #3
 8005e6a:	009b      	lsls	r3, r3, #2
 8005e6c:	220f      	movs	r2, #15
 8005e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e72:	43db      	mvns	r3, r3
 8005e74:	69ba      	ldr	r2, [r7, #24]
 8005e76:	4013      	ands	r3, r2
 8005e78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	4a51      	ldr	r2, [pc, #324]	; (8005fc4 <HAL_GPIO_Init+0x310>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d02b      	beq.n	8005eda <HAL_GPIO_Init+0x226>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	4a50      	ldr	r2, [pc, #320]	; (8005fc8 <HAL_GPIO_Init+0x314>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d025      	beq.n	8005ed6 <HAL_GPIO_Init+0x222>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	4a4f      	ldr	r2, [pc, #316]	; (8005fcc <HAL_GPIO_Init+0x318>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d01f      	beq.n	8005ed2 <HAL_GPIO_Init+0x21e>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	4a4e      	ldr	r2, [pc, #312]	; (8005fd0 <HAL_GPIO_Init+0x31c>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d019      	beq.n	8005ece <HAL_GPIO_Init+0x21a>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	4a4d      	ldr	r2, [pc, #308]	; (8005fd4 <HAL_GPIO_Init+0x320>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d013      	beq.n	8005eca <HAL_GPIO_Init+0x216>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	4a4c      	ldr	r2, [pc, #304]	; (8005fd8 <HAL_GPIO_Init+0x324>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d00d      	beq.n	8005ec6 <HAL_GPIO_Init+0x212>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	4a4b      	ldr	r2, [pc, #300]	; (8005fdc <HAL_GPIO_Init+0x328>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d007      	beq.n	8005ec2 <HAL_GPIO_Init+0x20e>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	4a4a      	ldr	r2, [pc, #296]	; (8005fe0 <HAL_GPIO_Init+0x32c>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d101      	bne.n	8005ebe <HAL_GPIO_Init+0x20a>
 8005eba:	2307      	movs	r3, #7
 8005ebc:	e00e      	b.n	8005edc <HAL_GPIO_Init+0x228>
 8005ebe:	2308      	movs	r3, #8
 8005ec0:	e00c      	b.n	8005edc <HAL_GPIO_Init+0x228>
 8005ec2:	2306      	movs	r3, #6
 8005ec4:	e00a      	b.n	8005edc <HAL_GPIO_Init+0x228>
 8005ec6:	2305      	movs	r3, #5
 8005ec8:	e008      	b.n	8005edc <HAL_GPIO_Init+0x228>
 8005eca:	2304      	movs	r3, #4
 8005ecc:	e006      	b.n	8005edc <HAL_GPIO_Init+0x228>
 8005ece:	2303      	movs	r3, #3
 8005ed0:	e004      	b.n	8005edc <HAL_GPIO_Init+0x228>
 8005ed2:	2302      	movs	r3, #2
 8005ed4:	e002      	b.n	8005edc <HAL_GPIO_Init+0x228>
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e000      	b.n	8005edc <HAL_GPIO_Init+0x228>
 8005eda:	2300      	movs	r3, #0
 8005edc:	69fa      	ldr	r2, [r7, #28]
 8005ede:	f002 0203 	and.w	r2, r2, #3
 8005ee2:	0092      	lsls	r2, r2, #2
 8005ee4:	4093      	lsls	r3, r2
 8005ee6:	69ba      	ldr	r2, [r7, #24]
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005eec:	4934      	ldr	r1, [pc, #208]	; (8005fc0 <HAL_GPIO_Init+0x30c>)
 8005eee:	69fb      	ldr	r3, [r7, #28]
 8005ef0:	089b      	lsrs	r3, r3, #2
 8005ef2:	3302      	adds	r3, #2
 8005ef4:	69ba      	ldr	r2, [r7, #24]
 8005ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005efa:	4b3a      	ldr	r3, [pc, #232]	; (8005fe4 <HAL_GPIO_Init+0x330>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	43db      	mvns	r3, r3
 8005f04:	69ba      	ldr	r2, [r7, #24]
 8005f06:	4013      	ands	r3, r2
 8005f08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d003      	beq.n	8005f1e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005f16:	69ba      	ldr	r2, [r7, #24]
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005f1e:	4a31      	ldr	r2, [pc, #196]	; (8005fe4 <HAL_GPIO_Init+0x330>)
 8005f20:	69bb      	ldr	r3, [r7, #24]
 8005f22:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005f24:	4b2f      	ldr	r3, [pc, #188]	; (8005fe4 <HAL_GPIO_Init+0x330>)
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	43db      	mvns	r3, r3
 8005f2e:	69ba      	ldr	r2, [r7, #24]
 8005f30:	4013      	ands	r3, r2
 8005f32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d003      	beq.n	8005f48 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005f40:	69ba      	ldr	r2, [r7, #24]
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	4313      	orrs	r3, r2
 8005f46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005f48:	4a26      	ldr	r2, [pc, #152]	; (8005fe4 <HAL_GPIO_Init+0x330>)
 8005f4a:	69bb      	ldr	r3, [r7, #24]
 8005f4c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005f4e:	4b25      	ldr	r3, [pc, #148]	; (8005fe4 <HAL_GPIO_Init+0x330>)
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	43db      	mvns	r3, r3
 8005f58:	69ba      	ldr	r2, [r7, #24]
 8005f5a:	4013      	ands	r3, r2
 8005f5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d003      	beq.n	8005f72 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005f6a:	69ba      	ldr	r2, [r7, #24]
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005f72:	4a1c      	ldr	r2, [pc, #112]	; (8005fe4 <HAL_GPIO_Init+0x330>)
 8005f74:	69bb      	ldr	r3, [r7, #24]
 8005f76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005f78:	4b1a      	ldr	r3, [pc, #104]	; (8005fe4 <HAL_GPIO_Init+0x330>)
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	43db      	mvns	r3, r3
 8005f82:	69ba      	ldr	r2, [r7, #24]
 8005f84:	4013      	ands	r3, r2
 8005f86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d003      	beq.n	8005f9c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005f94:	69ba      	ldr	r2, [r7, #24]
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005f9c:	4a11      	ldr	r2, [pc, #68]	; (8005fe4 <HAL_GPIO_Init+0x330>)
 8005f9e:	69bb      	ldr	r3, [r7, #24]
 8005fa0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005fa2:	69fb      	ldr	r3, [r7, #28]
 8005fa4:	3301      	adds	r3, #1
 8005fa6:	61fb      	str	r3, [r7, #28]
 8005fa8:	69fb      	ldr	r3, [r7, #28]
 8005faa:	2b0f      	cmp	r3, #15
 8005fac:	f67f ae90 	bls.w	8005cd0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005fb0:	bf00      	nop
 8005fb2:	3724      	adds	r7, #36	; 0x24
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr
 8005fbc:	40023800 	.word	0x40023800
 8005fc0:	40013800 	.word	0x40013800
 8005fc4:	40020000 	.word	0x40020000
 8005fc8:	40020400 	.word	0x40020400
 8005fcc:	40020800 	.word	0x40020800
 8005fd0:	40020c00 	.word	0x40020c00
 8005fd4:	40021000 	.word	0x40021000
 8005fd8:	40021400 	.word	0x40021400
 8005fdc:	40021800 	.word	0x40021800
 8005fe0:	40021c00 	.word	0x40021c00
 8005fe4:	40013c00 	.word	0x40013c00

08005fe8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b084      	sub	sp, #16
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d101      	bne.n	8005ffa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e11f      	b.n	800623a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006000:	b2db      	uxtb	r3, r3
 8006002:	2b00      	cmp	r3, #0
 8006004:	d106      	bne.n	8006014 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2200      	movs	r2, #0
 800600a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f7fd f838 	bl	8003084 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2224      	movs	r2, #36	; 0x24
 8006018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f022 0201 	bic.w	r2, r2, #1
 800602a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800603a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800604a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800604c:	f000 fd3e 	bl	8006acc <HAL_RCC_GetPCLK1Freq>
 8006050:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	4a7b      	ldr	r2, [pc, #492]	; (8006244 <HAL_I2C_Init+0x25c>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d807      	bhi.n	800606c <HAL_I2C_Init+0x84>
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	4a7a      	ldr	r2, [pc, #488]	; (8006248 <HAL_I2C_Init+0x260>)
 8006060:	4293      	cmp	r3, r2
 8006062:	bf94      	ite	ls
 8006064:	2301      	movls	r3, #1
 8006066:	2300      	movhi	r3, #0
 8006068:	b2db      	uxtb	r3, r3
 800606a:	e006      	b.n	800607a <HAL_I2C_Init+0x92>
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	4a77      	ldr	r2, [pc, #476]	; (800624c <HAL_I2C_Init+0x264>)
 8006070:	4293      	cmp	r3, r2
 8006072:	bf94      	ite	ls
 8006074:	2301      	movls	r3, #1
 8006076:	2300      	movhi	r3, #0
 8006078:	b2db      	uxtb	r3, r3
 800607a:	2b00      	cmp	r3, #0
 800607c:	d001      	beq.n	8006082 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	e0db      	b.n	800623a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	4a72      	ldr	r2, [pc, #456]	; (8006250 <HAL_I2C_Init+0x268>)
 8006086:	fba2 2303 	umull	r2, r3, r2, r3
 800608a:	0c9b      	lsrs	r3, r3, #18
 800608c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	68ba      	ldr	r2, [r7, #8]
 800609e:	430a      	orrs	r2, r1
 80060a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	6a1b      	ldr	r3, [r3, #32]
 80060a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	4a64      	ldr	r2, [pc, #400]	; (8006244 <HAL_I2C_Init+0x25c>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d802      	bhi.n	80060bc <HAL_I2C_Init+0xd4>
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	3301      	adds	r3, #1
 80060ba:	e009      	b.n	80060d0 <HAL_I2C_Init+0xe8>
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80060c2:	fb02 f303 	mul.w	r3, r2, r3
 80060c6:	4a63      	ldr	r2, [pc, #396]	; (8006254 <HAL_I2C_Init+0x26c>)
 80060c8:	fba2 2303 	umull	r2, r3, r2, r3
 80060cc:	099b      	lsrs	r3, r3, #6
 80060ce:	3301      	adds	r3, #1
 80060d0:	687a      	ldr	r2, [r7, #4]
 80060d2:	6812      	ldr	r2, [r2, #0]
 80060d4:	430b      	orrs	r3, r1
 80060d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	69db      	ldr	r3, [r3, #28]
 80060de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80060e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	4956      	ldr	r1, [pc, #344]	; (8006244 <HAL_I2C_Init+0x25c>)
 80060ec:	428b      	cmp	r3, r1
 80060ee:	d80d      	bhi.n	800610c <HAL_I2C_Init+0x124>
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	1e59      	subs	r1, r3, #1
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	005b      	lsls	r3, r3, #1
 80060fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80060fe:	3301      	adds	r3, #1
 8006100:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006104:	2b04      	cmp	r3, #4
 8006106:	bf38      	it	cc
 8006108:	2304      	movcc	r3, #4
 800610a:	e04f      	b.n	80061ac <HAL_I2C_Init+0x1c4>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d111      	bne.n	8006138 <HAL_I2C_Init+0x150>
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	1e58      	subs	r0, r3, #1
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6859      	ldr	r1, [r3, #4]
 800611c:	460b      	mov	r3, r1
 800611e:	005b      	lsls	r3, r3, #1
 8006120:	440b      	add	r3, r1
 8006122:	fbb0 f3f3 	udiv	r3, r0, r3
 8006126:	3301      	adds	r3, #1
 8006128:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800612c:	2b00      	cmp	r3, #0
 800612e:	bf0c      	ite	eq
 8006130:	2301      	moveq	r3, #1
 8006132:	2300      	movne	r3, #0
 8006134:	b2db      	uxtb	r3, r3
 8006136:	e012      	b.n	800615e <HAL_I2C_Init+0x176>
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	1e58      	subs	r0, r3, #1
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6859      	ldr	r1, [r3, #4]
 8006140:	460b      	mov	r3, r1
 8006142:	009b      	lsls	r3, r3, #2
 8006144:	440b      	add	r3, r1
 8006146:	0099      	lsls	r1, r3, #2
 8006148:	440b      	add	r3, r1
 800614a:	fbb0 f3f3 	udiv	r3, r0, r3
 800614e:	3301      	adds	r3, #1
 8006150:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006154:	2b00      	cmp	r3, #0
 8006156:	bf0c      	ite	eq
 8006158:	2301      	moveq	r3, #1
 800615a:	2300      	movne	r3, #0
 800615c:	b2db      	uxtb	r3, r3
 800615e:	2b00      	cmp	r3, #0
 8006160:	d001      	beq.n	8006166 <HAL_I2C_Init+0x17e>
 8006162:	2301      	movs	r3, #1
 8006164:	e022      	b.n	80061ac <HAL_I2C_Init+0x1c4>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d10e      	bne.n	800618c <HAL_I2C_Init+0x1a4>
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	1e58      	subs	r0, r3, #1
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6859      	ldr	r1, [r3, #4]
 8006176:	460b      	mov	r3, r1
 8006178:	005b      	lsls	r3, r3, #1
 800617a:	440b      	add	r3, r1
 800617c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006180:	3301      	adds	r3, #1
 8006182:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006186:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800618a:	e00f      	b.n	80061ac <HAL_I2C_Init+0x1c4>
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	1e58      	subs	r0, r3, #1
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6859      	ldr	r1, [r3, #4]
 8006194:	460b      	mov	r3, r1
 8006196:	009b      	lsls	r3, r3, #2
 8006198:	440b      	add	r3, r1
 800619a:	0099      	lsls	r1, r3, #2
 800619c:	440b      	add	r3, r1
 800619e:	fbb0 f3f3 	udiv	r3, r0, r3
 80061a2:	3301      	adds	r3, #1
 80061a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80061ac:	6879      	ldr	r1, [r7, #4]
 80061ae:	6809      	ldr	r1, [r1, #0]
 80061b0:	4313      	orrs	r3, r2
 80061b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	69da      	ldr	r2, [r3, #28]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6a1b      	ldr	r3, [r3, #32]
 80061c6:	431a      	orrs	r2, r3
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	430a      	orrs	r2, r1
 80061ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	689b      	ldr	r3, [r3, #8]
 80061d6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80061da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	6911      	ldr	r1, [r2, #16]
 80061e2:	687a      	ldr	r2, [r7, #4]
 80061e4:	68d2      	ldr	r2, [r2, #12]
 80061e6:	4311      	orrs	r1, r2
 80061e8:	687a      	ldr	r2, [r7, #4]
 80061ea:	6812      	ldr	r2, [r2, #0]
 80061ec:	430b      	orrs	r3, r1
 80061ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	68db      	ldr	r3, [r3, #12]
 80061f6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	695a      	ldr	r2, [r3, #20]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	699b      	ldr	r3, [r3, #24]
 8006202:	431a      	orrs	r2, r3
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	430a      	orrs	r2, r1
 800620a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	681a      	ldr	r2, [r3, #0]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f042 0201 	orr.w	r2, r2, #1
 800621a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2200      	movs	r2, #0
 8006220:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2220      	movs	r2, #32
 8006226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2200      	movs	r2, #0
 800622e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2200      	movs	r2, #0
 8006234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006238:	2300      	movs	r3, #0
}
 800623a:	4618      	mov	r0, r3
 800623c:	3710      	adds	r7, #16
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}
 8006242:	bf00      	nop
 8006244:	000186a0 	.word	0x000186a0
 8006248:	001e847f 	.word	0x001e847f
 800624c:	003d08ff 	.word	0x003d08ff
 8006250:	431bde83 	.word	0x431bde83
 8006254:	10624dd3 	.word	0x10624dd3

08006258 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b086      	sub	sp, #24
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d101      	bne.n	800626a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006266:	2301      	movs	r3, #1
 8006268:	e25b      	b.n	8006722 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f003 0301 	and.w	r3, r3, #1
 8006272:	2b00      	cmp	r3, #0
 8006274:	d075      	beq.n	8006362 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006276:	4ba3      	ldr	r3, [pc, #652]	; (8006504 <HAL_RCC_OscConfig+0x2ac>)
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	f003 030c 	and.w	r3, r3, #12
 800627e:	2b04      	cmp	r3, #4
 8006280:	d00c      	beq.n	800629c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006282:	4ba0      	ldr	r3, [pc, #640]	; (8006504 <HAL_RCC_OscConfig+0x2ac>)
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800628a:	2b08      	cmp	r3, #8
 800628c:	d112      	bne.n	80062b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800628e:	4b9d      	ldr	r3, [pc, #628]	; (8006504 <HAL_RCC_OscConfig+0x2ac>)
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006296:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800629a:	d10b      	bne.n	80062b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800629c:	4b99      	ldr	r3, [pc, #612]	; (8006504 <HAL_RCC_OscConfig+0x2ac>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d05b      	beq.n	8006360 <HAL_RCC_OscConfig+0x108>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d157      	bne.n	8006360 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80062b0:	2301      	movs	r3, #1
 80062b2:	e236      	b.n	8006722 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062bc:	d106      	bne.n	80062cc <HAL_RCC_OscConfig+0x74>
 80062be:	4b91      	ldr	r3, [pc, #580]	; (8006504 <HAL_RCC_OscConfig+0x2ac>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a90      	ldr	r2, [pc, #576]	; (8006504 <HAL_RCC_OscConfig+0x2ac>)
 80062c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062c8:	6013      	str	r3, [r2, #0]
 80062ca:	e01d      	b.n	8006308 <HAL_RCC_OscConfig+0xb0>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80062d4:	d10c      	bne.n	80062f0 <HAL_RCC_OscConfig+0x98>
 80062d6:	4b8b      	ldr	r3, [pc, #556]	; (8006504 <HAL_RCC_OscConfig+0x2ac>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a8a      	ldr	r2, [pc, #552]	; (8006504 <HAL_RCC_OscConfig+0x2ac>)
 80062dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80062e0:	6013      	str	r3, [r2, #0]
 80062e2:	4b88      	ldr	r3, [pc, #544]	; (8006504 <HAL_RCC_OscConfig+0x2ac>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a87      	ldr	r2, [pc, #540]	; (8006504 <HAL_RCC_OscConfig+0x2ac>)
 80062e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062ec:	6013      	str	r3, [r2, #0]
 80062ee:	e00b      	b.n	8006308 <HAL_RCC_OscConfig+0xb0>
 80062f0:	4b84      	ldr	r3, [pc, #528]	; (8006504 <HAL_RCC_OscConfig+0x2ac>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a83      	ldr	r2, [pc, #524]	; (8006504 <HAL_RCC_OscConfig+0x2ac>)
 80062f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062fa:	6013      	str	r3, [r2, #0]
 80062fc:	4b81      	ldr	r3, [pc, #516]	; (8006504 <HAL_RCC_OscConfig+0x2ac>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a80      	ldr	r2, [pc, #512]	; (8006504 <HAL_RCC_OscConfig+0x2ac>)
 8006302:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006306:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d013      	beq.n	8006338 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006310:	f7fe fc2e 	bl	8004b70 <HAL_GetTick>
 8006314:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006316:	e008      	b.n	800632a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006318:	f7fe fc2a 	bl	8004b70 <HAL_GetTick>
 800631c:	4602      	mov	r2, r0
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	1ad3      	subs	r3, r2, r3
 8006322:	2b64      	cmp	r3, #100	; 0x64
 8006324:	d901      	bls.n	800632a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006326:	2303      	movs	r3, #3
 8006328:	e1fb      	b.n	8006722 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800632a:	4b76      	ldr	r3, [pc, #472]	; (8006504 <HAL_RCC_OscConfig+0x2ac>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006332:	2b00      	cmp	r3, #0
 8006334:	d0f0      	beq.n	8006318 <HAL_RCC_OscConfig+0xc0>
 8006336:	e014      	b.n	8006362 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006338:	f7fe fc1a 	bl	8004b70 <HAL_GetTick>
 800633c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800633e:	e008      	b.n	8006352 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006340:	f7fe fc16 	bl	8004b70 <HAL_GetTick>
 8006344:	4602      	mov	r2, r0
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	1ad3      	subs	r3, r2, r3
 800634a:	2b64      	cmp	r3, #100	; 0x64
 800634c:	d901      	bls.n	8006352 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800634e:	2303      	movs	r3, #3
 8006350:	e1e7      	b.n	8006722 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006352:	4b6c      	ldr	r3, [pc, #432]	; (8006504 <HAL_RCC_OscConfig+0x2ac>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800635a:	2b00      	cmp	r3, #0
 800635c:	d1f0      	bne.n	8006340 <HAL_RCC_OscConfig+0xe8>
 800635e:	e000      	b.n	8006362 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006360:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f003 0302 	and.w	r3, r3, #2
 800636a:	2b00      	cmp	r3, #0
 800636c:	d063      	beq.n	8006436 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800636e:	4b65      	ldr	r3, [pc, #404]	; (8006504 <HAL_RCC_OscConfig+0x2ac>)
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	f003 030c 	and.w	r3, r3, #12
 8006376:	2b00      	cmp	r3, #0
 8006378:	d00b      	beq.n	8006392 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800637a:	4b62      	ldr	r3, [pc, #392]	; (8006504 <HAL_RCC_OscConfig+0x2ac>)
 800637c:	689b      	ldr	r3, [r3, #8]
 800637e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006382:	2b08      	cmp	r3, #8
 8006384:	d11c      	bne.n	80063c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006386:	4b5f      	ldr	r3, [pc, #380]	; (8006504 <HAL_RCC_OscConfig+0x2ac>)
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800638e:	2b00      	cmp	r3, #0
 8006390:	d116      	bne.n	80063c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006392:	4b5c      	ldr	r3, [pc, #368]	; (8006504 <HAL_RCC_OscConfig+0x2ac>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f003 0302 	and.w	r3, r3, #2
 800639a:	2b00      	cmp	r3, #0
 800639c:	d005      	beq.n	80063aa <HAL_RCC_OscConfig+0x152>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	68db      	ldr	r3, [r3, #12]
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d001      	beq.n	80063aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80063a6:	2301      	movs	r3, #1
 80063a8:	e1bb      	b.n	8006722 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063aa:	4b56      	ldr	r3, [pc, #344]	; (8006504 <HAL_RCC_OscConfig+0x2ac>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	691b      	ldr	r3, [r3, #16]
 80063b6:	00db      	lsls	r3, r3, #3
 80063b8:	4952      	ldr	r1, [pc, #328]	; (8006504 <HAL_RCC_OscConfig+0x2ac>)
 80063ba:	4313      	orrs	r3, r2
 80063bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063be:	e03a      	b.n	8006436 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	68db      	ldr	r3, [r3, #12]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d020      	beq.n	800640a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80063c8:	4b4f      	ldr	r3, [pc, #316]	; (8006508 <HAL_RCC_OscConfig+0x2b0>)
 80063ca:	2201      	movs	r2, #1
 80063cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063ce:	f7fe fbcf 	bl	8004b70 <HAL_GetTick>
 80063d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063d4:	e008      	b.n	80063e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80063d6:	f7fe fbcb 	bl	8004b70 <HAL_GetTick>
 80063da:	4602      	mov	r2, r0
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	1ad3      	subs	r3, r2, r3
 80063e0:	2b02      	cmp	r3, #2
 80063e2:	d901      	bls.n	80063e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80063e4:	2303      	movs	r3, #3
 80063e6:	e19c      	b.n	8006722 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063e8:	4b46      	ldr	r3, [pc, #280]	; (8006504 <HAL_RCC_OscConfig+0x2ac>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f003 0302 	and.w	r3, r3, #2
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d0f0      	beq.n	80063d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063f4:	4b43      	ldr	r3, [pc, #268]	; (8006504 <HAL_RCC_OscConfig+0x2ac>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	691b      	ldr	r3, [r3, #16]
 8006400:	00db      	lsls	r3, r3, #3
 8006402:	4940      	ldr	r1, [pc, #256]	; (8006504 <HAL_RCC_OscConfig+0x2ac>)
 8006404:	4313      	orrs	r3, r2
 8006406:	600b      	str	r3, [r1, #0]
 8006408:	e015      	b.n	8006436 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800640a:	4b3f      	ldr	r3, [pc, #252]	; (8006508 <HAL_RCC_OscConfig+0x2b0>)
 800640c:	2200      	movs	r2, #0
 800640e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006410:	f7fe fbae 	bl	8004b70 <HAL_GetTick>
 8006414:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006416:	e008      	b.n	800642a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006418:	f7fe fbaa 	bl	8004b70 <HAL_GetTick>
 800641c:	4602      	mov	r2, r0
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	1ad3      	subs	r3, r2, r3
 8006422:	2b02      	cmp	r3, #2
 8006424:	d901      	bls.n	800642a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006426:	2303      	movs	r3, #3
 8006428:	e17b      	b.n	8006722 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800642a:	4b36      	ldr	r3, [pc, #216]	; (8006504 <HAL_RCC_OscConfig+0x2ac>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f003 0302 	and.w	r3, r3, #2
 8006432:	2b00      	cmp	r3, #0
 8006434:	d1f0      	bne.n	8006418 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f003 0308 	and.w	r3, r3, #8
 800643e:	2b00      	cmp	r3, #0
 8006440:	d030      	beq.n	80064a4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	695b      	ldr	r3, [r3, #20]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d016      	beq.n	8006478 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800644a:	4b30      	ldr	r3, [pc, #192]	; (800650c <HAL_RCC_OscConfig+0x2b4>)
 800644c:	2201      	movs	r2, #1
 800644e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006450:	f7fe fb8e 	bl	8004b70 <HAL_GetTick>
 8006454:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006456:	e008      	b.n	800646a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006458:	f7fe fb8a 	bl	8004b70 <HAL_GetTick>
 800645c:	4602      	mov	r2, r0
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	1ad3      	subs	r3, r2, r3
 8006462:	2b02      	cmp	r3, #2
 8006464:	d901      	bls.n	800646a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006466:	2303      	movs	r3, #3
 8006468:	e15b      	b.n	8006722 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800646a:	4b26      	ldr	r3, [pc, #152]	; (8006504 <HAL_RCC_OscConfig+0x2ac>)
 800646c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800646e:	f003 0302 	and.w	r3, r3, #2
 8006472:	2b00      	cmp	r3, #0
 8006474:	d0f0      	beq.n	8006458 <HAL_RCC_OscConfig+0x200>
 8006476:	e015      	b.n	80064a4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006478:	4b24      	ldr	r3, [pc, #144]	; (800650c <HAL_RCC_OscConfig+0x2b4>)
 800647a:	2200      	movs	r2, #0
 800647c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800647e:	f7fe fb77 	bl	8004b70 <HAL_GetTick>
 8006482:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006484:	e008      	b.n	8006498 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006486:	f7fe fb73 	bl	8004b70 <HAL_GetTick>
 800648a:	4602      	mov	r2, r0
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	1ad3      	subs	r3, r2, r3
 8006490:	2b02      	cmp	r3, #2
 8006492:	d901      	bls.n	8006498 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006494:	2303      	movs	r3, #3
 8006496:	e144      	b.n	8006722 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006498:	4b1a      	ldr	r3, [pc, #104]	; (8006504 <HAL_RCC_OscConfig+0x2ac>)
 800649a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800649c:	f003 0302 	and.w	r3, r3, #2
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d1f0      	bne.n	8006486 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f003 0304 	and.w	r3, r3, #4
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	f000 80a0 	beq.w	80065f2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80064b2:	2300      	movs	r3, #0
 80064b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80064b6:	4b13      	ldr	r3, [pc, #76]	; (8006504 <HAL_RCC_OscConfig+0x2ac>)
 80064b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d10f      	bne.n	80064e2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80064c2:	2300      	movs	r3, #0
 80064c4:	60bb      	str	r3, [r7, #8]
 80064c6:	4b0f      	ldr	r3, [pc, #60]	; (8006504 <HAL_RCC_OscConfig+0x2ac>)
 80064c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ca:	4a0e      	ldr	r2, [pc, #56]	; (8006504 <HAL_RCC_OscConfig+0x2ac>)
 80064cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064d0:	6413      	str	r3, [r2, #64]	; 0x40
 80064d2:	4b0c      	ldr	r3, [pc, #48]	; (8006504 <HAL_RCC_OscConfig+0x2ac>)
 80064d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064da:	60bb      	str	r3, [r7, #8]
 80064dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80064de:	2301      	movs	r3, #1
 80064e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064e2:	4b0b      	ldr	r3, [pc, #44]	; (8006510 <HAL_RCC_OscConfig+0x2b8>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d121      	bne.n	8006532 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80064ee:	4b08      	ldr	r3, [pc, #32]	; (8006510 <HAL_RCC_OscConfig+0x2b8>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a07      	ldr	r2, [pc, #28]	; (8006510 <HAL_RCC_OscConfig+0x2b8>)
 80064f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80064fa:	f7fe fb39 	bl	8004b70 <HAL_GetTick>
 80064fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006500:	e011      	b.n	8006526 <HAL_RCC_OscConfig+0x2ce>
 8006502:	bf00      	nop
 8006504:	40023800 	.word	0x40023800
 8006508:	42470000 	.word	0x42470000
 800650c:	42470e80 	.word	0x42470e80
 8006510:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006514:	f7fe fb2c 	bl	8004b70 <HAL_GetTick>
 8006518:	4602      	mov	r2, r0
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	1ad3      	subs	r3, r2, r3
 800651e:	2b02      	cmp	r3, #2
 8006520:	d901      	bls.n	8006526 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006522:	2303      	movs	r3, #3
 8006524:	e0fd      	b.n	8006722 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006526:	4b81      	ldr	r3, [pc, #516]	; (800672c <HAL_RCC_OscConfig+0x4d4>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800652e:	2b00      	cmp	r3, #0
 8006530:	d0f0      	beq.n	8006514 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	2b01      	cmp	r3, #1
 8006538:	d106      	bne.n	8006548 <HAL_RCC_OscConfig+0x2f0>
 800653a:	4b7d      	ldr	r3, [pc, #500]	; (8006730 <HAL_RCC_OscConfig+0x4d8>)
 800653c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800653e:	4a7c      	ldr	r2, [pc, #496]	; (8006730 <HAL_RCC_OscConfig+0x4d8>)
 8006540:	f043 0301 	orr.w	r3, r3, #1
 8006544:	6713      	str	r3, [r2, #112]	; 0x70
 8006546:	e01c      	b.n	8006582 <HAL_RCC_OscConfig+0x32a>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	689b      	ldr	r3, [r3, #8]
 800654c:	2b05      	cmp	r3, #5
 800654e:	d10c      	bne.n	800656a <HAL_RCC_OscConfig+0x312>
 8006550:	4b77      	ldr	r3, [pc, #476]	; (8006730 <HAL_RCC_OscConfig+0x4d8>)
 8006552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006554:	4a76      	ldr	r2, [pc, #472]	; (8006730 <HAL_RCC_OscConfig+0x4d8>)
 8006556:	f043 0304 	orr.w	r3, r3, #4
 800655a:	6713      	str	r3, [r2, #112]	; 0x70
 800655c:	4b74      	ldr	r3, [pc, #464]	; (8006730 <HAL_RCC_OscConfig+0x4d8>)
 800655e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006560:	4a73      	ldr	r2, [pc, #460]	; (8006730 <HAL_RCC_OscConfig+0x4d8>)
 8006562:	f043 0301 	orr.w	r3, r3, #1
 8006566:	6713      	str	r3, [r2, #112]	; 0x70
 8006568:	e00b      	b.n	8006582 <HAL_RCC_OscConfig+0x32a>
 800656a:	4b71      	ldr	r3, [pc, #452]	; (8006730 <HAL_RCC_OscConfig+0x4d8>)
 800656c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800656e:	4a70      	ldr	r2, [pc, #448]	; (8006730 <HAL_RCC_OscConfig+0x4d8>)
 8006570:	f023 0301 	bic.w	r3, r3, #1
 8006574:	6713      	str	r3, [r2, #112]	; 0x70
 8006576:	4b6e      	ldr	r3, [pc, #440]	; (8006730 <HAL_RCC_OscConfig+0x4d8>)
 8006578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800657a:	4a6d      	ldr	r2, [pc, #436]	; (8006730 <HAL_RCC_OscConfig+0x4d8>)
 800657c:	f023 0304 	bic.w	r3, r3, #4
 8006580:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	689b      	ldr	r3, [r3, #8]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d015      	beq.n	80065b6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800658a:	f7fe faf1 	bl	8004b70 <HAL_GetTick>
 800658e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006590:	e00a      	b.n	80065a8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006592:	f7fe faed 	bl	8004b70 <HAL_GetTick>
 8006596:	4602      	mov	r2, r0
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	1ad3      	subs	r3, r2, r3
 800659c:	f241 3288 	movw	r2, #5000	; 0x1388
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d901      	bls.n	80065a8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80065a4:	2303      	movs	r3, #3
 80065a6:	e0bc      	b.n	8006722 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065a8:	4b61      	ldr	r3, [pc, #388]	; (8006730 <HAL_RCC_OscConfig+0x4d8>)
 80065aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065ac:	f003 0302 	and.w	r3, r3, #2
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d0ee      	beq.n	8006592 <HAL_RCC_OscConfig+0x33a>
 80065b4:	e014      	b.n	80065e0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065b6:	f7fe fadb 	bl	8004b70 <HAL_GetTick>
 80065ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80065bc:	e00a      	b.n	80065d4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80065be:	f7fe fad7 	bl	8004b70 <HAL_GetTick>
 80065c2:	4602      	mov	r2, r0
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	1ad3      	subs	r3, r2, r3
 80065c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d901      	bls.n	80065d4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80065d0:	2303      	movs	r3, #3
 80065d2:	e0a6      	b.n	8006722 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80065d4:	4b56      	ldr	r3, [pc, #344]	; (8006730 <HAL_RCC_OscConfig+0x4d8>)
 80065d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065d8:	f003 0302 	and.w	r3, r3, #2
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d1ee      	bne.n	80065be <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80065e0:	7dfb      	ldrb	r3, [r7, #23]
 80065e2:	2b01      	cmp	r3, #1
 80065e4:	d105      	bne.n	80065f2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80065e6:	4b52      	ldr	r3, [pc, #328]	; (8006730 <HAL_RCC_OscConfig+0x4d8>)
 80065e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ea:	4a51      	ldr	r2, [pc, #324]	; (8006730 <HAL_RCC_OscConfig+0x4d8>)
 80065ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065f0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	699b      	ldr	r3, [r3, #24]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	f000 8092 	beq.w	8006720 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80065fc:	4b4c      	ldr	r3, [pc, #304]	; (8006730 <HAL_RCC_OscConfig+0x4d8>)
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	f003 030c 	and.w	r3, r3, #12
 8006604:	2b08      	cmp	r3, #8
 8006606:	d05c      	beq.n	80066c2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	699b      	ldr	r3, [r3, #24]
 800660c:	2b02      	cmp	r3, #2
 800660e:	d141      	bne.n	8006694 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006610:	4b48      	ldr	r3, [pc, #288]	; (8006734 <HAL_RCC_OscConfig+0x4dc>)
 8006612:	2200      	movs	r2, #0
 8006614:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006616:	f7fe faab 	bl	8004b70 <HAL_GetTick>
 800661a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800661c:	e008      	b.n	8006630 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800661e:	f7fe faa7 	bl	8004b70 <HAL_GetTick>
 8006622:	4602      	mov	r2, r0
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	1ad3      	subs	r3, r2, r3
 8006628:	2b02      	cmp	r3, #2
 800662a:	d901      	bls.n	8006630 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800662c:	2303      	movs	r3, #3
 800662e:	e078      	b.n	8006722 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006630:	4b3f      	ldr	r3, [pc, #252]	; (8006730 <HAL_RCC_OscConfig+0x4d8>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006638:	2b00      	cmp	r3, #0
 800663a:	d1f0      	bne.n	800661e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	69da      	ldr	r2, [r3, #28]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6a1b      	ldr	r3, [r3, #32]
 8006644:	431a      	orrs	r2, r3
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800664a:	019b      	lsls	r3, r3, #6
 800664c:	431a      	orrs	r2, r3
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006652:	085b      	lsrs	r3, r3, #1
 8006654:	3b01      	subs	r3, #1
 8006656:	041b      	lsls	r3, r3, #16
 8006658:	431a      	orrs	r2, r3
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800665e:	061b      	lsls	r3, r3, #24
 8006660:	4933      	ldr	r1, [pc, #204]	; (8006730 <HAL_RCC_OscConfig+0x4d8>)
 8006662:	4313      	orrs	r3, r2
 8006664:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006666:	4b33      	ldr	r3, [pc, #204]	; (8006734 <HAL_RCC_OscConfig+0x4dc>)
 8006668:	2201      	movs	r2, #1
 800666a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800666c:	f7fe fa80 	bl	8004b70 <HAL_GetTick>
 8006670:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006672:	e008      	b.n	8006686 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006674:	f7fe fa7c 	bl	8004b70 <HAL_GetTick>
 8006678:	4602      	mov	r2, r0
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	1ad3      	subs	r3, r2, r3
 800667e:	2b02      	cmp	r3, #2
 8006680:	d901      	bls.n	8006686 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006682:	2303      	movs	r3, #3
 8006684:	e04d      	b.n	8006722 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006686:	4b2a      	ldr	r3, [pc, #168]	; (8006730 <HAL_RCC_OscConfig+0x4d8>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800668e:	2b00      	cmp	r3, #0
 8006690:	d0f0      	beq.n	8006674 <HAL_RCC_OscConfig+0x41c>
 8006692:	e045      	b.n	8006720 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006694:	4b27      	ldr	r3, [pc, #156]	; (8006734 <HAL_RCC_OscConfig+0x4dc>)
 8006696:	2200      	movs	r2, #0
 8006698:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800669a:	f7fe fa69 	bl	8004b70 <HAL_GetTick>
 800669e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066a0:	e008      	b.n	80066b4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066a2:	f7fe fa65 	bl	8004b70 <HAL_GetTick>
 80066a6:	4602      	mov	r2, r0
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	1ad3      	subs	r3, r2, r3
 80066ac:	2b02      	cmp	r3, #2
 80066ae:	d901      	bls.n	80066b4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80066b0:	2303      	movs	r3, #3
 80066b2:	e036      	b.n	8006722 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066b4:	4b1e      	ldr	r3, [pc, #120]	; (8006730 <HAL_RCC_OscConfig+0x4d8>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d1f0      	bne.n	80066a2 <HAL_RCC_OscConfig+0x44a>
 80066c0:	e02e      	b.n	8006720 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	699b      	ldr	r3, [r3, #24]
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d101      	bne.n	80066ce <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80066ca:	2301      	movs	r3, #1
 80066cc:	e029      	b.n	8006722 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80066ce:	4b18      	ldr	r3, [pc, #96]	; (8006730 <HAL_RCC_OscConfig+0x4d8>)
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	69db      	ldr	r3, [r3, #28]
 80066de:	429a      	cmp	r2, r3
 80066e0:	d11c      	bne.n	800671c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066ec:	429a      	cmp	r2, r3
 80066ee:	d115      	bne.n	800671c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80066f0:	68fa      	ldr	r2, [r7, #12]
 80066f2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80066f6:	4013      	ands	r3, r2
 80066f8:	687a      	ldr	r2, [r7, #4]
 80066fa:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d10d      	bne.n	800671c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800670a:	429a      	cmp	r2, r3
 800670c:	d106      	bne.n	800671c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006718:	429a      	cmp	r2, r3
 800671a:	d001      	beq.n	8006720 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800671c:	2301      	movs	r3, #1
 800671e:	e000      	b.n	8006722 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8006720:	2300      	movs	r3, #0
}
 8006722:	4618      	mov	r0, r3
 8006724:	3718      	adds	r7, #24
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}
 800672a:	bf00      	nop
 800672c:	40007000 	.word	0x40007000
 8006730:	40023800 	.word	0x40023800
 8006734:	42470060 	.word	0x42470060

08006738 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b084      	sub	sp, #16
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d101      	bne.n	800674c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006748:	2301      	movs	r3, #1
 800674a:	e0cc      	b.n	80068e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800674c:	4b68      	ldr	r3, [pc, #416]	; (80068f0 <HAL_RCC_ClockConfig+0x1b8>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f003 030f 	and.w	r3, r3, #15
 8006754:	683a      	ldr	r2, [r7, #0]
 8006756:	429a      	cmp	r2, r3
 8006758:	d90c      	bls.n	8006774 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800675a:	4b65      	ldr	r3, [pc, #404]	; (80068f0 <HAL_RCC_ClockConfig+0x1b8>)
 800675c:	683a      	ldr	r2, [r7, #0]
 800675e:	b2d2      	uxtb	r2, r2
 8006760:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006762:	4b63      	ldr	r3, [pc, #396]	; (80068f0 <HAL_RCC_ClockConfig+0x1b8>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f003 030f 	and.w	r3, r3, #15
 800676a:	683a      	ldr	r2, [r7, #0]
 800676c:	429a      	cmp	r2, r3
 800676e:	d001      	beq.n	8006774 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006770:	2301      	movs	r3, #1
 8006772:	e0b8      	b.n	80068e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f003 0302 	and.w	r3, r3, #2
 800677c:	2b00      	cmp	r3, #0
 800677e:	d020      	beq.n	80067c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f003 0304 	and.w	r3, r3, #4
 8006788:	2b00      	cmp	r3, #0
 800678a:	d005      	beq.n	8006798 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800678c:	4b59      	ldr	r3, [pc, #356]	; (80068f4 <HAL_RCC_ClockConfig+0x1bc>)
 800678e:	689b      	ldr	r3, [r3, #8]
 8006790:	4a58      	ldr	r2, [pc, #352]	; (80068f4 <HAL_RCC_ClockConfig+0x1bc>)
 8006792:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006796:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f003 0308 	and.w	r3, r3, #8
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d005      	beq.n	80067b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80067a4:	4b53      	ldr	r3, [pc, #332]	; (80068f4 <HAL_RCC_ClockConfig+0x1bc>)
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	4a52      	ldr	r2, [pc, #328]	; (80068f4 <HAL_RCC_ClockConfig+0x1bc>)
 80067aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80067ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067b0:	4b50      	ldr	r3, [pc, #320]	; (80068f4 <HAL_RCC_ClockConfig+0x1bc>)
 80067b2:	689b      	ldr	r3, [r3, #8]
 80067b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	494d      	ldr	r1, [pc, #308]	; (80068f4 <HAL_RCC_ClockConfig+0x1bc>)
 80067be:	4313      	orrs	r3, r2
 80067c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f003 0301 	and.w	r3, r3, #1
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d044      	beq.n	8006858 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	d107      	bne.n	80067e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067d6:	4b47      	ldr	r3, [pc, #284]	; (80068f4 <HAL_RCC_ClockConfig+0x1bc>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d119      	bne.n	8006816 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067e2:	2301      	movs	r3, #1
 80067e4:	e07f      	b.n	80068e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	2b02      	cmp	r3, #2
 80067ec:	d003      	beq.n	80067f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80067f2:	2b03      	cmp	r3, #3
 80067f4:	d107      	bne.n	8006806 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067f6:	4b3f      	ldr	r3, [pc, #252]	; (80068f4 <HAL_RCC_ClockConfig+0x1bc>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d109      	bne.n	8006816 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006802:	2301      	movs	r3, #1
 8006804:	e06f      	b.n	80068e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006806:	4b3b      	ldr	r3, [pc, #236]	; (80068f4 <HAL_RCC_ClockConfig+0x1bc>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f003 0302 	and.w	r3, r3, #2
 800680e:	2b00      	cmp	r3, #0
 8006810:	d101      	bne.n	8006816 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006812:	2301      	movs	r3, #1
 8006814:	e067      	b.n	80068e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006816:	4b37      	ldr	r3, [pc, #220]	; (80068f4 <HAL_RCC_ClockConfig+0x1bc>)
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	f023 0203 	bic.w	r2, r3, #3
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	4934      	ldr	r1, [pc, #208]	; (80068f4 <HAL_RCC_ClockConfig+0x1bc>)
 8006824:	4313      	orrs	r3, r2
 8006826:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006828:	f7fe f9a2 	bl	8004b70 <HAL_GetTick>
 800682c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800682e:	e00a      	b.n	8006846 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006830:	f7fe f99e 	bl	8004b70 <HAL_GetTick>
 8006834:	4602      	mov	r2, r0
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	1ad3      	subs	r3, r2, r3
 800683a:	f241 3288 	movw	r2, #5000	; 0x1388
 800683e:	4293      	cmp	r3, r2
 8006840:	d901      	bls.n	8006846 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006842:	2303      	movs	r3, #3
 8006844:	e04f      	b.n	80068e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006846:	4b2b      	ldr	r3, [pc, #172]	; (80068f4 <HAL_RCC_ClockConfig+0x1bc>)
 8006848:	689b      	ldr	r3, [r3, #8]
 800684a:	f003 020c 	and.w	r2, r3, #12
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	009b      	lsls	r3, r3, #2
 8006854:	429a      	cmp	r2, r3
 8006856:	d1eb      	bne.n	8006830 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006858:	4b25      	ldr	r3, [pc, #148]	; (80068f0 <HAL_RCC_ClockConfig+0x1b8>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f003 030f 	and.w	r3, r3, #15
 8006860:	683a      	ldr	r2, [r7, #0]
 8006862:	429a      	cmp	r2, r3
 8006864:	d20c      	bcs.n	8006880 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006866:	4b22      	ldr	r3, [pc, #136]	; (80068f0 <HAL_RCC_ClockConfig+0x1b8>)
 8006868:	683a      	ldr	r2, [r7, #0]
 800686a:	b2d2      	uxtb	r2, r2
 800686c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800686e:	4b20      	ldr	r3, [pc, #128]	; (80068f0 <HAL_RCC_ClockConfig+0x1b8>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f003 030f 	and.w	r3, r3, #15
 8006876:	683a      	ldr	r2, [r7, #0]
 8006878:	429a      	cmp	r2, r3
 800687a:	d001      	beq.n	8006880 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800687c:	2301      	movs	r3, #1
 800687e:	e032      	b.n	80068e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f003 0304 	and.w	r3, r3, #4
 8006888:	2b00      	cmp	r3, #0
 800688a:	d008      	beq.n	800689e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800688c:	4b19      	ldr	r3, [pc, #100]	; (80068f4 <HAL_RCC_ClockConfig+0x1bc>)
 800688e:	689b      	ldr	r3, [r3, #8]
 8006890:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	68db      	ldr	r3, [r3, #12]
 8006898:	4916      	ldr	r1, [pc, #88]	; (80068f4 <HAL_RCC_ClockConfig+0x1bc>)
 800689a:	4313      	orrs	r3, r2
 800689c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f003 0308 	and.w	r3, r3, #8
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d009      	beq.n	80068be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80068aa:	4b12      	ldr	r3, [pc, #72]	; (80068f4 <HAL_RCC_ClockConfig+0x1bc>)
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	691b      	ldr	r3, [r3, #16]
 80068b6:	00db      	lsls	r3, r3, #3
 80068b8:	490e      	ldr	r1, [pc, #56]	; (80068f4 <HAL_RCC_ClockConfig+0x1bc>)
 80068ba:	4313      	orrs	r3, r2
 80068bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80068be:	f000 f821 	bl	8006904 <HAL_RCC_GetSysClockFreq>
 80068c2:	4601      	mov	r1, r0
 80068c4:	4b0b      	ldr	r3, [pc, #44]	; (80068f4 <HAL_RCC_ClockConfig+0x1bc>)
 80068c6:	689b      	ldr	r3, [r3, #8]
 80068c8:	091b      	lsrs	r3, r3, #4
 80068ca:	f003 030f 	and.w	r3, r3, #15
 80068ce:	4a0a      	ldr	r2, [pc, #40]	; (80068f8 <HAL_RCC_ClockConfig+0x1c0>)
 80068d0:	5cd3      	ldrb	r3, [r2, r3]
 80068d2:	fa21 f303 	lsr.w	r3, r1, r3
 80068d6:	4a09      	ldr	r2, [pc, #36]	; (80068fc <HAL_RCC_ClockConfig+0x1c4>)
 80068d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80068da:	4b09      	ldr	r3, [pc, #36]	; (8006900 <HAL_RCC_ClockConfig+0x1c8>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4618      	mov	r0, r3
 80068e0:	f7fe f902 	bl	8004ae8 <HAL_InitTick>

  return HAL_OK;
 80068e4:	2300      	movs	r3, #0
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3710      	adds	r7, #16
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}
 80068ee:	bf00      	nop
 80068f0:	40023c00 	.word	0x40023c00
 80068f4:	40023800 	.word	0x40023800
 80068f8:	0800b62c 	.word	0x0800b62c
 80068fc:	20000004 	.word	0x20000004
 8006900:	20000008 	.word	0x20000008

08006904 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006904:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006906:	b085      	sub	sp, #20
 8006908:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800690a:	2300      	movs	r3, #0
 800690c:	607b      	str	r3, [r7, #4]
 800690e:	2300      	movs	r3, #0
 8006910:	60fb      	str	r3, [r7, #12]
 8006912:	2300      	movs	r3, #0
 8006914:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006916:	2300      	movs	r3, #0
 8006918:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800691a:	4b63      	ldr	r3, [pc, #396]	; (8006aa8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	f003 030c 	and.w	r3, r3, #12
 8006922:	2b04      	cmp	r3, #4
 8006924:	d007      	beq.n	8006936 <HAL_RCC_GetSysClockFreq+0x32>
 8006926:	2b08      	cmp	r3, #8
 8006928:	d008      	beq.n	800693c <HAL_RCC_GetSysClockFreq+0x38>
 800692a:	2b00      	cmp	r3, #0
 800692c:	f040 80b4 	bne.w	8006a98 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006930:	4b5e      	ldr	r3, [pc, #376]	; (8006aac <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006932:	60bb      	str	r3, [r7, #8]
       break;
 8006934:	e0b3      	b.n	8006a9e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006936:	4b5e      	ldr	r3, [pc, #376]	; (8006ab0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8006938:	60bb      	str	r3, [r7, #8]
      break;
 800693a:	e0b0      	b.n	8006a9e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800693c:	4b5a      	ldr	r3, [pc, #360]	; (8006aa8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006944:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006946:	4b58      	ldr	r3, [pc, #352]	; (8006aa8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800694e:	2b00      	cmp	r3, #0
 8006950:	d04a      	beq.n	80069e8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006952:	4b55      	ldr	r3, [pc, #340]	; (8006aa8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	099b      	lsrs	r3, r3, #6
 8006958:	f04f 0400 	mov.w	r4, #0
 800695c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006960:	f04f 0200 	mov.w	r2, #0
 8006964:	ea03 0501 	and.w	r5, r3, r1
 8006968:	ea04 0602 	and.w	r6, r4, r2
 800696c:	4629      	mov	r1, r5
 800696e:	4632      	mov	r2, r6
 8006970:	f04f 0300 	mov.w	r3, #0
 8006974:	f04f 0400 	mov.w	r4, #0
 8006978:	0154      	lsls	r4, r2, #5
 800697a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800697e:	014b      	lsls	r3, r1, #5
 8006980:	4619      	mov	r1, r3
 8006982:	4622      	mov	r2, r4
 8006984:	1b49      	subs	r1, r1, r5
 8006986:	eb62 0206 	sbc.w	r2, r2, r6
 800698a:	f04f 0300 	mov.w	r3, #0
 800698e:	f04f 0400 	mov.w	r4, #0
 8006992:	0194      	lsls	r4, r2, #6
 8006994:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006998:	018b      	lsls	r3, r1, #6
 800699a:	1a5b      	subs	r3, r3, r1
 800699c:	eb64 0402 	sbc.w	r4, r4, r2
 80069a0:	f04f 0100 	mov.w	r1, #0
 80069a4:	f04f 0200 	mov.w	r2, #0
 80069a8:	00e2      	lsls	r2, r4, #3
 80069aa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80069ae:	00d9      	lsls	r1, r3, #3
 80069b0:	460b      	mov	r3, r1
 80069b2:	4614      	mov	r4, r2
 80069b4:	195b      	adds	r3, r3, r5
 80069b6:	eb44 0406 	adc.w	r4, r4, r6
 80069ba:	f04f 0100 	mov.w	r1, #0
 80069be:	f04f 0200 	mov.w	r2, #0
 80069c2:	0262      	lsls	r2, r4, #9
 80069c4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80069c8:	0259      	lsls	r1, r3, #9
 80069ca:	460b      	mov	r3, r1
 80069cc:	4614      	mov	r4, r2
 80069ce:	4618      	mov	r0, r3
 80069d0:	4621      	mov	r1, r4
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f04f 0400 	mov.w	r4, #0
 80069d8:	461a      	mov	r2, r3
 80069da:	4623      	mov	r3, r4
 80069dc:	f7fa f934 	bl	8000c48 <__aeabi_uldivmod>
 80069e0:	4603      	mov	r3, r0
 80069e2:	460c      	mov	r4, r1
 80069e4:	60fb      	str	r3, [r7, #12]
 80069e6:	e049      	b.n	8006a7c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80069e8:	4b2f      	ldr	r3, [pc, #188]	; (8006aa8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	099b      	lsrs	r3, r3, #6
 80069ee:	f04f 0400 	mov.w	r4, #0
 80069f2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80069f6:	f04f 0200 	mov.w	r2, #0
 80069fa:	ea03 0501 	and.w	r5, r3, r1
 80069fe:	ea04 0602 	and.w	r6, r4, r2
 8006a02:	4629      	mov	r1, r5
 8006a04:	4632      	mov	r2, r6
 8006a06:	f04f 0300 	mov.w	r3, #0
 8006a0a:	f04f 0400 	mov.w	r4, #0
 8006a0e:	0154      	lsls	r4, r2, #5
 8006a10:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006a14:	014b      	lsls	r3, r1, #5
 8006a16:	4619      	mov	r1, r3
 8006a18:	4622      	mov	r2, r4
 8006a1a:	1b49      	subs	r1, r1, r5
 8006a1c:	eb62 0206 	sbc.w	r2, r2, r6
 8006a20:	f04f 0300 	mov.w	r3, #0
 8006a24:	f04f 0400 	mov.w	r4, #0
 8006a28:	0194      	lsls	r4, r2, #6
 8006a2a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006a2e:	018b      	lsls	r3, r1, #6
 8006a30:	1a5b      	subs	r3, r3, r1
 8006a32:	eb64 0402 	sbc.w	r4, r4, r2
 8006a36:	f04f 0100 	mov.w	r1, #0
 8006a3a:	f04f 0200 	mov.w	r2, #0
 8006a3e:	00e2      	lsls	r2, r4, #3
 8006a40:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006a44:	00d9      	lsls	r1, r3, #3
 8006a46:	460b      	mov	r3, r1
 8006a48:	4614      	mov	r4, r2
 8006a4a:	195b      	adds	r3, r3, r5
 8006a4c:	eb44 0406 	adc.w	r4, r4, r6
 8006a50:	f04f 0100 	mov.w	r1, #0
 8006a54:	f04f 0200 	mov.w	r2, #0
 8006a58:	02a2      	lsls	r2, r4, #10
 8006a5a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006a5e:	0299      	lsls	r1, r3, #10
 8006a60:	460b      	mov	r3, r1
 8006a62:	4614      	mov	r4, r2
 8006a64:	4618      	mov	r0, r3
 8006a66:	4621      	mov	r1, r4
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f04f 0400 	mov.w	r4, #0
 8006a6e:	461a      	mov	r2, r3
 8006a70:	4623      	mov	r3, r4
 8006a72:	f7fa f8e9 	bl	8000c48 <__aeabi_uldivmod>
 8006a76:	4603      	mov	r3, r0
 8006a78:	460c      	mov	r4, r1
 8006a7a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006a7c:	4b0a      	ldr	r3, [pc, #40]	; (8006aa8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	0c1b      	lsrs	r3, r3, #16
 8006a82:	f003 0303 	and.w	r3, r3, #3
 8006a86:	3301      	adds	r3, #1
 8006a88:	005b      	lsls	r3, r3, #1
 8006a8a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006a8c:	68fa      	ldr	r2, [r7, #12]
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a94:	60bb      	str	r3, [r7, #8]
      break;
 8006a96:	e002      	b.n	8006a9e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006a98:	4b04      	ldr	r3, [pc, #16]	; (8006aac <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006a9a:	60bb      	str	r3, [r7, #8]
      break;
 8006a9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006a9e:	68bb      	ldr	r3, [r7, #8]
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3714      	adds	r7, #20
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006aa8:	40023800 	.word	0x40023800
 8006aac:	00f42400 	.word	0x00f42400
 8006ab0:	007a1200 	.word	0x007a1200

08006ab4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006ab8:	4b03      	ldr	r3, [pc, #12]	; (8006ac8 <HAL_RCC_GetHCLKFreq+0x14>)
 8006aba:	681b      	ldr	r3, [r3, #0]
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac4:	4770      	bx	lr
 8006ac6:	bf00      	nop
 8006ac8:	20000004 	.word	0x20000004

08006acc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006ad0:	f7ff fff0 	bl	8006ab4 <HAL_RCC_GetHCLKFreq>
 8006ad4:	4601      	mov	r1, r0
 8006ad6:	4b05      	ldr	r3, [pc, #20]	; (8006aec <HAL_RCC_GetPCLK1Freq+0x20>)
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	0a9b      	lsrs	r3, r3, #10
 8006adc:	f003 0307 	and.w	r3, r3, #7
 8006ae0:	4a03      	ldr	r2, [pc, #12]	; (8006af0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ae2:	5cd3      	ldrb	r3, [r2, r3]
 8006ae4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	bd80      	pop	{r7, pc}
 8006aec:	40023800 	.word	0x40023800
 8006af0:	0800b63c 	.word	0x0800b63c

08006af4 <LL_GPIO_SetPinMode>:
{
 8006af4:	b480      	push	{r7}
 8006af6:	b089      	sub	sp, #36	; 0x24
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	60f8      	str	r0, [r7, #12]
 8006afc:	60b9      	str	r1, [r7, #8]
 8006afe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681a      	ldr	r2, [r3, #0]
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	fa93 f3a3 	rbit	r3, r3
 8006b0e:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	fab3 f383 	clz	r3, r3
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	005b      	lsls	r3, r3, #1
 8006b1a:	2103      	movs	r1, #3
 8006b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8006b20:	43db      	mvns	r3, r3
 8006b22:	401a      	ands	r2, r3
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b28:	69fb      	ldr	r3, [r7, #28]
 8006b2a:	fa93 f3a3 	rbit	r3, r3
 8006b2e:	61bb      	str	r3, [r7, #24]
  return result;
 8006b30:	69bb      	ldr	r3, [r7, #24]
 8006b32:	fab3 f383 	clz	r3, r3
 8006b36:	b2db      	uxtb	r3, r3
 8006b38:	005b      	lsls	r3, r3, #1
 8006b3a:	6879      	ldr	r1, [r7, #4]
 8006b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8006b40:	431a      	orrs	r2, r3
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	601a      	str	r2, [r3, #0]
}
 8006b46:	bf00      	nop
 8006b48:	3724      	adds	r7, #36	; 0x24
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b50:	4770      	bx	lr

08006b52 <LL_GPIO_SetPinOutputType>:
{
 8006b52:	b480      	push	{r7}
 8006b54:	b085      	sub	sp, #20
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	60f8      	str	r0, [r7, #12]
 8006b5a:	60b9      	str	r1, [r7, #8]
 8006b5c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	685a      	ldr	r2, [r3, #4]
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	43db      	mvns	r3, r3
 8006b66:	401a      	ands	r2, r3
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	6879      	ldr	r1, [r7, #4]
 8006b6c:	fb01 f303 	mul.w	r3, r1, r3
 8006b70:	431a      	orrs	r2, r3
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	605a      	str	r2, [r3, #4]
}
 8006b76:	bf00      	nop
 8006b78:	3714      	adds	r7, #20
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr

08006b82 <LL_GPIO_SetPinSpeed>:
{
 8006b82:	b480      	push	{r7}
 8006b84:	b089      	sub	sp, #36	; 0x24
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	60f8      	str	r0, [r7, #12]
 8006b8a:	60b9      	str	r1, [r7, #8]
 8006b8c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	689a      	ldr	r2, [r3, #8]
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	fa93 f3a3 	rbit	r3, r3
 8006b9c:	613b      	str	r3, [r7, #16]
  return result;
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	fab3 f383 	clz	r3, r3
 8006ba4:	b2db      	uxtb	r3, r3
 8006ba6:	005b      	lsls	r3, r3, #1
 8006ba8:	2103      	movs	r1, #3
 8006baa:	fa01 f303 	lsl.w	r3, r1, r3
 8006bae:	43db      	mvns	r3, r3
 8006bb0:	401a      	ands	r2, r3
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bb6:	69fb      	ldr	r3, [r7, #28]
 8006bb8:	fa93 f3a3 	rbit	r3, r3
 8006bbc:	61bb      	str	r3, [r7, #24]
  return result;
 8006bbe:	69bb      	ldr	r3, [r7, #24]
 8006bc0:	fab3 f383 	clz	r3, r3
 8006bc4:	b2db      	uxtb	r3, r3
 8006bc6:	005b      	lsls	r3, r3, #1
 8006bc8:	6879      	ldr	r1, [r7, #4]
 8006bca:	fa01 f303 	lsl.w	r3, r1, r3
 8006bce:	431a      	orrs	r2, r3
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	609a      	str	r2, [r3, #8]
}
 8006bd4:	bf00      	nop
 8006bd6:	3724      	adds	r7, #36	; 0x24
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bde:	4770      	bx	lr

08006be0 <LL_GPIO_SetPinPull>:
{
 8006be0:	b480      	push	{r7}
 8006be2:	b089      	sub	sp, #36	; 0x24
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	60f8      	str	r0, [r7, #12]
 8006be8:	60b9      	str	r1, [r7, #8]
 8006bea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	68da      	ldr	r2, [r3, #12]
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	fa93 f3a3 	rbit	r3, r3
 8006bfa:	613b      	str	r3, [r7, #16]
  return result;
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	fab3 f383 	clz	r3, r3
 8006c02:	b2db      	uxtb	r3, r3
 8006c04:	005b      	lsls	r3, r3, #1
 8006c06:	2103      	movs	r1, #3
 8006c08:	fa01 f303 	lsl.w	r3, r1, r3
 8006c0c:	43db      	mvns	r3, r3
 8006c0e:	401a      	ands	r2, r3
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c14:	69fb      	ldr	r3, [r7, #28]
 8006c16:	fa93 f3a3 	rbit	r3, r3
 8006c1a:	61bb      	str	r3, [r7, #24]
  return result;
 8006c1c:	69bb      	ldr	r3, [r7, #24]
 8006c1e:	fab3 f383 	clz	r3, r3
 8006c22:	b2db      	uxtb	r3, r3
 8006c24:	005b      	lsls	r3, r3, #1
 8006c26:	6879      	ldr	r1, [r7, #4]
 8006c28:	fa01 f303 	lsl.w	r3, r1, r3
 8006c2c:	431a      	orrs	r2, r3
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	60da      	str	r2, [r3, #12]
}
 8006c32:	bf00      	nop
 8006c34:	3724      	adds	r7, #36	; 0x24
 8006c36:	46bd      	mov	sp, r7
 8006c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3c:	4770      	bx	lr

08006c3e <LL_GPIO_SetAFPin_0_7>:
{
 8006c3e:	b480      	push	{r7}
 8006c40:	b089      	sub	sp, #36	; 0x24
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	60f8      	str	r0, [r7, #12]
 8006c46:	60b9      	str	r1, [r7, #8]
 8006c48:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	6a1a      	ldr	r2, [r3, #32]
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	fa93 f3a3 	rbit	r3, r3
 8006c58:	613b      	str	r3, [r7, #16]
  return result;
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	fab3 f383 	clz	r3, r3
 8006c60:	b2db      	uxtb	r3, r3
 8006c62:	009b      	lsls	r3, r3, #2
 8006c64:	210f      	movs	r1, #15
 8006c66:	fa01 f303 	lsl.w	r3, r1, r3
 8006c6a:	43db      	mvns	r3, r3
 8006c6c:	401a      	ands	r2, r3
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c72:	69fb      	ldr	r3, [r7, #28]
 8006c74:	fa93 f3a3 	rbit	r3, r3
 8006c78:	61bb      	str	r3, [r7, #24]
  return result;
 8006c7a:	69bb      	ldr	r3, [r7, #24]
 8006c7c:	fab3 f383 	clz	r3, r3
 8006c80:	b2db      	uxtb	r3, r3
 8006c82:	009b      	lsls	r3, r3, #2
 8006c84:	6879      	ldr	r1, [r7, #4]
 8006c86:	fa01 f303 	lsl.w	r3, r1, r3
 8006c8a:	431a      	orrs	r2, r3
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	621a      	str	r2, [r3, #32]
}
 8006c90:	bf00      	nop
 8006c92:	3724      	adds	r7, #36	; 0x24
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr

08006c9c <LL_GPIO_SetAFPin_8_15>:
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b089      	sub	sp, #36	; 0x24
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	60f8      	str	r0, [r7, #12]
 8006ca4:	60b9      	str	r1, [r7, #8]
 8006ca6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	0a1b      	lsrs	r3, r3, #8
 8006cb0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	fa93 f3a3 	rbit	r3, r3
 8006cb8:	613b      	str	r3, [r7, #16]
  return result;
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	fab3 f383 	clz	r3, r3
 8006cc0:	b2db      	uxtb	r3, r3
 8006cc2:	009b      	lsls	r3, r3, #2
 8006cc4:	210f      	movs	r1, #15
 8006cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8006cca:	43db      	mvns	r3, r3
 8006ccc:	401a      	ands	r2, r3
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	0a1b      	lsrs	r3, r3, #8
 8006cd2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cd4:	69fb      	ldr	r3, [r7, #28]
 8006cd6:	fa93 f3a3 	rbit	r3, r3
 8006cda:	61bb      	str	r3, [r7, #24]
  return result;
 8006cdc:	69bb      	ldr	r3, [r7, #24]
 8006cde:	fab3 f383 	clz	r3, r3
 8006ce2:	b2db      	uxtb	r3, r3
 8006ce4:	009b      	lsls	r3, r3, #2
 8006ce6:	6879      	ldr	r1, [r7, #4]
 8006ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8006cec:	431a      	orrs	r2, r3
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	625a      	str	r2, [r3, #36]	; 0x24
}
 8006cf2:	bf00      	nop
 8006cf4:	3724      	adds	r7, #36	; 0x24
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfc:	4770      	bx	lr

08006cfe <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8006cfe:	b580      	push	{r7, lr}
 8006d00:	b088      	sub	sp, #32
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	6078      	str	r0, [r7, #4]
 8006d06:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	fa93 f3a3 	rbit	r3, r3
 8006d1c:	613b      	str	r3, [r7, #16]
  return result;
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	fab3 f383 	clz	r3, r3
 8006d24:	b2db      	uxtb	r3, r3
 8006d26:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8006d28:	e050      	b.n	8006dcc <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	681a      	ldr	r2, [r3, #0]
 8006d2e:	2101      	movs	r1, #1
 8006d30:	69fb      	ldr	r3, [r7, #28]
 8006d32:	fa01 f303 	lsl.w	r3, r1, r3
 8006d36:	4013      	ands	r3, r2
 8006d38:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8006d3a:	69bb      	ldr	r3, [r7, #24]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d042      	beq.n	8006dc6 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	d003      	beq.n	8006d50 <LL_GPIO_Init+0x52>
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	685b      	ldr	r3, [r3, #4]
 8006d4c:	2b02      	cmp	r3, #2
 8006d4e:	d10d      	bne.n	8006d6c <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	689b      	ldr	r3, [r3, #8]
 8006d54:	461a      	mov	r2, r3
 8006d56:	69b9      	ldr	r1, [r7, #24]
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f7ff ff12 	bl	8006b82 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	68db      	ldr	r3, [r3, #12]
 8006d62:	461a      	mov	r2, r3
 8006d64:	69b9      	ldr	r1, [r7, #24]
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f7ff fef3 	bl	8006b52 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	691b      	ldr	r3, [r3, #16]
 8006d70:	461a      	mov	r2, r3
 8006d72:	69b9      	ldr	r1, [r7, #24]
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f7ff ff33 	bl	8006be0 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	2b02      	cmp	r3, #2
 8006d80:	d11a      	bne.n	8006db8 <LL_GPIO_Init+0xba>
 8006d82:	69bb      	ldr	r3, [r7, #24]
 8006d84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	fa93 f3a3 	rbit	r3, r3
 8006d8c:	60bb      	str	r3, [r7, #8]
  return result;
 8006d8e:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8006d90:	fab3 f383 	clz	r3, r3
 8006d94:	b2db      	uxtb	r3, r3
 8006d96:	2b07      	cmp	r3, #7
 8006d98:	d807      	bhi.n	8006daa <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	695b      	ldr	r3, [r3, #20]
 8006d9e:	461a      	mov	r2, r3
 8006da0:	69b9      	ldr	r1, [r7, #24]
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f7ff ff4b 	bl	8006c3e <LL_GPIO_SetAFPin_0_7>
 8006da8:	e006      	b.n	8006db8 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	695b      	ldr	r3, [r3, #20]
 8006dae:	461a      	mov	r2, r3
 8006db0:	69b9      	ldr	r1, [r7, #24]
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f7ff ff72 	bl	8006c9c <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	69b9      	ldr	r1, [r7, #24]
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f7ff fe97 	bl	8006af4 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8006dc6:	69fb      	ldr	r3, [r7, #28]
 8006dc8:	3301      	adds	r3, #1
 8006dca:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	69fb      	ldr	r3, [r7, #28]
 8006dd2:	fa22 f303 	lsr.w	r3, r2, r3
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d1a7      	bne.n	8006d2a <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8006dda:	2300      	movs	r3, #0
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3720      	adds	r7, #32
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}

08006de4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8006de4:	b480      	push	{r7}
 8006de6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8006de8:	4b04      	ldr	r3, [pc, #16]	; (8006dfc <LL_RCC_GetSysClkSource+0x18>)
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	f003 030c 	and.w	r3, r3, #12
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	46bd      	mov	sp, r7
 8006df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df8:	4770      	bx	lr
 8006dfa:	bf00      	nop
 8006dfc:	40023800 	.word	0x40023800

08006e00 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8006e00:	b480      	push	{r7}
 8006e02:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8006e04:	4b04      	ldr	r3, [pc, #16]	; (8006e18 <LL_RCC_GetAHBPrescaler+0x18>)
 8006e06:	689b      	ldr	r3, [r3, #8]
 8006e08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e14:	4770      	bx	lr
 8006e16:	bf00      	nop
 8006e18:	40023800 	.word	0x40023800

08006e1c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8006e20:	4b04      	ldr	r3, [pc, #16]	; (8006e34 <LL_RCC_GetAPB1Prescaler+0x18>)
 8006e22:	689b      	ldr	r3, [r3, #8]
 8006e24:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e30:	4770      	bx	lr
 8006e32:	bf00      	nop
 8006e34:	40023800 	.word	0x40023800

08006e38 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8006e3c:	4b04      	ldr	r3, [pc, #16]	; (8006e50 <LL_RCC_GetAPB2Prescaler+0x18>)
 8006e3e:	689b      	ldr	r3, [r3, #8]
 8006e40:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	46bd      	mov	sp, r7
 8006e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4c:	4770      	bx	lr
 8006e4e:	bf00      	nop
 8006e50:	40023800 	.word	0x40023800

08006e54 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8006e54:	b480      	push	{r7}
 8006e56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8006e58:	4b04      	ldr	r3, [pc, #16]	; (8006e6c <LL_RCC_PLL_GetMainSource+0x18>)
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	46bd      	mov	sp, r7
 8006e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e68:	4770      	bx	lr
 8006e6a:	bf00      	nop
 8006e6c:	40023800 	.word	0x40023800

08006e70 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8006e70:	b480      	push	{r7}
 8006e72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8006e74:	4b04      	ldr	r3, [pc, #16]	; (8006e88 <LL_RCC_PLL_GetN+0x18>)
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	099b      	lsrs	r3, r3, #6
 8006e7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	46bd      	mov	sp, r7
 8006e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e86:	4770      	bx	lr
 8006e88:	40023800 	.word	0x40023800

08006e8c <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8006e90:	4b04      	ldr	r3, [pc, #16]	; (8006ea4 <LL_RCC_PLL_GetP+0x18>)
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea0:	4770      	bx	lr
 8006ea2:	bf00      	nop
 8006ea4:	40023800 	.word	0x40023800

08006ea8 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8006eac:	4b04      	ldr	r3, [pc, #16]	; (8006ec0 <LL_RCC_PLL_GetDivider+0x18>)
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebc:	4770      	bx	lr
 8006ebe:	bf00      	nop
 8006ec0:	40023800 	.word	0x40023800

08006ec4 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b082      	sub	sp, #8
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8006ecc:	f000 f820 	bl	8006f10 <RCC_GetSystemClockFreq>
 8006ed0:	4602      	mov	r2, r0
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4618      	mov	r0, r3
 8006edc:	f000 f83e 	bl	8006f5c <RCC_GetHCLKClockFreq>
 8006ee0:	4602      	mov	r2, r0
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	4618      	mov	r0, r3
 8006eec:	f000 f84c 	bl	8006f88 <RCC_GetPCLK1ClockFreq>
 8006ef0:	4602      	mov	r2, r0
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	4618      	mov	r0, r3
 8006efc:	f000 f858 	bl	8006fb0 <RCC_GetPCLK2ClockFreq>
 8006f00:	4602      	mov	r2, r0
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	60da      	str	r2, [r3, #12]
}
 8006f06:	bf00      	nop
 8006f08:	3708      	adds	r7, #8
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}
	...

08006f10 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b082      	sub	sp, #8
 8006f14:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8006f16:	2300      	movs	r3, #0
 8006f18:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8006f1a:	f7ff ff63 	bl	8006de4 <LL_RCC_GetSysClkSource>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	2b04      	cmp	r3, #4
 8006f22:	d006      	beq.n	8006f32 <RCC_GetSystemClockFreq+0x22>
 8006f24:	2b08      	cmp	r3, #8
 8006f26:	d007      	beq.n	8006f38 <RCC_GetSystemClockFreq+0x28>
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d10a      	bne.n	8006f42 <RCC_GetSystemClockFreq+0x32>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8006f2c:	4b09      	ldr	r3, [pc, #36]	; (8006f54 <RCC_GetSystemClockFreq+0x44>)
 8006f2e:	607b      	str	r3, [r7, #4]
      break;
 8006f30:	e00a      	b.n	8006f48 <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8006f32:	4b09      	ldr	r3, [pc, #36]	; (8006f58 <RCC_GetSystemClockFreq+0x48>)
 8006f34:	607b      	str	r3, [r7, #4]
      break;
 8006f36:	e007      	b.n	8006f48 <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8006f38:	2008      	movs	r0, #8
 8006f3a:	f000 f84d 	bl	8006fd8 <RCC_PLL_GetFreqDomain_SYS>
 8006f3e:	6078      	str	r0, [r7, #4]
      break;
 8006f40:	e002      	b.n	8006f48 <RCC_GetSystemClockFreq+0x38>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8006f42:	4b04      	ldr	r3, [pc, #16]	; (8006f54 <RCC_GetSystemClockFreq+0x44>)
 8006f44:	607b      	str	r3, [r7, #4]
      break;
 8006f46:	bf00      	nop
  }

  return frequency;
 8006f48:	687b      	ldr	r3, [r7, #4]
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	3708      	adds	r7, #8
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}
 8006f52:	bf00      	nop
 8006f54:	00f42400 	.word	0x00f42400
 8006f58:	007a1200 	.word	0x007a1200

08006f5c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b082      	sub	sp, #8
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8006f64:	f7ff ff4c 	bl	8006e00 <LL_RCC_GetAHBPrescaler>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	091b      	lsrs	r3, r3, #4
 8006f6c:	f003 030f 	and.w	r3, r3, #15
 8006f70:	4a04      	ldr	r2, [pc, #16]	; (8006f84 <RCC_GetHCLKClockFreq+0x28>)
 8006f72:	5cd3      	ldrb	r3, [r2, r3]
 8006f74:	461a      	mov	r2, r3
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	40d3      	lsrs	r3, r2
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3708      	adds	r7, #8
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}
 8006f82:	bf00      	nop
 8006f84:	0800b62c 	.word	0x0800b62c

08006f88 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b082      	sub	sp, #8
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8006f90:	f7ff ff44 	bl	8006e1c <LL_RCC_GetAPB1Prescaler>
 8006f94:	4603      	mov	r3, r0
 8006f96:	0a9b      	lsrs	r3, r3, #10
 8006f98:	4a04      	ldr	r2, [pc, #16]	; (8006fac <RCC_GetPCLK1ClockFreq+0x24>)
 8006f9a:	5cd3      	ldrb	r3, [r2, r3]
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	40d3      	lsrs	r3, r2
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3708      	adds	r7, #8
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}
 8006faa:	bf00      	nop
 8006fac:	0800b63c 	.word	0x0800b63c

08006fb0 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b082      	sub	sp, #8
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8006fb8:	f7ff ff3e 	bl	8006e38 <LL_RCC_GetAPB2Prescaler>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	0b5b      	lsrs	r3, r3, #13
 8006fc0:	4a04      	ldr	r2, [pc, #16]	; (8006fd4 <RCC_GetPCLK2ClockFreq+0x24>)
 8006fc2:	5cd3      	ldrb	r3, [r2, r3]
 8006fc4:	461a      	mov	r2, r3
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	40d3      	lsrs	r3, r2
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3708      	adds	r7, #8
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}
 8006fd2:	bf00      	nop
 8006fd4:	0800b63c 	.word	0x0800b63c

08006fd8 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8006fd8:	b590      	push	{r4, r7, lr}
 8006fda:	b087      	sub	sp, #28
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	617b      	str	r3, [r7, #20]
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	60fb      	str	r3, [r7, #12]
 8006fe8:	2300      	movs	r3, #0
 8006fea:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8006fec:	f7ff ff32 	bl	8006e54 <LL_RCC_PLL_GetMainSource>
 8006ff0:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d003      	beq.n	8007000 <RCC_PLL_GetFreqDomain_SYS+0x28>
 8006ff8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ffc:	d003      	beq.n	8007006 <RCC_PLL_GetFreqDomain_SYS+0x2e>
 8006ffe:	e005      	b.n	800700c <RCC_PLL_GetFreqDomain_SYS+0x34>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8007000:	4b12      	ldr	r3, [pc, #72]	; (800704c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8007002:	617b      	str	r3, [r7, #20]
      break;
 8007004:	e005      	b.n	8007012 <RCC_PLL_GetFreqDomain_SYS+0x3a>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8007006:	4b12      	ldr	r3, [pc, #72]	; (8007050 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8007008:	617b      	str	r3, [r7, #20]
      break;
 800700a:	e002      	b.n	8007012 <RCC_PLL_GetFreqDomain_SYS+0x3a>

    default:
      pllinputfreq = HSI_VALUE;
 800700c:	4b0f      	ldr	r3, [pc, #60]	; (800704c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800700e:	617b      	str	r3, [r7, #20]
      break;
 8007010:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2b08      	cmp	r3, #8
 8007016:	d113      	bne.n	8007040 <RCC_PLL_GetFreqDomain_SYS+0x68>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8007018:	f7ff ff46 	bl	8006ea8 <LL_RCC_PLL_GetDivider>
 800701c:	4602      	mov	r2, r0
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	fbb3 f4f2 	udiv	r4, r3, r2
 8007024:	f7ff ff24 	bl	8006e70 <LL_RCC_PLL_GetN>
 8007028:	4603      	mov	r3, r0
 800702a:	fb03 f404 	mul.w	r4, r3, r4
 800702e:	f7ff ff2d 	bl	8006e8c <LL_RCC_PLL_GetP>
 8007032:	4603      	mov	r3, r0
 8007034:	0c1b      	lsrs	r3, r3, #16
 8007036:	3301      	adds	r3, #1
 8007038:	005b      	lsls	r3, r3, #1
 800703a:	fbb4 f3f3 	udiv	r3, r4, r3
 800703e:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8007040:	693b      	ldr	r3, [r7, #16]
}
 8007042:	4618      	mov	r0, r3
 8007044:	371c      	adds	r7, #28
 8007046:	46bd      	mov	sp, r7
 8007048:	bd90      	pop	{r4, r7, pc}
 800704a:	bf00      	nop
 800704c:	00f42400 	.word	0x00f42400
 8007050:	007a1200 	.word	0x007a1200

08007054 <LL_SPI_IsEnabled>:
{
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007064:	2b40      	cmp	r3, #64	; 0x40
 8007066:	d101      	bne.n	800706c <LL_SPI_IsEnabled+0x18>
 8007068:	2301      	movs	r3, #1
 800706a:	e000      	b.n	800706e <LL_SPI_IsEnabled+0x1a>
 800706c:	2300      	movs	r3, #0
}
 800706e:	4618      	mov	r0, r3
 8007070:	370c      	adds	r7, #12
 8007072:	46bd      	mov	sp, r7
 8007074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007078:	4770      	bx	lr

0800707a <LL_SPI_SetCRCPolynomial>:
{
 800707a:	b480      	push	{r7}
 800707c:	b083      	sub	sp, #12
 800707e:	af00      	add	r7, sp, #0
 8007080:	6078      	str	r0, [r7, #4]
 8007082:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	b29b      	uxth	r3, r3
 8007088:	461a      	mov	r2, r3
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	611a      	str	r2, [r3, #16]
}
 800708e:	bf00      	nop
 8007090:	370c      	adds	r7, #12
 8007092:	46bd      	mov	sp, r7
 8007094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007098:	4770      	bx	lr

0800709a <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 800709a:	b580      	push	{r7, lr}
 800709c:	b084      	sub	sp, #16
 800709e:	af00      	add	r7, sp, #0
 80070a0:	6078      	str	r0, [r7, #4]
 80070a2:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80070a4:	2301      	movs	r3, #1
 80070a6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f7ff ffd3 	bl	8007054 <LL_SPI_IsEnabled>
 80070ae:	4603      	mov	r3, r0
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d139      	bne.n	8007128 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80070bc:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 80070c0:	683a      	ldr	r2, [r7, #0]
 80070c2:	6811      	ldr	r1, [r2, #0]
 80070c4:	683a      	ldr	r2, [r7, #0]
 80070c6:	6852      	ldr	r2, [r2, #4]
 80070c8:	4311      	orrs	r1, r2
 80070ca:	683a      	ldr	r2, [r7, #0]
 80070cc:	6892      	ldr	r2, [r2, #8]
 80070ce:	4311      	orrs	r1, r2
 80070d0:	683a      	ldr	r2, [r7, #0]
 80070d2:	68d2      	ldr	r2, [r2, #12]
 80070d4:	4311      	orrs	r1, r2
 80070d6:	683a      	ldr	r2, [r7, #0]
 80070d8:	6912      	ldr	r2, [r2, #16]
 80070da:	4311      	orrs	r1, r2
 80070dc:	683a      	ldr	r2, [r7, #0]
 80070de:	6952      	ldr	r2, [r2, #20]
 80070e0:	4311      	orrs	r1, r2
 80070e2:	683a      	ldr	r2, [r7, #0]
 80070e4:	6992      	ldr	r2, [r2, #24]
 80070e6:	4311      	orrs	r1, r2
 80070e8:	683a      	ldr	r2, [r7, #0]
 80070ea:	69d2      	ldr	r2, [r2, #28]
 80070ec:	4311      	orrs	r1, r2
 80070ee:	683a      	ldr	r2, [r7, #0]
 80070f0:	6a12      	ldr	r2, [r2, #32]
 80070f2:	430a      	orrs	r2, r1
 80070f4:	431a      	orrs	r2, r3
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	f023 0204 	bic.w	r2, r3, #4
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	695b      	ldr	r3, [r3, #20]
 8007106:	0c1b      	lsrs	r3, r3, #16
 8007108:	431a      	orrs	r2, r3
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	6a1b      	ldr	r3, [r3, #32]
 8007112:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007116:	d105      	bne.n	8007124 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800711c:	4619      	mov	r1, r3
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f7ff ffab 	bl	800707a <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8007124:	2300      	movs	r3, #0
 8007126:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	69db      	ldr	r3, [r3, #28]
 800712c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	61da      	str	r2, [r3, #28]
  return status;
 8007134:	7bfb      	ldrb	r3, [r7, #15]
}
 8007136:	4618      	mov	r0, r3
 8007138:	3710      	adds	r7, #16
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}

0800713e <LL_TIM_SetPrescaler>:
{
 800713e:	b480      	push	{r7}
 8007140:	b083      	sub	sp, #12
 8007142:	af00      	add	r7, sp, #0
 8007144:	6078      	str	r0, [r7, #4]
 8007146:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	683a      	ldr	r2, [r7, #0]
 800714c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800714e:	bf00      	nop
 8007150:	370c      	adds	r7, #12
 8007152:	46bd      	mov	sp, r7
 8007154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007158:	4770      	bx	lr

0800715a <LL_TIM_SetAutoReload>:
{
 800715a:	b480      	push	{r7}
 800715c:	b083      	sub	sp, #12
 800715e:	af00      	add	r7, sp, #0
 8007160:	6078      	str	r0, [r7, #4]
 8007162:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	683a      	ldr	r2, [r7, #0]
 8007168:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800716a:	bf00      	nop
 800716c:	370c      	adds	r7, #12
 800716e:	46bd      	mov	sp, r7
 8007170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007174:	4770      	bx	lr

08007176 <LL_TIM_SetRepetitionCounter>:
{
 8007176:	b480      	push	{r7}
 8007178:	b083      	sub	sp, #12
 800717a:	af00      	add	r7, sp, #0
 800717c:	6078      	str	r0, [r7, #4]
 800717e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	683a      	ldr	r2, [r7, #0]
 8007184:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007186:	bf00      	nop
 8007188:	370c      	adds	r7, #12
 800718a:	46bd      	mov	sp, r7
 800718c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007190:	4770      	bx	lr

08007192 <LL_TIM_OC_SetCompareCH1>:
{
 8007192:	b480      	push	{r7}
 8007194:	b083      	sub	sp, #12
 8007196:	af00      	add	r7, sp, #0
 8007198:	6078      	str	r0, [r7, #4]
 800719a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	683a      	ldr	r2, [r7, #0]
 80071a0:	635a      	str	r2, [r3, #52]	; 0x34
}
 80071a2:	bf00      	nop
 80071a4:	370c      	adds	r7, #12
 80071a6:	46bd      	mov	sp, r7
 80071a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ac:	4770      	bx	lr

080071ae <LL_TIM_OC_SetCompareCH2>:
{
 80071ae:	b480      	push	{r7}
 80071b0:	b083      	sub	sp, #12
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	6078      	str	r0, [r7, #4]
 80071b6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	683a      	ldr	r2, [r7, #0]
 80071bc:	639a      	str	r2, [r3, #56]	; 0x38
}
 80071be:	bf00      	nop
 80071c0:	370c      	adds	r7, #12
 80071c2:	46bd      	mov	sp, r7
 80071c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c8:	4770      	bx	lr

080071ca <LL_TIM_OC_SetCompareCH3>:
{
 80071ca:	b480      	push	{r7}
 80071cc:	b083      	sub	sp, #12
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	6078      	str	r0, [r7, #4]
 80071d2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	683a      	ldr	r2, [r7, #0]
 80071d8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80071da:	bf00      	nop
 80071dc:	370c      	adds	r7, #12
 80071de:	46bd      	mov	sp, r7
 80071e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e4:	4770      	bx	lr

080071e6 <LL_TIM_OC_SetCompareCH4>:
{
 80071e6:	b480      	push	{r7}
 80071e8:	b083      	sub	sp, #12
 80071ea:	af00      	add	r7, sp, #0
 80071ec:	6078      	str	r0, [r7, #4]
 80071ee:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	683a      	ldr	r2, [r7, #0]
 80071f4:	641a      	str	r2, [r3, #64]	; 0x40
}
 80071f6:	bf00      	nop
 80071f8:	370c      	adds	r7, #12
 80071fa:	46bd      	mov	sp, r7
 80071fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007200:	4770      	bx	lr

08007202 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8007202:	b480      	push	{r7}
 8007204:	b083      	sub	sp, #12
 8007206:	af00      	add	r7, sp, #0
 8007208:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	695b      	ldr	r3, [r3, #20]
 800720e:	f043 0201 	orr.w	r2, r3, #1
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	615a      	str	r2, [r3, #20]
}
 8007216:	bf00      	nop
 8007218:	370c      	adds	r7, #12
 800721a:	46bd      	mov	sp, r7
 800721c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007220:	4770      	bx	lr
	...

08007224 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b084      	sub	sp, #16
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	4a3d      	ldr	r2, [pc, #244]	; (800732c <LL_TIM_Init+0x108>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d013      	beq.n	8007264 <LL_TIM_Init+0x40>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007242:	d00f      	beq.n	8007264 <LL_TIM_Init+0x40>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	4a3a      	ldr	r2, [pc, #232]	; (8007330 <LL_TIM_Init+0x10c>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d00b      	beq.n	8007264 <LL_TIM_Init+0x40>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	4a39      	ldr	r2, [pc, #228]	; (8007334 <LL_TIM_Init+0x110>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d007      	beq.n	8007264 <LL_TIM_Init+0x40>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	4a38      	ldr	r2, [pc, #224]	; (8007338 <LL_TIM_Init+0x114>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d003      	beq.n	8007264 <LL_TIM_Init+0x40>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	4a37      	ldr	r2, [pc, #220]	; (800733c <LL_TIM_Init+0x118>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d106      	bne.n	8007272 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	4313      	orrs	r3, r2
 8007270:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	4a2d      	ldr	r2, [pc, #180]	; (800732c <LL_TIM_Init+0x108>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d02b      	beq.n	80072d2 <LL_TIM_Init+0xae>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007280:	d027      	beq.n	80072d2 <LL_TIM_Init+0xae>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	4a2a      	ldr	r2, [pc, #168]	; (8007330 <LL_TIM_Init+0x10c>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d023      	beq.n	80072d2 <LL_TIM_Init+0xae>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	4a29      	ldr	r2, [pc, #164]	; (8007334 <LL_TIM_Init+0x110>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d01f      	beq.n	80072d2 <LL_TIM_Init+0xae>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	4a28      	ldr	r2, [pc, #160]	; (8007338 <LL_TIM_Init+0x114>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d01b      	beq.n	80072d2 <LL_TIM_Init+0xae>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	4a27      	ldr	r2, [pc, #156]	; (800733c <LL_TIM_Init+0x118>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d017      	beq.n	80072d2 <LL_TIM_Init+0xae>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	4a26      	ldr	r2, [pc, #152]	; (8007340 <LL_TIM_Init+0x11c>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d013      	beq.n	80072d2 <LL_TIM_Init+0xae>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	4a25      	ldr	r2, [pc, #148]	; (8007344 <LL_TIM_Init+0x120>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d00f      	beq.n	80072d2 <LL_TIM_Init+0xae>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	4a24      	ldr	r2, [pc, #144]	; (8007348 <LL_TIM_Init+0x124>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d00b      	beq.n	80072d2 <LL_TIM_Init+0xae>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	4a23      	ldr	r2, [pc, #140]	; (800734c <LL_TIM_Init+0x128>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d007      	beq.n	80072d2 <LL_TIM_Init+0xae>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	4a22      	ldr	r2, [pc, #136]	; (8007350 <LL_TIM_Init+0x12c>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d003      	beq.n	80072d2 <LL_TIM_Init+0xae>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	4a21      	ldr	r2, [pc, #132]	; (8007354 <LL_TIM_Init+0x130>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d106      	bne.n	80072e0 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	68db      	ldr	r3, [r3, #12]
 80072dc:	4313      	orrs	r3, r2
 80072de:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	68fa      	ldr	r2, [r7, #12]
 80072e4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	689b      	ldr	r3, [r3, #8]
 80072ea:	4619      	mov	r1, r3
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f7ff ff34 	bl	800715a <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	881b      	ldrh	r3, [r3, #0]
 80072f6:	4619      	mov	r1, r3
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f7ff ff20 	bl	800713e <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	4a0a      	ldr	r2, [pc, #40]	; (800732c <LL_TIM_Init+0x108>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d003      	beq.n	800730e <LL_TIM_Init+0xea>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	4a0c      	ldr	r2, [pc, #48]	; (800733c <LL_TIM_Init+0x118>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d105      	bne.n	800731a <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	7c1b      	ldrb	r3, [r3, #16]
 8007312:	4619      	mov	r1, r3
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f7ff ff2e 	bl	8007176 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f7ff ff71 	bl	8007202 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8007320:	2300      	movs	r3, #0
}
 8007322:	4618      	mov	r0, r3
 8007324:	3710      	adds	r7, #16
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}
 800732a:	bf00      	nop
 800732c:	40010000 	.word	0x40010000
 8007330:	40000400 	.word	0x40000400
 8007334:	40000800 	.word	0x40000800
 8007338:	40000c00 	.word	0x40000c00
 800733c:	40010400 	.word	0x40010400
 8007340:	40014000 	.word	0x40014000
 8007344:	40014400 	.word	0x40014400
 8007348:	40014800 	.word	0x40014800
 800734c:	40001800 	.word	0x40001800
 8007350:	40001c00 	.word	0x40001c00
 8007354:	40002000 	.word	0x40002000

08007358 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b086      	sub	sp, #24
 800735c:	af00      	add	r7, sp, #0
 800735e:	60f8      	str	r0, [r7, #12]
 8007360:	60b9      	str	r1, [r7, #8]
 8007362:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8007364:	2301      	movs	r3, #1
 8007366:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	2b10      	cmp	r3, #16
 800736c:	d012      	beq.n	8007394 <LL_TIM_OC_Init+0x3c>
 800736e:	2b10      	cmp	r3, #16
 8007370:	d802      	bhi.n	8007378 <LL_TIM_OC_Init+0x20>
 8007372:	2b01      	cmp	r3, #1
 8007374:	d007      	beq.n	8007386 <LL_TIM_OC_Init+0x2e>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8007376:	e022      	b.n	80073be <LL_TIM_OC_Init+0x66>
  switch (Channel)
 8007378:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800737c:	d011      	beq.n	80073a2 <LL_TIM_OC_Init+0x4a>
 800737e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007382:	d015      	beq.n	80073b0 <LL_TIM_OC_Init+0x58>
      break;
 8007384:	e01b      	b.n	80073be <LL_TIM_OC_Init+0x66>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8007386:	6879      	ldr	r1, [r7, #4]
 8007388:	68f8      	ldr	r0, [r7, #12]
 800738a:	f000 f81d 	bl	80073c8 <OC1Config>
 800738e:	4603      	mov	r3, r0
 8007390:	75fb      	strb	r3, [r7, #23]
      break;
 8007392:	e014      	b.n	80073be <LL_TIM_OC_Init+0x66>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8007394:	6879      	ldr	r1, [r7, #4]
 8007396:	68f8      	ldr	r0, [r7, #12]
 8007398:	f000 f882 	bl	80074a0 <OC2Config>
 800739c:	4603      	mov	r3, r0
 800739e:	75fb      	strb	r3, [r7, #23]
      break;
 80073a0:	e00d      	b.n	80073be <LL_TIM_OC_Init+0x66>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80073a2:	6879      	ldr	r1, [r7, #4]
 80073a4:	68f8      	ldr	r0, [r7, #12]
 80073a6:	f000 f8eb 	bl	8007580 <OC3Config>
 80073aa:	4603      	mov	r3, r0
 80073ac:	75fb      	strb	r3, [r7, #23]
      break;
 80073ae:	e006      	b.n	80073be <LL_TIM_OC_Init+0x66>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80073b0:	6879      	ldr	r1, [r7, #4]
 80073b2:	68f8      	ldr	r0, [r7, #12]
 80073b4:	f000 f954 	bl	8007660 <OC4Config>
 80073b8:	4603      	mov	r3, r0
 80073ba:	75fb      	strb	r3, [r7, #23]
      break;
 80073bc:	bf00      	nop
  }

  return result;
 80073be:	7dfb      	ldrb	r3, [r7, #23]
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3718      	adds	r7, #24
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}

080073c8 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b086      	sub	sp, #24
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
 80073d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6a1b      	ldr	r3, [r3, #32]
 80073d6:	f023 0201 	bic.w	r2, r3, #1
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6a1b      	ldr	r3, [r3, #32]
 80073e2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	685b      	ldr	r3, [r3, #4]
 80073e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	699b      	ldr	r3, [r3, #24]
 80073ee:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	f023 0303 	bic.w	r3, r3, #3
 80073f6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4313      	orrs	r3, r2
 8007404:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	f023 0202 	bic.w	r2, r3, #2
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	691b      	ldr	r3, [r3, #16]
 8007410:	4313      	orrs	r3, r2
 8007412:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	f023 0201 	bic.w	r2, r3, #1
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	4313      	orrs	r3, r2
 8007420:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	4a1c      	ldr	r2, [pc, #112]	; (8007498 <OC1Config+0xd0>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d003      	beq.n	8007432 <OC1Config+0x6a>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	4a1b      	ldr	r2, [pc, #108]	; (800749c <OC1Config+0xd4>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d11e      	bne.n	8007470 <OC1Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	f023 0208 	bic.w	r2, r3, #8
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	695b      	ldr	r3, [r3, #20]
 800743c:	009b      	lsls	r3, r3, #2
 800743e:	4313      	orrs	r3, r2
 8007440:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	f023 0204 	bic.w	r2, r3, #4
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	689b      	ldr	r3, [r3, #8]
 800744c:	009b      	lsls	r3, r3, #2
 800744e:	4313      	orrs	r3, r2
 8007450:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	699b      	ldr	r3, [r3, #24]
 800745c:	4313      	orrs	r3, r2
 800745e:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	69db      	ldr	r3, [r3, #28]
 800746a:	005b      	lsls	r3, r3, #1
 800746c:	4313      	orrs	r3, r2
 800746e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	693a      	ldr	r2, [r7, #16]
 8007474:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	68fa      	ldr	r2, [r7, #12]
 800747a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	68db      	ldr	r3, [r3, #12]
 8007480:	4619      	mov	r1, r3
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f7ff fe85 	bl	8007192 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	697a      	ldr	r2, [r7, #20]
 800748c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800748e:	2300      	movs	r3, #0
}
 8007490:	4618      	mov	r0, r3
 8007492:	3718      	adds	r7, #24
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}
 8007498:	40010000 	.word	0x40010000
 800749c:	40010400 	.word	0x40010400

080074a0 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b086      	sub	sp, #24
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
 80074a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6a1b      	ldr	r3, [r3, #32]
 80074ae:	f023 0210 	bic.w	r2, r3, #16
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6a1b      	ldr	r3, [r3, #32]
 80074ba:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	685b      	ldr	r3, [r3, #4]
 80074c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	699b      	ldr	r3, [r3, #24]
 80074c6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	021b      	lsls	r3, r3, #8
 80074dc:	4313      	orrs	r3, r2
 80074de:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	f023 0220 	bic.w	r2, r3, #32
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	691b      	ldr	r3, [r3, #16]
 80074ea:	011b      	lsls	r3, r3, #4
 80074ec:	4313      	orrs	r3, r2
 80074ee:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	f023 0210 	bic.w	r2, r3, #16
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	011b      	lsls	r3, r3, #4
 80074fc:	4313      	orrs	r3, r2
 80074fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	4a1d      	ldr	r2, [pc, #116]	; (8007578 <OC2Config+0xd8>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d003      	beq.n	8007510 <OC2Config+0x70>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	4a1c      	ldr	r2, [pc, #112]	; (800757c <OC2Config+0xdc>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d11f      	bne.n	8007550 <OC2Config+0xb0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	695b      	ldr	r3, [r3, #20]
 800751a:	019b      	lsls	r3, r3, #6
 800751c:	4313      	orrs	r3, r2
 800751e:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	689b      	ldr	r3, [r3, #8]
 800752a:	019b      	lsls	r3, r3, #6
 800752c:	4313      	orrs	r3, r2
 800752e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	699b      	ldr	r3, [r3, #24]
 800753a:	009b      	lsls	r3, r3, #2
 800753c:	4313      	orrs	r3, r2
 800753e:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	69db      	ldr	r3, [r3, #28]
 800754a:	00db      	lsls	r3, r3, #3
 800754c:	4313      	orrs	r3, r2
 800754e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	693a      	ldr	r2, [r7, #16]
 8007554:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	68fa      	ldr	r2, [r7, #12]
 800755a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	68db      	ldr	r3, [r3, #12]
 8007560:	4619      	mov	r1, r3
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f7ff fe23 	bl	80071ae <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	697a      	ldr	r2, [r7, #20]
 800756c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800756e:	2300      	movs	r3, #0
}
 8007570:	4618      	mov	r0, r3
 8007572:	3718      	adds	r7, #24
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}
 8007578:	40010000 	.word	0x40010000
 800757c:	40010400 	.word	0x40010400

08007580 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b086      	sub	sp, #24
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
 8007588:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6a1b      	ldr	r3, [r3, #32]
 800758e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6a1b      	ldr	r3, [r3, #32]
 800759a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	685b      	ldr	r3, [r3, #4]
 80075a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	69db      	ldr	r3, [r3, #28]
 80075a6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f023 0303 	bic.w	r3, r3, #3
 80075ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4313      	orrs	r3, r2
 80075bc:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	691b      	ldr	r3, [r3, #16]
 80075c8:	021b      	lsls	r3, r3, #8
 80075ca:	4313      	orrs	r3, r2
 80075cc:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	021b      	lsls	r3, r3, #8
 80075da:	4313      	orrs	r3, r2
 80075dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	4a1d      	ldr	r2, [pc, #116]	; (8007658 <OC3Config+0xd8>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d003      	beq.n	80075ee <OC3Config+0x6e>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	4a1c      	ldr	r2, [pc, #112]	; (800765c <OC3Config+0xdc>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d11f      	bne.n	800762e <OC3Config+0xae>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	695b      	ldr	r3, [r3, #20]
 80075f8:	029b      	lsls	r3, r3, #10
 80075fa:	4313      	orrs	r3, r2
 80075fc:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	689b      	ldr	r3, [r3, #8]
 8007608:	029b      	lsls	r3, r3, #10
 800760a:	4313      	orrs	r3, r2
 800760c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800760e:	693b      	ldr	r3, [r7, #16]
 8007610:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	699b      	ldr	r3, [r3, #24]
 8007618:	011b      	lsls	r3, r3, #4
 800761a:	4313      	orrs	r3, r2
 800761c:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800761e:	693b      	ldr	r3, [r7, #16]
 8007620:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	69db      	ldr	r3, [r3, #28]
 8007628:	015b      	lsls	r3, r3, #5
 800762a:	4313      	orrs	r3, r2
 800762c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	693a      	ldr	r2, [r7, #16]
 8007632:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	68fa      	ldr	r2, [r7, #12]
 8007638:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	68db      	ldr	r3, [r3, #12]
 800763e:	4619      	mov	r1, r3
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f7ff fdc2 	bl	80071ca <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	697a      	ldr	r2, [r7, #20]
 800764a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800764c:	2300      	movs	r3, #0
}
 800764e:	4618      	mov	r0, r3
 8007650:	3718      	adds	r7, #24
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}
 8007656:	bf00      	nop
 8007658:	40010000 	.word	0x40010000
 800765c:	40010400 	.word	0x40010400

08007660 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b086      	sub	sp, #24
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
 8007668:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6a1b      	ldr	r3, [r3, #32]
 800766e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6a1b      	ldr	r3, [r3, #32]
 800767a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	69db      	ldr	r3, [r3, #28]
 8007686:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800768e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	021b      	lsls	r3, r3, #8
 800769c:	4313      	orrs	r3, r2
 800769e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	691b      	ldr	r3, [r3, #16]
 80076aa:	031b      	lsls	r3, r3, #12
 80076ac:	4313      	orrs	r3, r2
 80076ae:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	031b      	lsls	r3, r3, #12
 80076bc:	4313      	orrs	r3, r2
 80076be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	4a11      	ldr	r2, [pc, #68]	; (8007708 <OC4Config+0xa8>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d003      	beq.n	80076d0 <OC4Config+0x70>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	4a10      	ldr	r2, [pc, #64]	; (800770c <OC4Config+0xac>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d107      	bne.n	80076e0 <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	699b      	ldr	r3, [r3, #24]
 80076da:	019b      	lsls	r3, r3, #6
 80076dc:	4313      	orrs	r3, r2
 80076de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	697a      	ldr	r2, [r7, #20]
 80076e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	68fa      	ldr	r2, [r7, #12]
 80076ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	68db      	ldr	r3, [r3, #12]
 80076f0:	4619      	mov	r1, r3
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f7ff fd77 	bl	80071e6 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	693a      	ldr	r2, [r7, #16]
 80076fc:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80076fe:	2300      	movs	r3, #0
}
 8007700:	4618      	mov	r0, r3
 8007702:	3718      	adds	r7, #24
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}
 8007708:	40010000 	.word	0x40010000
 800770c:	40010400 	.word	0x40010400

08007710 <LL_USART_IsEnabled>:
{
 8007710:	b480      	push	{r7}
 8007712:	b083      	sub	sp, #12
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	68db      	ldr	r3, [r3, #12]
 800771c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007720:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007724:	bf0c      	ite	eq
 8007726:	2301      	moveq	r3, #1
 8007728:	2300      	movne	r3, #0
 800772a:	b2db      	uxtb	r3, r3
}
 800772c:	4618      	mov	r0, r3
 800772e:	370c      	adds	r7, #12
 8007730:	46bd      	mov	sp, r7
 8007732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007736:	4770      	bx	lr

08007738 <LL_USART_SetStopBitsLength>:
{
 8007738:	b480      	push	{r7}
 800773a:	b083      	sub	sp, #12
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	691b      	ldr	r3, [r3, #16]
 8007746:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	431a      	orrs	r2, r3
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	611a      	str	r2, [r3, #16]
}
 8007752:	bf00      	nop
 8007754:	370c      	adds	r7, #12
 8007756:	46bd      	mov	sp, r7
 8007758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775c:	4770      	bx	lr

0800775e <LL_USART_SetHWFlowCtrl>:
{
 800775e:	b480      	push	{r7}
 8007760:	b083      	sub	sp, #12
 8007762:	af00      	add	r7, sp, #0
 8007764:	6078      	str	r0, [r7, #4]
 8007766:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	695b      	ldr	r3, [r3, #20]
 800776c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	431a      	orrs	r2, r3
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	615a      	str	r2, [r3, #20]
}
 8007778:	bf00      	nop
 800777a:	370c      	adds	r7, #12
 800777c:	46bd      	mov	sp, r7
 800777e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007782:	4770      	bx	lr

08007784 <LL_USART_SetBaudRate>:
{
 8007784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007788:	b085      	sub	sp, #20
 800778a:	af00      	add	r7, sp, #0
 800778c:	60f8      	str	r0, [r7, #12]
 800778e:	60b9      	str	r1, [r7, #8]
 8007790:	607a      	str	r2, [r7, #4]
 8007792:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800779a:	f040 80c1 	bne.w	8007920 <LL_USART_SetBaudRate+0x19c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	461d      	mov	r5, r3
 80077a2:	f04f 0600 	mov.w	r6, #0
 80077a6:	46a8      	mov	r8, r5
 80077a8:	46b1      	mov	r9, r6
 80077aa:	eb18 0308 	adds.w	r3, r8, r8
 80077ae:	eb49 0409 	adc.w	r4, r9, r9
 80077b2:	4698      	mov	r8, r3
 80077b4:	46a1      	mov	r9, r4
 80077b6:	eb18 0805 	adds.w	r8, r8, r5
 80077ba:	eb49 0906 	adc.w	r9, r9, r6
 80077be:	f04f 0100 	mov.w	r1, #0
 80077c2:	f04f 0200 	mov.w	r2, #0
 80077c6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80077ca:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80077ce:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80077d2:	4688      	mov	r8, r1
 80077d4:	4691      	mov	r9, r2
 80077d6:	eb18 0005 	adds.w	r0, r8, r5
 80077da:	eb49 0106 	adc.w	r1, r9, r6
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	461d      	mov	r5, r3
 80077e2:	f04f 0600 	mov.w	r6, #0
 80077e6:	196b      	adds	r3, r5, r5
 80077e8:	eb46 0406 	adc.w	r4, r6, r6
 80077ec:	461a      	mov	r2, r3
 80077ee:	4623      	mov	r3, r4
 80077f0:	f7f9 fa2a 	bl	8000c48 <__aeabi_uldivmod>
 80077f4:	4603      	mov	r3, r0
 80077f6:	460c      	mov	r4, r1
 80077f8:	461a      	mov	r2, r3
 80077fa:	4bb5      	ldr	r3, [pc, #724]	; (8007ad0 <LL_USART_SetBaudRate+0x34c>)
 80077fc:	fba3 2302 	umull	r2, r3, r3, r2
 8007800:	095b      	lsrs	r3, r3, #5
 8007802:	b29b      	uxth	r3, r3
 8007804:	011b      	lsls	r3, r3, #4
 8007806:	fa1f f883 	uxth.w	r8, r3
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	461d      	mov	r5, r3
 800780e:	f04f 0600 	mov.w	r6, #0
 8007812:	46a9      	mov	r9, r5
 8007814:	46b2      	mov	sl, r6
 8007816:	eb19 0309 	adds.w	r3, r9, r9
 800781a:	eb4a 040a 	adc.w	r4, sl, sl
 800781e:	4699      	mov	r9, r3
 8007820:	46a2      	mov	sl, r4
 8007822:	eb19 0905 	adds.w	r9, r9, r5
 8007826:	eb4a 0a06 	adc.w	sl, sl, r6
 800782a:	f04f 0100 	mov.w	r1, #0
 800782e:	f04f 0200 	mov.w	r2, #0
 8007832:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007836:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800783a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800783e:	4689      	mov	r9, r1
 8007840:	4692      	mov	sl, r2
 8007842:	eb19 0005 	adds.w	r0, r9, r5
 8007846:	eb4a 0106 	adc.w	r1, sl, r6
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	461d      	mov	r5, r3
 800784e:	f04f 0600 	mov.w	r6, #0
 8007852:	196b      	adds	r3, r5, r5
 8007854:	eb46 0406 	adc.w	r4, r6, r6
 8007858:	461a      	mov	r2, r3
 800785a:	4623      	mov	r3, r4
 800785c:	f7f9 f9f4 	bl	8000c48 <__aeabi_uldivmod>
 8007860:	4603      	mov	r3, r0
 8007862:	460c      	mov	r4, r1
 8007864:	461a      	mov	r2, r3
 8007866:	4b9a      	ldr	r3, [pc, #616]	; (8007ad0 <LL_USART_SetBaudRate+0x34c>)
 8007868:	fba3 1302 	umull	r1, r3, r3, r2
 800786c:	095b      	lsrs	r3, r3, #5
 800786e:	2164      	movs	r1, #100	; 0x64
 8007870:	fb01 f303 	mul.w	r3, r1, r3
 8007874:	1ad3      	subs	r3, r2, r3
 8007876:	00db      	lsls	r3, r3, #3
 8007878:	3332      	adds	r3, #50	; 0x32
 800787a:	4a95      	ldr	r2, [pc, #596]	; (8007ad0 <LL_USART_SetBaudRate+0x34c>)
 800787c:	fba2 2303 	umull	r2, r3, r2, r3
 8007880:	095b      	lsrs	r3, r3, #5
 8007882:	b29b      	uxth	r3, r3
 8007884:	005b      	lsls	r3, r3, #1
 8007886:	b29b      	uxth	r3, r3
 8007888:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800788c:	b29b      	uxth	r3, r3
 800788e:	4443      	add	r3, r8
 8007890:	fa1f f883 	uxth.w	r8, r3
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	461d      	mov	r5, r3
 8007898:	f04f 0600 	mov.w	r6, #0
 800789c:	46a9      	mov	r9, r5
 800789e:	46b2      	mov	sl, r6
 80078a0:	eb19 0309 	adds.w	r3, r9, r9
 80078a4:	eb4a 040a 	adc.w	r4, sl, sl
 80078a8:	4699      	mov	r9, r3
 80078aa:	46a2      	mov	sl, r4
 80078ac:	eb19 0905 	adds.w	r9, r9, r5
 80078b0:	eb4a 0a06 	adc.w	sl, sl, r6
 80078b4:	f04f 0100 	mov.w	r1, #0
 80078b8:	f04f 0200 	mov.w	r2, #0
 80078bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80078c0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80078c4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80078c8:	4689      	mov	r9, r1
 80078ca:	4692      	mov	sl, r2
 80078cc:	eb19 0005 	adds.w	r0, r9, r5
 80078d0:	eb4a 0106 	adc.w	r1, sl, r6
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	461d      	mov	r5, r3
 80078d8:	f04f 0600 	mov.w	r6, #0
 80078dc:	196b      	adds	r3, r5, r5
 80078de:	eb46 0406 	adc.w	r4, r6, r6
 80078e2:	461a      	mov	r2, r3
 80078e4:	4623      	mov	r3, r4
 80078e6:	f7f9 f9af 	bl	8000c48 <__aeabi_uldivmod>
 80078ea:	4603      	mov	r3, r0
 80078ec:	460c      	mov	r4, r1
 80078ee:	461a      	mov	r2, r3
 80078f0:	4b77      	ldr	r3, [pc, #476]	; (8007ad0 <LL_USART_SetBaudRate+0x34c>)
 80078f2:	fba3 1302 	umull	r1, r3, r3, r2
 80078f6:	095b      	lsrs	r3, r3, #5
 80078f8:	2164      	movs	r1, #100	; 0x64
 80078fa:	fb01 f303 	mul.w	r3, r1, r3
 80078fe:	1ad3      	subs	r3, r2, r3
 8007900:	00db      	lsls	r3, r3, #3
 8007902:	3332      	adds	r3, #50	; 0x32
 8007904:	4a72      	ldr	r2, [pc, #456]	; (8007ad0 <LL_USART_SetBaudRate+0x34c>)
 8007906:	fba2 2303 	umull	r2, r3, r2, r3
 800790a:	095b      	lsrs	r3, r3, #5
 800790c:	b29b      	uxth	r3, r3
 800790e:	f003 0307 	and.w	r3, r3, #7
 8007912:	b29b      	uxth	r3, r3
 8007914:	4443      	add	r3, r8
 8007916:	b29b      	uxth	r3, r3
 8007918:	461a      	mov	r2, r3
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	609a      	str	r2, [r3, #8]
}
 800791e:	e0d2      	b.n	8007ac6 <LL_USART_SetBaudRate+0x342>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	469a      	mov	sl, r3
 8007924:	f04f 0b00 	mov.w	fp, #0
 8007928:	46d0      	mov	r8, sl
 800792a:	46d9      	mov	r9, fp
 800792c:	eb18 0308 	adds.w	r3, r8, r8
 8007930:	eb49 0409 	adc.w	r4, r9, r9
 8007934:	4698      	mov	r8, r3
 8007936:	46a1      	mov	r9, r4
 8007938:	eb18 080a 	adds.w	r8, r8, sl
 800793c:	eb49 090b 	adc.w	r9, r9, fp
 8007940:	f04f 0100 	mov.w	r1, #0
 8007944:	f04f 0200 	mov.w	r2, #0
 8007948:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800794c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007950:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007954:	4688      	mov	r8, r1
 8007956:	4691      	mov	r9, r2
 8007958:	eb1a 0508 	adds.w	r5, sl, r8
 800795c:	eb4b 0609 	adc.w	r6, fp, r9
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	4619      	mov	r1, r3
 8007964:	f04f 0200 	mov.w	r2, #0
 8007968:	f04f 0300 	mov.w	r3, #0
 800796c:	f04f 0400 	mov.w	r4, #0
 8007970:	0094      	lsls	r4, r2, #2
 8007972:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007976:	008b      	lsls	r3, r1, #2
 8007978:	461a      	mov	r2, r3
 800797a:	4623      	mov	r3, r4
 800797c:	4628      	mov	r0, r5
 800797e:	4631      	mov	r1, r6
 8007980:	f7f9 f962 	bl	8000c48 <__aeabi_uldivmod>
 8007984:	4603      	mov	r3, r0
 8007986:	460c      	mov	r4, r1
 8007988:	461a      	mov	r2, r3
 800798a:	4b51      	ldr	r3, [pc, #324]	; (8007ad0 <LL_USART_SetBaudRate+0x34c>)
 800798c:	fba3 2302 	umull	r2, r3, r3, r2
 8007990:	095b      	lsrs	r3, r3, #5
 8007992:	b29b      	uxth	r3, r3
 8007994:	011b      	lsls	r3, r3, #4
 8007996:	fa1f f883 	uxth.w	r8, r3
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	469b      	mov	fp, r3
 800799e:	f04f 0c00 	mov.w	ip, #0
 80079a2:	46d9      	mov	r9, fp
 80079a4:	46e2      	mov	sl, ip
 80079a6:	eb19 0309 	adds.w	r3, r9, r9
 80079aa:	eb4a 040a 	adc.w	r4, sl, sl
 80079ae:	4699      	mov	r9, r3
 80079b0:	46a2      	mov	sl, r4
 80079b2:	eb19 090b 	adds.w	r9, r9, fp
 80079b6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80079ba:	f04f 0100 	mov.w	r1, #0
 80079be:	f04f 0200 	mov.w	r2, #0
 80079c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80079c6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80079ca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80079ce:	4689      	mov	r9, r1
 80079d0:	4692      	mov	sl, r2
 80079d2:	eb1b 0509 	adds.w	r5, fp, r9
 80079d6:	eb4c 060a 	adc.w	r6, ip, sl
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	4619      	mov	r1, r3
 80079de:	f04f 0200 	mov.w	r2, #0
 80079e2:	f04f 0300 	mov.w	r3, #0
 80079e6:	f04f 0400 	mov.w	r4, #0
 80079ea:	0094      	lsls	r4, r2, #2
 80079ec:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80079f0:	008b      	lsls	r3, r1, #2
 80079f2:	461a      	mov	r2, r3
 80079f4:	4623      	mov	r3, r4
 80079f6:	4628      	mov	r0, r5
 80079f8:	4631      	mov	r1, r6
 80079fa:	f7f9 f925 	bl	8000c48 <__aeabi_uldivmod>
 80079fe:	4603      	mov	r3, r0
 8007a00:	460c      	mov	r4, r1
 8007a02:	461a      	mov	r2, r3
 8007a04:	4b32      	ldr	r3, [pc, #200]	; (8007ad0 <LL_USART_SetBaudRate+0x34c>)
 8007a06:	fba3 1302 	umull	r1, r3, r3, r2
 8007a0a:	095b      	lsrs	r3, r3, #5
 8007a0c:	2164      	movs	r1, #100	; 0x64
 8007a0e:	fb01 f303 	mul.w	r3, r1, r3
 8007a12:	1ad3      	subs	r3, r2, r3
 8007a14:	011b      	lsls	r3, r3, #4
 8007a16:	3332      	adds	r3, #50	; 0x32
 8007a18:	4a2d      	ldr	r2, [pc, #180]	; (8007ad0 <LL_USART_SetBaudRate+0x34c>)
 8007a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8007a1e:	095b      	lsrs	r3, r3, #5
 8007a20:	b29b      	uxth	r3, r3
 8007a22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007a26:	b29b      	uxth	r3, r3
 8007a28:	4443      	add	r3, r8
 8007a2a:	fa1f f883 	uxth.w	r8, r3
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	469b      	mov	fp, r3
 8007a32:	f04f 0c00 	mov.w	ip, #0
 8007a36:	46d9      	mov	r9, fp
 8007a38:	46e2      	mov	sl, ip
 8007a3a:	eb19 0309 	adds.w	r3, r9, r9
 8007a3e:	eb4a 040a 	adc.w	r4, sl, sl
 8007a42:	4699      	mov	r9, r3
 8007a44:	46a2      	mov	sl, r4
 8007a46:	eb19 090b 	adds.w	r9, r9, fp
 8007a4a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007a4e:	f04f 0100 	mov.w	r1, #0
 8007a52:	f04f 0200 	mov.w	r2, #0
 8007a56:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007a5a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007a5e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007a62:	4689      	mov	r9, r1
 8007a64:	4692      	mov	sl, r2
 8007a66:	eb1b 0509 	adds.w	r5, fp, r9
 8007a6a:	eb4c 060a 	adc.w	r6, ip, sl
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	4619      	mov	r1, r3
 8007a72:	f04f 0200 	mov.w	r2, #0
 8007a76:	f04f 0300 	mov.w	r3, #0
 8007a7a:	f04f 0400 	mov.w	r4, #0
 8007a7e:	0094      	lsls	r4, r2, #2
 8007a80:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007a84:	008b      	lsls	r3, r1, #2
 8007a86:	461a      	mov	r2, r3
 8007a88:	4623      	mov	r3, r4
 8007a8a:	4628      	mov	r0, r5
 8007a8c:	4631      	mov	r1, r6
 8007a8e:	f7f9 f8db 	bl	8000c48 <__aeabi_uldivmod>
 8007a92:	4603      	mov	r3, r0
 8007a94:	460c      	mov	r4, r1
 8007a96:	461a      	mov	r2, r3
 8007a98:	4b0d      	ldr	r3, [pc, #52]	; (8007ad0 <LL_USART_SetBaudRate+0x34c>)
 8007a9a:	fba3 1302 	umull	r1, r3, r3, r2
 8007a9e:	095b      	lsrs	r3, r3, #5
 8007aa0:	2164      	movs	r1, #100	; 0x64
 8007aa2:	fb01 f303 	mul.w	r3, r1, r3
 8007aa6:	1ad3      	subs	r3, r2, r3
 8007aa8:	011b      	lsls	r3, r3, #4
 8007aaa:	3332      	adds	r3, #50	; 0x32
 8007aac:	4a08      	ldr	r2, [pc, #32]	; (8007ad0 <LL_USART_SetBaudRate+0x34c>)
 8007aae:	fba2 2303 	umull	r2, r3, r2, r3
 8007ab2:	095b      	lsrs	r3, r3, #5
 8007ab4:	b29b      	uxth	r3, r3
 8007ab6:	f003 030f 	and.w	r3, r3, #15
 8007aba:	b29b      	uxth	r3, r3
 8007abc:	4443      	add	r3, r8
 8007abe:	b29b      	uxth	r3, r3
 8007ac0:	461a      	mov	r2, r3
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	609a      	str	r2, [r3, #8]
}
 8007ac6:	bf00      	nop
 8007ac8:	3714      	adds	r7, #20
 8007aca:	46bd      	mov	sp, r7
 8007acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ad0:	51eb851f 	.word	0x51eb851f

08007ad4 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b088      	sub	sp, #32
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
 8007adc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f7ff fe12 	bl	8007710 <LL_USART_IsEnabled>
 8007aec:	4603      	mov	r3, r0
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d15e      	bne.n	8007bb0 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	68db      	ldr	r3, [r3, #12]
 8007af6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007afa:	f023 030c 	bic.w	r3, r3, #12
 8007afe:	683a      	ldr	r2, [r7, #0]
 8007b00:	6851      	ldr	r1, [r2, #4]
 8007b02:	683a      	ldr	r2, [r7, #0]
 8007b04:	68d2      	ldr	r2, [r2, #12]
 8007b06:	4311      	orrs	r1, r2
 8007b08:	683a      	ldr	r2, [r7, #0]
 8007b0a:	6912      	ldr	r2, [r2, #16]
 8007b0c:	4311      	orrs	r1, r2
 8007b0e:	683a      	ldr	r2, [r7, #0]
 8007b10:	6992      	ldr	r2, [r2, #24]
 8007b12:	430a      	orrs	r2, r1
 8007b14:	431a      	orrs	r2, r3
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	689b      	ldr	r3, [r3, #8]
 8007b1e:	4619      	mov	r1, r3
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f7ff fe09 	bl	8007738 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	695b      	ldr	r3, [r3, #20]
 8007b2a:	4619      	mov	r1, r3
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f7ff fe16 	bl	800775e <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8007b32:	f107 0308 	add.w	r3, r7, #8
 8007b36:	4618      	mov	r0, r3
 8007b38:	f7ff f9c4 	bl	8006ec4 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	4a1f      	ldr	r2, [pc, #124]	; (8007bbc <LL_USART_Init+0xe8>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d102      	bne.n	8007b4a <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8007b44:	697b      	ldr	r3, [r7, #20]
 8007b46:	61bb      	str	r3, [r7, #24]
 8007b48:	e021      	b.n	8007b8e <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	4a1c      	ldr	r2, [pc, #112]	; (8007bc0 <LL_USART_Init+0xec>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d102      	bne.n	8007b58 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8007b52:	693b      	ldr	r3, [r7, #16]
 8007b54:	61bb      	str	r3, [r7, #24]
 8007b56:	e01a      	b.n	8007b8e <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	4a1a      	ldr	r2, [pc, #104]	; (8007bc4 <LL_USART_Init+0xf0>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d102      	bne.n	8007b66 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	61bb      	str	r3, [r7, #24]
 8007b64:	e013      	b.n	8007b8e <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	4a17      	ldr	r2, [pc, #92]	; (8007bc8 <LL_USART_Init+0xf4>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d102      	bne.n	8007b74 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	61bb      	str	r3, [r7, #24]
 8007b72:	e00c      	b.n	8007b8e <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	4a15      	ldr	r2, [pc, #84]	; (8007bcc <LL_USART_Init+0xf8>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d102      	bne.n	8007b82 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8007b7c:	693b      	ldr	r3, [r7, #16]
 8007b7e:	61bb      	str	r3, [r7, #24]
 8007b80:	e005      	b.n	8007b8e <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	4a12      	ldr	r2, [pc, #72]	; (8007bd0 <LL_USART_Init+0xfc>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d101      	bne.n	8007b8e <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8007b8a:	693b      	ldr	r3, [r7, #16]
 8007b8c:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8007b8e:	69bb      	ldr	r3, [r7, #24]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d00d      	beq.n	8007bb0 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d009      	beq.n	8007bb0 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	699a      	ldr	r2, [r3, #24]
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	69b9      	ldr	r1, [r7, #24]
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f7ff fdea 	bl	8007784 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8007bb0:	7ffb      	ldrb	r3, [r7, #31]
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	3720      	adds	r7, #32
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}
 8007bba:	bf00      	nop
 8007bbc:	40011000 	.word	0x40011000
 8007bc0:	40004400 	.word	0x40004400
 8007bc4:	40004800 	.word	0x40004800
 8007bc8:	40011400 	.word	0x40011400
 8007bcc:	40004c00 	.word	0x40004c00
 8007bd0:	40005000 	.word	0x40005000

08007bd4 <__errno>:
 8007bd4:	4b01      	ldr	r3, [pc, #4]	; (8007bdc <__errno+0x8>)
 8007bd6:	6818      	ldr	r0, [r3, #0]
 8007bd8:	4770      	bx	lr
 8007bda:	bf00      	nop
 8007bdc:	20000010 	.word	0x20000010

08007be0 <__libc_init_array>:
 8007be0:	b570      	push	{r4, r5, r6, lr}
 8007be2:	4e0d      	ldr	r6, [pc, #52]	; (8007c18 <__libc_init_array+0x38>)
 8007be4:	4c0d      	ldr	r4, [pc, #52]	; (8007c1c <__libc_init_array+0x3c>)
 8007be6:	1ba4      	subs	r4, r4, r6
 8007be8:	10a4      	asrs	r4, r4, #2
 8007bea:	2500      	movs	r5, #0
 8007bec:	42a5      	cmp	r5, r4
 8007bee:	d109      	bne.n	8007c04 <__libc_init_array+0x24>
 8007bf0:	4e0b      	ldr	r6, [pc, #44]	; (8007c20 <__libc_init_array+0x40>)
 8007bf2:	4c0c      	ldr	r4, [pc, #48]	; (8007c24 <__libc_init_array+0x44>)
 8007bf4:	f003 fb7e 	bl	800b2f4 <_init>
 8007bf8:	1ba4      	subs	r4, r4, r6
 8007bfa:	10a4      	asrs	r4, r4, #2
 8007bfc:	2500      	movs	r5, #0
 8007bfe:	42a5      	cmp	r5, r4
 8007c00:	d105      	bne.n	8007c0e <__libc_init_array+0x2e>
 8007c02:	bd70      	pop	{r4, r5, r6, pc}
 8007c04:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007c08:	4798      	blx	r3
 8007c0a:	3501      	adds	r5, #1
 8007c0c:	e7ee      	b.n	8007bec <__libc_init_array+0xc>
 8007c0e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007c12:	4798      	blx	r3
 8007c14:	3501      	adds	r5, #1
 8007c16:	e7f2      	b.n	8007bfe <__libc_init_array+0x1e>
 8007c18:	0800b96c 	.word	0x0800b96c
 8007c1c:	0800b96c 	.word	0x0800b96c
 8007c20:	0800b96c 	.word	0x0800b96c
 8007c24:	0800b970 	.word	0x0800b970

08007c28 <memset>:
 8007c28:	4402      	add	r2, r0
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d100      	bne.n	8007c32 <memset+0xa>
 8007c30:	4770      	bx	lr
 8007c32:	f803 1b01 	strb.w	r1, [r3], #1
 8007c36:	e7f9      	b.n	8007c2c <memset+0x4>

08007c38 <__cvt>:
 8007c38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c3c:	ec55 4b10 	vmov	r4, r5, d0
 8007c40:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8007c42:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007c46:	2d00      	cmp	r5, #0
 8007c48:	460e      	mov	r6, r1
 8007c4a:	4691      	mov	r9, r2
 8007c4c:	4619      	mov	r1, r3
 8007c4e:	bfb8      	it	lt
 8007c50:	4622      	movlt	r2, r4
 8007c52:	462b      	mov	r3, r5
 8007c54:	f027 0720 	bic.w	r7, r7, #32
 8007c58:	bfbb      	ittet	lt
 8007c5a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007c5e:	461d      	movlt	r5, r3
 8007c60:	2300      	movge	r3, #0
 8007c62:	232d      	movlt	r3, #45	; 0x2d
 8007c64:	bfb8      	it	lt
 8007c66:	4614      	movlt	r4, r2
 8007c68:	2f46      	cmp	r7, #70	; 0x46
 8007c6a:	700b      	strb	r3, [r1, #0]
 8007c6c:	d004      	beq.n	8007c78 <__cvt+0x40>
 8007c6e:	2f45      	cmp	r7, #69	; 0x45
 8007c70:	d100      	bne.n	8007c74 <__cvt+0x3c>
 8007c72:	3601      	adds	r6, #1
 8007c74:	2102      	movs	r1, #2
 8007c76:	e000      	b.n	8007c7a <__cvt+0x42>
 8007c78:	2103      	movs	r1, #3
 8007c7a:	ab03      	add	r3, sp, #12
 8007c7c:	9301      	str	r3, [sp, #4]
 8007c7e:	ab02      	add	r3, sp, #8
 8007c80:	9300      	str	r3, [sp, #0]
 8007c82:	4632      	mov	r2, r6
 8007c84:	4653      	mov	r3, sl
 8007c86:	ec45 4b10 	vmov	d0, r4, r5
 8007c8a:	f000 fdf9 	bl	8008880 <_dtoa_r>
 8007c8e:	2f47      	cmp	r7, #71	; 0x47
 8007c90:	4680      	mov	r8, r0
 8007c92:	d102      	bne.n	8007c9a <__cvt+0x62>
 8007c94:	f019 0f01 	tst.w	r9, #1
 8007c98:	d026      	beq.n	8007ce8 <__cvt+0xb0>
 8007c9a:	2f46      	cmp	r7, #70	; 0x46
 8007c9c:	eb08 0906 	add.w	r9, r8, r6
 8007ca0:	d111      	bne.n	8007cc6 <__cvt+0x8e>
 8007ca2:	f898 3000 	ldrb.w	r3, [r8]
 8007ca6:	2b30      	cmp	r3, #48	; 0x30
 8007ca8:	d10a      	bne.n	8007cc0 <__cvt+0x88>
 8007caa:	2200      	movs	r2, #0
 8007cac:	2300      	movs	r3, #0
 8007cae:	4620      	mov	r0, r4
 8007cb0:	4629      	mov	r1, r5
 8007cb2:	f7f8 ff09 	bl	8000ac8 <__aeabi_dcmpeq>
 8007cb6:	b918      	cbnz	r0, 8007cc0 <__cvt+0x88>
 8007cb8:	f1c6 0601 	rsb	r6, r6, #1
 8007cbc:	f8ca 6000 	str.w	r6, [sl]
 8007cc0:	f8da 3000 	ldr.w	r3, [sl]
 8007cc4:	4499      	add	r9, r3
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	2300      	movs	r3, #0
 8007cca:	4620      	mov	r0, r4
 8007ccc:	4629      	mov	r1, r5
 8007cce:	f7f8 fefb 	bl	8000ac8 <__aeabi_dcmpeq>
 8007cd2:	b938      	cbnz	r0, 8007ce4 <__cvt+0xac>
 8007cd4:	2230      	movs	r2, #48	; 0x30
 8007cd6:	9b03      	ldr	r3, [sp, #12]
 8007cd8:	454b      	cmp	r3, r9
 8007cda:	d205      	bcs.n	8007ce8 <__cvt+0xb0>
 8007cdc:	1c59      	adds	r1, r3, #1
 8007cde:	9103      	str	r1, [sp, #12]
 8007ce0:	701a      	strb	r2, [r3, #0]
 8007ce2:	e7f8      	b.n	8007cd6 <__cvt+0x9e>
 8007ce4:	f8cd 900c 	str.w	r9, [sp, #12]
 8007ce8:	9b03      	ldr	r3, [sp, #12]
 8007cea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007cec:	eba3 0308 	sub.w	r3, r3, r8
 8007cf0:	4640      	mov	r0, r8
 8007cf2:	6013      	str	r3, [r2, #0]
 8007cf4:	b004      	add	sp, #16
 8007cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007cfa <__exponent>:
 8007cfa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007cfc:	2900      	cmp	r1, #0
 8007cfe:	4604      	mov	r4, r0
 8007d00:	bfba      	itte	lt
 8007d02:	4249      	neglt	r1, r1
 8007d04:	232d      	movlt	r3, #45	; 0x2d
 8007d06:	232b      	movge	r3, #43	; 0x2b
 8007d08:	2909      	cmp	r1, #9
 8007d0a:	f804 2b02 	strb.w	r2, [r4], #2
 8007d0e:	7043      	strb	r3, [r0, #1]
 8007d10:	dd20      	ble.n	8007d54 <__exponent+0x5a>
 8007d12:	f10d 0307 	add.w	r3, sp, #7
 8007d16:	461f      	mov	r7, r3
 8007d18:	260a      	movs	r6, #10
 8007d1a:	fb91 f5f6 	sdiv	r5, r1, r6
 8007d1e:	fb06 1115 	mls	r1, r6, r5, r1
 8007d22:	3130      	adds	r1, #48	; 0x30
 8007d24:	2d09      	cmp	r5, #9
 8007d26:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007d2a:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8007d2e:	4629      	mov	r1, r5
 8007d30:	dc09      	bgt.n	8007d46 <__exponent+0x4c>
 8007d32:	3130      	adds	r1, #48	; 0x30
 8007d34:	3b02      	subs	r3, #2
 8007d36:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007d3a:	42bb      	cmp	r3, r7
 8007d3c:	4622      	mov	r2, r4
 8007d3e:	d304      	bcc.n	8007d4a <__exponent+0x50>
 8007d40:	1a10      	subs	r0, r2, r0
 8007d42:	b003      	add	sp, #12
 8007d44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d46:	4613      	mov	r3, r2
 8007d48:	e7e7      	b.n	8007d1a <__exponent+0x20>
 8007d4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d4e:	f804 2b01 	strb.w	r2, [r4], #1
 8007d52:	e7f2      	b.n	8007d3a <__exponent+0x40>
 8007d54:	2330      	movs	r3, #48	; 0x30
 8007d56:	4419      	add	r1, r3
 8007d58:	7083      	strb	r3, [r0, #2]
 8007d5a:	1d02      	adds	r2, r0, #4
 8007d5c:	70c1      	strb	r1, [r0, #3]
 8007d5e:	e7ef      	b.n	8007d40 <__exponent+0x46>

08007d60 <_printf_float>:
 8007d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d64:	b08d      	sub	sp, #52	; 0x34
 8007d66:	460c      	mov	r4, r1
 8007d68:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8007d6c:	4616      	mov	r6, r2
 8007d6e:	461f      	mov	r7, r3
 8007d70:	4605      	mov	r5, r0
 8007d72:	f001 fcb7 	bl	80096e4 <_localeconv_r>
 8007d76:	6803      	ldr	r3, [r0, #0]
 8007d78:	9304      	str	r3, [sp, #16]
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f7f8 fa28 	bl	80001d0 <strlen>
 8007d80:	2300      	movs	r3, #0
 8007d82:	930a      	str	r3, [sp, #40]	; 0x28
 8007d84:	f8d8 3000 	ldr.w	r3, [r8]
 8007d88:	9005      	str	r0, [sp, #20]
 8007d8a:	3307      	adds	r3, #7
 8007d8c:	f023 0307 	bic.w	r3, r3, #7
 8007d90:	f103 0208 	add.w	r2, r3, #8
 8007d94:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007d98:	f8d4 b000 	ldr.w	fp, [r4]
 8007d9c:	f8c8 2000 	str.w	r2, [r8]
 8007da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007da4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007da8:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007dac:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007db0:	9307      	str	r3, [sp, #28]
 8007db2:	f8cd 8018 	str.w	r8, [sp, #24]
 8007db6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007dba:	4ba7      	ldr	r3, [pc, #668]	; (8008058 <_printf_float+0x2f8>)
 8007dbc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007dc0:	f7f8 feb4 	bl	8000b2c <__aeabi_dcmpun>
 8007dc4:	bb70      	cbnz	r0, 8007e24 <_printf_float+0xc4>
 8007dc6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007dca:	4ba3      	ldr	r3, [pc, #652]	; (8008058 <_printf_float+0x2f8>)
 8007dcc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007dd0:	f7f8 fe8e 	bl	8000af0 <__aeabi_dcmple>
 8007dd4:	bb30      	cbnz	r0, 8007e24 <_printf_float+0xc4>
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	2300      	movs	r3, #0
 8007dda:	4640      	mov	r0, r8
 8007ddc:	4649      	mov	r1, r9
 8007dde:	f7f8 fe7d 	bl	8000adc <__aeabi_dcmplt>
 8007de2:	b110      	cbz	r0, 8007dea <_printf_float+0x8a>
 8007de4:	232d      	movs	r3, #45	; 0x2d
 8007de6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007dea:	4a9c      	ldr	r2, [pc, #624]	; (800805c <_printf_float+0x2fc>)
 8007dec:	4b9c      	ldr	r3, [pc, #624]	; (8008060 <_printf_float+0x300>)
 8007dee:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007df2:	bf8c      	ite	hi
 8007df4:	4690      	movhi	r8, r2
 8007df6:	4698      	movls	r8, r3
 8007df8:	2303      	movs	r3, #3
 8007dfa:	f02b 0204 	bic.w	r2, fp, #4
 8007dfe:	6123      	str	r3, [r4, #16]
 8007e00:	6022      	str	r2, [r4, #0]
 8007e02:	f04f 0900 	mov.w	r9, #0
 8007e06:	9700      	str	r7, [sp, #0]
 8007e08:	4633      	mov	r3, r6
 8007e0a:	aa0b      	add	r2, sp, #44	; 0x2c
 8007e0c:	4621      	mov	r1, r4
 8007e0e:	4628      	mov	r0, r5
 8007e10:	f000 f9e6 	bl	80081e0 <_printf_common>
 8007e14:	3001      	adds	r0, #1
 8007e16:	f040 808d 	bne.w	8007f34 <_printf_float+0x1d4>
 8007e1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e1e:	b00d      	add	sp, #52	; 0x34
 8007e20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e24:	4642      	mov	r2, r8
 8007e26:	464b      	mov	r3, r9
 8007e28:	4640      	mov	r0, r8
 8007e2a:	4649      	mov	r1, r9
 8007e2c:	f7f8 fe7e 	bl	8000b2c <__aeabi_dcmpun>
 8007e30:	b110      	cbz	r0, 8007e38 <_printf_float+0xd8>
 8007e32:	4a8c      	ldr	r2, [pc, #560]	; (8008064 <_printf_float+0x304>)
 8007e34:	4b8c      	ldr	r3, [pc, #560]	; (8008068 <_printf_float+0x308>)
 8007e36:	e7da      	b.n	8007dee <_printf_float+0x8e>
 8007e38:	6861      	ldr	r1, [r4, #4]
 8007e3a:	1c4b      	adds	r3, r1, #1
 8007e3c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8007e40:	a80a      	add	r0, sp, #40	; 0x28
 8007e42:	d13e      	bne.n	8007ec2 <_printf_float+0x162>
 8007e44:	2306      	movs	r3, #6
 8007e46:	6063      	str	r3, [r4, #4]
 8007e48:	2300      	movs	r3, #0
 8007e4a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007e4e:	ab09      	add	r3, sp, #36	; 0x24
 8007e50:	9300      	str	r3, [sp, #0]
 8007e52:	ec49 8b10 	vmov	d0, r8, r9
 8007e56:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007e5a:	6022      	str	r2, [r4, #0]
 8007e5c:	f8cd a004 	str.w	sl, [sp, #4]
 8007e60:	6861      	ldr	r1, [r4, #4]
 8007e62:	4628      	mov	r0, r5
 8007e64:	f7ff fee8 	bl	8007c38 <__cvt>
 8007e68:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8007e6c:	2b47      	cmp	r3, #71	; 0x47
 8007e6e:	4680      	mov	r8, r0
 8007e70:	d109      	bne.n	8007e86 <_printf_float+0x126>
 8007e72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e74:	1cd8      	adds	r0, r3, #3
 8007e76:	db02      	blt.n	8007e7e <_printf_float+0x11e>
 8007e78:	6862      	ldr	r2, [r4, #4]
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	dd47      	ble.n	8007f0e <_printf_float+0x1ae>
 8007e7e:	f1aa 0a02 	sub.w	sl, sl, #2
 8007e82:	fa5f fa8a 	uxtb.w	sl, sl
 8007e86:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007e8a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007e8c:	d824      	bhi.n	8007ed8 <_printf_float+0x178>
 8007e8e:	3901      	subs	r1, #1
 8007e90:	4652      	mov	r2, sl
 8007e92:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007e96:	9109      	str	r1, [sp, #36]	; 0x24
 8007e98:	f7ff ff2f 	bl	8007cfa <__exponent>
 8007e9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e9e:	1813      	adds	r3, r2, r0
 8007ea0:	2a01      	cmp	r2, #1
 8007ea2:	4681      	mov	r9, r0
 8007ea4:	6123      	str	r3, [r4, #16]
 8007ea6:	dc02      	bgt.n	8007eae <_printf_float+0x14e>
 8007ea8:	6822      	ldr	r2, [r4, #0]
 8007eaa:	07d1      	lsls	r1, r2, #31
 8007eac:	d501      	bpl.n	8007eb2 <_printf_float+0x152>
 8007eae:	3301      	adds	r3, #1
 8007eb0:	6123      	str	r3, [r4, #16]
 8007eb2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d0a5      	beq.n	8007e06 <_printf_float+0xa6>
 8007eba:	232d      	movs	r3, #45	; 0x2d
 8007ebc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ec0:	e7a1      	b.n	8007e06 <_printf_float+0xa6>
 8007ec2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8007ec6:	f000 8177 	beq.w	80081b8 <_printf_float+0x458>
 8007eca:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007ece:	d1bb      	bne.n	8007e48 <_printf_float+0xe8>
 8007ed0:	2900      	cmp	r1, #0
 8007ed2:	d1b9      	bne.n	8007e48 <_printf_float+0xe8>
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	e7b6      	b.n	8007e46 <_printf_float+0xe6>
 8007ed8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8007edc:	d119      	bne.n	8007f12 <_printf_float+0x1b2>
 8007ede:	2900      	cmp	r1, #0
 8007ee0:	6863      	ldr	r3, [r4, #4]
 8007ee2:	dd0c      	ble.n	8007efe <_printf_float+0x19e>
 8007ee4:	6121      	str	r1, [r4, #16]
 8007ee6:	b913      	cbnz	r3, 8007eee <_printf_float+0x18e>
 8007ee8:	6822      	ldr	r2, [r4, #0]
 8007eea:	07d2      	lsls	r2, r2, #31
 8007eec:	d502      	bpl.n	8007ef4 <_printf_float+0x194>
 8007eee:	3301      	adds	r3, #1
 8007ef0:	440b      	add	r3, r1
 8007ef2:	6123      	str	r3, [r4, #16]
 8007ef4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ef6:	65a3      	str	r3, [r4, #88]	; 0x58
 8007ef8:	f04f 0900 	mov.w	r9, #0
 8007efc:	e7d9      	b.n	8007eb2 <_printf_float+0x152>
 8007efe:	b913      	cbnz	r3, 8007f06 <_printf_float+0x1a6>
 8007f00:	6822      	ldr	r2, [r4, #0]
 8007f02:	07d0      	lsls	r0, r2, #31
 8007f04:	d501      	bpl.n	8007f0a <_printf_float+0x1aa>
 8007f06:	3302      	adds	r3, #2
 8007f08:	e7f3      	b.n	8007ef2 <_printf_float+0x192>
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	e7f1      	b.n	8007ef2 <_printf_float+0x192>
 8007f0e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8007f12:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007f16:	4293      	cmp	r3, r2
 8007f18:	db05      	blt.n	8007f26 <_printf_float+0x1c6>
 8007f1a:	6822      	ldr	r2, [r4, #0]
 8007f1c:	6123      	str	r3, [r4, #16]
 8007f1e:	07d1      	lsls	r1, r2, #31
 8007f20:	d5e8      	bpl.n	8007ef4 <_printf_float+0x194>
 8007f22:	3301      	adds	r3, #1
 8007f24:	e7e5      	b.n	8007ef2 <_printf_float+0x192>
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	bfd4      	ite	le
 8007f2a:	f1c3 0302 	rsble	r3, r3, #2
 8007f2e:	2301      	movgt	r3, #1
 8007f30:	4413      	add	r3, r2
 8007f32:	e7de      	b.n	8007ef2 <_printf_float+0x192>
 8007f34:	6823      	ldr	r3, [r4, #0]
 8007f36:	055a      	lsls	r2, r3, #21
 8007f38:	d407      	bmi.n	8007f4a <_printf_float+0x1ea>
 8007f3a:	6923      	ldr	r3, [r4, #16]
 8007f3c:	4642      	mov	r2, r8
 8007f3e:	4631      	mov	r1, r6
 8007f40:	4628      	mov	r0, r5
 8007f42:	47b8      	blx	r7
 8007f44:	3001      	adds	r0, #1
 8007f46:	d12b      	bne.n	8007fa0 <_printf_float+0x240>
 8007f48:	e767      	b.n	8007e1a <_printf_float+0xba>
 8007f4a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007f4e:	f240 80dc 	bls.w	800810a <_printf_float+0x3aa>
 8007f52:	2200      	movs	r2, #0
 8007f54:	2300      	movs	r3, #0
 8007f56:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007f5a:	f7f8 fdb5 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f5e:	2800      	cmp	r0, #0
 8007f60:	d033      	beq.n	8007fca <_printf_float+0x26a>
 8007f62:	2301      	movs	r3, #1
 8007f64:	4a41      	ldr	r2, [pc, #260]	; (800806c <_printf_float+0x30c>)
 8007f66:	4631      	mov	r1, r6
 8007f68:	4628      	mov	r0, r5
 8007f6a:	47b8      	blx	r7
 8007f6c:	3001      	adds	r0, #1
 8007f6e:	f43f af54 	beq.w	8007e1a <_printf_float+0xba>
 8007f72:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f76:	429a      	cmp	r2, r3
 8007f78:	db02      	blt.n	8007f80 <_printf_float+0x220>
 8007f7a:	6823      	ldr	r3, [r4, #0]
 8007f7c:	07d8      	lsls	r0, r3, #31
 8007f7e:	d50f      	bpl.n	8007fa0 <_printf_float+0x240>
 8007f80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f84:	4631      	mov	r1, r6
 8007f86:	4628      	mov	r0, r5
 8007f88:	47b8      	blx	r7
 8007f8a:	3001      	adds	r0, #1
 8007f8c:	f43f af45 	beq.w	8007e1a <_printf_float+0xba>
 8007f90:	f04f 0800 	mov.w	r8, #0
 8007f94:	f104 091a 	add.w	r9, r4, #26
 8007f98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f9a:	3b01      	subs	r3, #1
 8007f9c:	4543      	cmp	r3, r8
 8007f9e:	dc09      	bgt.n	8007fb4 <_printf_float+0x254>
 8007fa0:	6823      	ldr	r3, [r4, #0]
 8007fa2:	079b      	lsls	r3, r3, #30
 8007fa4:	f100 8103 	bmi.w	80081ae <_printf_float+0x44e>
 8007fa8:	68e0      	ldr	r0, [r4, #12]
 8007faa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007fac:	4298      	cmp	r0, r3
 8007fae:	bfb8      	it	lt
 8007fb0:	4618      	movlt	r0, r3
 8007fb2:	e734      	b.n	8007e1e <_printf_float+0xbe>
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	464a      	mov	r2, r9
 8007fb8:	4631      	mov	r1, r6
 8007fba:	4628      	mov	r0, r5
 8007fbc:	47b8      	blx	r7
 8007fbe:	3001      	adds	r0, #1
 8007fc0:	f43f af2b 	beq.w	8007e1a <_printf_float+0xba>
 8007fc4:	f108 0801 	add.w	r8, r8, #1
 8007fc8:	e7e6      	b.n	8007f98 <_printf_float+0x238>
 8007fca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	dc2b      	bgt.n	8008028 <_printf_float+0x2c8>
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	4a26      	ldr	r2, [pc, #152]	; (800806c <_printf_float+0x30c>)
 8007fd4:	4631      	mov	r1, r6
 8007fd6:	4628      	mov	r0, r5
 8007fd8:	47b8      	blx	r7
 8007fda:	3001      	adds	r0, #1
 8007fdc:	f43f af1d 	beq.w	8007e1a <_printf_float+0xba>
 8007fe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fe2:	b923      	cbnz	r3, 8007fee <_printf_float+0x28e>
 8007fe4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fe6:	b913      	cbnz	r3, 8007fee <_printf_float+0x28e>
 8007fe8:	6823      	ldr	r3, [r4, #0]
 8007fea:	07d9      	lsls	r1, r3, #31
 8007fec:	d5d8      	bpl.n	8007fa0 <_printf_float+0x240>
 8007fee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ff2:	4631      	mov	r1, r6
 8007ff4:	4628      	mov	r0, r5
 8007ff6:	47b8      	blx	r7
 8007ff8:	3001      	adds	r0, #1
 8007ffa:	f43f af0e 	beq.w	8007e1a <_printf_float+0xba>
 8007ffe:	f04f 0900 	mov.w	r9, #0
 8008002:	f104 0a1a 	add.w	sl, r4, #26
 8008006:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008008:	425b      	negs	r3, r3
 800800a:	454b      	cmp	r3, r9
 800800c:	dc01      	bgt.n	8008012 <_printf_float+0x2b2>
 800800e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008010:	e794      	b.n	8007f3c <_printf_float+0x1dc>
 8008012:	2301      	movs	r3, #1
 8008014:	4652      	mov	r2, sl
 8008016:	4631      	mov	r1, r6
 8008018:	4628      	mov	r0, r5
 800801a:	47b8      	blx	r7
 800801c:	3001      	adds	r0, #1
 800801e:	f43f aefc 	beq.w	8007e1a <_printf_float+0xba>
 8008022:	f109 0901 	add.w	r9, r9, #1
 8008026:	e7ee      	b.n	8008006 <_printf_float+0x2a6>
 8008028:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800802a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800802c:	429a      	cmp	r2, r3
 800802e:	bfa8      	it	ge
 8008030:	461a      	movge	r2, r3
 8008032:	2a00      	cmp	r2, #0
 8008034:	4691      	mov	r9, r2
 8008036:	dd07      	ble.n	8008048 <_printf_float+0x2e8>
 8008038:	4613      	mov	r3, r2
 800803a:	4631      	mov	r1, r6
 800803c:	4642      	mov	r2, r8
 800803e:	4628      	mov	r0, r5
 8008040:	47b8      	blx	r7
 8008042:	3001      	adds	r0, #1
 8008044:	f43f aee9 	beq.w	8007e1a <_printf_float+0xba>
 8008048:	f104 031a 	add.w	r3, r4, #26
 800804c:	f04f 0b00 	mov.w	fp, #0
 8008050:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008054:	9306      	str	r3, [sp, #24]
 8008056:	e015      	b.n	8008084 <_printf_float+0x324>
 8008058:	7fefffff 	.word	0x7fefffff
 800805c:	0800b91a 	.word	0x0800b91a
 8008060:	0800b660 	.word	0x0800b660
 8008064:	0800b668 	.word	0x0800b668
 8008068:	0800b664 	.word	0x0800b664
 800806c:	0800b66c 	.word	0x0800b66c
 8008070:	2301      	movs	r3, #1
 8008072:	9a06      	ldr	r2, [sp, #24]
 8008074:	4631      	mov	r1, r6
 8008076:	4628      	mov	r0, r5
 8008078:	47b8      	blx	r7
 800807a:	3001      	adds	r0, #1
 800807c:	f43f aecd 	beq.w	8007e1a <_printf_float+0xba>
 8008080:	f10b 0b01 	add.w	fp, fp, #1
 8008084:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008088:	ebaa 0309 	sub.w	r3, sl, r9
 800808c:	455b      	cmp	r3, fp
 800808e:	dcef      	bgt.n	8008070 <_printf_float+0x310>
 8008090:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008094:	429a      	cmp	r2, r3
 8008096:	44d0      	add	r8, sl
 8008098:	db15      	blt.n	80080c6 <_printf_float+0x366>
 800809a:	6823      	ldr	r3, [r4, #0]
 800809c:	07da      	lsls	r2, r3, #31
 800809e:	d412      	bmi.n	80080c6 <_printf_float+0x366>
 80080a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80080a4:	eba3 020a 	sub.w	r2, r3, sl
 80080a8:	eba3 0a01 	sub.w	sl, r3, r1
 80080ac:	4592      	cmp	sl, r2
 80080ae:	bfa8      	it	ge
 80080b0:	4692      	movge	sl, r2
 80080b2:	f1ba 0f00 	cmp.w	sl, #0
 80080b6:	dc0e      	bgt.n	80080d6 <_printf_float+0x376>
 80080b8:	f04f 0800 	mov.w	r8, #0
 80080bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80080c0:	f104 091a 	add.w	r9, r4, #26
 80080c4:	e019      	b.n	80080fa <_printf_float+0x39a>
 80080c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80080ca:	4631      	mov	r1, r6
 80080cc:	4628      	mov	r0, r5
 80080ce:	47b8      	blx	r7
 80080d0:	3001      	adds	r0, #1
 80080d2:	d1e5      	bne.n	80080a0 <_printf_float+0x340>
 80080d4:	e6a1      	b.n	8007e1a <_printf_float+0xba>
 80080d6:	4653      	mov	r3, sl
 80080d8:	4642      	mov	r2, r8
 80080da:	4631      	mov	r1, r6
 80080dc:	4628      	mov	r0, r5
 80080de:	47b8      	blx	r7
 80080e0:	3001      	adds	r0, #1
 80080e2:	d1e9      	bne.n	80080b8 <_printf_float+0x358>
 80080e4:	e699      	b.n	8007e1a <_printf_float+0xba>
 80080e6:	2301      	movs	r3, #1
 80080e8:	464a      	mov	r2, r9
 80080ea:	4631      	mov	r1, r6
 80080ec:	4628      	mov	r0, r5
 80080ee:	47b8      	blx	r7
 80080f0:	3001      	adds	r0, #1
 80080f2:	f43f ae92 	beq.w	8007e1a <_printf_float+0xba>
 80080f6:	f108 0801 	add.w	r8, r8, #1
 80080fa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80080fe:	1a9b      	subs	r3, r3, r2
 8008100:	eba3 030a 	sub.w	r3, r3, sl
 8008104:	4543      	cmp	r3, r8
 8008106:	dcee      	bgt.n	80080e6 <_printf_float+0x386>
 8008108:	e74a      	b.n	8007fa0 <_printf_float+0x240>
 800810a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800810c:	2a01      	cmp	r2, #1
 800810e:	dc01      	bgt.n	8008114 <_printf_float+0x3b4>
 8008110:	07db      	lsls	r3, r3, #31
 8008112:	d53a      	bpl.n	800818a <_printf_float+0x42a>
 8008114:	2301      	movs	r3, #1
 8008116:	4642      	mov	r2, r8
 8008118:	4631      	mov	r1, r6
 800811a:	4628      	mov	r0, r5
 800811c:	47b8      	blx	r7
 800811e:	3001      	adds	r0, #1
 8008120:	f43f ae7b 	beq.w	8007e1a <_printf_float+0xba>
 8008124:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008128:	4631      	mov	r1, r6
 800812a:	4628      	mov	r0, r5
 800812c:	47b8      	blx	r7
 800812e:	3001      	adds	r0, #1
 8008130:	f108 0801 	add.w	r8, r8, #1
 8008134:	f43f ae71 	beq.w	8007e1a <_printf_float+0xba>
 8008138:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800813a:	2200      	movs	r2, #0
 800813c:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8008140:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008144:	2300      	movs	r3, #0
 8008146:	f7f8 fcbf 	bl	8000ac8 <__aeabi_dcmpeq>
 800814a:	b9c8      	cbnz	r0, 8008180 <_printf_float+0x420>
 800814c:	4653      	mov	r3, sl
 800814e:	4642      	mov	r2, r8
 8008150:	4631      	mov	r1, r6
 8008152:	4628      	mov	r0, r5
 8008154:	47b8      	blx	r7
 8008156:	3001      	adds	r0, #1
 8008158:	d10e      	bne.n	8008178 <_printf_float+0x418>
 800815a:	e65e      	b.n	8007e1a <_printf_float+0xba>
 800815c:	2301      	movs	r3, #1
 800815e:	4652      	mov	r2, sl
 8008160:	4631      	mov	r1, r6
 8008162:	4628      	mov	r0, r5
 8008164:	47b8      	blx	r7
 8008166:	3001      	adds	r0, #1
 8008168:	f43f ae57 	beq.w	8007e1a <_printf_float+0xba>
 800816c:	f108 0801 	add.w	r8, r8, #1
 8008170:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008172:	3b01      	subs	r3, #1
 8008174:	4543      	cmp	r3, r8
 8008176:	dcf1      	bgt.n	800815c <_printf_float+0x3fc>
 8008178:	464b      	mov	r3, r9
 800817a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800817e:	e6de      	b.n	8007f3e <_printf_float+0x1de>
 8008180:	f04f 0800 	mov.w	r8, #0
 8008184:	f104 0a1a 	add.w	sl, r4, #26
 8008188:	e7f2      	b.n	8008170 <_printf_float+0x410>
 800818a:	2301      	movs	r3, #1
 800818c:	e7df      	b.n	800814e <_printf_float+0x3ee>
 800818e:	2301      	movs	r3, #1
 8008190:	464a      	mov	r2, r9
 8008192:	4631      	mov	r1, r6
 8008194:	4628      	mov	r0, r5
 8008196:	47b8      	blx	r7
 8008198:	3001      	adds	r0, #1
 800819a:	f43f ae3e 	beq.w	8007e1a <_printf_float+0xba>
 800819e:	f108 0801 	add.w	r8, r8, #1
 80081a2:	68e3      	ldr	r3, [r4, #12]
 80081a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80081a6:	1a9b      	subs	r3, r3, r2
 80081a8:	4543      	cmp	r3, r8
 80081aa:	dcf0      	bgt.n	800818e <_printf_float+0x42e>
 80081ac:	e6fc      	b.n	8007fa8 <_printf_float+0x248>
 80081ae:	f04f 0800 	mov.w	r8, #0
 80081b2:	f104 0919 	add.w	r9, r4, #25
 80081b6:	e7f4      	b.n	80081a2 <_printf_float+0x442>
 80081b8:	2900      	cmp	r1, #0
 80081ba:	f43f ae8b 	beq.w	8007ed4 <_printf_float+0x174>
 80081be:	2300      	movs	r3, #0
 80081c0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80081c4:	ab09      	add	r3, sp, #36	; 0x24
 80081c6:	9300      	str	r3, [sp, #0]
 80081c8:	ec49 8b10 	vmov	d0, r8, r9
 80081cc:	6022      	str	r2, [r4, #0]
 80081ce:	f8cd a004 	str.w	sl, [sp, #4]
 80081d2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80081d6:	4628      	mov	r0, r5
 80081d8:	f7ff fd2e 	bl	8007c38 <__cvt>
 80081dc:	4680      	mov	r8, r0
 80081de:	e648      	b.n	8007e72 <_printf_float+0x112>

080081e0 <_printf_common>:
 80081e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081e4:	4691      	mov	r9, r2
 80081e6:	461f      	mov	r7, r3
 80081e8:	688a      	ldr	r2, [r1, #8]
 80081ea:	690b      	ldr	r3, [r1, #16]
 80081ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80081f0:	4293      	cmp	r3, r2
 80081f2:	bfb8      	it	lt
 80081f4:	4613      	movlt	r3, r2
 80081f6:	f8c9 3000 	str.w	r3, [r9]
 80081fa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80081fe:	4606      	mov	r6, r0
 8008200:	460c      	mov	r4, r1
 8008202:	b112      	cbz	r2, 800820a <_printf_common+0x2a>
 8008204:	3301      	adds	r3, #1
 8008206:	f8c9 3000 	str.w	r3, [r9]
 800820a:	6823      	ldr	r3, [r4, #0]
 800820c:	0699      	lsls	r1, r3, #26
 800820e:	bf42      	ittt	mi
 8008210:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008214:	3302      	addmi	r3, #2
 8008216:	f8c9 3000 	strmi.w	r3, [r9]
 800821a:	6825      	ldr	r5, [r4, #0]
 800821c:	f015 0506 	ands.w	r5, r5, #6
 8008220:	d107      	bne.n	8008232 <_printf_common+0x52>
 8008222:	f104 0a19 	add.w	sl, r4, #25
 8008226:	68e3      	ldr	r3, [r4, #12]
 8008228:	f8d9 2000 	ldr.w	r2, [r9]
 800822c:	1a9b      	subs	r3, r3, r2
 800822e:	42ab      	cmp	r3, r5
 8008230:	dc28      	bgt.n	8008284 <_printf_common+0xa4>
 8008232:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008236:	6822      	ldr	r2, [r4, #0]
 8008238:	3300      	adds	r3, #0
 800823a:	bf18      	it	ne
 800823c:	2301      	movne	r3, #1
 800823e:	0692      	lsls	r2, r2, #26
 8008240:	d42d      	bmi.n	800829e <_printf_common+0xbe>
 8008242:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008246:	4639      	mov	r1, r7
 8008248:	4630      	mov	r0, r6
 800824a:	47c0      	blx	r8
 800824c:	3001      	adds	r0, #1
 800824e:	d020      	beq.n	8008292 <_printf_common+0xb2>
 8008250:	6823      	ldr	r3, [r4, #0]
 8008252:	68e5      	ldr	r5, [r4, #12]
 8008254:	f8d9 2000 	ldr.w	r2, [r9]
 8008258:	f003 0306 	and.w	r3, r3, #6
 800825c:	2b04      	cmp	r3, #4
 800825e:	bf08      	it	eq
 8008260:	1aad      	subeq	r5, r5, r2
 8008262:	68a3      	ldr	r3, [r4, #8]
 8008264:	6922      	ldr	r2, [r4, #16]
 8008266:	bf0c      	ite	eq
 8008268:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800826c:	2500      	movne	r5, #0
 800826e:	4293      	cmp	r3, r2
 8008270:	bfc4      	itt	gt
 8008272:	1a9b      	subgt	r3, r3, r2
 8008274:	18ed      	addgt	r5, r5, r3
 8008276:	f04f 0900 	mov.w	r9, #0
 800827a:	341a      	adds	r4, #26
 800827c:	454d      	cmp	r5, r9
 800827e:	d11a      	bne.n	80082b6 <_printf_common+0xd6>
 8008280:	2000      	movs	r0, #0
 8008282:	e008      	b.n	8008296 <_printf_common+0xb6>
 8008284:	2301      	movs	r3, #1
 8008286:	4652      	mov	r2, sl
 8008288:	4639      	mov	r1, r7
 800828a:	4630      	mov	r0, r6
 800828c:	47c0      	blx	r8
 800828e:	3001      	adds	r0, #1
 8008290:	d103      	bne.n	800829a <_printf_common+0xba>
 8008292:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800829a:	3501      	adds	r5, #1
 800829c:	e7c3      	b.n	8008226 <_printf_common+0x46>
 800829e:	18e1      	adds	r1, r4, r3
 80082a0:	1c5a      	adds	r2, r3, #1
 80082a2:	2030      	movs	r0, #48	; 0x30
 80082a4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80082a8:	4422      	add	r2, r4
 80082aa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80082ae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80082b2:	3302      	adds	r3, #2
 80082b4:	e7c5      	b.n	8008242 <_printf_common+0x62>
 80082b6:	2301      	movs	r3, #1
 80082b8:	4622      	mov	r2, r4
 80082ba:	4639      	mov	r1, r7
 80082bc:	4630      	mov	r0, r6
 80082be:	47c0      	blx	r8
 80082c0:	3001      	adds	r0, #1
 80082c2:	d0e6      	beq.n	8008292 <_printf_common+0xb2>
 80082c4:	f109 0901 	add.w	r9, r9, #1
 80082c8:	e7d8      	b.n	800827c <_printf_common+0x9c>
	...

080082cc <_printf_i>:
 80082cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80082d0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80082d4:	460c      	mov	r4, r1
 80082d6:	7e09      	ldrb	r1, [r1, #24]
 80082d8:	b085      	sub	sp, #20
 80082da:	296e      	cmp	r1, #110	; 0x6e
 80082dc:	4617      	mov	r7, r2
 80082de:	4606      	mov	r6, r0
 80082e0:	4698      	mov	r8, r3
 80082e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80082e4:	f000 80b3 	beq.w	800844e <_printf_i+0x182>
 80082e8:	d822      	bhi.n	8008330 <_printf_i+0x64>
 80082ea:	2963      	cmp	r1, #99	; 0x63
 80082ec:	d036      	beq.n	800835c <_printf_i+0x90>
 80082ee:	d80a      	bhi.n	8008306 <_printf_i+0x3a>
 80082f0:	2900      	cmp	r1, #0
 80082f2:	f000 80b9 	beq.w	8008468 <_printf_i+0x19c>
 80082f6:	2958      	cmp	r1, #88	; 0x58
 80082f8:	f000 8083 	beq.w	8008402 <_printf_i+0x136>
 80082fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008300:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008304:	e032      	b.n	800836c <_printf_i+0xa0>
 8008306:	2964      	cmp	r1, #100	; 0x64
 8008308:	d001      	beq.n	800830e <_printf_i+0x42>
 800830a:	2969      	cmp	r1, #105	; 0x69
 800830c:	d1f6      	bne.n	80082fc <_printf_i+0x30>
 800830e:	6820      	ldr	r0, [r4, #0]
 8008310:	6813      	ldr	r3, [r2, #0]
 8008312:	0605      	lsls	r5, r0, #24
 8008314:	f103 0104 	add.w	r1, r3, #4
 8008318:	d52a      	bpl.n	8008370 <_printf_i+0xa4>
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	6011      	str	r1, [r2, #0]
 800831e:	2b00      	cmp	r3, #0
 8008320:	da03      	bge.n	800832a <_printf_i+0x5e>
 8008322:	222d      	movs	r2, #45	; 0x2d
 8008324:	425b      	negs	r3, r3
 8008326:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800832a:	486f      	ldr	r0, [pc, #444]	; (80084e8 <_printf_i+0x21c>)
 800832c:	220a      	movs	r2, #10
 800832e:	e039      	b.n	80083a4 <_printf_i+0xd8>
 8008330:	2973      	cmp	r1, #115	; 0x73
 8008332:	f000 809d 	beq.w	8008470 <_printf_i+0x1a4>
 8008336:	d808      	bhi.n	800834a <_printf_i+0x7e>
 8008338:	296f      	cmp	r1, #111	; 0x6f
 800833a:	d020      	beq.n	800837e <_printf_i+0xb2>
 800833c:	2970      	cmp	r1, #112	; 0x70
 800833e:	d1dd      	bne.n	80082fc <_printf_i+0x30>
 8008340:	6823      	ldr	r3, [r4, #0]
 8008342:	f043 0320 	orr.w	r3, r3, #32
 8008346:	6023      	str	r3, [r4, #0]
 8008348:	e003      	b.n	8008352 <_printf_i+0x86>
 800834a:	2975      	cmp	r1, #117	; 0x75
 800834c:	d017      	beq.n	800837e <_printf_i+0xb2>
 800834e:	2978      	cmp	r1, #120	; 0x78
 8008350:	d1d4      	bne.n	80082fc <_printf_i+0x30>
 8008352:	2378      	movs	r3, #120	; 0x78
 8008354:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008358:	4864      	ldr	r0, [pc, #400]	; (80084ec <_printf_i+0x220>)
 800835a:	e055      	b.n	8008408 <_printf_i+0x13c>
 800835c:	6813      	ldr	r3, [r2, #0]
 800835e:	1d19      	adds	r1, r3, #4
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	6011      	str	r1, [r2, #0]
 8008364:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008368:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800836c:	2301      	movs	r3, #1
 800836e:	e08c      	b.n	800848a <_printf_i+0x1be>
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	6011      	str	r1, [r2, #0]
 8008374:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008378:	bf18      	it	ne
 800837a:	b21b      	sxthne	r3, r3
 800837c:	e7cf      	b.n	800831e <_printf_i+0x52>
 800837e:	6813      	ldr	r3, [r2, #0]
 8008380:	6825      	ldr	r5, [r4, #0]
 8008382:	1d18      	adds	r0, r3, #4
 8008384:	6010      	str	r0, [r2, #0]
 8008386:	0628      	lsls	r0, r5, #24
 8008388:	d501      	bpl.n	800838e <_printf_i+0xc2>
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	e002      	b.n	8008394 <_printf_i+0xc8>
 800838e:	0668      	lsls	r0, r5, #25
 8008390:	d5fb      	bpl.n	800838a <_printf_i+0xbe>
 8008392:	881b      	ldrh	r3, [r3, #0]
 8008394:	4854      	ldr	r0, [pc, #336]	; (80084e8 <_printf_i+0x21c>)
 8008396:	296f      	cmp	r1, #111	; 0x6f
 8008398:	bf14      	ite	ne
 800839a:	220a      	movne	r2, #10
 800839c:	2208      	moveq	r2, #8
 800839e:	2100      	movs	r1, #0
 80083a0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80083a4:	6865      	ldr	r5, [r4, #4]
 80083a6:	60a5      	str	r5, [r4, #8]
 80083a8:	2d00      	cmp	r5, #0
 80083aa:	f2c0 8095 	blt.w	80084d8 <_printf_i+0x20c>
 80083ae:	6821      	ldr	r1, [r4, #0]
 80083b0:	f021 0104 	bic.w	r1, r1, #4
 80083b4:	6021      	str	r1, [r4, #0]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d13d      	bne.n	8008436 <_printf_i+0x16a>
 80083ba:	2d00      	cmp	r5, #0
 80083bc:	f040 808e 	bne.w	80084dc <_printf_i+0x210>
 80083c0:	4665      	mov	r5, ip
 80083c2:	2a08      	cmp	r2, #8
 80083c4:	d10b      	bne.n	80083de <_printf_i+0x112>
 80083c6:	6823      	ldr	r3, [r4, #0]
 80083c8:	07db      	lsls	r3, r3, #31
 80083ca:	d508      	bpl.n	80083de <_printf_i+0x112>
 80083cc:	6923      	ldr	r3, [r4, #16]
 80083ce:	6862      	ldr	r2, [r4, #4]
 80083d0:	429a      	cmp	r2, r3
 80083d2:	bfde      	ittt	le
 80083d4:	2330      	movle	r3, #48	; 0x30
 80083d6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80083da:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80083de:	ebac 0305 	sub.w	r3, ip, r5
 80083e2:	6123      	str	r3, [r4, #16]
 80083e4:	f8cd 8000 	str.w	r8, [sp]
 80083e8:	463b      	mov	r3, r7
 80083ea:	aa03      	add	r2, sp, #12
 80083ec:	4621      	mov	r1, r4
 80083ee:	4630      	mov	r0, r6
 80083f0:	f7ff fef6 	bl	80081e0 <_printf_common>
 80083f4:	3001      	adds	r0, #1
 80083f6:	d14d      	bne.n	8008494 <_printf_i+0x1c8>
 80083f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80083fc:	b005      	add	sp, #20
 80083fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008402:	4839      	ldr	r0, [pc, #228]	; (80084e8 <_printf_i+0x21c>)
 8008404:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008408:	6813      	ldr	r3, [r2, #0]
 800840a:	6821      	ldr	r1, [r4, #0]
 800840c:	1d1d      	adds	r5, r3, #4
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	6015      	str	r5, [r2, #0]
 8008412:	060a      	lsls	r2, r1, #24
 8008414:	d50b      	bpl.n	800842e <_printf_i+0x162>
 8008416:	07ca      	lsls	r2, r1, #31
 8008418:	bf44      	itt	mi
 800841a:	f041 0120 	orrmi.w	r1, r1, #32
 800841e:	6021      	strmi	r1, [r4, #0]
 8008420:	b91b      	cbnz	r3, 800842a <_printf_i+0x15e>
 8008422:	6822      	ldr	r2, [r4, #0]
 8008424:	f022 0220 	bic.w	r2, r2, #32
 8008428:	6022      	str	r2, [r4, #0]
 800842a:	2210      	movs	r2, #16
 800842c:	e7b7      	b.n	800839e <_printf_i+0xd2>
 800842e:	064d      	lsls	r5, r1, #25
 8008430:	bf48      	it	mi
 8008432:	b29b      	uxthmi	r3, r3
 8008434:	e7ef      	b.n	8008416 <_printf_i+0x14a>
 8008436:	4665      	mov	r5, ip
 8008438:	fbb3 f1f2 	udiv	r1, r3, r2
 800843c:	fb02 3311 	mls	r3, r2, r1, r3
 8008440:	5cc3      	ldrb	r3, [r0, r3]
 8008442:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008446:	460b      	mov	r3, r1
 8008448:	2900      	cmp	r1, #0
 800844a:	d1f5      	bne.n	8008438 <_printf_i+0x16c>
 800844c:	e7b9      	b.n	80083c2 <_printf_i+0xf6>
 800844e:	6813      	ldr	r3, [r2, #0]
 8008450:	6825      	ldr	r5, [r4, #0]
 8008452:	6961      	ldr	r1, [r4, #20]
 8008454:	1d18      	adds	r0, r3, #4
 8008456:	6010      	str	r0, [r2, #0]
 8008458:	0628      	lsls	r0, r5, #24
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	d501      	bpl.n	8008462 <_printf_i+0x196>
 800845e:	6019      	str	r1, [r3, #0]
 8008460:	e002      	b.n	8008468 <_printf_i+0x19c>
 8008462:	066a      	lsls	r2, r5, #25
 8008464:	d5fb      	bpl.n	800845e <_printf_i+0x192>
 8008466:	8019      	strh	r1, [r3, #0]
 8008468:	2300      	movs	r3, #0
 800846a:	6123      	str	r3, [r4, #16]
 800846c:	4665      	mov	r5, ip
 800846e:	e7b9      	b.n	80083e4 <_printf_i+0x118>
 8008470:	6813      	ldr	r3, [r2, #0]
 8008472:	1d19      	adds	r1, r3, #4
 8008474:	6011      	str	r1, [r2, #0]
 8008476:	681d      	ldr	r5, [r3, #0]
 8008478:	6862      	ldr	r2, [r4, #4]
 800847a:	2100      	movs	r1, #0
 800847c:	4628      	mov	r0, r5
 800847e:	f7f7 feaf 	bl	80001e0 <memchr>
 8008482:	b108      	cbz	r0, 8008488 <_printf_i+0x1bc>
 8008484:	1b40      	subs	r0, r0, r5
 8008486:	6060      	str	r0, [r4, #4]
 8008488:	6863      	ldr	r3, [r4, #4]
 800848a:	6123      	str	r3, [r4, #16]
 800848c:	2300      	movs	r3, #0
 800848e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008492:	e7a7      	b.n	80083e4 <_printf_i+0x118>
 8008494:	6923      	ldr	r3, [r4, #16]
 8008496:	462a      	mov	r2, r5
 8008498:	4639      	mov	r1, r7
 800849a:	4630      	mov	r0, r6
 800849c:	47c0      	blx	r8
 800849e:	3001      	adds	r0, #1
 80084a0:	d0aa      	beq.n	80083f8 <_printf_i+0x12c>
 80084a2:	6823      	ldr	r3, [r4, #0]
 80084a4:	079b      	lsls	r3, r3, #30
 80084a6:	d413      	bmi.n	80084d0 <_printf_i+0x204>
 80084a8:	68e0      	ldr	r0, [r4, #12]
 80084aa:	9b03      	ldr	r3, [sp, #12]
 80084ac:	4298      	cmp	r0, r3
 80084ae:	bfb8      	it	lt
 80084b0:	4618      	movlt	r0, r3
 80084b2:	e7a3      	b.n	80083fc <_printf_i+0x130>
 80084b4:	2301      	movs	r3, #1
 80084b6:	464a      	mov	r2, r9
 80084b8:	4639      	mov	r1, r7
 80084ba:	4630      	mov	r0, r6
 80084bc:	47c0      	blx	r8
 80084be:	3001      	adds	r0, #1
 80084c0:	d09a      	beq.n	80083f8 <_printf_i+0x12c>
 80084c2:	3501      	adds	r5, #1
 80084c4:	68e3      	ldr	r3, [r4, #12]
 80084c6:	9a03      	ldr	r2, [sp, #12]
 80084c8:	1a9b      	subs	r3, r3, r2
 80084ca:	42ab      	cmp	r3, r5
 80084cc:	dcf2      	bgt.n	80084b4 <_printf_i+0x1e8>
 80084ce:	e7eb      	b.n	80084a8 <_printf_i+0x1dc>
 80084d0:	2500      	movs	r5, #0
 80084d2:	f104 0919 	add.w	r9, r4, #25
 80084d6:	e7f5      	b.n	80084c4 <_printf_i+0x1f8>
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d1ac      	bne.n	8008436 <_printf_i+0x16a>
 80084dc:	7803      	ldrb	r3, [r0, #0]
 80084de:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80084e2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80084e6:	e76c      	b.n	80083c2 <_printf_i+0xf6>
 80084e8:	0800b66e 	.word	0x0800b66e
 80084ec:	0800b67f 	.word	0x0800b67f

080084f0 <iprintf>:
 80084f0:	b40f      	push	{r0, r1, r2, r3}
 80084f2:	4b0a      	ldr	r3, [pc, #40]	; (800851c <iprintf+0x2c>)
 80084f4:	b513      	push	{r0, r1, r4, lr}
 80084f6:	681c      	ldr	r4, [r3, #0]
 80084f8:	b124      	cbz	r4, 8008504 <iprintf+0x14>
 80084fa:	69a3      	ldr	r3, [r4, #24]
 80084fc:	b913      	cbnz	r3, 8008504 <iprintf+0x14>
 80084fe:	4620      	mov	r0, r4
 8008500:	f001 f866 	bl	80095d0 <__sinit>
 8008504:	ab05      	add	r3, sp, #20
 8008506:	9a04      	ldr	r2, [sp, #16]
 8008508:	68a1      	ldr	r1, [r4, #8]
 800850a:	9301      	str	r3, [sp, #4]
 800850c:	4620      	mov	r0, r4
 800850e:	f001 fd29 	bl	8009f64 <_vfiprintf_r>
 8008512:	b002      	add	sp, #8
 8008514:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008518:	b004      	add	sp, #16
 800851a:	4770      	bx	lr
 800851c:	20000010 	.word	0x20000010

08008520 <_puts_r>:
 8008520:	b570      	push	{r4, r5, r6, lr}
 8008522:	460e      	mov	r6, r1
 8008524:	4605      	mov	r5, r0
 8008526:	b118      	cbz	r0, 8008530 <_puts_r+0x10>
 8008528:	6983      	ldr	r3, [r0, #24]
 800852a:	b90b      	cbnz	r3, 8008530 <_puts_r+0x10>
 800852c:	f001 f850 	bl	80095d0 <__sinit>
 8008530:	69ab      	ldr	r3, [r5, #24]
 8008532:	68ac      	ldr	r4, [r5, #8]
 8008534:	b913      	cbnz	r3, 800853c <_puts_r+0x1c>
 8008536:	4628      	mov	r0, r5
 8008538:	f001 f84a 	bl	80095d0 <__sinit>
 800853c:	4b23      	ldr	r3, [pc, #140]	; (80085cc <_puts_r+0xac>)
 800853e:	429c      	cmp	r4, r3
 8008540:	d117      	bne.n	8008572 <_puts_r+0x52>
 8008542:	686c      	ldr	r4, [r5, #4]
 8008544:	89a3      	ldrh	r3, [r4, #12]
 8008546:	071b      	lsls	r3, r3, #28
 8008548:	d51d      	bpl.n	8008586 <_puts_r+0x66>
 800854a:	6923      	ldr	r3, [r4, #16]
 800854c:	b1db      	cbz	r3, 8008586 <_puts_r+0x66>
 800854e:	3e01      	subs	r6, #1
 8008550:	68a3      	ldr	r3, [r4, #8]
 8008552:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008556:	3b01      	subs	r3, #1
 8008558:	60a3      	str	r3, [r4, #8]
 800855a:	b9e9      	cbnz	r1, 8008598 <_puts_r+0x78>
 800855c:	2b00      	cmp	r3, #0
 800855e:	da2e      	bge.n	80085be <_puts_r+0x9e>
 8008560:	4622      	mov	r2, r4
 8008562:	210a      	movs	r1, #10
 8008564:	4628      	mov	r0, r5
 8008566:	f000 f83f 	bl	80085e8 <__swbuf_r>
 800856a:	3001      	adds	r0, #1
 800856c:	d011      	beq.n	8008592 <_puts_r+0x72>
 800856e:	200a      	movs	r0, #10
 8008570:	e011      	b.n	8008596 <_puts_r+0x76>
 8008572:	4b17      	ldr	r3, [pc, #92]	; (80085d0 <_puts_r+0xb0>)
 8008574:	429c      	cmp	r4, r3
 8008576:	d101      	bne.n	800857c <_puts_r+0x5c>
 8008578:	68ac      	ldr	r4, [r5, #8]
 800857a:	e7e3      	b.n	8008544 <_puts_r+0x24>
 800857c:	4b15      	ldr	r3, [pc, #84]	; (80085d4 <_puts_r+0xb4>)
 800857e:	429c      	cmp	r4, r3
 8008580:	bf08      	it	eq
 8008582:	68ec      	ldreq	r4, [r5, #12]
 8008584:	e7de      	b.n	8008544 <_puts_r+0x24>
 8008586:	4621      	mov	r1, r4
 8008588:	4628      	mov	r0, r5
 800858a:	f000 f87f 	bl	800868c <__swsetup_r>
 800858e:	2800      	cmp	r0, #0
 8008590:	d0dd      	beq.n	800854e <_puts_r+0x2e>
 8008592:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008596:	bd70      	pop	{r4, r5, r6, pc}
 8008598:	2b00      	cmp	r3, #0
 800859a:	da04      	bge.n	80085a6 <_puts_r+0x86>
 800859c:	69a2      	ldr	r2, [r4, #24]
 800859e:	429a      	cmp	r2, r3
 80085a0:	dc06      	bgt.n	80085b0 <_puts_r+0x90>
 80085a2:	290a      	cmp	r1, #10
 80085a4:	d004      	beq.n	80085b0 <_puts_r+0x90>
 80085a6:	6823      	ldr	r3, [r4, #0]
 80085a8:	1c5a      	adds	r2, r3, #1
 80085aa:	6022      	str	r2, [r4, #0]
 80085ac:	7019      	strb	r1, [r3, #0]
 80085ae:	e7cf      	b.n	8008550 <_puts_r+0x30>
 80085b0:	4622      	mov	r2, r4
 80085b2:	4628      	mov	r0, r5
 80085b4:	f000 f818 	bl	80085e8 <__swbuf_r>
 80085b8:	3001      	adds	r0, #1
 80085ba:	d1c9      	bne.n	8008550 <_puts_r+0x30>
 80085bc:	e7e9      	b.n	8008592 <_puts_r+0x72>
 80085be:	6823      	ldr	r3, [r4, #0]
 80085c0:	200a      	movs	r0, #10
 80085c2:	1c5a      	adds	r2, r3, #1
 80085c4:	6022      	str	r2, [r4, #0]
 80085c6:	7018      	strb	r0, [r3, #0]
 80085c8:	e7e5      	b.n	8008596 <_puts_r+0x76>
 80085ca:	bf00      	nop
 80085cc:	0800b6c0 	.word	0x0800b6c0
 80085d0:	0800b6e0 	.word	0x0800b6e0
 80085d4:	0800b6a0 	.word	0x0800b6a0

080085d8 <puts>:
 80085d8:	4b02      	ldr	r3, [pc, #8]	; (80085e4 <puts+0xc>)
 80085da:	4601      	mov	r1, r0
 80085dc:	6818      	ldr	r0, [r3, #0]
 80085de:	f7ff bf9f 	b.w	8008520 <_puts_r>
 80085e2:	bf00      	nop
 80085e4:	20000010 	.word	0x20000010

080085e8 <__swbuf_r>:
 80085e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085ea:	460e      	mov	r6, r1
 80085ec:	4614      	mov	r4, r2
 80085ee:	4605      	mov	r5, r0
 80085f0:	b118      	cbz	r0, 80085fa <__swbuf_r+0x12>
 80085f2:	6983      	ldr	r3, [r0, #24]
 80085f4:	b90b      	cbnz	r3, 80085fa <__swbuf_r+0x12>
 80085f6:	f000 ffeb 	bl	80095d0 <__sinit>
 80085fa:	4b21      	ldr	r3, [pc, #132]	; (8008680 <__swbuf_r+0x98>)
 80085fc:	429c      	cmp	r4, r3
 80085fe:	d12a      	bne.n	8008656 <__swbuf_r+0x6e>
 8008600:	686c      	ldr	r4, [r5, #4]
 8008602:	69a3      	ldr	r3, [r4, #24]
 8008604:	60a3      	str	r3, [r4, #8]
 8008606:	89a3      	ldrh	r3, [r4, #12]
 8008608:	071a      	lsls	r2, r3, #28
 800860a:	d52e      	bpl.n	800866a <__swbuf_r+0x82>
 800860c:	6923      	ldr	r3, [r4, #16]
 800860e:	b363      	cbz	r3, 800866a <__swbuf_r+0x82>
 8008610:	6923      	ldr	r3, [r4, #16]
 8008612:	6820      	ldr	r0, [r4, #0]
 8008614:	1ac0      	subs	r0, r0, r3
 8008616:	6963      	ldr	r3, [r4, #20]
 8008618:	b2f6      	uxtb	r6, r6
 800861a:	4283      	cmp	r3, r0
 800861c:	4637      	mov	r7, r6
 800861e:	dc04      	bgt.n	800862a <__swbuf_r+0x42>
 8008620:	4621      	mov	r1, r4
 8008622:	4628      	mov	r0, r5
 8008624:	f000 ff6a 	bl	80094fc <_fflush_r>
 8008628:	bb28      	cbnz	r0, 8008676 <__swbuf_r+0x8e>
 800862a:	68a3      	ldr	r3, [r4, #8]
 800862c:	3b01      	subs	r3, #1
 800862e:	60a3      	str	r3, [r4, #8]
 8008630:	6823      	ldr	r3, [r4, #0]
 8008632:	1c5a      	adds	r2, r3, #1
 8008634:	6022      	str	r2, [r4, #0]
 8008636:	701e      	strb	r6, [r3, #0]
 8008638:	6963      	ldr	r3, [r4, #20]
 800863a:	3001      	adds	r0, #1
 800863c:	4283      	cmp	r3, r0
 800863e:	d004      	beq.n	800864a <__swbuf_r+0x62>
 8008640:	89a3      	ldrh	r3, [r4, #12]
 8008642:	07db      	lsls	r3, r3, #31
 8008644:	d519      	bpl.n	800867a <__swbuf_r+0x92>
 8008646:	2e0a      	cmp	r6, #10
 8008648:	d117      	bne.n	800867a <__swbuf_r+0x92>
 800864a:	4621      	mov	r1, r4
 800864c:	4628      	mov	r0, r5
 800864e:	f000 ff55 	bl	80094fc <_fflush_r>
 8008652:	b190      	cbz	r0, 800867a <__swbuf_r+0x92>
 8008654:	e00f      	b.n	8008676 <__swbuf_r+0x8e>
 8008656:	4b0b      	ldr	r3, [pc, #44]	; (8008684 <__swbuf_r+0x9c>)
 8008658:	429c      	cmp	r4, r3
 800865a:	d101      	bne.n	8008660 <__swbuf_r+0x78>
 800865c:	68ac      	ldr	r4, [r5, #8]
 800865e:	e7d0      	b.n	8008602 <__swbuf_r+0x1a>
 8008660:	4b09      	ldr	r3, [pc, #36]	; (8008688 <__swbuf_r+0xa0>)
 8008662:	429c      	cmp	r4, r3
 8008664:	bf08      	it	eq
 8008666:	68ec      	ldreq	r4, [r5, #12]
 8008668:	e7cb      	b.n	8008602 <__swbuf_r+0x1a>
 800866a:	4621      	mov	r1, r4
 800866c:	4628      	mov	r0, r5
 800866e:	f000 f80d 	bl	800868c <__swsetup_r>
 8008672:	2800      	cmp	r0, #0
 8008674:	d0cc      	beq.n	8008610 <__swbuf_r+0x28>
 8008676:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800867a:	4638      	mov	r0, r7
 800867c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800867e:	bf00      	nop
 8008680:	0800b6c0 	.word	0x0800b6c0
 8008684:	0800b6e0 	.word	0x0800b6e0
 8008688:	0800b6a0 	.word	0x0800b6a0

0800868c <__swsetup_r>:
 800868c:	4b32      	ldr	r3, [pc, #200]	; (8008758 <__swsetup_r+0xcc>)
 800868e:	b570      	push	{r4, r5, r6, lr}
 8008690:	681d      	ldr	r5, [r3, #0]
 8008692:	4606      	mov	r6, r0
 8008694:	460c      	mov	r4, r1
 8008696:	b125      	cbz	r5, 80086a2 <__swsetup_r+0x16>
 8008698:	69ab      	ldr	r3, [r5, #24]
 800869a:	b913      	cbnz	r3, 80086a2 <__swsetup_r+0x16>
 800869c:	4628      	mov	r0, r5
 800869e:	f000 ff97 	bl	80095d0 <__sinit>
 80086a2:	4b2e      	ldr	r3, [pc, #184]	; (800875c <__swsetup_r+0xd0>)
 80086a4:	429c      	cmp	r4, r3
 80086a6:	d10f      	bne.n	80086c8 <__swsetup_r+0x3c>
 80086a8:	686c      	ldr	r4, [r5, #4]
 80086aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086ae:	b29a      	uxth	r2, r3
 80086b0:	0715      	lsls	r5, r2, #28
 80086b2:	d42c      	bmi.n	800870e <__swsetup_r+0x82>
 80086b4:	06d0      	lsls	r0, r2, #27
 80086b6:	d411      	bmi.n	80086dc <__swsetup_r+0x50>
 80086b8:	2209      	movs	r2, #9
 80086ba:	6032      	str	r2, [r6, #0]
 80086bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086c0:	81a3      	strh	r3, [r4, #12]
 80086c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80086c6:	e03e      	b.n	8008746 <__swsetup_r+0xba>
 80086c8:	4b25      	ldr	r3, [pc, #148]	; (8008760 <__swsetup_r+0xd4>)
 80086ca:	429c      	cmp	r4, r3
 80086cc:	d101      	bne.n	80086d2 <__swsetup_r+0x46>
 80086ce:	68ac      	ldr	r4, [r5, #8]
 80086d0:	e7eb      	b.n	80086aa <__swsetup_r+0x1e>
 80086d2:	4b24      	ldr	r3, [pc, #144]	; (8008764 <__swsetup_r+0xd8>)
 80086d4:	429c      	cmp	r4, r3
 80086d6:	bf08      	it	eq
 80086d8:	68ec      	ldreq	r4, [r5, #12]
 80086da:	e7e6      	b.n	80086aa <__swsetup_r+0x1e>
 80086dc:	0751      	lsls	r1, r2, #29
 80086de:	d512      	bpl.n	8008706 <__swsetup_r+0x7a>
 80086e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80086e2:	b141      	cbz	r1, 80086f6 <__swsetup_r+0x6a>
 80086e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80086e8:	4299      	cmp	r1, r3
 80086ea:	d002      	beq.n	80086f2 <__swsetup_r+0x66>
 80086ec:	4630      	mov	r0, r6
 80086ee:	f001 fb67 	bl	8009dc0 <_free_r>
 80086f2:	2300      	movs	r3, #0
 80086f4:	6363      	str	r3, [r4, #52]	; 0x34
 80086f6:	89a3      	ldrh	r3, [r4, #12]
 80086f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80086fc:	81a3      	strh	r3, [r4, #12]
 80086fe:	2300      	movs	r3, #0
 8008700:	6063      	str	r3, [r4, #4]
 8008702:	6923      	ldr	r3, [r4, #16]
 8008704:	6023      	str	r3, [r4, #0]
 8008706:	89a3      	ldrh	r3, [r4, #12]
 8008708:	f043 0308 	orr.w	r3, r3, #8
 800870c:	81a3      	strh	r3, [r4, #12]
 800870e:	6923      	ldr	r3, [r4, #16]
 8008710:	b94b      	cbnz	r3, 8008726 <__swsetup_r+0x9a>
 8008712:	89a3      	ldrh	r3, [r4, #12]
 8008714:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008718:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800871c:	d003      	beq.n	8008726 <__swsetup_r+0x9a>
 800871e:	4621      	mov	r1, r4
 8008720:	4630      	mov	r0, r6
 8008722:	f001 f811 	bl	8009748 <__smakebuf_r>
 8008726:	89a2      	ldrh	r2, [r4, #12]
 8008728:	f012 0301 	ands.w	r3, r2, #1
 800872c:	d00c      	beq.n	8008748 <__swsetup_r+0xbc>
 800872e:	2300      	movs	r3, #0
 8008730:	60a3      	str	r3, [r4, #8]
 8008732:	6963      	ldr	r3, [r4, #20]
 8008734:	425b      	negs	r3, r3
 8008736:	61a3      	str	r3, [r4, #24]
 8008738:	6923      	ldr	r3, [r4, #16]
 800873a:	b953      	cbnz	r3, 8008752 <__swsetup_r+0xc6>
 800873c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008740:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8008744:	d1ba      	bne.n	80086bc <__swsetup_r+0x30>
 8008746:	bd70      	pop	{r4, r5, r6, pc}
 8008748:	0792      	lsls	r2, r2, #30
 800874a:	bf58      	it	pl
 800874c:	6963      	ldrpl	r3, [r4, #20]
 800874e:	60a3      	str	r3, [r4, #8]
 8008750:	e7f2      	b.n	8008738 <__swsetup_r+0xac>
 8008752:	2000      	movs	r0, #0
 8008754:	e7f7      	b.n	8008746 <__swsetup_r+0xba>
 8008756:	bf00      	nop
 8008758:	20000010 	.word	0x20000010
 800875c:	0800b6c0 	.word	0x0800b6c0
 8008760:	0800b6e0 	.word	0x0800b6e0
 8008764:	0800b6a0 	.word	0x0800b6a0

08008768 <quorem>:
 8008768:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800876c:	6903      	ldr	r3, [r0, #16]
 800876e:	690c      	ldr	r4, [r1, #16]
 8008770:	42a3      	cmp	r3, r4
 8008772:	4680      	mov	r8, r0
 8008774:	f2c0 8082 	blt.w	800887c <quorem+0x114>
 8008778:	3c01      	subs	r4, #1
 800877a:	f101 0714 	add.w	r7, r1, #20
 800877e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8008782:	f100 0614 	add.w	r6, r0, #20
 8008786:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800878a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800878e:	eb06 030c 	add.w	r3, r6, ip
 8008792:	3501      	adds	r5, #1
 8008794:	eb07 090c 	add.w	r9, r7, ip
 8008798:	9301      	str	r3, [sp, #4]
 800879a:	fbb0 f5f5 	udiv	r5, r0, r5
 800879e:	b395      	cbz	r5, 8008806 <quorem+0x9e>
 80087a0:	f04f 0a00 	mov.w	sl, #0
 80087a4:	4638      	mov	r0, r7
 80087a6:	46b6      	mov	lr, r6
 80087a8:	46d3      	mov	fp, sl
 80087aa:	f850 2b04 	ldr.w	r2, [r0], #4
 80087ae:	b293      	uxth	r3, r2
 80087b0:	fb05 a303 	mla	r3, r5, r3, sl
 80087b4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80087b8:	b29b      	uxth	r3, r3
 80087ba:	ebab 0303 	sub.w	r3, fp, r3
 80087be:	0c12      	lsrs	r2, r2, #16
 80087c0:	f8de b000 	ldr.w	fp, [lr]
 80087c4:	fb05 a202 	mla	r2, r5, r2, sl
 80087c8:	fa13 f38b 	uxtah	r3, r3, fp
 80087cc:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80087d0:	fa1f fb82 	uxth.w	fp, r2
 80087d4:	f8de 2000 	ldr.w	r2, [lr]
 80087d8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80087dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80087e0:	b29b      	uxth	r3, r3
 80087e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80087e6:	4581      	cmp	r9, r0
 80087e8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80087ec:	f84e 3b04 	str.w	r3, [lr], #4
 80087f0:	d2db      	bcs.n	80087aa <quorem+0x42>
 80087f2:	f856 300c 	ldr.w	r3, [r6, ip]
 80087f6:	b933      	cbnz	r3, 8008806 <quorem+0x9e>
 80087f8:	9b01      	ldr	r3, [sp, #4]
 80087fa:	3b04      	subs	r3, #4
 80087fc:	429e      	cmp	r6, r3
 80087fe:	461a      	mov	r2, r3
 8008800:	d330      	bcc.n	8008864 <quorem+0xfc>
 8008802:	f8c8 4010 	str.w	r4, [r8, #16]
 8008806:	4640      	mov	r0, r8
 8008808:	f001 fa06 	bl	8009c18 <__mcmp>
 800880c:	2800      	cmp	r0, #0
 800880e:	db25      	blt.n	800885c <quorem+0xf4>
 8008810:	3501      	adds	r5, #1
 8008812:	4630      	mov	r0, r6
 8008814:	f04f 0c00 	mov.w	ip, #0
 8008818:	f857 2b04 	ldr.w	r2, [r7], #4
 800881c:	f8d0 e000 	ldr.w	lr, [r0]
 8008820:	b293      	uxth	r3, r2
 8008822:	ebac 0303 	sub.w	r3, ip, r3
 8008826:	0c12      	lsrs	r2, r2, #16
 8008828:	fa13 f38e 	uxtah	r3, r3, lr
 800882c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008830:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008834:	b29b      	uxth	r3, r3
 8008836:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800883a:	45b9      	cmp	r9, r7
 800883c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008840:	f840 3b04 	str.w	r3, [r0], #4
 8008844:	d2e8      	bcs.n	8008818 <quorem+0xb0>
 8008846:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800884a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800884e:	b92a      	cbnz	r2, 800885c <quorem+0xf4>
 8008850:	3b04      	subs	r3, #4
 8008852:	429e      	cmp	r6, r3
 8008854:	461a      	mov	r2, r3
 8008856:	d30b      	bcc.n	8008870 <quorem+0x108>
 8008858:	f8c8 4010 	str.w	r4, [r8, #16]
 800885c:	4628      	mov	r0, r5
 800885e:	b003      	add	sp, #12
 8008860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008864:	6812      	ldr	r2, [r2, #0]
 8008866:	3b04      	subs	r3, #4
 8008868:	2a00      	cmp	r2, #0
 800886a:	d1ca      	bne.n	8008802 <quorem+0x9a>
 800886c:	3c01      	subs	r4, #1
 800886e:	e7c5      	b.n	80087fc <quorem+0x94>
 8008870:	6812      	ldr	r2, [r2, #0]
 8008872:	3b04      	subs	r3, #4
 8008874:	2a00      	cmp	r2, #0
 8008876:	d1ef      	bne.n	8008858 <quorem+0xf0>
 8008878:	3c01      	subs	r4, #1
 800887a:	e7ea      	b.n	8008852 <quorem+0xea>
 800887c:	2000      	movs	r0, #0
 800887e:	e7ee      	b.n	800885e <quorem+0xf6>

08008880 <_dtoa_r>:
 8008880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008884:	ec57 6b10 	vmov	r6, r7, d0
 8008888:	b097      	sub	sp, #92	; 0x5c
 800888a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800888c:	9106      	str	r1, [sp, #24]
 800888e:	4604      	mov	r4, r0
 8008890:	920b      	str	r2, [sp, #44]	; 0x2c
 8008892:	9312      	str	r3, [sp, #72]	; 0x48
 8008894:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008898:	e9cd 6700 	strd	r6, r7, [sp]
 800889c:	b93d      	cbnz	r5, 80088ae <_dtoa_r+0x2e>
 800889e:	2010      	movs	r0, #16
 80088a0:	f000 ff92 	bl	80097c8 <malloc>
 80088a4:	6260      	str	r0, [r4, #36]	; 0x24
 80088a6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80088aa:	6005      	str	r5, [r0, #0]
 80088ac:	60c5      	str	r5, [r0, #12]
 80088ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80088b0:	6819      	ldr	r1, [r3, #0]
 80088b2:	b151      	cbz	r1, 80088ca <_dtoa_r+0x4a>
 80088b4:	685a      	ldr	r2, [r3, #4]
 80088b6:	604a      	str	r2, [r1, #4]
 80088b8:	2301      	movs	r3, #1
 80088ba:	4093      	lsls	r3, r2
 80088bc:	608b      	str	r3, [r1, #8]
 80088be:	4620      	mov	r0, r4
 80088c0:	f000 ffc9 	bl	8009856 <_Bfree>
 80088c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80088c6:	2200      	movs	r2, #0
 80088c8:	601a      	str	r2, [r3, #0]
 80088ca:	1e3b      	subs	r3, r7, #0
 80088cc:	bfbb      	ittet	lt
 80088ce:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80088d2:	9301      	strlt	r3, [sp, #4]
 80088d4:	2300      	movge	r3, #0
 80088d6:	2201      	movlt	r2, #1
 80088d8:	bfac      	ite	ge
 80088da:	f8c8 3000 	strge.w	r3, [r8]
 80088de:	f8c8 2000 	strlt.w	r2, [r8]
 80088e2:	4baf      	ldr	r3, [pc, #700]	; (8008ba0 <_dtoa_r+0x320>)
 80088e4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80088e8:	ea33 0308 	bics.w	r3, r3, r8
 80088ec:	d114      	bne.n	8008918 <_dtoa_r+0x98>
 80088ee:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80088f0:	f242 730f 	movw	r3, #9999	; 0x270f
 80088f4:	6013      	str	r3, [r2, #0]
 80088f6:	9b00      	ldr	r3, [sp, #0]
 80088f8:	b923      	cbnz	r3, 8008904 <_dtoa_r+0x84>
 80088fa:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80088fe:	2800      	cmp	r0, #0
 8008900:	f000 8542 	beq.w	8009388 <_dtoa_r+0xb08>
 8008904:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008906:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8008bb4 <_dtoa_r+0x334>
 800890a:	2b00      	cmp	r3, #0
 800890c:	f000 8544 	beq.w	8009398 <_dtoa_r+0xb18>
 8008910:	f10b 0303 	add.w	r3, fp, #3
 8008914:	f000 bd3e 	b.w	8009394 <_dtoa_r+0xb14>
 8008918:	e9dd 6700 	ldrd	r6, r7, [sp]
 800891c:	2200      	movs	r2, #0
 800891e:	2300      	movs	r3, #0
 8008920:	4630      	mov	r0, r6
 8008922:	4639      	mov	r1, r7
 8008924:	f7f8 f8d0 	bl	8000ac8 <__aeabi_dcmpeq>
 8008928:	4681      	mov	r9, r0
 800892a:	b168      	cbz	r0, 8008948 <_dtoa_r+0xc8>
 800892c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800892e:	2301      	movs	r3, #1
 8008930:	6013      	str	r3, [r2, #0]
 8008932:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008934:	2b00      	cmp	r3, #0
 8008936:	f000 8524 	beq.w	8009382 <_dtoa_r+0xb02>
 800893a:	4b9a      	ldr	r3, [pc, #616]	; (8008ba4 <_dtoa_r+0x324>)
 800893c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800893e:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8008942:	6013      	str	r3, [r2, #0]
 8008944:	f000 bd28 	b.w	8009398 <_dtoa_r+0xb18>
 8008948:	aa14      	add	r2, sp, #80	; 0x50
 800894a:	a915      	add	r1, sp, #84	; 0x54
 800894c:	ec47 6b10 	vmov	d0, r6, r7
 8008950:	4620      	mov	r0, r4
 8008952:	f001 f9d8 	bl	8009d06 <__d2b>
 8008956:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800895a:	9004      	str	r0, [sp, #16]
 800895c:	2d00      	cmp	r5, #0
 800895e:	d07c      	beq.n	8008a5a <_dtoa_r+0x1da>
 8008960:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008964:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8008968:	46b2      	mov	sl, r6
 800896a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800896e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008972:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8008976:	2200      	movs	r2, #0
 8008978:	4b8b      	ldr	r3, [pc, #556]	; (8008ba8 <_dtoa_r+0x328>)
 800897a:	4650      	mov	r0, sl
 800897c:	4659      	mov	r1, fp
 800897e:	f7f7 fc83 	bl	8000288 <__aeabi_dsub>
 8008982:	a381      	add	r3, pc, #516	; (adr r3, 8008b88 <_dtoa_r+0x308>)
 8008984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008988:	f7f7 fe36 	bl	80005f8 <__aeabi_dmul>
 800898c:	a380      	add	r3, pc, #512	; (adr r3, 8008b90 <_dtoa_r+0x310>)
 800898e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008992:	f7f7 fc7b 	bl	800028c <__adddf3>
 8008996:	4606      	mov	r6, r0
 8008998:	4628      	mov	r0, r5
 800899a:	460f      	mov	r7, r1
 800899c:	f7f7 fdc2 	bl	8000524 <__aeabi_i2d>
 80089a0:	a37d      	add	r3, pc, #500	; (adr r3, 8008b98 <_dtoa_r+0x318>)
 80089a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089a6:	f7f7 fe27 	bl	80005f8 <__aeabi_dmul>
 80089aa:	4602      	mov	r2, r0
 80089ac:	460b      	mov	r3, r1
 80089ae:	4630      	mov	r0, r6
 80089b0:	4639      	mov	r1, r7
 80089b2:	f7f7 fc6b 	bl	800028c <__adddf3>
 80089b6:	4606      	mov	r6, r0
 80089b8:	460f      	mov	r7, r1
 80089ba:	f7f8 f8cd 	bl	8000b58 <__aeabi_d2iz>
 80089be:	2200      	movs	r2, #0
 80089c0:	4682      	mov	sl, r0
 80089c2:	2300      	movs	r3, #0
 80089c4:	4630      	mov	r0, r6
 80089c6:	4639      	mov	r1, r7
 80089c8:	f7f8 f888 	bl	8000adc <__aeabi_dcmplt>
 80089cc:	b148      	cbz	r0, 80089e2 <_dtoa_r+0x162>
 80089ce:	4650      	mov	r0, sl
 80089d0:	f7f7 fda8 	bl	8000524 <__aeabi_i2d>
 80089d4:	4632      	mov	r2, r6
 80089d6:	463b      	mov	r3, r7
 80089d8:	f7f8 f876 	bl	8000ac8 <__aeabi_dcmpeq>
 80089dc:	b908      	cbnz	r0, 80089e2 <_dtoa_r+0x162>
 80089de:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80089e2:	f1ba 0f16 	cmp.w	sl, #22
 80089e6:	d859      	bhi.n	8008a9c <_dtoa_r+0x21c>
 80089e8:	4970      	ldr	r1, [pc, #448]	; (8008bac <_dtoa_r+0x32c>)
 80089ea:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80089ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80089f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089f6:	f7f8 f88f 	bl	8000b18 <__aeabi_dcmpgt>
 80089fa:	2800      	cmp	r0, #0
 80089fc:	d050      	beq.n	8008aa0 <_dtoa_r+0x220>
 80089fe:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008a02:	2300      	movs	r3, #0
 8008a04:	930f      	str	r3, [sp, #60]	; 0x3c
 8008a06:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008a08:	1b5d      	subs	r5, r3, r5
 8008a0a:	f1b5 0801 	subs.w	r8, r5, #1
 8008a0e:	bf49      	itett	mi
 8008a10:	f1c5 0301 	rsbmi	r3, r5, #1
 8008a14:	2300      	movpl	r3, #0
 8008a16:	9305      	strmi	r3, [sp, #20]
 8008a18:	f04f 0800 	movmi.w	r8, #0
 8008a1c:	bf58      	it	pl
 8008a1e:	9305      	strpl	r3, [sp, #20]
 8008a20:	f1ba 0f00 	cmp.w	sl, #0
 8008a24:	db3e      	blt.n	8008aa4 <_dtoa_r+0x224>
 8008a26:	2300      	movs	r3, #0
 8008a28:	44d0      	add	r8, sl
 8008a2a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8008a2e:	9307      	str	r3, [sp, #28]
 8008a30:	9b06      	ldr	r3, [sp, #24]
 8008a32:	2b09      	cmp	r3, #9
 8008a34:	f200 8090 	bhi.w	8008b58 <_dtoa_r+0x2d8>
 8008a38:	2b05      	cmp	r3, #5
 8008a3a:	bfc4      	itt	gt
 8008a3c:	3b04      	subgt	r3, #4
 8008a3e:	9306      	strgt	r3, [sp, #24]
 8008a40:	9b06      	ldr	r3, [sp, #24]
 8008a42:	f1a3 0302 	sub.w	r3, r3, #2
 8008a46:	bfcc      	ite	gt
 8008a48:	2500      	movgt	r5, #0
 8008a4a:	2501      	movle	r5, #1
 8008a4c:	2b03      	cmp	r3, #3
 8008a4e:	f200 808f 	bhi.w	8008b70 <_dtoa_r+0x2f0>
 8008a52:	e8df f003 	tbb	[pc, r3]
 8008a56:	7f7d      	.short	0x7f7d
 8008a58:	7131      	.short	0x7131
 8008a5a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8008a5e:	441d      	add	r5, r3
 8008a60:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8008a64:	2820      	cmp	r0, #32
 8008a66:	dd13      	ble.n	8008a90 <_dtoa_r+0x210>
 8008a68:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8008a6c:	9b00      	ldr	r3, [sp, #0]
 8008a6e:	fa08 f800 	lsl.w	r8, r8, r0
 8008a72:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8008a76:	fa23 f000 	lsr.w	r0, r3, r0
 8008a7a:	ea48 0000 	orr.w	r0, r8, r0
 8008a7e:	f7f7 fd41 	bl	8000504 <__aeabi_ui2d>
 8008a82:	2301      	movs	r3, #1
 8008a84:	4682      	mov	sl, r0
 8008a86:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8008a8a:	3d01      	subs	r5, #1
 8008a8c:	9313      	str	r3, [sp, #76]	; 0x4c
 8008a8e:	e772      	b.n	8008976 <_dtoa_r+0xf6>
 8008a90:	9b00      	ldr	r3, [sp, #0]
 8008a92:	f1c0 0020 	rsb	r0, r0, #32
 8008a96:	fa03 f000 	lsl.w	r0, r3, r0
 8008a9a:	e7f0      	b.n	8008a7e <_dtoa_r+0x1fe>
 8008a9c:	2301      	movs	r3, #1
 8008a9e:	e7b1      	b.n	8008a04 <_dtoa_r+0x184>
 8008aa0:	900f      	str	r0, [sp, #60]	; 0x3c
 8008aa2:	e7b0      	b.n	8008a06 <_dtoa_r+0x186>
 8008aa4:	9b05      	ldr	r3, [sp, #20]
 8008aa6:	eba3 030a 	sub.w	r3, r3, sl
 8008aaa:	9305      	str	r3, [sp, #20]
 8008aac:	f1ca 0300 	rsb	r3, sl, #0
 8008ab0:	9307      	str	r3, [sp, #28]
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	930e      	str	r3, [sp, #56]	; 0x38
 8008ab6:	e7bb      	b.n	8008a30 <_dtoa_r+0x1b0>
 8008ab8:	2301      	movs	r3, #1
 8008aba:	930a      	str	r3, [sp, #40]	; 0x28
 8008abc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	dd59      	ble.n	8008b76 <_dtoa_r+0x2f6>
 8008ac2:	9302      	str	r3, [sp, #8]
 8008ac4:	4699      	mov	r9, r3
 8008ac6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008ac8:	2200      	movs	r2, #0
 8008aca:	6072      	str	r2, [r6, #4]
 8008acc:	2204      	movs	r2, #4
 8008ace:	f102 0014 	add.w	r0, r2, #20
 8008ad2:	4298      	cmp	r0, r3
 8008ad4:	6871      	ldr	r1, [r6, #4]
 8008ad6:	d953      	bls.n	8008b80 <_dtoa_r+0x300>
 8008ad8:	4620      	mov	r0, r4
 8008ada:	f000 fe88 	bl	80097ee <_Balloc>
 8008ade:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ae0:	6030      	str	r0, [r6, #0]
 8008ae2:	f1b9 0f0e 	cmp.w	r9, #14
 8008ae6:	f8d3 b000 	ldr.w	fp, [r3]
 8008aea:	f200 80e6 	bhi.w	8008cba <_dtoa_r+0x43a>
 8008aee:	2d00      	cmp	r5, #0
 8008af0:	f000 80e3 	beq.w	8008cba <_dtoa_r+0x43a>
 8008af4:	ed9d 7b00 	vldr	d7, [sp]
 8008af8:	f1ba 0f00 	cmp.w	sl, #0
 8008afc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8008b00:	dd74      	ble.n	8008bec <_dtoa_r+0x36c>
 8008b02:	4a2a      	ldr	r2, [pc, #168]	; (8008bac <_dtoa_r+0x32c>)
 8008b04:	f00a 030f 	and.w	r3, sl, #15
 8008b08:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008b0c:	ed93 7b00 	vldr	d7, [r3]
 8008b10:	ea4f 162a 	mov.w	r6, sl, asr #4
 8008b14:	06f0      	lsls	r0, r6, #27
 8008b16:	ed8d 7b08 	vstr	d7, [sp, #32]
 8008b1a:	d565      	bpl.n	8008be8 <_dtoa_r+0x368>
 8008b1c:	4b24      	ldr	r3, [pc, #144]	; (8008bb0 <_dtoa_r+0x330>)
 8008b1e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008b22:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008b26:	f7f7 fe91 	bl	800084c <__aeabi_ddiv>
 8008b2a:	e9cd 0100 	strd	r0, r1, [sp]
 8008b2e:	f006 060f 	and.w	r6, r6, #15
 8008b32:	2503      	movs	r5, #3
 8008b34:	4f1e      	ldr	r7, [pc, #120]	; (8008bb0 <_dtoa_r+0x330>)
 8008b36:	e04c      	b.n	8008bd2 <_dtoa_r+0x352>
 8008b38:	2301      	movs	r3, #1
 8008b3a:	930a      	str	r3, [sp, #40]	; 0x28
 8008b3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b3e:	4453      	add	r3, sl
 8008b40:	f103 0901 	add.w	r9, r3, #1
 8008b44:	9302      	str	r3, [sp, #8]
 8008b46:	464b      	mov	r3, r9
 8008b48:	2b01      	cmp	r3, #1
 8008b4a:	bfb8      	it	lt
 8008b4c:	2301      	movlt	r3, #1
 8008b4e:	e7ba      	b.n	8008ac6 <_dtoa_r+0x246>
 8008b50:	2300      	movs	r3, #0
 8008b52:	e7b2      	b.n	8008aba <_dtoa_r+0x23a>
 8008b54:	2300      	movs	r3, #0
 8008b56:	e7f0      	b.n	8008b3a <_dtoa_r+0x2ba>
 8008b58:	2501      	movs	r5, #1
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	9306      	str	r3, [sp, #24]
 8008b5e:	950a      	str	r5, [sp, #40]	; 0x28
 8008b60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008b64:	9302      	str	r3, [sp, #8]
 8008b66:	4699      	mov	r9, r3
 8008b68:	2200      	movs	r2, #0
 8008b6a:	2312      	movs	r3, #18
 8008b6c:	920b      	str	r2, [sp, #44]	; 0x2c
 8008b6e:	e7aa      	b.n	8008ac6 <_dtoa_r+0x246>
 8008b70:	2301      	movs	r3, #1
 8008b72:	930a      	str	r3, [sp, #40]	; 0x28
 8008b74:	e7f4      	b.n	8008b60 <_dtoa_r+0x2e0>
 8008b76:	2301      	movs	r3, #1
 8008b78:	9302      	str	r3, [sp, #8]
 8008b7a:	4699      	mov	r9, r3
 8008b7c:	461a      	mov	r2, r3
 8008b7e:	e7f5      	b.n	8008b6c <_dtoa_r+0x2ec>
 8008b80:	3101      	adds	r1, #1
 8008b82:	6071      	str	r1, [r6, #4]
 8008b84:	0052      	lsls	r2, r2, #1
 8008b86:	e7a2      	b.n	8008ace <_dtoa_r+0x24e>
 8008b88:	636f4361 	.word	0x636f4361
 8008b8c:	3fd287a7 	.word	0x3fd287a7
 8008b90:	8b60c8b3 	.word	0x8b60c8b3
 8008b94:	3fc68a28 	.word	0x3fc68a28
 8008b98:	509f79fb 	.word	0x509f79fb
 8008b9c:	3fd34413 	.word	0x3fd34413
 8008ba0:	7ff00000 	.word	0x7ff00000
 8008ba4:	0800b66d 	.word	0x0800b66d
 8008ba8:	3ff80000 	.word	0x3ff80000
 8008bac:	0800b728 	.word	0x0800b728
 8008bb0:	0800b700 	.word	0x0800b700
 8008bb4:	0800b699 	.word	0x0800b699
 8008bb8:	07f1      	lsls	r1, r6, #31
 8008bba:	d508      	bpl.n	8008bce <_dtoa_r+0x34e>
 8008bbc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008bc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008bc4:	f7f7 fd18 	bl	80005f8 <__aeabi_dmul>
 8008bc8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008bcc:	3501      	adds	r5, #1
 8008bce:	1076      	asrs	r6, r6, #1
 8008bd0:	3708      	adds	r7, #8
 8008bd2:	2e00      	cmp	r6, #0
 8008bd4:	d1f0      	bne.n	8008bb8 <_dtoa_r+0x338>
 8008bd6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008bda:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008bde:	f7f7 fe35 	bl	800084c <__aeabi_ddiv>
 8008be2:	e9cd 0100 	strd	r0, r1, [sp]
 8008be6:	e01a      	b.n	8008c1e <_dtoa_r+0x39e>
 8008be8:	2502      	movs	r5, #2
 8008bea:	e7a3      	b.n	8008b34 <_dtoa_r+0x2b4>
 8008bec:	f000 80a0 	beq.w	8008d30 <_dtoa_r+0x4b0>
 8008bf0:	f1ca 0600 	rsb	r6, sl, #0
 8008bf4:	4b9f      	ldr	r3, [pc, #636]	; (8008e74 <_dtoa_r+0x5f4>)
 8008bf6:	4fa0      	ldr	r7, [pc, #640]	; (8008e78 <_dtoa_r+0x5f8>)
 8008bf8:	f006 020f 	and.w	r2, r6, #15
 8008bfc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c04:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008c08:	f7f7 fcf6 	bl	80005f8 <__aeabi_dmul>
 8008c0c:	e9cd 0100 	strd	r0, r1, [sp]
 8008c10:	1136      	asrs	r6, r6, #4
 8008c12:	2300      	movs	r3, #0
 8008c14:	2502      	movs	r5, #2
 8008c16:	2e00      	cmp	r6, #0
 8008c18:	d17f      	bne.n	8008d1a <_dtoa_r+0x49a>
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d1e1      	bne.n	8008be2 <_dtoa_r+0x362>
 8008c1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	f000 8087 	beq.w	8008d34 <_dtoa_r+0x4b4>
 8008c26:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	4b93      	ldr	r3, [pc, #588]	; (8008e7c <_dtoa_r+0x5fc>)
 8008c2e:	4630      	mov	r0, r6
 8008c30:	4639      	mov	r1, r7
 8008c32:	f7f7 ff53 	bl	8000adc <__aeabi_dcmplt>
 8008c36:	2800      	cmp	r0, #0
 8008c38:	d07c      	beq.n	8008d34 <_dtoa_r+0x4b4>
 8008c3a:	f1b9 0f00 	cmp.w	r9, #0
 8008c3e:	d079      	beq.n	8008d34 <_dtoa_r+0x4b4>
 8008c40:	9b02      	ldr	r3, [sp, #8]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	dd35      	ble.n	8008cb2 <_dtoa_r+0x432>
 8008c46:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8008c4a:	9308      	str	r3, [sp, #32]
 8008c4c:	4639      	mov	r1, r7
 8008c4e:	2200      	movs	r2, #0
 8008c50:	4b8b      	ldr	r3, [pc, #556]	; (8008e80 <_dtoa_r+0x600>)
 8008c52:	4630      	mov	r0, r6
 8008c54:	f7f7 fcd0 	bl	80005f8 <__aeabi_dmul>
 8008c58:	e9cd 0100 	strd	r0, r1, [sp]
 8008c5c:	9f02      	ldr	r7, [sp, #8]
 8008c5e:	3501      	adds	r5, #1
 8008c60:	4628      	mov	r0, r5
 8008c62:	f7f7 fc5f 	bl	8000524 <__aeabi_i2d>
 8008c66:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008c6a:	f7f7 fcc5 	bl	80005f8 <__aeabi_dmul>
 8008c6e:	2200      	movs	r2, #0
 8008c70:	4b84      	ldr	r3, [pc, #528]	; (8008e84 <_dtoa_r+0x604>)
 8008c72:	f7f7 fb0b 	bl	800028c <__adddf3>
 8008c76:	4605      	mov	r5, r0
 8008c78:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008c7c:	2f00      	cmp	r7, #0
 8008c7e:	d15d      	bne.n	8008d3c <_dtoa_r+0x4bc>
 8008c80:	2200      	movs	r2, #0
 8008c82:	4b81      	ldr	r3, [pc, #516]	; (8008e88 <_dtoa_r+0x608>)
 8008c84:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008c88:	f7f7 fafe 	bl	8000288 <__aeabi_dsub>
 8008c8c:	462a      	mov	r2, r5
 8008c8e:	4633      	mov	r3, r6
 8008c90:	e9cd 0100 	strd	r0, r1, [sp]
 8008c94:	f7f7 ff40 	bl	8000b18 <__aeabi_dcmpgt>
 8008c98:	2800      	cmp	r0, #0
 8008c9a:	f040 8288 	bne.w	80091ae <_dtoa_r+0x92e>
 8008c9e:	462a      	mov	r2, r5
 8008ca0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008ca4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008ca8:	f7f7 ff18 	bl	8000adc <__aeabi_dcmplt>
 8008cac:	2800      	cmp	r0, #0
 8008cae:	f040 827c 	bne.w	80091aa <_dtoa_r+0x92a>
 8008cb2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008cb6:	e9cd 2300 	strd	r2, r3, [sp]
 8008cba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	f2c0 8150 	blt.w	8008f62 <_dtoa_r+0x6e2>
 8008cc2:	f1ba 0f0e 	cmp.w	sl, #14
 8008cc6:	f300 814c 	bgt.w	8008f62 <_dtoa_r+0x6e2>
 8008cca:	4b6a      	ldr	r3, [pc, #424]	; (8008e74 <_dtoa_r+0x5f4>)
 8008ccc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008cd0:	ed93 7b00 	vldr	d7, [r3]
 8008cd4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008cdc:	f280 80d8 	bge.w	8008e90 <_dtoa_r+0x610>
 8008ce0:	f1b9 0f00 	cmp.w	r9, #0
 8008ce4:	f300 80d4 	bgt.w	8008e90 <_dtoa_r+0x610>
 8008ce8:	f040 825e 	bne.w	80091a8 <_dtoa_r+0x928>
 8008cec:	2200      	movs	r2, #0
 8008cee:	4b66      	ldr	r3, [pc, #408]	; (8008e88 <_dtoa_r+0x608>)
 8008cf0:	ec51 0b17 	vmov	r0, r1, d7
 8008cf4:	f7f7 fc80 	bl	80005f8 <__aeabi_dmul>
 8008cf8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008cfc:	f7f7 ff02 	bl	8000b04 <__aeabi_dcmpge>
 8008d00:	464f      	mov	r7, r9
 8008d02:	464e      	mov	r6, r9
 8008d04:	2800      	cmp	r0, #0
 8008d06:	f040 8234 	bne.w	8009172 <_dtoa_r+0x8f2>
 8008d0a:	2331      	movs	r3, #49	; 0x31
 8008d0c:	f10b 0501 	add.w	r5, fp, #1
 8008d10:	f88b 3000 	strb.w	r3, [fp]
 8008d14:	f10a 0a01 	add.w	sl, sl, #1
 8008d18:	e22f      	b.n	800917a <_dtoa_r+0x8fa>
 8008d1a:	07f2      	lsls	r2, r6, #31
 8008d1c:	d505      	bpl.n	8008d2a <_dtoa_r+0x4aa>
 8008d1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d22:	f7f7 fc69 	bl	80005f8 <__aeabi_dmul>
 8008d26:	3501      	adds	r5, #1
 8008d28:	2301      	movs	r3, #1
 8008d2a:	1076      	asrs	r6, r6, #1
 8008d2c:	3708      	adds	r7, #8
 8008d2e:	e772      	b.n	8008c16 <_dtoa_r+0x396>
 8008d30:	2502      	movs	r5, #2
 8008d32:	e774      	b.n	8008c1e <_dtoa_r+0x39e>
 8008d34:	f8cd a020 	str.w	sl, [sp, #32]
 8008d38:	464f      	mov	r7, r9
 8008d3a:	e791      	b.n	8008c60 <_dtoa_r+0x3e0>
 8008d3c:	4b4d      	ldr	r3, [pc, #308]	; (8008e74 <_dtoa_r+0x5f4>)
 8008d3e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008d42:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8008d46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d047      	beq.n	8008ddc <_dtoa_r+0x55c>
 8008d4c:	4602      	mov	r2, r0
 8008d4e:	460b      	mov	r3, r1
 8008d50:	2000      	movs	r0, #0
 8008d52:	494e      	ldr	r1, [pc, #312]	; (8008e8c <_dtoa_r+0x60c>)
 8008d54:	f7f7 fd7a 	bl	800084c <__aeabi_ddiv>
 8008d58:	462a      	mov	r2, r5
 8008d5a:	4633      	mov	r3, r6
 8008d5c:	f7f7 fa94 	bl	8000288 <__aeabi_dsub>
 8008d60:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008d64:	465d      	mov	r5, fp
 8008d66:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008d6a:	f7f7 fef5 	bl	8000b58 <__aeabi_d2iz>
 8008d6e:	4606      	mov	r6, r0
 8008d70:	f7f7 fbd8 	bl	8000524 <__aeabi_i2d>
 8008d74:	4602      	mov	r2, r0
 8008d76:	460b      	mov	r3, r1
 8008d78:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008d7c:	f7f7 fa84 	bl	8000288 <__aeabi_dsub>
 8008d80:	3630      	adds	r6, #48	; 0x30
 8008d82:	f805 6b01 	strb.w	r6, [r5], #1
 8008d86:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008d8a:	e9cd 0100 	strd	r0, r1, [sp]
 8008d8e:	f7f7 fea5 	bl	8000adc <__aeabi_dcmplt>
 8008d92:	2800      	cmp	r0, #0
 8008d94:	d163      	bne.n	8008e5e <_dtoa_r+0x5de>
 8008d96:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008d9a:	2000      	movs	r0, #0
 8008d9c:	4937      	ldr	r1, [pc, #220]	; (8008e7c <_dtoa_r+0x5fc>)
 8008d9e:	f7f7 fa73 	bl	8000288 <__aeabi_dsub>
 8008da2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008da6:	f7f7 fe99 	bl	8000adc <__aeabi_dcmplt>
 8008daa:	2800      	cmp	r0, #0
 8008dac:	f040 80b7 	bne.w	8008f1e <_dtoa_r+0x69e>
 8008db0:	eba5 030b 	sub.w	r3, r5, fp
 8008db4:	429f      	cmp	r7, r3
 8008db6:	f77f af7c 	ble.w	8008cb2 <_dtoa_r+0x432>
 8008dba:	2200      	movs	r2, #0
 8008dbc:	4b30      	ldr	r3, [pc, #192]	; (8008e80 <_dtoa_r+0x600>)
 8008dbe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008dc2:	f7f7 fc19 	bl	80005f8 <__aeabi_dmul>
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008dcc:	4b2c      	ldr	r3, [pc, #176]	; (8008e80 <_dtoa_r+0x600>)
 8008dce:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008dd2:	f7f7 fc11 	bl	80005f8 <__aeabi_dmul>
 8008dd6:	e9cd 0100 	strd	r0, r1, [sp]
 8008dda:	e7c4      	b.n	8008d66 <_dtoa_r+0x4e6>
 8008ddc:	462a      	mov	r2, r5
 8008dde:	4633      	mov	r3, r6
 8008de0:	f7f7 fc0a 	bl	80005f8 <__aeabi_dmul>
 8008de4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008de8:	eb0b 0507 	add.w	r5, fp, r7
 8008dec:	465e      	mov	r6, fp
 8008dee:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008df2:	f7f7 feb1 	bl	8000b58 <__aeabi_d2iz>
 8008df6:	4607      	mov	r7, r0
 8008df8:	f7f7 fb94 	bl	8000524 <__aeabi_i2d>
 8008dfc:	3730      	adds	r7, #48	; 0x30
 8008dfe:	4602      	mov	r2, r0
 8008e00:	460b      	mov	r3, r1
 8008e02:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008e06:	f7f7 fa3f 	bl	8000288 <__aeabi_dsub>
 8008e0a:	f806 7b01 	strb.w	r7, [r6], #1
 8008e0e:	42ae      	cmp	r6, r5
 8008e10:	e9cd 0100 	strd	r0, r1, [sp]
 8008e14:	f04f 0200 	mov.w	r2, #0
 8008e18:	d126      	bne.n	8008e68 <_dtoa_r+0x5e8>
 8008e1a:	4b1c      	ldr	r3, [pc, #112]	; (8008e8c <_dtoa_r+0x60c>)
 8008e1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008e20:	f7f7 fa34 	bl	800028c <__adddf3>
 8008e24:	4602      	mov	r2, r0
 8008e26:	460b      	mov	r3, r1
 8008e28:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008e2c:	f7f7 fe74 	bl	8000b18 <__aeabi_dcmpgt>
 8008e30:	2800      	cmp	r0, #0
 8008e32:	d174      	bne.n	8008f1e <_dtoa_r+0x69e>
 8008e34:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008e38:	2000      	movs	r0, #0
 8008e3a:	4914      	ldr	r1, [pc, #80]	; (8008e8c <_dtoa_r+0x60c>)
 8008e3c:	f7f7 fa24 	bl	8000288 <__aeabi_dsub>
 8008e40:	4602      	mov	r2, r0
 8008e42:	460b      	mov	r3, r1
 8008e44:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008e48:	f7f7 fe48 	bl	8000adc <__aeabi_dcmplt>
 8008e4c:	2800      	cmp	r0, #0
 8008e4e:	f43f af30 	beq.w	8008cb2 <_dtoa_r+0x432>
 8008e52:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008e56:	2b30      	cmp	r3, #48	; 0x30
 8008e58:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8008e5c:	d002      	beq.n	8008e64 <_dtoa_r+0x5e4>
 8008e5e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008e62:	e04a      	b.n	8008efa <_dtoa_r+0x67a>
 8008e64:	4615      	mov	r5, r2
 8008e66:	e7f4      	b.n	8008e52 <_dtoa_r+0x5d2>
 8008e68:	4b05      	ldr	r3, [pc, #20]	; (8008e80 <_dtoa_r+0x600>)
 8008e6a:	f7f7 fbc5 	bl	80005f8 <__aeabi_dmul>
 8008e6e:	e9cd 0100 	strd	r0, r1, [sp]
 8008e72:	e7bc      	b.n	8008dee <_dtoa_r+0x56e>
 8008e74:	0800b728 	.word	0x0800b728
 8008e78:	0800b700 	.word	0x0800b700
 8008e7c:	3ff00000 	.word	0x3ff00000
 8008e80:	40240000 	.word	0x40240000
 8008e84:	401c0000 	.word	0x401c0000
 8008e88:	40140000 	.word	0x40140000
 8008e8c:	3fe00000 	.word	0x3fe00000
 8008e90:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008e94:	465d      	mov	r5, fp
 8008e96:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008e9a:	4630      	mov	r0, r6
 8008e9c:	4639      	mov	r1, r7
 8008e9e:	f7f7 fcd5 	bl	800084c <__aeabi_ddiv>
 8008ea2:	f7f7 fe59 	bl	8000b58 <__aeabi_d2iz>
 8008ea6:	4680      	mov	r8, r0
 8008ea8:	f7f7 fb3c 	bl	8000524 <__aeabi_i2d>
 8008eac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008eb0:	f7f7 fba2 	bl	80005f8 <__aeabi_dmul>
 8008eb4:	4602      	mov	r2, r0
 8008eb6:	460b      	mov	r3, r1
 8008eb8:	4630      	mov	r0, r6
 8008eba:	4639      	mov	r1, r7
 8008ebc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8008ec0:	f7f7 f9e2 	bl	8000288 <__aeabi_dsub>
 8008ec4:	f805 6b01 	strb.w	r6, [r5], #1
 8008ec8:	eba5 060b 	sub.w	r6, r5, fp
 8008ecc:	45b1      	cmp	r9, r6
 8008ece:	4602      	mov	r2, r0
 8008ed0:	460b      	mov	r3, r1
 8008ed2:	d139      	bne.n	8008f48 <_dtoa_r+0x6c8>
 8008ed4:	f7f7 f9da 	bl	800028c <__adddf3>
 8008ed8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008edc:	4606      	mov	r6, r0
 8008ede:	460f      	mov	r7, r1
 8008ee0:	f7f7 fe1a 	bl	8000b18 <__aeabi_dcmpgt>
 8008ee4:	b9c8      	cbnz	r0, 8008f1a <_dtoa_r+0x69a>
 8008ee6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008eea:	4630      	mov	r0, r6
 8008eec:	4639      	mov	r1, r7
 8008eee:	f7f7 fdeb 	bl	8000ac8 <__aeabi_dcmpeq>
 8008ef2:	b110      	cbz	r0, 8008efa <_dtoa_r+0x67a>
 8008ef4:	f018 0f01 	tst.w	r8, #1
 8008ef8:	d10f      	bne.n	8008f1a <_dtoa_r+0x69a>
 8008efa:	9904      	ldr	r1, [sp, #16]
 8008efc:	4620      	mov	r0, r4
 8008efe:	f000 fcaa 	bl	8009856 <_Bfree>
 8008f02:	2300      	movs	r3, #0
 8008f04:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008f06:	702b      	strb	r3, [r5, #0]
 8008f08:	f10a 0301 	add.w	r3, sl, #1
 8008f0c:	6013      	str	r3, [r2, #0]
 8008f0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	f000 8241 	beq.w	8009398 <_dtoa_r+0xb18>
 8008f16:	601d      	str	r5, [r3, #0]
 8008f18:	e23e      	b.n	8009398 <_dtoa_r+0xb18>
 8008f1a:	f8cd a020 	str.w	sl, [sp, #32]
 8008f1e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008f22:	2a39      	cmp	r2, #57	; 0x39
 8008f24:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8008f28:	d108      	bne.n	8008f3c <_dtoa_r+0x6bc>
 8008f2a:	459b      	cmp	fp, r3
 8008f2c:	d10a      	bne.n	8008f44 <_dtoa_r+0x6c4>
 8008f2e:	9b08      	ldr	r3, [sp, #32]
 8008f30:	3301      	adds	r3, #1
 8008f32:	9308      	str	r3, [sp, #32]
 8008f34:	2330      	movs	r3, #48	; 0x30
 8008f36:	f88b 3000 	strb.w	r3, [fp]
 8008f3a:	465b      	mov	r3, fp
 8008f3c:	781a      	ldrb	r2, [r3, #0]
 8008f3e:	3201      	adds	r2, #1
 8008f40:	701a      	strb	r2, [r3, #0]
 8008f42:	e78c      	b.n	8008e5e <_dtoa_r+0x5de>
 8008f44:	461d      	mov	r5, r3
 8008f46:	e7ea      	b.n	8008f1e <_dtoa_r+0x69e>
 8008f48:	2200      	movs	r2, #0
 8008f4a:	4b9b      	ldr	r3, [pc, #620]	; (80091b8 <_dtoa_r+0x938>)
 8008f4c:	f7f7 fb54 	bl	80005f8 <__aeabi_dmul>
 8008f50:	2200      	movs	r2, #0
 8008f52:	2300      	movs	r3, #0
 8008f54:	4606      	mov	r6, r0
 8008f56:	460f      	mov	r7, r1
 8008f58:	f7f7 fdb6 	bl	8000ac8 <__aeabi_dcmpeq>
 8008f5c:	2800      	cmp	r0, #0
 8008f5e:	d09a      	beq.n	8008e96 <_dtoa_r+0x616>
 8008f60:	e7cb      	b.n	8008efa <_dtoa_r+0x67a>
 8008f62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f64:	2a00      	cmp	r2, #0
 8008f66:	f000 808b 	beq.w	8009080 <_dtoa_r+0x800>
 8008f6a:	9a06      	ldr	r2, [sp, #24]
 8008f6c:	2a01      	cmp	r2, #1
 8008f6e:	dc6e      	bgt.n	800904e <_dtoa_r+0x7ce>
 8008f70:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008f72:	2a00      	cmp	r2, #0
 8008f74:	d067      	beq.n	8009046 <_dtoa_r+0x7c6>
 8008f76:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008f7a:	9f07      	ldr	r7, [sp, #28]
 8008f7c:	9d05      	ldr	r5, [sp, #20]
 8008f7e:	9a05      	ldr	r2, [sp, #20]
 8008f80:	2101      	movs	r1, #1
 8008f82:	441a      	add	r2, r3
 8008f84:	4620      	mov	r0, r4
 8008f86:	9205      	str	r2, [sp, #20]
 8008f88:	4498      	add	r8, r3
 8008f8a:	f000 fd04 	bl	8009996 <__i2b>
 8008f8e:	4606      	mov	r6, r0
 8008f90:	2d00      	cmp	r5, #0
 8008f92:	dd0c      	ble.n	8008fae <_dtoa_r+0x72e>
 8008f94:	f1b8 0f00 	cmp.w	r8, #0
 8008f98:	dd09      	ble.n	8008fae <_dtoa_r+0x72e>
 8008f9a:	4545      	cmp	r5, r8
 8008f9c:	9a05      	ldr	r2, [sp, #20]
 8008f9e:	462b      	mov	r3, r5
 8008fa0:	bfa8      	it	ge
 8008fa2:	4643      	movge	r3, r8
 8008fa4:	1ad2      	subs	r2, r2, r3
 8008fa6:	9205      	str	r2, [sp, #20]
 8008fa8:	1aed      	subs	r5, r5, r3
 8008faa:	eba8 0803 	sub.w	r8, r8, r3
 8008fae:	9b07      	ldr	r3, [sp, #28]
 8008fb0:	b1eb      	cbz	r3, 8008fee <_dtoa_r+0x76e>
 8008fb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d067      	beq.n	8009088 <_dtoa_r+0x808>
 8008fb8:	b18f      	cbz	r7, 8008fde <_dtoa_r+0x75e>
 8008fba:	4631      	mov	r1, r6
 8008fbc:	463a      	mov	r2, r7
 8008fbe:	4620      	mov	r0, r4
 8008fc0:	f000 fd88 	bl	8009ad4 <__pow5mult>
 8008fc4:	9a04      	ldr	r2, [sp, #16]
 8008fc6:	4601      	mov	r1, r0
 8008fc8:	4606      	mov	r6, r0
 8008fca:	4620      	mov	r0, r4
 8008fcc:	f000 fcec 	bl	80099a8 <__multiply>
 8008fd0:	9904      	ldr	r1, [sp, #16]
 8008fd2:	9008      	str	r0, [sp, #32]
 8008fd4:	4620      	mov	r0, r4
 8008fd6:	f000 fc3e 	bl	8009856 <_Bfree>
 8008fda:	9b08      	ldr	r3, [sp, #32]
 8008fdc:	9304      	str	r3, [sp, #16]
 8008fde:	9b07      	ldr	r3, [sp, #28]
 8008fe0:	1bda      	subs	r2, r3, r7
 8008fe2:	d004      	beq.n	8008fee <_dtoa_r+0x76e>
 8008fe4:	9904      	ldr	r1, [sp, #16]
 8008fe6:	4620      	mov	r0, r4
 8008fe8:	f000 fd74 	bl	8009ad4 <__pow5mult>
 8008fec:	9004      	str	r0, [sp, #16]
 8008fee:	2101      	movs	r1, #1
 8008ff0:	4620      	mov	r0, r4
 8008ff2:	f000 fcd0 	bl	8009996 <__i2b>
 8008ff6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ff8:	4607      	mov	r7, r0
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	f000 81d0 	beq.w	80093a0 <_dtoa_r+0xb20>
 8009000:	461a      	mov	r2, r3
 8009002:	4601      	mov	r1, r0
 8009004:	4620      	mov	r0, r4
 8009006:	f000 fd65 	bl	8009ad4 <__pow5mult>
 800900a:	9b06      	ldr	r3, [sp, #24]
 800900c:	2b01      	cmp	r3, #1
 800900e:	4607      	mov	r7, r0
 8009010:	dc40      	bgt.n	8009094 <_dtoa_r+0x814>
 8009012:	9b00      	ldr	r3, [sp, #0]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d139      	bne.n	800908c <_dtoa_r+0x80c>
 8009018:	9b01      	ldr	r3, [sp, #4]
 800901a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800901e:	2b00      	cmp	r3, #0
 8009020:	d136      	bne.n	8009090 <_dtoa_r+0x810>
 8009022:	9b01      	ldr	r3, [sp, #4]
 8009024:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009028:	0d1b      	lsrs	r3, r3, #20
 800902a:	051b      	lsls	r3, r3, #20
 800902c:	b12b      	cbz	r3, 800903a <_dtoa_r+0x7ba>
 800902e:	9b05      	ldr	r3, [sp, #20]
 8009030:	3301      	adds	r3, #1
 8009032:	9305      	str	r3, [sp, #20]
 8009034:	f108 0801 	add.w	r8, r8, #1
 8009038:	2301      	movs	r3, #1
 800903a:	9307      	str	r3, [sp, #28]
 800903c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800903e:	2b00      	cmp	r3, #0
 8009040:	d12a      	bne.n	8009098 <_dtoa_r+0x818>
 8009042:	2001      	movs	r0, #1
 8009044:	e030      	b.n	80090a8 <_dtoa_r+0x828>
 8009046:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009048:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800904c:	e795      	b.n	8008f7a <_dtoa_r+0x6fa>
 800904e:	9b07      	ldr	r3, [sp, #28]
 8009050:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 8009054:	42bb      	cmp	r3, r7
 8009056:	bfbf      	itttt	lt
 8009058:	9b07      	ldrlt	r3, [sp, #28]
 800905a:	9707      	strlt	r7, [sp, #28]
 800905c:	1afa      	sublt	r2, r7, r3
 800905e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8009060:	bfbb      	ittet	lt
 8009062:	189b      	addlt	r3, r3, r2
 8009064:	930e      	strlt	r3, [sp, #56]	; 0x38
 8009066:	1bdf      	subge	r7, r3, r7
 8009068:	2700      	movlt	r7, #0
 800906a:	f1b9 0f00 	cmp.w	r9, #0
 800906e:	bfb5      	itete	lt
 8009070:	9b05      	ldrlt	r3, [sp, #20]
 8009072:	9d05      	ldrge	r5, [sp, #20]
 8009074:	eba3 0509 	sublt.w	r5, r3, r9
 8009078:	464b      	movge	r3, r9
 800907a:	bfb8      	it	lt
 800907c:	2300      	movlt	r3, #0
 800907e:	e77e      	b.n	8008f7e <_dtoa_r+0x6fe>
 8009080:	9f07      	ldr	r7, [sp, #28]
 8009082:	9d05      	ldr	r5, [sp, #20]
 8009084:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8009086:	e783      	b.n	8008f90 <_dtoa_r+0x710>
 8009088:	9a07      	ldr	r2, [sp, #28]
 800908a:	e7ab      	b.n	8008fe4 <_dtoa_r+0x764>
 800908c:	2300      	movs	r3, #0
 800908e:	e7d4      	b.n	800903a <_dtoa_r+0x7ba>
 8009090:	9b00      	ldr	r3, [sp, #0]
 8009092:	e7d2      	b.n	800903a <_dtoa_r+0x7ba>
 8009094:	2300      	movs	r3, #0
 8009096:	9307      	str	r3, [sp, #28]
 8009098:	693b      	ldr	r3, [r7, #16]
 800909a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800909e:	6918      	ldr	r0, [r3, #16]
 80090a0:	f000 fc2b 	bl	80098fa <__hi0bits>
 80090a4:	f1c0 0020 	rsb	r0, r0, #32
 80090a8:	4440      	add	r0, r8
 80090aa:	f010 001f 	ands.w	r0, r0, #31
 80090ae:	d047      	beq.n	8009140 <_dtoa_r+0x8c0>
 80090b0:	f1c0 0320 	rsb	r3, r0, #32
 80090b4:	2b04      	cmp	r3, #4
 80090b6:	dd3b      	ble.n	8009130 <_dtoa_r+0x8b0>
 80090b8:	9b05      	ldr	r3, [sp, #20]
 80090ba:	f1c0 001c 	rsb	r0, r0, #28
 80090be:	4403      	add	r3, r0
 80090c0:	9305      	str	r3, [sp, #20]
 80090c2:	4405      	add	r5, r0
 80090c4:	4480      	add	r8, r0
 80090c6:	9b05      	ldr	r3, [sp, #20]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	dd05      	ble.n	80090d8 <_dtoa_r+0x858>
 80090cc:	461a      	mov	r2, r3
 80090ce:	9904      	ldr	r1, [sp, #16]
 80090d0:	4620      	mov	r0, r4
 80090d2:	f000 fd4d 	bl	8009b70 <__lshift>
 80090d6:	9004      	str	r0, [sp, #16]
 80090d8:	f1b8 0f00 	cmp.w	r8, #0
 80090dc:	dd05      	ble.n	80090ea <_dtoa_r+0x86a>
 80090de:	4639      	mov	r1, r7
 80090e0:	4642      	mov	r2, r8
 80090e2:	4620      	mov	r0, r4
 80090e4:	f000 fd44 	bl	8009b70 <__lshift>
 80090e8:	4607      	mov	r7, r0
 80090ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80090ec:	b353      	cbz	r3, 8009144 <_dtoa_r+0x8c4>
 80090ee:	4639      	mov	r1, r7
 80090f0:	9804      	ldr	r0, [sp, #16]
 80090f2:	f000 fd91 	bl	8009c18 <__mcmp>
 80090f6:	2800      	cmp	r0, #0
 80090f8:	da24      	bge.n	8009144 <_dtoa_r+0x8c4>
 80090fa:	2300      	movs	r3, #0
 80090fc:	220a      	movs	r2, #10
 80090fe:	9904      	ldr	r1, [sp, #16]
 8009100:	4620      	mov	r0, r4
 8009102:	f000 fbbf 	bl	8009884 <__multadd>
 8009106:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009108:	9004      	str	r0, [sp, #16]
 800910a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800910e:	2b00      	cmp	r3, #0
 8009110:	f000 814d 	beq.w	80093ae <_dtoa_r+0xb2e>
 8009114:	2300      	movs	r3, #0
 8009116:	4631      	mov	r1, r6
 8009118:	220a      	movs	r2, #10
 800911a:	4620      	mov	r0, r4
 800911c:	f000 fbb2 	bl	8009884 <__multadd>
 8009120:	9b02      	ldr	r3, [sp, #8]
 8009122:	2b00      	cmp	r3, #0
 8009124:	4606      	mov	r6, r0
 8009126:	dc4f      	bgt.n	80091c8 <_dtoa_r+0x948>
 8009128:	9b06      	ldr	r3, [sp, #24]
 800912a:	2b02      	cmp	r3, #2
 800912c:	dd4c      	ble.n	80091c8 <_dtoa_r+0x948>
 800912e:	e011      	b.n	8009154 <_dtoa_r+0x8d4>
 8009130:	d0c9      	beq.n	80090c6 <_dtoa_r+0x846>
 8009132:	9a05      	ldr	r2, [sp, #20]
 8009134:	331c      	adds	r3, #28
 8009136:	441a      	add	r2, r3
 8009138:	9205      	str	r2, [sp, #20]
 800913a:	441d      	add	r5, r3
 800913c:	4498      	add	r8, r3
 800913e:	e7c2      	b.n	80090c6 <_dtoa_r+0x846>
 8009140:	4603      	mov	r3, r0
 8009142:	e7f6      	b.n	8009132 <_dtoa_r+0x8b2>
 8009144:	f1b9 0f00 	cmp.w	r9, #0
 8009148:	dc38      	bgt.n	80091bc <_dtoa_r+0x93c>
 800914a:	9b06      	ldr	r3, [sp, #24]
 800914c:	2b02      	cmp	r3, #2
 800914e:	dd35      	ble.n	80091bc <_dtoa_r+0x93c>
 8009150:	f8cd 9008 	str.w	r9, [sp, #8]
 8009154:	9b02      	ldr	r3, [sp, #8]
 8009156:	b963      	cbnz	r3, 8009172 <_dtoa_r+0x8f2>
 8009158:	4639      	mov	r1, r7
 800915a:	2205      	movs	r2, #5
 800915c:	4620      	mov	r0, r4
 800915e:	f000 fb91 	bl	8009884 <__multadd>
 8009162:	4601      	mov	r1, r0
 8009164:	4607      	mov	r7, r0
 8009166:	9804      	ldr	r0, [sp, #16]
 8009168:	f000 fd56 	bl	8009c18 <__mcmp>
 800916c:	2800      	cmp	r0, #0
 800916e:	f73f adcc 	bgt.w	8008d0a <_dtoa_r+0x48a>
 8009172:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009174:	465d      	mov	r5, fp
 8009176:	ea6f 0a03 	mvn.w	sl, r3
 800917a:	f04f 0900 	mov.w	r9, #0
 800917e:	4639      	mov	r1, r7
 8009180:	4620      	mov	r0, r4
 8009182:	f000 fb68 	bl	8009856 <_Bfree>
 8009186:	2e00      	cmp	r6, #0
 8009188:	f43f aeb7 	beq.w	8008efa <_dtoa_r+0x67a>
 800918c:	f1b9 0f00 	cmp.w	r9, #0
 8009190:	d005      	beq.n	800919e <_dtoa_r+0x91e>
 8009192:	45b1      	cmp	r9, r6
 8009194:	d003      	beq.n	800919e <_dtoa_r+0x91e>
 8009196:	4649      	mov	r1, r9
 8009198:	4620      	mov	r0, r4
 800919a:	f000 fb5c 	bl	8009856 <_Bfree>
 800919e:	4631      	mov	r1, r6
 80091a0:	4620      	mov	r0, r4
 80091a2:	f000 fb58 	bl	8009856 <_Bfree>
 80091a6:	e6a8      	b.n	8008efa <_dtoa_r+0x67a>
 80091a8:	2700      	movs	r7, #0
 80091aa:	463e      	mov	r6, r7
 80091ac:	e7e1      	b.n	8009172 <_dtoa_r+0x8f2>
 80091ae:	f8dd a020 	ldr.w	sl, [sp, #32]
 80091b2:	463e      	mov	r6, r7
 80091b4:	e5a9      	b.n	8008d0a <_dtoa_r+0x48a>
 80091b6:	bf00      	nop
 80091b8:	40240000 	.word	0x40240000
 80091bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091be:	f8cd 9008 	str.w	r9, [sp, #8]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	f000 80fa 	beq.w	80093bc <_dtoa_r+0xb3c>
 80091c8:	2d00      	cmp	r5, #0
 80091ca:	dd05      	ble.n	80091d8 <_dtoa_r+0x958>
 80091cc:	4631      	mov	r1, r6
 80091ce:	462a      	mov	r2, r5
 80091d0:	4620      	mov	r0, r4
 80091d2:	f000 fccd 	bl	8009b70 <__lshift>
 80091d6:	4606      	mov	r6, r0
 80091d8:	9b07      	ldr	r3, [sp, #28]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d04c      	beq.n	8009278 <_dtoa_r+0x9f8>
 80091de:	6871      	ldr	r1, [r6, #4]
 80091e0:	4620      	mov	r0, r4
 80091e2:	f000 fb04 	bl	80097ee <_Balloc>
 80091e6:	6932      	ldr	r2, [r6, #16]
 80091e8:	3202      	adds	r2, #2
 80091ea:	4605      	mov	r5, r0
 80091ec:	0092      	lsls	r2, r2, #2
 80091ee:	f106 010c 	add.w	r1, r6, #12
 80091f2:	300c      	adds	r0, #12
 80091f4:	f000 faf0 	bl	80097d8 <memcpy>
 80091f8:	2201      	movs	r2, #1
 80091fa:	4629      	mov	r1, r5
 80091fc:	4620      	mov	r0, r4
 80091fe:	f000 fcb7 	bl	8009b70 <__lshift>
 8009202:	9b00      	ldr	r3, [sp, #0]
 8009204:	f8cd b014 	str.w	fp, [sp, #20]
 8009208:	f003 0301 	and.w	r3, r3, #1
 800920c:	46b1      	mov	r9, r6
 800920e:	9307      	str	r3, [sp, #28]
 8009210:	4606      	mov	r6, r0
 8009212:	4639      	mov	r1, r7
 8009214:	9804      	ldr	r0, [sp, #16]
 8009216:	f7ff faa7 	bl	8008768 <quorem>
 800921a:	4649      	mov	r1, r9
 800921c:	4605      	mov	r5, r0
 800921e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009222:	9804      	ldr	r0, [sp, #16]
 8009224:	f000 fcf8 	bl	8009c18 <__mcmp>
 8009228:	4632      	mov	r2, r6
 800922a:	9000      	str	r0, [sp, #0]
 800922c:	4639      	mov	r1, r7
 800922e:	4620      	mov	r0, r4
 8009230:	f000 fd0c 	bl	8009c4c <__mdiff>
 8009234:	68c3      	ldr	r3, [r0, #12]
 8009236:	4602      	mov	r2, r0
 8009238:	bb03      	cbnz	r3, 800927c <_dtoa_r+0x9fc>
 800923a:	4601      	mov	r1, r0
 800923c:	9008      	str	r0, [sp, #32]
 800923e:	9804      	ldr	r0, [sp, #16]
 8009240:	f000 fcea 	bl	8009c18 <__mcmp>
 8009244:	9a08      	ldr	r2, [sp, #32]
 8009246:	4603      	mov	r3, r0
 8009248:	4611      	mov	r1, r2
 800924a:	4620      	mov	r0, r4
 800924c:	9308      	str	r3, [sp, #32]
 800924e:	f000 fb02 	bl	8009856 <_Bfree>
 8009252:	9b08      	ldr	r3, [sp, #32]
 8009254:	b9a3      	cbnz	r3, 8009280 <_dtoa_r+0xa00>
 8009256:	9a06      	ldr	r2, [sp, #24]
 8009258:	b992      	cbnz	r2, 8009280 <_dtoa_r+0xa00>
 800925a:	9a07      	ldr	r2, [sp, #28]
 800925c:	b982      	cbnz	r2, 8009280 <_dtoa_r+0xa00>
 800925e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009262:	d029      	beq.n	80092b8 <_dtoa_r+0xa38>
 8009264:	9b00      	ldr	r3, [sp, #0]
 8009266:	2b00      	cmp	r3, #0
 8009268:	dd01      	ble.n	800926e <_dtoa_r+0x9ee>
 800926a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800926e:	9b05      	ldr	r3, [sp, #20]
 8009270:	1c5d      	adds	r5, r3, #1
 8009272:	f883 8000 	strb.w	r8, [r3]
 8009276:	e782      	b.n	800917e <_dtoa_r+0x8fe>
 8009278:	4630      	mov	r0, r6
 800927a:	e7c2      	b.n	8009202 <_dtoa_r+0x982>
 800927c:	2301      	movs	r3, #1
 800927e:	e7e3      	b.n	8009248 <_dtoa_r+0x9c8>
 8009280:	9a00      	ldr	r2, [sp, #0]
 8009282:	2a00      	cmp	r2, #0
 8009284:	db04      	blt.n	8009290 <_dtoa_r+0xa10>
 8009286:	d125      	bne.n	80092d4 <_dtoa_r+0xa54>
 8009288:	9a06      	ldr	r2, [sp, #24]
 800928a:	bb1a      	cbnz	r2, 80092d4 <_dtoa_r+0xa54>
 800928c:	9a07      	ldr	r2, [sp, #28]
 800928e:	bb0a      	cbnz	r2, 80092d4 <_dtoa_r+0xa54>
 8009290:	2b00      	cmp	r3, #0
 8009292:	ddec      	ble.n	800926e <_dtoa_r+0x9ee>
 8009294:	2201      	movs	r2, #1
 8009296:	9904      	ldr	r1, [sp, #16]
 8009298:	4620      	mov	r0, r4
 800929a:	f000 fc69 	bl	8009b70 <__lshift>
 800929e:	4639      	mov	r1, r7
 80092a0:	9004      	str	r0, [sp, #16]
 80092a2:	f000 fcb9 	bl	8009c18 <__mcmp>
 80092a6:	2800      	cmp	r0, #0
 80092a8:	dc03      	bgt.n	80092b2 <_dtoa_r+0xa32>
 80092aa:	d1e0      	bne.n	800926e <_dtoa_r+0x9ee>
 80092ac:	f018 0f01 	tst.w	r8, #1
 80092b0:	d0dd      	beq.n	800926e <_dtoa_r+0x9ee>
 80092b2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80092b6:	d1d8      	bne.n	800926a <_dtoa_r+0x9ea>
 80092b8:	9b05      	ldr	r3, [sp, #20]
 80092ba:	9a05      	ldr	r2, [sp, #20]
 80092bc:	1c5d      	adds	r5, r3, #1
 80092be:	2339      	movs	r3, #57	; 0x39
 80092c0:	7013      	strb	r3, [r2, #0]
 80092c2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80092c6:	2b39      	cmp	r3, #57	; 0x39
 80092c8:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80092cc:	d04f      	beq.n	800936e <_dtoa_r+0xaee>
 80092ce:	3301      	adds	r3, #1
 80092d0:	7013      	strb	r3, [r2, #0]
 80092d2:	e754      	b.n	800917e <_dtoa_r+0x8fe>
 80092d4:	9a05      	ldr	r2, [sp, #20]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	f102 0501 	add.w	r5, r2, #1
 80092dc:	dd06      	ble.n	80092ec <_dtoa_r+0xa6c>
 80092de:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80092e2:	d0e9      	beq.n	80092b8 <_dtoa_r+0xa38>
 80092e4:	f108 0801 	add.w	r8, r8, #1
 80092e8:	9b05      	ldr	r3, [sp, #20]
 80092ea:	e7c2      	b.n	8009272 <_dtoa_r+0x9f2>
 80092ec:	9a02      	ldr	r2, [sp, #8]
 80092ee:	f805 8c01 	strb.w	r8, [r5, #-1]
 80092f2:	eba5 030b 	sub.w	r3, r5, fp
 80092f6:	4293      	cmp	r3, r2
 80092f8:	d021      	beq.n	800933e <_dtoa_r+0xabe>
 80092fa:	2300      	movs	r3, #0
 80092fc:	220a      	movs	r2, #10
 80092fe:	9904      	ldr	r1, [sp, #16]
 8009300:	4620      	mov	r0, r4
 8009302:	f000 fabf 	bl	8009884 <__multadd>
 8009306:	45b1      	cmp	r9, r6
 8009308:	9004      	str	r0, [sp, #16]
 800930a:	f04f 0300 	mov.w	r3, #0
 800930e:	f04f 020a 	mov.w	r2, #10
 8009312:	4649      	mov	r1, r9
 8009314:	4620      	mov	r0, r4
 8009316:	d105      	bne.n	8009324 <_dtoa_r+0xaa4>
 8009318:	f000 fab4 	bl	8009884 <__multadd>
 800931c:	4681      	mov	r9, r0
 800931e:	4606      	mov	r6, r0
 8009320:	9505      	str	r5, [sp, #20]
 8009322:	e776      	b.n	8009212 <_dtoa_r+0x992>
 8009324:	f000 faae 	bl	8009884 <__multadd>
 8009328:	4631      	mov	r1, r6
 800932a:	4681      	mov	r9, r0
 800932c:	2300      	movs	r3, #0
 800932e:	220a      	movs	r2, #10
 8009330:	4620      	mov	r0, r4
 8009332:	f000 faa7 	bl	8009884 <__multadd>
 8009336:	4606      	mov	r6, r0
 8009338:	e7f2      	b.n	8009320 <_dtoa_r+0xaa0>
 800933a:	f04f 0900 	mov.w	r9, #0
 800933e:	2201      	movs	r2, #1
 8009340:	9904      	ldr	r1, [sp, #16]
 8009342:	4620      	mov	r0, r4
 8009344:	f000 fc14 	bl	8009b70 <__lshift>
 8009348:	4639      	mov	r1, r7
 800934a:	9004      	str	r0, [sp, #16]
 800934c:	f000 fc64 	bl	8009c18 <__mcmp>
 8009350:	2800      	cmp	r0, #0
 8009352:	dcb6      	bgt.n	80092c2 <_dtoa_r+0xa42>
 8009354:	d102      	bne.n	800935c <_dtoa_r+0xadc>
 8009356:	f018 0f01 	tst.w	r8, #1
 800935a:	d1b2      	bne.n	80092c2 <_dtoa_r+0xa42>
 800935c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009360:	2b30      	cmp	r3, #48	; 0x30
 8009362:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8009366:	f47f af0a 	bne.w	800917e <_dtoa_r+0x8fe>
 800936a:	4615      	mov	r5, r2
 800936c:	e7f6      	b.n	800935c <_dtoa_r+0xadc>
 800936e:	4593      	cmp	fp, r2
 8009370:	d105      	bne.n	800937e <_dtoa_r+0xafe>
 8009372:	2331      	movs	r3, #49	; 0x31
 8009374:	f10a 0a01 	add.w	sl, sl, #1
 8009378:	f88b 3000 	strb.w	r3, [fp]
 800937c:	e6ff      	b.n	800917e <_dtoa_r+0x8fe>
 800937e:	4615      	mov	r5, r2
 8009380:	e79f      	b.n	80092c2 <_dtoa_r+0xa42>
 8009382:	f8df b064 	ldr.w	fp, [pc, #100]	; 80093e8 <_dtoa_r+0xb68>
 8009386:	e007      	b.n	8009398 <_dtoa_r+0xb18>
 8009388:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800938a:	f8df b060 	ldr.w	fp, [pc, #96]	; 80093ec <_dtoa_r+0xb6c>
 800938e:	b11b      	cbz	r3, 8009398 <_dtoa_r+0xb18>
 8009390:	f10b 0308 	add.w	r3, fp, #8
 8009394:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009396:	6013      	str	r3, [r2, #0]
 8009398:	4658      	mov	r0, fp
 800939a:	b017      	add	sp, #92	; 0x5c
 800939c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093a0:	9b06      	ldr	r3, [sp, #24]
 80093a2:	2b01      	cmp	r3, #1
 80093a4:	f77f ae35 	ble.w	8009012 <_dtoa_r+0x792>
 80093a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80093aa:	9307      	str	r3, [sp, #28]
 80093ac:	e649      	b.n	8009042 <_dtoa_r+0x7c2>
 80093ae:	9b02      	ldr	r3, [sp, #8]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	dc03      	bgt.n	80093bc <_dtoa_r+0xb3c>
 80093b4:	9b06      	ldr	r3, [sp, #24]
 80093b6:	2b02      	cmp	r3, #2
 80093b8:	f73f aecc 	bgt.w	8009154 <_dtoa_r+0x8d4>
 80093bc:	465d      	mov	r5, fp
 80093be:	4639      	mov	r1, r7
 80093c0:	9804      	ldr	r0, [sp, #16]
 80093c2:	f7ff f9d1 	bl	8008768 <quorem>
 80093c6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80093ca:	f805 8b01 	strb.w	r8, [r5], #1
 80093ce:	9a02      	ldr	r2, [sp, #8]
 80093d0:	eba5 030b 	sub.w	r3, r5, fp
 80093d4:	429a      	cmp	r2, r3
 80093d6:	ddb0      	ble.n	800933a <_dtoa_r+0xaba>
 80093d8:	2300      	movs	r3, #0
 80093da:	220a      	movs	r2, #10
 80093dc:	9904      	ldr	r1, [sp, #16]
 80093de:	4620      	mov	r0, r4
 80093e0:	f000 fa50 	bl	8009884 <__multadd>
 80093e4:	9004      	str	r0, [sp, #16]
 80093e6:	e7ea      	b.n	80093be <_dtoa_r+0xb3e>
 80093e8:	0800b66c 	.word	0x0800b66c
 80093ec:	0800b690 	.word	0x0800b690

080093f0 <__sflush_r>:
 80093f0:	898a      	ldrh	r2, [r1, #12]
 80093f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093f6:	4605      	mov	r5, r0
 80093f8:	0710      	lsls	r0, r2, #28
 80093fa:	460c      	mov	r4, r1
 80093fc:	d458      	bmi.n	80094b0 <__sflush_r+0xc0>
 80093fe:	684b      	ldr	r3, [r1, #4]
 8009400:	2b00      	cmp	r3, #0
 8009402:	dc05      	bgt.n	8009410 <__sflush_r+0x20>
 8009404:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009406:	2b00      	cmp	r3, #0
 8009408:	dc02      	bgt.n	8009410 <__sflush_r+0x20>
 800940a:	2000      	movs	r0, #0
 800940c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009410:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009412:	2e00      	cmp	r6, #0
 8009414:	d0f9      	beq.n	800940a <__sflush_r+0x1a>
 8009416:	2300      	movs	r3, #0
 8009418:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800941c:	682f      	ldr	r7, [r5, #0]
 800941e:	6a21      	ldr	r1, [r4, #32]
 8009420:	602b      	str	r3, [r5, #0]
 8009422:	d032      	beq.n	800948a <__sflush_r+0x9a>
 8009424:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009426:	89a3      	ldrh	r3, [r4, #12]
 8009428:	075a      	lsls	r2, r3, #29
 800942a:	d505      	bpl.n	8009438 <__sflush_r+0x48>
 800942c:	6863      	ldr	r3, [r4, #4]
 800942e:	1ac0      	subs	r0, r0, r3
 8009430:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009432:	b10b      	cbz	r3, 8009438 <__sflush_r+0x48>
 8009434:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009436:	1ac0      	subs	r0, r0, r3
 8009438:	2300      	movs	r3, #0
 800943a:	4602      	mov	r2, r0
 800943c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800943e:	6a21      	ldr	r1, [r4, #32]
 8009440:	4628      	mov	r0, r5
 8009442:	47b0      	blx	r6
 8009444:	1c43      	adds	r3, r0, #1
 8009446:	89a3      	ldrh	r3, [r4, #12]
 8009448:	d106      	bne.n	8009458 <__sflush_r+0x68>
 800944a:	6829      	ldr	r1, [r5, #0]
 800944c:	291d      	cmp	r1, #29
 800944e:	d848      	bhi.n	80094e2 <__sflush_r+0xf2>
 8009450:	4a29      	ldr	r2, [pc, #164]	; (80094f8 <__sflush_r+0x108>)
 8009452:	40ca      	lsrs	r2, r1
 8009454:	07d6      	lsls	r6, r2, #31
 8009456:	d544      	bpl.n	80094e2 <__sflush_r+0xf2>
 8009458:	2200      	movs	r2, #0
 800945a:	6062      	str	r2, [r4, #4]
 800945c:	04d9      	lsls	r1, r3, #19
 800945e:	6922      	ldr	r2, [r4, #16]
 8009460:	6022      	str	r2, [r4, #0]
 8009462:	d504      	bpl.n	800946e <__sflush_r+0x7e>
 8009464:	1c42      	adds	r2, r0, #1
 8009466:	d101      	bne.n	800946c <__sflush_r+0x7c>
 8009468:	682b      	ldr	r3, [r5, #0]
 800946a:	b903      	cbnz	r3, 800946e <__sflush_r+0x7e>
 800946c:	6560      	str	r0, [r4, #84]	; 0x54
 800946e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009470:	602f      	str	r7, [r5, #0]
 8009472:	2900      	cmp	r1, #0
 8009474:	d0c9      	beq.n	800940a <__sflush_r+0x1a>
 8009476:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800947a:	4299      	cmp	r1, r3
 800947c:	d002      	beq.n	8009484 <__sflush_r+0x94>
 800947e:	4628      	mov	r0, r5
 8009480:	f000 fc9e 	bl	8009dc0 <_free_r>
 8009484:	2000      	movs	r0, #0
 8009486:	6360      	str	r0, [r4, #52]	; 0x34
 8009488:	e7c0      	b.n	800940c <__sflush_r+0x1c>
 800948a:	2301      	movs	r3, #1
 800948c:	4628      	mov	r0, r5
 800948e:	47b0      	blx	r6
 8009490:	1c41      	adds	r1, r0, #1
 8009492:	d1c8      	bne.n	8009426 <__sflush_r+0x36>
 8009494:	682b      	ldr	r3, [r5, #0]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d0c5      	beq.n	8009426 <__sflush_r+0x36>
 800949a:	2b1d      	cmp	r3, #29
 800949c:	d001      	beq.n	80094a2 <__sflush_r+0xb2>
 800949e:	2b16      	cmp	r3, #22
 80094a0:	d101      	bne.n	80094a6 <__sflush_r+0xb6>
 80094a2:	602f      	str	r7, [r5, #0]
 80094a4:	e7b1      	b.n	800940a <__sflush_r+0x1a>
 80094a6:	89a3      	ldrh	r3, [r4, #12]
 80094a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094ac:	81a3      	strh	r3, [r4, #12]
 80094ae:	e7ad      	b.n	800940c <__sflush_r+0x1c>
 80094b0:	690f      	ldr	r7, [r1, #16]
 80094b2:	2f00      	cmp	r7, #0
 80094b4:	d0a9      	beq.n	800940a <__sflush_r+0x1a>
 80094b6:	0793      	lsls	r3, r2, #30
 80094b8:	680e      	ldr	r6, [r1, #0]
 80094ba:	bf08      	it	eq
 80094bc:	694b      	ldreq	r3, [r1, #20]
 80094be:	600f      	str	r7, [r1, #0]
 80094c0:	bf18      	it	ne
 80094c2:	2300      	movne	r3, #0
 80094c4:	eba6 0807 	sub.w	r8, r6, r7
 80094c8:	608b      	str	r3, [r1, #8]
 80094ca:	f1b8 0f00 	cmp.w	r8, #0
 80094ce:	dd9c      	ble.n	800940a <__sflush_r+0x1a>
 80094d0:	4643      	mov	r3, r8
 80094d2:	463a      	mov	r2, r7
 80094d4:	6a21      	ldr	r1, [r4, #32]
 80094d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80094d8:	4628      	mov	r0, r5
 80094da:	47b0      	blx	r6
 80094dc:	2800      	cmp	r0, #0
 80094de:	dc06      	bgt.n	80094ee <__sflush_r+0xfe>
 80094e0:	89a3      	ldrh	r3, [r4, #12]
 80094e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094e6:	81a3      	strh	r3, [r4, #12]
 80094e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80094ec:	e78e      	b.n	800940c <__sflush_r+0x1c>
 80094ee:	4407      	add	r7, r0
 80094f0:	eba8 0800 	sub.w	r8, r8, r0
 80094f4:	e7e9      	b.n	80094ca <__sflush_r+0xda>
 80094f6:	bf00      	nop
 80094f8:	20400001 	.word	0x20400001

080094fc <_fflush_r>:
 80094fc:	b538      	push	{r3, r4, r5, lr}
 80094fe:	690b      	ldr	r3, [r1, #16]
 8009500:	4605      	mov	r5, r0
 8009502:	460c      	mov	r4, r1
 8009504:	b1db      	cbz	r3, 800953e <_fflush_r+0x42>
 8009506:	b118      	cbz	r0, 8009510 <_fflush_r+0x14>
 8009508:	6983      	ldr	r3, [r0, #24]
 800950a:	b90b      	cbnz	r3, 8009510 <_fflush_r+0x14>
 800950c:	f000 f860 	bl	80095d0 <__sinit>
 8009510:	4b0c      	ldr	r3, [pc, #48]	; (8009544 <_fflush_r+0x48>)
 8009512:	429c      	cmp	r4, r3
 8009514:	d109      	bne.n	800952a <_fflush_r+0x2e>
 8009516:	686c      	ldr	r4, [r5, #4]
 8009518:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800951c:	b17b      	cbz	r3, 800953e <_fflush_r+0x42>
 800951e:	4621      	mov	r1, r4
 8009520:	4628      	mov	r0, r5
 8009522:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009526:	f7ff bf63 	b.w	80093f0 <__sflush_r>
 800952a:	4b07      	ldr	r3, [pc, #28]	; (8009548 <_fflush_r+0x4c>)
 800952c:	429c      	cmp	r4, r3
 800952e:	d101      	bne.n	8009534 <_fflush_r+0x38>
 8009530:	68ac      	ldr	r4, [r5, #8]
 8009532:	e7f1      	b.n	8009518 <_fflush_r+0x1c>
 8009534:	4b05      	ldr	r3, [pc, #20]	; (800954c <_fflush_r+0x50>)
 8009536:	429c      	cmp	r4, r3
 8009538:	bf08      	it	eq
 800953a:	68ec      	ldreq	r4, [r5, #12]
 800953c:	e7ec      	b.n	8009518 <_fflush_r+0x1c>
 800953e:	2000      	movs	r0, #0
 8009540:	bd38      	pop	{r3, r4, r5, pc}
 8009542:	bf00      	nop
 8009544:	0800b6c0 	.word	0x0800b6c0
 8009548:	0800b6e0 	.word	0x0800b6e0
 800954c:	0800b6a0 	.word	0x0800b6a0

08009550 <std>:
 8009550:	2300      	movs	r3, #0
 8009552:	b510      	push	{r4, lr}
 8009554:	4604      	mov	r4, r0
 8009556:	e9c0 3300 	strd	r3, r3, [r0]
 800955a:	6083      	str	r3, [r0, #8]
 800955c:	8181      	strh	r1, [r0, #12]
 800955e:	6643      	str	r3, [r0, #100]	; 0x64
 8009560:	81c2      	strh	r2, [r0, #14]
 8009562:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009566:	6183      	str	r3, [r0, #24]
 8009568:	4619      	mov	r1, r3
 800956a:	2208      	movs	r2, #8
 800956c:	305c      	adds	r0, #92	; 0x5c
 800956e:	f7fe fb5b 	bl	8007c28 <memset>
 8009572:	4b05      	ldr	r3, [pc, #20]	; (8009588 <std+0x38>)
 8009574:	6263      	str	r3, [r4, #36]	; 0x24
 8009576:	4b05      	ldr	r3, [pc, #20]	; (800958c <std+0x3c>)
 8009578:	62a3      	str	r3, [r4, #40]	; 0x28
 800957a:	4b05      	ldr	r3, [pc, #20]	; (8009590 <std+0x40>)
 800957c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800957e:	4b05      	ldr	r3, [pc, #20]	; (8009594 <std+0x44>)
 8009580:	6224      	str	r4, [r4, #32]
 8009582:	6323      	str	r3, [r4, #48]	; 0x30
 8009584:	bd10      	pop	{r4, pc}
 8009586:	bf00      	nop
 8009588:	0800a1b1 	.word	0x0800a1b1
 800958c:	0800a1d3 	.word	0x0800a1d3
 8009590:	0800a20b 	.word	0x0800a20b
 8009594:	0800a22f 	.word	0x0800a22f

08009598 <_cleanup_r>:
 8009598:	4901      	ldr	r1, [pc, #4]	; (80095a0 <_cleanup_r+0x8>)
 800959a:	f000 b885 	b.w	80096a8 <_fwalk_reent>
 800959e:	bf00      	nop
 80095a0:	080094fd 	.word	0x080094fd

080095a4 <__sfmoreglue>:
 80095a4:	b570      	push	{r4, r5, r6, lr}
 80095a6:	1e4a      	subs	r2, r1, #1
 80095a8:	2568      	movs	r5, #104	; 0x68
 80095aa:	4355      	muls	r5, r2
 80095ac:	460e      	mov	r6, r1
 80095ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80095b2:	f000 fc53 	bl	8009e5c <_malloc_r>
 80095b6:	4604      	mov	r4, r0
 80095b8:	b140      	cbz	r0, 80095cc <__sfmoreglue+0x28>
 80095ba:	2100      	movs	r1, #0
 80095bc:	e9c0 1600 	strd	r1, r6, [r0]
 80095c0:	300c      	adds	r0, #12
 80095c2:	60a0      	str	r0, [r4, #8]
 80095c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80095c8:	f7fe fb2e 	bl	8007c28 <memset>
 80095cc:	4620      	mov	r0, r4
 80095ce:	bd70      	pop	{r4, r5, r6, pc}

080095d0 <__sinit>:
 80095d0:	6983      	ldr	r3, [r0, #24]
 80095d2:	b510      	push	{r4, lr}
 80095d4:	4604      	mov	r4, r0
 80095d6:	bb33      	cbnz	r3, 8009626 <__sinit+0x56>
 80095d8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80095dc:	6503      	str	r3, [r0, #80]	; 0x50
 80095de:	4b12      	ldr	r3, [pc, #72]	; (8009628 <__sinit+0x58>)
 80095e0:	4a12      	ldr	r2, [pc, #72]	; (800962c <__sinit+0x5c>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	6282      	str	r2, [r0, #40]	; 0x28
 80095e6:	4298      	cmp	r0, r3
 80095e8:	bf04      	itt	eq
 80095ea:	2301      	moveq	r3, #1
 80095ec:	6183      	streq	r3, [r0, #24]
 80095ee:	f000 f81f 	bl	8009630 <__sfp>
 80095f2:	6060      	str	r0, [r4, #4]
 80095f4:	4620      	mov	r0, r4
 80095f6:	f000 f81b 	bl	8009630 <__sfp>
 80095fa:	60a0      	str	r0, [r4, #8]
 80095fc:	4620      	mov	r0, r4
 80095fe:	f000 f817 	bl	8009630 <__sfp>
 8009602:	2200      	movs	r2, #0
 8009604:	60e0      	str	r0, [r4, #12]
 8009606:	2104      	movs	r1, #4
 8009608:	6860      	ldr	r0, [r4, #4]
 800960a:	f7ff ffa1 	bl	8009550 <std>
 800960e:	2201      	movs	r2, #1
 8009610:	2109      	movs	r1, #9
 8009612:	68a0      	ldr	r0, [r4, #8]
 8009614:	f7ff ff9c 	bl	8009550 <std>
 8009618:	2202      	movs	r2, #2
 800961a:	2112      	movs	r1, #18
 800961c:	68e0      	ldr	r0, [r4, #12]
 800961e:	f7ff ff97 	bl	8009550 <std>
 8009622:	2301      	movs	r3, #1
 8009624:	61a3      	str	r3, [r4, #24]
 8009626:	bd10      	pop	{r4, pc}
 8009628:	0800b65c 	.word	0x0800b65c
 800962c:	08009599 	.word	0x08009599

08009630 <__sfp>:
 8009630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009632:	4b1b      	ldr	r3, [pc, #108]	; (80096a0 <__sfp+0x70>)
 8009634:	681e      	ldr	r6, [r3, #0]
 8009636:	69b3      	ldr	r3, [r6, #24]
 8009638:	4607      	mov	r7, r0
 800963a:	b913      	cbnz	r3, 8009642 <__sfp+0x12>
 800963c:	4630      	mov	r0, r6
 800963e:	f7ff ffc7 	bl	80095d0 <__sinit>
 8009642:	3648      	adds	r6, #72	; 0x48
 8009644:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009648:	3b01      	subs	r3, #1
 800964a:	d503      	bpl.n	8009654 <__sfp+0x24>
 800964c:	6833      	ldr	r3, [r6, #0]
 800964e:	b133      	cbz	r3, 800965e <__sfp+0x2e>
 8009650:	6836      	ldr	r6, [r6, #0]
 8009652:	e7f7      	b.n	8009644 <__sfp+0x14>
 8009654:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009658:	b16d      	cbz	r5, 8009676 <__sfp+0x46>
 800965a:	3468      	adds	r4, #104	; 0x68
 800965c:	e7f4      	b.n	8009648 <__sfp+0x18>
 800965e:	2104      	movs	r1, #4
 8009660:	4638      	mov	r0, r7
 8009662:	f7ff ff9f 	bl	80095a4 <__sfmoreglue>
 8009666:	6030      	str	r0, [r6, #0]
 8009668:	2800      	cmp	r0, #0
 800966a:	d1f1      	bne.n	8009650 <__sfp+0x20>
 800966c:	230c      	movs	r3, #12
 800966e:	603b      	str	r3, [r7, #0]
 8009670:	4604      	mov	r4, r0
 8009672:	4620      	mov	r0, r4
 8009674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009676:	4b0b      	ldr	r3, [pc, #44]	; (80096a4 <__sfp+0x74>)
 8009678:	6665      	str	r5, [r4, #100]	; 0x64
 800967a:	e9c4 5500 	strd	r5, r5, [r4]
 800967e:	60a5      	str	r5, [r4, #8]
 8009680:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8009684:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8009688:	2208      	movs	r2, #8
 800968a:	4629      	mov	r1, r5
 800968c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009690:	f7fe faca 	bl	8007c28 <memset>
 8009694:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009698:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800969c:	e7e9      	b.n	8009672 <__sfp+0x42>
 800969e:	bf00      	nop
 80096a0:	0800b65c 	.word	0x0800b65c
 80096a4:	ffff0001 	.word	0xffff0001

080096a8 <_fwalk_reent>:
 80096a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096ac:	4680      	mov	r8, r0
 80096ae:	4689      	mov	r9, r1
 80096b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80096b4:	2600      	movs	r6, #0
 80096b6:	b914      	cbnz	r4, 80096be <_fwalk_reent+0x16>
 80096b8:	4630      	mov	r0, r6
 80096ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096be:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80096c2:	3f01      	subs	r7, #1
 80096c4:	d501      	bpl.n	80096ca <_fwalk_reent+0x22>
 80096c6:	6824      	ldr	r4, [r4, #0]
 80096c8:	e7f5      	b.n	80096b6 <_fwalk_reent+0xe>
 80096ca:	89ab      	ldrh	r3, [r5, #12]
 80096cc:	2b01      	cmp	r3, #1
 80096ce:	d907      	bls.n	80096e0 <_fwalk_reent+0x38>
 80096d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80096d4:	3301      	adds	r3, #1
 80096d6:	d003      	beq.n	80096e0 <_fwalk_reent+0x38>
 80096d8:	4629      	mov	r1, r5
 80096da:	4640      	mov	r0, r8
 80096dc:	47c8      	blx	r9
 80096de:	4306      	orrs	r6, r0
 80096e0:	3568      	adds	r5, #104	; 0x68
 80096e2:	e7ee      	b.n	80096c2 <_fwalk_reent+0x1a>

080096e4 <_localeconv_r>:
 80096e4:	4b04      	ldr	r3, [pc, #16]	; (80096f8 <_localeconv_r+0x14>)
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	6a18      	ldr	r0, [r3, #32]
 80096ea:	4b04      	ldr	r3, [pc, #16]	; (80096fc <_localeconv_r+0x18>)
 80096ec:	2800      	cmp	r0, #0
 80096ee:	bf08      	it	eq
 80096f0:	4618      	moveq	r0, r3
 80096f2:	30f0      	adds	r0, #240	; 0xf0
 80096f4:	4770      	bx	lr
 80096f6:	bf00      	nop
 80096f8:	20000010 	.word	0x20000010
 80096fc:	20000074 	.word	0x20000074

08009700 <__swhatbuf_r>:
 8009700:	b570      	push	{r4, r5, r6, lr}
 8009702:	460e      	mov	r6, r1
 8009704:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009708:	2900      	cmp	r1, #0
 800970a:	b096      	sub	sp, #88	; 0x58
 800970c:	4614      	mov	r4, r2
 800970e:	461d      	mov	r5, r3
 8009710:	da07      	bge.n	8009722 <__swhatbuf_r+0x22>
 8009712:	2300      	movs	r3, #0
 8009714:	602b      	str	r3, [r5, #0]
 8009716:	89b3      	ldrh	r3, [r6, #12]
 8009718:	061a      	lsls	r2, r3, #24
 800971a:	d410      	bmi.n	800973e <__swhatbuf_r+0x3e>
 800971c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009720:	e00e      	b.n	8009740 <__swhatbuf_r+0x40>
 8009722:	466a      	mov	r2, sp
 8009724:	f000 fdaa 	bl	800a27c <_fstat_r>
 8009728:	2800      	cmp	r0, #0
 800972a:	dbf2      	blt.n	8009712 <__swhatbuf_r+0x12>
 800972c:	9a01      	ldr	r2, [sp, #4]
 800972e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009732:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009736:	425a      	negs	r2, r3
 8009738:	415a      	adcs	r2, r3
 800973a:	602a      	str	r2, [r5, #0]
 800973c:	e7ee      	b.n	800971c <__swhatbuf_r+0x1c>
 800973e:	2340      	movs	r3, #64	; 0x40
 8009740:	2000      	movs	r0, #0
 8009742:	6023      	str	r3, [r4, #0]
 8009744:	b016      	add	sp, #88	; 0x58
 8009746:	bd70      	pop	{r4, r5, r6, pc}

08009748 <__smakebuf_r>:
 8009748:	898b      	ldrh	r3, [r1, #12]
 800974a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800974c:	079d      	lsls	r5, r3, #30
 800974e:	4606      	mov	r6, r0
 8009750:	460c      	mov	r4, r1
 8009752:	d507      	bpl.n	8009764 <__smakebuf_r+0x1c>
 8009754:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009758:	6023      	str	r3, [r4, #0]
 800975a:	6123      	str	r3, [r4, #16]
 800975c:	2301      	movs	r3, #1
 800975e:	6163      	str	r3, [r4, #20]
 8009760:	b002      	add	sp, #8
 8009762:	bd70      	pop	{r4, r5, r6, pc}
 8009764:	ab01      	add	r3, sp, #4
 8009766:	466a      	mov	r2, sp
 8009768:	f7ff ffca 	bl	8009700 <__swhatbuf_r>
 800976c:	9900      	ldr	r1, [sp, #0]
 800976e:	4605      	mov	r5, r0
 8009770:	4630      	mov	r0, r6
 8009772:	f000 fb73 	bl	8009e5c <_malloc_r>
 8009776:	b948      	cbnz	r0, 800978c <__smakebuf_r+0x44>
 8009778:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800977c:	059a      	lsls	r2, r3, #22
 800977e:	d4ef      	bmi.n	8009760 <__smakebuf_r+0x18>
 8009780:	f023 0303 	bic.w	r3, r3, #3
 8009784:	f043 0302 	orr.w	r3, r3, #2
 8009788:	81a3      	strh	r3, [r4, #12]
 800978a:	e7e3      	b.n	8009754 <__smakebuf_r+0xc>
 800978c:	4b0d      	ldr	r3, [pc, #52]	; (80097c4 <__smakebuf_r+0x7c>)
 800978e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009790:	89a3      	ldrh	r3, [r4, #12]
 8009792:	6020      	str	r0, [r4, #0]
 8009794:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009798:	81a3      	strh	r3, [r4, #12]
 800979a:	9b00      	ldr	r3, [sp, #0]
 800979c:	6163      	str	r3, [r4, #20]
 800979e:	9b01      	ldr	r3, [sp, #4]
 80097a0:	6120      	str	r0, [r4, #16]
 80097a2:	b15b      	cbz	r3, 80097bc <__smakebuf_r+0x74>
 80097a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80097a8:	4630      	mov	r0, r6
 80097aa:	f000 fd79 	bl	800a2a0 <_isatty_r>
 80097ae:	b128      	cbz	r0, 80097bc <__smakebuf_r+0x74>
 80097b0:	89a3      	ldrh	r3, [r4, #12]
 80097b2:	f023 0303 	bic.w	r3, r3, #3
 80097b6:	f043 0301 	orr.w	r3, r3, #1
 80097ba:	81a3      	strh	r3, [r4, #12]
 80097bc:	89a3      	ldrh	r3, [r4, #12]
 80097be:	431d      	orrs	r5, r3
 80097c0:	81a5      	strh	r5, [r4, #12]
 80097c2:	e7cd      	b.n	8009760 <__smakebuf_r+0x18>
 80097c4:	08009599 	.word	0x08009599

080097c8 <malloc>:
 80097c8:	4b02      	ldr	r3, [pc, #8]	; (80097d4 <malloc+0xc>)
 80097ca:	4601      	mov	r1, r0
 80097cc:	6818      	ldr	r0, [r3, #0]
 80097ce:	f000 bb45 	b.w	8009e5c <_malloc_r>
 80097d2:	bf00      	nop
 80097d4:	20000010 	.word	0x20000010

080097d8 <memcpy>:
 80097d8:	b510      	push	{r4, lr}
 80097da:	1e43      	subs	r3, r0, #1
 80097dc:	440a      	add	r2, r1
 80097de:	4291      	cmp	r1, r2
 80097e0:	d100      	bne.n	80097e4 <memcpy+0xc>
 80097e2:	bd10      	pop	{r4, pc}
 80097e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80097e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80097ec:	e7f7      	b.n	80097de <memcpy+0x6>

080097ee <_Balloc>:
 80097ee:	b570      	push	{r4, r5, r6, lr}
 80097f0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80097f2:	4604      	mov	r4, r0
 80097f4:	460e      	mov	r6, r1
 80097f6:	b93d      	cbnz	r5, 8009808 <_Balloc+0x1a>
 80097f8:	2010      	movs	r0, #16
 80097fa:	f7ff ffe5 	bl	80097c8 <malloc>
 80097fe:	6260      	str	r0, [r4, #36]	; 0x24
 8009800:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009804:	6005      	str	r5, [r0, #0]
 8009806:	60c5      	str	r5, [r0, #12]
 8009808:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800980a:	68eb      	ldr	r3, [r5, #12]
 800980c:	b183      	cbz	r3, 8009830 <_Balloc+0x42>
 800980e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009810:	68db      	ldr	r3, [r3, #12]
 8009812:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009816:	b9b8      	cbnz	r0, 8009848 <_Balloc+0x5a>
 8009818:	2101      	movs	r1, #1
 800981a:	fa01 f506 	lsl.w	r5, r1, r6
 800981e:	1d6a      	adds	r2, r5, #5
 8009820:	0092      	lsls	r2, r2, #2
 8009822:	4620      	mov	r0, r4
 8009824:	f000 fabe 	bl	8009da4 <_calloc_r>
 8009828:	b160      	cbz	r0, 8009844 <_Balloc+0x56>
 800982a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800982e:	e00e      	b.n	800984e <_Balloc+0x60>
 8009830:	2221      	movs	r2, #33	; 0x21
 8009832:	2104      	movs	r1, #4
 8009834:	4620      	mov	r0, r4
 8009836:	f000 fab5 	bl	8009da4 <_calloc_r>
 800983a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800983c:	60e8      	str	r0, [r5, #12]
 800983e:	68db      	ldr	r3, [r3, #12]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d1e4      	bne.n	800980e <_Balloc+0x20>
 8009844:	2000      	movs	r0, #0
 8009846:	bd70      	pop	{r4, r5, r6, pc}
 8009848:	6802      	ldr	r2, [r0, #0]
 800984a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800984e:	2300      	movs	r3, #0
 8009850:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009854:	e7f7      	b.n	8009846 <_Balloc+0x58>

08009856 <_Bfree>:
 8009856:	b570      	push	{r4, r5, r6, lr}
 8009858:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800985a:	4606      	mov	r6, r0
 800985c:	460d      	mov	r5, r1
 800985e:	b93c      	cbnz	r4, 8009870 <_Bfree+0x1a>
 8009860:	2010      	movs	r0, #16
 8009862:	f7ff ffb1 	bl	80097c8 <malloc>
 8009866:	6270      	str	r0, [r6, #36]	; 0x24
 8009868:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800986c:	6004      	str	r4, [r0, #0]
 800986e:	60c4      	str	r4, [r0, #12]
 8009870:	b13d      	cbz	r5, 8009882 <_Bfree+0x2c>
 8009872:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009874:	686a      	ldr	r2, [r5, #4]
 8009876:	68db      	ldr	r3, [r3, #12]
 8009878:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800987c:	6029      	str	r1, [r5, #0]
 800987e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8009882:	bd70      	pop	{r4, r5, r6, pc}

08009884 <__multadd>:
 8009884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009888:	690d      	ldr	r5, [r1, #16]
 800988a:	461f      	mov	r7, r3
 800988c:	4606      	mov	r6, r0
 800988e:	460c      	mov	r4, r1
 8009890:	f101 0c14 	add.w	ip, r1, #20
 8009894:	2300      	movs	r3, #0
 8009896:	f8dc 0000 	ldr.w	r0, [ip]
 800989a:	b281      	uxth	r1, r0
 800989c:	fb02 7101 	mla	r1, r2, r1, r7
 80098a0:	0c0f      	lsrs	r7, r1, #16
 80098a2:	0c00      	lsrs	r0, r0, #16
 80098a4:	fb02 7000 	mla	r0, r2, r0, r7
 80098a8:	b289      	uxth	r1, r1
 80098aa:	3301      	adds	r3, #1
 80098ac:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80098b0:	429d      	cmp	r5, r3
 80098b2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80098b6:	f84c 1b04 	str.w	r1, [ip], #4
 80098ba:	dcec      	bgt.n	8009896 <__multadd+0x12>
 80098bc:	b1d7      	cbz	r7, 80098f4 <__multadd+0x70>
 80098be:	68a3      	ldr	r3, [r4, #8]
 80098c0:	42ab      	cmp	r3, r5
 80098c2:	dc12      	bgt.n	80098ea <__multadd+0x66>
 80098c4:	6861      	ldr	r1, [r4, #4]
 80098c6:	4630      	mov	r0, r6
 80098c8:	3101      	adds	r1, #1
 80098ca:	f7ff ff90 	bl	80097ee <_Balloc>
 80098ce:	6922      	ldr	r2, [r4, #16]
 80098d0:	3202      	adds	r2, #2
 80098d2:	f104 010c 	add.w	r1, r4, #12
 80098d6:	4680      	mov	r8, r0
 80098d8:	0092      	lsls	r2, r2, #2
 80098da:	300c      	adds	r0, #12
 80098dc:	f7ff ff7c 	bl	80097d8 <memcpy>
 80098e0:	4621      	mov	r1, r4
 80098e2:	4630      	mov	r0, r6
 80098e4:	f7ff ffb7 	bl	8009856 <_Bfree>
 80098e8:	4644      	mov	r4, r8
 80098ea:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80098ee:	3501      	adds	r5, #1
 80098f0:	615f      	str	r7, [r3, #20]
 80098f2:	6125      	str	r5, [r4, #16]
 80098f4:	4620      	mov	r0, r4
 80098f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080098fa <__hi0bits>:
 80098fa:	0c02      	lsrs	r2, r0, #16
 80098fc:	0412      	lsls	r2, r2, #16
 80098fe:	4603      	mov	r3, r0
 8009900:	b9b2      	cbnz	r2, 8009930 <__hi0bits+0x36>
 8009902:	0403      	lsls	r3, r0, #16
 8009904:	2010      	movs	r0, #16
 8009906:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800990a:	bf04      	itt	eq
 800990c:	021b      	lsleq	r3, r3, #8
 800990e:	3008      	addeq	r0, #8
 8009910:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009914:	bf04      	itt	eq
 8009916:	011b      	lsleq	r3, r3, #4
 8009918:	3004      	addeq	r0, #4
 800991a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800991e:	bf04      	itt	eq
 8009920:	009b      	lsleq	r3, r3, #2
 8009922:	3002      	addeq	r0, #2
 8009924:	2b00      	cmp	r3, #0
 8009926:	db06      	blt.n	8009936 <__hi0bits+0x3c>
 8009928:	005b      	lsls	r3, r3, #1
 800992a:	d503      	bpl.n	8009934 <__hi0bits+0x3a>
 800992c:	3001      	adds	r0, #1
 800992e:	4770      	bx	lr
 8009930:	2000      	movs	r0, #0
 8009932:	e7e8      	b.n	8009906 <__hi0bits+0xc>
 8009934:	2020      	movs	r0, #32
 8009936:	4770      	bx	lr

08009938 <__lo0bits>:
 8009938:	6803      	ldr	r3, [r0, #0]
 800993a:	f013 0207 	ands.w	r2, r3, #7
 800993e:	4601      	mov	r1, r0
 8009940:	d00b      	beq.n	800995a <__lo0bits+0x22>
 8009942:	07da      	lsls	r2, r3, #31
 8009944:	d423      	bmi.n	800998e <__lo0bits+0x56>
 8009946:	0798      	lsls	r0, r3, #30
 8009948:	bf49      	itett	mi
 800994a:	085b      	lsrmi	r3, r3, #1
 800994c:	089b      	lsrpl	r3, r3, #2
 800994e:	2001      	movmi	r0, #1
 8009950:	600b      	strmi	r3, [r1, #0]
 8009952:	bf5c      	itt	pl
 8009954:	600b      	strpl	r3, [r1, #0]
 8009956:	2002      	movpl	r0, #2
 8009958:	4770      	bx	lr
 800995a:	b298      	uxth	r0, r3
 800995c:	b9a8      	cbnz	r0, 800998a <__lo0bits+0x52>
 800995e:	0c1b      	lsrs	r3, r3, #16
 8009960:	2010      	movs	r0, #16
 8009962:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009966:	bf04      	itt	eq
 8009968:	0a1b      	lsreq	r3, r3, #8
 800996a:	3008      	addeq	r0, #8
 800996c:	071a      	lsls	r2, r3, #28
 800996e:	bf04      	itt	eq
 8009970:	091b      	lsreq	r3, r3, #4
 8009972:	3004      	addeq	r0, #4
 8009974:	079a      	lsls	r2, r3, #30
 8009976:	bf04      	itt	eq
 8009978:	089b      	lsreq	r3, r3, #2
 800997a:	3002      	addeq	r0, #2
 800997c:	07da      	lsls	r2, r3, #31
 800997e:	d402      	bmi.n	8009986 <__lo0bits+0x4e>
 8009980:	085b      	lsrs	r3, r3, #1
 8009982:	d006      	beq.n	8009992 <__lo0bits+0x5a>
 8009984:	3001      	adds	r0, #1
 8009986:	600b      	str	r3, [r1, #0]
 8009988:	4770      	bx	lr
 800998a:	4610      	mov	r0, r2
 800998c:	e7e9      	b.n	8009962 <__lo0bits+0x2a>
 800998e:	2000      	movs	r0, #0
 8009990:	4770      	bx	lr
 8009992:	2020      	movs	r0, #32
 8009994:	4770      	bx	lr

08009996 <__i2b>:
 8009996:	b510      	push	{r4, lr}
 8009998:	460c      	mov	r4, r1
 800999a:	2101      	movs	r1, #1
 800999c:	f7ff ff27 	bl	80097ee <_Balloc>
 80099a0:	2201      	movs	r2, #1
 80099a2:	6144      	str	r4, [r0, #20]
 80099a4:	6102      	str	r2, [r0, #16]
 80099a6:	bd10      	pop	{r4, pc}

080099a8 <__multiply>:
 80099a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099ac:	4614      	mov	r4, r2
 80099ae:	690a      	ldr	r2, [r1, #16]
 80099b0:	6923      	ldr	r3, [r4, #16]
 80099b2:	429a      	cmp	r2, r3
 80099b4:	bfb8      	it	lt
 80099b6:	460b      	movlt	r3, r1
 80099b8:	4688      	mov	r8, r1
 80099ba:	bfbc      	itt	lt
 80099bc:	46a0      	movlt	r8, r4
 80099be:	461c      	movlt	r4, r3
 80099c0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80099c4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80099c8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80099cc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80099d0:	eb07 0609 	add.w	r6, r7, r9
 80099d4:	42b3      	cmp	r3, r6
 80099d6:	bfb8      	it	lt
 80099d8:	3101      	addlt	r1, #1
 80099da:	f7ff ff08 	bl	80097ee <_Balloc>
 80099de:	f100 0514 	add.w	r5, r0, #20
 80099e2:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80099e6:	462b      	mov	r3, r5
 80099e8:	2200      	movs	r2, #0
 80099ea:	4573      	cmp	r3, lr
 80099ec:	d316      	bcc.n	8009a1c <__multiply+0x74>
 80099ee:	f104 0214 	add.w	r2, r4, #20
 80099f2:	f108 0114 	add.w	r1, r8, #20
 80099f6:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80099fa:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80099fe:	9300      	str	r3, [sp, #0]
 8009a00:	9b00      	ldr	r3, [sp, #0]
 8009a02:	9201      	str	r2, [sp, #4]
 8009a04:	4293      	cmp	r3, r2
 8009a06:	d80c      	bhi.n	8009a22 <__multiply+0x7a>
 8009a08:	2e00      	cmp	r6, #0
 8009a0a:	dd03      	ble.n	8009a14 <__multiply+0x6c>
 8009a0c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d05d      	beq.n	8009ad0 <__multiply+0x128>
 8009a14:	6106      	str	r6, [r0, #16]
 8009a16:	b003      	add	sp, #12
 8009a18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a1c:	f843 2b04 	str.w	r2, [r3], #4
 8009a20:	e7e3      	b.n	80099ea <__multiply+0x42>
 8009a22:	f8b2 b000 	ldrh.w	fp, [r2]
 8009a26:	f1bb 0f00 	cmp.w	fp, #0
 8009a2a:	d023      	beq.n	8009a74 <__multiply+0xcc>
 8009a2c:	4689      	mov	r9, r1
 8009a2e:	46ac      	mov	ip, r5
 8009a30:	f04f 0800 	mov.w	r8, #0
 8009a34:	f859 4b04 	ldr.w	r4, [r9], #4
 8009a38:	f8dc a000 	ldr.w	sl, [ip]
 8009a3c:	b2a3      	uxth	r3, r4
 8009a3e:	fa1f fa8a 	uxth.w	sl, sl
 8009a42:	fb0b a303 	mla	r3, fp, r3, sl
 8009a46:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009a4a:	f8dc 4000 	ldr.w	r4, [ip]
 8009a4e:	4443      	add	r3, r8
 8009a50:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009a54:	fb0b 840a 	mla	r4, fp, sl, r8
 8009a58:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8009a5c:	46e2      	mov	sl, ip
 8009a5e:	b29b      	uxth	r3, r3
 8009a60:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009a64:	454f      	cmp	r7, r9
 8009a66:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009a6a:	f84a 3b04 	str.w	r3, [sl], #4
 8009a6e:	d82b      	bhi.n	8009ac8 <__multiply+0x120>
 8009a70:	f8cc 8004 	str.w	r8, [ip, #4]
 8009a74:	9b01      	ldr	r3, [sp, #4]
 8009a76:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8009a7a:	3204      	adds	r2, #4
 8009a7c:	f1ba 0f00 	cmp.w	sl, #0
 8009a80:	d020      	beq.n	8009ac4 <__multiply+0x11c>
 8009a82:	682b      	ldr	r3, [r5, #0]
 8009a84:	4689      	mov	r9, r1
 8009a86:	46a8      	mov	r8, r5
 8009a88:	f04f 0b00 	mov.w	fp, #0
 8009a8c:	f8b9 c000 	ldrh.w	ip, [r9]
 8009a90:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8009a94:	fb0a 440c 	mla	r4, sl, ip, r4
 8009a98:	445c      	add	r4, fp
 8009a9a:	46c4      	mov	ip, r8
 8009a9c:	b29b      	uxth	r3, r3
 8009a9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009aa2:	f84c 3b04 	str.w	r3, [ip], #4
 8009aa6:	f859 3b04 	ldr.w	r3, [r9], #4
 8009aaa:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8009aae:	0c1b      	lsrs	r3, r3, #16
 8009ab0:	fb0a b303 	mla	r3, sl, r3, fp
 8009ab4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009ab8:	454f      	cmp	r7, r9
 8009aba:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8009abe:	d805      	bhi.n	8009acc <__multiply+0x124>
 8009ac0:	f8c8 3004 	str.w	r3, [r8, #4]
 8009ac4:	3504      	adds	r5, #4
 8009ac6:	e79b      	b.n	8009a00 <__multiply+0x58>
 8009ac8:	46d4      	mov	ip, sl
 8009aca:	e7b3      	b.n	8009a34 <__multiply+0x8c>
 8009acc:	46e0      	mov	r8, ip
 8009ace:	e7dd      	b.n	8009a8c <__multiply+0xe4>
 8009ad0:	3e01      	subs	r6, #1
 8009ad2:	e799      	b.n	8009a08 <__multiply+0x60>

08009ad4 <__pow5mult>:
 8009ad4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ad8:	4615      	mov	r5, r2
 8009ada:	f012 0203 	ands.w	r2, r2, #3
 8009ade:	4606      	mov	r6, r0
 8009ae0:	460f      	mov	r7, r1
 8009ae2:	d007      	beq.n	8009af4 <__pow5mult+0x20>
 8009ae4:	3a01      	subs	r2, #1
 8009ae6:	4c21      	ldr	r4, [pc, #132]	; (8009b6c <__pow5mult+0x98>)
 8009ae8:	2300      	movs	r3, #0
 8009aea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009aee:	f7ff fec9 	bl	8009884 <__multadd>
 8009af2:	4607      	mov	r7, r0
 8009af4:	10ad      	asrs	r5, r5, #2
 8009af6:	d035      	beq.n	8009b64 <__pow5mult+0x90>
 8009af8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009afa:	b93c      	cbnz	r4, 8009b0c <__pow5mult+0x38>
 8009afc:	2010      	movs	r0, #16
 8009afe:	f7ff fe63 	bl	80097c8 <malloc>
 8009b02:	6270      	str	r0, [r6, #36]	; 0x24
 8009b04:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009b08:	6004      	str	r4, [r0, #0]
 8009b0a:	60c4      	str	r4, [r0, #12]
 8009b0c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009b10:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009b14:	b94c      	cbnz	r4, 8009b2a <__pow5mult+0x56>
 8009b16:	f240 2171 	movw	r1, #625	; 0x271
 8009b1a:	4630      	mov	r0, r6
 8009b1c:	f7ff ff3b 	bl	8009996 <__i2b>
 8009b20:	2300      	movs	r3, #0
 8009b22:	f8c8 0008 	str.w	r0, [r8, #8]
 8009b26:	4604      	mov	r4, r0
 8009b28:	6003      	str	r3, [r0, #0]
 8009b2a:	f04f 0800 	mov.w	r8, #0
 8009b2e:	07eb      	lsls	r3, r5, #31
 8009b30:	d50a      	bpl.n	8009b48 <__pow5mult+0x74>
 8009b32:	4639      	mov	r1, r7
 8009b34:	4622      	mov	r2, r4
 8009b36:	4630      	mov	r0, r6
 8009b38:	f7ff ff36 	bl	80099a8 <__multiply>
 8009b3c:	4639      	mov	r1, r7
 8009b3e:	4681      	mov	r9, r0
 8009b40:	4630      	mov	r0, r6
 8009b42:	f7ff fe88 	bl	8009856 <_Bfree>
 8009b46:	464f      	mov	r7, r9
 8009b48:	106d      	asrs	r5, r5, #1
 8009b4a:	d00b      	beq.n	8009b64 <__pow5mult+0x90>
 8009b4c:	6820      	ldr	r0, [r4, #0]
 8009b4e:	b938      	cbnz	r0, 8009b60 <__pow5mult+0x8c>
 8009b50:	4622      	mov	r2, r4
 8009b52:	4621      	mov	r1, r4
 8009b54:	4630      	mov	r0, r6
 8009b56:	f7ff ff27 	bl	80099a8 <__multiply>
 8009b5a:	6020      	str	r0, [r4, #0]
 8009b5c:	f8c0 8000 	str.w	r8, [r0]
 8009b60:	4604      	mov	r4, r0
 8009b62:	e7e4      	b.n	8009b2e <__pow5mult+0x5a>
 8009b64:	4638      	mov	r0, r7
 8009b66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b6a:	bf00      	nop
 8009b6c:	0800b7f0 	.word	0x0800b7f0

08009b70 <__lshift>:
 8009b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b74:	460c      	mov	r4, r1
 8009b76:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009b7a:	6923      	ldr	r3, [r4, #16]
 8009b7c:	6849      	ldr	r1, [r1, #4]
 8009b7e:	eb0a 0903 	add.w	r9, sl, r3
 8009b82:	68a3      	ldr	r3, [r4, #8]
 8009b84:	4607      	mov	r7, r0
 8009b86:	4616      	mov	r6, r2
 8009b88:	f109 0501 	add.w	r5, r9, #1
 8009b8c:	42ab      	cmp	r3, r5
 8009b8e:	db32      	blt.n	8009bf6 <__lshift+0x86>
 8009b90:	4638      	mov	r0, r7
 8009b92:	f7ff fe2c 	bl	80097ee <_Balloc>
 8009b96:	2300      	movs	r3, #0
 8009b98:	4680      	mov	r8, r0
 8009b9a:	f100 0114 	add.w	r1, r0, #20
 8009b9e:	461a      	mov	r2, r3
 8009ba0:	4553      	cmp	r3, sl
 8009ba2:	db2b      	blt.n	8009bfc <__lshift+0x8c>
 8009ba4:	6920      	ldr	r0, [r4, #16]
 8009ba6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009baa:	f104 0314 	add.w	r3, r4, #20
 8009bae:	f016 021f 	ands.w	r2, r6, #31
 8009bb2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009bb6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009bba:	d025      	beq.n	8009c08 <__lshift+0x98>
 8009bbc:	f1c2 0e20 	rsb	lr, r2, #32
 8009bc0:	2000      	movs	r0, #0
 8009bc2:	681e      	ldr	r6, [r3, #0]
 8009bc4:	468a      	mov	sl, r1
 8009bc6:	4096      	lsls	r6, r2
 8009bc8:	4330      	orrs	r0, r6
 8009bca:	f84a 0b04 	str.w	r0, [sl], #4
 8009bce:	f853 0b04 	ldr.w	r0, [r3], #4
 8009bd2:	459c      	cmp	ip, r3
 8009bd4:	fa20 f00e 	lsr.w	r0, r0, lr
 8009bd8:	d814      	bhi.n	8009c04 <__lshift+0x94>
 8009bda:	6048      	str	r0, [r1, #4]
 8009bdc:	b108      	cbz	r0, 8009be2 <__lshift+0x72>
 8009bde:	f109 0502 	add.w	r5, r9, #2
 8009be2:	3d01      	subs	r5, #1
 8009be4:	4638      	mov	r0, r7
 8009be6:	f8c8 5010 	str.w	r5, [r8, #16]
 8009bea:	4621      	mov	r1, r4
 8009bec:	f7ff fe33 	bl	8009856 <_Bfree>
 8009bf0:	4640      	mov	r0, r8
 8009bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bf6:	3101      	adds	r1, #1
 8009bf8:	005b      	lsls	r3, r3, #1
 8009bfa:	e7c7      	b.n	8009b8c <__lshift+0x1c>
 8009bfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009c00:	3301      	adds	r3, #1
 8009c02:	e7cd      	b.n	8009ba0 <__lshift+0x30>
 8009c04:	4651      	mov	r1, sl
 8009c06:	e7dc      	b.n	8009bc2 <__lshift+0x52>
 8009c08:	3904      	subs	r1, #4
 8009c0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c0e:	f841 2f04 	str.w	r2, [r1, #4]!
 8009c12:	459c      	cmp	ip, r3
 8009c14:	d8f9      	bhi.n	8009c0a <__lshift+0x9a>
 8009c16:	e7e4      	b.n	8009be2 <__lshift+0x72>

08009c18 <__mcmp>:
 8009c18:	6903      	ldr	r3, [r0, #16]
 8009c1a:	690a      	ldr	r2, [r1, #16]
 8009c1c:	1a9b      	subs	r3, r3, r2
 8009c1e:	b530      	push	{r4, r5, lr}
 8009c20:	d10c      	bne.n	8009c3c <__mcmp+0x24>
 8009c22:	0092      	lsls	r2, r2, #2
 8009c24:	3014      	adds	r0, #20
 8009c26:	3114      	adds	r1, #20
 8009c28:	1884      	adds	r4, r0, r2
 8009c2a:	4411      	add	r1, r2
 8009c2c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009c30:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009c34:	4295      	cmp	r5, r2
 8009c36:	d003      	beq.n	8009c40 <__mcmp+0x28>
 8009c38:	d305      	bcc.n	8009c46 <__mcmp+0x2e>
 8009c3a:	2301      	movs	r3, #1
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	bd30      	pop	{r4, r5, pc}
 8009c40:	42a0      	cmp	r0, r4
 8009c42:	d3f3      	bcc.n	8009c2c <__mcmp+0x14>
 8009c44:	e7fa      	b.n	8009c3c <__mcmp+0x24>
 8009c46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009c4a:	e7f7      	b.n	8009c3c <__mcmp+0x24>

08009c4c <__mdiff>:
 8009c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c50:	460d      	mov	r5, r1
 8009c52:	4607      	mov	r7, r0
 8009c54:	4611      	mov	r1, r2
 8009c56:	4628      	mov	r0, r5
 8009c58:	4614      	mov	r4, r2
 8009c5a:	f7ff ffdd 	bl	8009c18 <__mcmp>
 8009c5e:	1e06      	subs	r6, r0, #0
 8009c60:	d108      	bne.n	8009c74 <__mdiff+0x28>
 8009c62:	4631      	mov	r1, r6
 8009c64:	4638      	mov	r0, r7
 8009c66:	f7ff fdc2 	bl	80097ee <_Balloc>
 8009c6a:	2301      	movs	r3, #1
 8009c6c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009c70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c74:	bfa4      	itt	ge
 8009c76:	4623      	movge	r3, r4
 8009c78:	462c      	movge	r4, r5
 8009c7a:	4638      	mov	r0, r7
 8009c7c:	6861      	ldr	r1, [r4, #4]
 8009c7e:	bfa6      	itte	ge
 8009c80:	461d      	movge	r5, r3
 8009c82:	2600      	movge	r6, #0
 8009c84:	2601      	movlt	r6, #1
 8009c86:	f7ff fdb2 	bl	80097ee <_Balloc>
 8009c8a:	692b      	ldr	r3, [r5, #16]
 8009c8c:	60c6      	str	r6, [r0, #12]
 8009c8e:	6926      	ldr	r6, [r4, #16]
 8009c90:	f105 0914 	add.w	r9, r5, #20
 8009c94:	f104 0214 	add.w	r2, r4, #20
 8009c98:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009c9c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009ca0:	f100 0514 	add.w	r5, r0, #20
 8009ca4:	f04f 0e00 	mov.w	lr, #0
 8009ca8:	f852 ab04 	ldr.w	sl, [r2], #4
 8009cac:	f859 4b04 	ldr.w	r4, [r9], #4
 8009cb0:	fa1e f18a 	uxtah	r1, lr, sl
 8009cb4:	b2a3      	uxth	r3, r4
 8009cb6:	1ac9      	subs	r1, r1, r3
 8009cb8:	0c23      	lsrs	r3, r4, #16
 8009cba:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8009cbe:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009cc2:	b289      	uxth	r1, r1
 8009cc4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009cc8:	45c8      	cmp	r8, r9
 8009cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009cce:	4694      	mov	ip, r2
 8009cd0:	f845 3b04 	str.w	r3, [r5], #4
 8009cd4:	d8e8      	bhi.n	8009ca8 <__mdiff+0x5c>
 8009cd6:	45bc      	cmp	ip, r7
 8009cd8:	d304      	bcc.n	8009ce4 <__mdiff+0x98>
 8009cda:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8009cde:	b183      	cbz	r3, 8009d02 <__mdiff+0xb6>
 8009ce0:	6106      	str	r6, [r0, #16]
 8009ce2:	e7c5      	b.n	8009c70 <__mdiff+0x24>
 8009ce4:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009ce8:	fa1e f381 	uxtah	r3, lr, r1
 8009cec:	141a      	asrs	r2, r3, #16
 8009cee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009cf2:	b29b      	uxth	r3, r3
 8009cf4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009cf8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8009cfc:	f845 3b04 	str.w	r3, [r5], #4
 8009d00:	e7e9      	b.n	8009cd6 <__mdiff+0x8a>
 8009d02:	3e01      	subs	r6, #1
 8009d04:	e7e9      	b.n	8009cda <__mdiff+0x8e>

08009d06 <__d2b>:
 8009d06:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009d0a:	460e      	mov	r6, r1
 8009d0c:	2101      	movs	r1, #1
 8009d0e:	ec59 8b10 	vmov	r8, r9, d0
 8009d12:	4615      	mov	r5, r2
 8009d14:	f7ff fd6b 	bl	80097ee <_Balloc>
 8009d18:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009d1c:	4607      	mov	r7, r0
 8009d1e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009d22:	bb34      	cbnz	r4, 8009d72 <__d2b+0x6c>
 8009d24:	9301      	str	r3, [sp, #4]
 8009d26:	f1b8 0300 	subs.w	r3, r8, #0
 8009d2a:	d027      	beq.n	8009d7c <__d2b+0x76>
 8009d2c:	a802      	add	r0, sp, #8
 8009d2e:	f840 3d08 	str.w	r3, [r0, #-8]!
 8009d32:	f7ff fe01 	bl	8009938 <__lo0bits>
 8009d36:	9900      	ldr	r1, [sp, #0]
 8009d38:	b1f0      	cbz	r0, 8009d78 <__d2b+0x72>
 8009d3a:	9a01      	ldr	r2, [sp, #4]
 8009d3c:	f1c0 0320 	rsb	r3, r0, #32
 8009d40:	fa02 f303 	lsl.w	r3, r2, r3
 8009d44:	430b      	orrs	r3, r1
 8009d46:	40c2      	lsrs	r2, r0
 8009d48:	617b      	str	r3, [r7, #20]
 8009d4a:	9201      	str	r2, [sp, #4]
 8009d4c:	9b01      	ldr	r3, [sp, #4]
 8009d4e:	61bb      	str	r3, [r7, #24]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	bf14      	ite	ne
 8009d54:	2102      	movne	r1, #2
 8009d56:	2101      	moveq	r1, #1
 8009d58:	6139      	str	r1, [r7, #16]
 8009d5a:	b1c4      	cbz	r4, 8009d8e <__d2b+0x88>
 8009d5c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009d60:	4404      	add	r4, r0
 8009d62:	6034      	str	r4, [r6, #0]
 8009d64:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009d68:	6028      	str	r0, [r5, #0]
 8009d6a:	4638      	mov	r0, r7
 8009d6c:	b003      	add	sp, #12
 8009d6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009d76:	e7d5      	b.n	8009d24 <__d2b+0x1e>
 8009d78:	6179      	str	r1, [r7, #20]
 8009d7a:	e7e7      	b.n	8009d4c <__d2b+0x46>
 8009d7c:	a801      	add	r0, sp, #4
 8009d7e:	f7ff fddb 	bl	8009938 <__lo0bits>
 8009d82:	9b01      	ldr	r3, [sp, #4]
 8009d84:	617b      	str	r3, [r7, #20]
 8009d86:	2101      	movs	r1, #1
 8009d88:	6139      	str	r1, [r7, #16]
 8009d8a:	3020      	adds	r0, #32
 8009d8c:	e7e5      	b.n	8009d5a <__d2b+0x54>
 8009d8e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8009d92:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009d96:	6030      	str	r0, [r6, #0]
 8009d98:	6918      	ldr	r0, [r3, #16]
 8009d9a:	f7ff fdae 	bl	80098fa <__hi0bits>
 8009d9e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009da2:	e7e1      	b.n	8009d68 <__d2b+0x62>

08009da4 <_calloc_r>:
 8009da4:	b538      	push	{r3, r4, r5, lr}
 8009da6:	fb02 f401 	mul.w	r4, r2, r1
 8009daa:	4621      	mov	r1, r4
 8009dac:	f000 f856 	bl	8009e5c <_malloc_r>
 8009db0:	4605      	mov	r5, r0
 8009db2:	b118      	cbz	r0, 8009dbc <_calloc_r+0x18>
 8009db4:	4622      	mov	r2, r4
 8009db6:	2100      	movs	r1, #0
 8009db8:	f7fd ff36 	bl	8007c28 <memset>
 8009dbc:	4628      	mov	r0, r5
 8009dbe:	bd38      	pop	{r3, r4, r5, pc}

08009dc0 <_free_r>:
 8009dc0:	b538      	push	{r3, r4, r5, lr}
 8009dc2:	4605      	mov	r5, r0
 8009dc4:	2900      	cmp	r1, #0
 8009dc6:	d045      	beq.n	8009e54 <_free_r+0x94>
 8009dc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009dcc:	1f0c      	subs	r4, r1, #4
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	bfb8      	it	lt
 8009dd2:	18e4      	addlt	r4, r4, r3
 8009dd4:	f000 fa98 	bl	800a308 <__malloc_lock>
 8009dd8:	4a1f      	ldr	r2, [pc, #124]	; (8009e58 <_free_r+0x98>)
 8009dda:	6813      	ldr	r3, [r2, #0]
 8009ddc:	4610      	mov	r0, r2
 8009dde:	b933      	cbnz	r3, 8009dee <_free_r+0x2e>
 8009de0:	6063      	str	r3, [r4, #4]
 8009de2:	6014      	str	r4, [r2, #0]
 8009de4:	4628      	mov	r0, r5
 8009de6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009dea:	f000 ba8e 	b.w	800a30a <__malloc_unlock>
 8009dee:	42a3      	cmp	r3, r4
 8009df0:	d90c      	bls.n	8009e0c <_free_r+0x4c>
 8009df2:	6821      	ldr	r1, [r4, #0]
 8009df4:	1862      	adds	r2, r4, r1
 8009df6:	4293      	cmp	r3, r2
 8009df8:	bf04      	itt	eq
 8009dfa:	681a      	ldreq	r2, [r3, #0]
 8009dfc:	685b      	ldreq	r3, [r3, #4]
 8009dfe:	6063      	str	r3, [r4, #4]
 8009e00:	bf04      	itt	eq
 8009e02:	1852      	addeq	r2, r2, r1
 8009e04:	6022      	streq	r2, [r4, #0]
 8009e06:	6004      	str	r4, [r0, #0]
 8009e08:	e7ec      	b.n	8009de4 <_free_r+0x24>
 8009e0a:	4613      	mov	r3, r2
 8009e0c:	685a      	ldr	r2, [r3, #4]
 8009e0e:	b10a      	cbz	r2, 8009e14 <_free_r+0x54>
 8009e10:	42a2      	cmp	r2, r4
 8009e12:	d9fa      	bls.n	8009e0a <_free_r+0x4a>
 8009e14:	6819      	ldr	r1, [r3, #0]
 8009e16:	1858      	adds	r0, r3, r1
 8009e18:	42a0      	cmp	r0, r4
 8009e1a:	d10b      	bne.n	8009e34 <_free_r+0x74>
 8009e1c:	6820      	ldr	r0, [r4, #0]
 8009e1e:	4401      	add	r1, r0
 8009e20:	1858      	adds	r0, r3, r1
 8009e22:	4282      	cmp	r2, r0
 8009e24:	6019      	str	r1, [r3, #0]
 8009e26:	d1dd      	bne.n	8009de4 <_free_r+0x24>
 8009e28:	6810      	ldr	r0, [r2, #0]
 8009e2a:	6852      	ldr	r2, [r2, #4]
 8009e2c:	605a      	str	r2, [r3, #4]
 8009e2e:	4401      	add	r1, r0
 8009e30:	6019      	str	r1, [r3, #0]
 8009e32:	e7d7      	b.n	8009de4 <_free_r+0x24>
 8009e34:	d902      	bls.n	8009e3c <_free_r+0x7c>
 8009e36:	230c      	movs	r3, #12
 8009e38:	602b      	str	r3, [r5, #0]
 8009e3a:	e7d3      	b.n	8009de4 <_free_r+0x24>
 8009e3c:	6820      	ldr	r0, [r4, #0]
 8009e3e:	1821      	adds	r1, r4, r0
 8009e40:	428a      	cmp	r2, r1
 8009e42:	bf04      	itt	eq
 8009e44:	6811      	ldreq	r1, [r2, #0]
 8009e46:	6852      	ldreq	r2, [r2, #4]
 8009e48:	6062      	str	r2, [r4, #4]
 8009e4a:	bf04      	itt	eq
 8009e4c:	1809      	addeq	r1, r1, r0
 8009e4e:	6021      	streq	r1, [r4, #0]
 8009e50:	605c      	str	r4, [r3, #4]
 8009e52:	e7c7      	b.n	8009de4 <_free_r+0x24>
 8009e54:	bd38      	pop	{r3, r4, r5, pc}
 8009e56:	bf00      	nop
 8009e58:	20000218 	.word	0x20000218

08009e5c <_malloc_r>:
 8009e5c:	b570      	push	{r4, r5, r6, lr}
 8009e5e:	1ccd      	adds	r5, r1, #3
 8009e60:	f025 0503 	bic.w	r5, r5, #3
 8009e64:	3508      	adds	r5, #8
 8009e66:	2d0c      	cmp	r5, #12
 8009e68:	bf38      	it	cc
 8009e6a:	250c      	movcc	r5, #12
 8009e6c:	2d00      	cmp	r5, #0
 8009e6e:	4606      	mov	r6, r0
 8009e70:	db01      	blt.n	8009e76 <_malloc_r+0x1a>
 8009e72:	42a9      	cmp	r1, r5
 8009e74:	d903      	bls.n	8009e7e <_malloc_r+0x22>
 8009e76:	230c      	movs	r3, #12
 8009e78:	6033      	str	r3, [r6, #0]
 8009e7a:	2000      	movs	r0, #0
 8009e7c:	bd70      	pop	{r4, r5, r6, pc}
 8009e7e:	f000 fa43 	bl	800a308 <__malloc_lock>
 8009e82:	4a21      	ldr	r2, [pc, #132]	; (8009f08 <_malloc_r+0xac>)
 8009e84:	6814      	ldr	r4, [r2, #0]
 8009e86:	4621      	mov	r1, r4
 8009e88:	b991      	cbnz	r1, 8009eb0 <_malloc_r+0x54>
 8009e8a:	4c20      	ldr	r4, [pc, #128]	; (8009f0c <_malloc_r+0xb0>)
 8009e8c:	6823      	ldr	r3, [r4, #0]
 8009e8e:	b91b      	cbnz	r3, 8009e98 <_malloc_r+0x3c>
 8009e90:	4630      	mov	r0, r6
 8009e92:	f000 f97d 	bl	800a190 <_sbrk_r>
 8009e96:	6020      	str	r0, [r4, #0]
 8009e98:	4629      	mov	r1, r5
 8009e9a:	4630      	mov	r0, r6
 8009e9c:	f000 f978 	bl	800a190 <_sbrk_r>
 8009ea0:	1c43      	adds	r3, r0, #1
 8009ea2:	d124      	bne.n	8009eee <_malloc_r+0x92>
 8009ea4:	230c      	movs	r3, #12
 8009ea6:	6033      	str	r3, [r6, #0]
 8009ea8:	4630      	mov	r0, r6
 8009eaa:	f000 fa2e 	bl	800a30a <__malloc_unlock>
 8009eae:	e7e4      	b.n	8009e7a <_malloc_r+0x1e>
 8009eb0:	680b      	ldr	r3, [r1, #0]
 8009eb2:	1b5b      	subs	r3, r3, r5
 8009eb4:	d418      	bmi.n	8009ee8 <_malloc_r+0x8c>
 8009eb6:	2b0b      	cmp	r3, #11
 8009eb8:	d90f      	bls.n	8009eda <_malloc_r+0x7e>
 8009eba:	600b      	str	r3, [r1, #0]
 8009ebc:	50cd      	str	r5, [r1, r3]
 8009ebe:	18cc      	adds	r4, r1, r3
 8009ec0:	4630      	mov	r0, r6
 8009ec2:	f000 fa22 	bl	800a30a <__malloc_unlock>
 8009ec6:	f104 000b 	add.w	r0, r4, #11
 8009eca:	1d23      	adds	r3, r4, #4
 8009ecc:	f020 0007 	bic.w	r0, r0, #7
 8009ed0:	1ac3      	subs	r3, r0, r3
 8009ed2:	d0d3      	beq.n	8009e7c <_malloc_r+0x20>
 8009ed4:	425a      	negs	r2, r3
 8009ed6:	50e2      	str	r2, [r4, r3]
 8009ed8:	e7d0      	b.n	8009e7c <_malloc_r+0x20>
 8009eda:	428c      	cmp	r4, r1
 8009edc:	684b      	ldr	r3, [r1, #4]
 8009ede:	bf16      	itet	ne
 8009ee0:	6063      	strne	r3, [r4, #4]
 8009ee2:	6013      	streq	r3, [r2, #0]
 8009ee4:	460c      	movne	r4, r1
 8009ee6:	e7eb      	b.n	8009ec0 <_malloc_r+0x64>
 8009ee8:	460c      	mov	r4, r1
 8009eea:	6849      	ldr	r1, [r1, #4]
 8009eec:	e7cc      	b.n	8009e88 <_malloc_r+0x2c>
 8009eee:	1cc4      	adds	r4, r0, #3
 8009ef0:	f024 0403 	bic.w	r4, r4, #3
 8009ef4:	42a0      	cmp	r0, r4
 8009ef6:	d005      	beq.n	8009f04 <_malloc_r+0xa8>
 8009ef8:	1a21      	subs	r1, r4, r0
 8009efa:	4630      	mov	r0, r6
 8009efc:	f000 f948 	bl	800a190 <_sbrk_r>
 8009f00:	3001      	adds	r0, #1
 8009f02:	d0cf      	beq.n	8009ea4 <_malloc_r+0x48>
 8009f04:	6025      	str	r5, [r4, #0]
 8009f06:	e7db      	b.n	8009ec0 <_malloc_r+0x64>
 8009f08:	20000218 	.word	0x20000218
 8009f0c:	2000021c 	.word	0x2000021c

08009f10 <__sfputc_r>:
 8009f10:	6893      	ldr	r3, [r2, #8]
 8009f12:	3b01      	subs	r3, #1
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	b410      	push	{r4}
 8009f18:	6093      	str	r3, [r2, #8]
 8009f1a:	da08      	bge.n	8009f2e <__sfputc_r+0x1e>
 8009f1c:	6994      	ldr	r4, [r2, #24]
 8009f1e:	42a3      	cmp	r3, r4
 8009f20:	db01      	blt.n	8009f26 <__sfputc_r+0x16>
 8009f22:	290a      	cmp	r1, #10
 8009f24:	d103      	bne.n	8009f2e <__sfputc_r+0x1e>
 8009f26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f2a:	f7fe bb5d 	b.w	80085e8 <__swbuf_r>
 8009f2e:	6813      	ldr	r3, [r2, #0]
 8009f30:	1c58      	adds	r0, r3, #1
 8009f32:	6010      	str	r0, [r2, #0]
 8009f34:	7019      	strb	r1, [r3, #0]
 8009f36:	4608      	mov	r0, r1
 8009f38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f3c:	4770      	bx	lr

08009f3e <__sfputs_r>:
 8009f3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f40:	4606      	mov	r6, r0
 8009f42:	460f      	mov	r7, r1
 8009f44:	4614      	mov	r4, r2
 8009f46:	18d5      	adds	r5, r2, r3
 8009f48:	42ac      	cmp	r4, r5
 8009f4a:	d101      	bne.n	8009f50 <__sfputs_r+0x12>
 8009f4c:	2000      	movs	r0, #0
 8009f4e:	e007      	b.n	8009f60 <__sfputs_r+0x22>
 8009f50:	463a      	mov	r2, r7
 8009f52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f56:	4630      	mov	r0, r6
 8009f58:	f7ff ffda 	bl	8009f10 <__sfputc_r>
 8009f5c:	1c43      	adds	r3, r0, #1
 8009f5e:	d1f3      	bne.n	8009f48 <__sfputs_r+0xa>
 8009f60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009f64 <_vfiprintf_r>:
 8009f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f68:	460c      	mov	r4, r1
 8009f6a:	b09d      	sub	sp, #116	; 0x74
 8009f6c:	4617      	mov	r7, r2
 8009f6e:	461d      	mov	r5, r3
 8009f70:	4606      	mov	r6, r0
 8009f72:	b118      	cbz	r0, 8009f7c <_vfiprintf_r+0x18>
 8009f74:	6983      	ldr	r3, [r0, #24]
 8009f76:	b90b      	cbnz	r3, 8009f7c <_vfiprintf_r+0x18>
 8009f78:	f7ff fb2a 	bl	80095d0 <__sinit>
 8009f7c:	4b7c      	ldr	r3, [pc, #496]	; (800a170 <_vfiprintf_r+0x20c>)
 8009f7e:	429c      	cmp	r4, r3
 8009f80:	d158      	bne.n	800a034 <_vfiprintf_r+0xd0>
 8009f82:	6874      	ldr	r4, [r6, #4]
 8009f84:	89a3      	ldrh	r3, [r4, #12]
 8009f86:	0718      	lsls	r0, r3, #28
 8009f88:	d55e      	bpl.n	800a048 <_vfiprintf_r+0xe4>
 8009f8a:	6923      	ldr	r3, [r4, #16]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d05b      	beq.n	800a048 <_vfiprintf_r+0xe4>
 8009f90:	2300      	movs	r3, #0
 8009f92:	9309      	str	r3, [sp, #36]	; 0x24
 8009f94:	2320      	movs	r3, #32
 8009f96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009f9a:	2330      	movs	r3, #48	; 0x30
 8009f9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009fa0:	9503      	str	r5, [sp, #12]
 8009fa2:	f04f 0b01 	mov.w	fp, #1
 8009fa6:	46b8      	mov	r8, r7
 8009fa8:	4645      	mov	r5, r8
 8009faa:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009fae:	b10b      	cbz	r3, 8009fb4 <_vfiprintf_r+0x50>
 8009fb0:	2b25      	cmp	r3, #37	; 0x25
 8009fb2:	d154      	bne.n	800a05e <_vfiprintf_r+0xfa>
 8009fb4:	ebb8 0a07 	subs.w	sl, r8, r7
 8009fb8:	d00b      	beq.n	8009fd2 <_vfiprintf_r+0x6e>
 8009fba:	4653      	mov	r3, sl
 8009fbc:	463a      	mov	r2, r7
 8009fbe:	4621      	mov	r1, r4
 8009fc0:	4630      	mov	r0, r6
 8009fc2:	f7ff ffbc 	bl	8009f3e <__sfputs_r>
 8009fc6:	3001      	adds	r0, #1
 8009fc8:	f000 80c2 	beq.w	800a150 <_vfiprintf_r+0x1ec>
 8009fcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fce:	4453      	add	r3, sl
 8009fd0:	9309      	str	r3, [sp, #36]	; 0x24
 8009fd2:	f898 3000 	ldrb.w	r3, [r8]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	f000 80ba 	beq.w	800a150 <_vfiprintf_r+0x1ec>
 8009fdc:	2300      	movs	r3, #0
 8009fde:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009fe2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009fe6:	9304      	str	r3, [sp, #16]
 8009fe8:	9307      	str	r3, [sp, #28]
 8009fea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009fee:	931a      	str	r3, [sp, #104]	; 0x68
 8009ff0:	46a8      	mov	r8, r5
 8009ff2:	2205      	movs	r2, #5
 8009ff4:	f818 1b01 	ldrb.w	r1, [r8], #1
 8009ff8:	485e      	ldr	r0, [pc, #376]	; (800a174 <_vfiprintf_r+0x210>)
 8009ffa:	f7f6 f8f1 	bl	80001e0 <memchr>
 8009ffe:	9b04      	ldr	r3, [sp, #16]
 800a000:	bb78      	cbnz	r0, 800a062 <_vfiprintf_r+0xfe>
 800a002:	06d9      	lsls	r1, r3, #27
 800a004:	bf44      	itt	mi
 800a006:	2220      	movmi	r2, #32
 800a008:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a00c:	071a      	lsls	r2, r3, #28
 800a00e:	bf44      	itt	mi
 800a010:	222b      	movmi	r2, #43	; 0x2b
 800a012:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a016:	782a      	ldrb	r2, [r5, #0]
 800a018:	2a2a      	cmp	r2, #42	; 0x2a
 800a01a:	d02a      	beq.n	800a072 <_vfiprintf_r+0x10e>
 800a01c:	9a07      	ldr	r2, [sp, #28]
 800a01e:	46a8      	mov	r8, r5
 800a020:	2000      	movs	r0, #0
 800a022:	250a      	movs	r5, #10
 800a024:	4641      	mov	r1, r8
 800a026:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a02a:	3b30      	subs	r3, #48	; 0x30
 800a02c:	2b09      	cmp	r3, #9
 800a02e:	d969      	bls.n	800a104 <_vfiprintf_r+0x1a0>
 800a030:	b360      	cbz	r0, 800a08c <_vfiprintf_r+0x128>
 800a032:	e024      	b.n	800a07e <_vfiprintf_r+0x11a>
 800a034:	4b50      	ldr	r3, [pc, #320]	; (800a178 <_vfiprintf_r+0x214>)
 800a036:	429c      	cmp	r4, r3
 800a038:	d101      	bne.n	800a03e <_vfiprintf_r+0xda>
 800a03a:	68b4      	ldr	r4, [r6, #8]
 800a03c:	e7a2      	b.n	8009f84 <_vfiprintf_r+0x20>
 800a03e:	4b4f      	ldr	r3, [pc, #316]	; (800a17c <_vfiprintf_r+0x218>)
 800a040:	429c      	cmp	r4, r3
 800a042:	bf08      	it	eq
 800a044:	68f4      	ldreq	r4, [r6, #12]
 800a046:	e79d      	b.n	8009f84 <_vfiprintf_r+0x20>
 800a048:	4621      	mov	r1, r4
 800a04a:	4630      	mov	r0, r6
 800a04c:	f7fe fb1e 	bl	800868c <__swsetup_r>
 800a050:	2800      	cmp	r0, #0
 800a052:	d09d      	beq.n	8009f90 <_vfiprintf_r+0x2c>
 800a054:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a058:	b01d      	add	sp, #116	; 0x74
 800a05a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a05e:	46a8      	mov	r8, r5
 800a060:	e7a2      	b.n	8009fa8 <_vfiprintf_r+0x44>
 800a062:	4a44      	ldr	r2, [pc, #272]	; (800a174 <_vfiprintf_r+0x210>)
 800a064:	1a80      	subs	r0, r0, r2
 800a066:	fa0b f000 	lsl.w	r0, fp, r0
 800a06a:	4318      	orrs	r0, r3
 800a06c:	9004      	str	r0, [sp, #16]
 800a06e:	4645      	mov	r5, r8
 800a070:	e7be      	b.n	8009ff0 <_vfiprintf_r+0x8c>
 800a072:	9a03      	ldr	r2, [sp, #12]
 800a074:	1d11      	adds	r1, r2, #4
 800a076:	6812      	ldr	r2, [r2, #0]
 800a078:	9103      	str	r1, [sp, #12]
 800a07a:	2a00      	cmp	r2, #0
 800a07c:	db01      	blt.n	800a082 <_vfiprintf_r+0x11e>
 800a07e:	9207      	str	r2, [sp, #28]
 800a080:	e004      	b.n	800a08c <_vfiprintf_r+0x128>
 800a082:	4252      	negs	r2, r2
 800a084:	f043 0302 	orr.w	r3, r3, #2
 800a088:	9207      	str	r2, [sp, #28]
 800a08a:	9304      	str	r3, [sp, #16]
 800a08c:	f898 3000 	ldrb.w	r3, [r8]
 800a090:	2b2e      	cmp	r3, #46	; 0x2e
 800a092:	d10e      	bne.n	800a0b2 <_vfiprintf_r+0x14e>
 800a094:	f898 3001 	ldrb.w	r3, [r8, #1]
 800a098:	2b2a      	cmp	r3, #42	; 0x2a
 800a09a:	d138      	bne.n	800a10e <_vfiprintf_r+0x1aa>
 800a09c:	9b03      	ldr	r3, [sp, #12]
 800a09e:	1d1a      	adds	r2, r3, #4
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	9203      	str	r2, [sp, #12]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	bfb8      	it	lt
 800a0a8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a0ac:	f108 0802 	add.w	r8, r8, #2
 800a0b0:	9305      	str	r3, [sp, #20]
 800a0b2:	4d33      	ldr	r5, [pc, #204]	; (800a180 <_vfiprintf_r+0x21c>)
 800a0b4:	f898 1000 	ldrb.w	r1, [r8]
 800a0b8:	2203      	movs	r2, #3
 800a0ba:	4628      	mov	r0, r5
 800a0bc:	f7f6 f890 	bl	80001e0 <memchr>
 800a0c0:	b140      	cbz	r0, 800a0d4 <_vfiprintf_r+0x170>
 800a0c2:	2340      	movs	r3, #64	; 0x40
 800a0c4:	1b40      	subs	r0, r0, r5
 800a0c6:	fa03 f000 	lsl.w	r0, r3, r0
 800a0ca:	9b04      	ldr	r3, [sp, #16]
 800a0cc:	4303      	orrs	r3, r0
 800a0ce:	f108 0801 	add.w	r8, r8, #1
 800a0d2:	9304      	str	r3, [sp, #16]
 800a0d4:	f898 1000 	ldrb.w	r1, [r8]
 800a0d8:	482a      	ldr	r0, [pc, #168]	; (800a184 <_vfiprintf_r+0x220>)
 800a0da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a0de:	2206      	movs	r2, #6
 800a0e0:	f108 0701 	add.w	r7, r8, #1
 800a0e4:	f7f6 f87c 	bl	80001e0 <memchr>
 800a0e8:	2800      	cmp	r0, #0
 800a0ea:	d037      	beq.n	800a15c <_vfiprintf_r+0x1f8>
 800a0ec:	4b26      	ldr	r3, [pc, #152]	; (800a188 <_vfiprintf_r+0x224>)
 800a0ee:	bb1b      	cbnz	r3, 800a138 <_vfiprintf_r+0x1d4>
 800a0f0:	9b03      	ldr	r3, [sp, #12]
 800a0f2:	3307      	adds	r3, #7
 800a0f4:	f023 0307 	bic.w	r3, r3, #7
 800a0f8:	3308      	adds	r3, #8
 800a0fa:	9303      	str	r3, [sp, #12]
 800a0fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0fe:	444b      	add	r3, r9
 800a100:	9309      	str	r3, [sp, #36]	; 0x24
 800a102:	e750      	b.n	8009fa6 <_vfiprintf_r+0x42>
 800a104:	fb05 3202 	mla	r2, r5, r2, r3
 800a108:	2001      	movs	r0, #1
 800a10a:	4688      	mov	r8, r1
 800a10c:	e78a      	b.n	800a024 <_vfiprintf_r+0xc0>
 800a10e:	2300      	movs	r3, #0
 800a110:	f108 0801 	add.w	r8, r8, #1
 800a114:	9305      	str	r3, [sp, #20]
 800a116:	4619      	mov	r1, r3
 800a118:	250a      	movs	r5, #10
 800a11a:	4640      	mov	r0, r8
 800a11c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a120:	3a30      	subs	r2, #48	; 0x30
 800a122:	2a09      	cmp	r2, #9
 800a124:	d903      	bls.n	800a12e <_vfiprintf_r+0x1ca>
 800a126:	2b00      	cmp	r3, #0
 800a128:	d0c3      	beq.n	800a0b2 <_vfiprintf_r+0x14e>
 800a12a:	9105      	str	r1, [sp, #20]
 800a12c:	e7c1      	b.n	800a0b2 <_vfiprintf_r+0x14e>
 800a12e:	fb05 2101 	mla	r1, r5, r1, r2
 800a132:	2301      	movs	r3, #1
 800a134:	4680      	mov	r8, r0
 800a136:	e7f0      	b.n	800a11a <_vfiprintf_r+0x1b6>
 800a138:	ab03      	add	r3, sp, #12
 800a13a:	9300      	str	r3, [sp, #0]
 800a13c:	4622      	mov	r2, r4
 800a13e:	4b13      	ldr	r3, [pc, #76]	; (800a18c <_vfiprintf_r+0x228>)
 800a140:	a904      	add	r1, sp, #16
 800a142:	4630      	mov	r0, r6
 800a144:	f7fd fe0c 	bl	8007d60 <_printf_float>
 800a148:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800a14c:	4681      	mov	r9, r0
 800a14e:	d1d5      	bne.n	800a0fc <_vfiprintf_r+0x198>
 800a150:	89a3      	ldrh	r3, [r4, #12]
 800a152:	065b      	lsls	r3, r3, #25
 800a154:	f53f af7e 	bmi.w	800a054 <_vfiprintf_r+0xf0>
 800a158:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a15a:	e77d      	b.n	800a058 <_vfiprintf_r+0xf4>
 800a15c:	ab03      	add	r3, sp, #12
 800a15e:	9300      	str	r3, [sp, #0]
 800a160:	4622      	mov	r2, r4
 800a162:	4b0a      	ldr	r3, [pc, #40]	; (800a18c <_vfiprintf_r+0x228>)
 800a164:	a904      	add	r1, sp, #16
 800a166:	4630      	mov	r0, r6
 800a168:	f7fe f8b0 	bl	80082cc <_printf_i>
 800a16c:	e7ec      	b.n	800a148 <_vfiprintf_r+0x1e4>
 800a16e:	bf00      	nop
 800a170:	0800b6c0 	.word	0x0800b6c0
 800a174:	0800b7fc 	.word	0x0800b7fc
 800a178:	0800b6e0 	.word	0x0800b6e0
 800a17c:	0800b6a0 	.word	0x0800b6a0
 800a180:	0800b802 	.word	0x0800b802
 800a184:	0800b806 	.word	0x0800b806
 800a188:	08007d61 	.word	0x08007d61
 800a18c:	08009f3f 	.word	0x08009f3f

0800a190 <_sbrk_r>:
 800a190:	b538      	push	{r3, r4, r5, lr}
 800a192:	4c06      	ldr	r4, [pc, #24]	; (800a1ac <_sbrk_r+0x1c>)
 800a194:	2300      	movs	r3, #0
 800a196:	4605      	mov	r5, r0
 800a198:	4608      	mov	r0, r1
 800a19a:	6023      	str	r3, [r4, #0]
 800a19c:	f7f9 ffcc 	bl	8004138 <_sbrk>
 800a1a0:	1c43      	adds	r3, r0, #1
 800a1a2:	d102      	bne.n	800a1aa <_sbrk_r+0x1a>
 800a1a4:	6823      	ldr	r3, [r4, #0]
 800a1a6:	b103      	cbz	r3, 800a1aa <_sbrk_r+0x1a>
 800a1a8:	602b      	str	r3, [r5, #0]
 800a1aa:	bd38      	pop	{r3, r4, r5, pc}
 800a1ac:	20000470 	.word	0x20000470

0800a1b0 <__sread>:
 800a1b0:	b510      	push	{r4, lr}
 800a1b2:	460c      	mov	r4, r1
 800a1b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1b8:	f000 f8a8 	bl	800a30c <_read_r>
 800a1bc:	2800      	cmp	r0, #0
 800a1be:	bfab      	itete	ge
 800a1c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a1c2:	89a3      	ldrhlt	r3, [r4, #12]
 800a1c4:	181b      	addge	r3, r3, r0
 800a1c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a1ca:	bfac      	ite	ge
 800a1cc:	6563      	strge	r3, [r4, #84]	; 0x54
 800a1ce:	81a3      	strhlt	r3, [r4, #12]
 800a1d0:	bd10      	pop	{r4, pc}

0800a1d2 <__swrite>:
 800a1d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1d6:	461f      	mov	r7, r3
 800a1d8:	898b      	ldrh	r3, [r1, #12]
 800a1da:	05db      	lsls	r3, r3, #23
 800a1dc:	4605      	mov	r5, r0
 800a1de:	460c      	mov	r4, r1
 800a1e0:	4616      	mov	r6, r2
 800a1e2:	d505      	bpl.n	800a1f0 <__swrite+0x1e>
 800a1e4:	2302      	movs	r3, #2
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1ec:	f000 f868 	bl	800a2c0 <_lseek_r>
 800a1f0:	89a3      	ldrh	r3, [r4, #12]
 800a1f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a1f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a1fa:	81a3      	strh	r3, [r4, #12]
 800a1fc:	4632      	mov	r2, r6
 800a1fe:	463b      	mov	r3, r7
 800a200:	4628      	mov	r0, r5
 800a202:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a206:	f000 b817 	b.w	800a238 <_write_r>

0800a20a <__sseek>:
 800a20a:	b510      	push	{r4, lr}
 800a20c:	460c      	mov	r4, r1
 800a20e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a212:	f000 f855 	bl	800a2c0 <_lseek_r>
 800a216:	1c43      	adds	r3, r0, #1
 800a218:	89a3      	ldrh	r3, [r4, #12]
 800a21a:	bf15      	itete	ne
 800a21c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a21e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a222:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a226:	81a3      	strheq	r3, [r4, #12]
 800a228:	bf18      	it	ne
 800a22a:	81a3      	strhne	r3, [r4, #12]
 800a22c:	bd10      	pop	{r4, pc}

0800a22e <__sclose>:
 800a22e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a232:	f000 b813 	b.w	800a25c <_close_r>
	...

0800a238 <_write_r>:
 800a238:	b538      	push	{r3, r4, r5, lr}
 800a23a:	4c07      	ldr	r4, [pc, #28]	; (800a258 <_write_r+0x20>)
 800a23c:	4605      	mov	r5, r0
 800a23e:	4608      	mov	r0, r1
 800a240:	4611      	mov	r1, r2
 800a242:	2200      	movs	r2, #0
 800a244:	6022      	str	r2, [r4, #0]
 800a246:	461a      	mov	r2, r3
 800a248:	f7f8 fff8 	bl	800323c <_write>
 800a24c:	1c43      	adds	r3, r0, #1
 800a24e:	d102      	bne.n	800a256 <_write_r+0x1e>
 800a250:	6823      	ldr	r3, [r4, #0]
 800a252:	b103      	cbz	r3, 800a256 <_write_r+0x1e>
 800a254:	602b      	str	r3, [r5, #0]
 800a256:	bd38      	pop	{r3, r4, r5, pc}
 800a258:	20000470 	.word	0x20000470

0800a25c <_close_r>:
 800a25c:	b538      	push	{r3, r4, r5, lr}
 800a25e:	4c06      	ldr	r4, [pc, #24]	; (800a278 <_close_r+0x1c>)
 800a260:	2300      	movs	r3, #0
 800a262:	4605      	mov	r5, r0
 800a264:	4608      	mov	r0, r1
 800a266:	6023      	str	r3, [r4, #0]
 800a268:	f7f9 ff31 	bl	80040ce <_close>
 800a26c:	1c43      	adds	r3, r0, #1
 800a26e:	d102      	bne.n	800a276 <_close_r+0x1a>
 800a270:	6823      	ldr	r3, [r4, #0]
 800a272:	b103      	cbz	r3, 800a276 <_close_r+0x1a>
 800a274:	602b      	str	r3, [r5, #0]
 800a276:	bd38      	pop	{r3, r4, r5, pc}
 800a278:	20000470 	.word	0x20000470

0800a27c <_fstat_r>:
 800a27c:	b538      	push	{r3, r4, r5, lr}
 800a27e:	4c07      	ldr	r4, [pc, #28]	; (800a29c <_fstat_r+0x20>)
 800a280:	2300      	movs	r3, #0
 800a282:	4605      	mov	r5, r0
 800a284:	4608      	mov	r0, r1
 800a286:	4611      	mov	r1, r2
 800a288:	6023      	str	r3, [r4, #0]
 800a28a:	f7f9 ff2c 	bl	80040e6 <_fstat>
 800a28e:	1c43      	adds	r3, r0, #1
 800a290:	d102      	bne.n	800a298 <_fstat_r+0x1c>
 800a292:	6823      	ldr	r3, [r4, #0]
 800a294:	b103      	cbz	r3, 800a298 <_fstat_r+0x1c>
 800a296:	602b      	str	r3, [r5, #0]
 800a298:	bd38      	pop	{r3, r4, r5, pc}
 800a29a:	bf00      	nop
 800a29c:	20000470 	.word	0x20000470

0800a2a0 <_isatty_r>:
 800a2a0:	b538      	push	{r3, r4, r5, lr}
 800a2a2:	4c06      	ldr	r4, [pc, #24]	; (800a2bc <_isatty_r+0x1c>)
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	4605      	mov	r5, r0
 800a2a8:	4608      	mov	r0, r1
 800a2aa:	6023      	str	r3, [r4, #0]
 800a2ac:	f7f9 ff2b 	bl	8004106 <_isatty>
 800a2b0:	1c43      	adds	r3, r0, #1
 800a2b2:	d102      	bne.n	800a2ba <_isatty_r+0x1a>
 800a2b4:	6823      	ldr	r3, [r4, #0]
 800a2b6:	b103      	cbz	r3, 800a2ba <_isatty_r+0x1a>
 800a2b8:	602b      	str	r3, [r5, #0]
 800a2ba:	bd38      	pop	{r3, r4, r5, pc}
 800a2bc:	20000470 	.word	0x20000470

0800a2c0 <_lseek_r>:
 800a2c0:	b538      	push	{r3, r4, r5, lr}
 800a2c2:	4c07      	ldr	r4, [pc, #28]	; (800a2e0 <_lseek_r+0x20>)
 800a2c4:	4605      	mov	r5, r0
 800a2c6:	4608      	mov	r0, r1
 800a2c8:	4611      	mov	r1, r2
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	6022      	str	r2, [r4, #0]
 800a2ce:	461a      	mov	r2, r3
 800a2d0:	f7f9 ff24 	bl	800411c <_lseek>
 800a2d4:	1c43      	adds	r3, r0, #1
 800a2d6:	d102      	bne.n	800a2de <_lseek_r+0x1e>
 800a2d8:	6823      	ldr	r3, [r4, #0]
 800a2da:	b103      	cbz	r3, 800a2de <_lseek_r+0x1e>
 800a2dc:	602b      	str	r3, [r5, #0]
 800a2de:	bd38      	pop	{r3, r4, r5, pc}
 800a2e0:	20000470 	.word	0x20000470

0800a2e4 <__ascii_mbtowc>:
 800a2e4:	b082      	sub	sp, #8
 800a2e6:	b901      	cbnz	r1, 800a2ea <__ascii_mbtowc+0x6>
 800a2e8:	a901      	add	r1, sp, #4
 800a2ea:	b142      	cbz	r2, 800a2fe <__ascii_mbtowc+0x1a>
 800a2ec:	b14b      	cbz	r3, 800a302 <__ascii_mbtowc+0x1e>
 800a2ee:	7813      	ldrb	r3, [r2, #0]
 800a2f0:	600b      	str	r3, [r1, #0]
 800a2f2:	7812      	ldrb	r2, [r2, #0]
 800a2f4:	1c10      	adds	r0, r2, #0
 800a2f6:	bf18      	it	ne
 800a2f8:	2001      	movne	r0, #1
 800a2fa:	b002      	add	sp, #8
 800a2fc:	4770      	bx	lr
 800a2fe:	4610      	mov	r0, r2
 800a300:	e7fb      	b.n	800a2fa <__ascii_mbtowc+0x16>
 800a302:	f06f 0001 	mvn.w	r0, #1
 800a306:	e7f8      	b.n	800a2fa <__ascii_mbtowc+0x16>

0800a308 <__malloc_lock>:
 800a308:	4770      	bx	lr

0800a30a <__malloc_unlock>:
 800a30a:	4770      	bx	lr

0800a30c <_read_r>:
 800a30c:	b538      	push	{r3, r4, r5, lr}
 800a30e:	4c07      	ldr	r4, [pc, #28]	; (800a32c <_read_r+0x20>)
 800a310:	4605      	mov	r5, r0
 800a312:	4608      	mov	r0, r1
 800a314:	4611      	mov	r1, r2
 800a316:	2200      	movs	r2, #0
 800a318:	6022      	str	r2, [r4, #0]
 800a31a:	461a      	mov	r2, r3
 800a31c:	f7f9 feba 	bl	8004094 <_read>
 800a320:	1c43      	adds	r3, r0, #1
 800a322:	d102      	bne.n	800a32a <_read_r+0x1e>
 800a324:	6823      	ldr	r3, [r4, #0]
 800a326:	b103      	cbz	r3, 800a32a <_read_r+0x1e>
 800a328:	602b      	str	r3, [r5, #0]
 800a32a:	bd38      	pop	{r3, r4, r5, pc}
 800a32c:	20000470 	.word	0x20000470

0800a330 <__ascii_wctomb>:
 800a330:	b149      	cbz	r1, 800a346 <__ascii_wctomb+0x16>
 800a332:	2aff      	cmp	r2, #255	; 0xff
 800a334:	bf85      	ittet	hi
 800a336:	238a      	movhi	r3, #138	; 0x8a
 800a338:	6003      	strhi	r3, [r0, #0]
 800a33a:	700a      	strbls	r2, [r1, #0]
 800a33c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800a340:	bf98      	it	ls
 800a342:	2001      	movls	r0, #1
 800a344:	4770      	bx	lr
 800a346:	4608      	mov	r0, r1
 800a348:	4770      	bx	lr
	...

0800a34c <asinf>:
 800a34c:	b510      	push	{r4, lr}
 800a34e:	ed2d 8b02 	vpush	{d8}
 800a352:	4c27      	ldr	r4, [pc, #156]	; (800a3f0 <asinf+0xa4>)
 800a354:	b08a      	sub	sp, #40	; 0x28
 800a356:	eeb0 8a40 	vmov.f32	s16, s0
 800a35a:	f000 f9b5 	bl	800a6c8 <__ieee754_asinf>
 800a35e:	f994 3000 	ldrsb.w	r3, [r4]
 800a362:	3301      	adds	r3, #1
 800a364:	eef0 8a40 	vmov.f32	s17, s0
 800a368:	d03c      	beq.n	800a3e4 <asinf+0x98>
 800a36a:	eeb4 8a48 	vcmp.f32	s16, s16
 800a36e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a372:	d637      	bvs.n	800a3e4 <asinf+0x98>
 800a374:	eeb0 0a48 	vmov.f32	s0, s16
 800a378:	f000 fede 	bl	800b138 <fabsf>
 800a37c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800a380:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800a384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a388:	dd2c      	ble.n	800a3e4 <asinf+0x98>
 800a38a:	2301      	movs	r3, #1
 800a38c:	9300      	str	r3, [sp, #0]
 800a38e:	4b19      	ldr	r3, [pc, #100]	; (800a3f4 <asinf+0xa8>)
 800a390:	9301      	str	r3, [sp, #4]
 800a392:	ee18 0a10 	vmov	r0, s16
 800a396:	2300      	movs	r3, #0
 800a398:	9308      	str	r3, [sp, #32]
 800a39a:	f7f6 f8d5 	bl	8000548 <__aeabi_f2d>
 800a39e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a3a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a3a6:	4814      	ldr	r0, [pc, #80]	; (800a3f8 <asinf+0xac>)
 800a3a8:	f000 fdea 	bl	800af80 <nan>
 800a3ac:	f994 3000 	ldrsb.w	r3, [r4]
 800a3b0:	2b02      	cmp	r3, #2
 800a3b2:	ed8d 0b06 	vstr	d0, [sp, #24]
 800a3b6:	d104      	bne.n	800a3c2 <asinf+0x76>
 800a3b8:	f7fd fc0c 	bl	8007bd4 <__errno>
 800a3bc:	2321      	movs	r3, #33	; 0x21
 800a3be:	6003      	str	r3, [r0, #0]
 800a3c0:	e004      	b.n	800a3cc <asinf+0x80>
 800a3c2:	4668      	mov	r0, sp
 800a3c4:	f000 fdd9 	bl	800af7a <matherr>
 800a3c8:	2800      	cmp	r0, #0
 800a3ca:	d0f5      	beq.n	800a3b8 <asinf+0x6c>
 800a3cc:	9b08      	ldr	r3, [sp, #32]
 800a3ce:	b11b      	cbz	r3, 800a3d8 <asinf+0x8c>
 800a3d0:	f7fd fc00 	bl	8007bd4 <__errno>
 800a3d4:	9b08      	ldr	r3, [sp, #32]
 800a3d6:	6003      	str	r3, [r0, #0]
 800a3d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a3dc:	f7f6 fbe4 	bl	8000ba8 <__aeabi_d2f>
 800a3e0:	ee08 0a90 	vmov	s17, r0
 800a3e4:	eeb0 0a68 	vmov.f32	s0, s17
 800a3e8:	b00a      	add	sp, #40	; 0x28
 800a3ea:	ecbd 8b02 	vpop	{d8}
 800a3ee:	bd10      	pop	{r4, pc}
 800a3f0:	200001e0 	.word	0x200001e0
 800a3f4:	0800b918 	.word	0x0800b918
 800a3f8:	0800b801 	.word	0x0800b801

0800a3fc <atan2f>:
 800a3fc:	f000 ba4c 	b.w	800a898 <__ieee754_atan2f>

0800a400 <powf>:
 800a400:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 800a404:	ed2d 8b04 	vpush	{d8-d9}
 800a408:	4ca7      	ldr	r4, [pc, #668]	; (800a6a8 <powf+0x2a8>)
 800a40a:	b08a      	sub	sp, #40	; 0x28
 800a40c:	eef0 8a40 	vmov.f32	s17, s0
 800a410:	eeb0 8a60 	vmov.f32	s16, s1
 800a414:	f000 faee 	bl	800a9f4 <__ieee754_powf>
 800a418:	f994 5000 	ldrsb.w	r5, [r4]
 800a41c:	1c6b      	adds	r3, r5, #1
 800a41e:	eeb0 9a40 	vmov.f32	s18, s0
 800a422:	4626      	mov	r6, r4
 800a424:	d05f      	beq.n	800a4e6 <powf+0xe6>
 800a426:	eeb4 8a48 	vcmp.f32	s16, s16
 800a42a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a42e:	d65a      	bvs.n	800a4e6 <powf+0xe6>
 800a430:	eef4 8a68 	vcmp.f32	s17, s17
 800a434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a438:	d721      	bvc.n	800a47e <powf+0x7e>
 800a43a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800a43e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a442:	d150      	bne.n	800a4e6 <powf+0xe6>
 800a444:	2301      	movs	r3, #1
 800a446:	9300      	str	r3, [sp, #0]
 800a448:	4b98      	ldr	r3, [pc, #608]	; (800a6ac <powf+0x2ac>)
 800a44a:	9301      	str	r3, [sp, #4]
 800a44c:	ee18 0a90 	vmov	r0, s17
 800a450:	2300      	movs	r3, #0
 800a452:	9308      	str	r3, [sp, #32]
 800a454:	f7f6 f878 	bl	8000548 <__aeabi_f2d>
 800a458:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a45c:	ee18 0a10 	vmov	r0, s16
 800a460:	f7f6 f872 	bl	8000548 <__aeabi_f2d>
 800a464:	4b92      	ldr	r3, [pc, #584]	; (800a6b0 <powf+0x2b0>)
 800a466:	2200      	movs	r2, #0
 800a468:	2d02      	cmp	r5, #2
 800a46a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a46e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a472:	d032      	beq.n	800a4da <powf+0xda>
 800a474:	4668      	mov	r0, sp
 800a476:	f000 fd80 	bl	800af7a <matherr>
 800a47a:	bb40      	cbnz	r0, 800a4ce <powf+0xce>
 800a47c:	e065      	b.n	800a54a <powf+0x14a>
 800a47e:	eddf 9a8d 	vldr	s19, [pc, #564]	; 800a6b4 <powf+0x2b4>
 800a482:	eef4 8a69 	vcmp.f32	s17, s19
 800a486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a48a:	d163      	bne.n	800a554 <powf+0x154>
 800a48c:	eeb4 8a69 	vcmp.f32	s16, s19
 800a490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a494:	d12e      	bne.n	800a4f4 <powf+0xf4>
 800a496:	2301      	movs	r3, #1
 800a498:	9300      	str	r3, [sp, #0]
 800a49a:	4b84      	ldr	r3, [pc, #528]	; (800a6ac <powf+0x2ac>)
 800a49c:	9301      	str	r3, [sp, #4]
 800a49e:	ee18 0a90 	vmov	r0, s17
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	9308      	str	r3, [sp, #32]
 800a4a6:	f7f6 f84f 	bl	8000548 <__aeabi_f2d>
 800a4aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a4ae:	ee18 0a10 	vmov	r0, s16
 800a4b2:	f7f6 f849 	bl	8000548 <__aeabi_f2d>
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a4be:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a4c2:	2d00      	cmp	r5, #0
 800a4c4:	d0d6      	beq.n	800a474 <powf+0x74>
 800a4c6:	4b7a      	ldr	r3, [pc, #488]	; (800a6b0 <powf+0x2b0>)
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a4ce:	9b08      	ldr	r3, [sp, #32]
 800a4d0:	b11b      	cbz	r3, 800a4da <powf+0xda>
 800a4d2:	f7fd fb7f 	bl	8007bd4 <__errno>
 800a4d6:	9b08      	ldr	r3, [sp, #32]
 800a4d8:	6003      	str	r3, [r0, #0]
 800a4da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a4de:	f7f6 fb63 	bl	8000ba8 <__aeabi_d2f>
 800a4e2:	ee09 0a10 	vmov	s18, r0
 800a4e6:	eeb0 0a49 	vmov.f32	s0, s18
 800a4ea:	b00a      	add	sp, #40	; 0x28
 800a4ec:	ecbd 8b04 	vpop	{d8-d9}
 800a4f0:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800a4f4:	eeb0 0a48 	vmov.f32	s0, s16
 800a4f8:	f000 fe25 	bl	800b146 <finitef>
 800a4fc:	2800      	cmp	r0, #0
 800a4fe:	d0f2      	beq.n	800a4e6 <powf+0xe6>
 800a500:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800a504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a508:	d5ed      	bpl.n	800a4e6 <powf+0xe6>
 800a50a:	2301      	movs	r3, #1
 800a50c:	9300      	str	r3, [sp, #0]
 800a50e:	4b67      	ldr	r3, [pc, #412]	; (800a6ac <powf+0x2ac>)
 800a510:	9301      	str	r3, [sp, #4]
 800a512:	ee18 0a90 	vmov	r0, s17
 800a516:	2300      	movs	r3, #0
 800a518:	9308      	str	r3, [sp, #32]
 800a51a:	f7f6 f815 	bl	8000548 <__aeabi_f2d>
 800a51e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a522:	ee18 0a10 	vmov	r0, s16
 800a526:	f7f6 f80f 	bl	8000548 <__aeabi_f2d>
 800a52a:	f994 3000 	ldrsb.w	r3, [r4]
 800a52e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a532:	b923      	cbnz	r3, 800a53e <powf+0x13e>
 800a534:	2200      	movs	r2, #0
 800a536:	2300      	movs	r3, #0
 800a538:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a53c:	e79a      	b.n	800a474 <powf+0x74>
 800a53e:	495e      	ldr	r1, [pc, #376]	; (800a6b8 <powf+0x2b8>)
 800a540:	2000      	movs	r0, #0
 800a542:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a546:	2b02      	cmp	r3, #2
 800a548:	d194      	bne.n	800a474 <powf+0x74>
 800a54a:	f7fd fb43 	bl	8007bd4 <__errno>
 800a54e:	2321      	movs	r3, #33	; 0x21
 800a550:	6003      	str	r3, [r0, #0]
 800a552:	e7bc      	b.n	800a4ce <powf+0xce>
 800a554:	f000 fdf7 	bl	800b146 <finitef>
 800a558:	4605      	mov	r5, r0
 800a55a:	2800      	cmp	r0, #0
 800a55c:	d173      	bne.n	800a646 <powf+0x246>
 800a55e:	eeb0 0a68 	vmov.f32	s0, s17
 800a562:	f000 fdf0 	bl	800b146 <finitef>
 800a566:	2800      	cmp	r0, #0
 800a568:	d06d      	beq.n	800a646 <powf+0x246>
 800a56a:	eeb0 0a48 	vmov.f32	s0, s16
 800a56e:	f000 fdea 	bl	800b146 <finitef>
 800a572:	2800      	cmp	r0, #0
 800a574:	d067      	beq.n	800a646 <powf+0x246>
 800a576:	ee18 0a90 	vmov	r0, s17
 800a57a:	f7f5 ffe5 	bl	8000548 <__aeabi_f2d>
 800a57e:	4680      	mov	r8, r0
 800a580:	ee18 0a10 	vmov	r0, s16
 800a584:	4689      	mov	r9, r1
 800a586:	f7f5 ffdf 	bl	8000548 <__aeabi_f2d>
 800a58a:	eeb4 9a49 	vcmp.f32	s18, s18
 800a58e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a592:	f994 4000 	ldrsb.w	r4, [r4]
 800a596:	4b45      	ldr	r3, [pc, #276]	; (800a6ac <powf+0x2ac>)
 800a598:	d713      	bvc.n	800a5c2 <powf+0x1c2>
 800a59a:	2201      	movs	r2, #1
 800a59c:	e9cd 2300 	strd	r2, r3, [sp]
 800a5a0:	9508      	str	r5, [sp, #32]
 800a5a2:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800a5a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a5aa:	2c00      	cmp	r4, #0
 800a5ac:	d0c2      	beq.n	800a534 <powf+0x134>
 800a5ae:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 800a5b2:	ee17 0a90 	vmov	r0, s15
 800a5b6:	f7f5 ffc7 	bl	8000548 <__aeabi_f2d>
 800a5ba:	2c02      	cmp	r4, #2
 800a5bc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a5c0:	e7c2      	b.n	800a548 <powf+0x148>
 800a5c2:	2203      	movs	r2, #3
 800a5c4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800a5c8:	e9cd 2300 	strd	r2, r3, [sp]
 800a5cc:	9508      	str	r5, [sp, #32]
 800a5ce:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800a5d2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a5d6:	ee28 8a27 	vmul.f32	s16, s16, s15
 800a5da:	b9fc      	cbnz	r4, 800a61c <powf+0x21c>
 800a5dc:	4b37      	ldr	r3, [pc, #220]	; (800a6bc <powf+0x2bc>)
 800a5de:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800a5e2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800a5e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5ea:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a5ee:	d553      	bpl.n	800a698 <powf+0x298>
 800a5f0:	eeb0 0a48 	vmov.f32	s0, s16
 800a5f4:	f000 fdb8 	bl	800b168 <rintf>
 800a5f8:	eeb4 0a48 	vcmp.f32	s0, s16
 800a5fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a600:	d004      	beq.n	800a60c <powf+0x20c>
 800a602:	4b2f      	ldr	r3, [pc, #188]	; (800a6c0 <powf+0x2c0>)
 800a604:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800a608:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a60c:	f996 3000 	ldrsb.w	r3, [r6]
 800a610:	2b02      	cmp	r3, #2
 800a612:	d141      	bne.n	800a698 <powf+0x298>
 800a614:	f7fd fade 	bl	8007bd4 <__errno>
 800a618:	2322      	movs	r3, #34	; 0x22
 800a61a:	e799      	b.n	800a550 <powf+0x150>
 800a61c:	4b29      	ldr	r3, [pc, #164]	; (800a6c4 <powf+0x2c4>)
 800a61e:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800a622:	2200      	movs	r2, #0
 800a624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a628:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a62c:	d5ee      	bpl.n	800a60c <powf+0x20c>
 800a62e:	eeb0 0a48 	vmov.f32	s0, s16
 800a632:	f000 fd99 	bl	800b168 <rintf>
 800a636:	eeb4 0a48 	vcmp.f32	s0, s16
 800a63a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a63e:	d0e5      	beq.n	800a60c <powf+0x20c>
 800a640:	2200      	movs	r2, #0
 800a642:	4b1d      	ldr	r3, [pc, #116]	; (800a6b8 <powf+0x2b8>)
 800a644:	e7e0      	b.n	800a608 <powf+0x208>
 800a646:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800a64a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a64e:	f47f af4a 	bne.w	800a4e6 <powf+0xe6>
 800a652:	eeb0 0a68 	vmov.f32	s0, s17
 800a656:	f000 fd76 	bl	800b146 <finitef>
 800a65a:	2800      	cmp	r0, #0
 800a65c:	f43f af43 	beq.w	800a4e6 <powf+0xe6>
 800a660:	eeb0 0a48 	vmov.f32	s0, s16
 800a664:	f000 fd6f 	bl	800b146 <finitef>
 800a668:	2800      	cmp	r0, #0
 800a66a:	f43f af3c 	beq.w	800a4e6 <powf+0xe6>
 800a66e:	2304      	movs	r3, #4
 800a670:	9300      	str	r3, [sp, #0]
 800a672:	4b0e      	ldr	r3, [pc, #56]	; (800a6ac <powf+0x2ac>)
 800a674:	9301      	str	r3, [sp, #4]
 800a676:	ee18 0a90 	vmov	r0, s17
 800a67a:	2300      	movs	r3, #0
 800a67c:	9308      	str	r3, [sp, #32]
 800a67e:	f7f5 ff63 	bl	8000548 <__aeabi_f2d>
 800a682:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a686:	ee18 0a10 	vmov	r0, s16
 800a68a:	f7f5 ff5d 	bl	8000548 <__aeabi_f2d>
 800a68e:	2200      	movs	r2, #0
 800a690:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a694:	2300      	movs	r3, #0
 800a696:	e7b7      	b.n	800a608 <powf+0x208>
 800a698:	4668      	mov	r0, sp
 800a69a:	f000 fc6e 	bl	800af7a <matherr>
 800a69e:	2800      	cmp	r0, #0
 800a6a0:	f47f af15 	bne.w	800a4ce <powf+0xce>
 800a6a4:	e7b6      	b.n	800a614 <powf+0x214>
 800a6a6:	bf00      	nop
 800a6a8:	200001e0 	.word	0x200001e0
 800a6ac:	0800b91e 	.word	0x0800b91e
 800a6b0:	3ff00000 	.word	0x3ff00000
 800a6b4:	00000000 	.word	0x00000000
 800a6b8:	fff00000 	.word	0xfff00000
 800a6bc:	47efffff 	.word	0x47efffff
 800a6c0:	c7efffff 	.word	0xc7efffff
 800a6c4:	7ff00000 	.word	0x7ff00000

0800a6c8 <__ieee754_asinf>:
 800a6c8:	b538      	push	{r3, r4, r5, lr}
 800a6ca:	ee10 5a10 	vmov	r5, s0
 800a6ce:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800a6d2:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800a6d6:	ed2d 8b04 	vpush	{d8-d9}
 800a6da:	d10c      	bne.n	800a6f6 <__ieee754_asinf+0x2e>
 800a6dc:	eddf 7a5e 	vldr	s15, [pc, #376]	; 800a858 <__ieee754_asinf+0x190>
 800a6e0:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 800a85c <__ieee754_asinf+0x194>
 800a6e4:	ee60 7a27 	vmul.f32	s15, s0, s15
 800a6e8:	eee0 7a07 	vfma.f32	s15, s0, s14
 800a6ec:	eeb0 0a67 	vmov.f32	s0, s15
 800a6f0:	ecbd 8b04 	vpop	{d8-d9}
 800a6f4:	bd38      	pop	{r3, r4, r5, pc}
 800a6f6:	dd04      	ble.n	800a702 <__ieee754_asinf+0x3a>
 800a6f8:	ee70 7a40 	vsub.f32	s15, s0, s0
 800a6fc:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800a700:	e7f6      	b.n	800a6f0 <__ieee754_asinf+0x28>
 800a702:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800a706:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800a70a:	da0b      	bge.n	800a724 <__ieee754_asinf+0x5c>
 800a70c:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800a710:	da52      	bge.n	800a7b8 <__ieee754_asinf+0xf0>
 800a712:	eddf 7a53 	vldr	s15, [pc, #332]	; 800a860 <__ieee754_asinf+0x198>
 800a716:	ee70 7a27 	vadd.f32	s15, s0, s15
 800a71a:	eef4 7ae8 	vcmpe.f32	s15, s17
 800a71e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a722:	dce5      	bgt.n	800a6f0 <__ieee754_asinf+0x28>
 800a724:	f000 fd08 	bl	800b138 <fabsf>
 800a728:	ee38 0ac0 	vsub.f32	s0, s17, s0
 800a72c:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800a730:	ee20 8a08 	vmul.f32	s16, s0, s16
 800a734:	eddf 7a4b 	vldr	s15, [pc, #300]	; 800a864 <__ieee754_asinf+0x19c>
 800a738:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800a868 <__ieee754_asinf+0x1a0>
 800a73c:	ed9f 9a4b 	vldr	s18, [pc, #300]	; 800a86c <__ieee754_asinf+0x1a4>
 800a740:	eea8 7a27 	vfma.f32	s14, s16, s15
 800a744:	eddf 7a4a 	vldr	s15, [pc, #296]	; 800a870 <__ieee754_asinf+0x1a8>
 800a748:	eee7 7a08 	vfma.f32	s15, s14, s16
 800a74c:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800a874 <__ieee754_asinf+0x1ac>
 800a750:	eea7 7a88 	vfma.f32	s14, s15, s16
 800a754:	eddf 7a48 	vldr	s15, [pc, #288]	; 800a878 <__ieee754_asinf+0x1b0>
 800a758:	eee7 7a08 	vfma.f32	s15, s14, s16
 800a75c:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800a87c <__ieee754_asinf+0x1b4>
 800a760:	eea7 9a88 	vfma.f32	s18, s15, s16
 800a764:	eddf 7a46 	vldr	s15, [pc, #280]	; 800a880 <__ieee754_asinf+0x1b8>
 800a768:	eee8 7a07 	vfma.f32	s15, s16, s14
 800a76c:	ed9f 7a45 	vldr	s14, [pc, #276]	; 800a884 <__ieee754_asinf+0x1bc>
 800a770:	eea7 7a88 	vfma.f32	s14, s15, s16
 800a774:	eddf 7a44 	vldr	s15, [pc, #272]	; 800a888 <__ieee754_asinf+0x1c0>
 800a778:	eee7 7a08 	vfma.f32	s15, s14, s16
 800a77c:	eeb0 0a48 	vmov.f32	s0, s16
 800a780:	eee7 8a88 	vfma.f32	s17, s15, s16
 800a784:	f000 fbf6 	bl	800af74 <__ieee754_sqrtf>
 800a788:	4b40      	ldr	r3, [pc, #256]	; (800a88c <__ieee754_asinf+0x1c4>)
 800a78a:	ee29 9a08 	vmul.f32	s18, s18, s16
 800a78e:	429c      	cmp	r4, r3
 800a790:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800a794:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a798:	dd3d      	ble.n	800a816 <__ieee754_asinf+0x14e>
 800a79a:	eea0 0a06 	vfma.f32	s0, s0, s12
 800a79e:	eddf 7a3c 	vldr	s15, [pc, #240]	; 800a890 <__ieee754_asinf+0x1c8>
 800a7a2:	eee0 7a07 	vfma.f32	s15, s0, s14
 800a7a6:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 800a85c <__ieee754_asinf+0x194>
 800a7aa:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a7ae:	2d00      	cmp	r5, #0
 800a7b0:	bfd8      	it	le
 800a7b2:	eeb1 0a40 	vnegle.f32	s0, s0
 800a7b6:	e79b      	b.n	800a6f0 <__ieee754_asinf+0x28>
 800a7b8:	ee60 7a00 	vmul.f32	s15, s0, s0
 800a7bc:	eddf 6a29 	vldr	s13, [pc, #164]	; 800a864 <__ieee754_asinf+0x19c>
 800a7c0:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800a868 <__ieee754_asinf+0x1a0>
 800a7c4:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 800a87c <__ieee754_asinf+0x1b4>
 800a7c8:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800a7cc:	eddf 6a28 	vldr	s13, [pc, #160]	; 800a870 <__ieee754_asinf+0x1a8>
 800a7d0:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a7d4:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800a874 <__ieee754_asinf+0x1ac>
 800a7d8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a7dc:	eddf 6a26 	vldr	s13, [pc, #152]	; 800a878 <__ieee754_asinf+0x1b0>
 800a7e0:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a7e4:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800a86c <__ieee754_asinf+0x1a4>
 800a7e8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a7ec:	eddf 6a24 	vldr	s13, [pc, #144]	; 800a880 <__ieee754_asinf+0x1b8>
 800a7f0:	eee7 6a86 	vfma.f32	s13, s15, s12
 800a7f4:	ed9f 6a23 	vldr	s12, [pc, #140]	; 800a884 <__ieee754_asinf+0x1bc>
 800a7f8:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800a7fc:	eddf 6a22 	vldr	s13, [pc, #136]	; 800a888 <__ieee754_asinf+0x1c0>
 800a800:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a804:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a808:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800a80c:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800a810:	eea0 0a27 	vfma.f32	s0, s0, s15
 800a814:	e76c      	b.n	800a6f0 <__ieee754_asinf+0x28>
 800a816:	ee10 3a10 	vmov	r3, s0
 800a81a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800a81e:	f023 030f 	bic.w	r3, r3, #15
 800a822:	ee07 3a90 	vmov	s15, r3
 800a826:	eef1 6a67 	vneg.f32	s13, s15
 800a82a:	eea6 8aa7 	vfma.f32	s16, s13, s15
 800a82e:	ee70 5a00 	vadd.f32	s11, s0, s0
 800a832:	ee37 0a80 	vadd.f32	s0, s15, s0
 800a836:	eddf 7a08 	vldr	s15, [pc, #32]	; 800a858 <__ieee754_asinf+0x190>
 800a83a:	ee88 5a00 	vdiv.f32	s10, s16, s0
 800a83e:	ed9f 0a15 	vldr	s0, [pc, #84]	; 800a894 <__ieee754_asinf+0x1cc>
 800a842:	eee5 7a47 	vfms.f32	s15, s10, s14
 800a846:	eed5 7a86 	vfnms.f32	s15, s11, s12
 800a84a:	eeb0 6a40 	vmov.f32	s12, s0
 800a84e:	eea6 6a87 	vfma.f32	s12, s13, s14
 800a852:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800a856:	e7a8      	b.n	800a7aa <__ieee754_asinf+0xe2>
 800a858:	b33bbd2e 	.word	0xb33bbd2e
 800a85c:	3fc90fdb 	.word	0x3fc90fdb
 800a860:	7149f2ca 	.word	0x7149f2ca
 800a864:	3811ef08 	.word	0x3811ef08
 800a868:	3a4f7f04 	.word	0x3a4f7f04
 800a86c:	3e2aaaab 	.word	0x3e2aaaab
 800a870:	bd241146 	.word	0xbd241146
 800a874:	3e4e0aa8 	.word	0x3e4e0aa8
 800a878:	bea6b090 	.word	0xbea6b090
 800a87c:	3d9dc62e 	.word	0x3d9dc62e
 800a880:	bf303361 	.word	0xbf303361
 800a884:	4001572d 	.word	0x4001572d
 800a888:	c019d139 	.word	0xc019d139
 800a88c:	3f799999 	.word	0x3f799999
 800a890:	333bbd2e 	.word	0x333bbd2e
 800a894:	3f490fdb 	.word	0x3f490fdb

0800a898 <__ieee754_atan2f>:
 800a898:	ee10 2a90 	vmov	r2, s1
 800a89c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800a8a0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800a8a4:	b510      	push	{r4, lr}
 800a8a6:	eef0 7a40 	vmov.f32	s15, s0
 800a8aa:	dc06      	bgt.n	800a8ba <__ieee754_atan2f+0x22>
 800a8ac:	ee10 0a10 	vmov	r0, s0
 800a8b0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800a8b4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a8b8:	dd04      	ble.n	800a8c4 <__ieee754_atan2f+0x2c>
 800a8ba:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800a8be:	eeb0 0a67 	vmov.f32	s0, s15
 800a8c2:	bd10      	pop	{r4, pc}
 800a8c4:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800a8c8:	d103      	bne.n	800a8d2 <__ieee754_atan2f+0x3a>
 800a8ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a8ce:	f000 bb5f 	b.w	800af90 <atanf>
 800a8d2:	1794      	asrs	r4, r2, #30
 800a8d4:	f004 0402 	and.w	r4, r4, #2
 800a8d8:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800a8dc:	b943      	cbnz	r3, 800a8f0 <__ieee754_atan2f+0x58>
 800a8de:	2c02      	cmp	r4, #2
 800a8e0:	d06e      	beq.n	800a9c0 <__ieee754_atan2f+0x128>
 800a8e2:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800a9c8 <__ieee754_atan2f+0x130>
 800a8e6:	2c03      	cmp	r4, #3
 800a8e8:	bf08      	it	eq
 800a8ea:	eef0 7a47 	vmoveq.f32	s15, s14
 800a8ee:	e7e6      	b.n	800a8be <__ieee754_atan2f+0x26>
 800a8f0:	b941      	cbnz	r1, 800a904 <__ieee754_atan2f+0x6c>
 800a8f2:	eddf 7a36 	vldr	s15, [pc, #216]	; 800a9cc <__ieee754_atan2f+0x134>
 800a8f6:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800a9d0 <__ieee754_atan2f+0x138>
 800a8fa:	2800      	cmp	r0, #0
 800a8fc:	bfb8      	it	lt
 800a8fe:	eef0 7a47 	vmovlt.f32	s15, s14
 800a902:	e7dc      	b.n	800a8be <__ieee754_atan2f+0x26>
 800a904:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800a908:	d122      	bne.n	800a950 <__ieee754_atan2f+0xb8>
 800a90a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a90e:	d112      	bne.n	800a936 <__ieee754_atan2f+0x9e>
 800a910:	2c02      	cmp	r4, #2
 800a912:	d00a      	beq.n	800a92a <__ieee754_atan2f+0x92>
 800a914:	2c03      	cmp	r4, #3
 800a916:	d00b      	beq.n	800a930 <__ieee754_atan2f+0x98>
 800a918:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800a9d4 <__ieee754_atan2f+0x13c>
 800a91c:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800a9d8 <__ieee754_atan2f+0x140>
 800a920:	2c01      	cmp	r4, #1
 800a922:	bf18      	it	ne
 800a924:	eef0 7a47 	vmovne.f32	s15, s14
 800a928:	e7c9      	b.n	800a8be <__ieee754_atan2f+0x26>
 800a92a:	eddf 7a2c 	vldr	s15, [pc, #176]	; 800a9dc <__ieee754_atan2f+0x144>
 800a92e:	e7c6      	b.n	800a8be <__ieee754_atan2f+0x26>
 800a930:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800a9e0 <__ieee754_atan2f+0x148>
 800a934:	e7c3      	b.n	800a8be <__ieee754_atan2f+0x26>
 800a936:	2c02      	cmp	r4, #2
 800a938:	d042      	beq.n	800a9c0 <__ieee754_atan2f+0x128>
 800a93a:	2c03      	cmp	r4, #3
 800a93c:	d005      	beq.n	800a94a <__ieee754_atan2f+0xb2>
 800a93e:	2c01      	cmp	r4, #1
 800a940:	eddf 7a28 	vldr	s15, [pc, #160]	; 800a9e4 <__ieee754_atan2f+0x14c>
 800a944:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800a9e8 <__ieee754_atan2f+0x150>
 800a948:	e7eb      	b.n	800a922 <__ieee754_atan2f+0x8a>
 800a94a:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800a9c8 <__ieee754_atan2f+0x130>
 800a94e:	e7b6      	b.n	800a8be <__ieee754_atan2f+0x26>
 800a950:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a954:	d0cd      	beq.n	800a8f2 <__ieee754_atan2f+0x5a>
 800a956:	1a5b      	subs	r3, r3, r1
 800a958:	15db      	asrs	r3, r3, #23
 800a95a:	2b3c      	cmp	r3, #60	; 0x3c
 800a95c:	dc1a      	bgt.n	800a994 <__ieee754_atan2f+0xfc>
 800a95e:	2a00      	cmp	r2, #0
 800a960:	da01      	bge.n	800a966 <__ieee754_atan2f+0xce>
 800a962:	333c      	adds	r3, #60	; 0x3c
 800a964:	db19      	blt.n	800a99a <__ieee754_atan2f+0x102>
 800a966:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800a96a:	f000 fbe5 	bl	800b138 <fabsf>
 800a96e:	f000 fb0f 	bl	800af90 <atanf>
 800a972:	eef0 7a40 	vmov.f32	s15, s0
 800a976:	2c01      	cmp	r4, #1
 800a978:	d012      	beq.n	800a9a0 <__ieee754_atan2f+0x108>
 800a97a:	2c02      	cmp	r4, #2
 800a97c:	d017      	beq.n	800a9ae <__ieee754_atan2f+0x116>
 800a97e:	2c00      	cmp	r4, #0
 800a980:	d09d      	beq.n	800a8be <__ieee754_atan2f+0x26>
 800a982:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800a9ec <__ieee754_atan2f+0x154>
 800a986:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a98a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800a9f0 <__ieee754_atan2f+0x158>
 800a98e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a992:	e794      	b.n	800a8be <__ieee754_atan2f+0x26>
 800a994:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800a9cc <__ieee754_atan2f+0x134>
 800a998:	e7ed      	b.n	800a976 <__ieee754_atan2f+0xde>
 800a99a:	eddf 7a13 	vldr	s15, [pc, #76]	; 800a9e8 <__ieee754_atan2f+0x150>
 800a99e:	e7ea      	b.n	800a976 <__ieee754_atan2f+0xde>
 800a9a0:	ee17 3a90 	vmov	r3, s15
 800a9a4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a9a8:	ee07 3a90 	vmov	s15, r3
 800a9ac:	e787      	b.n	800a8be <__ieee754_atan2f+0x26>
 800a9ae:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800a9ec <__ieee754_atan2f+0x154>
 800a9b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a9b6:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800a9f0 <__ieee754_atan2f+0x158>
 800a9ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a9be:	e77e      	b.n	800a8be <__ieee754_atan2f+0x26>
 800a9c0:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800a9f0 <__ieee754_atan2f+0x158>
 800a9c4:	e77b      	b.n	800a8be <__ieee754_atan2f+0x26>
 800a9c6:	bf00      	nop
 800a9c8:	c0490fdb 	.word	0xc0490fdb
 800a9cc:	3fc90fdb 	.word	0x3fc90fdb
 800a9d0:	bfc90fdb 	.word	0xbfc90fdb
 800a9d4:	bf490fdb 	.word	0xbf490fdb
 800a9d8:	3f490fdb 	.word	0x3f490fdb
 800a9dc:	4016cbe4 	.word	0x4016cbe4
 800a9e0:	c016cbe4 	.word	0xc016cbe4
 800a9e4:	80000000 	.word	0x80000000
 800a9e8:	00000000 	.word	0x00000000
 800a9ec:	33bbbd2e 	.word	0x33bbbd2e
 800a9f0:	40490fdb 	.word	0x40490fdb

0800a9f4 <__ieee754_powf>:
 800a9f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9f8:	ee10 5a90 	vmov	r5, s1
 800a9fc:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 800aa00:	ed2d 8b02 	vpush	{d8}
 800aa04:	eeb0 8a40 	vmov.f32	s16, s0
 800aa08:	eef0 8a60 	vmov.f32	s17, s1
 800aa0c:	f000 8293 	beq.w	800af36 <__ieee754_powf+0x542>
 800aa10:	ee10 8a10 	vmov	r8, s0
 800aa14:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 800aa18:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800aa1c:	dc06      	bgt.n	800aa2c <__ieee754_powf+0x38>
 800aa1e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800aa22:	dd0a      	ble.n	800aa3a <__ieee754_powf+0x46>
 800aa24:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800aa28:	f000 8285 	beq.w	800af36 <__ieee754_powf+0x542>
 800aa2c:	ecbd 8b02 	vpop	{d8}
 800aa30:	48d9      	ldr	r0, [pc, #868]	; (800ad98 <__ieee754_powf+0x3a4>)
 800aa32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa36:	f000 bb91 	b.w	800b15c <nanf>
 800aa3a:	f1b8 0f00 	cmp.w	r8, #0
 800aa3e:	da1d      	bge.n	800aa7c <__ieee754_powf+0x88>
 800aa40:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 800aa44:	da2c      	bge.n	800aaa0 <__ieee754_powf+0xac>
 800aa46:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800aa4a:	db30      	blt.n	800aaae <__ieee754_powf+0xba>
 800aa4c:	15fb      	asrs	r3, r7, #23
 800aa4e:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800aa52:	fa47 f603 	asr.w	r6, r7, r3
 800aa56:	fa06 f303 	lsl.w	r3, r6, r3
 800aa5a:	42bb      	cmp	r3, r7
 800aa5c:	d127      	bne.n	800aaae <__ieee754_powf+0xba>
 800aa5e:	f006 0601 	and.w	r6, r6, #1
 800aa62:	f1c6 0602 	rsb	r6, r6, #2
 800aa66:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800aa6a:	d122      	bne.n	800aab2 <__ieee754_powf+0xbe>
 800aa6c:	2d00      	cmp	r5, #0
 800aa6e:	f280 8268 	bge.w	800af42 <__ieee754_powf+0x54e>
 800aa72:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800aa76:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800aa7a:	e00d      	b.n	800aa98 <__ieee754_powf+0xa4>
 800aa7c:	2600      	movs	r6, #0
 800aa7e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800aa82:	d1f0      	bne.n	800aa66 <__ieee754_powf+0x72>
 800aa84:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800aa88:	f000 8255 	beq.w	800af36 <__ieee754_powf+0x542>
 800aa8c:	dd0a      	ble.n	800aaa4 <__ieee754_powf+0xb0>
 800aa8e:	2d00      	cmp	r5, #0
 800aa90:	f280 8254 	bge.w	800af3c <__ieee754_powf+0x548>
 800aa94:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 800ad9c <__ieee754_powf+0x3a8>
 800aa98:	ecbd 8b02 	vpop	{d8}
 800aa9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aaa0:	2602      	movs	r6, #2
 800aaa2:	e7ec      	b.n	800aa7e <__ieee754_powf+0x8a>
 800aaa4:	2d00      	cmp	r5, #0
 800aaa6:	daf5      	bge.n	800aa94 <__ieee754_powf+0xa0>
 800aaa8:	eeb1 0a68 	vneg.f32	s0, s17
 800aaac:	e7f4      	b.n	800aa98 <__ieee754_powf+0xa4>
 800aaae:	2600      	movs	r6, #0
 800aab0:	e7d9      	b.n	800aa66 <__ieee754_powf+0x72>
 800aab2:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 800aab6:	d102      	bne.n	800aabe <__ieee754_powf+0xca>
 800aab8:	ee28 0a08 	vmul.f32	s0, s16, s16
 800aabc:	e7ec      	b.n	800aa98 <__ieee754_powf+0xa4>
 800aabe:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 800aac2:	eeb0 0a48 	vmov.f32	s0, s16
 800aac6:	d108      	bne.n	800aada <__ieee754_powf+0xe6>
 800aac8:	f1b8 0f00 	cmp.w	r8, #0
 800aacc:	db05      	blt.n	800aada <__ieee754_powf+0xe6>
 800aace:	ecbd 8b02 	vpop	{d8}
 800aad2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aad6:	f000 ba4d 	b.w	800af74 <__ieee754_sqrtf>
 800aada:	f000 fb2d 	bl	800b138 <fabsf>
 800aade:	b124      	cbz	r4, 800aaea <__ieee754_powf+0xf6>
 800aae0:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 800aae4:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800aae8:	d117      	bne.n	800ab1a <__ieee754_powf+0x126>
 800aaea:	2d00      	cmp	r5, #0
 800aaec:	bfbc      	itt	lt
 800aaee:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800aaf2:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800aaf6:	f1b8 0f00 	cmp.w	r8, #0
 800aafa:	dacd      	bge.n	800aa98 <__ieee754_powf+0xa4>
 800aafc:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 800ab00:	ea54 0306 	orrs.w	r3, r4, r6
 800ab04:	d104      	bne.n	800ab10 <__ieee754_powf+0x11c>
 800ab06:	ee70 7a40 	vsub.f32	s15, s0, s0
 800ab0a:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800ab0e:	e7c3      	b.n	800aa98 <__ieee754_powf+0xa4>
 800ab10:	2e01      	cmp	r6, #1
 800ab12:	d1c1      	bne.n	800aa98 <__ieee754_powf+0xa4>
 800ab14:	eeb1 0a40 	vneg.f32	s0, s0
 800ab18:	e7be      	b.n	800aa98 <__ieee754_powf+0xa4>
 800ab1a:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 800ab1e:	3801      	subs	r0, #1
 800ab20:	ea56 0300 	orrs.w	r3, r6, r0
 800ab24:	d104      	bne.n	800ab30 <__ieee754_powf+0x13c>
 800ab26:	ee38 8a48 	vsub.f32	s16, s16, s16
 800ab2a:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800ab2e:	e7b3      	b.n	800aa98 <__ieee754_powf+0xa4>
 800ab30:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 800ab34:	dd6d      	ble.n	800ac12 <__ieee754_powf+0x21e>
 800ab36:	4b9a      	ldr	r3, [pc, #616]	; (800ada0 <__ieee754_powf+0x3ac>)
 800ab38:	429c      	cmp	r4, r3
 800ab3a:	dc06      	bgt.n	800ab4a <__ieee754_powf+0x156>
 800ab3c:	2d00      	cmp	r5, #0
 800ab3e:	daa9      	bge.n	800aa94 <__ieee754_powf+0xa0>
 800ab40:	ed9f 0a98 	vldr	s0, [pc, #608]	; 800ada4 <__ieee754_powf+0x3b0>
 800ab44:	ee20 0a00 	vmul.f32	s0, s0, s0
 800ab48:	e7a6      	b.n	800aa98 <__ieee754_powf+0xa4>
 800ab4a:	4b97      	ldr	r3, [pc, #604]	; (800ada8 <__ieee754_powf+0x3b4>)
 800ab4c:	429c      	cmp	r4, r3
 800ab4e:	dd02      	ble.n	800ab56 <__ieee754_powf+0x162>
 800ab50:	2d00      	cmp	r5, #0
 800ab52:	dcf5      	bgt.n	800ab40 <__ieee754_powf+0x14c>
 800ab54:	e79e      	b.n	800aa94 <__ieee754_powf+0xa0>
 800ab56:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ab5a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ab5e:	ed9f 7a93 	vldr	s14, [pc, #588]	; 800adac <__ieee754_powf+0x3b8>
 800ab62:	eef1 6a40 	vneg.f32	s13, s0
 800ab66:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800ab6a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800ab6e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800ab72:	eee7 7a40 	vfms.f32	s15, s14, s0
 800ab76:	ee60 0a00 	vmul.f32	s1, s0, s0
 800ab7a:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 800adb0 <__ieee754_powf+0x3bc>
 800ab7e:	ee67 0aa0 	vmul.f32	s1, s15, s1
 800ab82:	eddf 7a8c 	vldr	s15, [pc, #560]	; 800adb4 <__ieee754_powf+0x3c0>
 800ab86:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 800ab8a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800ab8e:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800adb8 <__ieee754_powf+0x3c4>
 800ab92:	eeb0 6a67 	vmov.f32	s12, s15
 800ab96:	eea0 6a07 	vfma.f32	s12, s0, s14
 800ab9a:	ee16 3a10 	vmov	r3, s12
 800ab9e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800aba2:	f023 030f 	bic.w	r3, r3, #15
 800aba6:	ee00 3a90 	vmov	s1, r3
 800abaa:	eee6 0a87 	vfma.f32	s1, s13, s14
 800abae:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800abb2:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 800abb6:	f025 050f 	bic.w	r5, r5, #15
 800abba:	ee07 5a10 	vmov	s14, r5
 800abbe:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800abc2:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800abc6:	ee07 3a90 	vmov	s15, r3
 800abca:	eee7 0a27 	vfma.f32	s1, s14, s15
 800abce:	3e01      	subs	r6, #1
 800abd0:	ea56 0200 	orrs.w	r2, r6, r0
 800abd4:	ee07 5a10 	vmov	s14, r5
 800abd8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800abdc:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800abe0:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800abe4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800abe8:	ee17 4a10 	vmov	r4, s14
 800abec:	bf08      	it	eq
 800abee:	eeb0 8a40 	vmoveq.f32	s16, s0
 800abf2:	2c00      	cmp	r4, #0
 800abf4:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800abf8:	f340 8184 	ble.w	800af04 <__ieee754_powf+0x510>
 800abfc:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800ac00:	f340 80fc 	ble.w	800adfc <__ieee754_powf+0x408>
 800ac04:	eddf 7a67 	vldr	s15, [pc, #412]	; 800ada4 <__ieee754_powf+0x3b0>
 800ac08:	ee28 0a27 	vmul.f32	s0, s16, s15
 800ac0c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ac10:	e742      	b.n	800aa98 <__ieee754_powf+0xa4>
 800ac12:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 800ac16:	bfbf      	itttt	lt
 800ac18:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 800adbc <__ieee754_powf+0x3c8>
 800ac1c:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800ac20:	f06f 0217 	mvnlt.w	r2, #23
 800ac24:	ee17 4a90 	vmovlt	r4, s15
 800ac28:	ea4f 53e4 	mov.w	r3, r4, asr #23
 800ac2c:	bfa8      	it	ge
 800ac2e:	2200      	movge	r2, #0
 800ac30:	3b7f      	subs	r3, #127	; 0x7f
 800ac32:	4413      	add	r3, r2
 800ac34:	4a62      	ldr	r2, [pc, #392]	; (800adc0 <__ieee754_powf+0x3cc>)
 800ac36:	f3c4 0416 	ubfx	r4, r4, #0, #23
 800ac3a:	4294      	cmp	r4, r2
 800ac3c:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 800ac40:	dd06      	ble.n	800ac50 <__ieee754_powf+0x25c>
 800ac42:	4a60      	ldr	r2, [pc, #384]	; (800adc4 <__ieee754_powf+0x3d0>)
 800ac44:	4294      	cmp	r4, r2
 800ac46:	f340 80a5 	ble.w	800ad94 <__ieee754_powf+0x3a0>
 800ac4a:	3301      	adds	r3, #1
 800ac4c:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800ac50:	2400      	movs	r4, #0
 800ac52:	4a5d      	ldr	r2, [pc, #372]	; (800adc8 <__ieee754_powf+0x3d4>)
 800ac54:	00a7      	lsls	r7, r4, #2
 800ac56:	443a      	add	r2, r7
 800ac58:	ee07 1a90 	vmov	s15, r1
 800ac5c:	ed92 7a00 	vldr	s14, [r2]
 800ac60:	4a5a      	ldr	r2, [pc, #360]	; (800adcc <__ieee754_powf+0x3d8>)
 800ac62:	ee37 6a27 	vadd.f32	s12, s14, s15
 800ac66:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800ac6a:	eec5 6a06 	vdiv.f32	s13, s10, s12
 800ac6e:	1049      	asrs	r1, r1, #1
 800ac70:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800ac74:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800ac78:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 800ac7c:	ee77 5ac7 	vsub.f32	s11, s15, s14
 800ac80:	ee06 1a10 	vmov	s12, r1
 800ac84:	ee65 4aa6 	vmul.f32	s9, s11, s13
 800ac88:	ee14 ca90 	vmov	ip, s9
 800ac8c:	ea02 0c0c 	and.w	ip, r2, ip
 800ac90:	ee05 ca10 	vmov	s10, ip
 800ac94:	eeb1 4a45 	vneg.f32	s8, s10
 800ac98:	eee4 5a06 	vfma.f32	s11, s8, s12
 800ac9c:	ee36 6a47 	vsub.f32	s12, s12, s14
 800aca0:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800add0 <__ieee754_powf+0x3dc>
 800aca4:	ee37 6ac6 	vsub.f32	s12, s15, s12
 800aca8:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800acac:	eee4 5a06 	vfma.f32	s11, s8, s12
 800acb0:	ee67 3aa7 	vmul.f32	s7, s15, s15
 800acb4:	ee25 6aa6 	vmul.f32	s12, s11, s13
 800acb8:	eddf 5a46 	vldr	s11, [pc, #280]	; 800add4 <__ieee754_powf+0x3e0>
 800acbc:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800acc0:	eddf 5a45 	vldr	s11, [pc, #276]	; 800add8 <__ieee754_powf+0x3e4>
 800acc4:	eee7 5a27 	vfma.f32	s11, s14, s15
 800acc8:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800adac <__ieee754_powf+0x3b8>
 800accc:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800acd0:	eddf 5a42 	vldr	s11, [pc, #264]	; 800addc <__ieee754_powf+0x3e8>
 800acd4:	eee7 5a27 	vfma.f32	s11, s14, s15
 800acd8:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800ade0 <__ieee754_powf+0x3ec>
 800acdc:	ee75 6a24 	vadd.f32	s13, s10, s9
 800ace0:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800ace4:	ee66 6a86 	vmul.f32	s13, s13, s12
 800ace8:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 800acec:	eef0 7a65 	vmov.f32	s15, s11
 800acf0:	eee3 6a87 	vfma.f32	s13, s7, s14
 800acf4:	eee5 7a05 	vfma.f32	s15, s10, s10
 800acf8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acfc:	ee17 1a90 	vmov	r1, s15
 800ad00:	4011      	ands	r1, r2
 800ad02:	ee07 1a90 	vmov	s15, r1
 800ad06:	ee37 7ae5 	vsub.f32	s14, s15, s11
 800ad0a:	eddf 5a36 	vldr	s11, [pc, #216]	; 800ade4 <__ieee754_powf+0x3f0>
 800ad0e:	eea4 7a05 	vfma.f32	s14, s8, s10
 800ad12:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800ad16:	ee27 7a24 	vmul.f32	s14, s14, s9
 800ad1a:	eea7 7a86 	vfma.f32	s14, s15, s12
 800ad1e:	eeb0 6a47 	vmov.f32	s12, s14
 800ad22:	eea5 6a27 	vfma.f32	s12, s10, s15
 800ad26:	ee16 1a10 	vmov	r1, s12
 800ad2a:	4011      	ands	r1, r2
 800ad2c:	ee06 1a90 	vmov	s13, r1
 800ad30:	eee4 6a27 	vfma.f32	s13, s8, s15
 800ad34:	eddf 7a2c 	vldr	s15, [pc, #176]	; 800ade8 <__ieee754_powf+0x3f4>
 800ad38:	ee37 7a66 	vsub.f32	s14, s14, s13
 800ad3c:	ee06 1a10 	vmov	s12, r1
 800ad40:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ad44:	eddf 7a29 	vldr	s15, [pc, #164]	; 800adec <__ieee754_powf+0x3f8>
 800ad48:	4929      	ldr	r1, [pc, #164]	; (800adf0 <__ieee754_powf+0x3fc>)
 800ad4a:	eea6 7a27 	vfma.f32	s14, s12, s15
 800ad4e:	4439      	add	r1, r7
 800ad50:	edd1 7a00 	vldr	s15, [r1]
 800ad54:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ad58:	ee07 3a90 	vmov	s15, r3
 800ad5c:	eef0 0a47 	vmov.f32	s1, s14
 800ad60:	4b24      	ldr	r3, [pc, #144]	; (800adf4 <__ieee754_powf+0x400>)
 800ad62:	eee6 0a25 	vfma.f32	s1, s12, s11
 800ad66:	443b      	add	r3, r7
 800ad68:	ed93 5a00 	vldr	s10, [r3]
 800ad6c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800ad70:	ee70 0a85 	vadd.f32	s1, s1, s10
 800ad74:	ee70 7aa6 	vadd.f32	s15, s1, s13
 800ad78:	ee17 3a90 	vmov	r3, s15
 800ad7c:	4013      	ands	r3, r2
 800ad7e:	ee07 3a90 	vmov	s15, r3
 800ad82:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ad86:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800ad8a:	eee6 7a65 	vfms.f32	s15, s12, s11
 800ad8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ad92:	e70e      	b.n	800abb2 <__ieee754_powf+0x1be>
 800ad94:	2401      	movs	r4, #1
 800ad96:	e75c      	b.n	800ac52 <__ieee754_powf+0x25e>
 800ad98:	0800b801 	.word	0x0800b801
 800ad9c:	00000000 	.word	0x00000000
 800ada0:	3f7ffff7 	.word	0x3f7ffff7
 800ada4:	7149f2ca 	.word	0x7149f2ca
 800ada8:	3f800007 	.word	0x3f800007
 800adac:	3eaaaaab 	.word	0x3eaaaaab
 800adb0:	36eca570 	.word	0x36eca570
 800adb4:	3fb8aa3b 	.word	0x3fb8aa3b
 800adb8:	3fb8aa00 	.word	0x3fb8aa00
 800adbc:	4b800000 	.word	0x4b800000
 800adc0:	001cc471 	.word	0x001cc471
 800adc4:	005db3d6 	.word	0x005db3d6
 800adc8:	0800b924 	.word	0x0800b924
 800adcc:	fffff000 	.word	0xfffff000
 800add0:	3e6c3255 	.word	0x3e6c3255
 800add4:	3e53f142 	.word	0x3e53f142
 800add8:	3e8ba305 	.word	0x3e8ba305
 800addc:	3edb6db7 	.word	0x3edb6db7
 800ade0:	3f19999a 	.word	0x3f19999a
 800ade4:	3f763800 	.word	0x3f763800
 800ade8:	3f76384f 	.word	0x3f76384f
 800adec:	369dc3a0 	.word	0x369dc3a0
 800adf0:	0800b934 	.word	0x0800b934
 800adf4:	0800b92c 	.word	0x0800b92c
 800adf8:	3338aa3c 	.word	0x3338aa3c
 800adfc:	f040 8092 	bne.w	800af24 <__ieee754_powf+0x530>
 800ae00:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800adf8 <__ieee754_powf+0x404>
 800ae04:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ae08:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800ae0c:	eef4 6ac7 	vcmpe.f32	s13, s14
 800ae10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae14:	f73f aef6 	bgt.w	800ac04 <__ieee754_powf+0x210>
 800ae18:	15db      	asrs	r3, r3, #23
 800ae1a:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800ae1e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800ae22:	4103      	asrs	r3, r0
 800ae24:	4423      	add	r3, r4
 800ae26:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800ae2a:	4947      	ldr	r1, [pc, #284]	; (800af48 <__ieee754_powf+0x554>)
 800ae2c:	3a7f      	subs	r2, #127	; 0x7f
 800ae2e:	4111      	asrs	r1, r2
 800ae30:	ea23 0101 	bic.w	r1, r3, r1
 800ae34:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800ae38:	ee07 1a10 	vmov	s14, r1
 800ae3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800ae40:	f1c2 0217 	rsb	r2, r2, #23
 800ae44:	4110      	asrs	r0, r2
 800ae46:	2c00      	cmp	r4, #0
 800ae48:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ae4c:	bfb8      	it	lt
 800ae4e:	4240      	neglt	r0, r0
 800ae50:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800ae54:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800af4c <__ieee754_powf+0x558>
 800ae58:	ee17 3a10 	vmov	r3, s14
 800ae5c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800ae60:	f023 030f 	bic.w	r3, r3, #15
 800ae64:	ee07 3a10 	vmov	s14, r3
 800ae68:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ae6c:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800ae70:	eddf 7a37 	vldr	s15, [pc, #220]	; 800af50 <__ieee754_powf+0x55c>
 800ae74:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae78:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800ae7c:	eddf 6a35 	vldr	s13, [pc, #212]	; 800af54 <__ieee754_powf+0x560>
 800ae80:	eeb0 0a67 	vmov.f32	s0, s15
 800ae84:	eea7 0a26 	vfma.f32	s0, s14, s13
 800ae88:	eeb0 6a40 	vmov.f32	s12, s0
 800ae8c:	eea7 6a66 	vfms.f32	s12, s14, s13
 800ae90:	ee20 7a00 	vmul.f32	s14, s0, s0
 800ae94:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800ae98:	eddf 6a2f 	vldr	s13, [pc, #188]	; 800af58 <__ieee754_powf+0x564>
 800ae9c:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800af5c <__ieee754_powf+0x568>
 800aea0:	eea7 6a26 	vfma.f32	s12, s14, s13
 800aea4:	eddf 6a2e 	vldr	s13, [pc, #184]	; 800af60 <__ieee754_powf+0x56c>
 800aea8:	eee6 6a07 	vfma.f32	s13, s12, s14
 800aeac:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 800af64 <__ieee754_powf+0x570>
 800aeb0:	eea6 6a87 	vfma.f32	s12, s13, s14
 800aeb4:	eddf 6a2c 	vldr	s13, [pc, #176]	; 800af68 <__ieee754_powf+0x574>
 800aeb8:	eee6 6a07 	vfma.f32	s13, s12, s14
 800aebc:	eeb0 6a40 	vmov.f32	s12, s0
 800aec0:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800aec4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800aec8:	eeb0 7a46 	vmov.f32	s14, s12
 800aecc:	ee77 6a66 	vsub.f32	s13, s14, s13
 800aed0:	ee20 6a06 	vmul.f32	s12, s0, s12
 800aed4:	eee0 7a27 	vfma.f32	s15, s0, s15
 800aed8:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800aedc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aee0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800aee4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800aee8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800aeec:	ee10 3a10 	vmov	r3, s0
 800aef0:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800aef4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800aef8:	da1a      	bge.n	800af30 <__ieee754_powf+0x53c>
 800aefa:	f000 f98f 	bl	800b21c <scalbnf>
 800aefe:	ee20 0a08 	vmul.f32	s0, s0, s16
 800af02:	e5c9      	b.n	800aa98 <__ieee754_powf+0xa4>
 800af04:	4a19      	ldr	r2, [pc, #100]	; (800af6c <__ieee754_powf+0x578>)
 800af06:	4293      	cmp	r3, r2
 800af08:	dd02      	ble.n	800af10 <__ieee754_powf+0x51c>
 800af0a:	eddf 7a19 	vldr	s15, [pc, #100]	; 800af70 <__ieee754_powf+0x57c>
 800af0e:	e67b      	b.n	800ac08 <__ieee754_powf+0x214>
 800af10:	d108      	bne.n	800af24 <__ieee754_powf+0x530>
 800af12:	ee37 7a67 	vsub.f32	s14, s14, s15
 800af16:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800af1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af1e:	f6ff af7b 	blt.w	800ae18 <__ieee754_powf+0x424>
 800af22:	e7f2      	b.n	800af0a <__ieee754_powf+0x516>
 800af24:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800af28:	f73f af76 	bgt.w	800ae18 <__ieee754_powf+0x424>
 800af2c:	2000      	movs	r0, #0
 800af2e:	e78f      	b.n	800ae50 <__ieee754_powf+0x45c>
 800af30:	ee00 3a10 	vmov	s0, r3
 800af34:	e7e3      	b.n	800aefe <__ieee754_powf+0x50a>
 800af36:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800af3a:	e5ad      	b.n	800aa98 <__ieee754_powf+0xa4>
 800af3c:	eeb0 0a68 	vmov.f32	s0, s17
 800af40:	e5aa      	b.n	800aa98 <__ieee754_powf+0xa4>
 800af42:	eeb0 0a48 	vmov.f32	s0, s16
 800af46:	e5a7      	b.n	800aa98 <__ieee754_powf+0xa4>
 800af48:	007fffff 	.word	0x007fffff
 800af4c:	3f317218 	.word	0x3f317218
 800af50:	35bfbe8c 	.word	0x35bfbe8c
 800af54:	3f317200 	.word	0x3f317200
 800af58:	3331bb4c 	.word	0x3331bb4c
 800af5c:	b5ddea0e 	.word	0xb5ddea0e
 800af60:	388ab355 	.word	0x388ab355
 800af64:	bb360b61 	.word	0xbb360b61
 800af68:	3e2aaaab 	.word	0x3e2aaaab
 800af6c:	43160000 	.word	0x43160000
 800af70:	0da24260 	.word	0x0da24260

0800af74 <__ieee754_sqrtf>:
 800af74:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800af78:	4770      	bx	lr

0800af7a <matherr>:
 800af7a:	2000      	movs	r0, #0
 800af7c:	4770      	bx	lr
	...

0800af80 <nan>:
 800af80:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800af88 <nan+0x8>
 800af84:	4770      	bx	lr
 800af86:	bf00      	nop
 800af88:	00000000 	.word	0x00000000
 800af8c:	7ff80000 	.word	0x7ff80000

0800af90 <atanf>:
 800af90:	b538      	push	{r3, r4, r5, lr}
 800af92:	ee10 5a10 	vmov	r5, s0
 800af96:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800af9a:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800af9e:	eef0 7a40 	vmov.f32	s15, s0
 800afa2:	db10      	blt.n	800afc6 <atanf+0x36>
 800afa4:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800afa8:	dd04      	ble.n	800afb4 <atanf+0x24>
 800afaa:	ee70 7a00 	vadd.f32	s15, s0, s0
 800afae:	eeb0 0a67 	vmov.f32	s0, s15
 800afb2:	bd38      	pop	{r3, r4, r5, pc}
 800afb4:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800b0ec <atanf+0x15c>
 800afb8:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800b0f0 <atanf+0x160>
 800afbc:	2d00      	cmp	r5, #0
 800afbe:	bfd8      	it	le
 800afc0:	eef0 7a47 	vmovle.f32	s15, s14
 800afc4:	e7f3      	b.n	800afae <atanf+0x1e>
 800afc6:	4b4b      	ldr	r3, [pc, #300]	; (800b0f4 <atanf+0x164>)
 800afc8:	429c      	cmp	r4, r3
 800afca:	dc10      	bgt.n	800afee <atanf+0x5e>
 800afcc:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800afd0:	da0a      	bge.n	800afe8 <atanf+0x58>
 800afd2:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800b0f8 <atanf+0x168>
 800afd6:	ee30 7a07 	vadd.f32	s14, s0, s14
 800afda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800afde:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800afe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afe6:	dce2      	bgt.n	800afae <atanf+0x1e>
 800afe8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800afec:	e013      	b.n	800b016 <atanf+0x86>
 800afee:	f000 f8a3 	bl	800b138 <fabsf>
 800aff2:	4b42      	ldr	r3, [pc, #264]	; (800b0fc <atanf+0x16c>)
 800aff4:	429c      	cmp	r4, r3
 800aff6:	dc4f      	bgt.n	800b098 <atanf+0x108>
 800aff8:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800affc:	429c      	cmp	r4, r3
 800affe:	dc41      	bgt.n	800b084 <atanf+0xf4>
 800b000:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800b004:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800b008:	eea0 7a27 	vfma.f32	s14, s0, s15
 800b00c:	2300      	movs	r3, #0
 800b00e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b012:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800b016:	1c5a      	adds	r2, r3, #1
 800b018:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800b01c:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800b100 <atanf+0x170>
 800b020:	eddf 5a38 	vldr	s11, [pc, #224]	; 800b104 <atanf+0x174>
 800b024:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800b108 <atanf+0x178>
 800b028:	ee66 6a06 	vmul.f32	s13, s12, s12
 800b02c:	eee6 5a87 	vfma.f32	s11, s13, s14
 800b030:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800b10c <atanf+0x17c>
 800b034:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800b038:	eddf 5a35 	vldr	s11, [pc, #212]	; 800b110 <atanf+0x180>
 800b03c:	eee7 5a26 	vfma.f32	s11, s14, s13
 800b040:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800b114 <atanf+0x184>
 800b044:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800b048:	eddf 5a33 	vldr	s11, [pc, #204]	; 800b118 <atanf+0x188>
 800b04c:	eee7 5a26 	vfma.f32	s11, s14, s13
 800b050:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800b11c <atanf+0x18c>
 800b054:	eea6 5a87 	vfma.f32	s10, s13, s14
 800b058:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800b120 <atanf+0x190>
 800b05c:	eea5 7a26 	vfma.f32	s14, s10, s13
 800b060:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800b124 <atanf+0x194>
 800b064:	eea7 5a26 	vfma.f32	s10, s14, s13
 800b068:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800b128 <atanf+0x198>
 800b06c:	eea5 7a26 	vfma.f32	s14, s10, s13
 800b070:	ee27 7a26 	vmul.f32	s14, s14, s13
 800b074:	eea5 7a86 	vfma.f32	s14, s11, s12
 800b078:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b07c:	d121      	bne.n	800b0c2 <atanf+0x132>
 800b07e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b082:	e794      	b.n	800afae <atanf+0x1e>
 800b084:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800b088:	ee30 7a67 	vsub.f32	s14, s0, s15
 800b08c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b090:	2301      	movs	r3, #1
 800b092:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800b096:	e7be      	b.n	800b016 <atanf+0x86>
 800b098:	4b24      	ldr	r3, [pc, #144]	; (800b12c <atanf+0x19c>)
 800b09a:	429c      	cmp	r4, r3
 800b09c:	dc0b      	bgt.n	800b0b6 <atanf+0x126>
 800b09e:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800b0a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b0a6:	eea0 7a27 	vfma.f32	s14, s0, s15
 800b0aa:	2302      	movs	r3, #2
 800b0ac:	ee70 6a67 	vsub.f32	s13, s0, s15
 800b0b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b0b4:	e7af      	b.n	800b016 <atanf+0x86>
 800b0b6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800b0ba:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800b0be:	2303      	movs	r3, #3
 800b0c0:	e7a9      	b.n	800b016 <atanf+0x86>
 800b0c2:	4a1b      	ldr	r2, [pc, #108]	; (800b130 <atanf+0x1a0>)
 800b0c4:	491b      	ldr	r1, [pc, #108]	; (800b134 <atanf+0x1a4>)
 800b0c6:	009b      	lsls	r3, r3, #2
 800b0c8:	441a      	add	r2, r3
 800b0ca:	440b      	add	r3, r1
 800b0cc:	edd3 6a00 	vldr	s13, [r3]
 800b0d0:	ee37 7a66 	vsub.f32	s14, s14, s13
 800b0d4:	2d00      	cmp	r5, #0
 800b0d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b0da:	ed92 7a00 	vldr	s14, [r2]
 800b0de:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b0e2:	bfb8      	it	lt
 800b0e4:	eef1 7a67 	vneglt.f32	s15, s15
 800b0e8:	e761      	b.n	800afae <atanf+0x1e>
 800b0ea:	bf00      	nop
 800b0ec:	bfc90fdb 	.word	0xbfc90fdb
 800b0f0:	3fc90fdb 	.word	0x3fc90fdb
 800b0f4:	3edfffff 	.word	0x3edfffff
 800b0f8:	7149f2ca 	.word	0x7149f2ca
 800b0fc:	3f97ffff 	.word	0x3f97ffff
 800b100:	3c8569d7 	.word	0x3c8569d7
 800b104:	3d4bda59 	.word	0x3d4bda59
 800b108:	bd6ef16b 	.word	0xbd6ef16b
 800b10c:	3d886b35 	.word	0x3d886b35
 800b110:	3dba2e6e 	.word	0x3dba2e6e
 800b114:	3e124925 	.word	0x3e124925
 800b118:	3eaaaaab 	.word	0x3eaaaaab
 800b11c:	bd15a221 	.word	0xbd15a221
 800b120:	bd9d8795 	.word	0xbd9d8795
 800b124:	bde38e38 	.word	0xbde38e38
 800b128:	be4ccccd 	.word	0xbe4ccccd
 800b12c:	401bffff 	.word	0x401bffff
 800b130:	0800b93c 	.word	0x0800b93c
 800b134:	0800b94c 	.word	0x0800b94c

0800b138 <fabsf>:
 800b138:	ee10 3a10 	vmov	r3, s0
 800b13c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b140:	ee00 3a10 	vmov	s0, r3
 800b144:	4770      	bx	lr

0800b146 <finitef>:
 800b146:	ee10 3a10 	vmov	r3, s0
 800b14a:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 800b14e:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800b152:	bfac      	ite	ge
 800b154:	2000      	movge	r0, #0
 800b156:	2001      	movlt	r0, #1
 800b158:	4770      	bx	lr
	...

0800b15c <nanf>:
 800b15c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b164 <nanf+0x8>
 800b160:	4770      	bx	lr
 800b162:	bf00      	nop
 800b164:	7fc00000 	.word	0x7fc00000

0800b168 <rintf>:
 800b168:	b513      	push	{r0, r1, r4, lr}
 800b16a:	ee10 1a10 	vmov	r1, s0
 800b16e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b172:	0ddc      	lsrs	r4, r3, #23
 800b174:	3c7f      	subs	r4, #127	; 0x7f
 800b176:	2c16      	cmp	r4, #22
 800b178:	dc46      	bgt.n	800b208 <rintf+0xa0>
 800b17a:	b32b      	cbz	r3, 800b1c8 <rintf+0x60>
 800b17c:	2c00      	cmp	r4, #0
 800b17e:	ee10 2a10 	vmov	r2, s0
 800b182:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 800b186:	da21      	bge.n	800b1cc <rintf+0x64>
 800b188:	f3c1 0316 	ubfx	r3, r1, #0, #23
 800b18c:	425b      	negs	r3, r3
 800b18e:	4a21      	ldr	r2, [pc, #132]	; (800b214 <rintf+0xac>)
 800b190:	0a5b      	lsrs	r3, r3, #9
 800b192:	0d09      	lsrs	r1, r1, #20
 800b194:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b198:	0509      	lsls	r1, r1, #20
 800b19a:	430b      	orrs	r3, r1
 800b19c:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800b1a0:	ee07 3a90 	vmov	s15, r3
 800b1a4:	edd2 6a00 	vldr	s13, [r2]
 800b1a8:	ee36 7aa7 	vadd.f32	s14, s13, s15
 800b1ac:	ed8d 7a01 	vstr	s14, [sp, #4]
 800b1b0:	eddd 7a01 	vldr	s15, [sp, #4]
 800b1b4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b1b8:	ee17 3a90 	vmov	r3, s15
 800b1bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b1c0:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 800b1c4:	ee00 3a10 	vmov	s0, r3
 800b1c8:	b002      	add	sp, #8
 800b1ca:	bd10      	pop	{r4, pc}
 800b1cc:	4b12      	ldr	r3, [pc, #72]	; (800b218 <rintf+0xb0>)
 800b1ce:	4123      	asrs	r3, r4
 800b1d0:	4219      	tst	r1, r3
 800b1d2:	d0f9      	beq.n	800b1c8 <rintf+0x60>
 800b1d4:	085b      	lsrs	r3, r3, #1
 800b1d6:	4219      	tst	r1, r3
 800b1d8:	d006      	beq.n	800b1e8 <rintf+0x80>
 800b1da:	ea21 0203 	bic.w	r2, r1, r3
 800b1de:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b1e2:	fa43 f404 	asr.w	r4, r3, r4
 800b1e6:	4322      	orrs	r2, r4
 800b1e8:	4b0a      	ldr	r3, [pc, #40]	; (800b214 <rintf+0xac>)
 800b1ea:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b1ee:	ed90 7a00 	vldr	s14, [r0]
 800b1f2:	ee07 2a90 	vmov	s15, r2
 800b1f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b1fa:	edcd 7a01 	vstr	s15, [sp, #4]
 800b1fe:	ed9d 0a01 	vldr	s0, [sp, #4]
 800b202:	ee30 0a47 	vsub.f32	s0, s0, s14
 800b206:	e7df      	b.n	800b1c8 <rintf+0x60>
 800b208:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b20c:	d3dc      	bcc.n	800b1c8 <rintf+0x60>
 800b20e:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b212:	e7d9      	b.n	800b1c8 <rintf+0x60>
 800b214:	0800b95c 	.word	0x0800b95c
 800b218:	007fffff 	.word	0x007fffff

0800b21c <scalbnf>:
 800b21c:	b508      	push	{r3, lr}
 800b21e:	ee10 2a10 	vmov	r2, s0
 800b222:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800b226:	ed2d 8b02 	vpush	{d8}
 800b22a:	eef0 0a40 	vmov.f32	s1, s0
 800b22e:	d004      	beq.n	800b23a <scalbnf+0x1e>
 800b230:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b234:	d306      	bcc.n	800b244 <scalbnf+0x28>
 800b236:	ee70 0a00 	vadd.f32	s1, s0, s0
 800b23a:	ecbd 8b02 	vpop	{d8}
 800b23e:	eeb0 0a60 	vmov.f32	s0, s1
 800b242:	bd08      	pop	{r3, pc}
 800b244:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b248:	d21c      	bcs.n	800b284 <scalbnf+0x68>
 800b24a:	4b1f      	ldr	r3, [pc, #124]	; (800b2c8 <scalbnf+0xac>)
 800b24c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800b2cc <scalbnf+0xb0>
 800b250:	4298      	cmp	r0, r3
 800b252:	ee60 0a27 	vmul.f32	s1, s0, s15
 800b256:	db10      	blt.n	800b27a <scalbnf+0x5e>
 800b258:	ee10 2a90 	vmov	r2, s1
 800b25c:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 800b260:	3b19      	subs	r3, #25
 800b262:	4403      	add	r3, r0
 800b264:	2bfe      	cmp	r3, #254	; 0xfe
 800b266:	dd0f      	ble.n	800b288 <scalbnf+0x6c>
 800b268:	ed9f 8a19 	vldr	s16, [pc, #100]	; 800b2d0 <scalbnf+0xb4>
 800b26c:	eeb0 0a48 	vmov.f32	s0, s16
 800b270:	f000 f834 	bl	800b2dc <copysignf>
 800b274:	ee60 0a08 	vmul.f32	s1, s0, s16
 800b278:	e7df      	b.n	800b23a <scalbnf+0x1e>
 800b27a:	eddf 7a16 	vldr	s15, [pc, #88]	; 800b2d4 <scalbnf+0xb8>
 800b27e:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800b282:	e7da      	b.n	800b23a <scalbnf+0x1e>
 800b284:	0ddb      	lsrs	r3, r3, #23
 800b286:	e7ec      	b.n	800b262 <scalbnf+0x46>
 800b288:	2b00      	cmp	r3, #0
 800b28a:	dd06      	ble.n	800b29a <scalbnf+0x7e>
 800b28c:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800b290:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800b294:	ee00 3a90 	vmov	s1, r3
 800b298:	e7cf      	b.n	800b23a <scalbnf+0x1e>
 800b29a:	f113 0f16 	cmn.w	r3, #22
 800b29e:	da06      	bge.n	800b2ae <scalbnf+0x92>
 800b2a0:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b2a4:	4298      	cmp	r0, r3
 800b2a6:	dcdf      	bgt.n	800b268 <scalbnf+0x4c>
 800b2a8:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 800b2d4 <scalbnf+0xb8>
 800b2ac:	e7de      	b.n	800b26c <scalbnf+0x50>
 800b2ae:	3319      	adds	r3, #25
 800b2b0:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800b2b4:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800b2b8:	eddf 7a07 	vldr	s15, [pc, #28]	; 800b2d8 <scalbnf+0xbc>
 800b2bc:	ee07 3a10 	vmov	s14, r3
 800b2c0:	ee67 0a27 	vmul.f32	s1, s14, s15
 800b2c4:	e7b9      	b.n	800b23a <scalbnf+0x1e>
 800b2c6:	bf00      	nop
 800b2c8:	ffff3cb0 	.word	0xffff3cb0
 800b2cc:	4c000000 	.word	0x4c000000
 800b2d0:	7149f2ca 	.word	0x7149f2ca
 800b2d4:	0da24260 	.word	0x0da24260
 800b2d8:	33000000 	.word	0x33000000

0800b2dc <copysignf>:
 800b2dc:	ee10 3a10 	vmov	r3, s0
 800b2e0:	ee10 2a90 	vmov	r2, s1
 800b2e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b2e8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800b2ec:	4313      	orrs	r3, r2
 800b2ee:	ee00 3a10 	vmov	s0, r3
 800b2f2:	4770      	bx	lr

0800b2f4 <_init>:
 800b2f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2f6:	bf00      	nop
 800b2f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2fa:	bc08      	pop	{r3}
 800b2fc:	469e      	mov	lr, r3
 800b2fe:	4770      	bx	lr

0800b300 <_fini>:
 800b300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b302:	bf00      	nop
 800b304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b306:	bc08      	pop	{r3}
 800b308:	469e      	mov	lr, r3
 800b30a:	4770      	bx	lr
