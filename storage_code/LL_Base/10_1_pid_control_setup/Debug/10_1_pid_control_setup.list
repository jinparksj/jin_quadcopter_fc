
10_1_pid_control_setup.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f074  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000074c  0800f208  0800f208  0001f208  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f954  0800f954  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800f954  0800f954  0001f954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f95c  0800f95c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f95c  0800f95c  0001f95c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f960  0800f960  0001f960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800f964  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e0  200001e8  0800fb48  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200005c8  0800fb48  000205c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ab06  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000043ff  00000000  00000000  0003ad1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001700  00000000  00000000  0003f120  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001520  00000000  00000000  00040820  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026c06  00000000  00000000  00041d40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000152ad  00000000  00000000  00068946  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d36d2  00000000  00000000  0007dbf3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001512c5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f28  00000000  00000000  00151340  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f1ec 	.word	0x0800f1ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800f1ec 	.word	0x0800f1ec

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c5c:	f000 b972 	b.w	8000f44 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	4688      	mov	r8, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14b      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4615      	mov	r5, r2
 8000c8a:	d967      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0720 	rsb	r7, r2, #32
 8000c96:	fa01 f302 	lsl.w	r3, r1, r2
 8000c9a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c9e:	4095      	lsls	r5, r2
 8000ca0:	ea47 0803 	orr.w	r8, r7, r3
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cb0:	fa1f fc85 	uxth.w	ip, r5
 8000cb4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cb8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18eb      	adds	r3, r5, r3
 8000cc6:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000cca:	f080 811b 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8118 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000cd4:	3f02      	subs	r7, #2
 8000cd6:	442b      	add	r3, r5
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cec:	45a4      	cmp	ip, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	192c      	adds	r4, r5, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cf6:	f080 8107 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cfa:	45a4      	cmp	ip, r4
 8000cfc:	f240 8104 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000d00:	3802      	subs	r0, #2
 8000d02:	442c      	add	r4, r5
 8000d04:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d08:	eba4 040c 	sub.w	r4, r4, ip
 8000d0c:	2700      	movs	r7, #0
 8000d0e:	b11e      	cbz	r6, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c6 4300 	strd	r4, r3, [r6]
 8000d18:	4639      	mov	r1, r7
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0xbe>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80eb 	beq.w	8000efe <__udivmoddi4+0x286>
 8000d28:	2700      	movs	r7, #0
 8000d2a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d2e:	4638      	mov	r0, r7
 8000d30:	4639      	mov	r1, r7
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	fab3 f783 	clz	r7, r3
 8000d3a:	2f00      	cmp	r7, #0
 8000d3c:	d147      	bne.n	8000dce <__udivmoddi4+0x156>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0xd0>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	f200 80fa 	bhi.w	8000f3c <__udivmoddi4+0x2c4>
 8000d48:	1a84      	subs	r4, r0, r2
 8000d4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	4698      	mov	r8, r3
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d0e0      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000d56:	e9c6 4800 	strd	r4, r8, [r6]
 8000d5a:	e7dd      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000d5c:	b902      	cbnz	r2, 8000d60 <__udivmoddi4+0xe8>
 8000d5e:	deff      	udf	#255	; 0xff
 8000d60:	fab2 f282 	clz	r2, r2
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f040 808f 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d6a:	1b49      	subs	r1, r1, r5
 8000d6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d70:	fa1f f885 	uxth.w	r8, r5
 8000d74:	2701      	movs	r7, #1
 8000d76:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d7a:	0c23      	lsrs	r3, r4, #16
 8000d7c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d84:	fb08 f10c 	mul.w	r1, r8, ip
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8c:	18eb      	adds	r3, r5, r3
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4299      	cmp	r1, r3
 8000d96:	f200 80cd 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1a59      	subs	r1, r3, r1
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000da8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x14c>
 8000db4:	192c      	adds	r4, r5, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x14a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80b6 	bhi.w	8000f2e <__udivmoddi4+0x2b6>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e79f      	b.n	8000d0e <__udivmoddi4+0x96>
 8000dce:	f1c7 0c20 	rsb	ip, r7, #32
 8000dd2:	40bb      	lsls	r3, r7
 8000dd4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dd8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ddc:	fa01 f407 	lsl.w	r4, r1, r7
 8000de0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000de4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000de8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dec:	4325      	orrs	r5, r4
 8000dee:	fbb3 f9f8 	udiv	r9, r3, r8
 8000df2:	0c2c      	lsrs	r4, r5, #16
 8000df4:	fb08 3319 	mls	r3, r8, r9, r3
 8000df8:	fa1f fa8e 	uxth.w	sl, lr
 8000dfc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e00:	fb09 f40a 	mul.w	r4, r9, sl
 8000e04:	429c      	cmp	r4, r3
 8000e06:	fa02 f207 	lsl.w	r2, r2, r7
 8000e0a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1e 0303 	adds.w	r3, lr, r3
 8000e14:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e18:	f080 8087 	bcs.w	8000f2a <__udivmoddi4+0x2b2>
 8000e1c:	429c      	cmp	r4, r3
 8000e1e:	f240 8084 	bls.w	8000f2a <__udivmoddi4+0x2b2>
 8000e22:	f1a9 0902 	sub.w	r9, r9, #2
 8000e26:	4473      	add	r3, lr
 8000e28:	1b1b      	subs	r3, r3, r4
 8000e2a:	b2ad      	uxth	r5, r5
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e38:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e3c:	45a2      	cmp	sl, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1e 0404 	adds.w	r4, lr, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e48:	d26b      	bcs.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4a:	45a2      	cmp	sl, r4
 8000e4c:	d969      	bls.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	4474      	add	r4, lr
 8000e52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e56:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5a:	eba4 040a 	sub.w	r4, r4, sl
 8000e5e:	454c      	cmp	r4, r9
 8000e60:	46c2      	mov	sl, r8
 8000e62:	464b      	mov	r3, r9
 8000e64:	d354      	bcc.n	8000f10 <__udivmoddi4+0x298>
 8000e66:	d051      	beq.n	8000f0c <__udivmoddi4+0x294>
 8000e68:	2e00      	cmp	r6, #0
 8000e6a:	d069      	beq.n	8000f40 <__udivmoddi4+0x2c8>
 8000e6c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e70:	eb64 0403 	sbc.w	r4, r4, r3
 8000e74:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e78:	40fd      	lsrs	r5, r7
 8000e7a:	40fc      	lsrs	r4, r7
 8000e7c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e80:	e9c6 5400 	strd	r5, r4, [r6]
 8000e84:	2700      	movs	r7, #0
 8000e86:	e747      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e90:	4095      	lsls	r5, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	fa21 f303 	lsr.w	r3, r1, r3
 8000e9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e9e:	4338      	orrs	r0, r7
 8000ea0:	0c01      	lsrs	r1, r0, #16
 8000ea2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ea6:	fa1f f885 	uxth.w	r8, r5
 8000eaa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb2:	fb07 f308 	mul.w	r3, r7, r8
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ebc:	d907      	bls.n	8000ece <__udivmoddi4+0x256>
 8000ebe:	1869      	adds	r1, r5, r1
 8000ec0:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000ec4:	d22f      	bcs.n	8000f26 <__udivmoddi4+0x2ae>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d92d      	bls.n	8000f26 <__udivmoddi4+0x2ae>
 8000eca:	3f02      	subs	r7, #2
 8000ecc:	4429      	add	r1, r5
 8000ece:	1acb      	subs	r3, r1, r3
 8000ed0:	b281      	uxth	r1, r0
 8000ed2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ede:	fb00 f308 	mul.w	r3, r0, r8
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x27e>
 8000ee6:	1869      	adds	r1, r5, r1
 8000ee8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000eec:	d217      	bcs.n	8000f1e <__udivmoddi4+0x2a6>
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	d915      	bls.n	8000f1e <__udivmoddi4+0x2a6>
 8000ef2:	3802      	subs	r0, #2
 8000ef4:	4429      	add	r1, r5
 8000ef6:	1ac9      	subs	r1, r1, r3
 8000ef8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000efc:	e73b      	b.n	8000d76 <__udivmoddi4+0xfe>
 8000efe:	4637      	mov	r7, r6
 8000f00:	4630      	mov	r0, r6
 8000f02:	e709      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f04:	4607      	mov	r7, r0
 8000f06:	e6e7      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f08:	4618      	mov	r0, r3
 8000f0a:	e6fb      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f0c:	4541      	cmp	r1, r8
 8000f0e:	d2ab      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f10:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f14:	eb69 020e 	sbc.w	r2, r9, lr
 8000f18:	3801      	subs	r0, #1
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	e7a4      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f1e:	4660      	mov	r0, ip
 8000f20:	e7e9      	b.n	8000ef6 <__udivmoddi4+0x27e>
 8000f22:	4618      	mov	r0, r3
 8000f24:	e795      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f26:	4667      	mov	r7, ip
 8000f28:	e7d1      	b.n	8000ece <__udivmoddi4+0x256>
 8000f2a:	4681      	mov	r9, r0
 8000f2c:	e77c      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f2e:	3802      	subs	r0, #2
 8000f30:	442c      	add	r4, r5
 8000f32:	e747      	b.n	8000dc4 <__udivmoddi4+0x14c>
 8000f34:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f38:	442b      	add	r3, r5
 8000f3a:	e72f      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f3c:	4638      	mov	r0, r7
 8000f3e:	e708      	b.n	8000d52 <__udivmoddi4+0xda>
 8000f40:	4637      	mov	r7, r6
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0xa0>

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	683a      	ldr	r2, [r7, #0]
 8000f56:	619a      	str	r2, [r3, #24]
}
 8000f58:	bf00      	nop
 8000f5a:	370c      	adds	r7, #12
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr

08000f64 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	041a      	lsls	r2, r3, #16
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	619a      	str	r2, [r3, #24]
}
 8000f76:	bf00      	nop
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
	...

08000f84 <AT24C08_Page_Write>:
 */

#include "AT24C08.h"
#include "i2c.h"

void AT24C08_Page_Write(unsigned char page, unsigned char *data, unsigned char len) {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b088      	sub	sp, #32
 8000f88:	af04      	add	r7, sp, #16
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	6039      	str	r1, [r7, #0]
 8000f8e:	71fb      	strb	r3, [r7, #7]
 8000f90:	4613      	mov	r3, r2
 8000f92:	71bb      	strb	r3, [r7, #6]
	//Device Address, Word Address Selection
	unsigned char devAddress = ((page * 16) >> 8) << 1 | 0xA0;
 8000f94:	79fb      	ldrb	r3, [r7, #7]
 8000f96:	011b      	lsls	r3, r3, #4
 8000f98:	121b      	asrs	r3, r3, #8
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	b25b      	sxtb	r3, r3
 8000f9e:	f063 035f 	orn	r3, r3, #95	; 0x5f
 8000fa2:	b25b      	sxtb	r3, r3
 8000fa4:	73fb      	strb	r3, [r7, #15]
	unsigned char wordAddress = (page * 16) & 0xff;
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	011b      	lsls	r3, r3, #4
 8000faa:	73bb      	strb	r3, [r7, #14]

	LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_13);
 8000fac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fb0:	480e      	ldr	r0, [pc, #56]	; (8000fec <AT24C08_Page_Write+0x68>)
 8000fb2:	f7ff ffd7 	bl	8000f64 <LL_GPIO_ResetOutputPin>
	HAL_I2C_Mem_Write(&hi2c1, devAddress, wordAddress, I2C_MEMADD_SIZE_8BIT, &data[0], 16, 1);
 8000fb6:	7bfb      	ldrb	r3, [r7, #15]
 8000fb8:	b299      	uxth	r1, r3
 8000fba:	7bbb      	ldrb	r3, [r7, #14]
 8000fbc:	b29a      	uxth	r2, r3
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	9302      	str	r3, [sp, #8]
 8000fc2:	2310      	movs	r3, #16
 8000fc4:	9301      	str	r3, [sp, #4]
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	9300      	str	r3, [sp, #0]
 8000fca:	2301      	movs	r3, #1
 8000fcc:	4808      	ldr	r0, [pc, #32]	; (8000ff0 <AT24C08_Page_Write+0x6c>)
 8000fce:	f007 fab7 	bl	8008540 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8000fd2:	2001      	movs	r0, #1
 8000fd4:	f005 ff2a 	bl	8006e2c <HAL_Delay>
	LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_13);
 8000fd8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fdc:	4803      	ldr	r0, [pc, #12]	; (8000fec <AT24C08_Page_Write+0x68>)
 8000fde:	f7ff ffb3 	bl	8000f48 <LL_GPIO_SetOutputPin>
}
 8000fe2:	bf00      	nop
 8000fe4:	3710      	adds	r7, #16
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40020800 	.word	0x40020800
 8000ff0:	2000045c 	.word	0x2000045c

08000ff4 <AT24C08_Page_Read>:

void AT24C08_Page_Read(unsigned char page, unsigned char *data, unsigned char len) {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b088      	sub	sp, #32
 8000ff8:	af04      	add	r7, sp, #16
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	6039      	str	r1, [r7, #0]
 8000ffe:	71fb      	strb	r3, [r7, #7]
 8001000:	4613      	mov	r3, r2
 8001002:	71bb      	strb	r3, [r7, #6]
	unsigned char devAddress = ((page * 16) >> 8) << 1 | 0xA0;
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	011b      	lsls	r3, r3, #4
 8001008:	121b      	asrs	r3, r3, #8
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	b25b      	sxtb	r3, r3
 800100e:	f063 035f 	orn	r3, r3, #95	; 0x5f
 8001012:	b25b      	sxtb	r3, r3
 8001014:	73fb      	strb	r3, [r7, #15]
	unsigned char wordAddress = (page * 16) & 0xff;
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	011b      	lsls	r3, r3, #4
 800101a:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Mem_Read(&hi2c1, devAddress, wordAddress, I2C_MEMADD_SIZE_8BIT, &data[0], 16, 1);
 800101c:	7bfb      	ldrb	r3, [r7, #15]
 800101e:	b299      	uxth	r1, r3
 8001020:	7bbb      	ldrb	r3, [r7, #14]
 8001022:	b29a      	uxth	r2, r3
 8001024:	2301      	movs	r3, #1
 8001026:	9302      	str	r3, [sp, #8]
 8001028:	2310      	movs	r3, #16
 800102a:	9301      	str	r3, [sp, #4]
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	9300      	str	r3, [sp, #0]
 8001030:	2301      	movs	r3, #1
 8001032:	4803      	ldr	r0, [pc, #12]	; (8001040 <AT24C08_Page_Read+0x4c>)
 8001034:	f007 fb7e 	bl	8008734 <HAL_I2C_Mem_Read>
}
 8001038:	bf00      	nop
 800103a:	3710      	adds	r7, #16
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	2000045c 	.word	0x2000045c

08001044 <EP_PIDGain_Write>:

void EP_PIDGain_Write(unsigned char id, float PGain, float IGain, float DGain) {
 8001044:	b580      	push	{r7, lr}
 8001046:	b08c      	sub	sp, #48	; 0x30
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001050:	edc7 0a01 	vstr	s1, [r7, #4]
 8001054:	ed87 1a00 	vstr	s2, [r7]
 8001058:	73fb      	strb	r3, [r7, #15]
	unsigned char buf_write[16];
	Parser parser;

	buf_write[0] = 0x45;
 800105a:	2345      	movs	r3, #69	; 0x45
 800105c:	763b      	strb	r3, [r7, #24]
	buf_write[1] = 0x50;
 800105e:	2350      	movs	r3, #80	; 0x50
 8001060:	767b      	strb	r3, [r7, #25]
	buf_write[2] = id;
 8001062:	7bfb      	ldrb	r3, [r7, #15]
 8001064:	76bb      	strb	r3, [r7, #26]

	parser.f = PGain;
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	617b      	str	r3, [r7, #20]
	buf_write[3] = parser.byte[0];
 800106a:	7d3b      	ldrb	r3, [r7, #20]
 800106c:	76fb      	strb	r3, [r7, #27]
	buf_write[4] = parser.byte[1];
 800106e:	7d7b      	ldrb	r3, [r7, #21]
 8001070:	773b      	strb	r3, [r7, #28]
	buf_write[5] = parser.byte[2];
 8001072:	7dbb      	ldrb	r3, [r7, #22]
 8001074:	777b      	strb	r3, [r7, #29]
	buf_write[6] = parser.byte[3];
 8001076:	7dfb      	ldrb	r3, [r7, #23]
 8001078:	77bb      	strb	r3, [r7, #30]

	parser.f = IGain;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	617b      	str	r3, [r7, #20]
	buf_write[7] = parser.byte[0];
 800107e:	7d3b      	ldrb	r3, [r7, #20]
 8001080:	77fb      	strb	r3, [r7, #31]
	buf_write[8] = parser.byte[1];
 8001082:	7d7b      	ldrb	r3, [r7, #21]
 8001084:	f887 3020 	strb.w	r3, [r7, #32]
	buf_write[9] = parser.byte[2];
 8001088:	7dbb      	ldrb	r3, [r7, #22]
 800108a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	buf_write[10] = parser.byte[3];
 800108e:	7dfb      	ldrb	r3, [r7, #23]
 8001090:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	parser.f = DGain;
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	617b      	str	r3, [r7, #20]
	buf_write[11] = parser.byte[0];
 8001098:	7d3b      	ldrb	r3, [r7, #20]
 800109a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	buf_write[12] = parser.byte[1];
 800109e:	7d7b      	ldrb	r3, [r7, #21]
 80010a0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	buf_write[13] = parser.byte[2];
 80010a4:	7dbb      	ldrb	r3, [r7, #22]
 80010a6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	buf_write[14] = parser.byte[3];
 80010aa:	7dfb      	ldrb	r3, [r7, #23]
 80010ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	unsigned char checksum = 0xff;
 80010b0:	23ff      	movs	r3, #255	; 0xff
 80010b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	for (int i = 0; i < 15; i++) {
 80010b6:	2300      	movs	r3, #0
 80010b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80010ba:	e00c      	b.n	80010d6 <EP_PIDGain_Write+0x92>
		checksum -= buf_write[i];
 80010bc:	f107 0218 	add.w	r2, r7, #24
 80010c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010c2:	4413      	add	r3, r2
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	for (int i = 0; i < 15; i++) {
 80010d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010d2:	3301      	adds	r3, #1
 80010d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80010d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010d8:	2b0e      	cmp	r3, #14
 80010da:	ddef      	ble.n	80010bc <EP_PIDGain_Write+0x78>
	}

	buf_write[15] = checksum;
 80010dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80010e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	AT24C08_Page_Write(id, &buf_write[0], 16);
 80010e4:	f107 0118 	add.w	r1, r7, #24
 80010e8:	7bfb      	ldrb	r3, [r7, #15]
 80010ea:	2210      	movs	r2, #16
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff ff49 	bl	8000f84 <AT24C08_Page_Write>
//		break;
//	case 5:
//		AT24C08_Page_Write(5, &buf_write[0], 16);
//		break;
//	}
}
 80010f2:	bf00      	nop
 80010f4:	3730      	adds	r7, #48	; 0x30
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <EP_PIDGain_Read>:

unsigned char EP_PIDGain_Read(unsigned char id, float *PGain, float *IGain, float *DGain) {
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b08c      	sub	sp, #48	; 0x30
 80010fe:	af00      	add	r7, sp, #0
 8001100:	60b9      	str	r1, [r7, #8]
 8001102:	607a      	str	r2, [r7, #4]
 8001104:	603b      	str	r3, [r7, #0]
 8001106:	4603      	mov	r3, r0
 8001108:	73fb      	strb	r3, [r7, #15]
	unsigned char buf_read[16];
	Parser parser;

	AT24C08_Page_Read(id, &buf_read[0], 16);
 800110a:	f107 0118 	add.w	r1, r7, #24
 800110e:	7bfb      	ldrb	r3, [r7, #15]
 8001110:	2210      	movs	r2, #16
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff ff6e 	bl	8000ff4 <AT24C08_Page_Read>
//	case 5:
//		AT24C08_Page_Read(5, &buf_read[0], 16);
//		break;
//	}

	unsigned char checksum = 0xff;
 8001118:	23ff      	movs	r3, #255	; 0xff
 800111a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	for (int i = 0; i < 15; i++) {
 800111e:	2300      	movs	r3, #0
 8001120:	62bb      	str	r3, [r7, #40]	; 0x28
 8001122:	e00c      	b.n	800113e <EP_PIDGain_Read+0x44>
		checksum -= buf_read[i];
 8001124:	f107 0218 	add.w	r2, r7, #24
 8001128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800112a:	4413      	add	r3, r2
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001132:	1ad3      	subs	r3, r2, r3
 8001134:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	for (int i = 0; i < 15; i++) {
 8001138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800113a:	3301      	adds	r3, #1
 800113c:	62bb      	str	r3, [r7, #40]	; 0x28
 800113e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001140:	2b0e      	cmp	r3, #14
 8001142:	ddef      	ble.n	8001124 <EP_PIDGain_Read+0x2a>
	}

	if (buf_read[15] == checksum && buf_read[0] == 0x45 && buf_read[1] == 0x50) {
 8001144:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001148:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800114c:	429a      	cmp	r2, r3
 800114e:	d12f      	bne.n	80011b0 <EP_PIDGain_Read+0xb6>
 8001150:	7e3b      	ldrb	r3, [r7, #24]
 8001152:	2b45      	cmp	r3, #69	; 0x45
 8001154:	d12c      	bne.n	80011b0 <EP_PIDGain_Read+0xb6>
 8001156:	7e7b      	ldrb	r3, [r7, #25]
 8001158:	2b50      	cmp	r3, #80	; 0x50
 800115a:	d129      	bne.n	80011b0 <EP_PIDGain_Read+0xb6>
		parser.byte[0] = buf_read[3];
 800115c:	7efb      	ldrb	r3, [r7, #27]
 800115e:	753b      	strb	r3, [r7, #20]
		parser.byte[1] = buf_read[4];
 8001160:	7f3b      	ldrb	r3, [r7, #28]
 8001162:	757b      	strb	r3, [r7, #21]
		parser.byte[2] = buf_read[5];
 8001164:	7f7b      	ldrb	r3, [r7, #29]
 8001166:	75bb      	strb	r3, [r7, #22]
		parser.byte[3] = buf_read[6];
 8001168:	7fbb      	ldrb	r3, [r7, #30]
 800116a:	75fb      	strb	r3, [r7, #23]
		*PGain = parser.f;
 800116c:	697a      	ldr	r2, [r7, #20]
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	601a      	str	r2, [r3, #0]

		parser.byte[0] = buf_read[7];
 8001172:	7ffb      	ldrb	r3, [r7, #31]
 8001174:	753b      	strb	r3, [r7, #20]
		parser.byte[1] = buf_read[8];
 8001176:	f897 3020 	ldrb.w	r3, [r7, #32]
 800117a:	757b      	strb	r3, [r7, #21]
		parser.byte[2] = buf_read[9];
 800117c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001180:	75bb      	strb	r3, [r7, #22]
		parser.byte[3] = buf_read[10];
 8001182:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001186:	75fb      	strb	r3, [r7, #23]
		*IGain = parser.f;
 8001188:	697a      	ldr	r2, [r7, #20]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	601a      	str	r2, [r3, #0]

		parser.byte[0] = buf_read[11];
 800118e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001192:	753b      	strb	r3, [r7, #20]
		parser.byte[1] = buf_read[12];
 8001194:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001198:	757b      	strb	r3, [r7, #21]
		parser.byte[2] = buf_read[13];
 800119a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800119e:	75bb      	strb	r3, [r7, #22]
		parser.byte[3] = buf_read[14];
 80011a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80011a4:	75fb      	strb	r3, [r7, #23]
		*DGain = parser.f;
 80011a6:	697a      	ldr	r2, [r7, #20]
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	601a      	str	r2, [r3, #0]
		return 0;
 80011ac:	2300      	movs	r3, #0
 80011ae:	e000      	b.n	80011b2 <EP_PIDGain_Read+0xb8>
	}

	return 1;
 80011b0:	2301      	movs	r3, #1
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3730      	adds	r7, #48	; 0x30
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 80011ba:	b480      	push	{r7}
 80011bc:	b083      	sub	sp, #12
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	601a      	str	r2, [r3, #0]
}
 80011ce:	bf00      	nop
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr

080011da <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 80011da:	b480      	push	{r7}
 80011dc:	b083      	sub	sp, #12
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]
 80011e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f023 0210 	bic.w	r2, r3, #16
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	431a      	orrs	r2, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	605a      	str	r2, [r3, #4]
}
 80011f4:	bf00      	nop
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	f003 0301 	and.w	r3, r3, #1
 8001210:	2b01      	cmp	r3, #1
 8001212:	d101      	bne.n	8001218 <LL_SPI_IsActiveFlag_RXNE+0x18>
 8001214:	2301      	movs	r3, #1
 8001216:	e000      	b.n	800121a <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8001218:	2300      	movs	r3, #0
}
 800121a:	4618      	mov	r0, r3
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr

08001226 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 8001226:	b480      	push	{r7}
 8001228:	b083      	sub	sp, #12
 800122a:	af00      	add	r7, sp, #0
 800122c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	f003 0302 	and.w	r3, r3, #2
 8001236:	2b02      	cmp	r3, #2
 8001238:	d101      	bne.n	800123e <LL_SPI_IsActiveFlag_TXE+0x18>
 800123a:	2301      	movs	r3, #1
 800123c:	e000      	b.n	8001240 <LL_SPI_IsActiveFlag_TXE+0x1a>
 800123e:	2300      	movs	r3, #0
}
 8001240:	4618      	mov	r0, r3
 8001242:	370c      	adds	r7, #12
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_REG(SPIx->DR));
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	b2db      	uxtb	r3, r3
}
 800125a:	4618      	mov	r0, r3
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr

08001266 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8001266:	b480      	push	{r7}
 8001268:	b085      	sub	sp, #20
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
 800126e:	460b      	mov	r3, r1
 8001270:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	330c      	adds	r3, #12
 8001276:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	78fa      	ldrb	r2, [r7, #3]
 800127c:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 800127e:	bf00      	nop
 8001280:	3714      	adds	r7, #20
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr

0800128a <LL_GPIO_IsInputPinSet>:
{
 800128a:	b480      	push	{r7}
 800128c:	b083      	sub	sp, #12
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
 8001292:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	691a      	ldr	r2, [r3, #16]
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	4013      	ands	r3, r2
 800129c:	683a      	ldr	r2, [r7, #0]
 800129e:	429a      	cmp	r2, r3
 80012a0:	bf0c      	ite	eq
 80012a2:	2301      	moveq	r3, #1
 80012a4:	2300      	movne	r3, #0
 80012a6:	b2db      	uxtb	r3, r3
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <LL_GPIO_SetOutputPin>:
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	683a      	ldr	r2, [r7, #0]
 80012c2:	619a      	str	r2, [r3, #24]
}
 80012c4:	bf00      	nop
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr

080012d0 <LL_GPIO_ResetOutputPin>:
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	041a      	lsls	r2, r3, #16
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	619a      	str	r2, [r3, #24]
}
 80012e2:	bf00      	nop
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
	...

080012f0 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b085      	sub	sp, #20
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80012f8:	4b08      	ldr	r3, [pc, #32]	; (800131c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80012fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012fc:	4907      	ldr	r1, [pc, #28]	; (800131c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4313      	orrs	r3, r2
 8001302:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001304:	4b05      	ldr	r3, [pc, #20]	; (800131c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001306:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	4013      	ands	r3, r2
 800130c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800130e:	68fb      	ldr	r3, [r7, #12]
}
 8001310:	bf00      	nop
 8001312:	3714      	adds	r7, #20
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	40023800 	.word	0x40023800

08001320 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001320:	b480      	push	{r7}
 8001322:	b085      	sub	sp, #20
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001328:	4b08      	ldr	r3, [pc, #32]	; (800134c <LL_APB1_GRP1_EnableClock+0x2c>)
 800132a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800132c:	4907      	ldr	r1, [pc, #28]	; (800134c <LL_APB1_GRP1_EnableClock+0x2c>)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4313      	orrs	r3, r2
 8001332:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001334:	4b05      	ldr	r3, [pc, #20]	; (800134c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001336:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	4013      	ands	r3, r2
 800133c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800133e:	68fb      	ldr	r3, [r7, #12]
}
 8001340:	bf00      	nop
 8001342:	3714      	adds	r7, #20
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr
 800134c:	40023800 	.word	0x40023800

08001350 <BNO080_GPIO_SPI_Initialization>:
int16_t gyro_Q1 = 9;
int16_t magnetometer_Q1 = 4;


void BNO080_GPIO_SPI_Initialization(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b090      	sub	sp, #64	; 0x40
 8001354:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001356:	f107 0318 	add.w	r3, r7, #24
 800135a:	2228      	movs	r2, #40	; 0x28
 800135c:	2100      	movs	r1, #0
 800135e:	4618      	mov	r0, r3
 8001360:	f00a fbde 	bl	800bb20 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001364:	463b      	mov	r3, r7
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	605a      	str	r2, [r3, #4]
 800136c:	609a      	str	r2, [r3, #8]
 800136e:	60da      	str	r2, [r3, #12]
 8001370:	611a      	str	r2, [r3, #16]
 8001372:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8001374:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001378:	f7ff ffd2 	bl	8001320 <LL_APB1_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800137c:	2002      	movs	r0, #2
 800137e:	f7ff ffb7 	bl	80012f0 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001382:	2004      	movs	r0, #4
 8001384:	f7ff ffb4 	bl	80012f0 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001388:	2001      	movs	r0, #1
 800138a:	f7ff ffb1 	bl	80012f0 <LL_AHB1_GRP1_EnableClock>
	/**SPI2 GPIO Configuration
	PB13   ------> SPI2_SCK
	PB14   ------> SPI2_MISO
	PB15   ------> SPI2_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 800138e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001392:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001394:	2302      	movs	r3, #2
 8001396:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001398:	2303      	movs	r3, #3
 800139a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800139c:	2300      	movs	r3, #0
 800139e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80013a0:	2300      	movs	r3, #0
 80013a2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80013a4:	2305      	movs	r3, #5
 80013a6:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a8:	463b      	mov	r3, r7
 80013aa:	4619      	mov	r1, r3
 80013ac:	4841      	ldr	r0, [pc, #260]	; (80014b4 <BNO080_GPIO_SPI_Initialization+0x164>)
 80013ae:	f009 fc22 	bl	800abf6 <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80013b2:	2300      	movs	r3, #0
 80013b4:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80013b6:	f44f 7382 	mov.w	r3, #260	; 0x104
 80013ba:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80013bc:	2300      	movs	r3, #0
 80013be:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80013c0:	2302      	movs	r3, #2
 80013c2:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80013c4:	2301      	movs	r3, #1
 80013c6:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80013c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 80013ce:	2318      	movs	r3, #24
 80013d0:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80013d2:	2300      	movs	r3, #0
 80013d4:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80013d6:	2300      	movs	r3, #0
 80013d8:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 80013da:	230a      	movs	r3, #10
 80013dc:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(BNO080_SPI_CHANNEL, &SPI_InitStruct);
 80013de:	f107 0318 	add.w	r3, r7, #24
 80013e2:	4619      	mov	r1, r3
 80013e4:	4834      	ldr	r0, [pc, #208]	; (80014b8 <BNO080_GPIO_SPI_Initialization+0x168>)
 80013e6:	f009 fdd4 	bl	800af92 <LL_SPI_Init>
	LL_SPI_SetStandard(BNO080_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 80013ea:	2100      	movs	r1, #0
 80013ec:	4832      	ldr	r0, [pc, #200]	; (80014b8 <BNO080_GPIO_SPI_Initialization+0x168>)
 80013ee:	f7ff fef4 	bl	80011da <LL_SPI_SetStandard>
	 * PA8  ------> BNO080_PS0/WAKE (output)
	 * PC9  ------> BNO080_RST (output)
	 * PC8  ------> BNO080_INT (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(BNO080_RST_PORT, BNO080_RST_PIN);
 80013f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013f6:	4831      	ldr	r0, [pc, #196]	; (80014bc <BNO080_GPIO_SPI_Initialization+0x16c>)
 80013f8:	f7ff ff6a 	bl	80012d0 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_SPI_CS_PORT, BNO080_SPI_CS_PIN);
 80013fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001400:	482c      	ldr	r0, [pc, #176]	; (80014b4 <BNO080_GPIO_SPI_Initialization+0x164>)
 8001402:	f7ff ff65 	bl	80012d0 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_PS0_WAKE_PORT, BNO080_PS0_WAKE_PIN);
 8001406:	f44f 7180 	mov.w	r1, #256	; 0x100
 800140a:	482d      	ldr	r0, [pc, #180]	; (80014c0 <BNO080_GPIO_SPI_Initialization+0x170>)
 800140c:	f7ff ff60 	bl	80012d0 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_SPI_CS_PIN;
 8001410:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001414:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001416:	2301      	movs	r3, #1
 8001418:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800141a:	2303      	movs	r3, #3
 800141c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001422:	2300      	movs	r3, #0
 8001424:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_SPI_CS_PORT, &GPIO_InitStruct);
 8001426:	463b      	mov	r3, r7
 8001428:	4619      	mov	r1, r3
 800142a:	4822      	ldr	r0, [pc, #136]	; (80014b4 <BNO080_GPIO_SPI_Initialization+0x164>)
 800142c:	f009 fbe3 	bl	800abf6 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_RST_PIN;
 8001430:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001434:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001436:	2301      	movs	r3, #1
 8001438:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800143a:	2303      	movs	r3, #3
 800143c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800143e:	2300      	movs	r3, #0
 8001440:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001442:	2300      	movs	r3, #0
 8001444:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_RST_PORT, &GPIO_InitStruct);
 8001446:	463b      	mov	r3, r7
 8001448:	4619      	mov	r1, r3
 800144a:	481c      	ldr	r0, [pc, #112]	; (80014bc <BNO080_GPIO_SPI_Initialization+0x16c>)
 800144c:	f009 fbd3 	bl	800abf6 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_PS0_WAKE_PIN;
 8001450:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001454:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001456:	2301      	movs	r3, #1
 8001458:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800145a:	2303      	movs	r3, #3
 800145c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800145e:	2300      	movs	r3, #0
 8001460:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001462:	2300      	movs	r3, #0
 8001464:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_PS0_WAKE_PORT, &GPIO_InitStruct);
 8001466:	463b      	mov	r3, r7
 8001468:	4619      	mov	r1, r3
 800146a:	4815      	ldr	r0, [pc, #84]	; (80014c0 <BNO080_GPIO_SPI_Initialization+0x170>)
 800146c:	f009 fbc3 	bl	800abf6 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_INT_PIN;
 8001470:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001474:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001476:	2300      	movs	r3, #0
 8001478:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800147a:	2301      	movs	r3, #1
 800147c:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_INT_PORT, &GPIO_InitStruct);
 800147e:	463b      	mov	r3, r7
 8001480:	4619      	mov	r1, r3
 8001482:	480e      	ldr	r0, [pc, #56]	; (80014bc <BNO080_GPIO_SPI_Initialization+0x16c>)
 8001484:	f009 fbb7 	bl	800abf6 <LL_GPIO_Init>

	LL_SPI_Enable(BNO080_SPI_CHANNEL);
 8001488:	480b      	ldr	r0, [pc, #44]	; (80014b8 <BNO080_GPIO_SPI_Initialization+0x168>)
 800148a:	f7ff fe96 	bl	80011ba <LL_SPI_Enable>

	CHIP_DESELECT(BNO080);
 800148e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001492:	4808      	ldr	r0, [pc, #32]	; (80014b4 <BNO080_GPIO_SPI_Initialization+0x164>)
 8001494:	f7ff ff0e 	bl	80012b4 <LL_GPIO_SetOutputPin>
	WAKE_HIGH();
 8001498:	f44f 7180 	mov.w	r1, #256	; 0x100
 800149c:	4808      	ldr	r0, [pc, #32]	; (80014c0 <BNO080_GPIO_SPI_Initialization+0x170>)
 800149e:	f7ff ff09 	bl	80012b4 <LL_GPIO_SetOutputPin>
	RESET_HIGH();
 80014a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014a6:	4805      	ldr	r0, [pc, #20]	; (80014bc <BNO080_GPIO_SPI_Initialization+0x16c>)
 80014a8:	f7ff ff04 	bl	80012b4 <LL_GPIO_SetOutputPin>
}
 80014ac:	bf00      	nop
 80014ae:	3740      	adds	r7, #64	; 0x40
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	40020400 	.word	0x40020400
 80014b8:	40003800 	.word	0x40003800
 80014bc:	40020800 	.word	0x40020800
 80014c0:	40020000 	.word	0x40020000

080014c4 <BNO080_Initialization>:

int BNO080_Initialization(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af02      	add	r7, sp, #8
	BNO080_GPIO_SPI_Initialization();
 80014ca:	f7ff ff41 	bl	8001350 <BNO080_GPIO_SPI_Initialization>
	
	printf("Checking BNO080...");
 80014ce:	482e      	ldr	r0, [pc, #184]	; (8001588 <BNO080_Initialization+0xc4>)
 80014d0:	f00a ff8a 	bl	800c3e8 <iprintf>
	
	CHIP_DESELECT(BNO080);
 80014d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014d8:	482c      	ldr	r0, [pc, #176]	; (800158c <BNO080_Initialization+0xc8>)
 80014da:	f7ff feeb 	bl	80012b4 <LL_GPIO_SetOutputPin>
	
	//Configure the BNO080 for SPI communication
	WAKE_HIGH();	//Before boot up the PS0/WAK pin must be high to enter SPI mode
 80014de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014e2:	482b      	ldr	r0, [pc, #172]	; (8001590 <BNO080_Initialization+0xcc>)
 80014e4:	f7ff fee6 	bl	80012b4 <LL_GPIO_SetOutputPin>
	RESET_LOW();	//Reset BNO080
 80014e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014ec:	4829      	ldr	r0, [pc, #164]	; (8001594 <BNO080_Initialization+0xd0>)
 80014ee:	f7ff feef 	bl	80012d0 <LL_GPIO_ResetOutputPin>
	HAL_Delay(200);	//Min length not specified in datasheet?
 80014f2:	20c8      	movs	r0, #200	; 0xc8
 80014f4:	f005 fc9a 	bl	8006e2c <HAL_Delay>
	RESET_HIGH();	//Bring out of reset
 80014f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014fc:	4825      	ldr	r0, [pc, #148]	; (8001594 <BNO080_Initialization+0xd0>)
 80014fe:	f7ff fed9 	bl	80012b4 <LL_GPIO_SetOutputPin>
	
	BNO080_waitForSPI(); //Wait until INT pin goes low.
 8001502:	f000 fc25 	bl	8001d50 <BNO080_waitForSPI>
	
	//At system startup, the hub must send its full advertisement message (see 5.2 and 5.3) to the
	//host. It must not send any other data until this step is complete.
	//When BNO080 first boots it broadcasts big startup packet
	//Read it and dump it
	BNO080_waitForSPI(); //Wait for assertion of INT before reading advert message.
 8001506:	f000 fc23 	bl	8001d50 <BNO080_waitForSPI>
	BNO080_receivePacket();
 800150a:	f000 fc45 	bl	8001d98 <BNO080_receivePacket>
	
	//The BNO080 will then transmit an unsolicited Initialize Response (see 6.4.5.2)
	//Read it and dump it
	BNO080_waitForSPI();  //Wait for assertion of INT before reading Init response
 800150e:	f000 fc1f 	bl	8001d50 <BNO080_waitForSPI>
	BNO080_receivePacket();
 8001512:	f000 fc41 	bl	8001d98 <BNO080_receivePacket>
	
	//Check communication with device
	shtpData[0] = SHTP_REPORT_PRODUCT_ID_REQUEST; //Request the product ID and reset info
 8001516:	4b20      	ldr	r3, [pc, #128]	; (8001598 <BNO080_Initialization+0xd4>)
 8001518:	22f9      	movs	r2, #249	; 0xf9
 800151a:	701a      	strb	r2, [r3, #0]
	shtpData[1] = 0;						 //Reserved
 800151c:	4b1e      	ldr	r3, [pc, #120]	; (8001598 <BNO080_Initialization+0xd4>)
 800151e:	2200      	movs	r2, #0
 8001520:	705a      	strb	r2, [r3, #1]
	
	//Transmit packet on channel 2, 2 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 2);
 8001522:	2102      	movs	r1, #2
 8001524:	2002      	movs	r0, #2
 8001526:	f000 fca7 	bl	8001e78 <BNO080_sendPacket>
	
	//Now we wait for response
	BNO080_waitForSPI();
 800152a:	f000 fc11 	bl	8001d50 <BNO080_waitForSPI>
	if (BNO080_receivePacket() == 1)
 800152e:	f000 fc33 	bl	8001d98 <BNO080_receivePacket>
 8001532:	4603      	mov	r3, r0
 8001534:	2b01      	cmp	r3, #1
 8001536:	d11b      	bne.n	8001570 <BNO080_Initialization+0xac>
	{
		printf("header: %d %d %d %d\n", shtpHeader[0], shtpHeader[1], shtpHeader[2], shtpHeader[3]);
 8001538:	4b18      	ldr	r3, [pc, #96]	; (800159c <BNO080_Initialization+0xd8>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	4619      	mov	r1, r3
 800153e:	4b17      	ldr	r3, [pc, #92]	; (800159c <BNO080_Initialization+0xd8>)
 8001540:	785b      	ldrb	r3, [r3, #1]
 8001542:	461a      	mov	r2, r3
 8001544:	4b15      	ldr	r3, [pc, #84]	; (800159c <BNO080_Initialization+0xd8>)
 8001546:	789b      	ldrb	r3, [r3, #2]
 8001548:	4618      	mov	r0, r3
 800154a:	4b14      	ldr	r3, [pc, #80]	; (800159c <BNO080_Initialization+0xd8>)
 800154c:	78db      	ldrb	r3, [r3, #3]
 800154e:	9300      	str	r3, [sp, #0]
 8001550:	4603      	mov	r3, r0
 8001552:	4813      	ldr	r0, [pc, #76]	; (80015a0 <BNO080_Initialization+0xdc>)
 8001554:	f00a ff48 	bl	800c3e8 <iprintf>
		if (shtpData[0] == SHTP_REPORT_PRODUCT_ID_RESPONSE)
 8001558:	4b0f      	ldr	r3, [pc, #60]	; (8001598 <BNO080_Initialization+0xd4>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	2bf8      	cmp	r3, #248	; 0xf8
 800155e:	d107      	bne.n	8001570 <BNO080_Initialization+0xac>
		{
			printf("BNO080 who_am_i = 0x%02x...ok\n\n", shtpData[0]);
 8001560:	4b0d      	ldr	r3, [pc, #52]	; (8001598 <BNO080_Initialization+0xd4>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	4619      	mov	r1, r3
 8001566:	480f      	ldr	r0, [pc, #60]	; (80015a4 <BNO080_Initialization+0xe0>)
 8001568:	f00a ff3e 	bl	800c3e8 <iprintf>
			return (0);
 800156c:	2300      	movs	r3, #0
 800156e:	e007      	b.n	8001580 <BNO080_Initialization+0xbc>
		}// Sensor OK
	}
	
	printf("BNO080 Not OK: 0x%02x Should be 0x%02x\n", shtpData[0], SHTP_REPORT_PRODUCT_ID_RESPONSE);
 8001570:	4b09      	ldr	r3, [pc, #36]	; (8001598 <BNO080_Initialization+0xd4>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	22f8      	movs	r2, #248	; 0xf8
 8001576:	4619      	mov	r1, r3
 8001578:	480b      	ldr	r0, [pc, #44]	; (80015a8 <BNO080_Initialization+0xe4>)
 800157a:	f00a ff35 	bl	800c3e8 <iprintf>
	return (1); //Something went wrong
 800157e:	2301      	movs	r3, #1
}
 8001580:	4618      	mov	r0, r3
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	0800f208 	.word	0x0800f208
 800158c:	40020400 	.word	0x40020400
 8001590:	40020000 	.word	0x40020000
 8001594:	40020800 	.word	0x40020800
 8001598:	20000288 	.word	0x20000288
 800159c:	20000234 	.word	0x20000234
 80015a0:	0800f21c 	.word	0x0800f21c
 80015a4:	0800f234 	.word	0x0800f234
 80015a8:	0800f254 	.word	0x0800f254

080015ac <SPI2_SendByte>:

unsigned char SPI2_SendByte(unsigned char data)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	4603      	mov	r3, r0
 80015b4:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(BNO080_SPI_CHANNEL)==RESET);
 80015b6:	bf00      	nop
 80015b8:	480c      	ldr	r0, [pc, #48]	; (80015ec <SPI2_SendByte+0x40>)
 80015ba:	f7ff fe34 	bl	8001226 <LL_SPI_IsActiveFlag_TXE>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d0f9      	beq.n	80015b8 <SPI2_SendByte+0xc>
	LL_SPI_TransmitData8(BNO080_SPI_CHANNEL, data);
 80015c4:	79fb      	ldrb	r3, [r7, #7]
 80015c6:	4619      	mov	r1, r3
 80015c8:	4808      	ldr	r0, [pc, #32]	; (80015ec <SPI2_SendByte+0x40>)
 80015ca:	f7ff fe4c 	bl	8001266 <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(BNO080_SPI_CHANNEL)==RESET);
 80015ce:	bf00      	nop
 80015d0:	4806      	ldr	r0, [pc, #24]	; (80015ec <SPI2_SendByte+0x40>)
 80015d2:	f7ff fe15 	bl	8001200 <LL_SPI_IsActiveFlag_RXNE>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d0f9      	beq.n	80015d0 <SPI2_SendByte+0x24>
	return LL_SPI_ReceiveData8(BNO080_SPI_CHANNEL);
 80015dc:	4803      	ldr	r0, [pc, #12]	; (80015ec <SPI2_SendByte+0x40>)
 80015de:	f7ff fe35 	bl	800124c <LL_SPI_ReceiveData8>
 80015e2:	4603      	mov	r3, r0
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	40003800 	.word	0x40003800

080015f0 <BNO080_dataAvailable>:
//////////////////////////////////////////////////////////////////////////

//Updates the latest variables if possible
//Returns false if new readings are not available
int BNO080_dataAvailable(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
	//If we have an interrupt pin connection available, check if data is available.
	//If int pin is NULL, then we'll rely on BNO080_receivePacket() to timeout
	//See issue 13: https://github.com/sparkfun/SparkFun_BNO080_Arduino_Library/issues/13
	if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 1)
 80015f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015f8:	4811      	ldr	r0, [pc, #68]	; (8001640 <BNO080_dataAvailable+0x50>)
 80015fa:	f7ff fe46 	bl	800128a <LL_GPIO_IsInputPinSet>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b01      	cmp	r3, #1
 8001602:	d101      	bne.n	8001608 <BNO080_dataAvailable+0x18>
		return (0);
 8001604:	2300      	movs	r3, #0
 8001606:	e019      	b.n	800163c <BNO080_dataAvailable+0x4c>

	if (BNO080_receivePacket() == 1)
 8001608:	f000 fbc6 	bl	8001d98 <BNO080_receivePacket>
 800160c:	4603      	mov	r3, r0
 800160e:	2b01      	cmp	r3, #1
 8001610:	d113      	bne.n	800163a <BNO080_dataAvailable+0x4a>
	{
		//Check to see if this packet is a sensor reporting its data to us
		if (shtpHeader[2] == CHANNEL_REPORTS && shtpData[0] == SHTP_REPORT_BASE_TIMESTAMP)
 8001612:	4b0c      	ldr	r3, [pc, #48]	; (8001644 <BNO080_dataAvailable+0x54>)
 8001614:	789b      	ldrb	r3, [r3, #2]
 8001616:	2b03      	cmp	r3, #3
 8001618:	d107      	bne.n	800162a <BNO080_dataAvailable+0x3a>
 800161a:	4b0b      	ldr	r3, [pc, #44]	; (8001648 <BNO080_dataAvailable+0x58>)
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	2bfb      	cmp	r3, #251	; 0xfb
 8001620:	d103      	bne.n	800162a <BNO080_dataAvailable+0x3a>
		{
			BNO080_parseInputReport(); //This will update the rawAccelX, etc variables depending on which feature report is found
 8001622:	f000 f82f 	bl	8001684 <BNO080_parseInputReport>
			return (1);
 8001626:	2301      	movs	r3, #1
 8001628:	e008      	b.n	800163c <BNO080_dataAvailable+0x4c>
		}
		else if (shtpHeader[2] == CHANNEL_CONTROL)
 800162a:	4b06      	ldr	r3, [pc, #24]	; (8001644 <BNO080_dataAvailable+0x54>)
 800162c:	789b      	ldrb	r3, [r3, #2]
 800162e:	2b02      	cmp	r3, #2
 8001630:	d103      	bne.n	800163a <BNO080_dataAvailable+0x4a>
		{
			BNO080_parseCommandReport(); //This will update responses to commands, calibrationStatus, etc.
 8001632:	f000 f80b 	bl	800164c <BNO080_parseCommandReport>
			return (1);
 8001636:	2301      	movs	r3, #1
 8001638:	e000      	b.n	800163c <BNO080_dataAvailable+0x4c>
		}
	}
	return (0);
 800163a:	2300      	movs	r3, #0
}
 800163c:	4618      	mov	r0, r3
 800163e:	bd80      	pop	{r7, pc}
 8001640:	40020800 	.word	0x40020800
 8001644:	20000234 	.word	0x20000234
 8001648:	20000288 	.word	0x20000288

0800164c <BNO080_parseCommandReport>:
//shtpData[5 + 5]: R5
//shtpData[5 + 6]: R6
//shtpData[5 + 7]: R7
//shtpData[5 + 8]: R8
void BNO080_parseCommandReport(void)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
	if (shtpData[0] == SHTP_REPORT_COMMAND_RESPONSE)
 8001652:	4b0a      	ldr	r3, [pc, #40]	; (800167c <BNO080_parseCommandReport+0x30>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	2bf1      	cmp	r3, #241	; 0xf1
 8001658:	d109      	bne.n	800166e <BNO080_parseCommandReport+0x22>
	{
		//The BNO080 responds with this report to command requests. It's up to use to remember which command we issued.
		uint8_t command = shtpData[2]; //This is the Command byte of the response
 800165a:	4b08      	ldr	r3, [pc, #32]	; (800167c <BNO080_parseCommandReport+0x30>)
 800165c:	789b      	ldrb	r3, [r3, #2]
 800165e:	71fb      	strb	r3, [r7, #7]

		if (command == COMMAND_ME_CALIBRATE)
 8001660:	79fb      	ldrb	r3, [r7, #7]
 8001662:	2b07      	cmp	r3, #7
 8001664:	d103      	bne.n	800166e <BNO080_parseCommandReport+0x22>
		{
			calibrationStatus = shtpData[5]; //R0 - Status (0 = success, non-zero = fail)
 8001666:	4b05      	ldr	r3, [pc, #20]	; (800167c <BNO080_parseCommandReport+0x30>)
 8001668:	795a      	ldrb	r2, [r3, #5]
 800166a:	4b05      	ldr	r3, [pc, #20]	; (8001680 <BNO080_parseCommandReport+0x34>)
 800166c:	701a      	strb	r2, [r3, #0]
		//This sensor report ID is unhandled.
		//See reference manual to add additional feature reports as needed
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 800166e:	bf00      	nop
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	20000288 	.word	0x20000288
 8001680:	2000030b 	.word	0x2000030b

08001684 <BNO080_parseInputReport>:
//shtpData[6:7]: j/accel y/gyro y/etc
//shtpData[8:9]: k/accel z/gyro z/etc
//shtpData[10:11]: real/gyro temp/etc
//shtpData[12:13]: Accuracy estimate
void BNO080_parseInputReport(void)
{
 8001684:	b480      	push	{r7}
 8001686:	b087      	sub	sp, #28
 8001688:	af00      	add	r7, sp, #0
	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)shtpHeader[1] << 8 | shtpHeader[0]);
 800168a:	4b81      	ldr	r3, [pc, #516]	; (8001890 <BNO080_parseInputReport+0x20c>)
 800168c:	785b      	ldrb	r3, [r3, #1]
 800168e:	021b      	lsls	r3, r3, #8
 8001690:	b21a      	sxth	r2, r3
 8001692:	4b7f      	ldr	r3, [pc, #508]	; (8001890 <BNO080_parseInputReport+0x20c>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	b21b      	sxth	r3, r3
 8001698:	4313      	orrs	r3, r2
 800169a:	823b      	strh	r3, [r7, #16]
	dataLength &= ~(1 << 15); //Clear the MSbit. This bit indicates if this package is a continuation of the last.
 800169c:	8a3b      	ldrh	r3, [r7, #16]
 800169e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80016a2:	823b      	strh	r3, [r7, #16]
	//Ignore it for now. TODO catch this as an error and exit

	dataLength -= 4; //Remove the header bytes from the data count
 80016a4:	8a3b      	ldrh	r3, [r7, #16]
 80016a6:	3b04      	subs	r3, #4
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	823b      	strh	r3, [r7, #16]

	timeStamp = ((uint32_t)shtpData[4] << (8 * 3)) | (shtpData[3] << (8 * 2)) | (shtpData[2] << (8 * 1)) | (shtpData[1] << (8 * 0));
 80016ac:	4b79      	ldr	r3, [pc, #484]	; (8001894 <BNO080_parseInputReport+0x210>)
 80016ae:	791b      	ldrb	r3, [r3, #4]
 80016b0:	061b      	lsls	r3, r3, #24
 80016b2:	4a78      	ldr	r2, [pc, #480]	; (8001894 <BNO080_parseInputReport+0x210>)
 80016b4:	78d2      	ldrb	r2, [r2, #3]
 80016b6:	0412      	lsls	r2, r2, #16
 80016b8:	4313      	orrs	r3, r2
 80016ba:	4a76      	ldr	r2, [pc, #472]	; (8001894 <BNO080_parseInputReport+0x210>)
 80016bc:	7892      	ldrb	r2, [r2, #2]
 80016be:	0212      	lsls	r2, r2, #8
 80016c0:	4313      	orrs	r3, r2
 80016c2:	4a74      	ldr	r2, [pc, #464]	; (8001894 <BNO080_parseInputReport+0x210>)
 80016c4:	7852      	ldrb	r2, [r2, #1]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	4a73      	ldr	r2, [pc, #460]	; (8001898 <BNO080_parseInputReport+0x214>)
 80016ca:	6013      	str	r3, [r2, #0]

	uint8_t status = shtpData[7] & 0x03; //Get status bits
 80016cc:	4b71      	ldr	r3, [pc, #452]	; (8001894 <BNO080_parseInputReport+0x210>)
 80016ce:	79db      	ldrb	r3, [r3, #7]
 80016d0:	f003 0303 	and.w	r3, r3, #3
 80016d4:	73fb      	strb	r3, [r7, #15]
	uint16_t data1 = (uint16_t)shtpData[10] << 8 | shtpData[9];
 80016d6:	4b6f      	ldr	r3, [pc, #444]	; (8001894 <BNO080_parseInputReport+0x210>)
 80016d8:	7a9b      	ldrb	r3, [r3, #10]
 80016da:	021b      	lsls	r3, r3, #8
 80016dc:	b21a      	sxth	r2, r3
 80016de:	4b6d      	ldr	r3, [pc, #436]	; (8001894 <BNO080_parseInputReport+0x210>)
 80016e0:	7a5b      	ldrb	r3, [r3, #9]
 80016e2:	b21b      	sxth	r3, r3
 80016e4:	4313      	orrs	r3, r2
 80016e6:	b21b      	sxth	r3, r3
 80016e8:	81bb      	strh	r3, [r7, #12]
	uint16_t data2 = (uint16_t)shtpData[12] << 8 | shtpData[11];
 80016ea:	4b6a      	ldr	r3, [pc, #424]	; (8001894 <BNO080_parseInputReport+0x210>)
 80016ec:	7b1b      	ldrb	r3, [r3, #12]
 80016ee:	021b      	lsls	r3, r3, #8
 80016f0:	b21a      	sxth	r2, r3
 80016f2:	4b68      	ldr	r3, [pc, #416]	; (8001894 <BNO080_parseInputReport+0x210>)
 80016f4:	7adb      	ldrb	r3, [r3, #11]
 80016f6:	b21b      	sxth	r3, r3
 80016f8:	4313      	orrs	r3, r2
 80016fa:	b21b      	sxth	r3, r3
 80016fc:	817b      	strh	r3, [r7, #10]
	uint16_t data3 = (uint16_t)shtpData[14] << 8 | shtpData[13];
 80016fe:	4b65      	ldr	r3, [pc, #404]	; (8001894 <BNO080_parseInputReport+0x210>)
 8001700:	7b9b      	ldrb	r3, [r3, #14]
 8001702:	021b      	lsls	r3, r3, #8
 8001704:	b21a      	sxth	r2, r3
 8001706:	4b63      	ldr	r3, [pc, #396]	; (8001894 <BNO080_parseInputReport+0x210>)
 8001708:	7b5b      	ldrb	r3, [r3, #13]
 800170a:	b21b      	sxth	r3, r3
 800170c:	4313      	orrs	r3, r2
 800170e:	b21b      	sxth	r3, r3
 8001710:	813b      	strh	r3, [r7, #8]
	uint16_t data4 = 0;
 8001712:	2300      	movs	r3, #0
 8001714:	82fb      	strh	r3, [r7, #22]
	uint16_t data5 = 0;
 8001716:	2300      	movs	r3, #0
 8001718:	82bb      	strh	r3, [r7, #20]

	if (dataLength > 14)
 800171a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800171e:	2b0e      	cmp	r3, #14
 8001720:	dd09      	ble.n	8001736 <BNO080_parseInputReport+0xb2>
	{
		data4 = (uint16_t)shtpData[16] << 8 | shtpData[15];
 8001722:	4b5c      	ldr	r3, [pc, #368]	; (8001894 <BNO080_parseInputReport+0x210>)
 8001724:	7c1b      	ldrb	r3, [r3, #16]
 8001726:	021b      	lsls	r3, r3, #8
 8001728:	b21a      	sxth	r2, r3
 800172a:	4b5a      	ldr	r3, [pc, #360]	; (8001894 <BNO080_parseInputReport+0x210>)
 800172c:	7bdb      	ldrb	r3, [r3, #15]
 800172e:	b21b      	sxth	r3, r3
 8001730:	4313      	orrs	r3, r2
 8001732:	b21b      	sxth	r3, r3
 8001734:	82fb      	strh	r3, [r7, #22]
	}
	if (dataLength > 16)
 8001736:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800173a:	2b10      	cmp	r3, #16
 800173c:	dd09      	ble.n	8001752 <BNO080_parseInputReport+0xce>
	{
		data5 = (uint16_t)shtpData[18] << 8 | shtpData[17];
 800173e:	4b55      	ldr	r3, [pc, #340]	; (8001894 <BNO080_parseInputReport+0x210>)
 8001740:	7c9b      	ldrb	r3, [r3, #18]
 8001742:	021b      	lsls	r3, r3, #8
 8001744:	b21a      	sxth	r2, r3
 8001746:	4b53      	ldr	r3, [pc, #332]	; (8001894 <BNO080_parseInputReport+0x210>)
 8001748:	7c5b      	ldrb	r3, [r3, #17]
 800174a:	b21b      	sxth	r3, r3
 800174c:	4313      	orrs	r3, r2
 800174e:	b21b      	sxth	r3, r3
 8001750:	82bb      	strh	r3, [r7, #20]
	}

	//Store these generic values to their proper global variable
	switch(shtpData[5])
 8001752:	4b50      	ldr	r3, [pc, #320]	; (8001894 <BNO080_parseInputReport+0x210>)
 8001754:	795b      	ldrb	r3, [r3, #5]
 8001756:	2b05      	cmp	r3, #5
 8001758:	d053      	beq.n	8001802 <BNO080_parseInputReport+0x17e>
 800175a:	2b05      	cmp	r3, #5
 800175c:	dc0b      	bgt.n	8001776 <BNO080_parseInputReport+0xf2>
 800175e:	2b02      	cmp	r3, #2
 8001760:	d033      	beq.n	80017ca <BNO080_parseInputReport+0x146>
 8001762:	2b02      	cmp	r3, #2
 8001764:	dc02      	bgt.n	800176c <BNO080_parseInputReport+0xe8>
 8001766:	2b01      	cmp	r3, #1
 8001768:	d013      	beq.n	8001792 <BNO080_parseInputReport+0x10e>
			//See reference manual to add additional feature reports as needed
		}
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 800176a:	e08a      	b.n	8001882 <BNO080_parseInputReport+0x1fe>
	switch(shtpData[5])
 800176c:	2b03      	cmp	r3, #3
 800176e:	d03a      	beq.n	80017e6 <BNO080_parseInputReport+0x162>
 8001770:	2b04      	cmp	r3, #4
 8001772:	d01c      	beq.n	80017ae <BNO080_parseInputReport+0x12a>
}
 8001774:	e085      	b.n	8001882 <BNO080_parseInputReport+0x1fe>
	switch(shtpData[5])
 8001776:	2b13      	cmp	r3, #19
 8001778:	d05b      	beq.n	8001832 <BNO080_parseInputReport+0x1ae>
 800177a:	2b13      	cmp	r3, #19
 800177c:	dc04      	bgt.n	8001788 <BNO080_parseInputReport+0x104>
 800177e:	2b08      	cmp	r3, #8
 8001780:	d03f      	beq.n	8001802 <BNO080_parseInputReport+0x17e>
 8001782:	2b11      	cmp	r3, #17
 8001784:	d051      	beq.n	800182a <BNO080_parseInputReport+0x1a6>
}
 8001786:	e07c      	b.n	8001882 <BNO080_parseInputReport+0x1fe>
	switch(shtpData[5])
 8001788:	2b1e      	cmp	r3, #30
 800178a:	d057      	beq.n	800183c <BNO080_parseInputReport+0x1b8>
 800178c:	2bf1      	cmp	r3, #241	; 0xf1
 800178e:	d06d      	beq.n	800186c <BNO080_parseInputReport+0x1e8>
}
 8001790:	e077      	b.n	8001882 <BNO080_parseInputReport+0x1fe>
			accelAccuracy = status;
 8001792:	7bfb      	ldrb	r3, [r7, #15]
 8001794:	b29a      	uxth	r2, r3
 8001796:	4b41      	ldr	r3, [pc, #260]	; (800189c <BNO080_parseInputReport+0x218>)
 8001798:	801a      	strh	r2, [r3, #0]
			rawAccelX = data1;
 800179a:	4a41      	ldr	r2, [pc, #260]	; (80018a0 <BNO080_parseInputReport+0x21c>)
 800179c:	89bb      	ldrh	r3, [r7, #12]
 800179e:	8013      	strh	r3, [r2, #0]
			rawAccelY = data2;
 80017a0:	4a40      	ldr	r2, [pc, #256]	; (80018a4 <BNO080_parseInputReport+0x220>)
 80017a2:	897b      	ldrh	r3, [r7, #10]
 80017a4:	8013      	strh	r3, [r2, #0]
			rawAccelZ = data3;
 80017a6:	4a40      	ldr	r2, [pc, #256]	; (80018a8 <BNO080_parseInputReport+0x224>)
 80017a8:	893b      	ldrh	r3, [r7, #8]
 80017aa:	8013      	strh	r3, [r2, #0]
			break;
 80017ac:	e069      	b.n	8001882 <BNO080_parseInputReport+0x1fe>
			accelLinAccuracy = status;
 80017ae:	7bfb      	ldrb	r3, [r7, #15]
 80017b0:	b29a      	uxth	r2, r3
 80017b2:	4b3e      	ldr	r3, [pc, #248]	; (80018ac <BNO080_parseInputReport+0x228>)
 80017b4:	801a      	strh	r2, [r3, #0]
			rawLinAccelX = data1;
 80017b6:	4a3e      	ldr	r2, [pc, #248]	; (80018b0 <BNO080_parseInputReport+0x22c>)
 80017b8:	89bb      	ldrh	r3, [r7, #12]
 80017ba:	8013      	strh	r3, [r2, #0]
			rawLinAccelY = data2;
 80017bc:	4a3d      	ldr	r2, [pc, #244]	; (80018b4 <BNO080_parseInputReport+0x230>)
 80017be:	897b      	ldrh	r3, [r7, #10]
 80017c0:	8013      	strh	r3, [r2, #0]
			rawLinAccelZ = data3;
 80017c2:	4a3d      	ldr	r2, [pc, #244]	; (80018b8 <BNO080_parseInputReport+0x234>)
 80017c4:	893b      	ldrh	r3, [r7, #8]
 80017c6:	8013      	strh	r3, [r2, #0]
			break;
 80017c8:	e05b      	b.n	8001882 <BNO080_parseInputReport+0x1fe>
			gyroAccuracy = status;
 80017ca:	7bfb      	ldrb	r3, [r7, #15]
 80017cc:	b29a      	uxth	r2, r3
 80017ce:	4b3b      	ldr	r3, [pc, #236]	; (80018bc <BNO080_parseInputReport+0x238>)
 80017d0:	801a      	strh	r2, [r3, #0]
			rawGyroX = data1;
 80017d2:	4a3b      	ldr	r2, [pc, #236]	; (80018c0 <BNO080_parseInputReport+0x23c>)
 80017d4:	89bb      	ldrh	r3, [r7, #12]
 80017d6:	8013      	strh	r3, [r2, #0]
			rawGyroY = data2;
 80017d8:	4a3a      	ldr	r2, [pc, #232]	; (80018c4 <BNO080_parseInputReport+0x240>)
 80017da:	897b      	ldrh	r3, [r7, #10]
 80017dc:	8013      	strh	r3, [r2, #0]
			rawGyroZ = data3;
 80017de:	4a3a      	ldr	r2, [pc, #232]	; (80018c8 <BNO080_parseInputReport+0x244>)
 80017e0:	893b      	ldrh	r3, [r7, #8]
 80017e2:	8013      	strh	r3, [r2, #0]
			break;
 80017e4:	e04d      	b.n	8001882 <BNO080_parseInputReport+0x1fe>
			magAccuracy = status;
 80017e6:	7bfb      	ldrb	r3, [r7, #15]
 80017e8:	b29a      	uxth	r2, r3
 80017ea:	4b38      	ldr	r3, [pc, #224]	; (80018cc <BNO080_parseInputReport+0x248>)
 80017ec:	801a      	strh	r2, [r3, #0]
			rawMagX = data1;
 80017ee:	4a38      	ldr	r2, [pc, #224]	; (80018d0 <BNO080_parseInputReport+0x24c>)
 80017f0:	89bb      	ldrh	r3, [r7, #12]
 80017f2:	8013      	strh	r3, [r2, #0]
			rawMagY = data2;
 80017f4:	4a37      	ldr	r2, [pc, #220]	; (80018d4 <BNO080_parseInputReport+0x250>)
 80017f6:	897b      	ldrh	r3, [r7, #10]
 80017f8:	8013      	strh	r3, [r2, #0]
			rawMagZ = data3;
 80017fa:	4a37      	ldr	r2, [pc, #220]	; (80018d8 <BNO080_parseInputReport+0x254>)
 80017fc:	893b      	ldrh	r3, [r7, #8]
 80017fe:	8013      	strh	r3, [r2, #0]
			break;
 8001800:	e03f      	b.n	8001882 <BNO080_parseInputReport+0x1fe>
			quatAccuracy = status;
 8001802:	7bfb      	ldrb	r3, [r7, #15]
 8001804:	b29a      	uxth	r2, r3
 8001806:	4b35      	ldr	r3, [pc, #212]	; (80018dc <BNO080_parseInputReport+0x258>)
 8001808:	801a      	strh	r2, [r3, #0]
			rawQuatI = data1;
 800180a:	4a35      	ldr	r2, [pc, #212]	; (80018e0 <BNO080_parseInputReport+0x25c>)
 800180c:	89bb      	ldrh	r3, [r7, #12]
 800180e:	8013      	strh	r3, [r2, #0]
			rawQuatJ = data2;
 8001810:	4a34      	ldr	r2, [pc, #208]	; (80018e4 <BNO080_parseInputReport+0x260>)
 8001812:	897b      	ldrh	r3, [r7, #10]
 8001814:	8013      	strh	r3, [r2, #0]
			rawQuatK = data3;
 8001816:	4a34      	ldr	r2, [pc, #208]	; (80018e8 <BNO080_parseInputReport+0x264>)
 8001818:	893b      	ldrh	r3, [r7, #8]
 800181a:	8013      	strh	r3, [r2, #0]
			rawQuatReal = data4;
 800181c:	4a33      	ldr	r2, [pc, #204]	; (80018ec <BNO080_parseInputReport+0x268>)
 800181e:	8afb      	ldrh	r3, [r7, #22]
 8001820:	8013      	strh	r3, [r2, #0]
			rawQuatRadianAccuracy = data5; //Only available on rotation vector, not game rot vector
 8001822:	4a33      	ldr	r2, [pc, #204]	; (80018f0 <BNO080_parseInputReport+0x26c>)
 8001824:	8abb      	ldrh	r3, [r7, #20]
 8001826:	8013      	strh	r3, [r2, #0]
			break;
 8001828:	e02b      	b.n	8001882 <BNO080_parseInputReport+0x1fe>
			stepCount = data3; //Bytes 8/9
 800182a:	4a32      	ldr	r2, [pc, #200]	; (80018f4 <BNO080_parseInputReport+0x270>)
 800182c:	893b      	ldrh	r3, [r7, #8]
 800182e:	8013      	strh	r3, [r2, #0]
			break;
 8001830:	e027      	b.n	8001882 <BNO080_parseInputReport+0x1fe>
			stabilityClassifier = shtpData[5 + 4]; //Byte 4 only
 8001832:	4b18      	ldr	r3, [pc, #96]	; (8001894 <BNO080_parseInputReport+0x210>)
 8001834:	7a5a      	ldrb	r2, [r3, #9]
 8001836:	4b30      	ldr	r3, [pc, #192]	; (80018f8 <BNO080_parseInputReport+0x274>)
 8001838:	701a      	strb	r2, [r3, #0]
			break;
 800183a:	e022      	b.n	8001882 <BNO080_parseInputReport+0x1fe>
			activityClassifier = shtpData[5 + 5]; //Most likely state
 800183c:	4b15      	ldr	r3, [pc, #84]	; (8001894 <BNO080_parseInputReport+0x210>)
 800183e:	7a9a      	ldrb	r2, [r3, #10]
 8001840:	4b2e      	ldr	r3, [pc, #184]	; (80018fc <BNO080_parseInputReport+0x278>)
 8001842:	701a      	strb	r2, [r3, #0]
			for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 8001844:	2300      	movs	r3, #0
 8001846:	74fb      	strb	r3, [r7, #19]
 8001848:	e00c      	b.n	8001864 <BNO080_parseInputReport+0x1e0>
				_activityConfidences[x] = shtpData[11 + x]; //5 bytes of timestamp, byte 6 is first confidence byte
 800184a:	7cfb      	ldrb	r3, [r7, #19]
 800184c:	f103 020b 	add.w	r2, r3, #11
 8001850:	4b2b      	ldr	r3, [pc, #172]	; (8001900 <BNO080_parseInputReport+0x27c>)
 8001852:	6819      	ldr	r1, [r3, #0]
 8001854:	7cfb      	ldrb	r3, [r7, #19]
 8001856:	440b      	add	r3, r1
 8001858:	490e      	ldr	r1, [pc, #56]	; (8001894 <BNO080_parseInputReport+0x210>)
 800185a:	5c8a      	ldrb	r2, [r1, r2]
 800185c:	701a      	strb	r2, [r3, #0]
			for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 800185e:	7cfb      	ldrb	r3, [r7, #19]
 8001860:	3301      	adds	r3, #1
 8001862:	74fb      	strb	r3, [r7, #19]
 8001864:	7cfb      	ldrb	r3, [r7, #19]
 8001866:	2b08      	cmp	r3, #8
 8001868:	d9ef      	bls.n	800184a <BNO080_parseInputReport+0x1c6>
			break;
 800186a:	e00a      	b.n	8001882 <BNO080_parseInputReport+0x1fe>
			uint8_t command = shtpData[5 + 2]; //This is the Command byte of the response
 800186c:	4b09      	ldr	r3, [pc, #36]	; (8001894 <BNO080_parseInputReport+0x210>)
 800186e:	79db      	ldrb	r3, [r3, #7]
 8001870:	71fb      	strb	r3, [r7, #7]
			if (command == COMMAND_ME_CALIBRATE)
 8001872:	79fb      	ldrb	r3, [r7, #7]
 8001874:	2b07      	cmp	r3, #7
 8001876:	d103      	bne.n	8001880 <BNO080_parseInputReport+0x1fc>
				calibrationStatus = shtpData[5 + 5]; //R0 - Status (0 = success, non-zero = fail)
 8001878:	4b06      	ldr	r3, [pc, #24]	; (8001894 <BNO080_parseInputReport+0x210>)
 800187a:	7a9a      	ldrb	r2, [r3, #10]
 800187c:	4b21      	ldr	r3, [pc, #132]	; (8001904 <BNO080_parseInputReport+0x280>)
 800187e:	701a      	strb	r2, [r3, #0]
			break;
 8001880:	bf00      	nop
}
 8001882:	bf00      	nop
 8001884:	371c      	adds	r7, #28
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	20000234 	.word	0x20000234
 8001894:	20000288 	.word	0x20000288
 8001898:	2000023c 	.word	0x2000023c
 800189c:	20000310 	.word	0x20000310
 80018a0:	20000308 	.word	0x20000308
 80018a4:	20000314 	.word	0x20000314
 80018a8:	20000272 	.word	0x20000272
 80018ac:	2000026e 	.word	0x2000026e
 80018b0:	20000242 	.word	0x20000242
 80018b4:	2000030c 	.word	0x2000030c
 80018b8:	2000027e 	.word	0x2000027e
 80018bc:	20000280 	.word	0x20000280
 80018c0:	20000282 	.word	0x20000282
 80018c4:	2000026a 	.word	0x2000026a
 80018c8:	20000268 	.word	0x20000268
 80018cc:	20000238 	.word	0x20000238
 80018d0:	2000026c 	.word	0x2000026c
 80018d4:	2000030e 	.word	0x2000030e
 80018d8:	20000270 	.word	0x20000270
 80018dc:	20000240 	.word	0x20000240
 80018e0:	20000312 	.word	0x20000312
 80018e4:	2000027c 	.word	0x2000027c
 80018e8:	20000230 	.word	0x20000230
 80018ec:	2000023a 	.word	0x2000023a
 80018f0:	20000274 	.word	0x20000274
 80018f4:	20000316 	.word	0x20000316
 80018f8:	20000284 	.word	0x20000284
 80018fc:	2000030a 	.word	0x2000030a
 8001900:	20000278 	.word	0x20000278
 8001904:	2000030b 	.word	0x2000030b

08001908 <BNO080_getQuatI>:

//Return the rotation vector quaternion I
float BNO080_getQuatI()
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatI, rotationVector_Q1);
 800190c:	4b07      	ldr	r3, [pc, #28]	; (800192c <BNO080_getQuatI+0x24>)
 800190e:	881b      	ldrh	r3, [r3, #0]
 8001910:	b21a      	sxth	r2, r3
 8001912:	4b07      	ldr	r3, [pc, #28]	; (8001930 <BNO080_getQuatI+0x28>)
 8001914:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001918:	b2db      	uxtb	r3, r3
 800191a:	4619      	mov	r1, r3
 800191c:	4610      	mov	r0, r2
 800191e:	f000 f8bb 	bl	8001a98 <BNO080_qToFloat>
 8001922:	eef0 7a40 	vmov.f32	s15, s0
}
 8001926:	eeb0 0a67 	vmov.f32	s0, s15
 800192a:	bd80      	pop	{r7, pc}
 800192c:	20000312 	.word	0x20000312
 8001930:	20000000 	.word	0x20000000

08001934 <BNO080_getQuatJ>:

//Return the rotation vector quaternion J
float BNO080_getQuatJ()
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatJ, rotationVector_Q1);
 8001938:	4b07      	ldr	r3, [pc, #28]	; (8001958 <BNO080_getQuatJ+0x24>)
 800193a:	881b      	ldrh	r3, [r3, #0]
 800193c:	b21a      	sxth	r2, r3
 800193e:	4b07      	ldr	r3, [pc, #28]	; (800195c <BNO080_getQuatJ+0x28>)
 8001940:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001944:	b2db      	uxtb	r3, r3
 8001946:	4619      	mov	r1, r3
 8001948:	4610      	mov	r0, r2
 800194a:	f000 f8a5 	bl	8001a98 <BNO080_qToFloat>
 800194e:	eef0 7a40 	vmov.f32	s15, s0
}
 8001952:	eeb0 0a67 	vmov.f32	s0, s15
 8001956:	bd80      	pop	{r7, pc}
 8001958:	2000027c 	.word	0x2000027c
 800195c:	20000000 	.word	0x20000000

08001960 <BNO080_getQuatK>:

//Return the rotation vector quaternion K
float BNO080_getQuatK()
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatK, rotationVector_Q1);
 8001964:	4b07      	ldr	r3, [pc, #28]	; (8001984 <BNO080_getQuatK+0x24>)
 8001966:	881b      	ldrh	r3, [r3, #0]
 8001968:	b21a      	sxth	r2, r3
 800196a:	4b07      	ldr	r3, [pc, #28]	; (8001988 <BNO080_getQuatK+0x28>)
 800196c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001970:	b2db      	uxtb	r3, r3
 8001972:	4619      	mov	r1, r3
 8001974:	4610      	mov	r0, r2
 8001976:	f000 f88f 	bl	8001a98 <BNO080_qToFloat>
 800197a:	eef0 7a40 	vmov.f32	s15, s0
}
 800197e:	eeb0 0a67 	vmov.f32	s0, s15
 8001982:	bd80      	pop	{r7, pc}
 8001984:	20000230 	.word	0x20000230
 8001988:	20000000 	.word	0x20000000

0800198c <BNO080_getQuatReal>:

//Return the rotation vector quaternion Real
float BNO080_getQuatReal()
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatReal, rotationVector_Q1);
 8001990:	4b07      	ldr	r3, [pc, #28]	; (80019b0 <BNO080_getQuatReal+0x24>)
 8001992:	881b      	ldrh	r3, [r3, #0]
 8001994:	b21a      	sxth	r2, r3
 8001996:	4b07      	ldr	r3, [pc, #28]	; (80019b4 <BNO080_getQuatReal+0x28>)
 8001998:	f9b3 3000 	ldrsh.w	r3, [r3]
 800199c:	b2db      	uxtb	r3, r3
 800199e:	4619      	mov	r1, r3
 80019a0:	4610      	mov	r0, r2
 80019a2:	f000 f879 	bl	8001a98 <BNO080_qToFloat>
 80019a6:	eef0 7a40 	vmov.f32	s15, s0
}
 80019aa:	eeb0 0a67 	vmov.f32	s0, s15
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	2000023a 	.word	0x2000023a
 80019b4:	20000000 	.word	0x20000000

080019b8 <BNO080_getQuatRadianAccuracy>:

//Return the rotation vector accuracy
float BNO080_getQuatRadianAccuracy()
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatRadianAccuracy, rotationVector_Q1);
 80019bc:	4b07      	ldr	r3, [pc, #28]	; (80019dc <BNO080_getQuatRadianAccuracy+0x24>)
 80019be:	881b      	ldrh	r3, [r3, #0]
 80019c0:	b21a      	sxth	r2, r3
 80019c2:	4b07      	ldr	r3, [pc, #28]	; (80019e0 <BNO080_getQuatRadianAccuracy+0x28>)
 80019c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	4619      	mov	r1, r3
 80019cc:	4610      	mov	r0, r2
 80019ce:	f000 f863 	bl	8001a98 <BNO080_qToFloat>
 80019d2:	eef0 7a40 	vmov.f32	s15, s0
}
 80019d6:	eeb0 0a67 	vmov.f32	s0, s15
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	20000274 	.word	0x20000274
 80019e0:	20000000 	.word	0x20000000

080019e4 <BNO080_getQuatAccuracy>:

//Return the acceleration component
uint8_t BNO080_getQuatAccuracy()
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
	return (quatAccuracy);
 80019e8:	4b03      	ldr	r3, [pc, #12]	; (80019f8 <BNO080_getQuatAccuracy+0x14>)
 80019ea:	881b      	ldrh	r3, [r3, #0]
 80019ec:	b2db      	uxtb	r3, r3
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr
 80019f8:	20000240 	.word	0x20000240

080019fc <BNO080_getMagX>:
	return (gyroAccuracy);
}

//Return the magnetometer component
float BNO080_getMagX()
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawMagX, magnetometer_Q1);
 8001a00:	4b07      	ldr	r3, [pc, #28]	; (8001a20 <BNO080_getMagX+0x24>)
 8001a02:	881b      	ldrh	r3, [r3, #0]
 8001a04:	b21a      	sxth	r2, r3
 8001a06:	4b07      	ldr	r3, [pc, #28]	; (8001a24 <BNO080_getMagX+0x28>)
 8001a08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	4619      	mov	r1, r3
 8001a10:	4610      	mov	r0, r2
 8001a12:	f000 f841 	bl	8001a98 <BNO080_qToFloat>
 8001a16:	eef0 7a40 	vmov.f32	s15, s0
}
 8001a1a:	eeb0 0a67 	vmov.f32	s0, s15
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	2000026c 	.word	0x2000026c
 8001a24:	20000002 	.word	0x20000002

08001a28 <BNO080_getMagY>:

//Return the magnetometer component
float BNO080_getMagY()
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawMagY, magnetometer_Q1);
 8001a2c:	4b07      	ldr	r3, [pc, #28]	; (8001a4c <BNO080_getMagY+0x24>)
 8001a2e:	881b      	ldrh	r3, [r3, #0]
 8001a30:	b21a      	sxth	r2, r3
 8001a32:	4b07      	ldr	r3, [pc, #28]	; (8001a50 <BNO080_getMagY+0x28>)
 8001a34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4610      	mov	r0, r2
 8001a3e:	f000 f82b 	bl	8001a98 <BNO080_qToFloat>
 8001a42:	eef0 7a40 	vmov.f32	s15, s0
}
 8001a46:	eeb0 0a67 	vmov.f32	s0, s15
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	2000030e 	.word	0x2000030e
 8001a50:	20000002 	.word	0x20000002

08001a54 <BNO080_getMagZ>:

//Return the magnetometer component
float BNO080_getMagZ()
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawMagZ, magnetometer_Q1);
 8001a58:	4b07      	ldr	r3, [pc, #28]	; (8001a78 <BNO080_getMagZ+0x24>)
 8001a5a:	881b      	ldrh	r3, [r3, #0]
 8001a5c:	b21a      	sxth	r2, r3
 8001a5e:	4b07      	ldr	r3, [pc, #28]	; (8001a7c <BNO080_getMagZ+0x28>)
 8001a60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	4619      	mov	r1, r3
 8001a68:	4610      	mov	r0, r2
 8001a6a:	f000 f815 	bl	8001a98 <BNO080_qToFloat>
 8001a6e:	eef0 7a40 	vmov.f32	s15, s0
}
 8001a72:	eeb0 0a67 	vmov.f32	s0, s15
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	20000270 	.word	0x20000270
 8001a7c:	20000002 	.word	0x20000002

08001a80 <BNO080_getMagAccuracy>:

//Return the mag component
uint8_t BNO080_getMagAccuracy()
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
	return (magAccuracy);
 8001a84:	4b03      	ldr	r3, [pc, #12]	; (8001a94 <BNO080_getMagAccuracy+0x14>)
 8001a86:	881b      	ldrh	r3, [r3, #0]
 8001a88:	b2db      	uxtb	r3, r3
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr
 8001a94:	20000238 	.word	0x20000238

08001a98 <BNO080_qToFloat>:
}

//Given a register value and a Q point, convert to float
//See https://en.wikipedia.org/wiki/Q_(number_format)
float BNO080_qToFloat(int16_t fixedPointValue, uint8_t qPoint)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	ed2d 8b02 	vpush	{d8}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	460a      	mov	r2, r1
 8001aa6:	80fb      	strh	r3, [r7, #6]
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	717b      	strb	r3, [r7, #5]
	return fixedPointValue * powf(2, qPoint * -1);
 8001aac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ab0:	ee07 3a90 	vmov	s15, r3
 8001ab4:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001ab8:	797b      	ldrb	r3, [r7, #5]
 8001aba:	425b      	negs	r3, r3
 8001abc:	ee07 3a90 	vmov	s15, r3
 8001ac0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ac4:	eef0 0a67 	vmov.f32	s1, s15
 8001ac8:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001acc:	f00c fc14 	bl	800e2f8 <powf>
 8001ad0:	eef0 7a40 	vmov.f32	s15, s0
 8001ad4:	ee68 7a27 	vmul.f32	s15, s16, s15
}
 8001ad8:	eeb0 0a67 	vmov.f32	s0, s15
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	ecbd 8b02 	vpop	{d8}
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <BNO080_enableRotationVector>:

//Sends the packet to enable the rotation vector
void BNO080_enableRotationVector(uint16_t timeBetweenReports)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b082      	sub	sp, #8
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	4603      	mov	r3, r0
 8001aee:	80fb      	strh	r3, [r7, #6]
	BNO080_setFeatureCommand(SENSOR_REPORTID_ROTATION_VECTOR, timeBetweenReports, 0);
 8001af0:	88fb      	ldrh	r3, [r7, #6]
 8001af2:	2200      	movs	r2, #0
 8001af4:	4619      	mov	r1, r3
 8001af6:	2005      	movs	r0, #5
 8001af8:	f000 f83a 	bl	8001b70 <BNO080_setFeatureCommand>
}
 8001afc:	bf00      	nop
 8001afe:	3708      	adds	r7, #8
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <BNO080_enableGameRotationVector>:

//Sends the packet to enable the rotation vector
void BNO080_enableGameRotationVector(uint16_t timeBetweenReports)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	80fb      	strh	r3, [r7, #6]
	BNO080_setFeatureCommand(SENSOR_REPORTID_GAME_ROTATION_VECTOR, timeBetweenReports, 0);
 8001b0e:	88fb      	ldrh	r3, [r7, #6]
 8001b10:	2200      	movs	r2, #0
 8001b12:	4619      	mov	r1, r3
 8001b14:	2008      	movs	r0, #8
 8001b16:	f000 f82b 	bl	8001b70 <BNO080_setFeatureCommand>
}
 8001b1a:	bf00      	nop
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <BNO080_enableMagnetometer>:
	BNO080_setFeatureCommand(SENSOR_REPORTID_GYROSCOPE, timeBetweenReports, 0);
}

//Sends the packet to enable the magnetometer
void BNO080_enableMagnetometer(uint16_t timeBetweenReports)
{
 8001b22:	b580      	push	{r7, lr}
 8001b24:	b082      	sub	sp, #8
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	4603      	mov	r3, r0
 8001b2a:	80fb      	strh	r3, [r7, #6]
	BNO080_setFeatureCommand(SENSOR_REPORTID_MAGNETIC_FIELD, timeBetweenReports, 0);
 8001b2c:	88fb      	ldrh	r3, [r7, #6]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	4619      	mov	r1, r3
 8001b32:	2003      	movs	r0, #3
 8001b34:	f000 f81c 	bl	8001b70 <BNO080_setFeatureCommand>
}
 8001b38:	bf00      	nop
 8001b3a:	3708      	adds	r7, #8
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <BNO080_calibrateAll>:
	BNO080_sendCalibrateCommand(CALIBRATE_PLANAR_ACCEL);
}

//See 2.2 of the Calibration Procedure document 1000-4044
void BNO080_calibrateAll()
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
	BNO080_sendCalibrateCommand(CALIBRATE_ACCEL_GYRO_MAG);
 8001b44:	2004      	movs	r0, #4
 8001b46:	f000 f885 	bl	8001c54 <BNO080_sendCalibrateCommand>
}
 8001b4a:	bf00      	nop
 8001b4c:	bd80      	pop	{r7, pc}
	...

08001b50 <BNO080_calibrationComplete>:
}

//See page 51 of reference manual - ME Calibration Response
//Byte 5 is parsed during the readPacket and stored in calibrationStatus
int BNO080_calibrationComplete()
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
	if (calibrationStatus == 0)
 8001b54:	4b05      	ldr	r3, [pc, #20]	; (8001b6c <BNO080_calibrationComplete+0x1c>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d101      	bne.n	8001b60 <BNO080_calibrationComplete+0x10>
		return (1);
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e000      	b.n	8001b62 <BNO080_calibrationComplete+0x12>
	return (0);
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr
 8001b6c:	2000030b 	.word	0x2000030b

08001b70 <BNO080_setFeatureCommand>:

//Given a sensor's report ID, this tells the BNO080 to begin reporting the values
//Also sets the specific config word. Useful for personal activity classifier
void BNO080_setFeatureCommand(uint8_t reportID, uint32_t microsBetweenReports, uint32_t specificConfig)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	4603      	mov	r3, r0
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	607a      	str	r2, [r7, #4]
 8001b7c:	73fb      	strb	r3, [r7, #15]
	shtpData[0] = SHTP_REPORT_SET_FEATURE_COMMAND;	 //Set feature command. Reference page 55
 8001b7e:	4b24      	ldr	r3, [pc, #144]	; (8001c10 <BNO080_setFeatureCommand+0xa0>)
 8001b80:	22fd      	movs	r2, #253	; 0xfd
 8001b82:	701a      	strb	r2, [r3, #0]
	shtpData[1] = reportID;						 //Feature Report ID. 0x01 = Accelerometer, 0x05 = Rotation vector
 8001b84:	4a22      	ldr	r2, [pc, #136]	; (8001c10 <BNO080_setFeatureCommand+0xa0>)
 8001b86:	7bfb      	ldrb	r3, [r7, #15]
 8001b88:	7053      	strb	r3, [r2, #1]
	shtpData[2] = 0;							 //Feature flags
 8001b8a:	4b21      	ldr	r3, [pc, #132]	; (8001c10 <BNO080_setFeatureCommand+0xa0>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	709a      	strb	r2, [r3, #2]
	shtpData[3] = 0;							 //Change sensitivity (LSB)
 8001b90:	4b1f      	ldr	r3, [pc, #124]	; (8001c10 <BNO080_setFeatureCommand+0xa0>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	70da      	strb	r2, [r3, #3]
	shtpData[4] = 0;							 //Change sensitivity (MSB)
 8001b96:	4b1e      	ldr	r3, [pc, #120]	; (8001c10 <BNO080_setFeatureCommand+0xa0>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	711a      	strb	r2, [r3, #4]
	shtpData[5] = (microsBetweenReports >> 0) & 0xFF;  //Report interval (LSB) in microseconds. 0x7A120 = 500ms
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	b2da      	uxtb	r2, r3
 8001ba0:	4b1b      	ldr	r3, [pc, #108]	; (8001c10 <BNO080_setFeatureCommand+0xa0>)
 8001ba2:	715a      	strb	r2, [r3, #5]
	shtpData[6] = (microsBetweenReports >> 8) & 0xFF;  //Report interval
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	0a1b      	lsrs	r3, r3, #8
 8001ba8:	b2da      	uxtb	r2, r3
 8001baa:	4b19      	ldr	r3, [pc, #100]	; (8001c10 <BNO080_setFeatureCommand+0xa0>)
 8001bac:	719a      	strb	r2, [r3, #6]
	shtpData[7] = (microsBetweenReports >> 16) & 0xFF; //Report interval
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	0c1b      	lsrs	r3, r3, #16
 8001bb2:	b2da      	uxtb	r2, r3
 8001bb4:	4b16      	ldr	r3, [pc, #88]	; (8001c10 <BNO080_setFeatureCommand+0xa0>)
 8001bb6:	71da      	strb	r2, [r3, #7]
	shtpData[8] = (microsBetweenReports >> 24) & 0xFF; //Report interval (MSB)
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	0e1b      	lsrs	r3, r3, #24
 8001bbc:	b2da      	uxtb	r2, r3
 8001bbe:	4b14      	ldr	r3, [pc, #80]	; (8001c10 <BNO080_setFeatureCommand+0xa0>)
 8001bc0:	721a      	strb	r2, [r3, #8]
	shtpData[9] = 0;							 //Batch Interval (LSB)
 8001bc2:	4b13      	ldr	r3, [pc, #76]	; (8001c10 <BNO080_setFeatureCommand+0xa0>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	725a      	strb	r2, [r3, #9]
	shtpData[10] = 0;							 //Batch Interval
 8001bc8:	4b11      	ldr	r3, [pc, #68]	; (8001c10 <BNO080_setFeatureCommand+0xa0>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	729a      	strb	r2, [r3, #10]
	shtpData[11] = 0;							 //Batch Interval
 8001bce:	4b10      	ldr	r3, [pc, #64]	; (8001c10 <BNO080_setFeatureCommand+0xa0>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	72da      	strb	r2, [r3, #11]
	shtpData[12] = 0;							 //Batch Interval (MSB)
 8001bd4:	4b0e      	ldr	r3, [pc, #56]	; (8001c10 <BNO080_setFeatureCommand+0xa0>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	731a      	strb	r2, [r3, #12]
	shtpData[13] = (specificConfig >> 0) & 0xFF;	   	 //Sensor-specific config (LSB)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	b2da      	uxtb	r2, r3
 8001bde:	4b0c      	ldr	r3, [pc, #48]	; (8001c10 <BNO080_setFeatureCommand+0xa0>)
 8001be0:	735a      	strb	r2, [r3, #13]
	shtpData[14] = (specificConfig >> 8) & 0xFF;	   	 //Sensor-specific config
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	0a1b      	lsrs	r3, r3, #8
 8001be6:	b2da      	uxtb	r2, r3
 8001be8:	4b09      	ldr	r3, [pc, #36]	; (8001c10 <BNO080_setFeatureCommand+0xa0>)
 8001bea:	739a      	strb	r2, [r3, #14]
	shtpData[15] = (specificConfig >> 16) & 0xFF;	 //Sensor-specific config
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	0c1b      	lsrs	r3, r3, #16
 8001bf0:	b2da      	uxtb	r2, r3
 8001bf2:	4b07      	ldr	r3, [pc, #28]	; (8001c10 <BNO080_setFeatureCommand+0xa0>)
 8001bf4:	73da      	strb	r2, [r3, #15]
	shtpData[16] = (specificConfig >> 24) & 0xFF;	 //Sensor-specific config (MSB)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	0e1b      	lsrs	r3, r3, #24
 8001bfa:	b2da      	uxtb	r2, r3
 8001bfc:	4b04      	ldr	r3, [pc, #16]	; (8001c10 <BNO080_setFeatureCommand+0xa0>)
 8001bfe:	741a      	strb	r2, [r3, #16]

	//Transmit packet on channel 2, 17 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 17);
 8001c00:	2111      	movs	r1, #17
 8001c02:	2002      	movs	r0, #2
 8001c04:	f000 f938 	bl	8001e78 <BNO080_sendPacket>
}
 8001c08:	bf00      	nop
 8001c0a:	3710      	adds	r7, #16
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	20000288 	.word	0x20000288

08001c14 <BNO080_sendCommand>:

//Tell the sensor to do a command
//See 6.3.8 page 41, Command request
//The caller is expected to set P0 through P8 prior to calling
void BNO080_sendCommand(uint8_t command)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	71fb      	strb	r3, [r7, #7]
	shtpData[0] = SHTP_REPORT_COMMAND_REQUEST; //Command Request
 8001c1e:	4b0b      	ldr	r3, [pc, #44]	; (8001c4c <BNO080_sendCommand+0x38>)
 8001c20:	22f2      	movs	r2, #242	; 0xf2
 8001c22:	701a      	strb	r2, [r3, #0]
	shtpData[1] = commandSequenceNumber++;	 //Increments automatically each function call
 8001c24:	4b0a      	ldr	r3, [pc, #40]	; (8001c50 <BNO080_sendCommand+0x3c>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	1c5a      	adds	r2, r3, #1
 8001c2a:	b2d1      	uxtb	r1, r2
 8001c2c:	4a08      	ldr	r2, [pc, #32]	; (8001c50 <BNO080_sendCommand+0x3c>)
 8001c2e:	7011      	strb	r1, [r2, #0]
 8001c30:	4a06      	ldr	r2, [pc, #24]	; (8001c4c <BNO080_sendCommand+0x38>)
 8001c32:	7053      	strb	r3, [r2, #1]
	shtpData[2] = command;					   //Command
 8001c34:	4a05      	ldr	r2, [pc, #20]	; (8001c4c <BNO080_sendCommand+0x38>)
 8001c36:	79fb      	ldrb	r3, [r7, #7]
 8001c38:	7093      	strb	r3, [r2, #2]
	shtpData[9] = 0;
	shtpData[10] = 0;
	shtpData[11] = 0;*/

	//Transmit packet on channel 2, 12 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 12);
 8001c3a:	210c      	movs	r1, #12
 8001c3c:	2002      	movs	r0, #2
 8001c3e:	f000 f91b 	bl	8001e78 <BNO080_sendPacket>
}
 8001c42:	bf00      	nop
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	20000288 	.word	0x20000288
 8001c50:	2000020a 	.word	0x2000020a

08001c54 <BNO080_sendCalibrateCommand>:

//This tells the BNO080 to begin calibrating
//See page 50 of reference manual and the 1000-4044 calibration doc
void BNO080_sendCalibrateCommand(uint8_t thingToCalibrate)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	71fb      	strb	r3, [r7, #7]
	shtpData[8] = 0; //P5 - Reserved
	shtpData[9] = 0; //P6 - Reserved
	shtpData[10] = 0; //P7 - Reserved
	shtpData[11] = 0; //P8 - Reserved*/

	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8001c5e:	2303      	movs	r3, #3
 8001c60:	73fb      	strb	r3, [r7, #15]
 8001c62:	e006      	b.n	8001c72 <BNO080_sendCalibrateCommand+0x1e>
		shtpData[x] = 0;
 8001c64:	7bfb      	ldrb	r3, [r7, #15]
 8001c66:	4a1d      	ldr	r2, [pc, #116]	; (8001cdc <BNO080_sendCalibrateCommand+0x88>)
 8001c68:	2100      	movs	r1, #0
 8001c6a:	54d1      	strb	r1, [r2, r3]
	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8001c6c:	7bfb      	ldrb	r3, [r7, #15]
 8001c6e:	3301      	adds	r3, #1
 8001c70:	73fb      	strb	r3, [r7, #15]
 8001c72:	7bfb      	ldrb	r3, [r7, #15]
 8001c74:	2b0b      	cmp	r3, #11
 8001c76:	d9f5      	bls.n	8001c64 <BNO080_sendCalibrateCommand+0x10>

	if (thingToCalibrate == CALIBRATE_ACCEL)
 8001c78:	79fb      	ldrb	r3, [r7, #7]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d103      	bne.n	8001c86 <BNO080_sendCalibrateCommand+0x32>
		shtpData[3] = 1;
 8001c7e:	4b17      	ldr	r3, [pc, #92]	; (8001cdc <BNO080_sendCalibrateCommand+0x88>)
 8001c80:	2201      	movs	r2, #1
 8001c82:	70da      	strb	r2, [r3, #3]
 8001c84:	e020      	b.n	8001cc8 <BNO080_sendCalibrateCommand+0x74>
	else if (thingToCalibrate == CALIBRATE_GYRO)
 8001c86:	79fb      	ldrb	r3, [r7, #7]
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d103      	bne.n	8001c94 <BNO080_sendCalibrateCommand+0x40>
		shtpData[4] = 1;
 8001c8c:	4b13      	ldr	r3, [pc, #76]	; (8001cdc <BNO080_sendCalibrateCommand+0x88>)
 8001c8e:	2201      	movs	r2, #1
 8001c90:	711a      	strb	r2, [r3, #4]
 8001c92:	e019      	b.n	8001cc8 <BNO080_sendCalibrateCommand+0x74>
	else if (thingToCalibrate == CALIBRATE_MAG)
 8001c94:	79fb      	ldrb	r3, [r7, #7]
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d103      	bne.n	8001ca2 <BNO080_sendCalibrateCommand+0x4e>
		shtpData[5] = 1;
 8001c9a:	4b10      	ldr	r3, [pc, #64]	; (8001cdc <BNO080_sendCalibrateCommand+0x88>)
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	715a      	strb	r2, [r3, #5]
 8001ca0:	e012      	b.n	8001cc8 <BNO080_sendCalibrateCommand+0x74>
	else if (thingToCalibrate == CALIBRATE_PLANAR_ACCEL)
 8001ca2:	79fb      	ldrb	r3, [r7, #7]
 8001ca4:	2b03      	cmp	r3, #3
 8001ca6:	d103      	bne.n	8001cb0 <BNO080_sendCalibrateCommand+0x5c>
		shtpData[7] = 1;
 8001ca8:	4b0c      	ldr	r3, [pc, #48]	; (8001cdc <BNO080_sendCalibrateCommand+0x88>)
 8001caa:	2201      	movs	r2, #1
 8001cac:	71da      	strb	r2, [r3, #7]
 8001cae:	e00b      	b.n	8001cc8 <BNO080_sendCalibrateCommand+0x74>
	else if (thingToCalibrate == CALIBRATE_ACCEL_GYRO_MAG)
 8001cb0:	79fb      	ldrb	r3, [r7, #7]
 8001cb2:	2b04      	cmp	r3, #4
 8001cb4:	d108      	bne.n	8001cc8 <BNO080_sendCalibrateCommand+0x74>
	{
		shtpData[3] = 1;
 8001cb6:	4b09      	ldr	r3, [pc, #36]	; (8001cdc <BNO080_sendCalibrateCommand+0x88>)
 8001cb8:	2201      	movs	r2, #1
 8001cba:	70da      	strb	r2, [r3, #3]
		shtpData[4] = 1;
 8001cbc:	4b07      	ldr	r3, [pc, #28]	; (8001cdc <BNO080_sendCalibrateCommand+0x88>)
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	711a      	strb	r2, [r3, #4]
		shtpData[5] = 1;
 8001cc2:	4b06      	ldr	r3, [pc, #24]	; (8001cdc <BNO080_sendCalibrateCommand+0x88>)
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	715a      	strb	r2, [r3, #5]
	}
	else if (thingToCalibrate == CALIBRATE_STOP)
		; //Do nothing, bytes are set to zero

	//Make the internal calStatus variable non-zero (operation failed) so that user can test while we wait
	calibrationStatus = 1;
 8001cc8:	4b05      	ldr	r3, [pc, #20]	; (8001ce0 <BNO080_sendCalibrateCommand+0x8c>)
 8001cca:	2201      	movs	r2, #1
 8001ccc:	701a      	strb	r2, [r3, #0]

	//Using this shtpData packet, send a command
	BNO080_sendCommand(COMMAND_ME_CALIBRATE);
 8001cce:	2007      	movs	r0, #7
 8001cd0:	f7ff ffa0 	bl	8001c14 <BNO080_sendCommand>
}
 8001cd4:	bf00      	nop
 8001cd6:	3710      	adds	r7, #16
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	20000288 	.word	0x20000288
 8001ce0:	2000030b 	.word	0x2000030b

08001ce4 <BNO080_requestCalibrationStatus>:

//Request ME Calibration Status from BNO080
//See page 51 of reference manual
void BNO080_requestCalibrationStatus()
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
	shtpData[8] = 0; //P5 - Reserved
	shtpData[9] = 0; //P6 - Reserved
	shtpData[10] = 0; //P7 - Reserved
	shtpData[11] = 0; //P8 - Reserved*/

	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8001cea:	2303      	movs	r3, #3
 8001cec:	71fb      	strb	r3, [r7, #7]
 8001cee:	e006      	b.n	8001cfe <BNO080_requestCalibrationStatus+0x1a>
		shtpData[x] = 0;
 8001cf0:	79fb      	ldrb	r3, [r7, #7]
 8001cf2:	4a09      	ldr	r2, [pc, #36]	; (8001d18 <BNO080_requestCalibrationStatus+0x34>)
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	54d1      	strb	r1, [r2, r3]
	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8001cf8:	79fb      	ldrb	r3, [r7, #7]
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	71fb      	strb	r3, [r7, #7]
 8001cfe:	79fb      	ldrb	r3, [r7, #7]
 8001d00:	2b0b      	cmp	r3, #11
 8001d02:	d9f5      	bls.n	8001cf0 <BNO080_requestCalibrationStatus+0xc>

	shtpData[6] = 0x01; //P3 - 0x01 - Subcommand: Get ME Calibration
 8001d04:	4b04      	ldr	r3, [pc, #16]	; (8001d18 <BNO080_requestCalibrationStatus+0x34>)
 8001d06:	2201      	movs	r2, #1
 8001d08:	719a      	strb	r2, [r3, #6]

	//Using this shtpData packet, send a command
	BNO080_sendCommand(COMMAND_ME_CALIBRATE);
 8001d0a:	2007      	movs	r0, #7
 8001d0c:	f7ff ff82 	bl	8001c14 <BNO080_sendCommand>
}
 8001d10:	bf00      	nop
 8001d12:	3708      	adds	r7, #8
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	20000288 	.word	0x20000288

08001d1c <BNO080_saveCalibration>:

//This tells the BNO080 to save the Dynamic Calibration Data (DCD) to flash
//See page 49 of reference manual and the 1000-4044 calibration doc
void BNO080_saveCalibration()
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
	shtpData[8] = 0; //P5 - Reserved
	shtpData[9] = 0; //P6 - Reserved
	shtpData[10] = 0; //P7 - Reserved
	shtpData[11] = 0; //P8 - Reserved*/

	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8001d22:	2303      	movs	r3, #3
 8001d24:	71fb      	strb	r3, [r7, #7]
 8001d26:	e006      	b.n	8001d36 <BNO080_saveCalibration+0x1a>
		shtpData[x] = 0;
 8001d28:	79fb      	ldrb	r3, [r7, #7]
 8001d2a:	4a08      	ldr	r2, [pc, #32]	; (8001d4c <BNO080_saveCalibration+0x30>)
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	54d1      	strb	r1, [r2, r3]
	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8001d30:	79fb      	ldrb	r3, [r7, #7]
 8001d32:	3301      	adds	r3, #1
 8001d34:	71fb      	strb	r3, [r7, #7]
 8001d36:	79fb      	ldrb	r3, [r7, #7]
 8001d38:	2b0b      	cmp	r3, #11
 8001d3a:	d9f5      	bls.n	8001d28 <BNO080_saveCalibration+0xc>

	//Using this shtpData packet, send a command
	BNO080_sendCommand(COMMAND_DCD); //Save DCD command
 8001d3c:	2006      	movs	r0, #6
 8001d3e:	f7ff ff69 	bl	8001c14 <BNO080_sendCommand>
}
 8001d42:	bf00      	nop
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	20000288 	.word	0x20000288

08001d50 <BNO080_waitForSPI>:

//Blocking wait for BNO080 to assert (pull low) the INT pin
//indicating it's ready for comm. Can take more than 104ms
//after a hardware reset
int BNO080_waitForSPI(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 8001d56:	2300      	movs	r3, #0
 8001d58:	607b      	str	r3, [r7, #4]
 8001d5a:	e00c      	b.n	8001d76 <BNO080_waitForSPI+0x26>
	{
		if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 0)
 8001d5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d60:	480b      	ldr	r0, [pc, #44]	; (8001d90 <BNO080_waitForSPI+0x40>)
 8001d62:	f7ff fa92 	bl	800128a <LL_GPIO_IsInputPinSet>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d101      	bne.n	8001d70 <BNO080_waitForSPI+0x20>
		{
			//printf("\nData available\n");
			return (1);
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e00a      	b.n	8001d86 <BNO080_waitForSPI+0x36>
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	3301      	adds	r3, #1
 8001d74:	607b      	str	r3, [r7, #4]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d7c:	d1ee      	bne.n	8001d5c <BNO080_waitForSPI+0xc>
		}
		//printf("SPI Wait %d\n", counter);
	}
	printf("\nData not available\n");
 8001d7e:	4805      	ldr	r0, [pc, #20]	; (8001d94 <BNO080_waitForSPI+0x44>)
 8001d80:	f00a fba6 	bl	800c4d0 <puts>
	return (0);
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	40020800 	.word	0x40020800
 8001d94:	0800f2a0 	.word	0x0800f2a0

08001d98 <BNO080_receivePacket>:


//Check to see if there is any new data available
//Read the contents of the incoming packet into the shtpData array
int BNO080_receivePacket(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0
	uint8_t incoming;

	if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 1)
 8001d9e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001da2:	4831      	ldr	r0, [pc, #196]	; (8001e68 <BNO080_receivePacket+0xd0>)
 8001da4:	f7ff fa71 	bl	800128a <LL_GPIO_IsInputPinSet>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d101      	bne.n	8001db2 <BNO080_receivePacket+0x1a>
		return (0); //Data is not available
 8001dae:	2300      	movs	r3, #0
 8001db0:	e056      	b.n	8001e60 <BNO080_receivePacket+0xc8>

	//Old way: if (BNO080_waitForSPI() == 0) return (0); //Something went wrong

	//Get first four bytes to find out how much data we need to read

	CHIP_SELECT(BNO080);
 8001db2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001db6:	482d      	ldr	r0, [pc, #180]	; (8001e6c <BNO080_receivePacket+0xd4>)
 8001db8:	f7ff fa8a 	bl	80012d0 <LL_GPIO_ResetOutputPin>

	//Get the first four bytes, aka the packet header
	uint8_t packetLSB = SPI2_SendByte(0);
 8001dbc:	2000      	movs	r0, #0
 8001dbe:	f7ff fbf5 	bl	80015ac <SPI2_SendByte>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	737b      	strb	r3, [r7, #13]
	uint8_t packetMSB = SPI2_SendByte(0);
 8001dc6:	2000      	movs	r0, #0
 8001dc8:	f7ff fbf0 	bl	80015ac <SPI2_SendByte>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	733b      	strb	r3, [r7, #12]
	uint8_t channelNumber = SPI2_SendByte(0);
 8001dd0:	2000      	movs	r0, #0
 8001dd2:	f7ff fbeb 	bl	80015ac <SPI2_SendByte>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	72fb      	strb	r3, [r7, #11]
	uint8_t sequenceNumber = SPI2_SendByte(0); //Not sure if we need to store this or not
 8001dda:	2000      	movs	r0, #0
 8001ddc:	f7ff fbe6 	bl	80015ac <SPI2_SendByte>
 8001de0:	4603      	mov	r3, r0
 8001de2:	72bb      	strb	r3, [r7, #10]

	//Store the header info
	shtpHeader[0] = packetLSB;
 8001de4:	4a22      	ldr	r2, [pc, #136]	; (8001e70 <BNO080_receivePacket+0xd8>)
 8001de6:	7b7b      	ldrb	r3, [r7, #13]
 8001de8:	7013      	strb	r3, [r2, #0]
	shtpHeader[1] = packetMSB;
 8001dea:	4a21      	ldr	r2, [pc, #132]	; (8001e70 <BNO080_receivePacket+0xd8>)
 8001dec:	7b3b      	ldrb	r3, [r7, #12]
 8001dee:	7053      	strb	r3, [r2, #1]
	shtpHeader[2] = channelNumber;
 8001df0:	4a1f      	ldr	r2, [pc, #124]	; (8001e70 <BNO080_receivePacket+0xd8>)
 8001df2:	7afb      	ldrb	r3, [r7, #11]
 8001df4:	7093      	strb	r3, [r2, #2]
	shtpHeader[3] = sequenceNumber;
 8001df6:	4a1e      	ldr	r2, [pc, #120]	; (8001e70 <BNO080_receivePacket+0xd8>)
 8001df8:	7abb      	ldrb	r3, [r7, #10]
 8001dfa:	70d3      	strb	r3, [r2, #3]

	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)packetMSB << 8 | packetLSB);
 8001dfc:	7b3b      	ldrb	r3, [r7, #12]
 8001dfe:	021b      	lsls	r3, r3, #8
 8001e00:	b21a      	sxth	r2, r3
 8001e02:	7b7b      	ldrb	r3, [r7, #13]
 8001e04:	b21b      	sxth	r3, r3
 8001e06:	4313      	orrs	r3, r2
 8001e08:	813b      	strh	r3, [r7, #8]
	dataLength &= 0x7fff; //Clear the MSbit.
 8001e0a:	893b      	ldrh	r3, [r7, #8]
 8001e0c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001e10:	813b      	strh	r3, [r7, #8]
	//This bit indicates if this package is a continuation of the last. Ignore it for now.
	//TODO catch this as an error and exit
	if (dataLength == 0)
 8001e12:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d101      	bne.n	8001e1e <BNO080_receivePacket+0x86>
	{
		//Packet is empty
		return (0); //All done
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	e020      	b.n	8001e60 <BNO080_receivePacket+0xc8>
	}
	dataLength -= 4; //Remove the header bytes from the data count
 8001e1e:	893b      	ldrh	r3, [r7, #8]
 8001e20:	3b04      	subs	r3, #4
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	813b      	strh	r3, [r7, #8]

	//printf("length: %d\n", dataLength);

	//Read incoming data into the shtpData array
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 8001e26:	2300      	movs	r3, #0
 8001e28:	81fb      	strh	r3, [r7, #14]
 8001e2a:	e00e      	b.n	8001e4a <BNO080_receivePacket+0xb2>
	{
		incoming = SPI2_SendByte(0xFF);
 8001e2c:	20ff      	movs	r0, #255	; 0xff
 8001e2e:	f7ff fbbd 	bl	80015ac <SPI2_SendByte>
 8001e32:	4603      	mov	r3, r0
 8001e34:	71fb      	strb	r3, [r7, #7]
		//printf("%d ", incoming);
		if (dataSpot < MAX_PACKET_SIZE)	//BNO080 can respond with upto 270 bytes, avoid overflow
 8001e36:	89fb      	ldrh	r3, [r7, #14]
 8001e38:	2b7f      	cmp	r3, #127	; 0x7f
 8001e3a:	d803      	bhi.n	8001e44 <BNO080_receivePacket+0xac>
			shtpData[dataSpot] = incoming; //Store data into the shtpData array
 8001e3c:	89fb      	ldrh	r3, [r7, #14]
 8001e3e:	490d      	ldr	r1, [pc, #52]	; (8001e74 <BNO080_receivePacket+0xdc>)
 8001e40:	79fa      	ldrb	r2, [r7, #7]
 8001e42:	54ca      	strb	r2, [r1, r3]
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 8001e44:	89fb      	ldrh	r3, [r7, #14]
 8001e46:	3301      	adds	r3, #1
 8001e48:	81fb      	strh	r3, [r7, #14]
 8001e4a:	89fa      	ldrh	r2, [r7, #14]
 8001e4c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	dbeb      	blt.n	8001e2c <BNO080_receivePacket+0x94>
	}
	//printf("\n");

	CHIP_DESELECT(BNO080); //Release BNO080
 8001e54:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e58:	4804      	ldr	r0, [pc, #16]	; (8001e6c <BNO080_receivePacket+0xd4>)
 8001e5a:	f7ff fa2b 	bl	80012b4 <LL_GPIO_SetOutputPin>
	return (1); //We're done!
 8001e5e:	2301      	movs	r3, #1
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3710      	adds	r7, #16
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	40020800 	.word	0x40020800
 8001e6c:	40020400 	.word	0x40020400
 8001e70:	20000234 	.word	0x20000234
 8001e74:	20000288 	.word	0x20000288

08001e78 <BNO080_sendPacket>:

//Given the data packet, send the header then the data
//Returns false if sensor does not ACK
//TODO - Arduino has a max 32 byte send. Break sending into multi packets if needed.
int BNO080_sendPacket(uint8_t channelNumber, uint8_t dataLength)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	4603      	mov	r3, r0
 8001e80:	460a      	mov	r2, r1
 8001e82:	71fb      	strb	r3, [r7, #7]
 8001e84:	4613      	mov	r3, r2
 8001e86:	71bb      	strb	r3, [r7, #6]
	uint8_t packetLength = dataLength + 4; //Add four bytes for the header
 8001e88:	79bb      	ldrb	r3, [r7, #6]
 8001e8a:	3304      	adds	r3, #4
 8001e8c:	73bb      	strb	r3, [r7, #14]

	//Wait for BNO080 to indicate it is available for communication
	if (BNO080_waitForSPI() == 0)
 8001e8e:	f7ff ff5f 	bl	8001d50 <BNO080_waitForSPI>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d101      	bne.n	8001e9c <BNO080_sendPacket+0x24>
		return (0); //Data is not available
 8001e98:	2300      	movs	r3, #0
 8001e9a:	e032      	b.n	8001f02 <BNO080_sendPacket+0x8a>

	//BNO080 has max CLK of 3MHz, MSB first,
	//The BNO080 uses CPOL = 1 and CPHA = 1. This is mode3
	CHIP_SELECT(BNO080);
 8001e9c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ea0:	481a      	ldr	r0, [pc, #104]	; (8001f0c <BNO080_sendPacket+0x94>)
 8001ea2:	f7ff fa15 	bl	80012d0 <LL_GPIO_ResetOutputPin>

	//Send the 4 byte packet header
	SPI2_SendByte(packetLength & 0xFF);			//Packet length LSB
 8001ea6:	7bbb      	ldrb	r3, [r7, #14]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7ff fb7f 	bl	80015ac <SPI2_SendByte>
	SPI2_SendByte(packetLength >> 8);				//Packet length MSB
 8001eae:	7bbb      	ldrb	r3, [r7, #14]
 8001eb0:	121b      	asrs	r3, r3, #8
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7ff fb79 	bl	80015ac <SPI2_SendByte>
	SPI2_SendByte(channelNumber);					//Channel number
 8001eba:	79fb      	ldrb	r3, [r7, #7]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7ff fb75 	bl	80015ac <SPI2_SendByte>
	SPI2_SendByte(sequenceNumber[channelNumber]++); 	//Send the sequence number, increments with each packet sent, different counter for each channel
 8001ec2:	79fb      	ldrb	r3, [r7, #7]
 8001ec4:	4a12      	ldr	r2, [pc, #72]	; (8001f10 <BNO080_sendPacket+0x98>)
 8001ec6:	5cd2      	ldrb	r2, [r2, r3]
 8001ec8:	1c51      	adds	r1, r2, #1
 8001eca:	b2c8      	uxtb	r0, r1
 8001ecc:	4910      	ldr	r1, [pc, #64]	; (8001f10 <BNO080_sendPacket+0x98>)
 8001ece:	54c8      	strb	r0, [r1, r3]
 8001ed0:	4610      	mov	r0, r2
 8001ed2:	f7ff fb6b 	bl	80015ac <SPI2_SendByte>

	//Send the user's data packet
	for (uint8_t i = 0; i < dataLength; i++)
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	73fb      	strb	r3, [r7, #15]
 8001eda:	e008      	b.n	8001eee <BNO080_sendPacket+0x76>
	{
		SPI2_SendByte(shtpData[i]);
 8001edc:	7bfb      	ldrb	r3, [r7, #15]
 8001ede:	4a0d      	ldr	r2, [pc, #52]	; (8001f14 <BNO080_sendPacket+0x9c>)
 8001ee0:	5cd3      	ldrb	r3, [r2, r3]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7ff fb62 	bl	80015ac <SPI2_SendByte>
	for (uint8_t i = 0; i < dataLength; i++)
 8001ee8:	7bfb      	ldrb	r3, [r7, #15]
 8001eea:	3301      	adds	r3, #1
 8001eec:	73fb      	strb	r3, [r7, #15]
 8001eee:	7bfa      	ldrb	r2, [r7, #15]
 8001ef0:	79bb      	ldrb	r3, [r7, #6]
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d3f2      	bcc.n	8001edc <BNO080_sendPacket+0x64>
	}

	CHIP_DESELECT(BNO080);
 8001ef6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001efa:	4804      	ldr	r0, [pc, #16]	; (8001f0c <BNO080_sendPacket+0x94>)
 8001efc:	f7ff f9da 	bl	80012b4 <LL_GPIO_SetOutputPin>

	return (1);
 8001f00:	2301      	movs	r3, #1
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3710      	adds	r7, #16
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	40020400 	.word	0x40020400
 8001f10:	20000204 	.word	0x20000204
 8001f14:	20000288 	.word	0x20000288

08001f18 <iBus_Check_CHECKSUM>:

#include "FS_iA6B.h"

FSiA6B_iBus iBus;

unsigned char iBus_Check_CHECKSUM(unsigned char *data, unsigned char len) {
 8001f18:	b480      	push	{r7}
 8001f1a:	b085      	sub	sp, #20
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	460b      	mov	r3, r1
 8001f22:	70fb      	strb	r3, [r7, #3]

	unsigned short checksum = 0xffff;
 8001f24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f28:	81fb      	strh	r3, [r7, #14]

	for (int i = 0; i < len - 2; i++) {
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	60bb      	str	r3, [r7, #8]
 8001f2e:	e00a      	b.n	8001f46 <iBus_Check_CHECKSUM+0x2e>
		checksum = checksum - data[i];
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	4413      	add	r3, r2
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	89fa      	ldrh	r2, [r7, #14]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	81fb      	strh	r3, [r7, #14]
	for (int i = 0; i < len - 2; i++) {
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	3301      	adds	r3, #1
 8001f44:	60bb      	str	r3, [r7, #8]
 8001f46:	78fb      	ldrb	r3, [r7, #3]
 8001f48:	3b02      	subs	r3, #2
 8001f4a:	68ba      	ldr	r2, [r7, #8]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	dbef      	blt.n	8001f30 <iBus_Check_CHECKSUM+0x18>
	}

	return ((checksum & 0x00ff) == data[30]) && ((checksum >> 8) == data[31]);
 8001f50:	89fb      	ldrh	r3, [r7, #14]
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	321e      	adds	r2, #30
 8001f58:	7812      	ldrb	r2, [r2, #0]
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d10a      	bne.n	8001f74 <iBus_Check_CHECKSUM+0x5c>
 8001f5e:	89fb      	ldrh	r3, [r7, #14]
 8001f60:	0a1b      	lsrs	r3, r3, #8
 8001f62:	b29a      	uxth	r2, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	331f      	adds	r3, #31
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d101      	bne.n	8001f74 <iBus_Check_CHECKSUM+0x5c>
 8001f70:	2301      	movs	r3, #1
 8001f72:	e000      	b.n	8001f76 <iBus_Check_CHECKSUM+0x5e>
 8001f74:	2300      	movs	r3, #0
 8001f76:	b2db      	uxtb	r3, r3
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3714      	adds	r7, #20
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <iBus_Parsing>:

void iBus_Parsing(unsigned char *data, FSiA6B_iBus *iBus) {
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	6039      	str	r1, [r7, #0]
	iBus->RH = (data[2] | data[3] << 8) & 0x0fff;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	3302      	adds	r3, #2
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	b21a      	sxth	r2, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	3303      	adds	r3, #3
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	021b      	lsls	r3, r3, #8
 8001f9e:	b21b      	sxth	r3, r3
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	b21b      	sxth	r3, r3
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001faa:	b29a      	uxth	r2, r3
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	801a      	strh	r2, [r3, #0]
	iBus->RV = (data[4] | data[5] << 8) & 0x0fff;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	3304      	adds	r3, #4
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	b21a      	sxth	r2, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	3305      	adds	r3, #5
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	021b      	lsls	r3, r3, #8
 8001fc0:	b21b      	sxth	r3, r3
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	b21b      	sxth	r3, r3
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fcc:	b29a      	uxth	r2, r3
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	805a      	strh	r2, [r3, #2]
	iBus->LV = (data[6] | data[7] << 8) & 0x0fff;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	3306      	adds	r3, #6
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	b21a      	sxth	r2, r3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	3307      	adds	r3, #7
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	021b      	lsls	r3, r3, #8
 8001fe2:	b21b      	sxth	r3, r3
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	b21b      	sxth	r3, r3
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fee:	b29a      	uxth	r2, r3
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	809a      	strh	r2, [r3, #4]
	iBus->LH = (data[8] | data[9] << 8) & 0x0fff;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	3308      	adds	r3, #8
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	b21a      	sxth	r2, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	3309      	adds	r3, #9
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	021b      	lsls	r3, r3, #8
 8002004:	b21b      	sxth	r3, r3
 8002006:	4313      	orrs	r3, r2
 8002008:	b21b      	sxth	r3, r3
 800200a:	b29b      	uxth	r3, r3
 800200c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002010:	b29a      	uxth	r2, r3
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	80da      	strh	r2, [r3, #6]
	iBus->SwA = (data[10] | data[11] << 8) & 0x0fff;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	330a      	adds	r3, #10
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	b21a      	sxth	r2, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	330b      	adds	r3, #11
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	021b      	lsls	r3, r3, #8
 8002026:	b21b      	sxth	r3, r3
 8002028:	4313      	orrs	r3, r2
 800202a:	b21b      	sxth	r3, r3
 800202c:	b29b      	uxth	r3, r3
 800202e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002032:	b29a      	uxth	r2, r3
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	811a      	strh	r2, [r3, #8]
	iBus->SwC = (data[12] | data[13] << 8) & 0x0fff;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	330c      	adds	r3, #12
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	b21a      	sxth	r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	330d      	adds	r3, #13
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	021b      	lsls	r3, r3, #8
 8002048:	b21b      	sxth	r3, r3
 800204a:	4313      	orrs	r3, r2
 800204c:	b21b      	sxth	r3, r3
 800204e:	b29b      	uxth	r3, r3
 8002050:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002054:	b29a      	uxth	r2, r3
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	819a      	strh	r2, [r3, #12]

#define _USE_FS_I6
#ifdef _USE_FS_I6
	iBus->FailSafe = (data[13] >> 4);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	330d      	adds	r3, #13
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	091b      	lsrs	r3, r3, #4
 8002062:	b2db      	uxtb	r3, r3
 8002064:	b29a      	uxth	r2, r3
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	829a      	strh	r2, [r3, #20]

#ifdef _USE_FS_I6X
	iBus->SwD = (data[14] | data[15] << 8) & 0x0fff;
	iBus->FailSafe = iBus -> SwD == 1500;
#endif
}
 800206a:	bf00      	nop
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr

08002076 <iBus_isActiveFailSafe>:

unsigned char iBus_isActiveFailSafe(FSiA6B_iBus *iBus) {
 8002076:	b480      	push	{r7}
 8002078:	b083      	sub	sp, #12
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
	//1: Not Failsafe mode, 0: Failsafe mode
	return iBus -> FailSafe != 0;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	8a9b      	ldrh	r3, [r3, #20]
 8002082:	2b00      	cmp	r3, #0
 8002084:	bf14      	ite	ne
 8002086:	2301      	movne	r3, #1
 8002088:	2300      	moveq	r3, #0
 800208a:	b2db      	uxtb	r3, r3
}
 800208c:	4618      	mov	r0, r3
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr

08002098 <LL_SPI_Enable>:
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	601a      	str	r2, [r3, #0]
}
 80020ac:	bf00      	nop
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <LL_SPI_SetStandard>:
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f023 0210 	bic.w	r2, r3, #16
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	431a      	orrs	r2, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	605a      	str	r2, [r3, #4]
}
 80020d2:	bf00      	nop
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr

080020de <LL_SPI_IsActiveFlag_RXNE>:
{
 80020de:	b480      	push	{r7}
 80020e0:	b083      	sub	sp, #12
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d101      	bne.n	80020f6 <LL_SPI_IsActiveFlag_RXNE+0x18>
 80020f2:	2301      	movs	r3, #1
 80020f4:	e000      	b.n	80020f8 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 80020f6:	2300      	movs	r3, #0
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <LL_SPI_IsActiveFlag_TXE>:
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	f003 0302 	and.w	r3, r3, #2
 8002114:	2b02      	cmp	r3, #2
 8002116:	d101      	bne.n	800211c <LL_SPI_IsActiveFlag_TXE+0x18>
 8002118:	2301      	movs	r3, #1
 800211a:	e000      	b.n	800211e <LL_SPI_IsActiveFlag_TXE+0x1a>
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	370c      	adds	r7, #12
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr

0800212a <LL_SPI_ReceiveData8>:
{
 800212a:	b480      	push	{r7}
 800212c:	b083      	sub	sp, #12
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_REG(SPIx->DR));
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	b2db      	uxtb	r3, r3
}
 8002138:	4618      	mov	r0, r3
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <LL_SPI_TransmitData8>:
{
 8002144:	b480      	push	{r7}
 8002146:	b085      	sub	sp, #20
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	460b      	mov	r3, r1
 800214e:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	330c      	adds	r3, #12
 8002154:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	78fa      	ldrb	r2, [r7, #3]
 800215a:	701a      	strb	r2, [r3, #0]
}
 800215c:	bf00      	nop
 800215e:	3714      	adds	r7, #20
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <LL_GPIO_IsInputPinSet>:
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	691a      	ldr	r2, [r3, #16]
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	4013      	ands	r3, r2
 800217a:	683a      	ldr	r2, [r7, #0]
 800217c:	429a      	cmp	r2, r3
 800217e:	bf0c      	ite	eq
 8002180:	2301      	moveq	r3, #1
 8002182:	2300      	movne	r3, #0
 8002184:	b2db      	uxtb	r3, r3
}
 8002186:	4618      	mov	r0, r3
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr

08002192 <LL_GPIO_SetOutputPin>:
{
 8002192:	b480      	push	{r7}
 8002194:	b083      	sub	sp, #12
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
 800219a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	683a      	ldr	r2, [r7, #0]
 80021a0:	619a      	str	r2, [r3, #24]
}
 80021a2:	bf00      	nop
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr

080021ae <LL_GPIO_ResetOutputPin>:
{
 80021ae:	b480      	push	{r7}
 80021b0:	b083      	sub	sp, #12
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
 80021b6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	041a      	lsls	r2, r3, #16
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	619a      	str	r2, [r3, #24]
}
 80021c0:	bf00      	nop
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <LL_AHB1_GRP1_EnableClock>:
{
 80021cc:	b480      	push	{r7}
 80021ce:	b085      	sub	sp, #20
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80021d4:	4b08      	ldr	r3, [pc, #32]	; (80021f8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80021d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021d8:	4907      	ldr	r1, [pc, #28]	; (80021f8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4313      	orrs	r3, r2
 80021de:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80021e0:	4b05      	ldr	r3, [pc, #20]	; (80021f8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80021e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	4013      	ands	r3, r2
 80021e8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80021ea:	68fb      	ldr	r3, [r7, #12]
}
 80021ec:	bf00      	nop
 80021ee:	3714      	adds	r7, #20
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr
 80021f8:	40023800 	.word	0x40023800

080021fc <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b085      	sub	sp, #20
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002204:	4b08      	ldr	r3, [pc, #32]	; (8002228 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002206:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002208:	4907      	ldr	r1, [pc, #28]	; (8002228 <LL_APB2_GRP1_EnableClock+0x2c>)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4313      	orrs	r3, r2
 800220e:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002210:	4b05      	ldr	r3, [pc, #20]	; (8002228 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002212:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4013      	ands	r3, r2
 8002218:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800221a:	68fb      	ldr	r3, [r7, #12]
}
 800221c:	bf00      	nop
 800221e:	3714      	adds	r7, #20
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr
 8002228:	40023800 	.word	0x40023800

0800222c <ICM20602_GPIO_SPI_Initialization>:
Struct_ICM20602 ICM20602;
int32_t gyro_x_offset, gyro_y_offset, gyro_z_offset; // To remove offset


void ICM20602_GPIO_SPI_Initialization(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b090      	sub	sp, #64	; 0x40
 8002230:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8002232:	f107 0318 	add.w	r3, r7, #24
 8002236:	2228      	movs	r2, #40	; 0x28
 8002238:	2100      	movs	r1, #0
 800223a:	4618      	mov	r0, r3
 800223c:	f009 fc70 	bl	800bb20 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002240:	463b      	mov	r3, r7
 8002242:	2200      	movs	r2, #0
 8002244:	601a      	str	r2, [r3, #0]
 8002246:	605a      	str	r2, [r3, #4]
 8002248:	609a      	str	r2, [r3, #8]
 800224a:	60da      	str	r2, [r3, #12]
 800224c:	611a      	str	r2, [r3, #16]
 800224e:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8002250:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002254:	f7ff ffd2 	bl	80021fc <LL_APB2_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002258:	2001      	movs	r0, #1
 800225a:	f7ff ffb7 	bl	80021cc <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800225e:	2004      	movs	r0, #4
 8002260:	f7ff ffb4 	bl	80021cc <LL_AHB1_GRP1_EnableClock>
	/**SPI1 GPIO Configuration
	PA5   ------> SPI1_SCK
	PA6   ------> SPI1_MISO
	PA7   ------> SPI1_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8002264:	23e0      	movs	r3, #224	; 0xe0
 8002266:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002268:	2302      	movs	r3, #2
 800226a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800226c:	2303      	movs	r3, #3
 800226e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002270:	2300      	movs	r3, #0
 8002272:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002274:	2300      	movs	r3, #0
 8002276:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8002278:	2305      	movs	r3, #5
 800227a:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800227c:	463b      	mov	r3, r7
 800227e:	4619      	mov	r1, r3
 8002280:	4825      	ldr	r0, [pc, #148]	; (8002318 <ICM20602_GPIO_SPI_Initialization+0xec>)
 8002282:	f008 fcb8 	bl	800abf6 <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8002286:	2300      	movs	r3, #0
 8002288:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800228a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800228e:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8002290:	2300      	movs	r3, #0
 8002292:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8002294:	2302      	movs	r3, #2
 8002296:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8002298:	2301      	movs	r3, #1
 800229a:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800229c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8; //ICM-20602 MAX SPI CLK is 10MHz. But DIV2(42MHz) is available.
 80022a2:	2310      	movs	r3, #16
 80022a4:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80022a6:	2300      	movs	r3, #0
 80022a8:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80022aa:	2300      	movs	r3, #0
 80022ac:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 80022ae:	230a      	movs	r3, #10
 80022b0:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(ICM20602_SPI_CHANNEL, &SPI_InitStruct);
 80022b2:	f107 0318 	add.w	r3, r7, #24
 80022b6:	4619      	mov	r1, r3
 80022b8:	4818      	ldr	r0, [pc, #96]	; (800231c <ICM20602_GPIO_SPI_Initialization+0xf0>)
 80022ba:	f008 fe6a 	bl	800af92 <LL_SPI_Init>
	LL_SPI_SetStandard(ICM20602_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 80022be:	2100      	movs	r1, #0
 80022c0:	4816      	ldr	r0, [pc, #88]	; (800231c <ICM20602_GPIO_SPI_Initialization+0xf0>)
 80022c2:	f7ff fef9 	bl	80020b8 <LL_SPI_SetStandard>
	/**ICM20602 GPIO Control Configuration
	 * PC4  ------> ICM20602_SPI_CS_PIN (output)
	 * PC5  ------> ICM20602_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(ICM20602_SPI_CS_PORT, ICM20602_SPI_CS_PIN);
 80022c6:	2110      	movs	r1, #16
 80022c8:	4815      	ldr	r0, [pc, #84]	; (8002320 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 80022ca:	f7ff ff70 	bl	80021ae <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_SPI_CS_PIN;
 80022ce:	2310      	movs	r3, #16
 80022d0:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80022d2:	2301      	movs	r3, #1
 80022d4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80022d6:	2303      	movs	r3, #3
 80022d8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80022da:	2300      	movs	r3, #0
 80022dc:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80022de:	2300      	movs	r3, #0
 80022e0:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_SPI_CS_PORT, &GPIO_InitStruct);
 80022e2:	463b      	mov	r3, r7
 80022e4:	4619      	mov	r1, r3
 80022e6:	480e      	ldr	r0, [pc, #56]	; (8002320 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 80022e8:	f008 fc85 	bl	800abf6 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_INT_PIN;
 80022ec:	2320      	movs	r3, #32
 80022ee:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80022f0:	2300      	movs	r3, #0
 80022f2:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80022f4:	2301      	movs	r3, #1
 80022f6:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_INT_PORT, &GPIO_InitStruct);
 80022f8:	463b      	mov	r3, r7
 80022fa:	4619      	mov	r1, r3
 80022fc:	4808      	ldr	r0, [pc, #32]	; (8002320 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 80022fe:	f008 fc7a 	bl	800abf6 <LL_GPIO_Init>

	LL_SPI_Enable(ICM20602_SPI_CHANNEL);
 8002302:	4806      	ldr	r0, [pc, #24]	; (800231c <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8002304:	f7ff fec8 	bl	8002098 <LL_SPI_Enable>

	CHIP_DESELECT(ICM20602);
 8002308:	2110      	movs	r1, #16
 800230a:	4805      	ldr	r0, [pc, #20]	; (8002320 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 800230c:	f7ff ff41 	bl	8002192 <LL_GPIO_SetOutputPin>
}
 8002310:	bf00      	nop
 8002312:	3740      	adds	r7, #64	; 0x40
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	40020000 	.word	0x40020000
 800231c:	40013000 	.word	0x40013000
 8002320:	40020800 	.word	0x40020800

08002324 <SPI1_SendByte>:


unsigned char SPI1_SendByte(unsigned char data)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	4603      	mov	r3, r0
 800232c:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(ICM20602_SPI_CHANNEL)==RESET);
 800232e:	bf00      	nop
 8002330:	480c      	ldr	r0, [pc, #48]	; (8002364 <SPI1_SendByte+0x40>)
 8002332:	f7ff fee7 	bl	8002104 <LL_SPI_IsActiveFlag_TXE>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d0f9      	beq.n	8002330 <SPI1_SendByte+0xc>
	LL_SPI_TransmitData8(ICM20602_SPI_CHANNEL, data);
 800233c:	79fb      	ldrb	r3, [r7, #7]
 800233e:	4619      	mov	r1, r3
 8002340:	4808      	ldr	r0, [pc, #32]	; (8002364 <SPI1_SendByte+0x40>)
 8002342:	f7ff feff 	bl	8002144 <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(ICM20602_SPI_CHANNEL)==RESET);
 8002346:	bf00      	nop
 8002348:	4806      	ldr	r0, [pc, #24]	; (8002364 <SPI1_SendByte+0x40>)
 800234a:	f7ff fec8 	bl	80020de <LL_SPI_IsActiveFlag_RXNE>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d0f9      	beq.n	8002348 <SPI1_SendByte+0x24>
	return LL_SPI_ReceiveData8(ICM20602_SPI_CHANNEL);
 8002354:	4803      	ldr	r0, [pc, #12]	; (8002364 <SPI1_SendByte+0x40>)
 8002356:	f7ff fee8 	bl	800212a <LL_SPI_ReceiveData8>
 800235a:	4603      	mov	r3, r0
}
 800235c:	4618      	mov	r0, r3
 800235e:	3708      	adds	r7, #8
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	40013000 	.word	0x40013000

08002368 <ICM20602_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t ICM20602_Readbyte(uint8_t reg_addr)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	4603      	mov	r3, r0
 8002370:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(ICM20602);
 8002372:	2110      	movs	r1, #16
 8002374:	480b      	ldr	r0, [pc, #44]	; (80023a4 <ICM20602_Readbyte+0x3c>)
 8002376:	f7ff ff1a 	bl	80021ae <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 800237a:	79fb      	ldrb	r3, [r7, #7]
 800237c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002380:	b2db      	uxtb	r3, r3
 8002382:	4618      	mov	r0, r3
 8002384:	f7ff ffce 	bl	8002324 <SPI1_SendByte>
	val = SPI1_SendByte(0x00); //Send DUMMY to read data
 8002388:	2000      	movs	r0, #0
 800238a:	f7ff ffcb 	bl	8002324 <SPI1_SendByte>
 800238e:	4603      	mov	r3, r0
 8002390:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(ICM20602);
 8002392:	2110      	movs	r1, #16
 8002394:	4803      	ldr	r0, [pc, #12]	; (80023a4 <ICM20602_Readbyte+0x3c>)
 8002396:	f7ff fefc 	bl	8002192 <LL_GPIO_SetOutputPin>
	
	return val;
 800239a:	7bfb      	ldrb	r3, [r7, #15]
}
 800239c:	4618      	mov	r0, r3
 800239e:	3710      	adds	r7, #16
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	40020800 	.word	0x40020800

080023a8 <ICM20602_Readbytes>:

void ICM20602_Readbytes(unsigned char reg_addr, unsigned char len, unsigned char* data)
{
 80023a8:	b590      	push	{r4, r7, lr}
 80023aa:	b085      	sub	sp, #20
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	4603      	mov	r3, r0
 80023b0:	603a      	str	r2, [r7, #0]
 80023b2:	71fb      	strb	r3, [r7, #7]
 80023b4:	460b      	mov	r3, r1
 80023b6:	71bb      	strb	r3, [r7, #6]
	unsigned int i = 0;
 80023b8:	2300      	movs	r3, #0
 80023ba:	60fb      	str	r3, [r7, #12]

	CHIP_SELECT(ICM20602);
 80023bc:	2110      	movs	r1, #16
 80023be:	4810      	ldr	r0, [pc, #64]	; (8002400 <ICM20602_Readbytes+0x58>)
 80023c0:	f7ff fef5 	bl	80021ae <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 80023c4:	79fb      	ldrb	r3, [r7, #7]
 80023c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7ff ffa9 	bl	8002324 <SPI1_SendByte>
	while(i < len)
 80023d2:	e009      	b.n	80023e8 <ICM20602_Readbytes+0x40>
	{
		data[i++] = SPI1_SendByte(0x00); //Send DUMMY to read data
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	1c5a      	adds	r2, r3, #1
 80023d8:	60fa      	str	r2, [r7, #12]
 80023da:	683a      	ldr	r2, [r7, #0]
 80023dc:	18d4      	adds	r4, r2, r3
 80023de:	2000      	movs	r0, #0
 80023e0:	f7ff ffa0 	bl	8002324 <SPI1_SendByte>
 80023e4:	4603      	mov	r3, r0
 80023e6:	7023      	strb	r3, [r4, #0]
	while(i < len)
 80023e8:	79bb      	ldrb	r3, [r7, #6]
 80023ea:	68fa      	ldr	r2, [r7, #12]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d3f1      	bcc.n	80023d4 <ICM20602_Readbytes+0x2c>
	}
	CHIP_DESELECT(ICM20602);
 80023f0:	2110      	movs	r1, #16
 80023f2:	4803      	ldr	r0, [pc, #12]	; (8002400 <ICM20602_Readbytes+0x58>)
 80023f4:	f7ff fecd 	bl	8002192 <LL_GPIO_SetOutputPin>
}
 80023f8:	bf00      	nop
 80023fa:	3714      	adds	r7, #20
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd90      	pop	{r4, r7, pc}
 8002400:	40020800 	.word	0x40020800

08002404 <ICM20602_Writebyte>:

void ICM20602_Writebyte(uint8_t reg_addr, uint8_t val)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	4603      	mov	r3, r0
 800240c:	460a      	mov	r2, r1
 800240e:	71fb      	strb	r3, [r7, #7]
 8002410:	4613      	mov	r3, r2
 8002412:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(ICM20602);
 8002414:	2110      	movs	r1, #16
 8002416:	480b      	ldr	r0, [pc, #44]	; (8002444 <ICM20602_Writebyte+0x40>)
 8002418:	f7ff fec9 	bl	80021ae <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 800241c:	79fb      	ldrb	r3, [r7, #7]
 800241e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002422:	b2db      	uxtb	r3, r3
 8002424:	4618      	mov	r0, r3
 8002426:	f7ff ff7d 	bl	8002324 <SPI1_SendByte>
	SPI1_SendByte(val); //Send Data to write
 800242a:	79bb      	ldrb	r3, [r7, #6]
 800242c:	4618      	mov	r0, r3
 800242e:	f7ff ff79 	bl	8002324 <SPI1_SendByte>
	CHIP_DESELECT(ICM20602);
 8002432:	2110      	movs	r1, #16
 8002434:	4803      	ldr	r0, [pc, #12]	; (8002444 <ICM20602_Writebyte+0x40>)
 8002436:	f7ff feac 	bl	8002192 <LL_GPIO_SetOutputPin>
}
 800243a:	bf00      	nop
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	40020800 	.word	0x40020800

08002448 <ICM20602_Initialization>:
	CHIP_DESELECT(ICM20602);
}


int ICM20602_Initialization(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 800244e:	2300      	movs	r3, #0
 8002450:	73fb      	strb	r3, [r7, #15]
	int16_t accel_raw_data[3] = {0};  // To remove offset
 8002452:	f107 0308 	add.w	r3, r7, #8
 8002456:	2200      	movs	r2, #0
 8002458:	601a      	str	r2, [r3, #0]
 800245a:	809a      	strh	r2, [r3, #4]
	int16_t gyro_raw_data[3] = {0};   // To remove offset
 800245c:	463b      	mov	r3, r7
 800245e:	2200      	movs	r2, #0
 8002460:	601a      	str	r2, [r3, #0]
 8002462:	809a      	strh	r2, [r3, #4]
	
	ICM20602_GPIO_SPI_Initialization();
 8002464:	f7ff fee2 	bl	800222c <ICM20602_GPIO_SPI_Initialization>
	
	printf("Checking ICM20602...");
 8002468:	4833      	ldr	r0, [pc, #204]	; (8002538 <ICM20602_Initialization+0xf0>)
 800246a:	f009 ffbd 	bl	800c3e8 <iprintf>
	
	// check WHO_AM_I (0x75)
	who_am_i = ICM20602_Readbyte(WHO_AM_I); 
 800246e:	2075      	movs	r0, #117	; 0x75
 8002470:	f7ff ff7a 	bl	8002368 <ICM20602_Readbyte>
 8002474:	4603      	mov	r3, r0
 8002476:	73fb      	strb	r3, [r7, #15]

	// who am i = 0x12
	if(who_am_i == 0x12)
 8002478:	7bfb      	ldrb	r3, [r7, #15]
 800247a:	2b12      	cmp	r3, #18
 800247c:	d105      	bne.n	800248a <ICM20602_Initialization+0x42>
	{
		printf("\nICM20602 who_am_i = 0x%02x...OK\n\n", who_am_i);
 800247e:	7bfb      	ldrb	r3, [r7, #15]
 8002480:	4619      	mov	r1, r3
 8002482:	482e      	ldr	r0, [pc, #184]	; (800253c <ICM20602_Initialization+0xf4>)
 8002484:	f009 ffb0 	bl	800c3e8 <iprintf>
 8002488:	e012      	b.n	80024b0 <ICM20602_Initialization+0x68>
	}
	// recheck
	else if(who_am_i != 0x12)
 800248a:	7bfb      	ldrb	r3, [r7, #15]
 800248c:	2b12      	cmp	r3, #18
 800248e:	d00f      	beq.n	80024b0 <ICM20602_Initialization+0x68>
	{
		who_am_i = ICM20602_Readbyte(WHO_AM_I); // check again WHO_AM_I (0x75)
 8002490:	2075      	movs	r0, #117	; 0x75
 8002492:	f7ff ff69 	bl	8002368 <ICM20602_Readbyte>
 8002496:	4603      	mov	r3, r0
 8002498:	73fb      	strb	r3, [r7, #15]

		if (who_am_i != 0x12){
 800249a:	7bfb      	ldrb	r3, [r7, #15]
 800249c:	2b12      	cmp	r3, #18
 800249e:	d007      	beq.n	80024b0 <ICM20602_Initialization+0x68>
			printf( "ICM20602 Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0x12);
 80024a0:	7bfb      	ldrb	r3, [r7, #15]
 80024a2:	2212      	movs	r2, #18
 80024a4:	4619      	mov	r1, r3
 80024a6:	4826      	ldr	r0, [pc, #152]	; (8002540 <ICM20602_Initialization+0xf8>)
 80024a8:	f009 ff9e 	bl	800c3e8 <iprintf>
			return 1; //ERROR
 80024ac:	2301      	movs	r3, #1
 80024ae:	e03f      	b.n	8002530 <ICM20602_Initialization+0xe8>
		}
	}
	
	// Reset ICM20602
	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x80); //Reset ICM20602
 80024b0:	2180      	movs	r1, #128	; 0x80
 80024b2:	206b      	movs	r0, #107	; 0x6b
 80024b4:	f7ff ffa6 	bl	8002404 <ICM20602_Writebyte>
	HAL_Delay(50);
 80024b8:	2032      	movs	r0, #50	; 0x32
 80024ba:	f004 fcb7 	bl	8006e2c <HAL_Delay>

	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x01); // Enable Temperature sensor(bit4-0), Use PLL(bit2:0-01)
 80024be:	2101      	movs	r1, #1
 80024c0:	206b      	movs	r0, #107	; 0x6b
 80024c2:	f7ff ff9f 	bl	8002404 <ICM20602_Writebyte>
									// 온도센서 끄면 자이로 값 이상하게 출력됨
	HAL_Delay(50);
 80024c6:	2032      	movs	r0, #50	; 0x32
 80024c8:	f004 fcb0 	bl	8006e2c <HAL_Delay>

	// PWR_MGMT_2 0x6C
	ICM20602_Writebyte(PWR_MGMT_2, 0x38); // Disable Acc(bit5:3-111), Enable Gyro(bit2:0-000)
 80024cc:	2138      	movs	r1, #56	; 0x38
 80024ce:	206c      	movs	r0, #108	; 0x6c
 80024d0:	f7ff ff98 	bl	8002404 <ICM20602_Writebyte>
	//ICM20602_Writebyte( PWR_MGMT_2, 0x00 ); // Enable Acc(bit5:3-000), Enable Gyro(bit2:0-000)
	HAL_Delay(50);
 80024d4:	2032      	movs	r0, #50	; 0x32
 80024d6:	f004 fca9 	bl	8006e2c <HAL_Delay>
	
	// set sample rate to 1000Hz and apply a software filter
	ICM20602_Writebyte(SMPLRT_DIV, 0x00);
 80024da:	2100      	movs	r1, #0
 80024dc:	2019      	movs	r0, #25
 80024de:	f7ff ff91 	bl	8002404 <ICM20602_Writebyte>
	HAL_Delay(50);
 80024e2:	2032      	movs	r0, #50	; 0x32
 80024e4:	f004 fca2 	bl	8006e2c <HAL_Delay>
	
	// Gyro DLPF Config
	//ICM20602_Writebyte(CONFIG, 0x00); // Gyro LPF fc 250Hz(bit2:0-000)
	ICM20602_Writebyte(CONFIG, 0x05); // Gyro LPF fc 20Hz(bit2:0-100) at 1kHz sample rate
 80024e8:	2105      	movs	r1, #5
 80024ea:	201a      	movs	r0, #26
 80024ec:	f7ff ff8a 	bl	8002404 <ICM20602_Writebyte>
	HAL_Delay(50);
 80024f0:	2032      	movs	r0, #50	; 0x32
 80024f2:	f004 fc9b 	bl	8006e2c <HAL_Delay>

	// GYRO_CONFIG 0x1B
	ICM20602_Writebyte(GYRO_CONFIG, 0x18); // Gyro sensitivity 2000 dps(bit4:3-11), FCHOICE (bit1:0-00)
 80024f6:	2118      	movs	r1, #24
 80024f8:	201b      	movs	r0, #27
 80024fa:	f7ff ff83 	bl	8002404 <ICM20602_Writebyte>
	HAL_Delay(50);
 80024fe:	2032      	movs	r0, #50	; 0x32
 8002500:	f004 fc94 	bl	8006e2c <HAL_Delay>

	// ACCEL_CONFIG 0x1C
	ICM20602_Writebyte(ACCEL_CONFIG, 0x18); // Acc sensitivity 16g
 8002504:	2118      	movs	r1, #24
 8002506:	201c      	movs	r0, #28
 8002508:	f7ff ff7c 	bl	8002404 <ICM20602_Writebyte>
	HAL_Delay(50);
 800250c:	2032      	movs	r0, #50	; 0x32
 800250e:	f004 fc8d 	bl	8006e2c <HAL_Delay>
	
	// ACCEL_CONFIG2 0x1D
	ICM20602_Writebyte(ACCEL_CONFIG2, 0x03); // Acc FCHOICE 1kHz(bit3-0), DLPF fc 44.8Hz(bit2:0-011)
 8002512:	2103      	movs	r1, #3
 8002514:	201d      	movs	r0, #29
 8002516:	f7ff ff75 	bl	8002404 <ICM20602_Writebyte>
	HAL_Delay(50);
 800251a:	2032      	movs	r0, #50	; 0x32
 800251c:	f004 fc86 	bl	8006e2c <HAL_Delay>
	
	// Enable Interrupts when data is ready
	ICM20602_Writebyte(INT_ENABLE, 0x01); // Enable DRDY Interrupt
 8002520:	2101      	movs	r1, #1
 8002522:	2038      	movs	r0, #56	; 0x38
 8002524:	f7ff ff6e 	bl	8002404 <ICM20602_Writebyte>
	HAL_Delay(50);
 8002528:	2032      	movs	r0, #50	; 0x32
 800252a:	f004 fc7f 	bl	8006e2c <HAL_Delay>
//	
//	// Remove Gyro Z offset
//	ICM20602_Writebyte( ZG_OFFS_USRH, offset_z>>8 );	// gyro z offset high byte
//	ICM20602_Writebyte( ZG_OFFS_USRL, offset_z );	// gyro z offset low byte

	return 0; //OK
 800252e:	2300      	movs	r3, #0
}
 8002530:	4618      	mov	r0, r3
 8002532:	3710      	adds	r7, #16
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	0800f2b4 	.word	0x0800f2b4
 800253c:	0800f2cc 	.word	0x0800f2cc
 8002540:	0800f2f0 	.word	0x0800f2f0

08002544 <ICM20602_Get3AxisGyroRawData>:
	gyro[1] = ((data[10] << 8) | data[11]);
	gyro[2] = ((data[12] << 8) | data[13]);
}

void ICM20602_Get3AxisGyroRawData(short* gyro)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
	unsigned char data[6];
	ICM20602_Readbytes(GYRO_XOUT_H, 6, data);
 800254c:	f107 0308 	add.w	r3, r7, #8
 8002550:	461a      	mov	r2, r3
 8002552:	2106      	movs	r1, #6
 8002554:	2043      	movs	r0, #67	; 0x43
 8002556:	f7ff ff27 	bl	80023a8 <ICM20602_Readbytes>
	
	gyro[0] = ((data[0] << 8) | data[1]);
 800255a:	7a3b      	ldrb	r3, [r7, #8]
 800255c:	021b      	lsls	r3, r3, #8
 800255e:	b21a      	sxth	r2, r3
 8002560:	7a7b      	ldrb	r3, [r7, #9]
 8002562:	b21b      	sxth	r3, r3
 8002564:	4313      	orrs	r3, r2
 8002566:	b21a      	sxth	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	801a      	strh	r2, [r3, #0]
	gyro[1] = ((data[2] << 8) | data[3]);
 800256c:	7abb      	ldrb	r3, [r7, #10]
 800256e:	021b      	lsls	r3, r3, #8
 8002570:	b219      	sxth	r1, r3
 8002572:	7afb      	ldrb	r3, [r7, #11]
 8002574:	b21a      	sxth	r2, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	3302      	adds	r3, #2
 800257a:	430a      	orrs	r2, r1
 800257c:	b212      	sxth	r2, r2
 800257e:	801a      	strh	r2, [r3, #0]
	gyro[2] = ((data[4] << 8) | data[5]);
 8002580:	7b3b      	ldrb	r3, [r7, #12]
 8002582:	021b      	lsls	r3, r3, #8
 8002584:	b219      	sxth	r1, r3
 8002586:	7b7b      	ldrb	r3, [r7, #13]
 8002588:	b21a      	sxth	r2, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	3304      	adds	r3, #4
 800258e:	430a      	orrs	r2, r1
 8002590:	b212      	sxth	r2, r2
 8002592:	801a      	strh	r2, [r3, #0]
}
 8002594:	bf00      	nop
 8002596:	3710      	adds	r7, #16
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <ICM20602_DataReady>:
	accel[1] = ((data[2] << 8) | data[3]);
	accel[2] = ((data[4] << 8) | data[5]);
}

int ICM20602_DataReady(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
	return LL_GPIO_IsInputPinSet(ICM20602_INT_PORT, ICM20602_INT_PIN);
 80025a0:	2120      	movs	r1, #32
 80025a2:	4803      	ldr	r0, [pc, #12]	; (80025b0 <ICM20602_DataReady+0x14>)
 80025a4:	f7ff fde0 	bl	8002168 <LL_GPIO_IsInputPinSet>
 80025a8:	4603      	mov	r3, r0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	40020800 	.word	0x40020800

080025b4 <LL_SPI_Enable>:
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	601a      	str	r2, [r3, #0]
}
 80025c8:	bf00      	nop
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <LL_SPI_SetStandard>:
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f023 0210 	bic.w	r2, r3, #16
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	431a      	orrs	r2, r3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	605a      	str	r2, [r3, #4]
}
 80025ee:	bf00      	nop
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr

080025fa <LL_SPI_IsActiveFlag_RXNE>:
{
 80025fa:	b480      	push	{r7}
 80025fc:	b083      	sub	sp, #12
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	2b01      	cmp	r3, #1
 800260c:	d101      	bne.n	8002612 <LL_SPI_IsActiveFlag_RXNE+0x18>
 800260e:	2301      	movs	r3, #1
 8002610:	e000      	b.n	8002614 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8002612:	2300      	movs	r3, #0
}
 8002614:	4618      	mov	r0, r3
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <LL_SPI_IsActiveFlag_TXE>:
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f003 0302 	and.w	r3, r3, #2
 8002630:	2b02      	cmp	r3, #2
 8002632:	d101      	bne.n	8002638 <LL_SPI_IsActiveFlag_TXE+0x18>
 8002634:	2301      	movs	r3, #1
 8002636:	e000      	b.n	800263a <LL_SPI_IsActiveFlag_TXE+0x1a>
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr

08002646 <LL_SPI_ReceiveData8>:
{
 8002646:	b480      	push	{r7}
 8002648:	b083      	sub	sp, #12
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_REG(SPIx->DR));
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	b2db      	uxtb	r3, r3
}
 8002654:	4618      	mov	r0, r3
 8002656:	370c      	adds	r7, #12
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr

08002660 <LL_SPI_TransmitData8>:
{
 8002660:	b480      	push	{r7}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	460b      	mov	r3, r1
 800266a:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	330c      	adds	r3, #12
 8002670:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	78fa      	ldrb	r2, [r7, #3]
 8002676:	701a      	strb	r2, [r3, #0]
}
 8002678:	bf00      	nop
 800267a:	3714      	adds	r7, #20
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <LL_GPIO_IsInputPinSet>:
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	691a      	ldr	r2, [r3, #16]
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	4013      	ands	r3, r2
 8002696:	683a      	ldr	r2, [r7, #0]
 8002698:	429a      	cmp	r2, r3
 800269a:	bf0c      	ite	eq
 800269c:	2301      	moveq	r3, #1
 800269e:	2300      	movne	r3, #0
 80026a0:	b2db      	uxtb	r3, r3
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	370c      	adds	r7, #12
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr

080026ae <LL_GPIO_SetOutputPin>:
{
 80026ae:	b480      	push	{r7}
 80026b0:	b083      	sub	sp, #12
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
 80026b6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	683a      	ldr	r2, [r7, #0]
 80026bc:	619a      	str	r2, [r3, #24]
}
 80026be:	bf00      	nop
 80026c0:	370c      	adds	r7, #12
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr

080026ca <LL_GPIO_ResetOutputPin>:
{
 80026ca:	b480      	push	{r7}
 80026cc:	b083      	sub	sp, #12
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
 80026d2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	041a      	lsls	r2, r3, #16
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	619a      	str	r2, [r3, #24]
}
 80026dc:	bf00      	nop
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <LL_AHB1_GRP1_EnableClock>:
{
 80026e8:	b480      	push	{r7}
 80026ea:	b085      	sub	sp, #20
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80026f0:	4b08      	ldr	r3, [pc, #32]	; (8002714 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80026f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026f4:	4907      	ldr	r1, [pc, #28]	; (8002714 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80026fc:	4b05      	ldr	r3, [pc, #20]	; (8002714 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80026fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	4013      	ands	r3, r2
 8002704:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002706:	68fb      	ldr	r3, [r7, #12]
}
 8002708:	bf00      	nop
 800270a:	3714      	adds	r7, #20
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr
 8002714:	40023800 	.word	0x40023800

08002718 <LL_APB1_GRP1_EnableClock>:
{
 8002718:	b480      	push	{r7}
 800271a:	b085      	sub	sp, #20
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002720:	4b08      	ldr	r3, [pc, #32]	; (8002744 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002722:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002724:	4907      	ldr	r1, [pc, #28]	; (8002744 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4313      	orrs	r3, r2
 800272a:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800272c:	4b05      	ldr	r3, [pc, #20]	; (8002744 <LL_APB1_GRP1_EnableClock+0x2c>)
 800272e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	4013      	ands	r3, r2
 8002734:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002736:	68fb      	ldr	r3, [r7, #12]
}
 8002738:	bf00      	nop
 800273a:	3714      	adds	r7, #20
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr
 8002744:	40023800 	.word	0x40023800

08002748 <LPS22HH_GPIO_SPI_Initialization>:

Struct_LPS22HH LPS22HH;


void LPS22HH_GPIO_SPI_Initialization(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b090      	sub	sp, #64	; 0x40
 800274c:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800274e:	f107 0318 	add.w	r3, r7, #24
 8002752:	2228      	movs	r2, #40	; 0x28
 8002754:	2100      	movs	r1, #0
 8002756:	4618      	mov	r0, r3
 8002758:	f009 f9e2 	bl	800bb20 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800275c:	463b      	mov	r3, r7
 800275e:	2200      	movs	r2, #0
 8002760:	601a      	str	r2, [r3, #0]
 8002762:	605a      	str	r2, [r3, #4]
 8002764:	609a      	str	r2, [r3, #8]
 8002766:	60da      	str	r2, [r3, #12]
 8002768:	611a      	str	r2, [r3, #16]
 800276a:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 800276c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002770:	f7ff ffd2 	bl	8002718 <LL_APB1_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002774:	2002      	movs	r0, #2
 8002776:	f7ff ffb7 	bl	80026e8 <LL_AHB1_GRP1_EnableClock>
	/**SPI3 GPIO Configuration
	PB3   ------> SPI3_SCK
	PB4   ------> SPI3_MISO
	PB5   ------> SPI3_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 800277a:	2338      	movs	r3, #56	; 0x38
 800277c:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800277e:	2302      	movs	r3, #2
 8002780:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002782:	2303      	movs	r3, #3
 8002784:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002786:	2300      	movs	r3, #0
 8002788:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800278a:	2300      	movs	r3, #0
 800278c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 800278e:	2306      	movs	r3, #6
 8002790:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002792:	463b      	mov	r3, r7
 8002794:	4619      	mov	r1, r3
 8002796:	4826      	ldr	r0, [pc, #152]	; (8002830 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8002798:	f008 fa2d 	bl	800abf6 <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800279c:	2300      	movs	r3, #0
 800279e:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80027a0:	f44f 7382 	mov.w	r3, #260	; 0x104
 80027a4:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80027a6:	2300      	movs	r3, #0
 80027a8:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80027aa:	2302      	movs	r3, #2
 80027ac:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80027ae:	2301      	movs	r3, #1
 80027b0:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80027b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027b6:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 80027b8:	2308      	movs	r3, #8
 80027ba:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80027bc:	2300      	movs	r3, #0
 80027be:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80027c0:	2300      	movs	r3, #0
 80027c2:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 80027c4:	230a      	movs	r3, #10
 80027c6:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(LPS22HH_SPI_CHANNEL, &SPI_InitStruct);
 80027c8:	f107 0318 	add.w	r3, r7, #24
 80027cc:	4619      	mov	r1, r3
 80027ce:	4819      	ldr	r0, [pc, #100]	; (8002834 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 80027d0:	f008 fbdf 	bl	800af92 <LL_SPI_Init>
	LL_SPI_SetStandard(LPS22HH_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 80027d4:	2100      	movs	r1, #0
 80027d6:	4817      	ldr	r0, [pc, #92]	; (8002834 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 80027d8:	f7ff fefc 	bl	80025d4 <LL_SPI_SetStandard>
	/**LPS22HH GPIO Control Configuration
	 * PB6  ------> LPS22HH_SPI_CS_PIN (output)
	 * PB7  ------> LPS22HH_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(LPS22HH_SPI_CS_PORT, LPS22HH_SPI_CS_PIN);
 80027dc:	2140      	movs	r1, #64	; 0x40
 80027de:	4814      	ldr	r0, [pc, #80]	; (8002830 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 80027e0:	f7ff ff73 	bl	80026ca <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = LPS22HH_SPI_CS_PIN;
 80027e4:	2340      	movs	r3, #64	; 0x40
 80027e6:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80027e8:	2301      	movs	r3, #1
 80027ea:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80027ec:	2303      	movs	r3, #3
 80027ee:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80027f0:	2300      	movs	r3, #0
 80027f2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80027f4:	2300      	movs	r3, #0
 80027f6:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(LPS22HH_SPI_CS_PORT, &GPIO_InitStruct);
 80027f8:	463b      	mov	r3, r7
 80027fa:	4619      	mov	r1, r3
 80027fc:	480c      	ldr	r0, [pc, #48]	; (8002830 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 80027fe:	f008 f9fa 	bl	800abf6 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = LPS22HH_INT_PIN;
 8002802:	2380      	movs	r3, #128	; 0x80
 8002804:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002806:	2300      	movs	r3, #0
 8002808:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800280a:	2301      	movs	r3, #1
 800280c:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(LPS22HH_INT_PORT, &GPIO_InitStruct);
 800280e:	463b      	mov	r3, r7
 8002810:	4619      	mov	r1, r3
 8002812:	4807      	ldr	r0, [pc, #28]	; (8002830 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8002814:	f008 f9ef 	bl	800abf6 <LL_GPIO_Init>
	
	LL_SPI_Enable(LPS22HH_SPI_CHANNEL);
 8002818:	4806      	ldr	r0, [pc, #24]	; (8002834 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 800281a:	f7ff fecb 	bl	80025b4 <LL_SPI_Enable>
	
	CHIP_DESELECT(LPS22HH);
 800281e:	2140      	movs	r1, #64	; 0x40
 8002820:	4803      	ldr	r0, [pc, #12]	; (8002830 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8002822:	f7ff ff44 	bl	80026ae <LL_GPIO_SetOutputPin>
}
 8002826:	bf00      	nop
 8002828:	3740      	adds	r7, #64	; 0x40
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	40020400 	.word	0x40020400
 8002834:	40003c00 	.word	0x40003c00

08002838 <SPI3_SendByte>:


unsigned char SPI3_SendByte(unsigned char data)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	4603      	mov	r3, r0
 8002840:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(LPS22HH_SPI_CHANNEL)==RESET);
 8002842:	bf00      	nop
 8002844:	480c      	ldr	r0, [pc, #48]	; (8002878 <SPI3_SendByte+0x40>)
 8002846:	f7ff feeb 	bl	8002620 <LL_SPI_IsActiveFlag_TXE>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d0f9      	beq.n	8002844 <SPI3_SendByte+0xc>
	LL_SPI_TransmitData8(LPS22HH_SPI_CHANNEL, data);
 8002850:	79fb      	ldrb	r3, [r7, #7]
 8002852:	4619      	mov	r1, r3
 8002854:	4808      	ldr	r0, [pc, #32]	; (8002878 <SPI3_SendByte+0x40>)
 8002856:	f7ff ff03 	bl	8002660 <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(LPS22HH_SPI_CHANNEL)==RESET);
 800285a:	bf00      	nop
 800285c:	4806      	ldr	r0, [pc, #24]	; (8002878 <SPI3_SendByte+0x40>)
 800285e:	f7ff fecc 	bl	80025fa <LL_SPI_IsActiveFlag_RXNE>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d0f9      	beq.n	800285c <SPI3_SendByte+0x24>
	return LL_SPI_ReceiveData8(LPS22HH_SPI_CHANNEL);
 8002868:	4803      	ldr	r0, [pc, #12]	; (8002878 <SPI3_SendByte+0x40>)
 800286a:	f7ff feec 	bl	8002646 <LL_SPI_ReceiveData8>
 800286e:	4603      	mov	r3, r0
}
 8002870:	4618      	mov	r0, r3
 8002872:	3708      	adds	r7, #8
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	40003c00 	.word	0x40003c00

0800287c <LPS22HH_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t LPS22HH_Readbyte(uint8_t reg_addr)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	4603      	mov	r3, r0
 8002884:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(LPS22HH);
 8002886:	2140      	movs	r1, #64	; 0x40
 8002888:	480b      	ldr	r0, [pc, #44]	; (80028b8 <LPS22HH_Readbyte+0x3c>)
 800288a:	f7ff ff1e 	bl	80026ca <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 800288e:	79fb      	ldrb	r3, [r7, #7]
 8002890:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002894:	b2db      	uxtb	r3, r3
 8002896:	4618      	mov	r0, r3
 8002898:	f7ff ffce 	bl	8002838 <SPI3_SendByte>
	val = SPI3_SendByte(0x00); //Send DUMMY
 800289c:	2000      	movs	r0, #0
 800289e:	f7ff ffcb 	bl	8002838 <SPI3_SendByte>
 80028a2:	4603      	mov	r3, r0
 80028a4:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(LPS22HH);
 80028a6:	2140      	movs	r1, #64	; 0x40
 80028a8:	4803      	ldr	r0, [pc, #12]	; (80028b8 <LPS22HH_Readbyte+0x3c>)
 80028aa:	f7ff ff00 	bl	80026ae <LL_GPIO_SetOutputPin>
	
	return val;
 80028ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3710      	adds	r7, #16
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	40020400 	.word	0x40020400

080028bc <LPS22HH_Readbytes>:

void LPS22HH_Readbytes(unsigned char reg_addr, unsigned char len, unsigned char* data)
{
 80028bc:	b590      	push	{r4, r7, lr}
 80028be:	b085      	sub	sp, #20
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	4603      	mov	r3, r0
 80028c4:	603a      	str	r2, [r7, #0]
 80028c6:	71fb      	strb	r3, [r7, #7]
 80028c8:	460b      	mov	r3, r1
 80028ca:	71bb      	strb	r3, [r7, #6]
	unsigned int i = 0;
 80028cc:	2300      	movs	r3, #0
 80028ce:	60fb      	str	r3, [r7, #12]

	CHIP_SELECT(LPS22HH);
 80028d0:	2140      	movs	r1, #64	; 0x40
 80028d2:	4810      	ldr	r0, [pc, #64]	; (8002914 <LPS22HH_Readbytes+0x58>)
 80028d4:	f7ff fef9 	bl	80026ca <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 80028d8:	79fb      	ldrb	r3, [r7, #7]
 80028da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7ff ffa9 	bl	8002838 <SPI3_SendByte>
	while(i < len)
 80028e6:	e009      	b.n	80028fc <LPS22HH_Readbytes+0x40>
	{
		data[i++] = SPI3_SendByte(0x00); //Send DUMMY
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	1c5a      	adds	r2, r3, #1
 80028ec:	60fa      	str	r2, [r7, #12]
 80028ee:	683a      	ldr	r2, [r7, #0]
 80028f0:	18d4      	adds	r4, r2, r3
 80028f2:	2000      	movs	r0, #0
 80028f4:	f7ff ffa0 	bl	8002838 <SPI3_SendByte>
 80028f8:	4603      	mov	r3, r0
 80028fa:	7023      	strb	r3, [r4, #0]
	while(i < len)
 80028fc:	79bb      	ldrb	r3, [r7, #6]
 80028fe:	68fa      	ldr	r2, [r7, #12]
 8002900:	429a      	cmp	r2, r3
 8002902:	d3f1      	bcc.n	80028e8 <LPS22HH_Readbytes+0x2c>
	}
	CHIP_DESELECT(LPS22HH);
 8002904:	2140      	movs	r1, #64	; 0x40
 8002906:	4803      	ldr	r0, [pc, #12]	; (8002914 <LPS22HH_Readbytes+0x58>)
 8002908:	f7ff fed1 	bl	80026ae <LL_GPIO_SetOutputPin>
}
 800290c:	bf00      	nop
 800290e:	3714      	adds	r7, #20
 8002910:	46bd      	mov	sp, r7
 8002912:	bd90      	pop	{r4, r7, pc}
 8002914:	40020400 	.word	0x40020400

08002918 <LPS22HH_Writebyte>:

void LPS22HH_Writebyte(uint8_t reg_addr, uint8_t val)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
 800291e:	4603      	mov	r3, r0
 8002920:	460a      	mov	r2, r1
 8002922:	71fb      	strb	r3, [r7, #7]
 8002924:	4613      	mov	r3, r2
 8002926:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(LPS22HH);
 8002928:	2140      	movs	r1, #64	; 0x40
 800292a:	480b      	ldr	r0, [pc, #44]	; (8002958 <LPS22HH_Writebyte+0x40>)
 800292c:	f7ff fecd 	bl	80026ca <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 8002930:	79fb      	ldrb	r3, [r7, #7]
 8002932:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002936:	b2db      	uxtb	r3, r3
 8002938:	4618      	mov	r0, r3
 800293a:	f7ff ff7d 	bl	8002838 <SPI3_SendByte>
	SPI3_SendByte(val); //Data
 800293e:	79bb      	ldrb	r3, [r7, #6]
 8002940:	4618      	mov	r0, r3
 8002942:	f7ff ff79 	bl	8002838 <SPI3_SendByte>
	CHIP_DESELECT(LPS22HH);
 8002946:	2140      	movs	r1, #64	; 0x40
 8002948:	4803      	ldr	r0, [pc, #12]	; (8002958 <LPS22HH_Writebyte+0x40>)
 800294a:	f7ff feb0 	bl	80026ae <LL_GPIO_SetOutputPin>
}
 800294e:	bf00      	nop
 8002950:	3708      	adds	r7, #8
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	40020400 	.word	0x40020400

0800295c <LPS22HH_Initialization>:




int LPS22HH_Initialization(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
	uint8_t temp_reg;
	uint8_t who_am_i = 0;
 8002962:	2300      	movs	r3, #0
 8002964:	71fb      	strb	r3, [r7, #7]
	
	LPS22HH_GPIO_SPI_Initialization();
 8002966:	f7ff feef 	bl	8002748 <LPS22HH_GPIO_SPI_Initialization>
	
	printf("Checking LPS22HH...");
 800296a:	4841      	ldr	r0, [pc, #260]	; (8002a70 <LPS22HH_Initialization+0x114>)
 800296c:	f009 fd3c 	bl	800c3e8 <iprintf>
	
	// check WHO_AM_I (0x0F)
	who_am_i = LPS22HH_Readbyte(0x0F); 
 8002970:	200f      	movs	r0, #15
 8002972:	f7ff ff83 	bl	800287c <LPS22HH_Readbyte>
 8002976:	4603      	mov	r3, r0
 8002978:	71fb      	strb	r3, [r7, #7]

	// who am i = 0xb3
	if( who_am_i == 0xb3)
 800297a:	79fb      	ldrb	r3, [r7, #7]
 800297c:	2bb3      	cmp	r3, #179	; 0xb3
 800297e:	d105      	bne.n	800298c <LPS22HH_Initialization+0x30>
	{
		printf("\nLPS22HH who_am_i = 0x%02x...OK\n\n", who_am_i );
 8002980:	79fb      	ldrb	r3, [r7, #7]
 8002982:	4619      	mov	r1, r3
 8002984:	483b      	ldr	r0, [pc, #236]	; (8002a74 <LPS22HH_Initialization+0x118>)
 8002986:	f009 fd2f 	bl	800c3e8 <iprintf>
 800298a:	e012      	b.n	80029b2 <LPS22HH_Initialization+0x56>
	}
	// recheck
	else if( who_am_i != 0xb3)
 800298c:	79fb      	ldrb	r3, [r7, #7]
 800298e:	2bb3      	cmp	r3, #179	; 0xb3
 8002990:	d00f      	beq.n	80029b2 <LPS22HH_Initialization+0x56>
	{
		who_am_i = LPS22HH_Readbyte(0x0F); // check WHO_AM_I (0x0F)
 8002992:	200f      	movs	r0, #15
 8002994:	f7ff ff72 	bl	800287c <LPS22HH_Readbyte>
 8002998:	4603      	mov	r3, r0
 800299a:	71fb      	strb	r3, [r7, #7]

		if ( who_am_i != 0xb3 ){
 800299c:	79fb      	ldrb	r3, [r7, #7]
 800299e:	2bb3      	cmp	r3, #179	; 0xb3
 80029a0:	d007      	beq.n	80029b2 <LPS22HH_Initialization+0x56>
			printf( "nLPS22HH Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0xb3);
 80029a2:	79fb      	ldrb	r3, [r7, #7]
 80029a4:	22b3      	movs	r2, #179	; 0xb3
 80029a6:	4619      	mov	r1, r3
 80029a8:	4833      	ldr	r0, [pc, #204]	; (8002a78 <LPS22HH_Initialization+0x11c>)
 80029aa:	f009 fd1d 	bl	800c3e8 <iprintf>
			return 1; //ERROR
 80029ae:	2301      	movs	r3, #1
 80029b0:	e059      	b.n	8002a66 <LPS22HH_Initialization+0x10a>
		}
	}
	
	// Reset LPS22HH
	// CTRL_REG2 0x11
	LPS22HH_Writebyte(CTRL_REG2, 0x04);
 80029b2:	2104      	movs	r1, #4
 80029b4:	2011      	movs	r0, #17
 80029b6:	f7ff ffaf 	bl	8002918 <LPS22HH_Writebyte>
	//printf("LPS22HH Reset");
	do{
		//printf(".");
	}
	while((LPS22HH_Readbyte(CTRL_REG2) & 0x04) != 0x00);
 80029ba:	2011      	movs	r0, #17
 80029bc:	f7ff ff5e 	bl	800287c <LPS22HH_Readbyte>
 80029c0:	4603      	mov	r3, r0
 80029c2:	f003 0304 	and.w	r3, r3, #4
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d1f7      	bne.n	80029ba <LPS22HH_Initialization+0x5e>
	
	// Set Output Data Rate
	//0x00: One Shot
	//0x10: 1Hz	0x20: 10Hz	0x30: 25Hz	0x40: 50Hz
	//0x50: 75Hz	0x60: 100Hz	0x70: 200Hz
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 80029ca:	2010      	movs	r0, #16
 80029cc:	f7ff ff56 	bl	800287c <LPS22HH_Readbyte>
 80029d0:	4603      	mov	r3, r0
 80029d2:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x40;
 80029d4:	79bb      	ldrb	r3, [r7, #6]
 80029d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029da:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 80029dc:	79bb      	ldrb	r3, [r7, #6]
 80029de:	4619      	mov	r1, r3
 80029e0:	2010      	movs	r0, #16
 80029e2:	f7ff ff99 	bl	8002918 <LPS22HH_Writebyte>
	temp_reg = 0;
 80029e6:	2300      	movs	r3, #0
 80029e8:	71bb      	strb	r3, [r7, #6]
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 80029ea:	2010      	movs	r0, #16
 80029ec:	f7ff ff46 	bl	800287c <LPS22HH_Readbyte>
 80029f0:	4603      	mov	r3, r0
 80029f2:	71bb      	strb	r3, [r7, #6]
	//printf("%x\n", temp_reg);
	
	// Enable LPF, Cut-off frequency
	//0x08: ODR/9	0x0c: ODR/20
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 80029f4:	2010      	movs	r0, #16
 80029f6:	f7ff ff41 	bl	800287c <LPS22HH_Readbyte>
 80029fa:	4603      	mov	r3, r0
 80029fc:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x0c;
 80029fe:	79bb      	ldrb	r3, [r7, #6]
 8002a00:	f043 030c 	orr.w	r3, r3, #12
 8002a04:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 8002a06:	79bb      	ldrb	r3, [r7, #6]
 8002a08:	4619      	mov	r1, r3
 8002a0a:	2010      	movs	r0, #16
 8002a0c:	f7ff ff84 	bl	8002918 <LPS22HH_Writebyte>
	
	// Enable Block Data Update
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8002a10:	2010      	movs	r0, #16
 8002a12:	f7ff ff33 	bl	800287c <LPS22HH_Readbyte>
 8002a16:	4603      	mov	r3, r0
 8002a18:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x02;
 8002a1a:	79bb      	ldrb	r3, [r7, #6]
 8002a1c:	f043 0302 	orr.w	r3, r3, #2
 8002a20:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 8002a22:	79bb      	ldrb	r3, [r7, #6]
 8002a24:	4619      	mov	r1, r3
 8002a26:	2010      	movs	r0, #16
 8002a28:	f7ff ff76 	bl	8002918 <LPS22HH_Writebyte>
	
	// Enable Low Noise Mode (ODR should be lower than 100Hz. This is igonored when ODR = 100Hz or 200Hz)
	temp_reg = LPS22HH_Readbyte(CTRL_REG2);
 8002a2c:	2011      	movs	r0, #17
 8002a2e:	f7ff ff25 	bl	800287c <LPS22HH_Readbyte>
 8002a32:	4603      	mov	r3, r0
 8002a34:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x02;
 8002a36:	79bb      	ldrb	r3, [r7, #6]
 8002a38:	f043 0302 	orr.w	r3, r3, #2
 8002a3c:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG2, temp_reg);
 8002a3e:	79bb      	ldrb	r3, [r7, #6]
 8002a40:	4619      	mov	r1, r3
 8002a42:	2011      	movs	r0, #17
 8002a44:	f7ff ff68 	bl	8002918 <LPS22HH_Writebyte>
	
	// Enable Data-ready signal on INT-DRDY pin
	temp_reg = LPS22HH_Readbyte(CTRL_REG3);
 8002a48:	2012      	movs	r0, #18
 8002a4a:	f7ff ff17 	bl	800287c <LPS22HH_Readbyte>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x04;
 8002a52:	79bb      	ldrb	r3, [r7, #6]
 8002a54:	f043 0304 	orr.w	r3, r3, #4
 8002a58:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG3, temp_reg);
 8002a5a:	79bb      	ldrb	r3, [r7, #6]
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	2012      	movs	r0, #18
 8002a60:	f7ff ff5a 	bl	8002918 <LPS22HH_Writebyte>
	
	return 0; //OK
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	0800f31c 	.word	0x0800f31c
 8002a74:	0800f330 	.word	0x0800f330
 8002a78:	0800f354 	.word	0x0800f354

08002a7c <LPS22HH_DataReady>:


int LPS22HH_DataReady(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	af00      	add	r7, sp, #0
	return LL_GPIO_IsInputPinSet(LPS22HH_INT_PORT, LPS22HH_INT_PIN);
 8002a80:	2180      	movs	r1, #128	; 0x80
 8002a82:	4803      	ldr	r0, [pc, #12]	; (8002a90 <LPS22HH_DataReady+0x14>)
 8002a84:	f7ff fdfe 	bl	8002684 <LL_GPIO_IsInputPinSet>
 8002a88:	4603      	mov	r3, r0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	40020400 	.word	0x40020400

08002a94 <LPS22HH_GetPressure>:

void LPS22HH_GetPressure(int32_t* pressure)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
	LPS22HH_Readbytes(PRESSURE_OUT_XL, 3, (unsigned char*)pressure);
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	2103      	movs	r1, #3
 8002aa0:	2028      	movs	r0, #40	; 0x28
 8002aa2:	f7ff ff0b 	bl	80028bc <LPS22HH_Readbytes>
}
 8002aa6:	bf00      	nop
 8002aa8:	3708      	adds	r7, #8
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}

08002aae <LPS22HH_GetTemperature>:

void LPS22HH_GetTemperature(int16_t* temperature)
{
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	b082      	sub	sp, #8
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
	LPS22HH_Readbytes(TEMP_OUT_L, 2, (unsigned char*)temperature);
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	2102      	movs	r1, #2
 8002aba:	202b      	movs	r0, #43	; 0x2b
 8002abc:	f7ff fefe 	bl	80028bc <LPS22HH_Readbytes>
}
 8002ac0:	bf00      	nop
 8002ac2:	3708      	adds	r7, #8
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <getAltitude2>:
{
	return (1.0f - powf((pressure / SEA_PRESSURE), 0.1902226f)) * 44307.69396f; //145366.45f * 0.3048f = 44307.69396f;
}

float getAltitude2(float pressure, float temperature) //Get Altitude with temperature correction.
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	ed87 0a01 	vstr	s0, [r7, #4]
 8002ad2:	edc7 0a00 	vstr	s1, [r7]
	return (1.0f - powf((pressure / SEA_PRESSURE), 0.1902226f)) * (temperature + 273.15f) / 0.0065f;
 8002ad6:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ada:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8002b20 <getAltitude2+0x58>
 8002ade:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002ae2:	eddf 0a10 	vldr	s1, [pc, #64]	; 8002b24 <getAltitude2+0x5c>
 8002ae6:	eeb0 0a66 	vmov.f32	s0, s13
 8002aea:	f00b fc05 	bl	800e2f8 <powf>
 8002aee:	eeb0 7a40 	vmov.f32	s14, s0
 8002af2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002af6:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002afa:	edd7 7a00 	vldr	s15, [r7]
 8002afe:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8002b28 <getAltitude2+0x60>
 8002b02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b0a:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8002b2c <getAltitude2+0x64>
 8002b0e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002b12:	eef0 7a66 	vmov.f32	s15, s13
}
 8002b16:	eeb0 0a67 	vmov.f32	s0, s15
 8002b1a:	3708      	adds	r7, #8
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	447d5000 	.word	0x447d5000
 8002b24:	3e42c9b7 	.word	0x3e42c9b7
 8002b28:	43889333 	.word	0x43889333
 8002b2c:	3bd4fdf4 	.word	0x3bd4fdf4

08002b30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b34:	4b04      	ldr	r3, [pc, #16]	; (8002b48 <__NVIC_GetPriorityGrouping+0x18>)
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	0a1b      	lsrs	r3, r3, #8
 8002b3a:	f003 0307 	and.w	r3, r3, #7
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr
 8002b48:	e000ed00 	.word	0xe000ed00

08002b4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	4603      	mov	r3, r0
 8002b54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	db0b      	blt.n	8002b76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b5e:	79fb      	ldrb	r3, [r7, #7]
 8002b60:	f003 021f 	and.w	r2, r3, #31
 8002b64:	4907      	ldr	r1, [pc, #28]	; (8002b84 <__NVIC_EnableIRQ+0x38>)
 8002b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b6a:	095b      	lsrs	r3, r3, #5
 8002b6c:	2001      	movs	r0, #1
 8002b6e:	fa00 f202 	lsl.w	r2, r0, r2
 8002b72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b76:	bf00      	nop
 8002b78:	370c      	adds	r7, #12
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	e000e100 	.word	0xe000e100

08002b88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	4603      	mov	r3, r0
 8002b90:	6039      	str	r1, [r7, #0]
 8002b92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	db0a      	blt.n	8002bb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	b2da      	uxtb	r2, r3
 8002ba0:	490c      	ldr	r1, [pc, #48]	; (8002bd4 <__NVIC_SetPriority+0x4c>)
 8002ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba6:	0112      	lsls	r2, r2, #4
 8002ba8:	b2d2      	uxtb	r2, r2
 8002baa:	440b      	add	r3, r1
 8002bac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bb0:	e00a      	b.n	8002bc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	b2da      	uxtb	r2, r3
 8002bb6:	4908      	ldr	r1, [pc, #32]	; (8002bd8 <__NVIC_SetPriority+0x50>)
 8002bb8:	79fb      	ldrb	r3, [r7, #7]
 8002bba:	f003 030f 	and.w	r3, r3, #15
 8002bbe:	3b04      	subs	r3, #4
 8002bc0:	0112      	lsls	r2, r2, #4
 8002bc2:	b2d2      	uxtb	r2, r2
 8002bc4:	440b      	add	r3, r1
 8002bc6:	761a      	strb	r2, [r3, #24]
}
 8002bc8:	bf00      	nop
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr
 8002bd4:	e000e100 	.word	0xe000e100
 8002bd8:	e000ed00 	.word	0xe000ed00

08002bdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b089      	sub	sp, #36	; 0x24
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	60b9      	str	r1, [r7, #8]
 8002be6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f003 0307 	and.w	r3, r3, #7
 8002bee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	f1c3 0307 	rsb	r3, r3, #7
 8002bf6:	2b04      	cmp	r3, #4
 8002bf8:	bf28      	it	cs
 8002bfa:	2304      	movcs	r3, #4
 8002bfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	3304      	adds	r3, #4
 8002c02:	2b06      	cmp	r3, #6
 8002c04:	d902      	bls.n	8002c0c <NVIC_EncodePriority+0x30>
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	3b03      	subs	r3, #3
 8002c0a:	e000      	b.n	8002c0e <NVIC_EncodePriority+0x32>
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1a:	43da      	mvns	r2, r3
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	401a      	ands	r2, r3
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c24:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c2e:	43d9      	mvns	r1, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c34:	4313      	orrs	r3, r2
         );
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3724      	adds	r7, #36	; 0x24
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr

08002c42 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8002c42:	b480      	push	{r7}
 8002c44:	b083      	sub	sp, #12
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	60da      	str	r2, [r3, #12]
}
 8002c56:	bf00      	nop
 8002c58:	370c      	adds	r7, #12
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr

08002c62 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8002c62:	b480      	push	{r7}
 8002c64:	b083      	sub	sp, #12
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	695b      	ldr	r3, [r3, #20]
 8002c7a:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	615a      	str	r2, [r3, #20]
}
 8002c82:	bf00      	nop
 8002c84:	370c      	adds	r7, #12
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr

08002c8e <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8002c8e:	b480      	push	{r7}
 8002c90:	b083      	sub	sp, #12
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c9e:	2b80      	cmp	r3, #128	; 0x80
 8002ca0:	bf0c      	ite	eq
 8002ca2:	2301      	moveq	r3, #1
 8002ca4:	2300      	movne	r3, #0
 8002ca6:	b2db      	uxtb	r3, r3
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	370c      	adds	r7, #12
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8002cc0:	78fa      	ldrb	r2, [r7, #3]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	605a      	str	r2, [r3, #4]
}
 8002cc6:	bf00      	nop
 8002cc8:	370c      	adds	r7, #12
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
	...

08002cd4 <LL_AHB1_GRP1_EnableClock>:
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b085      	sub	sp, #20
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002cdc:	4b08      	ldr	r3, [pc, #32]	; (8002d00 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002cde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ce0:	4907      	ldr	r1, [pc, #28]	; (8002d00 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002ce8:	4b05      	ldr	r3, [pc, #20]	; (8002d00 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002cea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4013      	ands	r3, r2
 8002cf0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
}
 8002cf4:	bf00      	nop
 8002cf6:	3714      	adds	r7, #20
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr
 8002d00:	40023800 	.word	0x40023800

08002d04 <LL_APB1_GRP1_EnableClock>:
{
 8002d04:	b480      	push	{r7}
 8002d06:	b085      	sub	sp, #20
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002d0c:	4b08      	ldr	r3, [pc, #32]	; (8002d30 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002d0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d10:	4907      	ldr	r1, [pc, #28]	; (8002d30 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002d18:	4b05      	ldr	r3, [pc, #20]	; (8002d30 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002d1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	4013      	ands	r3, r2
 8002d20:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002d22:	68fb      	ldr	r3, [r7, #12]
}
 8002d24:	bf00      	nop
 8002d26:	3714      	adds	r7, #20
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr
 8002d30:	40023800 	.word	0x40023800

08002d34 <M8N_TransmitData>:
		0xB5, 0x62, 0x06, 0x09, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00,
		0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x31,
		0xBF
};

void M8N_TransmitData(unsigned char *data, unsigned char len) {
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	70fb      	strb	r3, [r7, #3]
	for (int i = 0; i < len; i++) {
 8002d40:	2300      	movs	r3, #0
 8002d42:	60fb      	str	r3, [r7, #12]
 8002d44:	e011      	b.n	8002d6a <M8N_TransmitData+0x36>
		while(!LL_USART_IsActiveFlag_TXE(UART4));
 8002d46:	bf00      	nop
 8002d48:	480c      	ldr	r0, [pc, #48]	; (8002d7c <M8N_TransmitData+0x48>)
 8002d4a:	f7ff ffa0 	bl	8002c8e <LL_USART_IsActiveFlag_TXE>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d0f9      	beq.n	8002d48 <M8N_TransmitData+0x14>
		LL_USART_TransmitData8(UART4, *(data + i));
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	4413      	add	r3, r2
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	4807      	ldr	r0, [pc, #28]	; (8002d7c <M8N_TransmitData+0x48>)
 8002d60:	f7ff ffa8 	bl	8002cb4 <LL_USART_TransmitData8>
	for (int i = 0; i < len; i++) {
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	3301      	adds	r3, #1
 8002d68:	60fb      	str	r3, [r7, #12]
 8002d6a:	78fb      	ldrb	r3, [r7, #3]
 8002d6c:	68fa      	ldr	r2, [r7, #12]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	dbe9      	blt.n	8002d46 <M8N_TransmitData+0x12>
	}
}
 8002d72:	bf00      	nop
 8002d74:	3710      	adds	r7, #16
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	40004c00 	.word	0x40004c00

08002d80 <M8N_UART4_Initialization>:

void M8N_UART4_Initialization(void) {
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b08e      	sub	sp, #56	; 0x38
 8002d84:	af00      	add	r7, sp, #0
	  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002d86:	f107 031c 	add.w	r3, r7, #28
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	601a      	str	r2, [r3, #0]
 8002d8e:	605a      	str	r2, [r3, #4]
 8002d90:	609a      	str	r2, [r3, #8]
 8002d92:	60da      	str	r2, [r3, #12]
 8002d94:	611a      	str	r2, [r3, #16]
 8002d96:	615a      	str	r2, [r3, #20]
 8002d98:	619a      	str	r2, [r3, #24]

	  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d9a:	1d3b      	adds	r3, r7, #4
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	601a      	str	r2, [r3, #0]
 8002da0:	605a      	str	r2, [r3, #4]
 8002da2:	609a      	str	r2, [r3, #8]
 8002da4:	60da      	str	r2, [r3, #12]
 8002da6:	611a      	str	r2, [r3, #16]
 8002da8:	615a      	str	r2, [r3, #20]

	  /* Peripheral clock enable */
	  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 8002daa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002dae:	f7ff ffa9 	bl	8002d04 <LL_APB1_GRP1_EnableClock>

	  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8002db2:	2004      	movs	r0, #4
 8002db4:	f7ff ff8e 	bl	8002cd4 <LL_AHB1_GRP1_EnableClock>
	  /**UART4 GPIO Configuration
	  PC10   ------> UART4_TX
	  PC11   ------> UART4_RX
	  */
	  GPIO_InitStruct.Pin = M8N_TX4_Pin|M8N_RX4_Pin;
 8002db8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002dbc:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8002dce:	2308      	movs	r3, #8
 8002dd0:	61bb      	str	r3, [r7, #24]
	  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dd2:	1d3b      	adds	r3, r7, #4
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	4819      	ldr	r0, [pc, #100]	; (8002e3c <M8N_UART4_Initialization+0xbc>)
 8002dd8:	f007 ff0d 	bl	800abf6 <LL_GPIO_Init>

	  /* UART4 interrupt Init */
	  NVIC_SetPriority(UART4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002ddc:	f7ff fea8 	bl	8002b30 <__NVIC_GetPriorityGrouping>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2200      	movs	r2, #0
 8002de4:	2100      	movs	r1, #0
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7ff fef8 	bl	8002bdc <NVIC_EncodePriority>
 8002dec:	4603      	mov	r3, r0
 8002dee:	4619      	mov	r1, r3
 8002df0:	2034      	movs	r0, #52	; 0x34
 8002df2:	f7ff fec9 	bl	8002b88 <__NVIC_SetPriority>
	  NVIC_EnableIRQ(UART4_IRQn);
 8002df6:	2034      	movs	r0, #52	; 0x34
 8002df8:	f7ff fea8 	bl	8002b4c <__NVIC_EnableIRQ>

	  USART_InitStruct.BaudRate = 9600;
 8002dfc:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8002e00:	61fb      	str	r3, [r7, #28]
	  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002e02:	2300      	movs	r3, #0
 8002e04:	623b      	str	r3, [r7, #32]
	  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002e06:	2300      	movs	r3, #0
 8002e08:	627b      	str	r3, [r7, #36]	; 0x24
	  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	62bb      	str	r3, [r7, #40]	; 0x28
	  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002e0e:	230c      	movs	r3, #12
 8002e10:	62fb      	str	r3, [r7, #44]	; 0x2c
	  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002e12:	2300      	movs	r3, #0
 8002e14:	633b      	str	r3, [r7, #48]	; 0x30
	  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002e16:	2300      	movs	r3, #0
 8002e18:	637b      	str	r3, [r7, #52]	; 0x34
	  LL_USART_Init(UART4, &USART_InitStruct);
 8002e1a:	f107 031c 	add.w	r3, r7, #28
 8002e1e:	4619      	mov	r1, r3
 8002e20:	4807      	ldr	r0, [pc, #28]	; (8002e40 <M8N_UART4_Initialization+0xc0>)
 8002e22:	f008 fdd3 	bl	800b9cc <LL_USART_Init>
	  LL_USART_ConfigAsyncMode(UART4);
 8002e26:	4806      	ldr	r0, [pc, #24]	; (8002e40 <M8N_UART4_Initialization+0xc0>)
 8002e28:	f7ff ff1b 	bl	8002c62 <LL_USART_ConfigAsyncMode>
	  LL_USART_Enable(UART4);
 8002e2c:	4804      	ldr	r0, [pc, #16]	; (8002e40 <M8N_UART4_Initialization+0xc0>)
 8002e2e:	f7ff ff08 	bl	8002c42 <LL_USART_Enable>
}
 8002e32:	bf00      	nop
 8002e34:	3738      	adds	r7, #56	; 0x38
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	40020800 	.word	0x40020800
 8002e40:	40004c00 	.word	0x40004c00

08002e44 <M8N_Initialization>:

void M8N_Initialization(void) {
 8002e44:	b580      	push	{r7, lr}
 8002e46:	af00      	add	r7, sp, #0
	M8N_UART4_Initialization();
 8002e48:	f7ff ff9a 	bl	8002d80 <M8N_UART4_Initialization>

	M8N_TransmitData(&UBX_CFG_PRT[0], sizeof(UBX_CFG_PRT));
 8002e4c:	211c      	movs	r1, #28
 8002e4e:	480d      	ldr	r0, [pc, #52]	; (8002e84 <M8N_Initialization+0x40>)
 8002e50:	f7ff ff70 	bl	8002d34 <M8N_TransmitData>
	HAL_Delay(100);
 8002e54:	2064      	movs	r0, #100	; 0x64
 8002e56:	f003 ffe9 	bl	8006e2c <HAL_Delay>
	M8N_TransmitData(&UBX_CFG_MSG[0], sizeof(UBX_CFG_MSG));
 8002e5a:	2110      	movs	r1, #16
 8002e5c:	480a      	ldr	r0, [pc, #40]	; (8002e88 <M8N_Initialization+0x44>)
 8002e5e:	f7ff ff69 	bl	8002d34 <M8N_TransmitData>
	HAL_Delay(100);
 8002e62:	2064      	movs	r0, #100	; 0x64
 8002e64:	f003 ffe2 	bl	8006e2c <HAL_Delay>
	M8N_TransmitData(&UBX_CFG_RATE[0], sizeof(UBX_CFG_RATE));
 8002e68:	210e      	movs	r1, #14
 8002e6a:	4808      	ldr	r0, [pc, #32]	; (8002e8c <M8N_Initialization+0x48>)
 8002e6c:	f7ff ff62 	bl	8002d34 <M8N_TransmitData>
	HAL_Delay(100);
 8002e70:	2064      	movs	r0, #100	; 0x64
 8002e72:	f003 ffdb 	bl	8006e2c <HAL_Delay>
	M8N_TransmitData(&UBX_CFG_CFG[0], sizeof(UBX_CFG_CFG));
 8002e76:	2115      	movs	r1, #21
 8002e78:	4805      	ldr	r0, [pc, #20]	; (8002e90 <M8N_Initialization+0x4c>)
 8002e7a:	f7ff ff5b 	bl	8002d34 <M8N_TransmitData>
}
 8002e7e:	bf00      	nop
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	0800f5c8 	.word	0x0800f5c8
 8002e88:	0800f5e4 	.word	0x0800f5e4
 8002e8c:	0800f5f4 	.word	0x0800f5f4
 8002e90:	0800f604 	.word	0x0800f604

08002e94 <M8N_UBX_CHKSUM_Check>:

unsigned char M8N_UBX_CHKSUM_Check(unsigned char *data, unsigned char len) {
 8002e94:	b480      	push	{r7}
 8002e96:	b085      	sub	sp, #20
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	460b      	mov	r3, r1
 8002e9e:	70fb      	strb	r3, [r7, #3]
	unsigned char CK_A = 0, CK_B = 0;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	73fb      	strb	r3, [r7, #15]
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	73bb      	strb	r3, [r7, #14]

	for (int i = 2; i < len - 2; i++) {
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	60bb      	str	r3, [r7, #8]
 8002eac:	e00d      	b.n	8002eca <M8N_UBX_CHKSUM_Check+0x36>
		//exclude SYNC CHAR and CHECKSUM bytes
		CK_A = CK_A + data[i];
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	781a      	ldrb	r2, [r3, #0]
 8002eb6:	7bfb      	ldrb	r3, [r7, #15]
 8002eb8:	4413      	add	r3, r2
 8002eba:	73fb      	strb	r3, [r7, #15]
		CK_B = CK_B + CK_A;
 8002ebc:	7bba      	ldrb	r2, [r7, #14]
 8002ebe:	7bfb      	ldrb	r3, [r7, #15]
 8002ec0:	4413      	add	r3, r2
 8002ec2:	73bb      	strb	r3, [r7, #14]
	for (int i = 2; i < len - 2; i++) {
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	60bb      	str	r3, [r7, #8]
 8002eca:	78fb      	ldrb	r3, [r7, #3]
 8002ecc:	3b02      	subs	r3, #2
 8002ece:	68ba      	ldr	r2, [r7, #8]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	dbec      	blt.n	8002eae <M8N_UBX_CHKSUM_Check+0x1a>
	}

	return (CK_A == data[len - 2]) && (CK_B == data[len - 1]);
 8002ed4:	78fb      	ldrb	r3, [r7, #3]
 8002ed6:	3b02      	subs	r3, #2
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	4413      	add	r3, r2
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	7bfa      	ldrb	r2, [r7, #15]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d109      	bne.n	8002ef8 <M8N_UBX_CHKSUM_Check+0x64>
 8002ee4:	78fb      	ldrb	r3, [r7, #3]
 8002ee6:	3b01      	subs	r3, #1
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	4413      	add	r3, r2
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	7bba      	ldrb	r2, [r7, #14]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d101      	bne.n	8002ef8 <M8N_UBX_CHKSUM_Check+0x64>
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e000      	b.n	8002efa <M8N_UBX_CHKSUM_Check+0x66>
 8002ef8:	2300      	movs	r3, #0
 8002efa:	b2db      	uxtb	r3, r3
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3714      	adds	r7, #20
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <M8N_UBX_NAV_POSLLH_Parsing>:


void M8N_UBX_NAV_POSLLH_Parsing(unsigned char *data, M8N_UBX_NAV_POSLLH *posllh) {
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
	posllh -> CLASS = data[2];
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	789a      	ldrb	r2, [r3, #2]
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	701a      	strb	r2, [r3, #0]
	posllh -> ID = data[3];
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	78da      	ldrb	r2, [r3, #3]
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	705a      	strb	r2, [r3, #1]
	posllh -> length = data[4] | data[5] << 8;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	3304      	adds	r3, #4
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	b21a      	sxth	r2, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	3305      	adds	r3, #5
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	021b      	lsls	r3, r3, #8
 8002f32:	b21b      	sxth	r3, r3
 8002f34:	4313      	orrs	r3, r2
 8002f36:	b21b      	sxth	r3, r3
 8002f38:	b29a      	uxth	r2, r3
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	805a      	strh	r2, [r3, #2]

	posllh -> iTOW = data[6] | data[7] << 8 | data[8] << 16 | data[9] << 24;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	3306      	adds	r3, #6
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	461a      	mov	r2, r3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	3307      	adds	r3, #7
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	021b      	lsls	r3, r3, #8
 8002f4e:	431a      	orrs	r2, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	3308      	adds	r3, #8
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	041b      	lsls	r3, r3, #16
 8002f58:	431a      	orrs	r2, r3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	3309      	adds	r3, #9
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	061b      	lsls	r3, r3, #24
 8002f62:	4313      	orrs	r3, r2
 8002f64:	461a      	mov	r2, r3
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	605a      	str	r2, [r3, #4]
	posllh -> lon = data[10] | data[11] << 8 | data[12] << 16 | data[13] << 24;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	330a      	adds	r3, #10
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	461a      	mov	r2, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	330b      	adds	r3, #11
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	021b      	lsls	r3, r3, #8
 8002f7a:	431a      	orrs	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	330c      	adds	r3, #12
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	041b      	lsls	r3, r3, #16
 8002f84:	431a      	orrs	r2, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	330d      	adds	r3, #13
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	061b      	lsls	r3, r3, #24
 8002f8e:	431a      	orrs	r2, r3
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	609a      	str	r2, [r3, #8]
	posllh -> lat = data[14] | data[15] << 8 | data[16] << 16 | data[17] << 24;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	330e      	adds	r3, #14
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	330f      	adds	r3, #15
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	021b      	lsls	r3, r3, #8
 8002fa4:	431a      	orrs	r2, r3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	3310      	adds	r3, #16
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	041b      	lsls	r3, r3, #16
 8002fae:	431a      	orrs	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	3311      	adds	r3, #17
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	061b      	lsls	r3, r3, #24
 8002fb8:	431a      	orrs	r2, r3
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	60da      	str	r2, [r3, #12]
	posllh -> height = data[18] | data[19] << 8 | data[20] << 16 | data[21] << 24;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	3312      	adds	r3, #18
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	3313      	adds	r3, #19
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	021b      	lsls	r3, r3, #8
 8002fce:	431a      	orrs	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	3314      	adds	r3, #20
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	041b      	lsls	r3, r3, #16
 8002fd8:	431a      	orrs	r2, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	3315      	adds	r3, #21
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	061b      	lsls	r3, r3, #24
 8002fe2:	431a      	orrs	r2, r3
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	611a      	str	r2, [r3, #16]
	posllh -> hMSL = data[22] | data[23] << 8 | data[24] << 16 | data[25] << 24;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	3316      	adds	r3, #22
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	461a      	mov	r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	3317      	adds	r3, #23
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	021b      	lsls	r3, r3, #8
 8002ff8:	431a      	orrs	r2, r3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	3318      	adds	r3, #24
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	041b      	lsls	r3, r3, #16
 8003002:	431a      	orrs	r2, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	3319      	adds	r3, #25
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	061b      	lsls	r3, r3, #24
 800300c:	431a      	orrs	r2, r3
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	615a      	str	r2, [r3, #20]
	posllh -> hAcc = data[26] | data[27] << 8 | data[28] << 16 | data[29] << 24;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	331a      	adds	r3, #26
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	461a      	mov	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	331b      	adds	r3, #27
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	021b      	lsls	r3, r3, #8
 8003022:	431a      	orrs	r2, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	331c      	adds	r3, #28
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	041b      	lsls	r3, r3, #16
 800302c:	431a      	orrs	r2, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	331d      	adds	r3, #29
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	061b      	lsls	r3, r3, #24
 8003036:	4313      	orrs	r3, r2
 8003038:	461a      	mov	r2, r3
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	619a      	str	r2, [r3, #24]
	posllh -> vAcc = data[30] | data[31] << 8 | data[32] << 16 | data[33] << 24;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	331e      	adds	r3, #30
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	461a      	mov	r2, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	331f      	adds	r3, #31
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	021b      	lsls	r3, r3, #8
 800304e:	431a      	orrs	r2, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	3320      	adds	r3, #32
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	041b      	lsls	r3, r3, #16
 8003058:	431a      	orrs	r2, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	3321      	adds	r3, #33	; 0x21
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	061b      	lsls	r3, r3, #24
 8003062:	4313      	orrs	r3, r2
 8003064:	461a      	mov	r2, r3
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	61da      	str	r2, [r3, #28]

//	posllh -> lon_f64 = posllh -> lon / 10000000.;
//	posllh -> lat_f64 = posllh -> lat / 10000000.;

}
 800306a:	bf00      	nop
 800306c:	370c      	adds	r7, #12
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
	...

08003078 <Quaternion_Update>:
float BNO080_Roll;
float BNO080_Pitch;
float BNO080_Yaw;

void Quaternion_Update(float* q)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b088      	sub	sp, #32
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
	float q1, q2, q3, q4;
	float norm;

	norm = invSqrt(q[0]*q[0] + q[1]*q[1] + q[2]*q[2] + q[3]*q[3]);    // normalize quaternion
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	ed93 7a00 	vldr	s14, [r3]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	edd3 7a00 	vldr	s15, [r3]
 800308c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	3304      	adds	r3, #4
 8003094:	edd3 6a00 	vldr	s13, [r3]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	3304      	adds	r3, #4
 800309c:	edd3 7a00 	vldr	s15, [r3]
 80030a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	3308      	adds	r3, #8
 80030ac:	edd3 6a00 	vldr	s13, [r3]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	3308      	adds	r3, #8
 80030b4:	edd3 7a00 	vldr	s15, [r3]
 80030b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	330c      	adds	r3, #12
 80030c4:	edd3 6a00 	vldr	s13, [r3]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	330c      	adds	r3, #12
 80030cc:	edd3 7a00 	vldr	s15, [r3]
 80030d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030d8:	eeb0 0a67 	vmov.f32	s0, s15
 80030dc:	f000 f91e 	bl	800331c <invSqrt>
 80030e0:	ed87 0a07 	vstr	s0, [r7, #28]
	
	q1 = q[0] * norm; //x
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	edd3 7a00 	vldr	s15, [r3]
 80030ea:	ed97 7a07 	vldr	s14, [r7, #28]
 80030ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030f2:	edc7 7a06 	vstr	s15, [r7, #24]
	q2 = q[1] * norm; //y
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	3304      	adds	r3, #4
 80030fa:	edd3 7a00 	vldr	s15, [r3]
 80030fe:	ed97 7a07 	vldr	s14, [r7, #28]
 8003102:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003106:	edc7 7a05 	vstr	s15, [r7, #20]
	q3 = q[2] * norm; //z
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	3308      	adds	r3, #8
 800310e:	edd3 7a00 	vldr	s15, [r3]
 8003112:	ed97 7a07 	vldr	s14, [r7, #28]
 8003116:	ee67 7a27 	vmul.f32	s15, s14, s15
 800311a:	edc7 7a04 	vstr	s15, [r7, #16]
	q4 = q[3] * norm; //w
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	330c      	adds	r3, #12
 8003122:	edd3 7a00 	vldr	s15, [r3]
 8003126:	ed97 7a07 	vldr	s14, [r7, #28]
 800312a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800312e:	edc7 7a03 	vstr	s15, [r7, #12]

	BNO080_Pitch = atan2f(2.0f * (q2*q3 + q1*q4), q1*q1 + q2*q2 - q3*q3 - q4*q4);
 8003132:	ed97 7a05 	vldr	s14, [r7, #20]
 8003136:	edd7 7a04 	vldr	s15, [r7, #16]
 800313a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800313e:	edd7 6a06 	vldr	s13, [r7, #24]
 8003142:	edd7 7a03 	vldr	s15, [r7, #12]
 8003146:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800314a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800314e:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8003152:	ed97 7a06 	vldr	s14, [r7, #24]
 8003156:	edd7 7a06 	vldr	s15, [r7, #24]
 800315a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800315e:	edd7 6a05 	vldr	s13, [r7, #20]
 8003162:	edd7 7a05 	vldr	s15, [r7, #20]
 8003166:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800316a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800316e:	edd7 6a04 	vldr	s13, [r7, #16]
 8003172:	edd7 7a04 	vldr	s15, [r7, #16]
 8003176:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800317a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800317e:	edd7 6a03 	vldr	s13, [r7, #12]
 8003182:	edd7 7a03 	vldr	s15, [r7, #12]
 8003186:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800318a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800318e:	eef0 0a67 	vmov.f32	s1, s15
 8003192:	eeb0 0a46 	vmov.f32	s0, s12
 8003196:	f00b f8ad 	bl	800e2f4 <atan2f>
 800319a:	eef0 7a40 	vmov.f32	s15, s0
 800319e:	4b59      	ldr	r3, [pc, #356]	; (8003304 <Quaternion_Update+0x28c>)
 80031a0:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Roll  = -asinf(2.0f * (q2*q4 - q1*q3));
 80031a4:	ed97 7a05 	vldr	s14, [r7, #20]
 80031a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80031ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031b0:	edd7 6a06 	vldr	s13, [r7, #24]
 80031b4:	edd7 7a04 	vldr	s15, [r7, #16]
 80031b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031c0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80031c4:	eeb0 0a67 	vmov.f32	s0, s15
 80031c8:	f00b f83c 	bl	800e244 <asinf>
 80031cc:	eef0 7a40 	vmov.f32	s15, s0
 80031d0:	eef1 7a67 	vneg.f32	s15, s15
 80031d4:	4b4c      	ldr	r3, [pc, #304]	; (8003308 <Quaternion_Update+0x290>)
 80031d6:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Yaw   = atan2f(2.0f * (q1*q2 + q3*q4), q1*q1 - q2*q2 - q3*q3 + q4*q4);
 80031da:	ed97 7a06 	vldr	s14, [r7, #24]
 80031de:	edd7 7a05 	vldr	s15, [r7, #20]
 80031e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031e6:	edd7 6a04 	vldr	s13, [r7, #16]
 80031ea:	edd7 7a03 	vldr	s15, [r7, #12]
 80031ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031f6:	ee37 6aa7 	vadd.f32	s12, s15, s15
 80031fa:	ed97 7a06 	vldr	s14, [r7, #24]
 80031fe:	edd7 7a06 	vldr	s15, [r7, #24]
 8003202:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003206:	edd7 6a05 	vldr	s13, [r7, #20]
 800320a:	edd7 7a05 	vldr	s15, [r7, #20]
 800320e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003212:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003216:	edd7 6a04 	vldr	s13, [r7, #16]
 800321a:	edd7 7a04 	vldr	s15, [r7, #16]
 800321e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003222:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003226:	edd7 6a03 	vldr	s13, [r7, #12]
 800322a:	edd7 7a03 	vldr	s15, [r7, #12]
 800322e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003232:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003236:	eef0 0a67 	vmov.f32	s1, s15
 800323a:	eeb0 0a46 	vmov.f32	s0, s12
 800323e:	f00b f859 	bl	800e2f4 <atan2f>
 8003242:	eef0 7a40 	vmov.f32	s15, s0
 8003246:	4b31      	ldr	r3, [pc, #196]	; (800330c <Quaternion_Update+0x294>)
 8003248:	edc3 7a00 	vstr	s15, [r3]

	BNO080_Pitch *= _180_DIV_PI;
 800324c:	4b2d      	ldr	r3, [pc, #180]	; (8003304 <Quaternion_Update+0x28c>)
 800324e:	edd3 7a00 	vldr	s15, [r3]
 8003252:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8003310 <Quaternion_Update+0x298>
 8003256:	ee67 7a87 	vmul.f32	s15, s15, s14
 800325a:	4b2a      	ldr	r3, [pc, #168]	; (8003304 <Quaternion_Update+0x28c>)
 800325c:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Roll  *= _180_DIV_PI;
 8003260:	4b29      	ldr	r3, [pc, #164]	; (8003308 <Quaternion_Update+0x290>)
 8003262:	edd3 7a00 	vldr	s15, [r3]
 8003266:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8003310 <Quaternion_Update+0x298>
 800326a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800326e:	4b26      	ldr	r3, [pc, #152]	; (8003308 <Quaternion_Update+0x290>)
 8003270:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Yaw   *= _180_DIV_PI;
 8003274:	4b25      	ldr	r3, [pc, #148]	; (800330c <Quaternion_Update+0x294>)
 8003276:	edd3 7a00 	vldr	s15, [r3]
 800327a:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8003310 <Quaternion_Update+0x298>
 800327e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003282:	4b22      	ldr	r3, [pc, #136]	; (800330c <Quaternion_Update+0x294>)
 8003284:	edc3 7a00 	vstr	s15, [r3]
	
	if(BNO080_Yaw>=0)
 8003288:	4b20      	ldr	r3, [pc, #128]	; (800330c <Quaternion_Update+0x294>)
 800328a:	edd3 7a00 	vldr	s15, [r3]
 800328e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003296:	db0a      	blt.n	80032ae <Quaternion_Update+0x236>
		BNO080_Yaw = 360.f - BNO080_Yaw;
 8003298:	4b1c      	ldr	r3, [pc, #112]	; (800330c <Quaternion_Update+0x294>)
 800329a:	edd3 7a00 	vldr	s15, [r3]
 800329e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8003314 <Quaternion_Update+0x29c>
 80032a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032a6:	4b19      	ldr	r3, [pc, #100]	; (800330c <Quaternion_Update+0x294>)
 80032a8:	edc3 7a00 	vstr	s15, [r3]
 80032ac:	e007      	b.n	80032be <Quaternion_Update+0x246>
	else	
		BNO080_Yaw = -BNO080_Yaw;
 80032ae:	4b17      	ldr	r3, [pc, #92]	; (800330c <Quaternion_Update+0x294>)
 80032b0:	edd3 7a00 	vldr	s15, [r3]
 80032b4:	eef1 7a67 	vneg.f32	s15, s15
 80032b8:	4b14      	ldr	r3, [pc, #80]	; (800330c <Quaternion_Update+0x294>)
 80032ba:	edc3 7a00 	vstr	s15, [r3]
	
	
	if(BNO080_Pitch>=0)
 80032be:	4b11      	ldr	r3, [pc, #68]	; (8003304 <Quaternion_Update+0x28c>)
 80032c0:	edd3 7a00 	vldr	s15, [r3]
 80032c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80032c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032cc:	db0a      	blt.n	80032e4 <Quaternion_Update+0x26c>
		BNO080_Pitch = 180.f - BNO080_Pitch;
 80032ce:	4b0d      	ldr	r3, [pc, #52]	; (8003304 <Quaternion_Update+0x28c>)
 80032d0:	edd3 7a00 	vldr	s15, [r3]
 80032d4:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8003318 <Quaternion_Update+0x2a0>
 80032d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032dc:	4b09      	ldr	r3, [pc, #36]	; (8003304 <Quaternion_Update+0x28c>)
 80032de:	edc3 7a00 	vstr	s15, [r3]
	else
		BNO080_Pitch = -(BNO080_Pitch + 180.f);
}
 80032e2:	e00b      	b.n	80032fc <Quaternion_Update+0x284>
		BNO080_Pitch = -(BNO080_Pitch + 180.f);
 80032e4:	4b07      	ldr	r3, [pc, #28]	; (8003304 <Quaternion_Update+0x28c>)
 80032e6:	edd3 7a00 	vldr	s15, [r3]
 80032ea:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8003318 <Quaternion_Update+0x2a0>
 80032ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80032f2:	eef1 7a67 	vneg.f32	s15, s15
 80032f6:	4b03      	ldr	r3, [pc, #12]	; (8003304 <Quaternion_Update+0x28c>)
 80032f8:	edc3 7a00 	vstr	s15, [r3]
}
 80032fc:	bf00      	nop
 80032fe:	3720      	adds	r7, #32
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}
 8003304:	200003b0 	.word	0x200003b0
 8003308:	200003a8 	.word	0x200003a8
 800330c:	200003ac 	.word	0x200003ac
 8003310:	42652ee1 	.word	0x42652ee1
 8003314:	43b40000 	.word	0x43b40000
 8003318:	43340000 	.word	0x43340000

0800331c <invSqrt>:

// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x)
{
 800331c:	b480      	push	{r7}
 800331e:	b087      	sub	sp, #28
 8003320:	af00      	add	r7, sp, #0
 8003322:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 8003326:	edd7 7a01 	vldr	s15, [r7, #4]
 800332a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800332e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003332:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 800333a:	f107 0310 	add.w	r3, r7, #16
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	105a      	asrs	r2, r3, #1
 8003346:	4b12      	ldr	r3, [pc, #72]	; (8003390 <invSqrt+0x74>)
 8003348:	1a9b      	subs	r3, r3, r2
 800334a:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 800334c:	f107 030c 	add.w	r3, r7, #12
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8003354:	ed97 7a04 	vldr	s14, [r7, #16]
 8003358:	edd7 7a05 	vldr	s15, [r7, #20]
 800335c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003360:	edd7 7a04 	vldr	s15, [r7, #16]
 8003364:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003368:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800336c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003370:	edd7 7a04 	vldr	s15, [r7, #16]
 8003374:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003378:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	ee07 3a90 	vmov	s15, r3
}
 8003382:	eeb0 0a67 	vmov.f32	s0, s15
 8003386:	371c      	adds	r7, #28
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr
 8003390:	5f3759df 	.word	0x5f3759df

08003394 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800339a:	463b      	mov	r3, r7
 800339c:	2200      	movs	r2, #0
 800339e:	601a      	str	r2, [r3, #0]
 80033a0:	605a      	str	r2, [r3, #4]
 80033a2:	609a      	str	r2, [r3, #8]
 80033a4:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 80033a6:	4b21      	ldr	r3, [pc, #132]	; (800342c <MX_ADC1_Init+0x98>)
 80033a8:	4a21      	ldr	r2, [pc, #132]	; (8003430 <MX_ADC1_Init+0x9c>)
 80033aa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80033ac:	4b1f      	ldr	r3, [pc, #124]	; (800342c <MX_ADC1_Init+0x98>)
 80033ae:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80033b2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80033b4:	4b1d      	ldr	r3, [pc, #116]	; (800342c <MX_ADC1_Init+0x98>)
 80033b6:	2200      	movs	r2, #0
 80033b8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80033ba:	4b1c      	ldr	r3, [pc, #112]	; (800342c <MX_ADC1_Init+0x98>)
 80033bc:	2200      	movs	r2, #0
 80033be:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80033c0:	4b1a      	ldr	r3, [pc, #104]	; (800342c <MX_ADC1_Init+0x98>)
 80033c2:	2201      	movs	r2, #1
 80033c4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80033c6:	4b19      	ldr	r3, [pc, #100]	; (800342c <MX_ADC1_Init+0x98>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80033ce:	4b17      	ldr	r3, [pc, #92]	; (800342c <MX_ADC1_Init+0x98>)
 80033d0:	2200      	movs	r2, #0
 80033d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80033d4:	4b15      	ldr	r3, [pc, #84]	; (800342c <MX_ADC1_Init+0x98>)
 80033d6:	4a17      	ldr	r2, [pc, #92]	; (8003434 <MX_ADC1_Init+0xa0>)
 80033d8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80033da:	4b14      	ldr	r3, [pc, #80]	; (800342c <MX_ADC1_Init+0x98>)
 80033dc:	2200      	movs	r2, #0
 80033de:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80033e0:	4b12      	ldr	r3, [pc, #72]	; (800342c <MX_ADC1_Init+0x98>)
 80033e2:	2201      	movs	r2, #1
 80033e4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80033e6:	4b11      	ldr	r3, [pc, #68]	; (800342c <MX_ADC1_Init+0x98>)
 80033e8:	2201      	movs	r2, #1
 80033ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80033ee:	4b0f      	ldr	r3, [pc, #60]	; (800342c <MX_ADC1_Init+0x98>)
 80033f0:	2201      	movs	r2, #1
 80033f2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80033f4:	480d      	ldr	r0, [pc, #52]	; (800342c <MX_ADC1_Init+0x98>)
 80033f6:	f003 fd3b 	bl	8006e70 <HAL_ADC_Init>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d001      	beq.n	8003404 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8003400:	f002 fae6 	bl	80059d0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8003404:	2308      	movs	r3, #8
 8003406:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003408:	2301      	movs	r3, #1
 800340a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800340c:	2307      	movs	r3, #7
 800340e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003410:	463b      	mov	r3, r7
 8003412:	4619      	mov	r1, r3
 8003414:	4805      	ldr	r0, [pc, #20]	; (800342c <MX_ADC1_Init+0x98>)
 8003416:	f003 fe7f 	bl	8007118 <HAL_ADC_ConfigChannel>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d001      	beq.n	8003424 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8003420:	f002 fad6 	bl	80059d0 <Error_Handler>
  }

}
 8003424:	bf00      	nop
 8003426:	3710      	adds	r7, #16
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}
 800342c:	200003b4 	.word	0x200003b4
 8003430:	40012000 	.word	0x40012000
 8003434:	0f000001 	.word	0x0f000001

08003438 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b08a      	sub	sp, #40	; 0x28
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003440:	f107 0314 	add.w	r3, r7, #20
 8003444:	2200      	movs	r2, #0
 8003446:	601a      	str	r2, [r3, #0]
 8003448:	605a      	str	r2, [r3, #4]
 800344a:	609a      	str	r2, [r3, #8]
 800344c:	60da      	str	r2, [r3, #12]
 800344e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a2e      	ldr	r2, [pc, #184]	; (8003510 <HAL_ADC_MspInit+0xd8>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d156      	bne.n	8003508 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800345a:	2300      	movs	r3, #0
 800345c:	613b      	str	r3, [r7, #16]
 800345e:	4b2d      	ldr	r3, [pc, #180]	; (8003514 <HAL_ADC_MspInit+0xdc>)
 8003460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003462:	4a2c      	ldr	r2, [pc, #176]	; (8003514 <HAL_ADC_MspInit+0xdc>)
 8003464:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003468:	6453      	str	r3, [r2, #68]	; 0x44
 800346a:	4b2a      	ldr	r3, [pc, #168]	; (8003514 <HAL_ADC_MspInit+0xdc>)
 800346c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800346e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003472:	613b      	str	r3, [r7, #16]
 8003474:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003476:	2300      	movs	r3, #0
 8003478:	60fb      	str	r3, [r7, #12]
 800347a:	4b26      	ldr	r3, [pc, #152]	; (8003514 <HAL_ADC_MspInit+0xdc>)
 800347c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347e:	4a25      	ldr	r2, [pc, #148]	; (8003514 <HAL_ADC_MspInit+0xdc>)
 8003480:	f043 0302 	orr.w	r3, r3, #2
 8003484:	6313      	str	r3, [r2, #48]	; 0x30
 8003486:	4b23      	ldr	r3, [pc, #140]	; (8003514 <HAL_ADC_MspInit+0xdc>)
 8003488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348a:	f003 0302 	and.w	r3, r3, #2
 800348e:	60fb      	str	r3, [r7, #12]
 8003490:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PB0     ------> ADC1_IN8 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003492:	2301      	movs	r3, #1
 8003494:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003496:	2303      	movs	r3, #3
 8003498:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800349a:	2300      	movs	r3, #0
 800349c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800349e:	f107 0314 	add.w	r3, r7, #20
 80034a2:	4619      	mov	r1, r3
 80034a4:	481c      	ldr	r0, [pc, #112]	; (8003518 <HAL_ADC_MspInit+0xe0>)
 80034a6:	f004 fd79 	bl	8007f9c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80034aa:	4b1c      	ldr	r3, [pc, #112]	; (800351c <HAL_ADC_MspInit+0xe4>)
 80034ac:	4a1c      	ldr	r2, [pc, #112]	; (8003520 <HAL_ADC_MspInit+0xe8>)
 80034ae:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80034b0:	4b1a      	ldr	r3, [pc, #104]	; (800351c <HAL_ADC_MspInit+0xe4>)
 80034b2:	2200      	movs	r2, #0
 80034b4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80034b6:	4b19      	ldr	r3, [pc, #100]	; (800351c <HAL_ADC_MspInit+0xe4>)
 80034b8:	2200      	movs	r2, #0
 80034ba:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80034bc:	4b17      	ldr	r3, [pc, #92]	; (800351c <HAL_ADC_MspInit+0xe4>)
 80034be:	2200      	movs	r2, #0
 80034c0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_DISABLE;
 80034c2:	4b16      	ldr	r3, [pc, #88]	; (800351c <HAL_ADC_MspInit+0xe4>)
 80034c4:	2200      	movs	r2, #0
 80034c6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80034c8:	4b14      	ldr	r3, [pc, #80]	; (800351c <HAL_ADC_MspInit+0xe4>)
 80034ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80034ce:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80034d0:	4b12      	ldr	r3, [pc, #72]	; (800351c <HAL_ADC_MspInit+0xe4>)
 80034d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80034d6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80034d8:	4b10      	ldr	r3, [pc, #64]	; (800351c <HAL_ADC_MspInit+0xe4>)
 80034da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034de:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80034e0:	4b0e      	ldr	r3, [pc, #56]	; (800351c <HAL_ADC_MspInit+0xe4>)
 80034e2:	2200      	movs	r2, #0
 80034e4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80034e6:	4b0d      	ldr	r3, [pc, #52]	; (800351c <HAL_ADC_MspInit+0xe4>)
 80034e8:	2200      	movs	r2, #0
 80034ea:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80034ec:	480b      	ldr	r0, [pc, #44]	; (800351c <HAL_ADC_MspInit+0xe4>)
 80034ee:	f004 f9c5 	bl	800787c <HAL_DMA_Init>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d001      	beq.n	80034fc <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 80034f8:	f002 fa6a 	bl	80059d0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4a07      	ldr	r2, [pc, #28]	; (800351c <HAL_ADC_MspInit+0xe4>)
 8003500:	639a      	str	r2, [r3, #56]	; 0x38
 8003502:	4a06      	ldr	r2, [pc, #24]	; (800351c <HAL_ADC_MspInit+0xe4>)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8003508:	bf00      	nop
 800350a:	3728      	adds	r7, #40	; 0x28
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}
 8003510:	40012000 	.word	0x40012000
 8003514:	40023800 	.word	0x40023800
 8003518:	40020400 	.word	0x40020400
 800351c:	200003fc 	.word	0x200003fc
 8003520:	40026410 	.word	0x40026410

08003524 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800352a:	2300      	movs	r3, #0
 800352c:	607b      	str	r3, [r7, #4]
 800352e:	4b0c      	ldr	r3, [pc, #48]	; (8003560 <MX_DMA_Init+0x3c>)
 8003530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003532:	4a0b      	ldr	r2, [pc, #44]	; (8003560 <MX_DMA_Init+0x3c>)
 8003534:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003538:	6313      	str	r3, [r2, #48]	; 0x30
 800353a:	4b09      	ldr	r3, [pc, #36]	; (8003560 <MX_DMA_Init+0x3c>)
 800353c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003542:	607b      	str	r3, [r7, #4]
 8003544:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8003546:	2200      	movs	r2, #0
 8003548:	2100      	movs	r1, #0
 800354a:	2038      	movs	r0, #56	; 0x38
 800354c:	f004 f95f 	bl	800780e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003550:	2038      	movs	r0, #56	; 0x38
 8003552:	f004 f978 	bl	8007846 <HAL_NVIC_EnableIRQ>

}
 8003556:	bf00      	nop
 8003558:	3708      	adds	r7, #8
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	40023800 	.word	0x40023800

08003564 <LL_GPIO_SetOutputPin>:
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	683a      	ldr	r2, [r7, #0]
 8003572:	619a      	str	r2, [r3, #24]
}
 8003574:	bf00      	nop
 8003576:	370c      	adds	r7, #12
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <LL_GPIO_ResetOutputPin>:
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	041a      	lsls	r2, r3, #16
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	619a      	str	r2, [r3, #24]
}
 8003592:	bf00      	nop
 8003594:	370c      	adds	r7, #12
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr
	...

080035a0 <LL_AHB1_GRP1_EnableClock>:
{
 80035a0:	b480      	push	{r7}
 80035a2:	b085      	sub	sp, #20
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80035a8:	4b08      	ldr	r3, [pc, #32]	; (80035cc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80035aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035ac:	4907      	ldr	r1, [pc, #28]	; (80035cc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80035b4:	4b05      	ldr	r3, [pc, #20]	; (80035cc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80035b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4013      	ands	r3, r2
 80035bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80035be:	68fb      	ldr	r3, [r7, #12]
}
 80035c0:	bf00      	nop
 80035c2:	3714      	adds	r7, #20
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr
 80035cc:	40023800 	.word	0x40023800

080035d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b086      	sub	sp, #24
 80035d4:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035d6:	463b      	mov	r3, r7
 80035d8:	2200      	movs	r2, #0
 80035da:	601a      	str	r2, [r3, #0]
 80035dc:	605a      	str	r2, [r3, #4]
 80035de:	609a      	str	r2, [r3, #8]
 80035e0:	60da      	str	r2, [r3, #12]
 80035e2:	611a      	str	r2, [r3, #16]
 80035e4:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80035e6:	2004      	movs	r0, #4
 80035e8:	f7ff ffda 	bl	80035a0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 80035ec:	2080      	movs	r0, #128	; 0x80
 80035ee:	f7ff ffd7 	bl	80035a0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80035f2:	2001      	movs	r0, #1
 80035f4:	f7ff ffd4 	bl	80035a0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80035f8:	2002      	movs	r0, #2
 80035fa:	f7ff ffd1 	bl	80035a0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 80035fe:	2008      	movs	r0, #8
 8003600:	f7ff ffce 	bl	80035a0 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_13);
 8003604:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003608:	482e      	ldr	r0, [pc, #184]	; (80036c4 <MX_GPIO_Init+0xf4>)
 800360a:	f7ff ffab 	bl	8003564 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_4 
 800360e:	f240 2117 	movw	r1, #535	; 0x217
 8003612:	482c      	ldr	r0, [pc, #176]	; (80036c4 <MX_GPIO_Init+0xf4>)
 8003614:	f7ff ffb4 	bl	8003580 <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_9);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_12|LL_GPIO_PIN_6);
 8003618:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800361c:	482a      	ldr	r0, [pc, #168]	; (80036c8 <MX_GPIO_Init+0xf8>)
 800361e:	f7ff ffaf 	bl	8003580 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8003622:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003626:	4829      	ldr	r0, [pc, #164]	; (80036cc <MX_GPIO_Init+0xfc>)
 8003628:	f7ff ffaa 	bl	8003580 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2 
 800362c:	f242 2317 	movw	r3, #8727	; 0x2217
 8003630:	603b      	str	r3, [r7, #0]
                          |LL_GPIO_PIN_4|LL_GPIO_PIN_9;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8003632:	2301      	movs	r3, #1
 8003634:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003636:	2300      	movs	r3, #0
 8003638:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800363a:	2300      	movs	r3, #0
 800363c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800363e:	2300      	movs	r3, #0
 8003640:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003642:	463b      	mov	r3, r7
 8003644:	4619      	mov	r1, r3
 8003646:	481f      	ldr	r0, [pc, #124]	; (80036c4 <MX_GPIO_Init+0xf4>)
 8003648:	f007 fad5 	bl	800abf6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_8;
 800364c:	f44f 7390 	mov.w	r3, #288	; 0x120
 8003650:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8003652:	2300      	movs	r3, #0
 8003654:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003656:	2300      	movs	r3, #0
 8003658:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800365a:	463b      	mov	r3, r7
 800365c:	4619      	mov	r1, r3
 800365e:	4819      	ldr	r0, [pc, #100]	; (80036c4 <MX_GPIO_Init+0xf4>)
 8003660:	f007 fac9 	bl	800abf6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12|LL_GPIO_PIN_6;
 8003664:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 8003668:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800366a:	2301      	movs	r3, #1
 800366c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800366e:	2300      	movs	r3, #0
 8003670:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003672:	2300      	movs	r3, #0
 8003674:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003676:	2300      	movs	r3, #0
 8003678:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800367a:	463b      	mov	r3, r7
 800367c:	4619      	mov	r1, r3
 800367e:	4812      	ldr	r0, [pc, #72]	; (80036c8 <MX_GPIO_Init+0xf8>)
 8003680:	f007 fab9 	bl	800abf6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8003684:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003688:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800368a:	2301      	movs	r3, #1
 800368c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800368e:	2300      	movs	r3, #0
 8003690:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003692:	2300      	movs	r3, #0
 8003694:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003696:	2300      	movs	r3, #0
 8003698:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800369a:	463b      	mov	r3, r7
 800369c:	4619      	mov	r1, r3
 800369e:	480b      	ldr	r0, [pc, #44]	; (80036cc <MX_GPIO_Init+0xfc>)
 80036a0:	f007 faa9 	bl	800abf6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 80036a4:	2380      	movs	r3, #128	; 0x80
 80036a6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80036a8:	2300      	movs	r3, #0
 80036aa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80036ac:	2300      	movs	r3, #0
 80036ae:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036b0:	463b      	mov	r3, r7
 80036b2:	4619      	mov	r1, r3
 80036b4:	4804      	ldr	r0, [pc, #16]	; (80036c8 <MX_GPIO_Init+0xf8>)
 80036b6:	f007 fa9e 	bl	800abf6 <LL_GPIO_Init>

}
 80036ba:	bf00      	nop
 80036bc:	3718      	adds	r7, #24
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	40020800 	.word	0x40020800
 80036c8:	40020400 	.word	0x40020400
 80036cc:	40020000 	.word	0x40020000

080036d0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80036d4:	4b12      	ldr	r3, [pc, #72]	; (8003720 <MX_I2C1_Init+0x50>)
 80036d6:	4a13      	ldr	r2, [pc, #76]	; (8003724 <MX_I2C1_Init+0x54>)
 80036d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80036da:	4b11      	ldr	r3, [pc, #68]	; (8003720 <MX_I2C1_Init+0x50>)
 80036dc:	4a12      	ldr	r2, [pc, #72]	; (8003728 <MX_I2C1_Init+0x58>)
 80036de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80036e0:	4b0f      	ldr	r3, [pc, #60]	; (8003720 <MX_I2C1_Init+0x50>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80036e6:	4b0e      	ldr	r3, [pc, #56]	; (8003720 <MX_I2C1_Init+0x50>)
 80036e8:	2200      	movs	r2, #0
 80036ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80036ec:	4b0c      	ldr	r3, [pc, #48]	; (8003720 <MX_I2C1_Init+0x50>)
 80036ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80036f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80036f4:	4b0a      	ldr	r3, [pc, #40]	; (8003720 <MX_I2C1_Init+0x50>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80036fa:	4b09      	ldr	r3, [pc, #36]	; (8003720 <MX_I2C1_Init+0x50>)
 80036fc:	2200      	movs	r2, #0
 80036fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003700:	4b07      	ldr	r3, [pc, #28]	; (8003720 <MX_I2C1_Init+0x50>)
 8003702:	2200      	movs	r2, #0
 8003704:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003706:	4b06      	ldr	r3, [pc, #24]	; (8003720 <MX_I2C1_Init+0x50>)
 8003708:	2200      	movs	r2, #0
 800370a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800370c:	4804      	ldr	r0, [pc, #16]	; (8003720 <MX_I2C1_Init+0x50>)
 800370e:	f004 fddf 	bl	80082d0 <HAL_I2C_Init>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d001      	beq.n	800371c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003718:	f002 f95a 	bl	80059d0 <Error_Handler>
  }

}
 800371c:	bf00      	nop
 800371e:	bd80      	pop	{r7, pc}
 8003720:	2000045c 	.word	0x2000045c
 8003724:	40005400 	.word	0x40005400
 8003728:	00061a80 	.word	0x00061a80

0800372c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b08a      	sub	sp, #40	; 0x28
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003734:	f107 0314 	add.w	r3, r7, #20
 8003738:	2200      	movs	r2, #0
 800373a:	601a      	str	r2, [r3, #0]
 800373c:	605a      	str	r2, [r3, #4]
 800373e:	609a      	str	r2, [r3, #8]
 8003740:	60da      	str	r2, [r3, #12]
 8003742:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a19      	ldr	r2, [pc, #100]	; (80037b0 <HAL_I2C_MspInit+0x84>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d12c      	bne.n	80037a8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800374e:	2300      	movs	r3, #0
 8003750:	613b      	str	r3, [r7, #16]
 8003752:	4b18      	ldr	r3, [pc, #96]	; (80037b4 <HAL_I2C_MspInit+0x88>)
 8003754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003756:	4a17      	ldr	r2, [pc, #92]	; (80037b4 <HAL_I2C_MspInit+0x88>)
 8003758:	f043 0302 	orr.w	r3, r3, #2
 800375c:	6313      	str	r3, [r2, #48]	; 0x30
 800375e:	4b15      	ldr	r3, [pc, #84]	; (80037b4 <HAL_I2C_MspInit+0x88>)
 8003760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003762:	f003 0302 	and.w	r3, r3, #2
 8003766:	613b      	str	r3, [r7, #16]
 8003768:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800376a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800376e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003770:	2312      	movs	r3, #18
 8003772:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003774:	2301      	movs	r3, #1
 8003776:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003778:	2303      	movs	r3, #3
 800377a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800377c:	2304      	movs	r3, #4
 800377e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003780:	f107 0314 	add.w	r3, r7, #20
 8003784:	4619      	mov	r1, r3
 8003786:	480c      	ldr	r0, [pc, #48]	; (80037b8 <HAL_I2C_MspInit+0x8c>)
 8003788:	f004 fc08 	bl	8007f9c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800378c:	2300      	movs	r3, #0
 800378e:	60fb      	str	r3, [r7, #12]
 8003790:	4b08      	ldr	r3, [pc, #32]	; (80037b4 <HAL_I2C_MspInit+0x88>)
 8003792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003794:	4a07      	ldr	r2, [pc, #28]	; (80037b4 <HAL_I2C_MspInit+0x88>)
 8003796:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800379a:	6413      	str	r3, [r2, #64]	; 0x40
 800379c:	4b05      	ldr	r3, [pc, #20]	; (80037b4 <HAL_I2C_MspInit+0x88>)
 800379e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037a4:	60fb      	str	r3, [r7, #12]
 80037a6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80037a8:	bf00      	nop
 80037aa:	3728      	adds	r7, #40	; 0x28
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	40005400 	.word	0x40005400
 80037b4:	40023800 	.word	0x40023800
 80037b8:	40020400 	.word	0x40020400

080037bc <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f043 0201 	orr.w	r2, r3, #1
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	601a      	str	r2, [r3, #0]
}
 80037d0:	bf00      	nop
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a1a      	ldr	r2, [r3, #32]
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	431a      	orrs	r2, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	621a      	str	r2, [r3, #32]
}
 80037f2:	bf00      	nop
 80037f4:	370c      	adds	r7, #12
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr

080037fe <LL_TIM_CC_DisableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 80037fe:	b480      	push	{r7}
 8003800:	b083      	sub	sp, #12
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
 8003806:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6a1a      	ldr	r2, [r3, #32]
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	43db      	mvns	r3, r3
 8003810:	401a      	ands	r2, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	621a      	str	r2, [r3, #32]
}
 8003816:	bf00      	nop
 8003818:	370c      	adds	r7, #12
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr

08003822 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8003822:	b480      	push	{r7}
 8003824:	b083      	sub	sp, #12
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	f043 0201 	orr.w	r2, r3, #1
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	60da      	str	r2, [r3, #12]
}
 8003836:	bf00      	nop
 8003838:	370c      	adds	r7, #12
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr

08003842 <LL_USART_IsActiveFlag_TXE>:
{
 8003842:	b480      	push	{r7}
 8003844:	b083      	sub	sp, #12
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003852:	2b80      	cmp	r3, #128	; 0x80
 8003854:	bf0c      	ite	eq
 8003856:	2301      	moveq	r3, #1
 8003858:	2300      	movne	r3, #0
 800385a:	b2db      	uxtb	r3, r3
}
 800385c:	4618      	mov	r0, r3
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <LL_USART_EnableIT_RXNE>:
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	f043 0220 	orr.w	r2, r3, #32
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	60da      	str	r2, [r3, #12]
}
 800387c:	bf00      	nop
 800387e:	370c      	adds	r7, #12
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <LL_USART_TransmitData8>:
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	460b      	mov	r3, r1
 8003892:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8003894:	78fa      	ldrb	r2, [r7, #3]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	605a      	str	r2, [r3, #4]
}
 800389a:	bf00      	nop
 800389c:	370c      	adds	r7, #12
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr

080038a6 <LL_GPIO_SetOutputPin>:
{
 80038a6:	b480      	push	{r7}
 80038a8:	b083      	sub	sp, #12
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	6078      	str	r0, [r7, #4]
 80038ae:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	683a      	ldr	r2, [r7, #0]
 80038b4:	619a      	str	r2, [r3, #24]
}
 80038b6:	bf00      	nop
 80038b8:	370c      	adds	r7, #12
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr

080038c2 <LL_GPIO_ResetOutputPin>:
{
 80038c2:	b480      	push	{r7}
 80038c4:	b083      	sub	sp, #12
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	6078      	str	r0, [r7, #4]
 80038ca:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	041a      	lsls	r2, r3, #16
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	619a      	str	r2, [r3, #24]
}
 80038d4:	bf00      	nop
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr

080038e0 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->ODR, READ_REG(GPIOx->ODR) ^ PinMask);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	695a      	ldr	r2, [r3, #20]
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	405a      	eors	r2, r3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	615a      	str	r2, [r3, #20]
}
 80038f6:	bf00      	nop
 80038f8:	370c      	adds	r7, #12
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr
	...

08003904 <_write>:

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
int _write(int file, char *p, int len) {
 8003904:	b580      	push	{r7, lr}
 8003906:	b086      	sub	sp, #24
 8003908:	af00      	add	r7, sp, #0
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	60b9      	str	r1, [r7, #8]
 800390e:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < len; i++) {
 8003910:	2300      	movs	r3, #0
 8003912:	617b      	str	r3, [r7, #20]
 8003914:	e011      	b.n	800393a <_write+0x36>
		while (!LL_USART_IsActiveFlag_TXE(USART6))
 8003916:	bf00      	nop
 8003918:	480c      	ldr	r0, [pc, #48]	; (800394c <_write+0x48>)
 800391a:	f7ff ff92 	bl	8003842 <LL_USART_IsActiveFlag_TXE>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d0f9      	beq.n	8003918 <_write+0x14>
			;
		LL_USART_TransmitData8(USART6, *(p + i));
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	68ba      	ldr	r2, [r7, #8]
 8003928:	4413      	add	r3, r2
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	4619      	mov	r1, r3
 800392e:	4807      	ldr	r0, [pc, #28]	; (800394c <_write+0x48>)
 8003930:	f7ff ffaa 	bl	8003888 <LL_USART_TransmitData8>
	for (int i = 0; i < len; i++) {
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	3301      	adds	r3, #1
 8003938:	617b      	str	r3, [r7, #20]
 800393a:	697a      	ldr	r2, [r7, #20]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	429a      	cmp	r2, r3
 8003940:	dbe9      	blt.n	8003916 <_write+0x12>
	}
	return len;
 8003942:	687b      	ldr	r3, [r7, #4]
}
 8003944:	4618      	mov	r0, r3
 8003946:	3718      	adds	r7, #24
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}
 800394c:	40011400 	.word	0x40011400

08003950 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8003950:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003952:	b099      	sub	sp, #100	; 0x64
 8003954:	af02      	add	r7, sp, #8
	/* USER CODE BEGIN 1 */
	float q[4];
	float quatRadianAccuracy;
	unsigned char buf_read[16] = {1};
 8003956:	f107 0318 	add.w	r3, r7, #24
 800395a:	2200      	movs	r2, #0
 800395c:	601a      	str	r2, [r3, #0]
 800395e:	605a      	str	r2, [r3, #4]
 8003960:	609a      	str	r2, [r3, #8]
 8003962:	60da      	str	r2, [r3, #12]
 8003964:	2301      	movs	r3, #1
 8003966:	763b      	strb	r3, [r7, #24]
	unsigned char buf_write[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8003968:	4baa      	ldr	r3, [pc, #680]	; (8003c14 <main+0x2c4>)
 800396a:	f107 0408 	add.w	r4, r7, #8
 800396e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003970:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	unsigned short adcVal;

	short gyro_x_offset = 8;
 8003974:	2308      	movs	r3, #8
 8003976:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	short gyro_y_offset = -23;
 800397a:	f64f 73e9 	movw	r3, #65513	; 0xffe9
 800397e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
	short gyro_z_offset = -2;
 8003982:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8003986:	87fb      	strh	r3, [r7, #62]	; 0x3e
	unsigned char motor_arming_flag = 0;
 8003988:	2300      	movs	r3, #0
 800398a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	unsigned short iBus_SwA_Prev = 0;
 800398e:	2300      	movs	r3, #0
 8003990:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	unsigned char iBus_rx_cnt = 0;
 8003994:	2300      	movs	r3, #0
 8003996:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800399a:	f003 f9d5 	bl	8006d48 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800399e:	f001 facf 	bl	8004f40 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80039a2:	f7ff fe15 	bl	80035d0 <MX_GPIO_Init>
	MX_DMA_Init();
 80039a6:	f7ff fdbd 	bl	8003524 <MX_DMA_Init>
	MX_TIM3_Init();
 80039aa:	f002 fda1 	bl	80064f0 <MX_TIM3_Init>
	MX_USART6_UART_Init();
 80039ae:	f003 f8f1 	bl	8006b94 <MX_USART6_UART_Init>
	MX_SPI2_Init();
 80039b2:	f002 f8c1 	bl	8005b38 <MX_SPI2_Init>
	MX_SPI1_Init();
 80039b6:	f002 f86d 	bl	8005a94 <MX_SPI1_Init>
	MX_SPI3_Init();
 80039ba:	f002 f911 	bl	8005be0 <MX_SPI3_Init>
	MX_UART4_Init();
 80039be:	f002 ffe5 	bl	800698c <MX_UART4_Init>
	MX_UART5_Init();
 80039c2:	f003 f845 	bl	8006a50 <MX_UART5_Init>
	MX_TIM5_Init();
 80039c6:	f002 fe01 	bl	80065cc <MX_TIM5_Init>
	MX_I2C1_Init();
 80039ca:	f7ff fe81 	bl	80036d0 <MX_I2C1_Init>
	MX_ADC1_Init();
 80039ce:	f7ff fce1 	bl	8003394 <MX_ADC1_Init>
	MX_USART1_UART_Init(); //3DR Telemetry
 80039d2:	f003 f8b5 	bl	8006b40 <MX_USART1_UART_Init>
	MX_TIM7_Init();
 80039d6:	f002 fea7 	bl	8006728 <MX_TIM7_Init>
	/* USER CODE BEGIN 2 */
	//TIM3 Initialization - Buzzer
	LL_TIM_EnableCounter(TIM3);
 80039da:	488f      	ldr	r0, [pc, #572]	; (8003c18 <main+0x2c8>)
 80039dc:	f7ff feee 	bl	80037bc <LL_TIM_EnableCounter>

	//UART4, 5, 6 Initialization
	//Debug UART
	LL_USART_EnableIT_RXNE(USART6);
 80039e0:	488e      	ldr	r0, [pc, #568]	; (8003c1c <main+0x2cc>)
 80039e2:	f7ff ff41 	bl	8003868 <LL_USART_EnableIT_RXNE>
	//GPS
	LL_USART_EnableIT_RXNE(UART4);
 80039e6:	488e      	ldr	r0, [pc, #568]	; (8003c20 <main+0x2d0>)
 80039e8:	f7ff ff3e 	bl	8003868 <LL_USART_EnableIT_RXNE>
	//FS-iA6B
	LL_USART_EnableIT_RXNE(UART5);
 80039ec:	488d      	ldr	r0, [pc, #564]	; (8003c24 <main+0x2d4>)
 80039ee:	f7ff ff3b 	bl	8003868 <LL_USART_EnableIT_RXNE>

	//TIM5 Initialization - Motor
	LL_TIM_EnableCounter(TIM5);
 80039f2:	488d      	ldr	r0, [pc, #564]	; (8003c28 <main+0x2d8>)
 80039f4:	f7ff fee2 	bl	80037bc <LL_TIM_EnableCounter>
	LL_TIM_CC_EnableChannel(TIM5, LL_TIM_CHANNEL_CH1);
 80039f8:	2101      	movs	r1, #1
 80039fa:	488b      	ldr	r0, [pc, #556]	; (8003c28 <main+0x2d8>)
 80039fc:	f7ff feee 	bl	80037dc <LL_TIM_CC_EnableChannel>
	LL_TIM_CC_EnableChannel(TIM5, LL_TIM_CHANNEL_CH2);
 8003a00:	2110      	movs	r1, #16
 8003a02:	4889      	ldr	r0, [pc, #548]	; (8003c28 <main+0x2d8>)
 8003a04:	f7ff feea 	bl	80037dc <LL_TIM_CC_EnableChannel>
	LL_TIM_CC_EnableChannel(TIM5, LL_TIM_CHANNEL_CH3);
 8003a08:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003a0c:	4886      	ldr	r0, [pc, #536]	; (8003c28 <main+0x2d8>)
 8003a0e:	f7ff fee5 	bl	80037dc <LL_TIM_CC_EnableChannel>
	LL_TIM_CC_EnableChannel(TIM5, LL_TIM_CHANNEL_CH4);
 8003a12:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003a16:	4884      	ldr	r0, [pc, #528]	; (8003c28 <main+0x2d8>)
 8003a18:	f7ff fee0 	bl	80037dc <LL_TIM_CC_EnableChannel>

	//Battery ADC
	HAL_ADC_Start_DMA(&hadc1, &adcVal, 1);
 8003a1c:	1dbb      	adds	r3, r7, #6
 8003a1e:	2201      	movs	r2, #1
 8003a20:	4619      	mov	r1, r3
 8003a22:	4882      	ldr	r0, [pc, #520]	; (8003c2c <main+0x2dc>)
 8003a24:	f003 fa68 	bl	8006ef8 <HAL_ADC_Start_DMA>

	//UART1 - HAL Rx Interrupt - 3DR Telemetry
	HAL_UART_Receive_IT(&huart1, &uart1_rx_data, 1); //3DR Telemetry
 8003a28:	2201      	movs	r2, #1
 8003a2a:	4981      	ldr	r1, [pc, #516]	; (8003c30 <main+0x2e0>)
 8003a2c:	4881      	ldr	r0, [pc, #516]	; (8003c34 <main+0x2e4>)
 8003a2e:	f006 f98c 	bl	8009d4a <HAL_UART_Receive_IT>

	//TIM7 Initialization for FC <-> GCS
	LL_TIM_EnableCounter(TIM7); //10Hz, 50Hz, 1kHz loop
 8003a32:	4881      	ldr	r0, [pc, #516]	; (8003c38 <main+0x2e8>)
 8003a34:	f7ff fec2 	bl	80037bc <LL_TIM_EnableCounter>
	LL_TIM_EnableIT_UPDATE(TIM7);
 8003a38:	487f      	ldr	r0, [pc, #508]	; (8003c38 <main+0x2e8>)
 8003a3a:	f7ff fef2 	bl	8003822 <LL_TIM_EnableIT_UPDATE>

	TIM3->PSC = 1000;
 8003a3e:	4b76      	ldr	r3, [pc, #472]	; (8003c18 <main+0x2c8>)
 8003a40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a44:	629a      	str	r2, [r3, #40]	; 0x28
	LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003a46:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003a4a:	4873      	ldr	r0, [pc, #460]	; (8003c18 <main+0x2c8>)
 8003a4c:	f7ff fec6 	bl	80037dc <LL_TIM_CC_EnableChannel>
	HAL_Delay(60);
 8003a50:	203c      	movs	r0, #60	; 0x3c
 8003a52:	f003 f9eb 	bl	8006e2c <HAL_Delay>
	LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003a56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003a5a:	486f      	ldr	r0, [pc, #444]	; (8003c18 <main+0x2c8>)
 8003a5c:	f7ff fecf 	bl	80037fe <LL_TIM_CC_DisableChannel>
	HAL_Delay(60);
 8003a60:	203c      	movs	r0, #60	; 0x3c
 8003a62:	f003 f9e3 	bl	8006e2c <HAL_Delay>
	LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003a66:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003a6a:	486b      	ldr	r0, [pc, #428]	; (8003c18 <main+0x2c8>)
 8003a6c:	f7ff feb6 	bl	80037dc <LL_TIM_CC_EnableChannel>
	HAL_Delay(60);
 8003a70:	203c      	movs	r0, #60	; 0x3c
 8003a72:	f003 f9db 	bl	8006e2c <HAL_Delay>
	LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003a76:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003a7a:	4867      	ldr	r0, [pc, #412]	; (8003c18 <main+0x2c8>)
 8003a7c:	f7ff febf 	bl	80037fe <LL_TIM_CC_DisableChannel>
	HAL_Delay(60);
 8003a80:	203c      	movs	r0, #60	; 0x3c
 8003a82:	f003 f9d3 	bl	8006e2c <HAL_Delay>

	printf("Checking sensor connection..\n");
 8003a86:	486d      	ldr	r0, [pc, #436]	; (8003c3c <main+0x2ec>)
 8003a88:	f008 fd22 	bl	800c4d0 <puts>

	//9DOF Initialization
	if (BNO080_Initialization() != 0) {
 8003a8c:	f7fd fd1a 	bl	80014c4 <BNO080_Initialization>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d03a      	beq.n	8003b0c <main+0x1bc>
		LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003a96:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003a9a:	485f      	ldr	r0, [pc, #380]	; (8003c18 <main+0x2c8>)
 8003a9c:	f7ff fe9e 	bl	80037dc <LL_TIM_CC_EnableChannel>
		TIM3->PSC = 1000;
 8003aa0:	4b5d      	ldr	r3, [pc, #372]	; (8003c18 <main+0x2c8>)
 8003aa2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003aa6:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(100);
 8003aa8:	2064      	movs	r0, #100	; 0x64
 8003aaa:	f003 f9bf 	bl	8006e2c <HAL_Delay>
		TIM3->PSC = 1500;
 8003aae:	4b5a      	ldr	r3, [pc, #360]	; (8003c18 <main+0x2c8>)
 8003ab0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003ab4:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(100);
 8003ab6:	2064      	movs	r0, #100	; 0x64
 8003ab8:	f003 f9b8 	bl	8006e2c <HAL_Delay>
		TIM3->PSC = 2000;
 8003abc:	4b56      	ldr	r3, [pc, #344]	; (8003c18 <main+0x2c8>)
 8003abe:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003ac2:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(100);
 8003ac4:	2064      	movs	r0, #100	; 0x64
 8003ac6:	f003 f9b1 	bl	8006e2c <HAL_Delay>
		LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003aca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003ace:	4852      	ldr	r0, [pc, #328]	; (8003c18 <main+0x2c8>)
 8003ad0:	f7ff fe95 	bl	80037fe <LL_TIM_CC_DisableChannel>

		printf("\nBNO080 failed. Program shutting down...");
 8003ad4:	485a      	ldr	r0, [pc, #360]	; (8003c40 <main+0x2f0>)
 8003ad6:	f008 fc87 	bl	800c3e8 <iprintf>

		while(1) {
			LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003ada:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003ade:	484e      	ldr	r0, [pc, #312]	; (8003c18 <main+0x2c8>)
 8003ae0:	f7ff fe8d 	bl	80037fe <LL_TIM_CC_DisableChannel>
			LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_0);
 8003ae4:	2101      	movs	r1, #1
 8003ae6:	4857      	ldr	r0, [pc, #348]	; (8003c44 <main+0x2f4>)
 8003ae8:	f7ff fefa 	bl	80038e0 <LL_GPIO_TogglePin>
			HAL_Delay(200);
 8003aec:	20c8      	movs	r0, #200	; 0xc8
 8003aee:	f003 f99d 	bl	8006e2c <HAL_Delay>
			LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003af2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003af6:	4848      	ldr	r0, [pc, #288]	; (8003c18 <main+0x2c8>)
 8003af8:	f7ff fe70 	bl	80037dc <LL_TIM_CC_EnableChannel>
			LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_0);
 8003afc:	2101      	movs	r1, #1
 8003afe:	4851      	ldr	r0, [pc, #324]	; (8003c44 <main+0x2f4>)
 8003b00:	f7ff feee 	bl	80038e0 <LL_GPIO_TogglePin>
			HAL_Delay(200);
 8003b04:	20c8      	movs	r0, #200	; 0xc8
 8003b06:	f003 f991 	bl	8006e2c <HAL_Delay>
			LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003b0a:	e7e6      	b.n	8003ada <main+0x18a>
		}
	}

	BNO080_enableRotationVector(2500); //400Hz, maximum value describing in datasheet
 8003b0c:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8003b10:	f7fd ffe9 	bl	8001ae6 <BNO080_enableRotationVector>

	//6DOF Initialization
	if(ICM20602_Initialization() != 0) {
 8003b14:	f7fe fc98 	bl	8002448 <ICM20602_Initialization>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d03a      	beq.n	8003b94 <main+0x244>
		LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003b1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003b22:	483d      	ldr	r0, [pc, #244]	; (8003c18 <main+0x2c8>)
 8003b24:	f7ff fe5a 	bl	80037dc <LL_TIM_CC_EnableChannel>
		TIM3->PSC = 1000;
 8003b28:	4b3b      	ldr	r3, [pc, #236]	; (8003c18 <main+0x2c8>)
 8003b2a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003b2e:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(100);
 8003b30:	2064      	movs	r0, #100	; 0x64
 8003b32:	f003 f97b 	bl	8006e2c <HAL_Delay>
		TIM3->PSC = 1500;
 8003b36:	4b38      	ldr	r3, [pc, #224]	; (8003c18 <main+0x2c8>)
 8003b38:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003b3c:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(100);
 8003b3e:	2064      	movs	r0, #100	; 0x64
 8003b40:	f003 f974 	bl	8006e2c <HAL_Delay>
		TIM3->PSC = 2000;
 8003b44:	4b34      	ldr	r3, [pc, #208]	; (8003c18 <main+0x2c8>)
 8003b46:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003b4a:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(100);
 8003b4c:	2064      	movs	r0, #100	; 0x64
 8003b4e:	f003 f96d 	bl	8006e2c <HAL_Delay>
		LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003b52:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003b56:	4830      	ldr	r0, [pc, #192]	; (8003c18 <main+0x2c8>)
 8003b58:	f7ff fe51 	bl	80037fe <LL_TIM_CC_DisableChannel>

		printf("\ICM-20602 failed. Program shutting down...");
 8003b5c:	483a      	ldr	r0, [pc, #232]	; (8003c48 <main+0x2f8>)
 8003b5e:	f008 fc43 	bl	800c3e8 <iprintf>

		while(1) {
			LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003b62:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003b66:	482c      	ldr	r0, [pc, #176]	; (8003c18 <main+0x2c8>)
 8003b68:	f7ff fe49 	bl	80037fe <LL_TIM_CC_DisableChannel>
			LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_1);
 8003b6c:	2102      	movs	r1, #2
 8003b6e:	4835      	ldr	r0, [pc, #212]	; (8003c44 <main+0x2f4>)
 8003b70:	f7ff feb6 	bl	80038e0 <LL_GPIO_TogglePin>
			HAL_Delay(200);
 8003b74:	20c8      	movs	r0, #200	; 0xc8
 8003b76:	f003 f959 	bl	8006e2c <HAL_Delay>
			LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003b7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003b7e:	4826      	ldr	r0, [pc, #152]	; (8003c18 <main+0x2c8>)
 8003b80:	f7ff fe2c 	bl	80037dc <LL_TIM_CC_EnableChannel>
			LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_1);
 8003b84:	2102      	movs	r1, #2
 8003b86:	482f      	ldr	r0, [pc, #188]	; (8003c44 <main+0x2f4>)
 8003b88:	f7ff feaa 	bl	80038e0 <LL_GPIO_TogglePin>
			HAL_Delay(200);
 8003b8c:	20c8      	movs	r0, #200	; 0xc8
 8003b8e:	f003 f94d 	bl	8006e2c <HAL_Delay>
			LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003b92:	e7e6      	b.n	8003b62 <main+0x212>
		}
	}

	if(LPS22HH_Initialization() != 0) {
 8003b94:	f7fe fee2 	bl	800295c <LPS22HH_Initialization>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d058      	beq.n	8003c50 <main+0x300>
		LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003b9e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003ba2:	481d      	ldr	r0, [pc, #116]	; (8003c18 <main+0x2c8>)
 8003ba4:	f7ff fe1a 	bl	80037dc <LL_TIM_CC_EnableChannel>
		TIM3->PSC = 1000;
 8003ba8:	4b1b      	ldr	r3, [pc, #108]	; (8003c18 <main+0x2c8>)
 8003baa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003bae:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(100);
 8003bb0:	2064      	movs	r0, #100	; 0x64
 8003bb2:	f003 f93b 	bl	8006e2c <HAL_Delay>
		TIM3->PSC = 1500;
 8003bb6:	4b18      	ldr	r3, [pc, #96]	; (8003c18 <main+0x2c8>)
 8003bb8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003bbc:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(100);
 8003bbe:	2064      	movs	r0, #100	; 0x64
 8003bc0:	f003 f934 	bl	8006e2c <HAL_Delay>
		TIM3->PSC = 2000;
 8003bc4:	4b14      	ldr	r3, [pc, #80]	; (8003c18 <main+0x2c8>)
 8003bc6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003bca:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(100);
 8003bcc:	2064      	movs	r0, #100	; 0x64
 8003bce:	f003 f92d 	bl	8006e2c <HAL_Delay>
		LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003bd2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003bd6:	4810      	ldr	r0, [pc, #64]	; (8003c18 <main+0x2c8>)
 8003bd8:	f7ff fe11 	bl	80037fe <LL_TIM_CC_DisableChannel>

		printf("\LPS22HH failed. Program shutting down...");
 8003bdc:	481b      	ldr	r0, [pc, #108]	; (8003c4c <main+0x2fc>)
 8003bde:	f008 fc03 	bl	800c3e8 <iprintf>

		while(1) {
			LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003be2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003be6:	480c      	ldr	r0, [pc, #48]	; (8003c18 <main+0x2c8>)
 8003be8:	f7ff fe09 	bl	80037fe <LL_TIM_CC_DisableChannel>
			LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_2);
 8003bec:	2104      	movs	r1, #4
 8003bee:	4815      	ldr	r0, [pc, #84]	; (8003c44 <main+0x2f4>)
 8003bf0:	f7ff fe76 	bl	80038e0 <LL_GPIO_TogglePin>
			HAL_Delay(200);
 8003bf4:	20c8      	movs	r0, #200	; 0xc8
 8003bf6:	f003 f919 	bl	8006e2c <HAL_Delay>
			LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003bfa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003bfe:	4806      	ldr	r0, [pc, #24]	; (8003c18 <main+0x2c8>)
 8003c00:	f7ff fdec 	bl	80037dc <LL_TIM_CC_EnableChannel>
			LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_2);
 8003c04:	2104      	movs	r1, #4
 8003c06:	480f      	ldr	r0, [pc, #60]	; (8003c44 <main+0x2f4>)
 8003c08:	f7ff fe6a 	bl	80038e0 <LL_GPIO_TogglePin>
			HAL_Delay(200);
 8003c0c:	20c8      	movs	r0, #200	; 0xc8
 8003c0e:	f003 f90d 	bl	8006e2c <HAL_Delay>
			LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003c12:	e7e6      	b.n	8003be2 <main+0x292>
 8003c14:	0800f488 	.word	0x0800f488
 8003c18:	40000400 	.word	0x40000400
 8003c1c:	40011400 	.word	0x40011400
 8003c20:	40004c00 	.word	0x40004c00
 8003c24:	40005000 	.word	0x40005000
 8003c28:	40000c00 	.word	0x40000c00
 8003c2c:	200003b4 	.word	0x200003b4
 8003c30:	20000216 	.word	0x20000216
 8003c34:	20000580 	.word	0x20000580
 8003c38:	40001400 	.word	0x40001400
 8003c3c:	0800f380 	.word	0x0800f380
 8003c40:	0800f3a0 	.word	0x0800f3a0
 8003c44:	40020800 	.word	0x40020800
 8003c48:	0800f3cc 	.word	0x0800f3cc
 8003c4c:	0800f3f8 	.word	0x0800f3f8
		}
	}

	printf("All sensors OK!\n\n");
 8003c50:	48c2      	ldr	r0, [pc, #776]	; (8003f5c <main+0x60c>)
 8003c52:	f008 fc3d 	bl	800c4d0 <puts>

	M8N_Initialization();
 8003c56:	f7ff f8f5 	bl	8002e44 <M8N_Initialization>

	//ICM20602 DC BIAS OFFSET CALIBRATION
	ICM20602_Writebyte(0x13, (gyro_x_offset * -2) >> 8);
 8003c5a:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 8003c5e:	4613      	mov	r3, r2
 8003c60:	07db      	lsls	r3, r3, #31
 8003c62:	1a9b      	subs	r3, r3, r2
 8003c64:	005b      	lsls	r3, r3, #1
 8003c66:	121b      	asrs	r3, r3, #8
 8003c68:	4619      	mov	r1, r3
 8003c6a:	2013      	movs	r0, #19
 8003c6c:	f7fe fbca 	bl	8002404 <ICM20602_Writebyte>
	ICM20602_Writebyte(0x14, (gyro_x_offset * -2));
 8003c70:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 8003c74:	4613      	mov	r3, r2
 8003c76:	07db      	lsls	r3, r3, #31
 8003c78:	1a9b      	subs	r3, r3, r2
 8003c7a:	005b      	lsls	r3, r3, #1
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	2014      	movs	r0, #20
 8003c80:	f7fe fbc0 	bl	8002404 <ICM20602_Writebyte>

	ICM20602_Writebyte(0x15, (gyro_y_offset * -2) >> 8);
 8003c84:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	; 0x40
 8003c88:	4613      	mov	r3, r2
 8003c8a:	07db      	lsls	r3, r3, #31
 8003c8c:	1a9b      	subs	r3, r3, r2
 8003c8e:	005b      	lsls	r3, r3, #1
 8003c90:	121b      	asrs	r3, r3, #8
 8003c92:	4619      	mov	r1, r3
 8003c94:	2015      	movs	r0, #21
 8003c96:	f7fe fbb5 	bl	8002404 <ICM20602_Writebyte>
	ICM20602_Writebyte(0x16, (gyro_y_offset * -2));
 8003c9a:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	; 0x40
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	07db      	lsls	r3, r3, #31
 8003ca2:	1a9b      	subs	r3, r3, r2
 8003ca4:	005b      	lsls	r3, r3, #1
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	2016      	movs	r0, #22
 8003caa:	f7fe fbab 	bl	8002404 <ICM20602_Writebyte>

	ICM20602_Writebyte(0x17, (gyro_z_offset * -2) >> 8);
 8003cae:	f9b7 203e 	ldrsh.w	r2, [r7, #62]	; 0x3e
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	07db      	lsls	r3, r3, #31
 8003cb6:	1a9b      	subs	r3, r3, r2
 8003cb8:	005b      	lsls	r3, r3, #1
 8003cba:	121b      	asrs	r3, r3, #8
 8003cbc:	4619      	mov	r1, r3
 8003cbe:	2017      	movs	r0, #23
 8003cc0:	f7fe fba0 	bl	8002404 <ICM20602_Writebyte>
	ICM20602_Writebyte(0x18, (gyro_z_offset * -2));
 8003cc4:	f9b7 203e 	ldrsh.w	r2, [r7, #62]	; 0x3e
 8003cc8:	4613      	mov	r3, r2
 8003cca:	07db      	lsls	r3, r3, #31
 8003ccc:	1a9b      	subs	r3, r3, r2
 8003cce:	005b      	lsls	r3, r3, #1
 8003cd0:	4619      	mov	r1, r3
 8003cd2:	2018      	movs	r0, #24
 8003cd4:	f7fe fb96 	bl	8002404 <ICM20602_Writebyte>

	//0 - Roll 0, 1 - Roll 1, 2 - Pitch 0, 3 - Pitch 1, 4 - Yaw 0, 5 - Yaw 1

	printf("Loading PID Gain...\n");
 8003cd8:	48a1      	ldr	r0, [pc, #644]	; (8003f60 <main+0x610>)
 8003cda:	f008 fbf9 	bl	800c4d0 <puts>

	if ( EP_PIDGain_Read(0, &roll_in_kp, &roll_in_ki, &roll_in_kd) != 0 ||
 8003cde:	4ba1      	ldr	r3, [pc, #644]	; (8003f64 <main+0x614>)
 8003ce0:	4aa1      	ldr	r2, [pc, #644]	; (8003f68 <main+0x618>)
 8003ce2:	49a2      	ldr	r1, [pc, #648]	; (8003f6c <main+0x61c>)
 8003ce4:	2000      	movs	r0, #0
 8003ce6:	f7fd fa08 	bl	80010fa <EP_PIDGain_Read>
 8003cea:	4603      	mov	r3, r0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d12c      	bne.n	8003d4a <main+0x3fa>
			EP_PIDGain_Read(1, &roll_out_kp, &roll_out_ki, &roll_out_kd) != 0 ||
 8003cf0:	4b9f      	ldr	r3, [pc, #636]	; (8003f70 <main+0x620>)
 8003cf2:	4aa0      	ldr	r2, [pc, #640]	; (8003f74 <main+0x624>)
 8003cf4:	49a0      	ldr	r1, [pc, #640]	; (8003f78 <main+0x628>)
 8003cf6:	2001      	movs	r0, #1
 8003cf8:	f7fd f9ff 	bl	80010fa <EP_PIDGain_Read>
 8003cfc:	4603      	mov	r3, r0
	if ( EP_PIDGain_Read(0, &roll_in_kp, &roll_in_ki, &roll_in_kd) != 0 ||
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d123      	bne.n	8003d4a <main+0x3fa>
			EP_PIDGain_Read(2, &pitch_in_kp, &pitch_in_ki, &pitch_in_kd) != 0 ||
 8003d02:	4b9e      	ldr	r3, [pc, #632]	; (8003f7c <main+0x62c>)
 8003d04:	4a9e      	ldr	r2, [pc, #632]	; (8003f80 <main+0x630>)
 8003d06:	499f      	ldr	r1, [pc, #636]	; (8003f84 <main+0x634>)
 8003d08:	2002      	movs	r0, #2
 8003d0a:	f7fd f9f6 	bl	80010fa <EP_PIDGain_Read>
 8003d0e:	4603      	mov	r3, r0
			EP_PIDGain_Read(1, &roll_out_kp, &roll_out_ki, &roll_out_kd) != 0 ||
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d11a      	bne.n	8003d4a <main+0x3fa>
			EP_PIDGain_Read(3, &pitch_out_kp, &pitch_out_ki, &pitch_out_kd) != 0 ||
 8003d14:	4b9c      	ldr	r3, [pc, #624]	; (8003f88 <main+0x638>)
 8003d16:	4a9d      	ldr	r2, [pc, #628]	; (8003f8c <main+0x63c>)
 8003d18:	499d      	ldr	r1, [pc, #628]	; (8003f90 <main+0x640>)
 8003d1a:	2003      	movs	r0, #3
 8003d1c:	f7fd f9ed 	bl	80010fa <EP_PIDGain_Read>
 8003d20:	4603      	mov	r3, r0
			EP_PIDGain_Read(2, &pitch_in_kp, &pitch_in_ki, &pitch_in_kd) != 0 ||
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d111      	bne.n	8003d4a <main+0x3fa>
			EP_PIDGain_Read(4, &yaw_heading_kp, &yaw_heading_ki, &yaw_heading_kd) != 0 ||
 8003d26:	4b9b      	ldr	r3, [pc, #620]	; (8003f94 <main+0x644>)
 8003d28:	4a9b      	ldr	r2, [pc, #620]	; (8003f98 <main+0x648>)
 8003d2a:	499c      	ldr	r1, [pc, #624]	; (8003f9c <main+0x64c>)
 8003d2c:	2004      	movs	r0, #4
 8003d2e:	f7fd f9e4 	bl	80010fa <EP_PIDGain_Read>
 8003d32:	4603      	mov	r3, r0
			EP_PIDGain_Read(3, &pitch_out_kp, &pitch_out_ki, &pitch_out_kd) != 0 ||
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d108      	bne.n	8003d4a <main+0x3fa>
			EP_PIDGain_Read(5, &yaw_rate_kp, &yaw_rate_ki, &yaw_rate_kd) != 0 ) {
 8003d38:	4b99      	ldr	r3, [pc, #612]	; (8003fa0 <main+0x650>)
 8003d3a:	4a9a      	ldr	r2, [pc, #616]	; (8003fa4 <main+0x654>)
 8003d3c:	499a      	ldr	r1, [pc, #616]	; (8003fa8 <main+0x658>)
 8003d3e:	2005      	movs	r0, #5
 8003d40:	f7fd f9db 	bl	80010fa <EP_PIDGain_Read>
 8003d44:	4603      	mov	r3, r0
			EP_PIDGain_Read(4, &yaw_heading_kp, &yaw_heading_ki, &yaw_heading_kd) != 0 ||
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d026      	beq.n	8003d98 <main+0x448>
		LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003d4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003d4e:	4897      	ldr	r0, [pc, #604]	; (8003fac <main+0x65c>)
 8003d50:	f7ff fd44 	bl	80037dc <LL_TIM_CC_EnableChannel>
		TIM3->PSC = 1000;
 8003d54:	4b95      	ldr	r3, [pc, #596]	; (8003fac <main+0x65c>)
 8003d56:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003d5a:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(100);
 8003d5c:	2064      	movs	r0, #100	; 0x64
 8003d5e:	f003 f865 	bl	8006e2c <HAL_Delay>
		TIM3->PSC = 1500;
 8003d62:	4b92      	ldr	r3, [pc, #584]	; (8003fac <main+0x65c>)
 8003d64:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003d68:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(100);
 8003d6a:	2064      	movs	r0, #100	; 0x64
 8003d6c:	f003 f85e 	bl	8006e2c <HAL_Delay>
		TIM3->PSC = 2000;
 8003d70:	4b8e      	ldr	r3, [pc, #568]	; (8003fac <main+0x65c>)
 8003d72:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003d76:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(100);
 8003d78:	2064      	movs	r0, #100	; 0x64
 8003d7a:	f003 f857 	bl	8006e2c <HAL_Delay>
		LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003d7e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003d82:	488a      	ldr	r0, [pc, #552]	; (8003fac <main+0x65c>)
 8003d84:	f7ff fd3b 	bl	80037fe <LL_TIM_CC_DisableChannel>

		HAL_Delay(500);
 8003d88:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003d8c:	f003 f84e 	bl	8006e2c <HAL_Delay>
		printf("\nCouldn't load PID gain.\n");
 8003d90:	4887      	ldr	r0, [pc, #540]	; (8003fb0 <main+0x660>)
 8003d92:	f008 fb9d 	bl	800c4d0 <puts>
 8003d96:	e098      	b.n	8003eca <main+0x57a>
	}
	else {
		Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 0, roll_in_kp, roll_in_ki, roll_in_kd);
 8003d98:	4b74      	ldr	r3, [pc, #464]	; (8003f6c <main+0x61c>)
 8003d9a:	edd3 7a00 	vldr	s15, [r3]
 8003d9e:	4b72      	ldr	r3, [pc, #456]	; (8003f68 <main+0x618>)
 8003da0:	ed93 7a00 	vldr	s14, [r3]
 8003da4:	4b6f      	ldr	r3, [pc, #444]	; (8003f64 <main+0x614>)
 8003da6:	edd3 6a00 	vldr	s13, [r3]
 8003daa:	eeb0 1a66 	vmov.f32	s2, s13
 8003dae:	eef0 0a47 	vmov.f32	s1, s14
 8003db2:	eeb0 0a67 	vmov.f32	s0, s15
 8003db6:	2100      	movs	r1, #0
 8003db8:	487e      	ldr	r0, [pc, #504]	; (8003fb4 <main+0x664>)
 8003dba:	f001 fdb7 	bl	800592c <Encode_Msg_PID_Gain>
		HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8003dbe:	230a      	movs	r3, #10
 8003dc0:	2214      	movs	r2, #20
 8003dc2:	497c      	ldr	r1, [pc, #496]	; (8003fb4 <main+0x664>)
 8003dc4:	487c      	ldr	r0, [pc, #496]	; (8003fb8 <main+0x668>)
 8003dc6:	f005 fee2 	bl	8009b8e <HAL_UART_Transmit>
		Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 1, roll_out_kp, roll_out_ki, roll_out_kd);
 8003dca:	4b6b      	ldr	r3, [pc, #428]	; (8003f78 <main+0x628>)
 8003dcc:	edd3 7a00 	vldr	s15, [r3]
 8003dd0:	4b68      	ldr	r3, [pc, #416]	; (8003f74 <main+0x624>)
 8003dd2:	ed93 7a00 	vldr	s14, [r3]
 8003dd6:	4b66      	ldr	r3, [pc, #408]	; (8003f70 <main+0x620>)
 8003dd8:	edd3 6a00 	vldr	s13, [r3]
 8003ddc:	eeb0 1a66 	vmov.f32	s2, s13
 8003de0:	eef0 0a47 	vmov.f32	s1, s14
 8003de4:	eeb0 0a67 	vmov.f32	s0, s15
 8003de8:	2101      	movs	r1, #1
 8003dea:	4872      	ldr	r0, [pc, #456]	; (8003fb4 <main+0x664>)
 8003dec:	f001 fd9e 	bl	800592c <Encode_Msg_PID_Gain>
		HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8003df0:	230a      	movs	r3, #10
 8003df2:	2214      	movs	r2, #20
 8003df4:	496f      	ldr	r1, [pc, #444]	; (8003fb4 <main+0x664>)
 8003df6:	4870      	ldr	r0, [pc, #448]	; (8003fb8 <main+0x668>)
 8003df8:	f005 fec9 	bl	8009b8e <HAL_UART_Transmit>
		Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 2, pitch_in_kp, pitch_in_ki, pitch_in_kd);
 8003dfc:	4b61      	ldr	r3, [pc, #388]	; (8003f84 <main+0x634>)
 8003dfe:	edd3 7a00 	vldr	s15, [r3]
 8003e02:	4b5f      	ldr	r3, [pc, #380]	; (8003f80 <main+0x630>)
 8003e04:	ed93 7a00 	vldr	s14, [r3]
 8003e08:	4b5c      	ldr	r3, [pc, #368]	; (8003f7c <main+0x62c>)
 8003e0a:	edd3 6a00 	vldr	s13, [r3]
 8003e0e:	eeb0 1a66 	vmov.f32	s2, s13
 8003e12:	eef0 0a47 	vmov.f32	s1, s14
 8003e16:	eeb0 0a67 	vmov.f32	s0, s15
 8003e1a:	2102      	movs	r1, #2
 8003e1c:	4865      	ldr	r0, [pc, #404]	; (8003fb4 <main+0x664>)
 8003e1e:	f001 fd85 	bl	800592c <Encode_Msg_PID_Gain>
		HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8003e22:	230a      	movs	r3, #10
 8003e24:	2214      	movs	r2, #20
 8003e26:	4963      	ldr	r1, [pc, #396]	; (8003fb4 <main+0x664>)
 8003e28:	4863      	ldr	r0, [pc, #396]	; (8003fb8 <main+0x668>)
 8003e2a:	f005 feb0 	bl	8009b8e <HAL_UART_Transmit>
		Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 3, pitch_out_kp, pitch_out_ki, pitch_out_kd);
 8003e2e:	4b58      	ldr	r3, [pc, #352]	; (8003f90 <main+0x640>)
 8003e30:	edd3 7a00 	vldr	s15, [r3]
 8003e34:	4b55      	ldr	r3, [pc, #340]	; (8003f8c <main+0x63c>)
 8003e36:	ed93 7a00 	vldr	s14, [r3]
 8003e3a:	4b53      	ldr	r3, [pc, #332]	; (8003f88 <main+0x638>)
 8003e3c:	edd3 6a00 	vldr	s13, [r3]
 8003e40:	eeb0 1a66 	vmov.f32	s2, s13
 8003e44:	eef0 0a47 	vmov.f32	s1, s14
 8003e48:	eeb0 0a67 	vmov.f32	s0, s15
 8003e4c:	2103      	movs	r1, #3
 8003e4e:	4859      	ldr	r0, [pc, #356]	; (8003fb4 <main+0x664>)
 8003e50:	f001 fd6c 	bl	800592c <Encode_Msg_PID_Gain>
		HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8003e54:	230a      	movs	r3, #10
 8003e56:	2214      	movs	r2, #20
 8003e58:	4956      	ldr	r1, [pc, #344]	; (8003fb4 <main+0x664>)
 8003e5a:	4857      	ldr	r0, [pc, #348]	; (8003fb8 <main+0x668>)
 8003e5c:	f005 fe97 	bl	8009b8e <HAL_UART_Transmit>
		Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 4, yaw_heading_kp, yaw_heading_ki, yaw_heading_kd);
 8003e60:	4b4e      	ldr	r3, [pc, #312]	; (8003f9c <main+0x64c>)
 8003e62:	edd3 7a00 	vldr	s15, [r3]
 8003e66:	4b4c      	ldr	r3, [pc, #304]	; (8003f98 <main+0x648>)
 8003e68:	ed93 7a00 	vldr	s14, [r3]
 8003e6c:	4b49      	ldr	r3, [pc, #292]	; (8003f94 <main+0x644>)
 8003e6e:	edd3 6a00 	vldr	s13, [r3]
 8003e72:	eeb0 1a66 	vmov.f32	s2, s13
 8003e76:	eef0 0a47 	vmov.f32	s1, s14
 8003e7a:	eeb0 0a67 	vmov.f32	s0, s15
 8003e7e:	2104      	movs	r1, #4
 8003e80:	484c      	ldr	r0, [pc, #304]	; (8003fb4 <main+0x664>)
 8003e82:	f001 fd53 	bl	800592c <Encode_Msg_PID_Gain>
		HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8003e86:	230a      	movs	r3, #10
 8003e88:	2214      	movs	r2, #20
 8003e8a:	494a      	ldr	r1, [pc, #296]	; (8003fb4 <main+0x664>)
 8003e8c:	484a      	ldr	r0, [pc, #296]	; (8003fb8 <main+0x668>)
 8003e8e:	f005 fe7e 	bl	8009b8e <HAL_UART_Transmit>
		Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 5, yaw_rate_kp, yaw_rate_ki, yaw_rate_kd);
 8003e92:	4b45      	ldr	r3, [pc, #276]	; (8003fa8 <main+0x658>)
 8003e94:	edd3 7a00 	vldr	s15, [r3]
 8003e98:	4b42      	ldr	r3, [pc, #264]	; (8003fa4 <main+0x654>)
 8003e9a:	ed93 7a00 	vldr	s14, [r3]
 8003e9e:	4b40      	ldr	r3, [pc, #256]	; (8003fa0 <main+0x650>)
 8003ea0:	edd3 6a00 	vldr	s13, [r3]
 8003ea4:	eeb0 1a66 	vmov.f32	s2, s13
 8003ea8:	eef0 0a47 	vmov.f32	s1, s14
 8003eac:	eeb0 0a67 	vmov.f32	s0, s15
 8003eb0:	2105      	movs	r1, #5
 8003eb2:	4840      	ldr	r0, [pc, #256]	; (8003fb4 <main+0x664>)
 8003eb4:	f001 fd3a 	bl	800592c <Encode_Msg_PID_Gain>
		HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8003eb8:	230a      	movs	r3, #10
 8003eba:	2214      	movs	r2, #20
 8003ebc:	493d      	ldr	r1, [pc, #244]	; (8003fb4 <main+0x664>)
 8003ebe:	483e      	ldr	r0, [pc, #248]	; (8003fb8 <main+0x668>)
 8003ec0:	f005 fe65 	bl	8009b8e <HAL_UART_Transmit>
		printf("\nAll gains Ok!\n\n");
 8003ec4:	483d      	ldr	r0, [pc, #244]	; (8003fbc <main+0x66c>)
 8003ec6:	f008 fb03 	bl	800c4d0 <puts>



	//	adcVal = ADC1 -> DR;
	//FS-i6 PACKET CHECK
	while(Is_iBus_Received() == 0) {
 8003eca:	e013      	b.n	8003ef4 <main+0x5a4>
		LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003ecc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003ed0:	4836      	ldr	r0, [pc, #216]	; (8003fac <main+0x65c>)
 8003ed2:	f7ff fc83 	bl	80037dc <LL_TIM_CC_EnableChannel>
		TIM3->PSC = 3000;
 8003ed6:	4b35      	ldr	r3, [pc, #212]	; (8003fac <main+0x65c>)
 8003ed8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003edc:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(200);
 8003ede:	20c8      	movs	r0, #200	; 0xc8
 8003ee0:	f002 ffa4 	bl	8006e2c <HAL_Delay>
		LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003ee4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003ee8:	4830      	ldr	r0, [pc, #192]	; (8003fac <main+0x65c>)
 8003eea:	f7ff fc88 	bl	80037fe <LL_TIM_CC_DisableChannel>
		HAL_Delay(200);
 8003eee:	20c8      	movs	r0, #200	; 0xc8
 8003ef0:	f002 ff9c 	bl	8006e2c <HAL_Delay>
	while(Is_iBus_Received() == 0) {
 8003ef4:	f001 f8e2 	bl	80050bc <Is_iBus_Received>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d0e6      	beq.n	8003ecc <main+0x57c>
	}


	//CALIBRATION BASED ON SwC
	if(iBus.SwC == 2000) {
 8003efe:	4b30      	ldr	r3, [pc, #192]	; (8003fc0 <main+0x670>)
 8003f00:	899b      	ldrh	r3, [r3, #12]
 8003f02:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003f06:	d17d      	bne.n	8004004 <main+0x6b4>
		//ESC CALIBRATION
		LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003f08:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003f0c:	4827      	ldr	r0, [pc, #156]	; (8003fac <main+0x65c>)
 8003f0e:	f7ff fc65 	bl	80037dc <LL_TIM_CC_EnableChannel>
		TIM3->PSC = 1500;
 8003f12:	4b26      	ldr	r3, [pc, #152]	; (8003fac <main+0x65c>)
 8003f14:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003f18:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(200);
 8003f1a:	20c8      	movs	r0, #200	; 0xc8
 8003f1c:	f002 ff86 	bl	8006e2c <HAL_Delay>
		TIM3->PSC = 4000;
 8003f20:	4b22      	ldr	r3, [pc, #136]	; (8003fac <main+0x65c>)
 8003f22:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8003f26:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(200);
 8003f28:	20c8      	movs	r0, #200	; 0xc8
 8003f2a:	f002 ff7f 	bl	8006e2c <HAL_Delay>
		TIM3->PSC = 1500;
 8003f2e:	4b1f      	ldr	r3, [pc, #124]	; (8003fac <main+0x65c>)
 8003f30:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003f34:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(200);
 8003f36:	20c8      	movs	r0, #200	; 0xc8
 8003f38:	f002 ff78 	bl	8006e2c <HAL_Delay>
		TIM3->PSC = 4000;
 8003f3c:	4b1b      	ldr	r3, [pc, #108]	; (8003fac <main+0x65c>)
 8003f3e:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8003f42:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(200);
 8003f44:	20c8      	movs	r0, #200	; 0xc8
 8003f46:	f002 ff71 	bl	8006e2c <HAL_Delay>
		LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003f4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003f4e:	4817      	ldr	r0, [pc, #92]	; (8003fac <main+0x65c>)
 8003f50:	f7ff fc55 	bl	80037fe <LL_TIM_CC_DisableChannel>

		ESC_Calibration();
 8003f54:	f001 f884 	bl	8005060 <ESC_Calibration>
		while(iBus.SwC != 1000) {
 8003f58:	e04e      	b.n	8003ff8 <main+0x6a8>
 8003f5a:	bf00      	nop
 8003f5c:	0800f424 	.word	0x0800f424
 8003f60:	0800f438 	.word	0x0800f438
 8003f64:	20000538 	.word	0x20000538
 8003f68:	200004d0 	.word	0x200004d0
 8003f6c:	200004c4 	.word	0x200004c4
 8003f70:	200004ec 	.word	0x200004ec
 8003f74:	200004fc 	.word	0x200004fc
 8003f78:	20000534 	.word	0x20000534
 8003f7c:	20000530 	.word	0x20000530
 8003f80:	200004b0 	.word	0x200004b0
 8003f84:	200004bc 	.word	0x200004bc
 8003f88:	20000504 	.word	0x20000504
 8003f8c:	200004d4 	.word	0x200004d4
 8003f90:	200004cc 	.word	0x200004cc
 8003f94:	200004f0 	.word	0x200004f0
 8003f98:	200004b4 	.word	0x200004b4
 8003f9c:	20000500 	.word	0x20000500
 8003fa0:	200004c8 	.word	0x200004c8
 8003fa4:	200004f8 	.word	0x200004f8
 8003fa8:	200004c0 	.word	0x200004c0
 8003fac:	40000400 	.word	0x40000400
 8003fb0:	0800f44c 	.word	0x0800f44c
 8003fb4:	20000508 	.word	0x20000508
 8003fb8:	20000580 	.word	0x20000580
 8003fbc:	0800f468 	.word	0x0800f468
 8003fc0:	20000318 	.word	0x20000318
			Is_iBus_Received();
 8003fc4:	f001 f87a 	bl	80050bc <Is_iBus_Received>
			LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003fc8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003fcc:	4835      	ldr	r0, [pc, #212]	; (80040a4 <main+0x754>)
 8003fce:	f7ff fc05 	bl	80037dc <LL_TIM_CC_EnableChannel>
			TIM3->PSC = 1500;
 8003fd2:	4b34      	ldr	r3, [pc, #208]	; (80040a4 <main+0x754>)
 8003fd4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003fd8:	629a      	str	r2, [r3, #40]	; 0x28
			HAL_Delay(200);
 8003fda:	20c8      	movs	r0, #200	; 0xc8
 8003fdc:	f002 ff26 	bl	8006e2c <HAL_Delay>
			TIM3->PSC = 6000;
 8003fe0:	4b30      	ldr	r3, [pc, #192]	; (80040a4 <main+0x754>)
 8003fe2:	f241 7270 	movw	r2, #6000	; 0x1770
 8003fe6:	629a      	str	r2, [r3, #40]	; 0x28
			HAL_Delay(200);
 8003fe8:	20c8      	movs	r0, #200	; 0xc8
 8003fea:	f002 ff1f 	bl	8006e2c <HAL_Delay>
			LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003fee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003ff2:	482c      	ldr	r0, [pc, #176]	; (80040a4 <main+0x754>)
 8003ff4:	f7ff fc03 	bl	80037fe <LL_TIM_CC_DisableChannel>
		while(iBus.SwC != 1000) {
 8003ff8:	4b2b      	ldr	r3, [pc, #172]	; (80040a8 <main+0x758>)
 8003ffa:	899b      	ldrh	r3, [r3, #12]
 8003ffc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004000:	d1e0      	bne.n	8003fc4 <main+0x674>
 8004002:	e067      	b.n	80040d4 <main+0x784>
		}
	}
	else if (iBus.SwC == 1500) {
 8004004:	4b28      	ldr	r3, [pc, #160]	; (80040a8 <main+0x758>)
 8004006:	899b      	ldrh	r3, [r3, #12]
 8004008:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800400c:	4293      	cmp	r3, r2
 800400e:	d161      	bne.n	80040d4 <main+0x784>
		//BNO080 CALIBRATION
		LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8004010:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004014:	4823      	ldr	r0, [pc, #140]	; (80040a4 <main+0x754>)
 8004016:	f7ff fbe1 	bl	80037dc <LL_TIM_CC_EnableChannel>
		TIM3->PSC = 1500;
 800401a:	4b22      	ldr	r3, [pc, #136]	; (80040a4 <main+0x754>)
 800401c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004020:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(200);
 8004022:	20c8      	movs	r0, #200	; 0xc8
 8004024:	f002 ff02 	bl	8006e2c <HAL_Delay>
		TIM3->PSC = 4000;
 8004028:	4b1e      	ldr	r3, [pc, #120]	; (80040a4 <main+0x754>)
 800402a:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800402e:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(200);
 8004030:	20c8      	movs	r0, #200	; 0xc8
 8004032:	f002 fefb 	bl	8006e2c <HAL_Delay>
		TIM3->PSC = 1500;
 8004036:	4b1b      	ldr	r3, [pc, #108]	; (80040a4 <main+0x754>)
 8004038:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800403c:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(200);
 800403e:	20c8      	movs	r0, #200	; 0xc8
 8004040:	f002 fef4 	bl	8006e2c <HAL_Delay>
		TIM3->PSC = 4000;
 8004044:	4b17      	ldr	r3, [pc, #92]	; (80040a4 <main+0x754>)
 8004046:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800404a:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(200);
 800404c:	20c8      	movs	r0, #200	; 0xc8
 800404e:	f002 feed 	bl	8006e2c <HAL_Delay>
		LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8004052:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004056:	4813      	ldr	r0, [pc, #76]	; (80040a4 <main+0x754>)
 8004058:	f7ff fbd1 	bl	80037fe <LL_TIM_CC_DisableChannel>

		BNO080_Calibration();
 800405c:	f001 f84e 	bl	80050fc <BNO080_Calibration>
		while(iBus.SwC != 1000) {
 8004060:	e019      	b.n	8004096 <main+0x746>
			Is_iBus_Received();
 8004062:	f001 f82b 	bl	80050bc <Is_iBus_Received>
			LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8004066:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800406a:	480e      	ldr	r0, [pc, #56]	; (80040a4 <main+0x754>)
 800406c:	f7ff fbb6 	bl	80037dc <LL_TIM_CC_EnableChannel>
			TIM3->PSC = 1500;
 8004070:	4b0c      	ldr	r3, [pc, #48]	; (80040a4 <main+0x754>)
 8004072:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004076:	629a      	str	r2, [r3, #40]	; 0x28
			HAL_Delay(200);
 8004078:	20c8      	movs	r0, #200	; 0xc8
 800407a:	f002 fed7 	bl	8006e2c <HAL_Delay>
			TIM3->PSC = 6000;
 800407e:	4b09      	ldr	r3, [pc, #36]	; (80040a4 <main+0x754>)
 8004080:	f241 7270 	movw	r2, #6000	; 0x1770
 8004084:	629a      	str	r2, [r3, #40]	; 0x28
			HAL_Delay(200);
 8004086:	20c8      	movs	r0, #200	; 0xc8
 8004088:	f002 fed0 	bl	8006e2c <HAL_Delay>
			LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800408c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004090:	4804      	ldr	r0, [pc, #16]	; (80040a4 <main+0x754>)
 8004092:	f7ff fbb4 	bl	80037fe <LL_TIM_CC_DisableChannel>
		while(iBus.SwC != 1000) {
 8004096:	4b04      	ldr	r3, [pc, #16]	; (80040a8 <main+0x758>)
 8004098:	899b      	ldrh	r3, [r3, #12]
 800409a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800409e:	d1e0      	bne.n	8004062 <main+0x712>
	}


	//Check throttle stick is down -> minimum speed of motors
	//iBus.SwA: up - 1000, down - 2000
	while(Is_iBus_Throttle_Min() == 0 || iBus.SwA == 2000) {
 80040a0:	e018      	b.n	80040d4 <main+0x784>
 80040a2:	bf00      	nop
 80040a4:	40000400 	.word	0x40000400
 80040a8:	20000318 	.word	0x20000318
		LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80040ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80040b0:	48bc      	ldr	r0, [pc, #752]	; (80043a4 <main+0xa54>)
 80040b2:	f7ff fb93 	bl	80037dc <LL_TIM_CC_EnableChannel>
		TIM3->PSC = 1500;
 80040b6:	4bbb      	ldr	r3, [pc, #748]	; (80043a4 <main+0xa54>)
 80040b8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80040bc:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(100);
 80040be:	2064      	movs	r0, #100	; 0x64
 80040c0:	f002 feb4 	bl	8006e2c <HAL_Delay>
		LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80040c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80040c8:	48b6      	ldr	r0, [pc, #728]	; (80043a4 <main+0xa54>)
 80040ca:	f7ff fb98 	bl	80037fe <LL_TIM_CC_DisableChannel>
		HAL_Delay(100);
 80040ce:	2064      	movs	r0, #100	; 0x64
 80040d0:	f002 feac 	bl	8006e2c <HAL_Delay>
	while(Is_iBus_Throttle_Min() == 0 || iBus.SwA == 2000) {
 80040d4:	f000 ff9e 	bl	8005014 <Is_iBus_Throttle_Min>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d0e6      	beq.n	80040ac <main+0x75c>
 80040de:	4bb2      	ldr	r3, [pc, #712]	; (80043a8 <main+0xa58>)
 80040e0:	891b      	ldrh	r3, [r3, #8]
 80040e2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80040e6:	d0e1      	beq.n	80040ac <main+0x75c>
	//
	//	//EEPROM Read
	//	EP_PIDGain_Read(0, &p, &i, &d);
	//	printf("%f %f %f", p, i, d);

	LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80040e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80040ec:	48ad      	ldr	r0, [pc, #692]	; (80043a4 <main+0xa54>)
 80040ee:	f7ff fb75 	bl	80037dc <LL_TIM_CC_EnableChannel>
	TIM3->PSC = 6000;
 80040f2:	4bac      	ldr	r3, [pc, #688]	; (80043a4 <main+0xa54>)
 80040f4:	f241 7270 	movw	r2, #6000	; 0x1770
 80040f8:	629a      	str	r2, [r3, #40]	; 0x28
	HAL_Delay(200);
 80040fa:	20c8      	movs	r0, #200	; 0xc8
 80040fc:	f002 fe96 	bl	8006e2c <HAL_Delay>
	TIM3->PSC = 4000;
 8004100:	4ba8      	ldr	r3, [pc, #672]	; (80043a4 <main+0xa54>)
 8004102:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8004106:	629a      	str	r2, [r3, #40]	; 0x28
	HAL_Delay(100);
 8004108:	2064      	movs	r0, #100	; 0x64
 800410a:	f002 fe8f 	bl	8006e2c <HAL_Delay>
	TIM3->PSC = 4000;
 800410e:	4ba5      	ldr	r3, [pc, #660]	; (80043a4 <main+0xa54>)
 8004110:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8004114:	629a      	str	r2, [r3, #40]	; 0x28
	HAL_Delay(100);
 8004116:	2064      	movs	r0, #100	; 0x64
 8004118:	f002 fe88 	bl	8006e2c <HAL_Delay>
	TIM3->PSC = 6000;
 800411c:	4ba1      	ldr	r3, [pc, #644]	; (80043a4 <main+0xa54>)
 800411e:	f241 7270 	movw	r2, #6000	; 0x1770
 8004122:	629a      	str	r2, [r3, #40]	; 0x28
	HAL_Delay(200);
 8004124:	20c8      	movs	r0, #200	; 0xc8
 8004126:	f002 fe81 	bl	8006e2c <HAL_Delay>
	//  TIM3 -> CCR4 = TIM3 -> ARR / 2;
	LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800412a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800412e:	489d      	ldr	r0, [pc, #628]	; (80043a4 <main+0xa54>)
 8004130:	f7ff fb65 	bl	80037fe <LL_TIM_CC_DisableChannel>

	printf("Starts\n");
 8004134:	489d      	ldr	r0, [pc, #628]	; (80043ac <main+0xa5c>)
 8004136:	f008 f9cb 	bl	800c4d0 <puts>
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		//PID Control
		if (tim7_1ms_flag == 1) {
 800413a:	4b9d      	ldr	r3, [pc, #628]	; (80043b0 <main+0xa60>)
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	2b01      	cmp	r3, #1
 8004140:	f040 80b4 	bne.w	80042ac <main+0x95c>
			tim7_1ms_flag = 0;
 8004144:	4b9a      	ldr	r3, [pc, #616]	; (80043b0 <main+0xa60>)
 8004146:	2200      	movs	r2, #0
 8004148:	701a      	strb	r2, [r3, #0]

			ccr1 = 10500 + 500 + (iBus.LV - 1000) * 10 - (iBus.RV - 1500) * 5 + (iBus.RH - 1500) * 5 - (iBus.LH - 1500) * 5;// Motor1
 800414a:	4b97      	ldr	r3, [pc, #604]	; (80043a8 <main+0xa58>)
 800414c:	889b      	ldrh	r3, [r3, #4]
 800414e:	461a      	mov	r2, r3
 8004150:	0092      	lsls	r2, r2, #2
 8004152:	4413      	add	r3, r2
 8004154:	005b      	lsls	r3, r3, #1
 8004156:	b29a      	uxth	r2, r3
 8004158:	4b93      	ldr	r3, [pc, #588]	; (80043a8 <main+0xa58>)
 800415a:	885b      	ldrh	r3, [r3, #2]
 800415c:	4619      	mov	r1, r3
 800415e:	0389      	lsls	r1, r1, #14
 8004160:	1ac9      	subs	r1, r1, r3
 8004162:	0089      	lsls	r1, r1, #2
 8004164:	1acb      	subs	r3, r1, r3
 8004166:	b29b      	uxth	r3, r3
 8004168:	4413      	add	r3, r2
 800416a:	b29a      	uxth	r2, r3
 800416c:	4b8e      	ldr	r3, [pc, #568]	; (80043a8 <main+0xa58>)
 800416e:	881b      	ldrh	r3, [r3, #0]
 8004170:	4619      	mov	r1, r3
 8004172:	0089      	lsls	r1, r1, #2
 8004174:	440b      	add	r3, r1
 8004176:	b29b      	uxth	r3, r3
 8004178:	4413      	add	r3, r2
 800417a:	b29a      	uxth	r2, r3
 800417c:	4b8a      	ldr	r3, [pc, #552]	; (80043a8 <main+0xa58>)
 800417e:	88db      	ldrh	r3, [r3, #6]
 8004180:	4619      	mov	r1, r3
 8004182:	0389      	lsls	r1, r1, #14
 8004184:	1ac9      	subs	r1, r1, r3
 8004186:	0089      	lsls	r1, r1, #2
 8004188:	1acb      	subs	r3, r1, r3
 800418a:	b29b      	uxth	r3, r3
 800418c:	4413      	add	r3, r2
 800418e:	b29b      	uxth	r3, r3
 8004190:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8004194:	3334      	adds	r3, #52	; 0x34
 8004196:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
			ccr2 = 10500 + 500 + (iBus.LV - 1000) * 10 + (iBus.RV - 1500) * 5 + (iBus.RH - 1500) * 5 + (iBus.LH - 1500) * 5;// Motor2
 800419a:	4b83      	ldr	r3, [pc, #524]	; (80043a8 <main+0xa58>)
 800419c:	889b      	ldrh	r3, [r3, #4]
 800419e:	461a      	mov	r2, r3
 80041a0:	0092      	lsls	r2, r2, #2
 80041a2:	4413      	add	r3, r2
 80041a4:	005b      	lsls	r3, r3, #1
 80041a6:	b29a      	uxth	r2, r3
 80041a8:	4b7f      	ldr	r3, [pc, #508]	; (80043a8 <main+0xa58>)
 80041aa:	885b      	ldrh	r3, [r3, #2]
 80041ac:	4619      	mov	r1, r3
 80041ae:	0089      	lsls	r1, r1, #2
 80041b0:	440b      	add	r3, r1
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	4413      	add	r3, r2
 80041b6:	b29a      	uxth	r2, r3
 80041b8:	4b7b      	ldr	r3, [pc, #492]	; (80043a8 <main+0xa58>)
 80041ba:	881b      	ldrh	r3, [r3, #0]
 80041bc:	4619      	mov	r1, r3
 80041be:	0089      	lsls	r1, r1, #2
 80041c0:	440b      	add	r3, r1
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	4413      	add	r3, r2
 80041c6:	b29a      	uxth	r2, r3
 80041c8:	4b77      	ldr	r3, [pc, #476]	; (80043a8 <main+0xa58>)
 80041ca:	88db      	ldrh	r3, [r3, #6]
 80041cc:	4619      	mov	r1, r3
 80041ce:	0089      	lsls	r1, r1, #2
 80041d0:	440b      	add	r3, r1
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	4413      	add	r3, r2
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	f5a3 43a7 	sub.w	r3, r3, #21376	; 0x5380
 80041dc:	3b7c      	subs	r3, #124	; 0x7c
 80041de:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
			ccr3 = 10500 + 500 + (iBus.LV - 1000) * 10 + (iBus.RV - 1500) * 5 - (iBus.RH - 1500) * 5 - (iBus.LH - 1500) * 5;// Motor3
 80041e2:	4b71      	ldr	r3, [pc, #452]	; (80043a8 <main+0xa58>)
 80041e4:	889b      	ldrh	r3, [r3, #4]
 80041e6:	461a      	mov	r2, r3
 80041e8:	0092      	lsls	r2, r2, #2
 80041ea:	4413      	add	r3, r2
 80041ec:	005b      	lsls	r3, r3, #1
 80041ee:	b29a      	uxth	r2, r3
 80041f0:	4b6d      	ldr	r3, [pc, #436]	; (80043a8 <main+0xa58>)
 80041f2:	885b      	ldrh	r3, [r3, #2]
 80041f4:	4619      	mov	r1, r3
 80041f6:	0089      	lsls	r1, r1, #2
 80041f8:	440b      	add	r3, r1
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	4413      	add	r3, r2
 80041fe:	b29a      	uxth	r2, r3
 8004200:	4b69      	ldr	r3, [pc, #420]	; (80043a8 <main+0xa58>)
 8004202:	881b      	ldrh	r3, [r3, #0]
 8004204:	4619      	mov	r1, r3
 8004206:	0389      	lsls	r1, r1, #14
 8004208:	1ac9      	subs	r1, r1, r3
 800420a:	0089      	lsls	r1, r1, #2
 800420c:	1acb      	subs	r3, r1, r3
 800420e:	b29b      	uxth	r3, r3
 8004210:	4413      	add	r3, r2
 8004212:	b29a      	uxth	r2, r3
 8004214:	4b64      	ldr	r3, [pc, #400]	; (80043a8 <main+0xa58>)
 8004216:	88db      	ldrh	r3, [r3, #6]
 8004218:	4619      	mov	r1, r3
 800421a:	0389      	lsls	r1, r1, #14
 800421c:	1ac9      	subs	r1, r1, r3
 800421e:	0089      	lsls	r1, r1, #2
 8004220:	1acb      	subs	r3, r1, r3
 8004222:	b29b      	uxth	r3, r3
 8004224:	4413      	add	r3, r2
 8004226:	b29b      	uxth	r3, r3
 8004228:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800422c:	3334      	adds	r3, #52	; 0x34
 800422e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			ccr4 = 10500 + 500 + (iBus.LV - 1000) * 10 - (iBus.RV - 1500) * 5 - (iBus.RH - 1500) * 5 + (iBus.LH - 1500) * 5;// Motor4
 8004232:	4b5d      	ldr	r3, [pc, #372]	; (80043a8 <main+0xa58>)
 8004234:	889b      	ldrh	r3, [r3, #4]
 8004236:	461a      	mov	r2, r3
 8004238:	0092      	lsls	r2, r2, #2
 800423a:	4413      	add	r3, r2
 800423c:	005b      	lsls	r3, r3, #1
 800423e:	b29a      	uxth	r2, r3
 8004240:	4b59      	ldr	r3, [pc, #356]	; (80043a8 <main+0xa58>)
 8004242:	885b      	ldrh	r3, [r3, #2]
 8004244:	4619      	mov	r1, r3
 8004246:	0389      	lsls	r1, r1, #14
 8004248:	1ac9      	subs	r1, r1, r3
 800424a:	0089      	lsls	r1, r1, #2
 800424c:	1acb      	subs	r3, r1, r3
 800424e:	b29b      	uxth	r3, r3
 8004250:	4413      	add	r3, r2
 8004252:	b29a      	uxth	r2, r3
 8004254:	4b54      	ldr	r3, [pc, #336]	; (80043a8 <main+0xa58>)
 8004256:	881b      	ldrh	r3, [r3, #0]
 8004258:	4619      	mov	r1, r3
 800425a:	0389      	lsls	r1, r1, #14
 800425c:	1ac9      	subs	r1, r1, r3
 800425e:	0089      	lsls	r1, r1, #2
 8004260:	1acb      	subs	r3, r1, r3
 8004262:	b29b      	uxth	r3, r3
 8004264:	4413      	add	r3, r2
 8004266:	b29a      	uxth	r2, r3
 8004268:	4b4f      	ldr	r3, [pc, #316]	; (80043a8 <main+0xa58>)
 800426a:	88db      	ldrh	r3, [r3, #6]
 800426c:	4619      	mov	r1, r3
 800426e:	0089      	lsls	r1, r1, #2
 8004270:	440b      	add	r3, r1
 8004272:	b29b      	uxth	r3, r3
 8004274:	4413      	add	r3, r2
 8004276:	b29b      	uxth	r3, r3
 8004278:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800427c:	3334      	adds	r3, #52	; 0x34
 800427e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
			//MIN-MAX LIMIT

			printf("%f\t%f\t", BNO080_Pitch, ICM20602.gyro_x);
 8004282:	4b4c      	ldr	r3, [pc, #304]	; (80043b4 <main+0xa64>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4618      	mov	r0, r3
 8004288:	f7fc f95e 	bl	8000548 <__aeabi_f2d>
 800428c:	4605      	mov	r5, r0
 800428e:	460e      	mov	r6, r1
 8004290:	4b49      	ldr	r3, [pc, #292]	; (80043b8 <main+0xa68>)
 8004292:	69db      	ldr	r3, [r3, #28]
 8004294:	4618      	mov	r0, r3
 8004296:	f7fc f957 	bl	8000548 <__aeabi_f2d>
 800429a:	4603      	mov	r3, r0
 800429c:	460c      	mov	r4, r1
 800429e:	e9cd 3400 	strd	r3, r4, [sp]
 80042a2:	462a      	mov	r2, r5
 80042a4:	4633      	mov	r3, r6
 80042a6:	4845      	ldr	r0, [pc, #276]	; (80043bc <main+0xa6c>)
 80042a8:	f008 f89e 	bl	800c3e8 <iprintf>
//			printf("%f\t%f\t", BNO080_Roll, ICM20602.gyro_y);
//			printf("%f\t%f\t", BNO080_Yaw, ICM20602.gyro_z);
		}

		//Arming
		if (iBus.SwA == 2000 && iBus_SwA_Prev != 2000) {
 80042ac:	4b3e      	ldr	r3, [pc, #248]	; (80043a8 <main+0xa58>)
 80042ae:	891b      	ldrh	r3, [r3, #8]
 80042b0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80042b4:	d12c      	bne.n	8004310 <main+0x9c0>
 80042b6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80042ba:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80042be:	d027      	beq.n	8004310 <main+0x9c0>
			if (iBus.LV < 1010) {
 80042c0:	4b39      	ldr	r3, [pc, #228]	; (80043a8 <main+0xa58>)
 80042c2:	889b      	ldrh	r3, [r3, #4]
 80042c4:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d817      	bhi.n	80042fc <main+0x9ac>
				motor_arming_flag = 1;
 80042cc:	2301      	movs	r3, #1
 80042ce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80042d2:	e01d      	b.n	8004310 <main+0x9c0>
			}
			else {
				while(Is_iBus_Throttle_Min() == 0 || iBus.SwA == 2000) {
					LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80042d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80042d8:	4832      	ldr	r0, [pc, #200]	; (80043a4 <main+0xa54>)
 80042da:	f7ff fa7f 	bl	80037dc <LL_TIM_CC_EnableChannel>
					TIM3->PSC = 1500;
 80042de:	4b31      	ldr	r3, [pc, #196]	; (80043a4 <main+0xa54>)
 80042e0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80042e4:	629a      	str	r2, [r3, #40]	; 0x28
					HAL_Delay(100);
 80042e6:	2064      	movs	r0, #100	; 0x64
 80042e8:	f002 fda0 	bl	8006e2c <HAL_Delay>
					LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80042ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80042f0:	482c      	ldr	r0, [pc, #176]	; (80043a4 <main+0xa54>)
 80042f2:	f7ff fa84 	bl	80037fe <LL_TIM_CC_DisableChannel>
					HAL_Delay(100);
 80042f6:	2064      	movs	r0, #100	; 0x64
 80042f8:	f002 fd98 	bl	8006e2c <HAL_Delay>
				while(Is_iBus_Throttle_Min() == 0 || iBus.SwA == 2000) {
 80042fc:	f000 fe8a 	bl	8005014 <Is_iBus_Throttle_Min>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d0e6      	beq.n	80042d4 <main+0x984>
 8004306:	4b28      	ldr	r3, [pc, #160]	; (80043a8 <main+0xa58>)
 8004308:	891b      	ldrh	r3, [r3, #8]
 800430a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800430e:	d0e1      	beq.n	80042d4 <main+0x984>
				}
			}
		}
		iBus_SwA_Prev = iBus.SwA;
 8004310:	4b25      	ldr	r3, [pc, #148]	; (80043a8 <main+0xa58>)
 8004312:	891b      	ldrh	r3, [r3, #8]
 8004314:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54

		//Disarming
		if (iBus.SwA != 2000) {
 8004318:	4b23      	ldr	r3, [pc, #140]	; (80043a8 <main+0xa58>)
 800431a:	891b      	ldrh	r3, [r3, #8]
 800431c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004320:	d002      	beq.n	8004328 <main+0x9d8>
			motor_arming_flag = 0;
 8004322:	2300      	movs	r3, #0
 8004324:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}

		//Arming
		if(motor_arming_flag == 1) {
 8004328:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800432c:	2b01      	cmp	r3, #1
 800432e:	d174      	bne.n	800441a <main+0xaca>
			if (failsafe_flag == 0) {
 8004330:	4b23      	ldr	r3, [pc, #140]	; (80043c0 <main+0xa70>)
 8004332:	781b      	ldrb	r3, [r3, #0]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d15f      	bne.n	80043f8 <main+0xaa8>
				TIM5 -> CCR1 = ccr1 > 21000 ? 21000 : ccr1 < 11000 ? 11000 : ccr1;// Motor1
 8004338:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800433c:	f245 2208 	movw	r2, #21000	; 0x5208
 8004340:	4293      	cmp	r3, r2
 8004342:	d808      	bhi.n	8004356 <main+0xa06>
 8004344:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004348:	f642 22f8 	movw	r2, #11000	; 0x2af8
 800434c:	4293      	cmp	r3, r2
 800434e:	bf38      	it	cc
 8004350:	4613      	movcc	r3, r2
 8004352:	b29b      	uxth	r3, r3
 8004354:	e001      	b.n	800435a <main+0xa0a>
 8004356:	f245 2308 	movw	r3, #21000	; 0x5208
 800435a:	4a1a      	ldr	r2, [pc, #104]	; (80043c4 <main+0xa74>)
 800435c:	6353      	str	r3, [r2, #52]	; 0x34
				TIM5 -> CCR2 = ccr2 > 21000 ? 21000 : ccr2 < 11000 ? 11000 : ccr2;//10500 + 500 + (iBus.LV - 1000) * 10;// Motor2
 800435e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004362:	f245 2208 	movw	r2, #21000	; 0x5208
 8004366:	4293      	cmp	r3, r2
 8004368:	d808      	bhi.n	800437c <main+0xa2c>
 800436a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800436e:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8004372:	4293      	cmp	r3, r2
 8004374:	bf38      	it	cc
 8004376:	4613      	movcc	r3, r2
 8004378:	b29b      	uxth	r3, r3
 800437a:	e001      	b.n	8004380 <main+0xa30>
 800437c:	f245 2308 	movw	r3, #21000	; 0x5208
 8004380:	4a10      	ldr	r2, [pc, #64]	; (80043c4 <main+0xa74>)
 8004382:	6393      	str	r3, [r2, #56]	; 0x38
				TIM5 -> CCR3 = ccr3 > 21000 ? 21000 : ccr3 < 11000 ? 11000 : ccr3;//10500 + 500 + (iBus.LV - 1000) * 10;// Motor3
 8004384:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004388:	f245 2208 	movw	r2, #21000	; 0x5208
 800438c:	4293      	cmp	r3, r2
 800438e:	d81b      	bhi.n	80043c8 <main+0xa78>
 8004390:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004394:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8004398:	4293      	cmp	r3, r2
 800439a:	bf38      	it	cc
 800439c:	4613      	movcc	r3, r2
 800439e:	b29b      	uxth	r3, r3
 80043a0:	e014      	b.n	80043cc <main+0xa7c>
 80043a2:	bf00      	nop
 80043a4:	40000400 	.word	0x40000400
 80043a8:	20000318 	.word	0x20000318
 80043ac:	0800f478 	.word	0x0800f478
 80043b0:	20000217 	.word	0x20000217
 80043b4:	200003b0 	.word	0x200003b0
 80043b8:	2000033c 	.word	0x2000033c
 80043bc:	0800f480 	.word	0x0800f480
 80043c0:	2000020b 	.word	0x2000020b
 80043c4:	40000c00 	.word	0x40000c00
 80043c8:	f245 2308 	movw	r3, #21000	; 0x5208
 80043cc:	4ab0      	ldr	r2, [pc, #704]	; (8004690 <main+0xd40>)
 80043ce:	63d3      	str	r3, [r2, #60]	; 0x3c
				TIM5 -> CCR4 = ccr4 > 21000 ? 21000 : ccr4 < 11000 ? 11000 : ccr4;//10500 + 500 + (iBus.LV - 1000) * 10;// Motor4
 80043d0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80043d4:	f245 2208 	movw	r2, #21000	; 0x5208
 80043d8:	4293      	cmp	r3, r2
 80043da:	d808      	bhi.n	80043ee <main+0xa9e>
 80043dc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80043e0:	f642 22f8 	movw	r2, #11000	; 0x2af8
 80043e4:	4293      	cmp	r3, r2
 80043e6:	bf38      	it	cc
 80043e8:	4613      	movcc	r3, r2
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	e001      	b.n	80043f2 <main+0xaa2>
 80043ee:	f245 2308 	movw	r3, #21000	; 0x5208
 80043f2:	4aa7      	ldr	r2, [pc, #668]	; (8004690 <main+0xd40>)
 80043f4:	6413      	str	r3, [r2, #64]	; 0x40
 80043f6:	e020      	b.n	800443a <main+0xaea>
			}
			else {
				//Disarming
				TIM5 -> CCR1 = 10500;// Motor1
 80043f8:	4ba5      	ldr	r3, [pc, #660]	; (8004690 <main+0xd40>)
 80043fa:	f642 1204 	movw	r2, #10500	; 0x2904
 80043fe:	635a      	str	r2, [r3, #52]	; 0x34
				TIM5 -> CCR2 = 10500;// Motor2
 8004400:	4ba3      	ldr	r3, [pc, #652]	; (8004690 <main+0xd40>)
 8004402:	f642 1204 	movw	r2, #10500	; 0x2904
 8004406:	639a      	str	r2, [r3, #56]	; 0x38
				TIM5 -> CCR3 = 10500;// Motor3
 8004408:	4ba1      	ldr	r3, [pc, #644]	; (8004690 <main+0xd40>)
 800440a:	f642 1204 	movw	r2, #10500	; 0x2904
 800440e:	63da      	str	r2, [r3, #60]	; 0x3c
				TIM5 -> CCR4 = 10500;// Motor4
 8004410:	4b9f      	ldr	r3, [pc, #636]	; (8004690 <main+0xd40>)
 8004412:	f642 1204 	movw	r2, #10500	; 0x2904
 8004416:	641a      	str	r2, [r3, #64]	; 0x40
 8004418:	e00f      	b.n	800443a <main+0xaea>
			}
		}
		else {
			//Disarming
			TIM5 -> CCR1 = 10500;// Motor1
 800441a:	4b9d      	ldr	r3, [pc, #628]	; (8004690 <main+0xd40>)
 800441c:	f642 1204 	movw	r2, #10500	; 0x2904
 8004420:	635a      	str	r2, [r3, #52]	; 0x34
			TIM5 -> CCR2 = 10500;// Motor2
 8004422:	4b9b      	ldr	r3, [pc, #620]	; (8004690 <main+0xd40>)
 8004424:	f642 1204 	movw	r2, #10500	; 0x2904
 8004428:	639a      	str	r2, [r3, #56]	; 0x38
			TIM5 -> CCR3 = 10500;// Motor3
 800442a:	4b99      	ldr	r3, [pc, #612]	; (8004690 <main+0xd40>)
 800442c:	f642 1204 	movw	r2, #10500	; 0x2904
 8004430:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM5 -> CCR4 = 10500;// Motor4
 8004432:	4b97      	ldr	r3, [pc, #604]	; (8004690 <main+0xd40>)
 8004434:	f642 1204 	movw	r2, #10500	; 0x2904
 8004438:	641a      	str	r2, [r3, #64]	; 0x40
		}

		//GCS -> FC Message Receiver
		if (telemetry_rx_cplt_flag == 1) {
 800443a:	4b96      	ldr	r3, [pc, #600]	; (8004694 <main+0xd44>)
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	2b01      	cmp	r3, #1
 8004440:	f040 8398 	bne.w	8004b74 <main+0x1224>
			telemetry_rx_cplt_flag = 0;
 8004444:	4b93      	ldr	r3, [pc, #588]	; (8004694 <main+0xd44>)
 8004446:	2200      	movs	r2, #0
 8004448:	701a      	strb	r2, [r3, #0]
			if (iBus.SwA == 1000) {
 800444a:	4b93      	ldr	r3, [pc, #588]	; (8004698 <main+0xd48>)
 800444c:	891b      	ldrh	r3, [r3, #8]
 800444e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004452:	f040 838f 	bne.w	8004b74 <main+0x1224>
				unsigned char checksum = 0xff;
 8004456:	23ff      	movs	r3, #255	; 0xff
 8004458:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
				for (int i = 0; i < 19; i++) checksum -= telemetry_rx_buf[i];
 800445c:	2300      	movs	r3, #0
 800445e:	647b      	str	r3, [r7, #68]	; 0x44
 8004460:	e00b      	b.n	800447a <main+0xb2a>
 8004462:	4a8e      	ldr	r2, [pc, #568]	; (800469c <main+0xd4c>)
 8004464:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004466:	4413      	add	r3, r2
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 8004474:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004476:	3301      	adds	r3, #1
 8004478:	647b      	str	r3, [r7, #68]	; 0x44
 800447a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800447c:	2b12      	cmp	r3, #18
 800447e:	ddf0      	ble.n	8004462 <main+0xb12>
				if (checksum == telemetry_rx_buf[19]) {
 8004480:	4b86      	ldr	r3, [pc, #536]	; (800469c <main+0xd4c>)
 8004482:	7cdb      	ldrb	r3, [r3, #19]
 8004484:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 8004488:	429a      	cmp	r2, r3
 800448a:	f040 8373 	bne.w	8004b74 <main+0x1224>
					//iBus.SwA == 1000 -> Motor off state and can have delay
					//Buzzer Beep is available at SwA 1000
					LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800448e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004492:	4883      	ldr	r0, [pc, #524]	; (80046a0 <main+0xd50>)
 8004494:	f7ff f9a2 	bl	80037dc <LL_TIM_CC_EnableChannel>
					TIM3->PSC = 1000;
 8004498:	4b81      	ldr	r3, [pc, #516]	; (80046a0 <main+0xd50>)
 800449a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800449e:	629a      	str	r2, [r3, #40]	; 0x28
					HAL_Delay(10);
 80044a0:	200a      	movs	r0, #10
 80044a2:	f002 fcc3 	bl	8006e2c <HAL_Delay>
					LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80044a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80044aa:	487d      	ldr	r0, [pc, #500]	; (80046a0 <main+0xd50>)
 80044ac:	f7ff f9a7 	bl	80037fe <LL_TIM_CC_DisableChannel>

					switch(telemetry_rx_buf[2]) {
 80044b0:	4b7a      	ldr	r3, [pc, #488]	; (800469c <main+0xd4c>)
 80044b2:	789b      	ldrb	r3, [r3, #2]
 80044b4:	2b10      	cmp	r3, #16
 80044b6:	f200 835d 	bhi.w	8004b74 <main+0x1224>
 80044ba:	a201      	add	r2, pc, #4	; (adr r2, 80044c0 <main+0xb70>)
 80044bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c0:	08004505 	.word	0x08004505
 80044c4:	08004589 	.word	0x08004589
 80044c8:	0800460d 	.word	0x0800460d
 80044cc:	080046dd 	.word	0x080046dd
 80044d0:	08004761 	.word	0x08004761
 80044d4:	080047e5 	.word	0x080047e5
 80044d8:	08004b75 	.word	0x08004b75
 80044dc:	08004b75 	.word	0x08004b75
 80044e0:	08004b75 	.word	0x08004b75
 80044e4:	08004b75 	.word	0x08004b75
 80044e8:	08004b75 	.word	0x08004b75
 80044ec:	08004b75 	.word	0x08004b75
 80044f0:	08004b75 	.word	0x08004b75
 80044f4:	08004b75 	.word	0x08004b75
 80044f8:	08004b75 	.word	0x08004b75
 80044fc:	08004b75 	.word	0x08004b75
 8004500:	08004869 	.word	0x08004869
					case 0:
						//Save PID Gain at EEPROM
						roll_in_kp = *(float *)&telemetry_rx_buf[3];
 8004504:	4b67      	ldr	r3, [pc, #412]	; (80046a4 <main+0xd54>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a67      	ldr	r2, [pc, #412]	; (80046a8 <main+0xd58>)
 800450a:	6013      	str	r3, [r2, #0]
						roll_in_ki = *(float *)&telemetry_rx_buf[7];
 800450c:	4b67      	ldr	r3, [pc, #412]	; (80046ac <main+0xd5c>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a67      	ldr	r2, [pc, #412]	; (80046b0 <main+0xd60>)
 8004512:	6013      	str	r3, [r2, #0]
						roll_in_kd = *(float *)&telemetry_rx_buf[11];
 8004514:	4b67      	ldr	r3, [pc, #412]	; (80046b4 <main+0xd64>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a67      	ldr	r2, [pc, #412]	; (80046b8 <main+0xd68>)
 800451a:	6013      	str	r3, [r2, #0]
						EP_PIDGain_Write(telemetry_rx_buf[2], roll_in_kp, roll_in_ki, roll_in_kd);
 800451c:	4b5f      	ldr	r3, [pc, #380]	; (800469c <main+0xd4c>)
 800451e:	789a      	ldrb	r2, [r3, #2]
 8004520:	4b61      	ldr	r3, [pc, #388]	; (80046a8 <main+0xd58>)
 8004522:	edd3 7a00 	vldr	s15, [r3]
 8004526:	4b62      	ldr	r3, [pc, #392]	; (80046b0 <main+0xd60>)
 8004528:	ed93 7a00 	vldr	s14, [r3]
 800452c:	4b62      	ldr	r3, [pc, #392]	; (80046b8 <main+0xd68>)
 800452e:	edd3 6a00 	vldr	s13, [r3]
 8004532:	eeb0 1a66 	vmov.f32	s2, s13
 8004536:	eef0 0a47 	vmov.f32	s1, s14
 800453a:	eeb0 0a67 	vmov.f32	s0, s15
 800453e:	4610      	mov	r0, r2
 8004540:	f7fc fd80 	bl	8001044 <EP_PIDGain_Write>
						//Read PID Gain from EEPROM and FC -> GCS
						EP_PIDGain_Read(telemetry_rx_buf[2], &roll_in_kp, &roll_in_ki, &roll_in_kd);
 8004544:	4b55      	ldr	r3, [pc, #340]	; (800469c <main+0xd4c>)
 8004546:	7898      	ldrb	r0, [r3, #2]
 8004548:	4b5b      	ldr	r3, [pc, #364]	; (80046b8 <main+0xd68>)
 800454a:	4a59      	ldr	r2, [pc, #356]	; (80046b0 <main+0xd60>)
 800454c:	4956      	ldr	r1, [pc, #344]	; (80046a8 <main+0xd58>)
 800454e:	f7fc fdd4 	bl	80010fa <EP_PIDGain_Read>
						Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[2], roll_in_kp, roll_in_ki, roll_in_kd);
 8004552:	4b52      	ldr	r3, [pc, #328]	; (800469c <main+0xd4c>)
 8004554:	789a      	ldrb	r2, [r3, #2]
 8004556:	4b54      	ldr	r3, [pc, #336]	; (80046a8 <main+0xd58>)
 8004558:	edd3 7a00 	vldr	s15, [r3]
 800455c:	4b54      	ldr	r3, [pc, #336]	; (80046b0 <main+0xd60>)
 800455e:	ed93 7a00 	vldr	s14, [r3]
 8004562:	4b55      	ldr	r3, [pc, #340]	; (80046b8 <main+0xd68>)
 8004564:	edd3 6a00 	vldr	s13, [r3]
 8004568:	eeb0 1a66 	vmov.f32	s2, s13
 800456c:	eef0 0a47 	vmov.f32	s1, s14
 8004570:	eeb0 0a67 	vmov.f32	s0, s15
 8004574:	4611      	mov	r1, r2
 8004576:	4851      	ldr	r0, [pc, #324]	; (80046bc <main+0xd6c>)
 8004578:	f001 f9d8 	bl	800592c <Encode_Msg_PID_Gain>
						HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 20);
 800457c:	2214      	movs	r2, #20
 800457e:	494f      	ldr	r1, [pc, #316]	; (80046bc <main+0xd6c>)
 8004580:	484f      	ldr	r0, [pc, #316]	; (80046c0 <main+0xd70>)
 8004582:	f005 fb9d 	bl	8009cc0 <HAL_UART_Transmit_IT>
						break;
 8004586:	e2f5      	b.n	8004b74 <main+0x1224>
					case 1:
						//Save PID Gain at EEPROM
						roll_out_kp = *(float *)&telemetry_rx_buf[3];
 8004588:	4b46      	ldr	r3, [pc, #280]	; (80046a4 <main+0xd54>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a4d      	ldr	r2, [pc, #308]	; (80046c4 <main+0xd74>)
 800458e:	6013      	str	r3, [r2, #0]
						roll_out_ki = *(float *)&telemetry_rx_buf[7];
 8004590:	4b46      	ldr	r3, [pc, #280]	; (80046ac <main+0xd5c>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a4c      	ldr	r2, [pc, #304]	; (80046c8 <main+0xd78>)
 8004596:	6013      	str	r3, [r2, #0]
						roll_out_kd = *(float *)&telemetry_rx_buf[11];
 8004598:	4b46      	ldr	r3, [pc, #280]	; (80046b4 <main+0xd64>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a4b      	ldr	r2, [pc, #300]	; (80046cc <main+0xd7c>)
 800459e:	6013      	str	r3, [r2, #0]
						EP_PIDGain_Write(telemetry_rx_buf[2], roll_out_kp, roll_out_ki, roll_out_kd);
 80045a0:	4b3e      	ldr	r3, [pc, #248]	; (800469c <main+0xd4c>)
 80045a2:	789a      	ldrb	r2, [r3, #2]
 80045a4:	4b47      	ldr	r3, [pc, #284]	; (80046c4 <main+0xd74>)
 80045a6:	edd3 7a00 	vldr	s15, [r3]
 80045aa:	4b47      	ldr	r3, [pc, #284]	; (80046c8 <main+0xd78>)
 80045ac:	ed93 7a00 	vldr	s14, [r3]
 80045b0:	4b46      	ldr	r3, [pc, #280]	; (80046cc <main+0xd7c>)
 80045b2:	edd3 6a00 	vldr	s13, [r3]
 80045b6:	eeb0 1a66 	vmov.f32	s2, s13
 80045ba:	eef0 0a47 	vmov.f32	s1, s14
 80045be:	eeb0 0a67 	vmov.f32	s0, s15
 80045c2:	4610      	mov	r0, r2
 80045c4:	f7fc fd3e 	bl	8001044 <EP_PIDGain_Write>
						//Read PID Gain from EEPROM and FC -> GCS
						EP_PIDGain_Read(telemetry_rx_buf[2], &roll_out_kp, &roll_out_ki, &roll_out_kd);
 80045c8:	4b34      	ldr	r3, [pc, #208]	; (800469c <main+0xd4c>)
 80045ca:	7898      	ldrb	r0, [r3, #2]
 80045cc:	4b3f      	ldr	r3, [pc, #252]	; (80046cc <main+0xd7c>)
 80045ce:	4a3e      	ldr	r2, [pc, #248]	; (80046c8 <main+0xd78>)
 80045d0:	493c      	ldr	r1, [pc, #240]	; (80046c4 <main+0xd74>)
 80045d2:	f7fc fd92 	bl	80010fa <EP_PIDGain_Read>
						Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[2], roll_out_kp, roll_out_ki, roll_out_kd);
 80045d6:	4b31      	ldr	r3, [pc, #196]	; (800469c <main+0xd4c>)
 80045d8:	789a      	ldrb	r2, [r3, #2]
 80045da:	4b3a      	ldr	r3, [pc, #232]	; (80046c4 <main+0xd74>)
 80045dc:	edd3 7a00 	vldr	s15, [r3]
 80045e0:	4b39      	ldr	r3, [pc, #228]	; (80046c8 <main+0xd78>)
 80045e2:	ed93 7a00 	vldr	s14, [r3]
 80045e6:	4b39      	ldr	r3, [pc, #228]	; (80046cc <main+0xd7c>)
 80045e8:	edd3 6a00 	vldr	s13, [r3]
 80045ec:	eeb0 1a66 	vmov.f32	s2, s13
 80045f0:	eef0 0a47 	vmov.f32	s1, s14
 80045f4:	eeb0 0a67 	vmov.f32	s0, s15
 80045f8:	4611      	mov	r1, r2
 80045fa:	4830      	ldr	r0, [pc, #192]	; (80046bc <main+0xd6c>)
 80045fc:	f001 f996 	bl	800592c <Encode_Msg_PID_Gain>
						HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 20);
 8004600:	2214      	movs	r2, #20
 8004602:	492e      	ldr	r1, [pc, #184]	; (80046bc <main+0xd6c>)
 8004604:	482e      	ldr	r0, [pc, #184]	; (80046c0 <main+0xd70>)
 8004606:	f005 fb5b 	bl	8009cc0 <HAL_UART_Transmit_IT>
						break;
 800460a:	e2b3      	b.n	8004b74 <main+0x1224>
					case 2:
						//Save PID Gain at EEPROM
						pitch_in_kp = *(float *)&telemetry_rx_buf[3];
 800460c:	4b25      	ldr	r3, [pc, #148]	; (80046a4 <main+0xd54>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a2f      	ldr	r2, [pc, #188]	; (80046d0 <main+0xd80>)
 8004612:	6013      	str	r3, [r2, #0]
						pitch_in_ki = *(float *)&telemetry_rx_buf[7];
 8004614:	4b25      	ldr	r3, [pc, #148]	; (80046ac <main+0xd5c>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a2e      	ldr	r2, [pc, #184]	; (80046d4 <main+0xd84>)
 800461a:	6013      	str	r3, [r2, #0]
						pitch_in_kd = *(float *)&telemetry_rx_buf[11];
 800461c:	4b25      	ldr	r3, [pc, #148]	; (80046b4 <main+0xd64>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a2d      	ldr	r2, [pc, #180]	; (80046d8 <main+0xd88>)
 8004622:	6013      	str	r3, [r2, #0]
						EP_PIDGain_Write(telemetry_rx_buf[2], pitch_in_kp, pitch_in_ki, pitch_in_kd);
 8004624:	4b1d      	ldr	r3, [pc, #116]	; (800469c <main+0xd4c>)
 8004626:	789a      	ldrb	r2, [r3, #2]
 8004628:	4b29      	ldr	r3, [pc, #164]	; (80046d0 <main+0xd80>)
 800462a:	edd3 7a00 	vldr	s15, [r3]
 800462e:	4b29      	ldr	r3, [pc, #164]	; (80046d4 <main+0xd84>)
 8004630:	ed93 7a00 	vldr	s14, [r3]
 8004634:	4b28      	ldr	r3, [pc, #160]	; (80046d8 <main+0xd88>)
 8004636:	edd3 6a00 	vldr	s13, [r3]
 800463a:	eeb0 1a66 	vmov.f32	s2, s13
 800463e:	eef0 0a47 	vmov.f32	s1, s14
 8004642:	eeb0 0a67 	vmov.f32	s0, s15
 8004646:	4610      	mov	r0, r2
 8004648:	f7fc fcfc 	bl	8001044 <EP_PIDGain_Write>
						//Read PID Gain from EEPROM and FC -> GCS
						EP_PIDGain_Read(telemetry_rx_buf[2], &pitch_in_kp, &pitch_in_ki, &pitch_in_kd);
 800464c:	4b13      	ldr	r3, [pc, #76]	; (800469c <main+0xd4c>)
 800464e:	7898      	ldrb	r0, [r3, #2]
 8004650:	4b21      	ldr	r3, [pc, #132]	; (80046d8 <main+0xd88>)
 8004652:	4a20      	ldr	r2, [pc, #128]	; (80046d4 <main+0xd84>)
 8004654:	491e      	ldr	r1, [pc, #120]	; (80046d0 <main+0xd80>)
 8004656:	f7fc fd50 	bl	80010fa <EP_PIDGain_Read>
						Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[2], pitch_in_kp, pitch_in_ki, pitch_in_kd);
 800465a:	4b10      	ldr	r3, [pc, #64]	; (800469c <main+0xd4c>)
 800465c:	789a      	ldrb	r2, [r3, #2]
 800465e:	4b1c      	ldr	r3, [pc, #112]	; (80046d0 <main+0xd80>)
 8004660:	edd3 7a00 	vldr	s15, [r3]
 8004664:	4b1b      	ldr	r3, [pc, #108]	; (80046d4 <main+0xd84>)
 8004666:	ed93 7a00 	vldr	s14, [r3]
 800466a:	4b1b      	ldr	r3, [pc, #108]	; (80046d8 <main+0xd88>)
 800466c:	edd3 6a00 	vldr	s13, [r3]
 8004670:	eeb0 1a66 	vmov.f32	s2, s13
 8004674:	eef0 0a47 	vmov.f32	s1, s14
 8004678:	eeb0 0a67 	vmov.f32	s0, s15
 800467c:	4611      	mov	r1, r2
 800467e:	480f      	ldr	r0, [pc, #60]	; (80046bc <main+0xd6c>)
 8004680:	f001 f954 	bl	800592c <Encode_Msg_PID_Gain>
						HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 20);
 8004684:	2214      	movs	r2, #20
 8004686:	490d      	ldr	r1, [pc, #52]	; (80046bc <main+0xd6c>)
 8004688:	480d      	ldr	r0, [pc, #52]	; (80046c0 <main+0xd70>)
 800468a:	f005 fb19 	bl	8009cc0 <HAL_UART_Transmit_IT>
						break;
 800468e:	e271      	b.n	8004b74 <main+0x1224>
 8004690:	40000c00 	.word	0x40000c00
 8004694:	200004f4 	.word	0x200004f4
 8004698:	20000318 	.word	0x20000318
 800469c:	200004d8 	.word	0x200004d8
 80046a0:	40000400 	.word	0x40000400
 80046a4:	200004db 	.word	0x200004db
 80046a8:	200004c4 	.word	0x200004c4
 80046ac:	200004df 	.word	0x200004df
 80046b0:	200004d0 	.word	0x200004d0
 80046b4:	200004e3 	.word	0x200004e3
 80046b8:	20000538 	.word	0x20000538
 80046bc:	20000508 	.word	0x20000508
 80046c0:	20000580 	.word	0x20000580
 80046c4:	20000534 	.word	0x20000534
 80046c8:	200004fc 	.word	0x200004fc
 80046cc:	200004ec 	.word	0x200004ec
 80046d0:	200004bc 	.word	0x200004bc
 80046d4:	200004b0 	.word	0x200004b0
 80046d8:	20000530 	.word	0x20000530
					case 3:
						//Save PID Gain at EEPROM
						pitch_out_kp = *(float *)&telemetry_rx_buf[3];
 80046dc:	4bb3      	ldr	r3, [pc, #716]	; (80049ac <main+0x105c>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4ab3      	ldr	r2, [pc, #716]	; (80049b0 <main+0x1060>)
 80046e2:	6013      	str	r3, [r2, #0]
						pitch_out_ki = *(float *)&telemetry_rx_buf[7];
 80046e4:	4bb3      	ldr	r3, [pc, #716]	; (80049b4 <main+0x1064>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4ab3      	ldr	r2, [pc, #716]	; (80049b8 <main+0x1068>)
 80046ea:	6013      	str	r3, [r2, #0]
						pitch_out_kd = *(float *)&telemetry_rx_buf[11];
 80046ec:	4bb3      	ldr	r3, [pc, #716]	; (80049bc <main+0x106c>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4ab3      	ldr	r2, [pc, #716]	; (80049c0 <main+0x1070>)
 80046f2:	6013      	str	r3, [r2, #0]
						EP_PIDGain_Write(telemetry_rx_buf[2], pitch_out_kp, pitch_out_ki, pitch_out_kd);
 80046f4:	4bb3      	ldr	r3, [pc, #716]	; (80049c4 <main+0x1074>)
 80046f6:	789a      	ldrb	r2, [r3, #2]
 80046f8:	4bad      	ldr	r3, [pc, #692]	; (80049b0 <main+0x1060>)
 80046fa:	edd3 7a00 	vldr	s15, [r3]
 80046fe:	4bae      	ldr	r3, [pc, #696]	; (80049b8 <main+0x1068>)
 8004700:	ed93 7a00 	vldr	s14, [r3]
 8004704:	4bae      	ldr	r3, [pc, #696]	; (80049c0 <main+0x1070>)
 8004706:	edd3 6a00 	vldr	s13, [r3]
 800470a:	eeb0 1a66 	vmov.f32	s2, s13
 800470e:	eef0 0a47 	vmov.f32	s1, s14
 8004712:	eeb0 0a67 	vmov.f32	s0, s15
 8004716:	4610      	mov	r0, r2
 8004718:	f7fc fc94 	bl	8001044 <EP_PIDGain_Write>
						//Read PID Gain from EEPROM and FC -> GCS
						EP_PIDGain_Read(telemetry_rx_buf[2], &pitch_out_kp, &pitch_out_ki, &pitch_out_kd);
 800471c:	4ba9      	ldr	r3, [pc, #676]	; (80049c4 <main+0x1074>)
 800471e:	7898      	ldrb	r0, [r3, #2]
 8004720:	4ba7      	ldr	r3, [pc, #668]	; (80049c0 <main+0x1070>)
 8004722:	4aa5      	ldr	r2, [pc, #660]	; (80049b8 <main+0x1068>)
 8004724:	49a2      	ldr	r1, [pc, #648]	; (80049b0 <main+0x1060>)
 8004726:	f7fc fce8 	bl	80010fa <EP_PIDGain_Read>
						Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[2], pitch_out_kp, pitch_out_ki, pitch_out_kd);
 800472a:	4ba6      	ldr	r3, [pc, #664]	; (80049c4 <main+0x1074>)
 800472c:	789a      	ldrb	r2, [r3, #2]
 800472e:	4ba0      	ldr	r3, [pc, #640]	; (80049b0 <main+0x1060>)
 8004730:	edd3 7a00 	vldr	s15, [r3]
 8004734:	4ba0      	ldr	r3, [pc, #640]	; (80049b8 <main+0x1068>)
 8004736:	ed93 7a00 	vldr	s14, [r3]
 800473a:	4ba1      	ldr	r3, [pc, #644]	; (80049c0 <main+0x1070>)
 800473c:	edd3 6a00 	vldr	s13, [r3]
 8004740:	eeb0 1a66 	vmov.f32	s2, s13
 8004744:	eef0 0a47 	vmov.f32	s1, s14
 8004748:	eeb0 0a67 	vmov.f32	s0, s15
 800474c:	4611      	mov	r1, r2
 800474e:	489e      	ldr	r0, [pc, #632]	; (80049c8 <main+0x1078>)
 8004750:	f001 f8ec 	bl	800592c <Encode_Msg_PID_Gain>
						HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 20);
 8004754:	2214      	movs	r2, #20
 8004756:	499c      	ldr	r1, [pc, #624]	; (80049c8 <main+0x1078>)
 8004758:	489c      	ldr	r0, [pc, #624]	; (80049cc <main+0x107c>)
 800475a:	f005 fab1 	bl	8009cc0 <HAL_UART_Transmit_IT>
						break;
 800475e:	e209      	b.n	8004b74 <main+0x1224>
					case 4:
						//Save PID Gain at EEPROM
						yaw_heading_kp = *(float *)&telemetry_rx_buf[3];
 8004760:	4b92      	ldr	r3, [pc, #584]	; (80049ac <main+0x105c>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a9a      	ldr	r2, [pc, #616]	; (80049d0 <main+0x1080>)
 8004766:	6013      	str	r3, [r2, #0]
						yaw_heading_ki = *(float *)&telemetry_rx_buf[7];
 8004768:	4b92      	ldr	r3, [pc, #584]	; (80049b4 <main+0x1064>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a99      	ldr	r2, [pc, #612]	; (80049d4 <main+0x1084>)
 800476e:	6013      	str	r3, [r2, #0]
						yaw_heading_kd = *(float *)&telemetry_rx_buf[11];
 8004770:	4b92      	ldr	r3, [pc, #584]	; (80049bc <main+0x106c>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a98      	ldr	r2, [pc, #608]	; (80049d8 <main+0x1088>)
 8004776:	6013      	str	r3, [r2, #0]
						EP_PIDGain_Write(telemetry_rx_buf[2], yaw_heading_kp, yaw_heading_ki, yaw_heading_kd);
 8004778:	4b92      	ldr	r3, [pc, #584]	; (80049c4 <main+0x1074>)
 800477a:	789a      	ldrb	r2, [r3, #2]
 800477c:	4b94      	ldr	r3, [pc, #592]	; (80049d0 <main+0x1080>)
 800477e:	edd3 7a00 	vldr	s15, [r3]
 8004782:	4b94      	ldr	r3, [pc, #592]	; (80049d4 <main+0x1084>)
 8004784:	ed93 7a00 	vldr	s14, [r3]
 8004788:	4b93      	ldr	r3, [pc, #588]	; (80049d8 <main+0x1088>)
 800478a:	edd3 6a00 	vldr	s13, [r3]
 800478e:	eeb0 1a66 	vmov.f32	s2, s13
 8004792:	eef0 0a47 	vmov.f32	s1, s14
 8004796:	eeb0 0a67 	vmov.f32	s0, s15
 800479a:	4610      	mov	r0, r2
 800479c:	f7fc fc52 	bl	8001044 <EP_PIDGain_Write>
						//Read PID Gain from EEPROM and FC -> GCS
						EP_PIDGain_Read(telemetry_rx_buf[2], &yaw_heading_kp, &yaw_heading_ki, &yaw_heading_kd);
 80047a0:	4b88      	ldr	r3, [pc, #544]	; (80049c4 <main+0x1074>)
 80047a2:	7898      	ldrb	r0, [r3, #2]
 80047a4:	4b8c      	ldr	r3, [pc, #560]	; (80049d8 <main+0x1088>)
 80047a6:	4a8b      	ldr	r2, [pc, #556]	; (80049d4 <main+0x1084>)
 80047a8:	4989      	ldr	r1, [pc, #548]	; (80049d0 <main+0x1080>)
 80047aa:	f7fc fca6 	bl	80010fa <EP_PIDGain_Read>
						Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[2], yaw_heading_kp, yaw_heading_ki, yaw_heading_kd);
 80047ae:	4b85      	ldr	r3, [pc, #532]	; (80049c4 <main+0x1074>)
 80047b0:	789a      	ldrb	r2, [r3, #2]
 80047b2:	4b87      	ldr	r3, [pc, #540]	; (80049d0 <main+0x1080>)
 80047b4:	edd3 7a00 	vldr	s15, [r3]
 80047b8:	4b86      	ldr	r3, [pc, #536]	; (80049d4 <main+0x1084>)
 80047ba:	ed93 7a00 	vldr	s14, [r3]
 80047be:	4b86      	ldr	r3, [pc, #536]	; (80049d8 <main+0x1088>)
 80047c0:	edd3 6a00 	vldr	s13, [r3]
 80047c4:	eeb0 1a66 	vmov.f32	s2, s13
 80047c8:	eef0 0a47 	vmov.f32	s1, s14
 80047cc:	eeb0 0a67 	vmov.f32	s0, s15
 80047d0:	4611      	mov	r1, r2
 80047d2:	487d      	ldr	r0, [pc, #500]	; (80049c8 <main+0x1078>)
 80047d4:	f001 f8aa 	bl	800592c <Encode_Msg_PID_Gain>
						HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 20);
 80047d8:	2214      	movs	r2, #20
 80047da:	497b      	ldr	r1, [pc, #492]	; (80049c8 <main+0x1078>)
 80047dc:	487b      	ldr	r0, [pc, #492]	; (80049cc <main+0x107c>)
 80047de:	f005 fa6f 	bl	8009cc0 <HAL_UART_Transmit_IT>
						break;
 80047e2:	e1c7      	b.n	8004b74 <main+0x1224>
					case 5:
						//Save PID Gain at EEPROM
						yaw_rate_kp = *(float *)&telemetry_rx_buf[3];
 80047e4:	4b71      	ldr	r3, [pc, #452]	; (80049ac <main+0x105c>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a7c      	ldr	r2, [pc, #496]	; (80049dc <main+0x108c>)
 80047ea:	6013      	str	r3, [r2, #0]
						yaw_rate_ki = *(float *)&telemetry_rx_buf[7];
 80047ec:	4b71      	ldr	r3, [pc, #452]	; (80049b4 <main+0x1064>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a7b      	ldr	r2, [pc, #492]	; (80049e0 <main+0x1090>)
 80047f2:	6013      	str	r3, [r2, #0]
						yaw_rate_kd = *(float *)&telemetry_rx_buf[11];
 80047f4:	4b71      	ldr	r3, [pc, #452]	; (80049bc <main+0x106c>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a7a      	ldr	r2, [pc, #488]	; (80049e4 <main+0x1094>)
 80047fa:	6013      	str	r3, [r2, #0]
						EP_PIDGain_Write(telemetry_rx_buf[2], yaw_rate_kp, yaw_rate_ki, yaw_rate_kd);
 80047fc:	4b71      	ldr	r3, [pc, #452]	; (80049c4 <main+0x1074>)
 80047fe:	789a      	ldrb	r2, [r3, #2]
 8004800:	4b76      	ldr	r3, [pc, #472]	; (80049dc <main+0x108c>)
 8004802:	edd3 7a00 	vldr	s15, [r3]
 8004806:	4b76      	ldr	r3, [pc, #472]	; (80049e0 <main+0x1090>)
 8004808:	ed93 7a00 	vldr	s14, [r3]
 800480c:	4b75      	ldr	r3, [pc, #468]	; (80049e4 <main+0x1094>)
 800480e:	edd3 6a00 	vldr	s13, [r3]
 8004812:	eeb0 1a66 	vmov.f32	s2, s13
 8004816:	eef0 0a47 	vmov.f32	s1, s14
 800481a:	eeb0 0a67 	vmov.f32	s0, s15
 800481e:	4610      	mov	r0, r2
 8004820:	f7fc fc10 	bl	8001044 <EP_PIDGain_Write>
						//Read PID Gain from EEPROM and FC -> GCS
						EP_PIDGain_Read(telemetry_rx_buf[2], &yaw_rate_kp, &yaw_rate_ki, &yaw_rate_kd);
 8004824:	4b67      	ldr	r3, [pc, #412]	; (80049c4 <main+0x1074>)
 8004826:	7898      	ldrb	r0, [r3, #2]
 8004828:	4b6e      	ldr	r3, [pc, #440]	; (80049e4 <main+0x1094>)
 800482a:	4a6d      	ldr	r2, [pc, #436]	; (80049e0 <main+0x1090>)
 800482c:	496b      	ldr	r1, [pc, #428]	; (80049dc <main+0x108c>)
 800482e:	f7fc fc64 	bl	80010fa <EP_PIDGain_Read>
						Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[2], yaw_rate_kp, yaw_rate_ki, yaw_rate_kd);
 8004832:	4b64      	ldr	r3, [pc, #400]	; (80049c4 <main+0x1074>)
 8004834:	789a      	ldrb	r2, [r3, #2]
 8004836:	4b69      	ldr	r3, [pc, #420]	; (80049dc <main+0x108c>)
 8004838:	edd3 7a00 	vldr	s15, [r3]
 800483c:	4b68      	ldr	r3, [pc, #416]	; (80049e0 <main+0x1090>)
 800483e:	ed93 7a00 	vldr	s14, [r3]
 8004842:	4b68      	ldr	r3, [pc, #416]	; (80049e4 <main+0x1094>)
 8004844:	edd3 6a00 	vldr	s13, [r3]
 8004848:	eeb0 1a66 	vmov.f32	s2, s13
 800484c:	eef0 0a47 	vmov.f32	s1, s14
 8004850:	eeb0 0a67 	vmov.f32	s0, s15
 8004854:	4611      	mov	r1, r2
 8004856:	485c      	ldr	r0, [pc, #368]	; (80049c8 <main+0x1078>)
 8004858:	f001 f868 	bl	800592c <Encode_Msg_PID_Gain>
						HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 20);
 800485c:	2214      	movs	r2, #20
 800485e:	495a      	ldr	r1, [pc, #360]	; (80049c8 <main+0x1078>)
 8004860:	485a      	ldr	r0, [pc, #360]	; (80049cc <main+0x107c>)
 8004862:	f005 fa2d 	bl	8009cc0 <HAL_UART_Transmit_IT>
						break;
 8004866:	e185      	b.n	8004b74 <main+0x1224>
					case 0x10:
						switch(telemetry_rx_buf[3]) {
 8004868:	4b56      	ldr	r3, [pc, #344]	; (80049c4 <main+0x1074>)
 800486a:	78db      	ldrb	r3, [r3, #3]
 800486c:	2b06      	cmp	r3, #6
 800486e:	f200 8180 	bhi.w	8004b72 <main+0x1222>
 8004872:	a201      	add	r2, pc, #4	; (adr r2, 8004878 <main+0xf28>)
 8004874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004878:	08004895 	.word	0x08004895
 800487c:	080048cd 	.word	0x080048cd
 8004880:	08004905 	.word	0x08004905
 8004884:	0800493d 	.word	0x0800493d
 8004888:	08004975 	.word	0x08004975
 800488c:	08004a0d 	.word	0x08004a0d
 8004890:	08004a45 	.word	0x08004a45
						case 0:
							Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[3], roll_in_kp, roll_in_ki, roll_in_kd);
 8004894:	4b4b      	ldr	r3, [pc, #300]	; (80049c4 <main+0x1074>)
 8004896:	78da      	ldrb	r2, [r3, #3]
 8004898:	4b53      	ldr	r3, [pc, #332]	; (80049e8 <main+0x1098>)
 800489a:	edd3 7a00 	vldr	s15, [r3]
 800489e:	4b53      	ldr	r3, [pc, #332]	; (80049ec <main+0x109c>)
 80048a0:	ed93 7a00 	vldr	s14, [r3]
 80048a4:	4b52      	ldr	r3, [pc, #328]	; (80049f0 <main+0x10a0>)
 80048a6:	edd3 6a00 	vldr	s13, [r3]
 80048aa:	eeb0 1a66 	vmov.f32	s2, s13
 80048ae:	eef0 0a47 	vmov.f32	s1, s14
 80048b2:	eeb0 0a67 	vmov.f32	s0, s15
 80048b6:	4611      	mov	r1, r2
 80048b8:	4843      	ldr	r0, [pc, #268]	; (80049c8 <main+0x1078>)
 80048ba:	f001 f837 	bl	800592c <Encode_Msg_PID_Gain>
							HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 80048be:	230a      	movs	r3, #10
 80048c0:	2214      	movs	r2, #20
 80048c2:	4941      	ldr	r1, [pc, #260]	; (80049c8 <main+0x1078>)
 80048c4:	4841      	ldr	r0, [pc, #260]	; (80049cc <main+0x107c>)
 80048c6:	f005 f962 	bl	8009b8e <HAL_UART_Transmit>
							break;
 80048ca:	e152      	b.n	8004b72 <main+0x1222>
						case 1:
							Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[3], roll_out_kp, roll_out_ki, roll_out_kd);
 80048cc:	4b3d      	ldr	r3, [pc, #244]	; (80049c4 <main+0x1074>)
 80048ce:	78da      	ldrb	r2, [r3, #3]
 80048d0:	4b48      	ldr	r3, [pc, #288]	; (80049f4 <main+0x10a4>)
 80048d2:	edd3 7a00 	vldr	s15, [r3]
 80048d6:	4b48      	ldr	r3, [pc, #288]	; (80049f8 <main+0x10a8>)
 80048d8:	ed93 7a00 	vldr	s14, [r3]
 80048dc:	4b47      	ldr	r3, [pc, #284]	; (80049fc <main+0x10ac>)
 80048de:	edd3 6a00 	vldr	s13, [r3]
 80048e2:	eeb0 1a66 	vmov.f32	s2, s13
 80048e6:	eef0 0a47 	vmov.f32	s1, s14
 80048ea:	eeb0 0a67 	vmov.f32	s0, s15
 80048ee:	4611      	mov	r1, r2
 80048f0:	4835      	ldr	r0, [pc, #212]	; (80049c8 <main+0x1078>)
 80048f2:	f001 f81b 	bl	800592c <Encode_Msg_PID_Gain>
							HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 80048f6:	230a      	movs	r3, #10
 80048f8:	2214      	movs	r2, #20
 80048fa:	4933      	ldr	r1, [pc, #204]	; (80049c8 <main+0x1078>)
 80048fc:	4833      	ldr	r0, [pc, #204]	; (80049cc <main+0x107c>)
 80048fe:	f005 f946 	bl	8009b8e <HAL_UART_Transmit>
							break;
 8004902:	e136      	b.n	8004b72 <main+0x1222>
						case 2:
							Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[3], pitch_in_kp, pitch_in_ki, pitch_in_kd);
 8004904:	4b2f      	ldr	r3, [pc, #188]	; (80049c4 <main+0x1074>)
 8004906:	78da      	ldrb	r2, [r3, #3]
 8004908:	4b3d      	ldr	r3, [pc, #244]	; (8004a00 <main+0x10b0>)
 800490a:	edd3 7a00 	vldr	s15, [r3]
 800490e:	4b3d      	ldr	r3, [pc, #244]	; (8004a04 <main+0x10b4>)
 8004910:	ed93 7a00 	vldr	s14, [r3]
 8004914:	4b3c      	ldr	r3, [pc, #240]	; (8004a08 <main+0x10b8>)
 8004916:	edd3 6a00 	vldr	s13, [r3]
 800491a:	eeb0 1a66 	vmov.f32	s2, s13
 800491e:	eef0 0a47 	vmov.f32	s1, s14
 8004922:	eeb0 0a67 	vmov.f32	s0, s15
 8004926:	4611      	mov	r1, r2
 8004928:	4827      	ldr	r0, [pc, #156]	; (80049c8 <main+0x1078>)
 800492a:	f000 ffff 	bl	800592c <Encode_Msg_PID_Gain>
							HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 800492e:	230a      	movs	r3, #10
 8004930:	2214      	movs	r2, #20
 8004932:	4925      	ldr	r1, [pc, #148]	; (80049c8 <main+0x1078>)
 8004934:	4825      	ldr	r0, [pc, #148]	; (80049cc <main+0x107c>)
 8004936:	f005 f92a 	bl	8009b8e <HAL_UART_Transmit>
							break;
 800493a:	e11a      	b.n	8004b72 <main+0x1222>
						case 3:
							Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[3], pitch_out_kp, pitch_out_ki, pitch_out_kd);
 800493c:	4b21      	ldr	r3, [pc, #132]	; (80049c4 <main+0x1074>)
 800493e:	78da      	ldrb	r2, [r3, #3]
 8004940:	4b1b      	ldr	r3, [pc, #108]	; (80049b0 <main+0x1060>)
 8004942:	edd3 7a00 	vldr	s15, [r3]
 8004946:	4b1c      	ldr	r3, [pc, #112]	; (80049b8 <main+0x1068>)
 8004948:	ed93 7a00 	vldr	s14, [r3]
 800494c:	4b1c      	ldr	r3, [pc, #112]	; (80049c0 <main+0x1070>)
 800494e:	edd3 6a00 	vldr	s13, [r3]
 8004952:	eeb0 1a66 	vmov.f32	s2, s13
 8004956:	eef0 0a47 	vmov.f32	s1, s14
 800495a:	eeb0 0a67 	vmov.f32	s0, s15
 800495e:	4611      	mov	r1, r2
 8004960:	4819      	ldr	r0, [pc, #100]	; (80049c8 <main+0x1078>)
 8004962:	f000 ffe3 	bl	800592c <Encode_Msg_PID_Gain>
							HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8004966:	230a      	movs	r3, #10
 8004968:	2214      	movs	r2, #20
 800496a:	4917      	ldr	r1, [pc, #92]	; (80049c8 <main+0x1078>)
 800496c:	4817      	ldr	r0, [pc, #92]	; (80049cc <main+0x107c>)
 800496e:	f005 f90e 	bl	8009b8e <HAL_UART_Transmit>
							break;
 8004972:	e0fe      	b.n	8004b72 <main+0x1222>
						case 4:
							Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[3], yaw_heading_kp, yaw_heading_ki, yaw_heading_kd);
 8004974:	4b13      	ldr	r3, [pc, #76]	; (80049c4 <main+0x1074>)
 8004976:	78da      	ldrb	r2, [r3, #3]
 8004978:	4b15      	ldr	r3, [pc, #84]	; (80049d0 <main+0x1080>)
 800497a:	edd3 7a00 	vldr	s15, [r3]
 800497e:	4b15      	ldr	r3, [pc, #84]	; (80049d4 <main+0x1084>)
 8004980:	ed93 7a00 	vldr	s14, [r3]
 8004984:	4b14      	ldr	r3, [pc, #80]	; (80049d8 <main+0x1088>)
 8004986:	edd3 6a00 	vldr	s13, [r3]
 800498a:	eeb0 1a66 	vmov.f32	s2, s13
 800498e:	eef0 0a47 	vmov.f32	s1, s14
 8004992:	eeb0 0a67 	vmov.f32	s0, s15
 8004996:	4611      	mov	r1, r2
 8004998:	480b      	ldr	r0, [pc, #44]	; (80049c8 <main+0x1078>)
 800499a:	f000 ffc7 	bl	800592c <Encode_Msg_PID_Gain>
							HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 800499e:	230a      	movs	r3, #10
 80049a0:	2214      	movs	r2, #20
 80049a2:	4909      	ldr	r1, [pc, #36]	; (80049c8 <main+0x1078>)
 80049a4:	4809      	ldr	r0, [pc, #36]	; (80049cc <main+0x107c>)
 80049a6:	f005 f8f2 	bl	8009b8e <HAL_UART_Transmit>
							break;
 80049aa:	e0e2      	b.n	8004b72 <main+0x1222>
 80049ac:	200004db 	.word	0x200004db
 80049b0:	200004cc 	.word	0x200004cc
 80049b4:	200004df 	.word	0x200004df
 80049b8:	200004d4 	.word	0x200004d4
 80049bc:	200004e3 	.word	0x200004e3
 80049c0:	20000504 	.word	0x20000504
 80049c4:	200004d8 	.word	0x200004d8
 80049c8:	20000508 	.word	0x20000508
 80049cc:	20000580 	.word	0x20000580
 80049d0:	20000500 	.word	0x20000500
 80049d4:	200004b4 	.word	0x200004b4
 80049d8:	200004f0 	.word	0x200004f0
 80049dc:	200004c0 	.word	0x200004c0
 80049e0:	200004f8 	.word	0x200004f8
 80049e4:	200004c8 	.word	0x200004c8
 80049e8:	200004c4 	.word	0x200004c4
 80049ec:	200004d0 	.word	0x200004d0
 80049f0:	20000538 	.word	0x20000538
 80049f4:	20000534 	.word	0x20000534
 80049f8:	200004fc 	.word	0x200004fc
 80049fc:	200004ec 	.word	0x200004ec
 8004a00:	200004bc 	.word	0x200004bc
 8004a04:	200004b0 	.word	0x200004b0
 8004a08:	20000530 	.word	0x20000530
						case 5:
							Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[3], yaw_rate_kp, yaw_rate_ki, yaw_rate_kd);
 8004a0c:	4b7d      	ldr	r3, [pc, #500]	; (8004c04 <main+0x12b4>)
 8004a0e:	78da      	ldrb	r2, [r3, #3]
 8004a10:	4b7d      	ldr	r3, [pc, #500]	; (8004c08 <main+0x12b8>)
 8004a12:	edd3 7a00 	vldr	s15, [r3]
 8004a16:	4b7d      	ldr	r3, [pc, #500]	; (8004c0c <main+0x12bc>)
 8004a18:	ed93 7a00 	vldr	s14, [r3]
 8004a1c:	4b7c      	ldr	r3, [pc, #496]	; (8004c10 <main+0x12c0>)
 8004a1e:	edd3 6a00 	vldr	s13, [r3]
 8004a22:	eeb0 1a66 	vmov.f32	s2, s13
 8004a26:	eef0 0a47 	vmov.f32	s1, s14
 8004a2a:	eeb0 0a67 	vmov.f32	s0, s15
 8004a2e:	4611      	mov	r1, r2
 8004a30:	4878      	ldr	r0, [pc, #480]	; (8004c14 <main+0x12c4>)
 8004a32:	f000 ff7b 	bl	800592c <Encode_Msg_PID_Gain>
							HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8004a36:	230a      	movs	r3, #10
 8004a38:	2214      	movs	r2, #20
 8004a3a:	4976      	ldr	r1, [pc, #472]	; (8004c14 <main+0x12c4>)
 8004a3c:	4876      	ldr	r0, [pc, #472]	; (8004c18 <main+0x12c8>)
 8004a3e:	f005 f8a6 	bl	8009b8e <HAL_UART_Transmit>
							break;
 8004a42:	e096      	b.n	8004b72 <main+0x1222>
						case 6:
							Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 0, roll_in_kp, roll_in_ki, roll_in_kd);
 8004a44:	4b75      	ldr	r3, [pc, #468]	; (8004c1c <main+0x12cc>)
 8004a46:	edd3 7a00 	vldr	s15, [r3]
 8004a4a:	4b75      	ldr	r3, [pc, #468]	; (8004c20 <main+0x12d0>)
 8004a4c:	ed93 7a00 	vldr	s14, [r3]
 8004a50:	4b74      	ldr	r3, [pc, #464]	; (8004c24 <main+0x12d4>)
 8004a52:	edd3 6a00 	vldr	s13, [r3]
 8004a56:	eeb0 1a66 	vmov.f32	s2, s13
 8004a5a:	eef0 0a47 	vmov.f32	s1, s14
 8004a5e:	eeb0 0a67 	vmov.f32	s0, s15
 8004a62:	2100      	movs	r1, #0
 8004a64:	486b      	ldr	r0, [pc, #428]	; (8004c14 <main+0x12c4>)
 8004a66:	f000 ff61 	bl	800592c <Encode_Msg_PID_Gain>
							HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8004a6a:	230a      	movs	r3, #10
 8004a6c:	2214      	movs	r2, #20
 8004a6e:	4969      	ldr	r1, [pc, #420]	; (8004c14 <main+0x12c4>)
 8004a70:	4869      	ldr	r0, [pc, #420]	; (8004c18 <main+0x12c8>)
 8004a72:	f005 f88c 	bl	8009b8e <HAL_UART_Transmit>

							Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 1, roll_out_kp, roll_out_ki, roll_out_kd);
 8004a76:	4b6c      	ldr	r3, [pc, #432]	; (8004c28 <main+0x12d8>)
 8004a78:	edd3 7a00 	vldr	s15, [r3]
 8004a7c:	4b6b      	ldr	r3, [pc, #428]	; (8004c2c <main+0x12dc>)
 8004a7e:	ed93 7a00 	vldr	s14, [r3]
 8004a82:	4b6b      	ldr	r3, [pc, #428]	; (8004c30 <main+0x12e0>)
 8004a84:	edd3 6a00 	vldr	s13, [r3]
 8004a88:	eeb0 1a66 	vmov.f32	s2, s13
 8004a8c:	eef0 0a47 	vmov.f32	s1, s14
 8004a90:	eeb0 0a67 	vmov.f32	s0, s15
 8004a94:	2101      	movs	r1, #1
 8004a96:	485f      	ldr	r0, [pc, #380]	; (8004c14 <main+0x12c4>)
 8004a98:	f000 ff48 	bl	800592c <Encode_Msg_PID_Gain>
							HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8004a9c:	230a      	movs	r3, #10
 8004a9e:	2214      	movs	r2, #20
 8004aa0:	495c      	ldr	r1, [pc, #368]	; (8004c14 <main+0x12c4>)
 8004aa2:	485d      	ldr	r0, [pc, #372]	; (8004c18 <main+0x12c8>)
 8004aa4:	f005 f873 	bl	8009b8e <HAL_UART_Transmit>

							Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 2, pitch_in_kp, pitch_in_ki, pitch_in_kd);
 8004aa8:	4b62      	ldr	r3, [pc, #392]	; (8004c34 <main+0x12e4>)
 8004aaa:	edd3 7a00 	vldr	s15, [r3]
 8004aae:	4b62      	ldr	r3, [pc, #392]	; (8004c38 <main+0x12e8>)
 8004ab0:	ed93 7a00 	vldr	s14, [r3]
 8004ab4:	4b61      	ldr	r3, [pc, #388]	; (8004c3c <main+0x12ec>)
 8004ab6:	edd3 6a00 	vldr	s13, [r3]
 8004aba:	eeb0 1a66 	vmov.f32	s2, s13
 8004abe:	eef0 0a47 	vmov.f32	s1, s14
 8004ac2:	eeb0 0a67 	vmov.f32	s0, s15
 8004ac6:	2102      	movs	r1, #2
 8004ac8:	4852      	ldr	r0, [pc, #328]	; (8004c14 <main+0x12c4>)
 8004aca:	f000 ff2f 	bl	800592c <Encode_Msg_PID_Gain>
							HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8004ace:	230a      	movs	r3, #10
 8004ad0:	2214      	movs	r2, #20
 8004ad2:	4950      	ldr	r1, [pc, #320]	; (8004c14 <main+0x12c4>)
 8004ad4:	4850      	ldr	r0, [pc, #320]	; (8004c18 <main+0x12c8>)
 8004ad6:	f005 f85a 	bl	8009b8e <HAL_UART_Transmit>

							Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 3, pitch_out_kp, pitch_out_ki, pitch_out_kd);
 8004ada:	4b59      	ldr	r3, [pc, #356]	; (8004c40 <main+0x12f0>)
 8004adc:	edd3 7a00 	vldr	s15, [r3]
 8004ae0:	4b58      	ldr	r3, [pc, #352]	; (8004c44 <main+0x12f4>)
 8004ae2:	ed93 7a00 	vldr	s14, [r3]
 8004ae6:	4b58      	ldr	r3, [pc, #352]	; (8004c48 <main+0x12f8>)
 8004ae8:	edd3 6a00 	vldr	s13, [r3]
 8004aec:	eeb0 1a66 	vmov.f32	s2, s13
 8004af0:	eef0 0a47 	vmov.f32	s1, s14
 8004af4:	eeb0 0a67 	vmov.f32	s0, s15
 8004af8:	2103      	movs	r1, #3
 8004afa:	4846      	ldr	r0, [pc, #280]	; (8004c14 <main+0x12c4>)
 8004afc:	f000 ff16 	bl	800592c <Encode_Msg_PID_Gain>
							HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8004b00:	230a      	movs	r3, #10
 8004b02:	2214      	movs	r2, #20
 8004b04:	4943      	ldr	r1, [pc, #268]	; (8004c14 <main+0x12c4>)
 8004b06:	4844      	ldr	r0, [pc, #272]	; (8004c18 <main+0x12c8>)
 8004b08:	f005 f841 	bl	8009b8e <HAL_UART_Transmit>

							Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 4, yaw_heading_kp, yaw_heading_ki, yaw_heading_kd);
 8004b0c:	4b4f      	ldr	r3, [pc, #316]	; (8004c4c <main+0x12fc>)
 8004b0e:	edd3 7a00 	vldr	s15, [r3]
 8004b12:	4b4f      	ldr	r3, [pc, #316]	; (8004c50 <main+0x1300>)
 8004b14:	ed93 7a00 	vldr	s14, [r3]
 8004b18:	4b4e      	ldr	r3, [pc, #312]	; (8004c54 <main+0x1304>)
 8004b1a:	edd3 6a00 	vldr	s13, [r3]
 8004b1e:	eeb0 1a66 	vmov.f32	s2, s13
 8004b22:	eef0 0a47 	vmov.f32	s1, s14
 8004b26:	eeb0 0a67 	vmov.f32	s0, s15
 8004b2a:	2104      	movs	r1, #4
 8004b2c:	4839      	ldr	r0, [pc, #228]	; (8004c14 <main+0x12c4>)
 8004b2e:	f000 fefd 	bl	800592c <Encode_Msg_PID_Gain>
							HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8004b32:	230a      	movs	r3, #10
 8004b34:	2214      	movs	r2, #20
 8004b36:	4937      	ldr	r1, [pc, #220]	; (8004c14 <main+0x12c4>)
 8004b38:	4837      	ldr	r0, [pc, #220]	; (8004c18 <main+0x12c8>)
 8004b3a:	f005 f828 	bl	8009b8e <HAL_UART_Transmit>

							Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 5, yaw_rate_kp, yaw_rate_ki, yaw_rate_kd);
 8004b3e:	4b32      	ldr	r3, [pc, #200]	; (8004c08 <main+0x12b8>)
 8004b40:	edd3 7a00 	vldr	s15, [r3]
 8004b44:	4b31      	ldr	r3, [pc, #196]	; (8004c0c <main+0x12bc>)
 8004b46:	ed93 7a00 	vldr	s14, [r3]
 8004b4a:	4b31      	ldr	r3, [pc, #196]	; (8004c10 <main+0x12c0>)
 8004b4c:	edd3 6a00 	vldr	s13, [r3]
 8004b50:	eeb0 1a66 	vmov.f32	s2, s13
 8004b54:	eef0 0a47 	vmov.f32	s1, s14
 8004b58:	eeb0 0a67 	vmov.f32	s0, s15
 8004b5c:	2105      	movs	r1, #5
 8004b5e:	482d      	ldr	r0, [pc, #180]	; (8004c14 <main+0x12c4>)
 8004b60:	f000 fee4 	bl	800592c <Encode_Msg_PID_Gain>
							HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8004b64:	230a      	movs	r3, #10
 8004b66:	2214      	movs	r2, #20
 8004b68:	492a      	ldr	r1, [pc, #168]	; (8004c14 <main+0x12c4>)
 8004b6a:	482b      	ldr	r0, [pc, #172]	; (8004c18 <main+0x12c8>)
 8004b6c:	f005 f80f 	bl	8009b8e <HAL_UART_Transmit>
							break;
 8004b70:	bf00      	nop
						}
						break;
 8004b72:	bf00      	nop
					}
				}
			}
		}

		if (tim7_20ms_flag == 1 && tim7_100ms_flag != 1) {
 8004b74:	4b38      	ldr	r3, [pc, #224]	; (8004c58 <main+0x1308>)
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d10f      	bne.n	8004b9c <main+0x124c>
 8004b7c:	4b37      	ldr	r3, [pc, #220]	; (8004c5c <main+0x130c>)
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d00b      	beq.n	8004b9c <main+0x124c>
			//20ms - 50Hz
			tim7_20ms_flag = 0;
 8004b84:	4b34      	ldr	r3, [pc, #208]	; (8004c58 <main+0x1308>)
 8004b86:	2200      	movs	r2, #0
 8004b88:	701a      	strb	r2, [r3, #0]
			Encode_Msg_AHRS(&telemetry_tx_buf[0]);
 8004b8a:	4822      	ldr	r0, [pc, #136]	; (8004c14 <main+0x12c4>)
 8004b8c:	f000 fc92 	bl	80054b4 <Encode_Msg_AHRS>
			//Transmit
			HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 20);
 8004b90:	2214      	movs	r2, #20
 8004b92:	4920      	ldr	r1, [pc, #128]	; (8004c14 <main+0x12c4>)
 8004b94:	4820      	ldr	r0, [pc, #128]	; (8004c18 <main+0x12c8>)
 8004b96:	f005 f893 	bl	8009cc0 <HAL_UART_Transmit_IT>
 8004b9a:	e018      	b.n	8004bce <main+0x127e>
		}
		else if (tim7_100ms_flag == 1 && tim7_20ms_flag == 1) {
 8004b9c:	4b2f      	ldr	r3, [pc, #188]	; (8004c5c <main+0x130c>)
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d114      	bne.n	8004bce <main+0x127e>
 8004ba4:	4b2c      	ldr	r3, [pc, #176]	; (8004c58 <main+0x1308>)
 8004ba6:	781b      	ldrb	r3, [r3, #0]
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d110      	bne.n	8004bce <main+0x127e>
			//100ms - 10Hz
			tim7_100ms_flag = 0;
 8004bac:	4b2b      	ldr	r3, [pc, #172]	; (8004c5c <main+0x130c>)
 8004bae:	2200      	movs	r2, #0
 8004bb0:	701a      	strb	r2, [r3, #0]
			//20ms - 50Hz
			tim7_20ms_flag = 0;
 8004bb2:	4b29      	ldr	r3, [pc, #164]	; (8004c58 <main+0x1308>)
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	701a      	strb	r2, [r3, #0]
			//AHRS
			Encode_Msg_AHRS(&telemetry_tx_buf[0]);
 8004bb8:	4816      	ldr	r0, [pc, #88]	; (8004c14 <main+0x12c4>)
 8004bba:	f000 fc7b 	bl	80054b4 <Encode_Msg_AHRS>
			//GPS
			Encode_Msg_GPS(&telemetry_tx_buf[20]);
 8004bbe:	4828      	ldr	r0, [pc, #160]	; (8004c60 <main+0x1310>)
 8004bc0:	f000 fdf4 	bl	80057ac <Encode_Msg_GPS>
			//Transmit
			HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 40);
 8004bc4:	2228      	movs	r2, #40	; 0x28
 8004bc6:	4913      	ldr	r1, [pc, #76]	; (8004c14 <main+0x12c4>)
 8004bc8:	4813      	ldr	r0, [pc, #76]	; (8004c18 <main+0x12c8>)
 8004bca:	f005 f879 	bl	8009cc0 <HAL_UART_Transmit_IT>
		}

		//Battery Part
		batteryVolt = adcVal * 0.003619f;
 8004bce:	88fb      	ldrh	r3, [r7, #6]
 8004bd0:	ee07 3a90 	vmov	s15, r3
 8004bd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004bd8:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8004c64 <main+0x1314>
 8004bdc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004be0:	4b21      	ldr	r3, [pc, #132]	; (8004c68 <main+0x1318>)
 8004be2:	edc3 7a00 	vstr	s15, [r3]
		//		printf("%d\t%.2f\n", adcVal, batteryVolt);
		if (batteryVolt < 10.0f) {
 8004be6:	4b20      	ldr	r3, [pc, #128]	; (8004c68 <main+0x1318>)
 8004be8:	edd3 7a00 	vldr	s15, [r3]
 8004bec:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004bf0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bf8:	d53a      	bpl.n	8004c70 <main+0x1320>
			low_bat_flag = 1;
 8004bfa:	4b1c      	ldr	r3, [pc, #112]	; (8004c6c <main+0x131c>)
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	701a      	strb	r2, [r3, #0]
 8004c00:	e039      	b.n	8004c76 <main+0x1326>
 8004c02:	bf00      	nop
 8004c04:	200004d8 	.word	0x200004d8
 8004c08:	200004c0 	.word	0x200004c0
 8004c0c:	200004f8 	.word	0x200004f8
 8004c10:	200004c8 	.word	0x200004c8
 8004c14:	20000508 	.word	0x20000508
 8004c18:	20000580 	.word	0x20000580
 8004c1c:	200004c4 	.word	0x200004c4
 8004c20:	200004d0 	.word	0x200004d0
 8004c24:	20000538 	.word	0x20000538
 8004c28:	20000534 	.word	0x20000534
 8004c2c:	200004fc 	.word	0x200004fc
 8004c30:	200004ec 	.word	0x200004ec
 8004c34:	200004bc 	.word	0x200004bc
 8004c38:	200004b0 	.word	0x200004b0
 8004c3c:	20000530 	.word	0x20000530
 8004c40:	200004cc 	.word	0x200004cc
 8004c44:	200004d4 	.word	0x200004d4
 8004c48:	20000504 	.word	0x20000504
 8004c4c:	20000500 	.word	0x20000500
 8004c50:	200004b4 	.word	0x200004b4
 8004c54:	200004f0 	.word	0x200004f0
 8004c58:	20000218 	.word	0x20000218
 8004c5c:	20000219 	.word	0x20000219
 8004c60:	2000051c 	.word	0x2000051c
 8004c64:	3b6d2cbf 	.word	0x3b6d2cbf
 8004c68:	200004b8 	.word	0x200004b8
 8004c6c:	2000020c 	.word	0x2000020c
//			LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
//			TIM3->PSC = 1500;
		}
		else {
			low_bat_flag = 0;
 8004c70:	4b9c      	ldr	r3, [pc, #624]	; (8004ee4 <main+0x1594>)
 8004c72:	2200      	movs	r2, #0
 8004c74:	701a      	strb	r2, [r3, #0]
//			LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
		}


		//BNO080 - 9DOF
		if (BNO080_dataAvailable() == 1) {
 8004c76:	f7fc fcbb 	bl	80015f0 <BNO080_dataAvailable>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d134      	bne.n	8004cea <main+0x139a>
			LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_0);
 8004c80:	2101      	movs	r1, #1
 8004c82:	4899      	ldr	r0, [pc, #612]	; (8004ee8 <main+0x1598>)
 8004c84:	f7fe fe2c 	bl	80038e0 <LL_GPIO_TogglePin>

			q[0] = BNO080_getQuatI();
 8004c88:	f7fc fe3e 	bl	8001908 <BNO080_getQuatI>
 8004c8c:	eef0 7a40 	vmov.f32	s15, s0
 8004c90:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
			q[1] = BNO080_getQuatJ();
 8004c94:	f7fc fe4e 	bl	8001934 <BNO080_getQuatJ>
 8004c98:	eef0 7a40 	vmov.f32	s15, s0
 8004c9c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
			q[2] = BNO080_getQuatK();
 8004ca0:	f7fc fe5e 	bl	8001960 <BNO080_getQuatK>
 8004ca4:	eef0 7a40 	vmov.f32	s15, s0
 8004ca8:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
			q[3] = BNO080_getQuatReal();
 8004cac:	f7fc fe6e 	bl	800198c <BNO080_getQuatReal>
 8004cb0:	eef0 7a40 	vmov.f32	s15, s0
 8004cb4:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
			quatRadianAccuracy = BNO080_getQuatRadianAccuracy();
 8004cb8:	f7fc fe7e 	bl	80019b8 <BNO080_getQuatRadianAccuracy>
 8004cbc:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38

			Quaternion_Update(&q[0]);
 8004cc0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f7fe f9d7 	bl	8003078 <Quaternion_Update>

			BNO080_Roll = -BNO080_Roll;
 8004cca:	4b88      	ldr	r3, [pc, #544]	; (8004eec <main+0x159c>)
 8004ccc:	edd3 7a00 	vldr	s15, [r3]
 8004cd0:	eef1 7a67 	vneg.f32	s15, s15
 8004cd4:	4b85      	ldr	r3, [pc, #532]	; (8004eec <main+0x159c>)
 8004cd6:	edc3 7a00 	vstr	s15, [r3]
			BNO080_Pitch = -BNO080_Pitch;
 8004cda:	4b85      	ldr	r3, [pc, #532]	; (8004ef0 <main+0x15a0>)
 8004cdc:	edd3 7a00 	vldr	s15, [r3]
 8004ce0:	eef1 7a67 	vneg.f32	s15, s15
 8004ce4:	4b82      	ldr	r3, [pc, #520]	; (8004ef0 <main+0x15a0>)
 8004ce6:	edc3 7a00 	vstr	s15, [r3]
			//			printf("%.2f\t%.2f\n", BNO080_Roll, BNO080_Pitch);
			//			printf("%.2f\n", BNO080_Yaw);
		}

		//ICM20602 - 6DOF
		if (ICM20602_DataReady() == 1) {
 8004cea:	f7fd fc57 	bl	800259c <ICM20602_DataReady>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d14c      	bne.n	8004d8e <main+0x143e>
			LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_1);
 8004cf4:	2102      	movs	r1, #2
 8004cf6:	487c      	ldr	r0, [pc, #496]	; (8004ee8 <main+0x1598>)
 8004cf8:	f7fe fdf2 	bl	80038e0 <LL_GPIO_TogglePin>
			ICM20602_Get3AxisGyroRawData(&ICM20602.gyro_x_raw);
 8004cfc:	487d      	ldr	r0, [pc, #500]	; (8004ef4 <main+0x15a4>)
 8004cfe:	f7fd fc21 	bl	8002544 <ICM20602_Get3AxisGyroRawData>
			ICM20602.gyro_x = ICM20602.gyro_x_raw * 2000.f / 32768.f;
 8004d02:	4b7d      	ldr	r3, [pc, #500]	; (8004ef8 <main+0x15a8>)
 8004d04:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004d08:	ee07 3a90 	vmov	s15, r3
 8004d0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d10:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8004efc <main+0x15ac>
 8004d14:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004d18:	eddf 6a79 	vldr	s13, [pc, #484]	; 8004f00 <main+0x15b0>
 8004d1c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004d20:	4b75      	ldr	r3, [pc, #468]	; (8004ef8 <main+0x15a8>)
 8004d22:	edc3 7a07 	vstr	s15, [r3, #28]
			ICM20602.gyro_y = ICM20602.gyro_y_raw * 2000.f / 32768.f;
 8004d26:	4b74      	ldr	r3, [pc, #464]	; (8004ef8 <main+0x15a8>)
 8004d28:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8004d2c:	ee07 3a90 	vmov	s15, r3
 8004d30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d34:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8004efc <main+0x15ac>
 8004d38:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004d3c:	eddf 6a70 	vldr	s13, [pc, #448]	; 8004f00 <main+0x15b0>
 8004d40:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004d44:	4b6c      	ldr	r3, [pc, #432]	; (8004ef8 <main+0x15a8>)
 8004d46:	edc3 7a08 	vstr	s15, [r3, #32]
			ICM20602.gyro_z = ICM20602.gyro_z_raw * 2000.f / 32768.f;
 8004d4a:	4b6b      	ldr	r3, [pc, #428]	; (8004ef8 <main+0x15a8>)
 8004d4c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8004d50:	ee07 3a90 	vmov	s15, r3
 8004d54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d58:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8004efc <main+0x15ac>
 8004d5c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004d60:	eddf 6a67 	vldr	s13, [pc, #412]	; 8004f00 <main+0x15b0>
 8004d64:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004d68:	4b63      	ldr	r3, [pc, #396]	; (8004ef8 <main+0x15a8>)
 8004d6a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

			ICM20602.gyro_x = -ICM20602.gyro_x;
 8004d6e:	4b62      	ldr	r3, [pc, #392]	; (8004ef8 <main+0x15a8>)
 8004d70:	edd3 7a07 	vldr	s15, [r3, #28]
 8004d74:	eef1 7a67 	vneg.f32	s15, s15
 8004d78:	4b5f      	ldr	r3, [pc, #380]	; (8004ef8 <main+0x15a8>)
 8004d7a:	edc3 7a07 	vstr	s15, [r3, #28]
			ICM20602.gyro_z = -ICM20602.gyro_z;
 8004d7e:	4b5e      	ldr	r3, [pc, #376]	; (8004ef8 <main+0x15a8>)
 8004d80:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8004d84:	eef1 7a67 	vneg.f32	s15, s15
 8004d88:	4b5b      	ldr	r3, [pc, #364]	; (8004ef8 <main+0x15a8>)
 8004d8a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			//		printf("%d,%d,%d\n", ICM20602.gyro_x_raw ,ICM20602.gyro_y_raw, ICM20602.gyro_z_raw);
			//		printf("%d,%d,%d\n", (int)(ICM20602.gyro_x * 100), (int)(ICM20602.gyro_y * 100), (int)(ICM20602.gyro_z * 100));
		}

		//LPS22HH Barometer
		if(LPS22HH_DataReady() == 1) {
 8004d8e:	f7fd fe75 	bl	8002a7c <LPS22HH_DataReady>
 8004d92:	4603      	mov	r3, r0
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d138      	bne.n	8004e0a <main+0x14ba>
			LPS22HH_GetPressure(&LPS22HH.pressure_raw);
 8004d98:	485a      	ldr	r0, [pc, #360]	; (8004f04 <main+0x15b4>)
 8004d9a:	f7fd fe7b 	bl	8002a94 <LPS22HH_GetPressure>
			LPS22HH_GetTemperature(&LPS22HH.temperature_raw);
 8004d9e:	485a      	ldr	r0, [pc, #360]	; (8004f08 <main+0x15b8>)
 8004da0:	f7fd fe85 	bl	8002aae <LPS22HH_GetTemperature>
			LPS22HH.baroAlt = getAltitude2(LPS22HH.pressure_raw/4096.f, LPS22HH.temperature_raw / 100.f);
 8004da4:	4b57      	ldr	r3, [pc, #348]	; (8004f04 <main+0x15b4>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	ee07 3a90 	vmov	s15, r3
 8004dac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004db0:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8004f0c <main+0x15bc>
 8004db4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004db8:	4b52      	ldr	r3, [pc, #328]	; (8004f04 <main+0x15b4>)
 8004dba:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004dbe:	ee07 3a90 	vmov	s15, r3
 8004dc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004dc6:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8004f10 <main+0x15c0>
 8004dca:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8004dce:	eef0 0a46 	vmov.f32	s1, s12
 8004dd2:	eeb0 0a66 	vmov.f32	s0, s13
 8004dd6:	f7fd fe77 	bl	8002ac8 <getAltitude2>
 8004dda:	eef0 7a40 	vmov.f32	s15, s0
 8004dde:	4b49      	ldr	r3, [pc, #292]	; (8004f04 <main+0x15b4>)
 8004de0:	edc3 7a02 	vstr	s15, [r3, #8]
#define X 0.99f
			LPS22HH.baroAltFilt = LPS22HH.baroAltFilt * X + LPS22HH.baroAlt * (1.0f -X);
 8004de4:	4b47      	ldr	r3, [pc, #284]	; (8004f04 <main+0x15b4>)
 8004de6:	edd3 7a03 	vldr	s15, [r3, #12]
 8004dea:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8004f14 <main+0x15c4>
 8004dee:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004df2:	4b44      	ldr	r3, [pc, #272]	; (8004f04 <main+0x15b4>)
 8004df4:	edd3 7a02 	vldr	s15, [r3, #8]
 8004df8:	eddf 6a47 	vldr	s13, [pc, #284]	; 8004f18 <main+0x15c8>
 8004dfc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004e00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e04:	4b3f      	ldr	r3, [pc, #252]	; (8004f04 <main+0x15b4>)
 8004e06:	edc3 7a03 	vstr	s15, [r3, #12]
			//			printf("%d,%d\n", (int)(LPS22HH.baroAlt * 100), (int)(LPS22HH.baroAltFilt * 100));
		}
		//M8N GPS
		if(m8n_rx_cplt_flag == 1) {
 8004e0a:	4b44      	ldr	r3, [pc, #272]	; (8004f1c <main+0x15cc>)
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d111      	bne.n	8004e36 <main+0x14e6>
			m8n_rx_cplt_flag = 0;
 8004e12:	4b42      	ldr	r3, [pc, #264]	; (8004f1c <main+0x15cc>)
 8004e14:	2200      	movs	r2, #0
 8004e16:	701a      	strb	r2, [r3, #0]
			if (M8N_UBX_CHKSUM_Check(&m8n_rx_buf[0], 36) == 1) {
 8004e18:	2124      	movs	r1, #36	; 0x24
 8004e1a:	4841      	ldr	r0, [pc, #260]	; (8004f20 <main+0x15d0>)
 8004e1c:	f7fe f83a 	bl	8002e94 <M8N_UBX_CHKSUM_Check>
 8004e20:	4603      	mov	r3, r0
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d107      	bne.n	8004e36 <main+0x14e6>
				LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_2);
 8004e26:	2104      	movs	r1, #4
 8004e28:	482f      	ldr	r0, [pc, #188]	; (8004ee8 <main+0x1598>)
 8004e2a:	f7fe fd59 	bl	80038e0 <LL_GPIO_TogglePin>
				M8N_UBX_NAV_POSLLH_Parsing(&m8n_rx_buf[0], &posllh);
 8004e2e:	493d      	ldr	r1, [pc, #244]	; (8004f24 <main+0x15d4>)
 8004e30:	483b      	ldr	r0, [pc, #236]	; (8004f20 <main+0x15d0>)
 8004e32:	f7fe f869 	bl	8002f08 <M8N_UBX_NAV_POSLLH_Parsing>

				//				printf("LAT: %ld\tLON: %ld\tHeight: %ld\n", posllh.lat, posllh.lon, posllh.height);
			}
		}
		//Controller
		if (ibus_rx_cplt_flag == 1) {
 8004e36:	4b3c      	ldr	r3, [pc, #240]	; (8004f28 <main+0x15d8>)
 8004e38:	781b      	ldrb	r3, [r3, #0]
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d123      	bne.n	8004e86 <main+0x1536>
			ibus_rx_cplt_flag = 0;
 8004e3e:	4b3a      	ldr	r3, [pc, #232]	; (8004f28 <main+0x15d8>)
 8004e40:	2200      	movs	r2, #0
 8004e42:	701a      	strb	r2, [r3, #0]
			if (iBus_Check_CHECKSUM(&ibus_rx_buf[0], 32) == 1) {
 8004e44:	2120      	movs	r1, #32
 8004e46:	4839      	ldr	r0, [pc, #228]	; (8004f2c <main+0x15dc>)
 8004e48:	f7fd f866 	bl	8001f18 <iBus_Check_CHECKSUM>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d119      	bne.n	8004e86 <main+0x1536>
				LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_2);
 8004e52:	2104      	movs	r1, #4
 8004e54:	4824      	ldr	r0, [pc, #144]	; (8004ee8 <main+0x1598>)
 8004e56:	f7fe fd43 	bl	80038e0 <LL_GPIO_TogglePin>

				iBus_Parsing(&ibus_rx_buf[0], &iBus);
 8004e5a:	4935      	ldr	r1, [pc, #212]	; (8004f30 <main+0x15e0>)
 8004e5c:	4833      	ldr	r0, [pc, #204]	; (8004f2c <main+0x15dc>)
 8004e5e:	f7fd f891 	bl	8001f84 <iBus_Parsing>
				iBus_rx_cnt++;
 8004e62:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8004e66:	3301      	adds	r3, #1
 8004e68:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
				if (iBus_isActiveFailSafe(&iBus) == 1) {
 8004e6c:	4830      	ldr	r0, [pc, #192]	; (8004f30 <main+0x15e0>)
 8004e6e:	f7fd f902 	bl	8002076 <iBus_isActiveFailSafe>
 8004e72:	4603      	mov	r3, r0
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d103      	bne.n	8004e80 <main+0x1530>
					failsafe_flag = 1;
 8004e78:	4b2e      	ldr	r3, [pc, #184]	; (8004f34 <main+0x15e4>)
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	701a      	strb	r2, [r3, #0]
 8004e7e:	e002      	b.n	8004e86 <main+0x1536>
				}
				else {
					failsafe_flag = 0;
 8004e80:	4b2c      	ldr	r3, [pc, #176]	; (8004f34 <main+0x15e4>)
 8004e82:	2200      	movs	r2, #0
 8004e84:	701a      	strb	r2, [r3, #0]
				//				printf("%d\t%d\t%d\t%d\t%d\t%d\n", iBus.RH, iBus.RV, iBus.LV, iBus.LH, iBus.SwA, iBus.SwC);
				//				HAL_Delay(100);
			}
		}

		if (tim7_1000ms_flag == 1) {
 8004e86:	4b2c      	ldr	r3, [pc, #176]	; (8004f38 <main+0x15e8>)
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d10c      	bne.n	8004ea8 <main+0x1558>
			tim7_1000ms_flag = 0;
 8004e8e:	4b2a      	ldr	r3, [pc, #168]	; (8004f38 <main+0x15e8>)
 8004e90:	2200      	movs	r2, #0
 8004e92:	701a      	strb	r2, [r3, #0]
			if (iBus_rx_cnt == 0) {
 8004e94:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d102      	bne.n	8004ea2 <main+0x1552>
				failsafe_flag = 2;
 8004e9c:	4b25      	ldr	r3, [pc, #148]	; (8004f34 <main+0x15e4>)
 8004e9e:	2202      	movs	r2, #2
 8004ea0:	701a      	strb	r2, [r3, #0]
			}
			iBus_rx_cnt = 0;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
		}

		if (failsafe_flag == 1 || failsafe_flag == 2 || low_bat_flag == 1 || iBus.SwC == 2000) {
 8004ea8:	4b22      	ldr	r3, [pc, #136]	; (8004f34 <main+0x15e4>)
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d00c      	beq.n	8004eca <main+0x157a>
 8004eb0:	4b20      	ldr	r3, [pc, #128]	; (8004f34 <main+0x15e4>)
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	2b02      	cmp	r3, #2
 8004eb6:	d008      	beq.n	8004eca <main+0x157a>
 8004eb8:	4b0a      	ldr	r3, [pc, #40]	; (8004ee4 <main+0x1594>)
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d004      	beq.n	8004eca <main+0x157a>
 8004ec0:	4b1b      	ldr	r3, [pc, #108]	; (8004f30 <main+0x15e0>)
 8004ec2:	899b      	ldrh	r3, [r3, #12]
 8004ec4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004ec8:	d105      	bne.n	8004ed6 <main+0x1586>
			LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8004eca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004ece:	481b      	ldr	r0, [pc, #108]	; (8004f3c <main+0x15ec>)
 8004ed0:	f7fe fc84 	bl	80037dc <LL_TIM_CC_EnableChannel>
 8004ed4:	e004      	b.n	8004ee0 <main+0x1590>
		}
		else {
			LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8004ed6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004eda:	4818      	ldr	r0, [pc, #96]	; (8004f3c <main+0x15ec>)
 8004edc:	f7fe fc8f 	bl	80037fe <LL_TIM_CC_DisableChannel>
		if (tim7_1ms_flag == 1) {
 8004ee0:	f7ff b92b 	b.w	800413a <main+0x7ea>
 8004ee4:	2000020c 	.word	0x2000020c
 8004ee8:	40020800 	.word	0x40020800
 8004eec:	200003a8 	.word	0x200003a8
 8004ef0:	200003b0 	.word	0x200003b0
 8004ef4:	20000344 	.word	0x20000344
 8004ef8:	2000033c 	.word	0x2000033c
 8004efc:	44fa0000 	.word	0x44fa0000
 8004f00:	47000000 	.word	0x47000000
 8004f04:	20000364 	.word	0x20000364
 8004f08:	20000368 	.word	0x20000368
 8004f0c:	45800000 	.word	0x45800000
 8004f10:	42c80000 	.word	0x42c80000
 8004f14:	3f7d70a4 	.word	0x3f7d70a4
 8004f18:	3c23d700 	.word	0x3c23d700
 8004f1c:	20000214 	.word	0x20000214
 8004f20:	2000055c 	.word	0x2000055c
 8004f24:	20000378 	.word	0x20000378
 8004f28:	20000215 	.word	0x20000215
 8004f2c:	2000053c 	.word	0x2000053c
 8004f30:	20000318 	.word	0x20000318
 8004f34:	2000020b 	.word	0x2000020b
 8004f38:	2000021a 	.word	0x2000021a
 8004f3c:	40000400 	.word	0x40000400

08004f40 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b094      	sub	sp, #80	; 0x50
 8004f44:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004f46:	f107 0320 	add.w	r3, r7, #32
 8004f4a:	2230      	movs	r2, #48	; 0x30
 8004f4c:	2100      	movs	r1, #0
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f006 fde6 	bl	800bb20 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004f54:	f107 030c 	add.w	r3, r7, #12
 8004f58:	2200      	movs	r2, #0
 8004f5a:	601a      	str	r2, [r3, #0]
 8004f5c:	605a      	str	r2, [r3, #4]
 8004f5e:	609a      	str	r2, [r3, #8]
 8004f60:	60da      	str	r2, [r3, #12]
 8004f62:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8004f64:	2300      	movs	r3, #0
 8004f66:	60bb      	str	r3, [r7, #8]
 8004f68:	4b28      	ldr	r3, [pc, #160]	; (800500c <SystemClock_Config+0xcc>)
 8004f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6c:	4a27      	ldr	r2, [pc, #156]	; (800500c <SystemClock_Config+0xcc>)
 8004f6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f72:	6413      	str	r3, [r2, #64]	; 0x40
 8004f74:	4b25      	ldr	r3, [pc, #148]	; (800500c <SystemClock_Config+0xcc>)
 8004f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f7c:	60bb      	str	r3, [r7, #8]
 8004f7e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004f80:	2300      	movs	r3, #0
 8004f82:	607b      	str	r3, [r7, #4]
 8004f84:	4b22      	ldr	r3, [pc, #136]	; (8005010 <SystemClock_Config+0xd0>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a21      	ldr	r2, [pc, #132]	; (8005010 <SystemClock_Config+0xd0>)
 8004f8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f8e:	6013      	str	r3, [r2, #0]
 8004f90:	4b1f      	ldr	r3, [pc, #124]	; (8005010 <SystemClock_Config+0xd0>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f98:	607b      	str	r3, [r7, #4]
 8004f9a:	687b      	ldr	r3, [r7, #4]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004fa0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004fa4:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004fa6:	2302      	movs	r3, #2
 8004fa8:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004faa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004fae:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8004fb0:	2304      	movs	r3, #4
 8004fb2:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8004fb4:	23a8      	movs	r3, #168	; 0xa8
 8004fb6:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004fb8:	2302      	movs	r3, #2
 8004fba:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8004fbc:	2304      	movs	r3, #4
 8004fbe:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004fc0:	f107 0320 	add.w	r3, r7, #32
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f004 f933 	bl	8009230 <HAL_RCC_OscConfig>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d001      	beq.n	8004fd4 <SystemClock_Config+0x94>
	{
		Error_Handler();
 8004fd0:	f000 fcfe 	bl	80059d0 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004fd4:	230f      	movs	r3, #15
 8004fd6:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004fd8:	2302      	movs	r3, #2
 8004fda:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004fe0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004fe4:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004fe6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004fea:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004fec:	f107 030c 	add.w	r3, r7, #12
 8004ff0:	2105      	movs	r1, #5
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f004 fb8c 	bl	8009710 <HAL_RCC_ClockConfig>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d001      	beq.n	8005002 <SystemClock_Config+0xc2>
	{
		Error_Handler();
 8004ffe:	f000 fce7 	bl	80059d0 <Error_Handler>
	}
}
 8005002:	bf00      	nop
 8005004:	3750      	adds	r7, #80	; 0x50
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}
 800500a:	bf00      	nop
 800500c:	40023800 	.word	0x40023800
 8005010:	40007000 	.word	0x40007000

08005014 <Is_iBus_Throttle_Min>:

/* USER CODE BEGIN 4 */
int Is_iBus_Throttle_Min(void) {
 8005014:	b580      	push	{r7, lr}
 8005016:	af00      	add	r7, sp, #0
	if (ibus_rx_cplt_flag == 1) {
 8005018:	4b0e      	ldr	r3, [pc, #56]	; (8005054 <Is_iBus_Throttle_Min+0x40>)
 800501a:	781b      	ldrb	r3, [r3, #0]
 800501c:	2b01      	cmp	r3, #1
 800501e:	d115      	bne.n	800504c <Is_iBus_Throttle_Min+0x38>
		ibus_rx_cplt_flag = 0;
 8005020:	4b0c      	ldr	r3, [pc, #48]	; (8005054 <Is_iBus_Throttle_Min+0x40>)
 8005022:	2200      	movs	r2, #0
 8005024:	701a      	strb	r2, [r3, #0]
		if (iBus_Check_CHECKSUM(&ibus_rx_buf[0], 32) == 1) {
 8005026:	2120      	movs	r1, #32
 8005028:	480b      	ldr	r0, [pc, #44]	; (8005058 <Is_iBus_Throttle_Min+0x44>)
 800502a:	f7fc ff75 	bl	8001f18 <iBus_Check_CHECKSUM>
 800502e:	4603      	mov	r3, r0
 8005030:	2b01      	cmp	r3, #1
 8005032:	d10b      	bne.n	800504c <Is_iBus_Throttle_Min+0x38>
			iBus_Parsing(&ibus_rx_buf[0], &iBus);
 8005034:	4909      	ldr	r1, [pc, #36]	; (800505c <Is_iBus_Throttle_Min+0x48>)
 8005036:	4808      	ldr	r0, [pc, #32]	; (8005058 <Is_iBus_Throttle_Min+0x44>)
 8005038:	f7fc ffa4 	bl	8001f84 <iBus_Parsing>
			if(iBus.LV < 1010) return 1;
 800503c:	4b07      	ldr	r3, [pc, #28]	; (800505c <Is_iBus_Throttle_Min+0x48>)
 800503e:	889b      	ldrh	r3, [r3, #4]
 8005040:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8005044:	4293      	cmp	r3, r2
 8005046:	d801      	bhi.n	800504c <Is_iBus_Throttle_Min+0x38>
 8005048:	2301      	movs	r3, #1
 800504a:	e000      	b.n	800504e <Is_iBus_Throttle_Min+0x3a>

		}
	}
	return 0;
 800504c:	2300      	movs	r3, #0
}
 800504e:	4618      	mov	r0, r3
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	20000215 	.word	0x20000215
 8005058:	2000053c 	.word	0x2000053c
 800505c:	20000318 	.word	0x20000318

08005060 <ESC_Calibration>:

void ESC_Calibration(void) {
 8005060:	b580      	push	{r7, lr}
 8005062:	af00      	add	r7, sp, #0
	TIM5 -> CCR1 = 21000;
 8005064:	4b14      	ldr	r3, [pc, #80]	; (80050b8 <ESC_Calibration+0x58>)
 8005066:	f245 2208 	movw	r2, #21000	; 0x5208
 800506a:	635a      	str	r2, [r3, #52]	; 0x34
	TIM5 -> CCR2 = 21000;
 800506c:	4b12      	ldr	r3, [pc, #72]	; (80050b8 <ESC_Calibration+0x58>)
 800506e:	f245 2208 	movw	r2, #21000	; 0x5208
 8005072:	639a      	str	r2, [r3, #56]	; 0x38
	TIM5 -> CCR3 = 21000;
 8005074:	4b10      	ldr	r3, [pc, #64]	; (80050b8 <ESC_Calibration+0x58>)
 8005076:	f245 2208 	movw	r2, #21000	; 0x5208
 800507a:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM5 -> CCR4 = 21000;
 800507c:	4b0e      	ldr	r3, [pc, #56]	; (80050b8 <ESC_Calibration+0x58>)
 800507e:	f245 2208 	movw	r2, #21000	; 0x5208
 8005082:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(7000);
 8005084:	f641 3058 	movw	r0, #7000	; 0x1b58
 8005088:	f001 fed0 	bl	8006e2c <HAL_Delay>
	TIM5 -> CCR1 = 10500;
 800508c:	4b0a      	ldr	r3, [pc, #40]	; (80050b8 <ESC_Calibration+0x58>)
 800508e:	f642 1204 	movw	r2, #10500	; 0x2904
 8005092:	635a      	str	r2, [r3, #52]	; 0x34
	TIM5 -> CCR2 = 10500;
 8005094:	4b08      	ldr	r3, [pc, #32]	; (80050b8 <ESC_Calibration+0x58>)
 8005096:	f642 1204 	movw	r2, #10500	; 0x2904
 800509a:	639a      	str	r2, [r3, #56]	; 0x38
	TIM5 -> CCR3 = 10500;
 800509c:	4b06      	ldr	r3, [pc, #24]	; (80050b8 <ESC_Calibration+0x58>)
 800509e:	f642 1204 	movw	r2, #10500	; 0x2904
 80050a2:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM5 -> CCR4 = 10500;
 80050a4:	4b04      	ldr	r3, [pc, #16]	; (80050b8 <ESC_Calibration+0x58>)
 80050a6:	f642 1204 	movw	r2, #10500	; 0x2904
 80050aa:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(8000);
 80050ac:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80050b0:	f001 febc 	bl	8006e2c <HAL_Delay>
}
 80050b4:	bf00      	nop
 80050b6:	bd80      	pop	{r7, pc}
 80050b8:	40000c00 	.word	0x40000c00

080050bc <Is_iBus_Received>:

int Is_iBus_Received(void) {
 80050bc:	b580      	push	{r7, lr}
 80050be:	af00      	add	r7, sp, #0
	if (ibus_rx_cplt_flag == 1) {
 80050c0:	4b0b      	ldr	r3, [pc, #44]	; (80050f0 <Is_iBus_Received+0x34>)
 80050c2:	781b      	ldrb	r3, [r3, #0]
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d10f      	bne.n	80050e8 <Is_iBus_Received+0x2c>
		ibus_rx_cplt_flag = 0;
 80050c8:	4b09      	ldr	r3, [pc, #36]	; (80050f0 <Is_iBus_Received+0x34>)
 80050ca:	2200      	movs	r2, #0
 80050cc:	701a      	strb	r2, [r3, #0]
		if (iBus_Check_CHECKSUM(&ibus_rx_buf[0], 32) == 1) {
 80050ce:	2120      	movs	r1, #32
 80050d0:	4808      	ldr	r0, [pc, #32]	; (80050f4 <Is_iBus_Received+0x38>)
 80050d2:	f7fc ff21 	bl	8001f18 <iBus_Check_CHECKSUM>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d105      	bne.n	80050e8 <Is_iBus_Received+0x2c>
			iBus_Parsing(&ibus_rx_buf[0], &iBus);
 80050dc:	4906      	ldr	r1, [pc, #24]	; (80050f8 <Is_iBus_Received+0x3c>)
 80050de:	4805      	ldr	r0, [pc, #20]	; (80050f4 <Is_iBus_Received+0x38>)
 80050e0:	f7fc ff50 	bl	8001f84 <iBus_Parsing>
			return 1;
 80050e4:	2301      	movs	r3, #1
 80050e6:	e000      	b.n	80050ea <Is_iBus_Received+0x2e>
		}
	}
	return 0;
 80050e8:	2300      	movs	r3, #0
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	20000215 	.word	0x20000215
 80050f4:	2000053c 	.word	0x2000053c
 80050f8:	20000318 	.word	0x20000318

080050fc <BNO080_Calibration>:


void BNO080_Calibration(void)
{
 80050fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005100:	b090      	sub	sp, #64	; 0x40
 8005102:	af06      	add	r7, sp, #24
	//Resets BNO080 to disable All output
	BNO080_Initialization();
 8005104:	f7fc f9de 	bl	80014c4 <BNO080_Initialization>

	//BNO080/BNO085 Configuration
	//Enable dynamic calibration for accelerometer, gyroscope, and magnetometer
	//Enable Game Rotation Vector output
	//Enable Magnetic Field output
	BNO080_calibrateAll(); //Turn on cal for Accel, Gyro, and Mag
 8005108:	f7fc fd1a 	bl	8001b40 <BNO080_calibrateAll>
	BNO080_enableGameRotationVector(20000); //Send data update every 20ms (50Hz)
 800510c:	f644 6020 	movw	r0, #20000	; 0x4e20
 8005110:	f7fc fcf8 	bl	8001b04 <BNO080_enableGameRotationVector>
	BNO080_enableMagnetometer(20000); //Send data update every 20ms (50Hz)
 8005114:	f644 6020 	movw	r0, #20000	; 0x4e20
 8005118:	f7fc fd03 	bl	8001b22 <BNO080_enableMagnetometer>

	//Once magnetic field is 2 or 3, run the Save DCD Now command
	printf("Calibrating BNO080. Pull up FS-i6 SWC to end calibration and save to flash\n");
 800511c:	489d      	ldr	r0, [pc, #628]	; (8005394 <BNO080_Calibration+0x298>)
 800511e:	f007 f9d7 	bl	800c4d0 <puts>
	printf("Output in form x, y, z, in uTesla\n\n");
 8005122:	489d      	ldr	r0, [pc, #628]	; (8005398 <BNO080_Calibration+0x29c>)
 8005124:	f007 f9d4 	bl	800c4d0 <puts>

	//while loop for calibration procedure
	//Iterates until iBus.SwC is mid point (1500)
	//Calibration procedure should be done while this loop is in iteration.
	while(iBus.SwC == 1500)
 8005128:	e0b8      	b.n	800529c <BNO080_Calibration+0x1a0>
	{
		if(BNO080_dataAvailable() == 1)
 800512a:	f7fc fa61 	bl	80015f0 <BNO080_dataAvailable>
 800512e:	4603      	mov	r3, r0
 8005130:	2b01      	cmp	r3, #1
 8005132:	f040 80ae 	bne.w	8005292 <BNO080_Calibration+0x196>
		{
			//Observing the status bit of the magnetic field output
			float x = BNO080_getMagX();
 8005136:	f7fc fc61 	bl	80019fc <BNO080_getMagX>
 800513a:	ed87 0a08 	vstr	s0, [r7, #32]
			float y = BNO080_getMagY();
 800513e:	f7fc fc73 	bl	8001a28 <BNO080_getMagY>
 8005142:	ed87 0a07 	vstr	s0, [r7, #28]
			float z = BNO080_getMagZ();
 8005146:	f7fc fc85 	bl	8001a54 <BNO080_getMagZ>
 800514a:	ed87 0a06 	vstr	s0, [r7, #24]
			unsigned char accuracy = BNO080_getMagAccuracy();
 800514e:	f7fc fc97 	bl	8001a80 <BNO080_getMagAccuracy>
 8005152:	4603      	mov	r3, r0
 8005154:	75fb      	strb	r3, [r7, #23]

			float quatI = BNO080_getQuatI();
 8005156:	f7fc fbd7 	bl	8001908 <BNO080_getQuatI>
 800515a:	ed87 0a04 	vstr	s0, [r7, #16]
			float quatJ = BNO080_getQuatJ();
 800515e:	f7fc fbe9 	bl	8001934 <BNO080_getQuatJ>
 8005162:	ed87 0a03 	vstr	s0, [r7, #12]
			float quatK = BNO080_getQuatK();
 8005166:	f7fc fbfb 	bl	8001960 <BNO080_getQuatK>
 800516a:	ed87 0a02 	vstr	s0, [r7, #8]
			float quatReal = BNO080_getQuatReal();
 800516e:	f7fc fc0d 	bl	800198c <BNO080_getQuatReal>
 8005172:	ed87 0a01 	vstr	s0, [r7, #4]
			unsigned char sensorAccuracy = BNO080_getQuatAccuracy();
 8005176:	f7fc fc35 	bl	80019e4 <BNO080_getQuatAccuracy>
 800517a:	4603      	mov	r3, r0
 800517c:	70fb      	strb	r3, [r7, #3]

			printf("%f,%f,%f,", x, y, z);
 800517e:	6a38      	ldr	r0, [r7, #32]
 8005180:	f7fb f9e2 	bl	8000548 <__aeabi_f2d>
 8005184:	4680      	mov	r8, r0
 8005186:	4689      	mov	r9, r1
 8005188:	69f8      	ldr	r0, [r7, #28]
 800518a:	f7fb f9dd 	bl	8000548 <__aeabi_f2d>
 800518e:	4604      	mov	r4, r0
 8005190:	460d      	mov	r5, r1
 8005192:	69b8      	ldr	r0, [r7, #24]
 8005194:	f7fb f9d8 	bl	8000548 <__aeabi_f2d>
 8005198:	4602      	mov	r2, r0
 800519a:	460b      	mov	r3, r1
 800519c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80051a0:	e9cd 4500 	strd	r4, r5, [sp]
 80051a4:	4642      	mov	r2, r8
 80051a6:	464b      	mov	r3, r9
 80051a8:	487c      	ldr	r0, [pc, #496]	; (800539c <BNO080_Calibration+0x2a0>)
 80051aa:	f007 f91d 	bl	800c3e8 <iprintf>
			if (accuracy == 0) printf("Unreliable\t");
 80051ae:	7dfb      	ldrb	r3, [r7, #23]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d103      	bne.n	80051bc <BNO080_Calibration+0xc0>
 80051b4:	487a      	ldr	r0, [pc, #488]	; (80053a0 <BNO080_Calibration+0x2a4>)
 80051b6:	f007 f917 	bl	800c3e8 <iprintf>
 80051ba:	e013      	b.n	80051e4 <BNO080_Calibration+0xe8>
			else if (accuracy == 1) printf("Low\t");
 80051bc:	7dfb      	ldrb	r3, [r7, #23]
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d103      	bne.n	80051ca <BNO080_Calibration+0xce>
 80051c2:	4878      	ldr	r0, [pc, #480]	; (80053a4 <BNO080_Calibration+0x2a8>)
 80051c4:	f007 f910 	bl	800c3e8 <iprintf>
 80051c8:	e00c      	b.n	80051e4 <BNO080_Calibration+0xe8>
			else if (accuracy == 2) printf("Medium\t");
 80051ca:	7dfb      	ldrb	r3, [r7, #23]
 80051cc:	2b02      	cmp	r3, #2
 80051ce:	d103      	bne.n	80051d8 <BNO080_Calibration+0xdc>
 80051d0:	4875      	ldr	r0, [pc, #468]	; (80053a8 <BNO080_Calibration+0x2ac>)
 80051d2:	f007 f909 	bl	800c3e8 <iprintf>
 80051d6:	e005      	b.n	80051e4 <BNO080_Calibration+0xe8>
			else if (accuracy == 3) printf("High\t");
 80051d8:	7dfb      	ldrb	r3, [r7, #23]
 80051da:	2b03      	cmp	r3, #3
 80051dc:	d102      	bne.n	80051e4 <BNO080_Calibration+0xe8>
 80051de:	4873      	ldr	r0, [pc, #460]	; (80053ac <BNO080_Calibration+0x2b0>)
 80051e0:	f007 f902 	bl	800c3e8 <iprintf>

			printf("\t%f,%f,%f,%f,", quatI, quatI, quatI, quatReal);
 80051e4:	6938      	ldr	r0, [r7, #16]
 80051e6:	f7fb f9af 	bl	8000548 <__aeabi_f2d>
 80051ea:	4682      	mov	sl, r0
 80051ec:	468b      	mov	fp, r1
 80051ee:	6938      	ldr	r0, [r7, #16]
 80051f0:	f7fb f9aa 	bl	8000548 <__aeabi_f2d>
 80051f4:	4604      	mov	r4, r0
 80051f6:	460d      	mov	r5, r1
 80051f8:	6938      	ldr	r0, [r7, #16]
 80051fa:	f7fb f9a5 	bl	8000548 <__aeabi_f2d>
 80051fe:	4680      	mov	r8, r0
 8005200:	4689      	mov	r9, r1
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f7fb f9a0 	bl	8000548 <__aeabi_f2d>
 8005208:	4602      	mov	r2, r0
 800520a:	460b      	mov	r3, r1
 800520c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005210:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8005214:	e9cd 4500 	strd	r4, r5, [sp]
 8005218:	4652      	mov	r2, sl
 800521a:	465b      	mov	r3, fp
 800521c:	4864      	ldr	r0, [pc, #400]	; (80053b0 <BNO080_Calibration+0x2b4>)
 800521e:	f007 f8e3 	bl	800c3e8 <iprintf>
			if (sensorAccuracy == 0) printf("Unreliable\n");
 8005222:	78fb      	ldrb	r3, [r7, #3]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d103      	bne.n	8005230 <BNO080_Calibration+0x134>
 8005228:	4862      	ldr	r0, [pc, #392]	; (80053b4 <BNO080_Calibration+0x2b8>)
 800522a:	f007 f951 	bl	800c4d0 <puts>
 800522e:	e013      	b.n	8005258 <BNO080_Calibration+0x15c>
			else if (sensorAccuracy == 1) printf("Low\n");
 8005230:	78fb      	ldrb	r3, [r7, #3]
 8005232:	2b01      	cmp	r3, #1
 8005234:	d103      	bne.n	800523e <BNO080_Calibration+0x142>
 8005236:	4860      	ldr	r0, [pc, #384]	; (80053b8 <BNO080_Calibration+0x2bc>)
 8005238:	f007 f94a 	bl	800c4d0 <puts>
 800523c:	e00c      	b.n	8005258 <BNO080_Calibration+0x15c>
			else if (sensorAccuracy == 2) printf("Medium\n");
 800523e:	78fb      	ldrb	r3, [r7, #3]
 8005240:	2b02      	cmp	r3, #2
 8005242:	d103      	bne.n	800524c <BNO080_Calibration+0x150>
 8005244:	485d      	ldr	r0, [pc, #372]	; (80053bc <BNO080_Calibration+0x2c0>)
 8005246:	f007 f943 	bl	800c4d0 <puts>
 800524a:	e005      	b.n	8005258 <BNO080_Calibration+0x15c>
			else if (sensorAccuracy == 3) printf("High\n");
 800524c:	78fb      	ldrb	r3, [r7, #3]
 800524e:	2b03      	cmp	r3, #3
 8005250:	d102      	bne.n	8005258 <BNO080_Calibration+0x15c>
 8005252:	485b      	ldr	r0, [pc, #364]	; (80053c0 <BNO080_Calibration+0x2c4>)
 8005254:	f007 f93c 	bl	800c4d0 <puts>

			//Turn the LED and buzzer on when both accuracy and sensorAccuracy is high
			if(accuracy == 3 && sensorAccuracy == 3)
 8005258:	7dfb      	ldrb	r3, [r7, #23]
 800525a:	2b03      	cmp	r3, #3
 800525c:	d110      	bne.n	8005280 <BNO080_Calibration+0x184>
 800525e:	78fb      	ldrb	r3, [r7, #3]
 8005260:	2b03      	cmp	r3, #3
 8005262:	d10d      	bne.n	8005280 <BNO080_Calibration+0x184>
			{
				LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_0 | LL_GPIO_PIN_1 | LL_GPIO_PIN_2);
 8005264:	2107      	movs	r1, #7
 8005266:	4857      	ldr	r0, [pc, #348]	; (80053c4 <BNO080_Calibration+0x2c8>)
 8005268:	f7fe fb1d 	bl	80038a6 <LL_GPIO_SetOutputPin>
				TIM3->PSC = 65000; //Very low frequency
 800526c:	4b56      	ldr	r3, [pc, #344]	; (80053c8 <BNO080_Calibration+0x2cc>)
 800526e:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8005272:	629a      	str	r2, [r3, #40]	; 0x28
				LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8005274:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005278:	4853      	ldr	r0, [pc, #332]	; (80053c8 <BNO080_Calibration+0x2cc>)
 800527a:	f7fe faaf 	bl	80037dc <LL_TIM_CC_EnableChannel>
 800527e:	e008      	b.n	8005292 <BNO080_Calibration+0x196>
			}
			else
			{
				LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_0 | LL_GPIO_PIN_1 | LL_GPIO_PIN_2);
 8005280:	2107      	movs	r1, #7
 8005282:	4850      	ldr	r0, [pc, #320]	; (80053c4 <BNO080_Calibration+0x2c8>)
 8005284:	f7fe fb1d 	bl	80038c2 <LL_GPIO_ResetOutputPin>
				LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8005288:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800528c:	484e      	ldr	r0, [pc, #312]	; (80053c8 <BNO080_Calibration+0x2cc>)
 800528e:	f7fe fab6 	bl	80037fe <LL_TIM_CC_DisableChannel>
			}
		}

		Is_iBus_Received(); //Refreshes iBus Data for iBus.SwC
 8005292:	f7ff ff13 	bl	80050bc <Is_iBus_Received>
		HAL_Delay(100);
 8005296:	2064      	movs	r0, #100	; 0x64
 8005298:	f001 fdc8 	bl	8006e2c <HAL_Delay>
	while(iBus.SwC == 1500)
 800529c:	4b4b      	ldr	r3, [pc, #300]	; (80053cc <BNO080_Calibration+0x2d0>)
 800529e:	899b      	ldrh	r3, [r3, #12]
 80052a0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80052a4:	4293      	cmp	r3, r2
 80052a6:	f43f af40 	beq.w	800512a <BNO080_Calibration+0x2e>
	}

	//Ends the loop when iBus.SwC is not mid point
	//Turn the LED and buzzer off
	LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_0 | LL_GPIO_PIN_1 | LL_GPIO_PIN_2);
 80052aa:	2107      	movs	r1, #7
 80052ac:	4845      	ldr	r0, [pc, #276]	; (80053c4 <BNO080_Calibration+0x2c8>)
 80052ae:	f7fe fb08 	bl	80038c2 <LL_GPIO_ResetOutputPin>
	LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80052b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80052b6:	4844      	ldr	r0, [pc, #272]	; (80053c8 <BNO080_Calibration+0x2cc>)
 80052b8:	f7fe faa1 	bl	80037fe <LL_TIM_CC_DisableChannel>

	//Saves the current dynamic calibration data (DCD) to memory
	//Sends command to get the latest calibration status
	BNO080_saveCalibration();
 80052bc:	f7fc fd2e 	bl	8001d1c <BNO080_saveCalibration>
	BNO080_requestCalibrationStatus();
 80052c0:	f7fc fd10 	bl	8001ce4 <BNO080_requestCalibrationStatus>

	//Wait for calibration response, timeout if no response
	int counter = 100;
 80052c4:	2364      	movs	r3, #100	; 0x64
 80052c6:	627b      	str	r3, [r7, #36]	; 0x24
	while(1)
	{
		if(--counter == 0) break;
 80052c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ca:	3b01      	subs	r3, #1
 80052cc:	627b      	str	r3, [r7, #36]	; 0x24
 80052ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d02f      	beq.n	8005334 <BNO080_Calibration+0x238>
		if(BNO080_dataAvailable())
 80052d4:	f7fc f98c 	bl	80015f0 <BNO080_dataAvailable>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d026      	beq.n	800532c <BNO080_Calibration+0x230>
		{
			//The IMU can report many different things. We must wait
			//for the ME Calibration Response Status byte to go to zero
			if(BNO080_calibrationComplete() == 1)
 80052de:	f7fc fc37 	bl	8001b50 <BNO080_calibrationComplete>
 80052e2:	4603      	mov	r3, r0
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d121      	bne.n	800532c <BNO080_Calibration+0x230>
			{
				printf("\nCalibration data successfully stored\n");
 80052e8:	4839      	ldr	r0, [pc, #228]	; (80053d0 <BNO080_Calibration+0x2d4>)
 80052ea:	f007 f8f1 	bl	800c4d0 <puts>
				LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80052ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80052f2:	4835      	ldr	r0, [pc, #212]	; (80053c8 <BNO080_Calibration+0x2cc>)
 80052f4:	f7fe fa72 	bl	80037dc <LL_TIM_CC_EnableChannel>
				TIM3->PSC = 2000;
 80052f8:	4b33      	ldr	r3, [pc, #204]	; (80053c8 <BNO080_Calibration+0x2cc>)
 80052fa:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80052fe:	629a      	str	r2, [r3, #40]	; 0x28
				HAL_Delay(300);
 8005300:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005304:	f001 fd92 	bl	8006e2c <HAL_Delay>
				TIM3->PSC = 1500;
 8005308:	4b2f      	ldr	r3, [pc, #188]	; (80053c8 <BNO080_Calibration+0x2cc>)
 800530a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800530e:	629a      	str	r2, [r3, #40]	; 0x28
				HAL_Delay(300);
 8005310:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005314:	f001 fd8a 	bl	8006e2c <HAL_Delay>
				LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8005318:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800531c:	482a      	ldr	r0, [pc, #168]	; (80053c8 <BNO080_Calibration+0x2cc>)
 800531e:	f7fe fa6e 	bl	80037fe <LL_TIM_CC_DisableChannel>
				HAL_Delay(1000);
 8005322:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005326:	f001 fd81 	bl	8006e2c <HAL_Delay>
				break;
 800532a:	e004      	b.n	8005336 <BNO080_Calibration+0x23a>
			}
		}
		HAL_Delay(10);
 800532c:	200a      	movs	r0, #10
 800532e:	f001 fd7d 	bl	8006e2c <HAL_Delay>
		if(--counter == 0) break;
 8005332:	e7c9      	b.n	80052c8 <BNO080_Calibration+0x1cc>
 8005334:	bf00      	nop
	}
	if(counter == 0)
 8005336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005338:	2b00      	cmp	r3, #0
 800533a:	d120      	bne.n	800537e <BNO080_Calibration+0x282>
	{
		printf("\nCalibration data failed to store. Please try again.\n");
 800533c:	4825      	ldr	r0, [pc, #148]	; (80053d4 <BNO080_Calibration+0x2d8>)
 800533e:	f007 f8c7 	bl	800c4d0 <puts>
		LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8005342:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005346:	4820      	ldr	r0, [pc, #128]	; (80053c8 <BNO080_Calibration+0x2cc>)
 8005348:	f7fe fa48 	bl	80037dc <LL_TIM_CC_EnableChannel>
		TIM3->PSC = 1500;
 800534c:	4b1e      	ldr	r3, [pc, #120]	; (80053c8 <BNO080_Calibration+0x2cc>)
 800534e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005352:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(300);
 8005354:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005358:	f001 fd68 	bl	8006e2c <HAL_Delay>
		TIM3->PSC = 2000;
 800535c:	4b1a      	ldr	r3, [pc, #104]	; (80053c8 <BNO080_Calibration+0x2cc>)
 800535e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005362:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(300);
 8005364:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005368:	f001 fd60 	bl	8006e2c <HAL_Delay>
		LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800536c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005370:	4815      	ldr	r0, [pc, #84]	; (80053c8 <BNO080_Calibration+0x2cc>)
 8005372:	f7fe fa44 	bl	80037fe <LL_TIM_CC_DisableChannel>
		HAL_Delay(1000);
 8005376:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800537a:	f001 fd57 	bl	8006e2c <HAL_Delay>
	//In general, calibration should be left on at all times. The BNO080
	//auto-calibrates and auto-records cal data roughly every 5 minutes

	//Resets BNO080 to disable Game Rotation Vector and Magnetometer
	//Enables Rotation Vector
	BNO080_Initialization();
 800537e:	f7fc f8a1 	bl	80014c4 <BNO080_Initialization>
	BNO080_enableRotationVector(2500); //Send data update every 2.5ms (400Hz)
 8005382:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8005386:	f7fc fbae 	bl	8001ae6 <BNO080_enableRotationVector>
}
 800538a:	bf00      	nop
 800538c:	3728      	adds	r7, #40	; 0x28
 800538e:	46bd      	mov	sp, r7
 8005390:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005394:	0800f498 	.word	0x0800f498
 8005398:	0800f4e4 	.word	0x0800f4e4
 800539c:	0800f508 	.word	0x0800f508
 80053a0:	0800f514 	.word	0x0800f514
 80053a4:	0800f520 	.word	0x0800f520
 80053a8:	0800f528 	.word	0x0800f528
 80053ac:	0800f530 	.word	0x0800f530
 80053b0:	0800f538 	.word	0x0800f538
 80053b4:	0800f548 	.word	0x0800f548
 80053b8:	0800f554 	.word	0x0800f554
 80053bc:	0800f558 	.word	0x0800f558
 80053c0:	0800f560 	.word	0x0800f560
 80053c4:	40020800 	.word	0x40020800
 80053c8:	40000400 	.word	0x40000400
 80053cc:	20000318 	.word	0x20000318
 80053d0:	0800f568 	.word	0x0800f568
 80053d4:	0800f590 	.word	0x0800f590

080053d8 <HAL_UART_RxCpltCallback>:

//3DR Telemetry
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80053d8:	b580      	push	{r7, lr}
 80053da:	b082      	sub	sp, #8
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
	//HAL Only, LL cannot be supported
	//HAL UART Receive Call back function
	static unsigned char cnt = 0;

	if (huart->Instance == USART1) {
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a2d      	ldr	r2, [pc, #180]	; (800549c <HAL_UART_RxCpltCallback+0xc4>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d150      	bne.n	800548c <HAL_UART_RxCpltCallback+0xb4>
		HAL_UART_Receive_IT(&huart1, &uart1_rx_data, 1);
 80053ea:	2201      	movs	r2, #1
 80053ec:	492c      	ldr	r1, [pc, #176]	; (80054a0 <HAL_UART_RxCpltCallback+0xc8>)
 80053ee:	482d      	ldr	r0, [pc, #180]	; (80054a4 <HAL_UART_RxCpltCallback+0xcc>)
 80053f0:	f004 fcab 	bl	8009d4a <HAL_UART_Receive_IT>

		switch (cnt) {
 80053f4:	4b2c      	ldr	r3, [pc, #176]	; (80054a8 <HAL_UART_RxCpltCallback+0xd0>)
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d015      	beq.n	8005428 <HAL_UART_RxCpltCallback+0x50>
 80053fc:	2b13      	cmp	r3, #19
 80053fe:	d029      	beq.n	8005454 <HAL_UART_RxCpltCallback+0x7c>
 8005400:	2b00      	cmp	r3, #0
 8005402:	d135      	bne.n	8005470 <HAL_UART_RxCpltCallback+0x98>
		case 0:
			if (uart1_rx_data == 0x47) {
 8005404:	4b26      	ldr	r3, [pc, #152]	; (80054a0 <HAL_UART_RxCpltCallback+0xc8>)
 8005406:	781b      	ldrb	r3, [r3, #0]
 8005408:	2b47      	cmp	r3, #71	; 0x47
 800540a:	d141      	bne.n	8005490 <HAL_UART_RxCpltCallback+0xb8>
				telemetry_rx_buf[cnt] = uart1_rx_data;
 800540c:	4b26      	ldr	r3, [pc, #152]	; (80054a8 <HAL_UART_RxCpltCallback+0xd0>)
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	461a      	mov	r2, r3
 8005412:	4b23      	ldr	r3, [pc, #140]	; (80054a0 <HAL_UART_RxCpltCallback+0xc8>)
 8005414:	7819      	ldrb	r1, [r3, #0]
 8005416:	4b25      	ldr	r3, [pc, #148]	; (80054ac <HAL_UART_RxCpltCallback+0xd4>)
 8005418:	5499      	strb	r1, [r3, r2]
				cnt++;
 800541a:	4b23      	ldr	r3, [pc, #140]	; (80054a8 <HAL_UART_RxCpltCallback+0xd0>)
 800541c:	781b      	ldrb	r3, [r3, #0]
 800541e:	3301      	adds	r3, #1
 8005420:	b2da      	uxtb	r2, r3
 8005422:	4b21      	ldr	r3, [pc, #132]	; (80054a8 <HAL_UART_RxCpltCallback+0xd0>)
 8005424:	701a      	strb	r2, [r3, #0]
			}
			break;
 8005426:	e033      	b.n	8005490 <HAL_UART_RxCpltCallback+0xb8>
		case 1:
			if (uart1_rx_data == 0x53) {
 8005428:	4b1d      	ldr	r3, [pc, #116]	; (80054a0 <HAL_UART_RxCpltCallback+0xc8>)
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	2b53      	cmp	r3, #83	; 0x53
 800542e:	d10d      	bne.n	800544c <HAL_UART_RxCpltCallback+0x74>
				telemetry_rx_buf[cnt] = uart1_rx_data;
 8005430:	4b1d      	ldr	r3, [pc, #116]	; (80054a8 <HAL_UART_RxCpltCallback+0xd0>)
 8005432:	781b      	ldrb	r3, [r3, #0]
 8005434:	461a      	mov	r2, r3
 8005436:	4b1a      	ldr	r3, [pc, #104]	; (80054a0 <HAL_UART_RxCpltCallback+0xc8>)
 8005438:	7819      	ldrb	r1, [r3, #0]
 800543a:	4b1c      	ldr	r3, [pc, #112]	; (80054ac <HAL_UART_RxCpltCallback+0xd4>)
 800543c:	5499      	strb	r1, [r3, r2]
				cnt++;
 800543e:	4b1a      	ldr	r3, [pc, #104]	; (80054a8 <HAL_UART_RxCpltCallback+0xd0>)
 8005440:	781b      	ldrb	r3, [r3, #0]
 8005442:	3301      	adds	r3, #1
 8005444:	b2da      	uxtb	r2, r3
 8005446:	4b18      	ldr	r3, [pc, #96]	; (80054a8 <HAL_UART_RxCpltCallback+0xd0>)
 8005448:	701a      	strb	r2, [r3, #0]
			}
			else {
				cnt = 0;
			}
			break;
 800544a:	e022      	b.n	8005492 <HAL_UART_RxCpltCallback+0xba>
				cnt = 0;
 800544c:	4b16      	ldr	r3, [pc, #88]	; (80054a8 <HAL_UART_RxCpltCallback+0xd0>)
 800544e:	2200      	movs	r2, #0
 8005450:	701a      	strb	r2, [r3, #0]
			break;
 8005452:	e01e      	b.n	8005492 <HAL_UART_RxCpltCallback+0xba>
		case 19:
			telemetry_rx_buf[cnt] = uart1_rx_data;
 8005454:	4b14      	ldr	r3, [pc, #80]	; (80054a8 <HAL_UART_RxCpltCallback+0xd0>)
 8005456:	781b      	ldrb	r3, [r3, #0]
 8005458:	461a      	mov	r2, r3
 800545a:	4b11      	ldr	r3, [pc, #68]	; (80054a0 <HAL_UART_RxCpltCallback+0xc8>)
 800545c:	7819      	ldrb	r1, [r3, #0]
 800545e:	4b13      	ldr	r3, [pc, #76]	; (80054ac <HAL_UART_RxCpltCallback+0xd4>)
 8005460:	5499      	strb	r1, [r3, r2]
			cnt = 0;
 8005462:	4b11      	ldr	r3, [pc, #68]	; (80054a8 <HAL_UART_RxCpltCallback+0xd0>)
 8005464:	2200      	movs	r2, #0
 8005466:	701a      	strb	r2, [r3, #0]
			telemetry_rx_cplt_flag = 1;
 8005468:	4b11      	ldr	r3, [pc, #68]	; (80054b0 <HAL_UART_RxCpltCallback+0xd8>)
 800546a:	2201      	movs	r2, #1
 800546c:	701a      	strb	r2, [r3, #0]
			break;
 800546e:	e010      	b.n	8005492 <HAL_UART_RxCpltCallback+0xba>
		default:
			telemetry_rx_buf[cnt] = uart1_rx_data;
 8005470:	4b0d      	ldr	r3, [pc, #52]	; (80054a8 <HAL_UART_RxCpltCallback+0xd0>)
 8005472:	781b      	ldrb	r3, [r3, #0]
 8005474:	461a      	mov	r2, r3
 8005476:	4b0a      	ldr	r3, [pc, #40]	; (80054a0 <HAL_UART_RxCpltCallback+0xc8>)
 8005478:	7819      	ldrb	r1, [r3, #0]
 800547a:	4b0c      	ldr	r3, [pc, #48]	; (80054ac <HAL_UART_RxCpltCallback+0xd4>)
 800547c:	5499      	strb	r1, [r3, r2]
			cnt++;
 800547e:	4b0a      	ldr	r3, [pc, #40]	; (80054a8 <HAL_UART_RxCpltCallback+0xd0>)
 8005480:	781b      	ldrb	r3, [r3, #0]
 8005482:	3301      	adds	r3, #1
 8005484:	b2da      	uxtb	r2, r3
 8005486:	4b08      	ldr	r3, [pc, #32]	; (80054a8 <HAL_UART_RxCpltCallback+0xd0>)
 8005488:	701a      	strb	r2, [r3, #0]
			break;
 800548a:	e002      	b.n	8005492 <HAL_UART_RxCpltCallback+0xba>
		}
		//		HAL_UART_Transmit_IT(&huart1, &uart1_rx_data, 1);
	}
 800548c:	bf00      	nop
 800548e:	e000      	b.n	8005492 <HAL_UART_RxCpltCallback+0xba>
			break;
 8005490:	bf00      	nop
}
 8005492:	bf00      	nop
 8005494:	3708      	adds	r7, #8
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
 800549a:	bf00      	nop
 800549c:	40011000 	.word	0x40011000
 80054a0:	20000216 	.word	0x20000216
 80054a4:	20000580 	.word	0x20000580
 80054a8:	2000020d 	.word	0x2000020d
 80054ac:	200004d8 	.word	0x200004d8
 80054b0:	200004f4 	.word	0x200004f4

080054b4 <Encode_Msg_AHRS>:

void Encode_Msg_AHRS(unsigned char *telemetry_tx_buf) {
 80054b4:	b480      	push	{r7}
 80054b6:	b085      	sub	sp, #20
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
	//Sync char
	telemetry_tx_buf[0] = 0x46;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2246      	movs	r2, #70	; 0x46
 80054c0:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[1] = 0x43;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	3301      	adds	r3, #1
 80054c6:	2243      	movs	r2, #67	; 0x43
 80054c8:	701a      	strb	r2, [r3, #0]
	//AHRS
	telemetry_tx_buf[2] = 0x10;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	3302      	adds	r3, #2
 80054ce:	2210      	movs	r2, #16
 80054d0:	701a      	strb	r2, [r3, #0]
	//Current Roll
	telemetry_tx_buf[3] = (short)(BNO080_Roll * 100);
 80054d2:	4bae      	ldr	r3, [pc, #696]	; (800578c <Encode_Msg_AHRS+0x2d8>)
 80054d4:	edd3 7a00 	vldr	s15, [r3]
 80054d8:	ed9f 7aad 	vldr	s14, [pc, #692]	; 8005790 <Encode_Msg_AHRS+0x2dc>
 80054dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80054e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80054e4:	ee17 3a90 	vmov	r3, s15
 80054e8:	b21a      	sxth	r2, r3
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	3303      	adds	r3, #3
 80054ee:	b2d2      	uxtb	r2, r2
 80054f0:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[4] = ((short)(BNO080_Roll * 100)) >> 8;
 80054f2:	4ba6      	ldr	r3, [pc, #664]	; (800578c <Encode_Msg_AHRS+0x2d8>)
 80054f4:	edd3 7a00 	vldr	s15, [r3]
 80054f8:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 8005790 <Encode_Msg_AHRS+0x2dc>
 80054fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005500:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005504:	ee17 3a90 	vmov	r3, s15
 8005508:	b21b      	sxth	r3, r3
 800550a:	121b      	asrs	r3, r3, #8
 800550c:	b21a      	sxth	r2, r3
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	3304      	adds	r3, #4
 8005512:	b2d2      	uxtb	r2, r2
 8005514:	701a      	strb	r2, [r3, #0]
	//Current Pitch
	telemetry_tx_buf[5] = (short)(BNO080_Pitch * 100);
 8005516:	4b9f      	ldr	r3, [pc, #636]	; (8005794 <Encode_Msg_AHRS+0x2e0>)
 8005518:	edd3 7a00 	vldr	s15, [r3]
 800551c:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 8005790 <Encode_Msg_AHRS+0x2dc>
 8005520:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005524:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005528:	ee17 3a90 	vmov	r3, s15
 800552c:	b21a      	sxth	r2, r3
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	3305      	adds	r3, #5
 8005532:	b2d2      	uxtb	r2, r2
 8005534:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[6] = ((short)(BNO080_Pitch * 100)) >> 8;
 8005536:	4b97      	ldr	r3, [pc, #604]	; (8005794 <Encode_Msg_AHRS+0x2e0>)
 8005538:	edd3 7a00 	vldr	s15, [r3]
 800553c:	ed9f 7a94 	vldr	s14, [pc, #592]	; 8005790 <Encode_Msg_AHRS+0x2dc>
 8005540:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005544:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005548:	ee17 3a90 	vmov	r3, s15
 800554c:	b21b      	sxth	r3, r3
 800554e:	121b      	asrs	r3, r3, #8
 8005550:	b21a      	sxth	r2, r3
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	3306      	adds	r3, #6
 8005556:	b2d2      	uxtb	r2, r2
 8005558:	701a      	strb	r2, [r3, #0]
	//Current Yaw
	telemetry_tx_buf[7] = (unsigned short)(BNO080_Yaw * 100);
 800555a:	4b8f      	ldr	r3, [pc, #572]	; (8005798 <Encode_Msg_AHRS+0x2e4>)
 800555c:	edd3 7a00 	vldr	s15, [r3]
 8005560:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8005790 <Encode_Msg_AHRS+0x2dc>
 8005564:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005568:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800556c:	ee17 3a90 	vmov	r3, s15
 8005570:	b29a      	uxth	r2, r3
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	3307      	adds	r3, #7
 8005576:	b2d2      	uxtb	r2, r2
 8005578:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[8] = ((unsigned short)(BNO080_Yaw * 100)) >> 8;
 800557a:	4b87      	ldr	r3, [pc, #540]	; (8005798 <Encode_Msg_AHRS+0x2e4>)
 800557c:	edd3 7a00 	vldr	s15, [r3]
 8005580:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8005790 <Encode_Msg_AHRS+0x2dc>
 8005584:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005588:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800558c:	ee17 3a90 	vmov	r3, s15
 8005590:	b29b      	uxth	r3, r3
 8005592:	0a1b      	lsrs	r3, r3, #8
 8005594:	b29a      	uxth	r2, r3
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	3308      	adds	r3, #8
 800559a:	b2d2      	uxtb	r2, r2
 800559c:	701a      	strb	r2, [r3, #0]
	//Current Altitude
	telemetry_tx_buf[9] = (short)(LPS22HH.baroAltFilt * 10);
 800559e:	4b7f      	ldr	r3, [pc, #508]	; (800579c <Encode_Msg_AHRS+0x2e8>)
 80055a0:	edd3 7a03 	vldr	s15, [r3, #12]
 80055a4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80055a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80055ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80055b0:	ee17 3a90 	vmov	r3, s15
 80055b4:	b21a      	sxth	r2, r3
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	3309      	adds	r3, #9
 80055ba:	b2d2      	uxtb	r2, r2
 80055bc:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[10] = ((short)(LPS22HH.baroAltFilt * 100)) >> 8;
 80055be:	4b77      	ldr	r3, [pc, #476]	; (800579c <Encode_Msg_AHRS+0x2e8>)
 80055c0:	edd3 7a03 	vldr	s15, [r3, #12]
 80055c4:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8005790 <Encode_Msg_AHRS+0x2dc>
 80055c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80055cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80055d0:	ee17 3a90 	vmov	r3, s15
 80055d4:	b21b      	sxth	r3, r3
 80055d6:	121b      	asrs	r3, r3, #8
 80055d8:	b21a      	sxth	r2, r3
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	330a      	adds	r3, #10
 80055de:	b2d2      	uxtb	r2, r2
 80055e0:	701a      	strb	r2, [r3, #0]

	//target Roll at Controller
	telemetry_tx_buf[11] = (short)((iBus.RH - 1500) * 0.1f * 100); //-50 ~ +50
 80055e2:	4b6f      	ldr	r3, [pc, #444]	; (80057a0 <Encode_Msg_AHRS+0x2ec>)
 80055e4:	881b      	ldrh	r3, [r3, #0]
 80055e6:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 80055ea:	ee07 3a90 	vmov	s15, r3
 80055ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055f2:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 80057a4 <Encode_Msg_AHRS+0x2f0>
 80055f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80055fa:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8005790 <Encode_Msg_AHRS+0x2dc>
 80055fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005602:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005606:	ee17 3a90 	vmov	r3, s15
 800560a:	b21a      	sxth	r2, r3
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	330b      	adds	r3, #11
 8005610:	b2d2      	uxtb	r2, r2
 8005612:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[12] = ((short)((iBus.RH - 1500) * 0.1f * 100)) >> 8;
 8005614:	4b62      	ldr	r3, [pc, #392]	; (80057a0 <Encode_Msg_AHRS+0x2ec>)
 8005616:	881b      	ldrh	r3, [r3, #0]
 8005618:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 800561c:	ee07 3a90 	vmov	s15, r3
 8005620:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005624:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 80057a4 <Encode_Msg_AHRS+0x2f0>
 8005628:	ee67 7a87 	vmul.f32	s15, s15, s14
 800562c:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8005790 <Encode_Msg_AHRS+0x2dc>
 8005630:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005634:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005638:	ee17 3a90 	vmov	r3, s15
 800563c:	b21b      	sxth	r3, r3
 800563e:	121b      	asrs	r3, r3, #8
 8005640:	b21a      	sxth	r2, r3
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	330c      	adds	r3, #12
 8005646:	b2d2      	uxtb	r2, r2
 8005648:	701a      	strb	r2, [r3, #0]

	//target Pitch at Controller
	telemetry_tx_buf[13] = (short)((iBus.RV - 1500) * 0.1f * 100); //-50 ~ +50
 800564a:	4b55      	ldr	r3, [pc, #340]	; (80057a0 <Encode_Msg_AHRS+0x2ec>)
 800564c:	885b      	ldrh	r3, [r3, #2]
 800564e:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8005652:	ee07 3a90 	vmov	s15, r3
 8005656:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800565a:	ed9f 7a52 	vldr	s14, [pc, #328]	; 80057a4 <Encode_Msg_AHRS+0x2f0>
 800565e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005662:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8005790 <Encode_Msg_AHRS+0x2dc>
 8005666:	ee67 7a87 	vmul.f32	s15, s15, s14
 800566a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800566e:	ee17 3a90 	vmov	r3, s15
 8005672:	b21a      	sxth	r2, r3
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	330d      	adds	r3, #13
 8005678:	b2d2      	uxtb	r2, r2
 800567a:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[14] = ((short)((iBus.RV - 1500) * 0.1f * 100)) >> 8;
 800567c:	4b48      	ldr	r3, [pc, #288]	; (80057a0 <Encode_Msg_AHRS+0x2ec>)
 800567e:	885b      	ldrh	r3, [r3, #2]
 8005680:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8005684:	ee07 3a90 	vmov	s15, r3
 8005688:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800568c:	ed9f 7a45 	vldr	s14, [pc, #276]	; 80057a4 <Encode_Msg_AHRS+0x2f0>
 8005690:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005694:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8005790 <Encode_Msg_AHRS+0x2dc>
 8005698:	ee67 7a87 	vmul.f32	s15, s15, s14
 800569c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80056a0:	ee17 3a90 	vmov	r3, s15
 80056a4:	b21b      	sxth	r3, r3
 80056a6:	121b      	asrs	r3, r3, #8
 80056a8:	b21a      	sxth	r2, r3
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	330e      	adds	r3, #14
 80056ae:	b2d2      	uxtb	r2, r2
 80056b0:	701a      	strb	r2, [r3, #0]

	//target Yaw at Controller
	telemetry_tx_buf[15] = (unsigned short)((iBus.LH - 1000) * 0.36f * 100); //0 ~ 360
 80056b2:	4b3b      	ldr	r3, [pc, #236]	; (80057a0 <Encode_Msg_AHRS+0x2ec>)
 80056b4:	88db      	ldrh	r3, [r3, #6]
 80056b6:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80056ba:	ee07 3a90 	vmov	s15, r3
 80056be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056c2:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80057a8 <Encode_Msg_AHRS+0x2f4>
 80056c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80056ca:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8005790 <Encode_Msg_AHRS+0x2dc>
 80056ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80056d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056d6:	ee17 3a90 	vmov	r3, s15
 80056da:	b29a      	uxth	r2, r3
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	330f      	adds	r3, #15
 80056e0:	b2d2      	uxtb	r2, r2
 80056e2:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[16] = ((unsigned short)((iBus.LH - 1000) * 0.36f * 100)) >> 8;
 80056e4:	4b2e      	ldr	r3, [pc, #184]	; (80057a0 <Encode_Msg_AHRS+0x2ec>)
 80056e6:	88db      	ldrh	r3, [r3, #6]
 80056e8:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80056ec:	ee07 3a90 	vmov	s15, r3
 80056f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056f4:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80057a8 <Encode_Msg_AHRS+0x2f4>
 80056f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80056fc:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8005790 <Encode_Msg_AHRS+0x2dc>
 8005700:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005704:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005708:	ee17 3a90 	vmov	r3, s15
 800570c:	b29b      	uxth	r3, r3
 800570e:	0a1b      	lsrs	r3, r3, #8
 8005710:	b29a      	uxth	r2, r3
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	3310      	adds	r3, #16
 8005716:	b2d2      	uxtb	r2, r2
 8005718:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[17] = (short)(iBus.LV * 10);
 800571a:	4b21      	ldr	r3, [pc, #132]	; (80057a0 <Encode_Msg_AHRS+0x2ec>)
 800571c:	889b      	ldrh	r3, [r3, #4]
 800571e:	b2da      	uxtb	r2, r3
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	3311      	adds	r3, #17
 8005724:	4611      	mov	r1, r2
 8005726:	0089      	lsls	r1, r1, #2
 8005728:	440a      	add	r2, r1
 800572a:	0052      	lsls	r2, r2, #1
 800572c:	b2d2      	uxtb	r2, r2
 800572e:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[18] = ((short)(iBus.LV * 10)) >> 8;
 8005730:	4b1b      	ldr	r3, [pc, #108]	; (80057a0 <Encode_Msg_AHRS+0x2ec>)
 8005732:	889b      	ldrh	r3, [r3, #4]
 8005734:	461a      	mov	r2, r3
 8005736:	0092      	lsls	r2, r2, #2
 8005738:	4413      	add	r3, r2
 800573a:	005b      	lsls	r3, r3, #1
 800573c:	b29b      	uxth	r3, r3
 800573e:	b21b      	sxth	r3, r3
 8005740:	121b      	asrs	r3, r3, #8
 8005742:	b21a      	sxth	r2, r3
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	3312      	adds	r3, #18
 8005748:	b2d2      	uxtb	r2, r2
 800574a:	701a      	strb	r2, [r3, #0]

	//Checksum
	telemetry_tx_buf[19] = 0xff;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	3313      	adds	r3, #19
 8005750:	22ff      	movs	r2, #255	; 0xff
 8005752:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 19; i++) {
 8005754:	2300      	movs	r3, #0
 8005756:	60fb      	str	r3, [r7, #12]
 8005758:	e00e      	b.n	8005778 <Encode_Msg_AHRS+0x2c4>
		telemetry_tx_buf[19] -= telemetry_tx_buf[i];
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	3313      	adds	r3, #19
 800575e:	7819      	ldrb	r1, [r3, #0]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	4413      	add	r3, r2
 8005766:	781a      	ldrb	r2, [r3, #0]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	3313      	adds	r3, #19
 800576c:	1a8a      	subs	r2, r1, r2
 800576e:	b2d2      	uxtb	r2, r2
 8005770:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 19; i++) {
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	3301      	adds	r3, #1
 8005776:	60fb      	str	r3, [r7, #12]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2b12      	cmp	r3, #18
 800577c:	dded      	ble.n	800575a <Encode_Msg_AHRS+0x2a6>
	}
}
 800577e:	bf00      	nop
 8005780:	3714      	adds	r7, #20
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr
 800578a:	bf00      	nop
 800578c:	200003a8 	.word	0x200003a8
 8005790:	42c80000 	.word	0x42c80000
 8005794:	200003b0 	.word	0x200003b0
 8005798:	200003ac 	.word	0x200003ac
 800579c:	20000364 	.word	0x20000364
 80057a0:	20000318 	.word	0x20000318
 80057a4:	3dcccccd 	.word	0x3dcccccd
 80057a8:	3eb851ec 	.word	0x3eb851ec

080057ac <Encode_Msg_GPS>:

void Encode_Msg_GPS(unsigned char *telemetry_tx_buf) {
 80057ac:	b480      	push	{r7}
 80057ae:	b085      	sub	sp, #20
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
	//Sync char
	telemetry_tx_buf[0] = 0x46;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2246      	movs	r2, #70	; 0x46
 80057b8:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[1] = 0x43;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	3301      	adds	r3, #1
 80057be:	2243      	movs	r2, #67	; 0x43
 80057c0:	701a      	strb	r2, [r3, #0]
	//0x11 - GPS
	telemetry_tx_buf[2] = 0x11;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	3302      	adds	r3, #2
 80057c6:	2211      	movs	r2, #17
 80057c8:	701a      	strb	r2, [r3, #0]

	//Latitude
	telemetry_tx_buf[3] = posllh.lat;
 80057ca:	4b53      	ldr	r3, [pc, #332]	; (8005918 <Encode_Msg_GPS+0x16c>)
 80057cc:	68da      	ldr	r2, [r3, #12]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	3303      	adds	r3, #3
 80057d2:	b2d2      	uxtb	r2, r2
 80057d4:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[4] = posllh.lat >> 8;
 80057d6:	4b50      	ldr	r3, [pc, #320]	; (8005918 <Encode_Msg_GPS+0x16c>)
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	121a      	asrs	r2, r3, #8
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	3304      	adds	r3, #4
 80057e0:	b2d2      	uxtb	r2, r2
 80057e2:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[5] = posllh.lat >> 16;
 80057e4:	4b4c      	ldr	r3, [pc, #304]	; (8005918 <Encode_Msg_GPS+0x16c>)
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	141a      	asrs	r2, r3, #16
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	3305      	adds	r3, #5
 80057ee:	b2d2      	uxtb	r2, r2
 80057f0:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[6] = posllh.lat >> 24;
 80057f2:	4b49      	ldr	r3, [pc, #292]	; (8005918 <Encode_Msg_GPS+0x16c>)
 80057f4:	68db      	ldr	r3, [r3, #12]
 80057f6:	161a      	asrs	r2, r3, #24
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	3306      	adds	r3, #6
 80057fc:	b2d2      	uxtb	r2, r2
 80057fe:	701a      	strb	r2, [r3, #0]

	//Longitude
	telemetry_tx_buf[7] = posllh.lon;
 8005800:	4b45      	ldr	r3, [pc, #276]	; (8005918 <Encode_Msg_GPS+0x16c>)
 8005802:	689a      	ldr	r2, [r3, #8]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	3307      	adds	r3, #7
 8005808:	b2d2      	uxtb	r2, r2
 800580a:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[8] = posllh.lon >> 8;
 800580c:	4b42      	ldr	r3, [pc, #264]	; (8005918 <Encode_Msg_GPS+0x16c>)
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	121a      	asrs	r2, r3, #8
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	3308      	adds	r3, #8
 8005816:	b2d2      	uxtb	r2, r2
 8005818:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[9] = posllh.lon >> 16;
 800581a:	4b3f      	ldr	r3, [pc, #252]	; (8005918 <Encode_Msg_GPS+0x16c>)
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	141a      	asrs	r2, r3, #16
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	3309      	adds	r3, #9
 8005824:	b2d2      	uxtb	r2, r2
 8005826:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[10] = posllh.lon >> 24;
 8005828:	4b3b      	ldr	r3, [pc, #236]	; (8005918 <Encode_Msg_GPS+0x16c>)
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	161a      	asrs	r2, r3, #24
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	330a      	adds	r3, #10
 8005832:	b2d2      	uxtb	r2, r2
 8005834:	701a      	strb	r2, [r3, #0]

	//Battery Voltage
	telemetry_tx_buf[11] = (unsigned short)(batteryVolt * 100);
 8005836:	4b39      	ldr	r3, [pc, #228]	; (800591c <Encode_Msg_GPS+0x170>)
 8005838:	edd3 7a00 	vldr	s15, [r3]
 800583c:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8005920 <Encode_Msg_GPS+0x174>
 8005840:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005844:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005848:	ee17 3a90 	vmov	r3, s15
 800584c:	b29a      	uxth	r2, r3
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	330b      	adds	r3, #11
 8005852:	b2d2      	uxtb	r2, r2
 8005854:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[12] = ((unsigned short)(batteryVolt * 100)) >> 8;
 8005856:	4b31      	ldr	r3, [pc, #196]	; (800591c <Encode_Msg_GPS+0x170>)
 8005858:	edd3 7a00 	vldr	s15, [r3]
 800585c:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8005920 <Encode_Msg_GPS+0x174>
 8005860:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005864:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005868:	ee17 3a90 	vmov	r3, s15
 800586c:	b29b      	uxth	r3, r3
 800586e:	0a1b      	lsrs	r3, r3, #8
 8005870:	b29a      	uxth	r2, r3
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	330c      	adds	r3, #12
 8005876:	b2d2      	uxtb	r2, r2
 8005878:	701a      	strb	r2, [r3, #0]

	//SwA SwC
	telemetry_tx_buf[13] = (iBus.SwA == 1000)? 0 : 1;
 800587a:	4b2a      	ldr	r3, [pc, #168]	; (8005924 <Encode_Msg_GPS+0x178>)
 800587c:	891b      	ldrh	r3, [r3, #8]
 800587e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005882:	bf14      	ite	ne
 8005884:	2301      	movne	r3, #1
 8005886:	2300      	moveq	r3, #0
 8005888:	b2da      	uxtb	r2, r3
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	330d      	adds	r3, #13
 800588e:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[14] = (iBus.SwC == 1000)? 0 : (iBus.SwC == 1500)? 1 : 2;
 8005890:	4b24      	ldr	r3, [pc, #144]	; (8005924 <Encode_Msg_GPS+0x178>)
 8005892:	899b      	ldrh	r3, [r3, #12]
 8005894:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005898:	d009      	beq.n	80058ae <Encode_Msg_GPS+0x102>
 800589a:	4b22      	ldr	r3, [pc, #136]	; (8005924 <Encode_Msg_GPS+0x178>)
 800589c:	899b      	ldrh	r3, [r3, #12]
 800589e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d101      	bne.n	80058aa <Encode_Msg_GPS+0xfe>
 80058a6:	2301      	movs	r3, #1
 80058a8:	e002      	b.n	80058b0 <Encode_Msg_GPS+0x104>
 80058aa:	2302      	movs	r3, #2
 80058ac:	e000      	b.n	80058b0 <Encode_Msg_GPS+0x104>
 80058ae:	2300      	movs	r3, #0
 80058b0:	687a      	ldr	r2, [r7, #4]
 80058b2:	320e      	adds	r2, #14
 80058b4:	7013      	strb	r3, [r2, #0]

	//Fail-Safe Mode
	telemetry_tx_buf[15] = failsafe_flag; // Failsafe active true / inactive false
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	330f      	adds	r3, #15
 80058ba:	4a1b      	ldr	r2, [pc, #108]	; (8005928 <Encode_Msg_GPS+0x17c>)
 80058bc:	7812      	ldrb	r2, [r2, #0]
 80058be:	701a      	strb	r2, [r3, #0]

	//0x00
	telemetry_tx_buf[16] = 0x00;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	3310      	adds	r3, #16
 80058c4:	2200      	movs	r2, #0
 80058c6:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[17] = 0x00;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	3311      	adds	r3, #17
 80058cc:	2200      	movs	r2, #0
 80058ce:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[18] = 0x00;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	3312      	adds	r3, #18
 80058d4:	2200      	movs	r2, #0
 80058d6:	701a      	strb	r2, [r3, #0]

	//Checksum
	telemetry_tx_buf[19] = 0xff;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	3313      	adds	r3, #19
 80058dc:	22ff      	movs	r2, #255	; 0xff
 80058de:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 19; i++) {
 80058e0:	2300      	movs	r3, #0
 80058e2:	60fb      	str	r3, [r7, #12]
 80058e4:	e00e      	b.n	8005904 <Encode_Msg_GPS+0x158>
		telemetry_tx_buf[19] -= telemetry_tx_buf[i];
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	3313      	adds	r3, #19
 80058ea:	7819      	ldrb	r1, [r3, #0]
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	687a      	ldr	r2, [r7, #4]
 80058f0:	4413      	add	r3, r2
 80058f2:	781a      	ldrb	r2, [r3, #0]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	3313      	adds	r3, #19
 80058f8:	1a8a      	subs	r2, r1, r2
 80058fa:	b2d2      	uxtb	r2, r2
 80058fc:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 19; i++) {
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	3301      	adds	r3, #1
 8005902:	60fb      	str	r3, [r7, #12]
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2b12      	cmp	r3, #18
 8005908:	dded      	ble.n	80058e6 <Encode_Msg_GPS+0x13a>
	}
}
 800590a:	bf00      	nop
 800590c:	3714      	adds	r7, #20
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr
 8005916:	bf00      	nop
 8005918:	20000378 	.word	0x20000378
 800591c:	200004b8 	.word	0x200004b8
 8005920:	42c80000 	.word	0x42c80000
 8005924:	20000318 	.word	0x20000318
 8005928:	2000020b 	.word	0x2000020b

0800592c <Encode_Msg_PID_Gain>:

void Encode_Msg_PID_Gain(unsigned char *telemetry_tx_buf, unsigned char id, float p, float i, float d) {
 800592c:	b480      	push	{r7}
 800592e:	b089      	sub	sp, #36	; 0x24
 8005930:	af00      	add	r7, sp, #0
 8005932:	6178      	str	r0, [r7, #20]
 8005934:	460b      	mov	r3, r1
 8005936:	ed87 0a03 	vstr	s0, [r7, #12]
 800593a:	edc7 0a02 	vstr	s1, [r7, #8]
 800593e:	ed87 1a01 	vstr	s2, [r7, #4]
 8005942:	74fb      	strb	r3, [r7, #19]
	//Sync char
	telemetry_tx_buf[0] = 0x46;
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	2246      	movs	r2, #70	; 0x46
 8005948:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[1] = 0x43;
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	3301      	adds	r3, #1
 800594e:	2243      	movs	r2, #67	; 0x43
 8005950:	701a      	strb	r2, [r3, #0]
	//0x00, 0x01 - Roll, 0x02, 0x03 - Pitch, 0x04, 0x05 - Yaw
	telemetry_tx_buf[2] = id;
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	3302      	adds	r3, #2
 8005956:	7cfa      	ldrb	r2, [r7, #19]
 8005958:	701a      	strb	r2, [r3, #0]

	//	memcpy(&telemetry_tx_buf[3], &p, 4);
	//	memcpy(&telemetry_tx_buf[7], &i, 4);
	//	memcpy(&telemetry_tx_buf[11], &d, 4);

	*(float *)&telemetry_tx_buf[3] = p;
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	3303      	adds	r3, #3
 800595e:	68fa      	ldr	r2, [r7, #12]
 8005960:	601a      	str	r2, [r3, #0]
	*(float *)&telemetry_tx_buf[7] = i;
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	3307      	adds	r3, #7
 8005966:	68ba      	ldr	r2, [r7, #8]
 8005968:	601a      	str	r2, [r3, #0]
	*(float *)&telemetry_tx_buf[11] = d;
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	330b      	adds	r3, #11
 800596e:	687a      	ldr	r2, [r7, #4]
 8005970:	601a      	str	r2, [r3, #0]

	//0x00
	telemetry_tx_buf[15] = 0x00;
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	330f      	adds	r3, #15
 8005976:	2200      	movs	r2, #0
 8005978:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[16] = 0x00;
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	3310      	adds	r3, #16
 800597e:	2200      	movs	r2, #0
 8005980:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[17] = 0x00;
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	3311      	adds	r3, #17
 8005986:	2200      	movs	r2, #0
 8005988:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[18] = 0x00;
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	3312      	adds	r3, #18
 800598e:	2200      	movs	r2, #0
 8005990:	701a      	strb	r2, [r3, #0]

	//Checksum
	telemetry_tx_buf[19] = 0xff;
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	3313      	adds	r3, #19
 8005996:	22ff      	movs	r2, #255	; 0xff
 8005998:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 19; i++) {
 800599a:	2300      	movs	r3, #0
 800599c:	61fb      	str	r3, [r7, #28]
 800599e:	e00e      	b.n	80059be <Encode_Msg_PID_Gain+0x92>
		telemetry_tx_buf[19] -= telemetry_tx_buf[i];
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	3313      	adds	r3, #19
 80059a4:	7819      	ldrb	r1, [r3, #0]
 80059a6:	69fb      	ldr	r3, [r7, #28]
 80059a8:	697a      	ldr	r2, [r7, #20]
 80059aa:	4413      	add	r3, r2
 80059ac:	781a      	ldrb	r2, [r3, #0]
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	3313      	adds	r3, #19
 80059b2:	1a8a      	subs	r2, r1, r2
 80059b4:	b2d2      	uxtb	r2, r2
 80059b6:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 19; i++) {
 80059b8:	69fb      	ldr	r3, [r7, #28]
 80059ba:	3301      	adds	r3, #1
 80059bc:	61fb      	str	r3, [r7, #28]
 80059be:	69fb      	ldr	r3, [r7, #28]
 80059c0:	2b12      	cmp	r3, #18
 80059c2:	dded      	ble.n	80059a0 <Encode_Msg_PID_Gain+0x74>
	}
}
 80059c4:	bf00      	nop
 80059c6:	3724      	adds	r7, #36	; 0x24
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr

080059d0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80059d0:	b480      	push	{r7}
 80059d2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 80059d4:	bf00      	nop
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr

080059de <LL_SPI_SetStandard>:
{
 80059de:	b480      	push	{r7}
 80059e0:	b083      	sub	sp, #12
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	6078      	str	r0, [r7, #4]
 80059e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	f023 0210 	bic.w	r2, r3, #16
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	431a      	orrs	r2, r3
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	605a      	str	r2, [r3, #4]
}
 80059f8:	bf00      	nop
 80059fa:	370c      	adds	r7, #12
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr

08005a04 <LL_AHB1_GRP1_EnableClock>:
{
 8005a04:	b480      	push	{r7}
 8005a06:	b085      	sub	sp, #20
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8005a0c:	4b08      	ldr	r3, [pc, #32]	; (8005a30 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8005a0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a10:	4907      	ldr	r1, [pc, #28]	; (8005a30 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4313      	orrs	r3, r2
 8005a16:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8005a18:	4b05      	ldr	r3, [pc, #20]	; (8005a30 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8005a1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	4013      	ands	r3, r2
 8005a20:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005a22:	68fb      	ldr	r3, [r7, #12]
}
 8005a24:	bf00      	nop
 8005a26:	3714      	adds	r7, #20
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr
 8005a30:	40023800 	.word	0x40023800

08005a34 <LL_APB1_GRP1_EnableClock>:
{
 8005a34:	b480      	push	{r7}
 8005a36:	b085      	sub	sp, #20
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8005a3c:	4b08      	ldr	r3, [pc, #32]	; (8005a60 <LL_APB1_GRP1_EnableClock+0x2c>)
 8005a3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a40:	4907      	ldr	r1, [pc, #28]	; (8005a60 <LL_APB1_GRP1_EnableClock+0x2c>)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4313      	orrs	r3, r2
 8005a46:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8005a48:	4b05      	ldr	r3, [pc, #20]	; (8005a60 <LL_APB1_GRP1_EnableClock+0x2c>)
 8005a4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	4013      	ands	r3, r2
 8005a50:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005a52:	68fb      	ldr	r3, [r7, #12]
}
 8005a54:	bf00      	nop
 8005a56:	3714      	adds	r7, #20
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr
 8005a60:	40023800 	.word	0x40023800

08005a64 <LL_APB2_GRP1_EnableClock>:
{
 8005a64:	b480      	push	{r7}
 8005a66:	b085      	sub	sp, #20
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8005a6c:	4b08      	ldr	r3, [pc, #32]	; (8005a90 <LL_APB2_GRP1_EnableClock+0x2c>)
 8005a6e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a70:	4907      	ldr	r1, [pc, #28]	; (8005a90 <LL_APB2_GRP1_EnableClock+0x2c>)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	4313      	orrs	r3, r2
 8005a76:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8005a78:	4b05      	ldr	r3, [pc, #20]	; (8005a90 <LL_APB2_GRP1_EnableClock+0x2c>)
 8005a7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	4013      	ands	r3, r2
 8005a80:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005a82:	68fb      	ldr	r3, [r7, #12]
}
 8005a84:	bf00      	nop
 8005a86:	3714      	adds	r7, #20
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr
 8005a90:	40023800 	.word	0x40023800

08005a94 <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b090      	sub	sp, #64	; 0x40
 8005a98:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8005a9a:	f107 0318 	add.w	r3, r7, #24
 8005a9e:	2228      	movs	r2, #40	; 0x28
 8005aa0:	2100      	movs	r1, #0
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f006 f83c 	bl	800bb20 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005aa8:	463b      	mov	r3, r7
 8005aaa:	2200      	movs	r2, #0
 8005aac:	601a      	str	r2, [r3, #0]
 8005aae:	605a      	str	r2, [r3, #4]
 8005ab0:	609a      	str	r2, [r3, #8]
 8005ab2:	60da      	str	r2, [r3, #12]
 8005ab4:	611a      	str	r2, [r3, #16]
 8005ab6:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8005ab8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005abc:	f7ff ffd2 	bl	8005a64 <LL_APB2_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8005ac0:	2001      	movs	r0, #1
 8005ac2:	f7ff ff9f 	bl	8005a04 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration  
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8005ac6:	23e0      	movs	r3, #224	; 0xe0
 8005ac8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005aca:	2302      	movs	r3, #2
 8005acc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8005ace:	2303      	movs	r3, #3
 8005ad0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8005ada:	2305      	movs	r3, #5
 8005adc:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ade:	463b      	mov	r3, r7
 8005ae0:	4619      	mov	r1, r3
 8005ae2:	4813      	ldr	r0, [pc, #76]	; (8005b30 <MX_SPI1_Init+0x9c>)
 8005ae4:	f005 f887 	bl	800abf6 <LL_GPIO_Init>

  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8005aec:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005af0:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8005af2:	2300      	movs	r3, #0
 8005af4:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8005af6:	2302      	movs	r3, #2
 8005af8:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8005afa:	2301      	movs	r3, #1
 8005afc:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8005afe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005b02:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 8005b04:	2310      	movs	r3, #16
 8005b06:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8005b10:	230a      	movs	r3, #10
 8005b12:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8005b14:	f107 0318 	add.w	r3, r7, #24
 8005b18:	4619      	mov	r1, r3
 8005b1a:	4806      	ldr	r0, [pc, #24]	; (8005b34 <MX_SPI1_Init+0xa0>)
 8005b1c:	f005 fa39 	bl	800af92 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8005b20:	2100      	movs	r1, #0
 8005b22:	4804      	ldr	r0, [pc, #16]	; (8005b34 <MX_SPI1_Init+0xa0>)
 8005b24:	f7ff ff5b 	bl	80059de <LL_SPI_SetStandard>

}
 8005b28:	bf00      	nop
 8005b2a:	3740      	adds	r7, #64	; 0x40
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}
 8005b30:	40020000 	.word	0x40020000
 8005b34:	40013000 	.word	0x40013000

08005b38 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b090      	sub	sp, #64	; 0x40
 8005b3c:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8005b3e:	f107 0318 	add.w	r3, r7, #24
 8005b42:	2228      	movs	r2, #40	; 0x28
 8005b44:	2100      	movs	r1, #0
 8005b46:	4618      	mov	r0, r3
 8005b48:	f005 ffea 	bl	800bb20 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b4c:	463b      	mov	r3, r7
 8005b4e:	2200      	movs	r2, #0
 8005b50:	601a      	str	r2, [r3, #0]
 8005b52:	605a      	str	r2, [r3, #4]
 8005b54:	609a      	str	r2, [r3, #8]
 8005b56:	60da      	str	r2, [r3, #12]
 8005b58:	611a      	str	r2, [r3, #16]
 8005b5a:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8005b5c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8005b60:	f7ff ff68 	bl	8005a34 <LL_APB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8005b64:	2002      	movs	r0, #2
 8005b66:	f7ff ff4d 	bl	8005a04 <LL_AHB1_GRP1_EnableClock>
  /**SPI2 GPIO Configuration  
  PB13   ------> SPI2_SCK
  PB14   ------> SPI2_MISO
  PB15   ------> SPI2_MOSI 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 8005b6a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8005b6e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005b70:	2302      	movs	r3, #2
 8005b72:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8005b74:	2303      	movs	r3, #3
 8005b76:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8005b80:	2305      	movs	r3, #5
 8005b82:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005b84:	463b      	mov	r3, r7
 8005b86:	4619      	mov	r1, r3
 8005b88:	4813      	ldr	r0, [pc, #76]	; (8005bd8 <MX_SPI2_Init+0xa0>)
 8005b8a:	f005 f834 	bl	800abf6 <LL_GPIO_Init>

  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8005b92:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005b96:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8005b9c:	2302      	movs	r3, #2
 8005b9e:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8005ba4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 8005baa:	2318      	movs	r3, #24
 8005bac:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8005bb6:	230a      	movs	r3, #10
 8005bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8005bba:	f107 0318 	add.w	r3, r7, #24
 8005bbe:	4619      	mov	r1, r3
 8005bc0:	4806      	ldr	r0, [pc, #24]	; (8005bdc <MX_SPI2_Init+0xa4>)
 8005bc2:	f005 f9e6 	bl	800af92 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 8005bc6:	2100      	movs	r1, #0
 8005bc8:	4804      	ldr	r0, [pc, #16]	; (8005bdc <MX_SPI2_Init+0xa4>)
 8005bca:	f7ff ff08 	bl	80059de <LL_SPI_SetStandard>

}
 8005bce:	bf00      	nop
 8005bd0:	3740      	adds	r7, #64	; 0x40
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}
 8005bd6:	bf00      	nop
 8005bd8:	40020400 	.word	0x40020400
 8005bdc:	40003800 	.word	0x40003800

08005be0 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b090      	sub	sp, #64	; 0x40
 8005be4:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8005be6:	f107 0318 	add.w	r3, r7, #24
 8005bea:	2228      	movs	r2, #40	; 0x28
 8005bec:	2100      	movs	r1, #0
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f005 ff96 	bl	800bb20 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005bf4:	463b      	mov	r3, r7
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	601a      	str	r2, [r3, #0]
 8005bfa:	605a      	str	r2, [r3, #4]
 8005bfc:	609a      	str	r2, [r3, #8]
 8005bfe:	60da      	str	r2, [r3, #12]
 8005c00:	611a      	str	r2, [r3, #16]
 8005c02:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 8005c04:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005c08:	f7ff ff14 	bl	8005a34 <LL_APB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8005c0c:	2002      	movs	r0, #2
 8005c0e:	f7ff fef9 	bl	8005a04 <LL_AHB1_GRP1_EnableClock>
  /**SPI3 GPIO Configuration  
  PB3   ------> SPI3_SCK
  PB4   ------> SPI3_MISO
  PB5   ------> SPI3_MOSI 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 8005c12:	2338      	movs	r3, #56	; 0x38
 8005c14:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005c16:	2302      	movs	r3, #2
 8005c18:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8005c1a:	2303      	movs	r3, #3
 8005c1c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005c22:	2300      	movs	r3, #0
 8005c24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8005c26:	2306      	movs	r3, #6
 8005c28:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c2a:	463b      	mov	r3, r7
 8005c2c:	4619      	mov	r1, r3
 8005c2e:	4813      	ldr	r0, [pc, #76]	; (8005c7c <MX_SPI3_Init+0x9c>)
 8005c30:	f004 ffe1 	bl	800abf6 <LL_GPIO_Init>

  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8005c34:	2300      	movs	r3, #0
 8005c36:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8005c38:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005c3c:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8005c42:	2302      	movs	r3, #2
 8005c44:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8005c46:	2301      	movs	r3, #1
 8005c48:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8005c4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8005c50:	2308      	movs	r3, #8
 8005c52:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8005c54:	2300      	movs	r3, #0
 8005c56:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8005c5c:	230a      	movs	r3, #10
 8005c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 8005c60:	f107 0318 	add.w	r3, r7, #24
 8005c64:	4619      	mov	r1, r3
 8005c66:	4806      	ldr	r0, [pc, #24]	; (8005c80 <MX_SPI3_Init+0xa0>)
 8005c68:	f005 f993 	bl	800af92 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 8005c6c:	2100      	movs	r1, #0
 8005c6e:	4804      	ldr	r0, [pc, #16]	; (8005c80 <MX_SPI3_Init+0xa0>)
 8005c70:	f7ff feb5 	bl	80059de <LL_SPI_SetStandard>

}
 8005c74:	bf00      	nop
 8005c76:	3740      	adds	r7, #64	; 0x40
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}
 8005c7c:	40020400 	.word	0x40020400
 8005c80:	40003c00 	.word	0x40003c00

08005c84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b083      	sub	sp, #12
 8005c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	607b      	str	r3, [r7, #4]
 8005c8e:	4b10      	ldr	r3, [pc, #64]	; (8005cd0 <HAL_MspInit+0x4c>)
 8005c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c92:	4a0f      	ldr	r2, [pc, #60]	; (8005cd0 <HAL_MspInit+0x4c>)
 8005c94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005c98:	6453      	str	r3, [r2, #68]	; 0x44
 8005c9a:	4b0d      	ldr	r3, [pc, #52]	; (8005cd0 <HAL_MspInit+0x4c>)
 8005c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ca2:	607b      	str	r3, [r7, #4]
 8005ca4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	603b      	str	r3, [r7, #0]
 8005caa:	4b09      	ldr	r3, [pc, #36]	; (8005cd0 <HAL_MspInit+0x4c>)
 8005cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cae:	4a08      	ldr	r2, [pc, #32]	; (8005cd0 <HAL_MspInit+0x4c>)
 8005cb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cb4:	6413      	str	r3, [r2, #64]	; 0x40
 8005cb6:	4b06      	ldr	r3, [pc, #24]	; (8005cd0 <HAL_MspInit+0x4c>)
 8005cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cbe:	603b      	str	r3, [r7, #0]
 8005cc0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005cc2:	bf00      	nop
 8005cc4:	370c      	adds	r7, #12
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr
 8005cce:	bf00      	nop
 8005cd0:	40023800 	.word	0x40023800

08005cd4 <LL_TIM_ClearFlag_UPDATE>:
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b083      	sub	sp, #12
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f06f 0201 	mvn.w	r2, #1
 8005ce2:	611a      	str	r2, [r3, #16]
}
 8005ce4:	bf00      	nop
 8005ce6:	370c      	adds	r7, #12
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr

08005cf0 <LL_TIM_IsActiveFlag_UPDATE>:
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b083      	sub	sp, #12
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	691b      	ldr	r3, [r3, #16]
 8005cfc:	f003 0301 	and.w	r3, r3, #1
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d101      	bne.n	8005d08 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8005d04:	2301      	movs	r3, #1
 8005d06:	e000      	b.n	8005d0a <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8005d08:	2300      	movs	r3, #0
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	370c      	adds	r7, #12
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr

08005d16 <LL_USART_IsActiveFlag_RXNE>:
{
 8005d16:	b480      	push	{r7}
 8005d18:	b083      	sub	sp, #12
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f003 0320 	and.w	r3, r3, #32
 8005d26:	2b20      	cmp	r3, #32
 8005d28:	bf0c      	ite	eq
 8005d2a:	2301      	moveq	r3, #1
 8005d2c:	2300      	movne	r3, #0
 8005d2e:	b2db      	uxtb	r3, r3
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	370c      	adds	r7, #12
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr

08005d3c <LL_USART_ClearFlag_RXNE>:
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b083      	sub	sp, #12
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f06f 0220 	mvn.w	r2, #32
 8005d4a:	601a      	str	r2, [r3, #0]
}
 8005d4c:	bf00      	nop
 8005d4e:	370c      	adds	r7, #12
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr

08005d58 <LL_USART_ReceiveData8>:
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b083      	sub	sp, #12
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	b2db      	uxtb	r3, r3
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	370c      	adds	r7, #12
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr

08005d72 <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 8005d72:	b480      	push	{r7}
 8005d74:	af00      	add	r7, sp, #0

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */

	/* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005d76:	bf00      	nop
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr

08005d80 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 8005d80:	b480      	push	{r7}
 8005d82:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1)
 8005d84:	e7fe      	b.n	8005d84 <HardFault_Handler+0x4>

08005d86 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 8005d86:	b480      	push	{r7}
 8005d88:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1)
 8005d8a:	e7fe      	b.n	8005d8a <MemManage_Handler+0x4>

08005d8c <BusFault_Handler>:

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1)
 8005d90:	e7fe      	b.n	8005d90 <BusFault_Handler+0x4>

08005d92 <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 8005d92:	b480      	push	{r7}
 8005d94:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1)
 8005d96:	e7fe      	b.n	8005d96 <UsageFault_Handler+0x4>

08005d98 <SVC_Handler>:

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8005d9c:	bf00      	nop
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da4:	4770      	bx	lr

08005da6 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 8005da6:	b480      	push	{r7}
 8005da8:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8005daa:	bf00      	nop
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 8005db4:	b480      	push	{r7}
 8005db6:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8005db8:	bf00      	nop
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr

08005dc2 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 8005dc2:	b580      	push	{r7, lr}
 8005dc4:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8005dc6:	f001 f811 	bl	8006dec <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8005dca:	bf00      	nop
 8005dcc:	bd80      	pop	{r7, pc}
	...

08005dd0 <USART1_IRQHandler>:

/**
 * @brief This function handles USART1 global interrupt.
 */
void USART1_IRQHandler(void)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART1_IRQn 0 */

	/* USER CODE END USART1_IRQn 0 */
	HAL_UART_IRQHandler(&huart1);
 8005dd4:	4802      	ldr	r0, [pc, #8]	; (8005de0 <USART1_IRQHandler+0x10>)
 8005dd6:	f004 f80d 	bl	8009df4 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART1_IRQn 1 */

	/* USER CODE END USART1_IRQn 1 */
}
 8005dda:	bf00      	nop
 8005ddc:	bd80      	pop	{r7, pc}
 8005dde:	bf00      	nop
 8005de0:	20000580 	.word	0x20000580

08005de4 <UART4_IRQHandler>:

/**
 * @brief This function handles UART4 global interrupt.
 */
void UART4_IRQHandler(void)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UART4_IRQn 0 */
	static unsigned char cnt = 0;

	if (LL_USART_IsActiveFlag_RXNE(UART4)) {
 8005de8:	4831      	ldr	r0, [pc, #196]	; (8005eb0 <UART4_IRQHandler+0xcc>)
 8005dea:	f7ff ff94 	bl	8005d16 <LL_USART_IsActiveFlag_RXNE>
 8005dee:	4603      	mov	r3, r0
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d058      	beq.n	8005ea6 <UART4_IRQHandler+0xc2>
		LL_USART_ClearFlag_RXNE(UART4);
 8005df4:	482e      	ldr	r0, [pc, #184]	; (8005eb0 <UART4_IRQHandler+0xcc>)
 8005df6:	f7ff ffa1 	bl	8005d3c <LL_USART_ClearFlag_RXNE>
		uart4_rx_data = LL_USART_ReceiveData8(UART4);
 8005dfa:	482d      	ldr	r0, [pc, #180]	; (8005eb0 <UART4_IRQHandler+0xcc>)
 8005dfc:	f7ff ffac 	bl	8005d58 <LL_USART_ReceiveData8>
 8005e00:	4603      	mov	r3, r0
 8005e02:	461a      	mov	r2, r3
 8005e04:	4b2b      	ldr	r3, [pc, #172]	; (8005eb4 <UART4_IRQHandler+0xd0>)
 8005e06:	701a      	strb	r2, [r3, #0]
		uart4_rx_flag = 1;
 8005e08:	4b2b      	ldr	r3, [pc, #172]	; (8005eb8 <UART4_IRQHandler+0xd4>)
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	701a      	strb	r2, [r3, #0]
		//		if (cnt == 35) {
		//			m8n_rx_cplt_flag = 1;
		//			cnt = 0;
		//		}

		switch (cnt) {
 8005e0e:	4b2b      	ldr	r3, [pc, #172]	; (8005ebc <UART4_IRQHandler+0xd8>)
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d015      	beq.n	8005e42 <UART4_IRQHandler+0x5e>
 8005e16:	2b23      	cmp	r3, #35	; 0x23
 8005e18:	d029      	beq.n	8005e6e <UART4_IRQHandler+0x8a>
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d135      	bne.n	8005e8a <UART4_IRQHandler+0xa6>
		case 0:
			if (uart4_rx_data == 0xb5) {
 8005e1e:	4b25      	ldr	r3, [pc, #148]	; (8005eb4 <UART4_IRQHandler+0xd0>)
 8005e20:	781b      	ldrb	r3, [r3, #0]
 8005e22:	2bb5      	cmp	r3, #181	; 0xb5
 8005e24:	d141      	bne.n	8005eaa <UART4_IRQHandler+0xc6>
				m8n_rx_buf[cnt] = uart4_rx_data;
 8005e26:	4b25      	ldr	r3, [pc, #148]	; (8005ebc <UART4_IRQHandler+0xd8>)
 8005e28:	781b      	ldrb	r3, [r3, #0]
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	4b21      	ldr	r3, [pc, #132]	; (8005eb4 <UART4_IRQHandler+0xd0>)
 8005e2e:	7819      	ldrb	r1, [r3, #0]
 8005e30:	4b23      	ldr	r3, [pc, #140]	; (8005ec0 <UART4_IRQHandler+0xdc>)
 8005e32:	5499      	strb	r1, [r3, r2]
				cnt++;
 8005e34:	4b21      	ldr	r3, [pc, #132]	; (8005ebc <UART4_IRQHandler+0xd8>)
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	3301      	adds	r3, #1
 8005e3a:	b2da      	uxtb	r2, r3
 8005e3c:	4b1f      	ldr	r3, [pc, #124]	; (8005ebc <UART4_IRQHandler+0xd8>)
 8005e3e:	701a      	strb	r2, [r3, #0]
			}
			break;
 8005e40:	e033      	b.n	8005eaa <UART4_IRQHandler+0xc6>
		case 1:
			if (uart4_rx_data == 0x62) {
 8005e42:	4b1c      	ldr	r3, [pc, #112]	; (8005eb4 <UART4_IRQHandler+0xd0>)
 8005e44:	781b      	ldrb	r3, [r3, #0]
 8005e46:	2b62      	cmp	r3, #98	; 0x62
 8005e48:	d10d      	bne.n	8005e66 <UART4_IRQHandler+0x82>
				m8n_rx_buf[cnt] = uart4_rx_data;
 8005e4a:	4b1c      	ldr	r3, [pc, #112]	; (8005ebc <UART4_IRQHandler+0xd8>)
 8005e4c:	781b      	ldrb	r3, [r3, #0]
 8005e4e:	461a      	mov	r2, r3
 8005e50:	4b18      	ldr	r3, [pc, #96]	; (8005eb4 <UART4_IRQHandler+0xd0>)
 8005e52:	7819      	ldrb	r1, [r3, #0]
 8005e54:	4b1a      	ldr	r3, [pc, #104]	; (8005ec0 <UART4_IRQHandler+0xdc>)
 8005e56:	5499      	strb	r1, [r3, r2]
				cnt++;
 8005e58:	4b18      	ldr	r3, [pc, #96]	; (8005ebc <UART4_IRQHandler+0xd8>)
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	3301      	adds	r3, #1
 8005e5e:	b2da      	uxtb	r2, r3
 8005e60:	4b16      	ldr	r3, [pc, #88]	; (8005ebc <UART4_IRQHandler+0xd8>)
 8005e62:	701a      	strb	r2, [r3, #0]
			} else {
				cnt = 0;
			}
			break;
 8005e64:	e022      	b.n	8005eac <UART4_IRQHandler+0xc8>
				cnt = 0;
 8005e66:	4b15      	ldr	r3, [pc, #84]	; (8005ebc <UART4_IRQHandler+0xd8>)
 8005e68:	2200      	movs	r2, #0
 8005e6a:	701a      	strb	r2, [r3, #0]
			break;
 8005e6c:	e01e      	b.n	8005eac <UART4_IRQHandler+0xc8>
		case 35:
			m8n_rx_buf[cnt] = uart4_rx_data;
 8005e6e:	4b13      	ldr	r3, [pc, #76]	; (8005ebc <UART4_IRQHandler+0xd8>)
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	461a      	mov	r2, r3
 8005e74:	4b0f      	ldr	r3, [pc, #60]	; (8005eb4 <UART4_IRQHandler+0xd0>)
 8005e76:	7819      	ldrb	r1, [r3, #0]
 8005e78:	4b11      	ldr	r3, [pc, #68]	; (8005ec0 <UART4_IRQHandler+0xdc>)
 8005e7a:	5499      	strb	r1, [r3, r2]
			cnt = 0;
 8005e7c:	4b0f      	ldr	r3, [pc, #60]	; (8005ebc <UART4_IRQHandler+0xd8>)
 8005e7e:	2200      	movs	r2, #0
 8005e80:	701a      	strb	r2, [r3, #0]
			m8n_rx_cplt_flag = 1;
 8005e82:	4b10      	ldr	r3, [pc, #64]	; (8005ec4 <UART4_IRQHandler+0xe0>)
 8005e84:	2201      	movs	r2, #1
 8005e86:	701a      	strb	r2, [r3, #0]
			break;
 8005e88:	e010      	b.n	8005eac <UART4_IRQHandler+0xc8>
		default:
			m8n_rx_buf[cnt] = uart4_rx_data;
 8005e8a:	4b0c      	ldr	r3, [pc, #48]	; (8005ebc <UART4_IRQHandler+0xd8>)
 8005e8c:	781b      	ldrb	r3, [r3, #0]
 8005e8e:	461a      	mov	r2, r3
 8005e90:	4b08      	ldr	r3, [pc, #32]	; (8005eb4 <UART4_IRQHandler+0xd0>)
 8005e92:	7819      	ldrb	r1, [r3, #0]
 8005e94:	4b0a      	ldr	r3, [pc, #40]	; (8005ec0 <UART4_IRQHandler+0xdc>)
 8005e96:	5499      	strb	r1, [r3, r2]
			cnt++;
 8005e98:	4b08      	ldr	r3, [pc, #32]	; (8005ebc <UART4_IRQHandler+0xd8>)
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	3301      	adds	r3, #1
 8005e9e:	b2da      	uxtb	r2, r3
 8005ea0:	4b06      	ldr	r3, [pc, #24]	; (8005ebc <UART4_IRQHandler+0xd8>)
 8005ea2:	701a      	strb	r2, [r3, #0]
			break;
 8005ea4:	e002      	b.n	8005eac <UART4_IRQHandler+0xc8>
		}
	}
 8005ea6:	bf00      	nop
 8005ea8:	e000      	b.n	8005eac <UART4_IRQHandler+0xc8>
			break;
 8005eaa:	bf00      	nop

	/* USER CODE END UART4_IRQn 0 */
	/* USER CODE BEGIN UART4_IRQn 1 */

	/* USER CODE END UART4_IRQn 1 */
}
 8005eac:	bf00      	nop
 8005eae:	bd80      	pop	{r7, pc}
 8005eb0:	40004c00 	.word	0x40004c00
 8005eb4:	20000213 	.word	0x20000213
 8005eb8:	20000212 	.word	0x20000212
 8005ebc:	2000021b 	.word	0x2000021b
 8005ec0:	2000055c 	.word	0x2000055c
 8005ec4:	20000214 	.word	0x20000214

08005ec8 <UART5_IRQHandler>:

/**
 * @brief This function handles UART5 global interrupt.
 */
void UART5_IRQHandler(void)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UART5_IRQn 0 */
	static unsigned char cnt = 0;

	if (LL_USART_IsActiveFlag_RXNE(UART5)) {
 8005ecc:	4831      	ldr	r0, [pc, #196]	; (8005f94 <UART5_IRQHandler+0xcc>)
 8005ece:	f7ff ff22 	bl	8005d16 <LL_USART_IsActiveFlag_RXNE>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d058      	beq.n	8005f8a <UART5_IRQHandler+0xc2>
		LL_USART_ClearFlag_RXNE(UART5);
 8005ed8:	482e      	ldr	r0, [pc, #184]	; (8005f94 <UART5_IRQHandler+0xcc>)
 8005eda:	f7ff ff2f 	bl	8005d3c <LL_USART_ClearFlag_RXNE>
		uart5_rx_data = LL_USART_ReceiveData8(UART5);
 8005ede:	482d      	ldr	r0, [pc, #180]	; (8005f94 <UART5_IRQHandler+0xcc>)
 8005ee0:	f7ff ff3a 	bl	8005d58 <LL_USART_ReceiveData8>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	4b2b      	ldr	r3, [pc, #172]	; (8005f98 <UART5_IRQHandler+0xd0>)
 8005eea:	701a      	strb	r2, [r3, #0]
		uart5_rx_flag = 1;
 8005eec:	4b2b      	ldr	r3, [pc, #172]	; (8005f9c <UART5_IRQHandler+0xd4>)
 8005eee:	2201      	movs	r2, #1
 8005ef0:	701a      	strb	r2, [r3, #0]

		switch (cnt) {
 8005ef2:	4b2b      	ldr	r3, [pc, #172]	; (8005fa0 <UART5_IRQHandler+0xd8>)
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	d015      	beq.n	8005f26 <UART5_IRQHandler+0x5e>
 8005efa:	2b1f      	cmp	r3, #31
 8005efc:	d029      	beq.n	8005f52 <UART5_IRQHandler+0x8a>
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d135      	bne.n	8005f6e <UART5_IRQHandler+0xa6>
		case 0:
			if (uart5_rx_data == 0x20) {
 8005f02:	4b25      	ldr	r3, [pc, #148]	; (8005f98 <UART5_IRQHandler+0xd0>)
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	2b20      	cmp	r3, #32
 8005f08:	d141      	bne.n	8005f8e <UART5_IRQHandler+0xc6>
				ibus_rx_buf[cnt] = uart5_rx_data;
 8005f0a:	4b25      	ldr	r3, [pc, #148]	; (8005fa0 <UART5_IRQHandler+0xd8>)
 8005f0c:	781b      	ldrb	r3, [r3, #0]
 8005f0e:	461a      	mov	r2, r3
 8005f10:	4b21      	ldr	r3, [pc, #132]	; (8005f98 <UART5_IRQHandler+0xd0>)
 8005f12:	7819      	ldrb	r1, [r3, #0]
 8005f14:	4b23      	ldr	r3, [pc, #140]	; (8005fa4 <UART5_IRQHandler+0xdc>)
 8005f16:	5499      	strb	r1, [r3, r2]
				cnt++;
 8005f18:	4b21      	ldr	r3, [pc, #132]	; (8005fa0 <UART5_IRQHandler+0xd8>)
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	3301      	adds	r3, #1
 8005f1e:	b2da      	uxtb	r2, r3
 8005f20:	4b1f      	ldr	r3, [pc, #124]	; (8005fa0 <UART5_IRQHandler+0xd8>)
 8005f22:	701a      	strb	r2, [r3, #0]
			}
			break;
 8005f24:	e033      	b.n	8005f8e <UART5_IRQHandler+0xc6>
		case 1:
			if (uart5_rx_data == 0x40) {
 8005f26:	4b1c      	ldr	r3, [pc, #112]	; (8005f98 <UART5_IRQHandler+0xd0>)
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	2b40      	cmp	r3, #64	; 0x40
 8005f2c:	d10d      	bne.n	8005f4a <UART5_IRQHandler+0x82>
				ibus_rx_buf[cnt] = uart5_rx_data;
 8005f2e:	4b1c      	ldr	r3, [pc, #112]	; (8005fa0 <UART5_IRQHandler+0xd8>)
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	461a      	mov	r2, r3
 8005f34:	4b18      	ldr	r3, [pc, #96]	; (8005f98 <UART5_IRQHandler+0xd0>)
 8005f36:	7819      	ldrb	r1, [r3, #0]
 8005f38:	4b1a      	ldr	r3, [pc, #104]	; (8005fa4 <UART5_IRQHandler+0xdc>)
 8005f3a:	5499      	strb	r1, [r3, r2]
				cnt++;
 8005f3c:	4b18      	ldr	r3, [pc, #96]	; (8005fa0 <UART5_IRQHandler+0xd8>)
 8005f3e:	781b      	ldrb	r3, [r3, #0]
 8005f40:	3301      	adds	r3, #1
 8005f42:	b2da      	uxtb	r2, r3
 8005f44:	4b16      	ldr	r3, [pc, #88]	; (8005fa0 <UART5_IRQHandler+0xd8>)
 8005f46:	701a      	strb	r2, [r3, #0]
			} else {
				cnt = 0;
			}
			break;
 8005f48:	e022      	b.n	8005f90 <UART5_IRQHandler+0xc8>
				cnt = 0;
 8005f4a:	4b15      	ldr	r3, [pc, #84]	; (8005fa0 <UART5_IRQHandler+0xd8>)
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	701a      	strb	r2, [r3, #0]
			break;
 8005f50:	e01e      	b.n	8005f90 <UART5_IRQHandler+0xc8>
		case 31:
			ibus_rx_buf[cnt] = uart5_rx_data;
 8005f52:	4b13      	ldr	r3, [pc, #76]	; (8005fa0 <UART5_IRQHandler+0xd8>)
 8005f54:	781b      	ldrb	r3, [r3, #0]
 8005f56:	461a      	mov	r2, r3
 8005f58:	4b0f      	ldr	r3, [pc, #60]	; (8005f98 <UART5_IRQHandler+0xd0>)
 8005f5a:	7819      	ldrb	r1, [r3, #0]
 8005f5c:	4b11      	ldr	r3, [pc, #68]	; (8005fa4 <UART5_IRQHandler+0xdc>)
 8005f5e:	5499      	strb	r1, [r3, r2]
			cnt = 0;
 8005f60:	4b0f      	ldr	r3, [pc, #60]	; (8005fa0 <UART5_IRQHandler+0xd8>)
 8005f62:	2200      	movs	r2, #0
 8005f64:	701a      	strb	r2, [r3, #0]
			ibus_rx_cplt_flag = 1;
 8005f66:	4b10      	ldr	r3, [pc, #64]	; (8005fa8 <UART5_IRQHandler+0xe0>)
 8005f68:	2201      	movs	r2, #1
 8005f6a:	701a      	strb	r2, [r3, #0]
			break;
 8005f6c:	e010      	b.n	8005f90 <UART5_IRQHandler+0xc8>
		default:
			ibus_rx_buf[cnt] = uart5_rx_data;
 8005f6e:	4b0c      	ldr	r3, [pc, #48]	; (8005fa0 <UART5_IRQHandler+0xd8>)
 8005f70:	781b      	ldrb	r3, [r3, #0]
 8005f72:	461a      	mov	r2, r3
 8005f74:	4b08      	ldr	r3, [pc, #32]	; (8005f98 <UART5_IRQHandler+0xd0>)
 8005f76:	7819      	ldrb	r1, [r3, #0]
 8005f78:	4b0a      	ldr	r3, [pc, #40]	; (8005fa4 <UART5_IRQHandler+0xdc>)
 8005f7a:	5499      	strb	r1, [r3, r2]
			cnt++;
 8005f7c:	4b08      	ldr	r3, [pc, #32]	; (8005fa0 <UART5_IRQHandler+0xd8>)
 8005f7e:	781b      	ldrb	r3, [r3, #0]
 8005f80:	3301      	adds	r3, #1
 8005f82:	b2da      	uxtb	r2, r3
 8005f84:	4b06      	ldr	r3, [pc, #24]	; (8005fa0 <UART5_IRQHandler+0xd8>)
 8005f86:	701a      	strb	r2, [r3, #0]
			break;
 8005f88:	e002      	b.n	8005f90 <UART5_IRQHandler+0xc8>
		}

		//		while(!LL_USART_IsActiveFlag_TXE(USART6));
		//		LL_USART_TransmitData8(USART6, uart5_rx_data);
	}
 8005f8a:	bf00      	nop
 8005f8c:	e000      	b.n	8005f90 <UART5_IRQHandler+0xc8>
			break;
 8005f8e:	bf00      	nop
	/* USER CODE END UART5_IRQn 0 */
	/* USER CODE BEGIN UART5_IRQn 1 */

	/* USER CODE END UART5_IRQn 1 */
}
 8005f90:	bf00      	nop
 8005f92:	bd80      	pop	{r7, pc}
 8005f94:	40005000 	.word	0x40005000
 8005f98:	20000211 	.word	0x20000211
 8005f9c:	20000210 	.word	0x20000210
 8005fa0:	2000021c 	.word	0x2000021c
 8005fa4:	2000053c 	.word	0x2000053c
 8005fa8:	20000215 	.word	0x20000215

08005fac <TIM7_IRQHandler>:

/**
 * @brief This function handles TIM7 global interrupt.
 */
void TIM7_IRQHandler(void)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	af00      	add	r7, sp, #0
	static unsigned char tim7_1ms_count = 0;
	static unsigned char tim7_20ms_count = 0;
	static unsigned char tim7_100ms_count = 0;
	static unsigned short tim7_1000ms_count = 0;

	if(LL_TIM_IsActiveFlag_UPDATE(TIM7)) {
 8005fb0:	4825      	ldr	r0, [pc, #148]	; (8006048 <TIM7_IRQHandler+0x9c>)
 8005fb2:	f7ff fe9d 	bl	8005cf0 <LL_TIM_IsActiveFlag_UPDATE>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d043      	beq.n	8006044 <TIM7_IRQHandler+0x98>
		LL_TIM_ClearFlag_UPDATE(TIM7); //Clear flag of TM7
 8005fbc:	4822      	ldr	r0, [pc, #136]	; (8006048 <TIM7_IRQHandler+0x9c>)
 8005fbe:	f7ff fe89 	bl	8005cd4 <LL_TIM_ClearFlag_UPDATE>

		//1ms - 1000Hz Transmission
		tim7_1ms_count++;
 8005fc2:	4b22      	ldr	r3, [pc, #136]	; (800604c <TIM7_IRQHandler+0xa0>)
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	3301      	adds	r3, #1
 8005fc8:	b2da      	uxtb	r2, r3
 8005fca:	4b20      	ldr	r3, [pc, #128]	; (800604c <TIM7_IRQHandler+0xa0>)
 8005fcc:	701a      	strb	r2, [r3, #0]
		if (tim7_1ms_count == 1) {
 8005fce:	4b1f      	ldr	r3, [pc, #124]	; (800604c <TIM7_IRQHandler+0xa0>)
 8005fd0:	781b      	ldrb	r3, [r3, #0]
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d105      	bne.n	8005fe2 <TIM7_IRQHandler+0x36>
			tim7_1ms_count = 0;
 8005fd6:	4b1d      	ldr	r3, [pc, #116]	; (800604c <TIM7_IRQHandler+0xa0>)
 8005fd8:	2200      	movs	r2, #0
 8005fda:	701a      	strb	r2, [r3, #0]
			tim7_1ms_flag = 1;
 8005fdc:	4b1c      	ldr	r3, [pc, #112]	; (8006050 <TIM7_IRQHandler+0xa4>)
 8005fde:	2201      	movs	r2, #1
 8005fe0:	701a      	strb	r2, [r3, #0]
		}
		//20ms - 50Hz Transmission
		tim7_20ms_count++;
 8005fe2:	4b1c      	ldr	r3, [pc, #112]	; (8006054 <TIM7_IRQHandler+0xa8>)
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	3301      	adds	r3, #1
 8005fe8:	b2da      	uxtb	r2, r3
 8005fea:	4b1a      	ldr	r3, [pc, #104]	; (8006054 <TIM7_IRQHandler+0xa8>)
 8005fec:	701a      	strb	r2, [r3, #0]
		if (tim7_20ms_count == 20) {
 8005fee:	4b19      	ldr	r3, [pc, #100]	; (8006054 <TIM7_IRQHandler+0xa8>)
 8005ff0:	781b      	ldrb	r3, [r3, #0]
 8005ff2:	2b14      	cmp	r3, #20
 8005ff4:	d105      	bne.n	8006002 <TIM7_IRQHandler+0x56>
			tim7_20ms_count = 0;
 8005ff6:	4b17      	ldr	r3, [pc, #92]	; (8006054 <TIM7_IRQHandler+0xa8>)
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	701a      	strb	r2, [r3, #0]
			tim7_20ms_flag = 1;
 8005ffc:	4b16      	ldr	r3, [pc, #88]	; (8006058 <TIM7_IRQHandler+0xac>)
 8005ffe:	2201      	movs	r2, #1
 8006000:	701a      	strb	r2, [r3, #0]
		}
		//100ms - 10Hz Transmission
		tim7_100ms_count++;
 8006002:	4b16      	ldr	r3, [pc, #88]	; (800605c <TIM7_IRQHandler+0xb0>)
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	3301      	adds	r3, #1
 8006008:	b2da      	uxtb	r2, r3
 800600a:	4b14      	ldr	r3, [pc, #80]	; (800605c <TIM7_IRQHandler+0xb0>)
 800600c:	701a      	strb	r2, [r3, #0]
		if (tim7_100ms_count == 100) {
 800600e:	4b13      	ldr	r3, [pc, #76]	; (800605c <TIM7_IRQHandler+0xb0>)
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	2b64      	cmp	r3, #100	; 0x64
 8006014:	d105      	bne.n	8006022 <TIM7_IRQHandler+0x76>
			tim7_100ms_count = 0;
 8006016:	4b11      	ldr	r3, [pc, #68]	; (800605c <TIM7_IRQHandler+0xb0>)
 8006018:	2200      	movs	r2, #0
 800601a:	701a      	strb	r2, [r3, #0]
			tim7_100ms_flag = 1;
 800601c:	4b10      	ldr	r3, [pc, #64]	; (8006060 <TIM7_IRQHandler+0xb4>)
 800601e:	2201      	movs	r2, #1
 8006020:	701a      	strb	r2, [r3, #0]
		}

		//1000ms - 1Hz Transmission
		tim7_1000ms_count++;
 8006022:	4b10      	ldr	r3, [pc, #64]	; (8006064 <TIM7_IRQHandler+0xb8>)
 8006024:	881b      	ldrh	r3, [r3, #0]
 8006026:	3301      	adds	r3, #1
 8006028:	b29a      	uxth	r2, r3
 800602a:	4b0e      	ldr	r3, [pc, #56]	; (8006064 <TIM7_IRQHandler+0xb8>)
 800602c:	801a      	strh	r2, [r3, #0]
		if (tim7_1000ms_count == 1000) {
 800602e:	4b0d      	ldr	r3, [pc, #52]	; (8006064 <TIM7_IRQHandler+0xb8>)
 8006030:	881b      	ldrh	r3, [r3, #0]
 8006032:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006036:	d105      	bne.n	8006044 <TIM7_IRQHandler+0x98>
			tim7_1000ms_count = 0;
 8006038:	4b0a      	ldr	r3, [pc, #40]	; (8006064 <TIM7_IRQHandler+0xb8>)
 800603a:	2200      	movs	r2, #0
 800603c:	801a      	strh	r2, [r3, #0]
			tim7_1000ms_flag = 1;
 800603e:	4b0a      	ldr	r3, [pc, #40]	; (8006068 <TIM7_IRQHandler+0xbc>)
 8006040:	2201      	movs	r2, #1
 8006042:	701a      	strb	r2, [r3, #0]

	/* USER CODE END TIM7_IRQn 0 */
	/* USER CODE BEGIN TIM7_IRQn 1 */

	/* USER CODE END TIM7_IRQn 1 */
}
 8006044:	bf00      	nop
 8006046:	bd80      	pop	{r7, pc}
 8006048:	40001400 	.word	0x40001400
 800604c:	2000021d 	.word	0x2000021d
 8006050:	20000217 	.word	0x20000217
 8006054:	2000021e 	.word	0x2000021e
 8006058:	20000218 	.word	0x20000218
 800605c:	2000021f 	.word	0x2000021f
 8006060:	20000219 	.word	0x20000219
 8006064:	20000220 	.word	0x20000220
 8006068:	2000021a 	.word	0x2000021a

0800606c <DMA2_Stream0_IRQHandler>:

/**
 * @brief This function handles DMA2 stream0 global interrupt.
 */
void DMA2_Stream0_IRQHandler(void)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

	/* USER CODE END DMA2_Stream0_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_adc1);
 8006070:	4802      	ldr	r0, [pc, #8]	; (800607c <DMA2_Stream0_IRQHandler+0x10>)
 8006072:	f001 fd2b 	bl	8007acc <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

	/* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8006076:	bf00      	nop
 8006078:	bd80      	pop	{r7, pc}
 800607a:	bf00      	nop
 800607c:	200003fc 	.word	0x200003fc

08006080 <USART6_IRQHandler>:

/**
 * @brief This function handles USART6 global interrupt.
 */
void USART6_IRQHandler(void)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART6_IRQn 0 */
	if (LL_USART_IsActiveFlag_RXNE(USART6)) {
 8006084:	480a      	ldr	r0, [pc, #40]	; (80060b0 <USART6_IRQHandler+0x30>)
 8006086:	f7ff fe46 	bl	8005d16 <LL_USART_IsActiveFlag_RXNE>
 800608a:	4603      	mov	r3, r0
 800608c:	2b00      	cmp	r3, #0
 800608e:	d00c      	beq.n	80060aa <USART6_IRQHandler+0x2a>
		LL_USART_ClearFlag_RXNE(USART6);
 8006090:	4807      	ldr	r0, [pc, #28]	; (80060b0 <USART6_IRQHandler+0x30>)
 8006092:	f7ff fe53 	bl	8005d3c <LL_USART_ClearFlag_RXNE>
		uart6_rx_data = LL_USART_ReceiveData8(USART6);
 8006096:	4806      	ldr	r0, [pc, #24]	; (80060b0 <USART6_IRQHandler+0x30>)
 8006098:	f7ff fe5e 	bl	8005d58 <LL_USART_ReceiveData8>
 800609c:	4603      	mov	r3, r0
 800609e:	461a      	mov	r2, r3
 80060a0:	4b04      	ldr	r3, [pc, #16]	; (80060b4 <USART6_IRQHandler+0x34>)
 80060a2:	701a      	strb	r2, [r3, #0]
		uart6_rx_flag = 1;
 80060a4:	4b04      	ldr	r3, [pc, #16]	; (80060b8 <USART6_IRQHandler+0x38>)
 80060a6:	2201      	movs	r2, #1
 80060a8:	701a      	strb	r2, [r3, #0]

	/* USER CODE END USART6_IRQn 0 */
	/* USER CODE BEGIN USART6_IRQn 1 */

	/* USER CODE END USART6_IRQn 1 */
}
 80060aa:	bf00      	nop
 80060ac:	bd80      	pop	{r7, pc}
 80060ae:	bf00      	nop
 80060b0:	40011400 	.word	0x40011400
 80060b4:	2000020f 	.word	0x2000020f
 80060b8:	2000020e 	.word	0x2000020e

080060bc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b086      	sub	sp, #24
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	60f8      	str	r0, [r7, #12]
 80060c4:	60b9      	str	r1, [r7, #8]
 80060c6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80060c8:	2300      	movs	r3, #0
 80060ca:	617b      	str	r3, [r7, #20]
 80060cc:	e00a      	b.n	80060e4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80060ce:	f3af 8000 	nop.w
 80060d2:	4601      	mov	r1, r0
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	1c5a      	adds	r2, r3, #1
 80060d8:	60ba      	str	r2, [r7, #8]
 80060da:	b2ca      	uxtb	r2, r1
 80060dc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	3301      	adds	r3, #1
 80060e2:	617b      	str	r3, [r7, #20]
 80060e4:	697a      	ldr	r2, [r7, #20]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	429a      	cmp	r2, r3
 80060ea:	dbf0      	blt.n	80060ce <_read+0x12>
	}

return len;
 80060ec:	687b      	ldr	r3, [r7, #4]
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3718      	adds	r7, #24
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}

080060f6 <_close>:
	}
	return len;
}

int _close(int file)
{
 80060f6:	b480      	push	{r7}
 80060f8:	b083      	sub	sp, #12
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	6078      	str	r0, [r7, #4]
	return -1;
 80060fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8006102:	4618      	mov	r0, r3
 8006104:	370c      	adds	r7, #12
 8006106:	46bd      	mov	sp, r7
 8006108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610c:	4770      	bx	lr

0800610e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800610e:	b480      	push	{r7}
 8006110:	b083      	sub	sp, #12
 8006112:	af00      	add	r7, sp, #0
 8006114:	6078      	str	r0, [r7, #4]
 8006116:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800611e:	605a      	str	r2, [r3, #4]
	return 0;
 8006120:	2300      	movs	r3, #0
}
 8006122:	4618      	mov	r0, r3
 8006124:	370c      	adds	r7, #12
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr

0800612e <_isatty>:

int _isatty(int file)
{
 800612e:	b480      	push	{r7}
 8006130:	b083      	sub	sp, #12
 8006132:	af00      	add	r7, sp, #0
 8006134:	6078      	str	r0, [r7, #4]
	return 1;
 8006136:	2301      	movs	r3, #1
}
 8006138:	4618      	mov	r0, r3
 800613a:	370c      	adds	r7, #12
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr

08006144 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006144:	b480      	push	{r7}
 8006146:	b085      	sub	sp, #20
 8006148:	af00      	add	r7, sp, #0
 800614a:	60f8      	str	r0, [r7, #12]
 800614c:	60b9      	str	r1, [r7, #8]
 800614e:	607a      	str	r2, [r7, #4]
	return 0;
 8006150:	2300      	movs	r3, #0
}
 8006152:	4618      	mov	r0, r3
 8006154:	3714      	adds	r7, #20
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr
	...

08006160 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b084      	sub	sp, #16
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8006168:	4b11      	ldr	r3, [pc, #68]	; (80061b0 <_sbrk+0x50>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d102      	bne.n	8006176 <_sbrk+0x16>
		heap_end = &end;
 8006170:	4b0f      	ldr	r3, [pc, #60]	; (80061b0 <_sbrk+0x50>)
 8006172:	4a10      	ldr	r2, [pc, #64]	; (80061b4 <_sbrk+0x54>)
 8006174:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8006176:	4b0e      	ldr	r3, [pc, #56]	; (80061b0 <_sbrk+0x50>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800617c:	4b0c      	ldr	r3, [pc, #48]	; (80061b0 <_sbrk+0x50>)
 800617e:	681a      	ldr	r2, [r3, #0]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	4413      	add	r3, r2
 8006184:	466a      	mov	r2, sp
 8006186:	4293      	cmp	r3, r2
 8006188:	d907      	bls.n	800619a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800618a:	f005 fc9f 	bl	800bacc <__errno>
 800618e:	4602      	mov	r2, r0
 8006190:	230c      	movs	r3, #12
 8006192:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8006194:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006198:	e006      	b.n	80061a8 <_sbrk+0x48>
	}

	heap_end += incr;
 800619a:	4b05      	ldr	r3, [pc, #20]	; (80061b0 <_sbrk+0x50>)
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	4413      	add	r3, r2
 80061a2:	4a03      	ldr	r2, [pc, #12]	; (80061b0 <_sbrk+0x50>)
 80061a4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80061a6:	68fb      	ldr	r3, [r7, #12]
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3710      	adds	r7, #16
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}
 80061b0:	20000224 	.word	0x20000224
 80061b4:	200005c8 	.word	0x200005c8

080061b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80061b8:	b480      	push	{r7}
 80061ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80061bc:	4b08      	ldr	r3, [pc, #32]	; (80061e0 <SystemInit+0x28>)
 80061be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061c2:	4a07      	ldr	r2, [pc, #28]	; (80061e0 <SystemInit+0x28>)
 80061c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80061c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80061cc:	4b04      	ldr	r3, [pc, #16]	; (80061e0 <SystemInit+0x28>)
 80061ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80061d2:	609a      	str	r2, [r3, #8]
#endif
}
 80061d4:	bf00      	nop
 80061d6:	46bd      	mov	sp, r7
 80061d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061dc:	4770      	bx	lr
 80061de:	bf00      	nop
 80061e0:	e000ed00 	.word	0xe000ed00

080061e4 <__NVIC_GetPriorityGrouping>:
{
 80061e4:	b480      	push	{r7}
 80061e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80061e8:	4b04      	ldr	r3, [pc, #16]	; (80061fc <__NVIC_GetPriorityGrouping+0x18>)
 80061ea:	68db      	ldr	r3, [r3, #12]
 80061ec:	0a1b      	lsrs	r3, r3, #8
 80061ee:	f003 0307 	and.w	r3, r3, #7
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr
 80061fc:	e000ed00 	.word	0xe000ed00

08006200 <__NVIC_EnableIRQ>:
{
 8006200:	b480      	push	{r7}
 8006202:	b083      	sub	sp, #12
 8006204:	af00      	add	r7, sp, #0
 8006206:	4603      	mov	r3, r0
 8006208:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800620a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800620e:	2b00      	cmp	r3, #0
 8006210:	db0b      	blt.n	800622a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006212:	79fb      	ldrb	r3, [r7, #7]
 8006214:	f003 021f 	and.w	r2, r3, #31
 8006218:	4907      	ldr	r1, [pc, #28]	; (8006238 <__NVIC_EnableIRQ+0x38>)
 800621a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800621e:	095b      	lsrs	r3, r3, #5
 8006220:	2001      	movs	r0, #1
 8006222:	fa00 f202 	lsl.w	r2, r0, r2
 8006226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800622a:	bf00      	nop
 800622c:	370c      	adds	r7, #12
 800622e:	46bd      	mov	sp, r7
 8006230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006234:	4770      	bx	lr
 8006236:	bf00      	nop
 8006238:	e000e100 	.word	0xe000e100

0800623c <__NVIC_SetPriority>:
{
 800623c:	b480      	push	{r7}
 800623e:	b083      	sub	sp, #12
 8006240:	af00      	add	r7, sp, #0
 8006242:	4603      	mov	r3, r0
 8006244:	6039      	str	r1, [r7, #0]
 8006246:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006248:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800624c:	2b00      	cmp	r3, #0
 800624e:	db0a      	blt.n	8006266 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	b2da      	uxtb	r2, r3
 8006254:	490c      	ldr	r1, [pc, #48]	; (8006288 <__NVIC_SetPriority+0x4c>)
 8006256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800625a:	0112      	lsls	r2, r2, #4
 800625c:	b2d2      	uxtb	r2, r2
 800625e:	440b      	add	r3, r1
 8006260:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006264:	e00a      	b.n	800627c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	b2da      	uxtb	r2, r3
 800626a:	4908      	ldr	r1, [pc, #32]	; (800628c <__NVIC_SetPriority+0x50>)
 800626c:	79fb      	ldrb	r3, [r7, #7]
 800626e:	f003 030f 	and.w	r3, r3, #15
 8006272:	3b04      	subs	r3, #4
 8006274:	0112      	lsls	r2, r2, #4
 8006276:	b2d2      	uxtb	r2, r2
 8006278:	440b      	add	r3, r1
 800627a:	761a      	strb	r2, [r3, #24]
}
 800627c:	bf00      	nop
 800627e:	370c      	adds	r7, #12
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr
 8006288:	e000e100 	.word	0xe000e100
 800628c:	e000ed00 	.word	0xe000ed00

08006290 <NVIC_EncodePriority>:
{
 8006290:	b480      	push	{r7}
 8006292:	b089      	sub	sp, #36	; 0x24
 8006294:	af00      	add	r7, sp, #0
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	60b9      	str	r1, [r7, #8]
 800629a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f003 0307 	and.w	r3, r3, #7
 80062a2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80062a4:	69fb      	ldr	r3, [r7, #28]
 80062a6:	f1c3 0307 	rsb	r3, r3, #7
 80062aa:	2b04      	cmp	r3, #4
 80062ac:	bf28      	it	cs
 80062ae:	2304      	movcs	r3, #4
 80062b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80062b2:	69fb      	ldr	r3, [r7, #28]
 80062b4:	3304      	adds	r3, #4
 80062b6:	2b06      	cmp	r3, #6
 80062b8:	d902      	bls.n	80062c0 <NVIC_EncodePriority+0x30>
 80062ba:	69fb      	ldr	r3, [r7, #28]
 80062bc:	3b03      	subs	r3, #3
 80062be:	e000      	b.n	80062c2 <NVIC_EncodePriority+0x32>
 80062c0:	2300      	movs	r3, #0
 80062c2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80062c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80062c8:	69bb      	ldr	r3, [r7, #24]
 80062ca:	fa02 f303 	lsl.w	r3, r2, r3
 80062ce:	43da      	mvns	r2, r3
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	401a      	ands	r2, r3
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80062d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	fa01 f303 	lsl.w	r3, r1, r3
 80062e2:	43d9      	mvns	r1, r3
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80062e8:	4313      	orrs	r3, r2
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3724      	adds	r7, #36	; 0x24
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr

080062f6 <LL_TIM_EnableARRPreload>:
{
 80062f6:	b480      	push	{r7}
 80062f8:	b083      	sub	sp, #12
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	601a      	str	r2, [r3, #0]
}
 800630a:	bf00      	nop
 800630c:	370c      	adds	r7, #12
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr
	...

08006318 <LL_TIM_OC_EnableFast>:
{
 8006318:	b4b0      	push	{r4, r5, r7}
 800631a:	b083      	sub	sp, #12
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	2b01      	cmp	r3, #1
 8006326:	d01c      	beq.n	8006362 <LL_TIM_OC_EnableFast+0x4a>
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	2b04      	cmp	r3, #4
 800632c:	d017      	beq.n	800635e <LL_TIM_OC_EnableFast+0x46>
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	2b10      	cmp	r3, #16
 8006332:	d012      	beq.n	800635a <LL_TIM_OC_EnableFast+0x42>
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	2b40      	cmp	r3, #64	; 0x40
 8006338:	d00d      	beq.n	8006356 <LL_TIM_OC_EnableFast+0x3e>
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006340:	d007      	beq.n	8006352 <LL_TIM_OC_EnableFast+0x3a>
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006348:	d101      	bne.n	800634e <LL_TIM_OC_EnableFast+0x36>
 800634a:	2305      	movs	r3, #5
 800634c:	e00a      	b.n	8006364 <LL_TIM_OC_EnableFast+0x4c>
 800634e:	2306      	movs	r3, #6
 8006350:	e008      	b.n	8006364 <LL_TIM_OC_EnableFast+0x4c>
 8006352:	2304      	movs	r3, #4
 8006354:	e006      	b.n	8006364 <LL_TIM_OC_EnableFast+0x4c>
 8006356:	2303      	movs	r3, #3
 8006358:	e004      	b.n	8006364 <LL_TIM_OC_EnableFast+0x4c>
 800635a:	2302      	movs	r3, #2
 800635c:	e002      	b.n	8006364 <LL_TIM_OC_EnableFast+0x4c>
 800635e:	2301      	movs	r3, #1
 8006360:	e000      	b.n	8006364 <LL_TIM_OC_EnableFast+0x4c>
 8006362:	2300      	movs	r3, #0
 8006364:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	3318      	adds	r3, #24
 800636a:	461a      	mov	r2, r3
 800636c:	4629      	mov	r1, r5
 800636e:	4b09      	ldr	r3, [pc, #36]	; (8006394 <LL_TIM_OC_EnableFast+0x7c>)
 8006370:	5c5b      	ldrb	r3, [r3, r1]
 8006372:	4413      	add	r3, r2
 8006374:	461c      	mov	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8006376:	6822      	ldr	r2, [r4, #0]
 8006378:	4629      	mov	r1, r5
 800637a:	4b07      	ldr	r3, [pc, #28]	; (8006398 <LL_TIM_OC_EnableFast+0x80>)
 800637c:	5c5b      	ldrb	r3, [r3, r1]
 800637e:	4619      	mov	r1, r3
 8006380:	2304      	movs	r3, #4
 8006382:	408b      	lsls	r3, r1
 8006384:	4313      	orrs	r3, r2
 8006386:	6023      	str	r3, [r4, #0]
}
 8006388:	bf00      	nop
 800638a:	370c      	adds	r7, #12
 800638c:	46bd      	mov	sp, r7
 800638e:	bcb0      	pop	{r4, r5, r7}
 8006390:	4770      	bx	lr
 8006392:	bf00      	nop
 8006394:	0800f634 	.word	0x0800f634
 8006398:	0800f63c 	.word	0x0800f63c

0800639c <LL_TIM_OC_EnablePreload>:
{
 800639c:	b4b0      	push	{r4, r5, r7}
 800639e:	b083      	sub	sp, #12
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d01c      	beq.n	80063e6 <LL_TIM_OC_EnablePreload+0x4a>
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	2b04      	cmp	r3, #4
 80063b0:	d017      	beq.n	80063e2 <LL_TIM_OC_EnablePreload+0x46>
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	2b10      	cmp	r3, #16
 80063b6:	d012      	beq.n	80063de <LL_TIM_OC_EnablePreload+0x42>
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	2b40      	cmp	r3, #64	; 0x40
 80063bc:	d00d      	beq.n	80063da <LL_TIM_OC_EnablePreload+0x3e>
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063c4:	d007      	beq.n	80063d6 <LL_TIM_OC_EnablePreload+0x3a>
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063cc:	d101      	bne.n	80063d2 <LL_TIM_OC_EnablePreload+0x36>
 80063ce:	2305      	movs	r3, #5
 80063d0:	e00a      	b.n	80063e8 <LL_TIM_OC_EnablePreload+0x4c>
 80063d2:	2306      	movs	r3, #6
 80063d4:	e008      	b.n	80063e8 <LL_TIM_OC_EnablePreload+0x4c>
 80063d6:	2304      	movs	r3, #4
 80063d8:	e006      	b.n	80063e8 <LL_TIM_OC_EnablePreload+0x4c>
 80063da:	2303      	movs	r3, #3
 80063dc:	e004      	b.n	80063e8 <LL_TIM_OC_EnablePreload+0x4c>
 80063de:	2302      	movs	r3, #2
 80063e0:	e002      	b.n	80063e8 <LL_TIM_OC_EnablePreload+0x4c>
 80063e2:	2301      	movs	r3, #1
 80063e4:	e000      	b.n	80063e8 <LL_TIM_OC_EnablePreload+0x4c>
 80063e6:	2300      	movs	r3, #0
 80063e8:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	3318      	adds	r3, #24
 80063ee:	461a      	mov	r2, r3
 80063f0:	4629      	mov	r1, r5
 80063f2:	4b09      	ldr	r3, [pc, #36]	; (8006418 <LL_TIM_OC_EnablePreload+0x7c>)
 80063f4:	5c5b      	ldrb	r3, [r3, r1]
 80063f6:	4413      	add	r3, r2
 80063f8:	461c      	mov	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80063fa:	6822      	ldr	r2, [r4, #0]
 80063fc:	4629      	mov	r1, r5
 80063fe:	4b07      	ldr	r3, [pc, #28]	; (800641c <LL_TIM_OC_EnablePreload+0x80>)
 8006400:	5c5b      	ldrb	r3, [r3, r1]
 8006402:	4619      	mov	r1, r3
 8006404:	2308      	movs	r3, #8
 8006406:	408b      	lsls	r3, r1
 8006408:	4313      	orrs	r3, r2
 800640a:	6023      	str	r3, [r4, #0]
}
 800640c:	bf00      	nop
 800640e:	370c      	adds	r7, #12
 8006410:	46bd      	mov	sp, r7
 8006412:	bcb0      	pop	{r4, r5, r7}
 8006414:	4770      	bx	lr
 8006416:	bf00      	nop
 8006418:	0800f634 	.word	0x0800f634
 800641c:	0800f63c 	.word	0x0800f63c

08006420 <LL_TIM_SetClockSource>:
{
 8006420:	b480      	push	{r7}
 8006422:	b083      	sub	sp, #12
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006432:	f023 0307 	bic.w	r3, r3, #7
 8006436:	683a      	ldr	r2, [r7, #0]
 8006438:	431a      	orrs	r2, r3
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	609a      	str	r2, [r3, #8]
}
 800643e:	bf00      	nop
 8006440:	370c      	adds	r7, #12
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr

0800644a <LL_TIM_SetTriggerOutput>:
{
 800644a:	b480      	push	{r7}
 800644c:	b083      	sub	sp, #12
 800644e:	af00      	add	r7, sp, #0
 8006450:	6078      	str	r0, [r7, #4]
 8006452:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	431a      	orrs	r2, r3
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	605a      	str	r2, [r3, #4]
}
 8006464:	bf00      	nop
 8006466:	370c      	adds	r7, #12
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr

08006470 <LL_TIM_DisableMasterSlaveMode>:
{
 8006470:	b480      	push	{r7}
 8006472:	b083      	sub	sp, #12
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	689b      	ldr	r3, [r3, #8]
 800647c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	609a      	str	r2, [r3, #8]
}
 8006484:	bf00      	nop
 8006486:	370c      	adds	r7, #12
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr

08006490 <LL_AHB1_GRP1_EnableClock>:
{
 8006490:	b480      	push	{r7}
 8006492:	b085      	sub	sp, #20
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8006498:	4b08      	ldr	r3, [pc, #32]	; (80064bc <LL_AHB1_GRP1_EnableClock+0x2c>)
 800649a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800649c:	4907      	ldr	r1, [pc, #28]	; (80064bc <LL_AHB1_GRP1_EnableClock+0x2c>)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	4313      	orrs	r3, r2
 80064a2:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80064a4:	4b05      	ldr	r3, [pc, #20]	; (80064bc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80064a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	4013      	ands	r3, r2
 80064ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80064ae:	68fb      	ldr	r3, [r7, #12]
}
 80064b0:	bf00      	nop
 80064b2:	3714      	adds	r7, #20
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr
 80064bc:	40023800 	.word	0x40023800

080064c0 <LL_APB1_GRP1_EnableClock>:
{
 80064c0:	b480      	push	{r7}
 80064c2:	b085      	sub	sp, #20
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80064c8:	4b08      	ldr	r3, [pc, #32]	; (80064ec <LL_APB1_GRP1_EnableClock+0x2c>)
 80064ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80064cc:	4907      	ldr	r1, [pc, #28]	; (80064ec <LL_APB1_GRP1_EnableClock+0x2c>)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	4313      	orrs	r3, r2
 80064d2:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80064d4:	4b05      	ldr	r3, [pc, #20]	; (80064ec <LL_APB1_GRP1_EnableClock+0x2c>)
 80064d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	4013      	ands	r3, r2
 80064dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80064de:	68fb      	ldr	r3, [r7, #12]
}
 80064e0:	bf00      	nop
 80064e2:	3714      	adds	r7, #20
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr
 80064ec:	40023800 	.word	0x40023800

080064f0 <MX_TIM3_Init>:

/* USER CODE END 0 */

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b094      	sub	sp, #80	; 0x50
 80064f4:	af00      	add	r7, sp, #0
	LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80064f6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80064fa:	2200      	movs	r2, #0
 80064fc:	601a      	str	r2, [r3, #0]
 80064fe:	605a      	str	r2, [r3, #4]
 8006500:	609a      	str	r2, [r3, #8]
 8006502:	60da      	str	r2, [r3, #12]
 8006504:	611a      	str	r2, [r3, #16]
	LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8006506:	f107 031c 	add.w	r3, r7, #28
 800650a:	2220      	movs	r2, #32
 800650c:	2100      	movs	r1, #0
 800650e:	4618      	mov	r0, r3
 8006510:	f005 fb06 	bl	800bb20 <memset>

	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006514:	1d3b      	adds	r3, r7, #4
 8006516:	2200      	movs	r2, #0
 8006518:	601a      	str	r2, [r3, #0]
 800651a:	605a      	str	r2, [r3, #4]
 800651c:	609a      	str	r2, [r3, #8]
 800651e:	60da      	str	r2, [r3, #12]
 8006520:	611a      	str	r2, [r3, #16]
 8006522:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8006524:	2002      	movs	r0, #2
 8006526:	f7ff ffcb 	bl	80064c0 <LL_APB1_GRP1_EnableClock>

	TIM_InitStruct.Prescaler = 999;
 800652a:	f240 33e7 	movw	r3, #999	; 0x3e7
 800652e:	87bb      	strh	r3, [r7, #60]	; 0x3c
	TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8006530:	2300      	movs	r3, #0
 8006532:	643b      	str	r3, [r7, #64]	; 0x40
	TIM_InitStruct.Autoreload = 20;
 8006534:	2314      	movs	r3, #20
 8006536:	647b      	str	r3, [r7, #68]	; 0x44
	TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8006538:	2300      	movs	r3, #0
 800653a:	64bb      	str	r3, [r7, #72]	; 0x48
	LL_TIM_Init(TIM3, &TIM_InitStruct);
 800653c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006540:	4619      	mov	r1, r3
 8006542:	4820      	ldr	r0, [pc, #128]	; (80065c4 <MX_TIM3_Init+0xd4>)
 8006544:	f004 fdea 	bl	800b11c <LL_TIM_Init>
	LL_TIM_EnableARRPreload(TIM3);
 8006548:	481e      	ldr	r0, [pc, #120]	; (80065c4 <MX_TIM3_Init+0xd4>)
 800654a:	f7ff fed4 	bl	80062f6 <LL_TIM_EnableARRPreload>
	LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH4);
 800654e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006552:	481c      	ldr	r0, [pc, #112]	; (80065c4 <MX_TIM3_Init+0xd4>)
 8006554:	f7ff ff22 	bl	800639c <LL_TIM_OC_EnablePreload>
	TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8006558:	2360      	movs	r3, #96	; 0x60
 800655a:	61fb      	str	r3, [r7, #28]
	TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800655c:	2300      	movs	r3, #0
 800655e:	623b      	str	r3, [r7, #32]
	TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8006560:	2300      	movs	r3, #0
 8006562:	627b      	str	r3, [r7, #36]	; 0x24
	TIM_OC_InitStruct.CompareValue = 10;
 8006564:	230a      	movs	r3, #10
 8006566:	62bb      	str	r3, [r7, #40]	; 0x28
	TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8006568:	2300      	movs	r3, #0
 800656a:	62fb      	str	r3, [r7, #44]	; 0x2c
	LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 800656c:	f107 031c 	add.w	r3, r7, #28
 8006570:	461a      	mov	r2, r3
 8006572:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006576:	4813      	ldr	r0, [pc, #76]	; (80065c4 <MX_TIM3_Init+0xd4>)
 8006578:	f004 fe6a 	bl	800b250 <LL_TIM_OC_Init>
	LL_TIM_OC_EnableFast(TIM3, LL_TIM_CHANNEL_CH4);
 800657c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006580:	4810      	ldr	r0, [pc, #64]	; (80065c4 <MX_TIM3_Init+0xd4>)
 8006582:	f7ff fec9 	bl	8006318 <LL_TIM_OC_EnableFast>
	LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8006586:	2100      	movs	r1, #0
 8006588:	480e      	ldr	r0, [pc, #56]	; (80065c4 <MX_TIM3_Init+0xd4>)
 800658a:	f7ff ff5e 	bl	800644a <LL_TIM_SetTriggerOutput>
	LL_TIM_DisableMasterSlaveMode(TIM3);
 800658e:	480d      	ldr	r0, [pc, #52]	; (80065c4 <MX_TIM3_Init+0xd4>)
 8006590:	f7ff ff6e 	bl	8006470 <LL_TIM_DisableMasterSlaveMode>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8006594:	2002      	movs	r0, #2
 8006596:	f7ff ff7b 	bl	8006490 <LL_AHB1_GRP1_EnableClock>
	/**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4 
	 */
	GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 800659a:	2302      	movs	r3, #2
 800659c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800659e:	2302      	movs	r3, #2
 80065a0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80065a2:	2300      	movs	r3, #0
 80065a4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80065a6:	2300      	movs	r3, #0
 80065a8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80065aa:	2300      	movs	r3, #0
 80065ac:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 80065ae:	2302      	movs	r3, #2
 80065b0:	61bb      	str	r3, [r7, #24]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80065b2:	1d3b      	adds	r3, r7, #4
 80065b4:	4619      	mov	r1, r3
 80065b6:	4804      	ldr	r0, [pc, #16]	; (80065c8 <MX_TIM3_Init+0xd8>)
 80065b8:	f004 fb1d 	bl	800abf6 <LL_GPIO_Init>

}
 80065bc:	bf00      	nop
 80065be:	3750      	adds	r7, #80	; 0x50
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}
 80065c4:	40000400 	.word	0x40000400
 80065c8:	40020400 	.word	0x40020400

080065cc <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b094      	sub	sp, #80	; 0x50
 80065d0:	af00      	add	r7, sp, #0
	LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80065d2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80065d6:	2200      	movs	r2, #0
 80065d8:	601a      	str	r2, [r3, #0]
 80065da:	605a      	str	r2, [r3, #4]
 80065dc:	609a      	str	r2, [r3, #8]
 80065de:	60da      	str	r2, [r3, #12]
 80065e0:	611a      	str	r2, [r3, #16]
	LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80065e2:	f107 031c 	add.w	r3, r7, #28
 80065e6:	2220      	movs	r2, #32
 80065e8:	2100      	movs	r1, #0
 80065ea:	4618      	mov	r0, r3
 80065ec:	f005 fa98 	bl	800bb20 <memset>

	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80065f0:	1d3b      	adds	r3, r7, #4
 80065f2:	2200      	movs	r2, #0
 80065f4:	601a      	str	r2, [r3, #0]
 80065f6:	605a      	str	r2, [r3, #4]
 80065f8:	609a      	str	r2, [r3, #8]
 80065fa:	60da      	str	r2, [r3, #12]
 80065fc:	611a      	str	r2, [r3, #16]
 80065fe:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM5);
 8006600:	2008      	movs	r0, #8
 8006602:	f7ff ff5d 	bl	80064c0 <LL_APB1_GRP1_EnableClock>

	TIM_InitStruct.Prescaler = 0;
 8006606:	2300      	movs	r3, #0
 8006608:	87bb      	strh	r3, [r7, #60]	; 0x3c
	TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800660a:	2300      	movs	r3, #0
 800660c:	643b      	str	r3, [r7, #64]	; 0x40
	TIM_InitStruct.Autoreload = 41999;
 800660e:	f24a 430f 	movw	r3, #41999	; 0xa40f
 8006612:	647b      	str	r3, [r7, #68]	; 0x44
	TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8006614:	2300      	movs	r3, #0
 8006616:	64bb      	str	r3, [r7, #72]	; 0x48
	LL_TIM_Init(TIM5, &TIM_InitStruct);
 8006618:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800661c:	4619      	mov	r1, r3
 800661e:	4840      	ldr	r0, [pc, #256]	; (8006720 <MX_TIM5_Init+0x154>)
 8006620:	f004 fd7c 	bl	800b11c <LL_TIM_Init>
	LL_TIM_EnableARRPreload(TIM5);
 8006624:	483e      	ldr	r0, [pc, #248]	; (8006720 <MX_TIM5_Init+0x154>)
 8006626:	f7ff fe66 	bl	80062f6 <LL_TIM_EnableARRPreload>
	LL_TIM_SetClockSource(TIM5, LL_TIM_CLOCKSOURCE_INTERNAL);
 800662a:	2100      	movs	r1, #0
 800662c:	483c      	ldr	r0, [pc, #240]	; (8006720 <MX_TIM5_Init+0x154>)
 800662e:	f7ff fef7 	bl	8006420 <LL_TIM_SetClockSource>
	LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH1);
 8006632:	2101      	movs	r1, #1
 8006634:	483a      	ldr	r0, [pc, #232]	; (8006720 <MX_TIM5_Init+0x154>)
 8006636:	f7ff feb1 	bl	800639c <LL_TIM_OC_EnablePreload>
	TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 800663a:	2360      	movs	r3, #96	; 0x60
 800663c:	61fb      	str	r3, [r7, #28]
	TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800663e:	2300      	movs	r3, #0
 8006640:	623b      	str	r3, [r7, #32]
	TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8006642:	2300      	movs	r3, #0
 8006644:	627b      	str	r3, [r7, #36]	; 0x24
	TIM_OC_InitStruct.CompareValue = 0;
 8006646:	2300      	movs	r3, #0
 8006648:	62bb      	str	r3, [r7, #40]	; 0x28
	TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 800664a:	2300      	movs	r3, #0
 800664c:	62fb      	str	r3, [r7, #44]	; 0x2c
	LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 800664e:	f107 031c 	add.w	r3, r7, #28
 8006652:	461a      	mov	r2, r3
 8006654:	2101      	movs	r1, #1
 8006656:	4832      	ldr	r0, [pc, #200]	; (8006720 <MX_TIM5_Init+0x154>)
 8006658:	f004 fdfa 	bl	800b250 <LL_TIM_OC_Init>
	LL_TIM_OC_EnableFast(TIM5, LL_TIM_CHANNEL_CH1);
 800665c:	2101      	movs	r1, #1
 800665e:	4830      	ldr	r0, [pc, #192]	; (8006720 <MX_TIM5_Init+0x154>)
 8006660:	f7ff fe5a 	bl	8006318 <LL_TIM_OC_EnableFast>
	LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH2);
 8006664:	2110      	movs	r1, #16
 8006666:	482e      	ldr	r0, [pc, #184]	; (8006720 <MX_TIM5_Init+0x154>)
 8006668:	f7ff fe98 	bl	800639c <LL_TIM_OC_EnablePreload>
	TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800666c:	2300      	movs	r3, #0
 800666e:	623b      	str	r3, [r7, #32]
	TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8006670:	2300      	movs	r3, #0
 8006672:	627b      	str	r3, [r7, #36]	; 0x24
	LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8006674:	f107 031c 	add.w	r3, r7, #28
 8006678:	461a      	mov	r2, r3
 800667a:	2110      	movs	r1, #16
 800667c:	4828      	ldr	r0, [pc, #160]	; (8006720 <MX_TIM5_Init+0x154>)
 800667e:	f004 fde7 	bl	800b250 <LL_TIM_OC_Init>
	LL_TIM_OC_EnableFast(TIM5, LL_TIM_CHANNEL_CH2);
 8006682:	2110      	movs	r1, #16
 8006684:	4826      	ldr	r0, [pc, #152]	; (8006720 <MX_TIM5_Init+0x154>)
 8006686:	f7ff fe47 	bl	8006318 <LL_TIM_OC_EnableFast>
	LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH3);
 800668a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800668e:	4824      	ldr	r0, [pc, #144]	; (8006720 <MX_TIM5_Init+0x154>)
 8006690:	f7ff fe84 	bl	800639c <LL_TIM_OC_EnablePreload>
	TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8006694:	2300      	movs	r3, #0
 8006696:	623b      	str	r3, [r7, #32]
	TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8006698:	2300      	movs	r3, #0
 800669a:	627b      	str	r3, [r7, #36]	; 0x24
	LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 800669c:	f107 031c 	add.w	r3, r7, #28
 80066a0:	461a      	mov	r2, r3
 80066a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80066a6:	481e      	ldr	r0, [pc, #120]	; (8006720 <MX_TIM5_Init+0x154>)
 80066a8:	f004 fdd2 	bl	800b250 <LL_TIM_OC_Init>
	LL_TIM_OC_EnableFast(TIM5, LL_TIM_CHANNEL_CH3);
 80066ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80066b0:	481b      	ldr	r0, [pc, #108]	; (8006720 <MX_TIM5_Init+0x154>)
 80066b2:	f7ff fe31 	bl	8006318 <LL_TIM_OC_EnableFast>
	LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH4);
 80066b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80066ba:	4819      	ldr	r0, [pc, #100]	; (8006720 <MX_TIM5_Init+0x154>)
 80066bc:	f7ff fe6e 	bl	800639c <LL_TIM_OC_EnablePreload>
	TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80066c0:	2300      	movs	r3, #0
 80066c2:	623b      	str	r3, [r7, #32]
	TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80066c4:	2300      	movs	r3, #0
 80066c6:	627b      	str	r3, [r7, #36]	; 0x24
	LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 80066c8:	f107 031c 	add.w	r3, r7, #28
 80066cc:	461a      	mov	r2, r3
 80066ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80066d2:	4813      	ldr	r0, [pc, #76]	; (8006720 <MX_TIM5_Init+0x154>)
 80066d4:	f004 fdbc 	bl	800b250 <LL_TIM_OC_Init>
	LL_TIM_OC_EnableFast(TIM5, LL_TIM_CHANNEL_CH4);
 80066d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80066dc:	4810      	ldr	r0, [pc, #64]	; (8006720 <MX_TIM5_Init+0x154>)
 80066de:	f7ff fe1b 	bl	8006318 <LL_TIM_OC_EnableFast>
	LL_TIM_SetTriggerOutput(TIM5, LL_TIM_TRGO_RESET);
 80066e2:	2100      	movs	r1, #0
 80066e4:	480e      	ldr	r0, [pc, #56]	; (8006720 <MX_TIM5_Init+0x154>)
 80066e6:	f7ff feb0 	bl	800644a <LL_TIM_SetTriggerOutput>
	LL_TIM_DisableMasterSlaveMode(TIM5);
 80066ea:	480d      	ldr	r0, [pc, #52]	; (8006720 <MX_TIM5_Init+0x154>)
 80066ec:	f7ff fec0 	bl	8006470 <LL_TIM_DisableMasterSlaveMode>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80066f0:	2001      	movs	r0, #1
 80066f2:	f7ff fecd 	bl	8006490 <LL_AHB1_GRP1_EnableClock>
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    PA2     ------> TIM5_CH3
    PA3     ------> TIM5_CH4 
	 */
	GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 80066f6:	230f      	movs	r3, #15
 80066f8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80066fa:	2302      	movs	r3, #2
 80066fc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80066fe:	2300      	movs	r3, #0
 8006700:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006702:	2300      	movs	r3, #0
 8006704:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006706:	2300      	movs	r3, #0
 8006708:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 800670a:	2302      	movs	r3, #2
 800670c:	61bb      	str	r3, [r7, #24]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800670e:	1d3b      	adds	r3, r7, #4
 8006710:	4619      	mov	r1, r3
 8006712:	4804      	ldr	r0, [pc, #16]	; (8006724 <MX_TIM5_Init+0x158>)
 8006714:	f004 fa6f 	bl	800abf6 <LL_GPIO_Init>

}
 8006718:	bf00      	nop
 800671a:	3750      	adds	r7, #80	; 0x50
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}
 8006720:	40000c00 	.word	0x40000c00
 8006724:	40020000 	.word	0x40020000

08006728 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b086      	sub	sp, #24
 800672c:	af00      	add	r7, sp, #0
	LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800672e:	1d3b      	adds	r3, r7, #4
 8006730:	2200      	movs	r2, #0
 8006732:	601a      	str	r2, [r3, #0]
 8006734:	605a      	str	r2, [r3, #4]
 8006736:	609a      	str	r2, [r3, #8]
 8006738:	60da      	str	r2, [r3, #12]
 800673a:	611a      	str	r2, [r3, #16]

	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM7);
 800673c:	2020      	movs	r0, #32
 800673e:	f7ff febf 	bl	80064c0 <LL_APB1_GRP1_EnableClock>

	/* TIM7 interrupt Init */
	NVIC_SetPriority(TIM7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8006742:	f7ff fd4f 	bl	80061e4 <__NVIC_GetPriorityGrouping>
 8006746:	4603      	mov	r3, r0
 8006748:	2200      	movs	r2, #0
 800674a:	2100      	movs	r1, #0
 800674c:	4618      	mov	r0, r3
 800674e:	f7ff fd9f 	bl	8006290 <NVIC_EncodePriority>
 8006752:	4603      	mov	r3, r0
 8006754:	4619      	mov	r1, r3
 8006756:	2037      	movs	r0, #55	; 0x37
 8006758:	f7ff fd70 	bl	800623c <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM7_IRQn);
 800675c:	2037      	movs	r0, #55	; 0x37
 800675e:	f7ff fd4f 	bl	8006200 <__NVIC_EnableIRQ>

	TIM_InitStruct.Prescaler = 41999;
 8006762:	f24a 430f 	movw	r3, #41999	; 0xa40f
 8006766:	80bb      	strh	r3, [r7, #4]
	TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8006768:	2300      	movs	r3, #0
 800676a:	60bb      	str	r3, [r7, #8]
	TIM_InitStruct.Autoreload = 1;
 800676c:	2301      	movs	r3, #1
 800676e:	60fb      	str	r3, [r7, #12]
	LL_TIM_Init(TIM7, &TIM_InitStruct);
 8006770:	1d3b      	adds	r3, r7, #4
 8006772:	4619      	mov	r1, r3
 8006774:	4808      	ldr	r0, [pc, #32]	; (8006798 <MX_TIM7_Init+0x70>)
 8006776:	f004 fcd1 	bl	800b11c <LL_TIM_Init>
	LL_TIM_EnableARRPreload(TIM7);
 800677a:	4807      	ldr	r0, [pc, #28]	; (8006798 <MX_TIM7_Init+0x70>)
 800677c:	f7ff fdbb 	bl	80062f6 <LL_TIM_EnableARRPreload>
	LL_TIM_SetTriggerOutput(TIM7, LL_TIM_TRGO_RESET);
 8006780:	2100      	movs	r1, #0
 8006782:	4805      	ldr	r0, [pc, #20]	; (8006798 <MX_TIM7_Init+0x70>)
 8006784:	f7ff fe61 	bl	800644a <LL_TIM_SetTriggerOutput>
	LL_TIM_DisableMasterSlaveMode(TIM7);
 8006788:	4803      	ldr	r0, [pc, #12]	; (8006798 <MX_TIM7_Init+0x70>)
 800678a:	f7ff fe71 	bl	8006470 <LL_TIM_DisableMasterSlaveMode>

}
 800678e:	bf00      	nop
 8006790:	3718      	adds	r7, #24
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}
 8006796:	bf00      	nop
 8006798:	40001400 	.word	0x40001400

0800679c <__NVIC_GetPriorityGrouping>:
{
 800679c:	b480      	push	{r7}
 800679e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80067a0:	4b04      	ldr	r3, [pc, #16]	; (80067b4 <__NVIC_GetPriorityGrouping+0x18>)
 80067a2:	68db      	ldr	r3, [r3, #12]
 80067a4:	0a1b      	lsrs	r3, r3, #8
 80067a6:	f003 0307 	and.w	r3, r3, #7
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr
 80067b4:	e000ed00 	.word	0xe000ed00

080067b8 <__NVIC_EnableIRQ>:
{
 80067b8:	b480      	push	{r7}
 80067ba:	b083      	sub	sp, #12
 80067bc:	af00      	add	r7, sp, #0
 80067be:	4603      	mov	r3, r0
 80067c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80067c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	db0b      	blt.n	80067e2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80067ca:	79fb      	ldrb	r3, [r7, #7]
 80067cc:	f003 021f 	and.w	r2, r3, #31
 80067d0:	4907      	ldr	r1, [pc, #28]	; (80067f0 <__NVIC_EnableIRQ+0x38>)
 80067d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067d6:	095b      	lsrs	r3, r3, #5
 80067d8:	2001      	movs	r0, #1
 80067da:	fa00 f202 	lsl.w	r2, r0, r2
 80067de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80067e2:	bf00      	nop
 80067e4:	370c      	adds	r7, #12
 80067e6:	46bd      	mov	sp, r7
 80067e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ec:	4770      	bx	lr
 80067ee:	bf00      	nop
 80067f0:	e000e100 	.word	0xe000e100

080067f4 <__NVIC_SetPriority>:
{
 80067f4:	b480      	push	{r7}
 80067f6:	b083      	sub	sp, #12
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	4603      	mov	r3, r0
 80067fc:	6039      	str	r1, [r7, #0]
 80067fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006804:	2b00      	cmp	r3, #0
 8006806:	db0a      	blt.n	800681e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	b2da      	uxtb	r2, r3
 800680c:	490c      	ldr	r1, [pc, #48]	; (8006840 <__NVIC_SetPriority+0x4c>)
 800680e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006812:	0112      	lsls	r2, r2, #4
 8006814:	b2d2      	uxtb	r2, r2
 8006816:	440b      	add	r3, r1
 8006818:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800681c:	e00a      	b.n	8006834 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	b2da      	uxtb	r2, r3
 8006822:	4908      	ldr	r1, [pc, #32]	; (8006844 <__NVIC_SetPriority+0x50>)
 8006824:	79fb      	ldrb	r3, [r7, #7]
 8006826:	f003 030f 	and.w	r3, r3, #15
 800682a:	3b04      	subs	r3, #4
 800682c:	0112      	lsls	r2, r2, #4
 800682e:	b2d2      	uxtb	r2, r2
 8006830:	440b      	add	r3, r1
 8006832:	761a      	strb	r2, [r3, #24]
}
 8006834:	bf00      	nop
 8006836:	370c      	adds	r7, #12
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr
 8006840:	e000e100 	.word	0xe000e100
 8006844:	e000ed00 	.word	0xe000ed00

08006848 <NVIC_EncodePriority>:
{
 8006848:	b480      	push	{r7}
 800684a:	b089      	sub	sp, #36	; 0x24
 800684c:	af00      	add	r7, sp, #0
 800684e:	60f8      	str	r0, [r7, #12]
 8006850:	60b9      	str	r1, [r7, #8]
 8006852:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f003 0307 	and.w	r3, r3, #7
 800685a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800685c:	69fb      	ldr	r3, [r7, #28]
 800685e:	f1c3 0307 	rsb	r3, r3, #7
 8006862:	2b04      	cmp	r3, #4
 8006864:	bf28      	it	cs
 8006866:	2304      	movcs	r3, #4
 8006868:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800686a:	69fb      	ldr	r3, [r7, #28]
 800686c:	3304      	adds	r3, #4
 800686e:	2b06      	cmp	r3, #6
 8006870:	d902      	bls.n	8006878 <NVIC_EncodePriority+0x30>
 8006872:	69fb      	ldr	r3, [r7, #28]
 8006874:	3b03      	subs	r3, #3
 8006876:	e000      	b.n	800687a <NVIC_EncodePriority+0x32>
 8006878:	2300      	movs	r3, #0
 800687a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800687c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006880:	69bb      	ldr	r3, [r7, #24]
 8006882:	fa02 f303 	lsl.w	r3, r2, r3
 8006886:	43da      	mvns	r2, r3
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	401a      	ands	r2, r3
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006890:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	fa01 f303 	lsl.w	r3, r1, r3
 800689a:	43d9      	mvns	r1, r3
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80068a0:	4313      	orrs	r3, r2
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3724      	adds	r7, #36	; 0x24
 80068a6:	46bd      	mov	sp, r7
 80068a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ac:	4770      	bx	lr

080068ae <LL_USART_Enable>:
{
 80068ae:	b480      	push	{r7}
 80068b0:	b083      	sub	sp, #12
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	68db      	ldr	r3, [r3, #12]
 80068ba:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	60da      	str	r2, [r3, #12]
}
 80068c2:	bf00      	nop
 80068c4:	370c      	adds	r7, #12
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr

080068ce <LL_USART_ConfigAsyncMode>:
{
 80068ce:	b480      	push	{r7}
 80068d0:	b083      	sub	sp, #12
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	691b      	ldr	r3, [r3, #16]
 80068da:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	695b      	ldr	r3, [r3, #20]
 80068e6:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	615a      	str	r2, [r3, #20]
}
 80068ee:	bf00      	nop
 80068f0:	370c      	adds	r7, #12
 80068f2:	46bd      	mov	sp, r7
 80068f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f8:	4770      	bx	lr
	...

080068fc <LL_AHB1_GRP1_EnableClock>:
{
 80068fc:	b480      	push	{r7}
 80068fe:	b085      	sub	sp, #20
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8006904:	4b08      	ldr	r3, [pc, #32]	; (8006928 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8006906:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006908:	4907      	ldr	r1, [pc, #28]	; (8006928 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	4313      	orrs	r3, r2
 800690e:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8006910:	4b05      	ldr	r3, [pc, #20]	; (8006928 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8006912:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	4013      	ands	r3, r2
 8006918:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800691a:	68fb      	ldr	r3, [r7, #12]
}
 800691c:	bf00      	nop
 800691e:	3714      	adds	r7, #20
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr
 8006928:	40023800 	.word	0x40023800

0800692c <LL_APB1_GRP1_EnableClock>:
{
 800692c:	b480      	push	{r7}
 800692e:	b085      	sub	sp, #20
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8006934:	4b08      	ldr	r3, [pc, #32]	; (8006958 <LL_APB1_GRP1_EnableClock+0x2c>)
 8006936:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006938:	4907      	ldr	r1, [pc, #28]	; (8006958 <LL_APB1_GRP1_EnableClock+0x2c>)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	4313      	orrs	r3, r2
 800693e:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8006940:	4b05      	ldr	r3, [pc, #20]	; (8006958 <LL_APB1_GRP1_EnableClock+0x2c>)
 8006942:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	4013      	ands	r3, r2
 8006948:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800694a:	68fb      	ldr	r3, [r7, #12]
}
 800694c:	bf00      	nop
 800694e:	3714      	adds	r7, #20
 8006950:	46bd      	mov	sp, r7
 8006952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006956:	4770      	bx	lr
 8006958:	40023800 	.word	0x40023800

0800695c <LL_APB2_GRP1_EnableClock>:
{
 800695c:	b480      	push	{r7}
 800695e:	b085      	sub	sp, #20
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8006964:	4b08      	ldr	r3, [pc, #32]	; (8006988 <LL_APB2_GRP1_EnableClock+0x2c>)
 8006966:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006968:	4907      	ldr	r1, [pc, #28]	; (8006988 <LL_APB2_GRP1_EnableClock+0x2c>)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	4313      	orrs	r3, r2
 800696e:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8006970:	4b05      	ldr	r3, [pc, #20]	; (8006988 <LL_APB2_GRP1_EnableClock+0x2c>)
 8006972:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	4013      	ands	r3, r2
 8006978:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800697a:	68fb      	ldr	r3, [r7, #12]
}
 800697c:	bf00      	nop
 800697e:	3714      	adds	r7, #20
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr
 8006988:	40023800 	.word	0x40023800

0800698c <MX_UART4_Init>:

UART_HandleTypeDef huart1;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b08e      	sub	sp, #56	; 0x38
 8006990:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8006992:	f107 031c 	add.w	r3, r7, #28
 8006996:	2200      	movs	r2, #0
 8006998:	601a      	str	r2, [r3, #0]
 800699a:	605a      	str	r2, [r3, #4]
 800699c:	609a      	str	r2, [r3, #8]
 800699e:	60da      	str	r2, [r3, #12]
 80069a0:	611a      	str	r2, [r3, #16]
 80069a2:	615a      	str	r2, [r3, #20]
 80069a4:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80069a6:	1d3b      	adds	r3, r7, #4
 80069a8:	2200      	movs	r2, #0
 80069aa:	601a      	str	r2, [r3, #0]
 80069ac:	605a      	str	r2, [r3, #4]
 80069ae:	609a      	str	r2, [r3, #8]
 80069b0:	60da      	str	r2, [r3, #12]
 80069b2:	611a      	str	r2, [r3, #16]
 80069b4:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 80069b6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80069ba:	f7ff ffb7 	bl	800692c <LL_APB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80069be:	2004      	movs	r0, #4
 80069c0:	f7ff ff9c 	bl	80068fc <LL_AHB1_GRP1_EnableClock>
  /**UART4 GPIO Configuration  
  PC10   ------> UART4_TX
  PC11   ------> UART4_RX 
  */
  GPIO_InitStruct.Pin = M8N_TX4_Pin|M8N_RX4_Pin;
 80069c4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80069c8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80069ca:	2302      	movs	r3, #2
 80069cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80069ce:	2303      	movs	r3, #3
 80069d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80069d2:	2300      	movs	r3, #0
 80069d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80069d6:	2301      	movs	r3, #1
 80069d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80069da:	2308      	movs	r3, #8
 80069dc:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80069de:	1d3b      	adds	r3, r7, #4
 80069e0:	4619      	mov	r1, r3
 80069e2:	4819      	ldr	r0, [pc, #100]	; (8006a48 <MX_UART4_Init+0xbc>)
 80069e4:	f004 f907 	bl	800abf6 <LL_GPIO_Init>

  /* UART4 interrupt Init */
  NVIC_SetPriority(UART4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80069e8:	f7ff fed8 	bl	800679c <__NVIC_GetPriorityGrouping>
 80069ec:	4603      	mov	r3, r0
 80069ee:	2200      	movs	r2, #0
 80069f0:	2100      	movs	r1, #0
 80069f2:	4618      	mov	r0, r3
 80069f4:	f7ff ff28 	bl	8006848 <NVIC_EncodePriority>
 80069f8:	4603      	mov	r3, r0
 80069fa:	4619      	mov	r1, r3
 80069fc:	2034      	movs	r0, #52	; 0x34
 80069fe:	f7ff fef9 	bl	80067f4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART4_IRQn);
 8006a02:	2034      	movs	r0, #52	; 0x34
 8006a04:	f7ff fed8 	bl	80067b8 <__NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 9600;
 8006a08:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8006a0c:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8006a12:	2300      	movs	r3, #0
 8006a14:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8006a16:	2300      	movs	r3, #0
 8006a18:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8006a1a:	230c      	movs	r3, #12
 8006a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8006a22:	2300      	movs	r3, #0
 8006a24:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(UART4, &USART_InitStruct);
 8006a26:	f107 031c 	add.w	r3, r7, #28
 8006a2a:	4619      	mov	r1, r3
 8006a2c:	4807      	ldr	r0, [pc, #28]	; (8006a4c <MX_UART4_Init+0xc0>)
 8006a2e:	f004 ffcd 	bl	800b9cc <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART4);
 8006a32:	4806      	ldr	r0, [pc, #24]	; (8006a4c <MX_UART4_Init+0xc0>)
 8006a34:	f7ff ff4b 	bl	80068ce <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART4);
 8006a38:	4804      	ldr	r0, [pc, #16]	; (8006a4c <MX_UART4_Init+0xc0>)
 8006a3a:	f7ff ff38 	bl	80068ae <LL_USART_Enable>

}
 8006a3e:	bf00      	nop
 8006a40:	3738      	adds	r7, #56	; 0x38
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}
 8006a46:	bf00      	nop
 8006a48:	40020800 	.word	0x40020800
 8006a4c:	40004c00 	.word	0x40004c00

08006a50 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b08e      	sub	sp, #56	; 0x38
 8006a54:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8006a56:	f107 031c 	add.w	r3, r7, #28
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	601a      	str	r2, [r3, #0]
 8006a5e:	605a      	str	r2, [r3, #4]
 8006a60:	609a      	str	r2, [r3, #8]
 8006a62:	60da      	str	r2, [r3, #12]
 8006a64:	611a      	str	r2, [r3, #16]
 8006a66:	615a      	str	r2, [r3, #20]
 8006a68:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a6a:	1d3b      	adds	r3, r7, #4
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	601a      	str	r2, [r3, #0]
 8006a70:	605a      	str	r2, [r3, #4]
 8006a72:	609a      	str	r2, [r3, #8]
 8006a74:	60da      	str	r2, [r3, #12]
 8006a76:	611a      	str	r2, [r3, #16]
 8006a78:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART5);
 8006a7a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8006a7e:	f7ff ff55 	bl	800692c <LL_APB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8006a82:	2004      	movs	r0, #4
 8006a84:	f7ff ff3a 	bl	80068fc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8006a88:	2008      	movs	r0, #8
 8006a8a:	f7ff ff37 	bl	80068fc <LL_AHB1_GRP1_EnableClock>
  /**UART5 GPIO Configuration  
  PC12   ------> UART5_TX
  PD2   ------> UART5_RX 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 8006a8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006a92:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8006a94:	2302      	movs	r3, #2
 8006a96:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8006a98:	2303      	movs	r3, #3
 8006a9a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8006aa4:	2308      	movs	r3, #8
 8006aa6:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006aa8:	1d3b      	adds	r3, r7, #4
 8006aaa:	4619      	mov	r1, r3
 8006aac:	4821      	ldr	r0, [pc, #132]	; (8006b34 <MX_UART5_Init+0xe4>)
 8006aae:	f004 f8a2 	bl	800abf6 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8006ab2:	2304      	movs	r3, #4
 8006ab4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8006ab6:	2302      	movs	r3, #2
 8006ab8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8006aba:	2303      	movs	r3, #3
 8006abc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8006ac6:	2308      	movs	r3, #8
 8006ac8:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006aca:	1d3b      	adds	r3, r7, #4
 8006acc:	4619      	mov	r1, r3
 8006ace:	481a      	ldr	r0, [pc, #104]	; (8006b38 <MX_UART5_Init+0xe8>)
 8006ad0:	f004 f891 	bl	800abf6 <LL_GPIO_Init>

  /* UART5 interrupt Init */
  NVIC_SetPriority(UART5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8006ad4:	f7ff fe62 	bl	800679c <__NVIC_GetPriorityGrouping>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	2200      	movs	r2, #0
 8006adc:	2100      	movs	r1, #0
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f7ff feb2 	bl	8006848 <NVIC_EncodePriority>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	4619      	mov	r1, r3
 8006ae8:	2035      	movs	r0, #53	; 0x35
 8006aea:	f7ff fe83 	bl	80067f4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART5_IRQn);
 8006aee:	2035      	movs	r0, #53	; 0x35
 8006af0:	f7ff fe62 	bl	80067b8 <__NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 115200;
 8006af4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8006af8:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8006afa:	2300      	movs	r3, #0
 8006afc:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8006afe:	2300      	movs	r3, #0
 8006b00:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8006b02:	2300      	movs	r3, #0
 8006b04:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_RX;
 8006b06:	2304      	movs	r3, #4
 8006b08:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(UART5, &USART_InitStruct);
 8006b12:	f107 031c 	add.w	r3, r7, #28
 8006b16:	4619      	mov	r1, r3
 8006b18:	4808      	ldr	r0, [pc, #32]	; (8006b3c <MX_UART5_Init+0xec>)
 8006b1a:	f004 ff57 	bl	800b9cc <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART5);
 8006b1e:	4807      	ldr	r0, [pc, #28]	; (8006b3c <MX_UART5_Init+0xec>)
 8006b20:	f7ff fed5 	bl	80068ce <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART5);
 8006b24:	4805      	ldr	r0, [pc, #20]	; (8006b3c <MX_UART5_Init+0xec>)
 8006b26:	f7ff fec2 	bl	80068ae <LL_USART_Enable>

}
 8006b2a:	bf00      	nop
 8006b2c:	3738      	adds	r7, #56	; 0x38
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}
 8006b32:	bf00      	nop
 8006b34:	40020800 	.word	0x40020800
 8006b38:	40020c00 	.word	0x40020c00
 8006b3c:	40005000 	.word	0x40005000

08006b40 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8006b44:	4b11      	ldr	r3, [pc, #68]	; (8006b8c <MX_USART1_UART_Init+0x4c>)
 8006b46:	4a12      	ldr	r2, [pc, #72]	; (8006b90 <MX_USART1_UART_Init+0x50>)
 8006b48:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8006b4a:	4b10      	ldr	r3, [pc, #64]	; (8006b8c <MX_USART1_UART_Init+0x4c>)
 8006b4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006b50:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006b52:	4b0e      	ldr	r3, [pc, #56]	; (8006b8c <MX_USART1_UART_Init+0x4c>)
 8006b54:	2200      	movs	r2, #0
 8006b56:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006b58:	4b0c      	ldr	r3, [pc, #48]	; (8006b8c <MX_USART1_UART_Init+0x4c>)
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006b5e:	4b0b      	ldr	r3, [pc, #44]	; (8006b8c <MX_USART1_UART_Init+0x4c>)
 8006b60:	2200      	movs	r2, #0
 8006b62:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006b64:	4b09      	ldr	r3, [pc, #36]	; (8006b8c <MX_USART1_UART_Init+0x4c>)
 8006b66:	220c      	movs	r2, #12
 8006b68:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006b6a:	4b08      	ldr	r3, [pc, #32]	; (8006b8c <MX_USART1_UART_Init+0x4c>)
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006b70:	4b06      	ldr	r3, [pc, #24]	; (8006b8c <MX_USART1_UART_Init+0x4c>)
 8006b72:	2200      	movs	r2, #0
 8006b74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006b76:	4805      	ldr	r0, [pc, #20]	; (8006b8c <MX_USART1_UART_Init+0x4c>)
 8006b78:	f002 ffbc 	bl	8009af4 <HAL_UART_Init>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d001      	beq.n	8006b86 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8006b82:	f7fe ff25 	bl	80059d0 <Error_Handler>
  }

}
 8006b86:	bf00      	nop
 8006b88:	bd80      	pop	{r7, pc}
 8006b8a:	bf00      	nop
 8006b8c:	20000580 	.word	0x20000580
 8006b90:	40011000 	.word	0x40011000

08006b94 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b08e      	sub	sp, #56	; 0x38
 8006b98:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8006b9a:	f107 031c 	add.w	r3, r7, #28
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	601a      	str	r2, [r3, #0]
 8006ba2:	605a      	str	r2, [r3, #4]
 8006ba4:	609a      	str	r2, [r3, #8]
 8006ba6:	60da      	str	r2, [r3, #12]
 8006ba8:	611a      	str	r2, [r3, #16]
 8006baa:	615a      	str	r2, [r3, #20]
 8006bac:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006bae:	1d3b      	adds	r3, r7, #4
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	601a      	str	r2, [r3, #0]
 8006bb4:	605a      	str	r2, [r3, #4]
 8006bb6:	609a      	str	r2, [r3, #8]
 8006bb8:	60da      	str	r2, [r3, #12]
 8006bba:	611a      	str	r2, [r3, #16]
 8006bbc:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 8006bbe:	2020      	movs	r0, #32
 8006bc0:	f7ff fecc 	bl	800695c <LL_APB2_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8006bc4:	2004      	movs	r0, #4
 8006bc6:	f7ff fe99 	bl	80068fc <LL_AHB1_GRP1_EnableClock>
  /**USART6 GPIO Configuration  
  PC6   ------> USART6_TX
  PC7   ------> USART6_RX 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8006bca:	23c0      	movs	r3, #192	; 0xc0
 8006bcc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8006bce:	2302      	movs	r3, #2
 8006bd0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8006bd2:	2303      	movs	r3, #3
 8006bd4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8006bde:	2308      	movs	r3, #8
 8006be0:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006be2:	1d3b      	adds	r3, r7, #4
 8006be4:	4619      	mov	r1, r3
 8006be6:	4819      	ldr	r0, [pc, #100]	; (8006c4c <MX_USART6_UART_Init+0xb8>)
 8006be8:	f004 f805 	bl	800abf6 <LL_GPIO_Init>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8006bec:	f7ff fdd6 	bl	800679c <__NVIC_GetPriorityGrouping>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	2100      	movs	r1, #0
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f7ff fe26 	bl	8006848 <NVIC_EncodePriority>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	4619      	mov	r1, r3
 8006c00:	2047      	movs	r0, #71	; 0x47
 8006c02:	f7ff fdf7 	bl	80067f4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 8006c06:	2047      	movs	r0, #71	; 0x47
 8006c08:	f7ff fdd6 	bl	80067b8 <__NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 115200;
 8006c0c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8006c10:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8006c12:	2300      	movs	r3, #0
 8006c14:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8006c16:	2300      	movs	r3, #0
 8006c18:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8006c1e:	230c      	movs	r3, #12
 8006c20:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8006c22:	2300      	movs	r3, #0
 8006c24:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8006c26:	2300      	movs	r3, #0
 8006c28:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART6, &USART_InitStruct);
 8006c2a:	f107 031c 	add.w	r3, r7, #28
 8006c2e:	4619      	mov	r1, r3
 8006c30:	4807      	ldr	r0, [pc, #28]	; (8006c50 <MX_USART6_UART_Init+0xbc>)
 8006c32:	f004 fecb 	bl	800b9cc <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART6);
 8006c36:	4806      	ldr	r0, [pc, #24]	; (8006c50 <MX_USART6_UART_Init+0xbc>)
 8006c38:	f7ff fe49 	bl	80068ce <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART6);
 8006c3c:	4804      	ldr	r0, [pc, #16]	; (8006c50 <MX_USART6_UART_Init+0xbc>)
 8006c3e:	f7ff fe36 	bl	80068ae <LL_USART_Enable>

}
 8006c42:	bf00      	nop
 8006c44:	3738      	adds	r7, #56	; 0x38
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}
 8006c4a:	bf00      	nop
 8006c4c:	40020800 	.word	0x40020800
 8006c50:	40011400 	.word	0x40011400

08006c54 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b08a      	sub	sp, #40	; 0x28
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c5c:	f107 0314 	add.w	r3, r7, #20
 8006c60:	2200      	movs	r2, #0
 8006c62:	601a      	str	r2, [r3, #0]
 8006c64:	605a      	str	r2, [r3, #4]
 8006c66:	609a      	str	r2, [r3, #8]
 8006c68:	60da      	str	r2, [r3, #12]
 8006c6a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a1d      	ldr	r2, [pc, #116]	; (8006ce8 <HAL_UART_MspInit+0x94>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d134      	bne.n	8006ce0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006c76:	2300      	movs	r3, #0
 8006c78:	613b      	str	r3, [r7, #16]
 8006c7a:	4b1c      	ldr	r3, [pc, #112]	; (8006cec <HAL_UART_MspInit+0x98>)
 8006c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c7e:	4a1b      	ldr	r2, [pc, #108]	; (8006cec <HAL_UART_MspInit+0x98>)
 8006c80:	f043 0310 	orr.w	r3, r3, #16
 8006c84:	6453      	str	r3, [r2, #68]	; 0x44
 8006c86:	4b19      	ldr	r3, [pc, #100]	; (8006cec <HAL_UART_MspInit+0x98>)
 8006c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c8a:	f003 0310 	and.w	r3, r3, #16
 8006c8e:	613b      	str	r3, [r7, #16]
 8006c90:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c92:	2300      	movs	r3, #0
 8006c94:	60fb      	str	r3, [r7, #12]
 8006c96:	4b15      	ldr	r3, [pc, #84]	; (8006cec <HAL_UART_MspInit+0x98>)
 8006c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c9a:	4a14      	ldr	r2, [pc, #80]	; (8006cec <HAL_UART_MspInit+0x98>)
 8006c9c:	f043 0301 	orr.w	r3, r3, #1
 8006ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8006ca2:	4b12      	ldr	r3, [pc, #72]	; (8006cec <HAL_UART_MspInit+0x98>)
 8006ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ca6:	f003 0301 	and.w	r3, r3, #1
 8006caa:	60fb      	str	r3, [r7, #12]
 8006cac:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8006cae:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8006cb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006cb4:	2302      	movs	r3, #2
 8006cb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006cbc:	2303      	movs	r3, #3
 8006cbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006cc0:	2307      	movs	r3, #7
 8006cc2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006cc4:	f107 0314 	add.w	r3, r7, #20
 8006cc8:	4619      	mov	r1, r3
 8006cca:	4809      	ldr	r0, [pc, #36]	; (8006cf0 <HAL_UART_MspInit+0x9c>)
 8006ccc:	f001 f966 	bl	8007f9c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	2100      	movs	r1, #0
 8006cd4:	2025      	movs	r0, #37	; 0x25
 8006cd6:	f000 fd9a 	bl	800780e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006cda:	2025      	movs	r0, #37	; 0x25
 8006cdc:	f000 fdb3 	bl	8007846 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8006ce0:	bf00      	nop
 8006ce2:	3728      	adds	r7, #40	; 0x28
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}
 8006ce8:	40011000 	.word	0x40011000
 8006cec:	40023800 	.word	0x40023800
 8006cf0:	40020000 	.word	0x40020000

08006cf4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006cf4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006d2c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006cf8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006cfa:	e003      	b.n	8006d04 <LoopCopyDataInit>

08006cfc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006cfc:	4b0c      	ldr	r3, [pc, #48]	; (8006d30 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006cfe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006d00:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006d02:	3104      	adds	r1, #4

08006d04 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006d04:	480b      	ldr	r0, [pc, #44]	; (8006d34 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006d06:	4b0c      	ldr	r3, [pc, #48]	; (8006d38 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006d08:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006d0a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006d0c:	d3f6      	bcc.n	8006cfc <CopyDataInit>
  ldr  r2, =_sbss
 8006d0e:	4a0b      	ldr	r2, [pc, #44]	; (8006d3c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006d10:	e002      	b.n	8006d18 <LoopFillZerobss>

08006d12 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006d12:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006d14:	f842 3b04 	str.w	r3, [r2], #4

08006d18 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006d18:	4b09      	ldr	r3, [pc, #36]	; (8006d40 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006d1a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006d1c:	d3f9      	bcc.n	8006d12 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006d1e:	f7ff fa4b 	bl	80061b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006d22:	f004 fed9 	bl	800bad8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006d26:	f7fc fe13 	bl	8003950 <main>
  bx  lr    
 8006d2a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006d2c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8006d30:	0800f964 	.word	0x0800f964
  ldr  r0, =_sdata
 8006d34:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006d38:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8006d3c:	200001e8 	.word	0x200001e8
  ldr  r3, = _ebss
 8006d40:	200005c8 	.word	0x200005c8

08006d44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006d44:	e7fe      	b.n	8006d44 <ADC_IRQHandler>
	...

08006d48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006d4c:	4b0e      	ldr	r3, [pc, #56]	; (8006d88 <HAL_Init+0x40>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a0d      	ldr	r2, [pc, #52]	; (8006d88 <HAL_Init+0x40>)
 8006d52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006d56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006d58:	4b0b      	ldr	r3, [pc, #44]	; (8006d88 <HAL_Init+0x40>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a0a      	ldr	r2, [pc, #40]	; (8006d88 <HAL_Init+0x40>)
 8006d5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006d62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006d64:	4b08      	ldr	r3, [pc, #32]	; (8006d88 <HAL_Init+0x40>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a07      	ldr	r2, [pc, #28]	; (8006d88 <HAL_Init+0x40>)
 8006d6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006d70:	2003      	movs	r0, #3
 8006d72:	f000 fd41 	bl	80077f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006d76:	2000      	movs	r0, #0
 8006d78:	f000 f808 	bl	8006d8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006d7c:	f7fe ff82 	bl	8005c84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006d80:	2300      	movs	r3, #0
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	bd80      	pop	{r7, pc}
 8006d86:	bf00      	nop
 8006d88:	40023c00 	.word	0x40023c00

08006d8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b082      	sub	sp, #8
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006d94:	4b12      	ldr	r3, [pc, #72]	; (8006de0 <HAL_InitTick+0x54>)
 8006d96:	681a      	ldr	r2, [r3, #0]
 8006d98:	4b12      	ldr	r3, [pc, #72]	; (8006de4 <HAL_InitTick+0x58>)
 8006d9a:	781b      	ldrb	r3, [r3, #0]
 8006d9c:	4619      	mov	r1, r3
 8006d9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006da2:	fbb3 f3f1 	udiv	r3, r3, r1
 8006da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006daa:	4618      	mov	r0, r3
 8006dac:	f000 fd59 	bl	8007862 <HAL_SYSTICK_Config>
 8006db0:	4603      	mov	r3, r0
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d001      	beq.n	8006dba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006db6:	2301      	movs	r3, #1
 8006db8:	e00e      	b.n	8006dd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2b0f      	cmp	r3, #15
 8006dbe:	d80a      	bhi.n	8006dd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	6879      	ldr	r1, [r7, #4]
 8006dc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006dc8:	f000 fd21 	bl	800780e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006dcc:	4a06      	ldr	r2, [pc, #24]	; (8006de8 <HAL_InitTick+0x5c>)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	e000      	b.n	8006dd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006dd6:	2301      	movs	r3, #1
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3708      	adds	r7, #8
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}
 8006de0:	20000004 	.word	0x20000004
 8006de4:	2000000c 	.word	0x2000000c
 8006de8:	20000008 	.word	0x20000008

08006dec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006dec:	b480      	push	{r7}
 8006dee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006df0:	4b06      	ldr	r3, [pc, #24]	; (8006e0c <HAL_IncTick+0x20>)
 8006df2:	781b      	ldrb	r3, [r3, #0]
 8006df4:	461a      	mov	r2, r3
 8006df6:	4b06      	ldr	r3, [pc, #24]	; (8006e10 <HAL_IncTick+0x24>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4413      	add	r3, r2
 8006dfc:	4a04      	ldr	r2, [pc, #16]	; (8006e10 <HAL_IncTick+0x24>)
 8006dfe:	6013      	str	r3, [r2, #0]
}
 8006e00:	bf00      	nop
 8006e02:	46bd      	mov	sp, r7
 8006e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e08:	4770      	bx	lr
 8006e0a:	bf00      	nop
 8006e0c:	2000000c 	.word	0x2000000c
 8006e10:	200005c0 	.word	0x200005c0

08006e14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006e14:	b480      	push	{r7}
 8006e16:	af00      	add	r7, sp, #0
  return uwTick;
 8006e18:	4b03      	ldr	r3, [pc, #12]	; (8006e28 <HAL_GetTick+0x14>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e24:	4770      	bx	lr
 8006e26:	bf00      	nop
 8006e28:	200005c0 	.word	0x200005c0

08006e2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b084      	sub	sp, #16
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006e34:	f7ff ffee 	bl	8006e14 <HAL_GetTick>
 8006e38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e44:	d005      	beq.n	8006e52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006e46:	4b09      	ldr	r3, [pc, #36]	; (8006e6c <HAL_Delay+0x40>)
 8006e48:	781b      	ldrb	r3, [r3, #0]
 8006e4a:	461a      	mov	r2, r3
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	4413      	add	r3, r2
 8006e50:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006e52:	bf00      	nop
 8006e54:	f7ff ffde 	bl	8006e14 <HAL_GetTick>
 8006e58:	4602      	mov	r2, r0
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	1ad3      	subs	r3, r2, r3
 8006e5e:	68fa      	ldr	r2, [r7, #12]
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d8f7      	bhi.n	8006e54 <HAL_Delay+0x28>
  {
  }
}
 8006e64:	bf00      	nop
 8006e66:	3710      	adds	r7, #16
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}
 8006e6c:	2000000c 	.word	0x2000000c

08006e70 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b084      	sub	sp, #16
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d101      	bne.n	8006e86 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006e82:	2301      	movs	r3, #1
 8006e84:	e033      	b.n	8006eee <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d109      	bne.n	8006ea2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f7fc fad2 	bl	8003438 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2200      	movs	r2, #0
 8006e98:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ea6:	f003 0310 	and.w	r3, r3, #16
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d118      	bne.n	8006ee0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006eb6:	f023 0302 	bic.w	r3, r3, #2
 8006eba:	f043 0202 	orr.w	r2, r3, #2
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f000 fa4a 	bl	800735c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ed2:	f023 0303 	bic.w	r3, r3, #3
 8006ed6:	f043 0201 	orr.w	r2, r3, #1
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	641a      	str	r2, [r3, #64]	; 0x40
 8006ede:	e001      	b.n	8006ee4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3710      	adds	r7, #16
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}
	...

08006ef8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b086      	sub	sp, #24
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	60f8      	str	r0, [r7, #12]
 8006f00:	60b9      	str	r1, [r7, #8]
 8006f02:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8006f04:	2300      	movs	r3, #0
 8006f06:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f0e:	2b01      	cmp	r3, #1
 8006f10:	d101      	bne.n	8006f16 <HAL_ADC_Start_DMA+0x1e>
 8006f12:	2302      	movs	r3, #2
 8006f14:	e0cc      	b.n	80070b0 <HAL_ADC_Start_DMA+0x1b8>
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2201      	movs	r2, #1
 8006f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	689b      	ldr	r3, [r3, #8]
 8006f24:	f003 0301 	and.w	r3, r3, #1
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d018      	beq.n	8006f5e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	689a      	ldr	r2, [r3, #8]
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f042 0201 	orr.w	r2, r2, #1
 8006f3a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006f3c:	4b5e      	ldr	r3, [pc, #376]	; (80070b8 <HAL_ADC_Start_DMA+0x1c0>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a5e      	ldr	r2, [pc, #376]	; (80070bc <HAL_ADC_Start_DMA+0x1c4>)
 8006f42:	fba2 2303 	umull	r2, r3, r2, r3
 8006f46:	0c9a      	lsrs	r2, r3, #18
 8006f48:	4613      	mov	r3, r2
 8006f4a:	005b      	lsls	r3, r3, #1
 8006f4c:	4413      	add	r3, r2
 8006f4e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006f50:	e002      	b.n	8006f58 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	3b01      	subs	r3, #1
 8006f56:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d1f9      	bne.n	8006f52 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	689b      	ldr	r3, [r3, #8]
 8006f64:	f003 0301 	and.w	r3, r3, #1
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	f040 80a0 	bne.w	80070ae <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f72:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006f76:	f023 0301 	bic.w	r3, r3, #1
 8006f7a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d007      	beq.n	8006fa0 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f94:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006f98:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006fa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fac:	d106      	bne.n	8006fbc <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fb2:	f023 0206 	bic.w	r2, r3, #6
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	645a      	str	r2, [r3, #68]	; 0x44
 8006fba:	e002      	b.n	8006fc2 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006fca:	4b3d      	ldr	r3, [pc, #244]	; (80070c0 <HAL_ADC_Start_DMA+0x1c8>)
 8006fcc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fd2:	4a3c      	ldr	r2, [pc, #240]	; (80070c4 <HAL_ADC_Start_DMA+0x1cc>)
 8006fd4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fda:	4a3b      	ldr	r2, [pc, #236]	; (80070c8 <HAL_ADC_Start_DMA+0x1d0>)
 8006fdc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fe2:	4a3a      	ldr	r2, [pc, #232]	; (80070cc <HAL_ADC_Start_DMA+0x1d4>)
 8006fe4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006fee:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	685a      	ldr	r2, [r3, #4]
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006ffe:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	689a      	ldr	r2, [r3, #8]
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800700e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	334c      	adds	r3, #76	; 0x4c
 800701a:	4619      	mov	r1, r3
 800701c:	68ba      	ldr	r2, [r7, #8]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f000 fcda 	bl	80079d8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	f003 031f 	and.w	r3, r3, #31
 800702c:	2b00      	cmp	r3, #0
 800702e:	d12a      	bne.n	8007086 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a26      	ldr	r2, [pc, #152]	; (80070d0 <HAL_ADC_Start_DMA+0x1d8>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d015      	beq.n	8007066 <HAL_ADC_Start_DMA+0x16e>
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a25      	ldr	r2, [pc, #148]	; (80070d4 <HAL_ADC_Start_DMA+0x1dc>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d105      	bne.n	8007050 <HAL_ADC_Start_DMA+0x158>
 8007044:	4b1e      	ldr	r3, [pc, #120]	; (80070c0 <HAL_ADC_Start_DMA+0x1c8>)
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	f003 031f 	and.w	r3, r3, #31
 800704c:	2b00      	cmp	r3, #0
 800704e:	d00a      	beq.n	8007066 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a20      	ldr	r2, [pc, #128]	; (80070d8 <HAL_ADC_Start_DMA+0x1e0>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d129      	bne.n	80070ae <HAL_ADC_Start_DMA+0x1b6>
 800705a:	4b19      	ldr	r3, [pc, #100]	; (80070c0 <HAL_ADC_Start_DMA+0x1c8>)
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	f003 031f 	and.w	r3, r3, #31
 8007062:	2b0f      	cmp	r3, #15
 8007064:	d823      	bhi.n	80070ae <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	689b      	ldr	r3, [r3, #8]
 800706c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007070:	2b00      	cmp	r3, #0
 8007072:	d11c      	bne.n	80070ae <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	689a      	ldr	r2, [r3, #8]
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007082:	609a      	str	r2, [r3, #8]
 8007084:	e013      	b.n	80070ae <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a11      	ldr	r2, [pc, #68]	; (80070d0 <HAL_ADC_Start_DMA+0x1d8>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d10e      	bne.n	80070ae <HAL_ADC_Start_DMA+0x1b6>
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800709a:	2b00      	cmp	r3, #0
 800709c:	d107      	bne.n	80070ae <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	689a      	ldr	r2, [r3, #8]
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80070ac:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80070ae:	2300      	movs	r3, #0
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	3718      	adds	r7, #24
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}
 80070b8:	20000004 	.word	0x20000004
 80070bc:	431bde83 	.word	0x431bde83
 80070c0:	40012300 	.word	0x40012300
 80070c4:	08007555 	.word	0x08007555
 80070c8:	0800760f 	.word	0x0800760f
 80070cc:	0800762b 	.word	0x0800762b
 80070d0:	40012000 	.word	0x40012000
 80070d4:	40012100 	.word	0x40012100
 80070d8:	40012200 	.word	0x40012200

080070dc <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80070dc:	b480      	push	{r7}
 80070de:	b083      	sub	sp, #12
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80070e4:	bf00      	nop
 80070e6:	370c      	adds	r7, #12
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr

080070f0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b083      	sub	sp, #12
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80070f8:	bf00      	nop
 80070fa:	370c      	adds	r7, #12
 80070fc:	46bd      	mov	sp, r7
 80070fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007102:	4770      	bx	lr

08007104 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007104:	b480      	push	{r7}
 8007106:	b083      	sub	sp, #12
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800710c:	bf00      	nop
 800710e:	370c      	adds	r7, #12
 8007110:	46bd      	mov	sp, r7
 8007112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007116:	4770      	bx	lr

08007118 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8007118:	b480      	push	{r7}
 800711a:	b085      	sub	sp, #20
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8007122:	2300      	movs	r3, #0
 8007124:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800712c:	2b01      	cmp	r3, #1
 800712e:	d101      	bne.n	8007134 <HAL_ADC_ConfigChannel+0x1c>
 8007130:	2302      	movs	r3, #2
 8007132:	e105      	b.n	8007340 <HAL_ADC_ConfigChannel+0x228>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2201      	movs	r2, #1
 8007138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	2b09      	cmp	r3, #9
 8007142:	d925      	bls.n	8007190 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	68d9      	ldr	r1, [r3, #12]
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	b29b      	uxth	r3, r3
 8007150:	461a      	mov	r2, r3
 8007152:	4613      	mov	r3, r2
 8007154:	005b      	lsls	r3, r3, #1
 8007156:	4413      	add	r3, r2
 8007158:	3b1e      	subs	r3, #30
 800715a:	2207      	movs	r2, #7
 800715c:	fa02 f303 	lsl.w	r3, r2, r3
 8007160:	43da      	mvns	r2, r3
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	400a      	ands	r2, r1
 8007168:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	68d9      	ldr	r1, [r3, #12]
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	689a      	ldr	r2, [r3, #8]
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	b29b      	uxth	r3, r3
 800717a:	4618      	mov	r0, r3
 800717c:	4603      	mov	r3, r0
 800717e:	005b      	lsls	r3, r3, #1
 8007180:	4403      	add	r3, r0
 8007182:	3b1e      	subs	r3, #30
 8007184:	409a      	lsls	r2, r3
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	430a      	orrs	r2, r1
 800718c:	60da      	str	r2, [r3, #12]
 800718e:	e022      	b.n	80071d6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	6919      	ldr	r1, [r3, #16]
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	b29b      	uxth	r3, r3
 800719c:	461a      	mov	r2, r3
 800719e:	4613      	mov	r3, r2
 80071a0:	005b      	lsls	r3, r3, #1
 80071a2:	4413      	add	r3, r2
 80071a4:	2207      	movs	r2, #7
 80071a6:	fa02 f303 	lsl.w	r3, r2, r3
 80071aa:	43da      	mvns	r2, r3
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	400a      	ands	r2, r1
 80071b2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	6919      	ldr	r1, [r3, #16]
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	689a      	ldr	r2, [r3, #8]
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	b29b      	uxth	r3, r3
 80071c4:	4618      	mov	r0, r3
 80071c6:	4603      	mov	r3, r0
 80071c8:	005b      	lsls	r3, r3, #1
 80071ca:	4403      	add	r3, r0
 80071cc:	409a      	lsls	r2, r3
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	430a      	orrs	r2, r1
 80071d4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	685b      	ldr	r3, [r3, #4]
 80071da:	2b06      	cmp	r3, #6
 80071dc:	d824      	bhi.n	8007228 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	685a      	ldr	r2, [r3, #4]
 80071e8:	4613      	mov	r3, r2
 80071ea:	009b      	lsls	r3, r3, #2
 80071ec:	4413      	add	r3, r2
 80071ee:	3b05      	subs	r3, #5
 80071f0:	221f      	movs	r2, #31
 80071f2:	fa02 f303 	lsl.w	r3, r2, r3
 80071f6:	43da      	mvns	r2, r3
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	400a      	ands	r2, r1
 80071fe:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	b29b      	uxth	r3, r3
 800720c:	4618      	mov	r0, r3
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	685a      	ldr	r2, [r3, #4]
 8007212:	4613      	mov	r3, r2
 8007214:	009b      	lsls	r3, r3, #2
 8007216:	4413      	add	r3, r2
 8007218:	3b05      	subs	r3, #5
 800721a:	fa00 f203 	lsl.w	r2, r0, r3
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	430a      	orrs	r2, r1
 8007224:	635a      	str	r2, [r3, #52]	; 0x34
 8007226:	e04c      	b.n	80072c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	2b0c      	cmp	r3, #12
 800722e:	d824      	bhi.n	800727a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	685a      	ldr	r2, [r3, #4]
 800723a:	4613      	mov	r3, r2
 800723c:	009b      	lsls	r3, r3, #2
 800723e:	4413      	add	r3, r2
 8007240:	3b23      	subs	r3, #35	; 0x23
 8007242:	221f      	movs	r2, #31
 8007244:	fa02 f303 	lsl.w	r3, r2, r3
 8007248:	43da      	mvns	r2, r3
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	400a      	ands	r2, r1
 8007250:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	b29b      	uxth	r3, r3
 800725e:	4618      	mov	r0, r3
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	685a      	ldr	r2, [r3, #4]
 8007264:	4613      	mov	r3, r2
 8007266:	009b      	lsls	r3, r3, #2
 8007268:	4413      	add	r3, r2
 800726a:	3b23      	subs	r3, #35	; 0x23
 800726c:	fa00 f203 	lsl.w	r2, r0, r3
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	430a      	orrs	r2, r1
 8007276:	631a      	str	r2, [r3, #48]	; 0x30
 8007278:	e023      	b.n	80072c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	685a      	ldr	r2, [r3, #4]
 8007284:	4613      	mov	r3, r2
 8007286:	009b      	lsls	r3, r3, #2
 8007288:	4413      	add	r3, r2
 800728a:	3b41      	subs	r3, #65	; 0x41
 800728c:	221f      	movs	r2, #31
 800728e:	fa02 f303 	lsl.w	r3, r2, r3
 8007292:	43da      	mvns	r2, r3
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	400a      	ands	r2, r1
 800729a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	b29b      	uxth	r3, r3
 80072a8:	4618      	mov	r0, r3
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	685a      	ldr	r2, [r3, #4]
 80072ae:	4613      	mov	r3, r2
 80072b0:	009b      	lsls	r3, r3, #2
 80072b2:	4413      	add	r3, r2
 80072b4:	3b41      	subs	r3, #65	; 0x41
 80072b6:	fa00 f203 	lsl.w	r2, r0, r3
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	430a      	orrs	r2, r1
 80072c0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80072c2:	4b22      	ldr	r3, [pc, #136]	; (800734c <HAL_ADC_ConfigChannel+0x234>)
 80072c4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a21      	ldr	r2, [pc, #132]	; (8007350 <HAL_ADC_ConfigChannel+0x238>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d109      	bne.n	80072e4 <HAL_ADC_ConfigChannel+0x1cc>
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	2b12      	cmp	r3, #18
 80072d6:	d105      	bne.n	80072e4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	685b      	ldr	r3, [r3, #4]
 80072dc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a19      	ldr	r2, [pc, #100]	; (8007350 <HAL_ADC_ConfigChannel+0x238>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d123      	bne.n	8007336 <HAL_ADC_ConfigChannel+0x21e>
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	2b10      	cmp	r3, #16
 80072f4:	d003      	beq.n	80072fe <HAL_ADC_ConfigChannel+0x1e6>
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	2b11      	cmp	r3, #17
 80072fc:	d11b      	bne.n	8007336 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	2b10      	cmp	r3, #16
 8007310:	d111      	bne.n	8007336 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8007312:	4b10      	ldr	r3, [pc, #64]	; (8007354 <HAL_ADC_ConfigChannel+0x23c>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a10      	ldr	r2, [pc, #64]	; (8007358 <HAL_ADC_ConfigChannel+0x240>)
 8007318:	fba2 2303 	umull	r2, r3, r2, r3
 800731c:	0c9a      	lsrs	r2, r3, #18
 800731e:	4613      	mov	r3, r2
 8007320:	009b      	lsls	r3, r3, #2
 8007322:	4413      	add	r3, r2
 8007324:	005b      	lsls	r3, r3, #1
 8007326:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007328:	e002      	b.n	8007330 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	3b01      	subs	r3, #1
 800732e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d1f9      	bne.n	800732a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2200      	movs	r2, #0
 800733a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800733e:	2300      	movs	r3, #0
}
 8007340:	4618      	mov	r0, r3
 8007342:	3714      	adds	r7, #20
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr
 800734c:	40012300 	.word	0x40012300
 8007350:	40012000 	.word	0x40012000
 8007354:	20000004 	.word	0x20000004
 8007358:	431bde83 	.word	0x431bde83

0800735c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800735c:	b480      	push	{r7}
 800735e:	b085      	sub	sp, #20
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007364:	4b79      	ldr	r3, [pc, #484]	; (800754c <ADC_Init+0x1f0>)
 8007366:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	685b      	ldr	r3, [r3, #4]
 800736c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	685a      	ldr	r2, [r3, #4]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	685b      	ldr	r3, [r3, #4]
 800737c:	431a      	orrs	r2, r3
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	685a      	ldr	r2, [r3, #4]
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007390:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	6859      	ldr	r1, [r3, #4]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	691b      	ldr	r3, [r3, #16]
 800739c:	021a      	lsls	r2, r3, #8
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	430a      	orrs	r2, r1
 80073a4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	685a      	ldr	r2, [r3, #4]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80073b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	6859      	ldr	r1, [r3, #4]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	689a      	ldr	r2, [r3, #8]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	430a      	orrs	r2, r1
 80073c6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	689a      	ldr	r2, [r3, #8]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80073d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	6899      	ldr	r1, [r3, #8]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	68da      	ldr	r2, [r3, #12]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	430a      	orrs	r2, r1
 80073e8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073ee:	4a58      	ldr	r2, [pc, #352]	; (8007550 <ADC_Init+0x1f4>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d022      	beq.n	800743a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	689a      	ldr	r2, [r3, #8]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007402:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	6899      	ldr	r1, [r3, #8]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	430a      	orrs	r2, r1
 8007414:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	689a      	ldr	r2, [r3, #8]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007424:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	6899      	ldr	r1, [r3, #8]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	430a      	orrs	r2, r1
 8007436:	609a      	str	r2, [r3, #8]
 8007438:	e00f      	b.n	800745a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	689a      	ldr	r2, [r3, #8]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007448:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	689a      	ldr	r2, [r3, #8]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007458:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	689a      	ldr	r2, [r3, #8]
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f022 0202 	bic.w	r2, r2, #2
 8007468:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	6899      	ldr	r1, [r3, #8]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	7e1b      	ldrb	r3, [r3, #24]
 8007474:	005a      	lsls	r2, r3, #1
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	430a      	orrs	r2, r1
 800747c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d01b      	beq.n	80074c0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	685a      	ldr	r2, [r3, #4]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007496:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	685a      	ldr	r2, [r3, #4]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80074a6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	6859      	ldr	r1, [r3, #4]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b2:	3b01      	subs	r3, #1
 80074b4:	035a      	lsls	r2, r3, #13
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	430a      	orrs	r2, r1
 80074bc:	605a      	str	r2, [r3, #4]
 80074be:	e007      	b.n	80074d0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	685a      	ldr	r2, [r3, #4]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80074ce:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80074de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	69db      	ldr	r3, [r3, #28]
 80074ea:	3b01      	subs	r3, #1
 80074ec:	051a      	lsls	r2, r3, #20
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	430a      	orrs	r2, r1
 80074f4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	689a      	ldr	r2, [r3, #8]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007504:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	6899      	ldr	r1, [r3, #8]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007512:	025a      	lsls	r2, r3, #9
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	430a      	orrs	r2, r1
 800751a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	689a      	ldr	r2, [r3, #8]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800752a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	6899      	ldr	r1, [r3, #8]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	695b      	ldr	r3, [r3, #20]
 8007536:	029a      	lsls	r2, r3, #10
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	430a      	orrs	r2, r1
 800753e:	609a      	str	r2, [r3, #8]
}
 8007540:	bf00      	nop
 8007542:	3714      	adds	r7, #20
 8007544:	46bd      	mov	sp, r7
 8007546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754a:	4770      	bx	lr
 800754c:	40012300 	.word	0x40012300
 8007550:	0f000001 	.word	0x0f000001

08007554 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b084      	sub	sp, #16
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007560:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007566:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800756a:	2b00      	cmp	r3, #0
 800756c:	d13c      	bne.n	80075e8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007572:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	689b      	ldr	r3, [r3, #8]
 8007580:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007584:	2b00      	cmp	r3, #0
 8007586:	d12b      	bne.n	80075e0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800758c:	2b00      	cmp	r3, #0
 800758e:	d127      	bne.n	80075e0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007596:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800759a:	2b00      	cmp	r3, #0
 800759c:	d006      	beq.n	80075ac <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	689b      	ldr	r3, [r3, #8]
 80075a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d119      	bne.n	80075e0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	685a      	ldr	r2, [r3, #4]
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f022 0220 	bic.w	r2, r2, #32
 80075ba:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d105      	bne.n	80075e0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075d8:	f043 0201 	orr.w	r2, r3, #1
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80075e0:	68f8      	ldr	r0, [r7, #12]
 80075e2:	f7ff fd7b 	bl	80070dc <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80075e6:	e00e      	b.n	8007606 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ec:	f003 0310 	and.w	r3, r3, #16
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d003      	beq.n	80075fc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80075f4:	68f8      	ldr	r0, [r7, #12]
 80075f6:	f7ff fd85 	bl	8007104 <HAL_ADC_ErrorCallback>
}
 80075fa:	e004      	b.n	8007606 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	4798      	blx	r3
}
 8007606:	bf00      	nop
 8007608:	3710      	adds	r7, #16
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}

0800760e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800760e:	b580      	push	{r7, lr}
 8007610:	b084      	sub	sp, #16
 8007612:	af00      	add	r7, sp, #0
 8007614:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800761a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800761c:	68f8      	ldr	r0, [r7, #12]
 800761e:	f7ff fd67 	bl	80070f0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007622:	bf00      	nop
 8007624:	3710      	adds	r7, #16
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}

0800762a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800762a:	b580      	push	{r7, lr}
 800762c:	b084      	sub	sp, #16
 800762e:	af00      	add	r7, sp, #0
 8007630:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007636:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	2240      	movs	r2, #64	; 0x40
 800763c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007642:	f043 0204 	orr.w	r2, r3, #4
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800764a:	68f8      	ldr	r0, [r7, #12]
 800764c:	f7ff fd5a 	bl	8007104 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007650:	bf00      	nop
 8007652:	3710      	adds	r7, #16
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}

08007658 <__NVIC_SetPriorityGrouping>:
{
 8007658:	b480      	push	{r7}
 800765a:	b085      	sub	sp, #20
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f003 0307 	and.w	r3, r3, #7
 8007666:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007668:	4b0c      	ldr	r3, [pc, #48]	; (800769c <__NVIC_SetPriorityGrouping+0x44>)
 800766a:	68db      	ldr	r3, [r3, #12]
 800766c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800766e:	68ba      	ldr	r2, [r7, #8]
 8007670:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007674:	4013      	ands	r3, r2
 8007676:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007680:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007684:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007688:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800768a:	4a04      	ldr	r2, [pc, #16]	; (800769c <__NVIC_SetPriorityGrouping+0x44>)
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	60d3      	str	r3, [r2, #12]
}
 8007690:	bf00      	nop
 8007692:	3714      	adds	r7, #20
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr
 800769c:	e000ed00 	.word	0xe000ed00

080076a0 <__NVIC_GetPriorityGrouping>:
{
 80076a0:	b480      	push	{r7}
 80076a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80076a4:	4b04      	ldr	r3, [pc, #16]	; (80076b8 <__NVIC_GetPriorityGrouping+0x18>)
 80076a6:	68db      	ldr	r3, [r3, #12]
 80076a8:	0a1b      	lsrs	r3, r3, #8
 80076aa:	f003 0307 	and.w	r3, r3, #7
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr
 80076b8:	e000ed00 	.word	0xe000ed00

080076bc <__NVIC_EnableIRQ>:
{
 80076bc:	b480      	push	{r7}
 80076be:	b083      	sub	sp, #12
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	4603      	mov	r3, r0
 80076c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80076c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	db0b      	blt.n	80076e6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80076ce:	79fb      	ldrb	r3, [r7, #7]
 80076d0:	f003 021f 	and.w	r2, r3, #31
 80076d4:	4907      	ldr	r1, [pc, #28]	; (80076f4 <__NVIC_EnableIRQ+0x38>)
 80076d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80076da:	095b      	lsrs	r3, r3, #5
 80076dc:	2001      	movs	r0, #1
 80076de:	fa00 f202 	lsl.w	r2, r0, r2
 80076e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80076e6:	bf00      	nop
 80076e8:	370c      	adds	r7, #12
 80076ea:	46bd      	mov	sp, r7
 80076ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f0:	4770      	bx	lr
 80076f2:	bf00      	nop
 80076f4:	e000e100 	.word	0xe000e100

080076f8 <__NVIC_SetPriority>:
{
 80076f8:	b480      	push	{r7}
 80076fa:	b083      	sub	sp, #12
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	4603      	mov	r3, r0
 8007700:	6039      	str	r1, [r7, #0]
 8007702:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007704:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007708:	2b00      	cmp	r3, #0
 800770a:	db0a      	blt.n	8007722 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	b2da      	uxtb	r2, r3
 8007710:	490c      	ldr	r1, [pc, #48]	; (8007744 <__NVIC_SetPriority+0x4c>)
 8007712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007716:	0112      	lsls	r2, r2, #4
 8007718:	b2d2      	uxtb	r2, r2
 800771a:	440b      	add	r3, r1
 800771c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007720:	e00a      	b.n	8007738 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	b2da      	uxtb	r2, r3
 8007726:	4908      	ldr	r1, [pc, #32]	; (8007748 <__NVIC_SetPriority+0x50>)
 8007728:	79fb      	ldrb	r3, [r7, #7]
 800772a:	f003 030f 	and.w	r3, r3, #15
 800772e:	3b04      	subs	r3, #4
 8007730:	0112      	lsls	r2, r2, #4
 8007732:	b2d2      	uxtb	r2, r2
 8007734:	440b      	add	r3, r1
 8007736:	761a      	strb	r2, [r3, #24]
}
 8007738:	bf00      	nop
 800773a:	370c      	adds	r7, #12
 800773c:	46bd      	mov	sp, r7
 800773e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007742:	4770      	bx	lr
 8007744:	e000e100 	.word	0xe000e100
 8007748:	e000ed00 	.word	0xe000ed00

0800774c <NVIC_EncodePriority>:
{
 800774c:	b480      	push	{r7}
 800774e:	b089      	sub	sp, #36	; 0x24
 8007750:	af00      	add	r7, sp, #0
 8007752:	60f8      	str	r0, [r7, #12]
 8007754:	60b9      	str	r1, [r7, #8]
 8007756:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	f003 0307 	and.w	r3, r3, #7
 800775e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007760:	69fb      	ldr	r3, [r7, #28]
 8007762:	f1c3 0307 	rsb	r3, r3, #7
 8007766:	2b04      	cmp	r3, #4
 8007768:	bf28      	it	cs
 800776a:	2304      	movcs	r3, #4
 800776c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800776e:	69fb      	ldr	r3, [r7, #28]
 8007770:	3304      	adds	r3, #4
 8007772:	2b06      	cmp	r3, #6
 8007774:	d902      	bls.n	800777c <NVIC_EncodePriority+0x30>
 8007776:	69fb      	ldr	r3, [r7, #28]
 8007778:	3b03      	subs	r3, #3
 800777a:	e000      	b.n	800777e <NVIC_EncodePriority+0x32>
 800777c:	2300      	movs	r3, #0
 800777e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007780:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007784:	69bb      	ldr	r3, [r7, #24]
 8007786:	fa02 f303 	lsl.w	r3, r2, r3
 800778a:	43da      	mvns	r2, r3
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	401a      	ands	r2, r3
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007794:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	fa01 f303 	lsl.w	r3, r1, r3
 800779e:	43d9      	mvns	r1, r3
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80077a4:	4313      	orrs	r3, r2
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3724      	adds	r7, #36	; 0x24
 80077aa:	46bd      	mov	sp, r7
 80077ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b0:	4770      	bx	lr
	...

080077b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b082      	sub	sp, #8
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	3b01      	subs	r3, #1
 80077c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80077c4:	d301      	bcc.n	80077ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80077c6:	2301      	movs	r3, #1
 80077c8:	e00f      	b.n	80077ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80077ca:	4a0a      	ldr	r2, [pc, #40]	; (80077f4 <SysTick_Config+0x40>)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	3b01      	subs	r3, #1
 80077d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80077d2:	210f      	movs	r1, #15
 80077d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80077d8:	f7ff ff8e 	bl	80076f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80077dc:	4b05      	ldr	r3, [pc, #20]	; (80077f4 <SysTick_Config+0x40>)
 80077de:	2200      	movs	r2, #0
 80077e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80077e2:	4b04      	ldr	r3, [pc, #16]	; (80077f4 <SysTick_Config+0x40>)
 80077e4:	2207      	movs	r2, #7
 80077e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80077e8:	2300      	movs	r3, #0
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	3708      	adds	r7, #8
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}
 80077f2:	bf00      	nop
 80077f4:	e000e010 	.word	0xe000e010

080077f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b082      	sub	sp, #8
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f7ff ff29 	bl	8007658 <__NVIC_SetPriorityGrouping>
}
 8007806:	bf00      	nop
 8007808:	3708      	adds	r7, #8
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}

0800780e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800780e:	b580      	push	{r7, lr}
 8007810:	b086      	sub	sp, #24
 8007812:	af00      	add	r7, sp, #0
 8007814:	4603      	mov	r3, r0
 8007816:	60b9      	str	r1, [r7, #8]
 8007818:	607a      	str	r2, [r7, #4]
 800781a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800781c:	2300      	movs	r3, #0
 800781e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007820:	f7ff ff3e 	bl	80076a0 <__NVIC_GetPriorityGrouping>
 8007824:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007826:	687a      	ldr	r2, [r7, #4]
 8007828:	68b9      	ldr	r1, [r7, #8]
 800782a:	6978      	ldr	r0, [r7, #20]
 800782c:	f7ff ff8e 	bl	800774c <NVIC_EncodePriority>
 8007830:	4602      	mov	r2, r0
 8007832:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007836:	4611      	mov	r1, r2
 8007838:	4618      	mov	r0, r3
 800783a:	f7ff ff5d 	bl	80076f8 <__NVIC_SetPriority>
}
 800783e:	bf00      	nop
 8007840:	3718      	adds	r7, #24
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}

08007846 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007846:	b580      	push	{r7, lr}
 8007848:	b082      	sub	sp, #8
 800784a:	af00      	add	r7, sp, #0
 800784c:	4603      	mov	r3, r0
 800784e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007854:	4618      	mov	r0, r3
 8007856:	f7ff ff31 	bl	80076bc <__NVIC_EnableIRQ>
}
 800785a:	bf00      	nop
 800785c:	3708      	adds	r7, #8
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}

08007862 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007862:	b580      	push	{r7, lr}
 8007864:	b082      	sub	sp, #8
 8007866:	af00      	add	r7, sp, #0
 8007868:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f7ff ffa2 	bl	80077b4 <SysTick_Config>
 8007870:	4603      	mov	r3, r0
}
 8007872:	4618      	mov	r0, r3
 8007874:	3708      	adds	r7, #8
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}
	...

0800787c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b086      	sub	sp, #24
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007884:	2300      	movs	r3, #0
 8007886:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007888:	f7ff fac4 	bl	8006e14 <HAL_GetTick>
 800788c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d101      	bne.n	8007898 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007894:	2301      	movs	r3, #1
 8007896:	e099      	b.n	80079cc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2200      	movs	r2, #0
 800789c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2202      	movs	r2, #2
 80078a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	681a      	ldr	r2, [r3, #0]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f022 0201 	bic.w	r2, r2, #1
 80078b6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80078b8:	e00f      	b.n	80078da <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80078ba:	f7ff faab 	bl	8006e14 <HAL_GetTick>
 80078be:	4602      	mov	r2, r0
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	1ad3      	subs	r3, r2, r3
 80078c4:	2b05      	cmp	r3, #5
 80078c6:	d908      	bls.n	80078da <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2220      	movs	r2, #32
 80078cc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2203      	movs	r2, #3
 80078d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80078d6:	2303      	movs	r3, #3
 80078d8:	e078      	b.n	80079cc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f003 0301 	and.w	r3, r3, #1
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d1e8      	bne.n	80078ba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80078f0:	697a      	ldr	r2, [r7, #20]
 80078f2:	4b38      	ldr	r3, [pc, #224]	; (80079d4 <HAL_DMA_Init+0x158>)
 80078f4:	4013      	ands	r3, r2
 80078f6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	685a      	ldr	r2, [r3, #4]
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	689b      	ldr	r3, [r3, #8]
 8007900:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007906:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	691b      	ldr	r3, [r3, #16]
 800790c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007912:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	699b      	ldr	r3, [r3, #24]
 8007918:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800791e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6a1b      	ldr	r3, [r3, #32]
 8007924:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007926:	697a      	ldr	r2, [r7, #20]
 8007928:	4313      	orrs	r3, r2
 800792a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007930:	2b04      	cmp	r3, #4
 8007932:	d107      	bne.n	8007944 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800793c:	4313      	orrs	r3, r2
 800793e:	697a      	ldr	r2, [r7, #20]
 8007940:	4313      	orrs	r3, r2
 8007942:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	697a      	ldr	r2, [r7, #20]
 800794a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	695b      	ldr	r3, [r3, #20]
 8007952:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	f023 0307 	bic.w	r3, r3, #7
 800795a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007960:	697a      	ldr	r2, [r7, #20]
 8007962:	4313      	orrs	r3, r2
 8007964:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800796a:	2b04      	cmp	r3, #4
 800796c:	d117      	bne.n	800799e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007972:	697a      	ldr	r2, [r7, #20]
 8007974:	4313      	orrs	r3, r2
 8007976:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800797c:	2b00      	cmp	r3, #0
 800797e:	d00e      	beq.n	800799e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f000 fa91 	bl	8007ea8 <DMA_CheckFifoParam>
 8007986:	4603      	mov	r3, r0
 8007988:	2b00      	cmp	r3, #0
 800798a:	d008      	beq.n	800799e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2240      	movs	r2, #64	; 0x40
 8007990:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2201      	movs	r2, #1
 8007996:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800799a:	2301      	movs	r3, #1
 800799c:	e016      	b.n	80079cc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	697a      	ldr	r2, [r7, #20]
 80079a4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f000 fa48 	bl	8007e3c <DMA_CalcBaseAndBitshift>
 80079ac:	4603      	mov	r3, r0
 80079ae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079b4:	223f      	movs	r2, #63	; 0x3f
 80079b6:	409a      	lsls	r2, r3
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2200      	movs	r2, #0
 80079c0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2201      	movs	r2, #1
 80079c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80079ca:	2300      	movs	r3, #0
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3718      	adds	r7, #24
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}
 80079d4:	f010803f 	.word	0xf010803f

080079d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b086      	sub	sp, #24
 80079dc:	af00      	add	r7, sp, #0
 80079de:	60f8      	str	r0, [r7, #12]
 80079e0:	60b9      	str	r1, [r7, #8]
 80079e2:	607a      	str	r2, [r7, #4]
 80079e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80079e6:	2300      	movs	r3, #0
 80079e8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079ee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80079f6:	2b01      	cmp	r3, #1
 80079f8:	d101      	bne.n	80079fe <HAL_DMA_Start_IT+0x26>
 80079fa:	2302      	movs	r3, #2
 80079fc:	e040      	b.n	8007a80 <HAL_DMA_Start_IT+0xa8>
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2201      	movs	r2, #1
 8007a02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007a0c:	b2db      	uxtb	r3, r3
 8007a0e:	2b01      	cmp	r3, #1
 8007a10:	d12f      	bne.n	8007a72 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	2202      	movs	r2, #2
 8007a16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	687a      	ldr	r2, [r7, #4]
 8007a24:	68b9      	ldr	r1, [r7, #8]
 8007a26:	68f8      	ldr	r0, [r7, #12]
 8007a28:	f000 f9da 	bl	8007de0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a30:	223f      	movs	r2, #63	; 0x3f
 8007a32:	409a      	lsls	r2, r3
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	681a      	ldr	r2, [r3, #0]
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f042 0216 	orr.w	r2, r2, #22
 8007a46:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d007      	beq.n	8007a60 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	681a      	ldr	r2, [r3, #0]
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f042 0208 	orr.w	r2, r2, #8
 8007a5e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	681a      	ldr	r2, [r3, #0]
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f042 0201 	orr.w	r2, r2, #1
 8007a6e:	601a      	str	r2, [r3, #0]
 8007a70:	e005      	b.n	8007a7e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	2200      	movs	r2, #0
 8007a76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007a7a:	2302      	movs	r3, #2
 8007a7c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007a7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3718      	adds	r7, #24
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}

08007a88 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b083      	sub	sp, #12
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007a96:	b2db      	uxtb	r3, r3
 8007a98:	2b02      	cmp	r3, #2
 8007a9a:	d004      	beq.n	8007aa6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2280      	movs	r2, #128	; 0x80
 8007aa0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	e00c      	b.n	8007ac0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2205      	movs	r2, #5
 8007aaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	681a      	ldr	r2, [r3, #0]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f022 0201 	bic.w	r2, r2, #1
 8007abc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007abe:	2300      	movs	r3, #0
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	370c      	adds	r7, #12
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aca:	4770      	bx	lr

08007acc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b086      	sub	sp, #24
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007ad8:	4b92      	ldr	r3, [pc, #584]	; (8007d24 <HAL_DMA_IRQHandler+0x258>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4a92      	ldr	r2, [pc, #584]	; (8007d28 <HAL_DMA_IRQHandler+0x25c>)
 8007ade:	fba2 2303 	umull	r2, r3, r2, r3
 8007ae2:	0a9b      	lsrs	r3, r3, #10
 8007ae4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007aea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007af6:	2208      	movs	r2, #8
 8007af8:	409a      	lsls	r2, r3
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	4013      	ands	r3, r2
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d01a      	beq.n	8007b38 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f003 0304 	and.w	r3, r3, #4
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d013      	beq.n	8007b38 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	681a      	ldr	r2, [r3, #0]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f022 0204 	bic.w	r2, r2, #4
 8007b1e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b24:	2208      	movs	r2, #8
 8007b26:	409a      	lsls	r2, r3
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b30:	f043 0201 	orr.w	r2, r3, #1
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b3c:	2201      	movs	r2, #1
 8007b3e:	409a      	lsls	r2, r3
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	4013      	ands	r3, r2
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d012      	beq.n	8007b6e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	695b      	ldr	r3, [r3, #20]
 8007b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d00b      	beq.n	8007b6e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	409a      	lsls	r2, r3
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b66:	f043 0202 	orr.w	r2, r3, #2
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b72:	2204      	movs	r2, #4
 8007b74:	409a      	lsls	r2, r3
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	4013      	ands	r3, r2
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d012      	beq.n	8007ba4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f003 0302 	and.w	r3, r3, #2
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d00b      	beq.n	8007ba4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b90:	2204      	movs	r2, #4
 8007b92:	409a      	lsls	r2, r3
 8007b94:	693b      	ldr	r3, [r7, #16]
 8007b96:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b9c:	f043 0204 	orr.w	r2, r3, #4
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ba8:	2210      	movs	r2, #16
 8007baa:	409a      	lsls	r2, r3
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	4013      	ands	r3, r2
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d043      	beq.n	8007c3c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f003 0308 	and.w	r3, r3, #8
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d03c      	beq.n	8007c3c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bc6:	2210      	movs	r2, #16
 8007bc8:	409a      	lsls	r2, r3
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d018      	beq.n	8007c0e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d108      	bne.n	8007bfc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d024      	beq.n	8007c3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	4798      	blx	r3
 8007bfa:	e01f      	b.n	8007c3c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d01b      	beq.n	8007c3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	4798      	blx	r3
 8007c0c:	e016      	b.n	8007c3c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d107      	bne.n	8007c2c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	681a      	ldr	r2, [r3, #0]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f022 0208 	bic.w	r2, r2, #8
 8007c2a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d003      	beq.n	8007c3c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c40:	2220      	movs	r2, #32
 8007c42:	409a      	lsls	r2, r3
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	4013      	ands	r3, r2
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	f000 808e 	beq.w	8007d6a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f003 0310 	and.w	r3, r3, #16
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	f000 8086 	beq.w	8007d6a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c62:	2220      	movs	r2, #32
 8007c64:	409a      	lsls	r2, r3
 8007c66:	693b      	ldr	r3, [r7, #16]
 8007c68:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007c70:	b2db      	uxtb	r3, r3
 8007c72:	2b05      	cmp	r3, #5
 8007c74:	d136      	bne.n	8007ce4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	681a      	ldr	r2, [r3, #0]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f022 0216 	bic.w	r2, r2, #22
 8007c84:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	695a      	ldr	r2, [r3, #20]
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007c94:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d103      	bne.n	8007ca6 <HAL_DMA_IRQHandler+0x1da>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d007      	beq.n	8007cb6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	681a      	ldr	r2, [r3, #0]
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f022 0208 	bic.w	r2, r2, #8
 8007cb4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007cba:	223f      	movs	r2, #63	; 0x3f
 8007cbc:	409a      	lsls	r2, r3
 8007cbe:	693b      	ldr	r3, [r7, #16]
 8007cc0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2201      	movs	r2, #1
 8007cce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d07d      	beq.n	8007dd6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	4798      	blx	r3
        }
        return;
 8007ce2:	e078      	b.n	8007dd6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d01c      	beq.n	8007d2c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d108      	bne.n	8007d12 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d030      	beq.n	8007d6a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	4798      	blx	r3
 8007d10:	e02b      	b.n	8007d6a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d027      	beq.n	8007d6a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	4798      	blx	r3
 8007d22:	e022      	b.n	8007d6a <HAL_DMA_IRQHandler+0x29e>
 8007d24:	20000004 	.word	0x20000004
 8007d28:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d10f      	bne.n	8007d5a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	681a      	ldr	r2, [r3, #0]
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f022 0210 	bic.w	r2, r2, #16
 8007d48:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2201      	movs	r2, #1
 8007d56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d003      	beq.n	8007d6a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d032      	beq.n	8007dd8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d76:	f003 0301 	and.w	r3, r3, #1
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d022      	beq.n	8007dc4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2205      	movs	r2, #5
 8007d82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	681a      	ldr	r2, [r3, #0]
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f022 0201 	bic.w	r2, r2, #1
 8007d94:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	3301      	adds	r3, #1
 8007d9a:	60bb      	str	r3, [r7, #8]
 8007d9c:	697a      	ldr	r2, [r7, #20]
 8007d9e:	429a      	cmp	r2, r3
 8007da0:	d307      	bcc.n	8007db2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f003 0301 	and.w	r3, r3, #1
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d1f2      	bne.n	8007d96 <HAL_DMA_IRQHandler+0x2ca>
 8007db0:	e000      	b.n	8007db4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8007db2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2200      	movs	r2, #0
 8007db8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d005      	beq.n	8007dd8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	4798      	blx	r3
 8007dd4:	e000      	b.n	8007dd8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8007dd6:	bf00      	nop
    }
  }
}
 8007dd8:	3718      	adds	r7, #24
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}
 8007dde:	bf00      	nop

08007de0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b085      	sub	sp, #20
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	60f8      	str	r0, [r7, #12]
 8007de8:	60b9      	str	r1, [r7, #8]
 8007dea:	607a      	str	r2, [r7, #4]
 8007dec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	681a      	ldr	r2, [r3, #0]
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007dfc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	683a      	ldr	r2, [r7, #0]
 8007e04:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	689b      	ldr	r3, [r3, #8]
 8007e0a:	2b40      	cmp	r3, #64	; 0x40
 8007e0c:	d108      	bne.n	8007e20 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	687a      	ldr	r2, [r7, #4]
 8007e14:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	68ba      	ldr	r2, [r7, #8]
 8007e1c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007e1e:	e007      	b.n	8007e30 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	68ba      	ldr	r2, [r7, #8]
 8007e26:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	687a      	ldr	r2, [r7, #4]
 8007e2e:	60da      	str	r2, [r3, #12]
}
 8007e30:	bf00      	nop
 8007e32:	3714      	adds	r7, #20
 8007e34:	46bd      	mov	sp, r7
 8007e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3a:	4770      	bx	lr

08007e3c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b085      	sub	sp, #20
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	b2db      	uxtb	r3, r3
 8007e4a:	3b10      	subs	r3, #16
 8007e4c:	4a14      	ldr	r2, [pc, #80]	; (8007ea0 <DMA_CalcBaseAndBitshift+0x64>)
 8007e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8007e52:	091b      	lsrs	r3, r3, #4
 8007e54:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007e56:	4a13      	ldr	r2, [pc, #76]	; (8007ea4 <DMA_CalcBaseAndBitshift+0x68>)
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	4413      	add	r3, r2
 8007e5c:	781b      	ldrb	r3, [r3, #0]
 8007e5e:	461a      	mov	r2, r3
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	2b03      	cmp	r3, #3
 8007e68:	d909      	bls.n	8007e7e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007e72:	f023 0303 	bic.w	r3, r3, #3
 8007e76:	1d1a      	adds	r2, r3, #4
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	659a      	str	r2, [r3, #88]	; 0x58
 8007e7c:	e007      	b.n	8007e8e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007e86:	f023 0303 	bic.w	r3, r3, #3
 8007e8a:	687a      	ldr	r2, [r7, #4]
 8007e8c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3714      	adds	r7, #20
 8007e96:	46bd      	mov	sp, r7
 8007e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9c:	4770      	bx	lr
 8007e9e:	bf00      	nop
 8007ea0:	aaaaaaab 	.word	0xaaaaaaab
 8007ea4:	0800f644 	.word	0x0800f644

08007ea8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b085      	sub	sp, #20
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eb8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	699b      	ldr	r3, [r3, #24]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d11f      	bne.n	8007f02 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	2b03      	cmp	r3, #3
 8007ec6:	d855      	bhi.n	8007f74 <DMA_CheckFifoParam+0xcc>
 8007ec8:	a201      	add	r2, pc, #4	; (adr r2, 8007ed0 <DMA_CheckFifoParam+0x28>)
 8007eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ece:	bf00      	nop
 8007ed0:	08007ee1 	.word	0x08007ee1
 8007ed4:	08007ef3 	.word	0x08007ef3
 8007ed8:	08007ee1 	.word	0x08007ee1
 8007edc:	08007f75 	.word	0x08007f75
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ee4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d045      	beq.n	8007f78 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8007eec:	2301      	movs	r3, #1
 8007eee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007ef0:	e042      	b.n	8007f78 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ef6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007efa:	d13f      	bne.n	8007f7c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8007efc:	2301      	movs	r3, #1
 8007efe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007f00:	e03c      	b.n	8007f7c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	699b      	ldr	r3, [r3, #24]
 8007f06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f0a:	d121      	bne.n	8007f50 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	2b03      	cmp	r3, #3
 8007f10:	d836      	bhi.n	8007f80 <DMA_CheckFifoParam+0xd8>
 8007f12:	a201      	add	r2, pc, #4	; (adr r2, 8007f18 <DMA_CheckFifoParam+0x70>)
 8007f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f18:	08007f29 	.word	0x08007f29
 8007f1c:	08007f2f 	.word	0x08007f2f
 8007f20:	08007f29 	.word	0x08007f29
 8007f24:	08007f41 	.word	0x08007f41
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007f28:	2301      	movs	r3, #1
 8007f2a:	73fb      	strb	r3, [r7, #15]
      break;
 8007f2c:	e02f      	b.n	8007f8e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d024      	beq.n	8007f84 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007f3e:	e021      	b.n	8007f84 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f44:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007f48:	d11e      	bne.n	8007f88 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007f4e:	e01b      	b.n	8007f88 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	2b02      	cmp	r3, #2
 8007f54:	d902      	bls.n	8007f5c <DMA_CheckFifoParam+0xb4>
 8007f56:	2b03      	cmp	r3, #3
 8007f58:	d003      	beq.n	8007f62 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007f5a:	e018      	b.n	8007f8e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	73fb      	strb	r3, [r7, #15]
      break;
 8007f60:	e015      	b.n	8007f8e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d00e      	beq.n	8007f8c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8007f6e:	2301      	movs	r3, #1
 8007f70:	73fb      	strb	r3, [r7, #15]
      break;
 8007f72:	e00b      	b.n	8007f8c <DMA_CheckFifoParam+0xe4>
      break;
 8007f74:	bf00      	nop
 8007f76:	e00a      	b.n	8007f8e <DMA_CheckFifoParam+0xe6>
      break;
 8007f78:	bf00      	nop
 8007f7a:	e008      	b.n	8007f8e <DMA_CheckFifoParam+0xe6>
      break;
 8007f7c:	bf00      	nop
 8007f7e:	e006      	b.n	8007f8e <DMA_CheckFifoParam+0xe6>
      break;
 8007f80:	bf00      	nop
 8007f82:	e004      	b.n	8007f8e <DMA_CheckFifoParam+0xe6>
      break;
 8007f84:	bf00      	nop
 8007f86:	e002      	b.n	8007f8e <DMA_CheckFifoParam+0xe6>
      break;   
 8007f88:	bf00      	nop
 8007f8a:	e000      	b.n	8007f8e <DMA_CheckFifoParam+0xe6>
      break;
 8007f8c:	bf00      	nop
    }
  } 
  
  return status; 
 8007f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	3714      	adds	r7, #20
 8007f94:	46bd      	mov	sp, r7
 8007f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9a:	4770      	bx	lr

08007f9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b089      	sub	sp, #36	; 0x24
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
 8007fa4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007faa:	2300      	movs	r3, #0
 8007fac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	61fb      	str	r3, [r7, #28]
 8007fb6:	e16b      	b.n	8008290 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007fb8:	2201      	movs	r2, #1
 8007fba:	69fb      	ldr	r3, [r7, #28]
 8007fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8007fc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	697a      	ldr	r2, [r7, #20]
 8007fc8:	4013      	ands	r3, r2
 8007fca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007fcc:	693a      	ldr	r2, [r7, #16]
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	429a      	cmp	r2, r3
 8007fd2:	f040 815a 	bne.w	800828a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	685b      	ldr	r3, [r3, #4]
 8007fda:	2b01      	cmp	r3, #1
 8007fdc:	d00b      	beq.n	8007ff6 <HAL_GPIO_Init+0x5a>
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	685b      	ldr	r3, [r3, #4]
 8007fe2:	2b02      	cmp	r3, #2
 8007fe4:	d007      	beq.n	8007ff6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007fea:	2b11      	cmp	r3, #17
 8007fec:	d003      	beq.n	8007ff6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	685b      	ldr	r3, [r3, #4]
 8007ff2:	2b12      	cmp	r3, #18
 8007ff4:	d130      	bne.n	8008058 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	689b      	ldr	r3, [r3, #8]
 8007ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007ffc:	69fb      	ldr	r3, [r7, #28]
 8007ffe:	005b      	lsls	r3, r3, #1
 8008000:	2203      	movs	r2, #3
 8008002:	fa02 f303 	lsl.w	r3, r2, r3
 8008006:	43db      	mvns	r3, r3
 8008008:	69ba      	ldr	r2, [r7, #24]
 800800a:	4013      	ands	r3, r2
 800800c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	68da      	ldr	r2, [r3, #12]
 8008012:	69fb      	ldr	r3, [r7, #28]
 8008014:	005b      	lsls	r3, r3, #1
 8008016:	fa02 f303 	lsl.w	r3, r2, r3
 800801a:	69ba      	ldr	r2, [r7, #24]
 800801c:	4313      	orrs	r3, r2
 800801e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	69ba      	ldr	r2, [r7, #24]
 8008024:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	685b      	ldr	r3, [r3, #4]
 800802a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800802c:	2201      	movs	r2, #1
 800802e:	69fb      	ldr	r3, [r7, #28]
 8008030:	fa02 f303 	lsl.w	r3, r2, r3
 8008034:	43db      	mvns	r3, r3
 8008036:	69ba      	ldr	r2, [r7, #24]
 8008038:	4013      	ands	r3, r2
 800803a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	685b      	ldr	r3, [r3, #4]
 8008040:	091b      	lsrs	r3, r3, #4
 8008042:	f003 0201 	and.w	r2, r3, #1
 8008046:	69fb      	ldr	r3, [r7, #28]
 8008048:	fa02 f303 	lsl.w	r3, r2, r3
 800804c:	69ba      	ldr	r2, [r7, #24]
 800804e:	4313      	orrs	r3, r2
 8008050:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	69ba      	ldr	r2, [r7, #24]
 8008056:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	68db      	ldr	r3, [r3, #12]
 800805c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800805e:	69fb      	ldr	r3, [r7, #28]
 8008060:	005b      	lsls	r3, r3, #1
 8008062:	2203      	movs	r2, #3
 8008064:	fa02 f303 	lsl.w	r3, r2, r3
 8008068:	43db      	mvns	r3, r3
 800806a:	69ba      	ldr	r2, [r7, #24]
 800806c:	4013      	ands	r3, r2
 800806e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	689a      	ldr	r2, [r3, #8]
 8008074:	69fb      	ldr	r3, [r7, #28]
 8008076:	005b      	lsls	r3, r3, #1
 8008078:	fa02 f303 	lsl.w	r3, r2, r3
 800807c:	69ba      	ldr	r2, [r7, #24]
 800807e:	4313      	orrs	r3, r2
 8008080:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	69ba      	ldr	r2, [r7, #24]
 8008086:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	685b      	ldr	r3, [r3, #4]
 800808c:	2b02      	cmp	r3, #2
 800808e:	d003      	beq.n	8008098 <HAL_GPIO_Init+0xfc>
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	685b      	ldr	r3, [r3, #4]
 8008094:	2b12      	cmp	r3, #18
 8008096:	d123      	bne.n	80080e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008098:	69fb      	ldr	r3, [r7, #28]
 800809a:	08da      	lsrs	r2, r3, #3
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	3208      	adds	r2, #8
 80080a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80080a6:	69fb      	ldr	r3, [r7, #28]
 80080a8:	f003 0307 	and.w	r3, r3, #7
 80080ac:	009b      	lsls	r3, r3, #2
 80080ae:	220f      	movs	r2, #15
 80080b0:	fa02 f303 	lsl.w	r3, r2, r3
 80080b4:	43db      	mvns	r3, r3
 80080b6:	69ba      	ldr	r2, [r7, #24]
 80080b8:	4013      	ands	r3, r2
 80080ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	691a      	ldr	r2, [r3, #16]
 80080c0:	69fb      	ldr	r3, [r7, #28]
 80080c2:	f003 0307 	and.w	r3, r3, #7
 80080c6:	009b      	lsls	r3, r3, #2
 80080c8:	fa02 f303 	lsl.w	r3, r2, r3
 80080cc:	69ba      	ldr	r2, [r7, #24]
 80080ce:	4313      	orrs	r3, r2
 80080d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80080d2:	69fb      	ldr	r3, [r7, #28]
 80080d4:	08da      	lsrs	r2, r3, #3
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	3208      	adds	r2, #8
 80080da:	69b9      	ldr	r1, [r7, #24]
 80080dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80080e6:	69fb      	ldr	r3, [r7, #28]
 80080e8:	005b      	lsls	r3, r3, #1
 80080ea:	2203      	movs	r2, #3
 80080ec:	fa02 f303 	lsl.w	r3, r2, r3
 80080f0:	43db      	mvns	r3, r3
 80080f2:	69ba      	ldr	r2, [r7, #24]
 80080f4:	4013      	ands	r3, r2
 80080f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	685b      	ldr	r3, [r3, #4]
 80080fc:	f003 0203 	and.w	r2, r3, #3
 8008100:	69fb      	ldr	r3, [r7, #28]
 8008102:	005b      	lsls	r3, r3, #1
 8008104:	fa02 f303 	lsl.w	r3, r2, r3
 8008108:	69ba      	ldr	r2, [r7, #24]
 800810a:	4313      	orrs	r3, r2
 800810c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	69ba      	ldr	r2, [r7, #24]
 8008112:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	685b      	ldr	r3, [r3, #4]
 8008118:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800811c:	2b00      	cmp	r3, #0
 800811e:	f000 80b4 	beq.w	800828a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008122:	2300      	movs	r3, #0
 8008124:	60fb      	str	r3, [r7, #12]
 8008126:	4b5f      	ldr	r3, [pc, #380]	; (80082a4 <HAL_GPIO_Init+0x308>)
 8008128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800812a:	4a5e      	ldr	r2, [pc, #376]	; (80082a4 <HAL_GPIO_Init+0x308>)
 800812c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008130:	6453      	str	r3, [r2, #68]	; 0x44
 8008132:	4b5c      	ldr	r3, [pc, #368]	; (80082a4 <HAL_GPIO_Init+0x308>)
 8008134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008136:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800813a:	60fb      	str	r3, [r7, #12]
 800813c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800813e:	4a5a      	ldr	r2, [pc, #360]	; (80082a8 <HAL_GPIO_Init+0x30c>)
 8008140:	69fb      	ldr	r3, [r7, #28]
 8008142:	089b      	lsrs	r3, r3, #2
 8008144:	3302      	adds	r3, #2
 8008146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800814a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800814c:	69fb      	ldr	r3, [r7, #28]
 800814e:	f003 0303 	and.w	r3, r3, #3
 8008152:	009b      	lsls	r3, r3, #2
 8008154:	220f      	movs	r2, #15
 8008156:	fa02 f303 	lsl.w	r3, r2, r3
 800815a:	43db      	mvns	r3, r3
 800815c:	69ba      	ldr	r2, [r7, #24]
 800815e:	4013      	ands	r3, r2
 8008160:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	4a51      	ldr	r2, [pc, #324]	; (80082ac <HAL_GPIO_Init+0x310>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d02b      	beq.n	80081c2 <HAL_GPIO_Init+0x226>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	4a50      	ldr	r2, [pc, #320]	; (80082b0 <HAL_GPIO_Init+0x314>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d025      	beq.n	80081be <HAL_GPIO_Init+0x222>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	4a4f      	ldr	r2, [pc, #316]	; (80082b4 <HAL_GPIO_Init+0x318>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d01f      	beq.n	80081ba <HAL_GPIO_Init+0x21e>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	4a4e      	ldr	r2, [pc, #312]	; (80082b8 <HAL_GPIO_Init+0x31c>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d019      	beq.n	80081b6 <HAL_GPIO_Init+0x21a>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	4a4d      	ldr	r2, [pc, #308]	; (80082bc <HAL_GPIO_Init+0x320>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d013      	beq.n	80081b2 <HAL_GPIO_Init+0x216>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	4a4c      	ldr	r2, [pc, #304]	; (80082c0 <HAL_GPIO_Init+0x324>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d00d      	beq.n	80081ae <HAL_GPIO_Init+0x212>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	4a4b      	ldr	r2, [pc, #300]	; (80082c4 <HAL_GPIO_Init+0x328>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d007      	beq.n	80081aa <HAL_GPIO_Init+0x20e>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	4a4a      	ldr	r2, [pc, #296]	; (80082c8 <HAL_GPIO_Init+0x32c>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d101      	bne.n	80081a6 <HAL_GPIO_Init+0x20a>
 80081a2:	2307      	movs	r3, #7
 80081a4:	e00e      	b.n	80081c4 <HAL_GPIO_Init+0x228>
 80081a6:	2308      	movs	r3, #8
 80081a8:	e00c      	b.n	80081c4 <HAL_GPIO_Init+0x228>
 80081aa:	2306      	movs	r3, #6
 80081ac:	e00a      	b.n	80081c4 <HAL_GPIO_Init+0x228>
 80081ae:	2305      	movs	r3, #5
 80081b0:	e008      	b.n	80081c4 <HAL_GPIO_Init+0x228>
 80081b2:	2304      	movs	r3, #4
 80081b4:	e006      	b.n	80081c4 <HAL_GPIO_Init+0x228>
 80081b6:	2303      	movs	r3, #3
 80081b8:	e004      	b.n	80081c4 <HAL_GPIO_Init+0x228>
 80081ba:	2302      	movs	r3, #2
 80081bc:	e002      	b.n	80081c4 <HAL_GPIO_Init+0x228>
 80081be:	2301      	movs	r3, #1
 80081c0:	e000      	b.n	80081c4 <HAL_GPIO_Init+0x228>
 80081c2:	2300      	movs	r3, #0
 80081c4:	69fa      	ldr	r2, [r7, #28]
 80081c6:	f002 0203 	and.w	r2, r2, #3
 80081ca:	0092      	lsls	r2, r2, #2
 80081cc:	4093      	lsls	r3, r2
 80081ce:	69ba      	ldr	r2, [r7, #24]
 80081d0:	4313      	orrs	r3, r2
 80081d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80081d4:	4934      	ldr	r1, [pc, #208]	; (80082a8 <HAL_GPIO_Init+0x30c>)
 80081d6:	69fb      	ldr	r3, [r7, #28]
 80081d8:	089b      	lsrs	r3, r3, #2
 80081da:	3302      	adds	r3, #2
 80081dc:	69ba      	ldr	r2, [r7, #24]
 80081de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80081e2:	4b3a      	ldr	r3, [pc, #232]	; (80082cc <HAL_GPIO_Init+0x330>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	43db      	mvns	r3, r3
 80081ec:	69ba      	ldr	r2, [r7, #24]
 80081ee:	4013      	ands	r3, r2
 80081f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	685b      	ldr	r3, [r3, #4]
 80081f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d003      	beq.n	8008206 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80081fe:	69ba      	ldr	r2, [r7, #24]
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	4313      	orrs	r3, r2
 8008204:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008206:	4a31      	ldr	r2, [pc, #196]	; (80082cc <HAL_GPIO_Init+0x330>)
 8008208:	69bb      	ldr	r3, [r7, #24]
 800820a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800820c:	4b2f      	ldr	r3, [pc, #188]	; (80082cc <HAL_GPIO_Init+0x330>)
 800820e:	685b      	ldr	r3, [r3, #4]
 8008210:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	43db      	mvns	r3, r3
 8008216:	69ba      	ldr	r2, [r7, #24]
 8008218:	4013      	ands	r3, r2
 800821a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	685b      	ldr	r3, [r3, #4]
 8008220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008224:	2b00      	cmp	r3, #0
 8008226:	d003      	beq.n	8008230 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8008228:	69ba      	ldr	r2, [r7, #24]
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	4313      	orrs	r3, r2
 800822e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008230:	4a26      	ldr	r2, [pc, #152]	; (80082cc <HAL_GPIO_Init+0x330>)
 8008232:	69bb      	ldr	r3, [r7, #24]
 8008234:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008236:	4b25      	ldr	r3, [pc, #148]	; (80082cc <HAL_GPIO_Init+0x330>)
 8008238:	689b      	ldr	r3, [r3, #8]
 800823a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	43db      	mvns	r3, r3
 8008240:	69ba      	ldr	r2, [r7, #24]
 8008242:	4013      	ands	r3, r2
 8008244:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	685b      	ldr	r3, [r3, #4]
 800824a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800824e:	2b00      	cmp	r3, #0
 8008250:	d003      	beq.n	800825a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8008252:	69ba      	ldr	r2, [r7, #24]
 8008254:	693b      	ldr	r3, [r7, #16]
 8008256:	4313      	orrs	r3, r2
 8008258:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800825a:	4a1c      	ldr	r2, [pc, #112]	; (80082cc <HAL_GPIO_Init+0x330>)
 800825c:	69bb      	ldr	r3, [r7, #24]
 800825e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008260:	4b1a      	ldr	r3, [pc, #104]	; (80082cc <HAL_GPIO_Init+0x330>)
 8008262:	68db      	ldr	r3, [r3, #12]
 8008264:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008266:	693b      	ldr	r3, [r7, #16]
 8008268:	43db      	mvns	r3, r3
 800826a:	69ba      	ldr	r2, [r7, #24]
 800826c:	4013      	ands	r3, r2
 800826e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	685b      	ldr	r3, [r3, #4]
 8008274:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008278:	2b00      	cmp	r3, #0
 800827a:	d003      	beq.n	8008284 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800827c:	69ba      	ldr	r2, [r7, #24]
 800827e:	693b      	ldr	r3, [r7, #16]
 8008280:	4313      	orrs	r3, r2
 8008282:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008284:	4a11      	ldr	r2, [pc, #68]	; (80082cc <HAL_GPIO_Init+0x330>)
 8008286:	69bb      	ldr	r3, [r7, #24]
 8008288:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800828a:	69fb      	ldr	r3, [r7, #28]
 800828c:	3301      	adds	r3, #1
 800828e:	61fb      	str	r3, [r7, #28]
 8008290:	69fb      	ldr	r3, [r7, #28]
 8008292:	2b0f      	cmp	r3, #15
 8008294:	f67f ae90 	bls.w	8007fb8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008298:	bf00      	nop
 800829a:	3724      	adds	r7, #36	; 0x24
 800829c:	46bd      	mov	sp, r7
 800829e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a2:	4770      	bx	lr
 80082a4:	40023800 	.word	0x40023800
 80082a8:	40013800 	.word	0x40013800
 80082ac:	40020000 	.word	0x40020000
 80082b0:	40020400 	.word	0x40020400
 80082b4:	40020800 	.word	0x40020800
 80082b8:	40020c00 	.word	0x40020c00
 80082bc:	40021000 	.word	0x40021000
 80082c0:	40021400 	.word	0x40021400
 80082c4:	40021800 	.word	0x40021800
 80082c8:	40021c00 	.word	0x40021c00
 80082cc:	40013c00 	.word	0x40013c00

080082d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b084      	sub	sp, #16
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d101      	bne.n	80082e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80082de:	2301      	movs	r3, #1
 80082e0:	e11f      	b.n	8008522 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082e8:	b2db      	uxtb	r3, r3
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d106      	bne.n	80082fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2200      	movs	r2, #0
 80082f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f7fb fa18 	bl	800372c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2224      	movs	r2, #36	; 0x24
 8008300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	681a      	ldr	r2, [r3, #0]
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f022 0201 	bic.w	r2, r2, #1
 8008312:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	681a      	ldr	r2, [r3, #0]
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008322:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	681a      	ldr	r2, [r3, #0]
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008332:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008334:	f001 fbb6 	bl	8009aa4 <HAL_RCC_GetPCLK1Freq>
 8008338:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	685b      	ldr	r3, [r3, #4]
 800833e:	4a7b      	ldr	r2, [pc, #492]	; (800852c <HAL_I2C_Init+0x25c>)
 8008340:	4293      	cmp	r3, r2
 8008342:	d807      	bhi.n	8008354 <HAL_I2C_Init+0x84>
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	4a7a      	ldr	r2, [pc, #488]	; (8008530 <HAL_I2C_Init+0x260>)
 8008348:	4293      	cmp	r3, r2
 800834a:	bf94      	ite	ls
 800834c:	2301      	movls	r3, #1
 800834e:	2300      	movhi	r3, #0
 8008350:	b2db      	uxtb	r3, r3
 8008352:	e006      	b.n	8008362 <HAL_I2C_Init+0x92>
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	4a77      	ldr	r2, [pc, #476]	; (8008534 <HAL_I2C_Init+0x264>)
 8008358:	4293      	cmp	r3, r2
 800835a:	bf94      	ite	ls
 800835c:	2301      	movls	r3, #1
 800835e:	2300      	movhi	r3, #0
 8008360:	b2db      	uxtb	r3, r3
 8008362:	2b00      	cmp	r3, #0
 8008364:	d001      	beq.n	800836a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008366:	2301      	movs	r3, #1
 8008368:	e0db      	b.n	8008522 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	4a72      	ldr	r2, [pc, #456]	; (8008538 <HAL_I2C_Init+0x268>)
 800836e:	fba2 2303 	umull	r2, r3, r2, r3
 8008372:	0c9b      	lsrs	r3, r3, #18
 8008374:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	685b      	ldr	r3, [r3, #4]
 800837c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	68ba      	ldr	r2, [r7, #8]
 8008386:	430a      	orrs	r2, r1
 8008388:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	6a1b      	ldr	r3, [r3, #32]
 8008390:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	685b      	ldr	r3, [r3, #4]
 8008398:	4a64      	ldr	r2, [pc, #400]	; (800852c <HAL_I2C_Init+0x25c>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d802      	bhi.n	80083a4 <HAL_I2C_Init+0xd4>
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	3301      	adds	r3, #1
 80083a2:	e009      	b.n	80083b8 <HAL_I2C_Init+0xe8>
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80083aa:	fb02 f303 	mul.w	r3, r2, r3
 80083ae:	4a63      	ldr	r2, [pc, #396]	; (800853c <HAL_I2C_Init+0x26c>)
 80083b0:	fba2 2303 	umull	r2, r3, r2, r3
 80083b4:	099b      	lsrs	r3, r3, #6
 80083b6:	3301      	adds	r3, #1
 80083b8:	687a      	ldr	r2, [r7, #4]
 80083ba:	6812      	ldr	r2, [r2, #0]
 80083bc:	430b      	orrs	r3, r1
 80083be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	69db      	ldr	r3, [r3, #28]
 80083c6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80083ca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	685b      	ldr	r3, [r3, #4]
 80083d2:	4956      	ldr	r1, [pc, #344]	; (800852c <HAL_I2C_Init+0x25c>)
 80083d4:	428b      	cmp	r3, r1
 80083d6:	d80d      	bhi.n	80083f4 <HAL_I2C_Init+0x124>
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	1e59      	subs	r1, r3, #1
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	005b      	lsls	r3, r3, #1
 80083e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80083e6:	3301      	adds	r3, #1
 80083e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80083ec:	2b04      	cmp	r3, #4
 80083ee:	bf38      	it	cc
 80083f0:	2304      	movcc	r3, #4
 80083f2:	e04f      	b.n	8008494 <HAL_I2C_Init+0x1c4>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	689b      	ldr	r3, [r3, #8]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d111      	bne.n	8008420 <HAL_I2C_Init+0x150>
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	1e58      	subs	r0, r3, #1
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6859      	ldr	r1, [r3, #4]
 8008404:	460b      	mov	r3, r1
 8008406:	005b      	lsls	r3, r3, #1
 8008408:	440b      	add	r3, r1
 800840a:	fbb0 f3f3 	udiv	r3, r0, r3
 800840e:	3301      	adds	r3, #1
 8008410:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008414:	2b00      	cmp	r3, #0
 8008416:	bf0c      	ite	eq
 8008418:	2301      	moveq	r3, #1
 800841a:	2300      	movne	r3, #0
 800841c:	b2db      	uxtb	r3, r3
 800841e:	e012      	b.n	8008446 <HAL_I2C_Init+0x176>
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	1e58      	subs	r0, r3, #1
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6859      	ldr	r1, [r3, #4]
 8008428:	460b      	mov	r3, r1
 800842a:	009b      	lsls	r3, r3, #2
 800842c:	440b      	add	r3, r1
 800842e:	0099      	lsls	r1, r3, #2
 8008430:	440b      	add	r3, r1
 8008432:	fbb0 f3f3 	udiv	r3, r0, r3
 8008436:	3301      	adds	r3, #1
 8008438:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800843c:	2b00      	cmp	r3, #0
 800843e:	bf0c      	ite	eq
 8008440:	2301      	moveq	r3, #1
 8008442:	2300      	movne	r3, #0
 8008444:	b2db      	uxtb	r3, r3
 8008446:	2b00      	cmp	r3, #0
 8008448:	d001      	beq.n	800844e <HAL_I2C_Init+0x17e>
 800844a:	2301      	movs	r3, #1
 800844c:	e022      	b.n	8008494 <HAL_I2C_Init+0x1c4>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	689b      	ldr	r3, [r3, #8]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d10e      	bne.n	8008474 <HAL_I2C_Init+0x1a4>
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	1e58      	subs	r0, r3, #1
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6859      	ldr	r1, [r3, #4]
 800845e:	460b      	mov	r3, r1
 8008460:	005b      	lsls	r3, r3, #1
 8008462:	440b      	add	r3, r1
 8008464:	fbb0 f3f3 	udiv	r3, r0, r3
 8008468:	3301      	adds	r3, #1
 800846a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800846e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008472:	e00f      	b.n	8008494 <HAL_I2C_Init+0x1c4>
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	1e58      	subs	r0, r3, #1
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6859      	ldr	r1, [r3, #4]
 800847c:	460b      	mov	r3, r1
 800847e:	009b      	lsls	r3, r3, #2
 8008480:	440b      	add	r3, r1
 8008482:	0099      	lsls	r1, r3, #2
 8008484:	440b      	add	r3, r1
 8008486:	fbb0 f3f3 	udiv	r3, r0, r3
 800848a:	3301      	adds	r3, #1
 800848c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008490:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008494:	6879      	ldr	r1, [r7, #4]
 8008496:	6809      	ldr	r1, [r1, #0]
 8008498:	4313      	orrs	r3, r2
 800849a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	69da      	ldr	r2, [r3, #28]
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6a1b      	ldr	r3, [r3, #32]
 80084ae:	431a      	orrs	r2, r3
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	430a      	orrs	r2, r1
 80084b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	689b      	ldr	r3, [r3, #8]
 80084be:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80084c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80084c6:	687a      	ldr	r2, [r7, #4]
 80084c8:	6911      	ldr	r1, [r2, #16]
 80084ca:	687a      	ldr	r2, [r7, #4]
 80084cc:	68d2      	ldr	r2, [r2, #12]
 80084ce:	4311      	orrs	r1, r2
 80084d0:	687a      	ldr	r2, [r7, #4]
 80084d2:	6812      	ldr	r2, [r2, #0]
 80084d4:	430b      	orrs	r3, r1
 80084d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	68db      	ldr	r3, [r3, #12]
 80084de:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	695a      	ldr	r2, [r3, #20]
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	699b      	ldr	r3, [r3, #24]
 80084ea:	431a      	orrs	r2, r3
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	430a      	orrs	r2, r1
 80084f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	681a      	ldr	r2, [r3, #0]
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f042 0201 	orr.w	r2, r2, #1
 8008502:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2200      	movs	r2, #0
 8008508:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2220      	movs	r2, #32
 800850e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2200      	movs	r2, #0
 8008516:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2200      	movs	r2, #0
 800851c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008520:	2300      	movs	r3, #0
}
 8008522:	4618      	mov	r0, r3
 8008524:	3710      	adds	r7, #16
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}
 800852a:	bf00      	nop
 800852c:	000186a0 	.word	0x000186a0
 8008530:	001e847f 	.word	0x001e847f
 8008534:	003d08ff 	.word	0x003d08ff
 8008538:	431bde83 	.word	0x431bde83
 800853c:	10624dd3 	.word	0x10624dd3

08008540 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b088      	sub	sp, #32
 8008544:	af02      	add	r7, sp, #8
 8008546:	60f8      	str	r0, [r7, #12]
 8008548:	4608      	mov	r0, r1
 800854a:	4611      	mov	r1, r2
 800854c:	461a      	mov	r2, r3
 800854e:	4603      	mov	r3, r0
 8008550:	817b      	strh	r3, [r7, #10]
 8008552:	460b      	mov	r3, r1
 8008554:	813b      	strh	r3, [r7, #8]
 8008556:	4613      	mov	r3, r2
 8008558:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800855a:	f7fe fc5b 	bl	8006e14 <HAL_GetTick>
 800855e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008566:	b2db      	uxtb	r3, r3
 8008568:	2b20      	cmp	r3, #32
 800856a:	f040 80d9 	bne.w	8008720 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	9300      	str	r3, [sp, #0]
 8008572:	2319      	movs	r3, #25
 8008574:	2201      	movs	r2, #1
 8008576:	496d      	ldr	r1, [pc, #436]	; (800872c <HAL_I2C_Mem_Write+0x1ec>)
 8008578:	68f8      	ldr	r0, [r7, #12]
 800857a:	f000 fc7b 	bl	8008e74 <I2C_WaitOnFlagUntilTimeout>
 800857e:	4603      	mov	r3, r0
 8008580:	2b00      	cmp	r3, #0
 8008582:	d001      	beq.n	8008588 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8008584:	2302      	movs	r3, #2
 8008586:	e0cc      	b.n	8008722 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800858e:	2b01      	cmp	r3, #1
 8008590:	d101      	bne.n	8008596 <HAL_I2C_Mem_Write+0x56>
 8008592:	2302      	movs	r3, #2
 8008594:	e0c5      	b.n	8008722 <HAL_I2C_Mem_Write+0x1e2>
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	2201      	movs	r2, #1
 800859a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f003 0301 	and.w	r3, r3, #1
 80085a8:	2b01      	cmp	r3, #1
 80085aa:	d007      	beq.n	80085bc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	681a      	ldr	r2, [r3, #0]
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f042 0201 	orr.w	r2, r2, #1
 80085ba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	681a      	ldr	r2, [r3, #0]
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80085ca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	2221      	movs	r2, #33	; 0x21
 80085d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	2240      	movs	r2, #64	; 0x40
 80085d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	2200      	movs	r2, #0
 80085e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	6a3a      	ldr	r2, [r7, #32]
 80085e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80085ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085f2:	b29a      	uxth	r2, r3
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	4a4d      	ldr	r2, [pc, #308]	; (8008730 <HAL_I2C_Mem_Write+0x1f0>)
 80085fc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80085fe:	88f8      	ldrh	r0, [r7, #6]
 8008600:	893a      	ldrh	r2, [r7, #8]
 8008602:	8979      	ldrh	r1, [r7, #10]
 8008604:	697b      	ldr	r3, [r7, #20]
 8008606:	9301      	str	r3, [sp, #4]
 8008608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800860a:	9300      	str	r3, [sp, #0]
 800860c:	4603      	mov	r3, r0
 800860e:	68f8      	ldr	r0, [r7, #12]
 8008610:	f000 fab6 	bl	8008b80 <I2C_RequestMemoryWrite>
 8008614:	4603      	mov	r3, r0
 8008616:	2b00      	cmp	r3, #0
 8008618:	d052      	beq.n	80086c0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800861a:	2301      	movs	r3, #1
 800861c:	e081      	b.n	8008722 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800861e:	697a      	ldr	r2, [r7, #20]
 8008620:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008622:	68f8      	ldr	r0, [r7, #12]
 8008624:	f000 fcfc 	bl	8009020 <I2C_WaitOnTXEFlagUntilTimeout>
 8008628:	4603      	mov	r3, r0
 800862a:	2b00      	cmp	r3, #0
 800862c:	d00d      	beq.n	800864a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008632:	2b04      	cmp	r3, #4
 8008634:	d107      	bne.n	8008646 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	681a      	ldr	r2, [r3, #0]
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008644:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008646:	2301      	movs	r3, #1
 8008648:	e06b      	b.n	8008722 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800864e:	781a      	ldrb	r2, [r3, #0]
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800865a:	1c5a      	adds	r2, r3, #1
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008664:	3b01      	subs	r3, #1
 8008666:	b29a      	uxth	r2, r3
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008670:	b29b      	uxth	r3, r3
 8008672:	3b01      	subs	r3, #1
 8008674:	b29a      	uxth	r2, r3
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	695b      	ldr	r3, [r3, #20]
 8008680:	f003 0304 	and.w	r3, r3, #4
 8008684:	2b04      	cmp	r3, #4
 8008686:	d11b      	bne.n	80086c0 <HAL_I2C_Mem_Write+0x180>
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800868c:	2b00      	cmp	r3, #0
 800868e:	d017      	beq.n	80086c0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008694:	781a      	ldrb	r2, [r3, #0]
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086a0:	1c5a      	adds	r2, r3, #1
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086aa:	3b01      	subs	r3, #1
 80086ac:	b29a      	uxth	r2, r3
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086b6:	b29b      	uxth	r3, r3
 80086b8:	3b01      	subs	r3, #1
 80086ba:	b29a      	uxth	r2, r3
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d1aa      	bne.n	800861e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80086c8:	697a      	ldr	r2, [r7, #20]
 80086ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80086cc:	68f8      	ldr	r0, [r7, #12]
 80086ce:	f000 fce8 	bl	80090a2 <I2C_WaitOnBTFFlagUntilTimeout>
 80086d2:	4603      	mov	r3, r0
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d00d      	beq.n	80086f4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086dc:	2b04      	cmp	r3, #4
 80086de:	d107      	bne.n	80086f0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	681a      	ldr	r2, [r3, #0]
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80086ee:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80086f0:	2301      	movs	r3, #1
 80086f2:	e016      	b.n	8008722 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	681a      	ldr	r2, [r3, #0]
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008702:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	2220      	movs	r2, #32
 8008708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	2200      	movs	r2, #0
 8008710:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	2200      	movs	r2, #0
 8008718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800871c:	2300      	movs	r3, #0
 800871e:	e000      	b.n	8008722 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8008720:	2302      	movs	r3, #2
  }
}
 8008722:	4618      	mov	r0, r3
 8008724:	3718      	adds	r7, #24
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}
 800872a:	bf00      	nop
 800872c:	00100002 	.word	0x00100002
 8008730:	ffff0000 	.word	0xffff0000

08008734 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b08c      	sub	sp, #48	; 0x30
 8008738:	af02      	add	r7, sp, #8
 800873a:	60f8      	str	r0, [r7, #12]
 800873c:	4608      	mov	r0, r1
 800873e:	4611      	mov	r1, r2
 8008740:	461a      	mov	r2, r3
 8008742:	4603      	mov	r3, r0
 8008744:	817b      	strh	r3, [r7, #10]
 8008746:	460b      	mov	r3, r1
 8008748:	813b      	strh	r3, [r7, #8]
 800874a:	4613      	mov	r3, r2
 800874c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800874e:	f7fe fb61 	bl	8006e14 <HAL_GetTick>
 8008752:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800875a:	b2db      	uxtb	r3, r3
 800875c:	2b20      	cmp	r3, #32
 800875e:	f040 8208 	bne.w	8008b72 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008764:	9300      	str	r3, [sp, #0]
 8008766:	2319      	movs	r3, #25
 8008768:	2201      	movs	r2, #1
 800876a:	497b      	ldr	r1, [pc, #492]	; (8008958 <HAL_I2C_Mem_Read+0x224>)
 800876c:	68f8      	ldr	r0, [r7, #12]
 800876e:	f000 fb81 	bl	8008e74 <I2C_WaitOnFlagUntilTimeout>
 8008772:	4603      	mov	r3, r0
 8008774:	2b00      	cmp	r3, #0
 8008776:	d001      	beq.n	800877c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8008778:	2302      	movs	r3, #2
 800877a:	e1fb      	b.n	8008b74 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008782:	2b01      	cmp	r3, #1
 8008784:	d101      	bne.n	800878a <HAL_I2C_Mem_Read+0x56>
 8008786:	2302      	movs	r3, #2
 8008788:	e1f4      	b.n	8008b74 <HAL_I2C_Mem_Read+0x440>
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	2201      	movs	r2, #1
 800878e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f003 0301 	and.w	r3, r3, #1
 800879c:	2b01      	cmp	r3, #1
 800879e:	d007      	beq.n	80087b0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	681a      	ldr	r2, [r3, #0]
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f042 0201 	orr.w	r2, r2, #1
 80087ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	681a      	ldr	r2, [r3, #0]
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80087be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	2222      	movs	r2, #34	; 0x22
 80087c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	2240      	movs	r2, #64	; 0x40
 80087cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	2200      	movs	r2, #0
 80087d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80087e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087e6:	b29a      	uxth	r2, r3
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	4a5b      	ldr	r2, [pc, #364]	; (800895c <HAL_I2C_Mem_Read+0x228>)
 80087f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80087f2:	88f8      	ldrh	r0, [r7, #6]
 80087f4:	893a      	ldrh	r2, [r7, #8]
 80087f6:	8979      	ldrh	r1, [r7, #10]
 80087f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087fa:	9301      	str	r3, [sp, #4]
 80087fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087fe:	9300      	str	r3, [sp, #0]
 8008800:	4603      	mov	r3, r0
 8008802:	68f8      	ldr	r0, [r7, #12]
 8008804:	f000 fa50 	bl	8008ca8 <I2C_RequestMemoryRead>
 8008808:	4603      	mov	r3, r0
 800880a:	2b00      	cmp	r3, #0
 800880c:	d001      	beq.n	8008812 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800880e:	2301      	movs	r3, #1
 8008810:	e1b0      	b.n	8008b74 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008816:	2b00      	cmp	r3, #0
 8008818:	d113      	bne.n	8008842 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800881a:	2300      	movs	r3, #0
 800881c:	623b      	str	r3, [r7, #32]
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	695b      	ldr	r3, [r3, #20]
 8008824:	623b      	str	r3, [r7, #32]
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	699b      	ldr	r3, [r3, #24]
 800882c:	623b      	str	r3, [r7, #32]
 800882e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	681a      	ldr	r2, [r3, #0]
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800883e:	601a      	str	r2, [r3, #0]
 8008840:	e184      	b.n	8008b4c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008846:	2b01      	cmp	r3, #1
 8008848:	d11b      	bne.n	8008882 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	681a      	ldr	r2, [r3, #0]
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008858:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800885a:	2300      	movs	r3, #0
 800885c:	61fb      	str	r3, [r7, #28]
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	695b      	ldr	r3, [r3, #20]
 8008864:	61fb      	str	r3, [r7, #28]
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	699b      	ldr	r3, [r3, #24]
 800886c:	61fb      	str	r3, [r7, #28]
 800886e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	681a      	ldr	r2, [r3, #0]
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800887e:	601a      	str	r2, [r3, #0]
 8008880:	e164      	b.n	8008b4c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008886:	2b02      	cmp	r3, #2
 8008888:	d11b      	bne.n	80088c2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	681a      	ldr	r2, [r3, #0]
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008898:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	681a      	ldr	r2, [r3, #0]
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80088a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80088aa:	2300      	movs	r3, #0
 80088ac:	61bb      	str	r3, [r7, #24]
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	695b      	ldr	r3, [r3, #20]
 80088b4:	61bb      	str	r3, [r7, #24]
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	699b      	ldr	r3, [r3, #24]
 80088bc:	61bb      	str	r3, [r7, #24]
 80088be:	69bb      	ldr	r3, [r7, #24]
 80088c0:	e144      	b.n	8008b4c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80088c2:	2300      	movs	r3, #0
 80088c4:	617b      	str	r3, [r7, #20]
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	695b      	ldr	r3, [r3, #20]
 80088cc:	617b      	str	r3, [r7, #20]
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	699b      	ldr	r3, [r3, #24]
 80088d4:	617b      	str	r3, [r7, #20]
 80088d6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80088d8:	e138      	b.n	8008b4c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088de:	2b03      	cmp	r3, #3
 80088e0:	f200 80f1 	bhi.w	8008ac6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088e8:	2b01      	cmp	r3, #1
 80088ea:	d123      	bne.n	8008934 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80088ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80088f0:	68f8      	ldr	r0, [r7, #12]
 80088f2:	f000 fc17 	bl	8009124 <I2C_WaitOnRXNEFlagUntilTimeout>
 80088f6:	4603      	mov	r3, r0
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d001      	beq.n	8008900 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80088fc:	2301      	movs	r3, #1
 80088fe:	e139      	b.n	8008b74 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	691a      	ldr	r2, [r3, #16]
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800890a:	b2d2      	uxtb	r2, r2
 800890c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008912:	1c5a      	adds	r2, r3, #1
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800891c:	3b01      	subs	r3, #1
 800891e:	b29a      	uxth	r2, r3
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008928:	b29b      	uxth	r3, r3
 800892a:	3b01      	subs	r3, #1
 800892c:	b29a      	uxth	r2, r3
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008932:	e10b      	b.n	8008b4c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008938:	2b02      	cmp	r3, #2
 800893a:	d14e      	bne.n	80089da <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800893c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800893e:	9300      	str	r3, [sp, #0]
 8008940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008942:	2200      	movs	r2, #0
 8008944:	4906      	ldr	r1, [pc, #24]	; (8008960 <HAL_I2C_Mem_Read+0x22c>)
 8008946:	68f8      	ldr	r0, [r7, #12]
 8008948:	f000 fa94 	bl	8008e74 <I2C_WaitOnFlagUntilTimeout>
 800894c:	4603      	mov	r3, r0
 800894e:	2b00      	cmp	r3, #0
 8008950:	d008      	beq.n	8008964 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8008952:	2301      	movs	r3, #1
 8008954:	e10e      	b.n	8008b74 <HAL_I2C_Mem_Read+0x440>
 8008956:	bf00      	nop
 8008958:	00100002 	.word	0x00100002
 800895c:	ffff0000 	.word	0xffff0000
 8008960:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	681a      	ldr	r2, [r3, #0]
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008972:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	691a      	ldr	r2, [r3, #16]
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800897e:	b2d2      	uxtb	r2, r2
 8008980:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008986:	1c5a      	adds	r2, r3, #1
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008990:	3b01      	subs	r3, #1
 8008992:	b29a      	uxth	r2, r3
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800899c:	b29b      	uxth	r3, r3
 800899e:	3b01      	subs	r3, #1
 80089a0:	b29a      	uxth	r2, r3
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	691a      	ldr	r2, [r3, #16]
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089b0:	b2d2      	uxtb	r2, r2
 80089b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089b8:	1c5a      	adds	r2, r3, #1
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089c2:	3b01      	subs	r3, #1
 80089c4:	b29a      	uxth	r2, r3
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089ce:	b29b      	uxth	r3, r3
 80089d0:	3b01      	subs	r3, #1
 80089d2:	b29a      	uxth	r2, r3
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80089d8:	e0b8      	b.n	8008b4c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80089da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089dc:	9300      	str	r3, [sp, #0]
 80089de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089e0:	2200      	movs	r2, #0
 80089e2:	4966      	ldr	r1, [pc, #408]	; (8008b7c <HAL_I2C_Mem_Read+0x448>)
 80089e4:	68f8      	ldr	r0, [r7, #12]
 80089e6:	f000 fa45 	bl	8008e74 <I2C_WaitOnFlagUntilTimeout>
 80089ea:	4603      	mov	r3, r0
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d001      	beq.n	80089f4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80089f0:	2301      	movs	r3, #1
 80089f2:	e0bf      	b.n	8008b74 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	681a      	ldr	r2, [r3, #0]
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a02:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	691a      	ldr	r2, [r3, #16]
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a0e:	b2d2      	uxtb	r2, r2
 8008a10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a16:	1c5a      	adds	r2, r3, #1
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a20:	3b01      	subs	r3, #1
 8008a22:	b29a      	uxth	r2, r3
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a2c:	b29b      	uxth	r3, r3
 8008a2e:	3b01      	subs	r3, #1
 8008a30:	b29a      	uxth	r2, r3
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a38:	9300      	str	r3, [sp, #0]
 8008a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	494f      	ldr	r1, [pc, #316]	; (8008b7c <HAL_I2C_Mem_Read+0x448>)
 8008a40:	68f8      	ldr	r0, [r7, #12]
 8008a42:	f000 fa17 	bl	8008e74 <I2C_WaitOnFlagUntilTimeout>
 8008a46:	4603      	mov	r3, r0
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d001      	beq.n	8008a50 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	e091      	b.n	8008b74 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	681a      	ldr	r2, [r3, #0]
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008a5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	691a      	ldr	r2, [r3, #16]
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a6a:	b2d2      	uxtb	r2, r2
 8008a6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a72:	1c5a      	adds	r2, r3, #1
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a7c:	3b01      	subs	r3, #1
 8008a7e:	b29a      	uxth	r2, r3
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a88:	b29b      	uxth	r3, r3
 8008a8a:	3b01      	subs	r3, #1
 8008a8c:	b29a      	uxth	r2, r3
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	691a      	ldr	r2, [r3, #16]
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a9c:	b2d2      	uxtb	r2, r2
 8008a9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aa4:	1c5a      	adds	r2, r3, #1
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008aae:	3b01      	subs	r3, #1
 8008ab0:	b29a      	uxth	r2, r3
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008aba:	b29b      	uxth	r3, r3
 8008abc:	3b01      	subs	r3, #1
 8008abe:	b29a      	uxth	r2, r3
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008ac4:	e042      	b.n	8008b4c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008ac6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ac8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008aca:	68f8      	ldr	r0, [r7, #12]
 8008acc:	f000 fb2a 	bl	8009124 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d001      	beq.n	8008ada <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	e04c      	b.n	8008b74 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	691a      	ldr	r2, [r3, #16]
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ae4:	b2d2      	uxtb	r2, r2
 8008ae6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aec:	1c5a      	adds	r2, r3, #1
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008af6:	3b01      	subs	r3, #1
 8008af8:	b29a      	uxth	r2, r3
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b02:	b29b      	uxth	r3, r3
 8008b04:	3b01      	subs	r3, #1
 8008b06:	b29a      	uxth	r2, r3
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	695b      	ldr	r3, [r3, #20]
 8008b12:	f003 0304 	and.w	r3, r3, #4
 8008b16:	2b04      	cmp	r3, #4
 8008b18:	d118      	bne.n	8008b4c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	691a      	ldr	r2, [r3, #16]
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b24:	b2d2      	uxtb	r2, r2
 8008b26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b2c:	1c5a      	adds	r2, r3, #1
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b36:	3b01      	subs	r3, #1
 8008b38:	b29a      	uxth	r2, r3
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b42:	b29b      	uxth	r3, r3
 8008b44:	3b01      	subs	r3, #1
 8008b46:	b29a      	uxth	r2, r3
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	f47f aec2 	bne.w	80088da <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	2220      	movs	r2, #32
 8008b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	2200      	movs	r2, #0
 8008b62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	e000      	b.n	8008b74 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8008b72:	2302      	movs	r3, #2
  }
}
 8008b74:	4618      	mov	r0, r3
 8008b76:	3728      	adds	r7, #40	; 0x28
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}
 8008b7c:	00010004 	.word	0x00010004

08008b80 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b088      	sub	sp, #32
 8008b84:	af02      	add	r7, sp, #8
 8008b86:	60f8      	str	r0, [r7, #12]
 8008b88:	4608      	mov	r0, r1
 8008b8a:	4611      	mov	r1, r2
 8008b8c:	461a      	mov	r2, r3
 8008b8e:	4603      	mov	r3, r0
 8008b90:	817b      	strh	r3, [r7, #10]
 8008b92:	460b      	mov	r3, r1
 8008b94:	813b      	strh	r3, [r7, #8]
 8008b96:	4613      	mov	r3, r2
 8008b98:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	681a      	ldr	r2, [r3, #0]
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008ba8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bac:	9300      	str	r3, [sp, #0]
 8008bae:	6a3b      	ldr	r3, [r7, #32]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008bb6:	68f8      	ldr	r0, [r7, #12]
 8008bb8:	f000 f95c 	bl	8008e74 <I2C_WaitOnFlagUntilTimeout>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d00c      	beq.n	8008bdc <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d003      	beq.n	8008bd8 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008bd6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008bd8:	2303      	movs	r3, #3
 8008bda:	e05f      	b.n	8008c9c <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008bdc:	897b      	ldrh	r3, [r7, #10]
 8008bde:	b2db      	uxtb	r3, r3
 8008be0:	461a      	mov	r2, r3
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008bea:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bee:	6a3a      	ldr	r2, [r7, #32]
 8008bf0:	492c      	ldr	r1, [pc, #176]	; (8008ca4 <I2C_RequestMemoryWrite+0x124>)
 8008bf2:	68f8      	ldr	r0, [r7, #12]
 8008bf4:	f000 f995 	bl	8008f22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d001      	beq.n	8008c02 <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 8008bfe:	2301      	movs	r3, #1
 8008c00:	e04c      	b.n	8008c9c <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008c02:	2300      	movs	r3, #0
 8008c04:	617b      	str	r3, [r7, #20]
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	695b      	ldr	r3, [r3, #20]
 8008c0c:	617b      	str	r3, [r7, #20]
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	699b      	ldr	r3, [r3, #24]
 8008c14:	617b      	str	r3, [r7, #20]
 8008c16:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008c18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c1a:	6a39      	ldr	r1, [r7, #32]
 8008c1c:	68f8      	ldr	r0, [r7, #12]
 8008c1e:	f000 f9ff 	bl	8009020 <I2C_WaitOnTXEFlagUntilTimeout>
 8008c22:	4603      	mov	r3, r0
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d00d      	beq.n	8008c44 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c2c:	2b04      	cmp	r3, #4
 8008c2e:	d107      	bne.n	8008c40 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	681a      	ldr	r2, [r3, #0]
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c3e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008c40:	2301      	movs	r3, #1
 8008c42:	e02b      	b.n	8008c9c <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008c44:	88fb      	ldrh	r3, [r7, #6]
 8008c46:	2b01      	cmp	r3, #1
 8008c48:	d105      	bne.n	8008c56 <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008c4a:	893b      	ldrh	r3, [r7, #8]
 8008c4c:	b2da      	uxtb	r2, r3
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	611a      	str	r2, [r3, #16]
 8008c54:	e021      	b.n	8008c9a <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008c56:	893b      	ldrh	r3, [r7, #8]
 8008c58:	0a1b      	lsrs	r3, r3, #8
 8008c5a:	b29b      	uxth	r3, r3
 8008c5c:	b2da      	uxtb	r2, r3
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008c64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c66:	6a39      	ldr	r1, [r7, #32]
 8008c68:	68f8      	ldr	r0, [r7, #12]
 8008c6a:	f000 f9d9 	bl	8009020 <I2C_WaitOnTXEFlagUntilTimeout>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d00d      	beq.n	8008c90 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c78:	2b04      	cmp	r3, #4
 8008c7a:	d107      	bne.n	8008c8c <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	681a      	ldr	r2, [r3, #0]
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c8a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008c8c:	2301      	movs	r3, #1
 8008c8e:	e005      	b.n	8008c9c <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008c90:	893b      	ldrh	r3, [r7, #8]
 8008c92:	b2da      	uxtb	r2, r3
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008c9a:	2300      	movs	r3, #0
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	3718      	adds	r7, #24
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}
 8008ca4:	00010002 	.word	0x00010002

08008ca8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b088      	sub	sp, #32
 8008cac:	af02      	add	r7, sp, #8
 8008cae:	60f8      	str	r0, [r7, #12]
 8008cb0:	4608      	mov	r0, r1
 8008cb2:	4611      	mov	r1, r2
 8008cb4:	461a      	mov	r2, r3
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	817b      	strh	r3, [r7, #10]
 8008cba:	460b      	mov	r3, r1
 8008cbc:	813b      	strh	r3, [r7, #8]
 8008cbe:	4613      	mov	r3, r2
 8008cc0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	681a      	ldr	r2, [r3, #0]
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008cd0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	681a      	ldr	r2, [r3, #0]
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008ce0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ce4:	9300      	str	r3, [sp, #0]
 8008ce6:	6a3b      	ldr	r3, [r7, #32]
 8008ce8:	2200      	movs	r2, #0
 8008cea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008cee:	68f8      	ldr	r0, [r7, #12]
 8008cf0:	f000 f8c0 	bl	8008e74 <I2C_WaitOnFlagUntilTimeout>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d00c      	beq.n	8008d14 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d003      	beq.n	8008d10 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008d0e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008d10:	2303      	movs	r3, #3
 8008d12:	e0a9      	b.n	8008e68 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008d14:	897b      	ldrh	r3, [r7, #10]
 8008d16:	b2db      	uxtb	r3, r3
 8008d18:	461a      	mov	r2, r3
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008d22:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d26:	6a3a      	ldr	r2, [r7, #32]
 8008d28:	4951      	ldr	r1, [pc, #324]	; (8008e70 <I2C_RequestMemoryRead+0x1c8>)
 8008d2a:	68f8      	ldr	r0, [r7, #12]
 8008d2c:	f000 f8f9 	bl	8008f22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008d30:	4603      	mov	r3, r0
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d001      	beq.n	8008d3a <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8008d36:	2301      	movs	r3, #1
 8008d38:	e096      	b.n	8008e68 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	617b      	str	r3, [r7, #20]
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	695b      	ldr	r3, [r3, #20]
 8008d44:	617b      	str	r3, [r7, #20]
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	699b      	ldr	r3, [r3, #24]
 8008d4c:	617b      	str	r3, [r7, #20]
 8008d4e:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008d50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d52:	6a39      	ldr	r1, [r7, #32]
 8008d54:	68f8      	ldr	r0, [r7, #12]
 8008d56:	f000 f963 	bl	8009020 <I2C_WaitOnTXEFlagUntilTimeout>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d00d      	beq.n	8008d7c <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d64:	2b04      	cmp	r3, #4
 8008d66:	d107      	bne.n	8008d78 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	681a      	ldr	r2, [r3, #0]
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d76:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008d78:	2301      	movs	r3, #1
 8008d7a:	e075      	b.n	8008e68 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008d7c:	88fb      	ldrh	r3, [r7, #6]
 8008d7e:	2b01      	cmp	r3, #1
 8008d80:	d105      	bne.n	8008d8e <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008d82:	893b      	ldrh	r3, [r7, #8]
 8008d84:	b2da      	uxtb	r2, r3
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	611a      	str	r2, [r3, #16]
 8008d8c:	e021      	b.n	8008dd2 <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008d8e:	893b      	ldrh	r3, [r7, #8]
 8008d90:	0a1b      	lsrs	r3, r3, #8
 8008d92:	b29b      	uxth	r3, r3
 8008d94:	b2da      	uxtb	r2, r3
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008d9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d9e:	6a39      	ldr	r1, [r7, #32]
 8008da0:	68f8      	ldr	r0, [r7, #12]
 8008da2:	f000 f93d 	bl	8009020 <I2C_WaitOnTXEFlagUntilTimeout>
 8008da6:	4603      	mov	r3, r0
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d00d      	beq.n	8008dc8 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008db0:	2b04      	cmp	r3, #4
 8008db2:	d107      	bne.n	8008dc4 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	681a      	ldr	r2, [r3, #0]
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008dc2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	e04f      	b.n	8008e68 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008dc8:	893b      	ldrh	r3, [r7, #8]
 8008dca:	b2da      	uxtb	r2, r3
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008dd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dd4:	6a39      	ldr	r1, [r7, #32]
 8008dd6:	68f8      	ldr	r0, [r7, #12]
 8008dd8:	f000 f922 	bl	8009020 <I2C_WaitOnTXEFlagUntilTimeout>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d00d      	beq.n	8008dfe <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008de6:	2b04      	cmp	r3, #4
 8008de8:	d107      	bne.n	8008dfa <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	681a      	ldr	r2, [r3, #0]
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008df8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	e034      	b.n	8008e68 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	681a      	ldr	r2, [r3, #0]
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008e0c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e10:	9300      	str	r3, [sp, #0]
 8008e12:	6a3b      	ldr	r3, [r7, #32]
 8008e14:	2200      	movs	r2, #0
 8008e16:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008e1a:	68f8      	ldr	r0, [r7, #12]
 8008e1c:	f000 f82a 	bl	8008e74 <I2C_WaitOnFlagUntilTimeout>
 8008e20:	4603      	mov	r3, r0
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d00c      	beq.n	8008e40 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d003      	beq.n	8008e3c <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008e3a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008e3c:	2303      	movs	r3, #3
 8008e3e:	e013      	b.n	8008e68 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008e40:	897b      	ldrh	r3, [r7, #10]
 8008e42:	b2db      	uxtb	r3, r3
 8008e44:	f043 0301 	orr.w	r3, r3, #1
 8008e48:	b2da      	uxtb	r2, r3
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e52:	6a3a      	ldr	r2, [r7, #32]
 8008e54:	4906      	ldr	r1, [pc, #24]	; (8008e70 <I2C_RequestMemoryRead+0x1c8>)
 8008e56:	68f8      	ldr	r0, [r7, #12]
 8008e58:	f000 f863 	bl	8008f22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008e5c:	4603      	mov	r3, r0
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d001      	beq.n	8008e66 <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 8008e62:	2301      	movs	r3, #1
 8008e64:	e000      	b.n	8008e68 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8008e66:	2300      	movs	r3, #0
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	3718      	adds	r7, #24
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}
 8008e70:	00010002 	.word	0x00010002

08008e74 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b084      	sub	sp, #16
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	60f8      	str	r0, [r7, #12]
 8008e7c:	60b9      	str	r1, [r7, #8]
 8008e7e:	603b      	str	r3, [r7, #0]
 8008e80:	4613      	mov	r3, r2
 8008e82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008e84:	e025      	b.n	8008ed2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e8c:	d021      	beq.n	8008ed2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e8e:	f7fd ffc1 	bl	8006e14 <HAL_GetTick>
 8008e92:	4602      	mov	r2, r0
 8008e94:	69bb      	ldr	r3, [r7, #24]
 8008e96:	1ad3      	subs	r3, r2, r3
 8008e98:	683a      	ldr	r2, [r7, #0]
 8008e9a:	429a      	cmp	r2, r3
 8008e9c:	d302      	bcc.n	8008ea4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d116      	bne.n	8008ed2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	2220      	movs	r2, #32
 8008eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ebe:	f043 0220 	orr.w	r2, r3, #32
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	2200      	movs	r2, #0
 8008eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008ece:	2301      	movs	r3, #1
 8008ed0:	e023      	b.n	8008f1a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	0c1b      	lsrs	r3, r3, #16
 8008ed6:	b2db      	uxtb	r3, r3
 8008ed8:	2b01      	cmp	r3, #1
 8008eda:	d10d      	bne.n	8008ef8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	695b      	ldr	r3, [r3, #20]
 8008ee2:	43da      	mvns	r2, r3
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	4013      	ands	r3, r2
 8008ee8:	b29b      	uxth	r3, r3
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	bf0c      	ite	eq
 8008eee:	2301      	moveq	r3, #1
 8008ef0:	2300      	movne	r3, #0
 8008ef2:	b2db      	uxtb	r3, r3
 8008ef4:	461a      	mov	r2, r3
 8008ef6:	e00c      	b.n	8008f12 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	699b      	ldr	r3, [r3, #24]
 8008efe:	43da      	mvns	r2, r3
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	4013      	ands	r3, r2
 8008f04:	b29b      	uxth	r3, r3
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	bf0c      	ite	eq
 8008f0a:	2301      	moveq	r3, #1
 8008f0c:	2300      	movne	r3, #0
 8008f0e:	b2db      	uxtb	r3, r3
 8008f10:	461a      	mov	r2, r3
 8008f12:	79fb      	ldrb	r3, [r7, #7]
 8008f14:	429a      	cmp	r2, r3
 8008f16:	d0b6      	beq.n	8008e86 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008f18:	2300      	movs	r3, #0
}
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	3710      	adds	r7, #16
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd80      	pop	{r7, pc}

08008f22 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008f22:	b580      	push	{r7, lr}
 8008f24:	b084      	sub	sp, #16
 8008f26:	af00      	add	r7, sp, #0
 8008f28:	60f8      	str	r0, [r7, #12]
 8008f2a:	60b9      	str	r1, [r7, #8]
 8008f2c:	607a      	str	r2, [r7, #4]
 8008f2e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008f30:	e051      	b.n	8008fd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	695b      	ldr	r3, [r3, #20]
 8008f38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f40:	d123      	bne.n	8008f8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	681a      	ldr	r2, [r3, #0]
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f50:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008f5a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	2200      	movs	r2, #0
 8008f60:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	2220      	movs	r2, #32
 8008f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f76:	f043 0204 	orr.w	r2, r3, #4
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	2200      	movs	r2, #0
 8008f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008f86:	2301      	movs	r3, #1
 8008f88:	e046      	b.n	8009018 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f90:	d021      	beq.n	8008fd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f92:	f7fd ff3f 	bl	8006e14 <HAL_GetTick>
 8008f96:	4602      	mov	r2, r0
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	1ad3      	subs	r3, r2, r3
 8008f9c:	687a      	ldr	r2, [r7, #4]
 8008f9e:	429a      	cmp	r2, r3
 8008fa0:	d302      	bcc.n	8008fa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d116      	bne.n	8008fd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	2200      	movs	r2, #0
 8008fac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	2220      	movs	r2, #32
 8008fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fc2:	f043 0220 	orr.w	r2, r3, #32
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	2200      	movs	r2, #0
 8008fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	e020      	b.n	8009018 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008fd6:	68bb      	ldr	r3, [r7, #8]
 8008fd8:	0c1b      	lsrs	r3, r3, #16
 8008fda:	b2db      	uxtb	r3, r3
 8008fdc:	2b01      	cmp	r3, #1
 8008fde:	d10c      	bne.n	8008ffa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	695b      	ldr	r3, [r3, #20]
 8008fe6:	43da      	mvns	r2, r3
 8008fe8:	68bb      	ldr	r3, [r7, #8]
 8008fea:	4013      	ands	r3, r2
 8008fec:	b29b      	uxth	r3, r3
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	bf14      	ite	ne
 8008ff2:	2301      	movne	r3, #1
 8008ff4:	2300      	moveq	r3, #0
 8008ff6:	b2db      	uxtb	r3, r3
 8008ff8:	e00b      	b.n	8009012 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	699b      	ldr	r3, [r3, #24]
 8009000:	43da      	mvns	r2, r3
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	4013      	ands	r3, r2
 8009006:	b29b      	uxth	r3, r3
 8009008:	2b00      	cmp	r3, #0
 800900a:	bf14      	ite	ne
 800900c:	2301      	movne	r3, #1
 800900e:	2300      	moveq	r3, #0
 8009010:	b2db      	uxtb	r3, r3
 8009012:	2b00      	cmp	r3, #0
 8009014:	d18d      	bne.n	8008f32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8009016:	2300      	movs	r3, #0
}
 8009018:	4618      	mov	r0, r3
 800901a:	3710      	adds	r7, #16
 800901c:	46bd      	mov	sp, r7
 800901e:	bd80      	pop	{r7, pc}

08009020 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b084      	sub	sp, #16
 8009024:	af00      	add	r7, sp, #0
 8009026:	60f8      	str	r0, [r7, #12]
 8009028:	60b9      	str	r1, [r7, #8]
 800902a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800902c:	e02d      	b.n	800908a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800902e:	68f8      	ldr	r0, [r7, #12]
 8009030:	f000 f8ce 	bl	80091d0 <I2C_IsAcknowledgeFailed>
 8009034:	4603      	mov	r3, r0
 8009036:	2b00      	cmp	r3, #0
 8009038:	d001      	beq.n	800903e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800903a:	2301      	movs	r3, #1
 800903c:	e02d      	b.n	800909a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009044:	d021      	beq.n	800908a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009046:	f7fd fee5 	bl	8006e14 <HAL_GetTick>
 800904a:	4602      	mov	r2, r0
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	1ad3      	subs	r3, r2, r3
 8009050:	68ba      	ldr	r2, [r7, #8]
 8009052:	429a      	cmp	r2, r3
 8009054:	d302      	bcc.n	800905c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d116      	bne.n	800908a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	2200      	movs	r2, #0
 8009060:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	2220      	movs	r2, #32
 8009066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	2200      	movs	r2, #0
 800906e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009076:	f043 0220 	orr.w	r2, r3, #32
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	2200      	movs	r2, #0
 8009082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009086:	2301      	movs	r3, #1
 8009088:	e007      	b.n	800909a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	695b      	ldr	r3, [r3, #20]
 8009090:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009094:	2b80      	cmp	r3, #128	; 0x80
 8009096:	d1ca      	bne.n	800902e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009098:	2300      	movs	r3, #0
}
 800909a:	4618      	mov	r0, r3
 800909c:	3710      	adds	r7, #16
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}

080090a2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80090a2:	b580      	push	{r7, lr}
 80090a4:	b084      	sub	sp, #16
 80090a6:	af00      	add	r7, sp, #0
 80090a8:	60f8      	str	r0, [r7, #12]
 80090aa:	60b9      	str	r1, [r7, #8]
 80090ac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80090ae:	e02d      	b.n	800910c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80090b0:	68f8      	ldr	r0, [r7, #12]
 80090b2:	f000 f88d 	bl	80091d0 <I2C_IsAcknowledgeFailed>
 80090b6:	4603      	mov	r3, r0
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d001      	beq.n	80090c0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80090bc:	2301      	movs	r3, #1
 80090be:	e02d      	b.n	800911c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80090c6:	d021      	beq.n	800910c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80090c8:	f7fd fea4 	bl	8006e14 <HAL_GetTick>
 80090cc:	4602      	mov	r2, r0
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	1ad3      	subs	r3, r2, r3
 80090d2:	68ba      	ldr	r2, [r7, #8]
 80090d4:	429a      	cmp	r2, r3
 80090d6:	d302      	bcc.n	80090de <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d116      	bne.n	800910c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	2200      	movs	r2, #0
 80090e2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	2220      	movs	r2, #32
 80090e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	2200      	movs	r2, #0
 80090f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090f8:	f043 0220 	orr.w	r2, r3, #32
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	2200      	movs	r2, #0
 8009104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009108:	2301      	movs	r3, #1
 800910a:	e007      	b.n	800911c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	695b      	ldr	r3, [r3, #20]
 8009112:	f003 0304 	and.w	r3, r3, #4
 8009116:	2b04      	cmp	r3, #4
 8009118:	d1ca      	bne.n	80090b0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800911a:	2300      	movs	r3, #0
}
 800911c:	4618      	mov	r0, r3
 800911e:	3710      	adds	r7, #16
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}

08009124 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b084      	sub	sp, #16
 8009128:	af00      	add	r7, sp, #0
 800912a:	60f8      	str	r0, [r7, #12]
 800912c:	60b9      	str	r1, [r7, #8]
 800912e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009130:	e042      	b.n	80091b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	695b      	ldr	r3, [r3, #20]
 8009138:	f003 0310 	and.w	r3, r3, #16
 800913c:	2b10      	cmp	r3, #16
 800913e:	d119      	bne.n	8009174 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	f06f 0210 	mvn.w	r2, #16
 8009148:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	2200      	movs	r2, #0
 800914e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	2220      	movs	r2, #32
 8009154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	2200      	movs	r2, #0
 800915c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	2200      	movs	r2, #0
 800916c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009170:	2301      	movs	r3, #1
 8009172:	e029      	b.n	80091c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009174:	f7fd fe4e 	bl	8006e14 <HAL_GetTick>
 8009178:	4602      	mov	r2, r0
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	1ad3      	subs	r3, r2, r3
 800917e:	68ba      	ldr	r2, [r7, #8]
 8009180:	429a      	cmp	r2, r3
 8009182:	d302      	bcc.n	800918a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d116      	bne.n	80091b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	2200      	movs	r2, #0
 800918e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	2220      	movs	r2, #32
 8009194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	2200      	movs	r2, #0
 800919c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091a4:	f043 0220 	orr.w	r2, r3, #32
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	2200      	movs	r2, #0
 80091b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80091b4:	2301      	movs	r3, #1
 80091b6:	e007      	b.n	80091c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	695b      	ldr	r3, [r3, #20]
 80091be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091c2:	2b40      	cmp	r3, #64	; 0x40
 80091c4:	d1b5      	bne.n	8009132 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80091c6:	2300      	movs	r3, #0
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	3710      	adds	r7, #16
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}

080091d0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80091d0:	b480      	push	{r7}
 80091d2:	b083      	sub	sp, #12
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	695b      	ldr	r3, [r3, #20]
 80091de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80091e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80091e6:	d11b      	bne.n	8009220 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80091f0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2200      	movs	r2, #0
 80091f6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2220      	movs	r2, #32
 80091fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2200      	movs	r2, #0
 8009204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800920c:	f043 0204 	orr.w	r2, r3, #4
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2200      	movs	r2, #0
 8009218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800921c:	2301      	movs	r3, #1
 800921e:	e000      	b.n	8009222 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009220:	2300      	movs	r3, #0
}
 8009222:	4618      	mov	r0, r3
 8009224:	370c      	adds	r7, #12
 8009226:	46bd      	mov	sp, r7
 8009228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922c:	4770      	bx	lr
	...

08009230 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b086      	sub	sp, #24
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d101      	bne.n	8009242 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800923e:	2301      	movs	r3, #1
 8009240:	e25b      	b.n	80096fa <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f003 0301 	and.w	r3, r3, #1
 800924a:	2b00      	cmp	r3, #0
 800924c:	d075      	beq.n	800933a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800924e:	4ba3      	ldr	r3, [pc, #652]	; (80094dc <HAL_RCC_OscConfig+0x2ac>)
 8009250:	689b      	ldr	r3, [r3, #8]
 8009252:	f003 030c 	and.w	r3, r3, #12
 8009256:	2b04      	cmp	r3, #4
 8009258:	d00c      	beq.n	8009274 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800925a:	4ba0      	ldr	r3, [pc, #640]	; (80094dc <HAL_RCC_OscConfig+0x2ac>)
 800925c:	689b      	ldr	r3, [r3, #8]
 800925e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009262:	2b08      	cmp	r3, #8
 8009264:	d112      	bne.n	800928c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009266:	4b9d      	ldr	r3, [pc, #628]	; (80094dc <HAL_RCC_OscConfig+0x2ac>)
 8009268:	685b      	ldr	r3, [r3, #4]
 800926a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800926e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009272:	d10b      	bne.n	800928c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009274:	4b99      	ldr	r3, [pc, #612]	; (80094dc <HAL_RCC_OscConfig+0x2ac>)
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800927c:	2b00      	cmp	r3, #0
 800927e:	d05b      	beq.n	8009338 <HAL_RCC_OscConfig+0x108>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	685b      	ldr	r3, [r3, #4]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d157      	bne.n	8009338 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009288:	2301      	movs	r3, #1
 800928a:	e236      	b.n	80096fa <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	685b      	ldr	r3, [r3, #4]
 8009290:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009294:	d106      	bne.n	80092a4 <HAL_RCC_OscConfig+0x74>
 8009296:	4b91      	ldr	r3, [pc, #580]	; (80094dc <HAL_RCC_OscConfig+0x2ac>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	4a90      	ldr	r2, [pc, #576]	; (80094dc <HAL_RCC_OscConfig+0x2ac>)
 800929c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80092a0:	6013      	str	r3, [r2, #0]
 80092a2:	e01d      	b.n	80092e0 <HAL_RCC_OscConfig+0xb0>
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	685b      	ldr	r3, [r3, #4]
 80092a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80092ac:	d10c      	bne.n	80092c8 <HAL_RCC_OscConfig+0x98>
 80092ae:	4b8b      	ldr	r3, [pc, #556]	; (80094dc <HAL_RCC_OscConfig+0x2ac>)
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	4a8a      	ldr	r2, [pc, #552]	; (80094dc <HAL_RCC_OscConfig+0x2ac>)
 80092b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80092b8:	6013      	str	r3, [r2, #0]
 80092ba:	4b88      	ldr	r3, [pc, #544]	; (80094dc <HAL_RCC_OscConfig+0x2ac>)
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	4a87      	ldr	r2, [pc, #540]	; (80094dc <HAL_RCC_OscConfig+0x2ac>)
 80092c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80092c4:	6013      	str	r3, [r2, #0]
 80092c6:	e00b      	b.n	80092e0 <HAL_RCC_OscConfig+0xb0>
 80092c8:	4b84      	ldr	r3, [pc, #528]	; (80094dc <HAL_RCC_OscConfig+0x2ac>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	4a83      	ldr	r2, [pc, #524]	; (80094dc <HAL_RCC_OscConfig+0x2ac>)
 80092ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80092d2:	6013      	str	r3, [r2, #0]
 80092d4:	4b81      	ldr	r3, [pc, #516]	; (80094dc <HAL_RCC_OscConfig+0x2ac>)
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	4a80      	ldr	r2, [pc, #512]	; (80094dc <HAL_RCC_OscConfig+0x2ac>)
 80092da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80092de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	685b      	ldr	r3, [r3, #4]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d013      	beq.n	8009310 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80092e8:	f7fd fd94 	bl	8006e14 <HAL_GetTick>
 80092ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80092ee:	e008      	b.n	8009302 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80092f0:	f7fd fd90 	bl	8006e14 <HAL_GetTick>
 80092f4:	4602      	mov	r2, r0
 80092f6:	693b      	ldr	r3, [r7, #16]
 80092f8:	1ad3      	subs	r3, r2, r3
 80092fa:	2b64      	cmp	r3, #100	; 0x64
 80092fc:	d901      	bls.n	8009302 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80092fe:	2303      	movs	r3, #3
 8009300:	e1fb      	b.n	80096fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009302:	4b76      	ldr	r3, [pc, #472]	; (80094dc <HAL_RCC_OscConfig+0x2ac>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800930a:	2b00      	cmp	r3, #0
 800930c:	d0f0      	beq.n	80092f0 <HAL_RCC_OscConfig+0xc0>
 800930e:	e014      	b.n	800933a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009310:	f7fd fd80 	bl	8006e14 <HAL_GetTick>
 8009314:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009316:	e008      	b.n	800932a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009318:	f7fd fd7c 	bl	8006e14 <HAL_GetTick>
 800931c:	4602      	mov	r2, r0
 800931e:	693b      	ldr	r3, [r7, #16]
 8009320:	1ad3      	subs	r3, r2, r3
 8009322:	2b64      	cmp	r3, #100	; 0x64
 8009324:	d901      	bls.n	800932a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009326:	2303      	movs	r3, #3
 8009328:	e1e7      	b.n	80096fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800932a:	4b6c      	ldr	r3, [pc, #432]	; (80094dc <HAL_RCC_OscConfig+0x2ac>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009332:	2b00      	cmp	r3, #0
 8009334:	d1f0      	bne.n	8009318 <HAL_RCC_OscConfig+0xe8>
 8009336:	e000      	b.n	800933a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009338:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f003 0302 	and.w	r3, r3, #2
 8009342:	2b00      	cmp	r3, #0
 8009344:	d063      	beq.n	800940e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009346:	4b65      	ldr	r3, [pc, #404]	; (80094dc <HAL_RCC_OscConfig+0x2ac>)
 8009348:	689b      	ldr	r3, [r3, #8]
 800934a:	f003 030c 	and.w	r3, r3, #12
 800934e:	2b00      	cmp	r3, #0
 8009350:	d00b      	beq.n	800936a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009352:	4b62      	ldr	r3, [pc, #392]	; (80094dc <HAL_RCC_OscConfig+0x2ac>)
 8009354:	689b      	ldr	r3, [r3, #8]
 8009356:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800935a:	2b08      	cmp	r3, #8
 800935c:	d11c      	bne.n	8009398 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800935e:	4b5f      	ldr	r3, [pc, #380]	; (80094dc <HAL_RCC_OscConfig+0x2ac>)
 8009360:	685b      	ldr	r3, [r3, #4]
 8009362:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009366:	2b00      	cmp	r3, #0
 8009368:	d116      	bne.n	8009398 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800936a:	4b5c      	ldr	r3, [pc, #368]	; (80094dc <HAL_RCC_OscConfig+0x2ac>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f003 0302 	and.w	r3, r3, #2
 8009372:	2b00      	cmp	r3, #0
 8009374:	d005      	beq.n	8009382 <HAL_RCC_OscConfig+0x152>
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	68db      	ldr	r3, [r3, #12]
 800937a:	2b01      	cmp	r3, #1
 800937c:	d001      	beq.n	8009382 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800937e:	2301      	movs	r3, #1
 8009380:	e1bb      	b.n	80096fa <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009382:	4b56      	ldr	r3, [pc, #344]	; (80094dc <HAL_RCC_OscConfig+0x2ac>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	691b      	ldr	r3, [r3, #16]
 800938e:	00db      	lsls	r3, r3, #3
 8009390:	4952      	ldr	r1, [pc, #328]	; (80094dc <HAL_RCC_OscConfig+0x2ac>)
 8009392:	4313      	orrs	r3, r2
 8009394:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009396:	e03a      	b.n	800940e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	68db      	ldr	r3, [r3, #12]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d020      	beq.n	80093e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80093a0:	4b4f      	ldr	r3, [pc, #316]	; (80094e0 <HAL_RCC_OscConfig+0x2b0>)
 80093a2:	2201      	movs	r2, #1
 80093a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093a6:	f7fd fd35 	bl	8006e14 <HAL_GetTick>
 80093aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80093ac:	e008      	b.n	80093c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80093ae:	f7fd fd31 	bl	8006e14 <HAL_GetTick>
 80093b2:	4602      	mov	r2, r0
 80093b4:	693b      	ldr	r3, [r7, #16]
 80093b6:	1ad3      	subs	r3, r2, r3
 80093b8:	2b02      	cmp	r3, #2
 80093ba:	d901      	bls.n	80093c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80093bc:	2303      	movs	r3, #3
 80093be:	e19c      	b.n	80096fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80093c0:	4b46      	ldr	r3, [pc, #280]	; (80094dc <HAL_RCC_OscConfig+0x2ac>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f003 0302 	and.w	r3, r3, #2
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d0f0      	beq.n	80093ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80093cc:	4b43      	ldr	r3, [pc, #268]	; (80094dc <HAL_RCC_OscConfig+0x2ac>)
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	691b      	ldr	r3, [r3, #16]
 80093d8:	00db      	lsls	r3, r3, #3
 80093da:	4940      	ldr	r1, [pc, #256]	; (80094dc <HAL_RCC_OscConfig+0x2ac>)
 80093dc:	4313      	orrs	r3, r2
 80093de:	600b      	str	r3, [r1, #0]
 80093e0:	e015      	b.n	800940e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80093e2:	4b3f      	ldr	r3, [pc, #252]	; (80094e0 <HAL_RCC_OscConfig+0x2b0>)
 80093e4:	2200      	movs	r2, #0
 80093e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093e8:	f7fd fd14 	bl	8006e14 <HAL_GetTick>
 80093ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80093ee:	e008      	b.n	8009402 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80093f0:	f7fd fd10 	bl	8006e14 <HAL_GetTick>
 80093f4:	4602      	mov	r2, r0
 80093f6:	693b      	ldr	r3, [r7, #16]
 80093f8:	1ad3      	subs	r3, r2, r3
 80093fa:	2b02      	cmp	r3, #2
 80093fc:	d901      	bls.n	8009402 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80093fe:	2303      	movs	r3, #3
 8009400:	e17b      	b.n	80096fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009402:	4b36      	ldr	r3, [pc, #216]	; (80094dc <HAL_RCC_OscConfig+0x2ac>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f003 0302 	and.w	r3, r3, #2
 800940a:	2b00      	cmp	r3, #0
 800940c:	d1f0      	bne.n	80093f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f003 0308 	and.w	r3, r3, #8
 8009416:	2b00      	cmp	r3, #0
 8009418:	d030      	beq.n	800947c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	695b      	ldr	r3, [r3, #20]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d016      	beq.n	8009450 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009422:	4b30      	ldr	r3, [pc, #192]	; (80094e4 <HAL_RCC_OscConfig+0x2b4>)
 8009424:	2201      	movs	r2, #1
 8009426:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009428:	f7fd fcf4 	bl	8006e14 <HAL_GetTick>
 800942c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800942e:	e008      	b.n	8009442 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009430:	f7fd fcf0 	bl	8006e14 <HAL_GetTick>
 8009434:	4602      	mov	r2, r0
 8009436:	693b      	ldr	r3, [r7, #16]
 8009438:	1ad3      	subs	r3, r2, r3
 800943a:	2b02      	cmp	r3, #2
 800943c:	d901      	bls.n	8009442 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800943e:	2303      	movs	r3, #3
 8009440:	e15b      	b.n	80096fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009442:	4b26      	ldr	r3, [pc, #152]	; (80094dc <HAL_RCC_OscConfig+0x2ac>)
 8009444:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009446:	f003 0302 	and.w	r3, r3, #2
 800944a:	2b00      	cmp	r3, #0
 800944c:	d0f0      	beq.n	8009430 <HAL_RCC_OscConfig+0x200>
 800944e:	e015      	b.n	800947c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009450:	4b24      	ldr	r3, [pc, #144]	; (80094e4 <HAL_RCC_OscConfig+0x2b4>)
 8009452:	2200      	movs	r2, #0
 8009454:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009456:	f7fd fcdd 	bl	8006e14 <HAL_GetTick>
 800945a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800945c:	e008      	b.n	8009470 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800945e:	f7fd fcd9 	bl	8006e14 <HAL_GetTick>
 8009462:	4602      	mov	r2, r0
 8009464:	693b      	ldr	r3, [r7, #16]
 8009466:	1ad3      	subs	r3, r2, r3
 8009468:	2b02      	cmp	r3, #2
 800946a:	d901      	bls.n	8009470 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800946c:	2303      	movs	r3, #3
 800946e:	e144      	b.n	80096fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009470:	4b1a      	ldr	r3, [pc, #104]	; (80094dc <HAL_RCC_OscConfig+0x2ac>)
 8009472:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009474:	f003 0302 	and.w	r3, r3, #2
 8009478:	2b00      	cmp	r3, #0
 800947a:	d1f0      	bne.n	800945e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f003 0304 	and.w	r3, r3, #4
 8009484:	2b00      	cmp	r3, #0
 8009486:	f000 80a0 	beq.w	80095ca <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800948a:	2300      	movs	r3, #0
 800948c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800948e:	4b13      	ldr	r3, [pc, #76]	; (80094dc <HAL_RCC_OscConfig+0x2ac>)
 8009490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009496:	2b00      	cmp	r3, #0
 8009498:	d10f      	bne.n	80094ba <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800949a:	2300      	movs	r3, #0
 800949c:	60bb      	str	r3, [r7, #8]
 800949e:	4b0f      	ldr	r3, [pc, #60]	; (80094dc <HAL_RCC_OscConfig+0x2ac>)
 80094a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094a2:	4a0e      	ldr	r2, [pc, #56]	; (80094dc <HAL_RCC_OscConfig+0x2ac>)
 80094a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80094a8:	6413      	str	r3, [r2, #64]	; 0x40
 80094aa:	4b0c      	ldr	r3, [pc, #48]	; (80094dc <HAL_RCC_OscConfig+0x2ac>)
 80094ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80094b2:	60bb      	str	r3, [r7, #8]
 80094b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80094b6:	2301      	movs	r3, #1
 80094b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80094ba:	4b0b      	ldr	r3, [pc, #44]	; (80094e8 <HAL_RCC_OscConfig+0x2b8>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d121      	bne.n	800950a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80094c6:	4b08      	ldr	r3, [pc, #32]	; (80094e8 <HAL_RCC_OscConfig+0x2b8>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	4a07      	ldr	r2, [pc, #28]	; (80094e8 <HAL_RCC_OscConfig+0x2b8>)
 80094cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80094d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80094d2:	f7fd fc9f 	bl	8006e14 <HAL_GetTick>
 80094d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80094d8:	e011      	b.n	80094fe <HAL_RCC_OscConfig+0x2ce>
 80094da:	bf00      	nop
 80094dc:	40023800 	.word	0x40023800
 80094e0:	42470000 	.word	0x42470000
 80094e4:	42470e80 	.word	0x42470e80
 80094e8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80094ec:	f7fd fc92 	bl	8006e14 <HAL_GetTick>
 80094f0:	4602      	mov	r2, r0
 80094f2:	693b      	ldr	r3, [r7, #16]
 80094f4:	1ad3      	subs	r3, r2, r3
 80094f6:	2b02      	cmp	r3, #2
 80094f8:	d901      	bls.n	80094fe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80094fa:	2303      	movs	r3, #3
 80094fc:	e0fd      	b.n	80096fa <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80094fe:	4b81      	ldr	r3, [pc, #516]	; (8009704 <HAL_RCC_OscConfig+0x4d4>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009506:	2b00      	cmp	r3, #0
 8009508:	d0f0      	beq.n	80094ec <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	689b      	ldr	r3, [r3, #8]
 800950e:	2b01      	cmp	r3, #1
 8009510:	d106      	bne.n	8009520 <HAL_RCC_OscConfig+0x2f0>
 8009512:	4b7d      	ldr	r3, [pc, #500]	; (8009708 <HAL_RCC_OscConfig+0x4d8>)
 8009514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009516:	4a7c      	ldr	r2, [pc, #496]	; (8009708 <HAL_RCC_OscConfig+0x4d8>)
 8009518:	f043 0301 	orr.w	r3, r3, #1
 800951c:	6713      	str	r3, [r2, #112]	; 0x70
 800951e:	e01c      	b.n	800955a <HAL_RCC_OscConfig+0x32a>
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	689b      	ldr	r3, [r3, #8]
 8009524:	2b05      	cmp	r3, #5
 8009526:	d10c      	bne.n	8009542 <HAL_RCC_OscConfig+0x312>
 8009528:	4b77      	ldr	r3, [pc, #476]	; (8009708 <HAL_RCC_OscConfig+0x4d8>)
 800952a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800952c:	4a76      	ldr	r2, [pc, #472]	; (8009708 <HAL_RCC_OscConfig+0x4d8>)
 800952e:	f043 0304 	orr.w	r3, r3, #4
 8009532:	6713      	str	r3, [r2, #112]	; 0x70
 8009534:	4b74      	ldr	r3, [pc, #464]	; (8009708 <HAL_RCC_OscConfig+0x4d8>)
 8009536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009538:	4a73      	ldr	r2, [pc, #460]	; (8009708 <HAL_RCC_OscConfig+0x4d8>)
 800953a:	f043 0301 	orr.w	r3, r3, #1
 800953e:	6713      	str	r3, [r2, #112]	; 0x70
 8009540:	e00b      	b.n	800955a <HAL_RCC_OscConfig+0x32a>
 8009542:	4b71      	ldr	r3, [pc, #452]	; (8009708 <HAL_RCC_OscConfig+0x4d8>)
 8009544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009546:	4a70      	ldr	r2, [pc, #448]	; (8009708 <HAL_RCC_OscConfig+0x4d8>)
 8009548:	f023 0301 	bic.w	r3, r3, #1
 800954c:	6713      	str	r3, [r2, #112]	; 0x70
 800954e:	4b6e      	ldr	r3, [pc, #440]	; (8009708 <HAL_RCC_OscConfig+0x4d8>)
 8009550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009552:	4a6d      	ldr	r2, [pc, #436]	; (8009708 <HAL_RCC_OscConfig+0x4d8>)
 8009554:	f023 0304 	bic.w	r3, r3, #4
 8009558:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	689b      	ldr	r3, [r3, #8]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d015      	beq.n	800958e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009562:	f7fd fc57 	bl	8006e14 <HAL_GetTick>
 8009566:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009568:	e00a      	b.n	8009580 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800956a:	f7fd fc53 	bl	8006e14 <HAL_GetTick>
 800956e:	4602      	mov	r2, r0
 8009570:	693b      	ldr	r3, [r7, #16]
 8009572:	1ad3      	subs	r3, r2, r3
 8009574:	f241 3288 	movw	r2, #5000	; 0x1388
 8009578:	4293      	cmp	r3, r2
 800957a:	d901      	bls.n	8009580 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800957c:	2303      	movs	r3, #3
 800957e:	e0bc      	b.n	80096fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009580:	4b61      	ldr	r3, [pc, #388]	; (8009708 <HAL_RCC_OscConfig+0x4d8>)
 8009582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009584:	f003 0302 	and.w	r3, r3, #2
 8009588:	2b00      	cmp	r3, #0
 800958a:	d0ee      	beq.n	800956a <HAL_RCC_OscConfig+0x33a>
 800958c:	e014      	b.n	80095b8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800958e:	f7fd fc41 	bl	8006e14 <HAL_GetTick>
 8009592:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009594:	e00a      	b.n	80095ac <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009596:	f7fd fc3d 	bl	8006e14 <HAL_GetTick>
 800959a:	4602      	mov	r2, r0
 800959c:	693b      	ldr	r3, [r7, #16]
 800959e:	1ad3      	subs	r3, r2, r3
 80095a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80095a4:	4293      	cmp	r3, r2
 80095a6:	d901      	bls.n	80095ac <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80095a8:	2303      	movs	r3, #3
 80095aa:	e0a6      	b.n	80096fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80095ac:	4b56      	ldr	r3, [pc, #344]	; (8009708 <HAL_RCC_OscConfig+0x4d8>)
 80095ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095b0:	f003 0302 	and.w	r3, r3, #2
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d1ee      	bne.n	8009596 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80095b8:	7dfb      	ldrb	r3, [r7, #23]
 80095ba:	2b01      	cmp	r3, #1
 80095bc:	d105      	bne.n	80095ca <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80095be:	4b52      	ldr	r3, [pc, #328]	; (8009708 <HAL_RCC_OscConfig+0x4d8>)
 80095c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095c2:	4a51      	ldr	r2, [pc, #324]	; (8009708 <HAL_RCC_OscConfig+0x4d8>)
 80095c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80095c8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	699b      	ldr	r3, [r3, #24]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	f000 8092 	beq.w	80096f8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80095d4:	4b4c      	ldr	r3, [pc, #304]	; (8009708 <HAL_RCC_OscConfig+0x4d8>)
 80095d6:	689b      	ldr	r3, [r3, #8]
 80095d8:	f003 030c 	and.w	r3, r3, #12
 80095dc:	2b08      	cmp	r3, #8
 80095de:	d05c      	beq.n	800969a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	699b      	ldr	r3, [r3, #24]
 80095e4:	2b02      	cmp	r3, #2
 80095e6:	d141      	bne.n	800966c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80095e8:	4b48      	ldr	r3, [pc, #288]	; (800970c <HAL_RCC_OscConfig+0x4dc>)
 80095ea:	2200      	movs	r2, #0
 80095ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80095ee:	f7fd fc11 	bl	8006e14 <HAL_GetTick>
 80095f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80095f4:	e008      	b.n	8009608 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80095f6:	f7fd fc0d 	bl	8006e14 <HAL_GetTick>
 80095fa:	4602      	mov	r2, r0
 80095fc:	693b      	ldr	r3, [r7, #16]
 80095fe:	1ad3      	subs	r3, r2, r3
 8009600:	2b02      	cmp	r3, #2
 8009602:	d901      	bls.n	8009608 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8009604:	2303      	movs	r3, #3
 8009606:	e078      	b.n	80096fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009608:	4b3f      	ldr	r3, [pc, #252]	; (8009708 <HAL_RCC_OscConfig+0x4d8>)
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009610:	2b00      	cmp	r3, #0
 8009612:	d1f0      	bne.n	80095f6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	69da      	ldr	r2, [r3, #28]
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6a1b      	ldr	r3, [r3, #32]
 800961c:	431a      	orrs	r2, r3
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009622:	019b      	lsls	r3, r3, #6
 8009624:	431a      	orrs	r2, r3
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800962a:	085b      	lsrs	r3, r3, #1
 800962c:	3b01      	subs	r3, #1
 800962e:	041b      	lsls	r3, r3, #16
 8009630:	431a      	orrs	r2, r3
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009636:	061b      	lsls	r3, r3, #24
 8009638:	4933      	ldr	r1, [pc, #204]	; (8009708 <HAL_RCC_OscConfig+0x4d8>)
 800963a:	4313      	orrs	r3, r2
 800963c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800963e:	4b33      	ldr	r3, [pc, #204]	; (800970c <HAL_RCC_OscConfig+0x4dc>)
 8009640:	2201      	movs	r2, #1
 8009642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009644:	f7fd fbe6 	bl	8006e14 <HAL_GetTick>
 8009648:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800964a:	e008      	b.n	800965e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800964c:	f7fd fbe2 	bl	8006e14 <HAL_GetTick>
 8009650:	4602      	mov	r2, r0
 8009652:	693b      	ldr	r3, [r7, #16]
 8009654:	1ad3      	subs	r3, r2, r3
 8009656:	2b02      	cmp	r3, #2
 8009658:	d901      	bls.n	800965e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800965a:	2303      	movs	r3, #3
 800965c:	e04d      	b.n	80096fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800965e:	4b2a      	ldr	r3, [pc, #168]	; (8009708 <HAL_RCC_OscConfig+0x4d8>)
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009666:	2b00      	cmp	r3, #0
 8009668:	d0f0      	beq.n	800964c <HAL_RCC_OscConfig+0x41c>
 800966a:	e045      	b.n	80096f8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800966c:	4b27      	ldr	r3, [pc, #156]	; (800970c <HAL_RCC_OscConfig+0x4dc>)
 800966e:	2200      	movs	r2, #0
 8009670:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009672:	f7fd fbcf 	bl	8006e14 <HAL_GetTick>
 8009676:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009678:	e008      	b.n	800968c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800967a:	f7fd fbcb 	bl	8006e14 <HAL_GetTick>
 800967e:	4602      	mov	r2, r0
 8009680:	693b      	ldr	r3, [r7, #16]
 8009682:	1ad3      	subs	r3, r2, r3
 8009684:	2b02      	cmp	r3, #2
 8009686:	d901      	bls.n	800968c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8009688:	2303      	movs	r3, #3
 800968a:	e036      	b.n	80096fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800968c:	4b1e      	ldr	r3, [pc, #120]	; (8009708 <HAL_RCC_OscConfig+0x4d8>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009694:	2b00      	cmp	r3, #0
 8009696:	d1f0      	bne.n	800967a <HAL_RCC_OscConfig+0x44a>
 8009698:	e02e      	b.n	80096f8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	699b      	ldr	r3, [r3, #24]
 800969e:	2b01      	cmp	r3, #1
 80096a0:	d101      	bne.n	80096a6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80096a2:	2301      	movs	r3, #1
 80096a4:	e029      	b.n	80096fa <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80096a6:	4b18      	ldr	r3, [pc, #96]	; (8009708 <HAL_RCC_OscConfig+0x4d8>)
 80096a8:	685b      	ldr	r3, [r3, #4]
 80096aa:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	69db      	ldr	r3, [r3, #28]
 80096b6:	429a      	cmp	r2, r3
 80096b8:	d11c      	bne.n	80096f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80096c4:	429a      	cmp	r2, r3
 80096c6:	d115      	bne.n	80096f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80096c8:	68fa      	ldr	r2, [r7, #12]
 80096ca:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80096ce:	4013      	ands	r3, r2
 80096d0:	687a      	ldr	r2, [r7, #4]
 80096d2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80096d4:	4293      	cmp	r3, r2
 80096d6:	d10d      	bne.n	80096f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80096e2:	429a      	cmp	r2, r3
 80096e4:	d106      	bne.n	80096f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80096f0:	429a      	cmp	r2, r3
 80096f2:	d001      	beq.n	80096f8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80096f4:	2301      	movs	r3, #1
 80096f6:	e000      	b.n	80096fa <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80096f8:	2300      	movs	r3, #0
}
 80096fa:	4618      	mov	r0, r3
 80096fc:	3718      	adds	r7, #24
 80096fe:	46bd      	mov	sp, r7
 8009700:	bd80      	pop	{r7, pc}
 8009702:	bf00      	nop
 8009704:	40007000 	.word	0x40007000
 8009708:	40023800 	.word	0x40023800
 800970c:	42470060 	.word	0x42470060

08009710 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b084      	sub	sp, #16
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
 8009718:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d101      	bne.n	8009724 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009720:	2301      	movs	r3, #1
 8009722:	e0cc      	b.n	80098be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009724:	4b68      	ldr	r3, [pc, #416]	; (80098c8 <HAL_RCC_ClockConfig+0x1b8>)
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f003 030f 	and.w	r3, r3, #15
 800972c:	683a      	ldr	r2, [r7, #0]
 800972e:	429a      	cmp	r2, r3
 8009730:	d90c      	bls.n	800974c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009732:	4b65      	ldr	r3, [pc, #404]	; (80098c8 <HAL_RCC_ClockConfig+0x1b8>)
 8009734:	683a      	ldr	r2, [r7, #0]
 8009736:	b2d2      	uxtb	r2, r2
 8009738:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800973a:	4b63      	ldr	r3, [pc, #396]	; (80098c8 <HAL_RCC_ClockConfig+0x1b8>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f003 030f 	and.w	r3, r3, #15
 8009742:	683a      	ldr	r2, [r7, #0]
 8009744:	429a      	cmp	r2, r3
 8009746:	d001      	beq.n	800974c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009748:	2301      	movs	r3, #1
 800974a:	e0b8      	b.n	80098be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	f003 0302 	and.w	r3, r3, #2
 8009754:	2b00      	cmp	r3, #0
 8009756:	d020      	beq.n	800979a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f003 0304 	and.w	r3, r3, #4
 8009760:	2b00      	cmp	r3, #0
 8009762:	d005      	beq.n	8009770 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009764:	4b59      	ldr	r3, [pc, #356]	; (80098cc <HAL_RCC_ClockConfig+0x1bc>)
 8009766:	689b      	ldr	r3, [r3, #8]
 8009768:	4a58      	ldr	r2, [pc, #352]	; (80098cc <HAL_RCC_ClockConfig+0x1bc>)
 800976a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800976e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f003 0308 	and.w	r3, r3, #8
 8009778:	2b00      	cmp	r3, #0
 800977a:	d005      	beq.n	8009788 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800977c:	4b53      	ldr	r3, [pc, #332]	; (80098cc <HAL_RCC_ClockConfig+0x1bc>)
 800977e:	689b      	ldr	r3, [r3, #8]
 8009780:	4a52      	ldr	r2, [pc, #328]	; (80098cc <HAL_RCC_ClockConfig+0x1bc>)
 8009782:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009786:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009788:	4b50      	ldr	r3, [pc, #320]	; (80098cc <HAL_RCC_ClockConfig+0x1bc>)
 800978a:	689b      	ldr	r3, [r3, #8]
 800978c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	689b      	ldr	r3, [r3, #8]
 8009794:	494d      	ldr	r1, [pc, #308]	; (80098cc <HAL_RCC_ClockConfig+0x1bc>)
 8009796:	4313      	orrs	r3, r2
 8009798:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f003 0301 	and.w	r3, r3, #1
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d044      	beq.n	8009830 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	685b      	ldr	r3, [r3, #4]
 80097aa:	2b01      	cmp	r3, #1
 80097ac:	d107      	bne.n	80097be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80097ae:	4b47      	ldr	r3, [pc, #284]	; (80098cc <HAL_RCC_ClockConfig+0x1bc>)
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d119      	bne.n	80097ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80097ba:	2301      	movs	r3, #1
 80097bc:	e07f      	b.n	80098be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	685b      	ldr	r3, [r3, #4]
 80097c2:	2b02      	cmp	r3, #2
 80097c4:	d003      	beq.n	80097ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80097ca:	2b03      	cmp	r3, #3
 80097cc:	d107      	bne.n	80097de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80097ce:	4b3f      	ldr	r3, [pc, #252]	; (80098cc <HAL_RCC_ClockConfig+0x1bc>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d109      	bne.n	80097ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80097da:	2301      	movs	r3, #1
 80097dc:	e06f      	b.n	80098be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80097de:	4b3b      	ldr	r3, [pc, #236]	; (80098cc <HAL_RCC_ClockConfig+0x1bc>)
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f003 0302 	and.w	r3, r3, #2
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d101      	bne.n	80097ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80097ea:	2301      	movs	r3, #1
 80097ec:	e067      	b.n	80098be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80097ee:	4b37      	ldr	r3, [pc, #220]	; (80098cc <HAL_RCC_ClockConfig+0x1bc>)
 80097f0:	689b      	ldr	r3, [r3, #8]
 80097f2:	f023 0203 	bic.w	r2, r3, #3
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	685b      	ldr	r3, [r3, #4]
 80097fa:	4934      	ldr	r1, [pc, #208]	; (80098cc <HAL_RCC_ClockConfig+0x1bc>)
 80097fc:	4313      	orrs	r3, r2
 80097fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009800:	f7fd fb08 	bl	8006e14 <HAL_GetTick>
 8009804:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009806:	e00a      	b.n	800981e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009808:	f7fd fb04 	bl	8006e14 <HAL_GetTick>
 800980c:	4602      	mov	r2, r0
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	1ad3      	subs	r3, r2, r3
 8009812:	f241 3288 	movw	r2, #5000	; 0x1388
 8009816:	4293      	cmp	r3, r2
 8009818:	d901      	bls.n	800981e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800981a:	2303      	movs	r3, #3
 800981c:	e04f      	b.n	80098be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800981e:	4b2b      	ldr	r3, [pc, #172]	; (80098cc <HAL_RCC_ClockConfig+0x1bc>)
 8009820:	689b      	ldr	r3, [r3, #8]
 8009822:	f003 020c 	and.w	r2, r3, #12
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	685b      	ldr	r3, [r3, #4]
 800982a:	009b      	lsls	r3, r3, #2
 800982c:	429a      	cmp	r2, r3
 800982e:	d1eb      	bne.n	8009808 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009830:	4b25      	ldr	r3, [pc, #148]	; (80098c8 <HAL_RCC_ClockConfig+0x1b8>)
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f003 030f 	and.w	r3, r3, #15
 8009838:	683a      	ldr	r2, [r7, #0]
 800983a:	429a      	cmp	r2, r3
 800983c:	d20c      	bcs.n	8009858 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800983e:	4b22      	ldr	r3, [pc, #136]	; (80098c8 <HAL_RCC_ClockConfig+0x1b8>)
 8009840:	683a      	ldr	r2, [r7, #0]
 8009842:	b2d2      	uxtb	r2, r2
 8009844:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009846:	4b20      	ldr	r3, [pc, #128]	; (80098c8 <HAL_RCC_ClockConfig+0x1b8>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	f003 030f 	and.w	r3, r3, #15
 800984e:	683a      	ldr	r2, [r7, #0]
 8009850:	429a      	cmp	r2, r3
 8009852:	d001      	beq.n	8009858 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009854:	2301      	movs	r3, #1
 8009856:	e032      	b.n	80098be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f003 0304 	and.w	r3, r3, #4
 8009860:	2b00      	cmp	r3, #0
 8009862:	d008      	beq.n	8009876 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009864:	4b19      	ldr	r3, [pc, #100]	; (80098cc <HAL_RCC_ClockConfig+0x1bc>)
 8009866:	689b      	ldr	r3, [r3, #8]
 8009868:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	68db      	ldr	r3, [r3, #12]
 8009870:	4916      	ldr	r1, [pc, #88]	; (80098cc <HAL_RCC_ClockConfig+0x1bc>)
 8009872:	4313      	orrs	r3, r2
 8009874:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	f003 0308 	and.w	r3, r3, #8
 800987e:	2b00      	cmp	r3, #0
 8009880:	d009      	beq.n	8009896 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009882:	4b12      	ldr	r3, [pc, #72]	; (80098cc <HAL_RCC_ClockConfig+0x1bc>)
 8009884:	689b      	ldr	r3, [r3, #8]
 8009886:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	691b      	ldr	r3, [r3, #16]
 800988e:	00db      	lsls	r3, r3, #3
 8009890:	490e      	ldr	r1, [pc, #56]	; (80098cc <HAL_RCC_ClockConfig+0x1bc>)
 8009892:	4313      	orrs	r3, r2
 8009894:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009896:	f000 f821 	bl	80098dc <HAL_RCC_GetSysClockFreq>
 800989a:	4601      	mov	r1, r0
 800989c:	4b0b      	ldr	r3, [pc, #44]	; (80098cc <HAL_RCC_ClockConfig+0x1bc>)
 800989e:	689b      	ldr	r3, [r3, #8]
 80098a0:	091b      	lsrs	r3, r3, #4
 80098a2:	f003 030f 	and.w	r3, r3, #15
 80098a6:	4a0a      	ldr	r2, [pc, #40]	; (80098d0 <HAL_RCC_ClockConfig+0x1c0>)
 80098a8:	5cd3      	ldrb	r3, [r2, r3]
 80098aa:	fa21 f303 	lsr.w	r3, r1, r3
 80098ae:	4a09      	ldr	r2, [pc, #36]	; (80098d4 <HAL_RCC_ClockConfig+0x1c4>)
 80098b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80098b2:	4b09      	ldr	r3, [pc, #36]	; (80098d8 <HAL_RCC_ClockConfig+0x1c8>)
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	4618      	mov	r0, r3
 80098b8:	f7fd fa68 	bl	8006d8c <HAL_InitTick>

  return HAL_OK;
 80098bc:	2300      	movs	r3, #0
}
 80098be:	4618      	mov	r0, r3
 80098c0:	3710      	adds	r7, #16
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}
 80098c6:	bf00      	nop
 80098c8:	40023c00 	.word	0x40023c00
 80098cc:	40023800 	.word	0x40023800
 80098d0:	0800f61c 	.word	0x0800f61c
 80098d4:	20000004 	.word	0x20000004
 80098d8:	20000008 	.word	0x20000008

080098dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80098dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098de:	b085      	sub	sp, #20
 80098e0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80098e2:	2300      	movs	r3, #0
 80098e4:	607b      	str	r3, [r7, #4]
 80098e6:	2300      	movs	r3, #0
 80098e8:	60fb      	str	r3, [r7, #12]
 80098ea:	2300      	movs	r3, #0
 80098ec:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80098ee:	2300      	movs	r3, #0
 80098f0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80098f2:	4b63      	ldr	r3, [pc, #396]	; (8009a80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80098f4:	689b      	ldr	r3, [r3, #8]
 80098f6:	f003 030c 	and.w	r3, r3, #12
 80098fa:	2b04      	cmp	r3, #4
 80098fc:	d007      	beq.n	800990e <HAL_RCC_GetSysClockFreq+0x32>
 80098fe:	2b08      	cmp	r3, #8
 8009900:	d008      	beq.n	8009914 <HAL_RCC_GetSysClockFreq+0x38>
 8009902:	2b00      	cmp	r3, #0
 8009904:	f040 80b4 	bne.w	8009a70 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009908:	4b5e      	ldr	r3, [pc, #376]	; (8009a84 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800990a:	60bb      	str	r3, [r7, #8]
       break;
 800990c:	e0b3      	b.n	8009a76 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800990e:	4b5e      	ldr	r3, [pc, #376]	; (8009a88 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8009910:	60bb      	str	r3, [r7, #8]
      break;
 8009912:	e0b0      	b.n	8009a76 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009914:	4b5a      	ldr	r3, [pc, #360]	; (8009a80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009916:	685b      	ldr	r3, [r3, #4]
 8009918:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800991c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800991e:	4b58      	ldr	r3, [pc, #352]	; (8009a80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009920:	685b      	ldr	r3, [r3, #4]
 8009922:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009926:	2b00      	cmp	r3, #0
 8009928:	d04a      	beq.n	80099c0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800992a:	4b55      	ldr	r3, [pc, #340]	; (8009a80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800992c:	685b      	ldr	r3, [r3, #4]
 800992e:	099b      	lsrs	r3, r3, #6
 8009930:	f04f 0400 	mov.w	r4, #0
 8009934:	f240 11ff 	movw	r1, #511	; 0x1ff
 8009938:	f04f 0200 	mov.w	r2, #0
 800993c:	ea03 0501 	and.w	r5, r3, r1
 8009940:	ea04 0602 	and.w	r6, r4, r2
 8009944:	4629      	mov	r1, r5
 8009946:	4632      	mov	r2, r6
 8009948:	f04f 0300 	mov.w	r3, #0
 800994c:	f04f 0400 	mov.w	r4, #0
 8009950:	0154      	lsls	r4, r2, #5
 8009952:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8009956:	014b      	lsls	r3, r1, #5
 8009958:	4619      	mov	r1, r3
 800995a:	4622      	mov	r2, r4
 800995c:	1b49      	subs	r1, r1, r5
 800995e:	eb62 0206 	sbc.w	r2, r2, r6
 8009962:	f04f 0300 	mov.w	r3, #0
 8009966:	f04f 0400 	mov.w	r4, #0
 800996a:	0194      	lsls	r4, r2, #6
 800996c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8009970:	018b      	lsls	r3, r1, #6
 8009972:	1a5b      	subs	r3, r3, r1
 8009974:	eb64 0402 	sbc.w	r4, r4, r2
 8009978:	f04f 0100 	mov.w	r1, #0
 800997c:	f04f 0200 	mov.w	r2, #0
 8009980:	00e2      	lsls	r2, r4, #3
 8009982:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8009986:	00d9      	lsls	r1, r3, #3
 8009988:	460b      	mov	r3, r1
 800998a:	4614      	mov	r4, r2
 800998c:	195b      	adds	r3, r3, r5
 800998e:	eb44 0406 	adc.w	r4, r4, r6
 8009992:	f04f 0100 	mov.w	r1, #0
 8009996:	f04f 0200 	mov.w	r2, #0
 800999a:	0262      	lsls	r2, r4, #9
 800999c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80099a0:	0259      	lsls	r1, r3, #9
 80099a2:	460b      	mov	r3, r1
 80099a4:	4614      	mov	r4, r2
 80099a6:	4618      	mov	r0, r3
 80099a8:	4621      	mov	r1, r4
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	f04f 0400 	mov.w	r4, #0
 80099b0:	461a      	mov	r2, r3
 80099b2:	4623      	mov	r3, r4
 80099b4:	f7f7 f948 	bl	8000c48 <__aeabi_uldivmod>
 80099b8:	4603      	mov	r3, r0
 80099ba:	460c      	mov	r4, r1
 80099bc:	60fb      	str	r3, [r7, #12]
 80099be:	e049      	b.n	8009a54 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80099c0:	4b2f      	ldr	r3, [pc, #188]	; (8009a80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80099c2:	685b      	ldr	r3, [r3, #4]
 80099c4:	099b      	lsrs	r3, r3, #6
 80099c6:	f04f 0400 	mov.w	r4, #0
 80099ca:	f240 11ff 	movw	r1, #511	; 0x1ff
 80099ce:	f04f 0200 	mov.w	r2, #0
 80099d2:	ea03 0501 	and.w	r5, r3, r1
 80099d6:	ea04 0602 	and.w	r6, r4, r2
 80099da:	4629      	mov	r1, r5
 80099dc:	4632      	mov	r2, r6
 80099de:	f04f 0300 	mov.w	r3, #0
 80099e2:	f04f 0400 	mov.w	r4, #0
 80099e6:	0154      	lsls	r4, r2, #5
 80099e8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80099ec:	014b      	lsls	r3, r1, #5
 80099ee:	4619      	mov	r1, r3
 80099f0:	4622      	mov	r2, r4
 80099f2:	1b49      	subs	r1, r1, r5
 80099f4:	eb62 0206 	sbc.w	r2, r2, r6
 80099f8:	f04f 0300 	mov.w	r3, #0
 80099fc:	f04f 0400 	mov.w	r4, #0
 8009a00:	0194      	lsls	r4, r2, #6
 8009a02:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8009a06:	018b      	lsls	r3, r1, #6
 8009a08:	1a5b      	subs	r3, r3, r1
 8009a0a:	eb64 0402 	sbc.w	r4, r4, r2
 8009a0e:	f04f 0100 	mov.w	r1, #0
 8009a12:	f04f 0200 	mov.w	r2, #0
 8009a16:	00e2      	lsls	r2, r4, #3
 8009a18:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8009a1c:	00d9      	lsls	r1, r3, #3
 8009a1e:	460b      	mov	r3, r1
 8009a20:	4614      	mov	r4, r2
 8009a22:	195b      	adds	r3, r3, r5
 8009a24:	eb44 0406 	adc.w	r4, r4, r6
 8009a28:	f04f 0100 	mov.w	r1, #0
 8009a2c:	f04f 0200 	mov.w	r2, #0
 8009a30:	02a2      	lsls	r2, r4, #10
 8009a32:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8009a36:	0299      	lsls	r1, r3, #10
 8009a38:	460b      	mov	r3, r1
 8009a3a:	4614      	mov	r4, r2
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	4621      	mov	r1, r4
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f04f 0400 	mov.w	r4, #0
 8009a46:	461a      	mov	r2, r3
 8009a48:	4623      	mov	r3, r4
 8009a4a:	f7f7 f8fd 	bl	8000c48 <__aeabi_uldivmod>
 8009a4e:	4603      	mov	r3, r0
 8009a50:	460c      	mov	r4, r1
 8009a52:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009a54:	4b0a      	ldr	r3, [pc, #40]	; (8009a80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009a56:	685b      	ldr	r3, [r3, #4]
 8009a58:	0c1b      	lsrs	r3, r3, #16
 8009a5a:	f003 0303 	and.w	r3, r3, #3
 8009a5e:	3301      	adds	r3, #1
 8009a60:	005b      	lsls	r3, r3, #1
 8009a62:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8009a64:	68fa      	ldr	r2, [r7, #12]
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a6c:	60bb      	str	r3, [r7, #8]
      break;
 8009a6e:	e002      	b.n	8009a76 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009a70:	4b04      	ldr	r3, [pc, #16]	; (8009a84 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8009a72:	60bb      	str	r3, [r7, #8]
      break;
 8009a74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009a76:	68bb      	ldr	r3, [r7, #8]
}
 8009a78:	4618      	mov	r0, r3
 8009a7a:	3714      	adds	r7, #20
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a80:	40023800 	.word	0x40023800
 8009a84:	00f42400 	.word	0x00f42400
 8009a88:	007a1200 	.word	0x007a1200

08009a8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009a8c:	b480      	push	{r7}
 8009a8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009a90:	4b03      	ldr	r3, [pc, #12]	; (8009aa0 <HAL_RCC_GetHCLKFreq+0x14>)
 8009a92:	681b      	ldr	r3, [r3, #0]
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	46bd      	mov	sp, r7
 8009a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9c:	4770      	bx	lr
 8009a9e:	bf00      	nop
 8009aa0:	20000004 	.word	0x20000004

08009aa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009aa8:	f7ff fff0 	bl	8009a8c <HAL_RCC_GetHCLKFreq>
 8009aac:	4601      	mov	r1, r0
 8009aae:	4b05      	ldr	r3, [pc, #20]	; (8009ac4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009ab0:	689b      	ldr	r3, [r3, #8]
 8009ab2:	0a9b      	lsrs	r3, r3, #10
 8009ab4:	f003 0307 	and.w	r3, r3, #7
 8009ab8:	4a03      	ldr	r2, [pc, #12]	; (8009ac8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009aba:	5cd3      	ldrb	r3, [r2, r3]
 8009abc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	bd80      	pop	{r7, pc}
 8009ac4:	40023800 	.word	0x40023800
 8009ac8:	0800f62c 	.word	0x0800f62c

08009acc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009ad0:	f7ff ffdc 	bl	8009a8c <HAL_RCC_GetHCLKFreq>
 8009ad4:	4601      	mov	r1, r0
 8009ad6:	4b05      	ldr	r3, [pc, #20]	; (8009aec <HAL_RCC_GetPCLK2Freq+0x20>)
 8009ad8:	689b      	ldr	r3, [r3, #8]
 8009ada:	0b5b      	lsrs	r3, r3, #13
 8009adc:	f003 0307 	and.w	r3, r3, #7
 8009ae0:	4a03      	ldr	r2, [pc, #12]	; (8009af0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009ae2:	5cd3      	ldrb	r3, [r2, r3]
 8009ae4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8009ae8:	4618      	mov	r0, r3
 8009aea:	bd80      	pop	{r7, pc}
 8009aec:	40023800 	.word	0x40023800
 8009af0:	0800f62c 	.word	0x0800f62c

08009af4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b082      	sub	sp, #8
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d101      	bne.n	8009b06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009b02:	2301      	movs	r3, #1
 8009b04:	e03f      	b.n	8009b86 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009b0c:	b2db      	uxtb	r3, r3
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d106      	bne.n	8009b20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2200      	movs	r2, #0
 8009b16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009b1a:	6878      	ldr	r0, [r7, #4]
 8009b1c:	f7fd f89a 	bl	8006c54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2224      	movs	r2, #36	; 0x24
 8009b24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	68da      	ldr	r2, [r3, #12]
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009b36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	f000 fbdb 	bl	800a2f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	691a      	ldr	r2, [r3, #16]
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009b4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	695a      	ldr	r2, [r3, #20]
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009b5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	68da      	ldr	r2, [r3, #12]
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009b6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2200      	movs	r2, #0
 8009b72:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2220      	movs	r2, #32
 8009b78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2220      	movs	r2, #32
 8009b80:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8009b84:	2300      	movs	r3, #0
}
 8009b86:	4618      	mov	r0, r3
 8009b88:	3708      	adds	r7, #8
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bd80      	pop	{r7, pc}

08009b8e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009b8e:	b580      	push	{r7, lr}
 8009b90:	b088      	sub	sp, #32
 8009b92:	af02      	add	r7, sp, #8
 8009b94:	60f8      	str	r0, [r7, #12]
 8009b96:	60b9      	str	r1, [r7, #8]
 8009b98:	603b      	str	r3, [r7, #0]
 8009b9a:	4613      	mov	r3, r2
 8009b9c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009ba8:	b2db      	uxtb	r3, r3
 8009baa:	2b20      	cmp	r3, #32
 8009bac:	f040 8083 	bne.w	8009cb6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8009bb0:	68bb      	ldr	r3, [r7, #8]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d002      	beq.n	8009bbc <HAL_UART_Transmit+0x2e>
 8009bb6:	88fb      	ldrh	r3, [r7, #6]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d101      	bne.n	8009bc0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8009bbc:	2301      	movs	r3, #1
 8009bbe:	e07b      	b.n	8009cb8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009bc6:	2b01      	cmp	r3, #1
 8009bc8:	d101      	bne.n	8009bce <HAL_UART_Transmit+0x40>
 8009bca:	2302      	movs	r3, #2
 8009bcc:	e074      	b.n	8009cb8 <HAL_UART_Transmit+0x12a>
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	2201      	movs	r2, #1
 8009bd2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	2200      	movs	r2, #0
 8009bda:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	2221      	movs	r2, #33	; 0x21
 8009be0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8009be4:	f7fd f916 	bl	8006e14 <HAL_GetTick>
 8009be8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	88fa      	ldrh	r2, [r7, #6]
 8009bee:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	88fa      	ldrh	r2, [r7, #6]
 8009bf4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8009bfe:	e042      	b.n	8009c86 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009c04:	b29b      	uxth	r3, r3
 8009c06:	3b01      	subs	r3, #1
 8009c08:	b29a      	uxth	r2, r3
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	689b      	ldr	r3, [r3, #8]
 8009c12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c16:	d122      	bne.n	8009c5e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	9300      	str	r3, [sp, #0]
 8009c1c:	697b      	ldr	r3, [r7, #20]
 8009c1e:	2200      	movs	r2, #0
 8009c20:	2180      	movs	r1, #128	; 0x80
 8009c22:	68f8      	ldr	r0, [r7, #12]
 8009c24:	f000 f9fa 	bl	800a01c <UART_WaitOnFlagUntilTimeout>
 8009c28:	4603      	mov	r3, r0
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d001      	beq.n	8009c32 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8009c2e:	2303      	movs	r3, #3
 8009c30:	e042      	b.n	8009cb8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8009c32:	68bb      	ldr	r3, [r7, #8]
 8009c34:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8009c36:	693b      	ldr	r3, [r7, #16]
 8009c38:	881b      	ldrh	r3, [r3, #0]
 8009c3a:	461a      	mov	r2, r3
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009c44:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	691b      	ldr	r3, [r3, #16]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d103      	bne.n	8009c56 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8009c4e:	68bb      	ldr	r3, [r7, #8]
 8009c50:	3302      	adds	r3, #2
 8009c52:	60bb      	str	r3, [r7, #8]
 8009c54:	e017      	b.n	8009c86 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8009c56:	68bb      	ldr	r3, [r7, #8]
 8009c58:	3301      	adds	r3, #1
 8009c5a:	60bb      	str	r3, [r7, #8]
 8009c5c:	e013      	b.n	8009c86 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009c5e:	683b      	ldr	r3, [r7, #0]
 8009c60:	9300      	str	r3, [sp, #0]
 8009c62:	697b      	ldr	r3, [r7, #20]
 8009c64:	2200      	movs	r2, #0
 8009c66:	2180      	movs	r1, #128	; 0x80
 8009c68:	68f8      	ldr	r0, [r7, #12]
 8009c6a:	f000 f9d7 	bl	800a01c <UART_WaitOnFlagUntilTimeout>
 8009c6e:	4603      	mov	r3, r0
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d001      	beq.n	8009c78 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8009c74:	2303      	movs	r3, #3
 8009c76:	e01f      	b.n	8009cb8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	1c5a      	adds	r2, r3, #1
 8009c7c:	60ba      	str	r2, [r7, #8]
 8009c7e:	781a      	ldrb	r2, [r3, #0]
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009c8a:	b29b      	uxth	r3, r3
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d1b7      	bne.n	8009c00 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	9300      	str	r3, [sp, #0]
 8009c94:	697b      	ldr	r3, [r7, #20]
 8009c96:	2200      	movs	r2, #0
 8009c98:	2140      	movs	r1, #64	; 0x40
 8009c9a:	68f8      	ldr	r0, [r7, #12]
 8009c9c:	f000 f9be 	bl	800a01c <UART_WaitOnFlagUntilTimeout>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d001      	beq.n	8009caa <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8009ca6:	2303      	movs	r3, #3
 8009ca8:	e006      	b.n	8009cb8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	2220      	movs	r2, #32
 8009cae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	e000      	b.n	8009cb8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8009cb6:	2302      	movs	r3, #2
  }
}
 8009cb8:	4618      	mov	r0, r3
 8009cba:	3718      	adds	r7, #24
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	bd80      	pop	{r7, pc}

08009cc0 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009cc0:	b480      	push	{r7}
 8009cc2:	b085      	sub	sp, #20
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	60f8      	str	r0, [r7, #12]
 8009cc8:	60b9      	str	r1, [r7, #8]
 8009cca:	4613      	mov	r3, r2
 8009ccc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009cd4:	b2db      	uxtb	r3, r3
 8009cd6:	2b20      	cmp	r3, #32
 8009cd8:	d130      	bne.n	8009d3c <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009cda:	68bb      	ldr	r3, [r7, #8]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d002      	beq.n	8009ce6 <HAL_UART_Transmit_IT+0x26>
 8009ce0:	88fb      	ldrh	r3, [r7, #6]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d101      	bne.n	8009cea <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8009ce6:	2301      	movs	r3, #1
 8009ce8:	e029      	b.n	8009d3e <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009cf0:	2b01      	cmp	r3, #1
 8009cf2:	d101      	bne.n	8009cf8 <HAL_UART_Transmit_IT+0x38>
 8009cf4:	2302      	movs	r3, #2
 8009cf6:	e022      	b.n	8009d3e <HAL_UART_Transmit_IT+0x7e>
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	2201      	movs	r2, #1
 8009cfc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	68ba      	ldr	r2, [r7, #8]
 8009d04:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	88fa      	ldrh	r2, [r7, #6]
 8009d0a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	88fa      	ldrh	r2, [r7, #6]
 8009d10:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	2200      	movs	r2, #0
 8009d16:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	2221      	movs	r2, #33	; 0x21
 8009d1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	2200      	movs	r2, #0
 8009d24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	68da      	ldr	r2, [r3, #12]
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009d36:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8009d38:	2300      	movs	r3, #0
 8009d3a:	e000      	b.n	8009d3e <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8009d3c:	2302      	movs	r3, #2
  }
}
 8009d3e:	4618      	mov	r0, r3
 8009d40:	3714      	adds	r7, #20
 8009d42:	46bd      	mov	sp, r7
 8009d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d48:	4770      	bx	lr

08009d4a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009d4a:	b480      	push	{r7}
 8009d4c:	b085      	sub	sp, #20
 8009d4e:	af00      	add	r7, sp, #0
 8009d50:	60f8      	str	r0, [r7, #12]
 8009d52:	60b9      	str	r1, [r7, #8]
 8009d54:	4613      	mov	r3, r2
 8009d56:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009d5e:	b2db      	uxtb	r3, r3
 8009d60:	2b20      	cmp	r3, #32
 8009d62:	d140      	bne.n	8009de6 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009d64:	68bb      	ldr	r3, [r7, #8]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d002      	beq.n	8009d70 <HAL_UART_Receive_IT+0x26>
 8009d6a:	88fb      	ldrh	r3, [r7, #6]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d101      	bne.n	8009d74 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009d70:	2301      	movs	r3, #1
 8009d72:	e039      	b.n	8009de8 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009d7a:	2b01      	cmp	r3, #1
 8009d7c:	d101      	bne.n	8009d82 <HAL_UART_Receive_IT+0x38>
 8009d7e:	2302      	movs	r3, #2
 8009d80:	e032      	b.n	8009de8 <HAL_UART_Receive_IT+0x9e>
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	2201      	movs	r2, #1
 8009d86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	68ba      	ldr	r2, [r7, #8]
 8009d8e:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	88fa      	ldrh	r2, [r7, #6]
 8009d94:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	88fa      	ldrh	r2, [r7, #6]
 8009d9a:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	2200      	movs	r2, #0
 8009da0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	2222      	movs	r2, #34	; 0x22
 8009da6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	2200      	movs	r2, #0
 8009dae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	68da      	ldr	r2, [r3, #12]
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009dc0:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	695a      	ldr	r2, [r3, #20]
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	f042 0201 	orr.w	r2, r2, #1
 8009dd0:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	68da      	ldr	r2, [r3, #12]
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	f042 0220 	orr.w	r2, r2, #32
 8009de0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8009de2:	2300      	movs	r3, #0
 8009de4:	e000      	b.n	8009de8 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8009de6:	2302      	movs	r3, #2
  }
}
 8009de8:	4618      	mov	r0, r3
 8009dea:	3714      	adds	r7, #20
 8009dec:	46bd      	mov	sp, r7
 8009dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df2:	4770      	bx	lr

08009df4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b088      	sub	sp, #32
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	68db      	ldr	r3, [r3, #12]
 8009e0a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	695b      	ldr	r3, [r3, #20]
 8009e12:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8009e14:	2300      	movs	r3, #0
 8009e16:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8009e18:	2300      	movs	r3, #0
 8009e1a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009e1c:	69fb      	ldr	r3, [r7, #28]
 8009e1e:	f003 030f 	and.w	r3, r3, #15
 8009e22:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8009e24:	693b      	ldr	r3, [r7, #16]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d10d      	bne.n	8009e46 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009e2a:	69fb      	ldr	r3, [r7, #28]
 8009e2c:	f003 0320 	and.w	r3, r3, #32
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d008      	beq.n	8009e46 <HAL_UART_IRQHandler+0x52>
 8009e34:	69bb      	ldr	r3, [r7, #24]
 8009e36:	f003 0320 	and.w	r3, r3, #32
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d003      	beq.n	8009e46 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8009e3e:	6878      	ldr	r0, [r7, #4]
 8009e40:	f000 f9d6 	bl	800a1f0 <UART_Receive_IT>
      return;
 8009e44:	e0d1      	b.n	8009fea <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009e46:	693b      	ldr	r3, [r7, #16]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	f000 80b0 	beq.w	8009fae <HAL_UART_IRQHandler+0x1ba>
 8009e4e:	697b      	ldr	r3, [r7, #20]
 8009e50:	f003 0301 	and.w	r3, r3, #1
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d105      	bne.n	8009e64 <HAL_UART_IRQHandler+0x70>
 8009e58:	69bb      	ldr	r3, [r7, #24]
 8009e5a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	f000 80a5 	beq.w	8009fae <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009e64:	69fb      	ldr	r3, [r7, #28]
 8009e66:	f003 0301 	and.w	r3, r3, #1
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d00a      	beq.n	8009e84 <HAL_UART_IRQHandler+0x90>
 8009e6e:	69bb      	ldr	r3, [r7, #24]
 8009e70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d005      	beq.n	8009e84 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e7c:	f043 0201 	orr.w	r2, r3, #1
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009e84:	69fb      	ldr	r3, [r7, #28]
 8009e86:	f003 0304 	and.w	r3, r3, #4
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d00a      	beq.n	8009ea4 <HAL_UART_IRQHandler+0xb0>
 8009e8e:	697b      	ldr	r3, [r7, #20]
 8009e90:	f003 0301 	and.w	r3, r3, #1
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d005      	beq.n	8009ea4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e9c:	f043 0202 	orr.w	r2, r3, #2
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009ea4:	69fb      	ldr	r3, [r7, #28]
 8009ea6:	f003 0302 	and.w	r3, r3, #2
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d00a      	beq.n	8009ec4 <HAL_UART_IRQHandler+0xd0>
 8009eae:	697b      	ldr	r3, [r7, #20]
 8009eb0:	f003 0301 	and.w	r3, r3, #1
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d005      	beq.n	8009ec4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ebc:	f043 0204 	orr.w	r2, r3, #4
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8009ec4:	69fb      	ldr	r3, [r7, #28]
 8009ec6:	f003 0308 	and.w	r3, r3, #8
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d00f      	beq.n	8009eee <HAL_UART_IRQHandler+0xfa>
 8009ece:	69bb      	ldr	r3, [r7, #24]
 8009ed0:	f003 0320 	and.w	r3, r3, #32
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d104      	bne.n	8009ee2 <HAL_UART_IRQHandler+0xee>
 8009ed8:	697b      	ldr	r3, [r7, #20]
 8009eda:	f003 0301 	and.w	r3, r3, #1
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d005      	beq.n	8009eee <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ee6:	f043 0208 	orr.w	r2, r3, #8
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d078      	beq.n	8009fe8 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009ef6:	69fb      	ldr	r3, [r7, #28]
 8009ef8:	f003 0320 	and.w	r3, r3, #32
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d007      	beq.n	8009f10 <HAL_UART_IRQHandler+0x11c>
 8009f00:	69bb      	ldr	r3, [r7, #24]
 8009f02:	f003 0320 	and.w	r3, r3, #32
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d002      	beq.n	8009f10 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8009f0a:	6878      	ldr	r0, [r7, #4]
 8009f0c:	f000 f970 	bl	800a1f0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	695b      	ldr	r3, [r3, #20]
 8009f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f1a:	2b40      	cmp	r3, #64	; 0x40
 8009f1c:	bf0c      	ite	eq
 8009f1e:	2301      	moveq	r3, #1
 8009f20:	2300      	movne	r3, #0
 8009f22:	b2db      	uxtb	r3, r3
 8009f24:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f2a:	f003 0308 	and.w	r3, r3, #8
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d102      	bne.n	8009f38 <HAL_UART_IRQHandler+0x144>
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d031      	beq.n	8009f9c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009f38:	6878      	ldr	r0, [r7, #4]
 8009f3a:	f000 f8b9 	bl	800a0b0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	695b      	ldr	r3, [r3, #20]
 8009f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f48:	2b40      	cmp	r3, #64	; 0x40
 8009f4a:	d123      	bne.n	8009f94 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	695a      	ldr	r2, [r3, #20]
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009f5a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d013      	beq.n	8009f8c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f68:	4a21      	ldr	r2, [pc, #132]	; (8009ff0 <HAL_UART_IRQHandler+0x1fc>)
 8009f6a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f70:	4618      	mov	r0, r3
 8009f72:	f7fd fd89 	bl	8007a88 <HAL_DMA_Abort_IT>
 8009f76:	4603      	mov	r3, r0
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d016      	beq.n	8009faa <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f82:	687a      	ldr	r2, [r7, #4]
 8009f84:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009f86:	4610      	mov	r0, r2
 8009f88:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f8a:	e00e      	b.n	8009faa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009f8c:	6878      	ldr	r0, [r7, #4]
 8009f8e:	f000 f83b 	bl	800a008 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f92:	e00a      	b.n	8009faa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009f94:	6878      	ldr	r0, [r7, #4]
 8009f96:	f000 f837 	bl	800a008 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f9a:	e006      	b.n	8009faa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f000 f833 	bl	800a008 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8009fa8:	e01e      	b.n	8009fe8 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009faa:	bf00      	nop
    return;
 8009fac:	e01c      	b.n	8009fe8 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009fae:	69fb      	ldr	r3, [r7, #28]
 8009fb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d008      	beq.n	8009fca <HAL_UART_IRQHandler+0x1d6>
 8009fb8:	69bb      	ldr	r3, [r7, #24]
 8009fba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d003      	beq.n	8009fca <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	f000 f8a6 	bl	800a114 <UART_Transmit_IT>
    return;
 8009fc8:	e00f      	b.n	8009fea <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009fca:	69fb      	ldr	r3, [r7, #28]
 8009fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d00a      	beq.n	8009fea <HAL_UART_IRQHandler+0x1f6>
 8009fd4:	69bb      	ldr	r3, [r7, #24]
 8009fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d005      	beq.n	8009fea <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8009fde:	6878      	ldr	r0, [r7, #4]
 8009fe0:	f000 f8ee 	bl	800a1c0 <UART_EndTransmit_IT>
    return;
 8009fe4:	bf00      	nop
 8009fe6:	e000      	b.n	8009fea <HAL_UART_IRQHandler+0x1f6>
    return;
 8009fe8:	bf00      	nop
  }
}
 8009fea:	3720      	adds	r7, #32
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bd80      	pop	{r7, pc}
 8009ff0:	0800a0ed 	.word	0x0800a0ed

08009ff4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009ff4:	b480      	push	{r7}
 8009ff6:	b083      	sub	sp, #12
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009ffc:	bf00      	nop
 8009ffe:	370c      	adds	r7, #12
 800a000:	46bd      	mov	sp, r7
 800a002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a006:	4770      	bx	lr

0800a008 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a008:	b480      	push	{r7}
 800a00a:	b083      	sub	sp, #12
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a010:	bf00      	nop
 800a012:	370c      	adds	r7, #12
 800a014:	46bd      	mov	sp, r7
 800a016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01a:	4770      	bx	lr

0800a01c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b084      	sub	sp, #16
 800a020:	af00      	add	r7, sp, #0
 800a022:	60f8      	str	r0, [r7, #12]
 800a024:	60b9      	str	r1, [r7, #8]
 800a026:	603b      	str	r3, [r7, #0]
 800a028:	4613      	mov	r3, r2
 800a02a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a02c:	e02c      	b.n	800a088 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a02e:	69bb      	ldr	r3, [r7, #24]
 800a030:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a034:	d028      	beq.n	800a088 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a036:	69bb      	ldr	r3, [r7, #24]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d007      	beq.n	800a04c <UART_WaitOnFlagUntilTimeout+0x30>
 800a03c:	f7fc feea 	bl	8006e14 <HAL_GetTick>
 800a040:	4602      	mov	r2, r0
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	1ad3      	subs	r3, r2, r3
 800a046:	69ba      	ldr	r2, [r7, #24]
 800a048:	429a      	cmp	r2, r3
 800a04a:	d21d      	bcs.n	800a088 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	68da      	ldr	r2, [r3, #12]
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a05a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	695a      	ldr	r2, [r3, #20]
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	f022 0201 	bic.w	r2, r2, #1
 800a06a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	2220      	movs	r2, #32
 800a070:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	2220      	movs	r2, #32
 800a078:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	2200      	movs	r2, #0
 800a080:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800a084:	2303      	movs	r3, #3
 800a086:	e00f      	b.n	800a0a8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	681a      	ldr	r2, [r3, #0]
 800a08e:	68bb      	ldr	r3, [r7, #8]
 800a090:	4013      	ands	r3, r2
 800a092:	68ba      	ldr	r2, [r7, #8]
 800a094:	429a      	cmp	r2, r3
 800a096:	bf0c      	ite	eq
 800a098:	2301      	moveq	r3, #1
 800a09a:	2300      	movne	r3, #0
 800a09c:	b2db      	uxtb	r3, r3
 800a09e:	461a      	mov	r2, r3
 800a0a0:	79fb      	ldrb	r3, [r7, #7]
 800a0a2:	429a      	cmp	r2, r3
 800a0a4:	d0c3      	beq.n	800a02e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a0a6:	2300      	movs	r3, #0
}
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	3710      	adds	r7, #16
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	bd80      	pop	{r7, pc}

0800a0b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a0b0:	b480      	push	{r7}
 800a0b2:	b083      	sub	sp, #12
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	68da      	ldr	r2, [r3, #12]
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a0c6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	695a      	ldr	r2, [r3, #20]
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	f022 0201 	bic.w	r2, r2, #1
 800a0d6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2220      	movs	r2, #32
 800a0dc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800a0e0:	bf00      	nop
 800a0e2:	370c      	adds	r7, #12
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ea:	4770      	bx	lr

0800a0ec <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b084      	sub	sp, #16
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0f8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	2200      	movs	r2, #0
 800a104:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a106:	68f8      	ldr	r0, [r7, #12]
 800a108:	f7ff ff7e 	bl	800a008 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a10c:	bf00      	nop
 800a10e:	3710      	adds	r7, #16
 800a110:	46bd      	mov	sp, r7
 800a112:	bd80      	pop	{r7, pc}

0800a114 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a114:	b480      	push	{r7}
 800a116:	b085      	sub	sp, #20
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a122:	b2db      	uxtb	r3, r3
 800a124:	2b21      	cmp	r3, #33	; 0x21
 800a126:	d144      	bne.n	800a1b2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	689b      	ldr	r3, [r3, #8]
 800a12c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a130:	d11a      	bne.n	800a168 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	6a1b      	ldr	r3, [r3, #32]
 800a136:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	881b      	ldrh	r3, [r3, #0]
 800a13c:	461a      	mov	r2, r3
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a146:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	691b      	ldr	r3, [r3, #16]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d105      	bne.n	800a15c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	6a1b      	ldr	r3, [r3, #32]
 800a154:	1c9a      	adds	r2, r3, #2
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	621a      	str	r2, [r3, #32]
 800a15a:	e00e      	b.n	800a17a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	6a1b      	ldr	r3, [r3, #32]
 800a160:	1c5a      	adds	r2, r3, #1
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	621a      	str	r2, [r3, #32]
 800a166:	e008      	b.n	800a17a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	6a1b      	ldr	r3, [r3, #32]
 800a16c:	1c59      	adds	r1, r3, #1
 800a16e:	687a      	ldr	r2, [r7, #4]
 800a170:	6211      	str	r1, [r2, #32]
 800a172:	781a      	ldrb	r2, [r3, #0]
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a17e:	b29b      	uxth	r3, r3
 800a180:	3b01      	subs	r3, #1
 800a182:	b29b      	uxth	r3, r3
 800a184:	687a      	ldr	r2, [r7, #4]
 800a186:	4619      	mov	r1, r3
 800a188:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d10f      	bne.n	800a1ae <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	68da      	ldr	r2, [r3, #12]
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a19c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	68da      	ldr	r2, [r3, #12]
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a1ac:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	e000      	b.n	800a1b4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800a1b2:	2302      	movs	r3, #2
  }
}
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	3714      	adds	r7, #20
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1be:	4770      	bx	lr

0800a1c0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b082      	sub	sp, #8
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	68da      	ldr	r2, [r3, #12]
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a1d6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2220      	movs	r2, #32
 800a1dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a1e0:	6878      	ldr	r0, [r7, #4]
 800a1e2:	f7ff ff07 	bl	8009ff4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a1e6:	2300      	movs	r3, #0
}
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	3708      	adds	r7, #8
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	bd80      	pop	{r7, pc}

0800a1f0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b084      	sub	sp, #16
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a1fe:	b2db      	uxtb	r3, r3
 800a200:	2b22      	cmp	r3, #34	; 0x22
 800a202:	d171      	bne.n	800a2e8 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	689b      	ldr	r3, [r3, #8]
 800a208:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a20c:	d123      	bne.n	800a256 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a212:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	691b      	ldr	r3, [r3, #16]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d10e      	bne.n	800a23a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	685b      	ldr	r3, [r3, #4]
 800a222:	b29b      	uxth	r3, r3
 800a224:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a228:	b29a      	uxth	r2, r3
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a232:	1c9a      	adds	r2, r3, #2
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	629a      	str	r2, [r3, #40]	; 0x28
 800a238:	e029      	b.n	800a28e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	685b      	ldr	r3, [r3, #4]
 800a240:	b29b      	uxth	r3, r3
 800a242:	b2db      	uxtb	r3, r3
 800a244:	b29a      	uxth	r2, r3
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a24e:	1c5a      	adds	r2, r3, #1
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	629a      	str	r2, [r3, #40]	; 0x28
 800a254:	e01b      	b.n	800a28e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	691b      	ldr	r3, [r3, #16]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d10a      	bne.n	800a274 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	6858      	ldr	r0, [r3, #4]
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a268:	1c59      	adds	r1, r3, #1
 800a26a:	687a      	ldr	r2, [r7, #4]
 800a26c:	6291      	str	r1, [r2, #40]	; 0x28
 800a26e:	b2c2      	uxtb	r2, r0
 800a270:	701a      	strb	r2, [r3, #0]
 800a272:	e00c      	b.n	800a28e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	685b      	ldr	r3, [r3, #4]
 800a27a:	b2da      	uxtb	r2, r3
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a280:	1c58      	adds	r0, r3, #1
 800a282:	6879      	ldr	r1, [r7, #4]
 800a284:	6288      	str	r0, [r1, #40]	; 0x28
 800a286:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a28a:	b2d2      	uxtb	r2, r2
 800a28c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a292:	b29b      	uxth	r3, r3
 800a294:	3b01      	subs	r3, #1
 800a296:	b29b      	uxth	r3, r3
 800a298:	687a      	ldr	r2, [r7, #4]
 800a29a:	4619      	mov	r1, r3
 800a29c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d120      	bne.n	800a2e4 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	68da      	ldr	r2, [r3, #12]
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	f022 0220 	bic.w	r2, r2, #32
 800a2b0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	68da      	ldr	r2, [r3, #12]
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a2c0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	695a      	ldr	r2, [r3, #20]
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	f022 0201 	bic.w	r2, r2, #1
 800a2d0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2220      	movs	r2, #32
 800a2d6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800a2da:	6878      	ldr	r0, [r7, #4]
 800a2dc:	f7fb f87c 	bl	80053d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	e002      	b.n	800a2ea <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	e000      	b.n	800a2ea <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800a2e8:	2302      	movs	r3, #2
  }
}
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	3710      	adds	r7, #16
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	bd80      	pop	{r7, pc}
	...

0800a2f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a2f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2f8:	b085      	sub	sp, #20
 800a2fa:	af00      	add	r7, sp, #0
 800a2fc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	691b      	ldr	r3, [r3, #16]
 800a304:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	68da      	ldr	r2, [r3, #12]
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	430a      	orrs	r2, r1
 800a312:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	689a      	ldr	r2, [r3, #8]
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	691b      	ldr	r3, [r3, #16]
 800a31c:	431a      	orrs	r2, r3
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	695b      	ldr	r3, [r3, #20]
 800a322:	431a      	orrs	r2, r3
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	69db      	ldr	r3, [r3, #28]
 800a328:	4313      	orrs	r3, r2
 800a32a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	68db      	ldr	r3, [r3, #12]
 800a332:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800a336:	f023 030c 	bic.w	r3, r3, #12
 800a33a:	687a      	ldr	r2, [r7, #4]
 800a33c:	6812      	ldr	r2, [r2, #0]
 800a33e:	68f9      	ldr	r1, [r7, #12]
 800a340:	430b      	orrs	r3, r1
 800a342:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	695b      	ldr	r3, [r3, #20]
 800a34a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	699a      	ldr	r2, [r3, #24]
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	430a      	orrs	r2, r1
 800a358:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	69db      	ldr	r3, [r3, #28]
 800a35e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a362:	f040 818b 	bne.w	800a67c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	4ac1      	ldr	r2, [pc, #772]	; (800a670 <UART_SetConfig+0x37c>)
 800a36c:	4293      	cmp	r3, r2
 800a36e:	d005      	beq.n	800a37c <UART_SetConfig+0x88>
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	4abf      	ldr	r2, [pc, #764]	; (800a674 <UART_SetConfig+0x380>)
 800a376:	4293      	cmp	r3, r2
 800a378:	f040 80bd 	bne.w	800a4f6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a37c:	f7ff fba6 	bl	8009acc <HAL_RCC_GetPCLK2Freq>
 800a380:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a382:	68bb      	ldr	r3, [r7, #8]
 800a384:	461d      	mov	r5, r3
 800a386:	f04f 0600 	mov.w	r6, #0
 800a38a:	46a8      	mov	r8, r5
 800a38c:	46b1      	mov	r9, r6
 800a38e:	eb18 0308 	adds.w	r3, r8, r8
 800a392:	eb49 0409 	adc.w	r4, r9, r9
 800a396:	4698      	mov	r8, r3
 800a398:	46a1      	mov	r9, r4
 800a39a:	eb18 0805 	adds.w	r8, r8, r5
 800a39e:	eb49 0906 	adc.w	r9, r9, r6
 800a3a2:	f04f 0100 	mov.w	r1, #0
 800a3a6:	f04f 0200 	mov.w	r2, #0
 800a3aa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a3ae:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a3b2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a3b6:	4688      	mov	r8, r1
 800a3b8:	4691      	mov	r9, r2
 800a3ba:	eb18 0005 	adds.w	r0, r8, r5
 800a3be:	eb49 0106 	adc.w	r1, r9, r6
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	685b      	ldr	r3, [r3, #4]
 800a3c6:	461d      	mov	r5, r3
 800a3c8:	f04f 0600 	mov.w	r6, #0
 800a3cc:	196b      	adds	r3, r5, r5
 800a3ce:	eb46 0406 	adc.w	r4, r6, r6
 800a3d2:	461a      	mov	r2, r3
 800a3d4:	4623      	mov	r3, r4
 800a3d6:	f7f6 fc37 	bl	8000c48 <__aeabi_uldivmod>
 800a3da:	4603      	mov	r3, r0
 800a3dc:	460c      	mov	r4, r1
 800a3de:	461a      	mov	r2, r3
 800a3e0:	4ba5      	ldr	r3, [pc, #660]	; (800a678 <UART_SetConfig+0x384>)
 800a3e2:	fba3 2302 	umull	r2, r3, r3, r2
 800a3e6:	095b      	lsrs	r3, r3, #5
 800a3e8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a3ec:	68bb      	ldr	r3, [r7, #8]
 800a3ee:	461d      	mov	r5, r3
 800a3f0:	f04f 0600 	mov.w	r6, #0
 800a3f4:	46a9      	mov	r9, r5
 800a3f6:	46b2      	mov	sl, r6
 800a3f8:	eb19 0309 	adds.w	r3, r9, r9
 800a3fc:	eb4a 040a 	adc.w	r4, sl, sl
 800a400:	4699      	mov	r9, r3
 800a402:	46a2      	mov	sl, r4
 800a404:	eb19 0905 	adds.w	r9, r9, r5
 800a408:	eb4a 0a06 	adc.w	sl, sl, r6
 800a40c:	f04f 0100 	mov.w	r1, #0
 800a410:	f04f 0200 	mov.w	r2, #0
 800a414:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a418:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a41c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a420:	4689      	mov	r9, r1
 800a422:	4692      	mov	sl, r2
 800a424:	eb19 0005 	adds.w	r0, r9, r5
 800a428:	eb4a 0106 	adc.w	r1, sl, r6
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	685b      	ldr	r3, [r3, #4]
 800a430:	461d      	mov	r5, r3
 800a432:	f04f 0600 	mov.w	r6, #0
 800a436:	196b      	adds	r3, r5, r5
 800a438:	eb46 0406 	adc.w	r4, r6, r6
 800a43c:	461a      	mov	r2, r3
 800a43e:	4623      	mov	r3, r4
 800a440:	f7f6 fc02 	bl	8000c48 <__aeabi_uldivmod>
 800a444:	4603      	mov	r3, r0
 800a446:	460c      	mov	r4, r1
 800a448:	461a      	mov	r2, r3
 800a44a:	4b8b      	ldr	r3, [pc, #556]	; (800a678 <UART_SetConfig+0x384>)
 800a44c:	fba3 1302 	umull	r1, r3, r3, r2
 800a450:	095b      	lsrs	r3, r3, #5
 800a452:	2164      	movs	r1, #100	; 0x64
 800a454:	fb01 f303 	mul.w	r3, r1, r3
 800a458:	1ad3      	subs	r3, r2, r3
 800a45a:	00db      	lsls	r3, r3, #3
 800a45c:	3332      	adds	r3, #50	; 0x32
 800a45e:	4a86      	ldr	r2, [pc, #536]	; (800a678 <UART_SetConfig+0x384>)
 800a460:	fba2 2303 	umull	r2, r3, r2, r3
 800a464:	095b      	lsrs	r3, r3, #5
 800a466:	005b      	lsls	r3, r3, #1
 800a468:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a46c:	4498      	add	r8, r3
 800a46e:	68bb      	ldr	r3, [r7, #8]
 800a470:	461d      	mov	r5, r3
 800a472:	f04f 0600 	mov.w	r6, #0
 800a476:	46a9      	mov	r9, r5
 800a478:	46b2      	mov	sl, r6
 800a47a:	eb19 0309 	adds.w	r3, r9, r9
 800a47e:	eb4a 040a 	adc.w	r4, sl, sl
 800a482:	4699      	mov	r9, r3
 800a484:	46a2      	mov	sl, r4
 800a486:	eb19 0905 	adds.w	r9, r9, r5
 800a48a:	eb4a 0a06 	adc.w	sl, sl, r6
 800a48e:	f04f 0100 	mov.w	r1, #0
 800a492:	f04f 0200 	mov.w	r2, #0
 800a496:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a49a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a49e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a4a2:	4689      	mov	r9, r1
 800a4a4:	4692      	mov	sl, r2
 800a4a6:	eb19 0005 	adds.w	r0, r9, r5
 800a4aa:	eb4a 0106 	adc.w	r1, sl, r6
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	685b      	ldr	r3, [r3, #4]
 800a4b2:	461d      	mov	r5, r3
 800a4b4:	f04f 0600 	mov.w	r6, #0
 800a4b8:	196b      	adds	r3, r5, r5
 800a4ba:	eb46 0406 	adc.w	r4, r6, r6
 800a4be:	461a      	mov	r2, r3
 800a4c0:	4623      	mov	r3, r4
 800a4c2:	f7f6 fbc1 	bl	8000c48 <__aeabi_uldivmod>
 800a4c6:	4603      	mov	r3, r0
 800a4c8:	460c      	mov	r4, r1
 800a4ca:	461a      	mov	r2, r3
 800a4cc:	4b6a      	ldr	r3, [pc, #424]	; (800a678 <UART_SetConfig+0x384>)
 800a4ce:	fba3 1302 	umull	r1, r3, r3, r2
 800a4d2:	095b      	lsrs	r3, r3, #5
 800a4d4:	2164      	movs	r1, #100	; 0x64
 800a4d6:	fb01 f303 	mul.w	r3, r1, r3
 800a4da:	1ad3      	subs	r3, r2, r3
 800a4dc:	00db      	lsls	r3, r3, #3
 800a4de:	3332      	adds	r3, #50	; 0x32
 800a4e0:	4a65      	ldr	r2, [pc, #404]	; (800a678 <UART_SetConfig+0x384>)
 800a4e2:	fba2 2303 	umull	r2, r3, r2, r3
 800a4e6:	095b      	lsrs	r3, r3, #5
 800a4e8:	f003 0207 	and.w	r2, r3, #7
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	4442      	add	r2, r8
 800a4f2:	609a      	str	r2, [r3, #8]
 800a4f4:	e26f      	b.n	800a9d6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a4f6:	f7ff fad5 	bl	8009aa4 <HAL_RCC_GetPCLK1Freq>
 800a4fa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a4fc:	68bb      	ldr	r3, [r7, #8]
 800a4fe:	461d      	mov	r5, r3
 800a500:	f04f 0600 	mov.w	r6, #0
 800a504:	46a8      	mov	r8, r5
 800a506:	46b1      	mov	r9, r6
 800a508:	eb18 0308 	adds.w	r3, r8, r8
 800a50c:	eb49 0409 	adc.w	r4, r9, r9
 800a510:	4698      	mov	r8, r3
 800a512:	46a1      	mov	r9, r4
 800a514:	eb18 0805 	adds.w	r8, r8, r5
 800a518:	eb49 0906 	adc.w	r9, r9, r6
 800a51c:	f04f 0100 	mov.w	r1, #0
 800a520:	f04f 0200 	mov.w	r2, #0
 800a524:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a528:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a52c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a530:	4688      	mov	r8, r1
 800a532:	4691      	mov	r9, r2
 800a534:	eb18 0005 	adds.w	r0, r8, r5
 800a538:	eb49 0106 	adc.w	r1, r9, r6
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	685b      	ldr	r3, [r3, #4]
 800a540:	461d      	mov	r5, r3
 800a542:	f04f 0600 	mov.w	r6, #0
 800a546:	196b      	adds	r3, r5, r5
 800a548:	eb46 0406 	adc.w	r4, r6, r6
 800a54c:	461a      	mov	r2, r3
 800a54e:	4623      	mov	r3, r4
 800a550:	f7f6 fb7a 	bl	8000c48 <__aeabi_uldivmod>
 800a554:	4603      	mov	r3, r0
 800a556:	460c      	mov	r4, r1
 800a558:	461a      	mov	r2, r3
 800a55a:	4b47      	ldr	r3, [pc, #284]	; (800a678 <UART_SetConfig+0x384>)
 800a55c:	fba3 2302 	umull	r2, r3, r3, r2
 800a560:	095b      	lsrs	r3, r3, #5
 800a562:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a566:	68bb      	ldr	r3, [r7, #8]
 800a568:	461d      	mov	r5, r3
 800a56a:	f04f 0600 	mov.w	r6, #0
 800a56e:	46a9      	mov	r9, r5
 800a570:	46b2      	mov	sl, r6
 800a572:	eb19 0309 	adds.w	r3, r9, r9
 800a576:	eb4a 040a 	adc.w	r4, sl, sl
 800a57a:	4699      	mov	r9, r3
 800a57c:	46a2      	mov	sl, r4
 800a57e:	eb19 0905 	adds.w	r9, r9, r5
 800a582:	eb4a 0a06 	adc.w	sl, sl, r6
 800a586:	f04f 0100 	mov.w	r1, #0
 800a58a:	f04f 0200 	mov.w	r2, #0
 800a58e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a592:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a596:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a59a:	4689      	mov	r9, r1
 800a59c:	4692      	mov	sl, r2
 800a59e:	eb19 0005 	adds.w	r0, r9, r5
 800a5a2:	eb4a 0106 	adc.w	r1, sl, r6
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	685b      	ldr	r3, [r3, #4]
 800a5aa:	461d      	mov	r5, r3
 800a5ac:	f04f 0600 	mov.w	r6, #0
 800a5b0:	196b      	adds	r3, r5, r5
 800a5b2:	eb46 0406 	adc.w	r4, r6, r6
 800a5b6:	461a      	mov	r2, r3
 800a5b8:	4623      	mov	r3, r4
 800a5ba:	f7f6 fb45 	bl	8000c48 <__aeabi_uldivmod>
 800a5be:	4603      	mov	r3, r0
 800a5c0:	460c      	mov	r4, r1
 800a5c2:	461a      	mov	r2, r3
 800a5c4:	4b2c      	ldr	r3, [pc, #176]	; (800a678 <UART_SetConfig+0x384>)
 800a5c6:	fba3 1302 	umull	r1, r3, r3, r2
 800a5ca:	095b      	lsrs	r3, r3, #5
 800a5cc:	2164      	movs	r1, #100	; 0x64
 800a5ce:	fb01 f303 	mul.w	r3, r1, r3
 800a5d2:	1ad3      	subs	r3, r2, r3
 800a5d4:	00db      	lsls	r3, r3, #3
 800a5d6:	3332      	adds	r3, #50	; 0x32
 800a5d8:	4a27      	ldr	r2, [pc, #156]	; (800a678 <UART_SetConfig+0x384>)
 800a5da:	fba2 2303 	umull	r2, r3, r2, r3
 800a5de:	095b      	lsrs	r3, r3, #5
 800a5e0:	005b      	lsls	r3, r3, #1
 800a5e2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a5e6:	4498      	add	r8, r3
 800a5e8:	68bb      	ldr	r3, [r7, #8]
 800a5ea:	461d      	mov	r5, r3
 800a5ec:	f04f 0600 	mov.w	r6, #0
 800a5f0:	46a9      	mov	r9, r5
 800a5f2:	46b2      	mov	sl, r6
 800a5f4:	eb19 0309 	adds.w	r3, r9, r9
 800a5f8:	eb4a 040a 	adc.w	r4, sl, sl
 800a5fc:	4699      	mov	r9, r3
 800a5fe:	46a2      	mov	sl, r4
 800a600:	eb19 0905 	adds.w	r9, r9, r5
 800a604:	eb4a 0a06 	adc.w	sl, sl, r6
 800a608:	f04f 0100 	mov.w	r1, #0
 800a60c:	f04f 0200 	mov.w	r2, #0
 800a610:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a614:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a618:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a61c:	4689      	mov	r9, r1
 800a61e:	4692      	mov	sl, r2
 800a620:	eb19 0005 	adds.w	r0, r9, r5
 800a624:	eb4a 0106 	adc.w	r1, sl, r6
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	685b      	ldr	r3, [r3, #4]
 800a62c:	461d      	mov	r5, r3
 800a62e:	f04f 0600 	mov.w	r6, #0
 800a632:	196b      	adds	r3, r5, r5
 800a634:	eb46 0406 	adc.w	r4, r6, r6
 800a638:	461a      	mov	r2, r3
 800a63a:	4623      	mov	r3, r4
 800a63c:	f7f6 fb04 	bl	8000c48 <__aeabi_uldivmod>
 800a640:	4603      	mov	r3, r0
 800a642:	460c      	mov	r4, r1
 800a644:	461a      	mov	r2, r3
 800a646:	4b0c      	ldr	r3, [pc, #48]	; (800a678 <UART_SetConfig+0x384>)
 800a648:	fba3 1302 	umull	r1, r3, r3, r2
 800a64c:	095b      	lsrs	r3, r3, #5
 800a64e:	2164      	movs	r1, #100	; 0x64
 800a650:	fb01 f303 	mul.w	r3, r1, r3
 800a654:	1ad3      	subs	r3, r2, r3
 800a656:	00db      	lsls	r3, r3, #3
 800a658:	3332      	adds	r3, #50	; 0x32
 800a65a:	4a07      	ldr	r2, [pc, #28]	; (800a678 <UART_SetConfig+0x384>)
 800a65c:	fba2 2303 	umull	r2, r3, r2, r3
 800a660:	095b      	lsrs	r3, r3, #5
 800a662:	f003 0207 	and.w	r2, r3, #7
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	4442      	add	r2, r8
 800a66c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800a66e:	e1b2      	b.n	800a9d6 <UART_SetConfig+0x6e2>
 800a670:	40011000 	.word	0x40011000
 800a674:	40011400 	.word	0x40011400
 800a678:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	4ad7      	ldr	r2, [pc, #860]	; (800a9e0 <UART_SetConfig+0x6ec>)
 800a682:	4293      	cmp	r3, r2
 800a684:	d005      	beq.n	800a692 <UART_SetConfig+0x39e>
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	4ad6      	ldr	r2, [pc, #856]	; (800a9e4 <UART_SetConfig+0x6f0>)
 800a68c:	4293      	cmp	r3, r2
 800a68e:	f040 80d1 	bne.w	800a834 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800a692:	f7ff fa1b 	bl	8009acc <HAL_RCC_GetPCLK2Freq>
 800a696:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a698:	68bb      	ldr	r3, [r7, #8]
 800a69a:	469a      	mov	sl, r3
 800a69c:	f04f 0b00 	mov.w	fp, #0
 800a6a0:	46d0      	mov	r8, sl
 800a6a2:	46d9      	mov	r9, fp
 800a6a4:	eb18 0308 	adds.w	r3, r8, r8
 800a6a8:	eb49 0409 	adc.w	r4, r9, r9
 800a6ac:	4698      	mov	r8, r3
 800a6ae:	46a1      	mov	r9, r4
 800a6b0:	eb18 080a 	adds.w	r8, r8, sl
 800a6b4:	eb49 090b 	adc.w	r9, r9, fp
 800a6b8:	f04f 0100 	mov.w	r1, #0
 800a6bc:	f04f 0200 	mov.w	r2, #0
 800a6c0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a6c4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a6c8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a6cc:	4688      	mov	r8, r1
 800a6ce:	4691      	mov	r9, r2
 800a6d0:	eb1a 0508 	adds.w	r5, sl, r8
 800a6d4:	eb4b 0609 	adc.w	r6, fp, r9
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	685b      	ldr	r3, [r3, #4]
 800a6dc:	4619      	mov	r1, r3
 800a6de:	f04f 0200 	mov.w	r2, #0
 800a6e2:	f04f 0300 	mov.w	r3, #0
 800a6e6:	f04f 0400 	mov.w	r4, #0
 800a6ea:	0094      	lsls	r4, r2, #2
 800a6ec:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a6f0:	008b      	lsls	r3, r1, #2
 800a6f2:	461a      	mov	r2, r3
 800a6f4:	4623      	mov	r3, r4
 800a6f6:	4628      	mov	r0, r5
 800a6f8:	4631      	mov	r1, r6
 800a6fa:	f7f6 faa5 	bl	8000c48 <__aeabi_uldivmod>
 800a6fe:	4603      	mov	r3, r0
 800a700:	460c      	mov	r4, r1
 800a702:	461a      	mov	r2, r3
 800a704:	4bb8      	ldr	r3, [pc, #736]	; (800a9e8 <UART_SetConfig+0x6f4>)
 800a706:	fba3 2302 	umull	r2, r3, r3, r2
 800a70a:	095b      	lsrs	r3, r3, #5
 800a70c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a710:	68bb      	ldr	r3, [r7, #8]
 800a712:	469b      	mov	fp, r3
 800a714:	f04f 0c00 	mov.w	ip, #0
 800a718:	46d9      	mov	r9, fp
 800a71a:	46e2      	mov	sl, ip
 800a71c:	eb19 0309 	adds.w	r3, r9, r9
 800a720:	eb4a 040a 	adc.w	r4, sl, sl
 800a724:	4699      	mov	r9, r3
 800a726:	46a2      	mov	sl, r4
 800a728:	eb19 090b 	adds.w	r9, r9, fp
 800a72c:	eb4a 0a0c 	adc.w	sl, sl, ip
 800a730:	f04f 0100 	mov.w	r1, #0
 800a734:	f04f 0200 	mov.w	r2, #0
 800a738:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a73c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a740:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a744:	4689      	mov	r9, r1
 800a746:	4692      	mov	sl, r2
 800a748:	eb1b 0509 	adds.w	r5, fp, r9
 800a74c:	eb4c 060a 	adc.w	r6, ip, sl
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	685b      	ldr	r3, [r3, #4]
 800a754:	4619      	mov	r1, r3
 800a756:	f04f 0200 	mov.w	r2, #0
 800a75a:	f04f 0300 	mov.w	r3, #0
 800a75e:	f04f 0400 	mov.w	r4, #0
 800a762:	0094      	lsls	r4, r2, #2
 800a764:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a768:	008b      	lsls	r3, r1, #2
 800a76a:	461a      	mov	r2, r3
 800a76c:	4623      	mov	r3, r4
 800a76e:	4628      	mov	r0, r5
 800a770:	4631      	mov	r1, r6
 800a772:	f7f6 fa69 	bl	8000c48 <__aeabi_uldivmod>
 800a776:	4603      	mov	r3, r0
 800a778:	460c      	mov	r4, r1
 800a77a:	461a      	mov	r2, r3
 800a77c:	4b9a      	ldr	r3, [pc, #616]	; (800a9e8 <UART_SetConfig+0x6f4>)
 800a77e:	fba3 1302 	umull	r1, r3, r3, r2
 800a782:	095b      	lsrs	r3, r3, #5
 800a784:	2164      	movs	r1, #100	; 0x64
 800a786:	fb01 f303 	mul.w	r3, r1, r3
 800a78a:	1ad3      	subs	r3, r2, r3
 800a78c:	011b      	lsls	r3, r3, #4
 800a78e:	3332      	adds	r3, #50	; 0x32
 800a790:	4a95      	ldr	r2, [pc, #596]	; (800a9e8 <UART_SetConfig+0x6f4>)
 800a792:	fba2 2303 	umull	r2, r3, r2, r3
 800a796:	095b      	lsrs	r3, r3, #5
 800a798:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a79c:	4498      	add	r8, r3
 800a79e:	68bb      	ldr	r3, [r7, #8]
 800a7a0:	469b      	mov	fp, r3
 800a7a2:	f04f 0c00 	mov.w	ip, #0
 800a7a6:	46d9      	mov	r9, fp
 800a7a8:	46e2      	mov	sl, ip
 800a7aa:	eb19 0309 	adds.w	r3, r9, r9
 800a7ae:	eb4a 040a 	adc.w	r4, sl, sl
 800a7b2:	4699      	mov	r9, r3
 800a7b4:	46a2      	mov	sl, r4
 800a7b6:	eb19 090b 	adds.w	r9, r9, fp
 800a7ba:	eb4a 0a0c 	adc.w	sl, sl, ip
 800a7be:	f04f 0100 	mov.w	r1, #0
 800a7c2:	f04f 0200 	mov.w	r2, #0
 800a7c6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a7ca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a7ce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a7d2:	4689      	mov	r9, r1
 800a7d4:	4692      	mov	sl, r2
 800a7d6:	eb1b 0509 	adds.w	r5, fp, r9
 800a7da:	eb4c 060a 	adc.w	r6, ip, sl
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	685b      	ldr	r3, [r3, #4]
 800a7e2:	4619      	mov	r1, r3
 800a7e4:	f04f 0200 	mov.w	r2, #0
 800a7e8:	f04f 0300 	mov.w	r3, #0
 800a7ec:	f04f 0400 	mov.w	r4, #0
 800a7f0:	0094      	lsls	r4, r2, #2
 800a7f2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a7f6:	008b      	lsls	r3, r1, #2
 800a7f8:	461a      	mov	r2, r3
 800a7fa:	4623      	mov	r3, r4
 800a7fc:	4628      	mov	r0, r5
 800a7fe:	4631      	mov	r1, r6
 800a800:	f7f6 fa22 	bl	8000c48 <__aeabi_uldivmod>
 800a804:	4603      	mov	r3, r0
 800a806:	460c      	mov	r4, r1
 800a808:	461a      	mov	r2, r3
 800a80a:	4b77      	ldr	r3, [pc, #476]	; (800a9e8 <UART_SetConfig+0x6f4>)
 800a80c:	fba3 1302 	umull	r1, r3, r3, r2
 800a810:	095b      	lsrs	r3, r3, #5
 800a812:	2164      	movs	r1, #100	; 0x64
 800a814:	fb01 f303 	mul.w	r3, r1, r3
 800a818:	1ad3      	subs	r3, r2, r3
 800a81a:	011b      	lsls	r3, r3, #4
 800a81c:	3332      	adds	r3, #50	; 0x32
 800a81e:	4a72      	ldr	r2, [pc, #456]	; (800a9e8 <UART_SetConfig+0x6f4>)
 800a820:	fba2 2303 	umull	r2, r3, r2, r3
 800a824:	095b      	lsrs	r3, r3, #5
 800a826:	f003 020f 	and.w	r2, r3, #15
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	4442      	add	r2, r8
 800a830:	609a      	str	r2, [r3, #8]
 800a832:	e0d0      	b.n	800a9d6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800a834:	f7ff f936 	bl	8009aa4 <HAL_RCC_GetPCLK1Freq>
 800a838:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a83a:	68bb      	ldr	r3, [r7, #8]
 800a83c:	469a      	mov	sl, r3
 800a83e:	f04f 0b00 	mov.w	fp, #0
 800a842:	46d0      	mov	r8, sl
 800a844:	46d9      	mov	r9, fp
 800a846:	eb18 0308 	adds.w	r3, r8, r8
 800a84a:	eb49 0409 	adc.w	r4, r9, r9
 800a84e:	4698      	mov	r8, r3
 800a850:	46a1      	mov	r9, r4
 800a852:	eb18 080a 	adds.w	r8, r8, sl
 800a856:	eb49 090b 	adc.w	r9, r9, fp
 800a85a:	f04f 0100 	mov.w	r1, #0
 800a85e:	f04f 0200 	mov.w	r2, #0
 800a862:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a866:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a86a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a86e:	4688      	mov	r8, r1
 800a870:	4691      	mov	r9, r2
 800a872:	eb1a 0508 	adds.w	r5, sl, r8
 800a876:	eb4b 0609 	adc.w	r6, fp, r9
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	685b      	ldr	r3, [r3, #4]
 800a87e:	4619      	mov	r1, r3
 800a880:	f04f 0200 	mov.w	r2, #0
 800a884:	f04f 0300 	mov.w	r3, #0
 800a888:	f04f 0400 	mov.w	r4, #0
 800a88c:	0094      	lsls	r4, r2, #2
 800a88e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a892:	008b      	lsls	r3, r1, #2
 800a894:	461a      	mov	r2, r3
 800a896:	4623      	mov	r3, r4
 800a898:	4628      	mov	r0, r5
 800a89a:	4631      	mov	r1, r6
 800a89c:	f7f6 f9d4 	bl	8000c48 <__aeabi_uldivmod>
 800a8a0:	4603      	mov	r3, r0
 800a8a2:	460c      	mov	r4, r1
 800a8a4:	461a      	mov	r2, r3
 800a8a6:	4b50      	ldr	r3, [pc, #320]	; (800a9e8 <UART_SetConfig+0x6f4>)
 800a8a8:	fba3 2302 	umull	r2, r3, r3, r2
 800a8ac:	095b      	lsrs	r3, r3, #5
 800a8ae:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a8b2:	68bb      	ldr	r3, [r7, #8]
 800a8b4:	469b      	mov	fp, r3
 800a8b6:	f04f 0c00 	mov.w	ip, #0
 800a8ba:	46d9      	mov	r9, fp
 800a8bc:	46e2      	mov	sl, ip
 800a8be:	eb19 0309 	adds.w	r3, r9, r9
 800a8c2:	eb4a 040a 	adc.w	r4, sl, sl
 800a8c6:	4699      	mov	r9, r3
 800a8c8:	46a2      	mov	sl, r4
 800a8ca:	eb19 090b 	adds.w	r9, r9, fp
 800a8ce:	eb4a 0a0c 	adc.w	sl, sl, ip
 800a8d2:	f04f 0100 	mov.w	r1, #0
 800a8d6:	f04f 0200 	mov.w	r2, #0
 800a8da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a8de:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a8e2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a8e6:	4689      	mov	r9, r1
 800a8e8:	4692      	mov	sl, r2
 800a8ea:	eb1b 0509 	adds.w	r5, fp, r9
 800a8ee:	eb4c 060a 	adc.w	r6, ip, sl
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	685b      	ldr	r3, [r3, #4]
 800a8f6:	4619      	mov	r1, r3
 800a8f8:	f04f 0200 	mov.w	r2, #0
 800a8fc:	f04f 0300 	mov.w	r3, #0
 800a900:	f04f 0400 	mov.w	r4, #0
 800a904:	0094      	lsls	r4, r2, #2
 800a906:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a90a:	008b      	lsls	r3, r1, #2
 800a90c:	461a      	mov	r2, r3
 800a90e:	4623      	mov	r3, r4
 800a910:	4628      	mov	r0, r5
 800a912:	4631      	mov	r1, r6
 800a914:	f7f6 f998 	bl	8000c48 <__aeabi_uldivmod>
 800a918:	4603      	mov	r3, r0
 800a91a:	460c      	mov	r4, r1
 800a91c:	461a      	mov	r2, r3
 800a91e:	4b32      	ldr	r3, [pc, #200]	; (800a9e8 <UART_SetConfig+0x6f4>)
 800a920:	fba3 1302 	umull	r1, r3, r3, r2
 800a924:	095b      	lsrs	r3, r3, #5
 800a926:	2164      	movs	r1, #100	; 0x64
 800a928:	fb01 f303 	mul.w	r3, r1, r3
 800a92c:	1ad3      	subs	r3, r2, r3
 800a92e:	011b      	lsls	r3, r3, #4
 800a930:	3332      	adds	r3, #50	; 0x32
 800a932:	4a2d      	ldr	r2, [pc, #180]	; (800a9e8 <UART_SetConfig+0x6f4>)
 800a934:	fba2 2303 	umull	r2, r3, r2, r3
 800a938:	095b      	lsrs	r3, r3, #5
 800a93a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a93e:	4498      	add	r8, r3
 800a940:	68bb      	ldr	r3, [r7, #8]
 800a942:	469b      	mov	fp, r3
 800a944:	f04f 0c00 	mov.w	ip, #0
 800a948:	46d9      	mov	r9, fp
 800a94a:	46e2      	mov	sl, ip
 800a94c:	eb19 0309 	adds.w	r3, r9, r9
 800a950:	eb4a 040a 	adc.w	r4, sl, sl
 800a954:	4699      	mov	r9, r3
 800a956:	46a2      	mov	sl, r4
 800a958:	eb19 090b 	adds.w	r9, r9, fp
 800a95c:	eb4a 0a0c 	adc.w	sl, sl, ip
 800a960:	f04f 0100 	mov.w	r1, #0
 800a964:	f04f 0200 	mov.w	r2, #0
 800a968:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a96c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a970:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a974:	4689      	mov	r9, r1
 800a976:	4692      	mov	sl, r2
 800a978:	eb1b 0509 	adds.w	r5, fp, r9
 800a97c:	eb4c 060a 	adc.w	r6, ip, sl
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	685b      	ldr	r3, [r3, #4]
 800a984:	4619      	mov	r1, r3
 800a986:	f04f 0200 	mov.w	r2, #0
 800a98a:	f04f 0300 	mov.w	r3, #0
 800a98e:	f04f 0400 	mov.w	r4, #0
 800a992:	0094      	lsls	r4, r2, #2
 800a994:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a998:	008b      	lsls	r3, r1, #2
 800a99a:	461a      	mov	r2, r3
 800a99c:	4623      	mov	r3, r4
 800a99e:	4628      	mov	r0, r5
 800a9a0:	4631      	mov	r1, r6
 800a9a2:	f7f6 f951 	bl	8000c48 <__aeabi_uldivmod>
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	460c      	mov	r4, r1
 800a9aa:	461a      	mov	r2, r3
 800a9ac:	4b0e      	ldr	r3, [pc, #56]	; (800a9e8 <UART_SetConfig+0x6f4>)
 800a9ae:	fba3 1302 	umull	r1, r3, r3, r2
 800a9b2:	095b      	lsrs	r3, r3, #5
 800a9b4:	2164      	movs	r1, #100	; 0x64
 800a9b6:	fb01 f303 	mul.w	r3, r1, r3
 800a9ba:	1ad3      	subs	r3, r2, r3
 800a9bc:	011b      	lsls	r3, r3, #4
 800a9be:	3332      	adds	r3, #50	; 0x32
 800a9c0:	4a09      	ldr	r2, [pc, #36]	; (800a9e8 <UART_SetConfig+0x6f4>)
 800a9c2:	fba2 2303 	umull	r2, r3, r2, r3
 800a9c6:	095b      	lsrs	r3, r3, #5
 800a9c8:	f003 020f 	and.w	r2, r3, #15
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	4442      	add	r2, r8
 800a9d2:	609a      	str	r2, [r3, #8]
}
 800a9d4:	e7ff      	b.n	800a9d6 <UART_SetConfig+0x6e2>
 800a9d6:	bf00      	nop
 800a9d8:	3714      	adds	r7, #20
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9e0:	40011000 	.word	0x40011000
 800a9e4:	40011400 	.word	0x40011400
 800a9e8:	51eb851f 	.word	0x51eb851f

0800a9ec <LL_GPIO_SetPinMode>:
{
 800a9ec:	b480      	push	{r7}
 800a9ee:	b089      	sub	sp, #36	; 0x24
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	60f8      	str	r0, [r7, #12]
 800a9f4:	60b9      	str	r1, [r7, #8]
 800a9f6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	681a      	ldr	r2, [r3, #0]
 800a9fc:	68bb      	ldr	r3, [r7, #8]
 800a9fe:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aa00:	697b      	ldr	r3, [r7, #20]
 800aa02:	fa93 f3a3 	rbit	r3, r3
 800aa06:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800aa08:	693b      	ldr	r3, [r7, #16]
 800aa0a:	fab3 f383 	clz	r3, r3
 800aa0e:	b2db      	uxtb	r3, r3
 800aa10:	005b      	lsls	r3, r3, #1
 800aa12:	2103      	movs	r1, #3
 800aa14:	fa01 f303 	lsl.w	r3, r1, r3
 800aa18:	43db      	mvns	r3, r3
 800aa1a:	401a      	ands	r2, r3
 800aa1c:	68bb      	ldr	r3, [r7, #8]
 800aa1e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aa20:	69fb      	ldr	r3, [r7, #28]
 800aa22:	fa93 f3a3 	rbit	r3, r3
 800aa26:	61bb      	str	r3, [r7, #24]
  return result;
 800aa28:	69bb      	ldr	r3, [r7, #24]
 800aa2a:	fab3 f383 	clz	r3, r3
 800aa2e:	b2db      	uxtb	r3, r3
 800aa30:	005b      	lsls	r3, r3, #1
 800aa32:	6879      	ldr	r1, [r7, #4]
 800aa34:	fa01 f303 	lsl.w	r3, r1, r3
 800aa38:	431a      	orrs	r2, r3
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	601a      	str	r2, [r3, #0]
}
 800aa3e:	bf00      	nop
 800aa40:	3724      	adds	r7, #36	; 0x24
 800aa42:	46bd      	mov	sp, r7
 800aa44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa48:	4770      	bx	lr

0800aa4a <LL_GPIO_SetPinOutputType>:
{
 800aa4a:	b480      	push	{r7}
 800aa4c:	b085      	sub	sp, #20
 800aa4e:	af00      	add	r7, sp, #0
 800aa50:	60f8      	str	r0, [r7, #12]
 800aa52:	60b9      	str	r1, [r7, #8]
 800aa54:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	685a      	ldr	r2, [r3, #4]
 800aa5a:	68bb      	ldr	r3, [r7, #8]
 800aa5c:	43db      	mvns	r3, r3
 800aa5e:	401a      	ands	r2, r3
 800aa60:	68bb      	ldr	r3, [r7, #8]
 800aa62:	6879      	ldr	r1, [r7, #4]
 800aa64:	fb01 f303 	mul.w	r3, r1, r3
 800aa68:	431a      	orrs	r2, r3
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	605a      	str	r2, [r3, #4]
}
 800aa6e:	bf00      	nop
 800aa70:	3714      	adds	r7, #20
 800aa72:	46bd      	mov	sp, r7
 800aa74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa78:	4770      	bx	lr

0800aa7a <LL_GPIO_SetPinSpeed>:
{
 800aa7a:	b480      	push	{r7}
 800aa7c:	b089      	sub	sp, #36	; 0x24
 800aa7e:	af00      	add	r7, sp, #0
 800aa80:	60f8      	str	r0, [r7, #12]
 800aa82:	60b9      	str	r1, [r7, #8]
 800aa84:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	689a      	ldr	r2, [r3, #8]
 800aa8a:	68bb      	ldr	r3, [r7, #8]
 800aa8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aa8e:	697b      	ldr	r3, [r7, #20]
 800aa90:	fa93 f3a3 	rbit	r3, r3
 800aa94:	613b      	str	r3, [r7, #16]
  return result;
 800aa96:	693b      	ldr	r3, [r7, #16]
 800aa98:	fab3 f383 	clz	r3, r3
 800aa9c:	b2db      	uxtb	r3, r3
 800aa9e:	005b      	lsls	r3, r3, #1
 800aaa0:	2103      	movs	r1, #3
 800aaa2:	fa01 f303 	lsl.w	r3, r1, r3
 800aaa6:	43db      	mvns	r3, r3
 800aaa8:	401a      	ands	r2, r3
 800aaaa:	68bb      	ldr	r3, [r7, #8]
 800aaac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aaae:	69fb      	ldr	r3, [r7, #28]
 800aab0:	fa93 f3a3 	rbit	r3, r3
 800aab4:	61bb      	str	r3, [r7, #24]
  return result;
 800aab6:	69bb      	ldr	r3, [r7, #24]
 800aab8:	fab3 f383 	clz	r3, r3
 800aabc:	b2db      	uxtb	r3, r3
 800aabe:	005b      	lsls	r3, r3, #1
 800aac0:	6879      	ldr	r1, [r7, #4]
 800aac2:	fa01 f303 	lsl.w	r3, r1, r3
 800aac6:	431a      	orrs	r2, r3
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	609a      	str	r2, [r3, #8]
}
 800aacc:	bf00      	nop
 800aace:	3724      	adds	r7, #36	; 0x24
 800aad0:	46bd      	mov	sp, r7
 800aad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad6:	4770      	bx	lr

0800aad8 <LL_GPIO_SetPinPull>:
{
 800aad8:	b480      	push	{r7}
 800aada:	b089      	sub	sp, #36	; 0x24
 800aadc:	af00      	add	r7, sp, #0
 800aade:	60f8      	str	r0, [r7, #12]
 800aae0:	60b9      	str	r1, [r7, #8]
 800aae2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	68da      	ldr	r2, [r3, #12]
 800aae8:	68bb      	ldr	r3, [r7, #8]
 800aaea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aaec:	697b      	ldr	r3, [r7, #20]
 800aaee:	fa93 f3a3 	rbit	r3, r3
 800aaf2:	613b      	str	r3, [r7, #16]
  return result;
 800aaf4:	693b      	ldr	r3, [r7, #16]
 800aaf6:	fab3 f383 	clz	r3, r3
 800aafa:	b2db      	uxtb	r3, r3
 800aafc:	005b      	lsls	r3, r3, #1
 800aafe:	2103      	movs	r1, #3
 800ab00:	fa01 f303 	lsl.w	r3, r1, r3
 800ab04:	43db      	mvns	r3, r3
 800ab06:	401a      	ands	r2, r3
 800ab08:	68bb      	ldr	r3, [r7, #8]
 800ab0a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ab0c:	69fb      	ldr	r3, [r7, #28]
 800ab0e:	fa93 f3a3 	rbit	r3, r3
 800ab12:	61bb      	str	r3, [r7, #24]
  return result;
 800ab14:	69bb      	ldr	r3, [r7, #24]
 800ab16:	fab3 f383 	clz	r3, r3
 800ab1a:	b2db      	uxtb	r3, r3
 800ab1c:	005b      	lsls	r3, r3, #1
 800ab1e:	6879      	ldr	r1, [r7, #4]
 800ab20:	fa01 f303 	lsl.w	r3, r1, r3
 800ab24:	431a      	orrs	r2, r3
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	60da      	str	r2, [r3, #12]
}
 800ab2a:	bf00      	nop
 800ab2c:	3724      	adds	r7, #36	; 0x24
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab34:	4770      	bx	lr

0800ab36 <LL_GPIO_SetAFPin_0_7>:
{
 800ab36:	b480      	push	{r7}
 800ab38:	b089      	sub	sp, #36	; 0x24
 800ab3a:	af00      	add	r7, sp, #0
 800ab3c:	60f8      	str	r0, [r7, #12]
 800ab3e:	60b9      	str	r1, [r7, #8]
 800ab40:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	6a1a      	ldr	r2, [r3, #32]
 800ab46:	68bb      	ldr	r3, [r7, #8]
 800ab48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ab4a:	697b      	ldr	r3, [r7, #20]
 800ab4c:	fa93 f3a3 	rbit	r3, r3
 800ab50:	613b      	str	r3, [r7, #16]
  return result;
 800ab52:	693b      	ldr	r3, [r7, #16]
 800ab54:	fab3 f383 	clz	r3, r3
 800ab58:	b2db      	uxtb	r3, r3
 800ab5a:	009b      	lsls	r3, r3, #2
 800ab5c:	210f      	movs	r1, #15
 800ab5e:	fa01 f303 	lsl.w	r3, r1, r3
 800ab62:	43db      	mvns	r3, r3
 800ab64:	401a      	ands	r2, r3
 800ab66:	68bb      	ldr	r3, [r7, #8]
 800ab68:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ab6a:	69fb      	ldr	r3, [r7, #28]
 800ab6c:	fa93 f3a3 	rbit	r3, r3
 800ab70:	61bb      	str	r3, [r7, #24]
  return result;
 800ab72:	69bb      	ldr	r3, [r7, #24]
 800ab74:	fab3 f383 	clz	r3, r3
 800ab78:	b2db      	uxtb	r3, r3
 800ab7a:	009b      	lsls	r3, r3, #2
 800ab7c:	6879      	ldr	r1, [r7, #4]
 800ab7e:	fa01 f303 	lsl.w	r3, r1, r3
 800ab82:	431a      	orrs	r2, r3
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	621a      	str	r2, [r3, #32]
}
 800ab88:	bf00      	nop
 800ab8a:	3724      	adds	r7, #36	; 0x24
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab92:	4770      	bx	lr

0800ab94 <LL_GPIO_SetAFPin_8_15>:
{
 800ab94:	b480      	push	{r7}
 800ab96:	b089      	sub	sp, #36	; 0x24
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	60f8      	str	r0, [r7, #12]
 800ab9c:	60b9      	str	r1, [r7, #8]
 800ab9e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aba4:	68bb      	ldr	r3, [r7, #8]
 800aba6:	0a1b      	lsrs	r3, r3, #8
 800aba8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800abaa:	697b      	ldr	r3, [r7, #20]
 800abac:	fa93 f3a3 	rbit	r3, r3
 800abb0:	613b      	str	r3, [r7, #16]
  return result;
 800abb2:	693b      	ldr	r3, [r7, #16]
 800abb4:	fab3 f383 	clz	r3, r3
 800abb8:	b2db      	uxtb	r3, r3
 800abba:	009b      	lsls	r3, r3, #2
 800abbc:	210f      	movs	r1, #15
 800abbe:	fa01 f303 	lsl.w	r3, r1, r3
 800abc2:	43db      	mvns	r3, r3
 800abc4:	401a      	ands	r2, r3
 800abc6:	68bb      	ldr	r3, [r7, #8]
 800abc8:	0a1b      	lsrs	r3, r3, #8
 800abca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800abcc:	69fb      	ldr	r3, [r7, #28]
 800abce:	fa93 f3a3 	rbit	r3, r3
 800abd2:	61bb      	str	r3, [r7, #24]
  return result;
 800abd4:	69bb      	ldr	r3, [r7, #24]
 800abd6:	fab3 f383 	clz	r3, r3
 800abda:	b2db      	uxtb	r3, r3
 800abdc:	009b      	lsls	r3, r3, #2
 800abde:	6879      	ldr	r1, [r7, #4]
 800abe0:	fa01 f303 	lsl.w	r3, r1, r3
 800abe4:	431a      	orrs	r2, r3
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	625a      	str	r2, [r3, #36]	; 0x24
}
 800abea:	bf00      	nop
 800abec:	3724      	adds	r7, #36	; 0x24
 800abee:	46bd      	mov	sp, r7
 800abf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf4:	4770      	bx	lr

0800abf6 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800abf6:	b580      	push	{r7, lr}
 800abf8:	b088      	sub	sp, #32
 800abfa:	af00      	add	r7, sp, #0
 800abfc:	6078      	str	r0, [r7, #4]
 800abfe:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 800ac00:	2300      	movs	r3, #0
 800ac02:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 800ac04:	2300      	movs	r3, #0
 800ac06:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ac0e:	697b      	ldr	r3, [r7, #20]
 800ac10:	fa93 f3a3 	rbit	r3, r3
 800ac14:	613b      	str	r3, [r7, #16]
  return result;
 800ac16:	693b      	ldr	r3, [r7, #16]
 800ac18:	fab3 f383 	clz	r3, r3
 800ac1c:	b2db      	uxtb	r3, r3
 800ac1e:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800ac20:	e050      	b.n	800acc4 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	681a      	ldr	r2, [r3, #0]
 800ac26:	2101      	movs	r1, #1
 800ac28:	69fb      	ldr	r3, [r7, #28]
 800ac2a:	fa01 f303 	lsl.w	r3, r1, r3
 800ac2e:	4013      	ands	r3, r2
 800ac30:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 800ac32:	69bb      	ldr	r3, [r7, #24]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d042      	beq.n	800acbe <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800ac38:	683b      	ldr	r3, [r7, #0]
 800ac3a:	685b      	ldr	r3, [r3, #4]
 800ac3c:	2b01      	cmp	r3, #1
 800ac3e:	d003      	beq.n	800ac48 <LL_GPIO_Init+0x52>
 800ac40:	683b      	ldr	r3, [r7, #0]
 800ac42:	685b      	ldr	r3, [r3, #4]
 800ac44:	2b02      	cmp	r3, #2
 800ac46:	d10d      	bne.n	800ac64 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800ac48:	683b      	ldr	r3, [r7, #0]
 800ac4a:	689b      	ldr	r3, [r3, #8]
 800ac4c:	461a      	mov	r2, r3
 800ac4e:	69b9      	ldr	r1, [r7, #24]
 800ac50:	6878      	ldr	r0, [r7, #4]
 800ac52:	f7ff ff12 	bl	800aa7a <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800ac56:	683b      	ldr	r3, [r7, #0]
 800ac58:	68db      	ldr	r3, [r3, #12]
 800ac5a:	461a      	mov	r2, r3
 800ac5c:	69b9      	ldr	r1, [r7, #24]
 800ac5e:	6878      	ldr	r0, [r7, #4]
 800ac60:	f7ff fef3 	bl	800aa4a <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800ac64:	683b      	ldr	r3, [r7, #0]
 800ac66:	691b      	ldr	r3, [r3, #16]
 800ac68:	461a      	mov	r2, r3
 800ac6a:	69b9      	ldr	r1, [r7, #24]
 800ac6c:	6878      	ldr	r0, [r7, #4]
 800ac6e:	f7ff ff33 	bl	800aad8 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800ac72:	683b      	ldr	r3, [r7, #0]
 800ac74:	685b      	ldr	r3, [r3, #4]
 800ac76:	2b02      	cmp	r3, #2
 800ac78:	d11a      	bne.n	800acb0 <LL_GPIO_Init+0xba>
 800ac7a:	69bb      	ldr	r3, [r7, #24]
 800ac7c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	fa93 f3a3 	rbit	r3, r3
 800ac84:	60bb      	str	r3, [r7, #8]
  return result;
 800ac86:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800ac88:	fab3 f383 	clz	r3, r3
 800ac8c:	b2db      	uxtb	r3, r3
 800ac8e:	2b07      	cmp	r3, #7
 800ac90:	d807      	bhi.n	800aca2 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	695b      	ldr	r3, [r3, #20]
 800ac96:	461a      	mov	r2, r3
 800ac98:	69b9      	ldr	r1, [r7, #24]
 800ac9a:	6878      	ldr	r0, [r7, #4]
 800ac9c:	f7ff ff4b 	bl	800ab36 <LL_GPIO_SetAFPin_0_7>
 800aca0:	e006      	b.n	800acb0 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	695b      	ldr	r3, [r3, #20]
 800aca6:	461a      	mov	r2, r3
 800aca8:	69b9      	ldr	r1, [r7, #24]
 800acaa:	6878      	ldr	r0, [r7, #4]
 800acac:	f7ff ff72 	bl	800ab94 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800acb0:	683b      	ldr	r3, [r7, #0]
 800acb2:	685b      	ldr	r3, [r3, #4]
 800acb4:	461a      	mov	r2, r3
 800acb6:	69b9      	ldr	r1, [r7, #24]
 800acb8:	6878      	ldr	r0, [r7, #4]
 800acba:	f7ff fe97 	bl	800a9ec <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800acbe:	69fb      	ldr	r3, [r7, #28]
 800acc0:	3301      	adds	r3, #1
 800acc2:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800acc4:	683b      	ldr	r3, [r7, #0]
 800acc6:	681a      	ldr	r2, [r3, #0]
 800acc8:	69fb      	ldr	r3, [r7, #28]
 800acca:	fa22 f303 	lsr.w	r3, r2, r3
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d1a7      	bne.n	800ac22 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 800acd2:	2300      	movs	r3, #0
}
 800acd4:	4618      	mov	r0, r3
 800acd6:	3720      	adds	r7, #32
 800acd8:	46bd      	mov	sp, r7
 800acda:	bd80      	pop	{r7, pc}

0800acdc <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800acdc:	b480      	push	{r7}
 800acde:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800ace0:	4b04      	ldr	r3, [pc, #16]	; (800acf4 <LL_RCC_GetSysClkSource+0x18>)
 800ace2:	689b      	ldr	r3, [r3, #8]
 800ace4:	f003 030c 	and.w	r3, r3, #12
}
 800ace8:	4618      	mov	r0, r3
 800acea:	46bd      	mov	sp, r7
 800acec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf0:	4770      	bx	lr
 800acf2:	bf00      	nop
 800acf4:	40023800 	.word	0x40023800

0800acf8 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800acf8:	b480      	push	{r7}
 800acfa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800acfc:	4b04      	ldr	r3, [pc, #16]	; (800ad10 <LL_RCC_GetAHBPrescaler+0x18>)
 800acfe:	689b      	ldr	r3, [r3, #8]
 800ad00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800ad04:	4618      	mov	r0, r3
 800ad06:	46bd      	mov	sp, r7
 800ad08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0c:	4770      	bx	lr
 800ad0e:	bf00      	nop
 800ad10:	40023800 	.word	0x40023800

0800ad14 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800ad14:	b480      	push	{r7}
 800ad16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800ad18:	4b04      	ldr	r3, [pc, #16]	; (800ad2c <LL_RCC_GetAPB1Prescaler+0x18>)
 800ad1a:	689b      	ldr	r3, [r3, #8]
 800ad1c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 800ad20:	4618      	mov	r0, r3
 800ad22:	46bd      	mov	sp, r7
 800ad24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad28:	4770      	bx	lr
 800ad2a:	bf00      	nop
 800ad2c:	40023800 	.word	0x40023800

0800ad30 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800ad30:	b480      	push	{r7}
 800ad32:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800ad34:	4b04      	ldr	r3, [pc, #16]	; (800ad48 <LL_RCC_GetAPB2Prescaler+0x18>)
 800ad36:	689b      	ldr	r3, [r3, #8]
 800ad38:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad44:	4770      	bx	lr
 800ad46:	bf00      	nop
 800ad48:	40023800 	.word	0x40023800

0800ad4c <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800ad4c:	b480      	push	{r7}
 800ad4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800ad50:	4b04      	ldr	r3, [pc, #16]	; (800ad64 <LL_RCC_PLL_GetMainSource+0x18>)
 800ad52:	685b      	ldr	r3, [r3, #4]
 800ad54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 800ad58:	4618      	mov	r0, r3
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad60:	4770      	bx	lr
 800ad62:	bf00      	nop
 800ad64:	40023800 	.word	0x40023800

0800ad68 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800ad68:	b480      	push	{r7}
 800ad6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800ad6c:	4b04      	ldr	r3, [pc, #16]	; (800ad80 <LL_RCC_PLL_GetN+0x18>)
 800ad6e:	685b      	ldr	r3, [r3, #4]
 800ad70:	099b      	lsrs	r3, r3, #6
 800ad72:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 800ad76:	4618      	mov	r0, r3
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7e:	4770      	bx	lr
 800ad80:	40023800 	.word	0x40023800

0800ad84 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 800ad84:	b480      	push	{r7}
 800ad86:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 800ad88:	4b04      	ldr	r3, [pc, #16]	; (800ad9c <LL_RCC_PLL_GetP+0x18>)
 800ad8a:	685b      	ldr	r3, [r3, #4]
 800ad8c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 800ad90:	4618      	mov	r0, r3
 800ad92:	46bd      	mov	sp, r7
 800ad94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad98:	4770      	bx	lr
 800ad9a:	bf00      	nop
 800ad9c:	40023800 	.word	0x40023800

0800ada0 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800ada0:	b480      	push	{r7}
 800ada2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800ada4:	4b04      	ldr	r3, [pc, #16]	; (800adb8 <LL_RCC_PLL_GetDivider+0x18>)
 800ada6:	685b      	ldr	r3, [r3, #4]
 800ada8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 800adac:	4618      	mov	r0, r3
 800adae:	46bd      	mov	sp, r7
 800adb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb4:	4770      	bx	lr
 800adb6:	bf00      	nop
 800adb8:	40023800 	.word	0x40023800

0800adbc <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b082      	sub	sp, #8
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800adc4:	f000 f820 	bl	800ae08 <RCC_GetSystemClockFreq>
 800adc8:	4602      	mov	r2, r0
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	4618      	mov	r0, r3
 800add4:	f000 f83e 	bl	800ae54 <RCC_GetHCLKClockFreq>
 800add8:	4602      	mov	r2, r0
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	685b      	ldr	r3, [r3, #4]
 800ade2:	4618      	mov	r0, r3
 800ade4:	f000 f84c 	bl	800ae80 <RCC_GetPCLK1ClockFreq>
 800ade8:	4602      	mov	r2, r0
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	685b      	ldr	r3, [r3, #4]
 800adf2:	4618      	mov	r0, r3
 800adf4:	f000 f858 	bl	800aea8 <RCC_GetPCLK2ClockFreq>
 800adf8:	4602      	mov	r2, r0
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	60da      	str	r2, [r3, #12]
}
 800adfe:	bf00      	nop
 800ae00:	3708      	adds	r7, #8
 800ae02:	46bd      	mov	sp, r7
 800ae04:	bd80      	pop	{r7, pc}
	...

0800ae08 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b082      	sub	sp, #8
 800ae0c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800ae0e:	2300      	movs	r3, #0
 800ae10:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800ae12:	f7ff ff63 	bl	800acdc <LL_RCC_GetSysClkSource>
 800ae16:	4603      	mov	r3, r0
 800ae18:	2b04      	cmp	r3, #4
 800ae1a:	d006      	beq.n	800ae2a <RCC_GetSystemClockFreq+0x22>
 800ae1c:	2b08      	cmp	r3, #8
 800ae1e:	d007      	beq.n	800ae30 <RCC_GetSystemClockFreq+0x28>
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d10a      	bne.n	800ae3a <RCC_GetSystemClockFreq+0x32>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800ae24:	4b09      	ldr	r3, [pc, #36]	; (800ae4c <RCC_GetSystemClockFreq+0x44>)
 800ae26:	607b      	str	r3, [r7, #4]
      break;
 800ae28:	e00a      	b.n	800ae40 <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800ae2a:	4b09      	ldr	r3, [pc, #36]	; (800ae50 <RCC_GetSystemClockFreq+0x48>)
 800ae2c:	607b      	str	r3, [r7, #4]
      break;
 800ae2e:	e007      	b.n	800ae40 <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 800ae30:	2008      	movs	r0, #8
 800ae32:	f000 f84d 	bl	800aed0 <RCC_PLL_GetFreqDomain_SYS>
 800ae36:	6078      	str	r0, [r7, #4]
      break;
 800ae38:	e002      	b.n	800ae40 <RCC_GetSystemClockFreq+0x38>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 800ae3a:	4b04      	ldr	r3, [pc, #16]	; (800ae4c <RCC_GetSystemClockFreq+0x44>)
 800ae3c:	607b      	str	r3, [r7, #4]
      break;
 800ae3e:	bf00      	nop
  }

  return frequency;
 800ae40:	687b      	ldr	r3, [r7, #4]
}
 800ae42:	4618      	mov	r0, r3
 800ae44:	3708      	adds	r7, #8
 800ae46:	46bd      	mov	sp, r7
 800ae48:	bd80      	pop	{r7, pc}
 800ae4a:	bf00      	nop
 800ae4c:	00f42400 	.word	0x00f42400
 800ae50:	007a1200 	.word	0x007a1200

0800ae54 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b082      	sub	sp, #8
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800ae5c:	f7ff ff4c 	bl	800acf8 <LL_RCC_GetAHBPrescaler>
 800ae60:	4603      	mov	r3, r0
 800ae62:	091b      	lsrs	r3, r3, #4
 800ae64:	f003 030f 	and.w	r3, r3, #15
 800ae68:	4a04      	ldr	r2, [pc, #16]	; (800ae7c <RCC_GetHCLKClockFreq+0x28>)
 800ae6a:	5cd3      	ldrb	r3, [r2, r3]
 800ae6c:	461a      	mov	r2, r3
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	40d3      	lsrs	r3, r2
}
 800ae72:	4618      	mov	r0, r3
 800ae74:	3708      	adds	r7, #8
 800ae76:	46bd      	mov	sp, r7
 800ae78:	bd80      	pop	{r7, pc}
 800ae7a:	bf00      	nop
 800ae7c:	0800f61c 	.word	0x0800f61c

0800ae80 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b082      	sub	sp, #8
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800ae88:	f7ff ff44 	bl	800ad14 <LL_RCC_GetAPB1Prescaler>
 800ae8c:	4603      	mov	r3, r0
 800ae8e:	0a9b      	lsrs	r3, r3, #10
 800ae90:	4a04      	ldr	r2, [pc, #16]	; (800aea4 <RCC_GetPCLK1ClockFreq+0x24>)
 800ae92:	5cd3      	ldrb	r3, [r2, r3]
 800ae94:	461a      	mov	r2, r3
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	40d3      	lsrs	r3, r2
}
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	3708      	adds	r7, #8
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bd80      	pop	{r7, pc}
 800aea2:	bf00      	nop
 800aea4:	0800f62c 	.word	0x0800f62c

0800aea8 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b082      	sub	sp, #8
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800aeb0:	f7ff ff3e 	bl	800ad30 <LL_RCC_GetAPB2Prescaler>
 800aeb4:	4603      	mov	r3, r0
 800aeb6:	0b5b      	lsrs	r3, r3, #13
 800aeb8:	4a04      	ldr	r2, [pc, #16]	; (800aecc <RCC_GetPCLK2ClockFreq+0x24>)
 800aeba:	5cd3      	ldrb	r3, [r2, r3]
 800aebc:	461a      	mov	r2, r3
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	40d3      	lsrs	r3, r2
}
 800aec2:	4618      	mov	r0, r3
 800aec4:	3708      	adds	r7, #8
 800aec6:	46bd      	mov	sp, r7
 800aec8:	bd80      	pop	{r7, pc}
 800aeca:	bf00      	nop
 800aecc:	0800f62c 	.word	0x0800f62c

0800aed0 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 800aed0:	b590      	push	{r4, r7, lr}
 800aed2:	b087      	sub	sp, #28
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 800aed8:	2300      	movs	r3, #0
 800aeda:	617b      	str	r3, [r7, #20]
 800aedc:	2300      	movs	r3, #0
 800aede:	60fb      	str	r3, [r7, #12]
 800aee0:	2300      	movs	r3, #0
 800aee2:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800aee4:	f7ff ff32 	bl	800ad4c <LL_RCC_PLL_GetMainSource>
 800aee8:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d003      	beq.n	800aef8 <RCC_PLL_GetFreqDomain_SYS+0x28>
 800aef0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aef4:	d003      	beq.n	800aefe <RCC_PLL_GetFreqDomain_SYS+0x2e>
 800aef6:	e005      	b.n	800af04 <RCC_PLL_GetFreqDomain_SYS+0x34>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800aef8:	4b12      	ldr	r3, [pc, #72]	; (800af44 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800aefa:	617b      	str	r3, [r7, #20]
      break;
 800aefc:	e005      	b.n	800af0a <RCC_PLL_GetFreqDomain_SYS+0x3a>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800aefe:	4b12      	ldr	r3, [pc, #72]	; (800af48 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 800af00:	617b      	str	r3, [r7, #20]
      break;
 800af02:	e002      	b.n	800af0a <RCC_PLL_GetFreqDomain_SYS+0x3a>

    default:
      pllinputfreq = HSI_VALUE;
 800af04:	4b0f      	ldr	r3, [pc, #60]	; (800af44 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800af06:	617b      	str	r3, [r7, #20]
      break;
 800af08:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	2b08      	cmp	r3, #8
 800af0e:	d113      	bne.n	800af38 <RCC_PLL_GetFreqDomain_SYS+0x68>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800af10:	f7ff ff46 	bl	800ada0 <LL_RCC_PLL_GetDivider>
 800af14:	4602      	mov	r2, r0
 800af16:	697b      	ldr	r3, [r7, #20]
 800af18:	fbb3 f4f2 	udiv	r4, r3, r2
 800af1c:	f7ff ff24 	bl	800ad68 <LL_RCC_PLL_GetN>
 800af20:	4603      	mov	r3, r0
 800af22:	fb03 f404 	mul.w	r4, r3, r4
 800af26:	f7ff ff2d 	bl	800ad84 <LL_RCC_PLL_GetP>
 800af2a:	4603      	mov	r3, r0
 800af2c:	0c1b      	lsrs	r3, r3, #16
 800af2e:	3301      	adds	r3, #1
 800af30:	005b      	lsls	r3, r3, #1
 800af32:	fbb4 f3f3 	udiv	r3, r4, r3
 800af36:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 800af38:	693b      	ldr	r3, [r7, #16]
}
 800af3a:	4618      	mov	r0, r3
 800af3c:	371c      	adds	r7, #28
 800af3e:	46bd      	mov	sp, r7
 800af40:	bd90      	pop	{r4, r7, pc}
 800af42:	bf00      	nop
 800af44:	00f42400 	.word	0x00f42400
 800af48:	007a1200 	.word	0x007a1200

0800af4c <LL_SPI_IsEnabled>:
{
 800af4c:	b480      	push	{r7}
 800af4e:	b083      	sub	sp, #12
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af5c:	2b40      	cmp	r3, #64	; 0x40
 800af5e:	d101      	bne.n	800af64 <LL_SPI_IsEnabled+0x18>
 800af60:	2301      	movs	r3, #1
 800af62:	e000      	b.n	800af66 <LL_SPI_IsEnabled+0x1a>
 800af64:	2300      	movs	r3, #0
}
 800af66:	4618      	mov	r0, r3
 800af68:	370c      	adds	r7, #12
 800af6a:	46bd      	mov	sp, r7
 800af6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af70:	4770      	bx	lr

0800af72 <LL_SPI_SetCRCPolynomial>:
{
 800af72:	b480      	push	{r7}
 800af74:	b083      	sub	sp, #12
 800af76:	af00      	add	r7, sp, #0
 800af78:	6078      	str	r0, [r7, #4]
 800af7a:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 800af7c:	683b      	ldr	r3, [r7, #0]
 800af7e:	b29b      	uxth	r3, r3
 800af80:	461a      	mov	r2, r3
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	611a      	str	r2, [r3, #16]
}
 800af86:	bf00      	nop
 800af88:	370c      	adds	r7, #12
 800af8a:	46bd      	mov	sp, r7
 800af8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af90:	4770      	bx	lr

0800af92 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 800af92:	b580      	push	{r7, lr}
 800af94:	b084      	sub	sp, #16
 800af96:	af00      	add	r7, sp, #0
 800af98:	6078      	str	r0, [r7, #4]
 800af9a:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800af9c:	2301      	movs	r3, #1
 800af9e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 800afa0:	6878      	ldr	r0, [r7, #4]
 800afa2:	f7ff ffd3 	bl	800af4c <LL_SPI_IsEnabled>
 800afa6:	4603      	mov	r3, r0
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d139      	bne.n	800b020 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800afb4:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 800afb8:	683a      	ldr	r2, [r7, #0]
 800afba:	6811      	ldr	r1, [r2, #0]
 800afbc:	683a      	ldr	r2, [r7, #0]
 800afbe:	6852      	ldr	r2, [r2, #4]
 800afc0:	4311      	orrs	r1, r2
 800afc2:	683a      	ldr	r2, [r7, #0]
 800afc4:	6892      	ldr	r2, [r2, #8]
 800afc6:	4311      	orrs	r1, r2
 800afc8:	683a      	ldr	r2, [r7, #0]
 800afca:	68d2      	ldr	r2, [r2, #12]
 800afcc:	4311      	orrs	r1, r2
 800afce:	683a      	ldr	r2, [r7, #0]
 800afd0:	6912      	ldr	r2, [r2, #16]
 800afd2:	4311      	orrs	r1, r2
 800afd4:	683a      	ldr	r2, [r7, #0]
 800afd6:	6952      	ldr	r2, [r2, #20]
 800afd8:	4311      	orrs	r1, r2
 800afda:	683a      	ldr	r2, [r7, #0]
 800afdc:	6992      	ldr	r2, [r2, #24]
 800afde:	4311      	orrs	r1, r2
 800afe0:	683a      	ldr	r2, [r7, #0]
 800afe2:	69d2      	ldr	r2, [r2, #28]
 800afe4:	4311      	orrs	r1, r2
 800afe6:	683a      	ldr	r2, [r7, #0]
 800afe8:	6a12      	ldr	r2, [r2, #32]
 800afea:	430a      	orrs	r2, r1
 800afec:	431a      	orrs	r2, r3
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	685b      	ldr	r3, [r3, #4]
 800aff6:	f023 0204 	bic.w	r2, r3, #4
 800affa:	683b      	ldr	r3, [r7, #0]
 800affc:	695b      	ldr	r3, [r3, #20]
 800affe:	0c1b      	lsrs	r3, r3, #16
 800b000:	431a      	orrs	r2, r3
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	6a1b      	ldr	r3, [r3, #32]
 800b00a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b00e:	d105      	bne.n	800b01c <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 800b010:	683b      	ldr	r3, [r7, #0]
 800b012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b014:	4619      	mov	r1, r3
 800b016:	6878      	ldr	r0, [r7, #4]
 800b018:	f7ff ffab 	bl	800af72 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 800b01c:	2300      	movs	r3, #0
 800b01e:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	69db      	ldr	r3, [r3, #28]
 800b024:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	61da      	str	r2, [r3, #28]
  return status;
 800b02c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b02e:	4618      	mov	r0, r3
 800b030:	3710      	adds	r7, #16
 800b032:	46bd      	mov	sp, r7
 800b034:	bd80      	pop	{r7, pc}

0800b036 <LL_TIM_SetPrescaler>:
{
 800b036:	b480      	push	{r7}
 800b038:	b083      	sub	sp, #12
 800b03a:	af00      	add	r7, sp, #0
 800b03c:	6078      	str	r0, [r7, #4]
 800b03e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	683a      	ldr	r2, [r7, #0]
 800b044:	629a      	str	r2, [r3, #40]	; 0x28
}
 800b046:	bf00      	nop
 800b048:	370c      	adds	r7, #12
 800b04a:	46bd      	mov	sp, r7
 800b04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b050:	4770      	bx	lr

0800b052 <LL_TIM_SetAutoReload>:
{
 800b052:	b480      	push	{r7}
 800b054:	b083      	sub	sp, #12
 800b056:	af00      	add	r7, sp, #0
 800b058:	6078      	str	r0, [r7, #4]
 800b05a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	683a      	ldr	r2, [r7, #0]
 800b060:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800b062:	bf00      	nop
 800b064:	370c      	adds	r7, #12
 800b066:	46bd      	mov	sp, r7
 800b068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06c:	4770      	bx	lr

0800b06e <LL_TIM_SetRepetitionCounter>:
{
 800b06e:	b480      	push	{r7}
 800b070:	b083      	sub	sp, #12
 800b072:	af00      	add	r7, sp, #0
 800b074:	6078      	str	r0, [r7, #4]
 800b076:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	683a      	ldr	r2, [r7, #0]
 800b07c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b07e:	bf00      	nop
 800b080:	370c      	adds	r7, #12
 800b082:	46bd      	mov	sp, r7
 800b084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b088:	4770      	bx	lr

0800b08a <LL_TIM_OC_SetCompareCH1>:
{
 800b08a:	b480      	push	{r7}
 800b08c:	b083      	sub	sp, #12
 800b08e:	af00      	add	r7, sp, #0
 800b090:	6078      	str	r0, [r7, #4]
 800b092:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	683a      	ldr	r2, [r7, #0]
 800b098:	635a      	str	r2, [r3, #52]	; 0x34
}
 800b09a:	bf00      	nop
 800b09c:	370c      	adds	r7, #12
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a4:	4770      	bx	lr

0800b0a6 <LL_TIM_OC_SetCompareCH2>:
{
 800b0a6:	b480      	push	{r7}
 800b0a8:	b083      	sub	sp, #12
 800b0aa:	af00      	add	r7, sp, #0
 800b0ac:	6078      	str	r0, [r7, #4]
 800b0ae:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	683a      	ldr	r2, [r7, #0]
 800b0b4:	639a      	str	r2, [r3, #56]	; 0x38
}
 800b0b6:	bf00      	nop
 800b0b8:	370c      	adds	r7, #12
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c0:	4770      	bx	lr

0800b0c2 <LL_TIM_OC_SetCompareCH3>:
{
 800b0c2:	b480      	push	{r7}
 800b0c4:	b083      	sub	sp, #12
 800b0c6:	af00      	add	r7, sp, #0
 800b0c8:	6078      	str	r0, [r7, #4]
 800b0ca:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	683a      	ldr	r2, [r7, #0]
 800b0d0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800b0d2:	bf00      	nop
 800b0d4:	370c      	adds	r7, #12
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0dc:	4770      	bx	lr

0800b0de <LL_TIM_OC_SetCompareCH4>:
{
 800b0de:	b480      	push	{r7}
 800b0e0:	b083      	sub	sp, #12
 800b0e2:	af00      	add	r7, sp, #0
 800b0e4:	6078      	str	r0, [r7, #4]
 800b0e6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	683a      	ldr	r2, [r7, #0]
 800b0ec:	641a      	str	r2, [r3, #64]	; 0x40
}
 800b0ee:	bf00      	nop
 800b0f0:	370c      	adds	r7, #12
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f8:	4770      	bx	lr

0800b0fa <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800b0fa:	b480      	push	{r7}
 800b0fc:	b083      	sub	sp, #12
 800b0fe:	af00      	add	r7, sp, #0
 800b100:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	695b      	ldr	r3, [r3, #20]
 800b106:	f043 0201 	orr.w	r2, r3, #1
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	615a      	str	r2, [r3, #20]
}
 800b10e:	bf00      	nop
 800b110:	370c      	adds	r7, #12
 800b112:	46bd      	mov	sp, r7
 800b114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b118:	4770      	bx	lr
	...

0800b11c <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b084      	sub	sp, #16
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
 800b124:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	4a3d      	ldr	r2, [pc, #244]	; (800b224 <LL_TIM_Init+0x108>)
 800b130:	4293      	cmp	r3, r2
 800b132:	d013      	beq.n	800b15c <LL_TIM_Init+0x40>
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b13a:	d00f      	beq.n	800b15c <LL_TIM_Init+0x40>
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	4a3a      	ldr	r2, [pc, #232]	; (800b228 <LL_TIM_Init+0x10c>)
 800b140:	4293      	cmp	r3, r2
 800b142:	d00b      	beq.n	800b15c <LL_TIM_Init+0x40>
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	4a39      	ldr	r2, [pc, #228]	; (800b22c <LL_TIM_Init+0x110>)
 800b148:	4293      	cmp	r3, r2
 800b14a:	d007      	beq.n	800b15c <LL_TIM_Init+0x40>
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	4a38      	ldr	r2, [pc, #224]	; (800b230 <LL_TIM_Init+0x114>)
 800b150:	4293      	cmp	r3, r2
 800b152:	d003      	beq.n	800b15c <LL_TIM_Init+0x40>
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	4a37      	ldr	r2, [pc, #220]	; (800b234 <LL_TIM_Init+0x118>)
 800b158:	4293      	cmp	r3, r2
 800b15a:	d106      	bne.n	800b16a <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b162:	683b      	ldr	r3, [r7, #0]
 800b164:	685b      	ldr	r3, [r3, #4]
 800b166:	4313      	orrs	r3, r2
 800b168:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	4a2d      	ldr	r2, [pc, #180]	; (800b224 <LL_TIM_Init+0x108>)
 800b16e:	4293      	cmp	r3, r2
 800b170:	d02b      	beq.n	800b1ca <LL_TIM_Init+0xae>
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b178:	d027      	beq.n	800b1ca <LL_TIM_Init+0xae>
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	4a2a      	ldr	r2, [pc, #168]	; (800b228 <LL_TIM_Init+0x10c>)
 800b17e:	4293      	cmp	r3, r2
 800b180:	d023      	beq.n	800b1ca <LL_TIM_Init+0xae>
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	4a29      	ldr	r2, [pc, #164]	; (800b22c <LL_TIM_Init+0x110>)
 800b186:	4293      	cmp	r3, r2
 800b188:	d01f      	beq.n	800b1ca <LL_TIM_Init+0xae>
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	4a28      	ldr	r2, [pc, #160]	; (800b230 <LL_TIM_Init+0x114>)
 800b18e:	4293      	cmp	r3, r2
 800b190:	d01b      	beq.n	800b1ca <LL_TIM_Init+0xae>
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	4a27      	ldr	r2, [pc, #156]	; (800b234 <LL_TIM_Init+0x118>)
 800b196:	4293      	cmp	r3, r2
 800b198:	d017      	beq.n	800b1ca <LL_TIM_Init+0xae>
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	4a26      	ldr	r2, [pc, #152]	; (800b238 <LL_TIM_Init+0x11c>)
 800b19e:	4293      	cmp	r3, r2
 800b1a0:	d013      	beq.n	800b1ca <LL_TIM_Init+0xae>
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	4a25      	ldr	r2, [pc, #148]	; (800b23c <LL_TIM_Init+0x120>)
 800b1a6:	4293      	cmp	r3, r2
 800b1a8:	d00f      	beq.n	800b1ca <LL_TIM_Init+0xae>
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	4a24      	ldr	r2, [pc, #144]	; (800b240 <LL_TIM_Init+0x124>)
 800b1ae:	4293      	cmp	r3, r2
 800b1b0:	d00b      	beq.n	800b1ca <LL_TIM_Init+0xae>
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	4a23      	ldr	r2, [pc, #140]	; (800b244 <LL_TIM_Init+0x128>)
 800b1b6:	4293      	cmp	r3, r2
 800b1b8:	d007      	beq.n	800b1ca <LL_TIM_Init+0xae>
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	4a22      	ldr	r2, [pc, #136]	; (800b248 <LL_TIM_Init+0x12c>)
 800b1be:	4293      	cmp	r3, r2
 800b1c0:	d003      	beq.n	800b1ca <LL_TIM_Init+0xae>
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	4a21      	ldr	r2, [pc, #132]	; (800b24c <LL_TIM_Init+0x130>)
 800b1c6:	4293      	cmp	r3, r2
 800b1c8:	d106      	bne.n	800b1d8 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b1d0:	683b      	ldr	r3, [r7, #0]
 800b1d2:	68db      	ldr	r3, [r3, #12]
 800b1d4:	4313      	orrs	r3, r2
 800b1d6:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	68fa      	ldr	r2, [r7, #12]
 800b1dc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800b1de:	683b      	ldr	r3, [r7, #0]
 800b1e0:	689b      	ldr	r3, [r3, #8]
 800b1e2:	4619      	mov	r1, r3
 800b1e4:	6878      	ldr	r0, [r7, #4]
 800b1e6:	f7ff ff34 	bl	800b052 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800b1ea:	683b      	ldr	r3, [r7, #0]
 800b1ec:	881b      	ldrh	r3, [r3, #0]
 800b1ee:	4619      	mov	r1, r3
 800b1f0:	6878      	ldr	r0, [r7, #4]
 800b1f2:	f7ff ff20 	bl	800b036 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	4a0a      	ldr	r2, [pc, #40]	; (800b224 <LL_TIM_Init+0x108>)
 800b1fa:	4293      	cmp	r3, r2
 800b1fc:	d003      	beq.n	800b206 <LL_TIM_Init+0xea>
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	4a0c      	ldr	r2, [pc, #48]	; (800b234 <LL_TIM_Init+0x118>)
 800b202:	4293      	cmp	r3, r2
 800b204:	d105      	bne.n	800b212 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800b206:	683b      	ldr	r3, [r7, #0]
 800b208:	7c1b      	ldrb	r3, [r3, #16]
 800b20a:	4619      	mov	r1, r3
 800b20c:	6878      	ldr	r0, [r7, #4]
 800b20e:	f7ff ff2e 	bl	800b06e <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800b212:	6878      	ldr	r0, [r7, #4]
 800b214:	f7ff ff71 	bl	800b0fa <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 800b218:	2300      	movs	r3, #0
}
 800b21a:	4618      	mov	r0, r3
 800b21c:	3710      	adds	r7, #16
 800b21e:	46bd      	mov	sp, r7
 800b220:	bd80      	pop	{r7, pc}
 800b222:	bf00      	nop
 800b224:	40010000 	.word	0x40010000
 800b228:	40000400 	.word	0x40000400
 800b22c:	40000800 	.word	0x40000800
 800b230:	40000c00 	.word	0x40000c00
 800b234:	40010400 	.word	0x40010400
 800b238:	40014000 	.word	0x40014000
 800b23c:	40014400 	.word	0x40014400
 800b240:	40014800 	.word	0x40014800
 800b244:	40001800 	.word	0x40001800
 800b248:	40001c00 	.word	0x40001c00
 800b24c:	40002000 	.word	0x40002000

0800b250 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b086      	sub	sp, #24
 800b254:	af00      	add	r7, sp, #0
 800b256:	60f8      	str	r0, [r7, #12]
 800b258:	60b9      	str	r1, [r7, #8]
 800b25a:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 800b25c:	2301      	movs	r3, #1
 800b25e:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 800b260:	68bb      	ldr	r3, [r7, #8]
 800b262:	2b10      	cmp	r3, #16
 800b264:	d012      	beq.n	800b28c <LL_TIM_OC_Init+0x3c>
 800b266:	2b10      	cmp	r3, #16
 800b268:	d802      	bhi.n	800b270 <LL_TIM_OC_Init+0x20>
 800b26a:	2b01      	cmp	r3, #1
 800b26c:	d007      	beq.n	800b27e <LL_TIM_OC_Init+0x2e>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 800b26e:	e022      	b.n	800b2b6 <LL_TIM_OC_Init+0x66>
  switch (Channel)
 800b270:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b274:	d011      	beq.n	800b29a <LL_TIM_OC_Init+0x4a>
 800b276:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b27a:	d015      	beq.n	800b2a8 <LL_TIM_OC_Init+0x58>
      break;
 800b27c:	e01b      	b.n	800b2b6 <LL_TIM_OC_Init+0x66>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 800b27e:	6879      	ldr	r1, [r7, #4]
 800b280:	68f8      	ldr	r0, [r7, #12]
 800b282:	f000 f81d 	bl	800b2c0 <OC1Config>
 800b286:	4603      	mov	r3, r0
 800b288:	75fb      	strb	r3, [r7, #23]
      break;
 800b28a:	e014      	b.n	800b2b6 <LL_TIM_OC_Init+0x66>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 800b28c:	6879      	ldr	r1, [r7, #4]
 800b28e:	68f8      	ldr	r0, [r7, #12]
 800b290:	f000 f882 	bl	800b398 <OC2Config>
 800b294:	4603      	mov	r3, r0
 800b296:	75fb      	strb	r3, [r7, #23]
      break;
 800b298:	e00d      	b.n	800b2b6 <LL_TIM_OC_Init+0x66>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 800b29a:	6879      	ldr	r1, [r7, #4]
 800b29c:	68f8      	ldr	r0, [r7, #12]
 800b29e:	f000 f8eb 	bl	800b478 <OC3Config>
 800b2a2:	4603      	mov	r3, r0
 800b2a4:	75fb      	strb	r3, [r7, #23]
      break;
 800b2a6:	e006      	b.n	800b2b6 <LL_TIM_OC_Init+0x66>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 800b2a8:	6879      	ldr	r1, [r7, #4]
 800b2aa:	68f8      	ldr	r0, [r7, #12]
 800b2ac:	f000 f954 	bl	800b558 <OC4Config>
 800b2b0:	4603      	mov	r3, r0
 800b2b2:	75fb      	strb	r3, [r7, #23]
      break;
 800b2b4:	bf00      	nop
  }

  return result;
 800b2b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	3718      	adds	r7, #24
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	bd80      	pop	{r7, pc}

0800b2c0 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b086      	sub	sp, #24
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
 800b2c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	6a1b      	ldr	r3, [r3, #32]
 800b2ce:	f023 0201 	bic.w	r2, r3, #1
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	6a1b      	ldr	r3, [r3, #32]
 800b2da:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	685b      	ldr	r3, [r3, #4]
 800b2e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	699b      	ldr	r3, [r3, #24]
 800b2e6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	f023 0303 	bic.w	r3, r3, #3
 800b2ee:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b2f6:	683b      	ldr	r3, [r7, #0]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	4313      	orrs	r3, r2
 800b2fc:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800b2fe:	697b      	ldr	r3, [r7, #20]
 800b300:	f023 0202 	bic.w	r2, r3, #2
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	691b      	ldr	r3, [r3, #16]
 800b308:	4313      	orrs	r3, r2
 800b30a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 800b30c:	697b      	ldr	r3, [r7, #20]
 800b30e:	f023 0201 	bic.w	r2, r3, #1
 800b312:	683b      	ldr	r3, [r7, #0]
 800b314:	685b      	ldr	r3, [r3, #4]
 800b316:	4313      	orrs	r3, r2
 800b318:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	4a1c      	ldr	r2, [pc, #112]	; (800b390 <OC1Config+0xd0>)
 800b31e:	4293      	cmp	r3, r2
 800b320:	d003      	beq.n	800b32a <OC1Config+0x6a>
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	4a1b      	ldr	r2, [pc, #108]	; (800b394 <OC1Config+0xd4>)
 800b326:	4293      	cmp	r3, r2
 800b328:	d11e      	bne.n	800b368 <OC1Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 800b32a:	697b      	ldr	r3, [r7, #20]
 800b32c:	f023 0208 	bic.w	r2, r3, #8
 800b330:	683b      	ldr	r3, [r7, #0]
 800b332:	695b      	ldr	r3, [r3, #20]
 800b334:	009b      	lsls	r3, r3, #2
 800b336:	4313      	orrs	r3, r2
 800b338:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800b33a:	697b      	ldr	r3, [r7, #20]
 800b33c:	f023 0204 	bic.w	r2, r3, #4
 800b340:	683b      	ldr	r3, [r7, #0]
 800b342:	689b      	ldr	r3, [r3, #8]
 800b344:	009b      	lsls	r3, r3, #2
 800b346:	4313      	orrs	r3, r2
 800b348:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800b34a:	693b      	ldr	r3, [r7, #16]
 800b34c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b350:	683b      	ldr	r3, [r7, #0]
 800b352:	699b      	ldr	r3, [r3, #24]
 800b354:	4313      	orrs	r3, r2
 800b356:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 800b358:	693b      	ldr	r3, [r7, #16]
 800b35a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b35e:	683b      	ldr	r3, [r7, #0]
 800b360:	69db      	ldr	r3, [r3, #28]
 800b362:	005b      	lsls	r3, r3, #1
 800b364:	4313      	orrs	r3, r2
 800b366:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	693a      	ldr	r2, [r7, #16]
 800b36c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	68fa      	ldr	r2, [r7, #12]
 800b372:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 800b374:	683b      	ldr	r3, [r7, #0]
 800b376:	68db      	ldr	r3, [r3, #12]
 800b378:	4619      	mov	r1, r3
 800b37a:	6878      	ldr	r0, [r7, #4]
 800b37c:	f7ff fe85 	bl	800b08a <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	697a      	ldr	r2, [r7, #20]
 800b384:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800b386:	2300      	movs	r3, #0
}
 800b388:	4618      	mov	r0, r3
 800b38a:	3718      	adds	r7, #24
 800b38c:	46bd      	mov	sp, r7
 800b38e:	bd80      	pop	{r7, pc}
 800b390:	40010000 	.word	0x40010000
 800b394:	40010400 	.word	0x40010400

0800b398 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	b086      	sub	sp, #24
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
 800b3a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	6a1b      	ldr	r3, [r3, #32]
 800b3a6:	f023 0210 	bic.w	r2, r3, #16
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	6a1b      	ldr	r3, [r3, #32]
 800b3b2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	685b      	ldr	r3, [r3, #4]
 800b3b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	699b      	ldr	r3, [r3, #24]
 800b3be:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b3c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	021b      	lsls	r3, r3, #8
 800b3d4:	4313      	orrs	r3, r2
 800b3d6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 800b3d8:	697b      	ldr	r3, [r7, #20]
 800b3da:	f023 0220 	bic.w	r2, r3, #32
 800b3de:	683b      	ldr	r3, [r7, #0]
 800b3e0:	691b      	ldr	r3, [r3, #16]
 800b3e2:	011b      	lsls	r3, r3, #4
 800b3e4:	4313      	orrs	r3, r2
 800b3e6:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 800b3e8:	697b      	ldr	r3, [r7, #20]
 800b3ea:	f023 0210 	bic.w	r2, r3, #16
 800b3ee:	683b      	ldr	r3, [r7, #0]
 800b3f0:	685b      	ldr	r3, [r3, #4]
 800b3f2:	011b      	lsls	r3, r3, #4
 800b3f4:	4313      	orrs	r3, r2
 800b3f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	4a1d      	ldr	r2, [pc, #116]	; (800b470 <OC2Config+0xd8>)
 800b3fc:	4293      	cmp	r3, r2
 800b3fe:	d003      	beq.n	800b408 <OC2Config+0x70>
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	4a1c      	ldr	r2, [pc, #112]	; (800b474 <OC2Config+0xdc>)
 800b404:	4293      	cmp	r3, r2
 800b406:	d11f      	bne.n	800b448 <OC2Config+0xb0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 800b408:	697b      	ldr	r3, [r7, #20]
 800b40a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b40e:	683b      	ldr	r3, [r7, #0]
 800b410:	695b      	ldr	r3, [r3, #20]
 800b412:	019b      	lsls	r3, r3, #6
 800b414:	4313      	orrs	r3, r2
 800b416:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 800b418:	697b      	ldr	r3, [r7, #20]
 800b41a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800b41e:	683b      	ldr	r3, [r7, #0]
 800b420:	689b      	ldr	r3, [r3, #8]
 800b422:	019b      	lsls	r3, r3, #6
 800b424:	4313      	orrs	r3, r2
 800b426:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 800b428:	693b      	ldr	r3, [r7, #16]
 800b42a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b42e:	683b      	ldr	r3, [r7, #0]
 800b430:	699b      	ldr	r3, [r3, #24]
 800b432:	009b      	lsls	r3, r3, #2
 800b434:	4313      	orrs	r3, r2
 800b436:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 800b438:	693b      	ldr	r3, [r7, #16]
 800b43a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b43e:	683b      	ldr	r3, [r7, #0]
 800b440:	69db      	ldr	r3, [r3, #28]
 800b442:	00db      	lsls	r3, r3, #3
 800b444:	4313      	orrs	r3, r2
 800b446:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	693a      	ldr	r2, [r7, #16]
 800b44c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	68fa      	ldr	r2, [r7, #12]
 800b452:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 800b454:	683b      	ldr	r3, [r7, #0]
 800b456:	68db      	ldr	r3, [r3, #12]
 800b458:	4619      	mov	r1, r3
 800b45a:	6878      	ldr	r0, [r7, #4]
 800b45c:	f7ff fe23 	bl	800b0a6 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	697a      	ldr	r2, [r7, #20]
 800b464:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800b466:	2300      	movs	r3, #0
}
 800b468:	4618      	mov	r0, r3
 800b46a:	3718      	adds	r7, #24
 800b46c:	46bd      	mov	sp, r7
 800b46e:	bd80      	pop	{r7, pc}
 800b470:	40010000 	.word	0x40010000
 800b474:	40010400 	.word	0x40010400

0800b478 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800b478:	b580      	push	{r7, lr}
 800b47a:	b086      	sub	sp, #24
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
 800b480:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	6a1b      	ldr	r3, [r3, #32]
 800b486:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	6a1b      	ldr	r3, [r3, #32]
 800b492:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	685b      	ldr	r3, [r3, #4]
 800b498:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	69db      	ldr	r3, [r3, #28]
 800b49e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	f023 0303 	bic.w	r3, r3, #3
 800b4a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	4313      	orrs	r3, r2
 800b4b4:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 800b4b6:	697b      	ldr	r3, [r7, #20]
 800b4b8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b4bc:	683b      	ldr	r3, [r7, #0]
 800b4be:	691b      	ldr	r3, [r3, #16]
 800b4c0:	021b      	lsls	r3, r3, #8
 800b4c2:	4313      	orrs	r3, r2
 800b4c4:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 800b4c6:	697b      	ldr	r3, [r7, #20]
 800b4c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b4cc:	683b      	ldr	r3, [r7, #0]
 800b4ce:	685b      	ldr	r3, [r3, #4]
 800b4d0:	021b      	lsls	r3, r3, #8
 800b4d2:	4313      	orrs	r3, r2
 800b4d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	4a1d      	ldr	r2, [pc, #116]	; (800b550 <OC3Config+0xd8>)
 800b4da:	4293      	cmp	r3, r2
 800b4dc:	d003      	beq.n	800b4e6 <OC3Config+0x6e>
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	4a1c      	ldr	r2, [pc, #112]	; (800b554 <OC3Config+0xdc>)
 800b4e2:	4293      	cmp	r3, r2
 800b4e4:	d11f      	bne.n	800b526 <OC3Config+0xae>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 800b4e6:	697b      	ldr	r3, [r7, #20]
 800b4e8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b4ec:	683b      	ldr	r3, [r7, #0]
 800b4ee:	695b      	ldr	r3, [r3, #20]
 800b4f0:	029b      	lsls	r3, r3, #10
 800b4f2:	4313      	orrs	r3, r2
 800b4f4:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800b4f6:	697b      	ldr	r3, [r7, #20]
 800b4f8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b4fc:	683b      	ldr	r3, [r7, #0]
 800b4fe:	689b      	ldr	r3, [r3, #8]
 800b500:	029b      	lsls	r3, r3, #10
 800b502:	4313      	orrs	r3, r2
 800b504:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800b506:	693b      	ldr	r3, [r7, #16]
 800b508:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b50c:	683b      	ldr	r3, [r7, #0]
 800b50e:	699b      	ldr	r3, [r3, #24]
 800b510:	011b      	lsls	r3, r3, #4
 800b512:	4313      	orrs	r3, r2
 800b514:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800b516:	693b      	ldr	r3, [r7, #16]
 800b518:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b51c:	683b      	ldr	r3, [r7, #0]
 800b51e:	69db      	ldr	r3, [r3, #28]
 800b520:	015b      	lsls	r3, r3, #5
 800b522:	4313      	orrs	r3, r2
 800b524:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	693a      	ldr	r2, [r7, #16]
 800b52a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	68fa      	ldr	r2, [r7, #12]
 800b530:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800b532:	683b      	ldr	r3, [r7, #0]
 800b534:	68db      	ldr	r3, [r3, #12]
 800b536:	4619      	mov	r1, r3
 800b538:	6878      	ldr	r0, [r7, #4]
 800b53a:	f7ff fdc2 	bl	800b0c2 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	697a      	ldr	r2, [r7, #20]
 800b542:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800b544:	2300      	movs	r3, #0
}
 800b546:	4618      	mov	r0, r3
 800b548:	3718      	adds	r7, #24
 800b54a:	46bd      	mov	sp, r7
 800b54c:	bd80      	pop	{r7, pc}
 800b54e:	bf00      	nop
 800b550:	40010000 	.word	0x40010000
 800b554:	40010400 	.word	0x40010400

0800b558 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b086      	sub	sp, #24
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
 800b560:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	6a1b      	ldr	r3, [r3, #32]
 800b566:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	6a1b      	ldr	r3, [r3, #32]
 800b572:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	685b      	ldr	r3, [r3, #4]
 800b578:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	69db      	ldr	r3, [r3, #28]
 800b57e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b586:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800b58e:	683b      	ldr	r3, [r7, #0]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	021b      	lsls	r3, r3, #8
 800b594:	4313      	orrs	r3, r2
 800b596:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 800b598:	693b      	ldr	r3, [r7, #16]
 800b59a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b59e:	683b      	ldr	r3, [r7, #0]
 800b5a0:	691b      	ldr	r3, [r3, #16]
 800b5a2:	031b      	lsls	r3, r3, #12
 800b5a4:	4313      	orrs	r3, r2
 800b5a6:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 800b5a8:	693b      	ldr	r3, [r7, #16]
 800b5aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b5ae:	683b      	ldr	r3, [r7, #0]
 800b5b0:	685b      	ldr	r3, [r3, #4]
 800b5b2:	031b      	lsls	r3, r3, #12
 800b5b4:	4313      	orrs	r3, r2
 800b5b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	4a11      	ldr	r2, [pc, #68]	; (800b600 <OC4Config+0xa8>)
 800b5bc:	4293      	cmp	r3, r2
 800b5be:	d003      	beq.n	800b5c8 <OC4Config+0x70>
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	4a10      	ldr	r2, [pc, #64]	; (800b604 <OC4Config+0xac>)
 800b5c4:	4293      	cmp	r3, r2
 800b5c6:	d107      	bne.n	800b5d8 <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 800b5c8:	697b      	ldr	r3, [r7, #20]
 800b5ca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b5ce:	683b      	ldr	r3, [r7, #0]
 800b5d0:	699b      	ldr	r3, [r3, #24]
 800b5d2:	019b      	lsls	r3, r3, #6
 800b5d4:	4313      	orrs	r3, r2
 800b5d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	697a      	ldr	r2, [r7, #20]
 800b5dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	68fa      	ldr	r2, [r7, #12]
 800b5e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 800b5e4:	683b      	ldr	r3, [r7, #0]
 800b5e6:	68db      	ldr	r3, [r3, #12]
 800b5e8:	4619      	mov	r1, r3
 800b5ea:	6878      	ldr	r0, [r7, #4]
 800b5ec:	f7ff fd77 	bl	800b0de <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	693a      	ldr	r2, [r7, #16]
 800b5f4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800b5f6:	2300      	movs	r3, #0
}
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	3718      	adds	r7, #24
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	bd80      	pop	{r7, pc}
 800b600:	40010000 	.word	0x40010000
 800b604:	40010400 	.word	0x40010400

0800b608 <LL_USART_IsEnabled>:
{
 800b608:	b480      	push	{r7}
 800b60a:	b083      	sub	sp, #12
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	68db      	ldr	r3, [r3, #12]
 800b614:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b618:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b61c:	bf0c      	ite	eq
 800b61e:	2301      	moveq	r3, #1
 800b620:	2300      	movne	r3, #0
 800b622:	b2db      	uxtb	r3, r3
}
 800b624:	4618      	mov	r0, r3
 800b626:	370c      	adds	r7, #12
 800b628:	46bd      	mov	sp, r7
 800b62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62e:	4770      	bx	lr

0800b630 <LL_USART_SetStopBitsLength>:
{
 800b630:	b480      	push	{r7}
 800b632:	b083      	sub	sp, #12
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
 800b638:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	691b      	ldr	r3, [r3, #16]
 800b63e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b642:	683b      	ldr	r3, [r7, #0]
 800b644:	431a      	orrs	r2, r3
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	611a      	str	r2, [r3, #16]
}
 800b64a:	bf00      	nop
 800b64c:	370c      	adds	r7, #12
 800b64e:	46bd      	mov	sp, r7
 800b650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b654:	4770      	bx	lr

0800b656 <LL_USART_SetHWFlowCtrl>:
{
 800b656:	b480      	push	{r7}
 800b658:	b083      	sub	sp, #12
 800b65a:	af00      	add	r7, sp, #0
 800b65c:	6078      	str	r0, [r7, #4]
 800b65e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	695b      	ldr	r3, [r3, #20]
 800b664:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b668:	683b      	ldr	r3, [r7, #0]
 800b66a:	431a      	orrs	r2, r3
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	615a      	str	r2, [r3, #20]
}
 800b670:	bf00      	nop
 800b672:	370c      	adds	r7, #12
 800b674:	46bd      	mov	sp, r7
 800b676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67a:	4770      	bx	lr

0800b67c <LL_USART_SetBaudRate>:
{
 800b67c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b680:	b085      	sub	sp, #20
 800b682:	af00      	add	r7, sp, #0
 800b684:	60f8      	str	r0, [r7, #12]
 800b686:	60b9      	str	r1, [r7, #8]
 800b688:	607a      	str	r2, [r7, #4]
 800b68a:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b692:	f040 80c1 	bne.w	800b818 <LL_USART_SetBaudRate+0x19c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 800b696:	68bb      	ldr	r3, [r7, #8]
 800b698:	461d      	mov	r5, r3
 800b69a:	f04f 0600 	mov.w	r6, #0
 800b69e:	46a8      	mov	r8, r5
 800b6a0:	46b1      	mov	r9, r6
 800b6a2:	eb18 0308 	adds.w	r3, r8, r8
 800b6a6:	eb49 0409 	adc.w	r4, r9, r9
 800b6aa:	4698      	mov	r8, r3
 800b6ac:	46a1      	mov	r9, r4
 800b6ae:	eb18 0805 	adds.w	r8, r8, r5
 800b6b2:	eb49 0906 	adc.w	r9, r9, r6
 800b6b6:	f04f 0100 	mov.w	r1, #0
 800b6ba:	f04f 0200 	mov.w	r2, #0
 800b6be:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800b6c2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800b6c6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800b6ca:	4688      	mov	r8, r1
 800b6cc:	4691      	mov	r9, r2
 800b6ce:	eb18 0005 	adds.w	r0, r8, r5
 800b6d2:	eb49 0106 	adc.w	r1, r9, r6
 800b6d6:	683b      	ldr	r3, [r7, #0]
 800b6d8:	461d      	mov	r5, r3
 800b6da:	f04f 0600 	mov.w	r6, #0
 800b6de:	196b      	adds	r3, r5, r5
 800b6e0:	eb46 0406 	adc.w	r4, r6, r6
 800b6e4:	461a      	mov	r2, r3
 800b6e6:	4623      	mov	r3, r4
 800b6e8:	f7f5 faae 	bl	8000c48 <__aeabi_uldivmod>
 800b6ec:	4603      	mov	r3, r0
 800b6ee:	460c      	mov	r4, r1
 800b6f0:	461a      	mov	r2, r3
 800b6f2:	4bb5      	ldr	r3, [pc, #724]	; (800b9c8 <LL_USART_SetBaudRate+0x34c>)
 800b6f4:	fba3 2302 	umull	r2, r3, r3, r2
 800b6f8:	095b      	lsrs	r3, r3, #5
 800b6fa:	b29b      	uxth	r3, r3
 800b6fc:	011b      	lsls	r3, r3, #4
 800b6fe:	fa1f f883 	uxth.w	r8, r3
 800b702:	68bb      	ldr	r3, [r7, #8]
 800b704:	461d      	mov	r5, r3
 800b706:	f04f 0600 	mov.w	r6, #0
 800b70a:	46a9      	mov	r9, r5
 800b70c:	46b2      	mov	sl, r6
 800b70e:	eb19 0309 	adds.w	r3, r9, r9
 800b712:	eb4a 040a 	adc.w	r4, sl, sl
 800b716:	4699      	mov	r9, r3
 800b718:	46a2      	mov	sl, r4
 800b71a:	eb19 0905 	adds.w	r9, r9, r5
 800b71e:	eb4a 0a06 	adc.w	sl, sl, r6
 800b722:	f04f 0100 	mov.w	r1, #0
 800b726:	f04f 0200 	mov.w	r2, #0
 800b72a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b72e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b732:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b736:	4689      	mov	r9, r1
 800b738:	4692      	mov	sl, r2
 800b73a:	eb19 0005 	adds.w	r0, r9, r5
 800b73e:	eb4a 0106 	adc.w	r1, sl, r6
 800b742:	683b      	ldr	r3, [r7, #0]
 800b744:	461d      	mov	r5, r3
 800b746:	f04f 0600 	mov.w	r6, #0
 800b74a:	196b      	adds	r3, r5, r5
 800b74c:	eb46 0406 	adc.w	r4, r6, r6
 800b750:	461a      	mov	r2, r3
 800b752:	4623      	mov	r3, r4
 800b754:	f7f5 fa78 	bl	8000c48 <__aeabi_uldivmod>
 800b758:	4603      	mov	r3, r0
 800b75a:	460c      	mov	r4, r1
 800b75c:	461a      	mov	r2, r3
 800b75e:	4b9a      	ldr	r3, [pc, #616]	; (800b9c8 <LL_USART_SetBaudRate+0x34c>)
 800b760:	fba3 1302 	umull	r1, r3, r3, r2
 800b764:	095b      	lsrs	r3, r3, #5
 800b766:	2164      	movs	r1, #100	; 0x64
 800b768:	fb01 f303 	mul.w	r3, r1, r3
 800b76c:	1ad3      	subs	r3, r2, r3
 800b76e:	00db      	lsls	r3, r3, #3
 800b770:	3332      	adds	r3, #50	; 0x32
 800b772:	4a95      	ldr	r2, [pc, #596]	; (800b9c8 <LL_USART_SetBaudRate+0x34c>)
 800b774:	fba2 2303 	umull	r2, r3, r2, r3
 800b778:	095b      	lsrs	r3, r3, #5
 800b77a:	b29b      	uxth	r3, r3
 800b77c:	005b      	lsls	r3, r3, #1
 800b77e:	b29b      	uxth	r3, r3
 800b780:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b784:	b29b      	uxth	r3, r3
 800b786:	4443      	add	r3, r8
 800b788:	fa1f f883 	uxth.w	r8, r3
 800b78c:	68bb      	ldr	r3, [r7, #8]
 800b78e:	461d      	mov	r5, r3
 800b790:	f04f 0600 	mov.w	r6, #0
 800b794:	46a9      	mov	r9, r5
 800b796:	46b2      	mov	sl, r6
 800b798:	eb19 0309 	adds.w	r3, r9, r9
 800b79c:	eb4a 040a 	adc.w	r4, sl, sl
 800b7a0:	4699      	mov	r9, r3
 800b7a2:	46a2      	mov	sl, r4
 800b7a4:	eb19 0905 	adds.w	r9, r9, r5
 800b7a8:	eb4a 0a06 	adc.w	sl, sl, r6
 800b7ac:	f04f 0100 	mov.w	r1, #0
 800b7b0:	f04f 0200 	mov.w	r2, #0
 800b7b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b7b8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b7bc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b7c0:	4689      	mov	r9, r1
 800b7c2:	4692      	mov	sl, r2
 800b7c4:	eb19 0005 	adds.w	r0, r9, r5
 800b7c8:	eb4a 0106 	adc.w	r1, sl, r6
 800b7cc:	683b      	ldr	r3, [r7, #0]
 800b7ce:	461d      	mov	r5, r3
 800b7d0:	f04f 0600 	mov.w	r6, #0
 800b7d4:	196b      	adds	r3, r5, r5
 800b7d6:	eb46 0406 	adc.w	r4, r6, r6
 800b7da:	461a      	mov	r2, r3
 800b7dc:	4623      	mov	r3, r4
 800b7de:	f7f5 fa33 	bl	8000c48 <__aeabi_uldivmod>
 800b7e2:	4603      	mov	r3, r0
 800b7e4:	460c      	mov	r4, r1
 800b7e6:	461a      	mov	r2, r3
 800b7e8:	4b77      	ldr	r3, [pc, #476]	; (800b9c8 <LL_USART_SetBaudRate+0x34c>)
 800b7ea:	fba3 1302 	umull	r1, r3, r3, r2
 800b7ee:	095b      	lsrs	r3, r3, #5
 800b7f0:	2164      	movs	r1, #100	; 0x64
 800b7f2:	fb01 f303 	mul.w	r3, r1, r3
 800b7f6:	1ad3      	subs	r3, r2, r3
 800b7f8:	00db      	lsls	r3, r3, #3
 800b7fa:	3332      	adds	r3, #50	; 0x32
 800b7fc:	4a72      	ldr	r2, [pc, #456]	; (800b9c8 <LL_USART_SetBaudRate+0x34c>)
 800b7fe:	fba2 2303 	umull	r2, r3, r2, r3
 800b802:	095b      	lsrs	r3, r3, #5
 800b804:	b29b      	uxth	r3, r3
 800b806:	f003 0307 	and.w	r3, r3, #7
 800b80a:	b29b      	uxth	r3, r3
 800b80c:	4443      	add	r3, r8
 800b80e:	b29b      	uxth	r3, r3
 800b810:	461a      	mov	r2, r3
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	609a      	str	r2, [r3, #8]
}
 800b816:	e0d2      	b.n	800b9be <LL_USART_SetBaudRate+0x342>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800b818:	68bb      	ldr	r3, [r7, #8]
 800b81a:	469a      	mov	sl, r3
 800b81c:	f04f 0b00 	mov.w	fp, #0
 800b820:	46d0      	mov	r8, sl
 800b822:	46d9      	mov	r9, fp
 800b824:	eb18 0308 	adds.w	r3, r8, r8
 800b828:	eb49 0409 	adc.w	r4, r9, r9
 800b82c:	4698      	mov	r8, r3
 800b82e:	46a1      	mov	r9, r4
 800b830:	eb18 080a 	adds.w	r8, r8, sl
 800b834:	eb49 090b 	adc.w	r9, r9, fp
 800b838:	f04f 0100 	mov.w	r1, #0
 800b83c:	f04f 0200 	mov.w	r2, #0
 800b840:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800b844:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800b848:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800b84c:	4688      	mov	r8, r1
 800b84e:	4691      	mov	r9, r2
 800b850:	eb1a 0508 	adds.w	r5, sl, r8
 800b854:	eb4b 0609 	adc.w	r6, fp, r9
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	4619      	mov	r1, r3
 800b85c:	f04f 0200 	mov.w	r2, #0
 800b860:	f04f 0300 	mov.w	r3, #0
 800b864:	f04f 0400 	mov.w	r4, #0
 800b868:	0094      	lsls	r4, r2, #2
 800b86a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b86e:	008b      	lsls	r3, r1, #2
 800b870:	461a      	mov	r2, r3
 800b872:	4623      	mov	r3, r4
 800b874:	4628      	mov	r0, r5
 800b876:	4631      	mov	r1, r6
 800b878:	f7f5 f9e6 	bl	8000c48 <__aeabi_uldivmod>
 800b87c:	4603      	mov	r3, r0
 800b87e:	460c      	mov	r4, r1
 800b880:	461a      	mov	r2, r3
 800b882:	4b51      	ldr	r3, [pc, #324]	; (800b9c8 <LL_USART_SetBaudRate+0x34c>)
 800b884:	fba3 2302 	umull	r2, r3, r3, r2
 800b888:	095b      	lsrs	r3, r3, #5
 800b88a:	b29b      	uxth	r3, r3
 800b88c:	011b      	lsls	r3, r3, #4
 800b88e:	fa1f f883 	uxth.w	r8, r3
 800b892:	68bb      	ldr	r3, [r7, #8]
 800b894:	469b      	mov	fp, r3
 800b896:	f04f 0c00 	mov.w	ip, #0
 800b89a:	46d9      	mov	r9, fp
 800b89c:	46e2      	mov	sl, ip
 800b89e:	eb19 0309 	adds.w	r3, r9, r9
 800b8a2:	eb4a 040a 	adc.w	r4, sl, sl
 800b8a6:	4699      	mov	r9, r3
 800b8a8:	46a2      	mov	sl, r4
 800b8aa:	eb19 090b 	adds.w	r9, r9, fp
 800b8ae:	eb4a 0a0c 	adc.w	sl, sl, ip
 800b8b2:	f04f 0100 	mov.w	r1, #0
 800b8b6:	f04f 0200 	mov.w	r2, #0
 800b8ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b8be:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b8c2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b8c6:	4689      	mov	r9, r1
 800b8c8:	4692      	mov	sl, r2
 800b8ca:	eb1b 0509 	adds.w	r5, fp, r9
 800b8ce:	eb4c 060a 	adc.w	r6, ip, sl
 800b8d2:	683b      	ldr	r3, [r7, #0]
 800b8d4:	4619      	mov	r1, r3
 800b8d6:	f04f 0200 	mov.w	r2, #0
 800b8da:	f04f 0300 	mov.w	r3, #0
 800b8de:	f04f 0400 	mov.w	r4, #0
 800b8e2:	0094      	lsls	r4, r2, #2
 800b8e4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b8e8:	008b      	lsls	r3, r1, #2
 800b8ea:	461a      	mov	r2, r3
 800b8ec:	4623      	mov	r3, r4
 800b8ee:	4628      	mov	r0, r5
 800b8f0:	4631      	mov	r1, r6
 800b8f2:	f7f5 f9a9 	bl	8000c48 <__aeabi_uldivmod>
 800b8f6:	4603      	mov	r3, r0
 800b8f8:	460c      	mov	r4, r1
 800b8fa:	461a      	mov	r2, r3
 800b8fc:	4b32      	ldr	r3, [pc, #200]	; (800b9c8 <LL_USART_SetBaudRate+0x34c>)
 800b8fe:	fba3 1302 	umull	r1, r3, r3, r2
 800b902:	095b      	lsrs	r3, r3, #5
 800b904:	2164      	movs	r1, #100	; 0x64
 800b906:	fb01 f303 	mul.w	r3, r1, r3
 800b90a:	1ad3      	subs	r3, r2, r3
 800b90c:	011b      	lsls	r3, r3, #4
 800b90e:	3332      	adds	r3, #50	; 0x32
 800b910:	4a2d      	ldr	r2, [pc, #180]	; (800b9c8 <LL_USART_SetBaudRate+0x34c>)
 800b912:	fba2 2303 	umull	r2, r3, r2, r3
 800b916:	095b      	lsrs	r3, r3, #5
 800b918:	b29b      	uxth	r3, r3
 800b91a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b91e:	b29b      	uxth	r3, r3
 800b920:	4443      	add	r3, r8
 800b922:	fa1f f883 	uxth.w	r8, r3
 800b926:	68bb      	ldr	r3, [r7, #8]
 800b928:	469b      	mov	fp, r3
 800b92a:	f04f 0c00 	mov.w	ip, #0
 800b92e:	46d9      	mov	r9, fp
 800b930:	46e2      	mov	sl, ip
 800b932:	eb19 0309 	adds.w	r3, r9, r9
 800b936:	eb4a 040a 	adc.w	r4, sl, sl
 800b93a:	4699      	mov	r9, r3
 800b93c:	46a2      	mov	sl, r4
 800b93e:	eb19 090b 	adds.w	r9, r9, fp
 800b942:	eb4a 0a0c 	adc.w	sl, sl, ip
 800b946:	f04f 0100 	mov.w	r1, #0
 800b94a:	f04f 0200 	mov.w	r2, #0
 800b94e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b952:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b956:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b95a:	4689      	mov	r9, r1
 800b95c:	4692      	mov	sl, r2
 800b95e:	eb1b 0509 	adds.w	r5, fp, r9
 800b962:	eb4c 060a 	adc.w	r6, ip, sl
 800b966:	683b      	ldr	r3, [r7, #0]
 800b968:	4619      	mov	r1, r3
 800b96a:	f04f 0200 	mov.w	r2, #0
 800b96e:	f04f 0300 	mov.w	r3, #0
 800b972:	f04f 0400 	mov.w	r4, #0
 800b976:	0094      	lsls	r4, r2, #2
 800b978:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b97c:	008b      	lsls	r3, r1, #2
 800b97e:	461a      	mov	r2, r3
 800b980:	4623      	mov	r3, r4
 800b982:	4628      	mov	r0, r5
 800b984:	4631      	mov	r1, r6
 800b986:	f7f5 f95f 	bl	8000c48 <__aeabi_uldivmod>
 800b98a:	4603      	mov	r3, r0
 800b98c:	460c      	mov	r4, r1
 800b98e:	461a      	mov	r2, r3
 800b990:	4b0d      	ldr	r3, [pc, #52]	; (800b9c8 <LL_USART_SetBaudRate+0x34c>)
 800b992:	fba3 1302 	umull	r1, r3, r3, r2
 800b996:	095b      	lsrs	r3, r3, #5
 800b998:	2164      	movs	r1, #100	; 0x64
 800b99a:	fb01 f303 	mul.w	r3, r1, r3
 800b99e:	1ad3      	subs	r3, r2, r3
 800b9a0:	011b      	lsls	r3, r3, #4
 800b9a2:	3332      	adds	r3, #50	; 0x32
 800b9a4:	4a08      	ldr	r2, [pc, #32]	; (800b9c8 <LL_USART_SetBaudRate+0x34c>)
 800b9a6:	fba2 2303 	umull	r2, r3, r2, r3
 800b9aa:	095b      	lsrs	r3, r3, #5
 800b9ac:	b29b      	uxth	r3, r3
 800b9ae:	f003 030f 	and.w	r3, r3, #15
 800b9b2:	b29b      	uxth	r3, r3
 800b9b4:	4443      	add	r3, r8
 800b9b6:	b29b      	uxth	r3, r3
 800b9b8:	461a      	mov	r2, r3
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	609a      	str	r2, [r3, #8]
}
 800b9be:	bf00      	nop
 800b9c0:	3714      	adds	r7, #20
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9c8:	51eb851f 	.word	0x51eb851f

0800b9cc <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	b088      	sub	sp, #32
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	6078      	str	r0, [r7, #4]
 800b9d4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800b9d6:	2301      	movs	r3, #1
 800b9d8:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800b9da:	2300      	movs	r3, #0
 800b9dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800b9de:	6878      	ldr	r0, [r7, #4]
 800b9e0:	f7ff fe12 	bl	800b608 <LL_USART_IsEnabled>
 800b9e4:	4603      	mov	r3, r0
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d15e      	bne.n	800baa8 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	68db      	ldr	r3, [r3, #12]
 800b9ee:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800b9f2:	f023 030c 	bic.w	r3, r3, #12
 800b9f6:	683a      	ldr	r2, [r7, #0]
 800b9f8:	6851      	ldr	r1, [r2, #4]
 800b9fa:	683a      	ldr	r2, [r7, #0]
 800b9fc:	68d2      	ldr	r2, [r2, #12]
 800b9fe:	4311      	orrs	r1, r2
 800ba00:	683a      	ldr	r2, [r7, #0]
 800ba02:	6912      	ldr	r2, [r2, #16]
 800ba04:	4311      	orrs	r1, r2
 800ba06:	683a      	ldr	r2, [r7, #0]
 800ba08:	6992      	ldr	r2, [r2, #24]
 800ba0a:	430a      	orrs	r2, r1
 800ba0c:	431a      	orrs	r2, r3
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800ba12:	683b      	ldr	r3, [r7, #0]
 800ba14:	689b      	ldr	r3, [r3, #8]
 800ba16:	4619      	mov	r1, r3
 800ba18:	6878      	ldr	r0, [r7, #4]
 800ba1a:	f7ff fe09 	bl	800b630 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800ba1e:	683b      	ldr	r3, [r7, #0]
 800ba20:	695b      	ldr	r3, [r3, #20]
 800ba22:	4619      	mov	r1, r3
 800ba24:	6878      	ldr	r0, [r7, #4]
 800ba26:	f7ff fe16 	bl	800b656 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800ba2a:	f107 0308 	add.w	r3, r7, #8
 800ba2e:	4618      	mov	r0, r3
 800ba30:	f7ff f9c4 	bl	800adbc <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	4a1f      	ldr	r2, [pc, #124]	; (800bab4 <LL_USART_Init+0xe8>)
 800ba38:	4293      	cmp	r3, r2
 800ba3a:	d102      	bne.n	800ba42 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800ba3c:	697b      	ldr	r3, [r7, #20]
 800ba3e:	61bb      	str	r3, [r7, #24]
 800ba40:	e021      	b.n	800ba86 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	4a1c      	ldr	r2, [pc, #112]	; (800bab8 <LL_USART_Init+0xec>)
 800ba46:	4293      	cmp	r3, r2
 800ba48:	d102      	bne.n	800ba50 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800ba4a:	693b      	ldr	r3, [r7, #16]
 800ba4c:	61bb      	str	r3, [r7, #24]
 800ba4e:	e01a      	b.n	800ba86 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	4a1a      	ldr	r2, [pc, #104]	; (800babc <LL_USART_Init+0xf0>)
 800ba54:	4293      	cmp	r3, r2
 800ba56:	d102      	bne.n	800ba5e <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800ba58:	693b      	ldr	r3, [r7, #16]
 800ba5a:	61bb      	str	r3, [r7, #24]
 800ba5c:	e013      	b.n	800ba86 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	4a17      	ldr	r2, [pc, #92]	; (800bac0 <LL_USART_Init+0xf4>)
 800ba62:	4293      	cmp	r3, r2
 800ba64:	d102      	bne.n	800ba6c <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800ba66:	697b      	ldr	r3, [r7, #20]
 800ba68:	61bb      	str	r3, [r7, #24]
 800ba6a:	e00c      	b.n	800ba86 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	4a15      	ldr	r2, [pc, #84]	; (800bac4 <LL_USART_Init+0xf8>)
 800ba70:	4293      	cmp	r3, r2
 800ba72:	d102      	bne.n	800ba7a <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800ba74:	693b      	ldr	r3, [r7, #16]
 800ba76:	61bb      	str	r3, [r7, #24]
 800ba78:	e005      	b.n	800ba86 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	4a12      	ldr	r2, [pc, #72]	; (800bac8 <LL_USART_Init+0xfc>)
 800ba7e:	4293      	cmp	r3, r2
 800ba80:	d101      	bne.n	800ba86 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800ba82:	693b      	ldr	r3, [r7, #16]
 800ba84:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800ba86:	69bb      	ldr	r3, [r7, #24]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d00d      	beq.n	800baa8 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 800ba8c:	683b      	ldr	r3, [r7, #0]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d009      	beq.n	800baa8 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 800ba94:	2300      	movs	r3, #0
 800ba96:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 800ba98:	683b      	ldr	r3, [r7, #0]
 800ba9a:	699a      	ldr	r2, [r3, #24]
 800ba9c:	683b      	ldr	r3, [r7, #0]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	69b9      	ldr	r1, [r7, #24]
 800baa2:	6878      	ldr	r0, [r7, #4]
 800baa4:	f7ff fdea 	bl	800b67c <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800baa8:	7ffb      	ldrb	r3, [r7, #31]
}
 800baaa:	4618      	mov	r0, r3
 800baac:	3720      	adds	r7, #32
 800baae:	46bd      	mov	sp, r7
 800bab0:	bd80      	pop	{r7, pc}
 800bab2:	bf00      	nop
 800bab4:	40011000 	.word	0x40011000
 800bab8:	40004400 	.word	0x40004400
 800babc:	40004800 	.word	0x40004800
 800bac0:	40011400 	.word	0x40011400
 800bac4:	40004c00 	.word	0x40004c00
 800bac8:	40005000 	.word	0x40005000

0800bacc <__errno>:
 800bacc:	4b01      	ldr	r3, [pc, #4]	; (800bad4 <__errno+0x8>)
 800bace:	6818      	ldr	r0, [r3, #0]
 800bad0:	4770      	bx	lr
 800bad2:	bf00      	nop
 800bad4:	20000010 	.word	0x20000010

0800bad8 <__libc_init_array>:
 800bad8:	b570      	push	{r4, r5, r6, lr}
 800bada:	4e0d      	ldr	r6, [pc, #52]	; (800bb10 <__libc_init_array+0x38>)
 800badc:	4c0d      	ldr	r4, [pc, #52]	; (800bb14 <__libc_init_array+0x3c>)
 800bade:	1ba4      	subs	r4, r4, r6
 800bae0:	10a4      	asrs	r4, r4, #2
 800bae2:	2500      	movs	r5, #0
 800bae4:	42a5      	cmp	r5, r4
 800bae6:	d109      	bne.n	800bafc <__libc_init_array+0x24>
 800bae8:	4e0b      	ldr	r6, [pc, #44]	; (800bb18 <__libc_init_array+0x40>)
 800baea:	4c0c      	ldr	r4, [pc, #48]	; (800bb1c <__libc_init_array+0x44>)
 800baec:	f003 fb7e 	bl	800f1ec <_init>
 800baf0:	1ba4      	subs	r4, r4, r6
 800baf2:	10a4      	asrs	r4, r4, #2
 800baf4:	2500      	movs	r5, #0
 800baf6:	42a5      	cmp	r5, r4
 800baf8:	d105      	bne.n	800bb06 <__libc_init_array+0x2e>
 800bafa:	bd70      	pop	{r4, r5, r6, pc}
 800bafc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bb00:	4798      	blx	r3
 800bb02:	3501      	adds	r5, #1
 800bb04:	e7ee      	b.n	800bae4 <__libc_init_array+0xc>
 800bb06:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bb0a:	4798      	blx	r3
 800bb0c:	3501      	adds	r5, #1
 800bb0e:	e7f2      	b.n	800baf6 <__libc_init_array+0x1e>
 800bb10:	0800f95c 	.word	0x0800f95c
 800bb14:	0800f95c 	.word	0x0800f95c
 800bb18:	0800f95c 	.word	0x0800f95c
 800bb1c:	0800f960 	.word	0x0800f960

0800bb20 <memset>:
 800bb20:	4402      	add	r2, r0
 800bb22:	4603      	mov	r3, r0
 800bb24:	4293      	cmp	r3, r2
 800bb26:	d100      	bne.n	800bb2a <memset+0xa>
 800bb28:	4770      	bx	lr
 800bb2a:	f803 1b01 	strb.w	r1, [r3], #1
 800bb2e:	e7f9      	b.n	800bb24 <memset+0x4>

0800bb30 <__cvt>:
 800bb30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bb34:	ec55 4b10 	vmov	r4, r5, d0
 800bb38:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800bb3a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800bb3e:	2d00      	cmp	r5, #0
 800bb40:	460e      	mov	r6, r1
 800bb42:	4691      	mov	r9, r2
 800bb44:	4619      	mov	r1, r3
 800bb46:	bfb8      	it	lt
 800bb48:	4622      	movlt	r2, r4
 800bb4a:	462b      	mov	r3, r5
 800bb4c:	f027 0720 	bic.w	r7, r7, #32
 800bb50:	bfbb      	ittet	lt
 800bb52:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800bb56:	461d      	movlt	r5, r3
 800bb58:	2300      	movge	r3, #0
 800bb5a:	232d      	movlt	r3, #45	; 0x2d
 800bb5c:	bfb8      	it	lt
 800bb5e:	4614      	movlt	r4, r2
 800bb60:	2f46      	cmp	r7, #70	; 0x46
 800bb62:	700b      	strb	r3, [r1, #0]
 800bb64:	d004      	beq.n	800bb70 <__cvt+0x40>
 800bb66:	2f45      	cmp	r7, #69	; 0x45
 800bb68:	d100      	bne.n	800bb6c <__cvt+0x3c>
 800bb6a:	3601      	adds	r6, #1
 800bb6c:	2102      	movs	r1, #2
 800bb6e:	e000      	b.n	800bb72 <__cvt+0x42>
 800bb70:	2103      	movs	r1, #3
 800bb72:	ab03      	add	r3, sp, #12
 800bb74:	9301      	str	r3, [sp, #4]
 800bb76:	ab02      	add	r3, sp, #8
 800bb78:	9300      	str	r3, [sp, #0]
 800bb7a:	4632      	mov	r2, r6
 800bb7c:	4653      	mov	r3, sl
 800bb7e:	ec45 4b10 	vmov	d0, r4, r5
 800bb82:	f000 fdf9 	bl	800c778 <_dtoa_r>
 800bb86:	2f47      	cmp	r7, #71	; 0x47
 800bb88:	4680      	mov	r8, r0
 800bb8a:	d102      	bne.n	800bb92 <__cvt+0x62>
 800bb8c:	f019 0f01 	tst.w	r9, #1
 800bb90:	d026      	beq.n	800bbe0 <__cvt+0xb0>
 800bb92:	2f46      	cmp	r7, #70	; 0x46
 800bb94:	eb08 0906 	add.w	r9, r8, r6
 800bb98:	d111      	bne.n	800bbbe <__cvt+0x8e>
 800bb9a:	f898 3000 	ldrb.w	r3, [r8]
 800bb9e:	2b30      	cmp	r3, #48	; 0x30
 800bba0:	d10a      	bne.n	800bbb8 <__cvt+0x88>
 800bba2:	2200      	movs	r2, #0
 800bba4:	2300      	movs	r3, #0
 800bba6:	4620      	mov	r0, r4
 800bba8:	4629      	mov	r1, r5
 800bbaa:	f7f4 ff8d 	bl	8000ac8 <__aeabi_dcmpeq>
 800bbae:	b918      	cbnz	r0, 800bbb8 <__cvt+0x88>
 800bbb0:	f1c6 0601 	rsb	r6, r6, #1
 800bbb4:	f8ca 6000 	str.w	r6, [sl]
 800bbb8:	f8da 3000 	ldr.w	r3, [sl]
 800bbbc:	4499      	add	r9, r3
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	4620      	mov	r0, r4
 800bbc4:	4629      	mov	r1, r5
 800bbc6:	f7f4 ff7f 	bl	8000ac8 <__aeabi_dcmpeq>
 800bbca:	b938      	cbnz	r0, 800bbdc <__cvt+0xac>
 800bbcc:	2230      	movs	r2, #48	; 0x30
 800bbce:	9b03      	ldr	r3, [sp, #12]
 800bbd0:	454b      	cmp	r3, r9
 800bbd2:	d205      	bcs.n	800bbe0 <__cvt+0xb0>
 800bbd4:	1c59      	adds	r1, r3, #1
 800bbd6:	9103      	str	r1, [sp, #12]
 800bbd8:	701a      	strb	r2, [r3, #0]
 800bbda:	e7f8      	b.n	800bbce <__cvt+0x9e>
 800bbdc:	f8cd 900c 	str.w	r9, [sp, #12]
 800bbe0:	9b03      	ldr	r3, [sp, #12]
 800bbe2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bbe4:	eba3 0308 	sub.w	r3, r3, r8
 800bbe8:	4640      	mov	r0, r8
 800bbea:	6013      	str	r3, [r2, #0]
 800bbec:	b004      	add	sp, #16
 800bbee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800bbf2 <__exponent>:
 800bbf2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bbf4:	2900      	cmp	r1, #0
 800bbf6:	4604      	mov	r4, r0
 800bbf8:	bfba      	itte	lt
 800bbfa:	4249      	neglt	r1, r1
 800bbfc:	232d      	movlt	r3, #45	; 0x2d
 800bbfe:	232b      	movge	r3, #43	; 0x2b
 800bc00:	2909      	cmp	r1, #9
 800bc02:	f804 2b02 	strb.w	r2, [r4], #2
 800bc06:	7043      	strb	r3, [r0, #1]
 800bc08:	dd20      	ble.n	800bc4c <__exponent+0x5a>
 800bc0a:	f10d 0307 	add.w	r3, sp, #7
 800bc0e:	461f      	mov	r7, r3
 800bc10:	260a      	movs	r6, #10
 800bc12:	fb91 f5f6 	sdiv	r5, r1, r6
 800bc16:	fb06 1115 	mls	r1, r6, r5, r1
 800bc1a:	3130      	adds	r1, #48	; 0x30
 800bc1c:	2d09      	cmp	r5, #9
 800bc1e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800bc22:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800bc26:	4629      	mov	r1, r5
 800bc28:	dc09      	bgt.n	800bc3e <__exponent+0x4c>
 800bc2a:	3130      	adds	r1, #48	; 0x30
 800bc2c:	3b02      	subs	r3, #2
 800bc2e:	f802 1c01 	strb.w	r1, [r2, #-1]
 800bc32:	42bb      	cmp	r3, r7
 800bc34:	4622      	mov	r2, r4
 800bc36:	d304      	bcc.n	800bc42 <__exponent+0x50>
 800bc38:	1a10      	subs	r0, r2, r0
 800bc3a:	b003      	add	sp, #12
 800bc3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc3e:	4613      	mov	r3, r2
 800bc40:	e7e7      	b.n	800bc12 <__exponent+0x20>
 800bc42:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc46:	f804 2b01 	strb.w	r2, [r4], #1
 800bc4a:	e7f2      	b.n	800bc32 <__exponent+0x40>
 800bc4c:	2330      	movs	r3, #48	; 0x30
 800bc4e:	4419      	add	r1, r3
 800bc50:	7083      	strb	r3, [r0, #2]
 800bc52:	1d02      	adds	r2, r0, #4
 800bc54:	70c1      	strb	r1, [r0, #3]
 800bc56:	e7ef      	b.n	800bc38 <__exponent+0x46>

0800bc58 <_printf_float>:
 800bc58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc5c:	b08d      	sub	sp, #52	; 0x34
 800bc5e:	460c      	mov	r4, r1
 800bc60:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800bc64:	4616      	mov	r6, r2
 800bc66:	461f      	mov	r7, r3
 800bc68:	4605      	mov	r5, r0
 800bc6a:	f001 fcb7 	bl	800d5dc <_localeconv_r>
 800bc6e:	6803      	ldr	r3, [r0, #0]
 800bc70:	9304      	str	r3, [sp, #16]
 800bc72:	4618      	mov	r0, r3
 800bc74:	f7f4 faac 	bl	80001d0 <strlen>
 800bc78:	2300      	movs	r3, #0
 800bc7a:	930a      	str	r3, [sp, #40]	; 0x28
 800bc7c:	f8d8 3000 	ldr.w	r3, [r8]
 800bc80:	9005      	str	r0, [sp, #20]
 800bc82:	3307      	adds	r3, #7
 800bc84:	f023 0307 	bic.w	r3, r3, #7
 800bc88:	f103 0208 	add.w	r2, r3, #8
 800bc8c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800bc90:	f8d4 b000 	ldr.w	fp, [r4]
 800bc94:	f8c8 2000 	str.w	r2, [r8]
 800bc98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc9c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800bca0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800bca4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bca8:	9307      	str	r3, [sp, #28]
 800bcaa:	f8cd 8018 	str.w	r8, [sp, #24]
 800bcae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bcb2:	4ba7      	ldr	r3, [pc, #668]	; (800bf50 <_printf_float+0x2f8>)
 800bcb4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bcb8:	f7f4 ff38 	bl	8000b2c <__aeabi_dcmpun>
 800bcbc:	bb70      	cbnz	r0, 800bd1c <_printf_float+0xc4>
 800bcbe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bcc2:	4ba3      	ldr	r3, [pc, #652]	; (800bf50 <_printf_float+0x2f8>)
 800bcc4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bcc8:	f7f4 ff12 	bl	8000af0 <__aeabi_dcmple>
 800bccc:	bb30      	cbnz	r0, 800bd1c <_printf_float+0xc4>
 800bcce:	2200      	movs	r2, #0
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	4640      	mov	r0, r8
 800bcd4:	4649      	mov	r1, r9
 800bcd6:	f7f4 ff01 	bl	8000adc <__aeabi_dcmplt>
 800bcda:	b110      	cbz	r0, 800bce2 <_printf_float+0x8a>
 800bcdc:	232d      	movs	r3, #45	; 0x2d
 800bcde:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bce2:	4a9c      	ldr	r2, [pc, #624]	; (800bf54 <_printf_float+0x2fc>)
 800bce4:	4b9c      	ldr	r3, [pc, #624]	; (800bf58 <_printf_float+0x300>)
 800bce6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800bcea:	bf8c      	ite	hi
 800bcec:	4690      	movhi	r8, r2
 800bcee:	4698      	movls	r8, r3
 800bcf0:	2303      	movs	r3, #3
 800bcf2:	f02b 0204 	bic.w	r2, fp, #4
 800bcf6:	6123      	str	r3, [r4, #16]
 800bcf8:	6022      	str	r2, [r4, #0]
 800bcfa:	f04f 0900 	mov.w	r9, #0
 800bcfe:	9700      	str	r7, [sp, #0]
 800bd00:	4633      	mov	r3, r6
 800bd02:	aa0b      	add	r2, sp, #44	; 0x2c
 800bd04:	4621      	mov	r1, r4
 800bd06:	4628      	mov	r0, r5
 800bd08:	f000 f9e6 	bl	800c0d8 <_printf_common>
 800bd0c:	3001      	adds	r0, #1
 800bd0e:	f040 808d 	bne.w	800be2c <_printf_float+0x1d4>
 800bd12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bd16:	b00d      	add	sp, #52	; 0x34
 800bd18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd1c:	4642      	mov	r2, r8
 800bd1e:	464b      	mov	r3, r9
 800bd20:	4640      	mov	r0, r8
 800bd22:	4649      	mov	r1, r9
 800bd24:	f7f4 ff02 	bl	8000b2c <__aeabi_dcmpun>
 800bd28:	b110      	cbz	r0, 800bd30 <_printf_float+0xd8>
 800bd2a:	4a8c      	ldr	r2, [pc, #560]	; (800bf5c <_printf_float+0x304>)
 800bd2c:	4b8c      	ldr	r3, [pc, #560]	; (800bf60 <_printf_float+0x308>)
 800bd2e:	e7da      	b.n	800bce6 <_printf_float+0x8e>
 800bd30:	6861      	ldr	r1, [r4, #4]
 800bd32:	1c4b      	adds	r3, r1, #1
 800bd34:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800bd38:	a80a      	add	r0, sp, #40	; 0x28
 800bd3a:	d13e      	bne.n	800bdba <_printf_float+0x162>
 800bd3c:	2306      	movs	r3, #6
 800bd3e:	6063      	str	r3, [r4, #4]
 800bd40:	2300      	movs	r3, #0
 800bd42:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800bd46:	ab09      	add	r3, sp, #36	; 0x24
 800bd48:	9300      	str	r3, [sp, #0]
 800bd4a:	ec49 8b10 	vmov	d0, r8, r9
 800bd4e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bd52:	6022      	str	r2, [r4, #0]
 800bd54:	f8cd a004 	str.w	sl, [sp, #4]
 800bd58:	6861      	ldr	r1, [r4, #4]
 800bd5a:	4628      	mov	r0, r5
 800bd5c:	f7ff fee8 	bl	800bb30 <__cvt>
 800bd60:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800bd64:	2b47      	cmp	r3, #71	; 0x47
 800bd66:	4680      	mov	r8, r0
 800bd68:	d109      	bne.n	800bd7e <_printf_float+0x126>
 800bd6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd6c:	1cd8      	adds	r0, r3, #3
 800bd6e:	db02      	blt.n	800bd76 <_printf_float+0x11e>
 800bd70:	6862      	ldr	r2, [r4, #4]
 800bd72:	4293      	cmp	r3, r2
 800bd74:	dd47      	ble.n	800be06 <_printf_float+0x1ae>
 800bd76:	f1aa 0a02 	sub.w	sl, sl, #2
 800bd7a:	fa5f fa8a 	uxtb.w	sl, sl
 800bd7e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800bd82:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bd84:	d824      	bhi.n	800bdd0 <_printf_float+0x178>
 800bd86:	3901      	subs	r1, #1
 800bd88:	4652      	mov	r2, sl
 800bd8a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bd8e:	9109      	str	r1, [sp, #36]	; 0x24
 800bd90:	f7ff ff2f 	bl	800bbf2 <__exponent>
 800bd94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bd96:	1813      	adds	r3, r2, r0
 800bd98:	2a01      	cmp	r2, #1
 800bd9a:	4681      	mov	r9, r0
 800bd9c:	6123      	str	r3, [r4, #16]
 800bd9e:	dc02      	bgt.n	800bda6 <_printf_float+0x14e>
 800bda0:	6822      	ldr	r2, [r4, #0]
 800bda2:	07d1      	lsls	r1, r2, #31
 800bda4:	d501      	bpl.n	800bdaa <_printf_float+0x152>
 800bda6:	3301      	adds	r3, #1
 800bda8:	6123      	str	r3, [r4, #16]
 800bdaa:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d0a5      	beq.n	800bcfe <_printf_float+0xa6>
 800bdb2:	232d      	movs	r3, #45	; 0x2d
 800bdb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bdb8:	e7a1      	b.n	800bcfe <_printf_float+0xa6>
 800bdba:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800bdbe:	f000 8177 	beq.w	800c0b0 <_printf_float+0x458>
 800bdc2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800bdc6:	d1bb      	bne.n	800bd40 <_printf_float+0xe8>
 800bdc8:	2900      	cmp	r1, #0
 800bdca:	d1b9      	bne.n	800bd40 <_printf_float+0xe8>
 800bdcc:	2301      	movs	r3, #1
 800bdce:	e7b6      	b.n	800bd3e <_printf_float+0xe6>
 800bdd0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800bdd4:	d119      	bne.n	800be0a <_printf_float+0x1b2>
 800bdd6:	2900      	cmp	r1, #0
 800bdd8:	6863      	ldr	r3, [r4, #4]
 800bdda:	dd0c      	ble.n	800bdf6 <_printf_float+0x19e>
 800bddc:	6121      	str	r1, [r4, #16]
 800bdde:	b913      	cbnz	r3, 800bde6 <_printf_float+0x18e>
 800bde0:	6822      	ldr	r2, [r4, #0]
 800bde2:	07d2      	lsls	r2, r2, #31
 800bde4:	d502      	bpl.n	800bdec <_printf_float+0x194>
 800bde6:	3301      	adds	r3, #1
 800bde8:	440b      	add	r3, r1
 800bdea:	6123      	str	r3, [r4, #16]
 800bdec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdee:	65a3      	str	r3, [r4, #88]	; 0x58
 800bdf0:	f04f 0900 	mov.w	r9, #0
 800bdf4:	e7d9      	b.n	800bdaa <_printf_float+0x152>
 800bdf6:	b913      	cbnz	r3, 800bdfe <_printf_float+0x1a6>
 800bdf8:	6822      	ldr	r2, [r4, #0]
 800bdfa:	07d0      	lsls	r0, r2, #31
 800bdfc:	d501      	bpl.n	800be02 <_printf_float+0x1aa>
 800bdfe:	3302      	adds	r3, #2
 800be00:	e7f3      	b.n	800bdea <_printf_float+0x192>
 800be02:	2301      	movs	r3, #1
 800be04:	e7f1      	b.n	800bdea <_printf_float+0x192>
 800be06:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800be0a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800be0e:	4293      	cmp	r3, r2
 800be10:	db05      	blt.n	800be1e <_printf_float+0x1c6>
 800be12:	6822      	ldr	r2, [r4, #0]
 800be14:	6123      	str	r3, [r4, #16]
 800be16:	07d1      	lsls	r1, r2, #31
 800be18:	d5e8      	bpl.n	800bdec <_printf_float+0x194>
 800be1a:	3301      	adds	r3, #1
 800be1c:	e7e5      	b.n	800bdea <_printf_float+0x192>
 800be1e:	2b00      	cmp	r3, #0
 800be20:	bfd4      	ite	le
 800be22:	f1c3 0302 	rsble	r3, r3, #2
 800be26:	2301      	movgt	r3, #1
 800be28:	4413      	add	r3, r2
 800be2a:	e7de      	b.n	800bdea <_printf_float+0x192>
 800be2c:	6823      	ldr	r3, [r4, #0]
 800be2e:	055a      	lsls	r2, r3, #21
 800be30:	d407      	bmi.n	800be42 <_printf_float+0x1ea>
 800be32:	6923      	ldr	r3, [r4, #16]
 800be34:	4642      	mov	r2, r8
 800be36:	4631      	mov	r1, r6
 800be38:	4628      	mov	r0, r5
 800be3a:	47b8      	blx	r7
 800be3c:	3001      	adds	r0, #1
 800be3e:	d12b      	bne.n	800be98 <_printf_float+0x240>
 800be40:	e767      	b.n	800bd12 <_printf_float+0xba>
 800be42:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800be46:	f240 80dc 	bls.w	800c002 <_printf_float+0x3aa>
 800be4a:	2200      	movs	r2, #0
 800be4c:	2300      	movs	r3, #0
 800be4e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800be52:	f7f4 fe39 	bl	8000ac8 <__aeabi_dcmpeq>
 800be56:	2800      	cmp	r0, #0
 800be58:	d033      	beq.n	800bec2 <_printf_float+0x26a>
 800be5a:	2301      	movs	r3, #1
 800be5c:	4a41      	ldr	r2, [pc, #260]	; (800bf64 <_printf_float+0x30c>)
 800be5e:	4631      	mov	r1, r6
 800be60:	4628      	mov	r0, r5
 800be62:	47b8      	blx	r7
 800be64:	3001      	adds	r0, #1
 800be66:	f43f af54 	beq.w	800bd12 <_printf_float+0xba>
 800be6a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800be6e:	429a      	cmp	r2, r3
 800be70:	db02      	blt.n	800be78 <_printf_float+0x220>
 800be72:	6823      	ldr	r3, [r4, #0]
 800be74:	07d8      	lsls	r0, r3, #31
 800be76:	d50f      	bpl.n	800be98 <_printf_float+0x240>
 800be78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800be7c:	4631      	mov	r1, r6
 800be7e:	4628      	mov	r0, r5
 800be80:	47b8      	blx	r7
 800be82:	3001      	adds	r0, #1
 800be84:	f43f af45 	beq.w	800bd12 <_printf_float+0xba>
 800be88:	f04f 0800 	mov.w	r8, #0
 800be8c:	f104 091a 	add.w	r9, r4, #26
 800be90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be92:	3b01      	subs	r3, #1
 800be94:	4543      	cmp	r3, r8
 800be96:	dc09      	bgt.n	800beac <_printf_float+0x254>
 800be98:	6823      	ldr	r3, [r4, #0]
 800be9a:	079b      	lsls	r3, r3, #30
 800be9c:	f100 8103 	bmi.w	800c0a6 <_printf_float+0x44e>
 800bea0:	68e0      	ldr	r0, [r4, #12]
 800bea2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bea4:	4298      	cmp	r0, r3
 800bea6:	bfb8      	it	lt
 800bea8:	4618      	movlt	r0, r3
 800beaa:	e734      	b.n	800bd16 <_printf_float+0xbe>
 800beac:	2301      	movs	r3, #1
 800beae:	464a      	mov	r2, r9
 800beb0:	4631      	mov	r1, r6
 800beb2:	4628      	mov	r0, r5
 800beb4:	47b8      	blx	r7
 800beb6:	3001      	adds	r0, #1
 800beb8:	f43f af2b 	beq.w	800bd12 <_printf_float+0xba>
 800bebc:	f108 0801 	add.w	r8, r8, #1
 800bec0:	e7e6      	b.n	800be90 <_printf_float+0x238>
 800bec2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	dc2b      	bgt.n	800bf20 <_printf_float+0x2c8>
 800bec8:	2301      	movs	r3, #1
 800beca:	4a26      	ldr	r2, [pc, #152]	; (800bf64 <_printf_float+0x30c>)
 800becc:	4631      	mov	r1, r6
 800bece:	4628      	mov	r0, r5
 800bed0:	47b8      	blx	r7
 800bed2:	3001      	adds	r0, #1
 800bed4:	f43f af1d 	beq.w	800bd12 <_printf_float+0xba>
 800bed8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800beda:	b923      	cbnz	r3, 800bee6 <_printf_float+0x28e>
 800bedc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bede:	b913      	cbnz	r3, 800bee6 <_printf_float+0x28e>
 800bee0:	6823      	ldr	r3, [r4, #0]
 800bee2:	07d9      	lsls	r1, r3, #31
 800bee4:	d5d8      	bpl.n	800be98 <_printf_float+0x240>
 800bee6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800beea:	4631      	mov	r1, r6
 800beec:	4628      	mov	r0, r5
 800beee:	47b8      	blx	r7
 800bef0:	3001      	adds	r0, #1
 800bef2:	f43f af0e 	beq.w	800bd12 <_printf_float+0xba>
 800bef6:	f04f 0900 	mov.w	r9, #0
 800befa:	f104 0a1a 	add.w	sl, r4, #26
 800befe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf00:	425b      	negs	r3, r3
 800bf02:	454b      	cmp	r3, r9
 800bf04:	dc01      	bgt.n	800bf0a <_printf_float+0x2b2>
 800bf06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf08:	e794      	b.n	800be34 <_printf_float+0x1dc>
 800bf0a:	2301      	movs	r3, #1
 800bf0c:	4652      	mov	r2, sl
 800bf0e:	4631      	mov	r1, r6
 800bf10:	4628      	mov	r0, r5
 800bf12:	47b8      	blx	r7
 800bf14:	3001      	adds	r0, #1
 800bf16:	f43f aefc 	beq.w	800bd12 <_printf_float+0xba>
 800bf1a:	f109 0901 	add.w	r9, r9, #1
 800bf1e:	e7ee      	b.n	800befe <_printf_float+0x2a6>
 800bf20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bf22:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bf24:	429a      	cmp	r2, r3
 800bf26:	bfa8      	it	ge
 800bf28:	461a      	movge	r2, r3
 800bf2a:	2a00      	cmp	r2, #0
 800bf2c:	4691      	mov	r9, r2
 800bf2e:	dd07      	ble.n	800bf40 <_printf_float+0x2e8>
 800bf30:	4613      	mov	r3, r2
 800bf32:	4631      	mov	r1, r6
 800bf34:	4642      	mov	r2, r8
 800bf36:	4628      	mov	r0, r5
 800bf38:	47b8      	blx	r7
 800bf3a:	3001      	adds	r0, #1
 800bf3c:	f43f aee9 	beq.w	800bd12 <_printf_float+0xba>
 800bf40:	f104 031a 	add.w	r3, r4, #26
 800bf44:	f04f 0b00 	mov.w	fp, #0
 800bf48:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bf4c:	9306      	str	r3, [sp, #24]
 800bf4e:	e015      	b.n	800bf7c <_printf_float+0x324>
 800bf50:	7fefffff 	.word	0x7fefffff
 800bf54:	0800f90a 	.word	0x0800f90a
 800bf58:	0800f650 	.word	0x0800f650
 800bf5c:	0800f658 	.word	0x0800f658
 800bf60:	0800f654 	.word	0x0800f654
 800bf64:	0800f65c 	.word	0x0800f65c
 800bf68:	2301      	movs	r3, #1
 800bf6a:	9a06      	ldr	r2, [sp, #24]
 800bf6c:	4631      	mov	r1, r6
 800bf6e:	4628      	mov	r0, r5
 800bf70:	47b8      	blx	r7
 800bf72:	3001      	adds	r0, #1
 800bf74:	f43f aecd 	beq.w	800bd12 <_printf_float+0xba>
 800bf78:	f10b 0b01 	add.w	fp, fp, #1
 800bf7c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800bf80:	ebaa 0309 	sub.w	r3, sl, r9
 800bf84:	455b      	cmp	r3, fp
 800bf86:	dcef      	bgt.n	800bf68 <_printf_float+0x310>
 800bf88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bf8c:	429a      	cmp	r2, r3
 800bf8e:	44d0      	add	r8, sl
 800bf90:	db15      	blt.n	800bfbe <_printf_float+0x366>
 800bf92:	6823      	ldr	r3, [r4, #0]
 800bf94:	07da      	lsls	r2, r3, #31
 800bf96:	d412      	bmi.n	800bfbe <_printf_float+0x366>
 800bf98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf9a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bf9c:	eba3 020a 	sub.w	r2, r3, sl
 800bfa0:	eba3 0a01 	sub.w	sl, r3, r1
 800bfa4:	4592      	cmp	sl, r2
 800bfa6:	bfa8      	it	ge
 800bfa8:	4692      	movge	sl, r2
 800bfaa:	f1ba 0f00 	cmp.w	sl, #0
 800bfae:	dc0e      	bgt.n	800bfce <_printf_float+0x376>
 800bfb0:	f04f 0800 	mov.w	r8, #0
 800bfb4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bfb8:	f104 091a 	add.w	r9, r4, #26
 800bfbc:	e019      	b.n	800bff2 <_printf_float+0x39a>
 800bfbe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bfc2:	4631      	mov	r1, r6
 800bfc4:	4628      	mov	r0, r5
 800bfc6:	47b8      	blx	r7
 800bfc8:	3001      	adds	r0, #1
 800bfca:	d1e5      	bne.n	800bf98 <_printf_float+0x340>
 800bfcc:	e6a1      	b.n	800bd12 <_printf_float+0xba>
 800bfce:	4653      	mov	r3, sl
 800bfd0:	4642      	mov	r2, r8
 800bfd2:	4631      	mov	r1, r6
 800bfd4:	4628      	mov	r0, r5
 800bfd6:	47b8      	blx	r7
 800bfd8:	3001      	adds	r0, #1
 800bfda:	d1e9      	bne.n	800bfb0 <_printf_float+0x358>
 800bfdc:	e699      	b.n	800bd12 <_printf_float+0xba>
 800bfde:	2301      	movs	r3, #1
 800bfe0:	464a      	mov	r2, r9
 800bfe2:	4631      	mov	r1, r6
 800bfe4:	4628      	mov	r0, r5
 800bfe6:	47b8      	blx	r7
 800bfe8:	3001      	adds	r0, #1
 800bfea:	f43f ae92 	beq.w	800bd12 <_printf_float+0xba>
 800bfee:	f108 0801 	add.w	r8, r8, #1
 800bff2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bff6:	1a9b      	subs	r3, r3, r2
 800bff8:	eba3 030a 	sub.w	r3, r3, sl
 800bffc:	4543      	cmp	r3, r8
 800bffe:	dcee      	bgt.n	800bfde <_printf_float+0x386>
 800c000:	e74a      	b.n	800be98 <_printf_float+0x240>
 800c002:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c004:	2a01      	cmp	r2, #1
 800c006:	dc01      	bgt.n	800c00c <_printf_float+0x3b4>
 800c008:	07db      	lsls	r3, r3, #31
 800c00a:	d53a      	bpl.n	800c082 <_printf_float+0x42a>
 800c00c:	2301      	movs	r3, #1
 800c00e:	4642      	mov	r2, r8
 800c010:	4631      	mov	r1, r6
 800c012:	4628      	mov	r0, r5
 800c014:	47b8      	blx	r7
 800c016:	3001      	adds	r0, #1
 800c018:	f43f ae7b 	beq.w	800bd12 <_printf_float+0xba>
 800c01c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c020:	4631      	mov	r1, r6
 800c022:	4628      	mov	r0, r5
 800c024:	47b8      	blx	r7
 800c026:	3001      	adds	r0, #1
 800c028:	f108 0801 	add.w	r8, r8, #1
 800c02c:	f43f ae71 	beq.w	800bd12 <_printf_float+0xba>
 800c030:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c032:	2200      	movs	r2, #0
 800c034:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 800c038:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c03c:	2300      	movs	r3, #0
 800c03e:	f7f4 fd43 	bl	8000ac8 <__aeabi_dcmpeq>
 800c042:	b9c8      	cbnz	r0, 800c078 <_printf_float+0x420>
 800c044:	4653      	mov	r3, sl
 800c046:	4642      	mov	r2, r8
 800c048:	4631      	mov	r1, r6
 800c04a:	4628      	mov	r0, r5
 800c04c:	47b8      	blx	r7
 800c04e:	3001      	adds	r0, #1
 800c050:	d10e      	bne.n	800c070 <_printf_float+0x418>
 800c052:	e65e      	b.n	800bd12 <_printf_float+0xba>
 800c054:	2301      	movs	r3, #1
 800c056:	4652      	mov	r2, sl
 800c058:	4631      	mov	r1, r6
 800c05a:	4628      	mov	r0, r5
 800c05c:	47b8      	blx	r7
 800c05e:	3001      	adds	r0, #1
 800c060:	f43f ae57 	beq.w	800bd12 <_printf_float+0xba>
 800c064:	f108 0801 	add.w	r8, r8, #1
 800c068:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c06a:	3b01      	subs	r3, #1
 800c06c:	4543      	cmp	r3, r8
 800c06e:	dcf1      	bgt.n	800c054 <_printf_float+0x3fc>
 800c070:	464b      	mov	r3, r9
 800c072:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c076:	e6de      	b.n	800be36 <_printf_float+0x1de>
 800c078:	f04f 0800 	mov.w	r8, #0
 800c07c:	f104 0a1a 	add.w	sl, r4, #26
 800c080:	e7f2      	b.n	800c068 <_printf_float+0x410>
 800c082:	2301      	movs	r3, #1
 800c084:	e7df      	b.n	800c046 <_printf_float+0x3ee>
 800c086:	2301      	movs	r3, #1
 800c088:	464a      	mov	r2, r9
 800c08a:	4631      	mov	r1, r6
 800c08c:	4628      	mov	r0, r5
 800c08e:	47b8      	blx	r7
 800c090:	3001      	adds	r0, #1
 800c092:	f43f ae3e 	beq.w	800bd12 <_printf_float+0xba>
 800c096:	f108 0801 	add.w	r8, r8, #1
 800c09a:	68e3      	ldr	r3, [r4, #12]
 800c09c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c09e:	1a9b      	subs	r3, r3, r2
 800c0a0:	4543      	cmp	r3, r8
 800c0a2:	dcf0      	bgt.n	800c086 <_printf_float+0x42e>
 800c0a4:	e6fc      	b.n	800bea0 <_printf_float+0x248>
 800c0a6:	f04f 0800 	mov.w	r8, #0
 800c0aa:	f104 0919 	add.w	r9, r4, #25
 800c0ae:	e7f4      	b.n	800c09a <_printf_float+0x442>
 800c0b0:	2900      	cmp	r1, #0
 800c0b2:	f43f ae8b 	beq.w	800bdcc <_printf_float+0x174>
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800c0bc:	ab09      	add	r3, sp, #36	; 0x24
 800c0be:	9300      	str	r3, [sp, #0]
 800c0c0:	ec49 8b10 	vmov	d0, r8, r9
 800c0c4:	6022      	str	r2, [r4, #0]
 800c0c6:	f8cd a004 	str.w	sl, [sp, #4]
 800c0ca:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c0ce:	4628      	mov	r0, r5
 800c0d0:	f7ff fd2e 	bl	800bb30 <__cvt>
 800c0d4:	4680      	mov	r8, r0
 800c0d6:	e648      	b.n	800bd6a <_printf_float+0x112>

0800c0d8 <_printf_common>:
 800c0d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0dc:	4691      	mov	r9, r2
 800c0de:	461f      	mov	r7, r3
 800c0e0:	688a      	ldr	r2, [r1, #8]
 800c0e2:	690b      	ldr	r3, [r1, #16]
 800c0e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c0e8:	4293      	cmp	r3, r2
 800c0ea:	bfb8      	it	lt
 800c0ec:	4613      	movlt	r3, r2
 800c0ee:	f8c9 3000 	str.w	r3, [r9]
 800c0f2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c0f6:	4606      	mov	r6, r0
 800c0f8:	460c      	mov	r4, r1
 800c0fa:	b112      	cbz	r2, 800c102 <_printf_common+0x2a>
 800c0fc:	3301      	adds	r3, #1
 800c0fe:	f8c9 3000 	str.w	r3, [r9]
 800c102:	6823      	ldr	r3, [r4, #0]
 800c104:	0699      	lsls	r1, r3, #26
 800c106:	bf42      	ittt	mi
 800c108:	f8d9 3000 	ldrmi.w	r3, [r9]
 800c10c:	3302      	addmi	r3, #2
 800c10e:	f8c9 3000 	strmi.w	r3, [r9]
 800c112:	6825      	ldr	r5, [r4, #0]
 800c114:	f015 0506 	ands.w	r5, r5, #6
 800c118:	d107      	bne.n	800c12a <_printf_common+0x52>
 800c11a:	f104 0a19 	add.w	sl, r4, #25
 800c11e:	68e3      	ldr	r3, [r4, #12]
 800c120:	f8d9 2000 	ldr.w	r2, [r9]
 800c124:	1a9b      	subs	r3, r3, r2
 800c126:	42ab      	cmp	r3, r5
 800c128:	dc28      	bgt.n	800c17c <_printf_common+0xa4>
 800c12a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c12e:	6822      	ldr	r2, [r4, #0]
 800c130:	3300      	adds	r3, #0
 800c132:	bf18      	it	ne
 800c134:	2301      	movne	r3, #1
 800c136:	0692      	lsls	r2, r2, #26
 800c138:	d42d      	bmi.n	800c196 <_printf_common+0xbe>
 800c13a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c13e:	4639      	mov	r1, r7
 800c140:	4630      	mov	r0, r6
 800c142:	47c0      	blx	r8
 800c144:	3001      	adds	r0, #1
 800c146:	d020      	beq.n	800c18a <_printf_common+0xb2>
 800c148:	6823      	ldr	r3, [r4, #0]
 800c14a:	68e5      	ldr	r5, [r4, #12]
 800c14c:	f8d9 2000 	ldr.w	r2, [r9]
 800c150:	f003 0306 	and.w	r3, r3, #6
 800c154:	2b04      	cmp	r3, #4
 800c156:	bf08      	it	eq
 800c158:	1aad      	subeq	r5, r5, r2
 800c15a:	68a3      	ldr	r3, [r4, #8]
 800c15c:	6922      	ldr	r2, [r4, #16]
 800c15e:	bf0c      	ite	eq
 800c160:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c164:	2500      	movne	r5, #0
 800c166:	4293      	cmp	r3, r2
 800c168:	bfc4      	itt	gt
 800c16a:	1a9b      	subgt	r3, r3, r2
 800c16c:	18ed      	addgt	r5, r5, r3
 800c16e:	f04f 0900 	mov.w	r9, #0
 800c172:	341a      	adds	r4, #26
 800c174:	454d      	cmp	r5, r9
 800c176:	d11a      	bne.n	800c1ae <_printf_common+0xd6>
 800c178:	2000      	movs	r0, #0
 800c17a:	e008      	b.n	800c18e <_printf_common+0xb6>
 800c17c:	2301      	movs	r3, #1
 800c17e:	4652      	mov	r2, sl
 800c180:	4639      	mov	r1, r7
 800c182:	4630      	mov	r0, r6
 800c184:	47c0      	blx	r8
 800c186:	3001      	adds	r0, #1
 800c188:	d103      	bne.n	800c192 <_printf_common+0xba>
 800c18a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c18e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c192:	3501      	adds	r5, #1
 800c194:	e7c3      	b.n	800c11e <_printf_common+0x46>
 800c196:	18e1      	adds	r1, r4, r3
 800c198:	1c5a      	adds	r2, r3, #1
 800c19a:	2030      	movs	r0, #48	; 0x30
 800c19c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c1a0:	4422      	add	r2, r4
 800c1a2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c1a6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c1aa:	3302      	adds	r3, #2
 800c1ac:	e7c5      	b.n	800c13a <_printf_common+0x62>
 800c1ae:	2301      	movs	r3, #1
 800c1b0:	4622      	mov	r2, r4
 800c1b2:	4639      	mov	r1, r7
 800c1b4:	4630      	mov	r0, r6
 800c1b6:	47c0      	blx	r8
 800c1b8:	3001      	adds	r0, #1
 800c1ba:	d0e6      	beq.n	800c18a <_printf_common+0xb2>
 800c1bc:	f109 0901 	add.w	r9, r9, #1
 800c1c0:	e7d8      	b.n	800c174 <_printf_common+0x9c>
	...

0800c1c4 <_printf_i>:
 800c1c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c1c8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800c1cc:	460c      	mov	r4, r1
 800c1ce:	7e09      	ldrb	r1, [r1, #24]
 800c1d0:	b085      	sub	sp, #20
 800c1d2:	296e      	cmp	r1, #110	; 0x6e
 800c1d4:	4617      	mov	r7, r2
 800c1d6:	4606      	mov	r6, r0
 800c1d8:	4698      	mov	r8, r3
 800c1da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c1dc:	f000 80b3 	beq.w	800c346 <_printf_i+0x182>
 800c1e0:	d822      	bhi.n	800c228 <_printf_i+0x64>
 800c1e2:	2963      	cmp	r1, #99	; 0x63
 800c1e4:	d036      	beq.n	800c254 <_printf_i+0x90>
 800c1e6:	d80a      	bhi.n	800c1fe <_printf_i+0x3a>
 800c1e8:	2900      	cmp	r1, #0
 800c1ea:	f000 80b9 	beq.w	800c360 <_printf_i+0x19c>
 800c1ee:	2958      	cmp	r1, #88	; 0x58
 800c1f0:	f000 8083 	beq.w	800c2fa <_printf_i+0x136>
 800c1f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c1f8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800c1fc:	e032      	b.n	800c264 <_printf_i+0xa0>
 800c1fe:	2964      	cmp	r1, #100	; 0x64
 800c200:	d001      	beq.n	800c206 <_printf_i+0x42>
 800c202:	2969      	cmp	r1, #105	; 0x69
 800c204:	d1f6      	bne.n	800c1f4 <_printf_i+0x30>
 800c206:	6820      	ldr	r0, [r4, #0]
 800c208:	6813      	ldr	r3, [r2, #0]
 800c20a:	0605      	lsls	r5, r0, #24
 800c20c:	f103 0104 	add.w	r1, r3, #4
 800c210:	d52a      	bpl.n	800c268 <_printf_i+0xa4>
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	6011      	str	r1, [r2, #0]
 800c216:	2b00      	cmp	r3, #0
 800c218:	da03      	bge.n	800c222 <_printf_i+0x5e>
 800c21a:	222d      	movs	r2, #45	; 0x2d
 800c21c:	425b      	negs	r3, r3
 800c21e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800c222:	486f      	ldr	r0, [pc, #444]	; (800c3e0 <_printf_i+0x21c>)
 800c224:	220a      	movs	r2, #10
 800c226:	e039      	b.n	800c29c <_printf_i+0xd8>
 800c228:	2973      	cmp	r1, #115	; 0x73
 800c22a:	f000 809d 	beq.w	800c368 <_printf_i+0x1a4>
 800c22e:	d808      	bhi.n	800c242 <_printf_i+0x7e>
 800c230:	296f      	cmp	r1, #111	; 0x6f
 800c232:	d020      	beq.n	800c276 <_printf_i+0xb2>
 800c234:	2970      	cmp	r1, #112	; 0x70
 800c236:	d1dd      	bne.n	800c1f4 <_printf_i+0x30>
 800c238:	6823      	ldr	r3, [r4, #0]
 800c23a:	f043 0320 	orr.w	r3, r3, #32
 800c23e:	6023      	str	r3, [r4, #0]
 800c240:	e003      	b.n	800c24a <_printf_i+0x86>
 800c242:	2975      	cmp	r1, #117	; 0x75
 800c244:	d017      	beq.n	800c276 <_printf_i+0xb2>
 800c246:	2978      	cmp	r1, #120	; 0x78
 800c248:	d1d4      	bne.n	800c1f4 <_printf_i+0x30>
 800c24a:	2378      	movs	r3, #120	; 0x78
 800c24c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c250:	4864      	ldr	r0, [pc, #400]	; (800c3e4 <_printf_i+0x220>)
 800c252:	e055      	b.n	800c300 <_printf_i+0x13c>
 800c254:	6813      	ldr	r3, [r2, #0]
 800c256:	1d19      	adds	r1, r3, #4
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	6011      	str	r1, [r2, #0]
 800c25c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c260:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c264:	2301      	movs	r3, #1
 800c266:	e08c      	b.n	800c382 <_printf_i+0x1be>
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	6011      	str	r1, [r2, #0]
 800c26c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c270:	bf18      	it	ne
 800c272:	b21b      	sxthne	r3, r3
 800c274:	e7cf      	b.n	800c216 <_printf_i+0x52>
 800c276:	6813      	ldr	r3, [r2, #0]
 800c278:	6825      	ldr	r5, [r4, #0]
 800c27a:	1d18      	adds	r0, r3, #4
 800c27c:	6010      	str	r0, [r2, #0]
 800c27e:	0628      	lsls	r0, r5, #24
 800c280:	d501      	bpl.n	800c286 <_printf_i+0xc2>
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	e002      	b.n	800c28c <_printf_i+0xc8>
 800c286:	0668      	lsls	r0, r5, #25
 800c288:	d5fb      	bpl.n	800c282 <_printf_i+0xbe>
 800c28a:	881b      	ldrh	r3, [r3, #0]
 800c28c:	4854      	ldr	r0, [pc, #336]	; (800c3e0 <_printf_i+0x21c>)
 800c28e:	296f      	cmp	r1, #111	; 0x6f
 800c290:	bf14      	ite	ne
 800c292:	220a      	movne	r2, #10
 800c294:	2208      	moveq	r2, #8
 800c296:	2100      	movs	r1, #0
 800c298:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c29c:	6865      	ldr	r5, [r4, #4]
 800c29e:	60a5      	str	r5, [r4, #8]
 800c2a0:	2d00      	cmp	r5, #0
 800c2a2:	f2c0 8095 	blt.w	800c3d0 <_printf_i+0x20c>
 800c2a6:	6821      	ldr	r1, [r4, #0]
 800c2a8:	f021 0104 	bic.w	r1, r1, #4
 800c2ac:	6021      	str	r1, [r4, #0]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d13d      	bne.n	800c32e <_printf_i+0x16a>
 800c2b2:	2d00      	cmp	r5, #0
 800c2b4:	f040 808e 	bne.w	800c3d4 <_printf_i+0x210>
 800c2b8:	4665      	mov	r5, ip
 800c2ba:	2a08      	cmp	r2, #8
 800c2bc:	d10b      	bne.n	800c2d6 <_printf_i+0x112>
 800c2be:	6823      	ldr	r3, [r4, #0]
 800c2c0:	07db      	lsls	r3, r3, #31
 800c2c2:	d508      	bpl.n	800c2d6 <_printf_i+0x112>
 800c2c4:	6923      	ldr	r3, [r4, #16]
 800c2c6:	6862      	ldr	r2, [r4, #4]
 800c2c8:	429a      	cmp	r2, r3
 800c2ca:	bfde      	ittt	le
 800c2cc:	2330      	movle	r3, #48	; 0x30
 800c2ce:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c2d2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800c2d6:	ebac 0305 	sub.w	r3, ip, r5
 800c2da:	6123      	str	r3, [r4, #16]
 800c2dc:	f8cd 8000 	str.w	r8, [sp]
 800c2e0:	463b      	mov	r3, r7
 800c2e2:	aa03      	add	r2, sp, #12
 800c2e4:	4621      	mov	r1, r4
 800c2e6:	4630      	mov	r0, r6
 800c2e8:	f7ff fef6 	bl	800c0d8 <_printf_common>
 800c2ec:	3001      	adds	r0, #1
 800c2ee:	d14d      	bne.n	800c38c <_printf_i+0x1c8>
 800c2f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c2f4:	b005      	add	sp, #20
 800c2f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c2fa:	4839      	ldr	r0, [pc, #228]	; (800c3e0 <_printf_i+0x21c>)
 800c2fc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800c300:	6813      	ldr	r3, [r2, #0]
 800c302:	6821      	ldr	r1, [r4, #0]
 800c304:	1d1d      	adds	r5, r3, #4
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	6015      	str	r5, [r2, #0]
 800c30a:	060a      	lsls	r2, r1, #24
 800c30c:	d50b      	bpl.n	800c326 <_printf_i+0x162>
 800c30e:	07ca      	lsls	r2, r1, #31
 800c310:	bf44      	itt	mi
 800c312:	f041 0120 	orrmi.w	r1, r1, #32
 800c316:	6021      	strmi	r1, [r4, #0]
 800c318:	b91b      	cbnz	r3, 800c322 <_printf_i+0x15e>
 800c31a:	6822      	ldr	r2, [r4, #0]
 800c31c:	f022 0220 	bic.w	r2, r2, #32
 800c320:	6022      	str	r2, [r4, #0]
 800c322:	2210      	movs	r2, #16
 800c324:	e7b7      	b.n	800c296 <_printf_i+0xd2>
 800c326:	064d      	lsls	r5, r1, #25
 800c328:	bf48      	it	mi
 800c32a:	b29b      	uxthmi	r3, r3
 800c32c:	e7ef      	b.n	800c30e <_printf_i+0x14a>
 800c32e:	4665      	mov	r5, ip
 800c330:	fbb3 f1f2 	udiv	r1, r3, r2
 800c334:	fb02 3311 	mls	r3, r2, r1, r3
 800c338:	5cc3      	ldrb	r3, [r0, r3]
 800c33a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800c33e:	460b      	mov	r3, r1
 800c340:	2900      	cmp	r1, #0
 800c342:	d1f5      	bne.n	800c330 <_printf_i+0x16c>
 800c344:	e7b9      	b.n	800c2ba <_printf_i+0xf6>
 800c346:	6813      	ldr	r3, [r2, #0]
 800c348:	6825      	ldr	r5, [r4, #0]
 800c34a:	6961      	ldr	r1, [r4, #20]
 800c34c:	1d18      	adds	r0, r3, #4
 800c34e:	6010      	str	r0, [r2, #0]
 800c350:	0628      	lsls	r0, r5, #24
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	d501      	bpl.n	800c35a <_printf_i+0x196>
 800c356:	6019      	str	r1, [r3, #0]
 800c358:	e002      	b.n	800c360 <_printf_i+0x19c>
 800c35a:	066a      	lsls	r2, r5, #25
 800c35c:	d5fb      	bpl.n	800c356 <_printf_i+0x192>
 800c35e:	8019      	strh	r1, [r3, #0]
 800c360:	2300      	movs	r3, #0
 800c362:	6123      	str	r3, [r4, #16]
 800c364:	4665      	mov	r5, ip
 800c366:	e7b9      	b.n	800c2dc <_printf_i+0x118>
 800c368:	6813      	ldr	r3, [r2, #0]
 800c36a:	1d19      	adds	r1, r3, #4
 800c36c:	6011      	str	r1, [r2, #0]
 800c36e:	681d      	ldr	r5, [r3, #0]
 800c370:	6862      	ldr	r2, [r4, #4]
 800c372:	2100      	movs	r1, #0
 800c374:	4628      	mov	r0, r5
 800c376:	f7f3 ff33 	bl	80001e0 <memchr>
 800c37a:	b108      	cbz	r0, 800c380 <_printf_i+0x1bc>
 800c37c:	1b40      	subs	r0, r0, r5
 800c37e:	6060      	str	r0, [r4, #4]
 800c380:	6863      	ldr	r3, [r4, #4]
 800c382:	6123      	str	r3, [r4, #16]
 800c384:	2300      	movs	r3, #0
 800c386:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c38a:	e7a7      	b.n	800c2dc <_printf_i+0x118>
 800c38c:	6923      	ldr	r3, [r4, #16]
 800c38e:	462a      	mov	r2, r5
 800c390:	4639      	mov	r1, r7
 800c392:	4630      	mov	r0, r6
 800c394:	47c0      	blx	r8
 800c396:	3001      	adds	r0, #1
 800c398:	d0aa      	beq.n	800c2f0 <_printf_i+0x12c>
 800c39a:	6823      	ldr	r3, [r4, #0]
 800c39c:	079b      	lsls	r3, r3, #30
 800c39e:	d413      	bmi.n	800c3c8 <_printf_i+0x204>
 800c3a0:	68e0      	ldr	r0, [r4, #12]
 800c3a2:	9b03      	ldr	r3, [sp, #12]
 800c3a4:	4298      	cmp	r0, r3
 800c3a6:	bfb8      	it	lt
 800c3a8:	4618      	movlt	r0, r3
 800c3aa:	e7a3      	b.n	800c2f4 <_printf_i+0x130>
 800c3ac:	2301      	movs	r3, #1
 800c3ae:	464a      	mov	r2, r9
 800c3b0:	4639      	mov	r1, r7
 800c3b2:	4630      	mov	r0, r6
 800c3b4:	47c0      	blx	r8
 800c3b6:	3001      	adds	r0, #1
 800c3b8:	d09a      	beq.n	800c2f0 <_printf_i+0x12c>
 800c3ba:	3501      	adds	r5, #1
 800c3bc:	68e3      	ldr	r3, [r4, #12]
 800c3be:	9a03      	ldr	r2, [sp, #12]
 800c3c0:	1a9b      	subs	r3, r3, r2
 800c3c2:	42ab      	cmp	r3, r5
 800c3c4:	dcf2      	bgt.n	800c3ac <_printf_i+0x1e8>
 800c3c6:	e7eb      	b.n	800c3a0 <_printf_i+0x1dc>
 800c3c8:	2500      	movs	r5, #0
 800c3ca:	f104 0919 	add.w	r9, r4, #25
 800c3ce:	e7f5      	b.n	800c3bc <_printf_i+0x1f8>
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d1ac      	bne.n	800c32e <_printf_i+0x16a>
 800c3d4:	7803      	ldrb	r3, [r0, #0]
 800c3d6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c3da:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c3de:	e76c      	b.n	800c2ba <_printf_i+0xf6>
 800c3e0:	0800f65e 	.word	0x0800f65e
 800c3e4:	0800f66f 	.word	0x0800f66f

0800c3e8 <iprintf>:
 800c3e8:	b40f      	push	{r0, r1, r2, r3}
 800c3ea:	4b0a      	ldr	r3, [pc, #40]	; (800c414 <iprintf+0x2c>)
 800c3ec:	b513      	push	{r0, r1, r4, lr}
 800c3ee:	681c      	ldr	r4, [r3, #0]
 800c3f0:	b124      	cbz	r4, 800c3fc <iprintf+0x14>
 800c3f2:	69a3      	ldr	r3, [r4, #24]
 800c3f4:	b913      	cbnz	r3, 800c3fc <iprintf+0x14>
 800c3f6:	4620      	mov	r0, r4
 800c3f8:	f001 f866 	bl	800d4c8 <__sinit>
 800c3fc:	ab05      	add	r3, sp, #20
 800c3fe:	9a04      	ldr	r2, [sp, #16]
 800c400:	68a1      	ldr	r1, [r4, #8]
 800c402:	9301      	str	r3, [sp, #4]
 800c404:	4620      	mov	r0, r4
 800c406:	f001 fd29 	bl	800de5c <_vfiprintf_r>
 800c40a:	b002      	add	sp, #8
 800c40c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c410:	b004      	add	sp, #16
 800c412:	4770      	bx	lr
 800c414:	20000010 	.word	0x20000010

0800c418 <_puts_r>:
 800c418:	b570      	push	{r4, r5, r6, lr}
 800c41a:	460e      	mov	r6, r1
 800c41c:	4605      	mov	r5, r0
 800c41e:	b118      	cbz	r0, 800c428 <_puts_r+0x10>
 800c420:	6983      	ldr	r3, [r0, #24]
 800c422:	b90b      	cbnz	r3, 800c428 <_puts_r+0x10>
 800c424:	f001 f850 	bl	800d4c8 <__sinit>
 800c428:	69ab      	ldr	r3, [r5, #24]
 800c42a:	68ac      	ldr	r4, [r5, #8]
 800c42c:	b913      	cbnz	r3, 800c434 <_puts_r+0x1c>
 800c42e:	4628      	mov	r0, r5
 800c430:	f001 f84a 	bl	800d4c8 <__sinit>
 800c434:	4b23      	ldr	r3, [pc, #140]	; (800c4c4 <_puts_r+0xac>)
 800c436:	429c      	cmp	r4, r3
 800c438:	d117      	bne.n	800c46a <_puts_r+0x52>
 800c43a:	686c      	ldr	r4, [r5, #4]
 800c43c:	89a3      	ldrh	r3, [r4, #12]
 800c43e:	071b      	lsls	r3, r3, #28
 800c440:	d51d      	bpl.n	800c47e <_puts_r+0x66>
 800c442:	6923      	ldr	r3, [r4, #16]
 800c444:	b1db      	cbz	r3, 800c47e <_puts_r+0x66>
 800c446:	3e01      	subs	r6, #1
 800c448:	68a3      	ldr	r3, [r4, #8]
 800c44a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c44e:	3b01      	subs	r3, #1
 800c450:	60a3      	str	r3, [r4, #8]
 800c452:	b9e9      	cbnz	r1, 800c490 <_puts_r+0x78>
 800c454:	2b00      	cmp	r3, #0
 800c456:	da2e      	bge.n	800c4b6 <_puts_r+0x9e>
 800c458:	4622      	mov	r2, r4
 800c45a:	210a      	movs	r1, #10
 800c45c:	4628      	mov	r0, r5
 800c45e:	f000 f83f 	bl	800c4e0 <__swbuf_r>
 800c462:	3001      	adds	r0, #1
 800c464:	d011      	beq.n	800c48a <_puts_r+0x72>
 800c466:	200a      	movs	r0, #10
 800c468:	e011      	b.n	800c48e <_puts_r+0x76>
 800c46a:	4b17      	ldr	r3, [pc, #92]	; (800c4c8 <_puts_r+0xb0>)
 800c46c:	429c      	cmp	r4, r3
 800c46e:	d101      	bne.n	800c474 <_puts_r+0x5c>
 800c470:	68ac      	ldr	r4, [r5, #8]
 800c472:	e7e3      	b.n	800c43c <_puts_r+0x24>
 800c474:	4b15      	ldr	r3, [pc, #84]	; (800c4cc <_puts_r+0xb4>)
 800c476:	429c      	cmp	r4, r3
 800c478:	bf08      	it	eq
 800c47a:	68ec      	ldreq	r4, [r5, #12]
 800c47c:	e7de      	b.n	800c43c <_puts_r+0x24>
 800c47e:	4621      	mov	r1, r4
 800c480:	4628      	mov	r0, r5
 800c482:	f000 f87f 	bl	800c584 <__swsetup_r>
 800c486:	2800      	cmp	r0, #0
 800c488:	d0dd      	beq.n	800c446 <_puts_r+0x2e>
 800c48a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c48e:	bd70      	pop	{r4, r5, r6, pc}
 800c490:	2b00      	cmp	r3, #0
 800c492:	da04      	bge.n	800c49e <_puts_r+0x86>
 800c494:	69a2      	ldr	r2, [r4, #24]
 800c496:	429a      	cmp	r2, r3
 800c498:	dc06      	bgt.n	800c4a8 <_puts_r+0x90>
 800c49a:	290a      	cmp	r1, #10
 800c49c:	d004      	beq.n	800c4a8 <_puts_r+0x90>
 800c49e:	6823      	ldr	r3, [r4, #0]
 800c4a0:	1c5a      	adds	r2, r3, #1
 800c4a2:	6022      	str	r2, [r4, #0]
 800c4a4:	7019      	strb	r1, [r3, #0]
 800c4a6:	e7cf      	b.n	800c448 <_puts_r+0x30>
 800c4a8:	4622      	mov	r2, r4
 800c4aa:	4628      	mov	r0, r5
 800c4ac:	f000 f818 	bl	800c4e0 <__swbuf_r>
 800c4b0:	3001      	adds	r0, #1
 800c4b2:	d1c9      	bne.n	800c448 <_puts_r+0x30>
 800c4b4:	e7e9      	b.n	800c48a <_puts_r+0x72>
 800c4b6:	6823      	ldr	r3, [r4, #0]
 800c4b8:	200a      	movs	r0, #10
 800c4ba:	1c5a      	adds	r2, r3, #1
 800c4bc:	6022      	str	r2, [r4, #0]
 800c4be:	7018      	strb	r0, [r3, #0]
 800c4c0:	e7e5      	b.n	800c48e <_puts_r+0x76>
 800c4c2:	bf00      	nop
 800c4c4:	0800f6b0 	.word	0x0800f6b0
 800c4c8:	0800f6d0 	.word	0x0800f6d0
 800c4cc:	0800f690 	.word	0x0800f690

0800c4d0 <puts>:
 800c4d0:	4b02      	ldr	r3, [pc, #8]	; (800c4dc <puts+0xc>)
 800c4d2:	4601      	mov	r1, r0
 800c4d4:	6818      	ldr	r0, [r3, #0]
 800c4d6:	f7ff bf9f 	b.w	800c418 <_puts_r>
 800c4da:	bf00      	nop
 800c4dc:	20000010 	.word	0x20000010

0800c4e0 <__swbuf_r>:
 800c4e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4e2:	460e      	mov	r6, r1
 800c4e4:	4614      	mov	r4, r2
 800c4e6:	4605      	mov	r5, r0
 800c4e8:	b118      	cbz	r0, 800c4f2 <__swbuf_r+0x12>
 800c4ea:	6983      	ldr	r3, [r0, #24]
 800c4ec:	b90b      	cbnz	r3, 800c4f2 <__swbuf_r+0x12>
 800c4ee:	f000 ffeb 	bl	800d4c8 <__sinit>
 800c4f2:	4b21      	ldr	r3, [pc, #132]	; (800c578 <__swbuf_r+0x98>)
 800c4f4:	429c      	cmp	r4, r3
 800c4f6:	d12a      	bne.n	800c54e <__swbuf_r+0x6e>
 800c4f8:	686c      	ldr	r4, [r5, #4]
 800c4fa:	69a3      	ldr	r3, [r4, #24]
 800c4fc:	60a3      	str	r3, [r4, #8]
 800c4fe:	89a3      	ldrh	r3, [r4, #12]
 800c500:	071a      	lsls	r2, r3, #28
 800c502:	d52e      	bpl.n	800c562 <__swbuf_r+0x82>
 800c504:	6923      	ldr	r3, [r4, #16]
 800c506:	b363      	cbz	r3, 800c562 <__swbuf_r+0x82>
 800c508:	6923      	ldr	r3, [r4, #16]
 800c50a:	6820      	ldr	r0, [r4, #0]
 800c50c:	1ac0      	subs	r0, r0, r3
 800c50e:	6963      	ldr	r3, [r4, #20]
 800c510:	b2f6      	uxtb	r6, r6
 800c512:	4283      	cmp	r3, r0
 800c514:	4637      	mov	r7, r6
 800c516:	dc04      	bgt.n	800c522 <__swbuf_r+0x42>
 800c518:	4621      	mov	r1, r4
 800c51a:	4628      	mov	r0, r5
 800c51c:	f000 ff6a 	bl	800d3f4 <_fflush_r>
 800c520:	bb28      	cbnz	r0, 800c56e <__swbuf_r+0x8e>
 800c522:	68a3      	ldr	r3, [r4, #8]
 800c524:	3b01      	subs	r3, #1
 800c526:	60a3      	str	r3, [r4, #8]
 800c528:	6823      	ldr	r3, [r4, #0]
 800c52a:	1c5a      	adds	r2, r3, #1
 800c52c:	6022      	str	r2, [r4, #0]
 800c52e:	701e      	strb	r6, [r3, #0]
 800c530:	6963      	ldr	r3, [r4, #20]
 800c532:	3001      	adds	r0, #1
 800c534:	4283      	cmp	r3, r0
 800c536:	d004      	beq.n	800c542 <__swbuf_r+0x62>
 800c538:	89a3      	ldrh	r3, [r4, #12]
 800c53a:	07db      	lsls	r3, r3, #31
 800c53c:	d519      	bpl.n	800c572 <__swbuf_r+0x92>
 800c53e:	2e0a      	cmp	r6, #10
 800c540:	d117      	bne.n	800c572 <__swbuf_r+0x92>
 800c542:	4621      	mov	r1, r4
 800c544:	4628      	mov	r0, r5
 800c546:	f000 ff55 	bl	800d3f4 <_fflush_r>
 800c54a:	b190      	cbz	r0, 800c572 <__swbuf_r+0x92>
 800c54c:	e00f      	b.n	800c56e <__swbuf_r+0x8e>
 800c54e:	4b0b      	ldr	r3, [pc, #44]	; (800c57c <__swbuf_r+0x9c>)
 800c550:	429c      	cmp	r4, r3
 800c552:	d101      	bne.n	800c558 <__swbuf_r+0x78>
 800c554:	68ac      	ldr	r4, [r5, #8]
 800c556:	e7d0      	b.n	800c4fa <__swbuf_r+0x1a>
 800c558:	4b09      	ldr	r3, [pc, #36]	; (800c580 <__swbuf_r+0xa0>)
 800c55a:	429c      	cmp	r4, r3
 800c55c:	bf08      	it	eq
 800c55e:	68ec      	ldreq	r4, [r5, #12]
 800c560:	e7cb      	b.n	800c4fa <__swbuf_r+0x1a>
 800c562:	4621      	mov	r1, r4
 800c564:	4628      	mov	r0, r5
 800c566:	f000 f80d 	bl	800c584 <__swsetup_r>
 800c56a:	2800      	cmp	r0, #0
 800c56c:	d0cc      	beq.n	800c508 <__swbuf_r+0x28>
 800c56e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800c572:	4638      	mov	r0, r7
 800c574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c576:	bf00      	nop
 800c578:	0800f6b0 	.word	0x0800f6b0
 800c57c:	0800f6d0 	.word	0x0800f6d0
 800c580:	0800f690 	.word	0x0800f690

0800c584 <__swsetup_r>:
 800c584:	4b32      	ldr	r3, [pc, #200]	; (800c650 <__swsetup_r+0xcc>)
 800c586:	b570      	push	{r4, r5, r6, lr}
 800c588:	681d      	ldr	r5, [r3, #0]
 800c58a:	4606      	mov	r6, r0
 800c58c:	460c      	mov	r4, r1
 800c58e:	b125      	cbz	r5, 800c59a <__swsetup_r+0x16>
 800c590:	69ab      	ldr	r3, [r5, #24]
 800c592:	b913      	cbnz	r3, 800c59a <__swsetup_r+0x16>
 800c594:	4628      	mov	r0, r5
 800c596:	f000 ff97 	bl	800d4c8 <__sinit>
 800c59a:	4b2e      	ldr	r3, [pc, #184]	; (800c654 <__swsetup_r+0xd0>)
 800c59c:	429c      	cmp	r4, r3
 800c59e:	d10f      	bne.n	800c5c0 <__swsetup_r+0x3c>
 800c5a0:	686c      	ldr	r4, [r5, #4]
 800c5a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c5a6:	b29a      	uxth	r2, r3
 800c5a8:	0715      	lsls	r5, r2, #28
 800c5aa:	d42c      	bmi.n	800c606 <__swsetup_r+0x82>
 800c5ac:	06d0      	lsls	r0, r2, #27
 800c5ae:	d411      	bmi.n	800c5d4 <__swsetup_r+0x50>
 800c5b0:	2209      	movs	r2, #9
 800c5b2:	6032      	str	r2, [r6, #0]
 800c5b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c5b8:	81a3      	strh	r3, [r4, #12]
 800c5ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c5be:	e03e      	b.n	800c63e <__swsetup_r+0xba>
 800c5c0:	4b25      	ldr	r3, [pc, #148]	; (800c658 <__swsetup_r+0xd4>)
 800c5c2:	429c      	cmp	r4, r3
 800c5c4:	d101      	bne.n	800c5ca <__swsetup_r+0x46>
 800c5c6:	68ac      	ldr	r4, [r5, #8]
 800c5c8:	e7eb      	b.n	800c5a2 <__swsetup_r+0x1e>
 800c5ca:	4b24      	ldr	r3, [pc, #144]	; (800c65c <__swsetup_r+0xd8>)
 800c5cc:	429c      	cmp	r4, r3
 800c5ce:	bf08      	it	eq
 800c5d0:	68ec      	ldreq	r4, [r5, #12]
 800c5d2:	e7e6      	b.n	800c5a2 <__swsetup_r+0x1e>
 800c5d4:	0751      	lsls	r1, r2, #29
 800c5d6:	d512      	bpl.n	800c5fe <__swsetup_r+0x7a>
 800c5d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c5da:	b141      	cbz	r1, 800c5ee <__swsetup_r+0x6a>
 800c5dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c5e0:	4299      	cmp	r1, r3
 800c5e2:	d002      	beq.n	800c5ea <__swsetup_r+0x66>
 800c5e4:	4630      	mov	r0, r6
 800c5e6:	f001 fb67 	bl	800dcb8 <_free_r>
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	6363      	str	r3, [r4, #52]	; 0x34
 800c5ee:	89a3      	ldrh	r3, [r4, #12]
 800c5f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c5f4:	81a3      	strh	r3, [r4, #12]
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	6063      	str	r3, [r4, #4]
 800c5fa:	6923      	ldr	r3, [r4, #16]
 800c5fc:	6023      	str	r3, [r4, #0]
 800c5fe:	89a3      	ldrh	r3, [r4, #12]
 800c600:	f043 0308 	orr.w	r3, r3, #8
 800c604:	81a3      	strh	r3, [r4, #12]
 800c606:	6923      	ldr	r3, [r4, #16]
 800c608:	b94b      	cbnz	r3, 800c61e <__swsetup_r+0x9a>
 800c60a:	89a3      	ldrh	r3, [r4, #12]
 800c60c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c610:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c614:	d003      	beq.n	800c61e <__swsetup_r+0x9a>
 800c616:	4621      	mov	r1, r4
 800c618:	4630      	mov	r0, r6
 800c61a:	f001 f811 	bl	800d640 <__smakebuf_r>
 800c61e:	89a2      	ldrh	r2, [r4, #12]
 800c620:	f012 0301 	ands.w	r3, r2, #1
 800c624:	d00c      	beq.n	800c640 <__swsetup_r+0xbc>
 800c626:	2300      	movs	r3, #0
 800c628:	60a3      	str	r3, [r4, #8]
 800c62a:	6963      	ldr	r3, [r4, #20]
 800c62c:	425b      	negs	r3, r3
 800c62e:	61a3      	str	r3, [r4, #24]
 800c630:	6923      	ldr	r3, [r4, #16]
 800c632:	b953      	cbnz	r3, 800c64a <__swsetup_r+0xc6>
 800c634:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c638:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800c63c:	d1ba      	bne.n	800c5b4 <__swsetup_r+0x30>
 800c63e:	bd70      	pop	{r4, r5, r6, pc}
 800c640:	0792      	lsls	r2, r2, #30
 800c642:	bf58      	it	pl
 800c644:	6963      	ldrpl	r3, [r4, #20]
 800c646:	60a3      	str	r3, [r4, #8]
 800c648:	e7f2      	b.n	800c630 <__swsetup_r+0xac>
 800c64a:	2000      	movs	r0, #0
 800c64c:	e7f7      	b.n	800c63e <__swsetup_r+0xba>
 800c64e:	bf00      	nop
 800c650:	20000010 	.word	0x20000010
 800c654:	0800f6b0 	.word	0x0800f6b0
 800c658:	0800f6d0 	.word	0x0800f6d0
 800c65c:	0800f690 	.word	0x0800f690

0800c660 <quorem>:
 800c660:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c664:	6903      	ldr	r3, [r0, #16]
 800c666:	690c      	ldr	r4, [r1, #16]
 800c668:	42a3      	cmp	r3, r4
 800c66a:	4680      	mov	r8, r0
 800c66c:	f2c0 8082 	blt.w	800c774 <quorem+0x114>
 800c670:	3c01      	subs	r4, #1
 800c672:	f101 0714 	add.w	r7, r1, #20
 800c676:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800c67a:	f100 0614 	add.w	r6, r0, #20
 800c67e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800c682:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800c686:	eb06 030c 	add.w	r3, r6, ip
 800c68a:	3501      	adds	r5, #1
 800c68c:	eb07 090c 	add.w	r9, r7, ip
 800c690:	9301      	str	r3, [sp, #4]
 800c692:	fbb0 f5f5 	udiv	r5, r0, r5
 800c696:	b395      	cbz	r5, 800c6fe <quorem+0x9e>
 800c698:	f04f 0a00 	mov.w	sl, #0
 800c69c:	4638      	mov	r0, r7
 800c69e:	46b6      	mov	lr, r6
 800c6a0:	46d3      	mov	fp, sl
 800c6a2:	f850 2b04 	ldr.w	r2, [r0], #4
 800c6a6:	b293      	uxth	r3, r2
 800c6a8:	fb05 a303 	mla	r3, r5, r3, sl
 800c6ac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c6b0:	b29b      	uxth	r3, r3
 800c6b2:	ebab 0303 	sub.w	r3, fp, r3
 800c6b6:	0c12      	lsrs	r2, r2, #16
 800c6b8:	f8de b000 	ldr.w	fp, [lr]
 800c6bc:	fb05 a202 	mla	r2, r5, r2, sl
 800c6c0:	fa13 f38b 	uxtah	r3, r3, fp
 800c6c4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800c6c8:	fa1f fb82 	uxth.w	fp, r2
 800c6cc:	f8de 2000 	ldr.w	r2, [lr]
 800c6d0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800c6d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c6d8:	b29b      	uxth	r3, r3
 800c6da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c6de:	4581      	cmp	r9, r0
 800c6e0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800c6e4:	f84e 3b04 	str.w	r3, [lr], #4
 800c6e8:	d2db      	bcs.n	800c6a2 <quorem+0x42>
 800c6ea:	f856 300c 	ldr.w	r3, [r6, ip]
 800c6ee:	b933      	cbnz	r3, 800c6fe <quorem+0x9e>
 800c6f0:	9b01      	ldr	r3, [sp, #4]
 800c6f2:	3b04      	subs	r3, #4
 800c6f4:	429e      	cmp	r6, r3
 800c6f6:	461a      	mov	r2, r3
 800c6f8:	d330      	bcc.n	800c75c <quorem+0xfc>
 800c6fa:	f8c8 4010 	str.w	r4, [r8, #16]
 800c6fe:	4640      	mov	r0, r8
 800c700:	f001 fa06 	bl	800db10 <__mcmp>
 800c704:	2800      	cmp	r0, #0
 800c706:	db25      	blt.n	800c754 <quorem+0xf4>
 800c708:	3501      	adds	r5, #1
 800c70a:	4630      	mov	r0, r6
 800c70c:	f04f 0c00 	mov.w	ip, #0
 800c710:	f857 2b04 	ldr.w	r2, [r7], #4
 800c714:	f8d0 e000 	ldr.w	lr, [r0]
 800c718:	b293      	uxth	r3, r2
 800c71a:	ebac 0303 	sub.w	r3, ip, r3
 800c71e:	0c12      	lsrs	r2, r2, #16
 800c720:	fa13 f38e 	uxtah	r3, r3, lr
 800c724:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c728:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c72c:	b29b      	uxth	r3, r3
 800c72e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c732:	45b9      	cmp	r9, r7
 800c734:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c738:	f840 3b04 	str.w	r3, [r0], #4
 800c73c:	d2e8      	bcs.n	800c710 <quorem+0xb0>
 800c73e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800c742:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800c746:	b92a      	cbnz	r2, 800c754 <quorem+0xf4>
 800c748:	3b04      	subs	r3, #4
 800c74a:	429e      	cmp	r6, r3
 800c74c:	461a      	mov	r2, r3
 800c74e:	d30b      	bcc.n	800c768 <quorem+0x108>
 800c750:	f8c8 4010 	str.w	r4, [r8, #16]
 800c754:	4628      	mov	r0, r5
 800c756:	b003      	add	sp, #12
 800c758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c75c:	6812      	ldr	r2, [r2, #0]
 800c75e:	3b04      	subs	r3, #4
 800c760:	2a00      	cmp	r2, #0
 800c762:	d1ca      	bne.n	800c6fa <quorem+0x9a>
 800c764:	3c01      	subs	r4, #1
 800c766:	e7c5      	b.n	800c6f4 <quorem+0x94>
 800c768:	6812      	ldr	r2, [r2, #0]
 800c76a:	3b04      	subs	r3, #4
 800c76c:	2a00      	cmp	r2, #0
 800c76e:	d1ef      	bne.n	800c750 <quorem+0xf0>
 800c770:	3c01      	subs	r4, #1
 800c772:	e7ea      	b.n	800c74a <quorem+0xea>
 800c774:	2000      	movs	r0, #0
 800c776:	e7ee      	b.n	800c756 <quorem+0xf6>

0800c778 <_dtoa_r>:
 800c778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c77c:	ec57 6b10 	vmov	r6, r7, d0
 800c780:	b097      	sub	sp, #92	; 0x5c
 800c782:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c784:	9106      	str	r1, [sp, #24]
 800c786:	4604      	mov	r4, r0
 800c788:	920b      	str	r2, [sp, #44]	; 0x2c
 800c78a:	9312      	str	r3, [sp, #72]	; 0x48
 800c78c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c790:	e9cd 6700 	strd	r6, r7, [sp]
 800c794:	b93d      	cbnz	r5, 800c7a6 <_dtoa_r+0x2e>
 800c796:	2010      	movs	r0, #16
 800c798:	f000 ff92 	bl	800d6c0 <malloc>
 800c79c:	6260      	str	r0, [r4, #36]	; 0x24
 800c79e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c7a2:	6005      	str	r5, [r0, #0]
 800c7a4:	60c5      	str	r5, [r0, #12]
 800c7a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c7a8:	6819      	ldr	r1, [r3, #0]
 800c7aa:	b151      	cbz	r1, 800c7c2 <_dtoa_r+0x4a>
 800c7ac:	685a      	ldr	r2, [r3, #4]
 800c7ae:	604a      	str	r2, [r1, #4]
 800c7b0:	2301      	movs	r3, #1
 800c7b2:	4093      	lsls	r3, r2
 800c7b4:	608b      	str	r3, [r1, #8]
 800c7b6:	4620      	mov	r0, r4
 800c7b8:	f000 ffc9 	bl	800d74e <_Bfree>
 800c7bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c7be:	2200      	movs	r2, #0
 800c7c0:	601a      	str	r2, [r3, #0]
 800c7c2:	1e3b      	subs	r3, r7, #0
 800c7c4:	bfbb      	ittet	lt
 800c7c6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c7ca:	9301      	strlt	r3, [sp, #4]
 800c7cc:	2300      	movge	r3, #0
 800c7ce:	2201      	movlt	r2, #1
 800c7d0:	bfac      	ite	ge
 800c7d2:	f8c8 3000 	strge.w	r3, [r8]
 800c7d6:	f8c8 2000 	strlt.w	r2, [r8]
 800c7da:	4baf      	ldr	r3, [pc, #700]	; (800ca98 <_dtoa_r+0x320>)
 800c7dc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c7e0:	ea33 0308 	bics.w	r3, r3, r8
 800c7e4:	d114      	bne.n	800c810 <_dtoa_r+0x98>
 800c7e6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c7e8:	f242 730f 	movw	r3, #9999	; 0x270f
 800c7ec:	6013      	str	r3, [r2, #0]
 800c7ee:	9b00      	ldr	r3, [sp, #0]
 800c7f0:	b923      	cbnz	r3, 800c7fc <_dtoa_r+0x84>
 800c7f2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800c7f6:	2800      	cmp	r0, #0
 800c7f8:	f000 8542 	beq.w	800d280 <_dtoa_r+0xb08>
 800c7fc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c7fe:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800caac <_dtoa_r+0x334>
 800c802:	2b00      	cmp	r3, #0
 800c804:	f000 8544 	beq.w	800d290 <_dtoa_r+0xb18>
 800c808:	f10b 0303 	add.w	r3, fp, #3
 800c80c:	f000 bd3e 	b.w	800d28c <_dtoa_r+0xb14>
 800c810:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c814:	2200      	movs	r2, #0
 800c816:	2300      	movs	r3, #0
 800c818:	4630      	mov	r0, r6
 800c81a:	4639      	mov	r1, r7
 800c81c:	f7f4 f954 	bl	8000ac8 <__aeabi_dcmpeq>
 800c820:	4681      	mov	r9, r0
 800c822:	b168      	cbz	r0, 800c840 <_dtoa_r+0xc8>
 800c824:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c826:	2301      	movs	r3, #1
 800c828:	6013      	str	r3, [r2, #0]
 800c82a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	f000 8524 	beq.w	800d27a <_dtoa_r+0xb02>
 800c832:	4b9a      	ldr	r3, [pc, #616]	; (800ca9c <_dtoa_r+0x324>)
 800c834:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c836:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800c83a:	6013      	str	r3, [r2, #0]
 800c83c:	f000 bd28 	b.w	800d290 <_dtoa_r+0xb18>
 800c840:	aa14      	add	r2, sp, #80	; 0x50
 800c842:	a915      	add	r1, sp, #84	; 0x54
 800c844:	ec47 6b10 	vmov	d0, r6, r7
 800c848:	4620      	mov	r0, r4
 800c84a:	f001 f9d8 	bl	800dbfe <__d2b>
 800c84e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800c852:	9004      	str	r0, [sp, #16]
 800c854:	2d00      	cmp	r5, #0
 800c856:	d07c      	beq.n	800c952 <_dtoa_r+0x1da>
 800c858:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c85c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800c860:	46b2      	mov	sl, r6
 800c862:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800c866:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c86a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800c86e:	2200      	movs	r2, #0
 800c870:	4b8b      	ldr	r3, [pc, #556]	; (800caa0 <_dtoa_r+0x328>)
 800c872:	4650      	mov	r0, sl
 800c874:	4659      	mov	r1, fp
 800c876:	f7f3 fd07 	bl	8000288 <__aeabi_dsub>
 800c87a:	a381      	add	r3, pc, #516	; (adr r3, 800ca80 <_dtoa_r+0x308>)
 800c87c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c880:	f7f3 feba 	bl	80005f8 <__aeabi_dmul>
 800c884:	a380      	add	r3, pc, #512	; (adr r3, 800ca88 <_dtoa_r+0x310>)
 800c886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c88a:	f7f3 fcff 	bl	800028c <__adddf3>
 800c88e:	4606      	mov	r6, r0
 800c890:	4628      	mov	r0, r5
 800c892:	460f      	mov	r7, r1
 800c894:	f7f3 fe46 	bl	8000524 <__aeabi_i2d>
 800c898:	a37d      	add	r3, pc, #500	; (adr r3, 800ca90 <_dtoa_r+0x318>)
 800c89a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c89e:	f7f3 feab 	bl	80005f8 <__aeabi_dmul>
 800c8a2:	4602      	mov	r2, r0
 800c8a4:	460b      	mov	r3, r1
 800c8a6:	4630      	mov	r0, r6
 800c8a8:	4639      	mov	r1, r7
 800c8aa:	f7f3 fcef 	bl	800028c <__adddf3>
 800c8ae:	4606      	mov	r6, r0
 800c8b0:	460f      	mov	r7, r1
 800c8b2:	f7f4 f951 	bl	8000b58 <__aeabi_d2iz>
 800c8b6:	2200      	movs	r2, #0
 800c8b8:	4682      	mov	sl, r0
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	4630      	mov	r0, r6
 800c8be:	4639      	mov	r1, r7
 800c8c0:	f7f4 f90c 	bl	8000adc <__aeabi_dcmplt>
 800c8c4:	b148      	cbz	r0, 800c8da <_dtoa_r+0x162>
 800c8c6:	4650      	mov	r0, sl
 800c8c8:	f7f3 fe2c 	bl	8000524 <__aeabi_i2d>
 800c8cc:	4632      	mov	r2, r6
 800c8ce:	463b      	mov	r3, r7
 800c8d0:	f7f4 f8fa 	bl	8000ac8 <__aeabi_dcmpeq>
 800c8d4:	b908      	cbnz	r0, 800c8da <_dtoa_r+0x162>
 800c8d6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800c8da:	f1ba 0f16 	cmp.w	sl, #22
 800c8de:	d859      	bhi.n	800c994 <_dtoa_r+0x21c>
 800c8e0:	4970      	ldr	r1, [pc, #448]	; (800caa4 <_dtoa_r+0x32c>)
 800c8e2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800c8e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c8ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c8ee:	f7f4 f913 	bl	8000b18 <__aeabi_dcmpgt>
 800c8f2:	2800      	cmp	r0, #0
 800c8f4:	d050      	beq.n	800c998 <_dtoa_r+0x220>
 800c8f6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	930f      	str	r3, [sp, #60]	; 0x3c
 800c8fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c900:	1b5d      	subs	r5, r3, r5
 800c902:	f1b5 0801 	subs.w	r8, r5, #1
 800c906:	bf49      	itett	mi
 800c908:	f1c5 0301 	rsbmi	r3, r5, #1
 800c90c:	2300      	movpl	r3, #0
 800c90e:	9305      	strmi	r3, [sp, #20]
 800c910:	f04f 0800 	movmi.w	r8, #0
 800c914:	bf58      	it	pl
 800c916:	9305      	strpl	r3, [sp, #20]
 800c918:	f1ba 0f00 	cmp.w	sl, #0
 800c91c:	db3e      	blt.n	800c99c <_dtoa_r+0x224>
 800c91e:	2300      	movs	r3, #0
 800c920:	44d0      	add	r8, sl
 800c922:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800c926:	9307      	str	r3, [sp, #28]
 800c928:	9b06      	ldr	r3, [sp, #24]
 800c92a:	2b09      	cmp	r3, #9
 800c92c:	f200 8090 	bhi.w	800ca50 <_dtoa_r+0x2d8>
 800c930:	2b05      	cmp	r3, #5
 800c932:	bfc4      	itt	gt
 800c934:	3b04      	subgt	r3, #4
 800c936:	9306      	strgt	r3, [sp, #24]
 800c938:	9b06      	ldr	r3, [sp, #24]
 800c93a:	f1a3 0302 	sub.w	r3, r3, #2
 800c93e:	bfcc      	ite	gt
 800c940:	2500      	movgt	r5, #0
 800c942:	2501      	movle	r5, #1
 800c944:	2b03      	cmp	r3, #3
 800c946:	f200 808f 	bhi.w	800ca68 <_dtoa_r+0x2f0>
 800c94a:	e8df f003 	tbb	[pc, r3]
 800c94e:	7f7d      	.short	0x7f7d
 800c950:	7131      	.short	0x7131
 800c952:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800c956:	441d      	add	r5, r3
 800c958:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800c95c:	2820      	cmp	r0, #32
 800c95e:	dd13      	ble.n	800c988 <_dtoa_r+0x210>
 800c960:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800c964:	9b00      	ldr	r3, [sp, #0]
 800c966:	fa08 f800 	lsl.w	r8, r8, r0
 800c96a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800c96e:	fa23 f000 	lsr.w	r0, r3, r0
 800c972:	ea48 0000 	orr.w	r0, r8, r0
 800c976:	f7f3 fdc5 	bl	8000504 <__aeabi_ui2d>
 800c97a:	2301      	movs	r3, #1
 800c97c:	4682      	mov	sl, r0
 800c97e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800c982:	3d01      	subs	r5, #1
 800c984:	9313      	str	r3, [sp, #76]	; 0x4c
 800c986:	e772      	b.n	800c86e <_dtoa_r+0xf6>
 800c988:	9b00      	ldr	r3, [sp, #0]
 800c98a:	f1c0 0020 	rsb	r0, r0, #32
 800c98e:	fa03 f000 	lsl.w	r0, r3, r0
 800c992:	e7f0      	b.n	800c976 <_dtoa_r+0x1fe>
 800c994:	2301      	movs	r3, #1
 800c996:	e7b1      	b.n	800c8fc <_dtoa_r+0x184>
 800c998:	900f      	str	r0, [sp, #60]	; 0x3c
 800c99a:	e7b0      	b.n	800c8fe <_dtoa_r+0x186>
 800c99c:	9b05      	ldr	r3, [sp, #20]
 800c99e:	eba3 030a 	sub.w	r3, r3, sl
 800c9a2:	9305      	str	r3, [sp, #20]
 800c9a4:	f1ca 0300 	rsb	r3, sl, #0
 800c9a8:	9307      	str	r3, [sp, #28]
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	930e      	str	r3, [sp, #56]	; 0x38
 800c9ae:	e7bb      	b.n	800c928 <_dtoa_r+0x1b0>
 800c9b0:	2301      	movs	r3, #1
 800c9b2:	930a      	str	r3, [sp, #40]	; 0x28
 800c9b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	dd59      	ble.n	800ca6e <_dtoa_r+0x2f6>
 800c9ba:	9302      	str	r3, [sp, #8]
 800c9bc:	4699      	mov	r9, r3
 800c9be:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c9c0:	2200      	movs	r2, #0
 800c9c2:	6072      	str	r2, [r6, #4]
 800c9c4:	2204      	movs	r2, #4
 800c9c6:	f102 0014 	add.w	r0, r2, #20
 800c9ca:	4298      	cmp	r0, r3
 800c9cc:	6871      	ldr	r1, [r6, #4]
 800c9ce:	d953      	bls.n	800ca78 <_dtoa_r+0x300>
 800c9d0:	4620      	mov	r0, r4
 800c9d2:	f000 fe88 	bl	800d6e6 <_Balloc>
 800c9d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c9d8:	6030      	str	r0, [r6, #0]
 800c9da:	f1b9 0f0e 	cmp.w	r9, #14
 800c9de:	f8d3 b000 	ldr.w	fp, [r3]
 800c9e2:	f200 80e6 	bhi.w	800cbb2 <_dtoa_r+0x43a>
 800c9e6:	2d00      	cmp	r5, #0
 800c9e8:	f000 80e3 	beq.w	800cbb2 <_dtoa_r+0x43a>
 800c9ec:	ed9d 7b00 	vldr	d7, [sp]
 800c9f0:	f1ba 0f00 	cmp.w	sl, #0
 800c9f4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800c9f8:	dd74      	ble.n	800cae4 <_dtoa_r+0x36c>
 800c9fa:	4a2a      	ldr	r2, [pc, #168]	; (800caa4 <_dtoa_r+0x32c>)
 800c9fc:	f00a 030f 	and.w	r3, sl, #15
 800ca00:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ca04:	ed93 7b00 	vldr	d7, [r3]
 800ca08:	ea4f 162a 	mov.w	r6, sl, asr #4
 800ca0c:	06f0      	lsls	r0, r6, #27
 800ca0e:	ed8d 7b08 	vstr	d7, [sp, #32]
 800ca12:	d565      	bpl.n	800cae0 <_dtoa_r+0x368>
 800ca14:	4b24      	ldr	r3, [pc, #144]	; (800caa8 <_dtoa_r+0x330>)
 800ca16:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ca1a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ca1e:	f7f3 ff15 	bl	800084c <__aeabi_ddiv>
 800ca22:	e9cd 0100 	strd	r0, r1, [sp]
 800ca26:	f006 060f 	and.w	r6, r6, #15
 800ca2a:	2503      	movs	r5, #3
 800ca2c:	4f1e      	ldr	r7, [pc, #120]	; (800caa8 <_dtoa_r+0x330>)
 800ca2e:	e04c      	b.n	800caca <_dtoa_r+0x352>
 800ca30:	2301      	movs	r3, #1
 800ca32:	930a      	str	r3, [sp, #40]	; 0x28
 800ca34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ca36:	4453      	add	r3, sl
 800ca38:	f103 0901 	add.w	r9, r3, #1
 800ca3c:	9302      	str	r3, [sp, #8]
 800ca3e:	464b      	mov	r3, r9
 800ca40:	2b01      	cmp	r3, #1
 800ca42:	bfb8      	it	lt
 800ca44:	2301      	movlt	r3, #1
 800ca46:	e7ba      	b.n	800c9be <_dtoa_r+0x246>
 800ca48:	2300      	movs	r3, #0
 800ca4a:	e7b2      	b.n	800c9b2 <_dtoa_r+0x23a>
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	e7f0      	b.n	800ca32 <_dtoa_r+0x2ba>
 800ca50:	2501      	movs	r5, #1
 800ca52:	2300      	movs	r3, #0
 800ca54:	9306      	str	r3, [sp, #24]
 800ca56:	950a      	str	r5, [sp, #40]	; 0x28
 800ca58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ca5c:	9302      	str	r3, [sp, #8]
 800ca5e:	4699      	mov	r9, r3
 800ca60:	2200      	movs	r2, #0
 800ca62:	2312      	movs	r3, #18
 800ca64:	920b      	str	r2, [sp, #44]	; 0x2c
 800ca66:	e7aa      	b.n	800c9be <_dtoa_r+0x246>
 800ca68:	2301      	movs	r3, #1
 800ca6a:	930a      	str	r3, [sp, #40]	; 0x28
 800ca6c:	e7f4      	b.n	800ca58 <_dtoa_r+0x2e0>
 800ca6e:	2301      	movs	r3, #1
 800ca70:	9302      	str	r3, [sp, #8]
 800ca72:	4699      	mov	r9, r3
 800ca74:	461a      	mov	r2, r3
 800ca76:	e7f5      	b.n	800ca64 <_dtoa_r+0x2ec>
 800ca78:	3101      	adds	r1, #1
 800ca7a:	6071      	str	r1, [r6, #4]
 800ca7c:	0052      	lsls	r2, r2, #1
 800ca7e:	e7a2      	b.n	800c9c6 <_dtoa_r+0x24e>
 800ca80:	636f4361 	.word	0x636f4361
 800ca84:	3fd287a7 	.word	0x3fd287a7
 800ca88:	8b60c8b3 	.word	0x8b60c8b3
 800ca8c:	3fc68a28 	.word	0x3fc68a28
 800ca90:	509f79fb 	.word	0x509f79fb
 800ca94:	3fd34413 	.word	0x3fd34413
 800ca98:	7ff00000 	.word	0x7ff00000
 800ca9c:	0800f65d 	.word	0x0800f65d
 800caa0:	3ff80000 	.word	0x3ff80000
 800caa4:	0800f718 	.word	0x0800f718
 800caa8:	0800f6f0 	.word	0x0800f6f0
 800caac:	0800f689 	.word	0x0800f689
 800cab0:	07f1      	lsls	r1, r6, #31
 800cab2:	d508      	bpl.n	800cac6 <_dtoa_r+0x34e>
 800cab4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cab8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cabc:	f7f3 fd9c 	bl	80005f8 <__aeabi_dmul>
 800cac0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800cac4:	3501      	adds	r5, #1
 800cac6:	1076      	asrs	r6, r6, #1
 800cac8:	3708      	adds	r7, #8
 800caca:	2e00      	cmp	r6, #0
 800cacc:	d1f0      	bne.n	800cab0 <_dtoa_r+0x338>
 800cace:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800cad2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cad6:	f7f3 feb9 	bl	800084c <__aeabi_ddiv>
 800cada:	e9cd 0100 	strd	r0, r1, [sp]
 800cade:	e01a      	b.n	800cb16 <_dtoa_r+0x39e>
 800cae0:	2502      	movs	r5, #2
 800cae2:	e7a3      	b.n	800ca2c <_dtoa_r+0x2b4>
 800cae4:	f000 80a0 	beq.w	800cc28 <_dtoa_r+0x4b0>
 800cae8:	f1ca 0600 	rsb	r6, sl, #0
 800caec:	4b9f      	ldr	r3, [pc, #636]	; (800cd6c <_dtoa_r+0x5f4>)
 800caee:	4fa0      	ldr	r7, [pc, #640]	; (800cd70 <_dtoa_r+0x5f8>)
 800caf0:	f006 020f 	and.w	r2, r6, #15
 800caf4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800caf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cafc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800cb00:	f7f3 fd7a 	bl	80005f8 <__aeabi_dmul>
 800cb04:	e9cd 0100 	strd	r0, r1, [sp]
 800cb08:	1136      	asrs	r6, r6, #4
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	2502      	movs	r5, #2
 800cb0e:	2e00      	cmp	r6, #0
 800cb10:	d17f      	bne.n	800cc12 <_dtoa_r+0x49a>
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d1e1      	bne.n	800cada <_dtoa_r+0x362>
 800cb16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	f000 8087 	beq.w	800cc2c <_dtoa_r+0x4b4>
 800cb1e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800cb22:	2200      	movs	r2, #0
 800cb24:	4b93      	ldr	r3, [pc, #588]	; (800cd74 <_dtoa_r+0x5fc>)
 800cb26:	4630      	mov	r0, r6
 800cb28:	4639      	mov	r1, r7
 800cb2a:	f7f3 ffd7 	bl	8000adc <__aeabi_dcmplt>
 800cb2e:	2800      	cmp	r0, #0
 800cb30:	d07c      	beq.n	800cc2c <_dtoa_r+0x4b4>
 800cb32:	f1b9 0f00 	cmp.w	r9, #0
 800cb36:	d079      	beq.n	800cc2c <_dtoa_r+0x4b4>
 800cb38:	9b02      	ldr	r3, [sp, #8]
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	dd35      	ble.n	800cbaa <_dtoa_r+0x432>
 800cb3e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800cb42:	9308      	str	r3, [sp, #32]
 800cb44:	4639      	mov	r1, r7
 800cb46:	2200      	movs	r2, #0
 800cb48:	4b8b      	ldr	r3, [pc, #556]	; (800cd78 <_dtoa_r+0x600>)
 800cb4a:	4630      	mov	r0, r6
 800cb4c:	f7f3 fd54 	bl	80005f8 <__aeabi_dmul>
 800cb50:	e9cd 0100 	strd	r0, r1, [sp]
 800cb54:	9f02      	ldr	r7, [sp, #8]
 800cb56:	3501      	adds	r5, #1
 800cb58:	4628      	mov	r0, r5
 800cb5a:	f7f3 fce3 	bl	8000524 <__aeabi_i2d>
 800cb5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cb62:	f7f3 fd49 	bl	80005f8 <__aeabi_dmul>
 800cb66:	2200      	movs	r2, #0
 800cb68:	4b84      	ldr	r3, [pc, #528]	; (800cd7c <_dtoa_r+0x604>)
 800cb6a:	f7f3 fb8f 	bl	800028c <__adddf3>
 800cb6e:	4605      	mov	r5, r0
 800cb70:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800cb74:	2f00      	cmp	r7, #0
 800cb76:	d15d      	bne.n	800cc34 <_dtoa_r+0x4bc>
 800cb78:	2200      	movs	r2, #0
 800cb7a:	4b81      	ldr	r3, [pc, #516]	; (800cd80 <_dtoa_r+0x608>)
 800cb7c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cb80:	f7f3 fb82 	bl	8000288 <__aeabi_dsub>
 800cb84:	462a      	mov	r2, r5
 800cb86:	4633      	mov	r3, r6
 800cb88:	e9cd 0100 	strd	r0, r1, [sp]
 800cb8c:	f7f3 ffc4 	bl	8000b18 <__aeabi_dcmpgt>
 800cb90:	2800      	cmp	r0, #0
 800cb92:	f040 8288 	bne.w	800d0a6 <_dtoa_r+0x92e>
 800cb96:	462a      	mov	r2, r5
 800cb98:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800cb9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cba0:	f7f3 ff9c 	bl	8000adc <__aeabi_dcmplt>
 800cba4:	2800      	cmp	r0, #0
 800cba6:	f040 827c 	bne.w	800d0a2 <_dtoa_r+0x92a>
 800cbaa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800cbae:	e9cd 2300 	strd	r2, r3, [sp]
 800cbb2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	f2c0 8150 	blt.w	800ce5a <_dtoa_r+0x6e2>
 800cbba:	f1ba 0f0e 	cmp.w	sl, #14
 800cbbe:	f300 814c 	bgt.w	800ce5a <_dtoa_r+0x6e2>
 800cbc2:	4b6a      	ldr	r3, [pc, #424]	; (800cd6c <_dtoa_r+0x5f4>)
 800cbc4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800cbc8:	ed93 7b00 	vldr	d7, [r3]
 800cbcc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cbd4:	f280 80d8 	bge.w	800cd88 <_dtoa_r+0x610>
 800cbd8:	f1b9 0f00 	cmp.w	r9, #0
 800cbdc:	f300 80d4 	bgt.w	800cd88 <_dtoa_r+0x610>
 800cbe0:	f040 825e 	bne.w	800d0a0 <_dtoa_r+0x928>
 800cbe4:	2200      	movs	r2, #0
 800cbe6:	4b66      	ldr	r3, [pc, #408]	; (800cd80 <_dtoa_r+0x608>)
 800cbe8:	ec51 0b17 	vmov	r0, r1, d7
 800cbec:	f7f3 fd04 	bl	80005f8 <__aeabi_dmul>
 800cbf0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cbf4:	f7f3 ff86 	bl	8000b04 <__aeabi_dcmpge>
 800cbf8:	464f      	mov	r7, r9
 800cbfa:	464e      	mov	r6, r9
 800cbfc:	2800      	cmp	r0, #0
 800cbfe:	f040 8234 	bne.w	800d06a <_dtoa_r+0x8f2>
 800cc02:	2331      	movs	r3, #49	; 0x31
 800cc04:	f10b 0501 	add.w	r5, fp, #1
 800cc08:	f88b 3000 	strb.w	r3, [fp]
 800cc0c:	f10a 0a01 	add.w	sl, sl, #1
 800cc10:	e22f      	b.n	800d072 <_dtoa_r+0x8fa>
 800cc12:	07f2      	lsls	r2, r6, #31
 800cc14:	d505      	bpl.n	800cc22 <_dtoa_r+0x4aa>
 800cc16:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc1a:	f7f3 fced 	bl	80005f8 <__aeabi_dmul>
 800cc1e:	3501      	adds	r5, #1
 800cc20:	2301      	movs	r3, #1
 800cc22:	1076      	asrs	r6, r6, #1
 800cc24:	3708      	adds	r7, #8
 800cc26:	e772      	b.n	800cb0e <_dtoa_r+0x396>
 800cc28:	2502      	movs	r5, #2
 800cc2a:	e774      	b.n	800cb16 <_dtoa_r+0x39e>
 800cc2c:	f8cd a020 	str.w	sl, [sp, #32]
 800cc30:	464f      	mov	r7, r9
 800cc32:	e791      	b.n	800cb58 <_dtoa_r+0x3e0>
 800cc34:	4b4d      	ldr	r3, [pc, #308]	; (800cd6c <_dtoa_r+0x5f4>)
 800cc36:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cc3a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800cc3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d047      	beq.n	800ccd4 <_dtoa_r+0x55c>
 800cc44:	4602      	mov	r2, r0
 800cc46:	460b      	mov	r3, r1
 800cc48:	2000      	movs	r0, #0
 800cc4a:	494e      	ldr	r1, [pc, #312]	; (800cd84 <_dtoa_r+0x60c>)
 800cc4c:	f7f3 fdfe 	bl	800084c <__aeabi_ddiv>
 800cc50:	462a      	mov	r2, r5
 800cc52:	4633      	mov	r3, r6
 800cc54:	f7f3 fb18 	bl	8000288 <__aeabi_dsub>
 800cc58:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800cc5c:	465d      	mov	r5, fp
 800cc5e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cc62:	f7f3 ff79 	bl	8000b58 <__aeabi_d2iz>
 800cc66:	4606      	mov	r6, r0
 800cc68:	f7f3 fc5c 	bl	8000524 <__aeabi_i2d>
 800cc6c:	4602      	mov	r2, r0
 800cc6e:	460b      	mov	r3, r1
 800cc70:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cc74:	f7f3 fb08 	bl	8000288 <__aeabi_dsub>
 800cc78:	3630      	adds	r6, #48	; 0x30
 800cc7a:	f805 6b01 	strb.w	r6, [r5], #1
 800cc7e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800cc82:	e9cd 0100 	strd	r0, r1, [sp]
 800cc86:	f7f3 ff29 	bl	8000adc <__aeabi_dcmplt>
 800cc8a:	2800      	cmp	r0, #0
 800cc8c:	d163      	bne.n	800cd56 <_dtoa_r+0x5de>
 800cc8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cc92:	2000      	movs	r0, #0
 800cc94:	4937      	ldr	r1, [pc, #220]	; (800cd74 <_dtoa_r+0x5fc>)
 800cc96:	f7f3 faf7 	bl	8000288 <__aeabi_dsub>
 800cc9a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800cc9e:	f7f3 ff1d 	bl	8000adc <__aeabi_dcmplt>
 800cca2:	2800      	cmp	r0, #0
 800cca4:	f040 80b7 	bne.w	800ce16 <_dtoa_r+0x69e>
 800cca8:	eba5 030b 	sub.w	r3, r5, fp
 800ccac:	429f      	cmp	r7, r3
 800ccae:	f77f af7c 	ble.w	800cbaa <_dtoa_r+0x432>
 800ccb2:	2200      	movs	r2, #0
 800ccb4:	4b30      	ldr	r3, [pc, #192]	; (800cd78 <_dtoa_r+0x600>)
 800ccb6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ccba:	f7f3 fc9d 	bl	80005f8 <__aeabi_dmul>
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ccc4:	4b2c      	ldr	r3, [pc, #176]	; (800cd78 <_dtoa_r+0x600>)
 800ccc6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ccca:	f7f3 fc95 	bl	80005f8 <__aeabi_dmul>
 800ccce:	e9cd 0100 	strd	r0, r1, [sp]
 800ccd2:	e7c4      	b.n	800cc5e <_dtoa_r+0x4e6>
 800ccd4:	462a      	mov	r2, r5
 800ccd6:	4633      	mov	r3, r6
 800ccd8:	f7f3 fc8e 	bl	80005f8 <__aeabi_dmul>
 800ccdc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800cce0:	eb0b 0507 	add.w	r5, fp, r7
 800cce4:	465e      	mov	r6, fp
 800cce6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ccea:	f7f3 ff35 	bl	8000b58 <__aeabi_d2iz>
 800ccee:	4607      	mov	r7, r0
 800ccf0:	f7f3 fc18 	bl	8000524 <__aeabi_i2d>
 800ccf4:	3730      	adds	r7, #48	; 0x30
 800ccf6:	4602      	mov	r2, r0
 800ccf8:	460b      	mov	r3, r1
 800ccfa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ccfe:	f7f3 fac3 	bl	8000288 <__aeabi_dsub>
 800cd02:	f806 7b01 	strb.w	r7, [r6], #1
 800cd06:	42ae      	cmp	r6, r5
 800cd08:	e9cd 0100 	strd	r0, r1, [sp]
 800cd0c:	f04f 0200 	mov.w	r2, #0
 800cd10:	d126      	bne.n	800cd60 <_dtoa_r+0x5e8>
 800cd12:	4b1c      	ldr	r3, [pc, #112]	; (800cd84 <_dtoa_r+0x60c>)
 800cd14:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cd18:	f7f3 fab8 	bl	800028c <__adddf3>
 800cd1c:	4602      	mov	r2, r0
 800cd1e:	460b      	mov	r3, r1
 800cd20:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cd24:	f7f3 fef8 	bl	8000b18 <__aeabi_dcmpgt>
 800cd28:	2800      	cmp	r0, #0
 800cd2a:	d174      	bne.n	800ce16 <_dtoa_r+0x69e>
 800cd2c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800cd30:	2000      	movs	r0, #0
 800cd32:	4914      	ldr	r1, [pc, #80]	; (800cd84 <_dtoa_r+0x60c>)
 800cd34:	f7f3 faa8 	bl	8000288 <__aeabi_dsub>
 800cd38:	4602      	mov	r2, r0
 800cd3a:	460b      	mov	r3, r1
 800cd3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cd40:	f7f3 fecc 	bl	8000adc <__aeabi_dcmplt>
 800cd44:	2800      	cmp	r0, #0
 800cd46:	f43f af30 	beq.w	800cbaa <_dtoa_r+0x432>
 800cd4a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cd4e:	2b30      	cmp	r3, #48	; 0x30
 800cd50:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800cd54:	d002      	beq.n	800cd5c <_dtoa_r+0x5e4>
 800cd56:	f8dd a020 	ldr.w	sl, [sp, #32]
 800cd5a:	e04a      	b.n	800cdf2 <_dtoa_r+0x67a>
 800cd5c:	4615      	mov	r5, r2
 800cd5e:	e7f4      	b.n	800cd4a <_dtoa_r+0x5d2>
 800cd60:	4b05      	ldr	r3, [pc, #20]	; (800cd78 <_dtoa_r+0x600>)
 800cd62:	f7f3 fc49 	bl	80005f8 <__aeabi_dmul>
 800cd66:	e9cd 0100 	strd	r0, r1, [sp]
 800cd6a:	e7bc      	b.n	800cce6 <_dtoa_r+0x56e>
 800cd6c:	0800f718 	.word	0x0800f718
 800cd70:	0800f6f0 	.word	0x0800f6f0
 800cd74:	3ff00000 	.word	0x3ff00000
 800cd78:	40240000 	.word	0x40240000
 800cd7c:	401c0000 	.word	0x401c0000
 800cd80:	40140000 	.word	0x40140000
 800cd84:	3fe00000 	.word	0x3fe00000
 800cd88:	e9dd 6700 	ldrd	r6, r7, [sp]
 800cd8c:	465d      	mov	r5, fp
 800cd8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cd92:	4630      	mov	r0, r6
 800cd94:	4639      	mov	r1, r7
 800cd96:	f7f3 fd59 	bl	800084c <__aeabi_ddiv>
 800cd9a:	f7f3 fedd 	bl	8000b58 <__aeabi_d2iz>
 800cd9e:	4680      	mov	r8, r0
 800cda0:	f7f3 fbc0 	bl	8000524 <__aeabi_i2d>
 800cda4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cda8:	f7f3 fc26 	bl	80005f8 <__aeabi_dmul>
 800cdac:	4602      	mov	r2, r0
 800cdae:	460b      	mov	r3, r1
 800cdb0:	4630      	mov	r0, r6
 800cdb2:	4639      	mov	r1, r7
 800cdb4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800cdb8:	f7f3 fa66 	bl	8000288 <__aeabi_dsub>
 800cdbc:	f805 6b01 	strb.w	r6, [r5], #1
 800cdc0:	eba5 060b 	sub.w	r6, r5, fp
 800cdc4:	45b1      	cmp	r9, r6
 800cdc6:	4602      	mov	r2, r0
 800cdc8:	460b      	mov	r3, r1
 800cdca:	d139      	bne.n	800ce40 <_dtoa_r+0x6c8>
 800cdcc:	f7f3 fa5e 	bl	800028c <__adddf3>
 800cdd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cdd4:	4606      	mov	r6, r0
 800cdd6:	460f      	mov	r7, r1
 800cdd8:	f7f3 fe9e 	bl	8000b18 <__aeabi_dcmpgt>
 800cddc:	b9c8      	cbnz	r0, 800ce12 <_dtoa_r+0x69a>
 800cdde:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cde2:	4630      	mov	r0, r6
 800cde4:	4639      	mov	r1, r7
 800cde6:	f7f3 fe6f 	bl	8000ac8 <__aeabi_dcmpeq>
 800cdea:	b110      	cbz	r0, 800cdf2 <_dtoa_r+0x67a>
 800cdec:	f018 0f01 	tst.w	r8, #1
 800cdf0:	d10f      	bne.n	800ce12 <_dtoa_r+0x69a>
 800cdf2:	9904      	ldr	r1, [sp, #16]
 800cdf4:	4620      	mov	r0, r4
 800cdf6:	f000 fcaa 	bl	800d74e <_Bfree>
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cdfe:	702b      	strb	r3, [r5, #0]
 800ce00:	f10a 0301 	add.w	r3, sl, #1
 800ce04:	6013      	str	r3, [r2, #0]
 800ce06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	f000 8241 	beq.w	800d290 <_dtoa_r+0xb18>
 800ce0e:	601d      	str	r5, [r3, #0]
 800ce10:	e23e      	b.n	800d290 <_dtoa_r+0xb18>
 800ce12:	f8cd a020 	str.w	sl, [sp, #32]
 800ce16:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ce1a:	2a39      	cmp	r2, #57	; 0x39
 800ce1c:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 800ce20:	d108      	bne.n	800ce34 <_dtoa_r+0x6bc>
 800ce22:	459b      	cmp	fp, r3
 800ce24:	d10a      	bne.n	800ce3c <_dtoa_r+0x6c4>
 800ce26:	9b08      	ldr	r3, [sp, #32]
 800ce28:	3301      	adds	r3, #1
 800ce2a:	9308      	str	r3, [sp, #32]
 800ce2c:	2330      	movs	r3, #48	; 0x30
 800ce2e:	f88b 3000 	strb.w	r3, [fp]
 800ce32:	465b      	mov	r3, fp
 800ce34:	781a      	ldrb	r2, [r3, #0]
 800ce36:	3201      	adds	r2, #1
 800ce38:	701a      	strb	r2, [r3, #0]
 800ce3a:	e78c      	b.n	800cd56 <_dtoa_r+0x5de>
 800ce3c:	461d      	mov	r5, r3
 800ce3e:	e7ea      	b.n	800ce16 <_dtoa_r+0x69e>
 800ce40:	2200      	movs	r2, #0
 800ce42:	4b9b      	ldr	r3, [pc, #620]	; (800d0b0 <_dtoa_r+0x938>)
 800ce44:	f7f3 fbd8 	bl	80005f8 <__aeabi_dmul>
 800ce48:	2200      	movs	r2, #0
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	4606      	mov	r6, r0
 800ce4e:	460f      	mov	r7, r1
 800ce50:	f7f3 fe3a 	bl	8000ac8 <__aeabi_dcmpeq>
 800ce54:	2800      	cmp	r0, #0
 800ce56:	d09a      	beq.n	800cd8e <_dtoa_r+0x616>
 800ce58:	e7cb      	b.n	800cdf2 <_dtoa_r+0x67a>
 800ce5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ce5c:	2a00      	cmp	r2, #0
 800ce5e:	f000 808b 	beq.w	800cf78 <_dtoa_r+0x800>
 800ce62:	9a06      	ldr	r2, [sp, #24]
 800ce64:	2a01      	cmp	r2, #1
 800ce66:	dc6e      	bgt.n	800cf46 <_dtoa_r+0x7ce>
 800ce68:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ce6a:	2a00      	cmp	r2, #0
 800ce6c:	d067      	beq.n	800cf3e <_dtoa_r+0x7c6>
 800ce6e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ce72:	9f07      	ldr	r7, [sp, #28]
 800ce74:	9d05      	ldr	r5, [sp, #20]
 800ce76:	9a05      	ldr	r2, [sp, #20]
 800ce78:	2101      	movs	r1, #1
 800ce7a:	441a      	add	r2, r3
 800ce7c:	4620      	mov	r0, r4
 800ce7e:	9205      	str	r2, [sp, #20]
 800ce80:	4498      	add	r8, r3
 800ce82:	f000 fd04 	bl	800d88e <__i2b>
 800ce86:	4606      	mov	r6, r0
 800ce88:	2d00      	cmp	r5, #0
 800ce8a:	dd0c      	ble.n	800cea6 <_dtoa_r+0x72e>
 800ce8c:	f1b8 0f00 	cmp.w	r8, #0
 800ce90:	dd09      	ble.n	800cea6 <_dtoa_r+0x72e>
 800ce92:	4545      	cmp	r5, r8
 800ce94:	9a05      	ldr	r2, [sp, #20]
 800ce96:	462b      	mov	r3, r5
 800ce98:	bfa8      	it	ge
 800ce9a:	4643      	movge	r3, r8
 800ce9c:	1ad2      	subs	r2, r2, r3
 800ce9e:	9205      	str	r2, [sp, #20]
 800cea0:	1aed      	subs	r5, r5, r3
 800cea2:	eba8 0803 	sub.w	r8, r8, r3
 800cea6:	9b07      	ldr	r3, [sp, #28]
 800cea8:	b1eb      	cbz	r3, 800cee6 <_dtoa_r+0x76e>
 800ceaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d067      	beq.n	800cf80 <_dtoa_r+0x808>
 800ceb0:	b18f      	cbz	r7, 800ced6 <_dtoa_r+0x75e>
 800ceb2:	4631      	mov	r1, r6
 800ceb4:	463a      	mov	r2, r7
 800ceb6:	4620      	mov	r0, r4
 800ceb8:	f000 fd88 	bl	800d9cc <__pow5mult>
 800cebc:	9a04      	ldr	r2, [sp, #16]
 800cebe:	4601      	mov	r1, r0
 800cec0:	4606      	mov	r6, r0
 800cec2:	4620      	mov	r0, r4
 800cec4:	f000 fcec 	bl	800d8a0 <__multiply>
 800cec8:	9904      	ldr	r1, [sp, #16]
 800ceca:	9008      	str	r0, [sp, #32]
 800cecc:	4620      	mov	r0, r4
 800cece:	f000 fc3e 	bl	800d74e <_Bfree>
 800ced2:	9b08      	ldr	r3, [sp, #32]
 800ced4:	9304      	str	r3, [sp, #16]
 800ced6:	9b07      	ldr	r3, [sp, #28]
 800ced8:	1bda      	subs	r2, r3, r7
 800ceda:	d004      	beq.n	800cee6 <_dtoa_r+0x76e>
 800cedc:	9904      	ldr	r1, [sp, #16]
 800cede:	4620      	mov	r0, r4
 800cee0:	f000 fd74 	bl	800d9cc <__pow5mult>
 800cee4:	9004      	str	r0, [sp, #16]
 800cee6:	2101      	movs	r1, #1
 800cee8:	4620      	mov	r0, r4
 800ceea:	f000 fcd0 	bl	800d88e <__i2b>
 800ceee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cef0:	4607      	mov	r7, r0
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	f000 81d0 	beq.w	800d298 <_dtoa_r+0xb20>
 800cef8:	461a      	mov	r2, r3
 800cefa:	4601      	mov	r1, r0
 800cefc:	4620      	mov	r0, r4
 800cefe:	f000 fd65 	bl	800d9cc <__pow5mult>
 800cf02:	9b06      	ldr	r3, [sp, #24]
 800cf04:	2b01      	cmp	r3, #1
 800cf06:	4607      	mov	r7, r0
 800cf08:	dc40      	bgt.n	800cf8c <_dtoa_r+0x814>
 800cf0a:	9b00      	ldr	r3, [sp, #0]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d139      	bne.n	800cf84 <_dtoa_r+0x80c>
 800cf10:	9b01      	ldr	r3, [sp, #4]
 800cf12:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d136      	bne.n	800cf88 <_dtoa_r+0x810>
 800cf1a:	9b01      	ldr	r3, [sp, #4]
 800cf1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cf20:	0d1b      	lsrs	r3, r3, #20
 800cf22:	051b      	lsls	r3, r3, #20
 800cf24:	b12b      	cbz	r3, 800cf32 <_dtoa_r+0x7ba>
 800cf26:	9b05      	ldr	r3, [sp, #20]
 800cf28:	3301      	adds	r3, #1
 800cf2a:	9305      	str	r3, [sp, #20]
 800cf2c:	f108 0801 	add.w	r8, r8, #1
 800cf30:	2301      	movs	r3, #1
 800cf32:	9307      	str	r3, [sp, #28]
 800cf34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d12a      	bne.n	800cf90 <_dtoa_r+0x818>
 800cf3a:	2001      	movs	r0, #1
 800cf3c:	e030      	b.n	800cfa0 <_dtoa_r+0x828>
 800cf3e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cf40:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cf44:	e795      	b.n	800ce72 <_dtoa_r+0x6fa>
 800cf46:	9b07      	ldr	r3, [sp, #28]
 800cf48:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 800cf4c:	42bb      	cmp	r3, r7
 800cf4e:	bfbf      	itttt	lt
 800cf50:	9b07      	ldrlt	r3, [sp, #28]
 800cf52:	9707      	strlt	r7, [sp, #28]
 800cf54:	1afa      	sublt	r2, r7, r3
 800cf56:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800cf58:	bfbb      	ittet	lt
 800cf5a:	189b      	addlt	r3, r3, r2
 800cf5c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800cf5e:	1bdf      	subge	r7, r3, r7
 800cf60:	2700      	movlt	r7, #0
 800cf62:	f1b9 0f00 	cmp.w	r9, #0
 800cf66:	bfb5      	itete	lt
 800cf68:	9b05      	ldrlt	r3, [sp, #20]
 800cf6a:	9d05      	ldrge	r5, [sp, #20]
 800cf6c:	eba3 0509 	sublt.w	r5, r3, r9
 800cf70:	464b      	movge	r3, r9
 800cf72:	bfb8      	it	lt
 800cf74:	2300      	movlt	r3, #0
 800cf76:	e77e      	b.n	800ce76 <_dtoa_r+0x6fe>
 800cf78:	9f07      	ldr	r7, [sp, #28]
 800cf7a:	9d05      	ldr	r5, [sp, #20]
 800cf7c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800cf7e:	e783      	b.n	800ce88 <_dtoa_r+0x710>
 800cf80:	9a07      	ldr	r2, [sp, #28]
 800cf82:	e7ab      	b.n	800cedc <_dtoa_r+0x764>
 800cf84:	2300      	movs	r3, #0
 800cf86:	e7d4      	b.n	800cf32 <_dtoa_r+0x7ba>
 800cf88:	9b00      	ldr	r3, [sp, #0]
 800cf8a:	e7d2      	b.n	800cf32 <_dtoa_r+0x7ba>
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	9307      	str	r3, [sp, #28]
 800cf90:	693b      	ldr	r3, [r7, #16]
 800cf92:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800cf96:	6918      	ldr	r0, [r3, #16]
 800cf98:	f000 fc2b 	bl	800d7f2 <__hi0bits>
 800cf9c:	f1c0 0020 	rsb	r0, r0, #32
 800cfa0:	4440      	add	r0, r8
 800cfa2:	f010 001f 	ands.w	r0, r0, #31
 800cfa6:	d047      	beq.n	800d038 <_dtoa_r+0x8c0>
 800cfa8:	f1c0 0320 	rsb	r3, r0, #32
 800cfac:	2b04      	cmp	r3, #4
 800cfae:	dd3b      	ble.n	800d028 <_dtoa_r+0x8b0>
 800cfb0:	9b05      	ldr	r3, [sp, #20]
 800cfb2:	f1c0 001c 	rsb	r0, r0, #28
 800cfb6:	4403      	add	r3, r0
 800cfb8:	9305      	str	r3, [sp, #20]
 800cfba:	4405      	add	r5, r0
 800cfbc:	4480      	add	r8, r0
 800cfbe:	9b05      	ldr	r3, [sp, #20]
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	dd05      	ble.n	800cfd0 <_dtoa_r+0x858>
 800cfc4:	461a      	mov	r2, r3
 800cfc6:	9904      	ldr	r1, [sp, #16]
 800cfc8:	4620      	mov	r0, r4
 800cfca:	f000 fd4d 	bl	800da68 <__lshift>
 800cfce:	9004      	str	r0, [sp, #16]
 800cfd0:	f1b8 0f00 	cmp.w	r8, #0
 800cfd4:	dd05      	ble.n	800cfe2 <_dtoa_r+0x86a>
 800cfd6:	4639      	mov	r1, r7
 800cfd8:	4642      	mov	r2, r8
 800cfda:	4620      	mov	r0, r4
 800cfdc:	f000 fd44 	bl	800da68 <__lshift>
 800cfe0:	4607      	mov	r7, r0
 800cfe2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cfe4:	b353      	cbz	r3, 800d03c <_dtoa_r+0x8c4>
 800cfe6:	4639      	mov	r1, r7
 800cfe8:	9804      	ldr	r0, [sp, #16]
 800cfea:	f000 fd91 	bl	800db10 <__mcmp>
 800cfee:	2800      	cmp	r0, #0
 800cff0:	da24      	bge.n	800d03c <_dtoa_r+0x8c4>
 800cff2:	2300      	movs	r3, #0
 800cff4:	220a      	movs	r2, #10
 800cff6:	9904      	ldr	r1, [sp, #16]
 800cff8:	4620      	mov	r0, r4
 800cffa:	f000 fbbf 	bl	800d77c <__multadd>
 800cffe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d000:	9004      	str	r0, [sp, #16]
 800d002:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800d006:	2b00      	cmp	r3, #0
 800d008:	f000 814d 	beq.w	800d2a6 <_dtoa_r+0xb2e>
 800d00c:	2300      	movs	r3, #0
 800d00e:	4631      	mov	r1, r6
 800d010:	220a      	movs	r2, #10
 800d012:	4620      	mov	r0, r4
 800d014:	f000 fbb2 	bl	800d77c <__multadd>
 800d018:	9b02      	ldr	r3, [sp, #8]
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	4606      	mov	r6, r0
 800d01e:	dc4f      	bgt.n	800d0c0 <_dtoa_r+0x948>
 800d020:	9b06      	ldr	r3, [sp, #24]
 800d022:	2b02      	cmp	r3, #2
 800d024:	dd4c      	ble.n	800d0c0 <_dtoa_r+0x948>
 800d026:	e011      	b.n	800d04c <_dtoa_r+0x8d4>
 800d028:	d0c9      	beq.n	800cfbe <_dtoa_r+0x846>
 800d02a:	9a05      	ldr	r2, [sp, #20]
 800d02c:	331c      	adds	r3, #28
 800d02e:	441a      	add	r2, r3
 800d030:	9205      	str	r2, [sp, #20]
 800d032:	441d      	add	r5, r3
 800d034:	4498      	add	r8, r3
 800d036:	e7c2      	b.n	800cfbe <_dtoa_r+0x846>
 800d038:	4603      	mov	r3, r0
 800d03a:	e7f6      	b.n	800d02a <_dtoa_r+0x8b2>
 800d03c:	f1b9 0f00 	cmp.w	r9, #0
 800d040:	dc38      	bgt.n	800d0b4 <_dtoa_r+0x93c>
 800d042:	9b06      	ldr	r3, [sp, #24]
 800d044:	2b02      	cmp	r3, #2
 800d046:	dd35      	ble.n	800d0b4 <_dtoa_r+0x93c>
 800d048:	f8cd 9008 	str.w	r9, [sp, #8]
 800d04c:	9b02      	ldr	r3, [sp, #8]
 800d04e:	b963      	cbnz	r3, 800d06a <_dtoa_r+0x8f2>
 800d050:	4639      	mov	r1, r7
 800d052:	2205      	movs	r2, #5
 800d054:	4620      	mov	r0, r4
 800d056:	f000 fb91 	bl	800d77c <__multadd>
 800d05a:	4601      	mov	r1, r0
 800d05c:	4607      	mov	r7, r0
 800d05e:	9804      	ldr	r0, [sp, #16]
 800d060:	f000 fd56 	bl	800db10 <__mcmp>
 800d064:	2800      	cmp	r0, #0
 800d066:	f73f adcc 	bgt.w	800cc02 <_dtoa_r+0x48a>
 800d06a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d06c:	465d      	mov	r5, fp
 800d06e:	ea6f 0a03 	mvn.w	sl, r3
 800d072:	f04f 0900 	mov.w	r9, #0
 800d076:	4639      	mov	r1, r7
 800d078:	4620      	mov	r0, r4
 800d07a:	f000 fb68 	bl	800d74e <_Bfree>
 800d07e:	2e00      	cmp	r6, #0
 800d080:	f43f aeb7 	beq.w	800cdf2 <_dtoa_r+0x67a>
 800d084:	f1b9 0f00 	cmp.w	r9, #0
 800d088:	d005      	beq.n	800d096 <_dtoa_r+0x91e>
 800d08a:	45b1      	cmp	r9, r6
 800d08c:	d003      	beq.n	800d096 <_dtoa_r+0x91e>
 800d08e:	4649      	mov	r1, r9
 800d090:	4620      	mov	r0, r4
 800d092:	f000 fb5c 	bl	800d74e <_Bfree>
 800d096:	4631      	mov	r1, r6
 800d098:	4620      	mov	r0, r4
 800d09a:	f000 fb58 	bl	800d74e <_Bfree>
 800d09e:	e6a8      	b.n	800cdf2 <_dtoa_r+0x67a>
 800d0a0:	2700      	movs	r7, #0
 800d0a2:	463e      	mov	r6, r7
 800d0a4:	e7e1      	b.n	800d06a <_dtoa_r+0x8f2>
 800d0a6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800d0aa:	463e      	mov	r6, r7
 800d0ac:	e5a9      	b.n	800cc02 <_dtoa_r+0x48a>
 800d0ae:	bf00      	nop
 800d0b0:	40240000 	.word	0x40240000
 800d0b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d0b6:	f8cd 9008 	str.w	r9, [sp, #8]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	f000 80fa 	beq.w	800d2b4 <_dtoa_r+0xb3c>
 800d0c0:	2d00      	cmp	r5, #0
 800d0c2:	dd05      	ble.n	800d0d0 <_dtoa_r+0x958>
 800d0c4:	4631      	mov	r1, r6
 800d0c6:	462a      	mov	r2, r5
 800d0c8:	4620      	mov	r0, r4
 800d0ca:	f000 fccd 	bl	800da68 <__lshift>
 800d0ce:	4606      	mov	r6, r0
 800d0d0:	9b07      	ldr	r3, [sp, #28]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d04c      	beq.n	800d170 <_dtoa_r+0x9f8>
 800d0d6:	6871      	ldr	r1, [r6, #4]
 800d0d8:	4620      	mov	r0, r4
 800d0da:	f000 fb04 	bl	800d6e6 <_Balloc>
 800d0de:	6932      	ldr	r2, [r6, #16]
 800d0e0:	3202      	adds	r2, #2
 800d0e2:	4605      	mov	r5, r0
 800d0e4:	0092      	lsls	r2, r2, #2
 800d0e6:	f106 010c 	add.w	r1, r6, #12
 800d0ea:	300c      	adds	r0, #12
 800d0ec:	f000 faf0 	bl	800d6d0 <memcpy>
 800d0f0:	2201      	movs	r2, #1
 800d0f2:	4629      	mov	r1, r5
 800d0f4:	4620      	mov	r0, r4
 800d0f6:	f000 fcb7 	bl	800da68 <__lshift>
 800d0fa:	9b00      	ldr	r3, [sp, #0]
 800d0fc:	f8cd b014 	str.w	fp, [sp, #20]
 800d100:	f003 0301 	and.w	r3, r3, #1
 800d104:	46b1      	mov	r9, r6
 800d106:	9307      	str	r3, [sp, #28]
 800d108:	4606      	mov	r6, r0
 800d10a:	4639      	mov	r1, r7
 800d10c:	9804      	ldr	r0, [sp, #16]
 800d10e:	f7ff faa7 	bl	800c660 <quorem>
 800d112:	4649      	mov	r1, r9
 800d114:	4605      	mov	r5, r0
 800d116:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800d11a:	9804      	ldr	r0, [sp, #16]
 800d11c:	f000 fcf8 	bl	800db10 <__mcmp>
 800d120:	4632      	mov	r2, r6
 800d122:	9000      	str	r0, [sp, #0]
 800d124:	4639      	mov	r1, r7
 800d126:	4620      	mov	r0, r4
 800d128:	f000 fd0c 	bl	800db44 <__mdiff>
 800d12c:	68c3      	ldr	r3, [r0, #12]
 800d12e:	4602      	mov	r2, r0
 800d130:	bb03      	cbnz	r3, 800d174 <_dtoa_r+0x9fc>
 800d132:	4601      	mov	r1, r0
 800d134:	9008      	str	r0, [sp, #32]
 800d136:	9804      	ldr	r0, [sp, #16]
 800d138:	f000 fcea 	bl	800db10 <__mcmp>
 800d13c:	9a08      	ldr	r2, [sp, #32]
 800d13e:	4603      	mov	r3, r0
 800d140:	4611      	mov	r1, r2
 800d142:	4620      	mov	r0, r4
 800d144:	9308      	str	r3, [sp, #32]
 800d146:	f000 fb02 	bl	800d74e <_Bfree>
 800d14a:	9b08      	ldr	r3, [sp, #32]
 800d14c:	b9a3      	cbnz	r3, 800d178 <_dtoa_r+0xa00>
 800d14e:	9a06      	ldr	r2, [sp, #24]
 800d150:	b992      	cbnz	r2, 800d178 <_dtoa_r+0xa00>
 800d152:	9a07      	ldr	r2, [sp, #28]
 800d154:	b982      	cbnz	r2, 800d178 <_dtoa_r+0xa00>
 800d156:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d15a:	d029      	beq.n	800d1b0 <_dtoa_r+0xa38>
 800d15c:	9b00      	ldr	r3, [sp, #0]
 800d15e:	2b00      	cmp	r3, #0
 800d160:	dd01      	ble.n	800d166 <_dtoa_r+0x9ee>
 800d162:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800d166:	9b05      	ldr	r3, [sp, #20]
 800d168:	1c5d      	adds	r5, r3, #1
 800d16a:	f883 8000 	strb.w	r8, [r3]
 800d16e:	e782      	b.n	800d076 <_dtoa_r+0x8fe>
 800d170:	4630      	mov	r0, r6
 800d172:	e7c2      	b.n	800d0fa <_dtoa_r+0x982>
 800d174:	2301      	movs	r3, #1
 800d176:	e7e3      	b.n	800d140 <_dtoa_r+0x9c8>
 800d178:	9a00      	ldr	r2, [sp, #0]
 800d17a:	2a00      	cmp	r2, #0
 800d17c:	db04      	blt.n	800d188 <_dtoa_r+0xa10>
 800d17e:	d125      	bne.n	800d1cc <_dtoa_r+0xa54>
 800d180:	9a06      	ldr	r2, [sp, #24]
 800d182:	bb1a      	cbnz	r2, 800d1cc <_dtoa_r+0xa54>
 800d184:	9a07      	ldr	r2, [sp, #28]
 800d186:	bb0a      	cbnz	r2, 800d1cc <_dtoa_r+0xa54>
 800d188:	2b00      	cmp	r3, #0
 800d18a:	ddec      	ble.n	800d166 <_dtoa_r+0x9ee>
 800d18c:	2201      	movs	r2, #1
 800d18e:	9904      	ldr	r1, [sp, #16]
 800d190:	4620      	mov	r0, r4
 800d192:	f000 fc69 	bl	800da68 <__lshift>
 800d196:	4639      	mov	r1, r7
 800d198:	9004      	str	r0, [sp, #16]
 800d19a:	f000 fcb9 	bl	800db10 <__mcmp>
 800d19e:	2800      	cmp	r0, #0
 800d1a0:	dc03      	bgt.n	800d1aa <_dtoa_r+0xa32>
 800d1a2:	d1e0      	bne.n	800d166 <_dtoa_r+0x9ee>
 800d1a4:	f018 0f01 	tst.w	r8, #1
 800d1a8:	d0dd      	beq.n	800d166 <_dtoa_r+0x9ee>
 800d1aa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d1ae:	d1d8      	bne.n	800d162 <_dtoa_r+0x9ea>
 800d1b0:	9b05      	ldr	r3, [sp, #20]
 800d1b2:	9a05      	ldr	r2, [sp, #20]
 800d1b4:	1c5d      	adds	r5, r3, #1
 800d1b6:	2339      	movs	r3, #57	; 0x39
 800d1b8:	7013      	strb	r3, [r2, #0]
 800d1ba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d1be:	2b39      	cmp	r3, #57	; 0x39
 800d1c0:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800d1c4:	d04f      	beq.n	800d266 <_dtoa_r+0xaee>
 800d1c6:	3301      	adds	r3, #1
 800d1c8:	7013      	strb	r3, [r2, #0]
 800d1ca:	e754      	b.n	800d076 <_dtoa_r+0x8fe>
 800d1cc:	9a05      	ldr	r2, [sp, #20]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	f102 0501 	add.w	r5, r2, #1
 800d1d4:	dd06      	ble.n	800d1e4 <_dtoa_r+0xa6c>
 800d1d6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d1da:	d0e9      	beq.n	800d1b0 <_dtoa_r+0xa38>
 800d1dc:	f108 0801 	add.w	r8, r8, #1
 800d1e0:	9b05      	ldr	r3, [sp, #20]
 800d1e2:	e7c2      	b.n	800d16a <_dtoa_r+0x9f2>
 800d1e4:	9a02      	ldr	r2, [sp, #8]
 800d1e6:	f805 8c01 	strb.w	r8, [r5, #-1]
 800d1ea:	eba5 030b 	sub.w	r3, r5, fp
 800d1ee:	4293      	cmp	r3, r2
 800d1f0:	d021      	beq.n	800d236 <_dtoa_r+0xabe>
 800d1f2:	2300      	movs	r3, #0
 800d1f4:	220a      	movs	r2, #10
 800d1f6:	9904      	ldr	r1, [sp, #16]
 800d1f8:	4620      	mov	r0, r4
 800d1fa:	f000 fabf 	bl	800d77c <__multadd>
 800d1fe:	45b1      	cmp	r9, r6
 800d200:	9004      	str	r0, [sp, #16]
 800d202:	f04f 0300 	mov.w	r3, #0
 800d206:	f04f 020a 	mov.w	r2, #10
 800d20a:	4649      	mov	r1, r9
 800d20c:	4620      	mov	r0, r4
 800d20e:	d105      	bne.n	800d21c <_dtoa_r+0xaa4>
 800d210:	f000 fab4 	bl	800d77c <__multadd>
 800d214:	4681      	mov	r9, r0
 800d216:	4606      	mov	r6, r0
 800d218:	9505      	str	r5, [sp, #20]
 800d21a:	e776      	b.n	800d10a <_dtoa_r+0x992>
 800d21c:	f000 faae 	bl	800d77c <__multadd>
 800d220:	4631      	mov	r1, r6
 800d222:	4681      	mov	r9, r0
 800d224:	2300      	movs	r3, #0
 800d226:	220a      	movs	r2, #10
 800d228:	4620      	mov	r0, r4
 800d22a:	f000 faa7 	bl	800d77c <__multadd>
 800d22e:	4606      	mov	r6, r0
 800d230:	e7f2      	b.n	800d218 <_dtoa_r+0xaa0>
 800d232:	f04f 0900 	mov.w	r9, #0
 800d236:	2201      	movs	r2, #1
 800d238:	9904      	ldr	r1, [sp, #16]
 800d23a:	4620      	mov	r0, r4
 800d23c:	f000 fc14 	bl	800da68 <__lshift>
 800d240:	4639      	mov	r1, r7
 800d242:	9004      	str	r0, [sp, #16]
 800d244:	f000 fc64 	bl	800db10 <__mcmp>
 800d248:	2800      	cmp	r0, #0
 800d24a:	dcb6      	bgt.n	800d1ba <_dtoa_r+0xa42>
 800d24c:	d102      	bne.n	800d254 <_dtoa_r+0xadc>
 800d24e:	f018 0f01 	tst.w	r8, #1
 800d252:	d1b2      	bne.n	800d1ba <_dtoa_r+0xa42>
 800d254:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d258:	2b30      	cmp	r3, #48	; 0x30
 800d25a:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800d25e:	f47f af0a 	bne.w	800d076 <_dtoa_r+0x8fe>
 800d262:	4615      	mov	r5, r2
 800d264:	e7f6      	b.n	800d254 <_dtoa_r+0xadc>
 800d266:	4593      	cmp	fp, r2
 800d268:	d105      	bne.n	800d276 <_dtoa_r+0xafe>
 800d26a:	2331      	movs	r3, #49	; 0x31
 800d26c:	f10a 0a01 	add.w	sl, sl, #1
 800d270:	f88b 3000 	strb.w	r3, [fp]
 800d274:	e6ff      	b.n	800d076 <_dtoa_r+0x8fe>
 800d276:	4615      	mov	r5, r2
 800d278:	e79f      	b.n	800d1ba <_dtoa_r+0xa42>
 800d27a:	f8df b064 	ldr.w	fp, [pc, #100]	; 800d2e0 <_dtoa_r+0xb68>
 800d27e:	e007      	b.n	800d290 <_dtoa_r+0xb18>
 800d280:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d282:	f8df b060 	ldr.w	fp, [pc, #96]	; 800d2e4 <_dtoa_r+0xb6c>
 800d286:	b11b      	cbz	r3, 800d290 <_dtoa_r+0xb18>
 800d288:	f10b 0308 	add.w	r3, fp, #8
 800d28c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d28e:	6013      	str	r3, [r2, #0]
 800d290:	4658      	mov	r0, fp
 800d292:	b017      	add	sp, #92	; 0x5c
 800d294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d298:	9b06      	ldr	r3, [sp, #24]
 800d29a:	2b01      	cmp	r3, #1
 800d29c:	f77f ae35 	ble.w	800cf0a <_dtoa_r+0x792>
 800d2a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d2a2:	9307      	str	r3, [sp, #28]
 800d2a4:	e649      	b.n	800cf3a <_dtoa_r+0x7c2>
 800d2a6:	9b02      	ldr	r3, [sp, #8]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	dc03      	bgt.n	800d2b4 <_dtoa_r+0xb3c>
 800d2ac:	9b06      	ldr	r3, [sp, #24]
 800d2ae:	2b02      	cmp	r3, #2
 800d2b0:	f73f aecc 	bgt.w	800d04c <_dtoa_r+0x8d4>
 800d2b4:	465d      	mov	r5, fp
 800d2b6:	4639      	mov	r1, r7
 800d2b8:	9804      	ldr	r0, [sp, #16]
 800d2ba:	f7ff f9d1 	bl	800c660 <quorem>
 800d2be:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800d2c2:	f805 8b01 	strb.w	r8, [r5], #1
 800d2c6:	9a02      	ldr	r2, [sp, #8]
 800d2c8:	eba5 030b 	sub.w	r3, r5, fp
 800d2cc:	429a      	cmp	r2, r3
 800d2ce:	ddb0      	ble.n	800d232 <_dtoa_r+0xaba>
 800d2d0:	2300      	movs	r3, #0
 800d2d2:	220a      	movs	r2, #10
 800d2d4:	9904      	ldr	r1, [sp, #16]
 800d2d6:	4620      	mov	r0, r4
 800d2d8:	f000 fa50 	bl	800d77c <__multadd>
 800d2dc:	9004      	str	r0, [sp, #16]
 800d2de:	e7ea      	b.n	800d2b6 <_dtoa_r+0xb3e>
 800d2e0:	0800f65c 	.word	0x0800f65c
 800d2e4:	0800f680 	.word	0x0800f680

0800d2e8 <__sflush_r>:
 800d2e8:	898a      	ldrh	r2, [r1, #12]
 800d2ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2ee:	4605      	mov	r5, r0
 800d2f0:	0710      	lsls	r0, r2, #28
 800d2f2:	460c      	mov	r4, r1
 800d2f4:	d458      	bmi.n	800d3a8 <__sflush_r+0xc0>
 800d2f6:	684b      	ldr	r3, [r1, #4]
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	dc05      	bgt.n	800d308 <__sflush_r+0x20>
 800d2fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	dc02      	bgt.n	800d308 <__sflush_r+0x20>
 800d302:	2000      	movs	r0, #0
 800d304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d308:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d30a:	2e00      	cmp	r6, #0
 800d30c:	d0f9      	beq.n	800d302 <__sflush_r+0x1a>
 800d30e:	2300      	movs	r3, #0
 800d310:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d314:	682f      	ldr	r7, [r5, #0]
 800d316:	6a21      	ldr	r1, [r4, #32]
 800d318:	602b      	str	r3, [r5, #0]
 800d31a:	d032      	beq.n	800d382 <__sflush_r+0x9a>
 800d31c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d31e:	89a3      	ldrh	r3, [r4, #12]
 800d320:	075a      	lsls	r2, r3, #29
 800d322:	d505      	bpl.n	800d330 <__sflush_r+0x48>
 800d324:	6863      	ldr	r3, [r4, #4]
 800d326:	1ac0      	subs	r0, r0, r3
 800d328:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d32a:	b10b      	cbz	r3, 800d330 <__sflush_r+0x48>
 800d32c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d32e:	1ac0      	subs	r0, r0, r3
 800d330:	2300      	movs	r3, #0
 800d332:	4602      	mov	r2, r0
 800d334:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d336:	6a21      	ldr	r1, [r4, #32]
 800d338:	4628      	mov	r0, r5
 800d33a:	47b0      	blx	r6
 800d33c:	1c43      	adds	r3, r0, #1
 800d33e:	89a3      	ldrh	r3, [r4, #12]
 800d340:	d106      	bne.n	800d350 <__sflush_r+0x68>
 800d342:	6829      	ldr	r1, [r5, #0]
 800d344:	291d      	cmp	r1, #29
 800d346:	d848      	bhi.n	800d3da <__sflush_r+0xf2>
 800d348:	4a29      	ldr	r2, [pc, #164]	; (800d3f0 <__sflush_r+0x108>)
 800d34a:	40ca      	lsrs	r2, r1
 800d34c:	07d6      	lsls	r6, r2, #31
 800d34e:	d544      	bpl.n	800d3da <__sflush_r+0xf2>
 800d350:	2200      	movs	r2, #0
 800d352:	6062      	str	r2, [r4, #4]
 800d354:	04d9      	lsls	r1, r3, #19
 800d356:	6922      	ldr	r2, [r4, #16]
 800d358:	6022      	str	r2, [r4, #0]
 800d35a:	d504      	bpl.n	800d366 <__sflush_r+0x7e>
 800d35c:	1c42      	adds	r2, r0, #1
 800d35e:	d101      	bne.n	800d364 <__sflush_r+0x7c>
 800d360:	682b      	ldr	r3, [r5, #0]
 800d362:	b903      	cbnz	r3, 800d366 <__sflush_r+0x7e>
 800d364:	6560      	str	r0, [r4, #84]	; 0x54
 800d366:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d368:	602f      	str	r7, [r5, #0]
 800d36a:	2900      	cmp	r1, #0
 800d36c:	d0c9      	beq.n	800d302 <__sflush_r+0x1a>
 800d36e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d372:	4299      	cmp	r1, r3
 800d374:	d002      	beq.n	800d37c <__sflush_r+0x94>
 800d376:	4628      	mov	r0, r5
 800d378:	f000 fc9e 	bl	800dcb8 <_free_r>
 800d37c:	2000      	movs	r0, #0
 800d37e:	6360      	str	r0, [r4, #52]	; 0x34
 800d380:	e7c0      	b.n	800d304 <__sflush_r+0x1c>
 800d382:	2301      	movs	r3, #1
 800d384:	4628      	mov	r0, r5
 800d386:	47b0      	blx	r6
 800d388:	1c41      	adds	r1, r0, #1
 800d38a:	d1c8      	bne.n	800d31e <__sflush_r+0x36>
 800d38c:	682b      	ldr	r3, [r5, #0]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d0c5      	beq.n	800d31e <__sflush_r+0x36>
 800d392:	2b1d      	cmp	r3, #29
 800d394:	d001      	beq.n	800d39a <__sflush_r+0xb2>
 800d396:	2b16      	cmp	r3, #22
 800d398:	d101      	bne.n	800d39e <__sflush_r+0xb6>
 800d39a:	602f      	str	r7, [r5, #0]
 800d39c:	e7b1      	b.n	800d302 <__sflush_r+0x1a>
 800d39e:	89a3      	ldrh	r3, [r4, #12]
 800d3a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d3a4:	81a3      	strh	r3, [r4, #12]
 800d3a6:	e7ad      	b.n	800d304 <__sflush_r+0x1c>
 800d3a8:	690f      	ldr	r7, [r1, #16]
 800d3aa:	2f00      	cmp	r7, #0
 800d3ac:	d0a9      	beq.n	800d302 <__sflush_r+0x1a>
 800d3ae:	0793      	lsls	r3, r2, #30
 800d3b0:	680e      	ldr	r6, [r1, #0]
 800d3b2:	bf08      	it	eq
 800d3b4:	694b      	ldreq	r3, [r1, #20]
 800d3b6:	600f      	str	r7, [r1, #0]
 800d3b8:	bf18      	it	ne
 800d3ba:	2300      	movne	r3, #0
 800d3bc:	eba6 0807 	sub.w	r8, r6, r7
 800d3c0:	608b      	str	r3, [r1, #8]
 800d3c2:	f1b8 0f00 	cmp.w	r8, #0
 800d3c6:	dd9c      	ble.n	800d302 <__sflush_r+0x1a>
 800d3c8:	4643      	mov	r3, r8
 800d3ca:	463a      	mov	r2, r7
 800d3cc:	6a21      	ldr	r1, [r4, #32]
 800d3ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d3d0:	4628      	mov	r0, r5
 800d3d2:	47b0      	blx	r6
 800d3d4:	2800      	cmp	r0, #0
 800d3d6:	dc06      	bgt.n	800d3e6 <__sflush_r+0xfe>
 800d3d8:	89a3      	ldrh	r3, [r4, #12]
 800d3da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d3de:	81a3      	strh	r3, [r4, #12]
 800d3e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d3e4:	e78e      	b.n	800d304 <__sflush_r+0x1c>
 800d3e6:	4407      	add	r7, r0
 800d3e8:	eba8 0800 	sub.w	r8, r8, r0
 800d3ec:	e7e9      	b.n	800d3c2 <__sflush_r+0xda>
 800d3ee:	bf00      	nop
 800d3f0:	20400001 	.word	0x20400001

0800d3f4 <_fflush_r>:
 800d3f4:	b538      	push	{r3, r4, r5, lr}
 800d3f6:	690b      	ldr	r3, [r1, #16]
 800d3f8:	4605      	mov	r5, r0
 800d3fa:	460c      	mov	r4, r1
 800d3fc:	b1db      	cbz	r3, 800d436 <_fflush_r+0x42>
 800d3fe:	b118      	cbz	r0, 800d408 <_fflush_r+0x14>
 800d400:	6983      	ldr	r3, [r0, #24]
 800d402:	b90b      	cbnz	r3, 800d408 <_fflush_r+0x14>
 800d404:	f000 f860 	bl	800d4c8 <__sinit>
 800d408:	4b0c      	ldr	r3, [pc, #48]	; (800d43c <_fflush_r+0x48>)
 800d40a:	429c      	cmp	r4, r3
 800d40c:	d109      	bne.n	800d422 <_fflush_r+0x2e>
 800d40e:	686c      	ldr	r4, [r5, #4]
 800d410:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d414:	b17b      	cbz	r3, 800d436 <_fflush_r+0x42>
 800d416:	4621      	mov	r1, r4
 800d418:	4628      	mov	r0, r5
 800d41a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d41e:	f7ff bf63 	b.w	800d2e8 <__sflush_r>
 800d422:	4b07      	ldr	r3, [pc, #28]	; (800d440 <_fflush_r+0x4c>)
 800d424:	429c      	cmp	r4, r3
 800d426:	d101      	bne.n	800d42c <_fflush_r+0x38>
 800d428:	68ac      	ldr	r4, [r5, #8]
 800d42a:	e7f1      	b.n	800d410 <_fflush_r+0x1c>
 800d42c:	4b05      	ldr	r3, [pc, #20]	; (800d444 <_fflush_r+0x50>)
 800d42e:	429c      	cmp	r4, r3
 800d430:	bf08      	it	eq
 800d432:	68ec      	ldreq	r4, [r5, #12]
 800d434:	e7ec      	b.n	800d410 <_fflush_r+0x1c>
 800d436:	2000      	movs	r0, #0
 800d438:	bd38      	pop	{r3, r4, r5, pc}
 800d43a:	bf00      	nop
 800d43c:	0800f6b0 	.word	0x0800f6b0
 800d440:	0800f6d0 	.word	0x0800f6d0
 800d444:	0800f690 	.word	0x0800f690

0800d448 <std>:
 800d448:	2300      	movs	r3, #0
 800d44a:	b510      	push	{r4, lr}
 800d44c:	4604      	mov	r4, r0
 800d44e:	e9c0 3300 	strd	r3, r3, [r0]
 800d452:	6083      	str	r3, [r0, #8]
 800d454:	8181      	strh	r1, [r0, #12]
 800d456:	6643      	str	r3, [r0, #100]	; 0x64
 800d458:	81c2      	strh	r2, [r0, #14]
 800d45a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d45e:	6183      	str	r3, [r0, #24]
 800d460:	4619      	mov	r1, r3
 800d462:	2208      	movs	r2, #8
 800d464:	305c      	adds	r0, #92	; 0x5c
 800d466:	f7fe fb5b 	bl	800bb20 <memset>
 800d46a:	4b05      	ldr	r3, [pc, #20]	; (800d480 <std+0x38>)
 800d46c:	6263      	str	r3, [r4, #36]	; 0x24
 800d46e:	4b05      	ldr	r3, [pc, #20]	; (800d484 <std+0x3c>)
 800d470:	62a3      	str	r3, [r4, #40]	; 0x28
 800d472:	4b05      	ldr	r3, [pc, #20]	; (800d488 <std+0x40>)
 800d474:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d476:	4b05      	ldr	r3, [pc, #20]	; (800d48c <std+0x44>)
 800d478:	6224      	str	r4, [r4, #32]
 800d47a:	6323      	str	r3, [r4, #48]	; 0x30
 800d47c:	bd10      	pop	{r4, pc}
 800d47e:	bf00      	nop
 800d480:	0800e0a9 	.word	0x0800e0a9
 800d484:	0800e0cb 	.word	0x0800e0cb
 800d488:	0800e103 	.word	0x0800e103
 800d48c:	0800e127 	.word	0x0800e127

0800d490 <_cleanup_r>:
 800d490:	4901      	ldr	r1, [pc, #4]	; (800d498 <_cleanup_r+0x8>)
 800d492:	f000 b885 	b.w	800d5a0 <_fwalk_reent>
 800d496:	bf00      	nop
 800d498:	0800d3f5 	.word	0x0800d3f5

0800d49c <__sfmoreglue>:
 800d49c:	b570      	push	{r4, r5, r6, lr}
 800d49e:	1e4a      	subs	r2, r1, #1
 800d4a0:	2568      	movs	r5, #104	; 0x68
 800d4a2:	4355      	muls	r5, r2
 800d4a4:	460e      	mov	r6, r1
 800d4a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d4aa:	f000 fc53 	bl	800dd54 <_malloc_r>
 800d4ae:	4604      	mov	r4, r0
 800d4b0:	b140      	cbz	r0, 800d4c4 <__sfmoreglue+0x28>
 800d4b2:	2100      	movs	r1, #0
 800d4b4:	e9c0 1600 	strd	r1, r6, [r0]
 800d4b8:	300c      	adds	r0, #12
 800d4ba:	60a0      	str	r0, [r4, #8]
 800d4bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d4c0:	f7fe fb2e 	bl	800bb20 <memset>
 800d4c4:	4620      	mov	r0, r4
 800d4c6:	bd70      	pop	{r4, r5, r6, pc}

0800d4c8 <__sinit>:
 800d4c8:	6983      	ldr	r3, [r0, #24]
 800d4ca:	b510      	push	{r4, lr}
 800d4cc:	4604      	mov	r4, r0
 800d4ce:	bb33      	cbnz	r3, 800d51e <__sinit+0x56>
 800d4d0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800d4d4:	6503      	str	r3, [r0, #80]	; 0x50
 800d4d6:	4b12      	ldr	r3, [pc, #72]	; (800d520 <__sinit+0x58>)
 800d4d8:	4a12      	ldr	r2, [pc, #72]	; (800d524 <__sinit+0x5c>)
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	6282      	str	r2, [r0, #40]	; 0x28
 800d4de:	4298      	cmp	r0, r3
 800d4e0:	bf04      	itt	eq
 800d4e2:	2301      	moveq	r3, #1
 800d4e4:	6183      	streq	r3, [r0, #24]
 800d4e6:	f000 f81f 	bl	800d528 <__sfp>
 800d4ea:	6060      	str	r0, [r4, #4]
 800d4ec:	4620      	mov	r0, r4
 800d4ee:	f000 f81b 	bl	800d528 <__sfp>
 800d4f2:	60a0      	str	r0, [r4, #8]
 800d4f4:	4620      	mov	r0, r4
 800d4f6:	f000 f817 	bl	800d528 <__sfp>
 800d4fa:	2200      	movs	r2, #0
 800d4fc:	60e0      	str	r0, [r4, #12]
 800d4fe:	2104      	movs	r1, #4
 800d500:	6860      	ldr	r0, [r4, #4]
 800d502:	f7ff ffa1 	bl	800d448 <std>
 800d506:	2201      	movs	r2, #1
 800d508:	2109      	movs	r1, #9
 800d50a:	68a0      	ldr	r0, [r4, #8]
 800d50c:	f7ff ff9c 	bl	800d448 <std>
 800d510:	2202      	movs	r2, #2
 800d512:	2112      	movs	r1, #18
 800d514:	68e0      	ldr	r0, [r4, #12]
 800d516:	f7ff ff97 	bl	800d448 <std>
 800d51a:	2301      	movs	r3, #1
 800d51c:	61a3      	str	r3, [r4, #24]
 800d51e:	bd10      	pop	{r4, pc}
 800d520:	0800f64c 	.word	0x0800f64c
 800d524:	0800d491 	.word	0x0800d491

0800d528 <__sfp>:
 800d528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d52a:	4b1b      	ldr	r3, [pc, #108]	; (800d598 <__sfp+0x70>)
 800d52c:	681e      	ldr	r6, [r3, #0]
 800d52e:	69b3      	ldr	r3, [r6, #24]
 800d530:	4607      	mov	r7, r0
 800d532:	b913      	cbnz	r3, 800d53a <__sfp+0x12>
 800d534:	4630      	mov	r0, r6
 800d536:	f7ff ffc7 	bl	800d4c8 <__sinit>
 800d53a:	3648      	adds	r6, #72	; 0x48
 800d53c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d540:	3b01      	subs	r3, #1
 800d542:	d503      	bpl.n	800d54c <__sfp+0x24>
 800d544:	6833      	ldr	r3, [r6, #0]
 800d546:	b133      	cbz	r3, 800d556 <__sfp+0x2e>
 800d548:	6836      	ldr	r6, [r6, #0]
 800d54a:	e7f7      	b.n	800d53c <__sfp+0x14>
 800d54c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d550:	b16d      	cbz	r5, 800d56e <__sfp+0x46>
 800d552:	3468      	adds	r4, #104	; 0x68
 800d554:	e7f4      	b.n	800d540 <__sfp+0x18>
 800d556:	2104      	movs	r1, #4
 800d558:	4638      	mov	r0, r7
 800d55a:	f7ff ff9f 	bl	800d49c <__sfmoreglue>
 800d55e:	6030      	str	r0, [r6, #0]
 800d560:	2800      	cmp	r0, #0
 800d562:	d1f1      	bne.n	800d548 <__sfp+0x20>
 800d564:	230c      	movs	r3, #12
 800d566:	603b      	str	r3, [r7, #0]
 800d568:	4604      	mov	r4, r0
 800d56a:	4620      	mov	r0, r4
 800d56c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d56e:	4b0b      	ldr	r3, [pc, #44]	; (800d59c <__sfp+0x74>)
 800d570:	6665      	str	r5, [r4, #100]	; 0x64
 800d572:	e9c4 5500 	strd	r5, r5, [r4]
 800d576:	60a5      	str	r5, [r4, #8]
 800d578:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800d57c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800d580:	2208      	movs	r2, #8
 800d582:	4629      	mov	r1, r5
 800d584:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d588:	f7fe faca 	bl	800bb20 <memset>
 800d58c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d590:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d594:	e7e9      	b.n	800d56a <__sfp+0x42>
 800d596:	bf00      	nop
 800d598:	0800f64c 	.word	0x0800f64c
 800d59c:	ffff0001 	.word	0xffff0001

0800d5a0 <_fwalk_reent>:
 800d5a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d5a4:	4680      	mov	r8, r0
 800d5a6:	4689      	mov	r9, r1
 800d5a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d5ac:	2600      	movs	r6, #0
 800d5ae:	b914      	cbnz	r4, 800d5b6 <_fwalk_reent+0x16>
 800d5b0:	4630      	mov	r0, r6
 800d5b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d5b6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800d5ba:	3f01      	subs	r7, #1
 800d5bc:	d501      	bpl.n	800d5c2 <_fwalk_reent+0x22>
 800d5be:	6824      	ldr	r4, [r4, #0]
 800d5c0:	e7f5      	b.n	800d5ae <_fwalk_reent+0xe>
 800d5c2:	89ab      	ldrh	r3, [r5, #12]
 800d5c4:	2b01      	cmp	r3, #1
 800d5c6:	d907      	bls.n	800d5d8 <_fwalk_reent+0x38>
 800d5c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d5cc:	3301      	adds	r3, #1
 800d5ce:	d003      	beq.n	800d5d8 <_fwalk_reent+0x38>
 800d5d0:	4629      	mov	r1, r5
 800d5d2:	4640      	mov	r0, r8
 800d5d4:	47c8      	blx	r9
 800d5d6:	4306      	orrs	r6, r0
 800d5d8:	3568      	adds	r5, #104	; 0x68
 800d5da:	e7ee      	b.n	800d5ba <_fwalk_reent+0x1a>

0800d5dc <_localeconv_r>:
 800d5dc:	4b04      	ldr	r3, [pc, #16]	; (800d5f0 <_localeconv_r+0x14>)
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	6a18      	ldr	r0, [r3, #32]
 800d5e2:	4b04      	ldr	r3, [pc, #16]	; (800d5f4 <_localeconv_r+0x18>)
 800d5e4:	2800      	cmp	r0, #0
 800d5e6:	bf08      	it	eq
 800d5e8:	4618      	moveq	r0, r3
 800d5ea:	30f0      	adds	r0, #240	; 0xf0
 800d5ec:	4770      	bx	lr
 800d5ee:	bf00      	nop
 800d5f0:	20000010 	.word	0x20000010
 800d5f4:	20000074 	.word	0x20000074

0800d5f8 <__swhatbuf_r>:
 800d5f8:	b570      	push	{r4, r5, r6, lr}
 800d5fa:	460e      	mov	r6, r1
 800d5fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d600:	2900      	cmp	r1, #0
 800d602:	b096      	sub	sp, #88	; 0x58
 800d604:	4614      	mov	r4, r2
 800d606:	461d      	mov	r5, r3
 800d608:	da07      	bge.n	800d61a <__swhatbuf_r+0x22>
 800d60a:	2300      	movs	r3, #0
 800d60c:	602b      	str	r3, [r5, #0]
 800d60e:	89b3      	ldrh	r3, [r6, #12]
 800d610:	061a      	lsls	r2, r3, #24
 800d612:	d410      	bmi.n	800d636 <__swhatbuf_r+0x3e>
 800d614:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d618:	e00e      	b.n	800d638 <__swhatbuf_r+0x40>
 800d61a:	466a      	mov	r2, sp
 800d61c:	f000 fdaa 	bl	800e174 <_fstat_r>
 800d620:	2800      	cmp	r0, #0
 800d622:	dbf2      	blt.n	800d60a <__swhatbuf_r+0x12>
 800d624:	9a01      	ldr	r2, [sp, #4]
 800d626:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d62a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d62e:	425a      	negs	r2, r3
 800d630:	415a      	adcs	r2, r3
 800d632:	602a      	str	r2, [r5, #0]
 800d634:	e7ee      	b.n	800d614 <__swhatbuf_r+0x1c>
 800d636:	2340      	movs	r3, #64	; 0x40
 800d638:	2000      	movs	r0, #0
 800d63a:	6023      	str	r3, [r4, #0]
 800d63c:	b016      	add	sp, #88	; 0x58
 800d63e:	bd70      	pop	{r4, r5, r6, pc}

0800d640 <__smakebuf_r>:
 800d640:	898b      	ldrh	r3, [r1, #12]
 800d642:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d644:	079d      	lsls	r5, r3, #30
 800d646:	4606      	mov	r6, r0
 800d648:	460c      	mov	r4, r1
 800d64a:	d507      	bpl.n	800d65c <__smakebuf_r+0x1c>
 800d64c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d650:	6023      	str	r3, [r4, #0]
 800d652:	6123      	str	r3, [r4, #16]
 800d654:	2301      	movs	r3, #1
 800d656:	6163      	str	r3, [r4, #20]
 800d658:	b002      	add	sp, #8
 800d65a:	bd70      	pop	{r4, r5, r6, pc}
 800d65c:	ab01      	add	r3, sp, #4
 800d65e:	466a      	mov	r2, sp
 800d660:	f7ff ffca 	bl	800d5f8 <__swhatbuf_r>
 800d664:	9900      	ldr	r1, [sp, #0]
 800d666:	4605      	mov	r5, r0
 800d668:	4630      	mov	r0, r6
 800d66a:	f000 fb73 	bl	800dd54 <_malloc_r>
 800d66e:	b948      	cbnz	r0, 800d684 <__smakebuf_r+0x44>
 800d670:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d674:	059a      	lsls	r2, r3, #22
 800d676:	d4ef      	bmi.n	800d658 <__smakebuf_r+0x18>
 800d678:	f023 0303 	bic.w	r3, r3, #3
 800d67c:	f043 0302 	orr.w	r3, r3, #2
 800d680:	81a3      	strh	r3, [r4, #12]
 800d682:	e7e3      	b.n	800d64c <__smakebuf_r+0xc>
 800d684:	4b0d      	ldr	r3, [pc, #52]	; (800d6bc <__smakebuf_r+0x7c>)
 800d686:	62b3      	str	r3, [r6, #40]	; 0x28
 800d688:	89a3      	ldrh	r3, [r4, #12]
 800d68a:	6020      	str	r0, [r4, #0]
 800d68c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d690:	81a3      	strh	r3, [r4, #12]
 800d692:	9b00      	ldr	r3, [sp, #0]
 800d694:	6163      	str	r3, [r4, #20]
 800d696:	9b01      	ldr	r3, [sp, #4]
 800d698:	6120      	str	r0, [r4, #16]
 800d69a:	b15b      	cbz	r3, 800d6b4 <__smakebuf_r+0x74>
 800d69c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d6a0:	4630      	mov	r0, r6
 800d6a2:	f000 fd79 	bl	800e198 <_isatty_r>
 800d6a6:	b128      	cbz	r0, 800d6b4 <__smakebuf_r+0x74>
 800d6a8:	89a3      	ldrh	r3, [r4, #12]
 800d6aa:	f023 0303 	bic.w	r3, r3, #3
 800d6ae:	f043 0301 	orr.w	r3, r3, #1
 800d6b2:	81a3      	strh	r3, [r4, #12]
 800d6b4:	89a3      	ldrh	r3, [r4, #12]
 800d6b6:	431d      	orrs	r5, r3
 800d6b8:	81a5      	strh	r5, [r4, #12]
 800d6ba:	e7cd      	b.n	800d658 <__smakebuf_r+0x18>
 800d6bc:	0800d491 	.word	0x0800d491

0800d6c0 <malloc>:
 800d6c0:	4b02      	ldr	r3, [pc, #8]	; (800d6cc <malloc+0xc>)
 800d6c2:	4601      	mov	r1, r0
 800d6c4:	6818      	ldr	r0, [r3, #0]
 800d6c6:	f000 bb45 	b.w	800dd54 <_malloc_r>
 800d6ca:	bf00      	nop
 800d6cc:	20000010 	.word	0x20000010

0800d6d0 <memcpy>:
 800d6d0:	b510      	push	{r4, lr}
 800d6d2:	1e43      	subs	r3, r0, #1
 800d6d4:	440a      	add	r2, r1
 800d6d6:	4291      	cmp	r1, r2
 800d6d8:	d100      	bne.n	800d6dc <memcpy+0xc>
 800d6da:	bd10      	pop	{r4, pc}
 800d6dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d6e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d6e4:	e7f7      	b.n	800d6d6 <memcpy+0x6>

0800d6e6 <_Balloc>:
 800d6e6:	b570      	push	{r4, r5, r6, lr}
 800d6e8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d6ea:	4604      	mov	r4, r0
 800d6ec:	460e      	mov	r6, r1
 800d6ee:	b93d      	cbnz	r5, 800d700 <_Balloc+0x1a>
 800d6f0:	2010      	movs	r0, #16
 800d6f2:	f7ff ffe5 	bl	800d6c0 <malloc>
 800d6f6:	6260      	str	r0, [r4, #36]	; 0x24
 800d6f8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d6fc:	6005      	str	r5, [r0, #0]
 800d6fe:	60c5      	str	r5, [r0, #12]
 800d700:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800d702:	68eb      	ldr	r3, [r5, #12]
 800d704:	b183      	cbz	r3, 800d728 <_Balloc+0x42>
 800d706:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d708:	68db      	ldr	r3, [r3, #12]
 800d70a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800d70e:	b9b8      	cbnz	r0, 800d740 <_Balloc+0x5a>
 800d710:	2101      	movs	r1, #1
 800d712:	fa01 f506 	lsl.w	r5, r1, r6
 800d716:	1d6a      	adds	r2, r5, #5
 800d718:	0092      	lsls	r2, r2, #2
 800d71a:	4620      	mov	r0, r4
 800d71c:	f000 fabe 	bl	800dc9c <_calloc_r>
 800d720:	b160      	cbz	r0, 800d73c <_Balloc+0x56>
 800d722:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800d726:	e00e      	b.n	800d746 <_Balloc+0x60>
 800d728:	2221      	movs	r2, #33	; 0x21
 800d72a:	2104      	movs	r1, #4
 800d72c:	4620      	mov	r0, r4
 800d72e:	f000 fab5 	bl	800dc9c <_calloc_r>
 800d732:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d734:	60e8      	str	r0, [r5, #12]
 800d736:	68db      	ldr	r3, [r3, #12]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d1e4      	bne.n	800d706 <_Balloc+0x20>
 800d73c:	2000      	movs	r0, #0
 800d73e:	bd70      	pop	{r4, r5, r6, pc}
 800d740:	6802      	ldr	r2, [r0, #0]
 800d742:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800d746:	2300      	movs	r3, #0
 800d748:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d74c:	e7f7      	b.n	800d73e <_Balloc+0x58>

0800d74e <_Bfree>:
 800d74e:	b570      	push	{r4, r5, r6, lr}
 800d750:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800d752:	4606      	mov	r6, r0
 800d754:	460d      	mov	r5, r1
 800d756:	b93c      	cbnz	r4, 800d768 <_Bfree+0x1a>
 800d758:	2010      	movs	r0, #16
 800d75a:	f7ff ffb1 	bl	800d6c0 <malloc>
 800d75e:	6270      	str	r0, [r6, #36]	; 0x24
 800d760:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d764:	6004      	str	r4, [r0, #0]
 800d766:	60c4      	str	r4, [r0, #12]
 800d768:	b13d      	cbz	r5, 800d77a <_Bfree+0x2c>
 800d76a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d76c:	686a      	ldr	r2, [r5, #4]
 800d76e:	68db      	ldr	r3, [r3, #12]
 800d770:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d774:	6029      	str	r1, [r5, #0]
 800d776:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800d77a:	bd70      	pop	{r4, r5, r6, pc}

0800d77c <__multadd>:
 800d77c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d780:	690d      	ldr	r5, [r1, #16]
 800d782:	461f      	mov	r7, r3
 800d784:	4606      	mov	r6, r0
 800d786:	460c      	mov	r4, r1
 800d788:	f101 0c14 	add.w	ip, r1, #20
 800d78c:	2300      	movs	r3, #0
 800d78e:	f8dc 0000 	ldr.w	r0, [ip]
 800d792:	b281      	uxth	r1, r0
 800d794:	fb02 7101 	mla	r1, r2, r1, r7
 800d798:	0c0f      	lsrs	r7, r1, #16
 800d79a:	0c00      	lsrs	r0, r0, #16
 800d79c:	fb02 7000 	mla	r0, r2, r0, r7
 800d7a0:	b289      	uxth	r1, r1
 800d7a2:	3301      	adds	r3, #1
 800d7a4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800d7a8:	429d      	cmp	r5, r3
 800d7aa:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800d7ae:	f84c 1b04 	str.w	r1, [ip], #4
 800d7b2:	dcec      	bgt.n	800d78e <__multadd+0x12>
 800d7b4:	b1d7      	cbz	r7, 800d7ec <__multadd+0x70>
 800d7b6:	68a3      	ldr	r3, [r4, #8]
 800d7b8:	42ab      	cmp	r3, r5
 800d7ba:	dc12      	bgt.n	800d7e2 <__multadd+0x66>
 800d7bc:	6861      	ldr	r1, [r4, #4]
 800d7be:	4630      	mov	r0, r6
 800d7c0:	3101      	adds	r1, #1
 800d7c2:	f7ff ff90 	bl	800d6e6 <_Balloc>
 800d7c6:	6922      	ldr	r2, [r4, #16]
 800d7c8:	3202      	adds	r2, #2
 800d7ca:	f104 010c 	add.w	r1, r4, #12
 800d7ce:	4680      	mov	r8, r0
 800d7d0:	0092      	lsls	r2, r2, #2
 800d7d2:	300c      	adds	r0, #12
 800d7d4:	f7ff ff7c 	bl	800d6d0 <memcpy>
 800d7d8:	4621      	mov	r1, r4
 800d7da:	4630      	mov	r0, r6
 800d7dc:	f7ff ffb7 	bl	800d74e <_Bfree>
 800d7e0:	4644      	mov	r4, r8
 800d7e2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d7e6:	3501      	adds	r5, #1
 800d7e8:	615f      	str	r7, [r3, #20]
 800d7ea:	6125      	str	r5, [r4, #16]
 800d7ec:	4620      	mov	r0, r4
 800d7ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d7f2 <__hi0bits>:
 800d7f2:	0c02      	lsrs	r2, r0, #16
 800d7f4:	0412      	lsls	r2, r2, #16
 800d7f6:	4603      	mov	r3, r0
 800d7f8:	b9b2      	cbnz	r2, 800d828 <__hi0bits+0x36>
 800d7fa:	0403      	lsls	r3, r0, #16
 800d7fc:	2010      	movs	r0, #16
 800d7fe:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800d802:	bf04      	itt	eq
 800d804:	021b      	lsleq	r3, r3, #8
 800d806:	3008      	addeq	r0, #8
 800d808:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800d80c:	bf04      	itt	eq
 800d80e:	011b      	lsleq	r3, r3, #4
 800d810:	3004      	addeq	r0, #4
 800d812:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800d816:	bf04      	itt	eq
 800d818:	009b      	lsleq	r3, r3, #2
 800d81a:	3002      	addeq	r0, #2
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	db06      	blt.n	800d82e <__hi0bits+0x3c>
 800d820:	005b      	lsls	r3, r3, #1
 800d822:	d503      	bpl.n	800d82c <__hi0bits+0x3a>
 800d824:	3001      	adds	r0, #1
 800d826:	4770      	bx	lr
 800d828:	2000      	movs	r0, #0
 800d82a:	e7e8      	b.n	800d7fe <__hi0bits+0xc>
 800d82c:	2020      	movs	r0, #32
 800d82e:	4770      	bx	lr

0800d830 <__lo0bits>:
 800d830:	6803      	ldr	r3, [r0, #0]
 800d832:	f013 0207 	ands.w	r2, r3, #7
 800d836:	4601      	mov	r1, r0
 800d838:	d00b      	beq.n	800d852 <__lo0bits+0x22>
 800d83a:	07da      	lsls	r2, r3, #31
 800d83c:	d423      	bmi.n	800d886 <__lo0bits+0x56>
 800d83e:	0798      	lsls	r0, r3, #30
 800d840:	bf49      	itett	mi
 800d842:	085b      	lsrmi	r3, r3, #1
 800d844:	089b      	lsrpl	r3, r3, #2
 800d846:	2001      	movmi	r0, #1
 800d848:	600b      	strmi	r3, [r1, #0]
 800d84a:	bf5c      	itt	pl
 800d84c:	600b      	strpl	r3, [r1, #0]
 800d84e:	2002      	movpl	r0, #2
 800d850:	4770      	bx	lr
 800d852:	b298      	uxth	r0, r3
 800d854:	b9a8      	cbnz	r0, 800d882 <__lo0bits+0x52>
 800d856:	0c1b      	lsrs	r3, r3, #16
 800d858:	2010      	movs	r0, #16
 800d85a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d85e:	bf04      	itt	eq
 800d860:	0a1b      	lsreq	r3, r3, #8
 800d862:	3008      	addeq	r0, #8
 800d864:	071a      	lsls	r2, r3, #28
 800d866:	bf04      	itt	eq
 800d868:	091b      	lsreq	r3, r3, #4
 800d86a:	3004      	addeq	r0, #4
 800d86c:	079a      	lsls	r2, r3, #30
 800d86e:	bf04      	itt	eq
 800d870:	089b      	lsreq	r3, r3, #2
 800d872:	3002      	addeq	r0, #2
 800d874:	07da      	lsls	r2, r3, #31
 800d876:	d402      	bmi.n	800d87e <__lo0bits+0x4e>
 800d878:	085b      	lsrs	r3, r3, #1
 800d87a:	d006      	beq.n	800d88a <__lo0bits+0x5a>
 800d87c:	3001      	adds	r0, #1
 800d87e:	600b      	str	r3, [r1, #0]
 800d880:	4770      	bx	lr
 800d882:	4610      	mov	r0, r2
 800d884:	e7e9      	b.n	800d85a <__lo0bits+0x2a>
 800d886:	2000      	movs	r0, #0
 800d888:	4770      	bx	lr
 800d88a:	2020      	movs	r0, #32
 800d88c:	4770      	bx	lr

0800d88e <__i2b>:
 800d88e:	b510      	push	{r4, lr}
 800d890:	460c      	mov	r4, r1
 800d892:	2101      	movs	r1, #1
 800d894:	f7ff ff27 	bl	800d6e6 <_Balloc>
 800d898:	2201      	movs	r2, #1
 800d89a:	6144      	str	r4, [r0, #20]
 800d89c:	6102      	str	r2, [r0, #16]
 800d89e:	bd10      	pop	{r4, pc}

0800d8a0 <__multiply>:
 800d8a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8a4:	4614      	mov	r4, r2
 800d8a6:	690a      	ldr	r2, [r1, #16]
 800d8a8:	6923      	ldr	r3, [r4, #16]
 800d8aa:	429a      	cmp	r2, r3
 800d8ac:	bfb8      	it	lt
 800d8ae:	460b      	movlt	r3, r1
 800d8b0:	4688      	mov	r8, r1
 800d8b2:	bfbc      	itt	lt
 800d8b4:	46a0      	movlt	r8, r4
 800d8b6:	461c      	movlt	r4, r3
 800d8b8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d8bc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d8c0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d8c4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d8c8:	eb07 0609 	add.w	r6, r7, r9
 800d8cc:	42b3      	cmp	r3, r6
 800d8ce:	bfb8      	it	lt
 800d8d0:	3101      	addlt	r1, #1
 800d8d2:	f7ff ff08 	bl	800d6e6 <_Balloc>
 800d8d6:	f100 0514 	add.w	r5, r0, #20
 800d8da:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800d8de:	462b      	mov	r3, r5
 800d8e0:	2200      	movs	r2, #0
 800d8e2:	4573      	cmp	r3, lr
 800d8e4:	d316      	bcc.n	800d914 <__multiply+0x74>
 800d8e6:	f104 0214 	add.w	r2, r4, #20
 800d8ea:	f108 0114 	add.w	r1, r8, #20
 800d8ee:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800d8f2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800d8f6:	9300      	str	r3, [sp, #0]
 800d8f8:	9b00      	ldr	r3, [sp, #0]
 800d8fa:	9201      	str	r2, [sp, #4]
 800d8fc:	4293      	cmp	r3, r2
 800d8fe:	d80c      	bhi.n	800d91a <__multiply+0x7a>
 800d900:	2e00      	cmp	r6, #0
 800d902:	dd03      	ble.n	800d90c <__multiply+0x6c>
 800d904:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d05d      	beq.n	800d9c8 <__multiply+0x128>
 800d90c:	6106      	str	r6, [r0, #16]
 800d90e:	b003      	add	sp, #12
 800d910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d914:	f843 2b04 	str.w	r2, [r3], #4
 800d918:	e7e3      	b.n	800d8e2 <__multiply+0x42>
 800d91a:	f8b2 b000 	ldrh.w	fp, [r2]
 800d91e:	f1bb 0f00 	cmp.w	fp, #0
 800d922:	d023      	beq.n	800d96c <__multiply+0xcc>
 800d924:	4689      	mov	r9, r1
 800d926:	46ac      	mov	ip, r5
 800d928:	f04f 0800 	mov.w	r8, #0
 800d92c:	f859 4b04 	ldr.w	r4, [r9], #4
 800d930:	f8dc a000 	ldr.w	sl, [ip]
 800d934:	b2a3      	uxth	r3, r4
 800d936:	fa1f fa8a 	uxth.w	sl, sl
 800d93a:	fb0b a303 	mla	r3, fp, r3, sl
 800d93e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d942:	f8dc 4000 	ldr.w	r4, [ip]
 800d946:	4443      	add	r3, r8
 800d948:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800d94c:	fb0b 840a 	mla	r4, fp, sl, r8
 800d950:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800d954:	46e2      	mov	sl, ip
 800d956:	b29b      	uxth	r3, r3
 800d958:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800d95c:	454f      	cmp	r7, r9
 800d95e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800d962:	f84a 3b04 	str.w	r3, [sl], #4
 800d966:	d82b      	bhi.n	800d9c0 <__multiply+0x120>
 800d968:	f8cc 8004 	str.w	r8, [ip, #4]
 800d96c:	9b01      	ldr	r3, [sp, #4]
 800d96e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800d972:	3204      	adds	r2, #4
 800d974:	f1ba 0f00 	cmp.w	sl, #0
 800d978:	d020      	beq.n	800d9bc <__multiply+0x11c>
 800d97a:	682b      	ldr	r3, [r5, #0]
 800d97c:	4689      	mov	r9, r1
 800d97e:	46a8      	mov	r8, r5
 800d980:	f04f 0b00 	mov.w	fp, #0
 800d984:	f8b9 c000 	ldrh.w	ip, [r9]
 800d988:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800d98c:	fb0a 440c 	mla	r4, sl, ip, r4
 800d990:	445c      	add	r4, fp
 800d992:	46c4      	mov	ip, r8
 800d994:	b29b      	uxth	r3, r3
 800d996:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800d99a:	f84c 3b04 	str.w	r3, [ip], #4
 800d99e:	f859 3b04 	ldr.w	r3, [r9], #4
 800d9a2:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800d9a6:	0c1b      	lsrs	r3, r3, #16
 800d9a8:	fb0a b303 	mla	r3, sl, r3, fp
 800d9ac:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800d9b0:	454f      	cmp	r7, r9
 800d9b2:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800d9b6:	d805      	bhi.n	800d9c4 <__multiply+0x124>
 800d9b8:	f8c8 3004 	str.w	r3, [r8, #4]
 800d9bc:	3504      	adds	r5, #4
 800d9be:	e79b      	b.n	800d8f8 <__multiply+0x58>
 800d9c0:	46d4      	mov	ip, sl
 800d9c2:	e7b3      	b.n	800d92c <__multiply+0x8c>
 800d9c4:	46e0      	mov	r8, ip
 800d9c6:	e7dd      	b.n	800d984 <__multiply+0xe4>
 800d9c8:	3e01      	subs	r6, #1
 800d9ca:	e799      	b.n	800d900 <__multiply+0x60>

0800d9cc <__pow5mult>:
 800d9cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d9d0:	4615      	mov	r5, r2
 800d9d2:	f012 0203 	ands.w	r2, r2, #3
 800d9d6:	4606      	mov	r6, r0
 800d9d8:	460f      	mov	r7, r1
 800d9da:	d007      	beq.n	800d9ec <__pow5mult+0x20>
 800d9dc:	3a01      	subs	r2, #1
 800d9de:	4c21      	ldr	r4, [pc, #132]	; (800da64 <__pow5mult+0x98>)
 800d9e0:	2300      	movs	r3, #0
 800d9e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d9e6:	f7ff fec9 	bl	800d77c <__multadd>
 800d9ea:	4607      	mov	r7, r0
 800d9ec:	10ad      	asrs	r5, r5, #2
 800d9ee:	d035      	beq.n	800da5c <__pow5mult+0x90>
 800d9f0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d9f2:	b93c      	cbnz	r4, 800da04 <__pow5mult+0x38>
 800d9f4:	2010      	movs	r0, #16
 800d9f6:	f7ff fe63 	bl	800d6c0 <malloc>
 800d9fa:	6270      	str	r0, [r6, #36]	; 0x24
 800d9fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800da00:	6004      	str	r4, [r0, #0]
 800da02:	60c4      	str	r4, [r0, #12]
 800da04:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800da08:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800da0c:	b94c      	cbnz	r4, 800da22 <__pow5mult+0x56>
 800da0e:	f240 2171 	movw	r1, #625	; 0x271
 800da12:	4630      	mov	r0, r6
 800da14:	f7ff ff3b 	bl	800d88e <__i2b>
 800da18:	2300      	movs	r3, #0
 800da1a:	f8c8 0008 	str.w	r0, [r8, #8]
 800da1e:	4604      	mov	r4, r0
 800da20:	6003      	str	r3, [r0, #0]
 800da22:	f04f 0800 	mov.w	r8, #0
 800da26:	07eb      	lsls	r3, r5, #31
 800da28:	d50a      	bpl.n	800da40 <__pow5mult+0x74>
 800da2a:	4639      	mov	r1, r7
 800da2c:	4622      	mov	r2, r4
 800da2e:	4630      	mov	r0, r6
 800da30:	f7ff ff36 	bl	800d8a0 <__multiply>
 800da34:	4639      	mov	r1, r7
 800da36:	4681      	mov	r9, r0
 800da38:	4630      	mov	r0, r6
 800da3a:	f7ff fe88 	bl	800d74e <_Bfree>
 800da3e:	464f      	mov	r7, r9
 800da40:	106d      	asrs	r5, r5, #1
 800da42:	d00b      	beq.n	800da5c <__pow5mult+0x90>
 800da44:	6820      	ldr	r0, [r4, #0]
 800da46:	b938      	cbnz	r0, 800da58 <__pow5mult+0x8c>
 800da48:	4622      	mov	r2, r4
 800da4a:	4621      	mov	r1, r4
 800da4c:	4630      	mov	r0, r6
 800da4e:	f7ff ff27 	bl	800d8a0 <__multiply>
 800da52:	6020      	str	r0, [r4, #0]
 800da54:	f8c0 8000 	str.w	r8, [r0]
 800da58:	4604      	mov	r4, r0
 800da5a:	e7e4      	b.n	800da26 <__pow5mult+0x5a>
 800da5c:	4638      	mov	r0, r7
 800da5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da62:	bf00      	nop
 800da64:	0800f7e0 	.word	0x0800f7e0

0800da68 <__lshift>:
 800da68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da6c:	460c      	mov	r4, r1
 800da6e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800da72:	6923      	ldr	r3, [r4, #16]
 800da74:	6849      	ldr	r1, [r1, #4]
 800da76:	eb0a 0903 	add.w	r9, sl, r3
 800da7a:	68a3      	ldr	r3, [r4, #8]
 800da7c:	4607      	mov	r7, r0
 800da7e:	4616      	mov	r6, r2
 800da80:	f109 0501 	add.w	r5, r9, #1
 800da84:	42ab      	cmp	r3, r5
 800da86:	db32      	blt.n	800daee <__lshift+0x86>
 800da88:	4638      	mov	r0, r7
 800da8a:	f7ff fe2c 	bl	800d6e6 <_Balloc>
 800da8e:	2300      	movs	r3, #0
 800da90:	4680      	mov	r8, r0
 800da92:	f100 0114 	add.w	r1, r0, #20
 800da96:	461a      	mov	r2, r3
 800da98:	4553      	cmp	r3, sl
 800da9a:	db2b      	blt.n	800daf4 <__lshift+0x8c>
 800da9c:	6920      	ldr	r0, [r4, #16]
 800da9e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800daa2:	f104 0314 	add.w	r3, r4, #20
 800daa6:	f016 021f 	ands.w	r2, r6, #31
 800daaa:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800daae:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800dab2:	d025      	beq.n	800db00 <__lshift+0x98>
 800dab4:	f1c2 0e20 	rsb	lr, r2, #32
 800dab8:	2000      	movs	r0, #0
 800daba:	681e      	ldr	r6, [r3, #0]
 800dabc:	468a      	mov	sl, r1
 800dabe:	4096      	lsls	r6, r2
 800dac0:	4330      	orrs	r0, r6
 800dac2:	f84a 0b04 	str.w	r0, [sl], #4
 800dac6:	f853 0b04 	ldr.w	r0, [r3], #4
 800daca:	459c      	cmp	ip, r3
 800dacc:	fa20 f00e 	lsr.w	r0, r0, lr
 800dad0:	d814      	bhi.n	800dafc <__lshift+0x94>
 800dad2:	6048      	str	r0, [r1, #4]
 800dad4:	b108      	cbz	r0, 800dada <__lshift+0x72>
 800dad6:	f109 0502 	add.w	r5, r9, #2
 800dada:	3d01      	subs	r5, #1
 800dadc:	4638      	mov	r0, r7
 800dade:	f8c8 5010 	str.w	r5, [r8, #16]
 800dae2:	4621      	mov	r1, r4
 800dae4:	f7ff fe33 	bl	800d74e <_Bfree>
 800dae8:	4640      	mov	r0, r8
 800daea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800daee:	3101      	adds	r1, #1
 800daf0:	005b      	lsls	r3, r3, #1
 800daf2:	e7c7      	b.n	800da84 <__lshift+0x1c>
 800daf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800daf8:	3301      	adds	r3, #1
 800dafa:	e7cd      	b.n	800da98 <__lshift+0x30>
 800dafc:	4651      	mov	r1, sl
 800dafe:	e7dc      	b.n	800daba <__lshift+0x52>
 800db00:	3904      	subs	r1, #4
 800db02:	f853 2b04 	ldr.w	r2, [r3], #4
 800db06:	f841 2f04 	str.w	r2, [r1, #4]!
 800db0a:	459c      	cmp	ip, r3
 800db0c:	d8f9      	bhi.n	800db02 <__lshift+0x9a>
 800db0e:	e7e4      	b.n	800dada <__lshift+0x72>

0800db10 <__mcmp>:
 800db10:	6903      	ldr	r3, [r0, #16]
 800db12:	690a      	ldr	r2, [r1, #16]
 800db14:	1a9b      	subs	r3, r3, r2
 800db16:	b530      	push	{r4, r5, lr}
 800db18:	d10c      	bne.n	800db34 <__mcmp+0x24>
 800db1a:	0092      	lsls	r2, r2, #2
 800db1c:	3014      	adds	r0, #20
 800db1e:	3114      	adds	r1, #20
 800db20:	1884      	adds	r4, r0, r2
 800db22:	4411      	add	r1, r2
 800db24:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800db28:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800db2c:	4295      	cmp	r5, r2
 800db2e:	d003      	beq.n	800db38 <__mcmp+0x28>
 800db30:	d305      	bcc.n	800db3e <__mcmp+0x2e>
 800db32:	2301      	movs	r3, #1
 800db34:	4618      	mov	r0, r3
 800db36:	bd30      	pop	{r4, r5, pc}
 800db38:	42a0      	cmp	r0, r4
 800db3a:	d3f3      	bcc.n	800db24 <__mcmp+0x14>
 800db3c:	e7fa      	b.n	800db34 <__mcmp+0x24>
 800db3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800db42:	e7f7      	b.n	800db34 <__mcmp+0x24>

0800db44 <__mdiff>:
 800db44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db48:	460d      	mov	r5, r1
 800db4a:	4607      	mov	r7, r0
 800db4c:	4611      	mov	r1, r2
 800db4e:	4628      	mov	r0, r5
 800db50:	4614      	mov	r4, r2
 800db52:	f7ff ffdd 	bl	800db10 <__mcmp>
 800db56:	1e06      	subs	r6, r0, #0
 800db58:	d108      	bne.n	800db6c <__mdiff+0x28>
 800db5a:	4631      	mov	r1, r6
 800db5c:	4638      	mov	r0, r7
 800db5e:	f7ff fdc2 	bl	800d6e6 <_Balloc>
 800db62:	2301      	movs	r3, #1
 800db64:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800db68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db6c:	bfa4      	itt	ge
 800db6e:	4623      	movge	r3, r4
 800db70:	462c      	movge	r4, r5
 800db72:	4638      	mov	r0, r7
 800db74:	6861      	ldr	r1, [r4, #4]
 800db76:	bfa6      	itte	ge
 800db78:	461d      	movge	r5, r3
 800db7a:	2600      	movge	r6, #0
 800db7c:	2601      	movlt	r6, #1
 800db7e:	f7ff fdb2 	bl	800d6e6 <_Balloc>
 800db82:	692b      	ldr	r3, [r5, #16]
 800db84:	60c6      	str	r6, [r0, #12]
 800db86:	6926      	ldr	r6, [r4, #16]
 800db88:	f105 0914 	add.w	r9, r5, #20
 800db8c:	f104 0214 	add.w	r2, r4, #20
 800db90:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800db94:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800db98:	f100 0514 	add.w	r5, r0, #20
 800db9c:	f04f 0e00 	mov.w	lr, #0
 800dba0:	f852 ab04 	ldr.w	sl, [r2], #4
 800dba4:	f859 4b04 	ldr.w	r4, [r9], #4
 800dba8:	fa1e f18a 	uxtah	r1, lr, sl
 800dbac:	b2a3      	uxth	r3, r4
 800dbae:	1ac9      	subs	r1, r1, r3
 800dbb0:	0c23      	lsrs	r3, r4, #16
 800dbb2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800dbb6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800dbba:	b289      	uxth	r1, r1
 800dbbc:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800dbc0:	45c8      	cmp	r8, r9
 800dbc2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800dbc6:	4694      	mov	ip, r2
 800dbc8:	f845 3b04 	str.w	r3, [r5], #4
 800dbcc:	d8e8      	bhi.n	800dba0 <__mdiff+0x5c>
 800dbce:	45bc      	cmp	ip, r7
 800dbd0:	d304      	bcc.n	800dbdc <__mdiff+0x98>
 800dbd2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800dbd6:	b183      	cbz	r3, 800dbfa <__mdiff+0xb6>
 800dbd8:	6106      	str	r6, [r0, #16]
 800dbda:	e7c5      	b.n	800db68 <__mdiff+0x24>
 800dbdc:	f85c 1b04 	ldr.w	r1, [ip], #4
 800dbe0:	fa1e f381 	uxtah	r3, lr, r1
 800dbe4:	141a      	asrs	r2, r3, #16
 800dbe6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800dbea:	b29b      	uxth	r3, r3
 800dbec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dbf0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800dbf4:	f845 3b04 	str.w	r3, [r5], #4
 800dbf8:	e7e9      	b.n	800dbce <__mdiff+0x8a>
 800dbfa:	3e01      	subs	r6, #1
 800dbfc:	e7e9      	b.n	800dbd2 <__mdiff+0x8e>

0800dbfe <__d2b>:
 800dbfe:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dc02:	460e      	mov	r6, r1
 800dc04:	2101      	movs	r1, #1
 800dc06:	ec59 8b10 	vmov	r8, r9, d0
 800dc0a:	4615      	mov	r5, r2
 800dc0c:	f7ff fd6b 	bl	800d6e6 <_Balloc>
 800dc10:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800dc14:	4607      	mov	r7, r0
 800dc16:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800dc1a:	bb34      	cbnz	r4, 800dc6a <__d2b+0x6c>
 800dc1c:	9301      	str	r3, [sp, #4]
 800dc1e:	f1b8 0300 	subs.w	r3, r8, #0
 800dc22:	d027      	beq.n	800dc74 <__d2b+0x76>
 800dc24:	a802      	add	r0, sp, #8
 800dc26:	f840 3d08 	str.w	r3, [r0, #-8]!
 800dc2a:	f7ff fe01 	bl	800d830 <__lo0bits>
 800dc2e:	9900      	ldr	r1, [sp, #0]
 800dc30:	b1f0      	cbz	r0, 800dc70 <__d2b+0x72>
 800dc32:	9a01      	ldr	r2, [sp, #4]
 800dc34:	f1c0 0320 	rsb	r3, r0, #32
 800dc38:	fa02 f303 	lsl.w	r3, r2, r3
 800dc3c:	430b      	orrs	r3, r1
 800dc3e:	40c2      	lsrs	r2, r0
 800dc40:	617b      	str	r3, [r7, #20]
 800dc42:	9201      	str	r2, [sp, #4]
 800dc44:	9b01      	ldr	r3, [sp, #4]
 800dc46:	61bb      	str	r3, [r7, #24]
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	bf14      	ite	ne
 800dc4c:	2102      	movne	r1, #2
 800dc4e:	2101      	moveq	r1, #1
 800dc50:	6139      	str	r1, [r7, #16]
 800dc52:	b1c4      	cbz	r4, 800dc86 <__d2b+0x88>
 800dc54:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800dc58:	4404      	add	r4, r0
 800dc5a:	6034      	str	r4, [r6, #0]
 800dc5c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800dc60:	6028      	str	r0, [r5, #0]
 800dc62:	4638      	mov	r0, r7
 800dc64:	b003      	add	sp, #12
 800dc66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dc6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dc6e:	e7d5      	b.n	800dc1c <__d2b+0x1e>
 800dc70:	6179      	str	r1, [r7, #20]
 800dc72:	e7e7      	b.n	800dc44 <__d2b+0x46>
 800dc74:	a801      	add	r0, sp, #4
 800dc76:	f7ff fddb 	bl	800d830 <__lo0bits>
 800dc7a:	9b01      	ldr	r3, [sp, #4]
 800dc7c:	617b      	str	r3, [r7, #20]
 800dc7e:	2101      	movs	r1, #1
 800dc80:	6139      	str	r1, [r7, #16]
 800dc82:	3020      	adds	r0, #32
 800dc84:	e7e5      	b.n	800dc52 <__d2b+0x54>
 800dc86:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800dc8a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800dc8e:	6030      	str	r0, [r6, #0]
 800dc90:	6918      	ldr	r0, [r3, #16]
 800dc92:	f7ff fdae 	bl	800d7f2 <__hi0bits>
 800dc96:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800dc9a:	e7e1      	b.n	800dc60 <__d2b+0x62>

0800dc9c <_calloc_r>:
 800dc9c:	b538      	push	{r3, r4, r5, lr}
 800dc9e:	fb02 f401 	mul.w	r4, r2, r1
 800dca2:	4621      	mov	r1, r4
 800dca4:	f000 f856 	bl	800dd54 <_malloc_r>
 800dca8:	4605      	mov	r5, r0
 800dcaa:	b118      	cbz	r0, 800dcb4 <_calloc_r+0x18>
 800dcac:	4622      	mov	r2, r4
 800dcae:	2100      	movs	r1, #0
 800dcb0:	f7fd ff36 	bl	800bb20 <memset>
 800dcb4:	4628      	mov	r0, r5
 800dcb6:	bd38      	pop	{r3, r4, r5, pc}

0800dcb8 <_free_r>:
 800dcb8:	b538      	push	{r3, r4, r5, lr}
 800dcba:	4605      	mov	r5, r0
 800dcbc:	2900      	cmp	r1, #0
 800dcbe:	d045      	beq.n	800dd4c <_free_r+0x94>
 800dcc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dcc4:	1f0c      	subs	r4, r1, #4
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	bfb8      	it	lt
 800dcca:	18e4      	addlt	r4, r4, r3
 800dccc:	f000 fa98 	bl	800e200 <__malloc_lock>
 800dcd0:	4a1f      	ldr	r2, [pc, #124]	; (800dd50 <_free_r+0x98>)
 800dcd2:	6813      	ldr	r3, [r2, #0]
 800dcd4:	4610      	mov	r0, r2
 800dcd6:	b933      	cbnz	r3, 800dce6 <_free_r+0x2e>
 800dcd8:	6063      	str	r3, [r4, #4]
 800dcda:	6014      	str	r4, [r2, #0]
 800dcdc:	4628      	mov	r0, r5
 800dcde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dce2:	f000 ba8e 	b.w	800e202 <__malloc_unlock>
 800dce6:	42a3      	cmp	r3, r4
 800dce8:	d90c      	bls.n	800dd04 <_free_r+0x4c>
 800dcea:	6821      	ldr	r1, [r4, #0]
 800dcec:	1862      	adds	r2, r4, r1
 800dcee:	4293      	cmp	r3, r2
 800dcf0:	bf04      	itt	eq
 800dcf2:	681a      	ldreq	r2, [r3, #0]
 800dcf4:	685b      	ldreq	r3, [r3, #4]
 800dcf6:	6063      	str	r3, [r4, #4]
 800dcf8:	bf04      	itt	eq
 800dcfa:	1852      	addeq	r2, r2, r1
 800dcfc:	6022      	streq	r2, [r4, #0]
 800dcfe:	6004      	str	r4, [r0, #0]
 800dd00:	e7ec      	b.n	800dcdc <_free_r+0x24>
 800dd02:	4613      	mov	r3, r2
 800dd04:	685a      	ldr	r2, [r3, #4]
 800dd06:	b10a      	cbz	r2, 800dd0c <_free_r+0x54>
 800dd08:	42a2      	cmp	r2, r4
 800dd0a:	d9fa      	bls.n	800dd02 <_free_r+0x4a>
 800dd0c:	6819      	ldr	r1, [r3, #0]
 800dd0e:	1858      	adds	r0, r3, r1
 800dd10:	42a0      	cmp	r0, r4
 800dd12:	d10b      	bne.n	800dd2c <_free_r+0x74>
 800dd14:	6820      	ldr	r0, [r4, #0]
 800dd16:	4401      	add	r1, r0
 800dd18:	1858      	adds	r0, r3, r1
 800dd1a:	4282      	cmp	r2, r0
 800dd1c:	6019      	str	r1, [r3, #0]
 800dd1e:	d1dd      	bne.n	800dcdc <_free_r+0x24>
 800dd20:	6810      	ldr	r0, [r2, #0]
 800dd22:	6852      	ldr	r2, [r2, #4]
 800dd24:	605a      	str	r2, [r3, #4]
 800dd26:	4401      	add	r1, r0
 800dd28:	6019      	str	r1, [r3, #0]
 800dd2a:	e7d7      	b.n	800dcdc <_free_r+0x24>
 800dd2c:	d902      	bls.n	800dd34 <_free_r+0x7c>
 800dd2e:	230c      	movs	r3, #12
 800dd30:	602b      	str	r3, [r5, #0]
 800dd32:	e7d3      	b.n	800dcdc <_free_r+0x24>
 800dd34:	6820      	ldr	r0, [r4, #0]
 800dd36:	1821      	adds	r1, r4, r0
 800dd38:	428a      	cmp	r2, r1
 800dd3a:	bf04      	itt	eq
 800dd3c:	6811      	ldreq	r1, [r2, #0]
 800dd3e:	6852      	ldreq	r2, [r2, #4]
 800dd40:	6062      	str	r2, [r4, #4]
 800dd42:	bf04      	itt	eq
 800dd44:	1809      	addeq	r1, r1, r0
 800dd46:	6021      	streq	r1, [r4, #0]
 800dd48:	605c      	str	r4, [r3, #4]
 800dd4a:	e7c7      	b.n	800dcdc <_free_r+0x24>
 800dd4c:	bd38      	pop	{r3, r4, r5, pc}
 800dd4e:	bf00      	nop
 800dd50:	20000228 	.word	0x20000228

0800dd54 <_malloc_r>:
 800dd54:	b570      	push	{r4, r5, r6, lr}
 800dd56:	1ccd      	adds	r5, r1, #3
 800dd58:	f025 0503 	bic.w	r5, r5, #3
 800dd5c:	3508      	adds	r5, #8
 800dd5e:	2d0c      	cmp	r5, #12
 800dd60:	bf38      	it	cc
 800dd62:	250c      	movcc	r5, #12
 800dd64:	2d00      	cmp	r5, #0
 800dd66:	4606      	mov	r6, r0
 800dd68:	db01      	blt.n	800dd6e <_malloc_r+0x1a>
 800dd6a:	42a9      	cmp	r1, r5
 800dd6c:	d903      	bls.n	800dd76 <_malloc_r+0x22>
 800dd6e:	230c      	movs	r3, #12
 800dd70:	6033      	str	r3, [r6, #0]
 800dd72:	2000      	movs	r0, #0
 800dd74:	bd70      	pop	{r4, r5, r6, pc}
 800dd76:	f000 fa43 	bl	800e200 <__malloc_lock>
 800dd7a:	4a21      	ldr	r2, [pc, #132]	; (800de00 <_malloc_r+0xac>)
 800dd7c:	6814      	ldr	r4, [r2, #0]
 800dd7e:	4621      	mov	r1, r4
 800dd80:	b991      	cbnz	r1, 800dda8 <_malloc_r+0x54>
 800dd82:	4c20      	ldr	r4, [pc, #128]	; (800de04 <_malloc_r+0xb0>)
 800dd84:	6823      	ldr	r3, [r4, #0]
 800dd86:	b91b      	cbnz	r3, 800dd90 <_malloc_r+0x3c>
 800dd88:	4630      	mov	r0, r6
 800dd8a:	f000 f97d 	bl	800e088 <_sbrk_r>
 800dd8e:	6020      	str	r0, [r4, #0]
 800dd90:	4629      	mov	r1, r5
 800dd92:	4630      	mov	r0, r6
 800dd94:	f000 f978 	bl	800e088 <_sbrk_r>
 800dd98:	1c43      	adds	r3, r0, #1
 800dd9a:	d124      	bne.n	800dde6 <_malloc_r+0x92>
 800dd9c:	230c      	movs	r3, #12
 800dd9e:	6033      	str	r3, [r6, #0]
 800dda0:	4630      	mov	r0, r6
 800dda2:	f000 fa2e 	bl	800e202 <__malloc_unlock>
 800dda6:	e7e4      	b.n	800dd72 <_malloc_r+0x1e>
 800dda8:	680b      	ldr	r3, [r1, #0]
 800ddaa:	1b5b      	subs	r3, r3, r5
 800ddac:	d418      	bmi.n	800dde0 <_malloc_r+0x8c>
 800ddae:	2b0b      	cmp	r3, #11
 800ddb0:	d90f      	bls.n	800ddd2 <_malloc_r+0x7e>
 800ddb2:	600b      	str	r3, [r1, #0]
 800ddb4:	50cd      	str	r5, [r1, r3]
 800ddb6:	18cc      	adds	r4, r1, r3
 800ddb8:	4630      	mov	r0, r6
 800ddba:	f000 fa22 	bl	800e202 <__malloc_unlock>
 800ddbe:	f104 000b 	add.w	r0, r4, #11
 800ddc2:	1d23      	adds	r3, r4, #4
 800ddc4:	f020 0007 	bic.w	r0, r0, #7
 800ddc8:	1ac3      	subs	r3, r0, r3
 800ddca:	d0d3      	beq.n	800dd74 <_malloc_r+0x20>
 800ddcc:	425a      	negs	r2, r3
 800ddce:	50e2      	str	r2, [r4, r3]
 800ddd0:	e7d0      	b.n	800dd74 <_malloc_r+0x20>
 800ddd2:	428c      	cmp	r4, r1
 800ddd4:	684b      	ldr	r3, [r1, #4]
 800ddd6:	bf16      	itet	ne
 800ddd8:	6063      	strne	r3, [r4, #4]
 800ddda:	6013      	streq	r3, [r2, #0]
 800dddc:	460c      	movne	r4, r1
 800ddde:	e7eb      	b.n	800ddb8 <_malloc_r+0x64>
 800dde0:	460c      	mov	r4, r1
 800dde2:	6849      	ldr	r1, [r1, #4]
 800dde4:	e7cc      	b.n	800dd80 <_malloc_r+0x2c>
 800dde6:	1cc4      	adds	r4, r0, #3
 800dde8:	f024 0403 	bic.w	r4, r4, #3
 800ddec:	42a0      	cmp	r0, r4
 800ddee:	d005      	beq.n	800ddfc <_malloc_r+0xa8>
 800ddf0:	1a21      	subs	r1, r4, r0
 800ddf2:	4630      	mov	r0, r6
 800ddf4:	f000 f948 	bl	800e088 <_sbrk_r>
 800ddf8:	3001      	adds	r0, #1
 800ddfa:	d0cf      	beq.n	800dd9c <_malloc_r+0x48>
 800ddfc:	6025      	str	r5, [r4, #0]
 800ddfe:	e7db      	b.n	800ddb8 <_malloc_r+0x64>
 800de00:	20000228 	.word	0x20000228
 800de04:	2000022c 	.word	0x2000022c

0800de08 <__sfputc_r>:
 800de08:	6893      	ldr	r3, [r2, #8]
 800de0a:	3b01      	subs	r3, #1
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	b410      	push	{r4}
 800de10:	6093      	str	r3, [r2, #8]
 800de12:	da08      	bge.n	800de26 <__sfputc_r+0x1e>
 800de14:	6994      	ldr	r4, [r2, #24]
 800de16:	42a3      	cmp	r3, r4
 800de18:	db01      	blt.n	800de1e <__sfputc_r+0x16>
 800de1a:	290a      	cmp	r1, #10
 800de1c:	d103      	bne.n	800de26 <__sfputc_r+0x1e>
 800de1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800de22:	f7fe bb5d 	b.w	800c4e0 <__swbuf_r>
 800de26:	6813      	ldr	r3, [r2, #0]
 800de28:	1c58      	adds	r0, r3, #1
 800de2a:	6010      	str	r0, [r2, #0]
 800de2c:	7019      	strb	r1, [r3, #0]
 800de2e:	4608      	mov	r0, r1
 800de30:	f85d 4b04 	ldr.w	r4, [sp], #4
 800de34:	4770      	bx	lr

0800de36 <__sfputs_r>:
 800de36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de38:	4606      	mov	r6, r0
 800de3a:	460f      	mov	r7, r1
 800de3c:	4614      	mov	r4, r2
 800de3e:	18d5      	adds	r5, r2, r3
 800de40:	42ac      	cmp	r4, r5
 800de42:	d101      	bne.n	800de48 <__sfputs_r+0x12>
 800de44:	2000      	movs	r0, #0
 800de46:	e007      	b.n	800de58 <__sfputs_r+0x22>
 800de48:	463a      	mov	r2, r7
 800de4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de4e:	4630      	mov	r0, r6
 800de50:	f7ff ffda 	bl	800de08 <__sfputc_r>
 800de54:	1c43      	adds	r3, r0, #1
 800de56:	d1f3      	bne.n	800de40 <__sfputs_r+0xa>
 800de58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800de5c <_vfiprintf_r>:
 800de5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de60:	460c      	mov	r4, r1
 800de62:	b09d      	sub	sp, #116	; 0x74
 800de64:	4617      	mov	r7, r2
 800de66:	461d      	mov	r5, r3
 800de68:	4606      	mov	r6, r0
 800de6a:	b118      	cbz	r0, 800de74 <_vfiprintf_r+0x18>
 800de6c:	6983      	ldr	r3, [r0, #24]
 800de6e:	b90b      	cbnz	r3, 800de74 <_vfiprintf_r+0x18>
 800de70:	f7ff fb2a 	bl	800d4c8 <__sinit>
 800de74:	4b7c      	ldr	r3, [pc, #496]	; (800e068 <_vfiprintf_r+0x20c>)
 800de76:	429c      	cmp	r4, r3
 800de78:	d158      	bne.n	800df2c <_vfiprintf_r+0xd0>
 800de7a:	6874      	ldr	r4, [r6, #4]
 800de7c:	89a3      	ldrh	r3, [r4, #12]
 800de7e:	0718      	lsls	r0, r3, #28
 800de80:	d55e      	bpl.n	800df40 <_vfiprintf_r+0xe4>
 800de82:	6923      	ldr	r3, [r4, #16]
 800de84:	2b00      	cmp	r3, #0
 800de86:	d05b      	beq.n	800df40 <_vfiprintf_r+0xe4>
 800de88:	2300      	movs	r3, #0
 800de8a:	9309      	str	r3, [sp, #36]	; 0x24
 800de8c:	2320      	movs	r3, #32
 800de8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800de92:	2330      	movs	r3, #48	; 0x30
 800de94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800de98:	9503      	str	r5, [sp, #12]
 800de9a:	f04f 0b01 	mov.w	fp, #1
 800de9e:	46b8      	mov	r8, r7
 800dea0:	4645      	mov	r5, r8
 800dea2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800dea6:	b10b      	cbz	r3, 800deac <_vfiprintf_r+0x50>
 800dea8:	2b25      	cmp	r3, #37	; 0x25
 800deaa:	d154      	bne.n	800df56 <_vfiprintf_r+0xfa>
 800deac:	ebb8 0a07 	subs.w	sl, r8, r7
 800deb0:	d00b      	beq.n	800deca <_vfiprintf_r+0x6e>
 800deb2:	4653      	mov	r3, sl
 800deb4:	463a      	mov	r2, r7
 800deb6:	4621      	mov	r1, r4
 800deb8:	4630      	mov	r0, r6
 800deba:	f7ff ffbc 	bl	800de36 <__sfputs_r>
 800debe:	3001      	adds	r0, #1
 800dec0:	f000 80c2 	beq.w	800e048 <_vfiprintf_r+0x1ec>
 800dec4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dec6:	4453      	add	r3, sl
 800dec8:	9309      	str	r3, [sp, #36]	; 0x24
 800deca:	f898 3000 	ldrb.w	r3, [r8]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	f000 80ba 	beq.w	800e048 <_vfiprintf_r+0x1ec>
 800ded4:	2300      	movs	r3, #0
 800ded6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800deda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dede:	9304      	str	r3, [sp, #16]
 800dee0:	9307      	str	r3, [sp, #28]
 800dee2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dee6:	931a      	str	r3, [sp, #104]	; 0x68
 800dee8:	46a8      	mov	r8, r5
 800deea:	2205      	movs	r2, #5
 800deec:	f818 1b01 	ldrb.w	r1, [r8], #1
 800def0:	485e      	ldr	r0, [pc, #376]	; (800e06c <_vfiprintf_r+0x210>)
 800def2:	f7f2 f975 	bl	80001e0 <memchr>
 800def6:	9b04      	ldr	r3, [sp, #16]
 800def8:	bb78      	cbnz	r0, 800df5a <_vfiprintf_r+0xfe>
 800defa:	06d9      	lsls	r1, r3, #27
 800defc:	bf44      	itt	mi
 800defe:	2220      	movmi	r2, #32
 800df00:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800df04:	071a      	lsls	r2, r3, #28
 800df06:	bf44      	itt	mi
 800df08:	222b      	movmi	r2, #43	; 0x2b
 800df0a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800df0e:	782a      	ldrb	r2, [r5, #0]
 800df10:	2a2a      	cmp	r2, #42	; 0x2a
 800df12:	d02a      	beq.n	800df6a <_vfiprintf_r+0x10e>
 800df14:	9a07      	ldr	r2, [sp, #28]
 800df16:	46a8      	mov	r8, r5
 800df18:	2000      	movs	r0, #0
 800df1a:	250a      	movs	r5, #10
 800df1c:	4641      	mov	r1, r8
 800df1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800df22:	3b30      	subs	r3, #48	; 0x30
 800df24:	2b09      	cmp	r3, #9
 800df26:	d969      	bls.n	800dffc <_vfiprintf_r+0x1a0>
 800df28:	b360      	cbz	r0, 800df84 <_vfiprintf_r+0x128>
 800df2a:	e024      	b.n	800df76 <_vfiprintf_r+0x11a>
 800df2c:	4b50      	ldr	r3, [pc, #320]	; (800e070 <_vfiprintf_r+0x214>)
 800df2e:	429c      	cmp	r4, r3
 800df30:	d101      	bne.n	800df36 <_vfiprintf_r+0xda>
 800df32:	68b4      	ldr	r4, [r6, #8]
 800df34:	e7a2      	b.n	800de7c <_vfiprintf_r+0x20>
 800df36:	4b4f      	ldr	r3, [pc, #316]	; (800e074 <_vfiprintf_r+0x218>)
 800df38:	429c      	cmp	r4, r3
 800df3a:	bf08      	it	eq
 800df3c:	68f4      	ldreq	r4, [r6, #12]
 800df3e:	e79d      	b.n	800de7c <_vfiprintf_r+0x20>
 800df40:	4621      	mov	r1, r4
 800df42:	4630      	mov	r0, r6
 800df44:	f7fe fb1e 	bl	800c584 <__swsetup_r>
 800df48:	2800      	cmp	r0, #0
 800df4a:	d09d      	beq.n	800de88 <_vfiprintf_r+0x2c>
 800df4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800df50:	b01d      	add	sp, #116	; 0x74
 800df52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df56:	46a8      	mov	r8, r5
 800df58:	e7a2      	b.n	800dea0 <_vfiprintf_r+0x44>
 800df5a:	4a44      	ldr	r2, [pc, #272]	; (800e06c <_vfiprintf_r+0x210>)
 800df5c:	1a80      	subs	r0, r0, r2
 800df5e:	fa0b f000 	lsl.w	r0, fp, r0
 800df62:	4318      	orrs	r0, r3
 800df64:	9004      	str	r0, [sp, #16]
 800df66:	4645      	mov	r5, r8
 800df68:	e7be      	b.n	800dee8 <_vfiprintf_r+0x8c>
 800df6a:	9a03      	ldr	r2, [sp, #12]
 800df6c:	1d11      	adds	r1, r2, #4
 800df6e:	6812      	ldr	r2, [r2, #0]
 800df70:	9103      	str	r1, [sp, #12]
 800df72:	2a00      	cmp	r2, #0
 800df74:	db01      	blt.n	800df7a <_vfiprintf_r+0x11e>
 800df76:	9207      	str	r2, [sp, #28]
 800df78:	e004      	b.n	800df84 <_vfiprintf_r+0x128>
 800df7a:	4252      	negs	r2, r2
 800df7c:	f043 0302 	orr.w	r3, r3, #2
 800df80:	9207      	str	r2, [sp, #28]
 800df82:	9304      	str	r3, [sp, #16]
 800df84:	f898 3000 	ldrb.w	r3, [r8]
 800df88:	2b2e      	cmp	r3, #46	; 0x2e
 800df8a:	d10e      	bne.n	800dfaa <_vfiprintf_r+0x14e>
 800df8c:	f898 3001 	ldrb.w	r3, [r8, #1]
 800df90:	2b2a      	cmp	r3, #42	; 0x2a
 800df92:	d138      	bne.n	800e006 <_vfiprintf_r+0x1aa>
 800df94:	9b03      	ldr	r3, [sp, #12]
 800df96:	1d1a      	adds	r2, r3, #4
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	9203      	str	r2, [sp, #12]
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	bfb8      	it	lt
 800dfa0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800dfa4:	f108 0802 	add.w	r8, r8, #2
 800dfa8:	9305      	str	r3, [sp, #20]
 800dfaa:	4d33      	ldr	r5, [pc, #204]	; (800e078 <_vfiprintf_r+0x21c>)
 800dfac:	f898 1000 	ldrb.w	r1, [r8]
 800dfb0:	2203      	movs	r2, #3
 800dfb2:	4628      	mov	r0, r5
 800dfb4:	f7f2 f914 	bl	80001e0 <memchr>
 800dfb8:	b140      	cbz	r0, 800dfcc <_vfiprintf_r+0x170>
 800dfba:	2340      	movs	r3, #64	; 0x40
 800dfbc:	1b40      	subs	r0, r0, r5
 800dfbe:	fa03 f000 	lsl.w	r0, r3, r0
 800dfc2:	9b04      	ldr	r3, [sp, #16]
 800dfc4:	4303      	orrs	r3, r0
 800dfc6:	f108 0801 	add.w	r8, r8, #1
 800dfca:	9304      	str	r3, [sp, #16]
 800dfcc:	f898 1000 	ldrb.w	r1, [r8]
 800dfd0:	482a      	ldr	r0, [pc, #168]	; (800e07c <_vfiprintf_r+0x220>)
 800dfd2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dfd6:	2206      	movs	r2, #6
 800dfd8:	f108 0701 	add.w	r7, r8, #1
 800dfdc:	f7f2 f900 	bl	80001e0 <memchr>
 800dfe0:	2800      	cmp	r0, #0
 800dfe2:	d037      	beq.n	800e054 <_vfiprintf_r+0x1f8>
 800dfe4:	4b26      	ldr	r3, [pc, #152]	; (800e080 <_vfiprintf_r+0x224>)
 800dfe6:	bb1b      	cbnz	r3, 800e030 <_vfiprintf_r+0x1d4>
 800dfe8:	9b03      	ldr	r3, [sp, #12]
 800dfea:	3307      	adds	r3, #7
 800dfec:	f023 0307 	bic.w	r3, r3, #7
 800dff0:	3308      	adds	r3, #8
 800dff2:	9303      	str	r3, [sp, #12]
 800dff4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dff6:	444b      	add	r3, r9
 800dff8:	9309      	str	r3, [sp, #36]	; 0x24
 800dffa:	e750      	b.n	800de9e <_vfiprintf_r+0x42>
 800dffc:	fb05 3202 	mla	r2, r5, r2, r3
 800e000:	2001      	movs	r0, #1
 800e002:	4688      	mov	r8, r1
 800e004:	e78a      	b.n	800df1c <_vfiprintf_r+0xc0>
 800e006:	2300      	movs	r3, #0
 800e008:	f108 0801 	add.w	r8, r8, #1
 800e00c:	9305      	str	r3, [sp, #20]
 800e00e:	4619      	mov	r1, r3
 800e010:	250a      	movs	r5, #10
 800e012:	4640      	mov	r0, r8
 800e014:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e018:	3a30      	subs	r2, #48	; 0x30
 800e01a:	2a09      	cmp	r2, #9
 800e01c:	d903      	bls.n	800e026 <_vfiprintf_r+0x1ca>
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d0c3      	beq.n	800dfaa <_vfiprintf_r+0x14e>
 800e022:	9105      	str	r1, [sp, #20]
 800e024:	e7c1      	b.n	800dfaa <_vfiprintf_r+0x14e>
 800e026:	fb05 2101 	mla	r1, r5, r1, r2
 800e02a:	2301      	movs	r3, #1
 800e02c:	4680      	mov	r8, r0
 800e02e:	e7f0      	b.n	800e012 <_vfiprintf_r+0x1b6>
 800e030:	ab03      	add	r3, sp, #12
 800e032:	9300      	str	r3, [sp, #0]
 800e034:	4622      	mov	r2, r4
 800e036:	4b13      	ldr	r3, [pc, #76]	; (800e084 <_vfiprintf_r+0x228>)
 800e038:	a904      	add	r1, sp, #16
 800e03a:	4630      	mov	r0, r6
 800e03c:	f7fd fe0c 	bl	800bc58 <_printf_float>
 800e040:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800e044:	4681      	mov	r9, r0
 800e046:	d1d5      	bne.n	800dff4 <_vfiprintf_r+0x198>
 800e048:	89a3      	ldrh	r3, [r4, #12]
 800e04a:	065b      	lsls	r3, r3, #25
 800e04c:	f53f af7e 	bmi.w	800df4c <_vfiprintf_r+0xf0>
 800e050:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e052:	e77d      	b.n	800df50 <_vfiprintf_r+0xf4>
 800e054:	ab03      	add	r3, sp, #12
 800e056:	9300      	str	r3, [sp, #0]
 800e058:	4622      	mov	r2, r4
 800e05a:	4b0a      	ldr	r3, [pc, #40]	; (800e084 <_vfiprintf_r+0x228>)
 800e05c:	a904      	add	r1, sp, #16
 800e05e:	4630      	mov	r0, r6
 800e060:	f7fe f8b0 	bl	800c1c4 <_printf_i>
 800e064:	e7ec      	b.n	800e040 <_vfiprintf_r+0x1e4>
 800e066:	bf00      	nop
 800e068:	0800f6b0 	.word	0x0800f6b0
 800e06c:	0800f7ec 	.word	0x0800f7ec
 800e070:	0800f6d0 	.word	0x0800f6d0
 800e074:	0800f690 	.word	0x0800f690
 800e078:	0800f7f2 	.word	0x0800f7f2
 800e07c:	0800f7f6 	.word	0x0800f7f6
 800e080:	0800bc59 	.word	0x0800bc59
 800e084:	0800de37 	.word	0x0800de37

0800e088 <_sbrk_r>:
 800e088:	b538      	push	{r3, r4, r5, lr}
 800e08a:	4c06      	ldr	r4, [pc, #24]	; (800e0a4 <_sbrk_r+0x1c>)
 800e08c:	2300      	movs	r3, #0
 800e08e:	4605      	mov	r5, r0
 800e090:	4608      	mov	r0, r1
 800e092:	6023      	str	r3, [r4, #0]
 800e094:	f7f8 f864 	bl	8006160 <_sbrk>
 800e098:	1c43      	adds	r3, r0, #1
 800e09a:	d102      	bne.n	800e0a2 <_sbrk_r+0x1a>
 800e09c:	6823      	ldr	r3, [r4, #0]
 800e09e:	b103      	cbz	r3, 800e0a2 <_sbrk_r+0x1a>
 800e0a0:	602b      	str	r3, [r5, #0]
 800e0a2:	bd38      	pop	{r3, r4, r5, pc}
 800e0a4:	200005c4 	.word	0x200005c4

0800e0a8 <__sread>:
 800e0a8:	b510      	push	{r4, lr}
 800e0aa:	460c      	mov	r4, r1
 800e0ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e0b0:	f000 f8a8 	bl	800e204 <_read_r>
 800e0b4:	2800      	cmp	r0, #0
 800e0b6:	bfab      	itete	ge
 800e0b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e0ba:	89a3      	ldrhlt	r3, [r4, #12]
 800e0bc:	181b      	addge	r3, r3, r0
 800e0be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e0c2:	bfac      	ite	ge
 800e0c4:	6563      	strge	r3, [r4, #84]	; 0x54
 800e0c6:	81a3      	strhlt	r3, [r4, #12]
 800e0c8:	bd10      	pop	{r4, pc}

0800e0ca <__swrite>:
 800e0ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0ce:	461f      	mov	r7, r3
 800e0d0:	898b      	ldrh	r3, [r1, #12]
 800e0d2:	05db      	lsls	r3, r3, #23
 800e0d4:	4605      	mov	r5, r0
 800e0d6:	460c      	mov	r4, r1
 800e0d8:	4616      	mov	r6, r2
 800e0da:	d505      	bpl.n	800e0e8 <__swrite+0x1e>
 800e0dc:	2302      	movs	r3, #2
 800e0de:	2200      	movs	r2, #0
 800e0e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e0e4:	f000 f868 	bl	800e1b8 <_lseek_r>
 800e0e8:	89a3      	ldrh	r3, [r4, #12]
 800e0ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e0ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e0f2:	81a3      	strh	r3, [r4, #12]
 800e0f4:	4632      	mov	r2, r6
 800e0f6:	463b      	mov	r3, r7
 800e0f8:	4628      	mov	r0, r5
 800e0fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e0fe:	f000 b817 	b.w	800e130 <_write_r>

0800e102 <__sseek>:
 800e102:	b510      	push	{r4, lr}
 800e104:	460c      	mov	r4, r1
 800e106:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e10a:	f000 f855 	bl	800e1b8 <_lseek_r>
 800e10e:	1c43      	adds	r3, r0, #1
 800e110:	89a3      	ldrh	r3, [r4, #12]
 800e112:	bf15      	itete	ne
 800e114:	6560      	strne	r0, [r4, #84]	; 0x54
 800e116:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e11a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e11e:	81a3      	strheq	r3, [r4, #12]
 800e120:	bf18      	it	ne
 800e122:	81a3      	strhne	r3, [r4, #12]
 800e124:	bd10      	pop	{r4, pc}

0800e126 <__sclose>:
 800e126:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e12a:	f000 b813 	b.w	800e154 <_close_r>
	...

0800e130 <_write_r>:
 800e130:	b538      	push	{r3, r4, r5, lr}
 800e132:	4c07      	ldr	r4, [pc, #28]	; (800e150 <_write_r+0x20>)
 800e134:	4605      	mov	r5, r0
 800e136:	4608      	mov	r0, r1
 800e138:	4611      	mov	r1, r2
 800e13a:	2200      	movs	r2, #0
 800e13c:	6022      	str	r2, [r4, #0]
 800e13e:	461a      	mov	r2, r3
 800e140:	f7f5 fbe0 	bl	8003904 <_write>
 800e144:	1c43      	adds	r3, r0, #1
 800e146:	d102      	bne.n	800e14e <_write_r+0x1e>
 800e148:	6823      	ldr	r3, [r4, #0]
 800e14a:	b103      	cbz	r3, 800e14e <_write_r+0x1e>
 800e14c:	602b      	str	r3, [r5, #0]
 800e14e:	bd38      	pop	{r3, r4, r5, pc}
 800e150:	200005c4 	.word	0x200005c4

0800e154 <_close_r>:
 800e154:	b538      	push	{r3, r4, r5, lr}
 800e156:	4c06      	ldr	r4, [pc, #24]	; (800e170 <_close_r+0x1c>)
 800e158:	2300      	movs	r3, #0
 800e15a:	4605      	mov	r5, r0
 800e15c:	4608      	mov	r0, r1
 800e15e:	6023      	str	r3, [r4, #0]
 800e160:	f7f7 ffc9 	bl	80060f6 <_close>
 800e164:	1c43      	adds	r3, r0, #1
 800e166:	d102      	bne.n	800e16e <_close_r+0x1a>
 800e168:	6823      	ldr	r3, [r4, #0]
 800e16a:	b103      	cbz	r3, 800e16e <_close_r+0x1a>
 800e16c:	602b      	str	r3, [r5, #0]
 800e16e:	bd38      	pop	{r3, r4, r5, pc}
 800e170:	200005c4 	.word	0x200005c4

0800e174 <_fstat_r>:
 800e174:	b538      	push	{r3, r4, r5, lr}
 800e176:	4c07      	ldr	r4, [pc, #28]	; (800e194 <_fstat_r+0x20>)
 800e178:	2300      	movs	r3, #0
 800e17a:	4605      	mov	r5, r0
 800e17c:	4608      	mov	r0, r1
 800e17e:	4611      	mov	r1, r2
 800e180:	6023      	str	r3, [r4, #0]
 800e182:	f7f7 ffc4 	bl	800610e <_fstat>
 800e186:	1c43      	adds	r3, r0, #1
 800e188:	d102      	bne.n	800e190 <_fstat_r+0x1c>
 800e18a:	6823      	ldr	r3, [r4, #0]
 800e18c:	b103      	cbz	r3, 800e190 <_fstat_r+0x1c>
 800e18e:	602b      	str	r3, [r5, #0]
 800e190:	bd38      	pop	{r3, r4, r5, pc}
 800e192:	bf00      	nop
 800e194:	200005c4 	.word	0x200005c4

0800e198 <_isatty_r>:
 800e198:	b538      	push	{r3, r4, r5, lr}
 800e19a:	4c06      	ldr	r4, [pc, #24]	; (800e1b4 <_isatty_r+0x1c>)
 800e19c:	2300      	movs	r3, #0
 800e19e:	4605      	mov	r5, r0
 800e1a0:	4608      	mov	r0, r1
 800e1a2:	6023      	str	r3, [r4, #0]
 800e1a4:	f7f7 ffc3 	bl	800612e <_isatty>
 800e1a8:	1c43      	adds	r3, r0, #1
 800e1aa:	d102      	bne.n	800e1b2 <_isatty_r+0x1a>
 800e1ac:	6823      	ldr	r3, [r4, #0]
 800e1ae:	b103      	cbz	r3, 800e1b2 <_isatty_r+0x1a>
 800e1b0:	602b      	str	r3, [r5, #0]
 800e1b2:	bd38      	pop	{r3, r4, r5, pc}
 800e1b4:	200005c4 	.word	0x200005c4

0800e1b8 <_lseek_r>:
 800e1b8:	b538      	push	{r3, r4, r5, lr}
 800e1ba:	4c07      	ldr	r4, [pc, #28]	; (800e1d8 <_lseek_r+0x20>)
 800e1bc:	4605      	mov	r5, r0
 800e1be:	4608      	mov	r0, r1
 800e1c0:	4611      	mov	r1, r2
 800e1c2:	2200      	movs	r2, #0
 800e1c4:	6022      	str	r2, [r4, #0]
 800e1c6:	461a      	mov	r2, r3
 800e1c8:	f7f7 ffbc 	bl	8006144 <_lseek>
 800e1cc:	1c43      	adds	r3, r0, #1
 800e1ce:	d102      	bne.n	800e1d6 <_lseek_r+0x1e>
 800e1d0:	6823      	ldr	r3, [r4, #0]
 800e1d2:	b103      	cbz	r3, 800e1d6 <_lseek_r+0x1e>
 800e1d4:	602b      	str	r3, [r5, #0]
 800e1d6:	bd38      	pop	{r3, r4, r5, pc}
 800e1d8:	200005c4 	.word	0x200005c4

0800e1dc <__ascii_mbtowc>:
 800e1dc:	b082      	sub	sp, #8
 800e1de:	b901      	cbnz	r1, 800e1e2 <__ascii_mbtowc+0x6>
 800e1e0:	a901      	add	r1, sp, #4
 800e1e2:	b142      	cbz	r2, 800e1f6 <__ascii_mbtowc+0x1a>
 800e1e4:	b14b      	cbz	r3, 800e1fa <__ascii_mbtowc+0x1e>
 800e1e6:	7813      	ldrb	r3, [r2, #0]
 800e1e8:	600b      	str	r3, [r1, #0]
 800e1ea:	7812      	ldrb	r2, [r2, #0]
 800e1ec:	1c10      	adds	r0, r2, #0
 800e1ee:	bf18      	it	ne
 800e1f0:	2001      	movne	r0, #1
 800e1f2:	b002      	add	sp, #8
 800e1f4:	4770      	bx	lr
 800e1f6:	4610      	mov	r0, r2
 800e1f8:	e7fb      	b.n	800e1f2 <__ascii_mbtowc+0x16>
 800e1fa:	f06f 0001 	mvn.w	r0, #1
 800e1fe:	e7f8      	b.n	800e1f2 <__ascii_mbtowc+0x16>

0800e200 <__malloc_lock>:
 800e200:	4770      	bx	lr

0800e202 <__malloc_unlock>:
 800e202:	4770      	bx	lr

0800e204 <_read_r>:
 800e204:	b538      	push	{r3, r4, r5, lr}
 800e206:	4c07      	ldr	r4, [pc, #28]	; (800e224 <_read_r+0x20>)
 800e208:	4605      	mov	r5, r0
 800e20a:	4608      	mov	r0, r1
 800e20c:	4611      	mov	r1, r2
 800e20e:	2200      	movs	r2, #0
 800e210:	6022      	str	r2, [r4, #0]
 800e212:	461a      	mov	r2, r3
 800e214:	f7f7 ff52 	bl	80060bc <_read>
 800e218:	1c43      	adds	r3, r0, #1
 800e21a:	d102      	bne.n	800e222 <_read_r+0x1e>
 800e21c:	6823      	ldr	r3, [r4, #0]
 800e21e:	b103      	cbz	r3, 800e222 <_read_r+0x1e>
 800e220:	602b      	str	r3, [r5, #0]
 800e222:	bd38      	pop	{r3, r4, r5, pc}
 800e224:	200005c4 	.word	0x200005c4

0800e228 <__ascii_wctomb>:
 800e228:	b149      	cbz	r1, 800e23e <__ascii_wctomb+0x16>
 800e22a:	2aff      	cmp	r2, #255	; 0xff
 800e22c:	bf85      	ittet	hi
 800e22e:	238a      	movhi	r3, #138	; 0x8a
 800e230:	6003      	strhi	r3, [r0, #0]
 800e232:	700a      	strbls	r2, [r1, #0]
 800e234:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800e238:	bf98      	it	ls
 800e23a:	2001      	movls	r0, #1
 800e23c:	4770      	bx	lr
 800e23e:	4608      	mov	r0, r1
 800e240:	4770      	bx	lr
	...

0800e244 <asinf>:
 800e244:	b510      	push	{r4, lr}
 800e246:	ed2d 8b02 	vpush	{d8}
 800e24a:	4c27      	ldr	r4, [pc, #156]	; (800e2e8 <asinf+0xa4>)
 800e24c:	b08a      	sub	sp, #40	; 0x28
 800e24e:	eeb0 8a40 	vmov.f32	s16, s0
 800e252:	f000 f9b5 	bl	800e5c0 <__ieee754_asinf>
 800e256:	f994 3000 	ldrsb.w	r3, [r4]
 800e25a:	3301      	adds	r3, #1
 800e25c:	eef0 8a40 	vmov.f32	s17, s0
 800e260:	d03c      	beq.n	800e2dc <asinf+0x98>
 800e262:	eeb4 8a48 	vcmp.f32	s16, s16
 800e266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e26a:	d637      	bvs.n	800e2dc <asinf+0x98>
 800e26c:	eeb0 0a48 	vmov.f32	s0, s16
 800e270:	f000 fede 	bl	800f030 <fabsf>
 800e274:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e278:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800e27c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e280:	dd2c      	ble.n	800e2dc <asinf+0x98>
 800e282:	2301      	movs	r3, #1
 800e284:	9300      	str	r3, [sp, #0]
 800e286:	4b19      	ldr	r3, [pc, #100]	; (800e2ec <asinf+0xa8>)
 800e288:	9301      	str	r3, [sp, #4]
 800e28a:	ee18 0a10 	vmov	r0, s16
 800e28e:	2300      	movs	r3, #0
 800e290:	9308      	str	r3, [sp, #32]
 800e292:	f7f2 f959 	bl	8000548 <__aeabi_f2d>
 800e296:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e29a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e29e:	4814      	ldr	r0, [pc, #80]	; (800e2f0 <asinf+0xac>)
 800e2a0:	f000 fdea 	bl	800ee78 <nan>
 800e2a4:	f994 3000 	ldrsb.w	r3, [r4]
 800e2a8:	2b02      	cmp	r3, #2
 800e2aa:	ed8d 0b06 	vstr	d0, [sp, #24]
 800e2ae:	d104      	bne.n	800e2ba <asinf+0x76>
 800e2b0:	f7fd fc0c 	bl	800bacc <__errno>
 800e2b4:	2321      	movs	r3, #33	; 0x21
 800e2b6:	6003      	str	r3, [r0, #0]
 800e2b8:	e004      	b.n	800e2c4 <asinf+0x80>
 800e2ba:	4668      	mov	r0, sp
 800e2bc:	f000 fdd9 	bl	800ee72 <matherr>
 800e2c0:	2800      	cmp	r0, #0
 800e2c2:	d0f5      	beq.n	800e2b0 <asinf+0x6c>
 800e2c4:	9b08      	ldr	r3, [sp, #32]
 800e2c6:	b11b      	cbz	r3, 800e2d0 <asinf+0x8c>
 800e2c8:	f7fd fc00 	bl	800bacc <__errno>
 800e2cc:	9b08      	ldr	r3, [sp, #32]
 800e2ce:	6003      	str	r3, [r0, #0]
 800e2d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e2d4:	f7f2 fc68 	bl	8000ba8 <__aeabi_d2f>
 800e2d8:	ee08 0a90 	vmov	s17, r0
 800e2dc:	eeb0 0a68 	vmov.f32	s0, s17
 800e2e0:	b00a      	add	sp, #40	; 0x28
 800e2e2:	ecbd 8b02 	vpop	{d8}
 800e2e6:	bd10      	pop	{r4, pc}
 800e2e8:	200001e0 	.word	0x200001e0
 800e2ec:	0800f908 	.word	0x0800f908
 800e2f0:	0800f7f1 	.word	0x0800f7f1

0800e2f4 <atan2f>:
 800e2f4:	f000 ba4c 	b.w	800e790 <__ieee754_atan2f>

0800e2f8 <powf>:
 800e2f8:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 800e2fc:	ed2d 8b04 	vpush	{d8-d9}
 800e300:	4ca7      	ldr	r4, [pc, #668]	; (800e5a0 <powf+0x2a8>)
 800e302:	b08a      	sub	sp, #40	; 0x28
 800e304:	eef0 8a40 	vmov.f32	s17, s0
 800e308:	eeb0 8a60 	vmov.f32	s16, s1
 800e30c:	f000 faee 	bl	800e8ec <__ieee754_powf>
 800e310:	f994 5000 	ldrsb.w	r5, [r4]
 800e314:	1c6b      	adds	r3, r5, #1
 800e316:	eeb0 9a40 	vmov.f32	s18, s0
 800e31a:	4626      	mov	r6, r4
 800e31c:	d05f      	beq.n	800e3de <powf+0xe6>
 800e31e:	eeb4 8a48 	vcmp.f32	s16, s16
 800e322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e326:	d65a      	bvs.n	800e3de <powf+0xe6>
 800e328:	eef4 8a68 	vcmp.f32	s17, s17
 800e32c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e330:	d721      	bvc.n	800e376 <powf+0x7e>
 800e332:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800e336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e33a:	d150      	bne.n	800e3de <powf+0xe6>
 800e33c:	2301      	movs	r3, #1
 800e33e:	9300      	str	r3, [sp, #0]
 800e340:	4b98      	ldr	r3, [pc, #608]	; (800e5a4 <powf+0x2ac>)
 800e342:	9301      	str	r3, [sp, #4]
 800e344:	ee18 0a90 	vmov	r0, s17
 800e348:	2300      	movs	r3, #0
 800e34a:	9308      	str	r3, [sp, #32]
 800e34c:	f7f2 f8fc 	bl	8000548 <__aeabi_f2d>
 800e350:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e354:	ee18 0a10 	vmov	r0, s16
 800e358:	f7f2 f8f6 	bl	8000548 <__aeabi_f2d>
 800e35c:	4b92      	ldr	r3, [pc, #584]	; (800e5a8 <powf+0x2b0>)
 800e35e:	2200      	movs	r2, #0
 800e360:	2d02      	cmp	r5, #2
 800e362:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e366:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e36a:	d032      	beq.n	800e3d2 <powf+0xda>
 800e36c:	4668      	mov	r0, sp
 800e36e:	f000 fd80 	bl	800ee72 <matherr>
 800e372:	bb40      	cbnz	r0, 800e3c6 <powf+0xce>
 800e374:	e065      	b.n	800e442 <powf+0x14a>
 800e376:	eddf 9a8d 	vldr	s19, [pc, #564]	; 800e5ac <powf+0x2b4>
 800e37a:	eef4 8a69 	vcmp.f32	s17, s19
 800e37e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e382:	d163      	bne.n	800e44c <powf+0x154>
 800e384:	eeb4 8a69 	vcmp.f32	s16, s19
 800e388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e38c:	d12e      	bne.n	800e3ec <powf+0xf4>
 800e38e:	2301      	movs	r3, #1
 800e390:	9300      	str	r3, [sp, #0]
 800e392:	4b84      	ldr	r3, [pc, #528]	; (800e5a4 <powf+0x2ac>)
 800e394:	9301      	str	r3, [sp, #4]
 800e396:	ee18 0a90 	vmov	r0, s17
 800e39a:	2300      	movs	r3, #0
 800e39c:	9308      	str	r3, [sp, #32]
 800e39e:	f7f2 f8d3 	bl	8000548 <__aeabi_f2d>
 800e3a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e3a6:	ee18 0a10 	vmov	r0, s16
 800e3aa:	f7f2 f8cd 	bl	8000548 <__aeabi_f2d>
 800e3ae:	2200      	movs	r2, #0
 800e3b0:	2300      	movs	r3, #0
 800e3b2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e3b6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e3ba:	2d00      	cmp	r5, #0
 800e3bc:	d0d6      	beq.n	800e36c <powf+0x74>
 800e3be:	4b7a      	ldr	r3, [pc, #488]	; (800e5a8 <powf+0x2b0>)
 800e3c0:	2200      	movs	r2, #0
 800e3c2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e3c6:	9b08      	ldr	r3, [sp, #32]
 800e3c8:	b11b      	cbz	r3, 800e3d2 <powf+0xda>
 800e3ca:	f7fd fb7f 	bl	800bacc <__errno>
 800e3ce:	9b08      	ldr	r3, [sp, #32]
 800e3d0:	6003      	str	r3, [r0, #0]
 800e3d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e3d6:	f7f2 fbe7 	bl	8000ba8 <__aeabi_d2f>
 800e3da:	ee09 0a10 	vmov	s18, r0
 800e3de:	eeb0 0a49 	vmov.f32	s0, s18
 800e3e2:	b00a      	add	sp, #40	; 0x28
 800e3e4:	ecbd 8b04 	vpop	{d8-d9}
 800e3e8:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800e3ec:	eeb0 0a48 	vmov.f32	s0, s16
 800e3f0:	f000 fe25 	bl	800f03e <finitef>
 800e3f4:	2800      	cmp	r0, #0
 800e3f6:	d0f2      	beq.n	800e3de <powf+0xe6>
 800e3f8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800e3fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e400:	d5ed      	bpl.n	800e3de <powf+0xe6>
 800e402:	2301      	movs	r3, #1
 800e404:	9300      	str	r3, [sp, #0]
 800e406:	4b67      	ldr	r3, [pc, #412]	; (800e5a4 <powf+0x2ac>)
 800e408:	9301      	str	r3, [sp, #4]
 800e40a:	ee18 0a90 	vmov	r0, s17
 800e40e:	2300      	movs	r3, #0
 800e410:	9308      	str	r3, [sp, #32]
 800e412:	f7f2 f899 	bl	8000548 <__aeabi_f2d>
 800e416:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e41a:	ee18 0a10 	vmov	r0, s16
 800e41e:	f7f2 f893 	bl	8000548 <__aeabi_f2d>
 800e422:	f994 3000 	ldrsb.w	r3, [r4]
 800e426:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e42a:	b923      	cbnz	r3, 800e436 <powf+0x13e>
 800e42c:	2200      	movs	r2, #0
 800e42e:	2300      	movs	r3, #0
 800e430:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e434:	e79a      	b.n	800e36c <powf+0x74>
 800e436:	495e      	ldr	r1, [pc, #376]	; (800e5b0 <powf+0x2b8>)
 800e438:	2000      	movs	r0, #0
 800e43a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e43e:	2b02      	cmp	r3, #2
 800e440:	d194      	bne.n	800e36c <powf+0x74>
 800e442:	f7fd fb43 	bl	800bacc <__errno>
 800e446:	2321      	movs	r3, #33	; 0x21
 800e448:	6003      	str	r3, [r0, #0]
 800e44a:	e7bc      	b.n	800e3c6 <powf+0xce>
 800e44c:	f000 fdf7 	bl	800f03e <finitef>
 800e450:	4605      	mov	r5, r0
 800e452:	2800      	cmp	r0, #0
 800e454:	d173      	bne.n	800e53e <powf+0x246>
 800e456:	eeb0 0a68 	vmov.f32	s0, s17
 800e45a:	f000 fdf0 	bl	800f03e <finitef>
 800e45e:	2800      	cmp	r0, #0
 800e460:	d06d      	beq.n	800e53e <powf+0x246>
 800e462:	eeb0 0a48 	vmov.f32	s0, s16
 800e466:	f000 fdea 	bl	800f03e <finitef>
 800e46a:	2800      	cmp	r0, #0
 800e46c:	d067      	beq.n	800e53e <powf+0x246>
 800e46e:	ee18 0a90 	vmov	r0, s17
 800e472:	f7f2 f869 	bl	8000548 <__aeabi_f2d>
 800e476:	4680      	mov	r8, r0
 800e478:	ee18 0a10 	vmov	r0, s16
 800e47c:	4689      	mov	r9, r1
 800e47e:	f7f2 f863 	bl	8000548 <__aeabi_f2d>
 800e482:	eeb4 9a49 	vcmp.f32	s18, s18
 800e486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e48a:	f994 4000 	ldrsb.w	r4, [r4]
 800e48e:	4b45      	ldr	r3, [pc, #276]	; (800e5a4 <powf+0x2ac>)
 800e490:	d713      	bvc.n	800e4ba <powf+0x1c2>
 800e492:	2201      	movs	r2, #1
 800e494:	e9cd 2300 	strd	r2, r3, [sp]
 800e498:	9508      	str	r5, [sp, #32]
 800e49a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800e49e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e4a2:	2c00      	cmp	r4, #0
 800e4a4:	d0c2      	beq.n	800e42c <powf+0x134>
 800e4a6:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 800e4aa:	ee17 0a90 	vmov	r0, s15
 800e4ae:	f7f2 f84b 	bl	8000548 <__aeabi_f2d>
 800e4b2:	2c02      	cmp	r4, #2
 800e4b4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e4b8:	e7c2      	b.n	800e440 <powf+0x148>
 800e4ba:	2203      	movs	r2, #3
 800e4bc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800e4c0:	e9cd 2300 	strd	r2, r3, [sp]
 800e4c4:	9508      	str	r5, [sp, #32]
 800e4c6:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800e4ca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e4ce:	ee28 8a27 	vmul.f32	s16, s16, s15
 800e4d2:	b9fc      	cbnz	r4, 800e514 <powf+0x21c>
 800e4d4:	4b37      	ldr	r3, [pc, #220]	; (800e5b4 <powf+0x2bc>)
 800e4d6:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800e4da:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800e4de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4e2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e4e6:	d553      	bpl.n	800e590 <powf+0x298>
 800e4e8:	eeb0 0a48 	vmov.f32	s0, s16
 800e4ec:	f000 fdb8 	bl	800f060 <rintf>
 800e4f0:	eeb4 0a48 	vcmp.f32	s0, s16
 800e4f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4f8:	d004      	beq.n	800e504 <powf+0x20c>
 800e4fa:	4b2f      	ldr	r3, [pc, #188]	; (800e5b8 <powf+0x2c0>)
 800e4fc:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800e500:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e504:	f996 3000 	ldrsb.w	r3, [r6]
 800e508:	2b02      	cmp	r3, #2
 800e50a:	d141      	bne.n	800e590 <powf+0x298>
 800e50c:	f7fd fade 	bl	800bacc <__errno>
 800e510:	2322      	movs	r3, #34	; 0x22
 800e512:	e799      	b.n	800e448 <powf+0x150>
 800e514:	4b29      	ldr	r3, [pc, #164]	; (800e5bc <powf+0x2c4>)
 800e516:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800e51a:	2200      	movs	r2, #0
 800e51c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e520:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e524:	d5ee      	bpl.n	800e504 <powf+0x20c>
 800e526:	eeb0 0a48 	vmov.f32	s0, s16
 800e52a:	f000 fd99 	bl	800f060 <rintf>
 800e52e:	eeb4 0a48 	vcmp.f32	s0, s16
 800e532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e536:	d0e5      	beq.n	800e504 <powf+0x20c>
 800e538:	2200      	movs	r2, #0
 800e53a:	4b1d      	ldr	r3, [pc, #116]	; (800e5b0 <powf+0x2b8>)
 800e53c:	e7e0      	b.n	800e500 <powf+0x208>
 800e53e:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800e542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e546:	f47f af4a 	bne.w	800e3de <powf+0xe6>
 800e54a:	eeb0 0a68 	vmov.f32	s0, s17
 800e54e:	f000 fd76 	bl	800f03e <finitef>
 800e552:	2800      	cmp	r0, #0
 800e554:	f43f af43 	beq.w	800e3de <powf+0xe6>
 800e558:	eeb0 0a48 	vmov.f32	s0, s16
 800e55c:	f000 fd6f 	bl	800f03e <finitef>
 800e560:	2800      	cmp	r0, #0
 800e562:	f43f af3c 	beq.w	800e3de <powf+0xe6>
 800e566:	2304      	movs	r3, #4
 800e568:	9300      	str	r3, [sp, #0]
 800e56a:	4b0e      	ldr	r3, [pc, #56]	; (800e5a4 <powf+0x2ac>)
 800e56c:	9301      	str	r3, [sp, #4]
 800e56e:	ee18 0a90 	vmov	r0, s17
 800e572:	2300      	movs	r3, #0
 800e574:	9308      	str	r3, [sp, #32]
 800e576:	f7f1 ffe7 	bl	8000548 <__aeabi_f2d>
 800e57a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e57e:	ee18 0a10 	vmov	r0, s16
 800e582:	f7f1 ffe1 	bl	8000548 <__aeabi_f2d>
 800e586:	2200      	movs	r2, #0
 800e588:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e58c:	2300      	movs	r3, #0
 800e58e:	e7b7      	b.n	800e500 <powf+0x208>
 800e590:	4668      	mov	r0, sp
 800e592:	f000 fc6e 	bl	800ee72 <matherr>
 800e596:	2800      	cmp	r0, #0
 800e598:	f47f af15 	bne.w	800e3c6 <powf+0xce>
 800e59c:	e7b6      	b.n	800e50c <powf+0x214>
 800e59e:	bf00      	nop
 800e5a0:	200001e0 	.word	0x200001e0
 800e5a4:	0800f90e 	.word	0x0800f90e
 800e5a8:	3ff00000 	.word	0x3ff00000
 800e5ac:	00000000 	.word	0x00000000
 800e5b0:	fff00000 	.word	0xfff00000
 800e5b4:	47efffff 	.word	0x47efffff
 800e5b8:	c7efffff 	.word	0xc7efffff
 800e5bc:	7ff00000 	.word	0x7ff00000

0800e5c0 <__ieee754_asinf>:
 800e5c0:	b538      	push	{r3, r4, r5, lr}
 800e5c2:	ee10 5a10 	vmov	r5, s0
 800e5c6:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800e5ca:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800e5ce:	ed2d 8b04 	vpush	{d8-d9}
 800e5d2:	d10c      	bne.n	800e5ee <__ieee754_asinf+0x2e>
 800e5d4:	eddf 7a5e 	vldr	s15, [pc, #376]	; 800e750 <__ieee754_asinf+0x190>
 800e5d8:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 800e754 <__ieee754_asinf+0x194>
 800e5dc:	ee60 7a27 	vmul.f32	s15, s0, s15
 800e5e0:	eee0 7a07 	vfma.f32	s15, s0, s14
 800e5e4:	eeb0 0a67 	vmov.f32	s0, s15
 800e5e8:	ecbd 8b04 	vpop	{d8-d9}
 800e5ec:	bd38      	pop	{r3, r4, r5, pc}
 800e5ee:	dd04      	ble.n	800e5fa <__ieee754_asinf+0x3a>
 800e5f0:	ee70 7a40 	vsub.f32	s15, s0, s0
 800e5f4:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800e5f8:	e7f6      	b.n	800e5e8 <__ieee754_asinf+0x28>
 800e5fa:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800e5fe:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800e602:	da0b      	bge.n	800e61c <__ieee754_asinf+0x5c>
 800e604:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800e608:	da52      	bge.n	800e6b0 <__ieee754_asinf+0xf0>
 800e60a:	eddf 7a53 	vldr	s15, [pc, #332]	; 800e758 <__ieee754_asinf+0x198>
 800e60e:	ee70 7a27 	vadd.f32	s15, s0, s15
 800e612:	eef4 7ae8 	vcmpe.f32	s15, s17
 800e616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e61a:	dce5      	bgt.n	800e5e8 <__ieee754_asinf+0x28>
 800e61c:	f000 fd08 	bl	800f030 <fabsf>
 800e620:	ee38 0ac0 	vsub.f32	s0, s17, s0
 800e624:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800e628:	ee20 8a08 	vmul.f32	s16, s0, s16
 800e62c:	eddf 7a4b 	vldr	s15, [pc, #300]	; 800e75c <__ieee754_asinf+0x19c>
 800e630:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800e760 <__ieee754_asinf+0x1a0>
 800e634:	ed9f 9a4b 	vldr	s18, [pc, #300]	; 800e764 <__ieee754_asinf+0x1a4>
 800e638:	eea8 7a27 	vfma.f32	s14, s16, s15
 800e63c:	eddf 7a4a 	vldr	s15, [pc, #296]	; 800e768 <__ieee754_asinf+0x1a8>
 800e640:	eee7 7a08 	vfma.f32	s15, s14, s16
 800e644:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800e76c <__ieee754_asinf+0x1ac>
 800e648:	eea7 7a88 	vfma.f32	s14, s15, s16
 800e64c:	eddf 7a48 	vldr	s15, [pc, #288]	; 800e770 <__ieee754_asinf+0x1b0>
 800e650:	eee7 7a08 	vfma.f32	s15, s14, s16
 800e654:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800e774 <__ieee754_asinf+0x1b4>
 800e658:	eea7 9a88 	vfma.f32	s18, s15, s16
 800e65c:	eddf 7a46 	vldr	s15, [pc, #280]	; 800e778 <__ieee754_asinf+0x1b8>
 800e660:	eee8 7a07 	vfma.f32	s15, s16, s14
 800e664:	ed9f 7a45 	vldr	s14, [pc, #276]	; 800e77c <__ieee754_asinf+0x1bc>
 800e668:	eea7 7a88 	vfma.f32	s14, s15, s16
 800e66c:	eddf 7a44 	vldr	s15, [pc, #272]	; 800e780 <__ieee754_asinf+0x1c0>
 800e670:	eee7 7a08 	vfma.f32	s15, s14, s16
 800e674:	eeb0 0a48 	vmov.f32	s0, s16
 800e678:	eee7 8a88 	vfma.f32	s17, s15, s16
 800e67c:	f000 fbf6 	bl	800ee6c <__ieee754_sqrtf>
 800e680:	4b40      	ldr	r3, [pc, #256]	; (800e784 <__ieee754_asinf+0x1c4>)
 800e682:	ee29 9a08 	vmul.f32	s18, s18, s16
 800e686:	429c      	cmp	r4, r3
 800e688:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800e68c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800e690:	dd3d      	ble.n	800e70e <__ieee754_asinf+0x14e>
 800e692:	eea0 0a06 	vfma.f32	s0, s0, s12
 800e696:	eddf 7a3c 	vldr	s15, [pc, #240]	; 800e788 <__ieee754_asinf+0x1c8>
 800e69a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800e69e:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 800e754 <__ieee754_asinf+0x194>
 800e6a2:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e6a6:	2d00      	cmp	r5, #0
 800e6a8:	bfd8      	it	le
 800e6aa:	eeb1 0a40 	vnegle.f32	s0, s0
 800e6ae:	e79b      	b.n	800e5e8 <__ieee754_asinf+0x28>
 800e6b0:	ee60 7a00 	vmul.f32	s15, s0, s0
 800e6b4:	eddf 6a29 	vldr	s13, [pc, #164]	; 800e75c <__ieee754_asinf+0x19c>
 800e6b8:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800e760 <__ieee754_asinf+0x1a0>
 800e6bc:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 800e774 <__ieee754_asinf+0x1b4>
 800e6c0:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800e6c4:	eddf 6a28 	vldr	s13, [pc, #160]	; 800e768 <__ieee754_asinf+0x1a8>
 800e6c8:	eee7 6a27 	vfma.f32	s13, s14, s15
 800e6cc:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800e76c <__ieee754_asinf+0x1ac>
 800e6d0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e6d4:	eddf 6a26 	vldr	s13, [pc, #152]	; 800e770 <__ieee754_asinf+0x1b0>
 800e6d8:	eee7 6a27 	vfma.f32	s13, s14, s15
 800e6dc:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800e764 <__ieee754_asinf+0x1a4>
 800e6e0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e6e4:	eddf 6a24 	vldr	s13, [pc, #144]	; 800e778 <__ieee754_asinf+0x1b8>
 800e6e8:	eee7 6a86 	vfma.f32	s13, s15, s12
 800e6ec:	ed9f 6a23 	vldr	s12, [pc, #140]	; 800e77c <__ieee754_asinf+0x1bc>
 800e6f0:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800e6f4:	eddf 6a22 	vldr	s13, [pc, #136]	; 800e780 <__ieee754_asinf+0x1c0>
 800e6f8:	eee6 6a27 	vfma.f32	s13, s12, s15
 800e6fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e700:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800e704:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800e708:	eea0 0a27 	vfma.f32	s0, s0, s15
 800e70c:	e76c      	b.n	800e5e8 <__ieee754_asinf+0x28>
 800e70e:	ee10 3a10 	vmov	r3, s0
 800e712:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800e716:	f023 030f 	bic.w	r3, r3, #15
 800e71a:	ee07 3a90 	vmov	s15, r3
 800e71e:	eef1 6a67 	vneg.f32	s13, s15
 800e722:	eea6 8aa7 	vfma.f32	s16, s13, s15
 800e726:	ee70 5a00 	vadd.f32	s11, s0, s0
 800e72a:	ee37 0a80 	vadd.f32	s0, s15, s0
 800e72e:	eddf 7a08 	vldr	s15, [pc, #32]	; 800e750 <__ieee754_asinf+0x190>
 800e732:	ee88 5a00 	vdiv.f32	s10, s16, s0
 800e736:	ed9f 0a15 	vldr	s0, [pc, #84]	; 800e78c <__ieee754_asinf+0x1cc>
 800e73a:	eee5 7a47 	vfms.f32	s15, s10, s14
 800e73e:	eed5 7a86 	vfnms.f32	s15, s11, s12
 800e742:	eeb0 6a40 	vmov.f32	s12, s0
 800e746:	eea6 6a87 	vfma.f32	s12, s13, s14
 800e74a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800e74e:	e7a8      	b.n	800e6a2 <__ieee754_asinf+0xe2>
 800e750:	b33bbd2e 	.word	0xb33bbd2e
 800e754:	3fc90fdb 	.word	0x3fc90fdb
 800e758:	7149f2ca 	.word	0x7149f2ca
 800e75c:	3811ef08 	.word	0x3811ef08
 800e760:	3a4f7f04 	.word	0x3a4f7f04
 800e764:	3e2aaaab 	.word	0x3e2aaaab
 800e768:	bd241146 	.word	0xbd241146
 800e76c:	3e4e0aa8 	.word	0x3e4e0aa8
 800e770:	bea6b090 	.word	0xbea6b090
 800e774:	3d9dc62e 	.word	0x3d9dc62e
 800e778:	bf303361 	.word	0xbf303361
 800e77c:	4001572d 	.word	0x4001572d
 800e780:	c019d139 	.word	0xc019d139
 800e784:	3f799999 	.word	0x3f799999
 800e788:	333bbd2e 	.word	0x333bbd2e
 800e78c:	3f490fdb 	.word	0x3f490fdb

0800e790 <__ieee754_atan2f>:
 800e790:	ee10 2a90 	vmov	r2, s1
 800e794:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800e798:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800e79c:	b510      	push	{r4, lr}
 800e79e:	eef0 7a40 	vmov.f32	s15, s0
 800e7a2:	dc06      	bgt.n	800e7b2 <__ieee754_atan2f+0x22>
 800e7a4:	ee10 0a10 	vmov	r0, s0
 800e7a8:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800e7ac:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800e7b0:	dd04      	ble.n	800e7bc <__ieee754_atan2f+0x2c>
 800e7b2:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800e7b6:	eeb0 0a67 	vmov.f32	s0, s15
 800e7ba:	bd10      	pop	{r4, pc}
 800e7bc:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800e7c0:	d103      	bne.n	800e7ca <__ieee754_atan2f+0x3a>
 800e7c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e7c6:	f000 bb5f 	b.w	800ee88 <atanf>
 800e7ca:	1794      	asrs	r4, r2, #30
 800e7cc:	f004 0402 	and.w	r4, r4, #2
 800e7d0:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800e7d4:	b943      	cbnz	r3, 800e7e8 <__ieee754_atan2f+0x58>
 800e7d6:	2c02      	cmp	r4, #2
 800e7d8:	d06e      	beq.n	800e8b8 <__ieee754_atan2f+0x128>
 800e7da:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800e8c0 <__ieee754_atan2f+0x130>
 800e7de:	2c03      	cmp	r4, #3
 800e7e0:	bf08      	it	eq
 800e7e2:	eef0 7a47 	vmoveq.f32	s15, s14
 800e7e6:	e7e6      	b.n	800e7b6 <__ieee754_atan2f+0x26>
 800e7e8:	b941      	cbnz	r1, 800e7fc <__ieee754_atan2f+0x6c>
 800e7ea:	eddf 7a36 	vldr	s15, [pc, #216]	; 800e8c4 <__ieee754_atan2f+0x134>
 800e7ee:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800e8c8 <__ieee754_atan2f+0x138>
 800e7f2:	2800      	cmp	r0, #0
 800e7f4:	bfb8      	it	lt
 800e7f6:	eef0 7a47 	vmovlt.f32	s15, s14
 800e7fa:	e7dc      	b.n	800e7b6 <__ieee754_atan2f+0x26>
 800e7fc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800e800:	d122      	bne.n	800e848 <__ieee754_atan2f+0xb8>
 800e802:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800e806:	d112      	bne.n	800e82e <__ieee754_atan2f+0x9e>
 800e808:	2c02      	cmp	r4, #2
 800e80a:	d00a      	beq.n	800e822 <__ieee754_atan2f+0x92>
 800e80c:	2c03      	cmp	r4, #3
 800e80e:	d00b      	beq.n	800e828 <__ieee754_atan2f+0x98>
 800e810:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800e8cc <__ieee754_atan2f+0x13c>
 800e814:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800e8d0 <__ieee754_atan2f+0x140>
 800e818:	2c01      	cmp	r4, #1
 800e81a:	bf18      	it	ne
 800e81c:	eef0 7a47 	vmovne.f32	s15, s14
 800e820:	e7c9      	b.n	800e7b6 <__ieee754_atan2f+0x26>
 800e822:	eddf 7a2c 	vldr	s15, [pc, #176]	; 800e8d4 <__ieee754_atan2f+0x144>
 800e826:	e7c6      	b.n	800e7b6 <__ieee754_atan2f+0x26>
 800e828:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800e8d8 <__ieee754_atan2f+0x148>
 800e82c:	e7c3      	b.n	800e7b6 <__ieee754_atan2f+0x26>
 800e82e:	2c02      	cmp	r4, #2
 800e830:	d042      	beq.n	800e8b8 <__ieee754_atan2f+0x128>
 800e832:	2c03      	cmp	r4, #3
 800e834:	d005      	beq.n	800e842 <__ieee754_atan2f+0xb2>
 800e836:	2c01      	cmp	r4, #1
 800e838:	eddf 7a28 	vldr	s15, [pc, #160]	; 800e8dc <__ieee754_atan2f+0x14c>
 800e83c:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800e8e0 <__ieee754_atan2f+0x150>
 800e840:	e7eb      	b.n	800e81a <__ieee754_atan2f+0x8a>
 800e842:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800e8c0 <__ieee754_atan2f+0x130>
 800e846:	e7b6      	b.n	800e7b6 <__ieee754_atan2f+0x26>
 800e848:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800e84c:	d0cd      	beq.n	800e7ea <__ieee754_atan2f+0x5a>
 800e84e:	1a5b      	subs	r3, r3, r1
 800e850:	15db      	asrs	r3, r3, #23
 800e852:	2b3c      	cmp	r3, #60	; 0x3c
 800e854:	dc1a      	bgt.n	800e88c <__ieee754_atan2f+0xfc>
 800e856:	2a00      	cmp	r2, #0
 800e858:	da01      	bge.n	800e85e <__ieee754_atan2f+0xce>
 800e85a:	333c      	adds	r3, #60	; 0x3c
 800e85c:	db19      	blt.n	800e892 <__ieee754_atan2f+0x102>
 800e85e:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800e862:	f000 fbe5 	bl	800f030 <fabsf>
 800e866:	f000 fb0f 	bl	800ee88 <atanf>
 800e86a:	eef0 7a40 	vmov.f32	s15, s0
 800e86e:	2c01      	cmp	r4, #1
 800e870:	d012      	beq.n	800e898 <__ieee754_atan2f+0x108>
 800e872:	2c02      	cmp	r4, #2
 800e874:	d017      	beq.n	800e8a6 <__ieee754_atan2f+0x116>
 800e876:	2c00      	cmp	r4, #0
 800e878:	d09d      	beq.n	800e7b6 <__ieee754_atan2f+0x26>
 800e87a:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800e8e4 <__ieee754_atan2f+0x154>
 800e87e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e882:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800e8e8 <__ieee754_atan2f+0x158>
 800e886:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e88a:	e794      	b.n	800e7b6 <__ieee754_atan2f+0x26>
 800e88c:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800e8c4 <__ieee754_atan2f+0x134>
 800e890:	e7ed      	b.n	800e86e <__ieee754_atan2f+0xde>
 800e892:	eddf 7a13 	vldr	s15, [pc, #76]	; 800e8e0 <__ieee754_atan2f+0x150>
 800e896:	e7ea      	b.n	800e86e <__ieee754_atan2f+0xde>
 800e898:	ee17 3a90 	vmov	r3, s15
 800e89c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e8a0:	ee07 3a90 	vmov	s15, r3
 800e8a4:	e787      	b.n	800e7b6 <__ieee754_atan2f+0x26>
 800e8a6:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800e8e4 <__ieee754_atan2f+0x154>
 800e8aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e8ae:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800e8e8 <__ieee754_atan2f+0x158>
 800e8b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e8b6:	e77e      	b.n	800e7b6 <__ieee754_atan2f+0x26>
 800e8b8:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800e8e8 <__ieee754_atan2f+0x158>
 800e8bc:	e77b      	b.n	800e7b6 <__ieee754_atan2f+0x26>
 800e8be:	bf00      	nop
 800e8c0:	c0490fdb 	.word	0xc0490fdb
 800e8c4:	3fc90fdb 	.word	0x3fc90fdb
 800e8c8:	bfc90fdb 	.word	0xbfc90fdb
 800e8cc:	bf490fdb 	.word	0xbf490fdb
 800e8d0:	3f490fdb 	.word	0x3f490fdb
 800e8d4:	4016cbe4 	.word	0x4016cbe4
 800e8d8:	c016cbe4 	.word	0xc016cbe4
 800e8dc:	80000000 	.word	0x80000000
 800e8e0:	00000000 	.word	0x00000000
 800e8e4:	33bbbd2e 	.word	0x33bbbd2e
 800e8e8:	40490fdb 	.word	0x40490fdb

0800e8ec <__ieee754_powf>:
 800e8ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8f0:	ee10 5a90 	vmov	r5, s1
 800e8f4:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 800e8f8:	ed2d 8b02 	vpush	{d8}
 800e8fc:	eeb0 8a40 	vmov.f32	s16, s0
 800e900:	eef0 8a60 	vmov.f32	s17, s1
 800e904:	f000 8293 	beq.w	800ee2e <__ieee754_powf+0x542>
 800e908:	ee10 8a10 	vmov	r8, s0
 800e90c:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 800e910:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800e914:	dc06      	bgt.n	800e924 <__ieee754_powf+0x38>
 800e916:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800e91a:	dd0a      	ble.n	800e932 <__ieee754_powf+0x46>
 800e91c:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800e920:	f000 8285 	beq.w	800ee2e <__ieee754_powf+0x542>
 800e924:	ecbd 8b02 	vpop	{d8}
 800e928:	48d9      	ldr	r0, [pc, #868]	; (800ec90 <__ieee754_powf+0x3a4>)
 800e92a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e92e:	f000 bb91 	b.w	800f054 <nanf>
 800e932:	f1b8 0f00 	cmp.w	r8, #0
 800e936:	da1d      	bge.n	800e974 <__ieee754_powf+0x88>
 800e938:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 800e93c:	da2c      	bge.n	800e998 <__ieee754_powf+0xac>
 800e93e:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800e942:	db30      	blt.n	800e9a6 <__ieee754_powf+0xba>
 800e944:	15fb      	asrs	r3, r7, #23
 800e946:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800e94a:	fa47 f603 	asr.w	r6, r7, r3
 800e94e:	fa06 f303 	lsl.w	r3, r6, r3
 800e952:	42bb      	cmp	r3, r7
 800e954:	d127      	bne.n	800e9a6 <__ieee754_powf+0xba>
 800e956:	f006 0601 	and.w	r6, r6, #1
 800e95a:	f1c6 0602 	rsb	r6, r6, #2
 800e95e:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800e962:	d122      	bne.n	800e9aa <__ieee754_powf+0xbe>
 800e964:	2d00      	cmp	r5, #0
 800e966:	f280 8268 	bge.w	800ee3a <__ieee754_powf+0x54e>
 800e96a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e96e:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800e972:	e00d      	b.n	800e990 <__ieee754_powf+0xa4>
 800e974:	2600      	movs	r6, #0
 800e976:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800e97a:	d1f0      	bne.n	800e95e <__ieee754_powf+0x72>
 800e97c:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800e980:	f000 8255 	beq.w	800ee2e <__ieee754_powf+0x542>
 800e984:	dd0a      	ble.n	800e99c <__ieee754_powf+0xb0>
 800e986:	2d00      	cmp	r5, #0
 800e988:	f280 8254 	bge.w	800ee34 <__ieee754_powf+0x548>
 800e98c:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 800ec94 <__ieee754_powf+0x3a8>
 800e990:	ecbd 8b02 	vpop	{d8}
 800e994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e998:	2602      	movs	r6, #2
 800e99a:	e7ec      	b.n	800e976 <__ieee754_powf+0x8a>
 800e99c:	2d00      	cmp	r5, #0
 800e99e:	daf5      	bge.n	800e98c <__ieee754_powf+0xa0>
 800e9a0:	eeb1 0a68 	vneg.f32	s0, s17
 800e9a4:	e7f4      	b.n	800e990 <__ieee754_powf+0xa4>
 800e9a6:	2600      	movs	r6, #0
 800e9a8:	e7d9      	b.n	800e95e <__ieee754_powf+0x72>
 800e9aa:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 800e9ae:	d102      	bne.n	800e9b6 <__ieee754_powf+0xca>
 800e9b0:	ee28 0a08 	vmul.f32	s0, s16, s16
 800e9b4:	e7ec      	b.n	800e990 <__ieee754_powf+0xa4>
 800e9b6:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 800e9ba:	eeb0 0a48 	vmov.f32	s0, s16
 800e9be:	d108      	bne.n	800e9d2 <__ieee754_powf+0xe6>
 800e9c0:	f1b8 0f00 	cmp.w	r8, #0
 800e9c4:	db05      	blt.n	800e9d2 <__ieee754_powf+0xe6>
 800e9c6:	ecbd 8b02 	vpop	{d8}
 800e9ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e9ce:	f000 ba4d 	b.w	800ee6c <__ieee754_sqrtf>
 800e9d2:	f000 fb2d 	bl	800f030 <fabsf>
 800e9d6:	b124      	cbz	r4, 800e9e2 <__ieee754_powf+0xf6>
 800e9d8:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 800e9dc:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800e9e0:	d117      	bne.n	800ea12 <__ieee754_powf+0x126>
 800e9e2:	2d00      	cmp	r5, #0
 800e9e4:	bfbc      	itt	lt
 800e9e6:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800e9ea:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800e9ee:	f1b8 0f00 	cmp.w	r8, #0
 800e9f2:	dacd      	bge.n	800e990 <__ieee754_powf+0xa4>
 800e9f4:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 800e9f8:	ea54 0306 	orrs.w	r3, r4, r6
 800e9fc:	d104      	bne.n	800ea08 <__ieee754_powf+0x11c>
 800e9fe:	ee70 7a40 	vsub.f32	s15, s0, s0
 800ea02:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800ea06:	e7c3      	b.n	800e990 <__ieee754_powf+0xa4>
 800ea08:	2e01      	cmp	r6, #1
 800ea0a:	d1c1      	bne.n	800e990 <__ieee754_powf+0xa4>
 800ea0c:	eeb1 0a40 	vneg.f32	s0, s0
 800ea10:	e7be      	b.n	800e990 <__ieee754_powf+0xa4>
 800ea12:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 800ea16:	3801      	subs	r0, #1
 800ea18:	ea56 0300 	orrs.w	r3, r6, r0
 800ea1c:	d104      	bne.n	800ea28 <__ieee754_powf+0x13c>
 800ea1e:	ee38 8a48 	vsub.f32	s16, s16, s16
 800ea22:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800ea26:	e7b3      	b.n	800e990 <__ieee754_powf+0xa4>
 800ea28:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 800ea2c:	dd6d      	ble.n	800eb0a <__ieee754_powf+0x21e>
 800ea2e:	4b9a      	ldr	r3, [pc, #616]	; (800ec98 <__ieee754_powf+0x3ac>)
 800ea30:	429c      	cmp	r4, r3
 800ea32:	dc06      	bgt.n	800ea42 <__ieee754_powf+0x156>
 800ea34:	2d00      	cmp	r5, #0
 800ea36:	daa9      	bge.n	800e98c <__ieee754_powf+0xa0>
 800ea38:	ed9f 0a98 	vldr	s0, [pc, #608]	; 800ec9c <__ieee754_powf+0x3b0>
 800ea3c:	ee20 0a00 	vmul.f32	s0, s0, s0
 800ea40:	e7a6      	b.n	800e990 <__ieee754_powf+0xa4>
 800ea42:	4b97      	ldr	r3, [pc, #604]	; (800eca0 <__ieee754_powf+0x3b4>)
 800ea44:	429c      	cmp	r4, r3
 800ea46:	dd02      	ble.n	800ea4e <__ieee754_powf+0x162>
 800ea48:	2d00      	cmp	r5, #0
 800ea4a:	dcf5      	bgt.n	800ea38 <__ieee754_powf+0x14c>
 800ea4c:	e79e      	b.n	800e98c <__ieee754_powf+0xa0>
 800ea4e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ea52:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ea56:	ed9f 7a93 	vldr	s14, [pc, #588]	; 800eca4 <__ieee754_powf+0x3b8>
 800ea5a:	eef1 6a40 	vneg.f32	s13, s0
 800ea5e:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800ea62:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800ea66:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800ea6a:	eee7 7a40 	vfms.f32	s15, s14, s0
 800ea6e:	ee60 0a00 	vmul.f32	s1, s0, s0
 800ea72:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 800eca8 <__ieee754_powf+0x3bc>
 800ea76:	ee67 0aa0 	vmul.f32	s1, s15, s1
 800ea7a:	eddf 7a8c 	vldr	s15, [pc, #560]	; 800ecac <__ieee754_powf+0x3c0>
 800ea7e:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 800ea82:	eee0 7a07 	vfma.f32	s15, s0, s14
 800ea86:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800ecb0 <__ieee754_powf+0x3c4>
 800ea8a:	eeb0 6a67 	vmov.f32	s12, s15
 800ea8e:	eea0 6a07 	vfma.f32	s12, s0, s14
 800ea92:	ee16 3a10 	vmov	r3, s12
 800ea96:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800ea9a:	f023 030f 	bic.w	r3, r3, #15
 800ea9e:	ee00 3a90 	vmov	s1, r3
 800eaa2:	eee6 0a87 	vfma.f32	s1, s13, s14
 800eaa6:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800eaaa:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 800eaae:	f025 050f 	bic.w	r5, r5, #15
 800eab2:	ee07 5a10 	vmov	s14, r5
 800eab6:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800eaba:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800eabe:	ee07 3a90 	vmov	s15, r3
 800eac2:	eee7 0a27 	vfma.f32	s1, s14, s15
 800eac6:	3e01      	subs	r6, #1
 800eac8:	ea56 0200 	orrs.w	r2, r6, r0
 800eacc:	ee07 5a10 	vmov	s14, r5
 800ead0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ead4:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800ead8:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800eadc:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800eae0:	ee17 4a10 	vmov	r4, s14
 800eae4:	bf08      	it	eq
 800eae6:	eeb0 8a40 	vmoveq.f32	s16, s0
 800eaea:	2c00      	cmp	r4, #0
 800eaec:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800eaf0:	f340 8184 	ble.w	800edfc <__ieee754_powf+0x510>
 800eaf4:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800eaf8:	f340 80fc 	ble.w	800ecf4 <__ieee754_powf+0x408>
 800eafc:	eddf 7a67 	vldr	s15, [pc, #412]	; 800ec9c <__ieee754_powf+0x3b0>
 800eb00:	ee28 0a27 	vmul.f32	s0, s16, s15
 800eb04:	ee20 0a27 	vmul.f32	s0, s0, s15
 800eb08:	e742      	b.n	800e990 <__ieee754_powf+0xa4>
 800eb0a:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 800eb0e:	bfbf      	itttt	lt
 800eb10:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 800ecb4 <__ieee754_powf+0x3c8>
 800eb14:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800eb18:	f06f 0217 	mvnlt.w	r2, #23
 800eb1c:	ee17 4a90 	vmovlt	r4, s15
 800eb20:	ea4f 53e4 	mov.w	r3, r4, asr #23
 800eb24:	bfa8      	it	ge
 800eb26:	2200      	movge	r2, #0
 800eb28:	3b7f      	subs	r3, #127	; 0x7f
 800eb2a:	4413      	add	r3, r2
 800eb2c:	4a62      	ldr	r2, [pc, #392]	; (800ecb8 <__ieee754_powf+0x3cc>)
 800eb2e:	f3c4 0416 	ubfx	r4, r4, #0, #23
 800eb32:	4294      	cmp	r4, r2
 800eb34:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 800eb38:	dd06      	ble.n	800eb48 <__ieee754_powf+0x25c>
 800eb3a:	4a60      	ldr	r2, [pc, #384]	; (800ecbc <__ieee754_powf+0x3d0>)
 800eb3c:	4294      	cmp	r4, r2
 800eb3e:	f340 80a5 	ble.w	800ec8c <__ieee754_powf+0x3a0>
 800eb42:	3301      	adds	r3, #1
 800eb44:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800eb48:	2400      	movs	r4, #0
 800eb4a:	4a5d      	ldr	r2, [pc, #372]	; (800ecc0 <__ieee754_powf+0x3d4>)
 800eb4c:	00a7      	lsls	r7, r4, #2
 800eb4e:	443a      	add	r2, r7
 800eb50:	ee07 1a90 	vmov	s15, r1
 800eb54:	ed92 7a00 	vldr	s14, [r2]
 800eb58:	4a5a      	ldr	r2, [pc, #360]	; (800ecc4 <__ieee754_powf+0x3d8>)
 800eb5a:	ee37 6a27 	vadd.f32	s12, s14, s15
 800eb5e:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800eb62:	eec5 6a06 	vdiv.f32	s13, s10, s12
 800eb66:	1049      	asrs	r1, r1, #1
 800eb68:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800eb6c:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800eb70:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 800eb74:	ee77 5ac7 	vsub.f32	s11, s15, s14
 800eb78:	ee06 1a10 	vmov	s12, r1
 800eb7c:	ee65 4aa6 	vmul.f32	s9, s11, s13
 800eb80:	ee14 ca90 	vmov	ip, s9
 800eb84:	ea02 0c0c 	and.w	ip, r2, ip
 800eb88:	ee05 ca10 	vmov	s10, ip
 800eb8c:	eeb1 4a45 	vneg.f32	s8, s10
 800eb90:	eee4 5a06 	vfma.f32	s11, s8, s12
 800eb94:	ee36 6a47 	vsub.f32	s12, s12, s14
 800eb98:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800ecc8 <__ieee754_powf+0x3dc>
 800eb9c:	ee37 6ac6 	vsub.f32	s12, s15, s12
 800eba0:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800eba4:	eee4 5a06 	vfma.f32	s11, s8, s12
 800eba8:	ee67 3aa7 	vmul.f32	s7, s15, s15
 800ebac:	ee25 6aa6 	vmul.f32	s12, s11, s13
 800ebb0:	eddf 5a46 	vldr	s11, [pc, #280]	; 800eccc <__ieee754_powf+0x3e0>
 800ebb4:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800ebb8:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ecd0 <__ieee754_powf+0x3e4>
 800ebbc:	eee7 5a27 	vfma.f32	s11, s14, s15
 800ebc0:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800eca4 <__ieee754_powf+0x3b8>
 800ebc4:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800ebc8:	eddf 5a42 	vldr	s11, [pc, #264]	; 800ecd4 <__ieee754_powf+0x3e8>
 800ebcc:	eee7 5a27 	vfma.f32	s11, s14, s15
 800ebd0:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800ecd8 <__ieee754_powf+0x3ec>
 800ebd4:	ee75 6a24 	vadd.f32	s13, s10, s9
 800ebd8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800ebdc:	ee66 6a86 	vmul.f32	s13, s13, s12
 800ebe0:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 800ebe4:	eef0 7a65 	vmov.f32	s15, s11
 800ebe8:	eee3 6a87 	vfma.f32	s13, s7, s14
 800ebec:	eee5 7a05 	vfma.f32	s15, s10, s10
 800ebf0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ebf4:	ee17 1a90 	vmov	r1, s15
 800ebf8:	4011      	ands	r1, r2
 800ebfa:	ee07 1a90 	vmov	s15, r1
 800ebfe:	ee37 7ae5 	vsub.f32	s14, s15, s11
 800ec02:	eddf 5a36 	vldr	s11, [pc, #216]	; 800ecdc <__ieee754_powf+0x3f0>
 800ec06:	eea4 7a05 	vfma.f32	s14, s8, s10
 800ec0a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800ec0e:	ee27 7a24 	vmul.f32	s14, s14, s9
 800ec12:	eea7 7a86 	vfma.f32	s14, s15, s12
 800ec16:	eeb0 6a47 	vmov.f32	s12, s14
 800ec1a:	eea5 6a27 	vfma.f32	s12, s10, s15
 800ec1e:	ee16 1a10 	vmov	r1, s12
 800ec22:	4011      	ands	r1, r2
 800ec24:	ee06 1a90 	vmov	s13, r1
 800ec28:	eee4 6a27 	vfma.f32	s13, s8, s15
 800ec2c:	eddf 7a2c 	vldr	s15, [pc, #176]	; 800ece0 <__ieee754_powf+0x3f4>
 800ec30:	ee37 7a66 	vsub.f32	s14, s14, s13
 800ec34:	ee06 1a10 	vmov	s12, r1
 800ec38:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ec3c:	eddf 7a29 	vldr	s15, [pc, #164]	; 800ece4 <__ieee754_powf+0x3f8>
 800ec40:	4929      	ldr	r1, [pc, #164]	; (800ece8 <__ieee754_powf+0x3fc>)
 800ec42:	eea6 7a27 	vfma.f32	s14, s12, s15
 800ec46:	4439      	add	r1, r7
 800ec48:	edd1 7a00 	vldr	s15, [r1]
 800ec4c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ec50:	ee07 3a90 	vmov	s15, r3
 800ec54:	eef0 0a47 	vmov.f32	s1, s14
 800ec58:	4b24      	ldr	r3, [pc, #144]	; (800ecec <__ieee754_powf+0x400>)
 800ec5a:	eee6 0a25 	vfma.f32	s1, s12, s11
 800ec5e:	443b      	add	r3, r7
 800ec60:	ed93 5a00 	vldr	s10, [r3]
 800ec64:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800ec68:	ee70 0a85 	vadd.f32	s1, s1, s10
 800ec6c:	ee70 7aa6 	vadd.f32	s15, s1, s13
 800ec70:	ee17 3a90 	vmov	r3, s15
 800ec74:	4013      	ands	r3, r2
 800ec76:	ee07 3a90 	vmov	s15, r3
 800ec7a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ec7e:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800ec82:	eee6 7a65 	vfms.f32	s15, s12, s11
 800ec86:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ec8a:	e70e      	b.n	800eaaa <__ieee754_powf+0x1be>
 800ec8c:	2401      	movs	r4, #1
 800ec8e:	e75c      	b.n	800eb4a <__ieee754_powf+0x25e>
 800ec90:	0800f7f1 	.word	0x0800f7f1
 800ec94:	00000000 	.word	0x00000000
 800ec98:	3f7ffff7 	.word	0x3f7ffff7
 800ec9c:	7149f2ca 	.word	0x7149f2ca
 800eca0:	3f800007 	.word	0x3f800007
 800eca4:	3eaaaaab 	.word	0x3eaaaaab
 800eca8:	36eca570 	.word	0x36eca570
 800ecac:	3fb8aa3b 	.word	0x3fb8aa3b
 800ecb0:	3fb8aa00 	.word	0x3fb8aa00
 800ecb4:	4b800000 	.word	0x4b800000
 800ecb8:	001cc471 	.word	0x001cc471
 800ecbc:	005db3d6 	.word	0x005db3d6
 800ecc0:	0800f914 	.word	0x0800f914
 800ecc4:	fffff000 	.word	0xfffff000
 800ecc8:	3e6c3255 	.word	0x3e6c3255
 800eccc:	3e53f142 	.word	0x3e53f142
 800ecd0:	3e8ba305 	.word	0x3e8ba305
 800ecd4:	3edb6db7 	.word	0x3edb6db7
 800ecd8:	3f19999a 	.word	0x3f19999a
 800ecdc:	3f763800 	.word	0x3f763800
 800ece0:	3f76384f 	.word	0x3f76384f
 800ece4:	369dc3a0 	.word	0x369dc3a0
 800ece8:	0800f924 	.word	0x0800f924
 800ecec:	0800f91c 	.word	0x0800f91c
 800ecf0:	3338aa3c 	.word	0x3338aa3c
 800ecf4:	f040 8092 	bne.w	800ee1c <__ieee754_powf+0x530>
 800ecf8:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800ecf0 <__ieee754_powf+0x404>
 800ecfc:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ed00:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800ed04:	eef4 6ac7 	vcmpe.f32	s13, s14
 800ed08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed0c:	f73f aef6 	bgt.w	800eafc <__ieee754_powf+0x210>
 800ed10:	15db      	asrs	r3, r3, #23
 800ed12:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800ed16:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800ed1a:	4103      	asrs	r3, r0
 800ed1c:	4423      	add	r3, r4
 800ed1e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800ed22:	4947      	ldr	r1, [pc, #284]	; (800ee40 <__ieee754_powf+0x554>)
 800ed24:	3a7f      	subs	r2, #127	; 0x7f
 800ed26:	4111      	asrs	r1, r2
 800ed28:	ea23 0101 	bic.w	r1, r3, r1
 800ed2c:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800ed30:	ee07 1a10 	vmov	s14, r1
 800ed34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800ed38:	f1c2 0217 	rsb	r2, r2, #23
 800ed3c:	4110      	asrs	r0, r2
 800ed3e:	2c00      	cmp	r4, #0
 800ed40:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ed44:	bfb8      	it	lt
 800ed46:	4240      	neglt	r0, r0
 800ed48:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800ed4c:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ee44 <__ieee754_powf+0x558>
 800ed50:	ee17 3a10 	vmov	r3, s14
 800ed54:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800ed58:	f023 030f 	bic.w	r3, r3, #15
 800ed5c:	ee07 3a10 	vmov	s14, r3
 800ed60:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ed64:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800ed68:	eddf 7a37 	vldr	s15, [pc, #220]	; 800ee48 <__ieee754_powf+0x55c>
 800ed6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ed70:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800ed74:	eddf 6a35 	vldr	s13, [pc, #212]	; 800ee4c <__ieee754_powf+0x560>
 800ed78:	eeb0 0a67 	vmov.f32	s0, s15
 800ed7c:	eea7 0a26 	vfma.f32	s0, s14, s13
 800ed80:	eeb0 6a40 	vmov.f32	s12, s0
 800ed84:	eea7 6a66 	vfms.f32	s12, s14, s13
 800ed88:	ee20 7a00 	vmul.f32	s14, s0, s0
 800ed8c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800ed90:	eddf 6a2f 	vldr	s13, [pc, #188]	; 800ee50 <__ieee754_powf+0x564>
 800ed94:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800ee54 <__ieee754_powf+0x568>
 800ed98:	eea7 6a26 	vfma.f32	s12, s14, s13
 800ed9c:	eddf 6a2e 	vldr	s13, [pc, #184]	; 800ee58 <__ieee754_powf+0x56c>
 800eda0:	eee6 6a07 	vfma.f32	s13, s12, s14
 800eda4:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 800ee5c <__ieee754_powf+0x570>
 800eda8:	eea6 6a87 	vfma.f32	s12, s13, s14
 800edac:	eddf 6a2c 	vldr	s13, [pc, #176]	; 800ee60 <__ieee754_powf+0x574>
 800edb0:	eee6 6a07 	vfma.f32	s13, s12, s14
 800edb4:	eeb0 6a40 	vmov.f32	s12, s0
 800edb8:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800edbc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800edc0:	eeb0 7a46 	vmov.f32	s14, s12
 800edc4:	ee77 6a66 	vsub.f32	s13, s14, s13
 800edc8:	ee20 6a06 	vmul.f32	s12, s0, s12
 800edcc:	eee0 7a27 	vfma.f32	s15, s0, s15
 800edd0:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800edd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800edd8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800eddc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ede0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800ede4:	ee10 3a10 	vmov	r3, s0
 800ede8:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800edec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800edf0:	da1a      	bge.n	800ee28 <__ieee754_powf+0x53c>
 800edf2:	f000 f98f 	bl	800f114 <scalbnf>
 800edf6:	ee20 0a08 	vmul.f32	s0, s0, s16
 800edfa:	e5c9      	b.n	800e990 <__ieee754_powf+0xa4>
 800edfc:	4a19      	ldr	r2, [pc, #100]	; (800ee64 <__ieee754_powf+0x578>)
 800edfe:	4293      	cmp	r3, r2
 800ee00:	dd02      	ble.n	800ee08 <__ieee754_powf+0x51c>
 800ee02:	eddf 7a19 	vldr	s15, [pc, #100]	; 800ee68 <__ieee754_powf+0x57c>
 800ee06:	e67b      	b.n	800eb00 <__ieee754_powf+0x214>
 800ee08:	d108      	bne.n	800ee1c <__ieee754_powf+0x530>
 800ee0a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ee0e:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800ee12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee16:	f6ff af7b 	blt.w	800ed10 <__ieee754_powf+0x424>
 800ee1a:	e7f2      	b.n	800ee02 <__ieee754_powf+0x516>
 800ee1c:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800ee20:	f73f af76 	bgt.w	800ed10 <__ieee754_powf+0x424>
 800ee24:	2000      	movs	r0, #0
 800ee26:	e78f      	b.n	800ed48 <__ieee754_powf+0x45c>
 800ee28:	ee00 3a10 	vmov	s0, r3
 800ee2c:	e7e3      	b.n	800edf6 <__ieee754_powf+0x50a>
 800ee2e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ee32:	e5ad      	b.n	800e990 <__ieee754_powf+0xa4>
 800ee34:	eeb0 0a68 	vmov.f32	s0, s17
 800ee38:	e5aa      	b.n	800e990 <__ieee754_powf+0xa4>
 800ee3a:	eeb0 0a48 	vmov.f32	s0, s16
 800ee3e:	e5a7      	b.n	800e990 <__ieee754_powf+0xa4>
 800ee40:	007fffff 	.word	0x007fffff
 800ee44:	3f317218 	.word	0x3f317218
 800ee48:	35bfbe8c 	.word	0x35bfbe8c
 800ee4c:	3f317200 	.word	0x3f317200
 800ee50:	3331bb4c 	.word	0x3331bb4c
 800ee54:	b5ddea0e 	.word	0xb5ddea0e
 800ee58:	388ab355 	.word	0x388ab355
 800ee5c:	bb360b61 	.word	0xbb360b61
 800ee60:	3e2aaaab 	.word	0x3e2aaaab
 800ee64:	43160000 	.word	0x43160000
 800ee68:	0da24260 	.word	0x0da24260

0800ee6c <__ieee754_sqrtf>:
 800ee6c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800ee70:	4770      	bx	lr

0800ee72 <matherr>:
 800ee72:	2000      	movs	r0, #0
 800ee74:	4770      	bx	lr
	...

0800ee78 <nan>:
 800ee78:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ee80 <nan+0x8>
 800ee7c:	4770      	bx	lr
 800ee7e:	bf00      	nop
 800ee80:	00000000 	.word	0x00000000
 800ee84:	7ff80000 	.word	0x7ff80000

0800ee88 <atanf>:
 800ee88:	b538      	push	{r3, r4, r5, lr}
 800ee8a:	ee10 5a10 	vmov	r5, s0
 800ee8e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800ee92:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800ee96:	eef0 7a40 	vmov.f32	s15, s0
 800ee9a:	db10      	blt.n	800eebe <atanf+0x36>
 800ee9c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800eea0:	dd04      	ble.n	800eeac <atanf+0x24>
 800eea2:	ee70 7a00 	vadd.f32	s15, s0, s0
 800eea6:	eeb0 0a67 	vmov.f32	s0, s15
 800eeaa:	bd38      	pop	{r3, r4, r5, pc}
 800eeac:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800efe4 <atanf+0x15c>
 800eeb0:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800efe8 <atanf+0x160>
 800eeb4:	2d00      	cmp	r5, #0
 800eeb6:	bfd8      	it	le
 800eeb8:	eef0 7a47 	vmovle.f32	s15, s14
 800eebc:	e7f3      	b.n	800eea6 <atanf+0x1e>
 800eebe:	4b4b      	ldr	r3, [pc, #300]	; (800efec <atanf+0x164>)
 800eec0:	429c      	cmp	r4, r3
 800eec2:	dc10      	bgt.n	800eee6 <atanf+0x5e>
 800eec4:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800eec8:	da0a      	bge.n	800eee0 <atanf+0x58>
 800eeca:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800eff0 <atanf+0x168>
 800eece:	ee30 7a07 	vadd.f32	s14, s0, s14
 800eed2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800eed6:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800eeda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eede:	dce2      	bgt.n	800eea6 <atanf+0x1e>
 800eee0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eee4:	e013      	b.n	800ef0e <atanf+0x86>
 800eee6:	f000 f8a3 	bl	800f030 <fabsf>
 800eeea:	4b42      	ldr	r3, [pc, #264]	; (800eff4 <atanf+0x16c>)
 800eeec:	429c      	cmp	r4, r3
 800eeee:	dc4f      	bgt.n	800ef90 <atanf+0x108>
 800eef0:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800eef4:	429c      	cmp	r4, r3
 800eef6:	dc41      	bgt.n	800ef7c <atanf+0xf4>
 800eef8:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800eefc:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800ef00:	eea0 7a27 	vfma.f32	s14, s0, s15
 800ef04:	2300      	movs	r3, #0
 800ef06:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ef0a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ef0e:	1c5a      	adds	r2, r3, #1
 800ef10:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800ef14:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800eff8 <atanf+0x170>
 800ef18:	eddf 5a38 	vldr	s11, [pc, #224]	; 800effc <atanf+0x174>
 800ef1c:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800f000 <atanf+0x178>
 800ef20:	ee66 6a06 	vmul.f32	s13, s12, s12
 800ef24:	eee6 5a87 	vfma.f32	s11, s13, s14
 800ef28:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800f004 <atanf+0x17c>
 800ef2c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800ef30:	eddf 5a35 	vldr	s11, [pc, #212]	; 800f008 <atanf+0x180>
 800ef34:	eee7 5a26 	vfma.f32	s11, s14, s13
 800ef38:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800f00c <atanf+0x184>
 800ef3c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800ef40:	eddf 5a33 	vldr	s11, [pc, #204]	; 800f010 <atanf+0x188>
 800ef44:	eee7 5a26 	vfma.f32	s11, s14, s13
 800ef48:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800f014 <atanf+0x18c>
 800ef4c:	eea6 5a87 	vfma.f32	s10, s13, s14
 800ef50:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800f018 <atanf+0x190>
 800ef54:	eea5 7a26 	vfma.f32	s14, s10, s13
 800ef58:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800f01c <atanf+0x194>
 800ef5c:	eea7 5a26 	vfma.f32	s10, s14, s13
 800ef60:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800f020 <atanf+0x198>
 800ef64:	eea5 7a26 	vfma.f32	s14, s10, s13
 800ef68:	ee27 7a26 	vmul.f32	s14, s14, s13
 800ef6c:	eea5 7a86 	vfma.f32	s14, s11, s12
 800ef70:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ef74:	d121      	bne.n	800efba <atanf+0x132>
 800ef76:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ef7a:	e794      	b.n	800eea6 <atanf+0x1e>
 800ef7c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ef80:	ee30 7a67 	vsub.f32	s14, s0, s15
 800ef84:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ef88:	2301      	movs	r3, #1
 800ef8a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ef8e:	e7be      	b.n	800ef0e <atanf+0x86>
 800ef90:	4b24      	ldr	r3, [pc, #144]	; (800f024 <atanf+0x19c>)
 800ef92:	429c      	cmp	r4, r3
 800ef94:	dc0b      	bgt.n	800efae <atanf+0x126>
 800ef96:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800ef9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ef9e:	eea0 7a27 	vfma.f32	s14, s0, s15
 800efa2:	2302      	movs	r3, #2
 800efa4:	ee70 6a67 	vsub.f32	s13, s0, s15
 800efa8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800efac:	e7af      	b.n	800ef0e <atanf+0x86>
 800efae:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800efb2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800efb6:	2303      	movs	r3, #3
 800efb8:	e7a9      	b.n	800ef0e <atanf+0x86>
 800efba:	4a1b      	ldr	r2, [pc, #108]	; (800f028 <atanf+0x1a0>)
 800efbc:	491b      	ldr	r1, [pc, #108]	; (800f02c <atanf+0x1a4>)
 800efbe:	009b      	lsls	r3, r3, #2
 800efc0:	441a      	add	r2, r3
 800efc2:	440b      	add	r3, r1
 800efc4:	edd3 6a00 	vldr	s13, [r3]
 800efc8:	ee37 7a66 	vsub.f32	s14, s14, s13
 800efcc:	2d00      	cmp	r5, #0
 800efce:	ee77 7a67 	vsub.f32	s15, s14, s15
 800efd2:	ed92 7a00 	vldr	s14, [r2]
 800efd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800efda:	bfb8      	it	lt
 800efdc:	eef1 7a67 	vneglt.f32	s15, s15
 800efe0:	e761      	b.n	800eea6 <atanf+0x1e>
 800efe2:	bf00      	nop
 800efe4:	bfc90fdb 	.word	0xbfc90fdb
 800efe8:	3fc90fdb 	.word	0x3fc90fdb
 800efec:	3edfffff 	.word	0x3edfffff
 800eff0:	7149f2ca 	.word	0x7149f2ca
 800eff4:	3f97ffff 	.word	0x3f97ffff
 800eff8:	3c8569d7 	.word	0x3c8569d7
 800effc:	3d4bda59 	.word	0x3d4bda59
 800f000:	bd6ef16b 	.word	0xbd6ef16b
 800f004:	3d886b35 	.word	0x3d886b35
 800f008:	3dba2e6e 	.word	0x3dba2e6e
 800f00c:	3e124925 	.word	0x3e124925
 800f010:	3eaaaaab 	.word	0x3eaaaaab
 800f014:	bd15a221 	.word	0xbd15a221
 800f018:	bd9d8795 	.word	0xbd9d8795
 800f01c:	bde38e38 	.word	0xbde38e38
 800f020:	be4ccccd 	.word	0xbe4ccccd
 800f024:	401bffff 	.word	0x401bffff
 800f028:	0800f92c 	.word	0x0800f92c
 800f02c:	0800f93c 	.word	0x0800f93c

0800f030 <fabsf>:
 800f030:	ee10 3a10 	vmov	r3, s0
 800f034:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f038:	ee00 3a10 	vmov	s0, r3
 800f03c:	4770      	bx	lr

0800f03e <finitef>:
 800f03e:	ee10 3a10 	vmov	r3, s0
 800f042:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 800f046:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800f04a:	bfac      	ite	ge
 800f04c:	2000      	movge	r0, #0
 800f04e:	2001      	movlt	r0, #1
 800f050:	4770      	bx	lr
	...

0800f054 <nanf>:
 800f054:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800f05c <nanf+0x8>
 800f058:	4770      	bx	lr
 800f05a:	bf00      	nop
 800f05c:	7fc00000 	.word	0x7fc00000

0800f060 <rintf>:
 800f060:	b513      	push	{r0, r1, r4, lr}
 800f062:	ee10 1a10 	vmov	r1, s0
 800f066:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f06a:	0ddc      	lsrs	r4, r3, #23
 800f06c:	3c7f      	subs	r4, #127	; 0x7f
 800f06e:	2c16      	cmp	r4, #22
 800f070:	dc46      	bgt.n	800f100 <rintf+0xa0>
 800f072:	b32b      	cbz	r3, 800f0c0 <rintf+0x60>
 800f074:	2c00      	cmp	r4, #0
 800f076:	ee10 2a10 	vmov	r2, s0
 800f07a:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 800f07e:	da21      	bge.n	800f0c4 <rintf+0x64>
 800f080:	f3c1 0316 	ubfx	r3, r1, #0, #23
 800f084:	425b      	negs	r3, r3
 800f086:	4a21      	ldr	r2, [pc, #132]	; (800f10c <rintf+0xac>)
 800f088:	0a5b      	lsrs	r3, r3, #9
 800f08a:	0d09      	lsrs	r1, r1, #20
 800f08c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f090:	0509      	lsls	r1, r1, #20
 800f092:	430b      	orrs	r3, r1
 800f094:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800f098:	ee07 3a90 	vmov	s15, r3
 800f09c:	edd2 6a00 	vldr	s13, [r2]
 800f0a0:	ee36 7aa7 	vadd.f32	s14, s13, s15
 800f0a4:	ed8d 7a01 	vstr	s14, [sp, #4]
 800f0a8:	eddd 7a01 	vldr	s15, [sp, #4]
 800f0ac:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f0b0:	ee17 3a90 	vmov	r3, s15
 800f0b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f0b8:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 800f0bc:	ee00 3a10 	vmov	s0, r3
 800f0c0:	b002      	add	sp, #8
 800f0c2:	bd10      	pop	{r4, pc}
 800f0c4:	4b12      	ldr	r3, [pc, #72]	; (800f110 <rintf+0xb0>)
 800f0c6:	4123      	asrs	r3, r4
 800f0c8:	4219      	tst	r1, r3
 800f0ca:	d0f9      	beq.n	800f0c0 <rintf+0x60>
 800f0cc:	085b      	lsrs	r3, r3, #1
 800f0ce:	4219      	tst	r1, r3
 800f0d0:	d006      	beq.n	800f0e0 <rintf+0x80>
 800f0d2:	ea21 0203 	bic.w	r2, r1, r3
 800f0d6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800f0da:	fa43 f404 	asr.w	r4, r3, r4
 800f0de:	4322      	orrs	r2, r4
 800f0e0:	4b0a      	ldr	r3, [pc, #40]	; (800f10c <rintf+0xac>)
 800f0e2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f0e6:	ed90 7a00 	vldr	s14, [r0]
 800f0ea:	ee07 2a90 	vmov	s15, r2
 800f0ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f0f2:	edcd 7a01 	vstr	s15, [sp, #4]
 800f0f6:	ed9d 0a01 	vldr	s0, [sp, #4]
 800f0fa:	ee30 0a47 	vsub.f32	s0, s0, s14
 800f0fe:	e7df      	b.n	800f0c0 <rintf+0x60>
 800f100:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f104:	d3dc      	bcc.n	800f0c0 <rintf+0x60>
 800f106:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f10a:	e7d9      	b.n	800f0c0 <rintf+0x60>
 800f10c:	0800f94c 	.word	0x0800f94c
 800f110:	007fffff 	.word	0x007fffff

0800f114 <scalbnf>:
 800f114:	b508      	push	{r3, lr}
 800f116:	ee10 2a10 	vmov	r2, s0
 800f11a:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800f11e:	ed2d 8b02 	vpush	{d8}
 800f122:	eef0 0a40 	vmov.f32	s1, s0
 800f126:	d004      	beq.n	800f132 <scalbnf+0x1e>
 800f128:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f12c:	d306      	bcc.n	800f13c <scalbnf+0x28>
 800f12e:	ee70 0a00 	vadd.f32	s1, s0, s0
 800f132:	ecbd 8b02 	vpop	{d8}
 800f136:	eeb0 0a60 	vmov.f32	s0, s1
 800f13a:	bd08      	pop	{r3, pc}
 800f13c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800f140:	d21c      	bcs.n	800f17c <scalbnf+0x68>
 800f142:	4b1f      	ldr	r3, [pc, #124]	; (800f1c0 <scalbnf+0xac>)
 800f144:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800f1c4 <scalbnf+0xb0>
 800f148:	4298      	cmp	r0, r3
 800f14a:	ee60 0a27 	vmul.f32	s1, s0, s15
 800f14e:	db10      	blt.n	800f172 <scalbnf+0x5e>
 800f150:	ee10 2a90 	vmov	r2, s1
 800f154:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 800f158:	3b19      	subs	r3, #25
 800f15a:	4403      	add	r3, r0
 800f15c:	2bfe      	cmp	r3, #254	; 0xfe
 800f15e:	dd0f      	ble.n	800f180 <scalbnf+0x6c>
 800f160:	ed9f 8a19 	vldr	s16, [pc, #100]	; 800f1c8 <scalbnf+0xb4>
 800f164:	eeb0 0a48 	vmov.f32	s0, s16
 800f168:	f000 f834 	bl	800f1d4 <copysignf>
 800f16c:	ee60 0a08 	vmul.f32	s1, s0, s16
 800f170:	e7df      	b.n	800f132 <scalbnf+0x1e>
 800f172:	eddf 7a16 	vldr	s15, [pc, #88]	; 800f1cc <scalbnf+0xb8>
 800f176:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800f17a:	e7da      	b.n	800f132 <scalbnf+0x1e>
 800f17c:	0ddb      	lsrs	r3, r3, #23
 800f17e:	e7ec      	b.n	800f15a <scalbnf+0x46>
 800f180:	2b00      	cmp	r3, #0
 800f182:	dd06      	ble.n	800f192 <scalbnf+0x7e>
 800f184:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800f188:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800f18c:	ee00 3a90 	vmov	s1, r3
 800f190:	e7cf      	b.n	800f132 <scalbnf+0x1e>
 800f192:	f113 0f16 	cmn.w	r3, #22
 800f196:	da06      	bge.n	800f1a6 <scalbnf+0x92>
 800f198:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f19c:	4298      	cmp	r0, r3
 800f19e:	dcdf      	bgt.n	800f160 <scalbnf+0x4c>
 800f1a0:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 800f1cc <scalbnf+0xb8>
 800f1a4:	e7de      	b.n	800f164 <scalbnf+0x50>
 800f1a6:	3319      	adds	r3, #25
 800f1a8:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800f1ac:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800f1b0:	eddf 7a07 	vldr	s15, [pc, #28]	; 800f1d0 <scalbnf+0xbc>
 800f1b4:	ee07 3a10 	vmov	s14, r3
 800f1b8:	ee67 0a27 	vmul.f32	s1, s14, s15
 800f1bc:	e7b9      	b.n	800f132 <scalbnf+0x1e>
 800f1be:	bf00      	nop
 800f1c0:	ffff3cb0 	.word	0xffff3cb0
 800f1c4:	4c000000 	.word	0x4c000000
 800f1c8:	7149f2ca 	.word	0x7149f2ca
 800f1cc:	0da24260 	.word	0x0da24260
 800f1d0:	33000000 	.word	0x33000000

0800f1d4 <copysignf>:
 800f1d4:	ee10 3a10 	vmov	r3, s0
 800f1d8:	ee10 2a90 	vmov	r2, s1
 800f1dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f1e0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800f1e4:	4313      	orrs	r3, r2
 800f1e6:	ee00 3a10 	vmov	s0, r3
 800f1ea:	4770      	bx	lr

0800f1ec <_init>:
 800f1ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1ee:	bf00      	nop
 800f1f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f1f2:	bc08      	pop	{r3}
 800f1f4:	469e      	mov	lr, r3
 800f1f6:	4770      	bx	lr

0800f1f8 <_fini>:
 800f1f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1fa:	bf00      	nop
 800f1fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f1fe:	bc08      	pop	{r3}
 800f200:	469e      	mov	lr, r3
 800f202:	4770      	bx	lr
