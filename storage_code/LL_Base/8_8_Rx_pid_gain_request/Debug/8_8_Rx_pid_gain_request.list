
8_8_Rx_pid_gain_request.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e1f4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000064c  0800e388  0800e388  0001e388  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e9d4  0800e9d4  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800e9d4  0800e9d4  0001e9d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e9dc  0800e9dc  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e9dc  0800e9dc  0001e9dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e9e0  0800e9e0  0001e9e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800e9e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d8  200001e8  0800ebc8  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200005c0  0800ebc8  000205c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001aa24  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000043ff  00000000  00000000  0003ac38  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001700  00000000  00000000  0003f038  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001520  00000000  00000000  00040738  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026c00  00000000  00000000  00041c58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000150fe  00000000  00000000  00068858  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d362c  00000000  00000000  0007d956  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00150f82  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f24  00000000  00000000  00151000  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e36c 	.word	0x0800e36c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800e36c 	.word	0x0800e36c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c5c:	f000 b972 	b.w	8000f44 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	4688      	mov	r8, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14b      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4615      	mov	r5, r2
 8000c8a:	d967      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0720 	rsb	r7, r2, #32
 8000c96:	fa01 f302 	lsl.w	r3, r1, r2
 8000c9a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c9e:	4095      	lsls	r5, r2
 8000ca0:	ea47 0803 	orr.w	r8, r7, r3
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cb0:	fa1f fc85 	uxth.w	ip, r5
 8000cb4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cb8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18eb      	adds	r3, r5, r3
 8000cc6:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000cca:	f080 811b 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8118 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000cd4:	3f02      	subs	r7, #2
 8000cd6:	442b      	add	r3, r5
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cec:	45a4      	cmp	ip, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	192c      	adds	r4, r5, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cf6:	f080 8107 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cfa:	45a4      	cmp	ip, r4
 8000cfc:	f240 8104 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000d00:	3802      	subs	r0, #2
 8000d02:	442c      	add	r4, r5
 8000d04:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d08:	eba4 040c 	sub.w	r4, r4, ip
 8000d0c:	2700      	movs	r7, #0
 8000d0e:	b11e      	cbz	r6, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c6 4300 	strd	r4, r3, [r6]
 8000d18:	4639      	mov	r1, r7
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0xbe>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80eb 	beq.w	8000efe <__udivmoddi4+0x286>
 8000d28:	2700      	movs	r7, #0
 8000d2a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d2e:	4638      	mov	r0, r7
 8000d30:	4639      	mov	r1, r7
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	fab3 f783 	clz	r7, r3
 8000d3a:	2f00      	cmp	r7, #0
 8000d3c:	d147      	bne.n	8000dce <__udivmoddi4+0x156>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0xd0>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	f200 80fa 	bhi.w	8000f3c <__udivmoddi4+0x2c4>
 8000d48:	1a84      	subs	r4, r0, r2
 8000d4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	4698      	mov	r8, r3
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d0e0      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000d56:	e9c6 4800 	strd	r4, r8, [r6]
 8000d5a:	e7dd      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000d5c:	b902      	cbnz	r2, 8000d60 <__udivmoddi4+0xe8>
 8000d5e:	deff      	udf	#255	; 0xff
 8000d60:	fab2 f282 	clz	r2, r2
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f040 808f 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d6a:	1b49      	subs	r1, r1, r5
 8000d6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d70:	fa1f f885 	uxth.w	r8, r5
 8000d74:	2701      	movs	r7, #1
 8000d76:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d7a:	0c23      	lsrs	r3, r4, #16
 8000d7c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d84:	fb08 f10c 	mul.w	r1, r8, ip
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8c:	18eb      	adds	r3, r5, r3
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4299      	cmp	r1, r3
 8000d96:	f200 80cd 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1a59      	subs	r1, r3, r1
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000da8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x14c>
 8000db4:	192c      	adds	r4, r5, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x14a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80b6 	bhi.w	8000f2e <__udivmoddi4+0x2b6>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e79f      	b.n	8000d0e <__udivmoddi4+0x96>
 8000dce:	f1c7 0c20 	rsb	ip, r7, #32
 8000dd2:	40bb      	lsls	r3, r7
 8000dd4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dd8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ddc:	fa01 f407 	lsl.w	r4, r1, r7
 8000de0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000de4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000de8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dec:	4325      	orrs	r5, r4
 8000dee:	fbb3 f9f8 	udiv	r9, r3, r8
 8000df2:	0c2c      	lsrs	r4, r5, #16
 8000df4:	fb08 3319 	mls	r3, r8, r9, r3
 8000df8:	fa1f fa8e 	uxth.w	sl, lr
 8000dfc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e00:	fb09 f40a 	mul.w	r4, r9, sl
 8000e04:	429c      	cmp	r4, r3
 8000e06:	fa02 f207 	lsl.w	r2, r2, r7
 8000e0a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1e 0303 	adds.w	r3, lr, r3
 8000e14:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e18:	f080 8087 	bcs.w	8000f2a <__udivmoddi4+0x2b2>
 8000e1c:	429c      	cmp	r4, r3
 8000e1e:	f240 8084 	bls.w	8000f2a <__udivmoddi4+0x2b2>
 8000e22:	f1a9 0902 	sub.w	r9, r9, #2
 8000e26:	4473      	add	r3, lr
 8000e28:	1b1b      	subs	r3, r3, r4
 8000e2a:	b2ad      	uxth	r5, r5
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e38:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e3c:	45a2      	cmp	sl, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1e 0404 	adds.w	r4, lr, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e48:	d26b      	bcs.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4a:	45a2      	cmp	sl, r4
 8000e4c:	d969      	bls.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	4474      	add	r4, lr
 8000e52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e56:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5a:	eba4 040a 	sub.w	r4, r4, sl
 8000e5e:	454c      	cmp	r4, r9
 8000e60:	46c2      	mov	sl, r8
 8000e62:	464b      	mov	r3, r9
 8000e64:	d354      	bcc.n	8000f10 <__udivmoddi4+0x298>
 8000e66:	d051      	beq.n	8000f0c <__udivmoddi4+0x294>
 8000e68:	2e00      	cmp	r6, #0
 8000e6a:	d069      	beq.n	8000f40 <__udivmoddi4+0x2c8>
 8000e6c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e70:	eb64 0403 	sbc.w	r4, r4, r3
 8000e74:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e78:	40fd      	lsrs	r5, r7
 8000e7a:	40fc      	lsrs	r4, r7
 8000e7c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e80:	e9c6 5400 	strd	r5, r4, [r6]
 8000e84:	2700      	movs	r7, #0
 8000e86:	e747      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e90:	4095      	lsls	r5, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	fa21 f303 	lsr.w	r3, r1, r3
 8000e9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e9e:	4338      	orrs	r0, r7
 8000ea0:	0c01      	lsrs	r1, r0, #16
 8000ea2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ea6:	fa1f f885 	uxth.w	r8, r5
 8000eaa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb2:	fb07 f308 	mul.w	r3, r7, r8
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ebc:	d907      	bls.n	8000ece <__udivmoddi4+0x256>
 8000ebe:	1869      	adds	r1, r5, r1
 8000ec0:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000ec4:	d22f      	bcs.n	8000f26 <__udivmoddi4+0x2ae>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d92d      	bls.n	8000f26 <__udivmoddi4+0x2ae>
 8000eca:	3f02      	subs	r7, #2
 8000ecc:	4429      	add	r1, r5
 8000ece:	1acb      	subs	r3, r1, r3
 8000ed0:	b281      	uxth	r1, r0
 8000ed2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ede:	fb00 f308 	mul.w	r3, r0, r8
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x27e>
 8000ee6:	1869      	adds	r1, r5, r1
 8000ee8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000eec:	d217      	bcs.n	8000f1e <__udivmoddi4+0x2a6>
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	d915      	bls.n	8000f1e <__udivmoddi4+0x2a6>
 8000ef2:	3802      	subs	r0, #2
 8000ef4:	4429      	add	r1, r5
 8000ef6:	1ac9      	subs	r1, r1, r3
 8000ef8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000efc:	e73b      	b.n	8000d76 <__udivmoddi4+0xfe>
 8000efe:	4637      	mov	r7, r6
 8000f00:	4630      	mov	r0, r6
 8000f02:	e709      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f04:	4607      	mov	r7, r0
 8000f06:	e6e7      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f08:	4618      	mov	r0, r3
 8000f0a:	e6fb      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f0c:	4541      	cmp	r1, r8
 8000f0e:	d2ab      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f10:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f14:	eb69 020e 	sbc.w	r2, r9, lr
 8000f18:	3801      	subs	r0, #1
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	e7a4      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f1e:	4660      	mov	r0, ip
 8000f20:	e7e9      	b.n	8000ef6 <__udivmoddi4+0x27e>
 8000f22:	4618      	mov	r0, r3
 8000f24:	e795      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f26:	4667      	mov	r7, ip
 8000f28:	e7d1      	b.n	8000ece <__udivmoddi4+0x256>
 8000f2a:	4681      	mov	r9, r0
 8000f2c:	e77c      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f2e:	3802      	subs	r0, #2
 8000f30:	442c      	add	r4, r5
 8000f32:	e747      	b.n	8000dc4 <__udivmoddi4+0x14c>
 8000f34:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f38:	442b      	add	r3, r5
 8000f3a:	e72f      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f3c:	4638      	mov	r0, r7
 8000f3e:	e708      	b.n	8000d52 <__udivmoddi4+0xda>
 8000f40:	4637      	mov	r7, r6
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0xa0>

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	683a      	ldr	r2, [r7, #0]
 8000f56:	619a      	str	r2, [r3, #24]
}
 8000f58:	bf00      	nop
 8000f5a:	370c      	adds	r7, #12
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr

08000f64 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	041a      	lsls	r2, r3, #16
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	619a      	str	r2, [r3, #24]
}
 8000f76:	bf00      	nop
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
	...

08000f84 <AT24C08_Page_Write>:
 */

#include "AT24C08.h"
#include "i2c.h"

void AT24C08_Page_Write(unsigned char page, unsigned char *data, unsigned char len) {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b088      	sub	sp, #32
 8000f88:	af04      	add	r7, sp, #16
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	6039      	str	r1, [r7, #0]
 8000f8e:	71fb      	strb	r3, [r7, #7]
 8000f90:	4613      	mov	r3, r2
 8000f92:	71bb      	strb	r3, [r7, #6]
	//Device Address, Word Address Selection
	unsigned char devAddress = ((page * 16) >> 8) << 1 | 0xA0;
 8000f94:	79fb      	ldrb	r3, [r7, #7]
 8000f96:	011b      	lsls	r3, r3, #4
 8000f98:	121b      	asrs	r3, r3, #8
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	b25b      	sxtb	r3, r3
 8000f9e:	f063 035f 	orn	r3, r3, #95	; 0x5f
 8000fa2:	b25b      	sxtb	r3, r3
 8000fa4:	73fb      	strb	r3, [r7, #15]
	unsigned char wordAddress = (page * 16) & 0xff;
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	011b      	lsls	r3, r3, #4
 8000faa:	73bb      	strb	r3, [r7, #14]

	LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_13);
 8000fac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fb0:	480e      	ldr	r0, [pc, #56]	; (8000fec <AT24C08_Page_Write+0x68>)
 8000fb2:	f7ff ffd7 	bl	8000f64 <LL_GPIO_ResetOutputPin>
	HAL_I2C_Mem_Write(&hi2c1, devAddress, wordAddress, I2C_MEMADD_SIZE_8BIT, &data[0], 16, 1);
 8000fb6:	7bfb      	ldrb	r3, [r7, #15]
 8000fb8:	b299      	uxth	r1, r3
 8000fba:	7bbb      	ldrb	r3, [r7, #14]
 8000fbc:	b29a      	uxth	r2, r3
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	9302      	str	r3, [sp, #8]
 8000fc2:	2310      	movs	r3, #16
 8000fc4:	9301      	str	r3, [sp, #4]
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	9300      	str	r3, [sp, #0]
 8000fca:	2301      	movs	r3, #1
 8000fcc:	4808      	ldr	r0, [pc, #32]	; (8000ff0 <AT24C08_Page_Write+0x6c>)
 8000fce:	f006 fb77 	bl	80076c0 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8000fd2:	2001      	movs	r0, #1
 8000fd4:	f004 ffea 	bl	8005fac <HAL_Delay>
	LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_13);
 8000fd8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fdc:	4803      	ldr	r0, [pc, #12]	; (8000fec <AT24C08_Page_Write+0x68>)
 8000fde:	f7ff ffb3 	bl	8000f48 <LL_GPIO_SetOutputPin>
}
 8000fe2:	bf00      	nop
 8000fe4:	3710      	adds	r7, #16
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40020800 	.word	0x40020800
 8000ff0:	20000454 	.word	0x20000454

08000ff4 <AT24C08_Page_Read>:

void AT24C08_Page_Read(unsigned char page, unsigned char *data, unsigned char len) {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b088      	sub	sp, #32
 8000ff8:	af04      	add	r7, sp, #16
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	6039      	str	r1, [r7, #0]
 8000ffe:	71fb      	strb	r3, [r7, #7]
 8001000:	4613      	mov	r3, r2
 8001002:	71bb      	strb	r3, [r7, #6]
	unsigned char devAddress = ((page * 16) >> 8) << 1 | 0xA0;
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	011b      	lsls	r3, r3, #4
 8001008:	121b      	asrs	r3, r3, #8
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	b25b      	sxtb	r3, r3
 800100e:	f063 035f 	orn	r3, r3, #95	; 0x5f
 8001012:	b25b      	sxtb	r3, r3
 8001014:	73fb      	strb	r3, [r7, #15]
	unsigned char wordAddress = (page * 16) & 0xff;
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	011b      	lsls	r3, r3, #4
 800101a:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Mem_Read(&hi2c1, devAddress, wordAddress, I2C_MEMADD_SIZE_8BIT, &data[0], 16, 1);
 800101c:	7bfb      	ldrb	r3, [r7, #15]
 800101e:	b299      	uxth	r1, r3
 8001020:	7bbb      	ldrb	r3, [r7, #14]
 8001022:	b29a      	uxth	r2, r3
 8001024:	2301      	movs	r3, #1
 8001026:	9302      	str	r3, [sp, #8]
 8001028:	2310      	movs	r3, #16
 800102a:	9301      	str	r3, [sp, #4]
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	9300      	str	r3, [sp, #0]
 8001030:	2301      	movs	r3, #1
 8001032:	4803      	ldr	r0, [pc, #12]	; (8001040 <AT24C08_Page_Read+0x4c>)
 8001034:	f006 fc3e 	bl	80078b4 <HAL_I2C_Mem_Read>
}
 8001038:	bf00      	nop
 800103a:	3710      	adds	r7, #16
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20000454 	.word	0x20000454

08001044 <EP_PIDGain_Write>:

void EP_PIDGain_Write(unsigned char id, float PGain, float IGain, float DGain) {
 8001044:	b580      	push	{r7, lr}
 8001046:	b08c      	sub	sp, #48	; 0x30
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001050:	edc7 0a01 	vstr	s1, [r7, #4]
 8001054:	ed87 1a00 	vstr	s2, [r7]
 8001058:	73fb      	strb	r3, [r7, #15]
	unsigned char buf_write[16];
	Parser parser;

	buf_write[0] = 0x45;
 800105a:	2345      	movs	r3, #69	; 0x45
 800105c:	763b      	strb	r3, [r7, #24]
	buf_write[1] = 0x50;
 800105e:	2350      	movs	r3, #80	; 0x50
 8001060:	767b      	strb	r3, [r7, #25]
	buf_write[2] = id;
 8001062:	7bfb      	ldrb	r3, [r7, #15]
 8001064:	76bb      	strb	r3, [r7, #26]

	parser.f = PGain;
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	617b      	str	r3, [r7, #20]
	buf_write[3] = parser.byte[0];
 800106a:	7d3b      	ldrb	r3, [r7, #20]
 800106c:	76fb      	strb	r3, [r7, #27]
	buf_write[4] = parser.byte[1];
 800106e:	7d7b      	ldrb	r3, [r7, #21]
 8001070:	773b      	strb	r3, [r7, #28]
	buf_write[5] = parser.byte[2];
 8001072:	7dbb      	ldrb	r3, [r7, #22]
 8001074:	777b      	strb	r3, [r7, #29]
	buf_write[6] = parser.byte[3];
 8001076:	7dfb      	ldrb	r3, [r7, #23]
 8001078:	77bb      	strb	r3, [r7, #30]

	parser.f = IGain;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	617b      	str	r3, [r7, #20]
	buf_write[7] = parser.byte[0];
 800107e:	7d3b      	ldrb	r3, [r7, #20]
 8001080:	77fb      	strb	r3, [r7, #31]
	buf_write[8] = parser.byte[1];
 8001082:	7d7b      	ldrb	r3, [r7, #21]
 8001084:	f887 3020 	strb.w	r3, [r7, #32]
	buf_write[9] = parser.byte[2];
 8001088:	7dbb      	ldrb	r3, [r7, #22]
 800108a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	buf_write[10] = parser.byte[3];
 800108e:	7dfb      	ldrb	r3, [r7, #23]
 8001090:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	parser.f = DGain;
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	617b      	str	r3, [r7, #20]
	buf_write[11] = parser.byte[0];
 8001098:	7d3b      	ldrb	r3, [r7, #20]
 800109a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	buf_write[12] = parser.byte[1];
 800109e:	7d7b      	ldrb	r3, [r7, #21]
 80010a0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	buf_write[13] = parser.byte[2];
 80010a4:	7dbb      	ldrb	r3, [r7, #22]
 80010a6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	buf_write[14] = parser.byte[3];
 80010aa:	7dfb      	ldrb	r3, [r7, #23]
 80010ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	unsigned char checksum = 0xff;
 80010b0:	23ff      	movs	r3, #255	; 0xff
 80010b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	for (int i = 0; i < 15; i++) {
 80010b6:	2300      	movs	r3, #0
 80010b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80010ba:	e00c      	b.n	80010d6 <EP_PIDGain_Write+0x92>
		checksum -= buf_write[i];
 80010bc:	f107 0218 	add.w	r2, r7, #24
 80010c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010c2:	4413      	add	r3, r2
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	for (int i = 0; i < 15; i++) {
 80010d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010d2:	3301      	adds	r3, #1
 80010d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80010d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010d8:	2b0e      	cmp	r3, #14
 80010da:	ddef      	ble.n	80010bc <EP_PIDGain_Write+0x78>
	}

	buf_write[15] = checksum;
 80010dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80010e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	AT24C08_Page_Write(id, &buf_write[0], 16);
 80010e4:	f107 0118 	add.w	r1, r7, #24
 80010e8:	7bfb      	ldrb	r3, [r7, #15]
 80010ea:	2210      	movs	r2, #16
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff ff49 	bl	8000f84 <AT24C08_Page_Write>
//		break;
//	case 5:
//		AT24C08_Page_Write(5, &buf_write[0], 16);
//		break;
//	}
}
 80010f2:	bf00      	nop
 80010f4:	3730      	adds	r7, #48	; 0x30
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <EP_PIDGain_Read>:

unsigned char EP_PIDGain_Read(unsigned char id, float *PGain, float *IGain, float *DGain) {
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b08c      	sub	sp, #48	; 0x30
 80010fe:	af00      	add	r7, sp, #0
 8001100:	60b9      	str	r1, [r7, #8]
 8001102:	607a      	str	r2, [r7, #4]
 8001104:	603b      	str	r3, [r7, #0]
 8001106:	4603      	mov	r3, r0
 8001108:	73fb      	strb	r3, [r7, #15]
	unsigned char buf_read[16];
	Parser parser;

	AT24C08_Page_Read(id, &buf_read[0], 16);
 800110a:	f107 0118 	add.w	r1, r7, #24
 800110e:	7bfb      	ldrb	r3, [r7, #15]
 8001110:	2210      	movs	r2, #16
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff ff6e 	bl	8000ff4 <AT24C08_Page_Read>
//	case 5:
//		AT24C08_Page_Read(5, &buf_read[0], 16);
//		break;
//	}

	unsigned char checksum = 0xff;
 8001118:	23ff      	movs	r3, #255	; 0xff
 800111a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	for (int i = 0; i < 15; i++) {
 800111e:	2300      	movs	r3, #0
 8001120:	62bb      	str	r3, [r7, #40]	; 0x28
 8001122:	e00c      	b.n	800113e <EP_PIDGain_Read+0x44>
		checksum -= buf_read[i];
 8001124:	f107 0218 	add.w	r2, r7, #24
 8001128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800112a:	4413      	add	r3, r2
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001132:	1ad3      	subs	r3, r2, r3
 8001134:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	for (int i = 0; i < 15; i++) {
 8001138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800113a:	3301      	adds	r3, #1
 800113c:	62bb      	str	r3, [r7, #40]	; 0x28
 800113e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001140:	2b0e      	cmp	r3, #14
 8001142:	ddef      	ble.n	8001124 <EP_PIDGain_Read+0x2a>
	}

	if (buf_read[15] == checksum && buf_read[0] == 0x45 && buf_read[1] == 0x50) {
 8001144:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001148:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800114c:	429a      	cmp	r2, r3
 800114e:	d12f      	bne.n	80011b0 <EP_PIDGain_Read+0xb6>
 8001150:	7e3b      	ldrb	r3, [r7, #24]
 8001152:	2b45      	cmp	r3, #69	; 0x45
 8001154:	d12c      	bne.n	80011b0 <EP_PIDGain_Read+0xb6>
 8001156:	7e7b      	ldrb	r3, [r7, #25]
 8001158:	2b50      	cmp	r3, #80	; 0x50
 800115a:	d129      	bne.n	80011b0 <EP_PIDGain_Read+0xb6>
		parser.byte[0] = buf_read[3];
 800115c:	7efb      	ldrb	r3, [r7, #27]
 800115e:	753b      	strb	r3, [r7, #20]
		parser.byte[1] = buf_read[4];
 8001160:	7f3b      	ldrb	r3, [r7, #28]
 8001162:	757b      	strb	r3, [r7, #21]
		parser.byte[2] = buf_read[5];
 8001164:	7f7b      	ldrb	r3, [r7, #29]
 8001166:	75bb      	strb	r3, [r7, #22]
		parser.byte[3] = buf_read[6];
 8001168:	7fbb      	ldrb	r3, [r7, #30]
 800116a:	75fb      	strb	r3, [r7, #23]
		*PGain = parser.f;
 800116c:	697a      	ldr	r2, [r7, #20]
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	601a      	str	r2, [r3, #0]

		parser.byte[0] = buf_read[7];
 8001172:	7ffb      	ldrb	r3, [r7, #31]
 8001174:	753b      	strb	r3, [r7, #20]
		parser.byte[1] = buf_read[8];
 8001176:	f897 3020 	ldrb.w	r3, [r7, #32]
 800117a:	757b      	strb	r3, [r7, #21]
		parser.byte[2] = buf_read[9];
 800117c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001180:	75bb      	strb	r3, [r7, #22]
		parser.byte[3] = buf_read[10];
 8001182:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001186:	75fb      	strb	r3, [r7, #23]
		*IGain = parser.f;
 8001188:	697a      	ldr	r2, [r7, #20]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	601a      	str	r2, [r3, #0]

		parser.byte[0] = buf_read[11];
 800118e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001192:	753b      	strb	r3, [r7, #20]
		parser.byte[1] = buf_read[12];
 8001194:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001198:	757b      	strb	r3, [r7, #21]
		parser.byte[2] = buf_read[13];
 800119a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800119e:	75bb      	strb	r3, [r7, #22]
		parser.byte[3] = buf_read[14];
 80011a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80011a4:	75fb      	strb	r3, [r7, #23]
		*DGain = parser.f;
 80011a6:	697a      	ldr	r2, [r7, #20]
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	601a      	str	r2, [r3, #0]
		return 0;
 80011ac:	2300      	movs	r3, #0
 80011ae:	e000      	b.n	80011b2 <EP_PIDGain_Read+0xb8>
	}

	return 1;
 80011b0:	2301      	movs	r3, #1
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3730      	adds	r7, #48	; 0x30
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 80011ba:	b480      	push	{r7}
 80011bc:	b083      	sub	sp, #12
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	601a      	str	r2, [r3, #0]
}
 80011ce:	bf00      	nop
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr

080011da <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 80011da:	b480      	push	{r7}
 80011dc:	b083      	sub	sp, #12
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]
 80011e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f023 0210 	bic.w	r2, r3, #16
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	431a      	orrs	r2, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	605a      	str	r2, [r3, #4]
}
 80011f4:	bf00      	nop
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	f003 0301 	and.w	r3, r3, #1
 8001210:	2b01      	cmp	r3, #1
 8001212:	d101      	bne.n	8001218 <LL_SPI_IsActiveFlag_RXNE+0x18>
 8001214:	2301      	movs	r3, #1
 8001216:	e000      	b.n	800121a <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8001218:	2300      	movs	r3, #0
}
 800121a:	4618      	mov	r0, r3
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr

08001226 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 8001226:	b480      	push	{r7}
 8001228:	b083      	sub	sp, #12
 800122a:	af00      	add	r7, sp, #0
 800122c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	f003 0302 	and.w	r3, r3, #2
 8001236:	2b02      	cmp	r3, #2
 8001238:	d101      	bne.n	800123e <LL_SPI_IsActiveFlag_TXE+0x18>
 800123a:	2301      	movs	r3, #1
 800123c:	e000      	b.n	8001240 <LL_SPI_IsActiveFlag_TXE+0x1a>
 800123e:	2300      	movs	r3, #0
}
 8001240:	4618      	mov	r0, r3
 8001242:	370c      	adds	r7, #12
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_REG(SPIx->DR));
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	b2db      	uxtb	r3, r3
}
 800125a:	4618      	mov	r0, r3
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr

08001266 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8001266:	b480      	push	{r7}
 8001268:	b085      	sub	sp, #20
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
 800126e:	460b      	mov	r3, r1
 8001270:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	330c      	adds	r3, #12
 8001276:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	78fa      	ldrb	r2, [r7, #3]
 800127c:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 800127e:	bf00      	nop
 8001280:	3714      	adds	r7, #20
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr

0800128a <LL_GPIO_IsInputPinSet>:
{
 800128a:	b480      	push	{r7}
 800128c:	b083      	sub	sp, #12
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
 8001292:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	691a      	ldr	r2, [r3, #16]
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	4013      	ands	r3, r2
 800129c:	683a      	ldr	r2, [r7, #0]
 800129e:	429a      	cmp	r2, r3
 80012a0:	bf0c      	ite	eq
 80012a2:	2301      	moveq	r3, #1
 80012a4:	2300      	movne	r3, #0
 80012a6:	b2db      	uxtb	r3, r3
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <LL_GPIO_SetOutputPin>:
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	683a      	ldr	r2, [r7, #0]
 80012c2:	619a      	str	r2, [r3, #24]
}
 80012c4:	bf00      	nop
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr

080012d0 <LL_GPIO_ResetOutputPin>:
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	041a      	lsls	r2, r3, #16
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	619a      	str	r2, [r3, #24]
}
 80012e2:	bf00      	nop
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
	...

080012f0 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b085      	sub	sp, #20
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80012f8:	4b08      	ldr	r3, [pc, #32]	; (800131c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80012fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012fc:	4907      	ldr	r1, [pc, #28]	; (800131c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4313      	orrs	r3, r2
 8001302:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001304:	4b05      	ldr	r3, [pc, #20]	; (800131c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001306:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	4013      	ands	r3, r2
 800130c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800130e:	68fb      	ldr	r3, [r7, #12]
}
 8001310:	bf00      	nop
 8001312:	3714      	adds	r7, #20
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	40023800 	.word	0x40023800

08001320 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001320:	b480      	push	{r7}
 8001322:	b085      	sub	sp, #20
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001328:	4b08      	ldr	r3, [pc, #32]	; (800134c <LL_APB1_GRP1_EnableClock+0x2c>)
 800132a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800132c:	4907      	ldr	r1, [pc, #28]	; (800134c <LL_APB1_GRP1_EnableClock+0x2c>)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4313      	orrs	r3, r2
 8001332:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001334:	4b05      	ldr	r3, [pc, #20]	; (800134c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001336:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	4013      	ands	r3, r2
 800133c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800133e:	68fb      	ldr	r3, [r7, #12]
}
 8001340:	bf00      	nop
 8001342:	3714      	adds	r7, #20
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr
 800134c:	40023800 	.word	0x40023800

08001350 <BNO080_GPIO_SPI_Initialization>:
int16_t gyro_Q1 = 9;
int16_t magnetometer_Q1 = 4;


void BNO080_GPIO_SPI_Initialization(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b090      	sub	sp, #64	; 0x40
 8001354:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001356:	f107 0318 	add.w	r3, r7, #24
 800135a:	2228      	movs	r2, #40	; 0x28
 800135c:	2100      	movs	r1, #0
 800135e:	4618      	mov	r0, r3
 8001360:	f009 fc9e 	bl	800aca0 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001364:	463b      	mov	r3, r7
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	605a      	str	r2, [r3, #4]
 800136c:	609a      	str	r2, [r3, #8]
 800136e:	60da      	str	r2, [r3, #12]
 8001370:	611a      	str	r2, [r3, #16]
 8001372:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8001374:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001378:	f7ff ffd2 	bl	8001320 <LL_APB1_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800137c:	2002      	movs	r0, #2
 800137e:	f7ff ffb7 	bl	80012f0 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001382:	2004      	movs	r0, #4
 8001384:	f7ff ffb4 	bl	80012f0 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001388:	2001      	movs	r0, #1
 800138a:	f7ff ffb1 	bl	80012f0 <LL_AHB1_GRP1_EnableClock>
	/**SPI2 GPIO Configuration
	PB13   ------> SPI2_SCK
	PB14   ------> SPI2_MISO
	PB15   ------> SPI2_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 800138e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001392:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001394:	2302      	movs	r3, #2
 8001396:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001398:	2303      	movs	r3, #3
 800139a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800139c:	2300      	movs	r3, #0
 800139e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80013a0:	2300      	movs	r3, #0
 80013a2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80013a4:	2305      	movs	r3, #5
 80013a6:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a8:	463b      	mov	r3, r7
 80013aa:	4619      	mov	r1, r3
 80013ac:	4841      	ldr	r0, [pc, #260]	; (80014b4 <BNO080_GPIO_SPI_Initialization+0x164>)
 80013ae:	f008 fce2 	bl	8009d76 <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80013b2:	2300      	movs	r3, #0
 80013b4:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80013b6:	f44f 7382 	mov.w	r3, #260	; 0x104
 80013ba:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80013bc:	2300      	movs	r3, #0
 80013be:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80013c0:	2302      	movs	r3, #2
 80013c2:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80013c4:	2301      	movs	r3, #1
 80013c6:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80013c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 80013ce:	2318      	movs	r3, #24
 80013d0:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80013d2:	2300      	movs	r3, #0
 80013d4:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80013d6:	2300      	movs	r3, #0
 80013d8:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 80013da:	230a      	movs	r3, #10
 80013dc:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(BNO080_SPI_CHANNEL, &SPI_InitStruct);
 80013de:	f107 0318 	add.w	r3, r7, #24
 80013e2:	4619      	mov	r1, r3
 80013e4:	4834      	ldr	r0, [pc, #208]	; (80014b8 <BNO080_GPIO_SPI_Initialization+0x168>)
 80013e6:	f008 fe94 	bl	800a112 <LL_SPI_Init>
	LL_SPI_SetStandard(BNO080_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 80013ea:	2100      	movs	r1, #0
 80013ec:	4832      	ldr	r0, [pc, #200]	; (80014b8 <BNO080_GPIO_SPI_Initialization+0x168>)
 80013ee:	f7ff fef4 	bl	80011da <LL_SPI_SetStandard>
	 * PA8  ------> BNO080_PS0/WAKE (output)
	 * PC9  ------> BNO080_RST (output)
	 * PC8  ------> BNO080_INT (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(BNO080_RST_PORT, BNO080_RST_PIN);
 80013f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013f6:	4831      	ldr	r0, [pc, #196]	; (80014bc <BNO080_GPIO_SPI_Initialization+0x16c>)
 80013f8:	f7ff ff6a 	bl	80012d0 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_SPI_CS_PORT, BNO080_SPI_CS_PIN);
 80013fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001400:	482c      	ldr	r0, [pc, #176]	; (80014b4 <BNO080_GPIO_SPI_Initialization+0x164>)
 8001402:	f7ff ff65 	bl	80012d0 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_PS0_WAKE_PORT, BNO080_PS0_WAKE_PIN);
 8001406:	f44f 7180 	mov.w	r1, #256	; 0x100
 800140a:	482d      	ldr	r0, [pc, #180]	; (80014c0 <BNO080_GPIO_SPI_Initialization+0x170>)
 800140c:	f7ff ff60 	bl	80012d0 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_SPI_CS_PIN;
 8001410:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001414:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001416:	2301      	movs	r3, #1
 8001418:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800141a:	2303      	movs	r3, #3
 800141c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001422:	2300      	movs	r3, #0
 8001424:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_SPI_CS_PORT, &GPIO_InitStruct);
 8001426:	463b      	mov	r3, r7
 8001428:	4619      	mov	r1, r3
 800142a:	4822      	ldr	r0, [pc, #136]	; (80014b4 <BNO080_GPIO_SPI_Initialization+0x164>)
 800142c:	f008 fca3 	bl	8009d76 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_RST_PIN;
 8001430:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001434:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001436:	2301      	movs	r3, #1
 8001438:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800143a:	2303      	movs	r3, #3
 800143c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800143e:	2300      	movs	r3, #0
 8001440:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001442:	2300      	movs	r3, #0
 8001444:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_RST_PORT, &GPIO_InitStruct);
 8001446:	463b      	mov	r3, r7
 8001448:	4619      	mov	r1, r3
 800144a:	481c      	ldr	r0, [pc, #112]	; (80014bc <BNO080_GPIO_SPI_Initialization+0x16c>)
 800144c:	f008 fc93 	bl	8009d76 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_PS0_WAKE_PIN;
 8001450:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001454:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001456:	2301      	movs	r3, #1
 8001458:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800145a:	2303      	movs	r3, #3
 800145c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800145e:	2300      	movs	r3, #0
 8001460:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001462:	2300      	movs	r3, #0
 8001464:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_PS0_WAKE_PORT, &GPIO_InitStruct);
 8001466:	463b      	mov	r3, r7
 8001468:	4619      	mov	r1, r3
 800146a:	4815      	ldr	r0, [pc, #84]	; (80014c0 <BNO080_GPIO_SPI_Initialization+0x170>)
 800146c:	f008 fc83 	bl	8009d76 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_INT_PIN;
 8001470:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001474:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001476:	2300      	movs	r3, #0
 8001478:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800147a:	2301      	movs	r3, #1
 800147c:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_INT_PORT, &GPIO_InitStruct);
 800147e:	463b      	mov	r3, r7
 8001480:	4619      	mov	r1, r3
 8001482:	480e      	ldr	r0, [pc, #56]	; (80014bc <BNO080_GPIO_SPI_Initialization+0x16c>)
 8001484:	f008 fc77 	bl	8009d76 <LL_GPIO_Init>

	LL_SPI_Enable(BNO080_SPI_CHANNEL);
 8001488:	480b      	ldr	r0, [pc, #44]	; (80014b8 <BNO080_GPIO_SPI_Initialization+0x168>)
 800148a:	f7ff fe96 	bl	80011ba <LL_SPI_Enable>

	CHIP_DESELECT(BNO080);
 800148e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001492:	4808      	ldr	r0, [pc, #32]	; (80014b4 <BNO080_GPIO_SPI_Initialization+0x164>)
 8001494:	f7ff ff0e 	bl	80012b4 <LL_GPIO_SetOutputPin>
	WAKE_HIGH();
 8001498:	f44f 7180 	mov.w	r1, #256	; 0x100
 800149c:	4808      	ldr	r0, [pc, #32]	; (80014c0 <BNO080_GPIO_SPI_Initialization+0x170>)
 800149e:	f7ff ff09 	bl	80012b4 <LL_GPIO_SetOutputPin>
	RESET_HIGH();
 80014a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014a6:	4805      	ldr	r0, [pc, #20]	; (80014bc <BNO080_GPIO_SPI_Initialization+0x16c>)
 80014a8:	f7ff ff04 	bl	80012b4 <LL_GPIO_SetOutputPin>
}
 80014ac:	bf00      	nop
 80014ae:	3740      	adds	r7, #64	; 0x40
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	40020400 	.word	0x40020400
 80014b8:	40003800 	.word	0x40003800
 80014bc:	40020800 	.word	0x40020800
 80014c0:	40020000 	.word	0x40020000

080014c4 <BNO080_Initialization>:

int BNO080_Initialization(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af02      	add	r7, sp, #8
	BNO080_GPIO_SPI_Initialization();
 80014ca:	f7ff ff41 	bl	8001350 <BNO080_GPIO_SPI_Initialization>
	
	printf("Checking BNO080...");
 80014ce:	482e      	ldr	r0, [pc, #184]	; (8001588 <BNO080_Initialization+0xc4>)
 80014d0:	f00a f84a 	bl	800b568 <iprintf>
	
	CHIP_DESELECT(BNO080);
 80014d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014d8:	482c      	ldr	r0, [pc, #176]	; (800158c <BNO080_Initialization+0xc8>)
 80014da:	f7ff feeb 	bl	80012b4 <LL_GPIO_SetOutputPin>
	
	//Configure the BNO080 for SPI communication
	WAKE_HIGH();	//Before boot up the PS0/WAK pin must be high to enter SPI mode
 80014de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014e2:	482b      	ldr	r0, [pc, #172]	; (8001590 <BNO080_Initialization+0xcc>)
 80014e4:	f7ff fee6 	bl	80012b4 <LL_GPIO_SetOutputPin>
	RESET_LOW();	//Reset BNO080
 80014e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014ec:	4829      	ldr	r0, [pc, #164]	; (8001594 <BNO080_Initialization+0xd0>)
 80014ee:	f7ff feef 	bl	80012d0 <LL_GPIO_ResetOutputPin>
	HAL_Delay(200);	//Min length not specified in datasheet?
 80014f2:	20c8      	movs	r0, #200	; 0xc8
 80014f4:	f004 fd5a 	bl	8005fac <HAL_Delay>
	RESET_HIGH();	//Bring out of reset
 80014f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014fc:	4825      	ldr	r0, [pc, #148]	; (8001594 <BNO080_Initialization+0xd0>)
 80014fe:	f7ff fed9 	bl	80012b4 <LL_GPIO_SetOutputPin>
	
	BNO080_waitForSPI(); //Wait until INT pin goes low.
 8001502:	f000 faf7 	bl	8001af4 <BNO080_waitForSPI>
	
	//At system startup, the hub must send its full advertisement message (see 5.2 and 5.3) to the
	//host. It must not send any other data until this step is complete.
	//When BNO080 first boots it broadcasts big startup packet
	//Read it and dump it
	BNO080_waitForSPI(); //Wait for assertion of INT before reading advert message.
 8001506:	f000 faf5 	bl	8001af4 <BNO080_waitForSPI>
	BNO080_receivePacket();
 800150a:	f000 fb17 	bl	8001b3c <BNO080_receivePacket>
	
	//The BNO080 will then transmit an unsolicited Initialize Response (see 6.4.5.2)
	//Read it and dump it
	BNO080_waitForSPI();  //Wait for assertion of INT before reading Init response
 800150e:	f000 faf1 	bl	8001af4 <BNO080_waitForSPI>
	BNO080_receivePacket();
 8001512:	f000 fb13 	bl	8001b3c <BNO080_receivePacket>
	
	//Check communication with device
	shtpData[0] = SHTP_REPORT_PRODUCT_ID_REQUEST; //Request the product ID and reset info
 8001516:	4b20      	ldr	r3, [pc, #128]	; (8001598 <BNO080_Initialization+0xd4>)
 8001518:	22f9      	movs	r2, #249	; 0xf9
 800151a:	701a      	strb	r2, [r3, #0]
	shtpData[1] = 0;						 //Reserved
 800151c:	4b1e      	ldr	r3, [pc, #120]	; (8001598 <BNO080_Initialization+0xd4>)
 800151e:	2200      	movs	r2, #0
 8001520:	705a      	strb	r2, [r3, #1]
	
	//Transmit packet on channel 2, 2 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 2);
 8001522:	2102      	movs	r1, #2
 8001524:	2002      	movs	r0, #2
 8001526:	f000 fb79 	bl	8001c1c <BNO080_sendPacket>
	
	//Now we wait for response
	BNO080_waitForSPI();
 800152a:	f000 fae3 	bl	8001af4 <BNO080_waitForSPI>
	if (BNO080_receivePacket() == 1)
 800152e:	f000 fb05 	bl	8001b3c <BNO080_receivePacket>
 8001532:	4603      	mov	r3, r0
 8001534:	2b01      	cmp	r3, #1
 8001536:	d11b      	bne.n	8001570 <BNO080_Initialization+0xac>
	{
		printf("header: %d %d %d %d\n", shtpHeader[0], shtpHeader[1], shtpHeader[2], shtpHeader[3]);
 8001538:	4b18      	ldr	r3, [pc, #96]	; (800159c <BNO080_Initialization+0xd8>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	4619      	mov	r1, r3
 800153e:	4b17      	ldr	r3, [pc, #92]	; (800159c <BNO080_Initialization+0xd8>)
 8001540:	785b      	ldrb	r3, [r3, #1]
 8001542:	461a      	mov	r2, r3
 8001544:	4b15      	ldr	r3, [pc, #84]	; (800159c <BNO080_Initialization+0xd8>)
 8001546:	789b      	ldrb	r3, [r3, #2]
 8001548:	4618      	mov	r0, r3
 800154a:	4b14      	ldr	r3, [pc, #80]	; (800159c <BNO080_Initialization+0xd8>)
 800154c:	78db      	ldrb	r3, [r3, #3]
 800154e:	9300      	str	r3, [sp, #0]
 8001550:	4603      	mov	r3, r0
 8001552:	4813      	ldr	r0, [pc, #76]	; (80015a0 <BNO080_Initialization+0xdc>)
 8001554:	f00a f808 	bl	800b568 <iprintf>
		if (shtpData[0] == SHTP_REPORT_PRODUCT_ID_RESPONSE)
 8001558:	4b0f      	ldr	r3, [pc, #60]	; (8001598 <BNO080_Initialization+0xd4>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	2bf8      	cmp	r3, #248	; 0xf8
 800155e:	d107      	bne.n	8001570 <BNO080_Initialization+0xac>
		{
			printf("BNO080 who_am_i = 0x%02x...ok\n\n", shtpData[0]);
 8001560:	4b0d      	ldr	r3, [pc, #52]	; (8001598 <BNO080_Initialization+0xd4>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	4619      	mov	r1, r3
 8001566:	480f      	ldr	r0, [pc, #60]	; (80015a4 <BNO080_Initialization+0xe0>)
 8001568:	f009 fffe 	bl	800b568 <iprintf>
			return (0);
 800156c:	2300      	movs	r3, #0
 800156e:	e007      	b.n	8001580 <BNO080_Initialization+0xbc>
		}// Sensor OK
	}
	
	printf("BNO080 Not OK: 0x%02x Should be 0x%02x\n", shtpData[0], SHTP_REPORT_PRODUCT_ID_RESPONSE);
 8001570:	4b09      	ldr	r3, [pc, #36]	; (8001598 <BNO080_Initialization+0xd4>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	22f8      	movs	r2, #248	; 0xf8
 8001576:	4619      	mov	r1, r3
 8001578:	480b      	ldr	r0, [pc, #44]	; (80015a8 <BNO080_Initialization+0xe4>)
 800157a:	f009 fff5 	bl	800b568 <iprintf>
	return (1); //Something went wrong
 800157e:	2301      	movs	r3, #1
}
 8001580:	4618      	mov	r0, r3
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	0800e388 	.word	0x0800e388
 800158c:	40020400 	.word	0x40020400
 8001590:	40020000 	.word	0x40020000
 8001594:	40020800 	.word	0x40020800
 8001598:	20000280 	.word	0x20000280
 800159c:	2000022c 	.word	0x2000022c
 80015a0:	0800e39c 	.word	0x0800e39c
 80015a4:	0800e3b4 	.word	0x0800e3b4
 80015a8:	0800e3d4 	.word	0x0800e3d4

080015ac <SPI2_SendByte>:

unsigned char SPI2_SendByte(unsigned char data)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	4603      	mov	r3, r0
 80015b4:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(BNO080_SPI_CHANNEL)==RESET);
 80015b6:	bf00      	nop
 80015b8:	480c      	ldr	r0, [pc, #48]	; (80015ec <SPI2_SendByte+0x40>)
 80015ba:	f7ff fe34 	bl	8001226 <LL_SPI_IsActiveFlag_TXE>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d0f9      	beq.n	80015b8 <SPI2_SendByte+0xc>
	LL_SPI_TransmitData8(BNO080_SPI_CHANNEL, data);
 80015c4:	79fb      	ldrb	r3, [r7, #7]
 80015c6:	4619      	mov	r1, r3
 80015c8:	4808      	ldr	r0, [pc, #32]	; (80015ec <SPI2_SendByte+0x40>)
 80015ca:	f7ff fe4c 	bl	8001266 <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(BNO080_SPI_CHANNEL)==RESET);
 80015ce:	bf00      	nop
 80015d0:	4806      	ldr	r0, [pc, #24]	; (80015ec <SPI2_SendByte+0x40>)
 80015d2:	f7ff fe15 	bl	8001200 <LL_SPI_IsActiveFlag_RXNE>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d0f9      	beq.n	80015d0 <SPI2_SendByte+0x24>
	return LL_SPI_ReceiveData8(BNO080_SPI_CHANNEL);
 80015dc:	4803      	ldr	r0, [pc, #12]	; (80015ec <SPI2_SendByte+0x40>)
 80015de:	f7ff fe35 	bl	800124c <LL_SPI_ReceiveData8>
 80015e2:	4603      	mov	r3, r0
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	40003800 	.word	0x40003800

080015f0 <BNO080_dataAvailable>:
//////////////////////////////////////////////////////////////////////////

//Updates the latest variables if possible
//Returns false if new readings are not available
int BNO080_dataAvailable(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
	//If we have an interrupt pin connection available, check if data is available.
	//If int pin is NULL, then we'll rely on BNO080_receivePacket() to timeout
	//See issue 13: https://github.com/sparkfun/SparkFun_BNO080_Arduino_Library/issues/13
	if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 1)
 80015f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015f8:	4811      	ldr	r0, [pc, #68]	; (8001640 <BNO080_dataAvailable+0x50>)
 80015fa:	f7ff fe46 	bl	800128a <LL_GPIO_IsInputPinSet>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b01      	cmp	r3, #1
 8001602:	d101      	bne.n	8001608 <BNO080_dataAvailable+0x18>
		return (0);
 8001604:	2300      	movs	r3, #0
 8001606:	e019      	b.n	800163c <BNO080_dataAvailable+0x4c>

	if (BNO080_receivePacket() == 1)
 8001608:	f000 fa98 	bl	8001b3c <BNO080_receivePacket>
 800160c:	4603      	mov	r3, r0
 800160e:	2b01      	cmp	r3, #1
 8001610:	d113      	bne.n	800163a <BNO080_dataAvailable+0x4a>
	{
		//Check to see if this packet is a sensor reporting its data to us
		if (shtpHeader[2] == CHANNEL_REPORTS && shtpData[0] == SHTP_REPORT_BASE_TIMESTAMP)
 8001612:	4b0c      	ldr	r3, [pc, #48]	; (8001644 <BNO080_dataAvailable+0x54>)
 8001614:	789b      	ldrb	r3, [r3, #2]
 8001616:	2b03      	cmp	r3, #3
 8001618:	d107      	bne.n	800162a <BNO080_dataAvailable+0x3a>
 800161a:	4b0b      	ldr	r3, [pc, #44]	; (8001648 <BNO080_dataAvailable+0x58>)
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	2bfb      	cmp	r3, #251	; 0xfb
 8001620:	d103      	bne.n	800162a <BNO080_dataAvailable+0x3a>
		{
			BNO080_parseInputReport(); //This will update the rawAccelX, etc variables depending on which feature report is found
 8001622:	f000 f82f 	bl	8001684 <BNO080_parseInputReport>
			return (1);
 8001626:	2301      	movs	r3, #1
 8001628:	e008      	b.n	800163c <BNO080_dataAvailable+0x4c>
		}
		else if (shtpHeader[2] == CHANNEL_CONTROL)
 800162a:	4b06      	ldr	r3, [pc, #24]	; (8001644 <BNO080_dataAvailable+0x54>)
 800162c:	789b      	ldrb	r3, [r3, #2]
 800162e:	2b02      	cmp	r3, #2
 8001630:	d103      	bne.n	800163a <BNO080_dataAvailable+0x4a>
		{
			BNO080_parseCommandReport(); //This will update responses to commands, calibrationStatus, etc.
 8001632:	f000 f80b 	bl	800164c <BNO080_parseCommandReport>
			return (1);
 8001636:	2301      	movs	r3, #1
 8001638:	e000      	b.n	800163c <BNO080_dataAvailable+0x4c>
		}
	}
	return (0);
 800163a:	2300      	movs	r3, #0
}
 800163c:	4618      	mov	r0, r3
 800163e:	bd80      	pop	{r7, pc}
 8001640:	40020800 	.word	0x40020800
 8001644:	2000022c 	.word	0x2000022c
 8001648:	20000280 	.word	0x20000280

0800164c <BNO080_parseCommandReport>:
//shtpData[5 + 5]: R5
//shtpData[5 + 6]: R6
//shtpData[5 + 7]: R7
//shtpData[5 + 8]: R8
void BNO080_parseCommandReport(void)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
	if (shtpData[0] == SHTP_REPORT_COMMAND_RESPONSE)
 8001652:	4b0a      	ldr	r3, [pc, #40]	; (800167c <BNO080_parseCommandReport+0x30>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	2bf1      	cmp	r3, #241	; 0xf1
 8001658:	d109      	bne.n	800166e <BNO080_parseCommandReport+0x22>
	{
		//The BNO080 responds with this report to command requests. It's up to use to remember which command we issued.
		uint8_t command = shtpData[2]; //This is the Command byte of the response
 800165a:	4b08      	ldr	r3, [pc, #32]	; (800167c <BNO080_parseCommandReport+0x30>)
 800165c:	789b      	ldrb	r3, [r3, #2]
 800165e:	71fb      	strb	r3, [r7, #7]

		if (command == COMMAND_ME_CALIBRATE)
 8001660:	79fb      	ldrb	r3, [r7, #7]
 8001662:	2b07      	cmp	r3, #7
 8001664:	d103      	bne.n	800166e <BNO080_parseCommandReport+0x22>
		{
			calibrationStatus = shtpData[5]; //R0 - Status (0 = success, non-zero = fail)
 8001666:	4b05      	ldr	r3, [pc, #20]	; (800167c <BNO080_parseCommandReport+0x30>)
 8001668:	795a      	ldrb	r2, [r3, #5]
 800166a:	4b05      	ldr	r3, [pc, #20]	; (8001680 <BNO080_parseCommandReport+0x34>)
 800166c:	701a      	strb	r2, [r3, #0]
		//This sensor report ID is unhandled.
		//See reference manual to add additional feature reports as needed
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 800166e:	bf00      	nop
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	20000280 	.word	0x20000280
 8001680:	20000303 	.word	0x20000303

08001684 <BNO080_parseInputReport>:
//shtpData[6:7]: j/accel y/gyro y/etc
//shtpData[8:9]: k/accel z/gyro z/etc
//shtpData[10:11]: real/gyro temp/etc
//shtpData[12:13]: Accuracy estimate
void BNO080_parseInputReport(void)
{
 8001684:	b480      	push	{r7}
 8001686:	b087      	sub	sp, #28
 8001688:	af00      	add	r7, sp, #0
	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)shtpHeader[1] << 8 | shtpHeader[0]);
 800168a:	4b81      	ldr	r3, [pc, #516]	; (8001890 <BNO080_parseInputReport+0x20c>)
 800168c:	785b      	ldrb	r3, [r3, #1]
 800168e:	021b      	lsls	r3, r3, #8
 8001690:	b21a      	sxth	r2, r3
 8001692:	4b7f      	ldr	r3, [pc, #508]	; (8001890 <BNO080_parseInputReport+0x20c>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	b21b      	sxth	r3, r3
 8001698:	4313      	orrs	r3, r2
 800169a:	823b      	strh	r3, [r7, #16]
	dataLength &= ~(1 << 15); //Clear the MSbit. This bit indicates if this package is a continuation of the last.
 800169c:	8a3b      	ldrh	r3, [r7, #16]
 800169e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80016a2:	823b      	strh	r3, [r7, #16]
	//Ignore it for now. TODO catch this as an error and exit

	dataLength -= 4; //Remove the header bytes from the data count
 80016a4:	8a3b      	ldrh	r3, [r7, #16]
 80016a6:	3b04      	subs	r3, #4
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	823b      	strh	r3, [r7, #16]

	timeStamp = ((uint32_t)shtpData[4] << (8 * 3)) | (shtpData[3] << (8 * 2)) | (shtpData[2] << (8 * 1)) | (shtpData[1] << (8 * 0));
 80016ac:	4b79      	ldr	r3, [pc, #484]	; (8001894 <BNO080_parseInputReport+0x210>)
 80016ae:	791b      	ldrb	r3, [r3, #4]
 80016b0:	061b      	lsls	r3, r3, #24
 80016b2:	4a78      	ldr	r2, [pc, #480]	; (8001894 <BNO080_parseInputReport+0x210>)
 80016b4:	78d2      	ldrb	r2, [r2, #3]
 80016b6:	0412      	lsls	r2, r2, #16
 80016b8:	4313      	orrs	r3, r2
 80016ba:	4a76      	ldr	r2, [pc, #472]	; (8001894 <BNO080_parseInputReport+0x210>)
 80016bc:	7892      	ldrb	r2, [r2, #2]
 80016be:	0212      	lsls	r2, r2, #8
 80016c0:	4313      	orrs	r3, r2
 80016c2:	4a74      	ldr	r2, [pc, #464]	; (8001894 <BNO080_parseInputReport+0x210>)
 80016c4:	7852      	ldrb	r2, [r2, #1]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	4a73      	ldr	r2, [pc, #460]	; (8001898 <BNO080_parseInputReport+0x214>)
 80016ca:	6013      	str	r3, [r2, #0]

	uint8_t status = shtpData[7] & 0x03; //Get status bits
 80016cc:	4b71      	ldr	r3, [pc, #452]	; (8001894 <BNO080_parseInputReport+0x210>)
 80016ce:	79db      	ldrb	r3, [r3, #7]
 80016d0:	f003 0303 	and.w	r3, r3, #3
 80016d4:	73fb      	strb	r3, [r7, #15]
	uint16_t data1 = (uint16_t)shtpData[10] << 8 | shtpData[9];
 80016d6:	4b6f      	ldr	r3, [pc, #444]	; (8001894 <BNO080_parseInputReport+0x210>)
 80016d8:	7a9b      	ldrb	r3, [r3, #10]
 80016da:	021b      	lsls	r3, r3, #8
 80016dc:	b21a      	sxth	r2, r3
 80016de:	4b6d      	ldr	r3, [pc, #436]	; (8001894 <BNO080_parseInputReport+0x210>)
 80016e0:	7a5b      	ldrb	r3, [r3, #9]
 80016e2:	b21b      	sxth	r3, r3
 80016e4:	4313      	orrs	r3, r2
 80016e6:	b21b      	sxth	r3, r3
 80016e8:	81bb      	strh	r3, [r7, #12]
	uint16_t data2 = (uint16_t)shtpData[12] << 8 | shtpData[11];
 80016ea:	4b6a      	ldr	r3, [pc, #424]	; (8001894 <BNO080_parseInputReport+0x210>)
 80016ec:	7b1b      	ldrb	r3, [r3, #12]
 80016ee:	021b      	lsls	r3, r3, #8
 80016f0:	b21a      	sxth	r2, r3
 80016f2:	4b68      	ldr	r3, [pc, #416]	; (8001894 <BNO080_parseInputReport+0x210>)
 80016f4:	7adb      	ldrb	r3, [r3, #11]
 80016f6:	b21b      	sxth	r3, r3
 80016f8:	4313      	orrs	r3, r2
 80016fa:	b21b      	sxth	r3, r3
 80016fc:	817b      	strh	r3, [r7, #10]
	uint16_t data3 = (uint16_t)shtpData[14] << 8 | shtpData[13];
 80016fe:	4b65      	ldr	r3, [pc, #404]	; (8001894 <BNO080_parseInputReport+0x210>)
 8001700:	7b9b      	ldrb	r3, [r3, #14]
 8001702:	021b      	lsls	r3, r3, #8
 8001704:	b21a      	sxth	r2, r3
 8001706:	4b63      	ldr	r3, [pc, #396]	; (8001894 <BNO080_parseInputReport+0x210>)
 8001708:	7b5b      	ldrb	r3, [r3, #13]
 800170a:	b21b      	sxth	r3, r3
 800170c:	4313      	orrs	r3, r2
 800170e:	b21b      	sxth	r3, r3
 8001710:	813b      	strh	r3, [r7, #8]
	uint16_t data4 = 0;
 8001712:	2300      	movs	r3, #0
 8001714:	82fb      	strh	r3, [r7, #22]
	uint16_t data5 = 0;
 8001716:	2300      	movs	r3, #0
 8001718:	82bb      	strh	r3, [r7, #20]

	if (dataLength > 14)
 800171a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800171e:	2b0e      	cmp	r3, #14
 8001720:	dd09      	ble.n	8001736 <BNO080_parseInputReport+0xb2>
	{
		data4 = (uint16_t)shtpData[16] << 8 | shtpData[15];
 8001722:	4b5c      	ldr	r3, [pc, #368]	; (8001894 <BNO080_parseInputReport+0x210>)
 8001724:	7c1b      	ldrb	r3, [r3, #16]
 8001726:	021b      	lsls	r3, r3, #8
 8001728:	b21a      	sxth	r2, r3
 800172a:	4b5a      	ldr	r3, [pc, #360]	; (8001894 <BNO080_parseInputReport+0x210>)
 800172c:	7bdb      	ldrb	r3, [r3, #15]
 800172e:	b21b      	sxth	r3, r3
 8001730:	4313      	orrs	r3, r2
 8001732:	b21b      	sxth	r3, r3
 8001734:	82fb      	strh	r3, [r7, #22]
	}
	if (dataLength > 16)
 8001736:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800173a:	2b10      	cmp	r3, #16
 800173c:	dd09      	ble.n	8001752 <BNO080_parseInputReport+0xce>
	{
		data5 = (uint16_t)shtpData[18] << 8 | shtpData[17];
 800173e:	4b55      	ldr	r3, [pc, #340]	; (8001894 <BNO080_parseInputReport+0x210>)
 8001740:	7c9b      	ldrb	r3, [r3, #18]
 8001742:	021b      	lsls	r3, r3, #8
 8001744:	b21a      	sxth	r2, r3
 8001746:	4b53      	ldr	r3, [pc, #332]	; (8001894 <BNO080_parseInputReport+0x210>)
 8001748:	7c5b      	ldrb	r3, [r3, #17]
 800174a:	b21b      	sxth	r3, r3
 800174c:	4313      	orrs	r3, r2
 800174e:	b21b      	sxth	r3, r3
 8001750:	82bb      	strh	r3, [r7, #20]
	}

	//Store these generic values to their proper global variable
	switch(shtpData[5])
 8001752:	4b50      	ldr	r3, [pc, #320]	; (8001894 <BNO080_parseInputReport+0x210>)
 8001754:	795b      	ldrb	r3, [r3, #5]
 8001756:	2b05      	cmp	r3, #5
 8001758:	d053      	beq.n	8001802 <BNO080_parseInputReport+0x17e>
 800175a:	2b05      	cmp	r3, #5
 800175c:	dc0b      	bgt.n	8001776 <BNO080_parseInputReport+0xf2>
 800175e:	2b02      	cmp	r3, #2
 8001760:	d033      	beq.n	80017ca <BNO080_parseInputReport+0x146>
 8001762:	2b02      	cmp	r3, #2
 8001764:	dc02      	bgt.n	800176c <BNO080_parseInputReport+0xe8>
 8001766:	2b01      	cmp	r3, #1
 8001768:	d013      	beq.n	8001792 <BNO080_parseInputReport+0x10e>
			//See reference manual to add additional feature reports as needed
		}
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 800176a:	e08a      	b.n	8001882 <BNO080_parseInputReport+0x1fe>
	switch(shtpData[5])
 800176c:	2b03      	cmp	r3, #3
 800176e:	d03a      	beq.n	80017e6 <BNO080_parseInputReport+0x162>
 8001770:	2b04      	cmp	r3, #4
 8001772:	d01c      	beq.n	80017ae <BNO080_parseInputReport+0x12a>
}
 8001774:	e085      	b.n	8001882 <BNO080_parseInputReport+0x1fe>
	switch(shtpData[5])
 8001776:	2b13      	cmp	r3, #19
 8001778:	d05b      	beq.n	8001832 <BNO080_parseInputReport+0x1ae>
 800177a:	2b13      	cmp	r3, #19
 800177c:	dc04      	bgt.n	8001788 <BNO080_parseInputReport+0x104>
 800177e:	2b08      	cmp	r3, #8
 8001780:	d03f      	beq.n	8001802 <BNO080_parseInputReport+0x17e>
 8001782:	2b11      	cmp	r3, #17
 8001784:	d051      	beq.n	800182a <BNO080_parseInputReport+0x1a6>
}
 8001786:	e07c      	b.n	8001882 <BNO080_parseInputReport+0x1fe>
	switch(shtpData[5])
 8001788:	2b1e      	cmp	r3, #30
 800178a:	d057      	beq.n	800183c <BNO080_parseInputReport+0x1b8>
 800178c:	2bf1      	cmp	r3, #241	; 0xf1
 800178e:	d06d      	beq.n	800186c <BNO080_parseInputReport+0x1e8>
}
 8001790:	e077      	b.n	8001882 <BNO080_parseInputReport+0x1fe>
			accelAccuracy = status;
 8001792:	7bfb      	ldrb	r3, [r7, #15]
 8001794:	b29a      	uxth	r2, r3
 8001796:	4b41      	ldr	r3, [pc, #260]	; (800189c <BNO080_parseInputReport+0x218>)
 8001798:	801a      	strh	r2, [r3, #0]
			rawAccelX = data1;
 800179a:	4a41      	ldr	r2, [pc, #260]	; (80018a0 <BNO080_parseInputReport+0x21c>)
 800179c:	89bb      	ldrh	r3, [r7, #12]
 800179e:	8013      	strh	r3, [r2, #0]
			rawAccelY = data2;
 80017a0:	4a40      	ldr	r2, [pc, #256]	; (80018a4 <BNO080_parseInputReport+0x220>)
 80017a2:	897b      	ldrh	r3, [r7, #10]
 80017a4:	8013      	strh	r3, [r2, #0]
			rawAccelZ = data3;
 80017a6:	4a40      	ldr	r2, [pc, #256]	; (80018a8 <BNO080_parseInputReport+0x224>)
 80017a8:	893b      	ldrh	r3, [r7, #8]
 80017aa:	8013      	strh	r3, [r2, #0]
			break;
 80017ac:	e069      	b.n	8001882 <BNO080_parseInputReport+0x1fe>
			accelLinAccuracy = status;
 80017ae:	7bfb      	ldrb	r3, [r7, #15]
 80017b0:	b29a      	uxth	r2, r3
 80017b2:	4b3e      	ldr	r3, [pc, #248]	; (80018ac <BNO080_parseInputReport+0x228>)
 80017b4:	801a      	strh	r2, [r3, #0]
			rawLinAccelX = data1;
 80017b6:	4a3e      	ldr	r2, [pc, #248]	; (80018b0 <BNO080_parseInputReport+0x22c>)
 80017b8:	89bb      	ldrh	r3, [r7, #12]
 80017ba:	8013      	strh	r3, [r2, #0]
			rawLinAccelY = data2;
 80017bc:	4a3d      	ldr	r2, [pc, #244]	; (80018b4 <BNO080_parseInputReport+0x230>)
 80017be:	897b      	ldrh	r3, [r7, #10]
 80017c0:	8013      	strh	r3, [r2, #0]
			rawLinAccelZ = data3;
 80017c2:	4a3d      	ldr	r2, [pc, #244]	; (80018b8 <BNO080_parseInputReport+0x234>)
 80017c4:	893b      	ldrh	r3, [r7, #8]
 80017c6:	8013      	strh	r3, [r2, #0]
			break;
 80017c8:	e05b      	b.n	8001882 <BNO080_parseInputReport+0x1fe>
			gyroAccuracy = status;
 80017ca:	7bfb      	ldrb	r3, [r7, #15]
 80017cc:	b29a      	uxth	r2, r3
 80017ce:	4b3b      	ldr	r3, [pc, #236]	; (80018bc <BNO080_parseInputReport+0x238>)
 80017d0:	801a      	strh	r2, [r3, #0]
			rawGyroX = data1;
 80017d2:	4a3b      	ldr	r2, [pc, #236]	; (80018c0 <BNO080_parseInputReport+0x23c>)
 80017d4:	89bb      	ldrh	r3, [r7, #12]
 80017d6:	8013      	strh	r3, [r2, #0]
			rawGyroY = data2;
 80017d8:	4a3a      	ldr	r2, [pc, #232]	; (80018c4 <BNO080_parseInputReport+0x240>)
 80017da:	897b      	ldrh	r3, [r7, #10]
 80017dc:	8013      	strh	r3, [r2, #0]
			rawGyroZ = data3;
 80017de:	4a3a      	ldr	r2, [pc, #232]	; (80018c8 <BNO080_parseInputReport+0x244>)
 80017e0:	893b      	ldrh	r3, [r7, #8]
 80017e2:	8013      	strh	r3, [r2, #0]
			break;
 80017e4:	e04d      	b.n	8001882 <BNO080_parseInputReport+0x1fe>
			magAccuracy = status;
 80017e6:	7bfb      	ldrb	r3, [r7, #15]
 80017e8:	b29a      	uxth	r2, r3
 80017ea:	4b38      	ldr	r3, [pc, #224]	; (80018cc <BNO080_parseInputReport+0x248>)
 80017ec:	801a      	strh	r2, [r3, #0]
			rawMagX = data1;
 80017ee:	4a38      	ldr	r2, [pc, #224]	; (80018d0 <BNO080_parseInputReport+0x24c>)
 80017f0:	89bb      	ldrh	r3, [r7, #12]
 80017f2:	8013      	strh	r3, [r2, #0]
			rawMagY = data2;
 80017f4:	4a37      	ldr	r2, [pc, #220]	; (80018d4 <BNO080_parseInputReport+0x250>)
 80017f6:	897b      	ldrh	r3, [r7, #10]
 80017f8:	8013      	strh	r3, [r2, #0]
			rawMagZ = data3;
 80017fa:	4a37      	ldr	r2, [pc, #220]	; (80018d8 <BNO080_parseInputReport+0x254>)
 80017fc:	893b      	ldrh	r3, [r7, #8]
 80017fe:	8013      	strh	r3, [r2, #0]
			break;
 8001800:	e03f      	b.n	8001882 <BNO080_parseInputReport+0x1fe>
			quatAccuracy = status;
 8001802:	7bfb      	ldrb	r3, [r7, #15]
 8001804:	b29a      	uxth	r2, r3
 8001806:	4b35      	ldr	r3, [pc, #212]	; (80018dc <BNO080_parseInputReport+0x258>)
 8001808:	801a      	strh	r2, [r3, #0]
			rawQuatI = data1;
 800180a:	4a35      	ldr	r2, [pc, #212]	; (80018e0 <BNO080_parseInputReport+0x25c>)
 800180c:	89bb      	ldrh	r3, [r7, #12]
 800180e:	8013      	strh	r3, [r2, #0]
			rawQuatJ = data2;
 8001810:	4a34      	ldr	r2, [pc, #208]	; (80018e4 <BNO080_parseInputReport+0x260>)
 8001812:	897b      	ldrh	r3, [r7, #10]
 8001814:	8013      	strh	r3, [r2, #0]
			rawQuatK = data3;
 8001816:	4a34      	ldr	r2, [pc, #208]	; (80018e8 <BNO080_parseInputReport+0x264>)
 8001818:	893b      	ldrh	r3, [r7, #8]
 800181a:	8013      	strh	r3, [r2, #0]
			rawQuatReal = data4;
 800181c:	4a33      	ldr	r2, [pc, #204]	; (80018ec <BNO080_parseInputReport+0x268>)
 800181e:	8afb      	ldrh	r3, [r7, #22]
 8001820:	8013      	strh	r3, [r2, #0]
			rawQuatRadianAccuracy = data5; //Only available on rotation vector, not game rot vector
 8001822:	4a33      	ldr	r2, [pc, #204]	; (80018f0 <BNO080_parseInputReport+0x26c>)
 8001824:	8abb      	ldrh	r3, [r7, #20]
 8001826:	8013      	strh	r3, [r2, #0]
			break;
 8001828:	e02b      	b.n	8001882 <BNO080_parseInputReport+0x1fe>
			stepCount = data3; //Bytes 8/9
 800182a:	4a32      	ldr	r2, [pc, #200]	; (80018f4 <BNO080_parseInputReport+0x270>)
 800182c:	893b      	ldrh	r3, [r7, #8]
 800182e:	8013      	strh	r3, [r2, #0]
			break;
 8001830:	e027      	b.n	8001882 <BNO080_parseInputReport+0x1fe>
			stabilityClassifier = shtpData[5 + 4]; //Byte 4 only
 8001832:	4b18      	ldr	r3, [pc, #96]	; (8001894 <BNO080_parseInputReport+0x210>)
 8001834:	7a5a      	ldrb	r2, [r3, #9]
 8001836:	4b30      	ldr	r3, [pc, #192]	; (80018f8 <BNO080_parseInputReport+0x274>)
 8001838:	701a      	strb	r2, [r3, #0]
			break;
 800183a:	e022      	b.n	8001882 <BNO080_parseInputReport+0x1fe>
			activityClassifier = shtpData[5 + 5]; //Most likely state
 800183c:	4b15      	ldr	r3, [pc, #84]	; (8001894 <BNO080_parseInputReport+0x210>)
 800183e:	7a9a      	ldrb	r2, [r3, #10]
 8001840:	4b2e      	ldr	r3, [pc, #184]	; (80018fc <BNO080_parseInputReport+0x278>)
 8001842:	701a      	strb	r2, [r3, #0]
			for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 8001844:	2300      	movs	r3, #0
 8001846:	74fb      	strb	r3, [r7, #19]
 8001848:	e00c      	b.n	8001864 <BNO080_parseInputReport+0x1e0>
				_activityConfidences[x] = shtpData[11 + x]; //5 bytes of timestamp, byte 6 is first confidence byte
 800184a:	7cfb      	ldrb	r3, [r7, #19]
 800184c:	f103 020b 	add.w	r2, r3, #11
 8001850:	4b2b      	ldr	r3, [pc, #172]	; (8001900 <BNO080_parseInputReport+0x27c>)
 8001852:	6819      	ldr	r1, [r3, #0]
 8001854:	7cfb      	ldrb	r3, [r7, #19]
 8001856:	440b      	add	r3, r1
 8001858:	490e      	ldr	r1, [pc, #56]	; (8001894 <BNO080_parseInputReport+0x210>)
 800185a:	5c8a      	ldrb	r2, [r1, r2]
 800185c:	701a      	strb	r2, [r3, #0]
			for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 800185e:	7cfb      	ldrb	r3, [r7, #19]
 8001860:	3301      	adds	r3, #1
 8001862:	74fb      	strb	r3, [r7, #19]
 8001864:	7cfb      	ldrb	r3, [r7, #19]
 8001866:	2b08      	cmp	r3, #8
 8001868:	d9ef      	bls.n	800184a <BNO080_parseInputReport+0x1c6>
			break;
 800186a:	e00a      	b.n	8001882 <BNO080_parseInputReport+0x1fe>
			uint8_t command = shtpData[5 + 2]; //This is the Command byte of the response
 800186c:	4b09      	ldr	r3, [pc, #36]	; (8001894 <BNO080_parseInputReport+0x210>)
 800186e:	79db      	ldrb	r3, [r3, #7]
 8001870:	71fb      	strb	r3, [r7, #7]
			if (command == COMMAND_ME_CALIBRATE)
 8001872:	79fb      	ldrb	r3, [r7, #7]
 8001874:	2b07      	cmp	r3, #7
 8001876:	d103      	bne.n	8001880 <BNO080_parseInputReport+0x1fc>
				calibrationStatus = shtpData[5 + 5]; //R0 - Status (0 = success, non-zero = fail)
 8001878:	4b06      	ldr	r3, [pc, #24]	; (8001894 <BNO080_parseInputReport+0x210>)
 800187a:	7a9a      	ldrb	r2, [r3, #10]
 800187c:	4b21      	ldr	r3, [pc, #132]	; (8001904 <BNO080_parseInputReport+0x280>)
 800187e:	701a      	strb	r2, [r3, #0]
			break;
 8001880:	bf00      	nop
}
 8001882:	bf00      	nop
 8001884:	371c      	adds	r7, #28
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	2000022c 	.word	0x2000022c
 8001894:	20000280 	.word	0x20000280
 8001898:	20000234 	.word	0x20000234
 800189c:	20000308 	.word	0x20000308
 80018a0:	20000300 	.word	0x20000300
 80018a4:	2000030c 	.word	0x2000030c
 80018a8:	2000026a 	.word	0x2000026a
 80018ac:	20000266 	.word	0x20000266
 80018b0:	2000023a 	.word	0x2000023a
 80018b4:	20000304 	.word	0x20000304
 80018b8:	20000276 	.word	0x20000276
 80018bc:	20000278 	.word	0x20000278
 80018c0:	2000027a 	.word	0x2000027a
 80018c4:	20000262 	.word	0x20000262
 80018c8:	20000260 	.word	0x20000260
 80018cc:	20000230 	.word	0x20000230
 80018d0:	20000264 	.word	0x20000264
 80018d4:	20000306 	.word	0x20000306
 80018d8:	20000268 	.word	0x20000268
 80018dc:	20000238 	.word	0x20000238
 80018e0:	2000030a 	.word	0x2000030a
 80018e4:	20000274 	.word	0x20000274
 80018e8:	20000228 	.word	0x20000228
 80018ec:	20000232 	.word	0x20000232
 80018f0:	2000026c 	.word	0x2000026c
 80018f4:	2000030e 	.word	0x2000030e
 80018f8:	2000027c 	.word	0x2000027c
 80018fc:	20000302 	.word	0x20000302
 8001900:	20000270 	.word	0x20000270
 8001904:	20000303 	.word	0x20000303

08001908 <BNO080_getQuatI>:

//Return the rotation vector quaternion I
float BNO080_getQuatI()
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatI, rotationVector_Q1);
 800190c:	4b07      	ldr	r3, [pc, #28]	; (800192c <BNO080_getQuatI+0x24>)
 800190e:	881b      	ldrh	r3, [r3, #0]
 8001910:	b21a      	sxth	r2, r3
 8001912:	4b07      	ldr	r3, [pc, #28]	; (8001930 <BNO080_getQuatI+0x28>)
 8001914:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001918:	b2db      	uxtb	r3, r3
 800191a:	4619      	mov	r1, r3
 800191c:	4610      	mov	r0, r2
 800191e:	f000 f861 	bl	80019e4 <BNO080_qToFloat>
 8001922:	eef0 7a40 	vmov.f32	s15, s0
}
 8001926:	eeb0 0a67 	vmov.f32	s0, s15
 800192a:	bd80      	pop	{r7, pc}
 800192c:	2000030a 	.word	0x2000030a
 8001930:	20000000 	.word	0x20000000

08001934 <BNO080_getQuatJ>:

//Return the rotation vector quaternion J
float BNO080_getQuatJ()
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatJ, rotationVector_Q1);
 8001938:	4b07      	ldr	r3, [pc, #28]	; (8001958 <BNO080_getQuatJ+0x24>)
 800193a:	881b      	ldrh	r3, [r3, #0]
 800193c:	b21a      	sxth	r2, r3
 800193e:	4b07      	ldr	r3, [pc, #28]	; (800195c <BNO080_getQuatJ+0x28>)
 8001940:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001944:	b2db      	uxtb	r3, r3
 8001946:	4619      	mov	r1, r3
 8001948:	4610      	mov	r0, r2
 800194a:	f000 f84b 	bl	80019e4 <BNO080_qToFloat>
 800194e:	eef0 7a40 	vmov.f32	s15, s0
}
 8001952:	eeb0 0a67 	vmov.f32	s0, s15
 8001956:	bd80      	pop	{r7, pc}
 8001958:	20000274 	.word	0x20000274
 800195c:	20000000 	.word	0x20000000

08001960 <BNO080_getQuatK>:

//Return the rotation vector quaternion K
float BNO080_getQuatK()
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatK, rotationVector_Q1);
 8001964:	4b07      	ldr	r3, [pc, #28]	; (8001984 <BNO080_getQuatK+0x24>)
 8001966:	881b      	ldrh	r3, [r3, #0]
 8001968:	b21a      	sxth	r2, r3
 800196a:	4b07      	ldr	r3, [pc, #28]	; (8001988 <BNO080_getQuatK+0x28>)
 800196c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001970:	b2db      	uxtb	r3, r3
 8001972:	4619      	mov	r1, r3
 8001974:	4610      	mov	r0, r2
 8001976:	f000 f835 	bl	80019e4 <BNO080_qToFloat>
 800197a:	eef0 7a40 	vmov.f32	s15, s0
}
 800197e:	eeb0 0a67 	vmov.f32	s0, s15
 8001982:	bd80      	pop	{r7, pc}
 8001984:	20000228 	.word	0x20000228
 8001988:	20000000 	.word	0x20000000

0800198c <BNO080_getQuatReal>:

//Return the rotation vector quaternion Real
float BNO080_getQuatReal()
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatReal, rotationVector_Q1);
 8001990:	4b07      	ldr	r3, [pc, #28]	; (80019b0 <BNO080_getQuatReal+0x24>)
 8001992:	881b      	ldrh	r3, [r3, #0]
 8001994:	b21a      	sxth	r2, r3
 8001996:	4b07      	ldr	r3, [pc, #28]	; (80019b4 <BNO080_getQuatReal+0x28>)
 8001998:	f9b3 3000 	ldrsh.w	r3, [r3]
 800199c:	b2db      	uxtb	r3, r3
 800199e:	4619      	mov	r1, r3
 80019a0:	4610      	mov	r0, r2
 80019a2:	f000 f81f 	bl	80019e4 <BNO080_qToFloat>
 80019a6:	eef0 7a40 	vmov.f32	s15, s0
}
 80019aa:	eeb0 0a67 	vmov.f32	s0, s15
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	20000232 	.word	0x20000232
 80019b4:	20000000 	.word	0x20000000

080019b8 <BNO080_getQuatRadianAccuracy>:

//Return the rotation vector accuracy
float BNO080_getQuatRadianAccuracy()
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatRadianAccuracy, rotationVector_Q1);
 80019bc:	4b07      	ldr	r3, [pc, #28]	; (80019dc <BNO080_getQuatRadianAccuracy+0x24>)
 80019be:	881b      	ldrh	r3, [r3, #0]
 80019c0:	b21a      	sxth	r2, r3
 80019c2:	4b07      	ldr	r3, [pc, #28]	; (80019e0 <BNO080_getQuatRadianAccuracy+0x28>)
 80019c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	4619      	mov	r1, r3
 80019cc:	4610      	mov	r0, r2
 80019ce:	f000 f809 	bl	80019e4 <BNO080_qToFloat>
 80019d2:	eef0 7a40 	vmov.f32	s15, s0
}
 80019d6:	eeb0 0a67 	vmov.f32	s0, s15
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	2000026c 	.word	0x2000026c
 80019e0:	20000000 	.word	0x20000000

080019e4 <BNO080_qToFloat>:
}

//Given a register value and a Q point, convert to float
//See https://en.wikipedia.org/wiki/Q_(number_format)
float BNO080_qToFloat(int16_t fixedPointValue, uint8_t qPoint)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	ed2d 8b02 	vpush	{d8}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	4603      	mov	r3, r0
 80019f0:	460a      	mov	r2, r1
 80019f2:	80fb      	strh	r3, [r7, #6]
 80019f4:	4613      	mov	r3, r2
 80019f6:	717b      	strb	r3, [r7, #5]
	return fixedPointValue * powf(2, qPoint * -1);
 80019f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019fc:	ee07 3a90 	vmov	s15, r3
 8001a00:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001a04:	797b      	ldrb	r3, [r7, #5]
 8001a06:	425b      	negs	r3, r3
 8001a08:	ee07 3a90 	vmov	s15, r3
 8001a0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a10:	eef0 0a67 	vmov.f32	s1, s15
 8001a14:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001a18:	f00b fd2e 	bl	800d478 <powf>
 8001a1c:	eef0 7a40 	vmov.f32	s15, s0
 8001a20:	ee68 7a27 	vmul.f32	s15, s16, s15
}
 8001a24:	eeb0 0a67 	vmov.f32	s0, s15
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	ecbd 8b02 	vpop	{d8}
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <BNO080_enableRotationVector>:

//Sends the packet to enable the rotation vector
void BNO080_enableRotationVector(uint16_t timeBetweenReports)
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b082      	sub	sp, #8
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	4603      	mov	r3, r0
 8001a3a:	80fb      	strh	r3, [r7, #6]
	BNO080_setFeatureCommand(SENSOR_REPORTID_ROTATION_VECTOR, timeBetweenReports, 0);
 8001a3c:	88fb      	ldrh	r3, [r7, #6]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	4619      	mov	r1, r3
 8001a42:	2005      	movs	r0, #5
 8001a44:	f000 f804 	bl	8001a50 <BNO080_setFeatureCommand>
}
 8001a48:	bf00      	nop
 8001a4a:	3708      	adds	r7, #8
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <BNO080_setFeatureCommand>:
}

//Given a sensor's report ID, this tells the BNO080 to begin reporting the values
//Also sets the specific config word. Useful for personal activity classifier
void BNO080_setFeatureCommand(uint8_t reportID, uint32_t microsBetweenReports, uint32_t specificConfig)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	4603      	mov	r3, r0
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	607a      	str	r2, [r7, #4]
 8001a5c:	73fb      	strb	r3, [r7, #15]
	shtpData[0] = SHTP_REPORT_SET_FEATURE_COMMAND;	 //Set feature command. Reference page 55
 8001a5e:	4b24      	ldr	r3, [pc, #144]	; (8001af0 <BNO080_setFeatureCommand+0xa0>)
 8001a60:	22fd      	movs	r2, #253	; 0xfd
 8001a62:	701a      	strb	r2, [r3, #0]
	shtpData[1] = reportID;						 //Feature Report ID. 0x01 = Accelerometer, 0x05 = Rotation vector
 8001a64:	4a22      	ldr	r2, [pc, #136]	; (8001af0 <BNO080_setFeatureCommand+0xa0>)
 8001a66:	7bfb      	ldrb	r3, [r7, #15]
 8001a68:	7053      	strb	r3, [r2, #1]
	shtpData[2] = 0;							 //Feature flags
 8001a6a:	4b21      	ldr	r3, [pc, #132]	; (8001af0 <BNO080_setFeatureCommand+0xa0>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	709a      	strb	r2, [r3, #2]
	shtpData[3] = 0;							 //Change sensitivity (LSB)
 8001a70:	4b1f      	ldr	r3, [pc, #124]	; (8001af0 <BNO080_setFeatureCommand+0xa0>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	70da      	strb	r2, [r3, #3]
	shtpData[4] = 0;							 //Change sensitivity (MSB)
 8001a76:	4b1e      	ldr	r3, [pc, #120]	; (8001af0 <BNO080_setFeatureCommand+0xa0>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	711a      	strb	r2, [r3, #4]
	shtpData[5] = (microsBetweenReports >> 0) & 0xFF;  //Report interval (LSB) in microseconds. 0x7A120 = 500ms
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	b2da      	uxtb	r2, r3
 8001a80:	4b1b      	ldr	r3, [pc, #108]	; (8001af0 <BNO080_setFeatureCommand+0xa0>)
 8001a82:	715a      	strb	r2, [r3, #5]
	shtpData[6] = (microsBetweenReports >> 8) & 0xFF;  //Report interval
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	0a1b      	lsrs	r3, r3, #8
 8001a88:	b2da      	uxtb	r2, r3
 8001a8a:	4b19      	ldr	r3, [pc, #100]	; (8001af0 <BNO080_setFeatureCommand+0xa0>)
 8001a8c:	719a      	strb	r2, [r3, #6]
	shtpData[7] = (microsBetweenReports >> 16) & 0xFF; //Report interval
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	0c1b      	lsrs	r3, r3, #16
 8001a92:	b2da      	uxtb	r2, r3
 8001a94:	4b16      	ldr	r3, [pc, #88]	; (8001af0 <BNO080_setFeatureCommand+0xa0>)
 8001a96:	71da      	strb	r2, [r3, #7]
	shtpData[8] = (microsBetweenReports >> 24) & 0xFF; //Report interval (MSB)
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	0e1b      	lsrs	r3, r3, #24
 8001a9c:	b2da      	uxtb	r2, r3
 8001a9e:	4b14      	ldr	r3, [pc, #80]	; (8001af0 <BNO080_setFeatureCommand+0xa0>)
 8001aa0:	721a      	strb	r2, [r3, #8]
	shtpData[9] = 0;							 //Batch Interval (LSB)
 8001aa2:	4b13      	ldr	r3, [pc, #76]	; (8001af0 <BNO080_setFeatureCommand+0xa0>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	725a      	strb	r2, [r3, #9]
	shtpData[10] = 0;							 //Batch Interval
 8001aa8:	4b11      	ldr	r3, [pc, #68]	; (8001af0 <BNO080_setFeatureCommand+0xa0>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	729a      	strb	r2, [r3, #10]
	shtpData[11] = 0;							 //Batch Interval
 8001aae:	4b10      	ldr	r3, [pc, #64]	; (8001af0 <BNO080_setFeatureCommand+0xa0>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	72da      	strb	r2, [r3, #11]
	shtpData[12] = 0;							 //Batch Interval (MSB)
 8001ab4:	4b0e      	ldr	r3, [pc, #56]	; (8001af0 <BNO080_setFeatureCommand+0xa0>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	731a      	strb	r2, [r3, #12]
	shtpData[13] = (specificConfig >> 0) & 0xFF;	   	 //Sensor-specific config (LSB)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	b2da      	uxtb	r2, r3
 8001abe:	4b0c      	ldr	r3, [pc, #48]	; (8001af0 <BNO080_setFeatureCommand+0xa0>)
 8001ac0:	735a      	strb	r2, [r3, #13]
	shtpData[14] = (specificConfig >> 8) & 0xFF;	   	 //Sensor-specific config
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	0a1b      	lsrs	r3, r3, #8
 8001ac6:	b2da      	uxtb	r2, r3
 8001ac8:	4b09      	ldr	r3, [pc, #36]	; (8001af0 <BNO080_setFeatureCommand+0xa0>)
 8001aca:	739a      	strb	r2, [r3, #14]
	shtpData[15] = (specificConfig >> 16) & 0xFF;	 //Sensor-specific config
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	0c1b      	lsrs	r3, r3, #16
 8001ad0:	b2da      	uxtb	r2, r3
 8001ad2:	4b07      	ldr	r3, [pc, #28]	; (8001af0 <BNO080_setFeatureCommand+0xa0>)
 8001ad4:	73da      	strb	r2, [r3, #15]
	shtpData[16] = (specificConfig >> 24) & 0xFF;	 //Sensor-specific config (MSB)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	0e1b      	lsrs	r3, r3, #24
 8001ada:	b2da      	uxtb	r2, r3
 8001adc:	4b04      	ldr	r3, [pc, #16]	; (8001af0 <BNO080_setFeatureCommand+0xa0>)
 8001ade:	741a      	strb	r2, [r3, #16]

	//Transmit packet on channel 2, 17 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 17);
 8001ae0:	2111      	movs	r1, #17
 8001ae2:	2002      	movs	r0, #2
 8001ae4:	f000 f89a 	bl	8001c1c <BNO080_sendPacket>
}
 8001ae8:	bf00      	nop
 8001aea:	3710      	adds	r7, #16
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	20000280 	.word	0x20000280

08001af4 <BNO080_waitForSPI>:

//Blocking wait for BNO080 to assert (pull low) the INT pin
//indicating it's ready for comm. Can take more than 104ms
//after a hardware reset
int BNO080_waitForSPI(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 8001afa:	2300      	movs	r3, #0
 8001afc:	607b      	str	r3, [r7, #4]
 8001afe:	e00c      	b.n	8001b1a <BNO080_waitForSPI+0x26>
	{
		if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 0)
 8001b00:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b04:	480b      	ldr	r0, [pc, #44]	; (8001b34 <BNO080_waitForSPI+0x40>)
 8001b06:	f7ff fbc0 	bl	800128a <LL_GPIO_IsInputPinSet>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d101      	bne.n	8001b14 <BNO080_waitForSPI+0x20>
		{
			//printf("\nData available\n");
			return (1);
 8001b10:	2301      	movs	r3, #1
 8001b12:	e00a      	b.n	8001b2a <BNO080_waitForSPI+0x36>
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	3301      	adds	r3, #1
 8001b18:	607b      	str	r3, [r7, #4]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b20:	d1ee      	bne.n	8001b00 <BNO080_waitForSPI+0xc>
		}
		//printf("SPI Wait %d\n", counter);
	}
	printf("\nData not available\n");
 8001b22:	4805      	ldr	r0, [pc, #20]	; (8001b38 <BNO080_waitForSPI+0x44>)
 8001b24:	f009 fd94 	bl	800b650 <puts>
	return (0);
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	40020800 	.word	0x40020800
 8001b38:	0800e420 	.word	0x0800e420

08001b3c <BNO080_receivePacket>:


//Check to see if there is any new data available
//Read the contents of the incoming packet into the shtpData array
int BNO080_receivePacket(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
	uint8_t incoming;

	if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 1)
 8001b42:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b46:	4831      	ldr	r0, [pc, #196]	; (8001c0c <BNO080_receivePacket+0xd0>)
 8001b48:	f7ff fb9f 	bl	800128a <LL_GPIO_IsInputPinSet>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d101      	bne.n	8001b56 <BNO080_receivePacket+0x1a>
		return (0); //Data is not available
 8001b52:	2300      	movs	r3, #0
 8001b54:	e056      	b.n	8001c04 <BNO080_receivePacket+0xc8>

	//Old way: if (BNO080_waitForSPI() == 0) return (0); //Something went wrong

	//Get first four bytes to find out how much data we need to read

	CHIP_SELECT(BNO080);
 8001b56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b5a:	482d      	ldr	r0, [pc, #180]	; (8001c10 <BNO080_receivePacket+0xd4>)
 8001b5c:	f7ff fbb8 	bl	80012d0 <LL_GPIO_ResetOutputPin>

	//Get the first four bytes, aka the packet header
	uint8_t packetLSB = SPI2_SendByte(0);
 8001b60:	2000      	movs	r0, #0
 8001b62:	f7ff fd23 	bl	80015ac <SPI2_SendByte>
 8001b66:	4603      	mov	r3, r0
 8001b68:	737b      	strb	r3, [r7, #13]
	uint8_t packetMSB = SPI2_SendByte(0);
 8001b6a:	2000      	movs	r0, #0
 8001b6c:	f7ff fd1e 	bl	80015ac <SPI2_SendByte>
 8001b70:	4603      	mov	r3, r0
 8001b72:	733b      	strb	r3, [r7, #12]
	uint8_t channelNumber = SPI2_SendByte(0);
 8001b74:	2000      	movs	r0, #0
 8001b76:	f7ff fd19 	bl	80015ac <SPI2_SendByte>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	72fb      	strb	r3, [r7, #11]
	uint8_t sequenceNumber = SPI2_SendByte(0); //Not sure if we need to store this or not
 8001b7e:	2000      	movs	r0, #0
 8001b80:	f7ff fd14 	bl	80015ac <SPI2_SendByte>
 8001b84:	4603      	mov	r3, r0
 8001b86:	72bb      	strb	r3, [r7, #10]

	//Store the header info
	shtpHeader[0] = packetLSB;
 8001b88:	4a22      	ldr	r2, [pc, #136]	; (8001c14 <BNO080_receivePacket+0xd8>)
 8001b8a:	7b7b      	ldrb	r3, [r7, #13]
 8001b8c:	7013      	strb	r3, [r2, #0]
	shtpHeader[1] = packetMSB;
 8001b8e:	4a21      	ldr	r2, [pc, #132]	; (8001c14 <BNO080_receivePacket+0xd8>)
 8001b90:	7b3b      	ldrb	r3, [r7, #12]
 8001b92:	7053      	strb	r3, [r2, #1]
	shtpHeader[2] = channelNumber;
 8001b94:	4a1f      	ldr	r2, [pc, #124]	; (8001c14 <BNO080_receivePacket+0xd8>)
 8001b96:	7afb      	ldrb	r3, [r7, #11]
 8001b98:	7093      	strb	r3, [r2, #2]
	shtpHeader[3] = sequenceNumber;
 8001b9a:	4a1e      	ldr	r2, [pc, #120]	; (8001c14 <BNO080_receivePacket+0xd8>)
 8001b9c:	7abb      	ldrb	r3, [r7, #10]
 8001b9e:	70d3      	strb	r3, [r2, #3]

	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)packetMSB << 8 | packetLSB);
 8001ba0:	7b3b      	ldrb	r3, [r7, #12]
 8001ba2:	021b      	lsls	r3, r3, #8
 8001ba4:	b21a      	sxth	r2, r3
 8001ba6:	7b7b      	ldrb	r3, [r7, #13]
 8001ba8:	b21b      	sxth	r3, r3
 8001baa:	4313      	orrs	r3, r2
 8001bac:	813b      	strh	r3, [r7, #8]
	dataLength &= 0x7fff; //Clear the MSbit.
 8001bae:	893b      	ldrh	r3, [r7, #8]
 8001bb0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001bb4:	813b      	strh	r3, [r7, #8]
	//This bit indicates if this package is a continuation of the last. Ignore it for now.
	//TODO catch this as an error and exit
	if (dataLength == 0)
 8001bb6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d101      	bne.n	8001bc2 <BNO080_receivePacket+0x86>
	{
		//Packet is empty
		return (0); //All done
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	e020      	b.n	8001c04 <BNO080_receivePacket+0xc8>
	}
	dataLength -= 4; //Remove the header bytes from the data count
 8001bc2:	893b      	ldrh	r3, [r7, #8]
 8001bc4:	3b04      	subs	r3, #4
 8001bc6:	b29b      	uxth	r3, r3
 8001bc8:	813b      	strh	r3, [r7, #8]

	//printf("length: %d\n", dataLength);

	//Read incoming data into the shtpData array
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 8001bca:	2300      	movs	r3, #0
 8001bcc:	81fb      	strh	r3, [r7, #14]
 8001bce:	e00e      	b.n	8001bee <BNO080_receivePacket+0xb2>
	{
		incoming = SPI2_SendByte(0xFF);
 8001bd0:	20ff      	movs	r0, #255	; 0xff
 8001bd2:	f7ff fceb 	bl	80015ac <SPI2_SendByte>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	71fb      	strb	r3, [r7, #7]
		//printf("%d ", incoming);
		if (dataSpot < MAX_PACKET_SIZE)	//BNO080 can respond with upto 270 bytes, avoid overflow
 8001bda:	89fb      	ldrh	r3, [r7, #14]
 8001bdc:	2b7f      	cmp	r3, #127	; 0x7f
 8001bde:	d803      	bhi.n	8001be8 <BNO080_receivePacket+0xac>
			shtpData[dataSpot] = incoming; //Store data into the shtpData array
 8001be0:	89fb      	ldrh	r3, [r7, #14]
 8001be2:	490d      	ldr	r1, [pc, #52]	; (8001c18 <BNO080_receivePacket+0xdc>)
 8001be4:	79fa      	ldrb	r2, [r7, #7]
 8001be6:	54ca      	strb	r2, [r1, r3]
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 8001be8:	89fb      	ldrh	r3, [r7, #14]
 8001bea:	3301      	adds	r3, #1
 8001bec:	81fb      	strh	r3, [r7, #14]
 8001bee:	89fa      	ldrh	r2, [r7, #14]
 8001bf0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	dbeb      	blt.n	8001bd0 <BNO080_receivePacket+0x94>
	}
	//printf("\n");

	CHIP_DESELECT(BNO080); //Release BNO080
 8001bf8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bfc:	4804      	ldr	r0, [pc, #16]	; (8001c10 <BNO080_receivePacket+0xd4>)
 8001bfe:	f7ff fb59 	bl	80012b4 <LL_GPIO_SetOutputPin>
	return (1); //We're done!
 8001c02:	2301      	movs	r3, #1
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3710      	adds	r7, #16
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	40020800 	.word	0x40020800
 8001c10:	40020400 	.word	0x40020400
 8001c14:	2000022c 	.word	0x2000022c
 8001c18:	20000280 	.word	0x20000280

08001c1c <BNO080_sendPacket>:

//Given the data packet, send the header then the data
//Returns false if sensor does not ACK
//TODO - Arduino has a max 32 byte send. Break sending into multi packets if needed.
int BNO080_sendPacket(uint8_t channelNumber, uint8_t dataLength)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	4603      	mov	r3, r0
 8001c24:	460a      	mov	r2, r1
 8001c26:	71fb      	strb	r3, [r7, #7]
 8001c28:	4613      	mov	r3, r2
 8001c2a:	71bb      	strb	r3, [r7, #6]
	uint8_t packetLength = dataLength + 4; //Add four bytes for the header
 8001c2c:	79bb      	ldrb	r3, [r7, #6]
 8001c2e:	3304      	adds	r3, #4
 8001c30:	73bb      	strb	r3, [r7, #14]

	//Wait for BNO080 to indicate it is available for communication
	if (BNO080_waitForSPI() == 0)
 8001c32:	f7ff ff5f 	bl	8001af4 <BNO080_waitForSPI>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d101      	bne.n	8001c40 <BNO080_sendPacket+0x24>
		return (0); //Data is not available
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	e032      	b.n	8001ca6 <BNO080_sendPacket+0x8a>

	//BNO080 has max CLK of 3MHz, MSB first,
	//The BNO080 uses CPOL = 1 and CPHA = 1. This is mode3
	CHIP_SELECT(BNO080);
 8001c40:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c44:	481a      	ldr	r0, [pc, #104]	; (8001cb0 <BNO080_sendPacket+0x94>)
 8001c46:	f7ff fb43 	bl	80012d0 <LL_GPIO_ResetOutputPin>

	//Send the 4 byte packet header
	SPI2_SendByte(packetLength & 0xFF);			//Packet length LSB
 8001c4a:	7bbb      	ldrb	r3, [r7, #14]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff fcad 	bl	80015ac <SPI2_SendByte>
	SPI2_SendByte(packetLength >> 8);				//Packet length MSB
 8001c52:	7bbb      	ldrb	r3, [r7, #14]
 8001c54:	121b      	asrs	r3, r3, #8
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff fca7 	bl	80015ac <SPI2_SendByte>
	SPI2_SendByte(channelNumber);					//Channel number
 8001c5e:	79fb      	ldrb	r3, [r7, #7]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff fca3 	bl	80015ac <SPI2_SendByte>
	SPI2_SendByte(sequenceNumber[channelNumber]++); 	//Send the sequence number, increments with each packet sent, different counter for each channel
 8001c66:	79fb      	ldrb	r3, [r7, #7]
 8001c68:	4a12      	ldr	r2, [pc, #72]	; (8001cb4 <BNO080_sendPacket+0x98>)
 8001c6a:	5cd2      	ldrb	r2, [r2, r3]
 8001c6c:	1c51      	adds	r1, r2, #1
 8001c6e:	b2c8      	uxtb	r0, r1
 8001c70:	4910      	ldr	r1, [pc, #64]	; (8001cb4 <BNO080_sendPacket+0x98>)
 8001c72:	54c8      	strb	r0, [r1, r3]
 8001c74:	4610      	mov	r0, r2
 8001c76:	f7ff fc99 	bl	80015ac <SPI2_SendByte>

	//Send the user's data packet
	for (uint8_t i = 0; i < dataLength; i++)
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	73fb      	strb	r3, [r7, #15]
 8001c7e:	e008      	b.n	8001c92 <BNO080_sendPacket+0x76>
	{
		SPI2_SendByte(shtpData[i]);
 8001c80:	7bfb      	ldrb	r3, [r7, #15]
 8001c82:	4a0d      	ldr	r2, [pc, #52]	; (8001cb8 <BNO080_sendPacket+0x9c>)
 8001c84:	5cd3      	ldrb	r3, [r2, r3]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff fc90 	bl	80015ac <SPI2_SendByte>
	for (uint8_t i = 0; i < dataLength; i++)
 8001c8c:	7bfb      	ldrb	r3, [r7, #15]
 8001c8e:	3301      	adds	r3, #1
 8001c90:	73fb      	strb	r3, [r7, #15]
 8001c92:	7bfa      	ldrb	r2, [r7, #15]
 8001c94:	79bb      	ldrb	r3, [r7, #6]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d3f2      	bcc.n	8001c80 <BNO080_sendPacket+0x64>
	}

	CHIP_DESELECT(BNO080);
 8001c9a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c9e:	4804      	ldr	r0, [pc, #16]	; (8001cb0 <BNO080_sendPacket+0x94>)
 8001ca0:	f7ff fb08 	bl	80012b4 <LL_GPIO_SetOutputPin>

	return (1);
 8001ca4:	2301      	movs	r3, #1
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3710      	adds	r7, #16
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	40020400 	.word	0x40020400
 8001cb4:	20000204 	.word	0x20000204
 8001cb8:	20000280 	.word	0x20000280

08001cbc <iBus_Check_CHECKSUM>:

#include "FS_iA6B.h"

FSiA6B_iBus iBus;

unsigned char iBus_Check_CHECKSUM(unsigned char *data, unsigned char len) {
 8001cbc:	b480      	push	{r7}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	70fb      	strb	r3, [r7, #3]

	unsigned short checksum = 0xffff;
 8001cc8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ccc:	81fb      	strh	r3, [r7, #14]

	for (int i = 0; i < len - 2; i++) {
 8001cce:	2300      	movs	r3, #0
 8001cd0:	60bb      	str	r3, [r7, #8]
 8001cd2:	e00a      	b.n	8001cea <iBus_Check_CHECKSUM+0x2e>
		checksum = checksum - data[i];
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	4413      	add	r3, r2
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	89fa      	ldrh	r2, [r7, #14]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	81fb      	strh	r3, [r7, #14]
	for (int i = 0; i < len - 2; i++) {
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	60bb      	str	r3, [r7, #8]
 8001cea:	78fb      	ldrb	r3, [r7, #3]
 8001cec:	3b02      	subs	r3, #2
 8001cee:	68ba      	ldr	r2, [r7, #8]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	dbef      	blt.n	8001cd4 <iBus_Check_CHECKSUM+0x18>
	}

	return ((checksum & 0x00ff) == data[30]) && ((checksum >> 8) == data[31]);
 8001cf4:	89fb      	ldrh	r3, [r7, #14]
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	321e      	adds	r2, #30
 8001cfc:	7812      	ldrb	r2, [r2, #0]
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d10a      	bne.n	8001d18 <iBus_Check_CHECKSUM+0x5c>
 8001d02:	89fb      	ldrh	r3, [r7, #14]
 8001d04:	0a1b      	lsrs	r3, r3, #8
 8001d06:	b29a      	uxth	r2, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	331f      	adds	r3, #31
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d101      	bne.n	8001d18 <iBus_Check_CHECKSUM+0x5c>
 8001d14:	2301      	movs	r3, #1
 8001d16:	e000      	b.n	8001d1a <iBus_Check_CHECKSUM+0x5e>
 8001d18:	2300      	movs	r3, #0
 8001d1a:	b2db      	uxtb	r3, r3
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3714      	adds	r7, #20
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <iBus_Parsing>:

void iBus_Parsing(unsigned char *data, FSiA6B_iBus *iBus) {
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
	iBus->RH = (data[2] | data[3] << 8) & 0x0fff;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	3302      	adds	r3, #2
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	b21a      	sxth	r2, r3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	3303      	adds	r3, #3
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	021b      	lsls	r3, r3, #8
 8001d42:	b21b      	sxth	r3, r3
 8001d44:	4313      	orrs	r3, r2
 8001d46:	b21b      	sxth	r3, r3
 8001d48:	b29b      	uxth	r3, r3
 8001d4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d4e:	b29a      	uxth	r2, r3
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	801a      	strh	r2, [r3, #0]
	iBus->RV = (data[4] | data[5] << 8) & 0x0fff;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	3304      	adds	r3, #4
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	b21a      	sxth	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	3305      	adds	r3, #5
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	021b      	lsls	r3, r3, #8
 8001d64:	b21b      	sxth	r3, r3
 8001d66:	4313      	orrs	r3, r2
 8001d68:	b21b      	sxth	r3, r3
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d70:	b29a      	uxth	r2, r3
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	805a      	strh	r2, [r3, #2]
	iBus->LV = (data[6] | data[7] << 8) & 0x0fff;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	3306      	adds	r3, #6
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	b21a      	sxth	r2, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	3307      	adds	r3, #7
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	021b      	lsls	r3, r3, #8
 8001d86:	b21b      	sxth	r3, r3
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	b21b      	sxth	r3, r3
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d92:	b29a      	uxth	r2, r3
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	809a      	strh	r2, [r3, #4]
	iBus->LH = (data[8] | data[9] << 8) & 0x0fff;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	3308      	adds	r3, #8
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	b21a      	sxth	r2, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	3309      	adds	r3, #9
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	021b      	lsls	r3, r3, #8
 8001da8:	b21b      	sxth	r3, r3
 8001daa:	4313      	orrs	r3, r2
 8001dac:	b21b      	sxth	r3, r3
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001db4:	b29a      	uxth	r2, r3
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	80da      	strh	r2, [r3, #6]
	iBus->SwA = (data[10] | data[11] << 8) & 0x0fff;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	330a      	adds	r3, #10
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	b21a      	sxth	r2, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	330b      	adds	r3, #11
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	021b      	lsls	r3, r3, #8
 8001dca:	b21b      	sxth	r3, r3
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	b21b      	sxth	r3, r3
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dd6:	b29a      	uxth	r2, r3
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	811a      	strh	r2, [r3, #8]
	iBus->SwC = (data[12] | data[13] << 8) & 0x0fff;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	330c      	adds	r3, #12
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	b21a      	sxth	r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	330d      	adds	r3, #13
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	021b      	lsls	r3, r3, #8
 8001dec:	b21b      	sxth	r3, r3
 8001dee:	4313      	orrs	r3, r2
 8001df0:	b21b      	sxth	r3, r3
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001df8:	b29a      	uxth	r2, r3
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	819a      	strh	r2, [r3, #12]

	iBus->FailSafe = (data[13] >> 4);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	330d      	adds	r3, #13
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	091b      	lsrs	r3, r3, #4
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	b29a      	uxth	r2, r3
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	829a      	strh	r2, [r3, #20]
}
 8001e0e:	bf00      	nop
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr

08001e1a <iBus_isActiveFailSafe>:

unsigned char iBus_isActiveFailSafe(FSiA6B_iBus *iBus) {
 8001e1a:	b480      	push	{r7}
 8001e1c:	b083      	sub	sp, #12
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
	//1: Not Failsafe mode, 0: Failsafe mode
	return iBus -> FailSafe != 0;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	8a9b      	ldrh	r3, [r3, #20]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	bf14      	ite	ne
 8001e2a:	2301      	movne	r3, #1
 8001e2c:	2300      	moveq	r3, #0
 8001e2e:	b2db      	uxtb	r3, r3
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <LL_SPI_Enable>:
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	601a      	str	r2, [r3, #0]
}
 8001e50:	bf00      	nop
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <LL_SPI_SetStandard>:
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f023 0210 	bic.w	r2, r3, #16
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	431a      	orrs	r2, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	605a      	str	r2, [r3, #4]
}
 8001e76:	bf00      	nop
 8001e78:	370c      	adds	r7, #12
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr

08001e82 <LL_SPI_IsActiveFlag_RXNE>:
{
 8001e82:	b480      	push	{r7}
 8001e84:	b083      	sub	sp, #12
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d101      	bne.n	8001e9a <LL_SPI_IsActiveFlag_RXNE+0x18>
 8001e96:	2301      	movs	r3, #1
 8001e98:	e000      	b.n	8001e9c <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8001e9a:	2300      	movs	r3, #0
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <LL_SPI_IsActiveFlag_TXE>:
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	f003 0302 	and.w	r3, r3, #2
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d101      	bne.n	8001ec0 <LL_SPI_IsActiveFlag_TXE+0x18>
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e000      	b.n	8001ec2 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8001ec0:	2300      	movs	r3, #0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	370c      	adds	r7, #12
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr

08001ece <LL_SPI_ReceiveData8>:
{
 8001ece:	b480      	push	{r7}
 8001ed0:	b083      	sub	sp, #12
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_REG(SPIx->DR));
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	68db      	ldr	r3, [r3, #12]
 8001eda:	b2db      	uxtb	r3, r3
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <LL_SPI_TransmitData8>:
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b085      	sub	sp, #20
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	330c      	adds	r3, #12
 8001ef8:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	78fa      	ldrb	r2, [r7, #3]
 8001efe:	701a      	strb	r2, [r3, #0]
}
 8001f00:	bf00      	nop
 8001f02:	3714      	adds	r7, #20
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <LL_GPIO_IsInputPinSet>:
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	691a      	ldr	r2, [r3, #16]
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	683a      	ldr	r2, [r7, #0]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	bf0c      	ite	eq
 8001f24:	2301      	moveq	r3, #1
 8001f26:	2300      	movne	r3, #0
 8001f28:	b2db      	uxtb	r3, r3
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr

08001f36 <LL_GPIO_SetOutputPin>:
{
 8001f36:	b480      	push	{r7}
 8001f38:	b083      	sub	sp, #12
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
 8001f3e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	683a      	ldr	r2, [r7, #0]
 8001f44:	619a      	str	r2, [r3, #24]
}
 8001f46:	bf00      	nop
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr

08001f52 <LL_GPIO_ResetOutputPin>:
{
 8001f52:	b480      	push	{r7}
 8001f54:	b083      	sub	sp, #12
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
 8001f5a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	041a      	lsls	r2, r3, #16
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	619a      	str	r2, [r3, #24]
}
 8001f64:	bf00      	nop
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr

08001f70 <LL_AHB1_GRP1_EnableClock>:
{
 8001f70:	b480      	push	{r7}
 8001f72:	b085      	sub	sp, #20
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001f78:	4b08      	ldr	r3, [pc, #32]	; (8001f9c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001f7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f7c:	4907      	ldr	r1, [pc, #28]	; (8001f9c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001f84:	4b05      	ldr	r3, [pc, #20]	; (8001f9c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001f86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
}
 8001f90:	bf00      	nop
 8001f92:	3714      	adds	r7, #20
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr
 8001f9c:	40023800 	.word	0x40023800

08001fa0 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001fa8:	4b08      	ldr	r3, [pc, #32]	; (8001fcc <LL_APB2_GRP1_EnableClock+0x2c>)
 8001faa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001fac:	4907      	ldr	r1, [pc, #28]	; (8001fcc <LL_APB2_GRP1_EnableClock+0x2c>)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001fb4:	4b05      	ldr	r3, [pc, #20]	; (8001fcc <LL_APB2_GRP1_EnableClock+0x2c>)
 8001fb6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4013      	ands	r3, r2
 8001fbc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
}
 8001fc0:	bf00      	nop
 8001fc2:	3714      	adds	r7, #20
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr
 8001fcc:	40023800 	.word	0x40023800

08001fd0 <ICM20602_GPIO_SPI_Initialization>:
Struct_ICM20602 ICM20602;
int32_t gyro_x_offset, gyro_y_offset, gyro_z_offset; // To remove offset


void ICM20602_GPIO_SPI_Initialization(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b090      	sub	sp, #64	; 0x40
 8001fd4:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001fd6:	f107 0318 	add.w	r3, r7, #24
 8001fda:	2228      	movs	r2, #40	; 0x28
 8001fdc:	2100      	movs	r1, #0
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f008 fe5e 	bl	800aca0 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe4:	463b      	mov	r3, r7
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	601a      	str	r2, [r3, #0]
 8001fea:	605a      	str	r2, [r3, #4]
 8001fec:	609a      	str	r2, [r3, #8]
 8001fee:	60da      	str	r2, [r3, #12]
 8001ff0:	611a      	str	r2, [r3, #16]
 8001ff2:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8001ff4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001ff8:	f7ff ffd2 	bl	8001fa0 <LL_APB2_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001ffc:	2001      	movs	r0, #1
 8001ffe:	f7ff ffb7 	bl	8001f70 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8002002:	2004      	movs	r0, #4
 8002004:	f7ff ffb4 	bl	8001f70 <LL_AHB1_GRP1_EnableClock>
	/**SPI1 GPIO Configuration
	PA5   ------> SPI1_SCK
	PA6   ------> SPI1_MISO
	PA7   ------> SPI1_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8002008:	23e0      	movs	r3, #224	; 0xe0
 800200a:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800200c:	2302      	movs	r3, #2
 800200e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002010:	2303      	movs	r3, #3
 8002012:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002014:	2300      	movs	r3, #0
 8002016:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002018:	2300      	movs	r3, #0
 800201a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800201c:	2305      	movs	r3, #5
 800201e:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002020:	463b      	mov	r3, r7
 8002022:	4619      	mov	r1, r3
 8002024:	4825      	ldr	r0, [pc, #148]	; (80020bc <ICM20602_GPIO_SPI_Initialization+0xec>)
 8002026:	f007 fea6 	bl	8009d76 <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800202a:	2300      	movs	r3, #0
 800202c:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800202e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002032:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8002034:	2300      	movs	r3, #0
 8002036:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8002038:	2302      	movs	r3, #2
 800203a:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 800203c:	2301      	movs	r3, #1
 800203e:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8002040:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002044:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8; //ICM-20602 MAX SPI CLK is 10MHz. But DIV2(42MHz) is available.
 8002046:	2310      	movs	r3, #16
 8002048:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800204a:	2300      	movs	r3, #0
 800204c:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800204e:	2300      	movs	r3, #0
 8002050:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 8002052:	230a      	movs	r3, #10
 8002054:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(ICM20602_SPI_CHANNEL, &SPI_InitStruct);
 8002056:	f107 0318 	add.w	r3, r7, #24
 800205a:	4619      	mov	r1, r3
 800205c:	4818      	ldr	r0, [pc, #96]	; (80020c0 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 800205e:	f008 f858 	bl	800a112 <LL_SPI_Init>
	LL_SPI_SetStandard(ICM20602_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 8002062:	2100      	movs	r1, #0
 8002064:	4816      	ldr	r0, [pc, #88]	; (80020c0 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8002066:	f7ff fef9 	bl	8001e5c <LL_SPI_SetStandard>
	/**ICM20602 GPIO Control Configuration
	 * PC4  ------> ICM20602_SPI_CS_PIN (output)
	 * PC5  ------> ICM20602_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(ICM20602_SPI_CS_PORT, ICM20602_SPI_CS_PIN);
 800206a:	2110      	movs	r1, #16
 800206c:	4815      	ldr	r0, [pc, #84]	; (80020c4 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 800206e:	f7ff ff70 	bl	8001f52 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_SPI_CS_PIN;
 8002072:	2310      	movs	r3, #16
 8002074:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002076:	2301      	movs	r3, #1
 8002078:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800207a:	2303      	movs	r3, #3
 800207c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800207e:	2300      	movs	r3, #0
 8002080:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002082:	2300      	movs	r3, #0
 8002084:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_SPI_CS_PORT, &GPIO_InitStruct);
 8002086:	463b      	mov	r3, r7
 8002088:	4619      	mov	r1, r3
 800208a:	480e      	ldr	r0, [pc, #56]	; (80020c4 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 800208c:	f007 fe73 	bl	8009d76 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_INT_PIN;
 8002090:	2320      	movs	r3, #32
 8002092:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002094:	2300      	movs	r3, #0
 8002096:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002098:	2301      	movs	r3, #1
 800209a:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_INT_PORT, &GPIO_InitStruct);
 800209c:	463b      	mov	r3, r7
 800209e:	4619      	mov	r1, r3
 80020a0:	4808      	ldr	r0, [pc, #32]	; (80020c4 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 80020a2:	f007 fe68 	bl	8009d76 <LL_GPIO_Init>

	LL_SPI_Enable(ICM20602_SPI_CHANNEL);
 80020a6:	4806      	ldr	r0, [pc, #24]	; (80020c0 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 80020a8:	f7ff fec8 	bl	8001e3c <LL_SPI_Enable>

	CHIP_DESELECT(ICM20602);
 80020ac:	2110      	movs	r1, #16
 80020ae:	4805      	ldr	r0, [pc, #20]	; (80020c4 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 80020b0:	f7ff ff41 	bl	8001f36 <LL_GPIO_SetOutputPin>
}
 80020b4:	bf00      	nop
 80020b6:	3740      	adds	r7, #64	; 0x40
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	40020000 	.word	0x40020000
 80020c0:	40013000 	.word	0x40013000
 80020c4:	40020800 	.word	0x40020800

080020c8 <SPI1_SendByte>:


unsigned char SPI1_SendByte(unsigned char data)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	4603      	mov	r3, r0
 80020d0:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(ICM20602_SPI_CHANNEL)==RESET);
 80020d2:	bf00      	nop
 80020d4:	480c      	ldr	r0, [pc, #48]	; (8002108 <SPI1_SendByte+0x40>)
 80020d6:	f7ff fee7 	bl	8001ea8 <LL_SPI_IsActiveFlag_TXE>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d0f9      	beq.n	80020d4 <SPI1_SendByte+0xc>
	LL_SPI_TransmitData8(ICM20602_SPI_CHANNEL, data);
 80020e0:	79fb      	ldrb	r3, [r7, #7]
 80020e2:	4619      	mov	r1, r3
 80020e4:	4808      	ldr	r0, [pc, #32]	; (8002108 <SPI1_SendByte+0x40>)
 80020e6:	f7ff feff 	bl	8001ee8 <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(ICM20602_SPI_CHANNEL)==RESET);
 80020ea:	bf00      	nop
 80020ec:	4806      	ldr	r0, [pc, #24]	; (8002108 <SPI1_SendByte+0x40>)
 80020ee:	f7ff fec8 	bl	8001e82 <LL_SPI_IsActiveFlag_RXNE>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d0f9      	beq.n	80020ec <SPI1_SendByte+0x24>
	return LL_SPI_ReceiveData8(ICM20602_SPI_CHANNEL);
 80020f8:	4803      	ldr	r0, [pc, #12]	; (8002108 <SPI1_SendByte+0x40>)
 80020fa:	f7ff fee8 	bl	8001ece <LL_SPI_ReceiveData8>
 80020fe:	4603      	mov	r3, r0
}
 8002100:	4618      	mov	r0, r3
 8002102:	3708      	adds	r7, #8
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	40013000 	.word	0x40013000

0800210c <ICM20602_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t ICM20602_Readbyte(uint8_t reg_addr)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	4603      	mov	r3, r0
 8002114:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(ICM20602);
 8002116:	2110      	movs	r1, #16
 8002118:	480b      	ldr	r0, [pc, #44]	; (8002148 <ICM20602_Readbyte+0x3c>)
 800211a:	f7ff ff1a 	bl	8001f52 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 800211e:	79fb      	ldrb	r3, [r7, #7]
 8002120:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002124:	b2db      	uxtb	r3, r3
 8002126:	4618      	mov	r0, r3
 8002128:	f7ff ffce 	bl	80020c8 <SPI1_SendByte>
	val = SPI1_SendByte(0x00); //Send DUMMY to read data
 800212c:	2000      	movs	r0, #0
 800212e:	f7ff ffcb 	bl	80020c8 <SPI1_SendByte>
 8002132:	4603      	mov	r3, r0
 8002134:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(ICM20602);
 8002136:	2110      	movs	r1, #16
 8002138:	4803      	ldr	r0, [pc, #12]	; (8002148 <ICM20602_Readbyte+0x3c>)
 800213a:	f7ff fefc 	bl	8001f36 <LL_GPIO_SetOutputPin>
	
	return val;
 800213e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002140:	4618      	mov	r0, r3
 8002142:	3710      	adds	r7, #16
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	40020800 	.word	0x40020800

0800214c <ICM20602_Readbytes>:

void ICM20602_Readbytes(unsigned char reg_addr, unsigned char len, unsigned char* data)
{
 800214c:	b590      	push	{r4, r7, lr}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
 8002152:	4603      	mov	r3, r0
 8002154:	603a      	str	r2, [r7, #0]
 8002156:	71fb      	strb	r3, [r7, #7]
 8002158:	460b      	mov	r3, r1
 800215a:	71bb      	strb	r3, [r7, #6]
	unsigned int i = 0;
 800215c:	2300      	movs	r3, #0
 800215e:	60fb      	str	r3, [r7, #12]

	CHIP_SELECT(ICM20602);
 8002160:	2110      	movs	r1, #16
 8002162:	4810      	ldr	r0, [pc, #64]	; (80021a4 <ICM20602_Readbytes+0x58>)
 8002164:	f7ff fef5 	bl	8001f52 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8002168:	79fb      	ldrb	r3, [r7, #7]
 800216a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800216e:	b2db      	uxtb	r3, r3
 8002170:	4618      	mov	r0, r3
 8002172:	f7ff ffa9 	bl	80020c8 <SPI1_SendByte>
	while(i < len)
 8002176:	e009      	b.n	800218c <ICM20602_Readbytes+0x40>
	{
		data[i++] = SPI1_SendByte(0x00); //Send DUMMY to read data
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	1c5a      	adds	r2, r3, #1
 800217c:	60fa      	str	r2, [r7, #12]
 800217e:	683a      	ldr	r2, [r7, #0]
 8002180:	18d4      	adds	r4, r2, r3
 8002182:	2000      	movs	r0, #0
 8002184:	f7ff ffa0 	bl	80020c8 <SPI1_SendByte>
 8002188:	4603      	mov	r3, r0
 800218a:	7023      	strb	r3, [r4, #0]
	while(i < len)
 800218c:	79bb      	ldrb	r3, [r7, #6]
 800218e:	68fa      	ldr	r2, [r7, #12]
 8002190:	429a      	cmp	r2, r3
 8002192:	d3f1      	bcc.n	8002178 <ICM20602_Readbytes+0x2c>
	}
	CHIP_DESELECT(ICM20602);
 8002194:	2110      	movs	r1, #16
 8002196:	4803      	ldr	r0, [pc, #12]	; (80021a4 <ICM20602_Readbytes+0x58>)
 8002198:	f7ff fecd 	bl	8001f36 <LL_GPIO_SetOutputPin>
}
 800219c:	bf00      	nop
 800219e:	3714      	adds	r7, #20
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd90      	pop	{r4, r7, pc}
 80021a4:	40020800 	.word	0x40020800

080021a8 <ICM20602_Writebyte>:

void ICM20602_Writebyte(uint8_t reg_addr, uint8_t val)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	4603      	mov	r3, r0
 80021b0:	460a      	mov	r2, r1
 80021b2:	71fb      	strb	r3, [r7, #7]
 80021b4:	4613      	mov	r3, r2
 80021b6:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(ICM20602);
 80021b8:	2110      	movs	r1, #16
 80021ba:	480b      	ldr	r0, [pc, #44]	; (80021e8 <ICM20602_Writebyte+0x40>)
 80021bc:	f7ff fec9 	bl	8001f52 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 80021c0:	79fb      	ldrb	r3, [r7, #7]
 80021c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7ff ff7d 	bl	80020c8 <SPI1_SendByte>
	SPI1_SendByte(val); //Send Data to write
 80021ce:	79bb      	ldrb	r3, [r7, #6]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff ff79 	bl	80020c8 <SPI1_SendByte>
	CHIP_DESELECT(ICM20602);
 80021d6:	2110      	movs	r1, #16
 80021d8:	4803      	ldr	r0, [pc, #12]	; (80021e8 <ICM20602_Writebyte+0x40>)
 80021da:	f7ff feac 	bl	8001f36 <LL_GPIO_SetOutputPin>
}
 80021de:	bf00      	nop
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	40020800 	.word	0x40020800

080021ec <ICM20602_Initialization>:
	CHIP_DESELECT(ICM20602);
}


int ICM20602_Initialization(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 80021f2:	2300      	movs	r3, #0
 80021f4:	73fb      	strb	r3, [r7, #15]
	int16_t accel_raw_data[3] = {0};  // To remove offset
 80021f6:	f107 0308 	add.w	r3, r7, #8
 80021fa:	2200      	movs	r2, #0
 80021fc:	601a      	str	r2, [r3, #0]
 80021fe:	809a      	strh	r2, [r3, #4]
	int16_t gyro_raw_data[3] = {0};   // To remove offset
 8002200:	463b      	mov	r3, r7
 8002202:	2200      	movs	r2, #0
 8002204:	601a      	str	r2, [r3, #0]
 8002206:	809a      	strh	r2, [r3, #4]
	
	ICM20602_GPIO_SPI_Initialization();
 8002208:	f7ff fee2 	bl	8001fd0 <ICM20602_GPIO_SPI_Initialization>
	
	printf("Checking ICM20602...");
 800220c:	4833      	ldr	r0, [pc, #204]	; (80022dc <ICM20602_Initialization+0xf0>)
 800220e:	f009 f9ab 	bl	800b568 <iprintf>
	
	// check WHO_AM_I (0x75)
	who_am_i = ICM20602_Readbyte(WHO_AM_I); 
 8002212:	2075      	movs	r0, #117	; 0x75
 8002214:	f7ff ff7a 	bl	800210c <ICM20602_Readbyte>
 8002218:	4603      	mov	r3, r0
 800221a:	73fb      	strb	r3, [r7, #15]

	// who am i = 0x12
	if(who_am_i == 0x12)
 800221c:	7bfb      	ldrb	r3, [r7, #15]
 800221e:	2b12      	cmp	r3, #18
 8002220:	d105      	bne.n	800222e <ICM20602_Initialization+0x42>
	{
		printf("\nICM20602 who_am_i = 0x%02x...OK\n\n", who_am_i);
 8002222:	7bfb      	ldrb	r3, [r7, #15]
 8002224:	4619      	mov	r1, r3
 8002226:	482e      	ldr	r0, [pc, #184]	; (80022e0 <ICM20602_Initialization+0xf4>)
 8002228:	f009 f99e 	bl	800b568 <iprintf>
 800222c:	e012      	b.n	8002254 <ICM20602_Initialization+0x68>
	}
	// recheck
	else if(who_am_i != 0x12)
 800222e:	7bfb      	ldrb	r3, [r7, #15]
 8002230:	2b12      	cmp	r3, #18
 8002232:	d00f      	beq.n	8002254 <ICM20602_Initialization+0x68>
	{
		who_am_i = ICM20602_Readbyte(WHO_AM_I); // check again WHO_AM_I (0x75)
 8002234:	2075      	movs	r0, #117	; 0x75
 8002236:	f7ff ff69 	bl	800210c <ICM20602_Readbyte>
 800223a:	4603      	mov	r3, r0
 800223c:	73fb      	strb	r3, [r7, #15]

		if (who_am_i != 0x12){
 800223e:	7bfb      	ldrb	r3, [r7, #15]
 8002240:	2b12      	cmp	r3, #18
 8002242:	d007      	beq.n	8002254 <ICM20602_Initialization+0x68>
			printf( "ICM20602 Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0x12);
 8002244:	7bfb      	ldrb	r3, [r7, #15]
 8002246:	2212      	movs	r2, #18
 8002248:	4619      	mov	r1, r3
 800224a:	4826      	ldr	r0, [pc, #152]	; (80022e4 <ICM20602_Initialization+0xf8>)
 800224c:	f009 f98c 	bl	800b568 <iprintf>
			return 1; //ERROR
 8002250:	2301      	movs	r3, #1
 8002252:	e03f      	b.n	80022d4 <ICM20602_Initialization+0xe8>
		}
	}
	
	// Reset ICM20602
	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x80); //Reset ICM20602
 8002254:	2180      	movs	r1, #128	; 0x80
 8002256:	206b      	movs	r0, #107	; 0x6b
 8002258:	f7ff ffa6 	bl	80021a8 <ICM20602_Writebyte>
	HAL_Delay(50);
 800225c:	2032      	movs	r0, #50	; 0x32
 800225e:	f003 fea5 	bl	8005fac <HAL_Delay>

	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x01); // Enable Temperature sensor(bit4-0), Use PLL(bit2:0-01)
 8002262:	2101      	movs	r1, #1
 8002264:	206b      	movs	r0, #107	; 0x6b
 8002266:	f7ff ff9f 	bl	80021a8 <ICM20602_Writebyte>
									// 온도센서 끄면 자이로 값 이상하게 출력됨
	HAL_Delay(50);
 800226a:	2032      	movs	r0, #50	; 0x32
 800226c:	f003 fe9e 	bl	8005fac <HAL_Delay>

	// PWR_MGMT_2 0x6C
	ICM20602_Writebyte(PWR_MGMT_2, 0x38); // Disable Acc(bit5:3-111), Enable Gyro(bit2:0-000)
 8002270:	2138      	movs	r1, #56	; 0x38
 8002272:	206c      	movs	r0, #108	; 0x6c
 8002274:	f7ff ff98 	bl	80021a8 <ICM20602_Writebyte>
	//ICM20602_Writebyte( PWR_MGMT_2, 0x00 ); // Enable Acc(bit5:3-000), Enable Gyro(bit2:0-000)
	HAL_Delay(50);
 8002278:	2032      	movs	r0, #50	; 0x32
 800227a:	f003 fe97 	bl	8005fac <HAL_Delay>
	
	// set sample rate to 1000Hz and apply a software filter
	ICM20602_Writebyte(SMPLRT_DIV, 0x00);
 800227e:	2100      	movs	r1, #0
 8002280:	2019      	movs	r0, #25
 8002282:	f7ff ff91 	bl	80021a8 <ICM20602_Writebyte>
	HAL_Delay(50);
 8002286:	2032      	movs	r0, #50	; 0x32
 8002288:	f003 fe90 	bl	8005fac <HAL_Delay>
	
	// Gyro DLPF Config
	//ICM20602_Writebyte(CONFIG, 0x00); // Gyro LPF fc 250Hz(bit2:0-000)
	ICM20602_Writebyte(CONFIG, 0x05); // Gyro LPF fc 20Hz(bit2:0-100) at 1kHz sample rate
 800228c:	2105      	movs	r1, #5
 800228e:	201a      	movs	r0, #26
 8002290:	f7ff ff8a 	bl	80021a8 <ICM20602_Writebyte>
	HAL_Delay(50);
 8002294:	2032      	movs	r0, #50	; 0x32
 8002296:	f003 fe89 	bl	8005fac <HAL_Delay>

	// GYRO_CONFIG 0x1B
	ICM20602_Writebyte(GYRO_CONFIG, 0x18); // Gyro sensitivity 2000 dps(bit4:3-11), FCHOICE (bit1:0-00)
 800229a:	2118      	movs	r1, #24
 800229c:	201b      	movs	r0, #27
 800229e:	f7ff ff83 	bl	80021a8 <ICM20602_Writebyte>
	HAL_Delay(50);
 80022a2:	2032      	movs	r0, #50	; 0x32
 80022a4:	f003 fe82 	bl	8005fac <HAL_Delay>

	// ACCEL_CONFIG 0x1C
	ICM20602_Writebyte(ACCEL_CONFIG, 0x18); // Acc sensitivity 16g
 80022a8:	2118      	movs	r1, #24
 80022aa:	201c      	movs	r0, #28
 80022ac:	f7ff ff7c 	bl	80021a8 <ICM20602_Writebyte>
	HAL_Delay(50);
 80022b0:	2032      	movs	r0, #50	; 0x32
 80022b2:	f003 fe7b 	bl	8005fac <HAL_Delay>
	
	// ACCEL_CONFIG2 0x1D
	ICM20602_Writebyte(ACCEL_CONFIG2, 0x03); // Acc FCHOICE 1kHz(bit3-0), DLPF fc 44.8Hz(bit2:0-011)
 80022b6:	2103      	movs	r1, #3
 80022b8:	201d      	movs	r0, #29
 80022ba:	f7ff ff75 	bl	80021a8 <ICM20602_Writebyte>
	HAL_Delay(50);
 80022be:	2032      	movs	r0, #50	; 0x32
 80022c0:	f003 fe74 	bl	8005fac <HAL_Delay>
	
	// Enable Interrupts when data is ready
	ICM20602_Writebyte(INT_ENABLE, 0x01); // Enable DRDY Interrupt
 80022c4:	2101      	movs	r1, #1
 80022c6:	2038      	movs	r0, #56	; 0x38
 80022c8:	f7ff ff6e 	bl	80021a8 <ICM20602_Writebyte>
	HAL_Delay(50);
 80022cc:	2032      	movs	r0, #50	; 0x32
 80022ce:	f003 fe6d 	bl	8005fac <HAL_Delay>
//	
//	// Remove Gyro Z offset
//	ICM20602_Writebyte( ZG_OFFS_USRH, offset_z>>8 );	// gyro z offset high byte
//	ICM20602_Writebyte( ZG_OFFS_USRL, offset_z );	// gyro z offset low byte

	return 0; //OK
 80022d2:	2300      	movs	r3, #0
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3710      	adds	r7, #16
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	0800e434 	.word	0x0800e434
 80022e0:	0800e44c 	.word	0x0800e44c
 80022e4:	0800e470 	.word	0x0800e470

080022e8 <ICM20602_Get3AxisGyroRawData>:
	gyro[1] = ((data[10] << 8) | data[11]);
	gyro[2] = ((data[12] << 8) | data[13]);
}

void ICM20602_Get3AxisGyroRawData(short* gyro)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
	unsigned char data[6];
	ICM20602_Readbytes(GYRO_XOUT_H, 6, data);
 80022f0:	f107 0308 	add.w	r3, r7, #8
 80022f4:	461a      	mov	r2, r3
 80022f6:	2106      	movs	r1, #6
 80022f8:	2043      	movs	r0, #67	; 0x43
 80022fa:	f7ff ff27 	bl	800214c <ICM20602_Readbytes>
	
	gyro[0] = ((data[0] << 8) | data[1]);
 80022fe:	7a3b      	ldrb	r3, [r7, #8]
 8002300:	021b      	lsls	r3, r3, #8
 8002302:	b21a      	sxth	r2, r3
 8002304:	7a7b      	ldrb	r3, [r7, #9]
 8002306:	b21b      	sxth	r3, r3
 8002308:	4313      	orrs	r3, r2
 800230a:	b21a      	sxth	r2, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	801a      	strh	r2, [r3, #0]
	gyro[1] = ((data[2] << 8) | data[3]);
 8002310:	7abb      	ldrb	r3, [r7, #10]
 8002312:	021b      	lsls	r3, r3, #8
 8002314:	b219      	sxth	r1, r3
 8002316:	7afb      	ldrb	r3, [r7, #11]
 8002318:	b21a      	sxth	r2, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	3302      	adds	r3, #2
 800231e:	430a      	orrs	r2, r1
 8002320:	b212      	sxth	r2, r2
 8002322:	801a      	strh	r2, [r3, #0]
	gyro[2] = ((data[4] << 8) | data[5]);
 8002324:	7b3b      	ldrb	r3, [r7, #12]
 8002326:	021b      	lsls	r3, r3, #8
 8002328:	b219      	sxth	r1, r3
 800232a:	7b7b      	ldrb	r3, [r7, #13]
 800232c:	b21a      	sxth	r2, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	3304      	adds	r3, #4
 8002332:	430a      	orrs	r2, r1
 8002334:	b212      	sxth	r2, r2
 8002336:	801a      	strh	r2, [r3, #0]
}
 8002338:	bf00      	nop
 800233a:	3710      	adds	r7, #16
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <ICM20602_DataReady>:
	accel[1] = ((data[2] << 8) | data[3]);
	accel[2] = ((data[4] << 8) | data[5]);
}

int ICM20602_DataReady(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
	return LL_GPIO_IsInputPinSet(ICM20602_INT_PORT, ICM20602_INT_PIN);
 8002344:	2120      	movs	r1, #32
 8002346:	4803      	ldr	r0, [pc, #12]	; (8002354 <ICM20602_DataReady+0x14>)
 8002348:	f7ff fde0 	bl	8001f0c <LL_GPIO_IsInputPinSet>
 800234c:	4603      	mov	r3, r0
}
 800234e:	4618      	mov	r0, r3
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	40020800 	.word	0x40020800

08002358 <LL_SPI_Enable>:
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	601a      	str	r2, [r3, #0]
}
 800236c:	bf00      	nop
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <LL_SPI_SetStandard>:
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f023 0210 	bic.w	r2, r3, #16
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	431a      	orrs	r2, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	605a      	str	r2, [r3, #4]
}
 8002392:	bf00      	nop
 8002394:	370c      	adds	r7, #12
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr

0800239e <LL_SPI_IsActiveFlag_RXNE>:
{
 800239e:	b480      	push	{r7}
 80023a0:	b083      	sub	sp, #12
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	f003 0301 	and.w	r3, r3, #1
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d101      	bne.n	80023b6 <LL_SPI_IsActiveFlag_RXNE+0x18>
 80023b2:	2301      	movs	r3, #1
 80023b4:	e000      	b.n	80023b8 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 80023b6:	2300      	movs	r3, #0
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <LL_SPI_IsActiveFlag_TXE>:
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	f003 0302 	and.w	r3, r3, #2
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d101      	bne.n	80023dc <LL_SPI_IsActiveFlag_TXE+0x18>
 80023d8:	2301      	movs	r3, #1
 80023da:	e000      	b.n	80023de <LL_SPI_IsActiveFlag_TXE+0x1a>
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr

080023ea <LL_SPI_ReceiveData8>:
{
 80023ea:	b480      	push	{r7}
 80023ec:	b083      	sub	sp, #12
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_REG(SPIx->DR));
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	b2db      	uxtb	r3, r3
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <LL_SPI_TransmitData8>:
{
 8002404:	b480      	push	{r7}
 8002406:	b085      	sub	sp, #20
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	460b      	mov	r3, r1
 800240e:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	330c      	adds	r3, #12
 8002414:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	78fa      	ldrb	r2, [r7, #3]
 800241a:	701a      	strb	r2, [r3, #0]
}
 800241c:	bf00      	nop
 800241e:	3714      	adds	r7, #20
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <LL_GPIO_IsInputPinSet>:
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	691a      	ldr	r2, [r3, #16]
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	4013      	ands	r3, r2
 800243a:	683a      	ldr	r2, [r7, #0]
 800243c:	429a      	cmp	r2, r3
 800243e:	bf0c      	ite	eq
 8002440:	2301      	moveq	r3, #1
 8002442:	2300      	movne	r3, #0
 8002444:	b2db      	uxtb	r3, r3
}
 8002446:	4618      	mov	r0, r3
 8002448:	370c      	adds	r7, #12
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr

08002452 <LL_GPIO_SetOutputPin>:
{
 8002452:	b480      	push	{r7}
 8002454:	b083      	sub	sp, #12
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
 800245a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	683a      	ldr	r2, [r7, #0]
 8002460:	619a      	str	r2, [r3, #24]
}
 8002462:	bf00      	nop
 8002464:	370c      	adds	r7, #12
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr

0800246e <LL_GPIO_ResetOutputPin>:
{
 800246e:	b480      	push	{r7}
 8002470:	b083      	sub	sp, #12
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
 8002476:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	041a      	lsls	r2, r3, #16
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	619a      	str	r2, [r3, #24]
}
 8002480:	bf00      	nop
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <LL_AHB1_GRP1_EnableClock>:
{
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002494:	4b08      	ldr	r3, [pc, #32]	; (80024b8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002496:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002498:	4907      	ldr	r1, [pc, #28]	; (80024b8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4313      	orrs	r3, r2
 800249e:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80024a0:	4b05      	ldr	r3, [pc, #20]	; (80024b8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80024a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	4013      	ands	r3, r2
 80024a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80024aa:	68fb      	ldr	r3, [r7, #12]
}
 80024ac:	bf00      	nop
 80024ae:	3714      	adds	r7, #20
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr
 80024b8:	40023800 	.word	0x40023800

080024bc <LL_APB1_GRP1_EnableClock>:
{
 80024bc:	b480      	push	{r7}
 80024be:	b085      	sub	sp, #20
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80024c4:	4b08      	ldr	r3, [pc, #32]	; (80024e8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80024c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024c8:	4907      	ldr	r1, [pc, #28]	; (80024e8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80024d0:	4b05      	ldr	r3, [pc, #20]	; (80024e8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80024d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	4013      	ands	r3, r2
 80024d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80024da:	68fb      	ldr	r3, [r7, #12]
}
 80024dc:	bf00      	nop
 80024de:	3714      	adds	r7, #20
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr
 80024e8:	40023800 	.word	0x40023800

080024ec <LPS22HH_GPIO_SPI_Initialization>:

Struct_LPS22HH LPS22HH;


void LPS22HH_GPIO_SPI_Initialization(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b090      	sub	sp, #64	; 0x40
 80024f0:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80024f2:	f107 0318 	add.w	r3, r7, #24
 80024f6:	2228      	movs	r2, #40	; 0x28
 80024f8:	2100      	movs	r1, #0
 80024fa:	4618      	mov	r0, r3
 80024fc:	f008 fbd0 	bl	800aca0 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002500:	463b      	mov	r3, r7
 8002502:	2200      	movs	r2, #0
 8002504:	601a      	str	r2, [r3, #0]
 8002506:	605a      	str	r2, [r3, #4]
 8002508:	609a      	str	r2, [r3, #8]
 800250a:	60da      	str	r2, [r3, #12]
 800250c:	611a      	str	r2, [r3, #16]
 800250e:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 8002510:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002514:	f7ff ffd2 	bl	80024bc <LL_APB1_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002518:	2002      	movs	r0, #2
 800251a:	f7ff ffb7 	bl	800248c <LL_AHB1_GRP1_EnableClock>
	/**SPI3 GPIO Configuration
	PB3   ------> SPI3_SCK
	PB4   ------> SPI3_MISO
	PB5   ------> SPI3_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 800251e:	2338      	movs	r3, #56	; 0x38
 8002520:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002522:	2302      	movs	r3, #2
 8002524:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002526:	2303      	movs	r3, #3
 8002528:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800252a:	2300      	movs	r3, #0
 800252c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800252e:	2300      	movs	r3, #0
 8002530:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8002532:	2306      	movs	r3, #6
 8002534:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002536:	463b      	mov	r3, r7
 8002538:	4619      	mov	r1, r3
 800253a:	4826      	ldr	r0, [pc, #152]	; (80025d4 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 800253c:	f007 fc1b 	bl	8009d76 <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8002540:	2300      	movs	r3, #0
 8002542:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8002544:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002548:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800254a:	2300      	movs	r3, #0
 800254c:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 800254e:	2302      	movs	r3, #2
 8002550:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8002552:	2301      	movs	r3, #1
 8002554:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8002556:	f44f 7300 	mov.w	r3, #512	; 0x200
 800255a:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 800255c:	2308      	movs	r3, #8
 800255e:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8002560:	2300      	movs	r3, #0
 8002562:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8002564:	2300      	movs	r3, #0
 8002566:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 8002568:	230a      	movs	r3, #10
 800256a:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(LPS22HH_SPI_CHANNEL, &SPI_InitStruct);
 800256c:	f107 0318 	add.w	r3, r7, #24
 8002570:	4619      	mov	r1, r3
 8002572:	4819      	ldr	r0, [pc, #100]	; (80025d8 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 8002574:	f007 fdcd 	bl	800a112 <LL_SPI_Init>
	LL_SPI_SetStandard(LPS22HH_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 8002578:	2100      	movs	r1, #0
 800257a:	4817      	ldr	r0, [pc, #92]	; (80025d8 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 800257c:	f7ff fefc 	bl	8002378 <LL_SPI_SetStandard>
	/**LPS22HH GPIO Control Configuration
	 * PB6  ------> LPS22HH_SPI_CS_PIN (output)
	 * PB7  ------> LPS22HH_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(LPS22HH_SPI_CS_PORT, LPS22HH_SPI_CS_PIN);
 8002580:	2140      	movs	r1, #64	; 0x40
 8002582:	4814      	ldr	r0, [pc, #80]	; (80025d4 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8002584:	f7ff ff73 	bl	800246e <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = LPS22HH_SPI_CS_PIN;
 8002588:	2340      	movs	r3, #64	; 0x40
 800258a:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800258c:	2301      	movs	r3, #1
 800258e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002590:	2303      	movs	r3, #3
 8002592:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002594:	2300      	movs	r3, #0
 8002596:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002598:	2300      	movs	r3, #0
 800259a:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(LPS22HH_SPI_CS_PORT, &GPIO_InitStruct);
 800259c:	463b      	mov	r3, r7
 800259e:	4619      	mov	r1, r3
 80025a0:	480c      	ldr	r0, [pc, #48]	; (80025d4 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 80025a2:	f007 fbe8 	bl	8009d76 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = LPS22HH_INT_PIN;
 80025a6:	2380      	movs	r3, #128	; 0x80
 80025a8:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80025aa:	2300      	movs	r3, #0
 80025ac:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80025ae:	2301      	movs	r3, #1
 80025b0:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(LPS22HH_INT_PORT, &GPIO_InitStruct);
 80025b2:	463b      	mov	r3, r7
 80025b4:	4619      	mov	r1, r3
 80025b6:	4807      	ldr	r0, [pc, #28]	; (80025d4 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 80025b8:	f007 fbdd 	bl	8009d76 <LL_GPIO_Init>
	
	LL_SPI_Enable(LPS22HH_SPI_CHANNEL);
 80025bc:	4806      	ldr	r0, [pc, #24]	; (80025d8 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 80025be:	f7ff fecb 	bl	8002358 <LL_SPI_Enable>
	
	CHIP_DESELECT(LPS22HH);
 80025c2:	2140      	movs	r1, #64	; 0x40
 80025c4:	4803      	ldr	r0, [pc, #12]	; (80025d4 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 80025c6:	f7ff ff44 	bl	8002452 <LL_GPIO_SetOutputPin>
}
 80025ca:	bf00      	nop
 80025cc:	3740      	adds	r7, #64	; 0x40
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	40020400 	.word	0x40020400
 80025d8:	40003c00 	.word	0x40003c00

080025dc <SPI3_SendByte>:


unsigned char SPI3_SendByte(unsigned char data)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	4603      	mov	r3, r0
 80025e4:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(LPS22HH_SPI_CHANNEL)==RESET);
 80025e6:	bf00      	nop
 80025e8:	480c      	ldr	r0, [pc, #48]	; (800261c <SPI3_SendByte+0x40>)
 80025ea:	f7ff feeb 	bl	80023c4 <LL_SPI_IsActiveFlag_TXE>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d0f9      	beq.n	80025e8 <SPI3_SendByte+0xc>
	LL_SPI_TransmitData8(LPS22HH_SPI_CHANNEL, data);
 80025f4:	79fb      	ldrb	r3, [r7, #7]
 80025f6:	4619      	mov	r1, r3
 80025f8:	4808      	ldr	r0, [pc, #32]	; (800261c <SPI3_SendByte+0x40>)
 80025fa:	f7ff ff03 	bl	8002404 <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(LPS22HH_SPI_CHANNEL)==RESET);
 80025fe:	bf00      	nop
 8002600:	4806      	ldr	r0, [pc, #24]	; (800261c <SPI3_SendByte+0x40>)
 8002602:	f7ff fecc 	bl	800239e <LL_SPI_IsActiveFlag_RXNE>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0f9      	beq.n	8002600 <SPI3_SendByte+0x24>
	return LL_SPI_ReceiveData8(LPS22HH_SPI_CHANNEL);
 800260c:	4803      	ldr	r0, [pc, #12]	; (800261c <SPI3_SendByte+0x40>)
 800260e:	f7ff feec 	bl	80023ea <LL_SPI_ReceiveData8>
 8002612:	4603      	mov	r3, r0
}
 8002614:	4618      	mov	r0, r3
 8002616:	3708      	adds	r7, #8
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	40003c00 	.word	0x40003c00

08002620 <LPS22HH_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t LPS22HH_Readbyte(uint8_t reg_addr)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
 8002626:	4603      	mov	r3, r0
 8002628:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(LPS22HH);
 800262a:	2140      	movs	r1, #64	; 0x40
 800262c:	480b      	ldr	r0, [pc, #44]	; (800265c <LPS22HH_Readbyte+0x3c>)
 800262e:	f7ff ff1e 	bl	800246e <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8002632:	79fb      	ldrb	r3, [r7, #7]
 8002634:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002638:	b2db      	uxtb	r3, r3
 800263a:	4618      	mov	r0, r3
 800263c:	f7ff ffce 	bl	80025dc <SPI3_SendByte>
	val = SPI3_SendByte(0x00); //Send DUMMY
 8002640:	2000      	movs	r0, #0
 8002642:	f7ff ffcb 	bl	80025dc <SPI3_SendByte>
 8002646:	4603      	mov	r3, r0
 8002648:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(LPS22HH);
 800264a:	2140      	movs	r1, #64	; 0x40
 800264c:	4803      	ldr	r0, [pc, #12]	; (800265c <LPS22HH_Readbyte+0x3c>)
 800264e:	f7ff ff00 	bl	8002452 <LL_GPIO_SetOutputPin>
	
	return val;
 8002652:	7bfb      	ldrb	r3, [r7, #15]
}
 8002654:	4618      	mov	r0, r3
 8002656:	3710      	adds	r7, #16
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	40020400 	.word	0x40020400

08002660 <LPS22HH_Readbytes>:

void LPS22HH_Readbytes(unsigned char reg_addr, unsigned char len, unsigned char* data)
{
 8002660:	b590      	push	{r4, r7, lr}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	4603      	mov	r3, r0
 8002668:	603a      	str	r2, [r7, #0]
 800266a:	71fb      	strb	r3, [r7, #7]
 800266c:	460b      	mov	r3, r1
 800266e:	71bb      	strb	r3, [r7, #6]
	unsigned int i = 0;
 8002670:	2300      	movs	r3, #0
 8002672:	60fb      	str	r3, [r7, #12]

	CHIP_SELECT(LPS22HH);
 8002674:	2140      	movs	r1, #64	; 0x40
 8002676:	4810      	ldr	r0, [pc, #64]	; (80026b8 <LPS22HH_Readbytes+0x58>)
 8002678:	f7ff fef9 	bl	800246e <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 800267c:	79fb      	ldrb	r3, [r7, #7]
 800267e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002682:	b2db      	uxtb	r3, r3
 8002684:	4618      	mov	r0, r3
 8002686:	f7ff ffa9 	bl	80025dc <SPI3_SendByte>
	while(i < len)
 800268a:	e009      	b.n	80026a0 <LPS22HH_Readbytes+0x40>
	{
		data[i++] = SPI3_SendByte(0x00); //Send DUMMY
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	1c5a      	adds	r2, r3, #1
 8002690:	60fa      	str	r2, [r7, #12]
 8002692:	683a      	ldr	r2, [r7, #0]
 8002694:	18d4      	adds	r4, r2, r3
 8002696:	2000      	movs	r0, #0
 8002698:	f7ff ffa0 	bl	80025dc <SPI3_SendByte>
 800269c:	4603      	mov	r3, r0
 800269e:	7023      	strb	r3, [r4, #0]
	while(i < len)
 80026a0:	79bb      	ldrb	r3, [r7, #6]
 80026a2:	68fa      	ldr	r2, [r7, #12]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d3f1      	bcc.n	800268c <LPS22HH_Readbytes+0x2c>
	}
	CHIP_DESELECT(LPS22HH);
 80026a8:	2140      	movs	r1, #64	; 0x40
 80026aa:	4803      	ldr	r0, [pc, #12]	; (80026b8 <LPS22HH_Readbytes+0x58>)
 80026ac:	f7ff fed1 	bl	8002452 <LL_GPIO_SetOutputPin>
}
 80026b0:	bf00      	nop
 80026b2:	3714      	adds	r7, #20
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd90      	pop	{r4, r7, pc}
 80026b8:	40020400 	.word	0x40020400

080026bc <LPS22HH_Writebyte>:

void LPS22HH_Writebyte(uint8_t reg_addr, uint8_t val)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	4603      	mov	r3, r0
 80026c4:	460a      	mov	r2, r1
 80026c6:	71fb      	strb	r3, [r7, #7]
 80026c8:	4613      	mov	r3, r2
 80026ca:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(LPS22HH);
 80026cc:	2140      	movs	r1, #64	; 0x40
 80026ce:	480b      	ldr	r0, [pc, #44]	; (80026fc <LPS22HH_Writebyte+0x40>)
 80026d0:	f7ff fecd 	bl	800246e <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 80026d4:	79fb      	ldrb	r3, [r7, #7]
 80026d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	4618      	mov	r0, r3
 80026de:	f7ff ff7d 	bl	80025dc <SPI3_SendByte>
	SPI3_SendByte(val); //Data
 80026e2:	79bb      	ldrb	r3, [r7, #6]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7ff ff79 	bl	80025dc <SPI3_SendByte>
	CHIP_DESELECT(LPS22HH);
 80026ea:	2140      	movs	r1, #64	; 0x40
 80026ec:	4803      	ldr	r0, [pc, #12]	; (80026fc <LPS22HH_Writebyte+0x40>)
 80026ee:	f7ff feb0 	bl	8002452 <LL_GPIO_SetOutputPin>
}
 80026f2:	bf00      	nop
 80026f4:	3708      	adds	r7, #8
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	40020400 	.word	0x40020400

08002700 <LPS22HH_Initialization>:




int LPS22HH_Initialization(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
	uint8_t temp_reg;
	uint8_t who_am_i = 0;
 8002706:	2300      	movs	r3, #0
 8002708:	71fb      	strb	r3, [r7, #7]
	
	LPS22HH_GPIO_SPI_Initialization();
 800270a:	f7ff feef 	bl	80024ec <LPS22HH_GPIO_SPI_Initialization>
	
	printf("Checking LPS22HH...");
 800270e:	4841      	ldr	r0, [pc, #260]	; (8002814 <LPS22HH_Initialization+0x114>)
 8002710:	f008 ff2a 	bl	800b568 <iprintf>
	
	// check WHO_AM_I (0x0F)
	who_am_i = LPS22HH_Readbyte(0x0F); 
 8002714:	200f      	movs	r0, #15
 8002716:	f7ff ff83 	bl	8002620 <LPS22HH_Readbyte>
 800271a:	4603      	mov	r3, r0
 800271c:	71fb      	strb	r3, [r7, #7]

	// who am i = 0xb3
	if( who_am_i == 0xb3)
 800271e:	79fb      	ldrb	r3, [r7, #7]
 8002720:	2bb3      	cmp	r3, #179	; 0xb3
 8002722:	d105      	bne.n	8002730 <LPS22HH_Initialization+0x30>
	{
		printf("\nLPS22HH who_am_i = 0x%02x...OK\n\n", who_am_i );
 8002724:	79fb      	ldrb	r3, [r7, #7]
 8002726:	4619      	mov	r1, r3
 8002728:	483b      	ldr	r0, [pc, #236]	; (8002818 <LPS22HH_Initialization+0x118>)
 800272a:	f008 ff1d 	bl	800b568 <iprintf>
 800272e:	e012      	b.n	8002756 <LPS22HH_Initialization+0x56>
	}
	// recheck
	else if( who_am_i != 0xb3)
 8002730:	79fb      	ldrb	r3, [r7, #7]
 8002732:	2bb3      	cmp	r3, #179	; 0xb3
 8002734:	d00f      	beq.n	8002756 <LPS22HH_Initialization+0x56>
	{
		who_am_i = LPS22HH_Readbyte(0x0F); // check WHO_AM_I (0x0F)
 8002736:	200f      	movs	r0, #15
 8002738:	f7ff ff72 	bl	8002620 <LPS22HH_Readbyte>
 800273c:	4603      	mov	r3, r0
 800273e:	71fb      	strb	r3, [r7, #7]

		if ( who_am_i != 0xb3 ){
 8002740:	79fb      	ldrb	r3, [r7, #7]
 8002742:	2bb3      	cmp	r3, #179	; 0xb3
 8002744:	d007      	beq.n	8002756 <LPS22HH_Initialization+0x56>
			printf( "nLPS22HH Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0xb3);
 8002746:	79fb      	ldrb	r3, [r7, #7]
 8002748:	22b3      	movs	r2, #179	; 0xb3
 800274a:	4619      	mov	r1, r3
 800274c:	4833      	ldr	r0, [pc, #204]	; (800281c <LPS22HH_Initialization+0x11c>)
 800274e:	f008 ff0b 	bl	800b568 <iprintf>
			return 1; //ERROR
 8002752:	2301      	movs	r3, #1
 8002754:	e059      	b.n	800280a <LPS22HH_Initialization+0x10a>
		}
	}
	
	// Reset LPS22HH
	// CTRL_REG2 0x11
	LPS22HH_Writebyte(CTRL_REG2, 0x04);
 8002756:	2104      	movs	r1, #4
 8002758:	2011      	movs	r0, #17
 800275a:	f7ff ffaf 	bl	80026bc <LPS22HH_Writebyte>
	//printf("LPS22HH Reset");
	do{
		//printf(".");
	}
	while((LPS22HH_Readbyte(CTRL_REG2) & 0x04) != 0x00);
 800275e:	2011      	movs	r0, #17
 8002760:	f7ff ff5e 	bl	8002620 <LPS22HH_Readbyte>
 8002764:	4603      	mov	r3, r0
 8002766:	f003 0304 	and.w	r3, r3, #4
 800276a:	2b00      	cmp	r3, #0
 800276c:	d1f7      	bne.n	800275e <LPS22HH_Initialization+0x5e>
	
	// Set Output Data Rate
	//0x00: One Shot
	//0x10: 1Hz	0x20: 10Hz	0x30: 25Hz	0x40: 50Hz
	//0x50: 75Hz	0x60: 100Hz	0x70: 200Hz
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 800276e:	2010      	movs	r0, #16
 8002770:	f7ff ff56 	bl	8002620 <LPS22HH_Readbyte>
 8002774:	4603      	mov	r3, r0
 8002776:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x40;
 8002778:	79bb      	ldrb	r3, [r7, #6]
 800277a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800277e:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 8002780:	79bb      	ldrb	r3, [r7, #6]
 8002782:	4619      	mov	r1, r3
 8002784:	2010      	movs	r0, #16
 8002786:	f7ff ff99 	bl	80026bc <LPS22HH_Writebyte>
	temp_reg = 0;
 800278a:	2300      	movs	r3, #0
 800278c:	71bb      	strb	r3, [r7, #6]
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 800278e:	2010      	movs	r0, #16
 8002790:	f7ff ff46 	bl	8002620 <LPS22HH_Readbyte>
 8002794:	4603      	mov	r3, r0
 8002796:	71bb      	strb	r3, [r7, #6]
	//printf("%x\n", temp_reg);
	
	// Enable LPF, Cut-off frequency
	//0x08: ODR/9	0x0c: ODR/20
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8002798:	2010      	movs	r0, #16
 800279a:	f7ff ff41 	bl	8002620 <LPS22HH_Readbyte>
 800279e:	4603      	mov	r3, r0
 80027a0:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x0c;
 80027a2:	79bb      	ldrb	r3, [r7, #6]
 80027a4:	f043 030c 	orr.w	r3, r3, #12
 80027a8:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 80027aa:	79bb      	ldrb	r3, [r7, #6]
 80027ac:	4619      	mov	r1, r3
 80027ae:	2010      	movs	r0, #16
 80027b0:	f7ff ff84 	bl	80026bc <LPS22HH_Writebyte>
	
	// Enable Block Data Update
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 80027b4:	2010      	movs	r0, #16
 80027b6:	f7ff ff33 	bl	8002620 <LPS22HH_Readbyte>
 80027ba:	4603      	mov	r3, r0
 80027bc:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x02;
 80027be:	79bb      	ldrb	r3, [r7, #6]
 80027c0:	f043 0302 	orr.w	r3, r3, #2
 80027c4:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 80027c6:	79bb      	ldrb	r3, [r7, #6]
 80027c8:	4619      	mov	r1, r3
 80027ca:	2010      	movs	r0, #16
 80027cc:	f7ff ff76 	bl	80026bc <LPS22HH_Writebyte>
	
	// Enable Low Noise Mode (ODR should be lower than 100Hz. This is igonored when ODR = 100Hz or 200Hz)
	temp_reg = LPS22HH_Readbyte(CTRL_REG2);
 80027d0:	2011      	movs	r0, #17
 80027d2:	f7ff ff25 	bl	8002620 <LPS22HH_Readbyte>
 80027d6:	4603      	mov	r3, r0
 80027d8:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x02;
 80027da:	79bb      	ldrb	r3, [r7, #6]
 80027dc:	f043 0302 	orr.w	r3, r3, #2
 80027e0:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG2, temp_reg);
 80027e2:	79bb      	ldrb	r3, [r7, #6]
 80027e4:	4619      	mov	r1, r3
 80027e6:	2011      	movs	r0, #17
 80027e8:	f7ff ff68 	bl	80026bc <LPS22HH_Writebyte>
	
	// Enable Data-ready signal on INT-DRDY pin
	temp_reg = LPS22HH_Readbyte(CTRL_REG3);
 80027ec:	2012      	movs	r0, #18
 80027ee:	f7ff ff17 	bl	8002620 <LPS22HH_Readbyte>
 80027f2:	4603      	mov	r3, r0
 80027f4:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x04;
 80027f6:	79bb      	ldrb	r3, [r7, #6]
 80027f8:	f043 0304 	orr.w	r3, r3, #4
 80027fc:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG3, temp_reg);
 80027fe:	79bb      	ldrb	r3, [r7, #6]
 8002800:	4619      	mov	r1, r3
 8002802:	2012      	movs	r0, #18
 8002804:	f7ff ff5a 	bl	80026bc <LPS22HH_Writebyte>
	
	return 0; //OK
 8002808:	2300      	movs	r3, #0
}
 800280a:	4618      	mov	r0, r3
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	0800e49c 	.word	0x0800e49c
 8002818:	0800e4b0 	.word	0x0800e4b0
 800281c:	0800e4d4 	.word	0x0800e4d4

08002820 <LPS22HH_DataReady>:


int LPS22HH_DataReady(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	af00      	add	r7, sp, #0
	return LL_GPIO_IsInputPinSet(LPS22HH_INT_PORT, LPS22HH_INT_PIN);
 8002824:	2180      	movs	r1, #128	; 0x80
 8002826:	4803      	ldr	r0, [pc, #12]	; (8002834 <LPS22HH_DataReady+0x14>)
 8002828:	f7ff fdfe 	bl	8002428 <LL_GPIO_IsInputPinSet>
 800282c:	4603      	mov	r3, r0
}
 800282e:	4618      	mov	r0, r3
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	40020400 	.word	0x40020400

08002838 <LPS22HH_GetPressure>:

void LPS22HH_GetPressure(int32_t* pressure)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
	LPS22HH_Readbytes(PRESSURE_OUT_XL, 3, (unsigned char*)pressure);
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	2103      	movs	r1, #3
 8002844:	2028      	movs	r0, #40	; 0x28
 8002846:	f7ff ff0b 	bl	8002660 <LPS22HH_Readbytes>
}
 800284a:	bf00      	nop
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <LPS22HH_GetTemperature>:

void LPS22HH_GetTemperature(int16_t* temperature)
{
 8002852:	b580      	push	{r7, lr}
 8002854:	b082      	sub	sp, #8
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
	LPS22HH_Readbytes(TEMP_OUT_L, 2, (unsigned char*)temperature);
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	2102      	movs	r1, #2
 800285e:	202b      	movs	r0, #43	; 0x2b
 8002860:	f7ff fefe 	bl	8002660 <LPS22HH_Readbytes>
}
 8002864:	bf00      	nop
 8002866:	3708      	adds	r7, #8
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}

0800286c <getAltitude2>:
{
	return (1.0f - powf((pressure / SEA_PRESSURE), 0.1902226f)) * 44307.69396f; //145366.45f * 0.3048f = 44307.69396f;
}

float getAltitude2(float pressure, float temperature) //Get Altitude with temperature correction.
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
 8002872:	ed87 0a01 	vstr	s0, [r7, #4]
 8002876:	edc7 0a00 	vstr	s1, [r7]
	return (1.0f - powf((pressure / SEA_PRESSURE), 0.1902226f)) * (temperature + 273.15f) / 0.0065f;
 800287a:	edd7 7a01 	vldr	s15, [r7, #4]
 800287e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80028c4 <getAltitude2+0x58>
 8002882:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002886:	eddf 0a10 	vldr	s1, [pc, #64]	; 80028c8 <getAltitude2+0x5c>
 800288a:	eeb0 0a66 	vmov.f32	s0, s13
 800288e:	f00a fdf3 	bl	800d478 <powf>
 8002892:	eeb0 7a40 	vmov.f32	s14, s0
 8002896:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800289a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800289e:	edd7 7a00 	vldr	s15, [r7]
 80028a2:	eddf 6a0a 	vldr	s13, [pc, #40]	; 80028cc <getAltitude2+0x60>
 80028a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80028aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028ae:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80028d0 <getAltitude2+0x64>
 80028b2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80028b6:	eef0 7a66 	vmov.f32	s15, s13
}
 80028ba:	eeb0 0a67 	vmov.f32	s0, s15
 80028be:	3708      	adds	r7, #8
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	447d5000 	.word	0x447d5000
 80028c8:	3e42c9b7 	.word	0x3e42c9b7
 80028cc:	43889333 	.word	0x43889333
 80028d0:	3bd4fdf4 	.word	0x3bd4fdf4

080028d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028d8:	4b04      	ldr	r3, [pc, #16]	; (80028ec <__NVIC_GetPriorityGrouping+0x18>)
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	0a1b      	lsrs	r3, r3, #8
 80028de:	f003 0307 	and.w	r3, r3, #7
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr
 80028ec:	e000ed00 	.word	0xe000ed00

080028f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	4603      	mov	r3, r0
 80028f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	db0b      	blt.n	800291a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002902:	79fb      	ldrb	r3, [r7, #7]
 8002904:	f003 021f 	and.w	r2, r3, #31
 8002908:	4907      	ldr	r1, [pc, #28]	; (8002928 <__NVIC_EnableIRQ+0x38>)
 800290a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800290e:	095b      	lsrs	r3, r3, #5
 8002910:	2001      	movs	r0, #1
 8002912:	fa00 f202 	lsl.w	r2, r0, r2
 8002916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800291a:	bf00      	nop
 800291c:	370c      	adds	r7, #12
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	e000e100 	.word	0xe000e100

0800292c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	4603      	mov	r3, r0
 8002934:	6039      	str	r1, [r7, #0]
 8002936:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800293c:	2b00      	cmp	r3, #0
 800293e:	db0a      	blt.n	8002956 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	b2da      	uxtb	r2, r3
 8002944:	490c      	ldr	r1, [pc, #48]	; (8002978 <__NVIC_SetPriority+0x4c>)
 8002946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800294a:	0112      	lsls	r2, r2, #4
 800294c:	b2d2      	uxtb	r2, r2
 800294e:	440b      	add	r3, r1
 8002950:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002954:	e00a      	b.n	800296c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	b2da      	uxtb	r2, r3
 800295a:	4908      	ldr	r1, [pc, #32]	; (800297c <__NVIC_SetPriority+0x50>)
 800295c:	79fb      	ldrb	r3, [r7, #7]
 800295e:	f003 030f 	and.w	r3, r3, #15
 8002962:	3b04      	subs	r3, #4
 8002964:	0112      	lsls	r2, r2, #4
 8002966:	b2d2      	uxtb	r2, r2
 8002968:	440b      	add	r3, r1
 800296a:	761a      	strb	r2, [r3, #24]
}
 800296c:	bf00      	nop
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr
 8002978:	e000e100 	.word	0xe000e100
 800297c:	e000ed00 	.word	0xe000ed00

08002980 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002980:	b480      	push	{r7}
 8002982:	b089      	sub	sp, #36	; 0x24
 8002984:	af00      	add	r7, sp, #0
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f003 0307 	and.w	r3, r3, #7
 8002992:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	f1c3 0307 	rsb	r3, r3, #7
 800299a:	2b04      	cmp	r3, #4
 800299c:	bf28      	it	cs
 800299e:	2304      	movcs	r3, #4
 80029a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	3304      	adds	r3, #4
 80029a6:	2b06      	cmp	r3, #6
 80029a8:	d902      	bls.n	80029b0 <NVIC_EncodePriority+0x30>
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	3b03      	subs	r3, #3
 80029ae:	e000      	b.n	80029b2 <NVIC_EncodePriority+0x32>
 80029b0:	2300      	movs	r3, #0
 80029b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	fa02 f303 	lsl.w	r3, r2, r3
 80029be:	43da      	mvns	r2, r3
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	401a      	ands	r2, r3
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	fa01 f303 	lsl.w	r3, r1, r3
 80029d2:	43d9      	mvns	r1, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029d8:	4313      	orrs	r3, r2
         );
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3724      	adds	r7, #36	; 0x24
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr

080029e6 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80029e6:	b480      	push	{r7}
 80029e8:	b083      	sub	sp, #12
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	60da      	str	r2, [r3, #12]
}
 80029fa:	bf00      	nop
 80029fc:	370c      	adds	r7, #12
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr

08002a06 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8002a06:	b480      	push	{r7}
 8002a08:	b083      	sub	sp, #12
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	691b      	ldr	r3, [r3, #16]
 8002a12:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	695b      	ldr	r3, [r3, #20]
 8002a1e:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	615a      	str	r2, [r3, #20]
}
 8002a26:	bf00      	nop
 8002a28:	370c      	adds	r7, #12
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr

08002a32 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8002a32:	b480      	push	{r7}
 8002a34:	b083      	sub	sp, #12
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a42:	2b80      	cmp	r3, #128	; 0x80
 8002a44:	bf0c      	ite	eq
 8002a46:	2301      	moveq	r3, #1
 8002a48:	2300      	movne	r3, #0
 8002a4a:	b2db      	uxtb	r3, r3
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	370c      	adds	r7, #12
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	460b      	mov	r3, r1
 8002a62:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8002a64:	78fa      	ldrb	r2, [r7, #3]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	605a      	str	r2, [r3, #4]
}
 8002a6a:	bf00      	nop
 8002a6c:	370c      	adds	r7, #12
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
	...

08002a78 <LL_AHB1_GRP1_EnableClock>:
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b085      	sub	sp, #20
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002a80:	4b08      	ldr	r3, [pc, #32]	; (8002aa4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002a82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a84:	4907      	ldr	r1, [pc, #28]	; (8002aa4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002a8c:	4b05      	ldr	r3, [pc, #20]	; (8002aa4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002a8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	4013      	ands	r3, r2
 8002a94:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a96:	68fb      	ldr	r3, [r7, #12]
}
 8002a98:	bf00      	nop
 8002a9a:	3714      	adds	r7, #20
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr
 8002aa4:	40023800 	.word	0x40023800

08002aa8 <LL_APB1_GRP1_EnableClock>:
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b085      	sub	sp, #20
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002ab0:	4b08      	ldr	r3, [pc, #32]	; (8002ad4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002ab2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ab4:	4907      	ldr	r1, [pc, #28]	; (8002ad4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002abc:	4b05      	ldr	r3, [pc, #20]	; (8002ad4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002abe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
}
 8002ac8:	bf00      	nop
 8002aca:	3714      	adds	r7, #20
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr
 8002ad4:	40023800 	.word	0x40023800

08002ad8 <M8N_TransmitData>:
		0xB5, 0x62, 0x06, 0x09, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00,
		0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x31,
		0xBF
};

void M8N_TransmitData(unsigned char *data, unsigned char len) {
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	70fb      	strb	r3, [r7, #3]
	for (int i = 0; i < len; i++) {
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	60fb      	str	r3, [r7, #12]
 8002ae8:	e011      	b.n	8002b0e <M8N_TransmitData+0x36>
		while(!LL_USART_IsActiveFlag_TXE(UART4));
 8002aea:	bf00      	nop
 8002aec:	480c      	ldr	r0, [pc, #48]	; (8002b20 <M8N_TransmitData+0x48>)
 8002aee:	f7ff ffa0 	bl	8002a32 <LL_USART_IsActiveFlag_TXE>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d0f9      	beq.n	8002aec <M8N_TransmitData+0x14>
		LL_USART_TransmitData8(UART4, *(data + i));
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	4413      	add	r3, r2
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	4619      	mov	r1, r3
 8002b02:	4807      	ldr	r0, [pc, #28]	; (8002b20 <M8N_TransmitData+0x48>)
 8002b04:	f7ff ffa8 	bl	8002a58 <LL_USART_TransmitData8>
	for (int i = 0; i < len; i++) {
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	60fb      	str	r3, [r7, #12]
 8002b0e:	78fb      	ldrb	r3, [r7, #3]
 8002b10:	68fa      	ldr	r2, [r7, #12]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	dbe9      	blt.n	8002aea <M8N_TransmitData+0x12>
	}
}
 8002b16:	bf00      	nop
 8002b18:	3710      	adds	r7, #16
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	40004c00 	.word	0x40004c00

08002b24 <M8N_UART4_Initialization>:

void M8N_UART4_Initialization(void) {
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b08e      	sub	sp, #56	; 0x38
 8002b28:	af00      	add	r7, sp, #0
	  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002b2a:	f107 031c 	add.w	r3, r7, #28
 8002b2e:	2200      	movs	r2, #0
 8002b30:	601a      	str	r2, [r3, #0]
 8002b32:	605a      	str	r2, [r3, #4]
 8002b34:	609a      	str	r2, [r3, #8]
 8002b36:	60da      	str	r2, [r3, #12]
 8002b38:	611a      	str	r2, [r3, #16]
 8002b3a:	615a      	str	r2, [r3, #20]
 8002b3c:	619a      	str	r2, [r3, #24]

	  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b3e:	1d3b      	adds	r3, r7, #4
 8002b40:	2200      	movs	r2, #0
 8002b42:	601a      	str	r2, [r3, #0]
 8002b44:	605a      	str	r2, [r3, #4]
 8002b46:	609a      	str	r2, [r3, #8]
 8002b48:	60da      	str	r2, [r3, #12]
 8002b4a:	611a      	str	r2, [r3, #16]
 8002b4c:	615a      	str	r2, [r3, #20]

	  /* Peripheral clock enable */
	  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 8002b4e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002b52:	f7ff ffa9 	bl	8002aa8 <LL_APB1_GRP1_EnableClock>

	  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8002b56:	2004      	movs	r0, #4
 8002b58:	f7ff ff8e 	bl	8002a78 <LL_AHB1_GRP1_EnableClock>
	  /**UART4 GPIO Configuration
	  PC10   ------> UART4_TX
	  PC11   ------> UART4_RX
	  */
	  GPIO_InitStruct.Pin = M8N_TX4_Pin|M8N_RX4_Pin;
 8002b5c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002b60:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002b62:	2302      	movs	r3, #2
 8002b64:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002b66:	2303      	movs	r3, #3
 8002b68:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8002b72:	2308      	movs	r3, #8
 8002b74:	61bb      	str	r3, [r7, #24]
	  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b76:	1d3b      	adds	r3, r7, #4
 8002b78:	4619      	mov	r1, r3
 8002b7a:	4819      	ldr	r0, [pc, #100]	; (8002be0 <M8N_UART4_Initialization+0xbc>)
 8002b7c:	f007 f8fb 	bl	8009d76 <LL_GPIO_Init>

	  /* UART4 interrupt Init */
	  NVIC_SetPriority(UART4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002b80:	f7ff fea8 	bl	80028d4 <__NVIC_GetPriorityGrouping>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2200      	movs	r2, #0
 8002b88:	2100      	movs	r1, #0
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7ff fef8 	bl	8002980 <NVIC_EncodePriority>
 8002b90:	4603      	mov	r3, r0
 8002b92:	4619      	mov	r1, r3
 8002b94:	2034      	movs	r0, #52	; 0x34
 8002b96:	f7ff fec9 	bl	800292c <__NVIC_SetPriority>
	  NVIC_EnableIRQ(UART4_IRQn);
 8002b9a:	2034      	movs	r0, #52	; 0x34
 8002b9c:	f7ff fea8 	bl	80028f0 <__NVIC_EnableIRQ>

	  USART_InitStruct.BaudRate = 9600;
 8002ba0:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8002ba4:	61fb      	str	r3, [r7, #28]
	  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	623b      	str	r3, [r7, #32]
	  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002baa:	2300      	movs	r3, #0
 8002bac:	627b      	str	r3, [r7, #36]	; 0x24
	  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	62bb      	str	r3, [r7, #40]	; 0x28
	  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002bb2:	230c      	movs	r3, #12
 8002bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
	  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	633b      	str	r3, [r7, #48]	; 0x30
	  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	637b      	str	r3, [r7, #52]	; 0x34
	  LL_USART_Init(UART4, &USART_InitStruct);
 8002bbe:	f107 031c 	add.w	r3, r7, #28
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	4807      	ldr	r0, [pc, #28]	; (8002be4 <M8N_UART4_Initialization+0xc0>)
 8002bc6:	f007 ffc1 	bl	800ab4c <LL_USART_Init>
	  LL_USART_ConfigAsyncMode(UART4);
 8002bca:	4806      	ldr	r0, [pc, #24]	; (8002be4 <M8N_UART4_Initialization+0xc0>)
 8002bcc:	f7ff ff1b 	bl	8002a06 <LL_USART_ConfigAsyncMode>
	  LL_USART_Enable(UART4);
 8002bd0:	4804      	ldr	r0, [pc, #16]	; (8002be4 <M8N_UART4_Initialization+0xc0>)
 8002bd2:	f7ff ff08 	bl	80029e6 <LL_USART_Enable>
}
 8002bd6:	bf00      	nop
 8002bd8:	3738      	adds	r7, #56	; 0x38
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	40020800 	.word	0x40020800
 8002be4:	40004c00 	.word	0x40004c00

08002be8 <M8N_Initialization>:

void M8N_Initialization(void) {
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
	M8N_UART4_Initialization();
 8002bec:	f7ff ff9a 	bl	8002b24 <M8N_UART4_Initialization>

	M8N_TransmitData(&UBX_CFG_PRT[0], sizeof(UBX_CFG_PRT));
 8002bf0:	211c      	movs	r1, #28
 8002bf2:	480d      	ldr	r0, [pc, #52]	; (8002c28 <M8N_Initialization+0x40>)
 8002bf4:	f7ff ff70 	bl	8002ad8 <M8N_TransmitData>
	HAL_Delay(100);
 8002bf8:	2064      	movs	r0, #100	; 0x64
 8002bfa:	f003 f9d7 	bl	8005fac <HAL_Delay>
	M8N_TransmitData(&UBX_CFG_MSG[0], sizeof(UBX_CFG_MSG));
 8002bfe:	2110      	movs	r1, #16
 8002c00:	480a      	ldr	r0, [pc, #40]	; (8002c2c <M8N_Initialization+0x44>)
 8002c02:	f7ff ff69 	bl	8002ad8 <M8N_TransmitData>
	HAL_Delay(100);
 8002c06:	2064      	movs	r0, #100	; 0x64
 8002c08:	f003 f9d0 	bl	8005fac <HAL_Delay>
	M8N_TransmitData(&UBX_CFG_RATE[0], sizeof(UBX_CFG_RATE));
 8002c0c:	210e      	movs	r1, #14
 8002c0e:	4808      	ldr	r0, [pc, #32]	; (8002c30 <M8N_Initialization+0x48>)
 8002c10:	f7ff ff62 	bl	8002ad8 <M8N_TransmitData>
	HAL_Delay(100);
 8002c14:	2064      	movs	r0, #100	; 0x64
 8002c16:	f003 f9c9 	bl	8005fac <HAL_Delay>
	M8N_TransmitData(&UBX_CFG_CFG[0], sizeof(UBX_CFG_CFG));
 8002c1a:	2115      	movs	r1, #21
 8002c1c:	4805      	ldr	r0, [pc, #20]	; (8002c34 <M8N_Initialization+0x4c>)
 8002c1e:	f7ff ff5b 	bl	8002ad8 <M8N_TransmitData>
}
 8002c22:	bf00      	nop
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	0800e648 	.word	0x0800e648
 8002c2c:	0800e664 	.word	0x0800e664
 8002c30:	0800e674 	.word	0x0800e674
 8002c34:	0800e684 	.word	0x0800e684

08002c38 <M8N_UBX_CHKSUM_Check>:

unsigned char M8N_UBX_CHKSUM_Check(unsigned char *data, unsigned char len) {
 8002c38:	b480      	push	{r7}
 8002c3a:	b085      	sub	sp, #20
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	460b      	mov	r3, r1
 8002c42:	70fb      	strb	r3, [r7, #3]
	unsigned char CK_A = 0, CK_B = 0;
 8002c44:	2300      	movs	r3, #0
 8002c46:	73fb      	strb	r3, [r7, #15]
 8002c48:	2300      	movs	r3, #0
 8002c4a:	73bb      	strb	r3, [r7, #14]

	for (int i = 2; i < len - 2; i++) {
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	60bb      	str	r3, [r7, #8]
 8002c50:	e00d      	b.n	8002c6e <M8N_UBX_CHKSUM_Check+0x36>
		//exclude SYNC CHAR and CHECKSUM bytes
		CK_A = CK_A + data[i];
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	4413      	add	r3, r2
 8002c58:	781a      	ldrb	r2, [r3, #0]
 8002c5a:	7bfb      	ldrb	r3, [r7, #15]
 8002c5c:	4413      	add	r3, r2
 8002c5e:	73fb      	strb	r3, [r7, #15]
		CK_B = CK_B + CK_A;
 8002c60:	7bba      	ldrb	r2, [r7, #14]
 8002c62:	7bfb      	ldrb	r3, [r7, #15]
 8002c64:	4413      	add	r3, r2
 8002c66:	73bb      	strb	r3, [r7, #14]
	for (int i = 2; i < len - 2; i++) {
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	60bb      	str	r3, [r7, #8]
 8002c6e:	78fb      	ldrb	r3, [r7, #3]
 8002c70:	3b02      	subs	r3, #2
 8002c72:	68ba      	ldr	r2, [r7, #8]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	dbec      	blt.n	8002c52 <M8N_UBX_CHKSUM_Check+0x1a>
	}

	return (CK_A == data[len - 2]) && (CK_B == data[len - 1]);
 8002c78:	78fb      	ldrb	r3, [r7, #3]
 8002c7a:	3b02      	subs	r3, #2
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	4413      	add	r3, r2
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	7bfa      	ldrb	r2, [r7, #15]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d109      	bne.n	8002c9c <M8N_UBX_CHKSUM_Check+0x64>
 8002c88:	78fb      	ldrb	r3, [r7, #3]
 8002c8a:	3b01      	subs	r3, #1
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	4413      	add	r3, r2
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	7bba      	ldrb	r2, [r7, #14]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d101      	bne.n	8002c9c <M8N_UBX_CHKSUM_Check+0x64>
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e000      	b.n	8002c9e <M8N_UBX_CHKSUM_Check+0x66>
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	b2db      	uxtb	r3, r3
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3714      	adds	r7, #20
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <M8N_UBX_NAV_POSLLH_Parsing>:


void M8N_UBX_NAV_POSLLH_Parsing(unsigned char *data, M8N_UBX_NAV_POSLLH *posllh) {
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
	posllh -> CLASS = data[2];
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	789a      	ldrb	r2, [r3, #2]
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	701a      	strb	r2, [r3, #0]
	posllh -> ID = data[3];
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	78da      	ldrb	r2, [r3, #3]
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	705a      	strb	r2, [r3, #1]
	posllh -> length = data[4] | data[5] << 8;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	3304      	adds	r3, #4
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	b21a      	sxth	r2, r3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	3305      	adds	r3, #5
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	021b      	lsls	r3, r3, #8
 8002cd6:	b21b      	sxth	r3, r3
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	b21b      	sxth	r3, r3
 8002cdc:	b29a      	uxth	r2, r3
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	805a      	strh	r2, [r3, #2]

	posllh -> iTOW = data[6] | data[7] << 8 | data[8] << 16 | data[9] << 24;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	3306      	adds	r3, #6
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	461a      	mov	r2, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	3307      	adds	r3, #7
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	021b      	lsls	r3, r3, #8
 8002cf2:	431a      	orrs	r2, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	3308      	adds	r3, #8
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	041b      	lsls	r3, r3, #16
 8002cfc:	431a      	orrs	r2, r3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	3309      	adds	r3, #9
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	061b      	lsls	r3, r3, #24
 8002d06:	4313      	orrs	r3, r2
 8002d08:	461a      	mov	r2, r3
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	605a      	str	r2, [r3, #4]
	posllh -> lon = data[10] | data[11] << 8 | data[12] << 16 | data[13] << 24;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	330a      	adds	r3, #10
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	461a      	mov	r2, r3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	330b      	adds	r3, #11
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	021b      	lsls	r3, r3, #8
 8002d1e:	431a      	orrs	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	330c      	adds	r3, #12
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	041b      	lsls	r3, r3, #16
 8002d28:	431a      	orrs	r2, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	330d      	adds	r3, #13
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	061b      	lsls	r3, r3, #24
 8002d32:	431a      	orrs	r2, r3
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	609a      	str	r2, [r3, #8]
	posllh -> lat = data[14] | data[15] << 8 | data[16] << 16 | data[17] << 24;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	330e      	adds	r3, #14
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	461a      	mov	r2, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	330f      	adds	r3, #15
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	021b      	lsls	r3, r3, #8
 8002d48:	431a      	orrs	r2, r3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	3310      	adds	r3, #16
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	041b      	lsls	r3, r3, #16
 8002d52:	431a      	orrs	r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	3311      	adds	r3, #17
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	061b      	lsls	r3, r3, #24
 8002d5c:	431a      	orrs	r2, r3
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	60da      	str	r2, [r3, #12]
	posllh -> height = data[18] | data[19] << 8 | data[20] << 16 | data[21] << 24;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	3312      	adds	r3, #18
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	461a      	mov	r2, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	3313      	adds	r3, #19
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	021b      	lsls	r3, r3, #8
 8002d72:	431a      	orrs	r2, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	3314      	adds	r3, #20
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	041b      	lsls	r3, r3, #16
 8002d7c:	431a      	orrs	r2, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	3315      	adds	r3, #21
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	061b      	lsls	r3, r3, #24
 8002d86:	431a      	orrs	r2, r3
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	611a      	str	r2, [r3, #16]
	posllh -> hMSL = data[22] | data[23] << 8 | data[24] << 16 | data[25] << 24;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	3316      	adds	r3, #22
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	461a      	mov	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	3317      	adds	r3, #23
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	021b      	lsls	r3, r3, #8
 8002d9c:	431a      	orrs	r2, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	3318      	adds	r3, #24
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	041b      	lsls	r3, r3, #16
 8002da6:	431a      	orrs	r2, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	3319      	adds	r3, #25
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	061b      	lsls	r3, r3, #24
 8002db0:	431a      	orrs	r2, r3
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	615a      	str	r2, [r3, #20]
	posllh -> hAcc = data[26] | data[27] << 8 | data[28] << 16 | data[29] << 24;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	331a      	adds	r3, #26
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	331b      	adds	r3, #27
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	021b      	lsls	r3, r3, #8
 8002dc6:	431a      	orrs	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	331c      	adds	r3, #28
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	041b      	lsls	r3, r3, #16
 8002dd0:	431a      	orrs	r2, r3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	331d      	adds	r3, #29
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	061b      	lsls	r3, r3, #24
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	461a      	mov	r2, r3
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	619a      	str	r2, [r3, #24]
	posllh -> vAcc = data[30] | data[31] << 8 | data[32] << 16 | data[33] << 24;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	331e      	adds	r3, #30
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	461a      	mov	r2, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	331f      	adds	r3, #31
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	021b      	lsls	r3, r3, #8
 8002df2:	431a      	orrs	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	3320      	adds	r3, #32
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	041b      	lsls	r3, r3, #16
 8002dfc:	431a      	orrs	r2, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	3321      	adds	r3, #33	; 0x21
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	061b      	lsls	r3, r3, #24
 8002e06:	4313      	orrs	r3, r2
 8002e08:	461a      	mov	r2, r3
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	61da      	str	r2, [r3, #28]

//	posllh -> lon_f64 = posllh -> lon / 10000000.;
//	posllh -> lat_f64 = posllh -> lat / 10000000.;

}
 8002e0e:	bf00      	nop
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
	...

08002e1c <Quaternion_Update>:
float BNO080_Roll;
float BNO080_Pitch;
float BNO080_Yaw;

void Quaternion_Update(float* q)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b088      	sub	sp, #32
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
	float q1, q2, q3, q4;
	float norm;

	norm = invSqrt(q[0]*q[0] + q[1]*q[1] + q[2]*q[2] + q[3]*q[3]);    // normalize quaternion
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	ed93 7a00 	vldr	s14, [r3]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	edd3 7a00 	vldr	s15, [r3]
 8002e30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	3304      	adds	r3, #4
 8002e38:	edd3 6a00 	vldr	s13, [r3]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	3304      	adds	r3, #4
 8002e40:	edd3 7a00 	vldr	s15, [r3]
 8002e44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e48:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	3308      	adds	r3, #8
 8002e50:	edd3 6a00 	vldr	s13, [r3]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	3308      	adds	r3, #8
 8002e58:	edd3 7a00 	vldr	s15, [r3]
 8002e5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e60:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	330c      	adds	r3, #12
 8002e68:	edd3 6a00 	vldr	s13, [r3]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	330c      	adds	r3, #12
 8002e70:	edd3 7a00 	vldr	s15, [r3]
 8002e74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e7c:	eeb0 0a67 	vmov.f32	s0, s15
 8002e80:	f000 f91e 	bl	80030c0 <invSqrt>
 8002e84:	ed87 0a07 	vstr	s0, [r7, #28]
	
	q1 = q[0] * norm; //x
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	edd3 7a00 	vldr	s15, [r3]
 8002e8e:	ed97 7a07 	vldr	s14, [r7, #28]
 8002e92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e96:	edc7 7a06 	vstr	s15, [r7, #24]
	q2 = q[1] * norm; //y
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	3304      	adds	r3, #4
 8002e9e:	edd3 7a00 	vldr	s15, [r3]
 8002ea2:	ed97 7a07 	vldr	s14, [r7, #28]
 8002ea6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eaa:	edc7 7a05 	vstr	s15, [r7, #20]
	q3 = q[2] * norm; //z
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	3308      	adds	r3, #8
 8002eb2:	edd3 7a00 	vldr	s15, [r3]
 8002eb6:	ed97 7a07 	vldr	s14, [r7, #28]
 8002eba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ebe:	edc7 7a04 	vstr	s15, [r7, #16]
	q4 = q[3] * norm; //w
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	330c      	adds	r3, #12
 8002ec6:	edd3 7a00 	vldr	s15, [r3]
 8002eca:	ed97 7a07 	vldr	s14, [r7, #28]
 8002ece:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ed2:	edc7 7a03 	vstr	s15, [r7, #12]

	BNO080_Pitch = atan2f(2.0f * (q2*q3 + q1*q4), q1*q1 + q2*q2 - q3*q3 - q4*q4);
 8002ed6:	ed97 7a05 	vldr	s14, [r7, #20]
 8002eda:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ede:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ee2:	edd7 6a06 	vldr	s13, [r7, #24]
 8002ee6:	edd7 7a03 	vldr	s15, [r7, #12]
 8002eea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002eee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ef2:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8002ef6:	ed97 7a06 	vldr	s14, [r7, #24]
 8002efa:	edd7 7a06 	vldr	s15, [r7, #24]
 8002efe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f02:	edd7 6a05 	vldr	s13, [r7, #20]
 8002f06:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f0e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f12:	edd7 6a04 	vldr	s13, [r7, #16]
 8002f16:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f1e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f22:	edd7 6a03 	vldr	s13, [r7, #12]
 8002f26:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f32:	eef0 0a67 	vmov.f32	s1, s15
 8002f36:	eeb0 0a46 	vmov.f32	s0, s12
 8002f3a:	f00a fa9b 	bl	800d474 <atan2f>
 8002f3e:	eef0 7a40 	vmov.f32	s15, s0
 8002f42:	4b59      	ldr	r3, [pc, #356]	; (80030a8 <Quaternion_Update+0x28c>)
 8002f44:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Roll  = -asinf(2.0f * (q2*q4 - q1*q3));
 8002f48:	ed97 7a05 	vldr	s14, [r7, #20]
 8002f4c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f50:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f54:	edd7 6a06 	vldr	s13, [r7, #24]
 8002f58:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f64:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002f68:	eeb0 0a67 	vmov.f32	s0, s15
 8002f6c:	f00a fa2a 	bl	800d3c4 <asinf>
 8002f70:	eef0 7a40 	vmov.f32	s15, s0
 8002f74:	eef1 7a67 	vneg.f32	s15, s15
 8002f78:	4b4c      	ldr	r3, [pc, #304]	; (80030ac <Quaternion_Update+0x290>)
 8002f7a:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Yaw   = atan2f(2.0f * (q1*q2 + q3*q4), q1*q1 - q2*q2 - q3*q3 + q4*q4);
 8002f7e:	ed97 7a06 	vldr	s14, [r7, #24]
 8002f82:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f86:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f8a:	edd7 6a04 	vldr	s13, [r7, #16]
 8002f8e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f9a:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8002f9e:	ed97 7a06 	vldr	s14, [r7, #24]
 8002fa2:	edd7 7a06 	vldr	s15, [r7, #24]
 8002fa6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002faa:	edd7 6a05 	vldr	s13, [r7, #20]
 8002fae:	edd7 7a05 	vldr	s15, [r7, #20]
 8002fb2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002fb6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002fba:	edd7 6a04 	vldr	s13, [r7, #16]
 8002fbe:	edd7 7a04 	vldr	s15, [r7, #16]
 8002fc2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002fc6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002fca:	edd7 6a03 	vldr	s13, [r7, #12]
 8002fce:	edd7 7a03 	vldr	s15, [r7, #12]
 8002fd2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002fd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fda:	eef0 0a67 	vmov.f32	s1, s15
 8002fde:	eeb0 0a46 	vmov.f32	s0, s12
 8002fe2:	f00a fa47 	bl	800d474 <atan2f>
 8002fe6:	eef0 7a40 	vmov.f32	s15, s0
 8002fea:	4b31      	ldr	r3, [pc, #196]	; (80030b0 <Quaternion_Update+0x294>)
 8002fec:	edc3 7a00 	vstr	s15, [r3]

	BNO080_Pitch *= _180_DIV_PI;
 8002ff0:	4b2d      	ldr	r3, [pc, #180]	; (80030a8 <Quaternion_Update+0x28c>)
 8002ff2:	edd3 7a00 	vldr	s15, [r3]
 8002ff6:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80030b4 <Quaternion_Update+0x298>
 8002ffa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ffe:	4b2a      	ldr	r3, [pc, #168]	; (80030a8 <Quaternion_Update+0x28c>)
 8003000:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Roll  *= _180_DIV_PI;
 8003004:	4b29      	ldr	r3, [pc, #164]	; (80030ac <Quaternion_Update+0x290>)
 8003006:	edd3 7a00 	vldr	s15, [r3]
 800300a:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80030b4 <Quaternion_Update+0x298>
 800300e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003012:	4b26      	ldr	r3, [pc, #152]	; (80030ac <Quaternion_Update+0x290>)
 8003014:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Yaw   *= _180_DIV_PI;
 8003018:	4b25      	ldr	r3, [pc, #148]	; (80030b0 <Quaternion_Update+0x294>)
 800301a:	edd3 7a00 	vldr	s15, [r3]
 800301e:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80030b4 <Quaternion_Update+0x298>
 8003022:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003026:	4b22      	ldr	r3, [pc, #136]	; (80030b0 <Quaternion_Update+0x294>)
 8003028:	edc3 7a00 	vstr	s15, [r3]
	
	if(BNO080_Yaw>=0)
 800302c:	4b20      	ldr	r3, [pc, #128]	; (80030b0 <Quaternion_Update+0x294>)
 800302e:	edd3 7a00 	vldr	s15, [r3]
 8003032:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800303a:	db0a      	blt.n	8003052 <Quaternion_Update+0x236>
		BNO080_Yaw = 360.f - BNO080_Yaw;
 800303c:	4b1c      	ldr	r3, [pc, #112]	; (80030b0 <Quaternion_Update+0x294>)
 800303e:	edd3 7a00 	vldr	s15, [r3]
 8003042:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80030b8 <Quaternion_Update+0x29c>
 8003046:	ee77 7a67 	vsub.f32	s15, s14, s15
 800304a:	4b19      	ldr	r3, [pc, #100]	; (80030b0 <Quaternion_Update+0x294>)
 800304c:	edc3 7a00 	vstr	s15, [r3]
 8003050:	e007      	b.n	8003062 <Quaternion_Update+0x246>
	else	
		BNO080_Yaw = -BNO080_Yaw;
 8003052:	4b17      	ldr	r3, [pc, #92]	; (80030b0 <Quaternion_Update+0x294>)
 8003054:	edd3 7a00 	vldr	s15, [r3]
 8003058:	eef1 7a67 	vneg.f32	s15, s15
 800305c:	4b14      	ldr	r3, [pc, #80]	; (80030b0 <Quaternion_Update+0x294>)
 800305e:	edc3 7a00 	vstr	s15, [r3]
	
	
	if(BNO080_Pitch>=0)
 8003062:	4b11      	ldr	r3, [pc, #68]	; (80030a8 <Quaternion_Update+0x28c>)
 8003064:	edd3 7a00 	vldr	s15, [r3]
 8003068:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800306c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003070:	db0a      	blt.n	8003088 <Quaternion_Update+0x26c>
		BNO080_Pitch = 180.f - BNO080_Pitch;
 8003072:	4b0d      	ldr	r3, [pc, #52]	; (80030a8 <Quaternion_Update+0x28c>)
 8003074:	edd3 7a00 	vldr	s15, [r3]
 8003078:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80030bc <Quaternion_Update+0x2a0>
 800307c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003080:	4b09      	ldr	r3, [pc, #36]	; (80030a8 <Quaternion_Update+0x28c>)
 8003082:	edc3 7a00 	vstr	s15, [r3]
	else
		BNO080_Pitch = -(BNO080_Pitch + 180.f);
}
 8003086:	e00b      	b.n	80030a0 <Quaternion_Update+0x284>
		BNO080_Pitch = -(BNO080_Pitch + 180.f);
 8003088:	4b07      	ldr	r3, [pc, #28]	; (80030a8 <Quaternion_Update+0x28c>)
 800308a:	edd3 7a00 	vldr	s15, [r3]
 800308e:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80030bc <Quaternion_Update+0x2a0>
 8003092:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003096:	eef1 7a67 	vneg.f32	s15, s15
 800309a:	4b03      	ldr	r3, [pc, #12]	; (80030a8 <Quaternion_Update+0x28c>)
 800309c:	edc3 7a00 	vstr	s15, [r3]
}
 80030a0:	bf00      	nop
 80030a2:	3720      	adds	r7, #32
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	200003a8 	.word	0x200003a8
 80030ac:	200003a0 	.word	0x200003a0
 80030b0:	200003a4 	.word	0x200003a4
 80030b4:	42652ee1 	.word	0x42652ee1
 80030b8:	43b40000 	.word	0x43b40000
 80030bc:	43340000 	.word	0x43340000

080030c0 <invSqrt>:

// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b087      	sub	sp, #28
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 80030ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80030ce:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80030d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030d6:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 80030de:	f107 0310 	add.w	r3, r7, #16
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	105a      	asrs	r2, r3, #1
 80030ea:	4b12      	ldr	r3, [pc, #72]	; (8003134 <invSqrt+0x74>)
 80030ec:	1a9b      	subs	r3, r3, r2
 80030ee:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 80030f0:	f107 030c 	add.w	r3, r7, #12
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 80030f8:	ed97 7a04 	vldr	s14, [r7, #16]
 80030fc:	edd7 7a05 	vldr	s15, [r7, #20]
 8003100:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003104:	edd7 7a04 	vldr	s15, [r7, #16]
 8003108:	ee67 7a27 	vmul.f32	s15, s14, s15
 800310c:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8003110:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003114:	edd7 7a04 	vldr	s15, [r7, #16]
 8003118:	ee67 7a27 	vmul.f32	s15, s14, s15
 800311c:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	ee07 3a90 	vmov	s15, r3
}
 8003126:	eeb0 0a67 	vmov.f32	s0, s15
 800312a:	371c      	adds	r7, #28
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr
 8003134:	5f3759df 	.word	0x5f3759df

08003138 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800313e:	463b      	mov	r3, r7
 8003140:	2200      	movs	r2, #0
 8003142:	601a      	str	r2, [r3, #0]
 8003144:	605a      	str	r2, [r3, #4]
 8003146:	609a      	str	r2, [r3, #8]
 8003148:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800314a:	4b21      	ldr	r3, [pc, #132]	; (80031d0 <MX_ADC1_Init+0x98>)
 800314c:	4a21      	ldr	r2, [pc, #132]	; (80031d4 <MX_ADC1_Init+0x9c>)
 800314e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8003150:	4b1f      	ldr	r3, [pc, #124]	; (80031d0 <MX_ADC1_Init+0x98>)
 8003152:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003156:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003158:	4b1d      	ldr	r3, [pc, #116]	; (80031d0 <MX_ADC1_Init+0x98>)
 800315a:	2200      	movs	r2, #0
 800315c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800315e:	4b1c      	ldr	r3, [pc, #112]	; (80031d0 <MX_ADC1_Init+0x98>)
 8003160:	2200      	movs	r2, #0
 8003162:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003164:	4b1a      	ldr	r3, [pc, #104]	; (80031d0 <MX_ADC1_Init+0x98>)
 8003166:	2201      	movs	r2, #1
 8003168:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800316a:	4b19      	ldr	r3, [pc, #100]	; (80031d0 <MX_ADC1_Init+0x98>)
 800316c:	2200      	movs	r2, #0
 800316e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003172:	4b17      	ldr	r3, [pc, #92]	; (80031d0 <MX_ADC1_Init+0x98>)
 8003174:	2200      	movs	r2, #0
 8003176:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003178:	4b15      	ldr	r3, [pc, #84]	; (80031d0 <MX_ADC1_Init+0x98>)
 800317a:	4a17      	ldr	r2, [pc, #92]	; (80031d8 <MX_ADC1_Init+0xa0>)
 800317c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800317e:	4b14      	ldr	r3, [pc, #80]	; (80031d0 <MX_ADC1_Init+0x98>)
 8003180:	2200      	movs	r2, #0
 8003182:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003184:	4b12      	ldr	r3, [pc, #72]	; (80031d0 <MX_ADC1_Init+0x98>)
 8003186:	2201      	movs	r2, #1
 8003188:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800318a:	4b11      	ldr	r3, [pc, #68]	; (80031d0 <MX_ADC1_Init+0x98>)
 800318c:	2201      	movs	r2, #1
 800318e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003192:	4b0f      	ldr	r3, [pc, #60]	; (80031d0 <MX_ADC1_Init+0x98>)
 8003194:	2201      	movs	r2, #1
 8003196:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003198:	480d      	ldr	r0, [pc, #52]	; (80031d0 <MX_ADC1_Init+0x98>)
 800319a:	f002 ff29 	bl	8005ff0 <HAL_ADC_Init>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d001      	beq.n	80031a8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80031a4:	f001 fcfc 	bl	8004ba0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80031a8:	2308      	movs	r3, #8
 80031aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80031ac:	2301      	movs	r3, #1
 80031ae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80031b0:	2307      	movs	r3, #7
 80031b2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80031b4:	463b      	mov	r3, r7
 80031b6:	4619      	mov	r1, r3
 80031b8:	4805      	ldr	r0, [pc, #20]	; (80031d0 <MX_ADC1_Init+0x98>)
 80031ba:	f003 f86d 	bl	8006298 <HAL_ADC_ConfigChannel>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d001      	beq.n	80031c8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80031c4:	f001 fcec 	bl	8004ba0 <Error_Handler>
  }

}
 80031c8:	bf00      	nop
 80031ca:	3710      	adds	r7, #16
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	200003ac 	.word	0x200003ac
 80031d4:	40012000 	.word	0x40012000
 80031d8:	0f000001 	.word	0x0f000001

080031dc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b08a      	sub	sp, #40	; 0x28
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031e4:	f107 0314 	add.w	r3, r7, #20
 80031e8:	2200      	movs	r2, #0
 80031ea:	601a      	str	r2, [r3, #0]
 80031ec:	605a      	str	r2, [r3, #4]
 80031ee:	609a      	str	r2, [r3, #8]
 80031f0:	60da      	str	r2, [r3, #12]
 80031f2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a2e      	ldr	r2, [pc, #184]	; (80032b4 <HAL_ADC_MspInit+0xd8>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d156      	bne.n	80032ac <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80031fe:	2300      	movs	r3, #0
 8003200:	613b      	str	r3, [r7, #16]
 8003202:	4b2d      	ldr	r3, [pc, #180]	; (80032b8 <HAL_ADC_MspInit+0xdc>)
 8003204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003206:	4a2c      	ldr	r2, [pc, #176]	; (80032b8 <HAL_ADC_MspInit+0xdc>)
 8003208:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800320c:	6453      	str	r3, [r2, #68]	; 0x44
 800320e:	4b2a      	ldr	r3, [pc, #168]	; (80032b8 <HAL_ADC_MspInit+0xdc>)
 8003210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003216:	613b      	str	r3, [r7, #16]
 8003218:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800321a:	2300      	movs	r3, #0
 800321c:	60fb      	str	r3, [r7, #12]
 800321e:	4b26      	ldr	r3, [pc, #152]	; (80032b8 <HAL_ADC_MspInit+0xdc>)
 8003220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003222:	4a25      	ldr	r2, [pc, #148]	; (80032b8 <HAL_ADC_MspInit+0xdc>)
 8003224:	f043 0302 	orr.w	r3, r3, #2
 8003228:	6313      	str	r3, [r2, #48]	; 0x30
 800322a:	4b23      	ldr	r3, [pc, #140]	; (80032b8 <HAL_ADC_MspInit+0xdc>)
 800322c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	60fb      	str	r3, [r7, #12]
 8003234:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PB0     ------> ADC1_IN8 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003236:	2301      	movs	r3, #1
 8003238:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800323a:	2303      	movs	r3, #3
 800323c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800323e:	2300      	movs	r3, #0
 8003240:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003242:	f107 0314 	add.w	r3, r7, #20
 8003246:	4619      	mov	r1, r3
 8003248:	481c      	ldr	r0, [pc, #112]	; (80032bc <HAL_ADC_MspInit+0xe0>)
 800324a:	f003 ff67 	bl	800711c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800324e:	4b1c      	ldr	r3, [pc, #112]	; (80032c0 <HAL_ADC_MspInit+0xe4>)
 8003250:	4a1c      	ldr	r2, [pc, #112]	; (80032c4 <HAL_ADC_MspInit+0xe8>)
 8003252:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003254:	4b1a      	ldr	r3, [pc, #104]	; (80032c0 <HAL_ADC_MspInit+0xe4>)
 8003256:	2200      	movs	r2, #0
 8003258:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800325a:	4b19      	ldr	r3, [pc, #100]	; (80032c0 <HAL_ADC_MspInit+0xe4>)
 800325c:	2200      	movs	r2, #0
 800325e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003260:	4b17      	ldr	r3, [pc, #92]	; (80032c0 <HAL_ADC_MspInit+0xe4>)
 8003262:	2200      	movs	r2, #0
 8003264:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_DISABLE;
 8003266:	4b16      	ldr	r3, [pc, #88]	; (80032c0 <HAL_ADC_MspInit+0xe4>)
 8003268:	2200      	movs	r2, #0
 800326a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800326c:	4b14      	ldr	r3, [pc, #80]	; (80032c0 <HAL_ADC_MspInit+0xe4>)
 800326e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003272:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003274:	4b12      	ldr	r3, [pc, #72]	; (80032c0 <HAL_ADC_MspInit+0xe4>)
 8003276:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800327a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800327c:	4b10      	ldr	r3, [pc, #64]	; (80032c0 <HAL_ADC_MspInit+0xe4>)
 800327e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003282:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003284:	4b0e      	ldr	r3, [pc, #56]	; (80032c0 <HAL_ADC_MspInit+0xe4>)
 8003286:	2200      	movs	r2, #0
 8003288:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800328a:	4b0d      	ldr	r3, [pc, #52]	; (80032c0 <HAL_ADC_MspInit+0xe4>)
 800328c:	2200      	movs	r2, #0
 800328e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003290:	480b      	ldr	r0, [pc, #44]	; (80032c0 <HAL_ADC_MspInit+0xe4>)
 8003292:	f003 fbb3 	bl	80069fc <HAL_DMA_Init>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d001      	beq.n	80032a0 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 800329c:	f001 fc80 	bl	8004ba0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	4a07      	ldr	r2, [pc, #28]	; (80032c0 <HAL_ADC_MspInit+0xe4>)
 80032a4:	639a      	str	r2, [r3, #56]	; 0x38
 80032a6:	4a06      	ldr	r2, [pc, #24]	; (80032c0 <HAL_ADC_MspInit+0xe4>)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80032ac:	bf00      	nop
 80032ae:	3728      	adds	r7, #40	; 0x28
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	40012000 	.word	0x40012000
 80032b8:	40023800 	.word	0x40023800
 80032bc:	40020400 	.word	0x40020400
 80032c0:	200003f4 	.word	0x200003f4
 80032c4:	40026410 	.word	0x40026410

080032c8 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b082      	sub	sp, #8
 80032cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80032ce:	2300      	movs	r3, #0
 80032d0:	607b      	str	r3, [r7, #4]
 80032d2:	4b0c      	ldr	r3, [pc, #48]	; (8003304 <MX_DMA_Init+0x3c>)
 80032d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d6:	4a0b      	ldr	r2, [pc, #44]	; (8003304 <MX_DMA_Init+0x3c>)
 80032d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80032dc:	6313      	str	r3, [r2, #48]	; 0x30
 80032de:	4b09      	ldr	r3, [pc, #36]	; (8003304 <MX_DMA_Init+0x3c>)
 80032e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032e6:	607b      	str	r3, [r7, #4]
 80032e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80032ea:	2200      	movs	r2, #0
 80032ec:	2100      	movs	r1, #0
 80032ee:	2038      	movs	r0, #56	; 0x38
 80032f0:	f003 fb4d 	bl	800698e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80032f4:	2038      	movs	r0, #56	; 0x38
 80032f6:	f003 fb66 	bl	80069c6 <HAL_NVIC_EnableIRQ>

}
 80032fa:	bf00      	nop
 80032fc:	3708      	adds	r7, #8
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	40023800 	.word	0x40023800

08003308 <LL_GPIO_SetOutputPin>:
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	683a      	ldr	r2, [r7, #0]
 8003316:	619a      	str	r2, [r3, #24]
}
 8003318:	bf00      	nop
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <LL_GPIO_ResetOutputPin>:
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	041a      	lsls	r2, r3, #16
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	619a      	str	r2, [r3, #24]
}
 8003336:	bf00      	nop
 8003338:	370c      	adds	r7, #12
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr
	...

08003344 <LL_AHB1_GRP1_EnableClock>:
{
 8003344:	b480      	push	{r7}
 8003346:	b085      	sub	sp, #20
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800334c:	4b08      	ldr	r3, [pc, #32]	; (8003370 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800334e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003350:	4907      	ldr	r1, [pc, #28]	; (8003370 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4313      	orrs	r3, r2
 8003356:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8003358:	4b05      	ldr	r3, [pc, #20]	; (8003370 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800335a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4013      	ands	r3, r2
 8003360:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003362:	68fb      	ldr	r3, [r7, #12]
}
 8003364:	bf00      	nop
 8003366:	3714      	adds	r7, #20
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr
 8003370:	40023800 	.word	0x40023800

08003374 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b086      	sub	sp, #24
 8003378:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800337a:	463b      	mov	r3, r7
 800337c:	2200      	movs	r2, #0
 800337e:	601a      	str	r2, [r3, #0]
 8003380:	605a      	str	r2, [r3, #4]
 8003382:	609a      	str	r2, [r3, #8]
 8003384:	60da      	str	r2, [r3, #12]
 8003386:	611a      	str	r2, [r3, #16]
 8003388:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800338a:	2004      	movs	r0, #4
 800338c:	f7ff ffda 	bl	8003344 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8003390:	2080      	movs	r0, #128	; 0x80
 8003392:	f7ff ffd7 	bl	8003344 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8003396:	2001      	movs	r0, #1
 8003398:	f7ff ffd4 	bl	8003344 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800339c:	2002      	movs	r0, #2
 800339e:	f7ff ffd1 	bl	8003344 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 80033a2:	2008      	movs	r0, #8
 80033a4:	f7ff ffce 	bl	8003344 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_13);
 80033a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80033ac:	482e      	ldr	r0, [pc, #184]	; (8003468 <MX_GPIO_Init+0xf4>)
 80033ae:	f7ff ffab 	bl	8003308 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_4 
 80033b2:	f240 2117 	movw	r1, #535	; 0x217
 80033b6:	482c      	ldr	r0, [pc, #176]	; (8003468 <MX_GPIO_Init+0xf4>)
 80033b8:	f7ff ffb4 	bl	8003324 <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_9);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_12|LL_GPIO_PIN_6);
 80033bc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 80033c0:	482a      	ldr	r0, [pc, #168]	; (800346c <MX_GPIO_Init+0xf8>)
 80033c2:	f7ff ffaf 	bl	8003324 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_8);
 80033c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80033ca:	4829      	ldr	r0, [pc, #164]	; (8003470 <MX_GPIO_Init+0xfc>)
 80033cc:	f7ff ffaa 	bl	8003324 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2 
 80033d0:	f242 2317 	movw	r3, #8727	; 0x2217
 80033d4:	603b      	str	r3, [r7, #0]
                          |LL_GPIO_PIN_4|LL_GPIO_PIN_9;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80033d6:	2301      	movs	r3, #1
 80033d8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80033da:	2300      	movs	r3, #0
 80033dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80033de:	2300      	movs	r3, #0
 80033e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80033e2:	2300      	movs	r3, #0
 80033e4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033e6:	463b      	mov	r3, r7
 80033e8:	4619      	mov	r1, r3
 80033ea:	481f      	ldr	r0, [pc, #124]	; (8003468 <MX_GPIO_Init+0xf4>)
 80033ec:	f006 fcc3 	bl	8009d76 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_8;
 80033f0:	f44f 7390 	mov.w	r3, #288	; 0x120
 80033f4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80033f6:	2300      	movs	r3, #0
 80033f8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80033fa:	2300      	movs	r3, #0
 80033fc:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033fe:	463b      	mov	r3, r7
 8003400:	4619      	mov	r1, r3
 8003402:	4819      	ldr	r0, [pc, #100]	; (8003468 <MX_GPIO_Init+0xf4>)
 8003404:	f006 fcb7 	bl	8009d76 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12|LL_GPIO_PIN_6;
 8003408:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 800340c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800340e:	2301      	movs	r3, #1
 8003410:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003412:	2300      	movs	r3, #0
 8003414:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003416:	2300      	movs	r3, #0
 8003418:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800341a:	2300      	movs	r3, #0
 800341c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800341e:	463b      	mov	r3, r7
 8003420:	4619      	mov	r1, r3
 8003422:	4812      	ldr	r0, [pc, #72]	; (800346c <MX_GPIO_Init+0xf8>)
 8003424:	f006 fca7 	bl	8009d76 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8003428:	f44f 7380 	mov.w	r3, #256	; 0x100
 800342c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800342e:	2301      	movs	r3, #1
 8003430:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003432:	2300      	movs	r3, #0
 8003434:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003436:	2300      	movs	r3, #0
 8003438:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800343a:	2300      	movs	r3, #0
 800343c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800343e:	463b      	mov	r3, r7
 8003440:	4619      	mov	r1, r3
 8003442:	480b      	ldr	r0, [pc, #44]	; (8003470 <MX_GPIO_Init+0xfc>)
 8003444:	f006 fc97 	bl	8009d76 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8003448:	2380      	movs	r3, #128	; 0x80
 800344a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800344c:	2300      	movs	r3, #0
 800344e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003450:	2300      	movs	r3, #0
 8003452:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003454:	463b      	mov	r3, r7
 8003456:	4619      	mov	r1, r3
 8003458:	4804      	ldr	r0, [pc, #16]	; (800346c <MX_GPIO_Init+0xf8>)
 800345a:	f006 fc8c 	bl	8009d76 <LL_GPIO_Init>

}
 800345e:	bf00      	nop
 8003460:	3718      	adds	r7, #24
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	40020800 	.word	0x40020800
 800346c:	40020400 	.word	0x40020400
 8003470:	40020000 	.word	0x40020000

08003474 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8003478:	4b12      	ldr	r3, [pc, #72]	; (80034c4 <MX_I2C1_Init+0x50>)
 800347a:	4a13      	ldr	r2, [pc, #76]	; (80034c8 <MX_I2C1_Init+0x54>)
 800347c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800347e:	4b11      	ldr	r3, [pc, #68]	; (80034c4 <MX_I2C1_Init+0x50>)
 8003480:	4a12      	ldr	r2, [pc, #72]	; (80034cc <MX_I2C1_Init+0x58>)
 8003482:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003484:	4b0f      	ldr	r3, [pc, #60]	; (80034c4 <MX_I2C1_Init+0x50>)
 8003486:	2200      	movs	r2, #0
 8003488:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800348a:	4b0e      	ldr	r3, [pc, #56]	; (80034c4 <MX_I2C1_Init+0x50>)
 800348c:	2200      	movs	r2, #0
 800348e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003490:	4b0c      	ldr	r3, [pc, #48]	; (80034c4 <MX_I2C1_Init+0x50>)
 8003492:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003496:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003498:	4b0a      	ldr	r3, [pc, #40]	; (80034c4 <MX_I2C1_Init+0x50>)
 800349a:	2200      	movs	r2, #0
 800349c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800349e:	4b09      	ldr	r3, [pc, #36]	; (80034c4 <MX_I2C1_Init+0x50>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80034a4:	4b07      	ldr	r3, [pc, #28]	; (80034c4 <MX_I2C1_Init+0x50>)
 80034a6:	2200      	movs	r2, #0
 80034a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80034aa:	4b06      	ldr	r3, [pc, #24]	; (80034c4 <MX_I2C1_Init+0x50>)
 80034ac:	2200      	movs	r2, #0
 80034ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80034b0:	4804      	ldr	r0, [pc, #16]	; (80034c4 <MX_I2C1_Init+0x50>)
 80034b2:	f003 ffcd 	bl	8007450 <HAL_I2C_Init>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d001      	beq.n	80034c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80034bc:	f001 fb70 	bl	8004ba0 <Error_Handler>
  }

}
 80034c0:	bf00      	nop
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	20000454 	.word	0x20000454
 80034c8:	40005400 	.word	0x40005400
 80034cc:	00061a80 	.word	0x00061a80

080034d0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b08a      	sub	sp, #40	; 0x28
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034d8:	f107 0314 	add.w	r3, r7, #20
 80034dc:	2200      	movs	r2, #0
 80034de:	601a      	str	r2, [r3, #0]
 80034e0:	605a      	str	r2, [r3, #4]
 80034e2:	609a      	str	r2, [r3, #8]
 80034e4:	60da      	str	r2, [r3, #12]
 80034e6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a19      	ldr	r2, [pc, #100]	; (8003554 <HAL_I2C_MspInit+0x84>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d12c      	bne.n	800354c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034f2:	2300      	movs	r3, #0
 80034f4:	613b      	str	r3, [r7, #16]
 80034f6:	4b18      	ldr	r3, [pc, #96]	; (8003558 <HAL_I2C_MspInit+0x88>)
 80034f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fa:	4a17      	ldr	r2, [pc, #92]	; (8003558 <HAL_I2C_MspInit+0x88>)
 80034fc:	f043 0302 	orr.w	r3, r3, #2
 8003500:	6313      	str	r3, [r2, #48]	; 0x30
 8003502:	4b15      	ldr	r3, [pc, #84]	; (8003558 <HAL_I2C_MspInit+0x88>)
 8003504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003506:	f003 0302 	and.w	r3, r3, #2
 800350a:	613b      	str	r3, [r7, #16]
 800350c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800350e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003512:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003514:	2312      	movs	r3, #18
 8003516:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003518:	2301      	movs	r3, #1
 800351a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800351c:	2303      	movs	r3, #3
 800351e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003520:	2304      	movs	r3, #4
 8003522:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003524:	f107 0314 	add.w	r3, r7, #20
 8003528:	4619      	mov	r1, r3
 800352a:	480c      	ldr	r0, [pc, #48]	; (800355c <HAL_I2C_MspInit+0x8c>)
 800352c:	f003 fdf6 	bl	800711c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003530:	2300      	movs	r3, #0
 8003532:	60fb      	str	r3, [r7, #12]
 8003534:	4b08      	ldr	r3, [pc, #32]	; (8003558 <HAL_I2C_MspInit+0x88>)
 8003536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003538:	4a07      	ldr	r2, [pc, #28]	; (8003558 <HAL_I2C_MspInit+0x88>)
 800353a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800353e:	6413      	str	r3, [r2, #64]	; 0x40
 8003540:	4b05      	ldr	r3, [pc, #20]	; (8003558 <HAL_I2C_MspInit+0x88>)
 8003542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003544:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003548:	60fb      	str	r3, [r7, #12]
 800354a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800354c:	bf00      	nop
 800354e:	3728      	adds	r7, #40	; 0x28
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}
 8003554:	40005400 	.word	0x40005400
 8003558:	40023800 	.word	0x40023800
 800355c:	40020400 	.word	0x40020400

08003560 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f043 0201 	orr.w	r2, r3, #1
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	601a      	str	r2, [r3, #0]
}
 8003574:	bf00      	nop
 8003576:	370c      	adds	r7, #12
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a1a      	ldr	r2, [r3, #32]
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	431a      	orrs	r2, r3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	621a      	str	r2, [r3, #32]
}
 8003596:	bf00      	nop
 8003598:	370c      	adds	r7, #12
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr

080035a2 <LL_TIM_CC_DisableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 80035a2:	b480      	push	{r7}
 80035a4:	b083      	sub	sp, #12
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
 80035aa:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6a1a      	ldr	r2, [r3, #32]
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	43db      	mvns	r3, r3
 80035b4:	401a      	ands	r2, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	621a      	str	r2, [r3, #32]
}
 80035ba:	bf00      	nop
 80035bc:	370c      	adds	r7, #12
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr

080035c6 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 80035c6:	b480      	push	{r7}
 80035c8:	b083      	sub	sp, #12
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	f043 0201 	orr.w	r2, r3, #1
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	60da      	str	r2, [r3, #12]
}
 80035da:	bf00      	nop
 80035dc:	370c      	adds	r7, #12
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr

080035e6 <LL_USART_IsActiveFlag_TXE>:
{
 80035e6:	b480      	push	{r7}
 80035e8:	b083      	sub	sp, #12
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035f6:	2b80      	cmp	r3, #128	; 0x80
 80035f8:	bf0c      	ite	eq
 80035fa:	2301      	moveq	r3, #1
 80035fc:	2300      	movne	r3, #0
 80035fe:	b2db      	uxtb	r3, r3
}
 8003600:	4618      	mov	r0, r3
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <LL_USART_EnableIT_RXNE>:
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	f043 0220 	orr.w	r2, r3, #32
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	60da      	str	r2, [r3, #12]
}
 8003620:	bf00      	nop
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <LL_USART_TransmitData8>:
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	460b      	mov	r3, r1
 8003636:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8003638:	78fa      	ldrb	r2, [r7, #3]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	605a      	str	r2, [r3, #4]
}
 800363e:	bf00      	nop
 8003640:	370c      	adds	r7, #12
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr

0800364a <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800364a:	b480      	push	{r7}
 800364c:	b083      	sub	sp, #12
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
 8003652:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->ODR, READ_REG(GPIOx->ODR) ^ PinMask);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	695a      	ldr	r2, [r3, #20]
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	405a      	eors	r2, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	615a      	str	r2, [r3, #20]
}
 8003660:	bf00      	nop
 8003662:	370c      	adds	r7, #12
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <_write>:

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
int _write(int file, char *p, int len) {
 800366c:	b580      	push	{r7, lr}
 800366e:	b086      	sub	sp, #24
 8003670:	af00      	add	r7, sp, #0
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	60b9      	str	r1, [r7, #8]
 8003676:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < len; i++) {
 8003678:	2300      	movs	r3, #0
 800367a:	617b      	str	r3, [r7, #20]
 800367c:	e011      	b.n	80036a2 <_write+0x36>
		while (!LL_USART_IsActiveFlag_TXE(USART6))
 800367e:	bf00      	nop
 8003680:	480c      	ldr	r0, [pc, #48]	; (80036b4 <_write+0x48>)
 8003682:	f7ff ffb0 	bl	80035e6 <LL_USART_IsActiveFlag_TXE>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d0f9      	beq.n	8003680 <_write+0x14>
			;
		LL_USART_TransmitData8(USART6, *(p + i));
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	68ba      	ldr	r2, [r7, #8]
 8003690:	4413      	add	r3, r2
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	4619      	mov	r1, r3
 8003696:	4807      	ldr	r0, [pc, #28]	; (80036b4 <_write+0x48>)
 8003698:	f7ff ffc8 	bl	800362c <LL_USART_TransmitData8>
	for (int i = 0; i < len; i++) {
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	3301      	adds	r3, #1
 80036a0:	617b      	str	r3, [r7, #20]
 80036a2:	697a      	ldr	r2, [r7, #20]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	429a      	cmp	r2, r3
 80036a8:	dbe9      	blt.n	800367e <_write+0x12>
	}
	return len;
 80036aa:	687b      	ldr	r3, [r7, #4]
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3718      	adds	r7, #24
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	40011400 	.word	0x40011400

080036b8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80036b8:	b590      	push	{r4, r7, lr}
 80036ba:	b093      	sub	sp, #76	; 0x4c
 80036bc:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	float q[4];
	float quatRadianAccuracy;
	unsigned char buf_read[16] = {1};
 80036be:	f107 0314 	add.w	r3, r7, #20
 80036c2:	2200      	movs	r2, #0
 80036c4:	601a      	str	r2, [r3, #0]
 80036c6:	605a      	str	r2, [r3, #4]
 80036c8:	609a      	str	r2, [r3, #8]
 80036ca:	60da      	str	r2, [r3, #12]
 80036cc:	2301      	movs	r3, #1
 80036ce:	753b      	strb	r3, [r7, #20]
	unsigned char buf_write[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 80036d0:	4bd0      	ldr	r3, [pc, #832]	; (8003a14 <main+0x35c>)
 80036d2:	1d3c      	adds	r4, r7, #4
 80036d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80036d6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	unsigned short adcVal;

	short gyro_x_offset = 8;
 80036da:	2308      	movs	r3, #8
 80036dc:	87fb      	strh	r3, [r7, #62]	; 0x3e
	short gyro_y_offset = -23;
 80036de:	f64f 73e9 	movw	r3, #65513	; 0xffe9
 80036e2:	87bb      	strh	r3, [r7, #60]	; 0x3c
	short gyro_z_offset = -2;
 80036e4:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80036e8:	877b      	strh	r3, [r7, #58]	; 0x3a
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80036ea:	f002 fbed 	bl	8005ec8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80036ee:	f000 fef3 	bl	80044d8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80036f2:	f7ff fe3f 	bl	8003374 <MX_GPIO_Init>
	MX_DMA_Init();
 80036f6:	f7ff fde7 	bl	80032c8 <MX_DMA_Init>
	MX_TIM3_Init();
 80036fa:	f001 ffb9 	bl	8005670 <MX_TIM3_Init>
	MX_USART6_UART_Init();
 80036fe:	f002 fb09 	bl	8005d14 <MX_USART6_UART_Init>
	MX_SPI2_Init();
 8003702:	f001 fb01 	bl	8004d08 <MX_SPI2_Init>
	MX_SPI1_Init();
 8003706:	f001 faad 	bl	8004c64 <MX_SPI1_Init>
	MX_SPI3_Init();
 800370a:	f001 fb51 	bl	8004db0 <MX_SPI3_Init>
	MX_UART4_Init();
 800370e:	f002 f9fd 	bl	8005b0c <MX_UART4_Init>
	MX_UART5_Init();
 8003712:	f002 fa5d 	bl	8005bd0 <MX_UART5_Init>
	MX_TIM5_Init();
 8003716:	f002 f819 	bl	800574c <MX_TIM5_Init>
	MX_I2C1_Init();
 800371a:	f7ff feab 	bl	8003474 <MX_I2C1_Init>
	MX_ADC1_Init();
 800371e:	f7ff fd0b 	bl	8003138 <MX_ADC1_Init>
	MX_USART1_UART_Init(); //3DR Telemetry
 8003722:	f002 facd 	bl	8005cc0 <MX_USART1_UART_Init>
	MX_TIM7_Init();
 8003726:	f002 f8bf 	bl	80058a8 <MX_TIM7_Init>
	/* USER CODE BEGIN 2 */
	//TIM3 Initialization
	LL_TIM_EnableCounter(TIM3);
 800372a:	48bb      	ldr	r0, [pc, #748]	; (8003a18 <main+0x360>)
 800372c:	f7ff ff18 	bl	8003560 <LL_TIM_EnableCounter>

	//UART4, 5, 6 Initialization
	LL_USART_EnableIT_RXNE(USART6);
 8003730:	48ba      	ldr	r0, [pc, #744]	; (8003a1c <main+0x364>)
 8003732:	f7ff ff6b 	bl	800360c <LL_USART_EnableIT_RXNE>
	LL_USART_EnableIT_RXNE(UART4);
 8003736:	48ba      	ldr	r0, [pc, #744]	; (8003a20 <main+0x368>)
 8003738:	f7ff ff68 	bl	800360c <LL_USART_EnableIT_RXNE>
	LL_USART_EnableIT_RXNE(UART5);
 800373c:	48b9      	ldr	r0, [pc, #740]	; (8003a24 <main+0x36c>)
 800373e:	f7ff ff65 	bl	800360c <LL_USART_EnableIT_RXNE>

	//9DOF Initialization
	BNO080_Initialization();
 8003742:	f7fd febf 	bl	80014c4 <BNO080_Initialization>
	BNO080_enableRotationVector(2500); //400Hz, maximum value describing in datasheet
 8003746:	f640 10c4 	movw	r0, #2500	; 0x9c4
 800374a:	f7fe f972 	bl	8001a32 <BNO080_enableRotationVector>

	//6DOF Initialization
	ICM20602_Initialization();
 800374e:	f7fe fd4d 	bl	80021ec <ICM20602_Initialization>
	LPS22HH_Initialization();
 8003752:	f7fe ffd5 	bl	8002700 <LPS22HH_Initialization>
	M8N_Initialization();
 8003756:	f7ff fa47 	bl	8002be8 <M8N_Initialization>

	//TIM5 Initialization
	LL_TIM_EnableCounter(TIM5);
 800375a:	48b3      	ldr	r0, [pc, #716]	; (8003a28 <main+0x370>)
 800375c:	f7ff ff00 	bl	8003560 <LL_TIM_EnableCounter>
	LL_TIM_CC_EnableChannel(TIM5, LL_TIM_CHANNEL_CH1);
 8003760:	2101      	movs	r1, #1
 8003762:	48b1      	ldr	r0, [pc, #708]	; (8003a28 <main+0x370>)
 8003764:	f7ff ff0c 	bl	8003580 <LL_TIM_CC_EnableChannel>
	LL_TIM_CC_EnableChannel(TIM5, LL_TIM_CHANNEL_CH2);
 8003768:	2110      	movs	r1, #16
 800376a:	48af      	ldr	r0, [pc, #700]	; (8003a28 <main+0x370>)
 800376c:	f7ff ff08 	bl	8003580 <LL_TIM_CC_EnableChannel>
	LL_TIM_CC_EnableChannel(TIM5, LL_TIM_CHANNEL_CH3);
 8003770:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003774:	48ac      	ldr	r0, [pc, #688]	; (8003a28 <main+0x370>)
 8003776:	f7ff ff03 	bl	8003580 <LL_TIM_CC_EnableChannel>
	LL_TIM_CC_EnableChannel(TIM5, LL_TIM_CHANNEL_CH4);
 800377a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800377e:	48aa      	ldr	r0, [pc, #680]	; (8003a28 <main+0x370>)
 8003780:	f7ff fefe 	bl	8003580 <LL_TIM_CC_EnableChannel>

	HAL_ADC_Start_DMA(&hadc1, &adcVal, 1);
 8003784:	1cbb      	adds	r3, r7, #2
 8003786:	2201      	movs	r2, #1
 8003788:	4619      	mov	r1, r3
 800378a:	48a8      	ldr	r0, [pc, #672]	; (8003a2c <main+0x374>)
 800378c:	f002 fc74 	bl	8006078 <HAL_ADC_Start_DMA>

	//UART1 - HAL Rx Interrupt
	HAL_UART_Receive_IT(&huart1, &uart1_rx_data, 1); //3DR Telemetry
 8003790:	2201      	movs	r2, #1
 8003792:	49a7      	ldr	r1, [pc, #668]	; (8003a30 <main+0x378>)
 8003794:	48a7      	ldr	r0, [pc, #668]	; (8003a34 <main+0x37c>)
 8003796:	f005 fb98 	bl	8008eca <HAL_UART_Receive_IT>

	//TIM7 Initialization for FC <-> GCS
	LL_TIM_EnableCounter(TIM7);
 800379a:	48a7      	ldr	r0, [pc, #668]	; (8003a38 <main+0x380>)
 800379c:	f7ff fee0 	bl	8003560 <LL_TIM_EnableCounter>
	LL_TIM_EnableIT_UPDATE(TIM7);
 80037a0:	48a5      	ldr	r0, [pc, #660]	; (8003a38 <main+0x380>)
 80037a2:	f7ff ff10 	bl	80035c6 <LL_TIM_EnableIT_UPDATE>

	//ICM20602 DC BIAS OFFSET CALIBRATION
	ICM20602_Writebyte(0x13, (gyro_x_offset * -2) >> 8);
 80037a6:	f9b7 203e 	ldrsh.w	r2, [r7, #62]	; 0x3e
 80037aa:	4613      	mov	r3, r2
 80037ac:	07db      	lsls	r3, r3, #31
 80037ae:	1a9b      	subs	r3, r3, r2
 80037b0:	005b      	lsls	r3, r3, #1
 80037b2:	121b      	asrs	r3, r3, #8
 80037b4:	4619      	mov	r1, r3
 80037b6:	2013      	movs	r0, #19
 80037b8:	f7fe fcf6 	bl	80021a8 <ICM20602_Writebyte>
	ICM20602_Writebyte(0x14, (gyro_x_offset * -2));
 80037bc:	f9b7 203e 	ldrsh.w	r2, [r7, #62]	; 0x3e
 80037c0:	4613      	mov	r3, r2
 80037c2:	07db      	lsls	r3, r3, #31
 80037c4:	1a9b      	subs	r3, r3, r2
 80037c6:	005b      	lsls	r3, r3, #1
 80037c8:	4619      	mov	r1, r3
 80037ca:	2014      	movs	r0, #20
 80037cc:	f7fe fcec 	bl	80021a8 <ICM20602_Writebyte>

	ICM20602_Writebyte(0x15, (gyro_y_offset * -2) >> 8);
 80037d0:	f9b7 203c 	ldrsh.w	r2, [r7, #60]	; 0x3c
 80037d4:	4613      	mov	r3, r2
 80037d6:	07db      	lsls	r3, r3, #31
 80037d8:	1a9b      	subs	r3, r3, r2
 80037da:	005b      	lsls	r3, r3, #1
 80037dc:	121b      	asrs	r3, r3, #8
 80037de:	4619      	mov	r1, r3
 80037e0:	2015      	movs	r0, #21
 80037e2:	f7fe fce1 	bl	80021a8 <ICM20602_Writebyte>
	ICM20602_Writebyte(0x16, (gyro_y_offset * -2));
 80037e6:	f9b7 203c 	ldrsh.w	r2, [r7, #60]	; 0x3c
 80037ea:	4613      	mov	r3, r2
 80037ec:	07db      	lsls	r3, r3, #31
 80037ee:	1a9b      	subs	r3, r3, r2
 80037f0:	005b      	lsls	r3, r3, #1
 80037f2:	4619      	mov	r1, r3
 80037f4:	2016      	movs	r0, #22
 80037f6:	f7fe fcd7 	bl	80021a8 <ICM20602_Writebyte>

	ICM20602_Writebyte(0x17, (gyro_z_offset * -2) >> 8);
 80037fa:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 80037fe:	4613      	mov	r3, r2
 8003800:	07db      	lsls	r3, r3, #31
 8003802:	1a9b      	subs	r3, r3, r2
 8003804:	005b      	lsls	r3, r3, #1
 8003806:	121b      	asrs	r3, r3, #8
 8003808:	4619      	mov	r1, r3
 800380a:	2017      	movs	r0, #23
 800380c:	f7fe fccc 	bl	80021a8 <ICM20602_Writebyte>
	ICM20602_Writebyte(0x18, (gyro_z_offset * -2));
 8003810:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 8003814:	4613      	mov	r3, r2
 8003816:	07db      	lsls	r3, r3, #31
 8003818:	1a9b      	subs	r3, r3, r2
 800381a:	005b      	lsls	r3, r3, #1
 800381c:	4619      	mov	r1, r3
 800381e:	2018      	movs	r0, #24
 8003820:	f7fe fcc2 	bl	80021a8 <ICM20602_Writebyte>

	//0 - Roll 0, 1 - Roll 1, 2 - Pitch 0, 3 - Pitch 1, 4 - Yaw 0, 5 - Yaw 1

	EP_PIDGain_Read(0, &roll_in_kp, &roll_in_ki, &roll_in_kd);
 8003824:	4b85      	ldr	r3, [pc, #532]	; (8003a3c <main+0x384>)
 8003826:	4a86      	ldr	r2, [pc, #536]	; (8003a40 <main+0x388>)
 8003828:	4986      	ldr	r1, [pc, #536]	; (8003a44 <main+0x38c>)
 800382a:	2000      	movs	r0, #0
 800382c:	f7fd fc65 	bl	80010fa <EP_PIDGain_Read>
	Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 0, roll_in_kp, roll_in_ki, roll_in_kd);
 8003830:	4b84      	ldr	r3, [pc, #528]	; (8003a44 <main+0x38c>)
 8003832:	edd3 7a00 	vldr	s15, [r3]
 8003836:	4b82      	ldr	r3, [pc, #520]	; (8003a40 <main+0x388>)
 8003838:	ed93 7a00 	vldr	s14, [r3]
 800383c:	4b7f      	ldr	r3, [pc, #508]	; (8003a3c <main+0x384>)
 800383e:	edd3 6a00 	vldr	s13, [r3]
 8003842:	eeb0 1a66 	vmov.f32	s2, s13
 8003846:	eef0 0a47 	vmov.f32	s1, s14
 800384a:	eeb0 0a67 	vmov.f32	s0, s15
 800384e:	2100      	movs	r1, #0
 8003850:	487d      	ldr	r0, [pc, #500]	; (8003a48 <main+0x390>)
 8003852:	f001 f953 	bl	8004afc <Encode_Msg_PID_Gain>
	HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8003856:	230a      	movs	r3, #10
 8003858:	2214      	movs	r2, #20
 800385a:	497b      	ldr	r1, [pc, #492]	; (8003a48 <main+0x390>)
 800385c:	4875      	ldr	r0, [pc, #468]	; (8003a34 <main+0x37c>)
 800385e:	f005 fa56 	bl	8008d0e <HAL_UART_Transmit>

	EP_PIDGain_Read(1, &roll_out_kp, &roll_out_ki, &roll_out_kd);
 8003862:	4b7a      	ldr	r3, [pc, #488]	; (8003a4c <main+0x394>)
 8003864:	4a7a      	ldr	r2, [pc, #488]	; (8003a50 <main+0x398>)
 8003866:	497b      	ldr	r1, [pc, #492]	; (8003a54 <main+0x39c>)
 8003868:	2001      	movs	r0, #1
 800386a:	f7fd fc46 	bl	80010fa <EP_PIDGain_Read>
	Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 1, roll_out_kp, roll_out_ki, roll_out_kd);
 800386e:	4b79      	ldr	r3, [pc, #484]	; (8003a54 <main+0x39c>)
 8003870:	edd3 7a00 	vldr	s15, [r3]
 8003874:	4b76      	ldr	r3, [pc, #472]	; (8003a50 <main+0x398>)
 8003876:	ed93 7a00 	vldr	s14, [r3]
 800387a:	4b74      	ldr	r3, [pc, #464]	; (8003a4c <main+0x394>)
 800387c:	edd3 6a00 	vldr	s13, [r3]
 8003880:	eeb0 1a66 	vmov.f32	s2, s13
 8003884:	eef0 0a47 	vmov.f32	s1, s14
 8003888:	eeb0 0a67 	vmov.f32	s0, s15
 800388c:	2101      	movs	r1, #1
 800388e:	486e      	ldr	r0, [pc, #440]	; (8003a48 <main+0x390>)
 8003890:	f001 f934 	bl	8004afc <Encode_Msg_PID_Gain>
	HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8003894:	230a      	movs	r3, #10
 8003896:	2214      	movs	r2, #20
 8003898:	496b      	ldr	r1, [pc, #428]	; (8003a48 <main+0x390>)
 800389a:	4866      	ldr	r0, [pc, #408]	; (8003a34 <main+0x37c>)
 800389c:	f005 fa37 	bl	8008d0e <HAL_UART_Transmit>

	EP_PIDGain_Read(2, &pitch_in_kp, &pitch_in_ki, &pitch_in_kd);
 80038a0:	4b6d      	ldr	r3, [pc, #436]	; (8003a58 <main+0x3a0>)
 80038a2:	4a6e      	ldr	r2, [pc, #440]	; (8003a5c <main+0x3a4>)
 80038a4:	496e      	ldr	r1, [pc, #440]	; (8003a60 <main+0x3a8>)
 80038a6:	2002      	movs	r0, #2
 80038a8:	f7fd fc27 	bl	80010fa <EP_PIDGain_Read>
	Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 2, pitch_in_kp, pitch_in_ki, pitch_in_kd);
 80038ac:	4b6c      	ldr	r3, [pc, #432]	; (8003a60 <main+0x3a8>)
 80038ae:	edd3 7a00 	vldr	s15, [r3]
 80038b2:	4b6a      	ldr	r3, [pc, #424]	; (8003a5c <main+0x3a4>)
 80038b4:	ed93 7a00 	vldr	s14, [r3]
 80038b8:	4b67      	ldr	r3, [pc, #412]	; (8003a58 <main+0x3a0>)
 80038ba:	edd3 6a00 	vldr	s13, [r3]
 80038be:	eeb0 1a66 	vmov.f32	s2, s13
 80038c2:	eef0 0a47 	vmov.f32	s1, s14
 80038c6:	eeb0 0a67 	vmov.f32	s0, s15
 80038ca:	2102      	movs	r1, #2
 80038cc:	485e      	ldr	r0, [pc, #376]	; (8003a48 <main+0x390>)
 80038ce:	f001 f915 	bl	8004afc <Encode_Msg_PID_Gain>
	HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 80038d2:	230a      	movs	r3, #10
 80038d4:	2214      	movs	r2, #20
 80038d6:	495c      	ldr	r1, [pc, #368]	; (8003a48 <main+0x390>)
 80038d8:	4856      	ldr	r0, [pc, #344]	; (8003a34 <main+0x37c>)
 80038da:	f005 fa18 	bl	8008d0e <HAL_UART_Transmit>

	EP_PIDGain_Read(3, &pitch_out_kp, &pitch_out_ki, &pitch_out_kd);
 80038de:	4b61      	ldr	r3, [pc, #388]	; (8003a64 <main+0x3ac>)
 80038e0:	4a61      	ldr	r2, [pc, #388]	; (8003a68 <main+0x3b0>)
 80038e2:	4962      	ldr	r1, [pc, #392]	; (8003a6c <main+0x3b4>)
 80038e4:	2003      	movs	r0, #3
 80038e6:	f7fd fc08 	bl	80010fa <EP_PIDGain_Read>
	Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 3, pitch_out_kp, pitch_out_ki, pitch_out_kd);
 80038ea:	4b60      	ldr	r3, [pc, #384]	; (8003a6c <main+0x3b4>)
 80038ec:	edd3 7a00 	vldr	s15, [r3]
 80038f0:	4b5d      	ldr	r3, [pc, #372]	; (8003a68 <main+0x3b0>)
 80038f2:	ed93 7a00 	vldr	s14, [r3]
 80038f6:	4b5b      	ldr	r3, [pc, #364]	; (8003a64 <main+0x3ac>)
 80038f8:	edd3 6a00 	vldr	s13, [r3]
 80038fc:	eeb0 1a66 	vmov.f32	s2, s13
 8003900:	eef0 0a47 	vmov.f32	s1, s14
 8003904:	eeb0 0a67 	vmov.f32	s0, s15
 8003908:	2103      	movs	r1, #3
 800390a:	484f      	ldr	r0, [pc, #316]	; (8003a48 <main+0x390>)
 800390c:	f001 f8f6 	bl	8004afc <Encode_Msg_PID_Gain>
	HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8003910:	230a      	movs	r3, #10
 8003912:	2214      	movs	r2, #20
 8003914:	494c      	ldr	r1, [pc, #304]	; (8003a48 <main+0x390>)
 8003916:	4847      	ldr	r0, [pc, #284]	; (8003a34 <main+0x37c>)
 8003918:	f005 f9f9 	bl	8008d0e <HAL_UART_Transmit>

	EP_PIDGain_Read(4, &yaw_heading_kp, &yaw_heading_ki, &yaw_heading_kd);
 800391c:	4b54      	ldr	r3, [pc, #336]	; (8003a70 <main+0x3b8>)
 800391e:	4a55      	ldr	r2, [pc, #340]	; (8003a74 <main+0x3bc>)
 8003920:	4955      	ldr	r1, [pc, #340]	; (8003a78 <main+0x3c0>)
 8003922:	2004      	movs	r0, #4
 8003924:	f7fd fbe9 	bl	80010fa <EP_PIDGain_Read>
	Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 4, yaw_heading_kp, yaw_heading_ki, yaw_heading_kd);
 8003928:	4b53      	ldr	r3, [pc, #332]	; (8003a78 <main+0x3c0>)
 800392a:	edd3 7a00 	vldr	s15, [r3]
 800392e:	4b51      	ldr	r3, [pc, #324]	; (8003a74 <main+0x3bc>)
 8003930:	ed93 7a00 	vldr	s14, [r3]
 8003934:	4b4e      	ldr	r3, [pc, #312]	; (8003a70 <main+0x3b8>)
 8003936:	edd3 6a00 	vldr	s13, [r3]
 800393a:	eeb0 1a66 	vmov.f32	s2, s13
 800393e:	eef0 0a47 	vmov.f32	s1, s14
 8003942:	eeb0 0a67 	vmov.f32	s0, s15
 8003946:	2104      	movs	r1, #4
 8003948:	483f      	ldr	r0, [pc, #252]	; (8003a48 <main+0x390>)
 800394a:	f001 f8d7 	bl	8004afc <Encode_Msg_PID_Gain>
	HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 800394e:	230a      	movs	r3, #10
 8003950:	2214      	movs	r2, #20
 8003952:	493d      	ldr	r1, [pc, #244]	; (8003a48 <main+0x390>)
 8003954:	4837      	ldr	r0, [pc, #220]	; (8003a34 <main+0x37c>)
 8003956:	f005 f9da 	bl	8008d0e <HAL_UART_Transmit>

	EP_PIDGain_Read(5, &yaw_rate_kp, &yaw_rate_ki, &yaw_rate_kd);
 800395a:	4b48      	ldr	r3, [pc, #288]	; (8003a7c <main+0x3c4>)
 800395c:	4a48      	ldr	r2, [pc, #288]	; (8003a80 <main+0x3c8>)
 800395e:	4949      	ldr	r1, [pc, #292]	; (8003a84 <main+0x3cc>)
 8003960:	2005      	movs	r0, #5
 8003962:	f7fd fbca 	bl	80010fa <EP_PIDGain_Read>
	Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 5, yaw_rate_kp, yaw_rate_ki, yaw_rate_kd);
 8003966:	4b47      	ldr	r3, [pc, #284]	; (8003a84 <main+0x3cc>)
 8003968:	edd3 7a00 	vldr	s15, [r3]
 800396c:	4b44      	ldr	r3, [pc, #272]	; (8003a80 <main+0x3c8>)
 800396e:	ed93 7a00 	vldr	s14, [r3]
 8003972:	4b42      	ldr	r3, [pc, #264]	; (8003a7c <main+0x3c4>)
 8003974:	edd3 6a00 	vldr	s13, [r3]
 8003978:	eeb0 1a66 	vmov.f32	s2, s13
 800397c:	eef0 0a47 	vmov.f32	s1, s14
 8003980:	eeb0 0a67 	vmov.f32	s0, s15
 8003984:	2105      	movs	r1, #5
 8003986:	4830      	ldr	r0, [pc, #192]	; (8003a48 <main+0x390>)
 8003988:	f001 f8b8 	bl	8004afc <Encode_Msg_PID_Gain>
	HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 800398c:	230a      	movs	r3, #10
 800398e:	2214      	movs	r2, #20
 8003990:	492d      	ldr	r1, [pc, #180]	; (8003a48 <main+0x390>)
 8003992:	4828      	ldr	r0, [pc, #160]	; (8003a34 <main+0x37c>)
 8003994:	f005 f9bb 	bl	8008d0e <HAL_UART_Transmit>
	//
	//	//EEPROM Read
	//	EP_PIDGain_Read(0, &p, &i, &d);
	//	printf("%f %f %f", p, i, d);

	LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003998:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800399c:	481e      	ldr	r0, [pc, #120]	; (8003a18 <main+0x360>)
 800399e:	f7ff fdef 	bl	8003580 <LL_TIM_CC_EnableChannel>
	TIM3->PSC = 6000;
 80039a2:	4b1d      	ldr	r3, [pc, #116]	; (8003a18 <main+0x360>)
 80039a4:	f241 7270 	movw	r2, #6000	; 0x1770
 80039a8:	629a      	str	r2, [r3, #40]	; 0x28
	HAL_Delay(200);
 80039aa:	20c8      	movs	r0, #200	; 0xc8
 80039ac:	f002 fafe 	bl	8005fac <HAL_Delay>
	TIM3->PSC = 4000;
 80039b0:	4b19      	ldr	r3, [pc, #100]	; (8003a18 <main+0x360>)
 80039b2:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80039b6:	629a      	str	r2, [r3, #40]	; 0x28
	HAL_Delay(100);
 80039b8:	2064      	movs	r0, #100	; 0x64
 80039ba:	f002 faf7 	bl	8005fac <HAL_Delay>
	TIM3->PSC = 4000;
 80039be:	4b16      	ldr	r3, [pc, #88]	; (8003a18 <main+0x360>)
 80039c0:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80039c4:	629a      	str	r2, [r3, #40]	; 0x28
	HAL_Delay(100);
 80039c6:	2064      	movs	r0, #100	; 0x64
 80039c8:	f002 faf0 	bl	8005fac <HAL_Delay>
	TIM3->PSC = 6000;
 80039cc:	4b12      	ldr	r3, [pc, #72]	; (8003a18 <main+0x360>)
 80039ce:	f241 7270 	movw	r2, #6000	; 0x1770
 80039d2:	629a      	str	r2, [r3, #40]	; 0x28
	HAL_Delay(200);
 80039d4:	20c8      	movs	r0, #200	; 0xc8
 80039d6:	f002 fae9 	bl	8005fac <HAL_Delay>
	//  TIM3 -> CCR4 = TIM3 -> ARR / 2;
	LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80039da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80039de:	480e      	ldr	r0, [pc, #56]	; (8003a18 <main+0x360>)
 80039e0:	f7ff fddf 	bl	80035a2 <LL_TIM_CC_DisableChannel>

	printf("Starts\n");
 80039e4:	4828      	ldr	r0, [pc, #160]	; (8003a88 <main+0x3d0>)
 80039e6:	f007 fe33 	bl	800b650 <puts>
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		//GCS -> FC Message Receiver
		if (telemetry_rx_cplt_flag == 1) {
 80039ea:	4b28      	ldr	r3, [pc, #160]	; (8003a8c <main+0x3d4>)
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	f040 83da 	bne.w	80041a8 <main+0xaf0>
			telemetry_rx_cplt_flag = 0;
 80039f4:	4b25      	ldr	r3, [pc, #148]	; (8003a8c <main+0x3d4>)
 80039f6:	2200      	movs	r2, #0
 80039f8:	701a      	strb	r2, [r3, #0]
			if (iBus.SwA == 1000) {
 80039fa:	4b25      	ldr	r3, [pc, #148]	; (8003a90 <main+0x3d8>)
 80039fc:	891b      	ldrh	r3, [r3, #8]
 80039fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a02:	f040 83d1 	bne.w	80041a8 <main+0xaf0>
				unsigned char checksum = 0xff;
 8003a06:	23ff      	movs	r3, #255	; 0xff
 8003a08:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				for (int i = 0; i < 19; i++) checksum -= telemetry_rx_buf[i];
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	643b      	str	r3, [r7, #64]	; 0x40
 8003a10:	e04c      	b.n	8003aac <main+0x3f4>
 8003a12:	bf00      	nop
 8003a14:	0800e508 	.word	0x0800e508
 8003a18:	40000400 	.word	0x40000400
 8003a1c:	40011400 	.word	0x40011400
 8003a20:	40004c00 	.word	0x40004c00
 8003a24:	40005000 	.word	0x40005000
 8003a28:	40000c00 	.word	0x40000c00
 8003a2c:	200003ac 	.word	0x200003ac
 8003a30:	20000213 	.word	0x20000213
 8003a34:	20000578 	.word	0x20000578
 8003a38:	40001400 	.word	0x40001400
 8003a3c:	20000530 	.word	0x20000530
 8003a40:	200004c8 	.word	0x200004c8
 8003a44:	200004bc 	.word	0x200004bc
 8003a48:	20000500 	.word	0x20000500
 8003a4c:	200004e4 	.word	0x200004e4
 8003a50:	200004f4 	.word	0x200004f4
 8003a54:	2000052c 	.word	0x2000052c
 8003a58:	20000528 	.word	0x20000528
 8003a5c:	200004a8 	.word	0x200004a8
 8003a60:	200004b4 	.word	0x200004b4
 8003a64:	200004fc 	.word	0x200004fc
 8003a68:	200004cc 	.word	0x200004cc
 8003a6c:	200004c4 	.word	0x200004c4
 8003a70:	200004e8 	.word	0x200004e8
 8003a74:	200004ac 	.word	0x200004ac
 8003a78:	200004f8 	.word	0x200004f8
 8003a7c:	200004c0 	.word	0x200004c0
 8003a80:	200004f0 	.word	0x200004f0
 8003a84:	200004b8 	.word	0x200004b8
 8003a88:	0800e500 	.word	0x0800e500
 8003a8c:	200004ec 	.word	0x200004ec
 8003a90:	20000310 	.word	0x20000310
 8003a94:	4aac      	ldr	r2, [pc, #688]	; (8003d48 <main+0x690>)
 8003a96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a98:	4413      	add	r3, r2
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8003aa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	643b      	str	r3, [r7, #64]	; 0x40
 8003aac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003aae:	2b12      	cmp	r3, #18
 8003ab0:	ddf0      	ble.n	8003a94 <main+0x3dc>
				if (checksum == telemetry_rx_buf[19]) {
 8003ab2:	4ba5      	ldr	r3, [pc, #660]	; (8003d48 <main+0x690>)
 8003ab4:	7cdb      	ldrb	r3, [r3, #19]
 8003ab6:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8003aba:	429a      	cmp	r2, r3
 8003abc:	f040 8374 	bne.w	80041a8 <main+0xaf0>
					//iBus.SwA == 1000 -> Motor off state and can have delay
					//Buzzer Beep is available at SwA 1000
					LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003ac0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003ac4:	48a1      	ldr	r0, [pc, #644]	; (8003d4c <main+0x694>)
 8003ac6:	f7ff fd5b 	bl	8003580 <LL_TIM_CC_EnableChannel>
					TIM3->PSC = 1000;
 8003aca:	4ba0      	ldr	r3, [pc, #640]	; (8003d4c <main+0x694>)
 8003acc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003ad0:	629a      	str	r2, [r3, #40]	; 0x28
					HAL_Delay(10);
 8003ad2:	200a      	movs	r0, #10
 8003ad4:	f002 fa6a 	bl	8005fac <HAL_Delay>
					LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003ad8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003adc:	489b      	ldr	r0, [pc, #620]	; (8003d4c <main+0x694>)
 8003ade:	f7ff fd60 	bl	80035a2 <LL_TIM_CC_DisableChannel>

					switch(telemetry_rx_buf[2]) {
 8003ae2:	4b99      	ldr	r3, [pc, #612]	; (8003d48 <main+0x690>)
 8003ae4:	789b      	ldrb	r3, [r3, #2]
 8003ae6:	2b10      	cmp	r3, #16
 8003ae8:	f200 835e 	bhi.w	80041a8 <main+0xaf0>
 8003aec:	a201      	add	r2, pc, #4	; (adr r2, 8003af4 <main+0x43c>)
 8003aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003af2:	bf00      	nop
 8003af4:	08003b39 	.word	0x08003b39
 8003af8:	08003bbd 	.word	0x08003bbd
 8003afc:	08003c41 	.word	0x08003c41
 8003b00:	08003cc5 	.word	0x08003cc5
 8003b04:	08003d95 	.word	0x08003d95
 8003b08:	08003e19 	.word	0x08003e19
 8003b0c:	080041a9 	.word	0x080041a9
 8003b10:	080041a9 	.word	0x080041a9
 8003b14:	080041a9 	.word	0x080041a9
 8003b18:	080041a9 	.word	0x080041a9
 8003b1c:	080041a9 	.word	0x080041a9
 8003b20:	080041a9 	.word	0x080041a9
 8003b24:	080041a9 	.word	0x080041a9
 8003b28:	080041a9 	.word	0x080041a9
 8003b2c:	080041a9 	.word	0x080041a9
 8003b30:	080041a9 	.word	0x080041a9
 8003b34:	08003e9d 	.word	0x08003e9d
					case 0:
						//Save PID Gain at EEPROM
						roll_in_kp = *(float *)&telemetry_rx_buf[3];
 8003b38:	4b85      	ldr	r3, [pc, #532]	; (8003d50 <main+0x698>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a85      	ldr	r2, [pc, #532]	; (8003d54 <main+0x69c>)
 8003b3e:	6013      	str	r3, [r2, #0]
						roll_in_ki = *(float *)&telemetry_rx_buf[7];
 8003b40:	4b85      	ldr	r3, [pc, #532]	; (8003d58 <main+0x6a0>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a85      	ldr	r2, [pc, #532]	; (8003d5c <main+0x6a4>)
 8003b46:	6013      	str	r3, [r2, #0]
						roll_in_kd = *(float *)&telemetry_rx_buf[11];
 8003b48:	4b85      	ldr	r3, [pc, #532]	; (8003d60 <main+0x6a8>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a85      	ldr	r2, [pc, #532]	; (8003d64 <main+0x6ac>)
 8003b4e:	6013      	str	r3, [r2, #0]
						EP_PIDGain_Write(telemetry_rx_buf[2], roll_in_kp, roll_in_ki, roll_in_kd);
 8003b50:	4b7d      	ldr	r3, [pc, #500]	; (8003d48 <main+0x690>)
 8003b52:	789a      	ldrb	r2, [r3, #2]
 8003b54:	4b7f      	ldr	r3, [pc, #508]	; (8003d54 <main+0x69c>)
 8003b56:	edd3 7a00 	vldr	s15, [r3]
 8003b5a:	4b80      	ldr	r3, [pc, #512]	; (8003d5c <main+0x6a4>)
 8003b5c:	ed93 7a00 	vldr	s14, [r3]
 8003b60:	4b80      	ldr	r3, [pc, #512]	; (8003d64 <main+0x6ac>)
 8003b62:	edd3 6a00 	vldr	s13, [r3]
 8003b66:	eeb0 1a66 	vmov.f32	s2, s13
 8003b6a:	eef0 0a47 	vmov.f32	s1, s14
 8003b6e:	eeb0 0a67 	vmov.f32	s0, s15
 8003b72:	4610      	mov	r0, r2
 8003b74:	f7fd fa66 	bl	8001044 <EP_PIDGain_Write>
						//Read PID Gain from EEPROM and FC -> GCS
						EP_PIDGain_Read(telemetry_rx_buf[2], &roll_in_kp, &roll_in_ki, &roll_in_kd);
 8003b78:	4b73      	ldr	r3, [pc, #460]	; (8003d48 <main+0x690>)
 8003b7a:	7898      	ldrb	r0, [r3, #2]
 8003b7c:	4b79      	ldr	r3, [pc, #484]	; (8003d64 <main+0x6ac>)
 8003b7e:	4a77      	ldr	r2, [pc, #476]	; (8003d5c <main+0x6a4>)
 8003b80:	4974      	ldr	r1, [pc, #464]	; (8003d54 <main+0x69c>)
 8003b82:	f7fd faba 	bl	80010fa <EP_PIDGain_Read>
						Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[2], roll_in_kp, roll_in_ki, roll_in_kd);
 8003b86:	4b70      	ldr	r3, [pc, #448]	; (8003d48 <main+0x690>)
 8003b88:	789a      	ldrb	r2, [r3, #2]
 8003b8a:	4b72      	ldr	r3, [pc, #456]	; (8003d54 <main+0x69c>)
 8003b8c:	edd3 7a00 	vldr	s15, [r3]
 8003b90:	4b72      	ldr	r3, [pc, #456]	; (8003d5c <main+0x6a4>)
 8003b92:	ed93 7a00 	vldr	s14, [r3]
 8003b96:	4b73      	ldr	r3, [pc, #460]	; (8003d64 <main+0x6ac>)
 8003b98:	edd3 6a00 	vldr	s13, [r3]
 8003b9c:	eeb0 1a66 	vmov.f32	s2, s13
 8003ba0:	eef0 0a47 	vmov.f32	s1, s14
 8003ba4:	eeb0 0a67 	vmov.f32	s0, s15
 8003ba8:	4611      	mov	r1, r2
 8003baa:	486f      	ldr	r0, [pc, #444]	; (8003d68 <main+0x6b0>)
 8003bac:	f000 ffa6 	bl	8004afc <Encode_Msg_PID_Gain>
						HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 20);
 8003bb0:	2214      	movs	r2, #20
 8003bb2:	496d      	ldr	r1, [pc, #436]	; (8003d68 <main+0x6b0>)
 8003bb4:	486d      	ldr	r0, [pc, #436]	; (8003d6c <main+0x6b4>)
 8003bb6:	f005 f943 	bl	8008e40 <HAL_UART_Transmit_IT>
						break;
 8003bba:	e2f5      	b.n	80041a8 <main+0xaf0>
					case 1:
						//Save PID Gain at EEPROM
						roll_out_kp = *(float *)&telemetry_rx_buf[3];
 8003bbc:	4b64      	ldr	r3, [pc, #400]	; (8003d50 <main+0x698>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a6b      	ldr	r2, [pc, #428]	; (8003d70 <main+0x6b8>)
 8003bc2:	6013      	str	r3, [r2, #0]
						roll_out_ki = *(float *)&telemetry_rx_buf[7];
 8003bc4:	4b64      	ldr	r3, [pc, #400]	; (8003d58 <main+0x6a0>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a6a      	ldr	r2, [pc, #424]	; (8003d74 <main+0x6bc>)
 8003bca:	6013      	str	r3, [r2, #0]
						roll_out_kd = *(float *)&telemetry_rx_buf[11];
 8003bcc:	4b64      	ldr	r3, [pc, #400]	; (8003d60 <main+0x6a8>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a69      	ldr	r2, [pc, #420]	; (8003d78 <main+0x6c0>)
 8003bd2:	6013      	str	r3, [r2, #0]
						EP_PIDGain_Write(telemetry_rx_buf[2], roll_out_kp, roll_out_ki, roll_out_kd);
 8003bd4:	4b5c      	ldr	r3, [pc, #368]	; (8003d48 <main+0x690>)
 8003bd6:	789a      	ldrb	r2, [r3, #2]
 8003bd8:	4b65      	ldr	r3, [pc, #404]	; (8003d70 <main+0x6b8>)
 8003bda:	edd3 7a00 	vldr	s15, [r3]
 8003bde:	4b65      	ldr	r3, [pc, #404]	; (8003d74 <main+0x6bc>)
 8003be0:	ed93 7a00 	vldr	s14, [r3]
 8003be4:	4b64      	ldr	r3, [pc, #400]	; (8003d78 <main+0x6c0>)
 8003be6:	edd3 6a00 	vldr	s13, [r3]
 8003bea:	eeb0 1a66 	vmov.f32	s2, s13
 8003bee:	eef0 0a47 	vmov.f32	s1, s14
 8003bf2:	eeb0 0a67 	vmov.f32	s0, s15
 8003bf6:	4610      	mov	r0, r2
 8003bf8:	f7fd fa24 	bl	8001044 <EP_PIDGain_Write>
						//Read PID Gain from EEPROM and FC -> GCS
						EP_PIDGain_Read(telemetry_rx_buf[2], &roll_out_kp, &roll_out_ki, &roll_out_kd);
 8003bfc:	4b52      	ldr	r3, [pc, #328]	; (8003d48 <main+0x690>)
 8003bfe:	7898      	ldrb	r0, [r3, #2]
 8003c00:	4b5d      	ldr	r3, [pc, #372]	; (8003d78 <main+0x6c0>)
 8003c02:	4a5c      	ldr	r2, [pc, #368]	; (8003d74 <main+0x6bc>)
 8003c04:	495a      	ldr	r1, [pc, #360]	; (8003d70 <main+0x6b8>)
 8003c06:	f7fd fa78 	bl	80010fa <EP_PIDGain_Read>
						Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[2], roll_out_kp, roll_out_ki, roll_out_kd);
 8003c0a:	4b4f      	ldr	r3, [pc, #316]	; (8003d48 <main+0x690>)
 8003c0c:	789a      	ldrb	r2, [r3, #2]
 8003c0e:	4b58      	ldr	r3, [pc, #352]	; (8003d70 <main+0x6b8>)
 8003c10:	edd3 7a00 	vldr	s15, [r3]
 8003c14:	4b57      	ldr	r3, [pc, #348]	; (8003d74 <main+0x6bc>)
 8003c16:	ed93 7a00 	vldr	s14, [r3]
 8003c1a:	4b57      	ldr	r3, [pc, #348]	; (8003d78 <main+0x6c0>)
 8003c1c:	edd3 6a00 	vldr	s13, [r3]
 8003c20:	eeb0 1a66 	vmov.f32	s2, s13
 8003c24:	eef0 0a47 	vmov.f32	s1, s14
 8003c28:	eeb0 0a67 	vmov.f32	s0, s15
 8003c2c:	4611      	mov	r1, r2
 8003c2e:	484e      	ldr	r0, [pc, #312]	; (8003d68 <main+0x6b0>)
 8003c30:	f000 ff64 	bl	8004afc <Encode_Msg_PID_Gain>
						HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 20);
 8003c34:	2214      	movs	r2, #20
 8003c36:	494c      	ldr	r1, [pc, #304]	; (8003d68 <main+0x6b0>)
 8003c38:	484c      	ldr	r0, [pc, #304]	; (8003d6c <main+0x6b4>)
 8003c3a:	f005 f901 	bl	8008e40 <HAL_UART_Transmit_IT>
						break;
 8003c3e:	e2b3      	b.n	80041a8 <main+0xaf0>
					case 2:
						//Save PID Gain at EEPROM
						pitch_in_kp = *(float *)&telemetry_rx_buf[3];
 8003c40:	4b43      	ldr	r3, [pc, #268]	; (8003d50 <main+0x698>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a4d      	ldr	r2, [pc, #308]	; (8003d7c <main+0x6c4>)
 8003c46:	6013      	str	r3, [r2, #0]
						pitch_in_ki = *(float *)&telemetry_rx_buf[7];
 8003c48:	4b43      	ldr	r3, [pc, #268]	; (8003d58 <main+0x6a0>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a4c      	ldr	r2, [pc, #304]	; (8003d80 <main+0x6c8>)
 8003c4e:	6013      	str	r3, [r2, #0]
						pitch_in_kd = *(float *)&telemetry_rx_buf[11];
 8003c50:	4b43      	ldr	r3, [pc, #268]	; (8003d60 <main+0x6a8>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a4b      	ldr	r2, [pc, #300]	; (8003d84 <main+0x6cc>)
 8003c56:	6013      	str	r3, [r2, #0]
						EP_PIDGain_Write(telemetry_rx_buf[2], pitch_in_kp, pitch_in_ki, pitch_in_kd);
 8003c58:	4b3b      	ldr	r3, [pc, #236]	; (8003d48 <main+0x690>)
 8003c5a:	789a      	ldrb	r2, [r3, #2]
 8003c5c:	4b47      	ldr	r3, [pc, #284]	; (8003d7c <main+0x6c4>)
 8003c5e:	edd3 7a00 	vldr	s15, [r3]
 8003c62:	4b47      	ldr	r3, [pc, #284]	; (8003d80 <main+0x6c8>)
 8003c64:	ed93 7a00 	vldr	s14, [r3]
 8003c68:	4b46      	ldr	r3, [pc, #280]	; (8003d84 <main+0x6cc>)
 8003c6a:	edd3 6a00 	vldr	s13, [r3]
 8003c6e:	eeb0 1a66 	vmov.f32	s2, s13
 8003c72:	eef0 0a47 	vmov.f32	s1, s14
 8003c76:	eeb0 0a67 	vmov.f32	s0, s15
 8003c7a:	4610      	mov	r0, r2
 8003c7c:	f7fd f9e2 	bl	8001044 <EP_PIDGain_Write>
						//Read PID Gain from EEPROM and FC -> GCS
						EP_PIDGain_Read(telemetry_rx_buf[2], &pitch_in_kp, &pitch_in_ki, &pitch_in_kd);
 8003c80:	4b31      	ldr	r3, [pc, #196]	; (8003d48 <main+0x690>)
 8003c82:	7898      	ldrb	r0, [r3, #2]
 8003c84:	4b3f      	ldr	r3, [pc, #252]	; (8003d84 <main+0x6cc>)
 8003c86:	4a3e      	ldr	r2, [pc, #248]	; (8003d80 <main+0x6c8>)
 8003c88:	493c      	ldr	r1, [pc, #240]	; (8003d7c <main+0x6c4>)
 8003c8a:	f7fd fa36 	bl	80010fa <EP_PIDGain_Read>
						Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[2], pitch_in_kp, pitch_in_ki, pitch_in_kd);
 8003c8e:	4b2e      	ldr	r3, [pc, #184]	; (8003d48 <main+0x690>)
 8003c90:	789a      	ldrb	r2, [r3, #2]
 8003c92:	4b3a      	ldr	r3, [pc, #232]	; (8003d7c <main+0x6c4>)
 8003c94:	edd3 7a00 	vldr	s15, [r3]
 8003c98:	4b39      	ldr	r3, [pc, #228]	; (8003d80 <main+0x6c8>)
 8003c9a:	ed93 7a00 	vldr	s14, [r3]
 8003c9e:	4b39      	ldr	r3, [pc, #228]	; (8003d84 <main+0x6cc>)
 8003ca0:	edd3 6a00 	vldr	s13, [r3]
 8003ca4:	eeb0 1a66 	vmov.f32	s2, s13
 8003ca8:	eef0 0a47 	vmov.f32	s1, s14
 8003cac:	eeb0 0a67 	vmov.f32	s0, s15
 8003cb0:	4611      	mov	r1, r2
 8003cb2:	482d      	ldr	r0, [pc, #180]	; (8003d68 <main+0x6b0>)
 8003cb4:	f000 ff22 	bl	8004afc <Encode_Msg_PID_Gain>
						HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 20);
 8003cb8:	2214      	movs	r2, #20
 8003cba:	492b      	ldr	r1, [pc, #172]	; (8003d68 <main+0x6b0>)
 8003cbc:	482b      	ldr	r0, [pc, #172]	; (8003d6c <main+0x6b4>)
 8003cbe:	f005 f8bf 	bl	8008e40 <HAL_UART_Transmit_IT>
						break;
 8003cc2:	e271      	b.n	80041a8 <main+0xaf0>
					case 3:
						//Save PID Gain at EEPROM
						pitch_out_kp = *(float *)&telemetry_rx_buf[3];
 8003cc4:	4b22      	ldr	r3, [pc, #136]	; (8003d50 <main+0x698>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a2f      	ldr	r2, [pc, #188]	; (8003d88 <main+0x6d0>)
 8003cca:	6013      	str	r3, [r2, #0]
						pitch_out_ki = *(float *)&telemetry_rx_buf[7];
 8003ccc:	4b22      	ldr	r3, [pc, #136]	; (8003d58 <main+0x6a0>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a2e      	ldr	r2, [pc, #184]	; (8003d8c <main+0x6d4>)
 8003cd2:	6013      	str	r3, [r2, #0]
						pitch_out_kd = *(float *)&telemetry_rx_buf[11];
 8003cd4:	4b22      	ldr	r3, [pc, #136]	; (8003d60 <main+0x6a8>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a2d      	ldr	r2, [pc, #180]	; (8003d90 <main+0x6d8>)
 8003cda:	6013      	str	r3, [r2, #0]
						EP_PIDGain_Write(telemetry_rx_buf[2], pitch_out_kp, pitch_out_ki, pitch_out_kd);
 8003cdc:	4b1a      	ldr	r3, [pc, #104]	; (8003d48 <main+0x690>)
 8003cde:	789a      	ldrb	r2, [r3, #2]
 8003ce0:	4b29      	ldr	r3, [pc, #164]	; (8003d88 <main+0x6d0>)
 8003ce2:	edd3 7a00 	vldr	s15, [r3]
 8003ce6:	4b29      	ldr	r3, [pc, #164]	; (8003d8c <main+0x6d4>)
 8003ce8:	ed93 7a00 	vldr	s14, [r3]
 8003cec:	4b28      	ldr	r3, [pc, #160]	; (8003d90 <main+0x6d8>)
 8003cee:	edd3 6a00 	vldr	s13, [r3]
 8003cf2:	eeb0 1a66 	vmov.f32	s2, s13
 8003cf6:	eef0 0a47 	vmov.f32	s1, s14
 8003cfa:	eeb0 0a67 	vmov.f32	s0, s15
 8003cfe:	4610      	mov	r0, r2
 8003d00:	f7fd f9a0 	bl	8001044 <EP_PIDGain_Write>
						//Read PID Gain from EEPROM and FC -> GCS
						EP_PIDGain_Read(telemetry_rx_buf[2], &pitch_out_kp, &pitch_out_ki, &pitch_out_kd);
 8003d04:	4b10      	ldr	r3, [pc, #64]	; (8003d48 <main+0x690>)
 8003d06:	7898      	ldrb	r0, [r3, #2]
 8003d08:	4b21      	ldr	r3, [pc, #132]	; (8003d90 <main+0x6d8>)
 8003d0a:	4a20      	ldr	r2, [pc, #128]	; (8003d8c <main+0x6d4>)
 8003d0c:	491e      	ldr	r1, [pc, #120]	; (8003d88 <main+0x6d0>)
 8003d0e:	f7fd f9f4 	bl	80010fa <EP_PIDGain_Read>
						Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[2], pitch_out_kp, pitch_out_ki, pitch_out_kd);
 8003d12:	4b0d      	ldr	r3, [pc, #52]	; (8003d48 <main+0x690>)
 8003d14:	789a      	ldrb	r2, [r3, #2]
 8003d16:	4b1c      	ldr	r3, [pc, #112]	; (8003d88 <main+0x6d0>)
 8003d18:	edd3 7a00 	vldr	s15, [r3]
 8003d1c:	4b1b      	ldr	r3, [pc, #108]	; (8003d8c <main+0x6d4>)
 8003d1e:	ed93 7a00 	vldr	s14, [r3]
 8003d22:	4b1b      	ldr	r3, [pc, #108]	; (8003d90 <main+0x6d8>)
 8003d24:	edd3 6a00 	vldr	s13, [r3]
 8003d28:	eeb0 1a66 	vmov.f32	s2, s13
 8003d2c:	eef0 0a47 	vmov.f32	s1, s14
 8003d30:	eeb0 0a67 	vmov.f32	s0, s15
 8003d34:	4611      	mov	r1, r2
 8003d36:	480c      	ldr	r0, [pc, #48]	; (8003d68 <main+0x6b0>)
 8003d38:	f000 fee0 	bl	8004afc <Encode_Msg_PID_Gain>
						HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 20);
 8003d3c:	2214      	movs	r2, #20
 8003d3e:	490a      	ldr	r1, [pc, #40]	; (8003d68 <main+0x6b0>)
 8003d40:	480a      	ldr	r0, [pc, #40]	; (8003d6c <main+0x6b4>)
 8003d42:	f005 f87d 	bl	8008e40 <HAL_UART_Transmit_IT>
						break;
 8003d46:	e22f      	b.n	80041a8 <main+0xaf0>
 8003d48:	200004d0 	.word	0x200004d0
 8003d4c:	40000400 	.word	0x40000400
 8003d50:	200004d3 	.word	0x200004d3
 8003d54:	200004bc 	.word	0x200004bc
 8003d58:	200004d7 	.word	0x200004d7
 8003d5c:	200004c8 	.word	0x200004c8
 8003d60:	200004db 	.word	0x200004db
 8003d64:	20000530 	.word	0x20000530
 8003d68:	20000500 	.word	0x20000500
 8003d6c:	20000578 	.word	0x20000578
 8003d70:	2000052c 	.word	0x2000052c
 8003d74:	200004f4 	.word	0x200004f4
 8003d78:	200004e4 	.word	0x200004e4
 8003d7c:	200004b4 	.word	0x200004b4
 8003d80:	200004a8 	.word	0x200004a8
 8003d84:	20000528 	.word	0x20000528
 8003d88:	200004c4 	.word	0x200004c4
 8003d8c:	200004cc 	.word	0x200004cc
 8003d90:	200004fc 	.word	0x200004fc
					case 4:
						//Save PID Gain at EEPROM
						yaw_heading_kp = *(float *)&telemetry_rx_buf[3];
 8003d94:	4ba0      	ldr	r3, [pc, #640]	; (8004018 <main+0x960>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4aa0      	ldr	r2, [pc, #640]	; (800401c <main+0x964>)
 8003d9a:	6013      	str	r3, [r2, #0]
						yaw_heading_ki = *(float *)&telemetry_rx_buf[7];
 8003d9c:	4ba0      	ldr	r3, [pc, #640]	; (8004020 <main+0x968>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4aa0      	ldr	r2, [pc, #640]	; (8004024 <main+0x96c>)
 8003da2:	6013      	str	r3, [r2, #0]
						yaw_heading_kd = *(float *)&telemetry_rx_buf[11];
 8003da4:	4ba0      	ldr	r3, [pc, #640]	; (8004028 <main+0x970>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4aa0      	ldr	r2, [pc, #640]	; (800402c <main+0x974>)
 8003daa:	6013      	str	r3, [r2, #0]
						EP_PIDGain_Write(telemetry_rx_buf[2], yaw_heading_kp, yaw_heading_ki, yaw_heading_kd);
 8003dac:	4ba0      	ldr	r3, [pc, #640]	; (8004030 <main+0x978>)
 8003dae:	789a      	ldrb	r2, [r3, #2]
 8003db0:	4b9a      	ldr	r3, [pc, #616]	; (800401c <main+0x964>)
 8003db2:	edd3 7a00 	vldr	s15, [r3]
 8003db6:	4b9b      	ldr	r3, [pc, #620]	; (8004024 <main+0x96c>)
 8003db8:	ed93 7a00 	vldr	s14, [r3]
 8003dbc:	4b9b      	ldr	r3, [pc, #620]	; (800402c <main+0x974>)
 8003dbe:	edd3 6a00 	vldr	s13, [r3]
 8003dc2:	eeb0 1a66 	vmov.f32	s2, s13
 8003dc6:	eef0 0a47 	vmov.f32	s1, s14
 8003dca:	eeb0 0a67 	vmov.f32	s0, s15
 8003dce:	4610      	mov	r0, r2
 8003dd0:	f7fd f938 	bl	8001044 <EP_PIDGain_Write>
						//Read PID Gain from EEPROM and FC -> GCS
						EP_PIDGain_Read(telemetry_rx_buf[2], &yaw_heading_kp, &yaw_heading_ki, &yaw_heading_kd);
 8003dd4:	4b96      	ldr	r3, [pc, #600]	; (8004030 <main+0x978>)
 8003dd6:	7898      	ldrb	r0, [r3, #2]
 8003dd8:	4b94      	ldr	r3, [pc, #592]	; (800402c <main+0x974>)
 8003dda:	4a92      	ldr	r2, [pc, #584]	; (8004024 <main+0x96c>)
 8003ddc:	498f      	ldr	r1, [pc, #572]	; (800401c <main+0x964>)
 8003dde:	f7fd f98c 	bl	80010fa <EP_PIDGain_Read>
						Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[2], yaw_heading_kp, yaw_heading_ki, yaw_heading_kd);
 8003de2:	4b93      	ldr	r3, [pc, #588]	; (8004030 <main+0x978>)
 8003de4:	789a      	ldrb	r2, [r3, #2]
 8003de6:	4b8d      	ldr	r3, [pc, #564]	; (800401c <main+0x964>)
 8003de8:	edd3 7a00 	vldr	s15, [r3]
 8003dec:	4b8d      	ldr	r3, [pc, #564]	; (8004024 <main+0x96c>)
 8003dee:	ed93 7a00 	vldr	s14, [r3]
 8003df2:	4b8e      	ldr	r3, [pc, #568]	; (800402c <main+0x974>)
 8003df4:	edd3 6a00 	vldr	s13, [r3]
 8003df8:	eeb0 1a66 	vmov.f32	s2, s13
 8003dfc:	eef0 0a47 	vmov.f32	s1, s14
 8003e00:	eeb0 0a67 	vmov.f32	s0, s15
 8003e04:	4611      	mov	r1, r2
 8003e06:	488b      	ldr	r0, [pc, #556]	; (8004034 <main+0x97c>)
 8003e08:	f000 fe78 	bl	8004afc <Encode_Msg_PID_Gain>
						HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 20);
 8003e0c:	2214      	movs	r2, #20
 8003e0e:	4989      	ldr	r1, [pc, #548]	; (8004034 <main+0x97c>)
 8003e10:	4889      	ldr	r0, [pc, #548]	; (8004038 <main+0x980>)
 8003e12:	f005 f815 	bl	8008e40 <HAL_UART_Transmit_IT>
						break;
 8003e16:	e1c7      	b.n	80041a8 <main+0xaf0>
					case 5:
						//Save PID Gain at EEPROM
						yaw_rate_kp = *(float *)&telemetry_rx_buf[3];
 8003e18:	4b7f      	ldr	r3, [pc, #508]	; (8004018 <main+0x960>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a87      	ldr	r2, [pc, #540]	; (800403c <main+0x984>)
 8003e1e:	6013      	str	r3, [r2, #0]
						yaw_rate_ki = *(float *)&telemetry_rx_buf[7];
 8003e20:	4b7f      	ldr	r3, [pc, #508]	; (8004020 <main+0x968>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a86      	ldr	r2, [pc, #536]	; (8004040 <main+0x988>)
 8003e26:	6013      	str	r3, [r2, #0]
						yaw_rate_kd = *(float *)&telemetry_rx_buf[11];
 8003e28:	4b7f      	ldr	r3, [pc, #508]	; (8004028 <main+0x970>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a85      	ldr	r2, [pc, #532]	; (8004044 <main+0x98c>)
 8003e2e:	6013      	str	r3, [r2, #0]
						EP_PIDGain_Write(telemetry_rx_buf[2], yaw_rate_kp, yaw_rate_ki, yaw_rate_kd);
 8003e30:	4b7f      	ldr	r3, [pc, #508]	; (8004030 <main+0x978>)
 8003e32:	789a      	ldrb	r2, [r3, #2]
 8003e34:	4b81      	ldr	r3, [pc, #516]	; (800403c <main+0x984>)
 8003e36:	edd3 7a00 	vldr	s15, [r3]
 8003e3a:	4b81      	ldr	r3, [pc, #516]	; (8004040 <main+0x988>)
 8003e3c:	ed93 7a00 	vldr	s14, [r3]
 8003e40:	4b80      	ldr	r3, [pc, #512]	; (8004044 <main+0x98c>)
 8003e42:	edd3 6a00 	vldr	s13, [r3]
 8003e46:	eeb0 1a66 	vmov.f32	s2, s13
 8003e4a:	eef0 0a47 	vmov.f32	s1, s14
 8003e4e:	eeb0 0a67 	vmov.f32	s0, s15
 8003e52:	4610      	mov	r0, r2
 8003e54:	f7fd f8f6 	bl	8001044 <EP_PIDGain_Write>
						//Read PID Gain from EEPROM and FC -> GCS
						EP_PIDGain_Read(telemetry_rx_buf[2], &yaw_rate_kp, &yaw_rate_ki, &yaw_rate_kd);
 8003e58:	4b75      	ldr	r3, [pc, #468]	; (8004030 <main+0x978>)
 8003e5a:	7898      	ldrb	r0, [r3, #2]
 8003e5c:	4b79      	ldr	r3, [pc, #484]	; (8004044 <main+0x98c>)
 8003e5e:	4a78      	ldr	r2, [pc, #480]	; (8004040 <main+0x988>)
 8003e60:	4976      	ldr	r1, [pc, #472]	; (800403c <main+0x984>)
 8003e62:	f7fd f94a 	bl	80010fa <EP_PIDGain_Read>
						Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[2], yaw_rate_kp, yaw_rate_ki, yaw_rate_kd);
 8003e66:	4b72      	ldr	r3, [pc, #456]	; (8004030 <main+0x978>)
 8003e68:	789a      	ldrb	r2, [r3, #2]
 8003e6a:	4b74      	ldr	r3, [pc, #464]	; (800403c <main+0x984>)
 8003e6c:	edd3 7a00 	vldr	s15, [r3]
 8003e70:	4b73      	ldr	r3, [pc, #460]	; (8004040 <main+0x988>)
 8003e72:	ed93 7a00 	vldr	s14, [r3]
 8003e76:	4b73      	ldr	r3, [pc, #460]	; (8004044 <main+0x98c>)
 8003e78:	edd3 6a00 	vldr	s13, [r3]
 8003e7c:	eeb0 1a66 	vmov.f32	s2, s13
 8003e80:	eef0 0a47 	vmov.f32	s1, s14
 8003e84:	eeb0 0a67 	vmov.f32	s0, s15
 8003e88:	4611      	mov	r1, r2
 8003e8a:	486a      	ldr	r0, [pc, #424]	; (8004034 <main+0x97c>)
 8003e8c:	f000 fe36 	bl	8004afc <Encode_Msg_PID_Gain>
						HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 20);
 8003e90:	2214      	movs	r2, #20
 8003e92:	4968      	ldr	r1, [pc, #416]	; (8004034 <main+0x97c>)
 8003e94:	4868      	ldr	r0, [pc, #416]	; (8004038 <main+0x980>)
 8003e96:	f004 ffd3 	bl	8008e40 <HAL_UART_Transmit_IT>
						break;
 8003e9a:	e185      	b.n	80041a8 <main+0xaf0>
					case 0x10:
						switch(telemetry_rx_buf[3]) {
 8003e9c:	4b64      	ldr	r3, [pc, #400]	; (8004030 <main+0x978>)
 8003e9e:	78db      	ldrb	r3, [r3, #3]
 8003ea0:	2b06      	cmp	r3, #6
 8003ea2:	f200 8180 	bhi.w	80041a6 <main+0xaee>
 8003ea6:	a201      	add	r2, pc, #4	; (adr r2, 8003eac <main+0x7f4>)
 8003ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eac:	08003ec9 	.word	0x08003ec9
 8003eb0:	08003f01 	.word	0x08003f01
 8003eb4:	08003f39 	.word	0x08003f39
 8003eb8:	08003f71 	.word	0x08003f71
 8003ebc:	08003fa9 	.word	0x08003fa9
 8003ec0:	08003fe1 	.word	0x08003fe1
 8003ec4:	08004079 	.word	0x08004079
						case 0:
							Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[3], roll_in_kp, roll_in_ki, roll_in_kd);
 8003ec8:	4b59      	ldr	r3, [pc, #356]	; (8004030 <main+0x978>)
 8003eca:	78da      	ldrb	r2, [r3, #3]
 8003ecc:	4b5e      	ldr	r3, [pc, #376]	; (8004048 <main+0x990>)
 8003ece:	edd3 7a00 	vldr	s15, [r3]
 8003ed2:	4b5e      	ldr	r3, [pc, #376]	; (800404c <main+0x994>)
 8003ed4:	ed93 7a00 	vldr	s14, [r3]
 8003ed8:	4b5d      	ldr	r3, [pc, #372]	; (8004050 <main+0x998>)
 8003eda:	edd3 6a00 	vldr	s13, [r3]
 8003ede:	eeb0 1a66 	vmov.f32	s2, s13
 8003ee2:	eef0 0a47 	vmov.f32	s1, s14
 8003ee6:	eeb0 0a67 	vmov.f32	s0, s15
 8003eea:	4611      	mov	r1, r2
 8003eec:	4851      	ldr	r0, [pc, #324]	; (8004034 <main+0x97c>)
 8003eee:	f000 fe05 	bl	8004afc <Encode_Msg_PID_Gain>
							HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8003ef2:	230a      	movs	r3, #10
 8003ef4:	2214      	movs	r2, #20
 8003ef6:	494f      	ldr	r1, [pc, #316]	; (8004034 <main+0x97c>)
 8003ef8:	484f      	ldr	r0, [pc, #316]	; (8004038 <main+0x980>)
 8003efa:	f004 ff08 	bl	8008d0e <HAL_UART_Transmit>
							break;
 8003efe:	e152      	b.n	80041a6 <main+0xaee>
						case 1:
							Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[3], roll_out_kp, roll_out_ki, roll_out_kd);
 8003f00:	4b4b      	ldr	r3, [pc, #300]	; (8004030 <main+0x978>)
 8003f02:	78da      	ldrb	r2, [r3, #3]
 8003f04:	4b53      	ldr	r3, [pc, #332]	; (8004054 <main+0x99c>)
 8003f06:	edd3 7a00 	vldr	s15, [r3]
 8003f0a:	4b53      	ldr	r3, [pc, #332]	; (8004058 <main+0x9a0>)
 8003f0c:	ed93 7a00 	vldr	s14, [r3]
 8003f10:	4b52      	ldr	r3, [pc, #328]	; (800405c <main+0x9a4>)
 8003f12:	edd3 6a00 	vldr	s13, [r3]
 8003f16:	eeb0 1a66 	vmov.f32	s2, s13
 8003f1a:	eef0 0a47 	vmov.f32	s1, s14
 8003f1e:	eeb0 0a67 	vmov.f32	s0, s15
 8003f22:	4611      	mov	r1, r2
 8003f24:	4843      	ldr	r0, [pc, #268]	; (8004034 <main+0x97c>)
 8003f26:	f000 fde9 	bl	8004afc <Encode_Msg_PID_Gain>
							HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8003f2a:	230a      	movs	r3, #10
 8003f2c:	2214      	movs	r2, #20
 8003f2e:	4941      	ldr	r1, [pc, #260]	; (8004034 <main+0x97c>)
 8003f30:	4841      	ldr	r0, [pc, #260]	; (8004038 <main+0x980>)
 8003f32:	f004 feec 	bl	8008d0e <HAL_UART_Transmit>
							break;
 8003f36:	e136      	b.n	80041a6 <main+0xaee>
						case 2:
							Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[3], pitch_in_kp, pitch_in_ki, pitch_in_kd);
 8003f38:	4b3d      	ldr	r3, [pc, #244]	; (8004030 <main+0x978>)
 8003f3a:	78da      	ldrb	r2, [r3, #3]
 8003f3c:	4b48      	ldr	r3, [pc, #288]	; (8004060 <main+0x9a8>)
 8003f3e:	edd3 7a00 	vldr	s15, [r3]
 8003f42:	4b48      	ldr	r3, [pc, #288]	; (8004064 <main+0x9ac>)
 8003f44:	ed93 7a00 	vldr	s14, [r3]
 8003f48:	4b47      	ldr	r3, [pc, #284]	; (8004068 <main+0x9b0>)
 8003f4a:	edd3 6a00 	vldr	s13, [r3]
 8003f4e:	eeb0 1a66 	vmov.f32	s2, s13
 8003f52:	eef0 0a47 	vmov.f32	s1, s14
 8003f56:	eeb0 0a67 	vmov.f32	s0, s15
 8003f5a:	4611      	mov	r1, r2
 8003f5c:	4835      	ldr	r0, [pc, #212]	; (8004034 <main+0x97c>)
 8003f5e:	f000 fdcd 	bl	8004afc <Encode_Msg_PID_Gain>
							HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8003f62:	230a      	movs	r3, #10
 8003f64:	2214      	movs	r2, #20
 8003f66:	4933      	ldr	r1, [pc, #204]	; (8004034 <main+0x97c>)
 8003f68:	4833      	ldr	r0, [pc, #204]	; (8004038 <main+0x980>)
 8003f6a:	f004 fed0 	bl	8008d0e <HAL_UART_Transmit>
							break;
 8003f6e:	e11a      	b.n	80041a6 <main+0xaee>
						case 3:
							Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[3], pitch_out_kp, pitch_out_ki, pitch_out_kd);
 8003f70:	4b2f      	ldr	r3, [pc, #188]	; (8004030 <main+0x978>)
 8003f72:	78da      	ldrb	r2, [r3, #3]
 8003f74:	4b3d      	ldr	r3, [pc, #244]	; (800406c <main+0x9b4>)
 8003f76:	edd3 7a00 	vldr	s15, [r3]
 8003f7a:	4b3d      	ldr	r3, [pc, #244]	; (8004070 <main+0x9b8>)
 8003f7c:	ed93 7a00 	vldr	s14, [r3]
 8003f80:	4b3c      	ldr	r3, [pc, #240]	; (8004074 <main+0x9bc>)
 8003f82:	edd3 6a00 	vldr	s13, [r3]
 8003f86:	eeb0 1a66 	vmov.f32	s2, s13
 8003f8a:	eef0 0a47 	vmov.f32	s1, s14
 8003f8e:	eeb0 0a67 	vmov.f32	s0, s15
 8003f92:	4611      	mov	r1, r2
 8003f94:	4827      	ldr	r0, [pc, #156]	; (8004034 <main+0x97c>)
 8003f96:	f000 fdb1 	bl	8004afc <Encode_Msg_PID_Gain>
							HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8003f9a:	230a      	movs	r3, #10
 8003f9c:	2214      	movs	r2, #20
 8003f9e:	4925      	ldr	r1, [pc, #148]	; (8004034 <main+0x97c>)
 8003fa0:	4825      	ldr	r0, [pc, #148]	; (8004038 <main+0x980>)
 8003fa2:	f004 feb4 	bl	8008d0e <HAL_UART_Transmit>
							break;
 8003fa6:	e0fe      	b.n	80041a6 <main+0xaee>
						case 4:
							Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[3], yaw_heading_kp, yaw_heading_ki, yaw_heading_kd);
 8003fa8:	4b21      	ldr	r3, [pc, #132]	; (8004030 <main+0x978>)
 8003faa:	78da      	ldrb	r2, [r3, #3]
 8003fac:	4b1b      	ldr	r3, [pc, #108]	; (800401c <main+0x964>)
 8003fae:	edd3 7a00 	vldr	s15, [r3]
 8003fb2:	4b1c      	ldr	r3, [pc, #112]	; (8004024 <main+0x96c>)
 8003fb4:	ed93 7a00 	vldr	s14, [r3]
 8003fb8:	4b1c      	ldr	r3, [pc, #112]	; (800402c <main+0x974>)
 8003fba:	edd3 6a00 	vldr	s13, [r3]
 8003fbe:	eeb0 1a66 	vmov.f32	s2, s13
 8003fc2:	eef0 0a47 	vmov.f32	s1, s14
 8003fc6:	eeb0 0a67 	vmov.f32	s0, s15
 8003fca:	4611      	mov	r1, r2
 8003fcc:	4819      	ldr	r0, [pc, #100]	; (8004034 <main+0x97c>)
 8003fce:	f000 fd95 	bl	8004afc <Encode_Msg_PID_Gain>
							HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8003fd2:	230a      	movs	r3, #10
 8003fd4:	2214      	movs	r2, #20
 8003fd6:	4917      	ldr	r1, [pc, #92]	; (8004034 <main+0x97c>)
 8003fd8:	4817      	ldr	r0, [pc, #92]	; (8004038 <main+0x980>)
 8003fda:	f004 fe98 	bl	8008d0e <HAL_UART_Transmit>
							break;
 8003fde:	e0e2      	b.n	80041a6 <main+0xaee>
						case 5:
							Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[3], yaw_rate_kp, yaw_rate_ki, yaw_rate_kd);
 8003fe0:	4b13      	ldr	r3, [pc, #76]	; (8004030 <main+0x978>)
 8003fe2:	78da      	ldrb	r2, [r3, #3]
 8003fe4:	4b15      	ldr	r3, [pc, #84]	; (800403c <main+0x984>)
 8003fe6:	edd3 7a00 	vldr	s15, [r3]
 8003fea:	4b15      	ldr	r3, [pc, #84]	; (8004040 <main+0x988>)
 8003fec:	ed93 7a00 	vldr	s14, [r3]
 8003ff0:	4b14      	ldr	r3, [pc, #80]	; (8004044 <main+0x98c>)
 8003ff2:	edd3 6a00 	vldr	s13, [r3]
 8003ff6:	eeb0 1a66 	vmov.f32	s2, s13
 8003ffa:	eef0 0a47 	vmov.f32	s1, s14
 8003ffe:	eeb0 0a67 	vmov.f32	s0, s15
 8004002:	4611      	mov	r1, r2
 8004004:	480b      	ldr	r0, [pc, #44]	; (8004034 <main+0x97c>)
 8004006:	f000 fd79 	bl	8004afc <Encode_Msg_PID_Gain>
							HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 800400a:	230a      	movs	r3, #10
 800400c:	2214      	movs	r2, #20
 800400e:	4909      	ldr	r1, [pc, #36]	; (8004034 <main+0x97c>)
 8004010:	4809      	ldr	r0, [pc, #36]	; (8004038 <main+0x980>)
 8004012:	f004 fe7c 	bl	8008d0e <HAL_UART_Transmit>
							break;
 8004016:	e0c6      	b.n	80041a6 <main+0xaee>
 8004018:	200004d3 	.word	0x200004d3
 800401c:	200004f8 	.word	0x200004f8
 8004020:	200004d7 	.word	0x200004d7
 8004024:	200004ac 	.word	0x200004ac
 8004028:	200004db 	.word	0x200004db
 800402c:	200004e8 	.word	0x200004e8
 8004030:	200004d0 	.word	0x200004d0
 8004034:	20000500 	.word	0x20000500
 8004038:	20000578 	.word	0x20000578
 800403c:	200004b8 	.word	0x200004b8
 8004040:	200004f0 	.word	0x200004f0
 8004044:	200004c0 	.word	0x200004c0
 8004048:	200004bc 	.word	0x200004bc
 800404c:	200004c8 	.word	0x200004c8
 8004050:	20000530 	.word	0x20000530
 8004054:	2000052c 	.word	0x2000052c
 8004058:	200004f4 	.word	0x200004f4
 800405c:	200004e4 	.word	0x200004e4
 8004060:	200004b4 	.word	0x200004b4
 8004064:	200004a8 	.word	0x200004a8
 8004068:	20000528 	.word	0x20000528
 800406c:	200004c4 	.word	0x200004c4
 8004070:	200004cc 	.word	0x200004cc
 8004074:	200004fc 	.word	0x200004fc
						case 6:
							Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 0, roll_in_kp, roll_in_ki, roll_in_kd);
 8004078:	4b72      	ldr	r3, [pc, #456]	; (8004244 <main+0xb8c>)
 800407a:	edd3 7a00 	vldr	s15, [r3]
 800407e:	4b72      	ldr	r3, [pc, #456]	; (8004248 <main+0xb90>)
 8004080:	ed93 7a00 	vldr	s14, [r3]
 8004084:	4b71      	ldr	r3, [pc, #452]	; (800424c <main+0xb94>)
 8004086:	edd3 6a00 	vldr	s13, [r3]
 800408a:	eeb0 1a66 	vmov.f32	s2, s13
 800408e:	eef0 0a47 	vmov.f32	s1, s14
 8004092:	eeb0 0a67 	vmov.f32	s0, s15
 8004096:	2100      	movs	r1, #0
 8004098:	486d      	ldr	r0, [pc, #436]	; (8004250 <main+0xb98>)
 800409a:	f000 fd2f 	bl	8004afc <Encode_Msg_PID_Gain>
							HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 800409e:	230a      	movs	r3, #10
 80040a0:	2214      	movs	r2, #20
 80040a2:	496b      	ldr	r1, [pc, #428]	; (8004250 <main+0xb98>)
 80040a4:	486b      	ldr	r0, [pc, #428]	; (8004254 <main+0xb9c>)
 80040a6:	f004 fe32 	bl	8008d0e <HAL_UART_Transmit>

							Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 1, roll_out_kp, roll_out_ki, roll_out_kd);
 80040aa:	4b6b      	ldr	r3, [pc, #428]	; (8004258 <main+0xba0>)
 80040ac:	edd3 7a00 	vldr	s15, [r3]
 80040b0:	4b6a      	ldr	r3, [pc, #424]	; (800425c <main+0xba4>)
 80040b2:	ed93 7a00 	vldr	s14, [r3]
 80040b6:	4b6a      	ldr	r3, [pc, #424]	; (8004260 <main+0xba8>)
 80040b8:	edd3 6a00 	vldr	s13, [r3]
 80040bc:	eeb0 1a66 	vmov.f32	s2, s13
 80040c0:	eef0 0a47 	vmov.f32	s1, s14
 80040c4:	eeb0 0a67 	vmov.f32	s0, s15
 80040c8:	2101      	movs	r1, #1
 80040ca:	4861      	ldr	r0, [pc, #388]	; (8004250 <main+0xb98>)
 80040cc:	f000 fd16 	bl	8004afc <Encode_Msg_PID_Gain>
							HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 80040d0:	230a      	movs	r3, #10
 80040d2:	2214      	movs	r2, #20
 80040d4:	495e      	ldr	r1, [pc, #376]	; (8004250 <main+0xb98>)
 80040d6:	485f      	ldr	r0, [pc, #380]	; (8004254 <main+0xb9c>)
 80040d8:	f004 fe19 	bl	8008d0e <HAL_UART_Transmit>

							Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 2, pitch_in_kp, pitch_in_ki, pitch_in_kd);
 80040dc:	4b61      	ldr	r3, [pc, #388]	; (8004264 <main+0xbac>)
 80040de:	edd3 7a00 	vldr	s15, [r3]
 80040e2:	4b61      	ldr	r3, [pc, #388]	; (8004268 <main+0xbb0>)
 80040e4:	ed93 7a00 	vldr	s14, [r3]
 80040e8:	4b60      	ldr	r3, [pc, #384]	; (800426c <main+0xbb4>)
 80040ea:	edd3 6a00 	vldr	s13, [r3]
 80040ee:	eeb0 1a66 	vmov.f32	s2, s13
 80040f2:	eef0 0a47 	vmov.f32	s1, s14
 80040f6:	eeb0 0a67 	vmov.f32	s0, s15
 80040fa:	2102      	movs	r1, #2
 80040fc:	4854      	ldr	r0, [pc, #336]	; (8004250 <main+0xb98>)
 80040fe:	f000 fcfd 	bl	8004afc <Encode_Msg_PID_Gain>
							HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8004102:	230a      	movs	r3, #10
 8004104:	2214      	movs	r2, #20
 8004106:	4952      	ldr	r1, [pc, #328]	; (8004250 <main+0xb98>)
 8004108:	4852      	ldr	r0, [pc, #328]	; (8004254 <main+0xb9c>)
 800410a:	f004 fe00 	bl	8008d0e <HAL_UART_Transmit>

							Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 3, pitch_out_kp, pitch_out_ki, pitch_out_kd);
 800410e:	4b58      	ldr	r3, [pc, #352]	; (8004270 <main+0xbb8>)
 8004110:	edd3 7a00 	vldr	s15, [r3]
 8004114:	4b57      	ldr	r3, [pc, #348]	; (8004274 <main+0xbbc>)
 8004116:	ed93 7a00 	vldr	s14, [r3]
 800411a:	4b57      	ldr	r3, [pc, #348]	; (8004278 <main+0xbc0>)
 800411c:	edd3 6a00 	vldr	s13, [r3]
 8004120:	eeb0 1a66 	vmov.f32	s2, s13
 8004124:	eef0 0a47 	vmov.f32	s1, s14
 8004128:	eeb0 0a67 	vmov.f32	s0, s15
 800412c:	2103      	movs	r1, #3
 800412e:	4848      	ldr	r0, [pc, #288]	; (8004250 <main+0xb98>)
 8004130:	f000 fce4 	bl	8004afc <Encode_Msg_PID_Gain>
							HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8004134:	230a      	movs	r3, #10
 8004136:	2214      	movs	r2, #20
 8004138:	4945      	ldr	r1, [pc, #276]	; (8004250 <main+0xb98>)
 800413a:	4846      	ldr	r0, [pc, #280]	; (8004254 <main+0xb9c>)
 800413c:	f004 fde7 	bl	8008d0e <HAL_UART_Transmit>

							Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 4, yaw_heading_kp, yaw_heading_ki, yaw_heading_kd);
 8004140:	4b4e      	ldr	r3, [pc, #312]	; (800427c <main+0xbc4>)
 8004142:	edd3 7a00 	vldr	s15, [r3]
 8004146:	4b4e      	ldr	r3, [pc, #312]	; (8004280 <main+0xbc8>)
 8004148:	ed93 7a00 	vldr	s14, [r3]
 800414c:	4b4d      	ldr	r3, [pc, #308]	; (8004284 <main+0xbcc>)
 800414e:	edd3 6a00 	vldr	s13, [r3]
 8004152:	eeb0 1a66 	vmov.f32	s2, s13
 8004156:	eef0 0a47 	vmov.f32	s1, s14
 800415a:	eeb0 0a67 	vmov.f32	s0, s15
 800415e:	2104      	movs	r1, #4
 8004160:	483b      	ldr	r0, [pc, #236]	; (8004250 <main+0xb98>)
 8004162:	f000 fccb 	bl	8004afc <Encode_Msg_PID_Gain>
							HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8004166:	230a      	movs	r3, #10
 8004168:	2214      	movs	r2, #20
 800416a:	4939      	ldr	r1, [pc, #228]	; (8004250 <main+0xb98>)
 800416c:	4839      	ldr	r0, [pc, #228]	; (8004254 <main+0xb9c>)
 800416e:	f004 fdce 	bl	8008d0e <HAL_UART_Transmit>

							Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 5, yaw_rate_kp, yaw_rate_ki, yaw_rate_kd);
 8004172:	4b45      	ldr	r3, [pc, #276]	; (8004288 <main+0xbd0>)
 8004174:	edd3 7a00 	vldr	s15, [r3]
 8004178:	4b44      	ldr	r3, [pc, #272]	; (800428c <main+0xbd4>)
 800417a:	ed93 7a00 	vldr	s14, [r3]
 800417e:	4b44      	ldr	r3, [pc, #272]	; (8004290 <main+0xbd8>)
 8004180:	edd3 6a00 	vldr	s13, [r3]
 8004184:	eeb0 1a66 	vmov.f32	s2, s13
 8004188:	eef0 0a47 	vmov.f32	s1, s14
 800418c:	eeb0 0a67 	vmov.f32	s0, s15
 8004190:	2105      	movs	r1, #5
 8004192:	482f      	ldr	r0, [pc, #188]	; (8004250 <main+0xb98>)
 8004194:	f000 fcb2 	bl	8004afc <Encode_Msg_PID_Gain>
							HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8004198:	230a      	movs	r3, #10
 800419a:	2214      	movs	r2, #20
 800419c:	492c      	ldr	r1, [pc, #176]	; (8004250 <main+0xb98>)
 800419e:	482d      	ldr	r0, [pc, #180]	; (8004254 <main+0xb9c>)
 80041a0:	f004 fdb5 	bl	8008d0e <HAL_UART_Transmit>
							break;
 80041a4:	bf00      	nop
						}
						break;
 80041a6:	bf00      	nop
					}
				}
			}
		}

		if (tim7_20ms_flag == 1 && tim7_100ms_flag != 1) {
 80041a8:	4b3a      	ldr	r3, [pc, #232]	; (8004294 <main+0xbdc>)
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d10f      	bne.n	80041d0 <main+0xb18>
 80041b0:	4b39      	ldr	r3, [pc, #228]	; (8004298 <main+0xbe0>)
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d00b      	beq.n	80041d0 <main+0xb18>
			//20ms - 50Hz
			tim7_20ms_flag = 0;
 80041b8:	4b36      	ldr	r3, [pc, #216]	; (8004294 <main+0xbdc>)
 80041ba:	2200      	movs	r2, #0
 80041bc:	701a      	strb	r2, [r3, #0]
			Encode_Msg_AHRS(&telemetry_tx_buf[0]);
 80041be:	4824      	ldr	r0, [pc, #144]	; (8004250 <main+0xb98>)
 80041c0:	f000 fa62 	bl	8004688 <Encode_Msg_AHRS>
			//Transmit
			HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 20);
 80041c4:	2214      	movs	r2, #20
 80041c6:	4922      	ldr	r1, [pc, #136]	; (8004250 <main+0xb98>)
 80041c8:	4822      	ldr	r0, [pc, #136]	; (8004254 <main+0xb9c>)
 80041ca:	f004 fe39 	bl	8008e40 <HAL_UART_Transmit_IT>
 80041ce:	e018      	b.n	8004202 <main+0xb4a>
		}
		else if (tim7_100ms_flag == 1 && tim7_20ms_flag == 1) {
 80041d0:	4b31      	ldr	r3, [pc, #196]	; (8004298 <main+0xbe0>)
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d114      	bne.n	8004202 <main+0xb4a>
 80041d8:	4b2e      	ldr	r3, [pc, #184]	; (8004294 <main+0xbdc>)
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d110      	bne.n	8004202 <main+0xb4a>
			//100ms - 10Hz
			tim7_100ms_flag = 0;
 80041e0:	4b2d      	ldr	r3, [pc, #180]	; (8004298 <main+0xbe0>)
 80041e2:	2200      	movs	r2, #0
 80041e4:	701a      	strb	r2, [r3, #0]
			//20ms - 50Hz
			tim7_20ms_flag = 0;
 80041e6:	4b2b      	ldr	r3, [pc, #172]	; (8004294 <main+0xbdc>)
 80041e8:	2200      	movs	r2, #0
 80041ea:	701a      	strb	r2, [r3, #0]
			//AHRS
			Encode_Msg_AHRS(&telemetry_tx_buf[0]);
 80041ec:	4818      	ldr	r0, [pc, #96]	; (8004250 <main+0xb98>)
 80041ee:	f000 fa4b 	bl	8004688 <Encode_Msg_AHRS>
			//GPS
			Encode_Msg_GPS(&telemetry_tx_buf[20]);
 80041f2:	482a      	ldr	r0, [pc, #168]	; (800429c <main+0xbe4>)
 80041f4:	f000 fbc4 	bl	8004980 <Encode_Msg_GPS>
			//Transmit
			HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 40);
 80041f8:	2228      	movs	r2, #40	; 0x28
 80041fa:	4915      	ldr	r1, [pc, #84]	; (8004250 <main+0xb98>)
 80041fc:	4815      	ldr	r0, [pc, #84]	; (8004254 <main+0xb9c>)
 80041fe:	f004 fe1f 	bl	8008e40 <HAL_UART_Transmit_IT>
		}

		//Battery Part
		batteryVolt = adcVal * 0.003619f;
 8004202:	887b      	ldrh	r3, [r7, #2]
 8004204:	ee07 3a90 	vmov	s15, r3
 8004208:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800420c:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80042a0 <main+0xbe8>
 8004210:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004214:	4b23      	ldr	r3, [pc, #140]	; (80042a4 <main+0xbec>)
 8004216:	edc3 7a00 	vstr	s15, [r3]
		//		printf("%d\t%.2f\n", adcVal, batteryVolt);
		if (batteryVolt < 10.0f) {
 800421a:	4b22      	ldr	r3, [pc, #136]	; (80042a4 <main+0xbec>)
 800421c:	edd3 7a00 	vldr	s15, [r3]
 8004220:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004224:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800422c:	d53e      	bpl.n	80042ac <main+0xbf4>
			LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800422e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004232:	481d      	ldr	r0, [pc, #116]	; (80042a8 <main+0xbf0>)
 8004234:	f7ff f9a4 	bl	8003580 <LL_TIM_CC_EnableChannel>
			TIM3->PSC = 1500;
 8004238:	4b1b      	ldr	r3, [pc, #108]	; (80042a8 <main+0xbf0>)
 800423a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800423e:	629a      	str	r2, [r3, #40]	; 0x28
 8004240:	e039      	b.n	80042b6 <main+0xbfe>
 8004242:	bf00      	nop
 8004244:	200004bc 	.word	0x200004bc
 8004248:	200004c8 	.word	0x200004c8
 800424c:	20000530 	.word	0x20000530
 8004250:	20000500 	.word	0x20000500
 8004254:	20000578 	.word	0x20000578
 8004258:	2000052c 	.word	0x2000052c
 800425c:	200004f4 	.word	0x200004f4
 8004260:	200004e4 	.word	0x200004e4
 8004264:	200004b4 	.word	0x200004b4
 8004268:	200004a8 	.word	0x200004a8
 800426c:	20000528 	.word	0x20000528
 8004270:	200004c4 	.word	0x200004c4
 8004274:	200004cc 	.word	0x200004cc
 8004278:	200004fc 	.word	0x200004fc
 800427c:	200004f8 	.word	0x200004f8
 8004280:	200004ac 	.word	0x200004ac
 8004284:	200004e8 	.word	0x200004e8
 8004288:	200004b8 	.word	0x200004b8
 800428c:	200004f0 	.word	0x200004f0
 8004290:	200004c0 	.word	0x200004c0
 8004294:	20000214 	.word	0x20000214
 8004298:	20000215 	.word	0x20000215
 800429c:	20000514 	.word	0x20000514
 80042a0:	3b6d2cbf 	.word	0x3b6d2cbf
 80042a4:	200004b0 	.word	0x200004b0
 80042a8:	40000400 	.word	0x40000400
		}
		else {
			LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80042ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80042b0:	4877      	ldr	r0, [pc, #476]	; (8004490 <main+0xdd8>)
 80042b2:	f7ff f976 	bl	80035a2 <LL_TIM_CC_DisableChannel>
		}


		//BNO080 - 9DOF
		if (BNO080_dataAvailable() == 1) {
 80042b6:	f7fd f99b 	bl	80015f0 <BNO080_dataAvailable>
 80042ba:	4603      	mov	r3, r0
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d124      	bne.n	800430a <main+0xc52>
			LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_0);
 80042c0:	2101      	movs	r1, #1
 80042c2:	4874      	ldr	r0, [pc, #464]	; (8004494 <main+0xddc>)
 80042c4:	f7ff f9c1 	bl	800364a <LL_GPIO_TogglePin>

			q[0] = BNO080_getQuatI();
 80042c8:	f7fd fb1e 	bl	8001908 <BNO080_getQuatI>
 80042cc:	eef0 7a40 	vmov.f32	s15, s0
 80042d0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
			q[1] = BNO080_getQuatJ();
 80042d4:	f7fd fb2e 	bl	8001934 <BNO080_getQuatJ>
 80042d8:	eef0 7a40 	vmov.f32	s15, s0
 80042dc:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
			q[2] = BNO080_getQuatK();
 80042e0:	f7fd fb3e 	bl	8001960 <BNO080_getQuatK>
 80042e4:	eef0 7a40 	vmov.f32	s15, s0
 80042e8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
			q[3] = BNO080_getQuatReal();
 80042ec:	f7fd fb4e 	bl	800198c <BNO080_getQuatReal>
 80042f0:	eef0 7a40 	vmov.f32	s15, s0
 80042f4:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
			quatRadianAccuracy = BNO080_getQuatRadianAccuracy();
 80042f8:	f7fd fb5e 	bl	80019b8 <BNO080_getQuatRadianAccuracy>
 80042fc:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34

			Quaternion_Update(&q[0]);
 8004300:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004304:	4618      	mov	r0, r3
 8004306:	f7fe fd89 	bl	8002e1c <Quaternion_Update>
			//			printf("%.2f\t%.2f\n", BNO080_Roll, BNO080_Pitch);
			//			printf("%.2f\n", BNO080_Yaw);
		}

		//ICM20602 - 6DOF
		if (ICM20602_DataReady() == 1) {
 800430a:	f7fe f819 	bl	8002340 <ICM20602_DataReady>
 800430e:	4603      	mov	r3, r0
 8004310:	2b01      	cmp	r3, #1
 8004312:	d13c      	bne.n	800438e <main+0xcd6>
			LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_1);
 8004314:	2102      	movs	r1, #2
 8004316:	485f      	ldr	r0, [pc, #380]	; (8004494 <main+0xddc>)
 8004318:	f7ff f997 	bl	800364a <LL_GPIO_TogglePin>
			ICM20602_Get3AxisGyroRawData(&ICM20602.gyro_x_raw);
 800431c:	485e      	ldr	r0, [pc, #376]	; (8004498 <main+0xde0>)
 800431e:	f7fd ffe3 	bl	80022e8 <ICM20602_Get3AxisGyroRawData>
			ICM20602.gyro_x = ICM20602.gyro_x_raw * 2000.f / 32768.f;
 8004322:	4b5e      	ldr	r3, [pc, #376]	; (800449c <main+0xde4>)
 8004324:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004328:	ee07 3a90 	vmov	s15, r3
 800432c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004330:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 80044a0 <main+0xde8>
 8004334:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004338:	eddf 6a5a 	vldr	s13, [pc, #360]	; 80044a4 <main+0xdec>
 800433c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004340:	4b56      	ldr	r3, [pc, #344]	; (800449c <main+0xde4>)
 8004342:	edc3 7a07 	vstr	s15, [r3, #28]
			ICM20602.gyro_y = ICM20602.gyro_y_raw * 2000.f / 32768.f;
 8004346:	4b55      	ldr	r3, [pc, #340]	; (800449c <main+0xde4>)
 8004348:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800434c:	ee07 3a90 	vmov	s15, r3
 8004350:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004354:	ed9f 7a52 	vldr	s14, [pc, #328]	; 80044a0 <main+0xde8>
 8004358:	ee27 7a87 	vmul.f32	s14, s15, s14
 800435c:	eddf 6a51 	vldr	s13, [pc, #324]	; 80044a4 <main+0xdec>
 8004360:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004364:	4b4d      	ldr	r3, [pc, #308]	; (800449c <main+0xde4>)
 8004366:	edc3 7a08 	vstr	s15, [r3, #32]
			ICM20602.gyro_z = ICM20602.gyro_z_raw * 2000.f / 32768.f;
 800436a:	4b4c      	ldr	r3, [pc, #304]	; (800449c <main+0xde4>)
 800436c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8004370:	ee07 3a90 	vmov	s15, r3
 8004374:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004378:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80044a0 <main+0xde8>
 800437c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004380:	eddf 6a48 	vldr	s13, [pc, #288]	; 80044a4 <main+0xdec>
 8004384:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004388:	4b44      	ldr	r3, [pc, #272]	; (800449c <main+0xde4>)
 800438a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			//		printf("%d,%d,%d\n", ICM20602.gyro_x_raw ,ICM20602.gyro_y_raw, ICM20602.gyro_z_raw);
			//		printf("%d,%d,%d\n", (int)(ICM20602.gyro_x * 100), (int)(ICM20602.gyro_y * 100), (int)(ICM20602.gyro_z * 100));
		}

		//LPS22HH Barometer
		if(LPS22HH_DataReady() == 1) {
 800438e:	f7fe fa47 	bl	8002820 <LPS22HH_DataReady>
 8004392:	4603      	mov	r3, r0
 8004394:	2b01      	cmp	r3, #1
 8004396:	d138      	bne.n	800440a <main+0xd52>
			LPS22HH_GetPressure(&LPS22HH.pressure_raw);
 8004398:	4843      	ldr	r0, [pc, #268]	; (80044a8 <main+0xdf0>)
 800439a:	f7fe fa4d 	bl	8002838 <LPS22HH_GetPressure>
			LPS22HH_GetTemperature(&LPS22HH.temperature_raw);
 800439e:	4843      	ldr	r0, [pc, #268]	; (80044ac <main+0xdf4>)
 80043a0:	f7fe fa57 	bl	8002852 <LPS22HH_GetTemperature>
			LPS22HH.baroAlt = getAltitude2(LPS22HH.pressure_raw/4096.f, LPS22HH.temperature_raw / 100.f);
 80043a4:	4b40      	ldr	r3, [pc, #256]	; (80044a8 <main+0xdf0>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	ee07 3a90 	vmov	s15, r3
 80043ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043b0:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80044b0 <main+0xdf8>
 80043b4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80043b8:	4b3b      	ldr	r3, [pc, #236]	; (80044a8 <main+0xdf0>)
 80043ba:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80043be:	ee07 3a90 	vmov	s15, r3
 80043c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043c6:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80044b4 <main+0xdfc>
 80043ca:	ee87 6a87 	vdiv.f32	s12, s15, s14
 80043ce:	eef0 0a46 	vmov.f32	s1, s12
 80043d2:	eeb0 0a66 	vmov.f32	s0, s13
 80043d6:	f7fe fa49 	bl	800286c <getAltitude2>
 80043da:	eef0 7a40 	vmov.f32	s15, s0
 80043de:	4b32      	ldr	r3, [pc, #200]	; (80044a8 <main+0xdf0>)
 80043e0:	edc3 7a02 	vstr	s15, [r3, #8]
#define X 0.99f
			LPS22HH.baroAltFilt = LPS22HH.baroAltFilt * X + LPS22HH.baroAlt * (1.0f -X);
 80043e4:	4b30      	ldr	r3, [pc, #192]	; (80044a8 <main+0xdf0>)
 80043e6:	edd3 7a03 	vldr	s15, [r3, #12]
 80043ea:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80044b8 <main+0xe00>
 80043ee:	ee27 7a87 	vmul.f32	s14, s15, s14
 80043f2:	4b2d      	ldr	r3, [pc, #180]	; (80044a8 <main+0xdf0>)
 80043f4:	edd3 7a02 	vldr	s15, [r3, #8]
 80043f8:	eddf 6a30 	vldr	s13, [pc, #192]	; 80044bc <main+0xe04>
 80043fc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004400:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004404:	4b28      	ldr	r3, [pc, #160]	; (80044a8 <main+0xdf0>)
 8004406:	edc3 7a03 	vstr	s15, [r3, #12]
			//			printf("%d,%d\n", (int)(LPS22HH.baroAlt * 100), (int)(LPS22HH.baroAltFilt * 100));
		}
		//M8N GPS
		if(m8n_rx_cplt_flag == 1) {
 800440a:	4b2d      	ldr	r3, [pc, #180]	; (80044c0 <main+0xe08>)
 800440c:	781b      	ldrb	r3, [r3, #0]
 800440e:	2b01      	cmp	r3, #1
 8004410:	d111      	bne.n	8004436 <main+0xd7e>
			m8n_rx_cplt_flag = 0;
 8004412:	4b2b      	ldr	r3, [pc, #172]	; (80044c0 <main+0xe08>)
 8004414:	2200      	movs	r2, #0
 8004416:	701a      	strb	r2, [r3, #0]
			if (M8N_UBX_CHKSUM_Check(&m8n_rx_buf[0], 36) == 1) {
 8004418:	2124      	movs	r1, #36	; 0x24
 800441a:	482a      	ldr	r0, [pc, #168]	; (80044c4 <main+0xe0c>)
 800441c:	f7fe fc0c 	bl	8002c38 <M8N_UBX_CHKSUM_Check>
 8004420:	4603      	mov	r3, r0
 8004422:	2b01      	cmp	r3, #1
 8004424:	d107      	bne.n	8004436 <main+0xd7e>
				LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_2);
 8004426:	2104      	movs	r1, #4
 8004428:	481a      	ldr	r0, [pc, #104]	; (8004494 <main+0xddc>)
 800442a:	f7ff f90e 	bl	800364a <LL_GPIO_TogglePin>
				M8N_UBX_NAV_POSLLH_Parsing(&m8n_rx_buf[0], &posllh);
 800442e:	4926      	ldr	r1, [pc, #152]	; (80044c8 <main+0xe10>)
 8004430:	4824      	ldr	r0, [pc, #144]	; (80044c4 <main+0xe0c>)
 8004432:	f7fe fc3b 	bl	8002cac <M8N_UBX_NAV_POSLLH_Parsing>

				//				printf("LAT: %ld\tLON: %ld\tHeight: %ld\n", posllh.lat, posllh.lon, posllh.height);
			}
		}
		//Controller
		if (ibus_rx_cplt_flag == 1) {
 8004436:	4b25      	ldr	r3, [pc, #148]	; (80044cc <main+0xe14>)
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	2b01      	cmp	r3, #1
 800443c:	f47f aad5 	bne.w	80039ea <main+0x332>
			ibus_rx_cplt_flag = 0;
 8004440:	4b22      	ldr	r3, [pc, #136]	; (80044cc <main+0xe14>)
 8004442:	2200      	movs	r2, #0
 8004444:	701a      	strb	r2, [r3, #0]
			if (iBus_Check_CHECKSUM(&ibus_rx_buf[0], 32) == 1) {
 8004446:	2120      	movs	r1, #32
 8004448:	4821      	ldr	r0, [pc, #132]	; (80044d0 <main+0xe18>)
 800444a:	f7fd fc37 	bl	8001cbc <iBus_Check_CHECKSUM>
 800444e:	4603      	mov	r3, r0
 8004450:	2b01      	cmp	r3, #1
 8004452:	f47f aaca 	bne.w	80039ea <main+0x332>
				LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_2);
 8004456:	2104      	movs	r1, #4
 8004458:	480e      	ldr	r0, [pc, #56]	; (8004494 <main+0xddc>)
 800445a:	f7ff f8f6 	bl	800364a <LL_GPIO_TogglePin>

				iBus_Parsing(&ibus_rx_buf[0], &iBus);
 800445e:	491d      	ldr	r1, [pc, #116]	; (80044d4 <main+0xe1c>)
 8004460:	481b      	ldr	r0, [pc, #108]	; (80044d0 <main+0xe18>)
 8004462:	f7fd fc61 	bl	8001d28 <iBus_Parsing>
				if (iBus_isActiveFailSafe(&iBus) == 1) {
 8004466:	481b      	ldr	r0, [pc, #108]	; (80044d4 <main+0xe1c>)
 8004468:	f7fd fcd7 	bl	8001e1a <iBus_isActiveFailSafe>
 800446c:	4603      	mov	r3, r0
 800446e:	2b01      	cmp	r3, #1
 8004470:	d106      	bne.n	8004480 <main+0xdc8>
					LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8004472:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004476:	4806      	ldr	r0, [pc, #24]	; (8004490 <main+0xdd8>)
 8004478:	f7ff f882 	bl	8003580 <LL_TIM_CC_EnableChannel>
 800447c:	f7ff bab5 	b.w	80039ea <main+0x332>
				}
				else {
					LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8004480:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004484:	4802      	ldr	r0, [pc, #8]	; (8004490 <main+0xdd8>)
 8004486:	f7ff f88c 	bl	80035a2 <LL_TIM_CC_DisableChannel>
		if (telemetry_rx_cplt_flag == 1) {
 800448a:	f7ff baae 	b.w	80039ea <main+0x332>
 800448e:	bf00      	nop
 8004490:	40000400 	.word	0x40000400
 8004494:	40020800 	.word	0x40020800
 8004498:	2000033c 	.word	0x2000033c
 800449c:	20000334 	.word	0x20000334
 80044a0:	44fa0000 	.word	0x44fa0000
 80044a4:	47000000 	.word	0x47000000
 80044a8:	2000035c 	.word	0x2000035c
 80044ac:	20000360 	.word	0x20000360
 80044b0:	45800000 	.word	0x45800000
 80044b4:	42c80000 	.word	0x42c80000
 80044b8:	3f7d70a4 	.word	0x3f7d70a4
 80044bc:	3c23d700 	.word	0x3c23d700
 80044c0:	20000211 	.word	0x20000211
 80044c4:	20000554 	.word	0x20000554
 80044c8:	20000370 	.word	0x20000370
 80044cc:	20000212 	.word	0x20000212
 80044d0:	20000534 	.word	0x20000534
 80044d4:	20000310 	.word	0x20000310

080044d8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b094      	sub	sp, #80	; 0x50
 80044dc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80044de:	f107 0320 	add.w	r3, r7, #32
 80044e2:	2230      	movs	r2, #48	; 0x30
 80044e4:	2100      	movs	r1, #0
 80044e6:	4618      	mov	r0, r3
 80044e8:	f006 fbda 	bl	800aca0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80044ec:	f107 030c 	add.w	r3, r7, #12
 80044f0:	2200      	movs	r2, #0
 80044f2:	601a      	str	r2, [r3, #0]
 80044f4:	605a      	str	r2, [r3, #4]
 80044f6:	609a      	str	r2, [r3, #8]
 80044f8:	60da      	str	r2, [r3, #12]
 80044fa:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80044fc:	2300      	movs	r3, #0
 80044fe:	60bb      	str	r3, [r7, #8]
 8004500:	4b28      	ldr	r3, [pc, #160]	; (80045a4 <SystemClock_Config+0xcc>)
 8004502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004504:	4a27      	ldr	r2, [pc, #156]	; (80045a4 <SystemClock_Config+0xcc>)
 8004506:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800450a:	6413      	str	r3, [r2, #64]	; 0x40
 800450c:	4b25      	ldr	r3, [pc, #148]	; (80045a4 <SystemClock_Config+0xcc>)
 800450e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004510:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004514:	60bb      	str	r3, [r7, #8]
 8004516:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004518:	2300      	movs	r3, #0
 800451a:	607b      	str	r3, [r7, #4]
 800451c:	4b22      	ldr	r3, [pc, #136]	; (80045a8 <SystemClock_Config+0xd0>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a21      	ldr	r2, [pc, #132]	; (80045a8 <SystemClock_Config+0xd0>)
 8004522:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004526:	6013      	str	r3, [r2, #0]
 8004528:	4b1f      	ldr	r3, [pc, #124]	; (80045a8 <SystemClock_Config+0xd0>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004530:	607b      	str	r3, [r7, #4]
 8004532:	687b      	ldr	r3, [r7, #4]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004534:	2301      	movs	r3, #1
 8004536:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004538:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800453c:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800453e:	2302      	movs	r3, #2
 8004540:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004542:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004546:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8004548:	2304      	movs	r3, #4
 800454a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 800454c:	23a8      	movs	r3, #168	; 0xa8
 800454e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004550:	2302      	movs	r3, #2
 8004552:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8004554:	2304      	movs	r3, #4
 8004556:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004558:	f107 0320 	add.w	r3, r7, #32
 800455c:	4618      	mov	r0, r3
 800455e:	f003 ff27 	bl	80083b0 <HAL_RCC_OscConfig>
 8004562:	4603      	mov	r3, r0
 8004564:	2b00      	cmp	r3, #0
 8004566:	d001      	beq.n	800456c <SystemClock_Config+0x94>
	{
		Error_Handler();
 8004568:	f000 fb1a 	bl	8004ba0 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800456c:	230f      	movs	r3, #15
 800456e:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004570:	2302      	movs	r3, #2
 8004572:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004574:	2300      	movs	r3, #0
 8004576:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004578:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800457c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800457e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004582:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004584:	f107 030c 	add.w	r3, r7, #12
 8004588:	2105      	movs	r1, #5
 800458a:	4618      	mov	r0, r3
 800458c:	f004 f980 	bl	8008890 <HAL_RCC_ClockConfig>
 8004590:	4603      	mov	r3, r0
 8004592:	2b00      	cmp	r3, #0
 8004594:	d001      	beq.n	800459a <SystemClock_Config+0xc2>
	{
		Error_Handler();
 8004596:	f000 fb03 	bl	8004ba0 <Error_Handler>
	}
}
 800459a:	bf00      	nop
 800459c:	3750      	adds	r7, #80	; 0x50
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	40023800 	.word	0x40023800
 80045a8:	40007000 	.word	0x40007000

080045ac <HAL_UART_RxCpltCallback>:
	BNO080_Initialization();
	BNO080_enableRotationVector(2500); //Send data update every 2.5ms (400Hz)
}

//3DR Telemetry
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b082      	sub	sp, #8
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
	//HAL Only, LL cannot be supported
	//HAL UART Receive Call back function
	static unsigned char cnt = 0;

	if (huart->Instance == USART1) {
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a2d      	ldr	r2, [pc, #180]	; (8004670 <HAL_UART_RxCpltCallback+0xc4>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d150      	bne.n	8004660 <HAL_UART_RxCpltCallback+0xb4>
		HAL_UART_Receive_IT(&huart1, &uart1_rx_data, 1);
 80045be:	2201      	movs	r2, #1
 80045c0:	492c      	ldr	r1, [pc, #176]	; (8004674 <HAL_UART_RxCpltCallback+0xc8>)
 80045c2:	482d      	ldr	r0, [pc, #180]	; (8004678 <HAL_UART_RxCpltCallback+0xcc>)
 80045c4:	f004 fc81 	bl	8008eca <HAL_UART_Receive_IT>

		switch (cnt) {
 80045c8:	4b2c      	ldr	r3, [pc, #176]	; (800467c <HAL_UART_RxCpltCallback+0xd0>)
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d015      	beq.n	80045fc <HAL_UART_RxCpltCallback+0x50>
 80045d0:	2b13      	cmp	r3, #19
 80045d2:	d029      	beq.n	8004628 <HAL_UART_RxCpltCallback+0x7c>
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d135      	bne.n	8004644 <HAL_UART_RxCpltCallback+0x98>
		case 0:
			if (uart1_rx_data == 0x47) {
 80045d8:	4b26      	ldr	r3, [pc, #152]	; (8004674 <HAL_UART_RxCpltCallback+0xc8>)
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	2b47      	cmp	r3, #71	; 0x47
 80045de:	d141      	bne.n	8004664 <HAL_UART_RxCpltCallback+0xb8>
				telemetry_rx_buf[cnt] = uart1_rx_data;
 80045e0:	4b26      	ldr	r3, [pc, #152]	; (800467c <HAL_UART_RxCpltCallback+0xd0>)
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	461a      	mov	r2, r3
 80045e6:	4b23      	ldr	r3, [pc, #140]	; (8004674 <HAL_UART_RxCpltCallback+0xc8>)
 80045e8:	7819      	ldrb	r1, [r3, #0]
 80045ea:	4b25      	ldr	r3, [pc, #148]	; (8004680 <HAL_UART_RxCpltCallback+0xd4>)
 80045ec:	5499      	strb	r1, [r3, r2]
				cnt++;
 80045ee:	4b23      	ldr	r3, [pc, #140]	; (800467c <HAL_UART_RxCpltCallback+0xd0>)
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	3301      	adds	r3, #1
 80045f4:	b2da      	uxtb	r2, r3
 80045f6:	4b21      	ldr	r3, [pc, #132]	; (800467c <HAL_UART_RxCpltCallback+0xd0>)
 80045f8:	701a      	strb	r2, [r3, #0]
			}
			break;
 80045fa:	e033      	b.n	8004664 <HAL_UART_RxCpltCallback+0xb8>
		case 1:
			if (uart1_rx_data == 0x53) {
 80045fc:	4b1d      	ldr	r3, [pc, #116]	; (8004674 <HAL_UART_RxCpltCallback+0xc8>)
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	2b53      	cmp	r3, #83	; 0x53
 8004602:	d10d      	bne.n	8004620 <HAL_UART_RxCpltCallback+0x74>
				telemetry_rx_buf[cnt] = uart1_rx_data;
 8004604:	4b1d      	ldr	r3, [pc, #116]	; (800467c <HAL_UART_RxCpltCallback+0xd0>)
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	461a      	mov	r2, r3
 800460a:	4b1a      	ldr	r3, [pc, #104]	; (8004674 <HAL_UART_RxCpltCallback+0xc8>)
 800460c:	7819      	ldrb	r1, [r3, #0]
 800460e:	4b1c      	ldr	r3, [pc, #112]	; (8004680 <HAL_UART_RxCpltCallback+0xd4>)
 8004610:	5499      	strb	r1, [r3, r2]
				cnt++;
 8004612:	4b1a      	ldr	r3, [pc, #104]	; (800467c <HAL_UART_RxCpltCallback+0xd0>)
 8004614:	781b      	ldrb	r3, [r3, #0]
 8004616:	3301      	adds	r3, #1
 8004618:	b2da      	uxtb	r2, r3
 800461a:	4b18      	ldr	r3, [pc, #96]	; (800467c <HAL_UART_RxCpltCallback+0xd0>)
 800461c:	701a      	strb	r2, [r3, #0]
			}
			else {
				cnt = 0;
			}
			break;
 800461e:	e022      	b.n	8004666 <HAL_UART_RxCpltCallback+0xba>
				cnt = 0;
 8004620:	4b16      	ldr	r3, [pc, #88]	; (800467c <HAL_UART_RxCpltCallback+0xd0>)
 8004622:	2200      	movs	r2, #0
 8004624:	701a      	strb	r2, [r3, #0]
			break;
 8004626:	e01e      	b.n	8004666 <HAL_UART_RxCpltCallback+0xba>
		case 19:
			telemetry_rx_buf[cnt] = uart1_rx_data;
 8004628:	4b14      	ldr	r3, [pc, #80]	; (800467c <HAL_UART_RxCpltCallback+0xd0>)
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	461a      	mov	r2, r3
 800462e:	4b11      	ldr	r3, [pc, #68]	; (8004674 <HAL_UART_RxCpltCallback+0xc8>)
 8004630:	7819      	ldrb	r1, [r3, #0]
 8004632:	4b13      	ldr	r3, [pc, #76]	; (8004680 <HAL_UART_RxCpltCallback+0xd4>)
 8004634:	5499      	strb	r1, [r3, r2]
			cnt = 0;
 8004636:	4b11      	ldr	r3, [pc, #68]	; (800467c <HAL_UART_RxCpltCallback+0xd0>)
 8004638:	2200      	movs	r2, #0
 800463a:	701a      	strb	r2, [r3, #0]
			telemetry_rx_cplt_flag = 1;
 800463c:	4b11      	ldr	r3, [pc, #68]	; (8004684 <HAL_UART_RxCpltCallback+0xd8>)
 800463e:	2201      	movs	r2, #1
 8004640:	701a      	strb	r2, [r3, #0]
			break;
 8004642:	e010      	b.n	8004666 <HAL_UART_RxCpltCallback+0xba>
		default:
			telemetry_rx_buf[cnt] = uart1_rx_data;
 8004644:	4b0d      	ldr	r3, [pc, #52]	; (800467c <HAL_UART_RxCpltCallback+0xd0>)
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	461a      	mov	r2, r3
 800464a:	4b0a      	ldr	r3, [pc, #40]	; (8004674 <HAL_UART_RxCpltCallback+0xc8>)
 800464c:	7819      	ldrb	r1, [r3, #0]
 800464e:	4b0c      	ldr	r3, [pc, #48]	; (8004680 <HAL_UART_RxCpltCallback+0xd4>)
 8004650:	5499      	strb	r1, [r3, r2]
			cnt++;
 8004652:	4b0a      	ldr	r3, [pc, #40]	; (800467c <HAL_UART_RxCpltCallback+0xd0>)
 8004654:	781b      	ldrb	r3, [r3, #0]
 8004656:	3301      	adds	r3, #1
 8004658:	b2da      	uxtb	r2, r3
 800465a:	4b08      	ldr	r3, [pc, #32]	; (800467c <HAL_UART_RxCpltCallback+0xd0>)
 800465c:	701a      	strb	r2, [r3, #0]
			break;
 800465e:	e002      	b.n	8004666 <HAL_UART_RxCpltCallback+0xba>
		}
		//		HAL_UART_Transmit_IT(&huart1, &uart1_rx_data, 1);
	}
 8004660:	bf00      	nop
 8004662:	e000      	b.n	8004666 <HAL_UART_RxCpltCallback+0xba>
			break;
 8004664:	bf00      	nop
}
 8004666:	bf00      	nop
 8004668:	3708      	adds	r7, #8
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	40011000 	.word	0x40011000
 8004674:	20000213 	.word	0x20000213
 8004678:	20000578 	.word	0x20000578
 800467c:	2000020a 	.word	0x2000020a
 8004680:	200004d0 	.word	0x200004d0
 8004684:	200004ec 	.word	0x200004ec

08004688 <Encode_Msg_AHRS>:

void Encode_Msg_AHRS(unsigned char *telemetry_tx_buf) {
 8004688:	b480      	push	{r7}
 800468a:	b085      	sub	sp, #20
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
	//Sync char
	telemetry_tx_buf[0] = 0x46;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2246      	movs	r2, #70	; 0x46
 8004694:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[1] = 0x43;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	3301      	adds	r3, #1
 800469a:	2243      	movs	r2, #67	; 0x43
 800469c:	701a      	strb	r2, [r3, #0]
	//AHRS
	telemetry_tx_buf[2] = 0x10;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	3302      	adds	r3, #2
 80046a2:	2210      	movs	r2, #16
 80046a4:	701a      	strb	r2, [r3, #0]
	//Current Roll
	telemetry_tx_buf[3] = (short)(BNO080_Roll * 100);
 80046a6:	4bae      	ldr	r3, [pc, #696]	; (8004960 <Encode_Msg_AHRS+0x2d8>)
 80046a8:	edd3 7a00 	vldr	s15, [r3]
 80046ac:	ed9f 7aad 	vldr	s14, [pc, #692]	; 8004964 <Encode_Msg_AHRS+0x2dc>
 80046b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80046b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80046b8:	ee17 3a90 	vmov	r3, s15
 80046bc:	b21a      	sxth	r2, r3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	3303      	adds	r3, #3
 80046c2:	b2d2      	uxtb	r2, r2
 80046c4:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[4] = ((short)(BNO080_Roll * 100)) >> 8;
 80046c6:	4ba6      	ldr	r3, [pc, #664]	; (8004960 <Encode_Msg_AHRS+0x2d8>)
 80046c8:	edd3 7a00 	vldr	s15, [r3]
 80046cc:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 8004964 <Encode_Msg_AHRS+0x2dc>
 80046d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80046d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80046d8:	ee17 3a90 	vmov	r3, s15
 80046dc:	b21b      	sxth	r3, r3
 80046de:	121b      	asrs	r3, r3, #8
 80046e0:	b21a      	sxth	r2, r3
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	3304      	adds	r3, #4
 80046e6:	b2d2      	uxtb	r2, r2
 80046e8:	701a      	strb	r2, [r3, #0]
	//Current Pitch
	telemetry_tx_buf[5] = (short)(BNO080_Pitch * 100);
 80046ea:	4b9f      	ldr	r3, [pc, #636]	; (8004968 <Encode_Msg_AHRS+0x2e0>)
 80046ec:	edd3 7a00 	vldr	s15, [r3]
 80046f0:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 8004964 <Encode_Msg_AHRS+0x2dc>
 80046f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80046f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80046fc:	ee17 3a90 	vmov	r3, s15
 8004700:	b21a      	sxth	r2, r3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	3305      	adds	r3, #5
 8004706:	b2d2      	uxtb	r2, r2
 8004708:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[6] = ((short)(BNO080_Pitch * 100)) >> 8;
 800470a:	4b97      	ldr	r3, [pc, #604]	; (8004968 <Encode_Msg_AHRS+0x2e0>)
 800470c:	edd3 7a00 	vldr	s15, [r3]
 8004710:	ed9f 7a94 	vldr	s14, [pc, #592]	; 8004964 <Encode_Msg_AHRS+0x2dc>
 8004714:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004718:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800471c:	ee17 3a90 	vmov	r3, s15
 8004720:	b21b      	sxth	r3, r3
 8004722:	121b      	asrs	r3, r3, #8
 8004724:	b21a      	sxth	r2, r3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	3306      	adds	r3, #6
 800472a:	b2d2      	uxtb	r2, r2
 800472c:	701a      	strb	r2, [r3, #0]
	//Current Yaw
	telemetry_tx_buf[7] = (unsigned short)(BNO080_Yaw * 100);
 800472e:	4b8f      	ldr	r3, [pc, #572]	; (800496c <Encode_Msg_AHRS+0x2e4>)
 8004730:	edd3 7a00 	vldr	s15, [r3]
 8004734:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8004964 <Encode_Msg_AHRS+0x2dc>
 8004738:	ee67 7a87 	vmul.f32	s15, s15, s14
 800473c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004740:	ee17 3a90 	vmov	r3, s15
 8004744:	b29a      	uxth	r2, r3
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	3307      	adds	r3, #7
 800474a:	b2d2      	uxtb	r2, r2
 800474c:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[8] = ((unsigned short)(BNO080_Yaw * 100)) >> 8;
 800474e:	4b87      	ldr	r3, [pc, #540]	; (800496c <Encode_Msg_AHRS+0x2e4>)
 8004750:	edd3 7a00 	vldr	s15, [r3]
 8004754:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8004964 <Encode_Msg_AHRS+0x2dc>
 8004758:	ee67 7a87 	vmul.f32	s15, s15, s14
 800475c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004760:	ee17 3a90 	vmov	r3, s15
 8004764:	b29b      	uxth	r3, r3
 8004766:	0a1b      	lsrs	r3, r3, #8
 8004768:	b29a      	uxth	r2, r3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	3308      	adds	r3, #8
 800476e:	b2d2      	uxtb	r2, r2
 8004770:	701a      	strb	r2, [r3, #0]
	//Current Altitude
	telemetry_tx_buf[9] = (short)(LPS22HH.baroAltFilt * 10);
 8004772:	4b7f      	ldr	r3, [pc, #508]	; (8004970 <Encode_Msg_AHRS+0x2e8>)
 8004774:	edd3 7a03 	vldr	s15, [r3, #12]
 8004778:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800477c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004780:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004784:	ee17 3a90 	vmov	r3, s15
 8004788:	b21a      	sxth	r2, r3
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	3309      	adds	r3, #9
 800478e:	b2d2      	uxtb	r2, r2
 8004790:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[10] = ((short)(LPS22HH.baroAltFilt * 100)) >> 8;
 8004792:	4b77      	ldr	r3, [pc, #476]	; (8004970 <Encode_Msg_AHRS+0x2e8>)
 8004794:	edd3 7a03 	vldr	s15, [r3, #12]
 8004798:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8004964 <Encode_Msg_AHRS+0x2dc>
 800479c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80047a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80047a4:	ee17 3a90 	vmov	r3, s15
 80047a8:	b21b      	sxth	r3, r3
 80047aa:	121b      	asrs	r3, r3, #8
 80047ac:	b21a      	sxth	r2, r3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	330a      	adds	r3, #10
 80047b2:	b2d2      	uxtb	r2, r2
 80047b4:	701a      	strb	r2, [r3, #0]

	//target Roll at Controller
	telemetry_tx_buf[11] = (short)((iBus.RH - 1500) * 0.1f * 100); //-50 ~ +50
 80047b6:	4b6f      	ldr	r3, [pc, #444]	; (8004974 <Encode_Msg_AHRS+0x2ec>)
 80047b8:	881b      	ldrh	r3, [r3, #0]
 80047ba:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 80047be:	ee07 3a90 	vmov	s15, r3
 80047c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80047c6:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8004978 <Encode_Msg_AHRS+0x2f0>
 80047ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80047ce:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8004964 <Encode_Msg_AHRS+0x2dc>
 80047d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80047d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80047da:	ee17 3a90 	vmov	r3, s15
 80047de:	b21a      	sxth	r2, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	330b      	adds	r3, #11
 80047e4:	b2d2      	uxtb	r2, r2
 80047e6:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[12] = ((short)((iBus.RH - 1500) * 0.1f * 100)) >> 8;
 80047e8:	4b62      	ldr	r3, [pc, #392]	; (8004974 <Encode_Msg_AHRS+0x2ec>)
 80047ea:	881b      	ldrh	r3, [r3, #0]
 80047ec:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 80047f0:	ee07 3a90 	vmov	s15, r3
 80047f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80047f8:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8004978 <Encode_Msg_AHRS+0x2f0>
 80047fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004800:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8004964 <Encode_Msg_AHRS+0x2dc>
 8004804:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004808:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800480c:	ee17 3a90 	vmov	r3, s15
 8004810:	b21b      	sxth	r3, r3
 8004812:	121b      	asrs	r3, r3, #8
 8004814:	b21a      	sxth	r2, r3
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	330c      	adds	r3, #12
 800481a:	b2d2      	uxtb	r2, r2
 800481c:	701a      	strb	r2, [r3, #0]

	//target Pitch at Controller
	telemetry_tx_buf[13] = (short)((iBus.RV - 1500) * 0.1f * 100); //-50 ~ +50
 800481e:	4b55      	ldr	r3, [pc, #340]	; (8004974 <Encode_Msg_AHRS+0x2ec>)
 8004820:	885b      	ldrh	r3, [r3, #2]
 8004822:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8004826:	ee07 3a90 	vmov	s15, r3
 800482a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800482e:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8004978 <Encode_Msg_AHRS+0x2f0>
 8004832:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004836:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8004964 <Encode_Msg_AHRS+0x2dc>
 800483a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800483e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004842:	ee17 3a90 	vmov	r3, s15
 8004846:	b21a      	sxth	r2, r3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	330d      	adds	r3, #13
 800484c:	b2d2      	uxtb	r2, r2
 800484e:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[14] = ((short)((iBus.RV - 1500) * 0.1f * 100)) >> 8;
 8004850:	4b48      	ldr	r3, [pc, #288]	; (8004974 <Encode_Msg_AHRS+0x2ec>)
 8004852:	885b      	ldrh	r3, [r3, #2]
 8004854:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8004858:	ee07 3a90 	vmov	s15, r3
 800485c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004860:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8004978 <Encode_Msg_AHRS+0x2f0>
 8004864:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004868:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8004964 <Encode_Msg_AHRS+0x2dc>
 800486c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004870:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004874:	ee17 3a90 	vmov	r3, s15
 8004878:	b21b      	sxth	r3, r3
 800487a:	121b      	asrs	r3, r3, #8
 800487c:	b21a      	sxth	r2, r3
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	330e      	adds	r3, #14
 8004882:	b2d2      	uxtb	r2, r2
 8004884:	701a      	strb	r2, [r3, #0]

	//target Yaw at Controller
	telemetry_tx_buf[15] = (unsigned short)((iBus.LH - 1000) * 0.36f * 100); //0 ~ 360
 8004886:	4b3b      	ldr	r3, [pc, #236]	; (8004974 <Encode_Msg_AHRS+0x2ec>)
 8004888:	88db      	ldrh	r3, [r3, #6]
 800488a:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800488e:	ee07 3a90 	vmov	s15, r3
 8004892:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004896:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800497c <Encode_Msg_AHRS+0x2f4>
 800489a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800489e:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8004964 <Encode_Msg_AHRS+0x2dc>
 80048a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80048a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048aa:	ee17 3a90 	vmov	r3, s15
 80048ae:	b29a      	uxth	r2, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	330f      	adds	r3, #15
 80048b4:	b2d2      	uxtb	r2, r2
 80048b6:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[16] = ((unsigned short)((iBus.LH - 1000) * 0.36f * 100)) >> 8;
 80048b8:	4b2e      	ldr	r3, [pc, #184]	; (8004974 <Encode_Msg_AHRS+0x2ec>)
 80048ba:	88db      	ldrh	r3, [r3, #6]
 80048bc:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80048c0:	ee07 3a90 	vmov	s15, r3
 80048c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80048c8:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800497c <Encode_Msg_AHRS+0x2f4>
 80048cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80048d0:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8004964 <Encode_Msg_AHRS+0x2dc>
 80048d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80048d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048dc:	ee17 3a90 	vmov	r3, s15
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	0a1b      	lsrs	r3, r3, #8
 80048e4:	b29a      	uxth	r2, r3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	3310      	adds	r3, #16
 80048ea:	b2d2      	uxtb	r2, r2
 80048ec:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[17] = (short)(iBus.LV * 10);
 80048ee:	4b21      	ldr	r3, [pc, #132]	; (8004974 <Encode_Msg_AHRS+0x2ec>)
 80048f0:	889b      	ldrh	r3, [r3, #4]
 80048f2:	b2da      	uxtb	r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	3311      	adds	r3, #17
 80048f8:	4611      	mov	r1, r2
 80048fa:	0089      	lsls	r1, r1, #2
 80048fc:	440a      	add	r2, r1
 80048fe:	0052      	lsls	r2, r2, #1
 8004900:	b2d2      	uxtb	r2, r2
 8004902:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[18] = ((short)(iBus.LV * 10)) >> 8;
 8004904:	4b1b      	ldr	r3, [pc, #108]	; (8004974 <Encode_Msg_AHRS+0x2ec>)
 8004906:	889b      	ldrh	r3, [r3, #4]
 8004908:	461a      	mov	r2, r3
 800490a:	0092      	lsls	r2, r2, #2
 800490c:	4413      	add	r3, r2
 800490e:	005b      	lsls	r3, r3, #1
 8004910:	b29b      	uxth	r3, r3
 8004912:	b21b      	sxth	r3, r3
 8004914:	121b      	asrs	r3, r3, #8
 8004916:	b21a      	sxth	r2, r3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	3312      	adds	r3, #18
 800491c:	b2d2      	uxtb	r2, r2
 800491e:	701a      	strb	r2, [r3, #0]

	//Checksum
	telemetry_tx_buf[19] = 0xff;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	3313      	adds	r3, #19
 8004924:	22ff      	movs	r2, #255	; 0xff
 8004926:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 19; i++) {
 8004928:	2300      	movs	r3, #0
 800492a:	60fb      	str	r3, [r7, #12]
 800492c:	e00e      	b.n	800494c <Encode_Msg_AHRS+0x2c4>
		telemetry_tx_buf[19] -= telemetry_tx_buf[i];
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	3313      	adds	r3, #19
 8004932:	7819      	ldrb	r1, [r3, #0]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	4413      	add	r3, r2
 800493a:	781a      	ldrb	r2, [r3, #0]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	3313      	adds	r3, #19
 8004940:	1a8a      	subs	r2, r1, r2
 8004942:	b2d2      	uxtb	r2, r2
 8004944:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 19; i++) {
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	3301      	adds	r3, #1
 800494a:	60fb      	str	r3, [r7, #12]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2b12      	cmp	r3, #18
 8004950:	dded      	ble.n	800492e <Encode_Msg_AHRS+0x2a6>
	}
}
 8004952:	bf00      	nop
 8004954:	3714      	adds	r7, #20
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr
 800495e:	bf00      	nop
 8004960:	200003a0 	.word	0x200003a0
 8004964:	42c80000 	.word	0x42c80000
 8004968:	200003a8 	.word	0x200003a8
 800496c:	200003a4 	.word	0x200003a4
 8004970:	2000035c 	.word	0x2000035c
 8004974:	20000310 	.word	0x20000310
 8004978:	3dcccccd 	.word	0x3dcccccd
 800497c:	3eb851ec 	.word	0x3eb851ec

08004980 <Encode_Msg_GPS>:

void Encode_Msg_GPS(unsigned char *telemetry_tx_buf) {
 8004980:	b590      	push	{r4, r7, lr}
 8004982:	b085      	sub	sp, #20
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
	//Sync char
	telemetry_tx_buf[0] = 0x46;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2246      	movs	r2, #70	; 0x46
 800498c:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[1] = 0x43;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	3301      	adds	r3, #1
 8004992:	2243      	movs	r2, #67	; 0x43
 8004994:	701a      	strb	r2, [r3, #0]
	//0x11 - GPS
	telemetry_tx_buf[2] = 0x11;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	3302      	adds	r3, #2
 800499a:	2211      	movs	r2, #17
 800499c:	701a      	strb	r2, [r3, #0]

	//Latitude
	telemetry_tx_buf[3] = posllh.lat;
 800499e:	4b53      	ldr	r3, [pc, #332]	; (8004aec <Encode_Msg_GPS+0x16c>)
 80049a0:	68da      	ldr	r2, [r3, #12]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	3303      	adds	r3, #3
 80049a6:	b2d2      	uxtb	r2, r2
 80049a8:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[4] = posllh.lat >> 8;
 80049aa:	4b50      	ldr	r3, [pc, #320]	; (8004aec <Encode_Msg_GPS+0x16c>)
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	121a      	asrs	r2, r3, #8
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	3304      	adds	r3, #4
 80049b4:	b2d2      	uxtb	r2, r2
 80049b6:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[5] = posllh.lat >> 16;
 80049b8:	4b4c      	ldr	r3, [pc, #304]	; (8004aec <Encode_Msg_GPS+0x16c>)
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	141a      	asrs	r2, r3, #16
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	3305      	adds	r3, #5
 80049c2:	b2d2      	uxtb	r2, r2
 80049c4:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[6] = posllh.lat >> 24;
 80049c6:	4b49      	ldr	r3, [pc, #292]	; (8004aec <Encode_Msg_GPS+0x16c>)
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	161a      	asrs	r2, r3, #24
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	3306      	adds	r3, #6
 80049d0:	b2d2      	uxtb	r2, r2
 80049d2:	701a      	strb	r2, [r3, #0]

	//Longitude
	telemetry_tx_buf[7] = posllh.lon;
 80049d4:	4b45      	ldr	r3, [pc, #276]	; (8004aec <Encode_Msg_GPS+0x16c>)
 80049d6:	689a      	ldr	r2, [r3, #8]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	3307      	adds	r3, #7
 80049dc:	b2d2      	uxtb	r2, r2
 80049de:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[8] = posllh.lon >> 8;
 80049e0:	4b42      	ldr	r3, [pc, #264]	; (8004aec <Encode_Msg_GPS+0x16c>)
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	121a      	asrs	r2, r3, #8
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	3308      	adds	r3, #8
 80049ea:	b2d2      	uxtb	r2, r2
 80049ec:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[9] = posllh.lon >> 16;
 80049ee:	4b3f      	ldr	r3, [pc, #252]	; (8004aec <Encode_Msg_GPS+0x16c>)
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	141a      	asrs	r2, r3, #16
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	3309      	adds	r3, #9
 80049f8:	b2d2      	uxtb	r2, r2
 80049fa:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[10] = posllh.lon >> 24;
 80049fc:	4b3b      	ldr	r3, [pc, #236]	; (8004aec <Encode_Msg_GPS+0x16c>)
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	161a      	asrs	r2, r3, #24
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	330a      	adds	r3, #10
 8004a06:	b2d2      	uxtb	r2, r2
 8004a08:	701a      	strb	r2, [r3, #0]

	//Battery Voltage
	telemetry_tx_buf[11] = (unsigned short)(batteryVolt * 100);
 8004a0a:	4b39      	ldr	r3, [pc, #228]	; (8004af0 <Encode_Msg_GPS+0x170>)
 8004a0c:	edd3 7a00 	vldr	s15, [r3]
 8004a10:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8004af4 <Encode_Msg_GPS+0x174>
 8004a14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a1c:	ee17 3a90 	vmov	r3, s15
 8004a20:	b29a      	uxth	r2, r3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	330b      	adds	r3, #11
 8004a26:	b2d2      	uxtb	r2, r2
 8004a28:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[12] = ((unsigned short)(batteryVolt * 100)) >> 8;
 8004a2a:	4b31      	ldr	r3, [pc, #196]	; (8004af0 <Encode_Msg_GPS+0x170>)
 8004a2c:	edd3 7a00 	vldr	s15, [r3]
 8004a30:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8004af4 <Encode_Msg_GPS+0x174>
 8004a34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a3c:	ee17 3a90 	vmov	r3, s15
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	0a1b      	lsrs	r3, r3, #8
 8004a44:	b29a      	uxth	r2, r3
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	330c      	adds	r3, #12
 8004a4a:	b2d2      	uxtb	r2, r2
 8004a4c:	701a      	strb	r2, [r3, #0]

	//SwA SwC
	telemetry_tx_buf[13] = (iBus.SwA == 1000)? 0 : 1;
 8004a4e:	4b2a      	ldr	r3, [pc, #168]	; (8004af8 <Encode_Msg_GPS+0x178>)
 8004a50:	891b      	ldrh	r3, [r3, #8]
 8004a52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a56:	bf14      	ite	ne
 8004a58:	2301      	movne	r3, #1
 8004a5a:	2300      	moveq	r3, #0
 8004a5c:	b2da      	uxtb	r2, r3
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	330d      	adds	r3, #13
 8004a62:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[14] = (iBus.SwC == 1000)? 0 : (iBus.SwC == 1500)? 1 : 2;
 8004a64:	4b24      	ldr	r3, [pc, #144]	; (8004af8 <Encode_Msg_GPS+0x178>)
 8004a66:	899b      	ldrh	r3, [r3, #12]
 8004a68:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a6c:	d009      	beq.n	8004a82 <Encode_Msg_GPS+0x102>
 8004a6e:	4b22      	ldr	r3, [pc, #136]	; (8004af8 <Encode_Msg_GPS+0x178>)
 8004a70:	899b      	ldrh	r3, [r3, #12]
 8004a72:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d101      	bne.n	8004a7e <Encode_Msg_GPS+0xfe>
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e002      	b.n	8004a84 <Encode_Msg_GPS+0x104>
 8004a7e:	2302      	movs	r3, #2
 8004a80:	e000      	b.n	8004a84 <Encode_Msg_GPS+0x104>
 8004a82:	2300      	movs	r3, #0
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	320e      	adds	r2, #14
 8004a88:	7013      	strb	r3, [r2, #0]

	//Fail-Safe Mode
	telemetry_tx_buf[15] = iBus_isActiveFailSafe(&iBus); // Failsafe active true / inactive false
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f103 040f 	add.w	r4, r3, #15
 8004a90:	4819      	ldr	r0, [pc, #100]	; (8004af8 <Encode_Msg_GPS+0x178>)
 8004a92:	f7fd f9c2 	bl	8001e1a <iBus_isActiveFailSafe>
 8004a96:	4603      	mov	r3, r0
 8004a98:	7023      	strb	r3, [r4, #0]

	//0x00
	telemetry_tx_buf[16] = 0x00;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	3310      	adds	r3, #16
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[17] = 0x00;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	3311      	adds	r3, #17
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[18] = 0x00;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	3312      	adds	r3, #18
 8004aae:	2200      	movs	r2, #0
 8004ab0:	701a      	strb	r2, [r3, #0]

	//Checksum
	telemetry_tx_buf[19] = 0xff;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	3313      	adds	r3, #19
 8004ab6:	22ff      	movs	r2, #255	; 0xff
 8004ab8:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 19; i++) {
 8004aba:	2300      	movs	r3, #0
 8004abc:	60fb      	str	r3, [r7, #12]
 8004abe:	e00e      	b.n	8004ade <Encode_Msg_GPS+0x15e>
		telemetry_tx_buf[19] -= telemetry_tx_buf[i];
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	3313      	adds	r3, #19
 8004ac4:	7819      	ldrb	r1, [r3, #0]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	4413      	add	r3, r2
 8004acc:	781a      	ldrb	r2, [r3, #0]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	3313      	adds	r3, #19
 8004ad2:	1a8a      	subs	r2, r1, r2
 8004ad4:	b2d2      	uxtb	r2, r2
 8004ad6:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 19; i++) {
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	3301      	adds	r3, #1
 8004adc:	60fb      	str	r3, [r7, #12]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2b12      	cmp	r3, #18
 8004ae2:	dded      	ble.n	8004ac0 <Encode_Msg_GPS+0x140>
	}
}
 8004ae4:	bf00      	nop
 8004ae6:	3714      	adds	r7, #20
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd90      	pop	{r4, r7, pc}
 8004aec:	20000370 	.word	0x20000370
 8004af0:	200004b0 	.word	0x200004b0
 8004af4:	42c80000 	.word	0x42c80000
 8004af8:	20000310 	.word	0x20000310

08004afc <Encode_Msg_PID_Gain>:

void Encode_Msg_PID_Gain(unsigned char *telemetry_tx_buf, unsigned char id, float p, float i, float d) {
 8004afc:	b480      	push	{r7}
 8004afe:	b089      	sub	sp, #36	; 0x24
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6178      	str	r0, [r7, #20]
 8004b04:	460b      	mov	r3, r1
 8004b06:	ed87 0a03 	vstr	s0, [r7, #12]
 8004b0a:	edc7 0a02 	vstr	s1, [r7, #8]
 8004b0e:	ed87 1a01 	vstr	s2, [r7, #4]
 8004b12:	74fb      	strb	r3, [r7, #19]
	//Sync char
	telemetry_tx_buf[0] = 0x46;
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	2246      	movs	r2, #70	; 0x46
 8004b18:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[1] = 0x43;
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	3301      	adds	r3, #1
 8004b1e:	2243      	movs	r2, #67	; 0x43
 8004b20:	701a      	strb	r2, [r3, #0]
	//0x00, 0x01 - Roll, 0x02, 0x03 - Pitch, 0x04, 0x05 - Yaw
	telemetry_tx_buf[2] = id;
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	3302      	adds	r3, #2
 8004b26:	7cfa      	ldrb	r2, [r7, #19]
 8004b28:	701a      	strb	r2, [r3, #0]

	//	memcpy(&telemetry_tx_buf[3], &p, 4);
	//	memcpy(&telemetry_tx_buf[7], &i, 4);
	//	memcpy(&telemetry_tx_buf[11], &d, 4);

	*(float *)&telemetry_tx_buf[3] = p;
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	3303      	adds	r3, #3
 8004b2e:	68fa      	ldr	r2, [r7, #12]
 8004b30:	601a      	str	r2, [r3, #0]
	*(float *)&telemetry_tx_buf[7] = i;
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	3307      	adds	r3, #7
 8004b36:	68ba      	ldr	r2, [r7, #8]
 8004b38:	601a      	str	r2, [r3, #0]
	*(float *)&telemetry_tx_buf[11] = d;
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	330b      	adds	r3, #11
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	601a      	str	r2, [r3, #0]

	//0x00
	telemetry_tx_buf[15] = 0x00;
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	330f      	adds	r3, #15
 8004b46:	2200      	movs	r2, #0
 8004b48:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[16] = 0x00;
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	3310      	adds	r3, #16
 8004b4e:	2200      	movs	r2, #0
 8004b50:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[17] = 0x00;
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	3311      	adds	r3, #17
 8004b56:	2200      	movs	r2, #0
 8004b58:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[18] = 0x00;
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	3312      	adds	r3, #18
 8004b5e:	2200      	movs	r2, #0
 8004b60:	701a      	strb	r2, [r3, #0]

	//Checksum
	telemetry_tx_buf[19] = 0xff;
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	3313      	adds	r3, #19
 8004b66:	22ff      	movs	r2, #255	; 0xff
 8004b68:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 19; i++) {
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	61fb      	str	r3, [r7, #28]
 8004b6e:	e00e      	b.n	8004b8e <Encode_Msg_PID_Gain+0x92>
		telemetry_tx_buf[19] -= telemetry_tx_buf[i];
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	3313      	adds	r3, #19
 8004b74:	7819      	ldrb	r1, [r3, #0]
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	697a      	ldr	r2, [r7, #20]
 8004b7a:	4413      	add	r3, r2
 8004b7c:	781a      	ldrb	r2, [r3, #0]
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	3313      	adds	r3, #19
 8004b82:	1a8a      	subs	r2, r1, r2
 8004b84:	b2d2      	uxtb	r2, r2
 8004b86:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 19; i++) {
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	3301      	adds	r3, #1
 8004b8c:	61fb      	str	r3, [r7, #28]
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	2b12      	cmp	r3, #18
 8004b92:	dded      	ble.n	8004b70 <Encode_Msg_PID_Gain+0x74>
	}
}
 8004b94:	bf00      	nop
 8004b96:	3724      	adds	r7, #36	; 0x24
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr

08004ba0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8004ba4:	bf00      	nop
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr

08004bae <LL_SPI_SetStandard>:
{
 8004bae:	b480      	push	{r7}
 8004bb0:	b083      	sub	sp, #12
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	6078      	str	r0, [r7, #4]
 8004bb6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	f023 0210 	bic.w	r2, r3, #16
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	431a      	orrs	r2, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	605a      	str	r2, [r3, #4]
}
 8004bc8:	bf00      	nop
 8004bca:	370c      	adds	r7, #12
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr

08004bd4 <LL_AHB1_GRP1_EnableClock>:
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b085      	sub	sp, #20
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8004bdc:	4b08      	ldr	r3, [pc, #32]	; (8004c00 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004bde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004be0:	4907      	ldr	r1, [pc, #28]	; (8004c00 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4313      	orrs	r3, r2
 8004be6:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8004be8:	4b05      	ldr	r3, [pc, #20]	; (8004c00 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004bea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	4013      	ands	r3, r2
 8004bf0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
}
 8004bf4:	bf00      	nop
 8004bf6:	3714      	adds	r7, #20
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr
 8004c00:	40023800 	.word	0x40023800

08004c04 <LL_APB1_GRP1_EnableClock>:
{
 8004c04:	b480      	push	{r7}
 8004c06:	b085      	sub	sp, #20
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8004c0c:	4b08      	ldr	r3, [pc, #32]	; (8004c30 <LL_APB1_GRP1_EnableClock+0x2c>)
 8004c0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c10:	4907      	ldr	r1, [pc, #28]	; (8004c30 <LL_APB1_GRP1_EnableClock+0x2c>)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8004c18:	4b05      	ldr	r3, [pc, #20]	; (8004c30 <LL_APB1_GRP1_EnableClock+0x2c>)
 8004c1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	4013      	ands	r3, r2
 8004c20:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004c22:	68fb      	ldr	r3, [r7, #12]
}
 8004c24:	bf00      	nop
 8004c26:	3714      	adds	r7, #20
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr
 8004c30:	40023800 	.word	0x40023800

08004c34 <LL_APB2_GRP1_EnableClock>:
{
 8004c34:	b480      	push	{r7}
 8004c36:	b085      	sub	sp, #20
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8004c3c:	4b08      	ldr	r3, [pc, #32]	; (8004c60 <LL_APB2_GRP1_EnableClock+0x2c>)
 8004c3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c40:	4907      	ldr	r1, [pc, #28]	; (8004c60 <LL_APB2_GRP1_EnableClock+0x2c>)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8004c48:	4b05      	ldr	r3, [pc, #20]	; (8004c60 <LL_APB2_GRP1_EnableClock+0x2c>)
 8004c4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	4013      	ands	r3, r2
 8004c50:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004c52:	68fb      	ldr	r3, [r7, #12]
}
 8004c54:	bf00      	nop
 8004c56:	3714      	adds	r7, #20
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr
 8004c60:	40023800 	.word	0x40023800

08004c64 <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b090      	sub	sp, #64	; 0x40
 8004c68:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8004c6a:	f107 0318 	add.w	r3, r7, #24
 8004c6e:	2228      	movs	r2, #40	; 0x28
 8004c70:	2100      	movs	r1, #0
 8004c72:	4618      	mov	r0, r3
 8004c74:	f006 f814 	bl	800aca0 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c78:	463b      	mov	r3, r7
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	601a      	str	r2, [r3, #0]
 8004c7e:	605a      	str	r2, [r3, #4]
 8004c80:	609a      	str	r2, [r3, #8]
 8004c82:	60da      	str	r2, [r3, #12]
 8004c84:	611a      	str	r2, [r3, #16]
 8004c86:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8004c88:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004c8c:	f7ff ffd2 	bl	8004c34 <LL_APB2_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8004c90:	2001      	movs	r0, #1
 8004c92:	f7ff ff9f 	bl	8004bd4 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration  
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8004c96:	23e0      	movs	r3, #224	; 0xe0
 8004c98:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004c9a:	2302      	movs	r3, #2
 8004c9c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8004caa:	2305      	movs	r3, #5
 8004cac:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cae:	463b      	mov	r3, r7
 8004cb0:	4619      	mov	r1, r3
 8004cb2:	4813      	ldr	r0, [pc, #76]	; (8004d00 <MX_SPI1_Init+0x9c>)
 8004cb4:	f005 f85f 	bl	8009d76 <LL_GPIO_Init>

  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8004cbc:	f44f 7382 	mov.w	r3, #260	; 0x104
 8004cc0:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8004cc6:	2302      	movs	r3, #2
 8004cc8:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8004cce:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 8004cd4:	2310      	movs	r3, #16
 8004cd6:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8004ce0:	230a      	movs	r3, #10
 8004ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8004ce4:	f107 0318 	add.w	r3, r7, #24
 8004ce8:	4619      	mov	r1, r3
 8004cea:	4806      	ldr	r0, [pc, #24]	; (8004d04 <MX_SPI1_Init+0xa0>)
 8004cec:	f005 fa11 	bl	800a112 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8004cf0:	2100      	movs	r1, #0
 8004cf2:	4804      	ldr	r0, [pc, #16]	; (8004d04 <MX_SPI1_Init+0xa0>)
 8004cf4:	f7ff ff5b 	bl	8004bae <LL_SPI_SetStandard>

}
 8004cf8:	bf00      	nop
 8004cfa:	3740      	adds	r7, #64	; 0x40
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}
 8004d00:	40020000 	.word	0x40020000
 8004d04:	40013000 	.word	0x40013000

08004d08 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b090      	sub	sp, #64	; 0x40
 8004d0c:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8004d0e:	f107 0318 	add.w	r3, r7, #24
 8004d12:	2228      	movs	r2, #40	; 0x28
 8004d14:	2100      	movs	r1, #0
 8004d16:	4618      	mov	r0, r3
 8004d18:	f005 ffc2 	bl	800aca0 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d1c:	463b      	mov	r3, r7
 8004d1e:	2200      	movs	r2, #0
 8004d20:	601a      	str	r2, [r3, #0]
 8004d22:	605a      	str	r2, [r3, #4]
 8004d24:	609a      	str	r2, [r3, #8]
 8004d26:	60da      	str	r2, [r3, #12]
 8004d28:	611a      	str	r2, [r3, #16]
 8004d2a:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8004d2c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004d30:	f7ff ff68 	bl	8004c04 <LL_APB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8004d34:	2002      	movs	r0, #2
 8004d36:	f7ff ff4d 	bl	8004bd4 <LL_AHB1_GRP1_EnableClock>
  /**SPI2 GPIO Configuration  
  PB13   ------> SPI2_SCK
  PB14   ------> SPI2_MISO
  PB15   ------> SPI2_MOSI 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 8004d3a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8004d3e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004d40:	2302      	movs	r3, #2
 8004d42:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8004d44:	2303      	movs	r3, #3
 8004d46:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8004d50:	2305      	movs	r3, #5
 8004d52:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d54:	463b      	mov	r3, r7
 8004d56:	4619      	mov	r1, r3
 8004d58:	4813      	ldr	r0, [pc, #76]	; (8004da8 <MX_SPI2_Init+0xa0>)
 8004d5a:	f005 f80c 	bl	8009d76 <LL_GPIO_Init>

  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8004d62:	f44f 7382 	mov.w	r3, #260	; 0x104
 8004d66:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8004d6c:	2302      	movs	r3, #2
 8004d6e:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8004d70:	2301      	movs	r3, #1
 8004d72:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8004d74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d78:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 8004d7a:	2318      	movs	r3, #24
 8004d7c:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8004d82:	2300      	movs	r3, #0
 8004d84:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8004d86:	230a      	movs	r3, #10
 8004d88:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8004d8a:	f107 0318 	add.w	r3, r7, #24
 8004d8e:	4619      	mov	r1, r3
 8004d90:	4806      	ldr	r0, [pc, #24]	; (8004dac <MX_SPI2_Init+0xa4>)
 8004d92:	f005 f9be 	bl	800a112 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 8004d96:	2100      	movs	r1, #0
 8004d98:	4804      	ldr	r0, [pc, #16]	; (8004dac <MX_SPI2_Init+0xa4>)
 8004d9a:	f7ff ff08 	bl	8004bae <LL_SPI_SetStandard>

}
 8004d9e:	bf00      	nop
 8004da0:	3740      	adds	r7, #64	; 0x40
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop
 8004da8:	40020400 	.word	0x40020400
 8004dac:	40003800 	.word	0x40003800

08004db0 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b090      	sub	sp, #64	; 0x40
 8004db4:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8004db6:	f107 0318 	add.w	r3, r7, #24
 8004dba:	2228      	movs	r2, #40	; 0x28
 8004dbc:	2100      	movs	r1, #0
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f005 ff6e 	bl	800aca0 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004dc4:	463b      	mov	r3, r7
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	601a      	str	r2, [r3, #0]
 8004dca:	605a      	str	r2, [r3, #4]
 8004dcc:	609a      	str	r2, [r3, #8]
 8004dce:	60da      	str	r2, [r3, #12]
 8004dd0:	611a      	str	r2, [r3, #16]
 8004dd2:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 8004dd4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004dd8:	f7ff ff14 	bl	8004c04 <LL_APB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8004ddc:	2002      	movs	r0, #2
 8004dde:	f7ff fef9 	bl	8004bd4 <LL_AHB1_GRP1_EnableClock>
  /**SPI3 GPIO Configuration  
  PB3   ------> SPI3_SCK
  PB4   ------> SPI3_MISO
  PB5   ------> SPI3_MOSI 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 8004de2:	2338      	movs	r3, #56	; 0x38
 8004de4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004de6:	2302      	movs	r3, #2
 8004de8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8004dea:	2303      	movs	r3, #3
 8004dec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004dee:	2300      	movs	r3, #0
 8004df0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004df2:	2300      	movs	r3, #0
 8004df4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8004df6:	2306      	movs	r3, #6
 8004df8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004dfa:	463b      	mov	r3, r7
 8004dfc:	4619      	mov	r1, r3
 8004dfe:	4813      	ldr	r0, [pc, #76]	; (8004e4c <MX_SPI3_Init+0x9c>)
 8004e00:	f004 ffb9 	bl	8009d76 <LL_GPIO_Init>

  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8004e04:	2300      	movs	r3, #0
 8004e06:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8004e08:	f44f 7382 	mov.w	r3, #260	; 0x104
 8004e0c:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8004e12:	2302      	movs	r3, #2
 8004e14:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8004e16:	2301      	movs	r3, #1
 8004e18:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8004e1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8004e20:	2308      	movs	r3, #8
 8004e22:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8004e24:	2300      	movs	r3, #0
 8004e26:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8004e2c:	230a      	movs	r3, #10
 8004e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 8004e30:	f107 0318 	add.w	r3, r7, #24
 8004e34:	4619      	mov	r1, r3
 8004e36:	4806      	ldr	r0, [pc, #24]	; (8004e50 <MX_SPI3_Init+0xa0>)
 8004e38:	f005 f96b 	bl	800a112 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 8004e3c:	2100      	movs	r1, #0
 8004e3e:	4804      	ldr	r0, [pc, #16]	; (8004e50 <MX_SPI3_Init+0xa0>)
 8004e40:	f7ff feb5 	bl	8004bae <LL_SPI_SetStandard>

}
 8004e44:	bf00      	nop
 8004e46:	3740      	adds	r7, #64	; 0x40
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	40020400 	.word	0x40020400
 8004e50:	40003c00 	.word	0x40003c00

08004e54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	607b      	str	r3, [r7, #4]
 8004e5e:	4b10      	ldr	r3, [pc, #64]	; (8004ea0 <HAL_MspInit+0x4c>)
 8004e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e62:	4a0f      	ldr	r2, [pc, #60]	; (8004ea0 <HAL_MspInit+0x4c>)
 8004e64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e68:	6453      	str	r3, [r2, #68]	; 0x44
 8004e6a:	4b0d      	ldr	r3, [pc, #52]	; (8004ea0 <HAL_MspInit+0x4c>)
 8004e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e72:	607b      	str	r3, [r7, #4]
 8004e74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004e76:	2300      	movs	r3, #0
 8004e78:	603b      	str	r3, [r7, #0]
 8004e7a:	4b09      	ldr	r3, [pc, #36]	; (8004ea0 <HAL_MspInit+0x4c>)
 8004e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7e:	4a08      	ldr	r2, [pc, #32]	; (8004ea0 <HAL_MspInit+0x4c>)
 8004e80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e84:	6413      	str	r3, [r2, #64]	; 0x40
 8004e86:	4b06      	ldr	r3, [pc, #24]	; (8004ea0 <HAL_MspInit+0x4c>)
 8004e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e8e:	603b      	str	r3, [r7, #0]
 8004e90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004e92:	bf00      	nop
 8004e94:	370c      	adds	r7, #12
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr
 8004e9e:	bf00      	nop
 8004ea0:	40023800 	.word	0x40023800

08004ea4 <LL_TIM_ClearFlag_UPDATE>:
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b083      	sub	sp, #12
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f06f 0201 	mvn.w	r2, #1
 8004eb2:	611a      	str	r2, [r3, #16]
}
 8004eb4:	bf00      	nop
 8004eb6:	370c      	adds	r7, #12
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr

08004ec0 <LL_TIM_IsActiveFlag_UPDATE>:
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b083      	sub	sp, #12
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	691b      	ldr	r3, [r3, #16]
 8004ecc:	f003 0301 	and.w	r3, r3, #1
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d101      	bne.n	8004ed8 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e000      	b.n	8004eda <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8004ed8:	2300      	movs	r3, #0
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	370c      	adds	r7, #12
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr

08004ee6 <LL_USART_IsActiveFlag_RXNE>:
{
 8004ee6:	b480      	push	{r7}
 8004ee8:	b083      	sub	sp, #12
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 0320 	and.w	r3, r3, #32
 8004ef6:	2b20      	cmp	r3, #32
 8004ef8:	bf0c      	ite	eq
 8004efa:	2301      	moveq	r3, #1
 8004efc:	2300      	movne	r3, #0
 8004efe:	b2db      	uxtb	r3, r3
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	370c      	adds	r7, #12
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <LL_USART_ClearFlag_RXNE>:
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b083      	sub	sp, #12
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f06f 0220 	mvn.w	r2, #32
 8004f1a:	601a      	str	r2, [r3, #0]
}
 8004f1c:	bf00      	nop
 8004f1e:	370c      	adds	r7, #12
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr

08004f28 <LL_USART_ReceiveData8>:
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b083      	sub	sp, #12
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	b2db      	uxtb	r3, r3
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	370c      	adds	r7, #12
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr

08004f42 <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 8004f42:	b480      	push	{r7}
 8004f44:	af00      	add	r7, sp, #0

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */

	/* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004f46:	bf00      	nop
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr

08004f50 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 8004f50:	b480      	push	{r7}
 8004f52:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1)
 8004f54:	e7fe      	b.n	8004f54 <HardFault_Handler+0x4>

08004f56 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 8004f56:	b480      	push	{r7}
 8004f58:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1)
 8004f5a:	e7fe      	b.n	8004f5a <MemManage_Handler+0x4>

08004f5c <BusFault_Handler>:

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1)
 8004f60:	e7fe      	b.n	8004f60 <BusFault_Handler+0x4>

08004f62 <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 8004f62:	b480      	push	{r7}
 8004f64:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1)
 8004f66:	e7fe      	b.n	8004f66 <UsageFault_Handler+0x4>

08004f68 <SVC_Handler>:

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8004f6c:	bf00      	nop
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr

08004f76 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 8004f76:	b480      	push	{r7}
 8004f78:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8004f7a:	bf00      	nop
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr

08004f84 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 8004f84:	b480      	push	{r7}
 8004f86:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8004f88:	bf00      	nop
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr

08004f92 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 8004f92:	b580      	push	{r7, lr}
 8004f94:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8004f96:	f000 ffe9 	bl	8005f6c <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8004f9a:	bf00      	nop
 8004f9c:	bd80      	pop	{r7, pc}
	...

08004fa0 <USART1_IRQHandler>:

/**
 * @brief This function handles USART1 global interrupt.
 */
void USART1_IRQHandler(void)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART1_IRQn 0 */

	/* USER CODE END USART1_IRQn 0 */
	HAL_UART_IRQHandler(&huart1);
 8004fa4:	4802      	ldr	r0, [pc, #8]	; (8004fb0 <USART1_IRQHandler+0x10>)
 8004fa6:	f003 ffe5 	bl	8008f74 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART1_IRQn 1 */

	/* USER CODE END USART1_IRQn 1 */
}
 8004faa:	bf00      	nop
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	bf00      	nop
 8004fb0:	20000578 	.word	0x20000578

08004fb4 <UART4_IRQHandler>:

/**
 * @brief This function handles UART4 global interrupt.
 */
void UART4_IRQHandler(void)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UART4_IRQn 0 */
	static unsigned char cnt = 0;

	if (LL_USART_IsActiveFlag_RXNE(UART4)) {
 8004fb8:	4831      	ldr	r0, [pc, #196]	; (8005080 <UART4_IRQHandler+0xcc>)
 8004fba:	f7ff ff94 	bl	8004ee6 <LL_USART_IsActiveFlag_RXNE>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d058      	beq.n	8005076 <UART4_IRQHandler+0xc2>
		LL_USART_ClearFlag_RXNE(UART4);
 8004fc4:	482e      	ldr	r0, [pc, #184]	; (8005080 <UART4_IRQHandler+0xcc>)
 8004fc6:	f7ff ffa1 	bl	8004f0c <LL_USART_ClearFlag_RXNE>
		uart4_rx_data = LL_USART_ReceiveData8(UART4);
 8004fca:	482d      	ldr	r0, [pc, #180]	; (8005080 <UART4_IRQHandler+0xcc>)
 8004fcc:	f7ff ffac 	bl	8004f28 <LL_USART_ReceiveData8>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	4b2b      	ldr	r3, [pc, #172]	; (8005084 <UART4_IRQHandler+0xd0>)
 8004fd6:	701a      	strb	r2, [r3, #0]
		uart4_rx_flag = 1;
 8004fd8:	4b2b      	ldr	r3, [pc, #172]	; (8005088 <UART4_IRQHandler+0xd4>)
 8004fda:	2201      	movs	r2, #1
 8004fdc:	701a      	strb	r2, [r3, #0]
		//		if (cnt == 35) {
		//			m8n_rx_cplt_flag = 1;
		//			cnt = 0;
		//		}

		switch (cnt) {
 8004fde:	4b2b      	ldr	r3, [pc, #172]	; (800508c <UART4_IRQHandler+0xd8>)
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d015      	beq.n	8005012 <UART4_IRQHandler+0x5e>
 8004fe6:	2b23      	cmp	r3, #35	; 0x23
 8004fe8:	d029      	beq.n	800503e <UART4_IRQHandler+0x8a>
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d135      	bne.n	800505a <UART4_IRQHandler+0xa6>
		case 0:
			if (uart4_rx_data == 0xb5) {
 8004fee:	4b25      	ldr	r3, [pc, #148]	; (8005084 <UART4_IRQHandler+0xd0>)
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	2bb5      	cmp	r3, #181	; 0xb5
 8004ff4:	d141      	bne.n	800507a <UART4_IRQHandler+0xc6>
				m8n_rx_buf[cnt] = uart4_rx_data;
 8004ff6:	4b25      	ldr	r3, [pc, #148]	; (800508c <UART4_IRQHandler+0xd8>)
 8004ff8:	781b      	ldrb	r3, [r3, #0]
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	4b21      	ldr	r3, [pc, #132]	; (8005084 <UART4_IRQHandler+0xd0>)
 8004ffe:	7819      	ldrb	r1, [r3, #0]
 8005000:	4b23      	ldr	r3, [pc, #140]	; (8005090 <UART4_IRQHandler+0xdc>)
 8005002:	5499      	strb	r1, [r3, r2]
				cnt++;
 8005004:	4b21      	ldr	r3, [pc, #132]	; (800508c <UART4_IRQHandler+0xd8>)
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	3301      	adds	r3, #1
 800500a:	b2da      	uxtb	r2, r3
 800500c:	4b1f      	ldr	r3, [pc, #124]	; (800508c <UART4_IRQHandler+0xd8>)
 800500e:	701a      	strb	r2, [r3, #0]
			}
			break;
 8005010:	e033      	b.n	800507a <UART4_IRQHandler+0xc6>
		case 1:
			if (uart4_rx_data == 0x62) {
 8005012:	4b1c      	ldr	r3, [pc, #112]	; (8005084 <UART4_IRQHandler+0xd0>)
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	2b62      	cmp	r3, #98	; 0x62
 8005018:	d10d      	bne.n	8005036 <UART4_IRQHandler+0x82>
				m8n_rx_buf[cnt] = uart4_rx_data;
 800501a:	4b1c      	ldr	r3, [pc, #112]	; (800508c <UART4_IRQHandler+0xd8>)
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	461a      	mov	r2, r3
 8005020:	4b18      	ldr	r3, [pc, #96]	; (8005084 <UART4_IRQHandler+0xd0>)
 8005022:	7819      	ldrb	r1, [r3, #0]
 8005024:	4b1a      	ldr	r3, [pc, #104]	; (8005090 <UART4_IRQHandler+0xdc>)
 8005026:	5499      	strb	r1, [r3, r2]
				cnt++;
 8005028:	4b18      	ldr	r3, [pc, #96]	; (800508c <UART4_IRQHandler+0xd8>)
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	3301      	adds	r3, #1
 800502e:	b2da      	uxtb	r2, r3
 8005030:	4b16      	ldr	r3, [pc, #88]	; (800508c <UART4_IRQHandler+0xd8>)
 8005032:	701a      	strb	r2, [r3, #0]
			} else {
				cnt = 0;
			}
			break;
 8005034:	e022      	b.n	800507c <UART4_IRQHandler+0xc8>
				cnt = 0;
 8005036:	4b15      	ldr	r3, [pc, #84]	; (800508c <UART4_IRQHandler+0xd8>)
 8005038:	2200      	movs	r2, #0
 800503a:	701a      	strb	r2, [r3, #0]
			break;
 800503c:	e01e      	b.n	800507c <UART4_IRQHandler+0xc8>
		case 35:
			m8n_rx_buf[cnt] = uart4_rx_data;
 800503e:	4b13      	ldr	r3, [pc, #76]	; (800508c <UART4_IRQHandler+0xd8>)
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	461a      	mov	r2, r3
 8005044:	4b0f      	ldr	r3, [pc, #60]	; (8005084 <UART4_IRQHandler+0xd0>)
 8005046:	7819      	ldrb	r1, [r3, #0]
 8005048:	4b11      	ldr	r3, [pc, #68]	; (8005090 <UART4_IRQHandler+0xdc>)
 800504a:	5499      	strb	r1, [r3, r2]
			cnt = 0;
 800504c:	4b0f      	ldr	r3, [pc, #60]	; (800508c <UART4_IRQHandler+0xd8>)
 800504e:	2200      	movs	r2, #0
 8005050:	701a      	strb	r2, [r3, #0]
			m8n_rx_cplt_flag = 1;
 8005052:	4b10      	ldr	r3, [pc, #64]	; (8005094 <UART4_IRQHandler+0xe0>)
 8005054:	2201      	movs	r2, #1
 8005056:	701a      	strb	r2, [r3, #0]
			break;
 8005058:	e010      	b.n	800507c <UART4_IRQHandler+0xc8>
		default:
			m8n_rx_buf[cnt] = uart4_rx_data;
 800505a:	4b0c      	ldr	r3, [pc, #48]	; (800508c <UART4_IRQHandler+0xd8>)
 800505c:	781b      	ldrb	r3, [r3, #0]
 800505e:	461a      	mov	r2, r3
 8005060:	4b08      	ldr	r3, [pc, #32]	; (8005084 <UART4_IRQHandler+0xd0>)
 8005062:	7819      	ldrb	r1, [r3, #0]
 8005064:	4b0a      	ldr	r3, [pc, #40]	; (8005090 <UART4_IRQHandler+0xdc>)
 8005066:	5499      	strb	r1, [r3, r2]
			cnt++;
 8005068:	4b08      	ldr	r3, [pc, #32]	; (800508c <UART4_IRQHandler+0xd8>)
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	3301      	adds	r3, #1
 800506e:	b2da      	uxtb	r2, r3
 8005070:	4b06      	ldr	r3, [pc, #24]	; (800508c <UART4_IRQHandler+0xd8>)
 8005072:	701a      	strb	r2, [r3, #0]
			break;
 8005074:	e002      	b.n	800507c <UART4_IRQHandler+0xc8>
		}
	}
 8005076:	bf00      	nop
 8005078:	e000      	b.n	800507c <UART4_IRQHandler+0xc8>
			break;
 800507a:	bf00      	nop

	/* USER CODE END UART4_IRQn 0 */
	/* USER CODE BEGIN UART4_IRQn 1 */

	/* USER CODE END UART4_IRQn 1 */
}
 800507c:	bf00      	nop
 800507e:	bd80      	pop	{r7, pc}
 8005080:	40004c00 	.word	0x40004c00
 8005084:	20000210 	.word	0x20000210
 8005088:	2000020f 	.word	0x2000020f
 800508c:	20000216 	.word	0x20000216
 8005090:	20000554 	.word	0x20000554
 8005094:	20000211 	.word	0x20000211

08005098 <UART5_IRQHandler>:

/**
 * @brief This function handles UART5 global interrupt.
 */
void UART5_IRQHandler(void)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UART5_IRQn 0 */
	static unsigned char cnt = 0;

	if (LL_USART_IsActiveFlag_RXNE(UART5)) {
 800509c:	4831      	ldr	r0, [pc, #196]	; (8005164 <UART5_IRQHandler+0xcc>)
 800509e:	f7ff ff22 	bl	8004ee6 <LL_USART_IsActiveFlag_RXNE>
 80050a2:	4603      	mov	r3, r0
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d058      	beq.n	800515a <UART5_IRQHandler+0xc2>
		LL_USART_ClearFlag_RXNE(UART5);
 80050a8:	482e      	ldr	r0, [pc, #184]	; (8005164 <UART5_IRQHandler+0xcc>)
 80050aa:	f7ff ff2f 	bl	8004f0c <LL_USART_ClearFlag_RXNE>
		uart5_rx_data = LL_USART_ReceiveData8(UART5);
 80050ae:	482d      	ldr	r0, [pc, #180]	; (8005164 <UART5_IRQHandler+0xcc>)
 80050b0:	f7ff ff3a 	bl	8004f28 <LL_USART_ReceiveData8>
 80050b4:	4603      	mov	r3, r0
 80050b6:	461a      	mov	r2, r3
 80050b8:	4b2b      	ldr	r3, [pc, #172]	; (8005168 <UART5_IRQHandler+0xd0>)
 80050ba:	701a      	strb	r2, [r3, #0]
		uart5_rx_flag = 1;
 80050bc:	4b2b      	ldr	r3, [pc, #172]	; (800516c <UART5_IRQHandler+0xd4>)
 80050be:	2201      	movs	r2, #1
 80050c0:	701a      	strb	r2, [r3, #0]

		switch (cnt) {
 80050c2:	4b2b      	ldr	r3, [pc, #172]	; (8005170 <UART5_IRQHandler+0xd8>)
 80050c4:	781b      	ldrb	r3, [r3, #0]
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d015      	beq.n	80050f6 <UART5_IRQHandler+0x5e>
 80050ca:	2b1f      	cmp	r3, #31
 80050cc:	d029      	beq.n	8005122 <UART5_IRQHandler+0x8a>
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d135      	bne.n	800513e <UART5_IRQHandler+0xa6>
		case 0:
			if (uart5_rx_data == 0x20) {
 80050d2:	4b25      	ldr	r3, [pc, #148]	; (8005168 <UART5_IRQHandler+0xd0>)
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	2b20      	cmp	r3, #32
 80050d8:	d141      	bne.n	800515e <UART5_IRQHandler+0xc6>
				ibus_rx_buf[cnt] = uart5_rx_data;
 80050da:	4b25      	ldr	r3, [pc, #148]	; (8005170 <UART5_IRQHandler+0xd8>)
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	461a      	mov	r2, r3
 80050e0:	4b21      	ldr	r3, [pc, #132]	; (8005168 <UART5_IRQHandler+0xd0>)
 80050e2:	7819      	ldrb	r1, [r3, #0]
 80050e4:	4b23      	ldr	r3, [pc, #140]	; (8005174 <UART5_IRQHandler+0xdc>)
 80050e6:	5499      	strb	r1, [r3, r2]
				cnt++;
 80050e8:	4b21      	ldr	r3, [pc, #132]	; (8005170 <UART5_IRQHandler+0xd8>)
 80050ea:	781b      	ldrb	r3, [r3, #0]
 80050ec:	3301      	adds	r3, #1
 80050ee:	b2da      	uxtb	r2, r3
 80050f0:	4b1f      	ldr	r3, [pc, #124]	; (8005170 <UART5_IRQHandler+0xd8>)
 80050f2:	701a      	strb	r2, [r3, #0]
			}
			break;
 80050f4:	e033      	b.n	800515e <UART5_IRQHandler+0xc6>
		case 1:
			if (uart5_rx_data == 0x40) {
 80050f6:	4b1c      	ldr	r3, [pc, #112]	; (8005168 <UART5_IRQHandler+0xd0>)
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	2b40      	cmp	r3, #64	; 0x40
 80050fc:	d10d      	bne.n	800511a <UART5_IRQHandler+0x82>
				ibus_rx_buf[cnt] = uart5_rx_data;
 80050fe:	4b1c      	ldr	r3, [pc, #112]	; (8005170 <UART5_IRQHandler+0xd8>)
 8005100:	781b      	ldrb	r3, [r3, #0]
 8005102:	461a      	mov	r2, r3
 8005104:	4b18      	ldr	r3, [pc, #96]	; (8005168 <UART5_IRQHandler+0xd0>)
 8005106:	7819      	ldrb	r1, [r3, #0]
 8005108:	4b1a      	ldr	r3, [pc, #104]	; (8005174 <UART5_IRQHandler+0xdc>)
 800510a:	5499      	strb	r1, [r3, r2]
				cnt++;
 800510c:	4b18      	ldr	r3, [pc, #96]	; (8005170 <UART5_IRQHandler+0xd8>)
 800510e:	781b      	ldrb	r3, [r3, #0]
 8005110:	3301      	adds	r3, #1
 8005112:	b2da      	uxtb	r2, r3
 8005114:	4b16      	ldr	r3, [pc, #88]	; (8005170 <UART5_IRQHandler+0xd8>)
 8005116:	701a      	strb	r2, [r3, #0]
			} else {
				cnt = 0;
			}
			break;
 8005118:	e022      	b.n	8005160 <UART5_IRQHandler+0xc8>
				cnt = 0;
 800511a:	4b15      	ldr	r3, [pc, #84]	; (8005170 <UART5_IRQHandler+0xd8>)
 800511c:	2200      	movs	r2, #0
 800511e:	701a      	strb	r2, [r3, #0]
			break;
 8005120:	e01e      	b.n	8005160 <UART5_IRQHandler+0xc8>
		case 31:
			ibus_rx_buf[cnt] = uart5_rx_data;
 8005122:	4b13      	ldr	r3, [pc, #76]	; (8005170 <UART5_IRQHandler+0xd8>)
 8005124:	781b      	ldrb	r3, [r3, #0]
 8005126:	461a      	mov	r2, r3
 8005128:	4b0f      	ldr	r3, [pc, #60]	; (8005168 <UART5_IRQHandler+0xd0>)
 800512a:	7819      	ldrb	r1, [r3, #0]
 800512c:	4b11      	ldr	r3, [pc, #68]	; (8005174 <UART5_IRQHandler+0xdc>)
 800512e:	5499      	strb	r1, [r3, r2]
			cnt = 0;
 8005130:	4b0f      	ldr	r3, [pc, #60]	; (8005170 <UART5_IRQHandler+0xd8>)
 8005132:	2200      	movs	r2, #0
 8005134:	701a      	strb	r2, [r3, #0]
			ibus_rx_cplt_flag = 1;
 8005136:	4b10      	ldr	r3, [pc, #64]	; (8005178 <UART5_IRQHandler+0xe0>)
 8005138:	2201      	movs	r2, #1
 800513a:	701a      	strb	r2, [r3, #0]
			break;
 800513c:	e010      	b.n	8005160 <UART5_IRQHandler+0xc8>
		default:
			ibus_rx_buf[cnt] = uart5_rx_data;
 800513e:	4b0c      	ldr	r3, [pc, #48]	; (8005170 <UART5_IRQHandler+0xd8>)
 8005140:	781b      	ldrb	r3, [r3, #0]
 8005142:	461a      	mov	r2, r3
 8005144:	4b08      	ldr	r3, [pc, #32]	; (8005168 <UART5_IRQHandler+0xd0>)
 8005146:	7819      	ldrb	r1, [r3, #0]
 8005148:	4b0a      	ldr	r3, [pc, #40]	; (8005174 <UART5_IRQHandler+0xdc>)
 800514a:	5499      	strb	r1, [r3, r2]
			cnt++;
 800514c:	4b08      	ldr	r3, [pc, #32]	; (8005170 <UART5_IRQHandler+0xd8>)
 800514e:	781b      	ldrb	r3, [r3, #0]
 8005150:	3301      	adds	r3, #1
 8005152:	b2da      	uxtb	r2, r3
 8005154:	4b06      	ldr	r3, [pc, #24]	; (8005170 <UART5_IRQHandler+0xd8>)
 8005156:	701a      	strb	r2, [r3, #0]
			break;
 8005158:	e002      	b.n	8005160 <UART5_IRQHandler+0xc8>
		}

		//		while(!LL_USART_IsActiveFlag_TXE(USART6));
		//		LL_USART_TransmitData8(USART6, uart5_rx_data);
	}
 800515a:	bf00      	nop
 800515c:	e000      	b.n	8005160 <UART5_IRQHandler+0xc8>
			break;
 800515e:	bf00      	nop
	/* USER CODE END UART5_IRQn 0 */
	/* USER CODE BEGIN UART5_IRQn 1 */

	/* USER CODE END UART5_IRQn 1 */
}
 8005160:	bf00      	nop
 8005162:	bd80      	pop	{r7, pc}
 8005164:	40005000 	.word	0x40005000
 8005168:	2000020e 	.word	0x2000020e
 800516c:	2000020d 	.word	0x2000020d
 8005170:	20000217 	.word	0x20000217
 8005174:	20000534 	.word	0x20000534
 8005178:	20000212 	.word	0x20000212

0800517c <TIM7_IRQHandler>:

/**
 * @brief This function handles TIM7 global interrupt.
 */
void TIM7_IRQHandler(void)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM7_IRQn 0 */
	//1ms period
	static unsigned char tim7_20ms_count = 0;
	static unsigned char tim7_100ms_count = 0;

	if(LL_TIM_IsActiveFlag_UPDATE(TIM7)) {
 8005180:	4815      	ldr	r0, [pc, #84]	; (80051d8 <TIM7_IRQHandler+0x5c>)
 8005182:	f7ff fe9d 	bl	8004ec0 <LL_TIM_IsActiveFlag_UPDATE>
 8005186:	4603      	mov	r3, r0
 8005188:	2b00      	cmp	r3, #0
 800518a:	d022      	beq.n	80051d2 <TIM7_IRQHandler+0x56>
		LL_TIM_ClearFlag_UPDATE(TIM7); //Clear flag of TM7
 800518c:	4812      	ldr	r0, [pc, #72]	; (80051d8 <TIM7_IRQHandler+0x5c>)
 800518e:	f7ff fe89 	bl	8004ea4 <LL_TIM_ClearFlag_UPDATE>

		//20ms - 50Hz Transmission
		tim7_20ms_count++;
 8005192:	4b12      	ldr	r3, [pc, #72]	; (80051dc <TIM7_IRQHandler+0x60>)
 8005194:	781b      	ldrb	r3, [r3, #0]
 8005196:	3301      	adds	r3, #1
 8005198:	b2da      	uxtb	r2, r3
 800519a:	4b10      	ldr	r3, [pc, #64]	; (80051dc <TIM7_IRQHandler+0x60>)
 800519c:	701a      	strb	r2, [r3, #0]
		if (tim7_20ms_count == 20) {
 800519e:	4b0f      	ldr	r3, [pc, #60]	; (80051dc <TIM7_IRQHandler+0x60>)
 80051a0:	781b      	ldrb	r3, [r3, #0]
 80051a2:	2b14      	cmp	r3, #20
 80051a4:	d105      	bne.n	80051b2 <TIM7_IRQHandler+0x36>
			tim7_20ms_count = 0;
 80051a6:	4b0d      	ldr	r3, [pc, #52]	; (80051dc <TIM7_IRQHandler+0x60>)
 80051a8:	2200      	movs	r2, #0
 80051aa:	701a      	strb	r2, [r3, #0]
			tim7_20ms_flag = 1;
 80051ac:	4b0c      	ldr	r3, [pc, #48]	; (80051e0 <TIM7_IRQHandler+0x64>)
 80051ae:	2201      	movs	r2, #1
 80051b0:	701a      	strb	r2, [r3, #0]
		}
		//100ms - 10Hz Transmission
		tim7_100ms_count++;
 80051b2:	4b0c      	ldr	r3, [pc, #48]	; (80051e4 <TIM7_IRQHandler+0x68>)
 80051b4:	781b      	ldrb	r3, [r3, #0]
 80051b6:	3301      	adds	r3, #1
 80051b8:	b2da      	uxtb	r2, r3
 80051ba:	4b0a      	ldr	r3, [pc, #40]	; (80051e4 <TIM7_IRQHandler+0x68>)
 80051bc:	701a      	strb	r2, [r3, #0]
		if (tim7_100ms_count == 100) {
 80051be:	4b09      	ldr	r3, [pc, #36]	; (80051e4 <TIM7_IRQHandler+0x68>)
 80051c0:	781b      	ldrb	r3, [r3, #0]
 80051c2:	2b64      	cmp	r3, #100	; 0x64
 80051c4:	d105      	bne.n	80051d2 <TIM7_IRQHandler+0x56>
			tim7_100ms_count = 0;
 80051c6:	4b07      	ldr	r3, [pc, #28]	; (80051e4 <TIM7_IRQHandler+0x68>)
 80051c8:	2200      	movs	r2, #0
 80051ca:	701a      	strb	r2, [r3, #0]
			tim7_100ms_flag = 1;
 80051cc:	4b06      	ldr	r3, [pc, #24]	; (80051e8 <TIM7_IRQHandler+0x6c>)
 80051ce:	2201      	movs	r2, #1
 80051d0:	701a      	strb	r2, [r3, #0]

	/* USER CODE END TIM7_IRQn 0 */
	/* USER CODE BEGIN TIM7_IRQn 1 */

	/* USER CODE END TIM7_IRQn 1 */
}
 80051d2:	bf00      	nop
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	bf00      	nop
 80051d8:	40001400 	.word	0x40001400
 80051dc:	20000218 	.word	0x20000218
 80051e0:	20000214 	.word	0x20000214
 80051e4:	20000219 	.word	0x20000219
 80051e8:	20000215 	.word	0x20000215

080051ec <DMA2_Stream0_IRQHandler>:

/**
 * @brief This function handles DMA2 stream0 global interrupt.
 */
void DMA2_Stream0_IRQHandler(void)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

	/* USER CODE END DMA2_Stream0_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_adc1);
 80051f0:	4802      	ldr	r0, [pc, #8]	; (80051fc <DMA2_Stream0_IRQHandler+0x10>)
 80051f2:	f001 fd2b 	bl	8006c4c <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

	/* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80051f6:	bf00      	nop
 80051f8:	bd80      	pop	{r7, pc}
 80051fa:	bf00      	nop
 80051fc:	200003f4 	.word	0x200003f4

08005200 <USART6_IRQHandler>:

/**
 * @brief This function handles USART6 global interrupt.
 */
void USART6_IRQHandler(void)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART6_IRQn 0 */
	if (LL_USART_IsActiveFlag_RXNE(USART6)) {
 8005204:	480a      	ldr	r0, [pc, #40]	; (8005230 <USART6_IRQHandler+0x30>)
 8005206:	f7ff fe6e 	bl	8004ee6 <LL_USART_IsActiveFlag_RXNE>
 800520a:	4603      	mov	r3, r0
 800520c:	2b00      	cmp	r3, #0
 800520e:	d00c      	beq.n	800522a <USART6_IRQHandler+0x2a>
		LL_USART_ClearFlag_RXNE(USART6);
 8005210:	4807      	ldr	r0, [pc, #28]	; (8005230 <USART6_IRQHandler+0x30>)
 8005212:	f7ff fe7b 	bl	8004f0c <LL_USART_ClearFlag_RXNE>
		uart6_rx_data = LL_USART_ReceiveData8(USART6);
 8005216:	4806      	ldr	r0, [pc, #24]	; (8005230 <USART6_IRQHandler+0x30>)
 8005218:	f7ff fe86 	bl	8004f28 <LL_USART_ReceiveData8>
 800521c:	4603      	mov	r3, r0
 800521e:	461a      	mov	r2, r3
 8005220:	4b04      	ldr	r3, [pc, #16]	; (8005234 <USART6_IRQHandler+0x34>)
 8005222:	701a      	strb	r2, [r3, #0]
		uart6_rx_flag = 1;
 8005224:	4b04      	ldr	r3, [pc, #16]	; (8005238 <USART6_IRQHandler+0x38>)
 8005226:	2201      	movs	r2, #1
 8005228:	701a      	strb	r2, [r3, #0]

	/* USER CODE END USART6_IRQn 0 */
	/* USER CODE BEGIN USART6_IRQn 1 */

	/* USER CODE END USART6_IRQn 1 */
}
 800522a:	bf00      	nop
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	40011400 	.word	0x40011400
 8005234:	2000020c 	.word	0x2000020c
 8005238:	2000020b 	.word	0x2000020b

0800523c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b086      	sub	sp, #24
 8005240:	af00      	add	r7, sp, #0
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005248:	2300      	movs	r3, #0
 800524a:	617b      	str	r3, [r7, #20]
 800524c:	e00a      	b.n	8005264 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800524e:	f3af 8000 	nop.w
 8005252:	4601      	mov	r1, r0
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	1c5a      	adds	r2, r3, #1
 8005258:	60ba      	str	r2, [r7, #8]
 800525a:	b2ca      	uxtb	r2, r1
 800525c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	3301      	adds	r3, #1
 8005262:	617b      	str	r3, [r7, #20]
 8005264:	697a      	ldr	r2, [r7, #20]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	429a      	cmp	r2, r3
 800526a:	dbf0      	blt.n	800524e <_read+0x12>
	}

return len;
 800526c:	687b      	ldr	r3, [r7, #4]
}
 800526e:	4618      	mov	r0, r3
 8005270:	3718      	adds	r7, #24
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}

08005276 <_close>:
	}
	return len;
}

int _close(int file)
{
 8005276:	b480      	push	{r7}
 8005278:	b083      	sub	sp, #12
 800527a:	af00      	add	r7, sp, #0
 800527c:	6078      	str	r0, [r7, #4]
	return -1;
 800527e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005282:	4618      	mov	r0, r3
 8005284:	370c      	adds	r7, #12
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr

0800528e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800528e:	b480      	push	{r7}
 8005290:	b083      	sub	sp, #12
 8005292:	af00      	add	r7, sp, #0
 8005294:	6078      	str	r0, [r7, #4]
 8005296:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800529e:	605a      	str	r2, [r3, #4]
	return 0;
 80052a0:	2300      	movs	r3, #0
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	370c      	adds	r7, #12
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr

080052ae <_isatty>:

int _isatty(int file)
{
 80052ae:	b480      	push	{r7}
 80052b0:	b083      	sub	sp, #12
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	6078      	str	r0, [r7, #4]
	return 1;
 80052b6:	2301      	movs	r3, #1
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	370c      	adds	r7, #12
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr

080052c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b085      	sub	sp, #20
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	60f8      	str	r0, [r7, #12]
 80052cc:	60b9      	str	r1, [r7, #8]
 80052ce:	607a      	str	r2, [r7, #4]
	return 0;
 80052d0:	2300      	movs	r3, #0
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3714      	adds	r7, #20
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr
	...

080052e0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b084      	sub	sp, #16
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80052e8:	4b11      	ldr	r3, [pc, #68]	; (8005330 <_sbrk+0x50>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d102      	bne.n	80052f6 <_sbrk+0x16>
		heap_end = &end;
 80052f0:	4b0f      	ldr	r3, [pc, #60]	; (8005330 <_sbrk+0x50>)
 80052f2:	4a10      	ldr	r2, [pc, #64]	; (8005334 <_sbrk+0x54>)
 80052f4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80052f6:	4b0e      	ldr	r3, [pc, #56]	; (8005330 <_sbrk+0x50>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80052fc:	4b0c      	ldr	r3, [pc, #48]	; (8005330 <_sbrk+0x50>)
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	4413      	add	r3, r2
 8005304:	466a      	mov	r2, sp
 8005306:	4293      	cmp	r3, r2
 8005308:	d907      	bls.n	800531a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800530a:	f005 fc9f 	bl	800ac4c <__errno>
 800530e:	4602      	mov	r2, r0
 8005310:	230c      	movs	r3, #12
 8005312:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8005314:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005318:	e006      	b.n	8005328 <_sbrk+0x48>
	}

	heap_end += incr;
 800531a:	4b05      	ldr	r3, [pc, #20]	; (8005330 <_sbrk+0x50>)
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4413      	add	r3, r2
 8005322:	4a03      	ldr	r2, [pc, #12]	; (8005330 <_sbrk+0x50>)
 8005324:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8005326:	68fb      	ldr	r3, [r7, #12]
}
 8005328:	4618      	mov	r0, r3
 800532a:	3710      	adds	r7, #16
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}
 8005330:	2000021c 	.word	0x2000021c
 8005334:	200005c0 	.word	0x200005c0

08005338 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005338:	b480      	push	{r7}
 800533a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800533c:	4b08      	ldr	r3, [pc, #32]	; (8005360 <SystemInit+0x28>)
 800533e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005342:	4a07      	ldr	r2, [pc, #28]	; (8005360 <SystemInit+0x28>)
 8005344:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005348:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800534c:	4b04      	ldr	r3, [pc, #16]	; (8005360 <SystemInit+0x28>)
 800534e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005352:	609a      	str	r2, [r3, #8]
#endif
}
 8005354:	bf00      	nop
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr
 800535e:	bf00      	nop
 8005360:	e000ed00 	.word	0xe000ed00

08005364 <__NVIC_GetPriorityGrouping>:
{
 8005364:	b480      	push	{r7}
 8005366:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005368:	4b04      	ldr	r3, [pc, #16]	; (800537c <__NVIC_GetPriorityGrouping+0x18>)
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	0a1b      	lsrs	r3, r3, #8
 800536e:	f003 0307 	and.w	r3, r3, #7
}
 8005372:	4618      	mov	r0, r3
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr
 800537c:	e000ed00 	.word	0xe000ed00

08005380 <__NVIC_EnableIRQ>:
{
 8005380:	b480      	push	{r7}
 8005382:	b083      	sub	sp, #12
 8005384:	af00      	add	r7, sp, #0
 8005386:	4603      	mov	r3, r0
 8005388:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800538a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800538e:	2b00      	cmp	r3, #0
 8005390:	db0b      	blt.n	80053aa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005392:	79fb      	ldrb	r3, [r7, #7]
 8005394:	f003 021f 	and.w	r2, r3, #31
 8005398:	4907      	ldr	r1, [pc, #28]	; (80053b8 <__NVIC_EnableIRQ+0x38>)
 800539a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800539e:	095b      	lsrs	r3, r3, #5
 80053a0:	2001      	movs	r0, #1
 80053a2:	fa00 f202 	lsl.w	r2, r0, r2
 80053a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80053aa:	bf00      	nop
 80053ac:	370c      	adds	r7, #12
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr
 80053b6:	bf00      	nop
 80053b8:	e000e100 	.word	0xe000e100

080053bc <__NVIC_SetPriority>:
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	4603      	mov	r3, r0
 80053c4:	6039      	str	r1, [r7, #0]
 80053c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	db0a      	blt.n	80053e6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	b2da      	uxtb	r2, r3
 80053d4:	490c      	ldr	r1, [pc, #48]	; (8005408 <__NVIC_SetPriority+0x4c>)
 80053d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053da:	0112      	lsls	r2, r2, #4
 80053dc:	b2d2      	uxtb	r2, r2
 80053de:	440b      	add	r3, r1
 80053e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80053e4:	e00a      	b.n	80053fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	b2da      	uxtb	r2, r3
 80053ea:	4908      	ldr	r1, [pc, #32]	; (800540c <__NVIC_SetPriority+0x50>)
 80053ec:	79fb      	ldrb	r3, [r7, #7]
 80053ee:	f003 030f 	and.w	r3, r3, #15
 80053f2:	3b04      	subs	r3, #4
 80053f4:	0112      	lsls	r2, r2, #4
 80053f6:	b2d2      	uxtb	r2, r2
 80053f8:	440b      	add	r3, r1
 80053fa:	761a      	strb	r2, [r3, #24]
}
 80053fc:	bf00      	nop
 80053fe:	370c      	adds	r7, #12
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr
 8005408:	e000e100 	.word	0xe000e100
 800540c:	e000ed00 	.word	0xe000ed00

08005410 <NVIC_EncodePriority>:
{
 8005410:	b480      	push	{r7}
 8005412:	b089      	sub	sp, #36	; 0x24
 8005414:	af00      	add	r7, sp, #0
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	60b9      	str	r1, [r7, #8]
 800541a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f003 0307 	and.w	r3, r3, #7
 8005422:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	f1c3 0307 	rsb	r3, r3, #7
 800542a:	2b04      	cmp	r3, #4
 800542c:	bf28      	it	cs
 800542e:	2304      	movcs	r3, #4
 8005430:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005432:	69fb      	ldr	r3, [r7, #28]
 8005434:	3304      	adds	r3, #4
 8005436:	2b06      	cmp	r3, #6
 8005438:	d902      	bls.n	8005440 <NVIC_EncodePriority+0x30>
 800543a:	69fb      	ldr	r3, [r7, #28]
 800543c:	3b03      	subs	r3, #3
 800543e:	e000      	b.n	8005442 <NVIC_EncodePriority+0x32>
 8005440:	2300      	movs	r3, #0
 8005442:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005444:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005448:	69bb      	ldr	r3, [r7, #24]
 800544a:	fa02 f303 	lsl.w	r3, r2, r3
 800544e:	43da      	mvns	r2, r3
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	401a      	ands	r2, r3
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005458:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	fa01 f303 	lsl.w	r3, r1, r3
 8005462:	43d9      	mvns	r1, r3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005468:	4313      	orrs	r3, r2
}
 800546a:	4618      	mov	r0, r3
 800546c:	3724      	adds	r7, #36	; 0x24
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr

08005476 <LL_TIM_EnableARRPreload>:
{
 8005476:	b480      	push	{r7}
 8005478:	b083      	sub	sp, #12
 800547a:	af00      	add	r7, sp, #0
 800547c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	601a      	str	r2, [r3, #0]
}
 800548a:	bf00      	nop
 800548c:	370c      	adds	r7, #12
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr
	...

08005498 <LL_TIM_OC_EnableFast>:
{
 8005498:	b4b0      	push	{r4, r5, r7}
 800549a:	b083      	sub	sp, #12
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d01c      	beq.n	80054e2 <LL_TIM_OC_EnableFast+0x4a>
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	2b04      	cmp	r3, #4
 80054ac:	d017      	beq.n	80054de <LL_TIM_OC_EnableFast+0x46>
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	2b10      	cmp	r3, #16
 80054b2:	d012      	beq.n	80054da <LL_TIM_OC_EnableFast+0x42>
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	2b40      	cmp	r3, #64	; 0x40
 80054b8:	d00d      	beq.n	80054d6 <LL_TIM_OC_EnableFast+0x3e>
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054c0:	d007      	beq.n	80054d2 <LL_TIM_OC_EnableFast+0x3a>
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054c8:	d101      	bne.n	80054ce <LL_TIM_OC_EnableFast+0x36>
 80054ca:	2305      	movs	r3, #5
 80054cc:	e00a      	b.n	80054e4 <LL_TIM_OC_EnableFast+0x4c>
 80054ce:	2306      	movs	r3, #6
 80054d0:	e008      	b.n	80054e4 <LL_TIM_OC_EnableFast+0x4c>
 80054d2:	2304      	movs	r3, #4
 80054d4:	e006      	b.n	80054e4 <LL_TIM_OC_EnableFast+0x4c>
 80054d6:	2303      	movs	r3, #3
 80054d8:	e004      	b.n	80054e4 <LL_TIM_OC_EnableFast+0x4c>
 80054da:	2302      	movs	r3, #2
 80054dc:	e002      	b.n	80054e4 <LL_TIM_OC_EnableFast+0x4c>
 80054de:	2301      	movs	r3, #1
 80054e0:	e000      	b.n	80054e4 <LL_TIM_OC_EnableFast+0x4c>
 80054e2:	2300      	movs	r3, #0
 80054e4:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	3318      	adds	r3, #24
 80054ea:	461a      	mov	r2, r3
 80054ec:	4629      	mov	r1, r5
 80054ee:	4b09      	ldr	r3, [pc, #36]	; (8005514 <LL_TIM_OC_EnableFast+0x7c>)
 80054f0:	5c5b      	ldrb	r3, [r3, r1]
 80054f2:	4413      	add	r3, r2
 80054f4:	461c      	mov	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80054f6:	6822      	ldr	r2, [r4, #0]
 80054f8:	4629      	mov	r1, r5
 80054fa:	4b07      	ldr	r3, [pc, #28]	; (8005518 <LL_TIM_OC_EnableFast+0x80>)
 80054fc:	5c5b      	ldrb	r3, [r3, r1]
 80054fe:	4619      	mov	r1, r3
 8005500:	2304      	movs	r3, #4
 8005502:	408b      	lsls	r3, r1
 8005504:	4313      	orrs	r3, r2
 8005506:	6023      	str	r3, [r4, #0]
}
 8005508:	bf00      	nop
 800550a:	370c      	adds	r7, #12
 800550c:	46bd      	mov	sp, r7
 800550e:	bcb0      	pop	{r4, r5, r7}
 8005510:	4770      	bx	lr
 8005512:	bf00      	nop
 8005514:	0800e6b4 	.word	0x0800e6b4
 8005518:	0800e6bc 	.word	0x0800e6bc

0800551c <LL_TIM_OC_EnablePreload>:
{
 800551c:	b4b0      	push	{r4, r5, r7}
 800551e:	b083      	sub	sp, #12
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	2b01      	cmp	r3, #1
 800552a:	d01c      	beq.n	8005566 <LL_TIM_OC_EnablePreload+0x4a>
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	2b04      	cmp	r3, #4
 8005530:	d017      	beq.n	8005562 <LL_TIM_OC_EnablePreload+0x46>
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	2b10      	cmp	r3, #16
 8005536:	d012      	beq.n	800555e <LL_TIM_OC_EnablePreload+0x42>
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	2b40      	cmp	r3, #64	; 0x40
 800553c:	d00d      	beq.n	800555a <LL_TIM_OC_EnablePreload+0x3e>
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005544:	d007      	beq.n	8005556 <LL_TIM_OC_EnablePreload+0x3a>
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800554c:	d101      	bne.n	8005552 <LL_TIM_OC_EnablePreload+0x36>
 800554e:	2305      	movs	r3, #5
 8005550:	e00a      	b.n	8005568 <LL_TIM_OC_EnablePreload+0x4c>
 8005552:	2306      	movs	r3, #6
 8005554:	e008      	b.n	8005568 <LL_TIM_OC_EnablePreload+0x4c>
 8005556:	2304      	movs	r3, #4
 8005558:	e006      	b.n	8005568 <LL_TIM_OC_EnablePreload+0x4c>
 800555a:	2303      	movs	r3, #3
 800555c:	e004      	b.n	8005568 <LL_TIM_OC_EnablePreload+0x4c>
 800555e:	2302      	movs	r3, #2
 8005560:	e002      	b.n	8005568 <LL_TIM_OC_EnablePreload+0x4c>
 8005562:	2301      	movs	r3, #1
 8005564:	e000      	b.n	8005568 <LL_TIM_OC_EnablePreload+0x4c>
 8005566:	2300      	movs	r3, #0
 8005568:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	3318      	adds	r3, #24
 800556e:	461a      	mov	r2, r3
 8005570:	4629      	mov	r1, r5
 8005572:	4b09      	ldr	r3, [pc, #36]	; (8005598 <LL_TIM_OC_EnablePreload+0x7c>)
 8005574:	5c5b      	ldrb	r3, [r3, r1]
 8005576:	4413      	add	r3, r2
 8005578:	461c      	mov	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800557a:	6822      	ldr	r2, [r4, #0]
 800557c:	4629      	mov	r1, r5
 800557e:	4b07      	ldr	r3, [pc, #28]	; (800559c <LL_TIM_OC_EnablePreload+0x80>)
 8005580:	5c5b      	ldrb	r3, [r3, r1]
 8005582:	4619      	mov	r1, r3
 8005584:	2308      	movs	r3, #8
 8005586:	408b      	lsls	r3, r1
 8005588:	4313      	orrs	r3, r2
 800558a:	6023      	str	r3, [r4, #0]
}
 800558c:	bf00      	nop
 800558e:	370c      	adds	r7, #12
 8005590:	46bd      	mov	sp, r7
 8005592:	bcb0      	pop	{r4, r5, r7}
 8005594:	4770      	bx	lr
 8005596:	bf00      	nop
 8005598:	0800e6b4 	.word	0x0800e6b4
 800559c:	0800e6bc 	.word	0x0800e6bc

080055a0 <LL_TIM_SetClockSource>:
{
 80055a0:	b480      	push	{r7}
 80055a2:	b083      	sub	sp, #12
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055b2:	f023 0307 	bic.w	r3, r3, #7
 80055b6:	683a      	ldr	r2, [r7, #0]
 80055b8:	431a      	orrs	r2, r3
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	609a      	str	r2, [r3, #8]
}
 80055be:	bf00      	nop
 80055c0:	370c      	adds	r7, #12
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr

080055ca <LL_TIM_SetTriggerOutput>:
{
 80055ca:	b480      	push	{r7}
 80055cc:	b083      	sub	sp, #12
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	6078      	str	r0, [r7, #4]
 80055d2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	431a      	orrs	r2, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	605a      	str	r2, [r3, #4]
}
 80055e4:	bf00      	nop
 80055e6:	370c      	adds	r7, #12
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr

080055f0 <LL_TIM_DisableMasterSlaveMode>:
{
 80055f0:	b480      	push	{r7}
 80055f2:	b083      	sub	sp, #12
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	609a      	str	r2, [r3, #8]
}
 8005604:	bf00      	nop
 8005606:	370c      	adds	r7, #12
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr

08005610 <LL_AHB1_GRP1_EnableClock>:
{
 8005610:	b480      	push	{r7}
 8005612:	b085      	sub	sp, #20
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8005618:	4b08      	ldr	r3, [pc, #32]	; (800563c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800561a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800561c:	4907      	ldr	r1, [pc, #28]	; (800563c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4313      	orrs	r3, r2
 8005622:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8005624:	4b05      	ldr	r3, [pc, #20]	; (800563c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8005626:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	4013      	ands	r3, r2
 800562c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800562e:	68fb      	ldr	r3, [r7, #12]
}
 8005630:	bf00      	nop
 8005632:	3714      	adds	r7, #20
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr
 800563c:	40023800 	.word	0x40023800

08005640 <LL_APB1_GRP1_EnableClock>:
{
 8005640:	b480      	push	{r7}
 8005642:	b085      	sub	sp, #20
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8005648:	4b08      	ldr	r3, [pc, #32]	; (800566c <LL_APB1_GRP1_EnableClock+0x2c>)
 800564a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800564c:	4907      	ldr	r1, [pc, #28]	; (800566c <LL_APB1_GRP1_EnableClock+0x2c>)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	4313      	orrs	r3, r2
 8005652:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8005654:	4b05      	ldr	r3, [pc, #20]	; (800566c <LL_APB1_GRP1_EnableClock+0x2c>)
 8005656:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4013      	ands	r3, r2
 800565c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800565e:	68fb      	ldr	r3, [r7, #12]
}
 8005660:	bf00      	nop
 8005662:	3714      	adds	r7, #20
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr
 800566c:	40023800 	.word	0x40023800

08005670 <MX_TIM3_Init>:

/* USER CODE END 0 */

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b094      	sub	sp, #80	; 0x50
 8005674:	af00      	add	r7, sp, #0
	LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8005676:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800567a:	2200      	movs	r2, #0
 800567c:	601a      	str	r2, [r3, #0]
 800567e:	605a      	str	r2, [r3, #4]
 8005680:	609a      	str	r2, [r3, #8]
 8005682:	60da      	str	r2, [r3, #12]
 8005684:	611a      	str	r2, [r3, #16]
	LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8005686:	f107 031c 	add.w	r3, r7, #28
 800568a:	2220      	movs	r2, #32
 800568c:	2100      	movs	r1, #0
 800568e:	4618      	mov	r0, r3
 8005690:	f005 fb06 	bl	800aca0 <memset>

	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005694:	1d3b      	adds	r3, r7, #4
 8005696:	2200      	movs	r2, #0
 8005698:	601a      	str	r2, [r3, #0]
 800569a:	605a      	str	r2, [r3, #4]
 800569c:	609a      	str	r2, [r3, #8]
 800569e:	60da      	str	r2, [r3, #12]
 80056a0:	611a      	str	r2, [r3, #16]
 80056a2:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 80056a4:	2002      	movs	r0, #2
 80056a6:	f7ff ffcb 	bl	8005640 <LL_APB1_GRP1_EnableClock>

	TIM_InitStruct.Prescaler = 999;
 80056aa:	f240 33e7 	movw	r3, #999	; 0x3e7
 80056ae:	87bb      	strh	r3, [r7, #60]	; 0x3c
	TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80056b0:	2300      	movs	r3, #0
 80056b2:	643b      	str	r3, [r7, #64]	; 0x40
	TIM_InitStruct.Autoreload = 20;
 80056b4:	2314      	movs	r3, #20
 80056b6:	647b      	str	r3, [r7, #68]	; 0x44
	TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80056b8:	2300      	movs	r3, #0
 80056ba:	64bb      	str	r3, [r7, #72]	; 0x48
	LL_TIM_Init(TIM3, &TIM_InitStruct);
 80056bc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80056c0:	4619      	mov	r1, r3
 80056c2:	4820      	ldr	r0, [pc, #128]	; (8005744 <MX_TIM3_Init+0xd4>)
 80056c4:	f004 fdea 	bl	800a29c <LL_TIM_Init>
	LL_TIM_EnableARRPreload(TIM3);
 80056c8:	481e      	ldr	r0, [pc, #120]	; (8005744 <MX_TIM3_Init+0xd4>)
 80056ca:	f7ff fed4 	bl	8005476 <LL_TIM_EnableARRPreload>
	LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH4);
 80056ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80056d2:	481c      	ldr	r0, [pc, #112]	; (8005744 <MX_TIM3_Init+0xd4>)
 80056d4:	f7ff ff22 	bl	800551c <LL_TIM_OC_EnablePreload>
	TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80056d8:	2360      	movs	r3, #96	; 0x60
 80056da:	61fb      	str	r3, [r7, #28]
	TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80056dc:	2300      	movs	r3, #0
 80056de:	623b      	str	r3, [r7, #32]
	TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80056e0:	2300      	movs	r3, #0
 80056e2:	627b      	str	r3, [r7, #36]	; 0x24
	TIM_OC_InitStruct.CompareValue = 10;
 80056e4:	230a      	movs	r3, #10
 80056e6:	62bb      	str	r3, [r7, #40]	; 0x28
	TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80056e8:	2300      	movs	r3, #0
 80056ea:	62fb      	str	r3, [r7, #44]	; 0x2c
	LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 80056ec:	f107 031c 	add.w	r3, r7, #28
 80056f0:	461a      	mov	r2, r3
 80056f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80056f6:	4813      	ldr	r0, [pc, #76]	; (8005744 <MX_TIM3_Init+0xd4>)
 80056f8:	f004 fe6a 	bl	800a3d0 <LL_TIM_OC_Init>
	LL_TIM_OC_EnableFast(TIM3, LL_TIM_CHANNEL_CH4);
 80056fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005700:	4810      	ldr	r0, [pc, #64]	; (8005744 <MX_TIM3_Init+0xd4>)
 8005702:	f7ff fec9 	bl	8005498 <LL_TIM_OC_EnableFast>
	LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8005706:	2100      	movs	r1, #0
 8005708:	480e      	ldr	r0, [pc, #56]	; (8005744 <MX_TIM3_Init+0xd4>)
 800570a:	f7ff ff5e 	bl	80055ca <LL_TIM_SetTriggerOutput>
	LL_TIM_DisableMasterSlaveMode(TIM3);
 800570e:	480d      	ldr	r0, [pc, #52]	; (8005744 <MX_TIM3_Init+0xd4>)
 8005710:	f7ff ff6e 	bl	80055f0 <LL_TIM_DisableMasterSlaveMode>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8005714:	2002      	movs	r0, #2
 8005716:	f7ff ff7b 	bl	8005610 <LL_AHB1_GRP1_EnableClock>
	/**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4 
	 */
	GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 800571a:	2302      	movs	r3, #2
 800571c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800571e:	2302      	movs	r3, #2
 8005720:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8005722:	2300      	movs	r3, #0
 8005724:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005726:	2300      	movs	r3, #0
 8005728:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800572a:	2300      	movs	r3, #0
 800572c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 800572e:	2302      	movs	r3, #2
 8005730:	61bb      	str	r3, [r7, #24]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005732:	1d3b      	adds	r3, r7, #4
 8005734:	4619      	mov	r1, r3
 8005736:	4804      	ldr	r0, [pc, #16]	; (8005748 <MX_TIM3_Init+0xd8>)
 8005738:	f004 fb1d 	bl	8009d76 <LL_GPIO_Init>

}
 800573c:	bf00      	nop
 800573e:	3750      	adds	r7, #80	; 0x50
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}
 8005744:	40000400 	.word	0x40000400
 8005748:	40020400 	.word	0x40020400

0800574c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b094      	sub	sp, #80	; 0x50
 8005750:	af00      	add	r7, sp, #0
	LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8005752:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005756:	2200      	movs	r2, #0
 8005758:	601a      	str	r2, [r3, #0]
 800575a:	605a      	str	r2, [r3, #4]
 800575c:	609a      	str	r2, [r3, #8]
 800575e:	60da      	str	r2, [r3, #12]
 8005760:	611a      	str	r2, [r3, #16]
	LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8005762:	f107 031c 	add.w	r3, r7, #28
 8005766:	2220      	movs	r2, #32
 8005768:	2100      	movs	r1, #0
 800576a:	4618      	mov	r0, r3
 800576c:	f005 fa98 	bl	800aca0 <memset>

	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005770:	1d3b      	adds	r3, r7, #4
 8005772:	2200      	movs	r2, #0
 8005774:	601a      	str	r2, [r3, #0]
 8005776:	605a      	str	r2, [r3, #4]
 8005778:	609a      	str	r2, [r3, #8]
 800577a:	60da      	str	r2, [r3, #12]
 800577c:	611a      	str	r2, [r3, #16]
 800577e:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM5);
 8005780:	2008      	movs	r0, #8
 8005782:	f7ff ff5d 	bl	8005640 <LL_APB1_GRP1_EnableClock>

	TIM_InitStruct.Prescaler = 0;
 8005786:	2300      	movs	r3, #0
 8005788:	87bb      	strh	r3, [r7, #60]	; 0x3c
	TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800578a:	2300      	movs	r3, #0
 800578c:	643b      	str	r3, [r7, #64]	; 0x40
	TIM_InitStruct.Autoreload = 41999;
 800578e:	f24a 430f 	movw	r3, #41999	; 0xa40f
 8005792:	647b      	str	r3, [r7, #68]	; 0x44
	TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8005794:	2300      	movs	r3, #0
 8005796:	64bb      	str	r3, [r7, #72]	; 0x48
	LL_TIM_Init(TIM5, &TIM_InitStruct);
 8005798:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800579c:	4619      	mov	r1, r3
 800579e:	4840      	ldr	r0, [pc, #256]	; (80058a0 <MX_TIM5_Init+0x154>)
 80057a0:	f004 fd7c 	bl	800a29c <LL_TIM_Init>
	LL_TIM_EnableARRPreload(TIM5);
 80057a4:	483e      	ldr	r0, [pc, #248]	; (80058a0 <MX_TIM5_Init+0x154>)
 80057a6:	f7ff fe66 	bl	8005476 <LL_TIM_EnableARRPreload>
	LL_TIM_SetClockSource(TIM5, LL_TIM_CLOCKSOURCE_INTERNAL);
 80057aa:	2100      	movs	r1, #0
 80057ac:	483c      	ldr	r0, [pc, #240]	; (80058a0 <MX_TIM5_Init+0x154>)
 80057ae:	f7ff fef7 	bl	80055a0 <LL_TIM_SetClockSource>
	LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH1);
 80057b2:	2101      	movs	r1, #1
 80057b4:	483a      	ldr	r0, [pc, #232]	; (80058a0 <MX_TIM5_Init+0x154>)
 80057b6:	f7ff feb1 	bl	800551c <LL_TIM_OC_EnablePreload>
	TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80057ba:	2360      	movs	r3, #96	; 0x60
 80057bc:	61fb      	str	r3, [r7, #28]
	TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80057be:	2300      	movs	r3, #0
 80057c0:	623b      	str	r3, [r7, #32]
	TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80057c2:	2300      	movs	r3, #0
 80057c4:	627b      	str	r3, [r7, #36]	; 0x24
	TIM_OC_InitStruct.CompareValue = 0;
 80057c6:	2300      	movs	r3, #0
 80057c8:	62bb      	str	r3, [r7, #40]	; 0x28
	TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80057ca:	2300      	movs	r3, #0
 80057cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80057ce:	f107 031c 	add.w	r3, r7, #28
 80057d2:	461a      	mov	r2, r3
 80057d4:	2101      	movs	r1, #1
 80057d6:	4832      	ldr	r0, [pc, #200]	; (80058a0 <MX_TIM5_Init+0x154>)
 80057d8:	f004 fdfa 	bl	800a3d0 <LL_TIM_OC_Init>
	LL_TIM_OC_EnableFast(TIM5, LL_TIM_CHANNEL_CH1);
 80057dc:	2101      	movs	r1, #1
 80057de:	4830      	ldr	r0, [pc, #192]	; (80058a0 <MX_TIM5_Init+0x154>)
 80057e0:	f7ff fe5a 	bl	8005498 <LL_TIM_OC_EnableFast>
	LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH2);
 80057e4:	2110      	movs	r1, #16
 80057e6:	482e      	ldr	r0, [pc, #184]	; (80058a0 <MX_TIM5_Init+0x154>)
 80057e8:	f7ff fe98 	bl	800551c <LL_TIM_OC_EnablePreload>
	TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80057ec:	2300      	movs	r3, #0
 80057ee:	623b      	str	r3, [r7, #32]
	TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80057f0:	2300      	movs	r3, #0
 80057f2:	627b      	str	r3, [r7, #36]	; 0x24
	LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 80057f4:	f107 031c 	add.w	r3, r7, #28
 80057f8:	461a      	mov	r2, r3
 80057fa:	2110      	movs	r1, #16
 80057fc:	4828      	ldr	r0, [pc, #160]	; (80058a0 <MX_TIM5_Init+0x154>)
 80057fe:	f004 fde7 	bl	800a3d0 <LL_TIM_OC_Init>
	LL_TIM_OC_EnableFast(TIM5, LL_TIM_CHANNEL_CH2);
 8005802:	2110      	movs	r1, #16
 8005804:	4826      	ldr	r0, [pc, #152]	; (80058a0 <MX_TIM5_Init+0x154>)
 8005806:	f7ff fe47 	bl	8005498 <LL_TIM_OC_EnableFast>
	LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH3);
 800580a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800580e:	4824      	ldr	r0, [pc, #144]	; (80058a0 <MX_TIM5_Init+0x154>)
 8005810:	f7ff fe84 	bl	800551c <LL_TIM_OC_EnablePreload>
	TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8005814:	2300      	movs	r3, #0
 8005816:	623b      	str	r3, [r7, #32]
	TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8005818:	2300      	movs	r3, #0
 800581a:	627b      	str	r3, [r7, #36]	; 0x24
	LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 800581c:	f107 031c 	add.w	r3, r7, #28
 8005820:	461a      	mov	r2, r3
 8005822:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005826:	481e      	ldr	r0, [pc, #120]	; (80058a0 <MX_TIM5_Init+0x154>)
 8005828:	f004 fdd2 	bl	800a3d0 <LL_TIM_OC_Init>
	LL_TIM_OC_EnableFast(TIM5, LL_TIM_CHANNEL_CH3);
 800582c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005830:	481b      	ldr	r0, [pc, #108]	; (80058a0 <MX_TIM5_Init+0x154>)
 8005832:	f7ff fe31 	bl	8005498 <LL_TIM_OC_EnableFast>
	LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH4);
 8005836:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800583a:	4819      	ldr	r0, [pc, #100]	; (80058a0 <MX_TIM5_Init+0x154>)
 800583c:	f7ff fe6e 	bl	800551c <LL_TIM_OC_EnablePreload>
	TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8005840:	2300      	movs	r3, #0
 8005842:	623b      	str	r3, [r7, #32]
	TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8005844:	2300      	movs	r3, #0
 8005846:	627b      	str	r3, [r7, #36]	; 0x24
	LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8005848:	f107 031c 	add.w	r3, r7, #28
 800584c:	461a      	mov	r2, r3
 800584e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005852:	4813      	ldr	r0, [pc, #76]	; (80058a0 <MX_TIM5_Init+0x154>)
 8005854:	f004 fdbc 	bl	800a3d0 <LL_TIM_OC_Init>
	LL_TIM_OC_EnableFast(TIM5, LL_TIM_CHANNEL_CH4);
 8005858:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800585c:	4810      	ldr	r0, [pc, #64]	; (80058a0 <MX_TIM5_Init+0x154>)
 800585e:	f7ff fe1b 	bl	8005498 <LL_TIM_OC_EnableFast>
	LL_TIM_SetTriggerOutput(TIM5, LL_TIM_TRGO_RESET);
 8005862:	2100      	movs	r1, #0
 8005864:	480e      	ldr	r0, [pc, #56]	; (80058a0 <MX_TIM5_Init+0x154>)
 8005866:	f7ff feb0 	bl	80055ca <LL_TIM_SetTriggerOutput>
	LL_TIM_DisableMasterSlaveMode(TIM5);
 800586a:	480d      	ldr	r0, [pc, #52]	; (80058a0 <MX_TIM5_Init+0x154>)
 800586c:	f7ff fec0 	bl	80055f0 <LL_TIM_DisableMasterSlaveMode>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8005870:	2001      	movs	r0, #1
 8005872:	f7ff fecd 	bl	8005610 <LL_AHB1_GRP1_EnableClock>
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    PA2     ------> TIM5_CH3
    PA3     ------> TIM5_CH4 
	 */
	GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8005876:	230f      	movs	r3, #15
 8005878:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800587a:	2302      	movs	r3, #2
 800587c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800587e:	2300      	movs	r3, #0
 8005880:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005882:	2300      	movs	r3, #0
 8005884:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005886:	2300      	movs	r3, #0
 8005888:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 800588a:	2302      	movs	r3, #2
 800588c:	61bb      	str	r3, [r7, #24]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800588e:	1d3b      	adds	r3, r7, #4
 8005890:	4619      	mov	r1, r3
 8005892:	4804      	ldr	r0, [pc, #16]	; (80058a4 <MX_TIM5_Init+0x158>)
 8005894:	f004 fa6f 	bl	8009d76 <LL_GPIO_Init>

}
 8005898:	bf00      	nop
 800589a:	3750      	adds	r7, #80	; 0x50
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}
 80058a0:	40000c00 	.word	0x40000c00
 80058a4:	40020000 	.word	0x40020000

080058a8 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b086      	sub	sp, #24
 80058ac:	af00      	add	r7, sp, #0
	LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80058ae:	1d3b      	adds	r3, r7, #4
 80058b0:	2200      	movs	r2, #0
 80058b2:	601a      	str	r2, [r3, #0]
 80058b4:	605a      	str	r2, [r3, #4]
 80058b6:	609a      	str	r2, [r3, #8]
 80058b8:	60da      	str	r2, [r3, #12]
 80058ba:	611a      	str	r2, [r3, #16]

	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM7);
 80058bc:	2020      	movs	r0, #32
 80058be:	f7ff febf 	bl	8005640 <LL_APB1_GRP1_EnableClock>

	/* TIM7 interrupt Init */
	NVIC_SetPriority(TIM7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80058c2:	f7ff fd4f 	bl	8005364 <__NVIC_GetPriorityGrouping>
 80058c6:	4603      	mov	r3, r0
 80058c8:	2200      	movs	r2, #0
 80058ca:	2100      	movs	r1, #0
 80058cc:	4618      	mov	r0, r3
 80058ce:	f7ff fd9f 	bl	8005410 <NVIC_EncodePriority>
 80058d2:	4603      	mov	r3, r0
 80058d4:	4619      	mov	r1, r3
 80058d6:	2037      	movs	r0, #55	; 0x37
 80058d8:	f7ff fd70 	bl	80053bc <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM7_IRQn);
 80058dc:	2037      	movs	r0, #55	; 0x37
 80058de:	f7ff fd4f 	bl	8005380 <__NVIC_EnableIRQ>

	TIM_InitStruct.Prescaler = 41999;
 80058e2:	f24a 430f 	movw	r3, #41999	; 0xa40f
 80058e6:	80bb      	strh	r3, [r7, #4]
	TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80058e8:	2300      	movs	r3, #0
 80058ea:	60bb      	str	r3, [r7, #8]
	TIM_InitStruct.Autoreload = 1;
 80058ec:	2301      	movs	r3, #1
 80058ee:	60fb      	str	r3, [r7, #12]
	LL_TIM_Init(TIM7, &TIM_InitStruct);
 80058f0:	1d3b      	adds	r3, r7, #4
 80058f2:	4619      	mov	r1, r3
 80058f4:	4808      	ldr	r0, [pc, #32]	; (8005918 <MX_TIM7_Init+0x70>)
 80058f6:	f004 fcd1 	bl	800a29c <LL_TIM_Init>
	LL_TIM_EnableARRPreload(TIM7);
 80058fa:	4807      	ldr	r0, [pc, #28]	; (8005918 <MX_TIM7_Init+0x70>)
 80058fc:	f7ff fdbb 	bl	8005476 <LL_TIM_EnableARRPreload>
	LL_TIM_SetTriggerOutput(TIM7, LL_TIM_TRGO_RESET);
 8005900:	2100      	movs	r1, #0
 8005902:	4805      	ldr	r0, [pc, #20]	; (8005918 <MX_TIM7_Init+0x70>)
 8005904:	f7ff fe61 	bl	80055ca <LL_TIM_SetTriggerOutput>
	LL_TIM_DisableMasterSlaveMode(TIM7);
 8005908:	4803      	ldr	r0, [pc, #12]	; (8005918 <MX_TIM7_Init+0x70>)
 800590a:	f7ff fe71 	bl	80055f0 <LL_TIM_DisableMasterSlaveMode>

}
 800590e:	bf00      	nop
 8005910:	3718      	adds	r7, #24
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}
 8005916:	bf00      	nop
 8005918:	40001400 	.word	0x40001400

0800591c <__NVIC_GetPriorityGrouping>:
{
 800591c:	b480      	push	{r7}
 800591e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005920:	4b04      	ldr	r3, [pc, #16]	; (8005934 <__NVIC_GetPriorityGrouping+0x18>)
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	0a1b      	lsrs	r3, r3, #8
 8005926:	f003 0307 	and.w	r3, r3, #7
}
 800592a:	4618      	mov	r0, r3
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr
 8005934:	e000ed00 	.word	0xe000ed00

08005938 <__NVIC_EnableIRQ>:
{
 8005938:	b480      	push	{r7}
 800593a:	b083      	sub	sp, #12
 800593c:	af00      	add	r7, sp, #0
 800593e:	4603      	mov	r3, r0
 8005940:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005946:	2b00      	cmp	r3, #0
 8005948:	db0b      	blt.n	8005962 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800594a:	79fb      	ldrb	r3, [r7, #7]
 800594c:	f003 021f 	and.w	r2, r3, #31
 8005950:	4907      	ldr	r1, [pc, #28]	; (8005970 <__NVIC_EnableIRQ+0x38>)
 8005952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005956:	095b      	lsrs	r3, r3, #5
 8005958:	2001      	movs	r0, #1
 800595a:	fa00 f202 	lsl.w	r2, r0, r2
 800595e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005962:	bf00      	nop
 8005964:	370c      	adds	r7, #12
 8005966:	46bd      	mov	sp, r7
 8005968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596c:	4770      	bx	lr
 800596e:	bf00      	nop
 8005970:	e000e100 	.word	0xe000e100

08005974 <__NVIC_SetPriority>:
{
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
 800597a:	4603      	mov	r3, r0
 800597c:	6039      	str	r1, [r7, #0]
 800597e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005984:	2b00      	cmp	r3, #0
 8005986:	db0a      	blt.n	800599e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	b2da      	uxtb	r2, r3
 800598c:	490c      	ldr	r1, [pc, #48]	; (80059c0 <__NVIC_SetPriority+0x4c>)
 800598e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005992:	0112      	lsls	r2, r2, #4
 8005994:	b2d2      	uxtb	r2, r2
 8005996:	440b      	add	r3, r1
 8005998:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800599c:	e00a      	b.n	80059b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	b2da      	uxtb	r2, r3
 80059a2:	4908      	ldr	r1, [pc, #32]	; (80059c4 <__NVIC_SetPriority+0x50>)
 80059a4:	79fb      	ldrb	r3, [r7, #7]
 80059a6:	f003 030f 	and.w	r3, r3, #15
 80059aa:	3b04      	subs	r3, #4
 80059ac:	0112      	lsls	r2, r2, #4
 80059ae:	b2d2      	uxtb	r2, r2
 80059b0:	440b      	add	r3, r1
 80059b2:	761a      	strb	r2, [r3, #24]
}
 80059b4:	bf00      	nop
 80059b6:	370c      	adds	r7, #12
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr
 80059c0:	e000e100 	.word	0xe000e100
 80059c4:	e000ed00 	.word	0xe000ed00

080059c8 <NVIC_EncodePriority>:
{
 80059c8:	b480      	push	{r7}
 80059ca:	b089      	sub	sp, #36	; 0x24
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	60f8      	str	r0, [r7, #12]
 80059d0:	60b9      	str	r1, [r7, #8]
 80059d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f003 0307 	and.w	r3, r3, #7
 80059da:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80059dc:	69fb      	ldr	r3, [r7, #28]
 80059de:	f1c3 0307 	rsb	r3, r3, #7
 80059e2:	2b04      	cmp	r3, #4
 80059e4:	bf28      	it	cs
 80059e6:	2304      	movcs	r3, #4
 80059e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80059ea:	69fb      	ldr	r3, [r7, #28]
 80059ec:	3304      	adds	r3, #4
 80059ee:	2b06      	cmp	r3, #6
 80059f0:	d902      	bls.n	80059f8 <NVIC_EncodePriority+0x30>
 80059f2:	69fb      	ldr	r3, [r7, #28]
 80059f4:	3b03      	subs	r3, #3
 80059f6:	e000      	b.n	80059fa <NVIC_EncodePriority+0x32>
 80059f8:	2300      	movs	r3, #0
 80059fa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80059fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a00:	69bb      	ldr	r3, [r7, #24]
 8005a02:	fa02 f303 	lsl.w	r3, r2, r3
 8005a06:	43da      	mvns	r2, r3
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	401a      	ands	r2, r3
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005a10:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	fa01 f303 	lsl.w	r3, r1, r3
 8005a1a:	43d9      	mvns	r1, r3
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a20:	4313      	orrs	r3, r2
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3724      	adds	r7, #36	; 0x24
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr

08005a2e <LL_USART_Enable>:
{
 8005a2e:	b480      	push	{r7}
 8005a30:	b083      	sub	sp, #12
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	68db      	ldr	r3, [r3, #12]
 8005a3a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	60da      	str	r2, [r3, #12]
}
 8005a42:	bf00      	nop
 8005a44:	370c      	adds	r7, #12
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr

08005a4e <LL_USART_ConfigAsyncMode>:
{
 8005a4e:	b480      	push	{r7}
 8005a50:	b083      	sub	sp, #12
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	691b      	ldr	r3, [r3, #16]
 8005a5a:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	695b      	ldr	r3, [r3, #20]
 8005a66:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	615a      	str	r2, [r3, #20]
}
 8005a6e:	bf00      	nop
 8005a70:	370c      	adds	r7, #12
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr
	...

08005a7c <LL_AHB1_GRP1_EnableClock>:
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b085      	sub	sp, #20
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8005a84:	4b08      	ldr	r3, [pc, #32]	; (8005aa8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8005a86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a88:	4907      	ldr	r1, [pc, #28]	; (8005aa8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8005a90:	4b05      	ldr	r3, [pc, #20]	; (8005aa8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8005a92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	4013      	ands	r3, r2
 8005a98:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
}
 8005a9c:	bf00      	nop
 8005a9e:	3714      	adds	r7, #20
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr
 8005aa8:	40023800 	.word	0x40023800

08005aac <LL_APB1_GRP1_EnableClock>:
{
 8005aac:	b480      	push	{r7}
 8005aae:	b085      	sub	sp, #20
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8005ab4:	4b08      	ldr	r3, [pc, #32]	; (8005ad8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8005ab6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ab8:	4907      	ldr	r1, [pc, #28]	; (8005ad8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4313      	orrs	r3, r2
 8005abe:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8005ac0:	4b05      	ldr	r3, [pc, #20]	; (8005ad8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8005ac2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	4013      	ands	r3, r2
 8005ac8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005aca:	68fb      	ldr	r3, [r7, #12]
}
 8005acc:	bf00      	nop
 8005ace:	3714      	adds	r7, #20
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr
 8005ad8:	40023800 	.word	0x40023800

08005adc <LL_APB2_GRP1_EnableClock>:
{
 8005adc:	b480      	push	{r7}
 8005ade:	b085      	sub	sp, #20
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8005ae4:	4b08      	ldr	r3, [pc, #32]	; (8005b08 <LL_APB2_GRP1_EnableClock+0x2c>)
 8005ae6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ae8:	4907      	ldr	r1, [pc, #28]	; (8005b08 <LL_APB2_GRP1_EnableClock+0x2c>)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	4313      	orrs	r3, r2
 8005aee:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8005af0:	4b05      	ldr	r3, [pc, #20]	; (8005b08 <LL_APB2_GRP1_EnableClock+0x2c>)
 8005af2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	4013      	ands	r3, r2
 8005af8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005afa:	68fb      	ldr	r3, [r7, #12]
}
 8005afc:	bf00      	nop
 8005afe:	3714      	adds	r7, #20
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr
 8005b08:	40023800 	.word	0x40023800

08005b0c <MX_UART4_Init>:

UART_HandleTypeDef huart1;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b08e      	sub	sp, #56	; 0x38
 8005b10:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8005b12:	f107 031c 	add.w	r3, r7, #28
 8005b16:	2200      	movs	r2, #0
 8005b18:	601a      	str	r2, [r3, #0]
 8005b1a:	605a      	str	r2, [r3, #4]
 8005b1c:	609a      	str	r2, [r3, #8]
 8005b1e:	60da      	str	r2, [r3, #12]
 8005b20:	611a      	str	r2, [r3, #16]
 8005b22:	615a      	str	r2, [r3, #20]
 8005b24:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b26:	1d3b      	adds	r3, r7, #4
 8005b28:	2200      	movs	r2, #0
 8005b2a:	601a      	str	r2, [r3, #0]
 8005b2c:	605a      	str	r2, [r3, #4]
 8005b2e:	609a      	str	r2, [r3, #8]
 8005b30:	60da      	str	r2, [r3, #12]
 8005b32:	611a      	str	r2, [r3, #16]
 8005b34:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 8005b36:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005b3a:	f7ff ffb7 	bl	8005aac <LL_APB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8005b3e:	2004      	movs	r0, #4
 8005b40:	f7ff ff9c 	bl	8005a7c <LL_AHB1_GRP1_EnableClock>
  /**UART4 GPIO Configuration  
  PC10   ------> UART4_TX
  PC11   ------> UART4_RX 
  */
  GPIO_InitStruct.Pin = M8N_TX4_Pin|M8N_RX4_Pin;
 8005b44:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005b48:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005b4a:	2302      	movs	r3, #2
 8005b4c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8005b4e:	2303      	movs	r3, #3
 8005b50:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005b52:	2300      	movs	r3, #0
 8005b54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8005b56:	2301      	movs	r3, #1
 8005b58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8005b5a:	2308      	movs	r3, #8
 8005b5c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005b5e:	1d3b      	adds	r3, r7, #4
 8005b60:	4619      	mov	r1, r3
 8005b62:	4819      	ldr	r0, [pc, #100]	; (8005bc8 <MX_UART4_Init+0xbc>)
 8005b64:	f004 f907 	bl	8009d76 <LL_GPIO_Init>

  /* UART4 interrupt Init */
  NVIC_SetPriority(UART4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8005b68:	f7ff fed8 	bl	800591c <__NVIC_GetPriorityGrouping>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2200      	movs	r2, #0
 8005b70:	2100      	movs	r1, #0
 8005b72:	4618      	mov	r0, r3
 8005b74:	f7ff ff28 	bl	80059c8 <NVIC_EncodePriority>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	4619      	mov	r1, r3
 8005b7c:	2034      	movs	r0, #52	; 0x34
 8005b7e:	f7ff fef9 	bl	8005974 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART4_IRQn);
 8005b82:	2034      	movs	r0, #52	; 0x34
 8005b84:	f7ff fed8 	bl	8005938 <__NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 9600;
 8005b88:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8005b8c:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8005b92:	2300      	movs	r3, #0
 8005b94:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8005b96:	2300      	movs	r3, #0
 8005b98:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8005b9a:	230c      	movs	r3, #12
 8005b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(UART4, &USART_InitStruct);
 8005ba6:	f107 031c 	add.w	r3, r7, #28
 8005baa:	4619      	mov	r1, r3
 8005bac:	4807      	ldr	r0, [pc, #28]	; (8005bcc <MX_UART4_Init+0xc0>)
 8005bae:	f004 ffcd 	bl	800ab4c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART4);
 8005bb2:	4806      	ldr	r0, [pc, #24]	; (8005bcc <MX_UART4_Init+0xc0>)
 8005bb4:	f7ff ff4b 	bl	8005a4e <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART4);
 8005bb8:	4804      	ldr	r0, [pc, #16]	; (8005bcc <MX_UART4_Init+0xc0>)
 8005bba:	f7ff ff38 	bl	8005a2e <LL_USART_Enable>

}
 8005bbe:	bf00      	nop
 8005bc0:	3738      	adds	r7, #56	; 0x38
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
 8005bc6:	bf00      	nop
 8005bc8:	40020800 	.word	0x40020800
 8005bcc:	40004c00 	.word	0x40004c00

08005bd0 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b08e      	sub	sp, #56	; 0x38
 8005bd4:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8005bd6:	f107 031c 	add.w	r3, r7, #28
 8005bda:	2200      	movs	r2, #0
 8005bdc:	601a      	str	r2, [r3, #0]
 8005bde:	605a      	str	r2, [r3, #4]
 8005be0:	609a      	str	r2, [r3, #8]
 8005be2:	60da      	str	r2, [r3, #12]
 8005be4:	611a      	str	r2, [r3, #16]
 8005be6:	615a      	str	r2, [r3, #20]
 8005be8:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005bea:	1d3b      	adds	r3, r7, #4
 8005bec:	2200      	movs	r2, #0
 8005bee:	601a      	str	r2, [r3, #0]
 8005bf0:	605a      	str	r2, [r3, #4]
 8005bf2:	609a      	str	r2, [r3, #8]
 8005bf4:	60da      	str	r2, [r3, #12]
 8005bf6:	611a      	str	r2, [r3, #16]
 8005bf8:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART5);
 8005bfa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8005bfe:	f7ff ff55 	bl	8005aac <LL_APB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8005c02:	2004      	movs	r0, #4
 8005c04:	f7ff ff3a 	bl	8005a7c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8005c08:	2008      	movs	r0, #8
 8005c0a:	f7ff ff37 	bl	8005a7c <LL_AHB1_GRP1_EnableClock>
  /**UART5 GPIO Configuration  
  PC12   ------> UART5_TX
  PD2   ------> UART5_RX 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 8005c0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c12:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005c14:	2302      	movs	r3, #2
 8005c16:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8005c18:	2303      	movs	r3, #3
 8005c1a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8005c20:	2301      	movs	r3, #1
 8005c22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8005c24:	2308      	movs	r3, #8
 8005c26:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005c28:	1d3b      	adds	r3, r7, #4
 8005c2a:	4619      	mov	r1, r3
 8005c2c:	4821      	ldr	r0, [pc, #132]	; (8005cb4 <MX_UART5_Init+0xe4>)
 8005c2e:	f004 f8a2 	bl	8009d76 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8005c32:	2304      	movs	r3, #4
 8005c34:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005c36:	2302      	movs	r3, #2
 8005c38:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8005c3a:	2303      	movs	r3, #3
 8005c3c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8005c42:	2301      	movs	r3, #1
 8005c44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8005c46:	2308      	movs	r3, #8
 8005c48:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005c4a:	1d3b      	adds	r3, r7, #4
 8005c4c:	4619      	mov	r1, r3
 8005c4e:	481a      	ldr	r0, [pc, #104]	; (8005cb8 <MX_UART5_Init+0xe8>)
 8005c50:	f004 f891 	bl	8009d76 <LL_GPIO_Init>

  /* UART5 interrupt Init */
  NVIC_SetPriority(UART5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8005c54:	f7ff fe62 	bl	800591c <__NVIC_GetPriorityGrouping>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	2100      	movs	r1, #0
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f7ff feb2 	bl	80059c8 <NVIC_EncodePriority>
 8005c64:	4603      	mov	r3, r0
 8005c66:	4619      	mov	r1, r3
 8005c68:	2035      	movs	r0, #53	; 0x35
 8005c6a:	f7ff fe83 	bl	8005974 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART5_IRQn);
 8005c6e:	2035      	movs	r0, #53	; 0x35
 8005c70:	f7ff fe62 	bl	8005938 <__NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 115200;
 8005c74:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8005c78:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8005c82:	2300      	movs	r3, #0
 8005c84:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_RX;
 8005c86:	2304      	movs	r3, #4
 8005c88:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(UART5, &USART_InitStruct);
 8005c92:	f107 031c 	add.w	r3, r7, #28
 8005c96:	4619      	mov	r1, r3
 8005c98:	4808      	ldr	r0, [pc, #32]	; (8005cbc <MX_UART5_Init+0xec>)
 8005c9a:	f004 ff57 	bl	800ab4c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART5);
 8005c9e:	4807      	ldr	r0, [pc, #28]	; (8005cbc <MX_UART5_Init+0xec>)
 8005ca0:	f7ff fed5 	bl	8005a4e <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART5);
 8005ca4:	4805      	ldr	r0, [pc, #20]	; (8005cbc <MX_UART5_Init+0xec>)
 8005ca6:	f7ff fec2 	bl	8005a2e <LL_USART_Enable>

}
 8005caa:	bf00      	nop
 8005cac:	3738      	adds	r7, #56	; 0x38
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}
 8005cb2:	bf00      	nop
 8005cb4:	40020800 	.word	0x40020800
 8005cb8:	40020c00 	.word	0x40020c00
 8005cbc:	40005000 	.word	0x40005000

08005cc0 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8005cc4:	4b11      	ldr	r3, [pc, #68]	; (8005d0c <MX_USART1_UART_Init+0x4c>)
 8005cc6:	4a12      	ldr	r2, [pc, #72]	; (8005d10 <MX_USART1_UART_Init+0x50>)
 8005cc8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005cca:	4b10      	ldr	r3, [pc, #64]	; (8005d0c <MX_USART1_UART_Init+0x4c>)
 8005ccc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005cd0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005cd2:	4b0e      	ldr	r3, [pc, #56]	; (8005d0c <MX_USART1_UART_Init+0x4c>)
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005cd8:	4b0c      	ldr	r3, [pc, #48]	; (8005d0c <MX_USART1_UART_Init+0x4c>)
 8005cda:	2200      	movs	r2, #0
 8005cdc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005cde:	4b0b      	ldr	r3, [pc, #44]	; (8005d0c <MX_USART1_UART_Init+0x4c>)
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005ce4:	4b09      	ldr	r3, [pc, #36]	; (8005d0c <MX_USART1_UART_Init+0x4c>)
 8005ce6:	220c      	movs	r2, #12
 8005ce8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005cea:	4b08      	ldr	r3, [pc, #32]	; (8005d0c <MX_USART1_UART_Init+0x4c>)
 8005cec:	2200      	movs	r2, #0
 8005cee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005cf0:	4b06      	ldr	r3, [pc, #24]	; (8005d0c <MX_USART1_UART_Init+0x4c>)
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005cf6:	4805      	ldr	r0, [pc, #20]	; (8005d0c <MX_USART1_UART_Init+0x4c>)
 8005cf8:	f002 ffbc 	bl	8008c74 <HAL_UART_Init>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d001      	beq.n	8005d06 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8005d02:	f7fe ff4d 	bl	8004ba0 <Error_Handler>
  }

}
 8005d06:	bf00      	nop
 8005d08:	bd80      	pop	{r7, pc}
 8005d0a:	bf00      	nop
 8005d0c:	20000578 	.word	0x20000578
 8005d10:	40011000 	.word	0x40011000

08005d14 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b08e      	sub	sp, #56	; 0x38
 8005d18:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8005d1a:	f107 031c 	add.w	r3, r7, #28
 8005d1e:	2200      	movs	r2, #0
 8005d20:	601a      	str	r2, [r3, #0]
 8005d22:	605a      	str	r2, [r3, #4]
 8005d24:	609a      	str	r2, [r3, #8]
 8005d26:	60da      	str	r2, [r3, #12]
 8005d28:	611a      	str	r2, [r3, #16]
 8005d2a:	615a      	str	r2, [r3, #20]
 8005d2c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d2e:	1d3b      	adds	r3, r7, #4
 8005d30:	2200      	movs	r2, #0
 8005d32:	601a      	str	r2, [r3, #0]
 8005d34:	605a      	str	r2, [r3, #4]
 8005d36:	609a      	str	r2, [r3, #8]
 8005d38:	60da      	str	r2, [r3, #12]
 8005d3a:	611a      	str	r2, [r3, #16]
 8005d3c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 8005d3e:	2020      	movs	r0, #32
 8005d40:	f7ff fecc 	bl	8005adc <LL_APB2_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8005d44:	2004      	movs	r0, #4
 8005d46:	f7ff fe99 	bl	8005a7c <LL_AHB1_GRP1_EnableClock>
  /**USART6 GPIO Configuration  
  PC6   ------> USART6_TX
  PC7   ------> USART6_RX 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8005d4a:	23c0      	movs	r3, #192	; 0xc0
 8005d4c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005d4e:	2302      	movs	r3, #2
 8005d50:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8005d52:	2303      	movs	r3, #3
 8005d54:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005d56:	2300      	movs	r3, #0
 8005d58:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8005d5e:	2308      	movs	r3, #8
 8005d60:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005d62:	1d3b      	adds	r3, r7, #4
 8005d64:	4619      	mov	r1, r3
 8005d66:	4819      	ldr	r0, [pc, #100]	; (8005dcc <MX_USART6_UART_Init+0xb8>)
 8005d68:	f004 f805 	bl	8009d76 <LL_GPIO_Init>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8005d6c:	f7ff fdd6 	bl	800591c <__NVIC_GetPriorityGrouping>
 8005d70:	4603      	mov	r3, r0
 8005d72:	2200      	movs	r2, #0
 8005d74:	2100      	movs	r1, #0
 8005d76:	4618      	mov	r0, r3
 8005d78:	f7ff fe26 	bl	80059c8 <NVIC_EncodePriority>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	4619      	mov	r1, r3
 8005d80:	2047      	movs	r0, #71	; 0x47
 8005d82:	f7ff fdf7 	bl	8005974 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 8005d86:	2047      	movs	r0, #71	; 0x47
 8005d88:	f7ff fdd6 	bl	8005938 <__NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 115200;
 8005d8c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8005d90:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8005d92:	2300      	movs	r3, #0
 8005d94:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8005d96:	2300      	movs	r3, #0
 8005d98:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8005d9e:	230c      	movs	r3, #12
 8005da0:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8005da2:	2300      	movs	r3, #0
 8005da4:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8005da6:	2300      	movs	r3, #0
 8005da8:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART6, &USART_InitStruct);
 8005daa:	f107 031c 	add.w	r3, r7, #28
 8005dae:	4619      	mov	r1, r3
 8005db0:	4807      	ldr	r0, [pc, #28]	; (8005dd0 <MX_USART6_UART_Init+0xbc>)
 8005db2:	f004 fecb 	bl	800ab4c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART6);
 8005db6:	4806      	ldr	r0, [pc, #24]	; (8005dd0 <MX_USART6_UART_Init+0xbc>)
 8005db8:	f7ff fe49 	bl	8005a4e <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART6);
 8005dbc:	4804      	ldr	r0, [pc, #16]	; (8005dd0 <MX_USART6_UART_Init+0xbc>)
 8005dbe:	f7ff fe36 	bl	8005a2e <LL_USART_Enable>

}
 8005dc2:	bf00      	nop
 8005dc4:	3738      	adds	r7, #56	; 0x38
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}
 8005dca:	bf00      	nop
 8005dcc:	40020800 	.word	0x40020800
 8005dd0:	40011400 	.word	0x40011400

08005dd4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b08a      	sub	sp, #40	; 0x28
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ddc:	f107 0314 	add.w	r3, r7, #20
 8005de0:	2200      	movs	r2, #0
 8005de2:	601a      	str	r2, [r3, #0]
 8005de4:	605a      	str	r2, [r3, #4]
 8005de6:	609a      	str	r2, [r3, #8]
 8005de8:	60da      	str	r2, [r3, #12]
 8005dea:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a1d      	ldr	r2, [pc, #116]	; (8005e68 <HAL_UART_MspInit+0x94>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d134      	bne.n	8005e60 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005df6:	2300      	movs	r3, #0
 8005df8:	613b      	str	r3, [r7, #16]
 8005dfa:	4b1c      	ldr	r3, [pc, #112]	; (8005e6c <HAL_UART_MspInit+0x98>)
 8005dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dfe:	4a1b      	ldr	r2, [pc, #108]	; (8005e6c <HAL_UART_MspInit+0x98>)
 8005e00:	f043 0310 	orr.w	r3, r3, #16
 8005e04:	6453      	str	r3, [r2, #68]	; 0x44
 8005e06:	4b19      	ldr	r3, [pc, #100]	; (8005e6c <HAL_UART_MspInit+0x98>)
 8005e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e0a:	f003 0310 	and.w	r3, r3, #16
 8005e0e:	613b      	str	r3, [r7, #16]
 8005e10:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e12:	2300      	movs	r3, #0
 8005e14:	60fb      	str	r3, [r7, #12]
 8005e16:	4b15      	ldr	r3, [pc, #84]	; (8005e6c <HAL_UART_MspInit+0x98>)
 8005e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e1a:	4a14      	ldr	r2, [pc, #80]	; (8005e6c <HAL_UART_MspInit+0x98>)
 8005e1c:	f043 0301 	orr.w	r3, r3, #1
 8005e20:	6313      	str	r3, [r2, #48]	; 0x30
 8005e22:	4b12      	ldr	r3, [pc, #72]	; (8005e6c <HAL_UART_MspInit+0x98>)
 8005e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e26:	f003 0301 	and.w	r3, r3, #1
 8005e2a:	60fb      	str	r3, [r7, #12]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005e2e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005e32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e34:	2302      	movs	r3, #2
 8005e36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e3c:	2303      	movs	r3, #3
 8005e3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005e40:	2307      	movs	r3, #7
 8005e42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e44:	f107 0314 	add.w	r3, r7, #20
 8005e48:	4619      	mov	r1, r3
 8005e4a:	4809      	ldr	r0, [pc, #36]	; (8005e70 <HAL_UART_MspInit+0x9c>)
 8005e4c:	f001 f966 	bl	800711c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005e50:	2200      	movs	r2, #0
 8005e52:	2100      	movs	r1, #0
 8005e54:	2025      	movs	r0, #37	; 0x25
 8005e56:	f000 fd9a 	bl	800698e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005e5a:	2025      	movs	r0, #37	; 0x25
 8005e5c:	f000 fdb3 	bl	80069c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8005e60:	bf00      	nop
 8005e62:	3728      	adds	r7, #40	; 0x28
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}
 8005e68:	40011000 	.word	0x40011000
 8005e6c:	40023800 	.word	0x40023800
 8005e70:	40020000 	.word	0x40020000

08005e74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005e74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005eac <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005e78:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005e7a:	e003      	b.n	8005e84 <LoopCopyDataInit>

08005e7c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005e7c:	4b0c      	ldr	r3, [pc, #48]	; (8005eb0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005e7e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005e80:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005e82:	3104      	adds	r1, #4

08005e84 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005e84:	480b      	ldr	r0, [pc, #44]	; (8005eb4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005e86:	4b0c      	ldr	r3, [pc, #48]	; (8005eb8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005e88:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005e8a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005e8c:	d3f6      	bcc.n	8005e7c <CopyDataInit>
  ldr  r2, =_sbss
 8005e8e:	4a0b      	ldr	r2, [pc, #44]	; (8005ebc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005e90:	e002      	b.n	8005e98 <LoopFillZerobss>

08005e92 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005e92:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005e94:	f842 3b04 	str.w	r3, [r2], #4

08005e98 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005e98:	4b09      	ldr	r3, [pc, #36]	; (8005ec0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005e9a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005e9c:	d3f9      	bcc.n	8005e92 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005e9e:	f7ff fa4b 	bl	8005338 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005ea2:	f004 fed9 	bl	800ac58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005ea6:	f7fd fc07 	bl	80036b8 <main>
  bx  lr    
 8005eaa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005eac:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8005eb0:	0800e9e4 	.word	0x0800e9e4
  ldr  r0, =_sdata
 8005eb4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005eb8:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8005ebc:	200001e8 	.word	0x200001e8
  ldr  r3, = _ebss
 8005ec0:	200005c0 	.word	0x200005c0

08005ec4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005ec4:	e7fe      	b.n	8005ec4 <ADC_IRQHandler>
	...

08005ec8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005ecc:	4b0e      	ldr	r3, [pc, #56]	; (8005f08 <HAL_Init+0x40>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a0d      	ldr	r2, [pc, #52]	; (8005f08 <HAL_Init+0x40>)
 8005ed2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005ed6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005ed8:	4b0b      	ldr	r3, [pc, #44]	; (8005f08 <HAL_Init+0x40>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a0a      	ldr	r2, [pc, #40]	; (8005f08 <HAL_Init+0x40>)
 8005ede:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005ee2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005ee4:	4b08      	ldr	r3, [pc, #32]	; (8005f08 <HAL_Init+0x40>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a07      	ldr	r2, [pc, #28]	; (8005f08 <HAL_Init+0x40>)
 8005eea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005eee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005ef0:	2003      	movs	r0, #3
 8005ef2:	f000 fd41 	bl	8006978 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005ef6:	2000      	movs	r0, #0
 8005ef8:	f000 f808 	bl	8005f0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005efc:	f7fe ffaa 	bl	8004e54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005f00:	2300      	movs	r3, #0
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	bd80      	pop	{r7, pc}
 8005f06:	bf00      	nop
 8005f08:	40023c00 	.word	0x40023c00

08005f0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b082      	sub	sp, #8
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005f14:	4b12      	ldr	r3, [pc, #72]	; (8005f60 <HAL_InitTick+0x54>)
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	4b12      	ldr	r3, [pc, #72]	; (8005f64 <HAL_InitTick+0x58>)
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	4619      	mov	r1, r3
 8005f1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005f22:	fbb3 f3f1 	udiv	r3, r3, r1
 8005f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f000 fd59 	bl	80069e2 <HAL_SYSTICK_Config>
 8005f30:	4603      	mov	r3, r0
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d001      	beq.n	8005f3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	e00e      	b.n	8005f58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2b0f      	cmp	r3, #15
 8005f3e:	d80a      	bhi.n	8005f56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005f40:	2200      	movs	r2, #0
 8005f42:	6879      	ldr	r1, [r7, #4]
 8005f44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f48:	f000 fd21 	bl	800698e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005f4c:	4a06      	ldr	r2, [pc, #24]	; (8005f68 <HAL_InitTick+0x5c>)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005f52:	2300      	movs	r3, #0
 8005f54:	e000      	b.n	8005f58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3708      	adds	r7, #8
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}
 8005f60:	20000004 	.word	0x20000004
 8005f64:	2000000c 	.word	0x2000000c
 8005f68:	20000008 	.word	0x20000008

08005f6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005f70:	4b06      	ldr	r3, [pc, #24]	; (8005f8c <HAL_IncTick+0x20>)
 8005f72:	781b      	ldrb	r3, [r3, #0]
 8005f74:	461a      	mov	r2, r3
 8005f76:	4b06      	ldr	r3, [pc, #24]	; (8005f90 <HAL_IncTick+0x24>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4413      	add	r3, r2
 8005f7c:	4a04      	ldr	r2, [pc, #16]	; (8005f90 <HAL_IncTick+0x24>)
 8005f7e:	6013      	str	r3, [r2, #0]
}
 8005f80:	bf00      	nop
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr
 8005f8a:	bf00      	nop
 8005f8c:	2000000c 	.word	0x2000000c
 8005f90:	200005b8 	.word	0x200005b8

08005f94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005f94:	b480      	push	{r7}
 8005f96:	af00      	add	r7, sp, #0
  return uwTick;
 8005f98:	4b03      	ldr	r3, [pc, #12]	; (8005fa8 <HAL_GetTick+0x14>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr
 8005fa6:	bf00      	nop
 8005fa8:	200005b8 	.word	0x200005b8

08005fac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b084      	sub	sp, #16
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005fb4:	f7ff ffee 	bl	8005f94 <HAL_GetTick>
 8005fb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005fc4:	d005      	beq.n	8005fd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005fc6:	4b09      	ldr	r3, [pc, #36]	; (8005fec <HAL_Delay+0x40>)
 8005fc8:	781b      	ldrb	r3, [r3, #0]
 8005fca:	461a      	mov	r2, r3
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	4413      	add	r3, r2
 8005fd0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005fd2:	bf00      	nop
 8005fd4:	f7ff ffde 	bl	8005f94 <HAL_GetTick>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	1ad3      	subs	r3, r2, r3
 8005fde:	68fa      	ldr	r2, [r7, #12]
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d8f7      	bhi.n	8005fd4 <HAL_Delay+0x28>
  {
  }
}
 8005fe4:	bf00      	nop
 8005fe6:	3710      	adds	r7, #16
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}
 8005fec:	2000000c 	.word	0x2000000c

08005ff0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b084      	sub	sp, #16
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d101      	bne.n	8006006 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	e033      	b.n	800606e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800600a:	2b00      	cmp	r3, #0
 800600c:	d109      	bne.n	8006022 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f7fd f8e4 	bl	80031dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2200      	movs	r2, #0
 8006018:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2200      	movs	r2, #0
 800601e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006026:	f003 0310 	and.w	r3, r3, #16
 800602a:	2b00      	cmp	r3, #0
 800602c:	d118      	bne.n	8006060 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006032:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006036:	f023 0302 	bic.w	r3, r3, #2
 800603a:	f043 0202 	orr.w	r2, r3, #2
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f000 fa4a 	bl	80064dc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2200      	movs	r2, #0
 800604c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006052:	f023 0303 	bic.w	r3, r3, #3
 8006056:	f043 0201 	orr.w	r2, r3, #1
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	641a      	str	r2, [r3, #64]	; 0x40
 800605e:	e001      	b.n	8006064 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006060:	2301      	movs	r3, #1
 8006062:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2200      	movs	r2, #0
 8006068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800606c:	7bfb      	ldrb	r3, [r7, #15]
}
 800606e:	4618      	mov	r0, r3
 8006070:	3710      	adds	r7, #16
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}
	...

08006078 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b086      	sub	sp, #24
 800607c:	af00      	add	r7, sp, #0
 800607e:	60f8      	str	r0, [r7, #12]
 8006080:	60b9      	str	r1, [r7, #8]
 8006082:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8006084:	2300      	movs	r3, #0
 8006086:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800608e:	2b01      	cmp	r3, #1
 8006090:	d101      	bne.n	8006096 <HAL_ADC_Start_DMA+0x1e>
 8006092:	2302      	movs	r3, #2
 8006094:	e0cc      	b.n	8006230 <HAL_ADC_Start_DMA+0x1b8>
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2201      	movs	r2, #1
 800609a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	f003 0301 	and.w	r3, r3, #1
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d018      	beq.n	80060de <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	689a      	ldr	r2, [r3, #8]
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f042 0201 	orr.w	r2, r2, #1
 80060ba:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80060bc:	4b5e      	ldr	r3, [pc, #376]	; (8006238 <HAL_ADC_Start_DMA+0x1c0>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a5e      	ldr	r2, [pc, #376]	; (800623c <HAL_ADC_Start_DMA+0x1c4>)
 80060c2:	fba2 2303 	umull	r2, r3, r2, r3
 80060c6:	0c9a      	lsrs	r2, r3, #18
 80060c8:	4613      	mov	r3, r2
 80060ca:	005b      	lsls	r3, r3, #1
 80060cc:	4413      	add	r3, r2
 80060ce:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80060d0:	e002      	b.n	80060d8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	3b01      	subs	r3, #1
 80060d6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d1f9      	bne.n	80060d2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	689b      	ldr	r3, [r3, #8]
 80060e4:	f003 0301 	and.w	r3, r3, #1
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	f040 80a0 	bne.w	800622e <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060f2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80060f6:	f023 0301 	bic.w	r3, r3, #1
 80060fa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800610c:	2b00      	cmp	r3, #0
 800610e:	d007      	beq.n	8006120 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006114:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006118:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006124:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006128:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800612c:	d106      	bne.n	800613c <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006132:	f023 0206 	bic.w	r2, r3, #6
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	645a      	str	r2, [r3, #68]	; 0x44
 800613a:	e002      	b.n	8006142 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2200      	movs	r2, #0
 8006140:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2200      	movs	r2, #0
 8006146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800614a:	4b3d      	ldr	r3, [pc, #244]	; (8006240 <HAL_ADC_Start_DMA+0x1c8>)
 800614c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006152:	4a3c      	ldr	r2, [pc, #240]	; (8006244 <HAL_ADC_Start_DMA+0x1cc>)
 8006154:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800615a:	4a3b      	ldr	r2, [pc, #236]	; (8006248 <HAL_ADC_Start_DMA+0x1d0>)
 800615c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006162:	4a3a      	ldr	r2, [pc, #232]	; (800624c <HAL_ADC_Start_DMA+0x1d4>)
 8006164:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800616e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	685a      	ldr	r2, [r3, #4]
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800617e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	689a      	ldr	r2, [r3, #8]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800618e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	334c      	adds	r3, #76	; 0x4c
 800619a:	4619      	mov	r1, r3
 800619c:	68ba      	ldr	r2, [r7, #8]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f000 fcda 	bl	8006b58 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	f003 031f 	and.w	r3, r3, #31
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d12a      	bne.n	8006206 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a26      	ldr	r2, [pc, #152]	; (8006250 <HAL_ADC_Start_DMA+0x1d8>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d015      	beq.n	80061e6 <HAL_ADC_Start_DMA+0x16e>
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a25      	ldr	r2, [pc, #148]	; (8006254 <HAL_ADC_Start_DMA+0x1dc>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d105      	bne.n	80061d0 <HAL_ADC_Start_DMA+0x158>
 80061c4:	4b1e      	ldr	r3, [pc, #120]	; (8006240 <HAL_ADC_Start_DMA+0x1c8>)
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	f003 031f 	and.w	r3, r3, #31
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d00a      	beq.n	80061e6 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a20      	ldr	r2, [pc, #128]	; (8006258 <HAL_ADC_Start_DMA+0x1e0>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d129      	bne.n	800622e <HAL_ADC_Start_DMA+0x1b6>
 80061da:	4b19      	ldr	r3, [pc, #100]	; (8006240 <HAL_ADC_Start_DMA+0x1c8>)
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	f003 031f 	and.w	r3, r3, #31
 80061e2:	2b0f      	cmp	r3, #15
 80061e4:	d823      	bhi.n	800622e <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d11c      	bne.n	800622e <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	689a      	ldr	r2, [r3, #8]
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006202:	609a      	str	r2, [r3, #8]
 8006204:	e013      	b.n	800622e <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a11      	ldr	r2, [pc, #68]	; (8006250 <HAL_ADC_Start_DMA+0x1d8>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d10e      	bne.n	800622e <HAL_ADC_Start_DMA+0x1b6>
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	689b      	ldr	r3, [r3, #8]
 8006216:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800621a:	2b00      	cmp	r3, #0
 800621c:	d107      	bne.n	800622e <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	689a      	ldr	r2, [r3, #8]
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800622c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800622e:	2300      	movs	r3, #0
}
 8006230:	4618      	mov	r0, r3
 8006232:	3718      	adds	r7, #24
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}
 8006238:	20000004 	.word	0x20000004
 800623c:	431bde83 	.word	0x431bde83
 8006240:	40012300 	.word	0x40012300
 8006244:	080066d5 	.word	0x080066d5
 8006248:	0800678f 	.word	0x0800678f
 800624c:	080067ab 	.word	0x080067ab
 8006250:	40012000 	.word	0x40012000
 8006254:	40012100 	.word	0x40012100
 8006258:	40012200 	.word	0x40012200

0800625c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800625c:	b480      	push	{r7}
 800625e:	b083      	sub	sp, #12
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8006264:	bf00      	nop
 8006266:	370c      	adds	r7, #12
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr

08006270 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006270:	b480      	push	{r7}
 8006272:	b083      	sub	sp, #12
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8006278:	bf00      	nop
 800627a:	370c      	adds	r7, #12
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr

08006284 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006284:	b480      	push	{r7}
 8006286:	b083      	sub	sp, #12
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800628c:	bf00      	nop
 800628e:	370c      	adds	r7, #12
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr

08006298 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006298:	b480      	push	{r7}
 800629a:	b085      	sub	sp, #20
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80062a2:	2300      	movs	r3, #0
 80062a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d101      	bne.n	80062b4 <HAL_ADC_ConfigChannel+0x1c>
 80062b0:	2302      	movs	r3, #2
 80062b2:	e105      	b.n	80064c0 <HAL_ADC_ConfigChannel+0x228>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2201      	movs	r2, #1
 80062b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	2b09      	cmp	r3, #9
 80062c2:	d925      	bls.n	8006310 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	68d9      	ldr	r1, [r3, #12]
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	b29b      	uxth	r3, r3
 80062d0:	461a      	mov	r2, r3
 80062d2:	4613      	mov	r3, r2
 80062d4:	005b      	lsls	r3, r3, #1
 80062d6:	4413      	add	r3, r2
 80062d8:	3b1e      	subs	r3, #30
 80062da:	2207      	movs	r2, #7
 80062dc:	fa02 f303 	lsl.w	r3, r2, r3
 80062e0:	43da      	mvns	r2, r3
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	400a      	ands	r2, r1
 80062e8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	68d9      	ldr	r1, [r3, #12]
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	689a      	ldr	r2, [r3, #8]
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	4618      	mov	r0, r3
 80062fc:	4603      	mov	r3, r0
 80062fe:	005b      	lsls	r3, r3, #1
 8006300:	4403      	add	r3, r0
 8006302:	3b1e      	subs	r3, #30
 8006304:	409a      	lsls	r2, r3
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	430a      	orrs	r2, r1
 800630c:	60da      	str	r2, [r3, #12]
 800630e:	e022      	b.n	8006356 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	6919      	ldr	r1, [r3, #16]
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	b29b      	uxth	r3, r3
 800631c:	461a      	mov	r2, r3
 800631e:	4613      	mov	r3, r2
 8006320:	005b      	lsls	r3, r3, #1
 8006322:	4413      	add	r3, r2
 8006324:	2207      	movs	r2, #7
 8006326:	fa02 f303 	lsl.w	r3, r2, r3
 800632a:	43da      	mvns	r2, r3
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	400a      	ands	r2, r1
 8006332:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	6919      	ldr	r1, [r3, #16]
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	689a      	ldr	r2, [r3, #8]
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	b29b      	uxth	r3, r3
 8006344:	4618      	mov	r0, r3
 8006346:	4603      	mov	r3, r0
 8006348:	005b      	lsls	r3, r3, #1
 800634a:	4403      	add	r3, r0
 800634c:	409a      	lsls	r2, r3
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	430a      	orrs	r2, r1
 8006354:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	2b06      	cmp	r3, #6
 800635c:	d824      	bhi.n	80063a8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	685a      	ldr	r2, [r3, #4]
 8006368:	4613      	mov	r3, r2
 800636a:	009b      	lsls	r3, r3, #2
 800636c:	4413      	add	r3, r2
 800636e:	3b05      	subs	r3, #5
 8006370:	221f      	movs	r2, #31
 8006372:	fa02 f303 	lsl.w	r3, r2, r3
 8006376:	43da      	mvns	r2, r3
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	400a      	ands	r2, r1
 800637e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	b29b      	uxth	r3, r3
 800638c:	4618      	mov	r0, r3
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	685a      	ldr	r2, [r3, #4]
 8006392:	4613      	mov	r3, r2
 8006394:	009b      	lsls	r3, r3, #2
 8006396:	4413      	add	r3, r2
 8006398:	3b05      	subs	r3, #5
 800639a:	fa00 f203 	lsl.w	r2, r0, r3
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	430a      	orrs	r2, r1
 80063a4:	635a      	str	r2, [r3, #52]	; 0x34
 80063a6:	e04c      	b.n	8006442 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	2b0c      	cmp	r3, #12
 80063ae:	d824      	bhi.n	80063fa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	685a      	ldr	r2, [r3, #4]
 80063ba:	4613      	mov	r3, r2
 80063bc:	009b      	lsls	r3, r3, #2
 80063be:	4413      	add	r3, r2
 80063c0:	3b23      	subs	r3, #35	; 0x23
 80063c2:	221f      	movs	r2, #31
 80063c4:	fa02 f303 	lsl.w	r3, r2, r3
 80063c8:	43da      	mvns	r2, r3
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	400a      	ands	r2, r1
 80063d0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	b29b      	uxth	r3, r3
 80063de:	4618      	mov	r0, r3
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	685a      	ldr	r2, [r3, #4]
 80063e4:	4613      	mov	r3, r2
 80063e6:	009b      	lsls	r3, r3, #2
 80063e8:	4413      	add	r3, r2
 80063ea:	3b23      	subs	r3, #35	; 0x23
 80063ec:	fa00 f203 	lsl.w	r2, r0, r3
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	430a      	orrs	r2, r1
 80063f6:	631a      	str	r2, [r3, #48]	; 0x30
 80063f8:	e023      	b.n	8006442 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	685a      	ldr	r2, [r3, #4]
 8006404:	4613      	mov	r3, r2
 8006406:	009b      	lsls	r3, r3, #2
 8006408:	4413      	add	r3, r2
 800640a:	3b41      	subs	r3, #65	; 0x41
 800640c:	221f      	movs	r2, #31
 800640e:	fa02 f303 	lsl.w	r3, r2, r3
 8006412:	43da      	mvns	r2, r3
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	400a      	ands	r2, r1
 800641a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	b29b      	uxth	r3, r3
 8006428:	4618      	mov	r0, r3
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	685a      	ldr	r2, [r3, #4]
 800642e:	4613      	mov	r3, r2
 8006430:	009b      	lsls	r3, r3, #2
 8006432:	4413      	add	r3, r2
 8006434:	3b41      	subs	r3, #65	; 0x41
 8006436:	fa00 f203 	lsl.w	r2, r0, r3
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	430a      	orrs	r2, r1
 8006440:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006442:	4b22      	ldr	r3, [pc, #136]	; (80064cc <HAL_ADC_ConfigChannel+0x234>)
 8006444:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a21      	ldr	r2, [pc, #132]	; (80064d0 <HAL_ADC_ConfigChannel+0x238>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d109      	bne.n	8006464 <HAL_ADC_ConfigChannel+0x1cc>
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	2b12      	cmp	r3, #18
 8006456:	d105      	bne.n	8006464 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a19      	ldr	r2, [pc, #100]	; (80064d0 <HAL_ADC_ConfigChannel+0x238>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d123      	bne.n	80064b6 <HAL_ADC_ConfigChannel+0x21e>
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	2b10      	cmp	r3, #16
 8006474:	d003      	beq.n	800647e <HAL_ADC_ConfigChannel+0x1e6>
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	2b11      	cmp	r3, #17
 800647c:	d11b      	bne.n	80064b6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	2b10      	cmp	r3, #16
 8006490:	d111      	bne.n	80064b6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006492:	4b10      	ldr	r3, [pc, #64]	; (80064d4 <HAL_ADC_ConfigChannel+0x23c>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a10      	ldr	r2, [pc, #64]	; (80064d8 <HAL_ADC_ConfigChannel+0x240>)
 8006498:	fba2 2303 	umull	r2, r3, r2, r3
 800649c:	0c9a      	lsrs	r2, r3, #18
 800649e:	4613      	mov	r3, r2
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	4413      	add	r3, r2
 80064a4:	005b      	lsls	r3, r3, #1
 80064a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80064a8:	e002      	b.n	80064b0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	3b01      	subs	r3, #1
 80064ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d1f9      	bne.n	80064aa <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2200      	movs	r2, #0
 80064ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80064be:	2300      	movs	r3, #0
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3714      	adds	r7, #20
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr
 80064cc:	40012300 	.word	0x40012300
 80064d0:	40012000 	.word	0x40012000
 80064d4:	20000004 	.word	0x20000004
 80064d8:	431bde83 	.word	0x431bde83

080064dc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80064dc:	b480      	push	{r7}
 80064de:	b085      	sub	sp, #20
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80064e4:	4b79      	ldr	r3, [pc, #484]	; (80066cc <ADC_Init+0x1f0>)
 80064e6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	685a      	ldr	r2, [r3, #4]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	431a      	orrs	r2, r3
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	685a      	ldr	r2, [r3, #4]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006510:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	6859      	ldr	r1, [r3, #4]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	691b      	ldr	r3, [r3, #16]
 800651c:	021a      	lsls	r2, r3, #8
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	430a      	orrs	r2, r1
 8006524:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	685a      	ldr	r2, [r3, #4]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006534:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	6859      	ldr	r1, [r3, #4]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	689a      	ldr	r2, [r3, #8]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	430a      	orrs	r2, r1
 8006546:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	689a      	ldr	r2, [r3, #8]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006556:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	6899      	ldr	r1, [r3, #8]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	68da      	ldr	r2, [r3, #12]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	430a      	orrs	r2, r1
 8006568:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800656e:	4a58      	ldr	r2, [pc, #352]	; (80066d0 <ADC_Init+0x1f4>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d022      	beq.n	80065ba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	689a      	ldr	r2, [r3, #8]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006582:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	6899      	ldr	r1, [r3, #8]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	430a      	orrs	r2, r1
 8006594:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	689a      	ldr	r2, [r3, #8]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80065a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	6899      	ldr	r1, [r3, #8]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	430a      	orrs	r2, r1
 80065b6:	609a      	str	r2, [r3, #8]
 80065b8:	e00f      	b.n	80065da <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	689a      	ldr	r2, [r3, #8]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80065c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	689a      	ldr	r2, [r3, #8]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80065d8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	689a      	ldr	r2, [r3, #8]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f022 0202 	bic.w	r2, r2, #2
 80065e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	6899      	ldr	r1, [r3, #8]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	7e1b      	ldrb	r3, [r3, #24]
 80065f4:	005a      	lsls	r2, r3, #1
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	430a      	orrs	r2, r1
 80065fc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d01b      	beq.n	8006640 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	685a      	ldr	r2, [r3, #4]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006616:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	685a      	ldr	r2, [r3, #4]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006626:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	6859      	ldr	r1, [r3, #4]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006632:	3b01      	subs	r3, #1
 8006634:	035a      	lsls	r2, r3, #13
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	430a      	orrs	r2, r1
 800663c:	605a      	str	r2, [r3, #4]
 800663e:	e007      	b.n	8006650 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	685a      	ldr	r2, [r3, #4]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800664e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800665e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	69db      	ldr	r3, [r3, #28]
 800666a:	3b01      	subs	r3, #1
 800666c:	051a      	lsls	r2, r3, #20
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	430a      	orrs	r2, r1
 8006674:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	689a      	ldr	r2, [r3, #8]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006684:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	6899      	ldr	r1, [r3, #8]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006692:	025a      	lsls	r2, r3, #9
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	430a      	orrs	r2, r1
 800669a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	689a      	ldr	r2, [r3, #8]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	6899      	ldr	r1, [r3, #8]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	695b      	ldr	r3, [r3, #20]
 80066b6:	029a      	lsls	r2, r3, #10
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	430a      	orrs	r2, r1
 80066be:	609a      	str	r2, [r3, #8]
}
 80066c0:	bf00      	nop
 80066c2:	3714      	adds	r7, #20
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr
 80066cc:	40012300 	.word	0x40012300
 80066d0:	0f000001 	.word	0x0f000001

080066d4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b084      	sub	sp, #16
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066e0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d13c      	bne.n	8006768 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	689b      	ldr	r3, [r3, #8]
 8006700:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006704:	2b00      	cmp	r3, #0
 8006706:	d12b      	bne.n	8006760 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800670c:	2b00      	cmp	r3, #0
 800670e:	d127      	bne.n	8006760 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006716:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800671a:	2b00      	cmp	r3, #0
 800671c:	d006      	beq.n	800672c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006728:	2b00      	cmp	r3, #0
 800672a:	d119      	bne.n	8006760 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	685a      	ldr	r2, [r3, #4]
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f022 0220 	bic.w	r2, r2, #32
 800673a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006740:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800674c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006750:	2b00      	cmp	r3, #0
 8006752:	d105      	bne.n	8006760 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006758:	f043 0201 	orr.w	r2, r3, #1
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006760:	68f8      	ldr	r0, [r7, #12]
 8006762:	f7ff fd7b 	bl	800625c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006766:	e00e      	b.n	8006786 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800676c:	f003 0310 	and.w	r3, r3, #16
 8006770:	2b00      	cmp	r3, #0
 8006772:	d003      	beq.n	800677c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8006774:	68f8      	ldr	r0, [r7, #12]
 8006776:	f7ff fd85 	bl	8006284 <HAL_ADC_ErrorCallback>
}
 800677a:	e004      	b.n	8006786 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	4798      	blx	r3
}
 8006786:	bf00      	nop
 8006788:	3710      	adds	r7, #16
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}

0800678e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800678e:	b580      	push	{r7, lr}
 8006790:	b084      	sub	sp, #16
 8006792:	af00      	add	r7, sp, #0
 8006794:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800679a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800679c:	68f8      	ldr	r0, [r7, #12]
 800679e:	f7ff fd67 	bl	8006270 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80067a2:	bf00      	nop
 80067a4:	3710      	adds	r7, #16
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}

080067aa <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80067aa:	b580      	push	{r7, lr}
 80067ac:	b084      	sub	sp, #16
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067b6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2240      	movs	r2, #64	; 0x40
 80067bc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067c2:	f043 0204 	orr.w	r2, r3, #4
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80067ca:	68f8      	ldr	r0, [r7, #12]
 80067cc:	f7ff fd5a 	bl	8006284 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80067d0:	bf00      	nop
 80067d2:	3710      	adds	r7, #16
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}

080067d8 <__NVIC_SetPriorityGrouping>:
{
 80067d8:	b480      	push	{r7}
 80067da:	b085      	sub	sp, #20
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f003 0307 	and.w	r3, r3, #7
 80067e6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80067e8:	4b0c      	ldr	r3, [pc, #48]	; (800681c <__NVIC_SetPriorityGrouping+0x44>)
 80067ea:	68db      	ldr	r3, [r3, #12]
 80067ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80067ee:	68ba      	ldr	r2, [r7, #8]
 80067f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80067f4:	4013      	ands	r3, r2
 80067f6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006800:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006804:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006808:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800680a:	4a04      	ldr	r2, [pc, #16]	; (800681c <__NVIC_SetPriorityGrouping+0x44>)
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	60d3      	str	r3, [r2, #12]
}
 8006810:	bf00      	nop
 8006812:	3714      	adds	r7, #20
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr
 800681c:	e000ed00 	.word	0xe000ed00

08006820 <__NVIC_GetPriorityGrouping>:
{
 8006820:	b480      	push	{r7}
 8006822:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006824:	4b04      	ldr	r3, [pc, #16]	; (8006838 <__NVIC_GetPriorityGrouping+0x18>)
 8006826:	68db      	ldr	r3, [r3, #12]
 8006828:	0a1b      	lsrs	r3, r3, #8
 800682a:	f003 0307 	and.w	r3, r3, #7
}
 800682e:	4618      	mov	r0, r3
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr
 8006838:	e000ed00 	.word	0xe000ed00

0800683c <__NVIC_EnableIRQ>:
{
 800683c:	b480      	push	{r7}
 800683e:	b083      	sub	sp, #12
 8006840:	af00      	add	r7, sp, #0
 8006842:	4603      	mov	r3, r0
 8006844:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800684a:	2b00      	cmp	r3, #0
 800684c:	db0b      	blt.n	8006866 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800684e:	79fb      	ldrb	r3, [r7, #7]
 8006850:	f003 021f 	and.w	r2, r3, #31
 8006854:	4907      	ldr	r1, [pc, #28]	; (8006874 <__NVIC_EnableIRQ+0x38>)
 8006856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800685a:	095b      	lsrs	r3, r3, #5
 800685c:	2001      	movs	r0, #1
 800685e:	fa00 f202 	lsl.w	r2, r0, r2
 8006862:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006866:	bf00      	nop
 8006868:	370c      	adds	r7, #12
 800686a:	46bd      	mov	sp, r7
 800686c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006870:	4770      	bx	lr
 8006872:	bf00      	nop
 8006874:	e000e100 	.word	0xe000e100

08006878 <__NVIC_SetPriority>:
{
 8006878:	b480      	push	{r7}
 800687a:	b083      	sub	sp, #12
 800687c:	af00      	add	r7, sp, #0
 800687e:	4603      	mov	r3, r0
 8006880:	6039      	str	r1, [r7, #0]
 8006882:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006884:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006888:	2b00      	cmp	r3, #0
 800688a:	db0a      	blt.n	80068a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	b2da      	uxtb	r2, r3
 8006890:	490c      	ldr	r1, [pc, #48]	; (80068c4 <__NVIC_SetPriority+0x4c>)
 8006892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006896:	0112      	lsls	r2, r2, #4
 8006898:	b2d2      	uxtb	r2, r2
 800689a:	440b      	add	r3, r1
 800689c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80068a0:	e00a      	b.n	80068b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	b2da      	uxtb	r2, r3
 80068a6:	4908      	ldr	r1, [pc, #32]	; (80068c8 <__NVIC_SetPriority+0x50>)
 80068a8:	79fb      	ldrb	r3, [r7, #7]
 80068aa:	f003 030f 	and.w	r3, r3, #15
 80068ae:	3b04      	subs	r3, #4
 80068b0:	0112      	lsls	r2, r2, #4
 80068b2:	b2d2      	uxtb	r2, r2
 80068b4:	440b      	add	r3, r1
 80068b6:	761a      	strb	r2, [r3, #24]
}
 80068b8:	bf00      	nop
 80068ba:	370c      	adds	r7, #12
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr
 80068c4:	e000e100 	.word	0xe000e100
 80068c8:	e000ed00 	.word	0xe000ed00

080068cc <NVIC_EncodePriority>:
{
 80068cc:	b480      	push	{r7}
 80068ce:	b089      	sub	sp, #36	; 0x24
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	60f8      	str	r0, [r7, #12]
 80068d4:	60b9      	str	r1, [r7, #8]
 80068d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f003 0307 	and.w	r3, r3, #7
 80068de:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80068e0:	69fb      	ldr	r3, [r7, #28]
 80068e2:	f1c3 0307 	rsb	r3, r3, #7
 80068e6:	2b04      	cmp	r3, #4
 80068e8:	bf28      	it	cs
 80068ea:	2304      	movcs	r3, #4
 80068ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80068ee:	69fb      	ldr	r3, [r7, #28]
 80068f0:	3304      	adds	r3, #4
 80068f2:	2b06      	cmp	r3, #6
 80068f4:	d902      	bls.n	80068fc <NVIC_EncodePriority+0x30>
 80068f6:	69fb      	ldr	r3, [r7, #28]
 80068f8:	3b03      	subs	r3, #3
 80068fa:	e000      	b.n	80068fe <NVIC_EncodePriority+0x32>
 80068fc:	2300      	movs	r3, #0
 80068fe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006900:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006904:	69bb      	ldr	r3, [r7, #24]
 8006906:	fa02 f303 	lsl.w	r3, r2, r3
 800690a:	43da      	mvns	r2, r3
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	401a      	ands	r2, r3
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006914:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	fa01 f303 	lsl.w	r3, r1, r3
 800691e:	43d9      	mvns	r1, r3
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006924:	4313      	orrs	r3, r2
}
 8006926:	4618      	mov	r0, r3
 8006928:	3724      	adds	r7, #36	; 0x24
 800692a:	46bd      	mov	sp, r7
 800692c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006930:	4770      	bx	lr
	...

08006934 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b082      	sub	sp, #8
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	3b01      	subs	r3, #1
 8006940:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006944:	d301      	bcc.n	800694a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006946:	2301      	movs	r3, #1
 8006948:	e00f      	b.n	800696a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800694a:	4a0a      	ldr	r2, [pc, #40]	; (8006974 <SysTick_Config+0x40>)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	3b01      	subs	r3, #1
 8006950:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006952:	210f      	movs	r1, #15
 8006954:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006958:	f7ff ff8e 	bl	8006878 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800695c:	4b05      	ldr	r3, [pc, #20]	; (8006974 <SysTick_Config+0x40>)
 800695e:	2200      	movs	r2, #0
 8006960:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006962:	4b04      	ldr	r3, [pc, #16]	; (8006974 <SysTick_Config+0x40>)
 8006964:	2207      	movs	r2, #7
 8006966:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006968:	2300      	movs	r3, #0
}
 800696a:	4618      	mov	r0, r3
 800696c:	3708      	adds	r7, #8
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
 8006972:	bf00      	nop
 8006974:	e000e010 	.word	0xe000e010

08006978 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b082      	sub	sp, #8
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f7ff ff29 	bl	80067d8 <__NVIC_SetPriorityGrouping>
}
 8006986:	bf00      	nop
 8006988:	3708      	adds	r7, #8
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}

0800698e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800698e:	b580      	push	{r7, lr}
 8006990:	b086      	sub	sp, #24
 8006992:	af00      	add	r7, sp, #0
 8006994:	4603      	mov	r3, r0
 8006996:	60b9      	str	r1, [r7, #8]
 8006998:	607a      	str	r2, [r7, #4]
 800699a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800699c:	2300      	movs	r3, #0
 800699e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80069a0:	f7ff ff3e 	bl	8006820 <__NVIC_GetPriorityGrouping>
 80069a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80069a6:	687a      	ldr	r2, [r7, #4]
 80069a8:	68b9      	ldr	r1, [r7, #8]
 80069aa:	6978      	ldr	r0, [r7, #20]
 80069ac:	f7ff ff8e 	bl	80068cc <NVIC_EncodePriority>
 80069b0:	4602      	mov	r2, r0
 80069b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069b6:	4611      	mov	r1, r2
 80069b8:	4618      	mov	r0, r3
 80069ba:	f7ff ff5d 	bl	8006878 <__NVIC_SetPriority>
}
 80069be:	bf00      	nop
 80069c0:	3718      	adds	r7, #24
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}

080069c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80069c6:	b580      	push	{r7, lr}
 80069c8:	b082      	sub	sp, #8
 80069ca:	af00      	add	r7, sp, #0
 80069cc:	4603      	mov	r3, r0
 80069ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80069d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069d4:	4618      	mov	r0, r3
 80069d6:	f7ff ff31 	bl	800683c <__NVIC_EnableIRQ>
}
 80069da:	bf00      	nop
 80069dc:	3708      	adds	r7, #8
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}

080069e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80069e2:	b580      	push	{r7, lr}
 80069e4:	b082      	sub	sp, #8
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f7ff ffa2 	bl	8006934 <SysTick_Config>
 80069f0:	4603      	mov	r3, r0
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3708      	adds	r7, #8
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}
	...

080069fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b086      	sub	sp, #24
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006a04:	2300      	movs	r3, #0
 8006a06:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006a08:	f7ff fac4 	bl	8005f94 <HAL_GetTick>
 8006a0c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d101      	bne.n	8006a18 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006a14:	2301      	movs	r3, #1
 8006a16:	e099      	b.n	8006b4c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2202      	movs	r2, #2
 8006a24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f022 0201 	bic.w	r2, r2, #1
 8006a36:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006a38:	e00f      	b.n	8006a5a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006a3a:	f7ff faab 	bl	8005f94 <HAL_GetTick>
 8006a3e:	4602      	mov	r2, r0
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	1ad3      	subs	r3, r2, r3
 8006a44:	2b05      	cmp	r3, #5
 8006a46:	d908      	bls.n	8006a5a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2220      	movs	r2, #32
 8006a4c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2203      	movs	r2, #3
 8006a52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006a56:	2303      	movs	r3, #3
 8006a58:	e078      	b.n	8006b4c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f003 0301 	and.w	r3, r3, #1
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d1e8      	bne.n	8006a3a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006a70:	697a      	ldr	r2, [r7, #20]
 8006a72:	4b38      	ldr	r3, [pc, #224]	; (8006b54 <HAL_DMA_Init+0x158>)
 8006a74:	4013      	ands	r3, r2
 8006a76:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	685a      	ldr	r2, [r3, #4]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	689b      	ldr	r3, [r3, #8]
 8006a80:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006a86:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	691b      	ldr	r3, [r3, #16]
 8006a8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006a92:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	699b      	ldr	r3, [r3, #24]
 8006a98:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006a9e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6a1b      	ldr	r3, [r3, #32]
 8006aa4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006aa6:	697a      	ldr	r2, [r7, #20]
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab0:	2b04      	cmp	r3, #4
 8006ab2:	d107      	bne.n	8006ac4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006abc:	4313      	orrs	r3, r2
 8006abe:	697a      	ldr	r2, [r7, #20]
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	697a      	ldr	r2, [r7, #20]
 8006aca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	695b      	ldr	r3, [r3, #20]
 8006ad2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	f023 0307 	bic.w	r3, r3, #7
 8006ada:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae0:	697a      	ldr	r2, [r7, #20]
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aea:	2b04      	cmp	r3, #4
 8006aec:	d117      	bne.n	8006b1e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006af2:	697a      	ldr	r2, [r7, #20]
 8006af4:	4313      	orrs	r3, r2
 8006af6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d00e      	beq.n	8006b1e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f000 fa91 	bl	8007028 <DMA_CheckFifoParam>
 8006b06:	4603      	mov	r3, r0
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d008      	beq.n	8006b1e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2240      	movs	r2, #64	; 0x40
 8006b10:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2201      	movs	r2, #1
 8006b16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	e016      	b.n	8006b4c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	697a      	ldr	r2, [r7, #20]
 8006b24:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f000 fa48 	bl	8006fbc <DMA_CalcBaseAndBitshift>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b34:	223f      	movs	r2, #63	; 0x3f
 8006b36:	409a      	lsls	r2, r3
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2201      	movs	r2, #1
 8006b46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006b4a:	2300      	movs	r3, #0
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3718      	adds	r7, #24
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}
 8006b54:	f010803f 	.word	0xf010803f

08006b58 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b086      	sub	sp, #24
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	60f8      	str	r0, [r7, #12]
 8006b60:	60b9      	str	r1, [r7, #8]
 8006b62:	607a      	str	r2, [r7, #4]
 8006b64:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b66:	2300      	movs	r3, #0
 8006b68:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b6e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006b76:	2b01      	cmp	r3, #1
 8006b78:	d101      	bne.n	8006b7e <HAL_DMA_Start_IT+0x26>
 8006b7a:	2302      	movs	r3, #2
 8006b7c:	e040      	b.n	8006c00 <HAL_DMA_Start_IT+0xa8>
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2201      	movs	r2, #1
 8006b82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006b8c:	b2db      	uxtb	r3, r3
 8006b8e:	2b01      	cmp	r3, #1
 8006b90:	d12f      	bne.n	8006bf2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2202      	movs	r2, #2
 8006b96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	687a      	ldr	r2, [r7, #4]
 8006ba4:	68b9      	ldr	r1, [r7, #8]
 8006ba6:	68f8      	ldr	r0, [r7, #12]
 8006ba8:	f000 f9da 	bl	8006f60 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bb0:	223f      	movs	r2, #63	; 0x3f
 8006bb2:	409a      	lsls	r2, r3
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	681a      	ldr	r2, [r3, #0]
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f042 0216 	orr.w	r2, r2, #22
 8006bc6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d007      	beq.n	8006be0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f042 0208 	orr.w	r2, r2, #8
 8006bde:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f042 0201 	orr.w	r2, r2, #1
 8006bee:	601a      	str	r2, [r3, #0]
 8006bf0:	e005      	b.n	8006bfe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006bfa:	2302      	movs	r3, #2
 8006bfc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006bfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	3718      	adds	r7, #24
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}

08006c08 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b083      	sub	sp, #12
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006c16:	b2db      	uxtb	r3, r3
 8006c18:	2b02      	cmp	r3, #2
 8006c1a:	d004      	beq.n	8006c26 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2280      	movs	r2, #128	; 0x80
 8006c20:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006c22:	2301      	movs	r3, #1
 8006c24:	e00c      	b.n	8006c40 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2205      	movs	r2, #5
 8006c2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f022 0201 	bic.w	r2, r2, #1
 8006c3c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006c3e:	2300      	movs	r3, #0
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	370c      	adds	r7, #12
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr

08006c4c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b086      	sub	sp, #24
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006c54:	2300      	movs	r3, #0
 8006c56:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006c58:	4b92      	ldr	r3, [pc, #584]	; (8006ea4 <HAL_DMA_IRQHandler+0x258>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a92      	ldr	r2, [pc, #584]	; (8006ea8 <HAL_DMA_IRQHandler+0x25c>)
 8006c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c62:	0a9b      	lsrs	r3, r3, #10
 8006c64:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c6a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c76:	2208      	movs	r2, #8
 8006c78:	409a      	lsls	r2, r3
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	4013      	ands	r3, r2
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d01a      	beq.n	8006cb8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f003 0304 	and.w	r3, r3, #4
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d013      	beq.n	8006cb8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f022 0204 	bic.w	r2, r2, #4
 8006c9e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ca4:	2208      	movs	r2, #8
 8006ca6:	409a      	lsls	r2, r3
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cb0:	f043 0201 	orr.w	r2, r3, #1
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	409a      	lsls	r2, r3
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	4013      	ands	r3, r2
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d012      	beq.n	8006cee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	695b      	ldr	r3, [r3, #20]
 8006cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d00b      	beq.n	8006cee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cda:	2201      	movs	r2, #1
 8006cdc:	409a      	lsls	r2, r3
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ce6:	f043 0202 	orr.w	r2, r3, #2
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cf2:	2204      	movs	r2, #4
 8006cf4:	409a      	lsls	r2, r3
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	4013      	ands	r3, r2
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d012      	beq.n	8006d24 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f003 0302 	and.w	r3, r3, #2
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d00b      	beq.n	8006d24 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d10:	2204      	movs	r2, #4
 8006d12:	409a      	lsls	r2, r3
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d1c:	f043 0204 	orr.w	r2, r3, #4
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d28:	2210      	movs	r2, #16
 8006d2a:	409a      	lsls	r2, r3
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	4013      	ands	r3, r2
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d043      	beq.n	8006dbc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f003 0308 	and.w	r3, r3, #8
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d03c      	beq.n	8006dbc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d46:	2210      	movs	r2, #16
 8006d48:	409a      	lsls	r2, r3
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d018      	beq.n	8006d8e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d108      	bne.n	8006d7c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d024      	beq.n	8006dbc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	4798      	blx	r3
 8006d7a:	e01f      	b.n	8006dbc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d01b      	beq.n	8006dbc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	4798      	blx	r3
 8006d8c:	e016      	b.n	8006dbc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d107      	bne.n	8006dac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	681a      	ldr	r2, [r3, #0]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f022 0208 	bic.w	r2, r2, #8
 8006daa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d003      	beq.n	8006dbc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dc0:	2220      	movs	r2, #32
 8006dc2:	409a      	lsls	r2, r3
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	4013      	ands	r3, r2
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	f000 808e 	beq.w	8006eea <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f003 0310 	and.w	r3, r3, #16
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	f000 8086 	beq.w	8006eea <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006de2:	2220      	movs	r2, #32
 8006de4:	409a      	lsls	r2, r3
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006df0:	b2db      	uxtb	r3, r3
 8006df2:	2b05      	cmp	r3, #5
 8006df4:	d136      	bne.n	8006e64 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f022 0216 	bic.w	r2, r2, #22
 8006e04:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	695a      	ldr	r2, [r3, #20]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e14:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d103      	bne.n	8006e26 <HAL_DMA_IRQHandler+0x1da>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d007      	beq.n	8006e36 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	681a      	ldr	r2, [r3, #0]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f022 0208 	bic.w	r2, r2, #8
 8006e34:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e3a:	223f      	movs	r2, #63	; 0x3f
 8006e3c:	409a      	lsls	r2, r3
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2200      	movs	r2, #0
 8006e46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2201      	movs	r2, #1
 8006e4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d07d      	beq.n	8006f56 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	4798      	blx	r3
        }
        return;
 8006e62:	e078      	b.n	8006f56 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d01c      	beq.n	8006eac <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d108      	bne.n	8006e92 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d030      	beq.n	8006eea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	4798      	blx	r3
 8006e90:	e02b      	b.n	8006eea <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d027      	beq.n	8006eea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	4798      	blx	r3
 8006ea2:	e022      	b.n	8006eea <HAL_DMA_IRQHandler+0x29e>
 8006ea4:	20000004 	.word	0x20000004
 8006ea8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d10f      	bne.n	8006eda <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	681a      	ldr	r2, [r3, #0]
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f022 0210 	bic.w	r2, r2, #16
 8006ec8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d003      	beq.n	8006eea <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d032      	beq.n	8006f58 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ef6:	f003 0301 	and.w	r3, r3, #1
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d022      	beq.n	8006f44 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2205      	movs	r2, #5
 8006f02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	681a      	ldr	r2, [r3, #0]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f022 0201 	bic.w	r2, r2, #1
 8006f14:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	3301      	adds	r3, #1
 8006f1a:	60bb      	str	r3, [r7, #8]
 8006f1c:	697a      	ldr	r2, [r7, #20]
 8006f1e:	429a      	cmp	r2, r3
 8006f20:	d307      	bcc.n	8006f32 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f003 0301 	and.w	r3, r3, #1
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d1f2      	bne.n	8006f16 <HAL_DMA_IRQHandler+0x2ca>
 8006f30:	e000      	b.n	8006f34 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8006f32:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2200      	movs	r2, #0
 8006f38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2201      	movs	r2, #1
 8006f40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d005      	beq.n	8006f58 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	4798      	blx	r3
 8006f54:	e000      	b.n	8006f58 <HAL_DMA_IRQHandler+0x30c>
        return;
 8006f56:	bf00      	nop
    }
  }
}
 8006f58:	3718      	adds	r7, #24
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}
 8006f5e:	bf00      	nop

08006f60 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b085      	sub	sp, #20
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	60f8      	str	r0, [r7, #12]
 8006f68:	60b9      	str	r1, [r7, #8]
 8006f6a:	607a      	str	r2, [r7, #4]
 8006f6c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	681a      	ldr	r2, [r3, #0]
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006f7c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	683a      	ldr	r2, [r7, #0]
 8006f84:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	689b      	ldr	r3, [r3, #8]
 8006f8a:	2b40      	cmp	r3, #64	; 0x40
 8006f8c:	d108      	bne.n	8006fa0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	687a      	ldr	r2, [r7, #4]
 8006f94:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	68ba      	ldr	r2, [r7, #8]
 8006f9c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006f9e:	e007      	b.n	8006fb0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	68ba      	ldr	r2, [r7, #8]
 8006fa6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	60da      	str	r2, [r3, #12]
}
 8006fb0:	bf00      	nop
 8006fb2:	3714      	adds	r7, #20
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr

08006fbc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b085      	sub	sp, #20
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	b2db      	uxtb	r3, r3
 8006fca:	3b10      	subs	r3, #16
 8006fcc:	4a14      	ldr	r2, [pc, #80]	; (8007020 <DMA_CalcBaseAndBitshift+0x64>)
 8006fce:	fba2 2303 	umull	r2, r3, r2, r3
 8006fd2:	091b      	lsrs	r3, r3, #4
 8006fd4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006fd6:	4a13      	ldr	r2, [pc, #76]	; (8007024 <DMA_CalcBaseAndBitshift+0x68>)
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	4413      	add	r3, r2
 8006fdc:	781b      	ldrb	r3, [r3, #0]
 8006fde:	461a      	mov	r2, r3
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2b03      	cmp	r3, #3
 8006fe8:	d909      	bls.n	8006ffe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006ff2:	f023 0303 	bic.w	r3, r3, #3
 8006ff6:	1d1a      	adds	r2, r3, #4
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	659a      	str	r2, [r3, #88]	; 0x58
 8006ffc:	e007      	b.n	800700e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007006:	f023 0303 	bic.w	r3, r3, #3
 800700a:	687a      	ldr	r2, [r7, #4]
 800700c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007012:	4618      	mov	r0, r3
 8007014:	3714      	adds	r7, #20
 8007016:	46bd      	mov	sp, r7
 8007018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701c:	4770      	bx	lr
 800701e:	bf00      	nop
 8007020:	aaaaaaab 	.word	0xaaaaaaab
 8007024:	0800e6c4 	.word	0x0800e6c4

08007028 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007028:	b480      	push	{r7}
 800702a:	b085      	sub	sp, #20
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007030:	2300      	movs	r3, #0
 8007032:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007038:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	699b      	ldr	r3, [r3, #24]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d11f      	bne.n	8007082 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	2b03      	cmp	r3, #3
 8007046:	d855      	bhi.n	80070f4 <DMA_CheckFifoParam+0xcc>
 8007048:	a201      	add	r2, pc, #4	; (adr r2, 8007050 <DMA_CheckFifoParam+0x28>)
 800704a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800704e:	bf00      	nop
 8007050:	08007061 	.word	0x08007061
 8007054:	08007073 	.word	0x08007073
 8007058:	08007061 	.word	0x08007061
 800705c:	080070f5 	.word	0x080070f5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007064:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007068:	2b00      	cmp	r3, #0
 800706a:	d045      	beq.n	80070f8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800706c:	2301      	movs	r3, #1
 800706e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007070:	e042      	b.n	80070f8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007076:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800707a:	d13f      	bne.n	80070fc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800707c:	2301      	movs	r3, #1
 800707e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007080:	e03c      	b.n	80070fc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	699b      	ldr	r3, [r3, #24]
 8007086:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800708a:	d121      	bne.n	80070d0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	2b03      	cmp	r3, #3
 8007090:	d836      	bhi.n	8007100 <DMA_CheckFifoParam+0xd8>
 8007092:	a201      	add	r2, pc, #4	; (adr r2, 8007098 <DMA_CheckFifoParam+0x70>)
 8007094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007098:	080070a9 	.word	0x080070a9
 800709c:	080070af 	.word	0x080070af
 80070a0:	080070a9 	.word	0x080070a9
 80070a4:	080070c1 	.word	0x080070c1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80070a8:	2301      	movs	r3, #1
 80070aa:	73fb      	strb	r3, [r7, #15]
      break;
 80070ac:	e02f      	b.n	800710e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d024      	beq.n	8007104 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80070ba:	2301      	movs	r3, #1
 80070bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80070be:	e021      	b.n	8007104 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070c4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80070c8:	d11e      	bne.n	8007108 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80070ca:	2301      	movs	r3, #1
 80070cc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80070ce:	e01b      	b.n	8007108 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	2b02      	cmp	r3, #2
 80070d4:	d902      	bls.n	80070dc <DMA_CheckFifoParam+0xb4>
 80070d6:	2b03      	cmp	r3, #3
 80070d8:	d003      	beq.n	80070e2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80070da:	e018      	b.n	800710e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80070dc:	2301      	movs	r3, #1
 80070de:	73fb      	strb	r3, [r7, #15]
      break;
 80070e0:	e015      	b.n	800710e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d00e      	beq.n	800710c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80070ee:	2301      	movs	r3, #1
 80070f0:	73fb      	strb	r3, [r7, #15]
      break;
 80070f2:	e00b      	b.n	800710c <DMA_CheckFifoParam+0xe4>
      break;
 80070f4:	bf00      	nop
 80070f6:	e00a      	b.n	800710e <DMA_CheckFifoParam+0xe6>
      break;
 80070f8:	bf00      	nop
 80070fa:	e008      	b.n	800710e <DMA_CheckFifoParam+0xe6>
      break;
 80070fc:	bf00      	nop
 80070fe:	e006      	b.n	800710e <DMA_CheckFifoParam+0xe6>
      break;
 8007100:	bf00      	nop
 8007102:	e004      	b.n	800710e <DMA_CheckFifoParam+0xe6>
      break;
 8007104:	bf00      	nop
 8007106:	e002      	b.n	800710e <DMA_CheckFifoParam+0xe6>
      break;   
 8007108:	bf00      	nop
 800710a:	e000      	b.n	800710e <DMA_CheckFifoParam+0xe6>
      break;
 800710c:	bf00      	nop
    }
  } 
  
  return status; 
 800710e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007110:	4618      	mov	r0, r3
 8007112:	3714      	adds	r7, #20
 8007114:	46bd      	mov	sp, r7
 8007116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711a:	4770      	bx	lr

0800711c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800711c:	b480      	push	{r7}
 800711e:	b089      	sub	sp, #36	; 0x24
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
 8007124:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007126:	2300      	movs	r3, #0
 8007128:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800712a:	2300      	movs	r3, #0
 800712c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800712e:	2300      	movs	r3, #0
 8007130:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007132:	2300      	movs	r3, #0
 8007134:	61fb      	str	r3, [r7, #28]
 8007136:	e16b      	b.n	8007410 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007138:	2201      	movs	r2, #1
 800713a:	69fb      	ldr	r3, [r7, #28]
 800713c:	fa02 f303 	lsl.w	r3, r2, r3
 8007140:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	697a      	ldr	r2, [r7, #20]
 8007148:	4013      	ands	r3, r2
 800714a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800714c:	693a      	ldr	r2, [r7, #16]
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	429a      	cmp	r2, r3
 8007152:	f040 815a 	bne.w	800740a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	2b01      	cmp	r3, #1
 800715c:	d00b      	beq.n	8007176 <HAL_GPIO_Init+0x5a>
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	2b02      	cmp	r3, #2
 8007164:	d007      	beq.n	8007176 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800716a:	2b11      	cmp	r3, #17
 800716c:	d003      	beq.n	8007176 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	2b12      	cmp	r3, #18
 8007174:	d130      	bne.n	80071d8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	689b      	ldr	r3, [r3, #8]
 800717a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800717c:	69fb      	ldr	r3, [r7, #28]
 800717e:	005b      	lsls	r3, r3, #1
 8007180:	2203      	movs	r2, #3
 8007182:	fa02 f303 	lsl.w	r3, r2, r3
 8007186:	43db      	mvns	r3, r3
 8007188:	69ba      	ldr	r2, [r7, #24]
 800718a:	4013      	ands	r3, r2
 800718c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	68da      	ldr	r2, [r3, #12]
 8007192:	69fb      	ldr	r3, [r7, #28]
 8007194:	005b      	lsls	r3, r3, #1
 8007196:	fa02 f303 	lsl.w	r3, r2, r3
 800719a:	69ba      	ldr	r2, [r7, #24]
 800719c:	4313      	orrs	r3, r2
 800719e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	69ba      	ldr	r2, [r7, #24]
 80071a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	685b      	ldr	r3, [r3, #4]
 80071aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80071ac:	2201      	movs	r2, #1
 80071ae:	69fb      	ldr	r3, [r7, #28]
 80071b0:	fa02 f303 	lsl.w	r3, r2, r3
 80071b4:	43db      	mvns	r3, r3
 80071b6:	69ba      	ldr	r2, [r7, #24]
 80071b8:	4013      	ands	r3, r2
 80071ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	091b      	lsrs	r3, r3, #4
 80071c2:	f003 0201 	and.w	r2, r3, #1
 80071c6:	69fb      	ldr	r3, [r7, #28]
 80071c8:	fa02 f303 	lsl.w	r3, r2, r3
 80071cc:	69ba      	ldr	r2, [r7, #24]
 80071ce:	4313      	orrs	r3, r2
 80071d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	69ba      	ldr	r2, [r7, #24]
 80071d6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	68db      	ldr	r3, [r3, #12]
 80071dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80071de:	69fb      	ldr	r3, [r7, #28]
 80071e0:	005b      	lsls	r3, r3, #1
 80071e2:	2203      	movs	r2, #3
 80071e4:	fa02 f303 	lsl.w	r3, r2, r3
 80071e8:	43db      	mvns	r3, r3
 80071ea:	69ba      	ldr	r2, [r7, #24]
 80071ec:	4013      	ands	r3, r2
 80071ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	689a      	ldr	r2, [r3, #8]
 80071f4:	69fb      	ldr	r3, [r7, #28]
 80071f6:	005b      	lsls	r3, r3, #1
 80071f8:	fa02 f303 	lsl.w	r3, r2, r3
 80071fc:	69ba      	ldr	r2, [r7, #24]
 80071fe:	4313      	orrs	r3, r2
 8007200:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	69ba      	ldr	r2, [r7, #24]
 8007206:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	2b02      	cmp	r3, #2
 800720e:	d003      	beq.n	8007218 <HAL_GPIO_Init+0xfc>
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	2b12      	cmp	r3, #18
 8007216:	d123      	bne.n	8007260 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007218:	69fb      	ldr	r3, [r7, #28]
 800721a:	08da      	lsrs	r2, r3, #3
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	3208      	adds	r2, #8
 8007220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007224:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007226:	69fb      	ldr	r3, [r7, #28]
 8007228:	f003 0307 	and.w	r3, r3, #7
 800722c:	009b      	lsls	r3, r3, #2
 800722e:	220f      	movs	r2, #15
 8007230:	fa02 f303 	lsl.w	r3, r2, r3
 8007234:	43db      	mvns	r3, r3
 8007236:	69ba      	ldr	r2, [r7, #24]
 8007238:	4013      	ands	r3, r2
 800723a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	691a      	ldr	r2, [r3, #16]
 8007240:	69fb      	ldr	r3, [r7, #28]
 8007242:	f003 0307 	and.w	r3, r3, #7
 8007246:	009b      	lsls	r3, r3, #2
 8007248:	fa02 f303 	lsl.w	r3, r2, r3
 800724c:	69ba      	ldr	r2, [r7, #24]
 800724e:	4313      	orrs	r3, r2
 8007250:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007252:	69fb      	ldr	r3, [r7, #28]
 8007254:	08da      	lsrs	r2, r3, #3
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	3208      	adds	r2, #8
 800725a:	69b9      	ldr	r1, [r7, #24]
 800725c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007266:	69fb      	ldr	r3, [r7, #28]
 8007268:	005b      	lsls	r3, r3, #1
 800726a:	2203      	movs	r2, #3
 800726c:	fa02 f303 	lsl.w	r3, r2, r3
 8007270:	43db      	mvns	r3, r3
 8007272:	69ba      	ldr	r2, [r7, #24]
 8007274:	4013      	ands	r3, r2
 8007276:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	f003 0203 	and.w	r2, r3, #3
 8007280:	69fb      	ldr	r3, [r7, #28]
 8007282:	005b      	lsls	r3, r3, #1
 8007284:	fa02 f303 	lsl.w	r3, r2, r3
 8007288:	69ba      	ldr	r2, [r7, #24]
 800728a:	4313      	orrs	r3, r2
 800728c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	69ba      	ldr	r2, [r7, #24]
 8007292:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800729c:	2b00      	cmp	r3, #0
 800729e:	f000 80b4 	beq.w	800740a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80072a2:	2300      	movs	r3, #0
 80072a4:	60fb      	str	r3, [r7, #12]
 80072a6:	4b5f      	ldr	r3, [pc, #380]	; (8007424 <HAL_GPIO_Init+0x308>)
 80072a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072aa:	4a5e      	ldr	r2, [pc, #376]	; (8007424 <HAL_GPIO_Init+0x308>)
 80072ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80072b0:	6453      	str	r3, [r2, #68]	; 0x44
 80072b2:	4b5c      	ldr	r3, [pc, #368]	; (8007424 <HAL_GPIO_Init+0x308>)
 80072b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072ba:	60fb      	str	r3, [r7, #12]
 80072bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80072be:	4a5a      	ldr	r2, [pc, #360]	; (8007428 <HAL_GPIO_Init+0x30c>)
 80072c0:	69fb      	ldr	r3, [r7, #28]
 80072c2:	089b      	lsrs	r3, r3, #2
 80072c4:	3302      	adds	r3, #2
 80072c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80072cc:	69fb      	ldr	r3, [r7, #28]
 80072ce:	f003 0303 	and.w	r3, r3, #3
 80072d2:	009b      	lsls	r3, r3, #2
 80072d4:	220f      	movs	r2, #15
 80072d6:	fa02 f303 	lsl.w	r3, r2, r3
 80072da:	43db      	mvns	r3, r3
 80072dc:	69ba      	ldr	r2, [r7, #24]
 80072de:	4013      	ands	r3, r2
 80072e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	4a51      	ldr	r2, [pc, #324]	; (800742c <HAL_GPIO_Init+0x310>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d02b      	beq.n	8007342 <HAL_GPIO_Init+0x226>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	4a50      	ldr	r2, [pc, #320]	; (8007430 <HAL_GPIO_Init+0x314>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d025      	beq.n	800733e <HAL_GPIO_Init+0x222>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	4a4f      	ldr	r2, [pc, #316]	; (8007434 <HAL_GPIO_Init+0x318>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d01f      	beq.n	800733a <HAL_GPIO_Init+0x21e>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	4a4e      	ldr	r2, [pc, #312]	; (8007438 <HAL_GPIO_Init+0x31c>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d019      	beq.n	8007336 <HAL_GPIO_Init+0x21a>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	4a4d      	ldr	r2, [pc, #308]	; (800743c <HAL_GPIO_Init+0x320>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d013      	beq.n	8007332 <HAL_GPIO_Init+0x216>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	4a4c      	ldr	r2, [pc, #304]	; (8007440 <HAL_GPIO_Init+0x324>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d00d      	beq.n	800732e <HAL_GPIO_Init+0x212>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	4a4b      	ldr	r2, [pc, #300]	; (8007444 <HAL_GPIO_Init+0x328>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d007      	beq.n	800732a <HAL_GPIO_Init+0x20e>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	4a4a      	ldr	r2, [pc, #296]	; (8007448 <HAL_GPIO_Init+0x32c>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d101      	bne.n	8007326 <HAL_GPIO_Init+0x20a>
 8007322:	2307      	movs	r3, #7
 8007324:	e00e      	b.n	8007344 <HAL_GPIO_Init+0x228>
 8007326:	2308      	movs	r3, #8
 8007328:	e00c      	b.n	8007344 <HAL_GPIO_Init+0x228>
 800732a:	2306      	movs	r3, #6
 800732c:	e00a      	b.n	8007344 <HAL_GPIO_Init+0x228>
 800732e:	2305      	movs	r3, #5
 8007330:	e008      	b.n	8007344 <HAL_GPIO_Init+0x228>
 8007332:	2304      	movs	r3, #4
 8007334:	e006      	b.n	8007344 <HAL_GPIO_Init+0x228>
 8007336:	2303      	movs	r3, #3
 8007338:	e004      	b.n	8007344 <HAL_GPIO_Init+0x228>
 800733a:	2302      	movs	r3, #2
 800733c:	e002      	b.n	8007344 <HAL_GPIO_Init+0x228>
 800733e:	2301      	movs	r3, #1
 8007340:	e000      	b.n	8007344 <HAL_GPIO_Init+0x228>
 8007342:	2300      	movs	r3, #0
 8007344:	69fa      	ldr	r2, [r7, #28]
 8007346:	f002 0203 	and.w	r2, r2, #3
 800734a:	0092      	lsls	r2, r2, #2
 800734c:	4093      	lsls	r3, r2
 800734e:	69ba      	ldr	r2, [r7, #24]
 8007350:	4313      	orrs	r3, r2
 8007352:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007354:	4934      	ldr	r1, [pc, #208]	; (8007428 <HAL_GPIO_Init+0x30c>)
 8007356:	69fb      	ldr	r3, [r7, #28]
 8007358:	089b      	lsrs	r3, r3, #2
 800735a:	3302      	adds	r3, #2
 800735c:	69ba      	ldr	r2, [r7, #24]
 800735e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007362:	4b3a      	ldr	r3, [pc, #232]	; (800744c <HAL_GPIO_Init+0x330>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	43db      	mvns	r3, r3
 800736c:	69ba      	ldr	r2, [r7, #24]
 800736e:	4013      	ands	r3, r2
 8007370:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800737a:	2b00      	cmp	r3, #0
 800737c:	d003      	beq.n	8007386 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800737e:	69ba      	ldr	r2, [r7, #24]
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	4313      	orrs	r3, r2
 8007384:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007386:	4a31      	ldr	r2, [pc, #196]	; (800744c <HAL_GPIO_Init+0x330>)
 8007388:	69bb      	ldr	r3, [r7, #24]
 800738a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800738c:	4b2f      	ldr	r3, [pc, #188]	; (800744c <HAL_GPIO_Init+0x330>)
 800738e:	685b      	ldr	r3, [r3, #4]
 8007390:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	43db      	mvns	r3, r3
 8007396:	69ba      	ldr	r2, [r7, #24]
 8007398:	4013      	ands	r3, r2
 800739a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	685b      	ldr	r3, [r3, #4]
 80073a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d003      	beq.n	80073b0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80073a8:	69ba      	ldr	r2, [r7, #24]
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	4313      	orrs	r3, r2
 80073ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80073b0:	4a26      	ldr	r2, [pc, #152]	; (800744c <HAL_GPIO_Init+0x330>)
 80073b2:	69bb      	ldr	r3, [r7, #24]
 80073b4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80073b6:	4b25      	ldr	r3, [pc, #148]	; (800744c <HAL_GPIO_Init+0x330>)
 80073b8:	689b      	ldr	r3, [r3, #8]
 80073ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	43db      	mvns	r3, r3
 80073c0:	69ba      	ldr	r2, [r7, #24]
 80073c2:	4013      	ands	r3, r2
 80073c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	685b      	ldr	r3, [r3, #4]
 80073ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d003      	beq.n	80073da <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80073d2:	69ba      	ldr	r2, [r7, #24]
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	4313      	orrs	r3, r2
 80073d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80073da:	4a1c      	ldr	r2, [pc, #112]	; (800744c <HAL_GPIO_Init+0x330>)
 80073dc:	69bb      	ldr	r3, [r7, #24]
 80073de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80073e0:	4b1a      	ldr	r3, [pc, #104]	; (800744c <HAL_GPIO_Init+0x330>)
 80073e2:	68db      	ldr	r3, [r3, #12]
 80073e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	43db      	mvns	r3, r3
 80073ea:	69ba      	ldr	r2, [r7, #24]
 80073ec:	4013      	ands	r3, r2
 80073ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d003      	beq.n	8007404 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80073fc:	69ba      	ldr	r2, [r7, #24]
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	4313      	orrs	r3, r2
 8007402:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007404:	4a11      	ldr	r2, [pc, #68]	; (800744c <HAL_GPIO_Init+0x330>)
 8007406:	69bb      	ldr	r3, [r7, #24]
 8007408:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800740a:	69fb      	ldr	r3, [r7, #28]
 800740c:	3301      	adds	r3, #1
 800740e:	61fb      	str	r3, [r7, #28]
 8007410:	69fb      	ldr	r3, [r7, #28]
 8007412:	2b0f      	cmp	r3, #15
 8007414:	f67f ae90 	bls.w	8007138 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007418:	bf00      	nop
 800741a:	3724      	adds	r7, #36	; 0x24
 800741c:	46bd      	mov	sp, r7
 800741e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007422:	4770      	bx	lr
 8007424:	40023800 	.word	0x40023800
 8007428:	40013800 	.word	0x40013800
 800742c:	40020000 	.word	0x40020000
 8007430:	40020400 	.word	0x40020400
 8007434:	40020800 	.word	0x40020800
 8007438:	40020c00 	.word	0x40020c00
 800743c:	40021000 	.word	0x40021000
 8007440:	40021400 	.word	0x40021400
 8007444:	40021800 	.word	0x40021800
 8007448:	40021c00 	.word	0x40021c00
 800744c:	40013c00 	.word	0x40013c00

08007450 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b084      	sub	sp, #16
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d101      	bne.n	8007462 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800745e:	2301      	movs	r3, #1
 8007460:	e11f      	b.n	80076a2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007468:	b2db      	uxtb	r3, r3
 800746a:	2b00      	cmp	r3, #0
 800746c:	d106      	bne.n	800747c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2200      	movs	r2, #0
 8007472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f7fc f82a 	bl	80034d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2224      	movs	r2, #36	; 0x24
 8007480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	681a      	ldr	r2, [r3, #0]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f022 0201 	bic.w	r2, r2, #1
 8007492:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	681a      	ldr	r2, [r3, #0]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80074a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	681a      	ldr	r2, [r3, #0]
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80074b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80074b4:	f001 fbb6 	bl	8008c24 <HAL_RCC_GetPCLK1Freq>
 80074b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	4a7b      	ldr	r2, [pc, #492]	; (80076ac <HAL_I2C_Init+0x25c>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d807      	bhi.n	80074d4 <HAL_I2C_Init+0x84>
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	4a7a      	ldr	r2, [pc, #488]	; (80076b0 <HAL_I2C_Init+0x260>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	bf94      	ite	ls
 80074cc:	2301      	movls	r3, #1
 80074ce:	2300      	movhi	r3, #0
 80074d0:	b2db      	uxtb	r3, r3
 80074d2:	e006      	b.n	80074e2 <HAL_I2C_Init+0x92>
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	4a77      	ldr	r2, [pc, #476]	; (80076b4 <HAL_I2C_Init+0x264>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	bf94      	ite	ls
 80074dc:	2301      	movls	r3, #1
 80074de:	2300      	movhi	r3, #0
 80074e0:	b2db      	uxtb	r3, r3
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d001      	beq.n	80074ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80074e6:	2301      	movs	r3, #1
 80074e8:	e0db      	b.n	80076a2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	4a72      	ldr	r2, [pc, #456]	; (80076b8 <HAL_I2C_Init+0x268>)
 80074ee:	fba2 2303 	umull	r2, r3, r2, r3
 80074f2:	0c9b      	lsrs	r3, r3, #18
 80074f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	68ba      	ldr	r2, [r7, #8]
 8007506:	430a      	orrs	r2, r1
 8007508:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	6a1b      	ldr	r3, [r3, #32]
 8007510:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	4a64      	ldr	r2, [pc, #400]	; (80076ac <HAL_I2C_Init+0x25c>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d802      	bhi.n	8007524 <HAL_I2C_Init+0xd4>
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	3301      	adds	r3, #1
 8007522:	e009      	b.n	8007538 <HAL_I2C_Init+0xe8>
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800752a:	fb02 f303 	mul.w	r3, r2, r3
 800752e:	4a63      	ldr	r2, [pc, #396]	; (80076bc <HAL_I2C_Init+0x26c>)
 8007530:	fba2 2303 	umull	r2, r3, r2, r3
 8007534:	099b      	lsrs	r3, r3, #6
 8007536:	3301      	adds	r3, #1
 8007538:	687a      	ldr	r2, [r7, #4]
 800753a:	6812      	ldr	r2, [r2, #0]
 800753c:	430b      	orrs	r3, r1
 800753e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	69db      	ldr	r3, [r3, #28]
 8007546:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800754a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	4956      	ldr	r1, [pc, #344]	; (80076ac <HAL_I2C_Init+0x25c>)
 8007554:	428b      	cmp	r3, r1
 8007556:	d80d      	bhi.n	8007574 <HAL_I2C_Init+0x124>
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	1e59      	subs	r1, r3, #1
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	005b      	lsls	r3, r3, #1
 8007562:	fbb1 f3f3 	udiv	r3, r1, r3
 8007566:	3301      	adds	r3, #1
 8007568:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800756c:	2b04      	cmp	r3, #4
 800756e:	bf38      	it	cc
 8007570:	2304      	movcc	r3, #4
 8007572:	e04f      	b.n	8007614 <HAL_I2C_Init+0x1c4>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	689b      	ldr	r3, [r3, #8]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d111      	bne.n	80075a0 <HAL_I2C_Init+0x150>
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	1e58      	subs	r0, r3, #1
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6859      	ldr	r1, [r3, #4]
 8007584:	460b      	mov	r3, r1
 8007586:	005b      	lsls	r3, r3, #1
 8007588:	440b      	add	r3, r1
 800758a:	fbb0 f3f3 	udiv	r3, r0, r3
 800758e:	3301      	adds	r3, #1
 8007590:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007594:	2b00      	cmp	r3, #0
 8007596:	bf0c      	ite	eq
 8007598:	2301      	moveq	r3, #1
 800759a:	2300      	movne	r3, #0
 800759c:	b2db      	uxtb	r3, r3
 800759e:	e012      	b.n	80075c6 <HAL_I2C_Init+0x176>
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	1e58      	subs	r0, r3, #1
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6859      	ldr	r1, [r3, #4]
 80075a8:	460b      	mov	r3, r1
 80075aa:	009b      	lsls	r3, r3, #2
 80075ac:	440b      	add	r3, r1
 80075ae:	0099      	lsls	r1, r3, #2
 80075b0:	440b      	add	r3, r1
 80075b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80075b6:	3301      	adds	r3, #1
 80075b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80075bc:	2b00      	cmp	r3, #0
 80075be:	bf0c      	ite	eq
 80075c0:	2301      	moveq	r3, #1
 80075c2:	2300      	movne	r3, #0
 80075c4:	b2db      	uxtb	r3, r3
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d001      	beq.n	80075ce <HAL_I2C_Init+0x17e>
 80075ca:	2301      	movs	r3, #1
 80075cc:	e022      	b.n	8007614 <HAL_I2C_Init+0x1c4>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	689b      	ldr	r3, [r3, #8]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d10e      	bne.n	80075f4 <HAL_I2C_Init+0x1a4>
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	1e58      	subs	r0, r3, #1
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6859      	ldr	r1, [r3, #4]
 80075de:	460b      	mov	r3, r1
 80075e0:	005b      	lsls	r3, r3, #1
 80075e2:	440b      	add	r3, r1
 80075e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80075e8:	3301      	adds	r3, #1
 80075ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80075ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075f2:	e00f      	b.n	8007614 <HAL_I2C_Init+0x1c4>
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	1e58      	subs	r0, r3, #1
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6859      	ldr	r1, [r3, #4]
 80075fc:	460b      	mov	r3, r1
 80075fe:	009b      	lsls	r3, r3, #2
 8007600:	440b      	add	r3, r1
 8007602:	0099      	lsls	r1, r3, #2
 8007604:	440b      	add	r3, r1
 8007606:	fbb0 f3f3 	udiv	r3, r0, r3
 800760a:	3301      	adds	r3, #1
 800760c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007610:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007614:	6879      	ldr	r1, [r7, #4]
 8007616:	6809      	ldr	r1, [r1, #0]
 8007618:	4313      	orrs	r3, r2
 800761a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	69da      	ldr	r2, [r3, #28]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6a1b      	ldr	r3, [r3, #32]
 800762e:	431a      	orrs	r2, r3
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	430a      	orrs	r2, r1
 8007636:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	689b      	ldr	r3, [r3, #8]
 800763e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007642:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007646:	687a      	ldr	r2, [r7, #4]
 8007648:	6911      	ldr	r1, [r2, #16]
 800764a:	687a      	ldr	r2, [r7, #4]
 800764c:	68d2      	ldr	r2, [r2, #12]
 800764e:	4311      	orrs	r1, r2
 8007650:	687a      	ldr	r2, [r7, #4]
 8007652:	6812      	ldr	r2, [r2, #0]
 8007654:	430b      	orrs	r3, r1
 8007656:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	68db      	ldr	r3, [r3, #12]
 800765e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	695a      	ldr	r2, [r3, #20]
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	699b      	ldr	r3, [r3, #24]
 800766a:	431a      	orrs	r2, r3
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	430a      	orrs	r2, r1
 8007672:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	681a      	ldr	r2, [r3, #0]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f042 0201 	orr.w	r2, r2, #1
 8007682:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2200      	movs	r2, #0
 8007688:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2220      	movs	r2, #32
 800768e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2200      	movs	r2, #0
 8007696:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2200      	movs	r2, #0
 800769c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80076a0:	2300      	movs	r3, #0
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3710      	adds	r7, #16
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}
 80076aa:	bf00      	nop
 80076ac:	000186a0 	.word	0x000186a0
 80076b0:	001e847f 	.word	0x001e847f
 80076b4:	003d08ff 	.word	0x003d08ff
 80076b8:	431bde83 	.word	0x431bde83
 80076bc:	10624dd3 	.word	0x10624dd3

080076c0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b088      	sub	sp, #32
 80076c4:	af02      	add	r7, sp, #8
 80076c6:	60f8      	str	r0, [r7, #12]
 80076c8:	4608      	mov	r0, r1
 80076ca:	4611      	mov	r1, r2
 80076cc:	461a      	mov	r2, r3
 80076ce:	4603      	mov	r3, r0
 80076d0:	817b      	strh	r3, [r7, #10]
 80076d2:	460b      	mov	r3, r1
 80076d4:	813b      	strh	r3, [r7, #8]
 80076d6:	4613      	mov	r3, r2
 80076d8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80076da:	f7fe fc5b 	bl	8005f94 <HAL_GetTick>
 80076de:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076e6:	b2db      	uxtb	r3, r3
 80076e8:	2b20      	cmp	r3, #32
 80076ea:	f040 80d9 	bne.w	80078a0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	9300      	str	r3, [sp, #0]
 80076f2:	2319      	movs	r3, #25
 80076f4:	2201      	movs	r2, #1
 80076f6:	496d      	ldr	r1, [pc, #436]	; (80078ac <HAL_I2C_Mem_Write+0x1ec>)
 80076f8:	68f8      	ldr	r0, [r7, #12]
 80076fa:	f000 fc7b 	bl	8007ff4 <I2C_WaitOnFlagUntilTimeout>
 80076fe:	4603      	mov	r3, r0
 8007700:	2b00      	cmp	r3, #0
 8007702:	d001      	beq.n	8007708 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007704:	2302      	movs	r3, #2
 8007706:	e0cc      	b.n	80078a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800770e:	2b01      	cmp	r3, #1
 8007710:	d101      	bne.n	8007716 <HAL_I2C_Mem_Write+0x56>
 8007712:	2302      	movs	r3, #2
 8007714:	e0c5      	b.n	80078a2 <HAL_I2C_Mem_Write+0x1e2>
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2201      	movs	r2, #1
 800771a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f003 0301 	and.w	r3, r3, #1
 8007728:	2b01      	cmp	r3, #1
 800772a:	d007      	beq.n	800773c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	681a      	ldr	r2, [r3, #0]
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f042 0201 	orr.w	r2, r2, #1
 800773a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	681a      	ldr	r2, [r3, #0]
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800774a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2221      	movs	r2, #33	; 0x21
 8007750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	2240      	movs	r2, #64	; 0x40
 8007758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	2200      	movs	r2, #0
 8007760:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	6a3a      	ldr	r2, [r7, #32]
 8007766:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800776c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007772:	b29a      	uxth	r2, r3
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	4a4d      	ldr	r2, [pc, #308]	; (80078b0 <HAL_I2C_Mem_Write+0x1f0>)
 800777c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800777e:	88f8      	ldrh	r0, [r7, #6]
 8007780:	893a      	ldrh	r2, [r7, #8]
 8007782:	8979      	ldrh	r1, [r7, #10]
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	9301      	str	r3, [sp, #4]
 8007788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800778a:	9300      	str	r3, [sp, #0]
 800778c:	4603      	mov	r3, r0
 800778e:	68f8      	ldr	r0, [r7, #12]
 8007790:	f000 fab6 	bl	8007d00 <I2C_RequestMemoryWrite>
 8007794:	4603      	mov	r3, r0
 8007796:	2b00      	cmp	r3, #0
 8007798:	d052      	beq.n	8007840 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800779a:	2301      	movs	r3, #1
 800779c:	e081      	b.n	80078a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800779e:	697a      	ldr	r2, [r7, #20]
 80077a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80077a2:	68f8      	ldr	r0, [r7, #12]
 80077a4:	f000 fcfc 	bl	80081a0 <I2C_WaitOnTXEFlagUntilTimeout>
 80077a8:	4603      	mov	r3, r0
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d00d      	beq.n	80077ca <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077b2:	2b04      	cmp	r3, #4
 80077b4:	d107      	bne.n	80077c6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	681a      	ldr	r2, [r3, #0]
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077c4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80077c6:	2301      	movs	r3, #1
 80077c8:	e06b      	b.n	80078a2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ce:	781a      	ldrb	r2, [r3, #0]
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077da:	1c5a      	adds	r2, r3, #1
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077e4:	3b01      	subs	r3, #1
 80077e6:	b29a      	uxth	r2, r3
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077f0:	b29b      	uxth	r3, r3
 80077f2:	3b01      	subs	r3, #1
 80077f4:	b29a      	uxth	r2, r3
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	695b      	ldr	r3, [r3, #20]
 8007800:	f003 0304 	and.w	r3, r3, #4
 8007804:	2b04      	cmp	r3, #4
 8007806:	d11b      	bne.n	8007840 <HAL_I2C_Mem_Write+0x180>
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800780c:	2b00      	cmp	r3, #0
 800780e:	d017      	beq.n	8007840 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007814:	781a      	ldrb	r2, [r3, #0]
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007820:	1c5a      	adds	r2, r3, #1
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800782a:	3b01      	subs	r3, #1
 800782c:	b29a      	uxth	r2, r3
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007836:	b29b      	uxth	r3, r3
 8007838:	3b01      	subs	r3, #1
 800783a:	b29a      	uxth	r2, r3
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007844:	2b00      	cmp	r3, #0
 8007846:	d1aa      	bne.n	800779e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007848:	697a      	ldr	r2, [r7, #20]
 800784a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800784c:	68f8      	ldr	r0, [r7, #12]
 800784e:	f000 fce8 	bl	8008222 <I2C_WaitOnBTFFlagUntilTimeout>
 8007852:	4603      	mov	r3, r0
 8007854:	2b00      	cmp	r3, #0
 8007856:	d00d      	beq.n	8007874 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800785c:	2b04      	cmp	r3, #4
 800785e:	d107      	bne.n	8007870 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	681a      	ldr	r2, [r3, #0]
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800786e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007870:	2301      	movs	r3, #1
 8007872:	e016      	b.n	80078a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	681a      	ldr	r2, [r3, #0]
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007882:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	2220      	movs	r2, #32
 8007888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2200      	movs	r2, #0
 8007890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2200      	movs	r2, #0
 8007898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800789c:	2300      	movs	r3, #0
 800789e:	e000      	b.n	80078a2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80078a0:	2302      	movs	r3, #2
  }
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	3718      	adds	r7, #24
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}
 80078aa:	bf00      	nop
 80078ac:	00100002 	.word	0x00100002
 80078b0:	ffff0000 	.word	0xffff0000

080078b4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b08c      	sub	sp, #48	; 0x30
 80078b8:	af02      	add	r7, sp, #8
 80078ba:	60f8      	str	r0, [r7, #12]
 80078bc:	4608      	mov	r0, r1
 80078be:	4611      	mov	r1, r2
 80078c0:	461a      	mov	r2, r3
 80078c2:	4603      	mov	r3, r0
 80078c4:	817b      	strh	r3, [r7, #10]
 80078c6:	460b      	mov	r3, r1
 80078c8:	813b      	strh	r3, [r7, #8]
 80078ca:	4613      	mov	r3, r2
 80078cc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80078ce:	f7fe fb61 	bl	8005f94 <HAL_GetTick>
 80078d2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078da:	b2db      	uxtb	r3, r3
 80078dc:	2b20      	cmp	r3, #32
 80078de:	f040 8208 	bne.w	8007cf2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80078e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e4:	9300      	str	r3, [sp, #0]
 80078e6:	2319      	movs	r3, #25
 80078e8:	2201      	movs	r2, #1
 80078ea:	497b      	ldr	r1, [pc, #492]	; (8007ad8 <HAL_I2C_Mem_Read+0x224>)
 80078ec:	68f8      	ldr	r0, [r7, #12]
 80078ee:	f000 fb81 	bl	8007ff4 <I2C_WaitOnFlagUntilTimeout>
 80078f2:	4603      	mov	r3, r0
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d001      	beq.n	80078fc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80078f8:	2302      	movs	r3, #2
 80078fa:	e1fb      	b.n	8007cf4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007902:	2b01      	cmp	r3, #1
 8007904:	d101      	bne.n	800790a <HAL_I2C_Mem_Read+0x56>
 8007906:	2302      	movs	r3, #2
 8007908:	e1f4      	b.n	8007cf4 <HAL_I2C_Mem_Read+0x440>
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	2201      	movs	r2, #1
 800790e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f003 0301 	and.w	r3, r3, #1
 800791c:	2b01      	cmp	r3, #1
 800791e:	d007      	beq.n	8007930 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	681a      	ldr	r2, [r3, #0]
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f042 0201 	orr.w	r2, r2, #1
 800792e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	681a      	ldr	r2, [r3, #0]
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800793e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	2222      	movs	r2, #34	; 0x22
 8007944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	2240      	movs	r2, #64	; 0x40
 800794c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	2200      	movs	r2, #0
 8007954:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800795a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007960:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007966:	b29a      	uxth	r2, r3
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	4a5b      	ldr	r2, [pc, #364]	; (8007adc <HAL_I2C_Mem_Read+0x228>)
 8007970:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007972:	88f8      	ldrh	r0, [r7, #6]
 8007974:	893a      	ldrh	r2, [r7, #8]
 8007976:	8979      	ldrh	r1, [r7, #10]
 8007978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800797a:	9301      	str	r3, [sp, #4]
 800797c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800797e:	9300      	str	r3, [sp, #0]
 8007980:	4603      	mov	r3, r0
 8007982:	68f8      	ldr	r0, [r7, #12]
 8007984:	f000 fa50 	bl	8007e28 <I2C_RequestMemoryRead>
 8007988:	4603      	mov	r3, r0
 800798a:	2b00      	cmp	r3, #0
 800798c:	d001      	beq.n	8007992 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800798e:	2301      	movs	r3, #1
 8007990:	e1b0      	b.n	8007cf4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007996:	2b00      	cmp	r3, #0
 8007998:	d113      	bne.n	80079c2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800799a:	2300      	movs	r3, #0
 800799c:	623b      	str	r3, [r7, #32]
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	695b      	ldr	r3, [r3, #20]
 80079a4:	623b      	str	r3, [r7, #32]
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	699b      	ldr	r3, [r3, #24]
 80079ac:	623b      	str	r3, [r7, #32]
 80079ae:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	681a      	ldr	r2, [r3, #0]
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80079be:	601a      	str	r2, [r3, #0]
 80079c0:	e184      	b.n	8007ccc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	d11b      	bne.n	8007a02 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	681a      	ldr	r2, [r3, #0]
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80079da:	2300      	movs	r3, #0
 80079dc:	61fb      	str	r3, [r7, #28]
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	695b      	ldr	r3, [r3, #20]
 80079e4:	61fb      	str	r3, [r7, #28]
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	699b      	ldr	r3, [r3, #24]
 80079ec:	61fb      	str	r3, [r7, #28]
 80079ee:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	681a      	ldr	r2, [r3, #0]
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80079fe:	601a      	str	r2, [r3, #0]
 8007a00:	e164      	b.n	8007ccc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a06:	2b02      	cmp	r3, #2
 8007a08:	d11b      	bne.n	8007a42 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	681a      	ldr	r2, [r3, #0]
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a18:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	681a      	ldr	r2, [r3, #0]
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a28:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	61bb      	str	r3, [r7, #24]
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	695b      	ldr	r3, [r3, #20]
 8007a34:	61bb      	str	r3, [r7, #24]
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	699b      	ldr	r3, [r3, #24]
 8007a3c:	61bb      	str	r3, [r7, #24]
 8007a3e:	69bb      	ldr	r3, [r7, #24]
 8007a40:	e144      	b.n	8007ccc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a42:	2300      	movs	r3, #0
 8007a44:	617b      	str	r3, [r7, #20]
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	695b      	ldr	r3, [r3, #20]
 8007a4c:	617b      	str	r3, [r7, #20]
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	699b      	ldr	r3, [r3, #24]
 8007a54:	617b      	str	r3, [r7, #20]
 8007a56:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007a58:	e138      	b.n	8007ccc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a5e:	2b03      	cmp	r3, #3
 8007a60:	f200 80f1 	bhi.w	8007c46 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a68:	2b01      	cmp	r3, #1
 8007a6a:	d123      	bne.n	8007ab4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a6e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007a70:	68f8      	ldr	r0, [r7, #12]
 8007a72:	f000 fc17 	bl	80082a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007a76:	4603      	mov	r3, r0
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d001      	beq.n	8007a80 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	e139      	b.n	8007cf4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	691a      	ldr	r2, [r3, #16]
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a8a:	b2d2      	uxtb	r2, r2
 8007a8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a92:	1c5a      	adds	r2, r3, #1
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a9c:	3b01      	subs	r3, #1
 8007a9e:	b29a      	uxth	r2, r3
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007aa8:	b29b      	uxth	r3, r3
 8007aaa:	3b01      	subs	r3, #1
 8007aac:	b29a      	uxth	r2, r3
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007ab2:	e10b      	b.n	8007ccc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ab8:	2b02      	cmp	r3, #2
 8007aba:	d14e      	bne.n	8007b5a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007abe:	9300      	str	r3, [sp, #0]
 8007ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	4906      	ldr	r1, [pc, #24]	; (8007ae0 <HAL_I2C_Mem_Read+0x22c>)
 8007ac6:	68f8      	ldr	r0, [r7, #12]
 8007ac8:	f000 fa94 	bl	8007ff4 <I2C_WaitOnFlagUntilTimeout>
 8007acc:	4603      	mov	r3, r0
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d008      	beq.n	8007ae4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	e10e      	b.n	8007cf4 <HAL_I2C_Mem_Read+0x440>
 8007ad6:	bf00      	nop
 8007ad8:	00100002 	.word	0x00100002
 8007adc:	ffff0000 	.word	0xffff0000
 8007ae0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	681a      	ldr	r2, [r3, #0]
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007af2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	691a      	ldr	r2, [r3, #16]
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007afe:	b2d2      	uxtb	r2, r2
 8007b00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b06:	1c5a      	adds	r2, r3, #1
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b10:	3b01      	subs	r3, #1
 8007b12:	b29a      	uxth	r2, r3
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b1c:	b29b      	uxth	r3, r3
 8007b1e:	3b01      	subs	r3, #1
 8007b20:	b29a      	uxth	r2, r3
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	691a      	ldr	r2, [r3, #16]
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b30:	b2d2      	uxtb	r2, r2
 8007b32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b38:	1c5a      	adds	r2, r3, #1
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b42:	3b01      	subs	r3, #1
 8007b44:	b29a      	uxth	r2, r3
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b4e:	b29b      	uxth	r3, r3
 8007b50:	3b01      	subs	r3, #1
 8007b52:	b29a      	uxth	r2, r3
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007b58:	e0b8      	b.n	8007ccc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b5c:	9300      	str	r3, [sp, #0]
 8007b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b60:	2200      	movs	r2, #0
 8007b62:	4966      	ldr	r1, [pc, #408]	; (8007cfc <HAL_I2C_Mem_Read+0x448>)
 8007b64:	68f8      	ldr	r0, [r7, #12]
 8007b66:	f000 fa45 	bl	8007ff4 <I2C_WaitOnFlagUntilTimeout>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d001      	beq.n	8007b74 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007b70:	2301      	movs	r3, #1
 8007b72:	e0bf      	b.n	8007cf4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	681a      	ldr	r2, [r3, #0]
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	691a      	ldr	r2, [r3, #16]
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b8e:	b2d2      	uxtb	r2, r2
 8007b90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b96:	1c5a      	adds	r2, r3, #1
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ba0:	3b01      	subs	r3, #1
 8007ba2:	b29a      	uxth	r2, r3
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bac:	b29b      	uxth	r3, r3
 8007bae:	3b01      	subs	r3, #1
 8007bb0:	b29a      	uxth	r2, r3
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb8:	9300      	str	r3, [sp, #0]
 8007bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	494f      	ldr	r1, [pc, #316]	; (8007cfc <HAL_I2C_Mem_Read+0x448>)
 8007bc0:	68f8      	ldr	r0, [r7, #12]
 8007bc2:	f000 fa17 	bl	8007ff4 <I2C_WaitOnFlagUntilTimeout>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d001      	beq.n	8007bd0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007bcc:	2301      	movs	r3, #1
 8007bce:	e091      	b.n	8007cf4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	681a      	ldr	r2, [r3, #0]
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007bde:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	691a      	ldr	r2, [r3, #16]
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bea:	b2d2      	uxtb	r2, r2
 8007bec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf2:	1c5a      	adds	r2, r3, #1
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bfc:	3b01      	subs	r3, #1
 8007bfe:	b29a      	uxth	r2, r3
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c08:	b29b      	uxth	r3, r3
 8007c0a:	3b01      	subs	r3, #1
 8007c0c:	b29a      	uxth	r2, r3
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	691a      	ldr	r2, [r3, #16]
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c1c:	b2d2      	uxtb	r2, r2
 8007c1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c24:	1c5a      	adds	r2, r3, #1
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c2e:	3b01      	subs	r3, #1
 8007c30:	b29a      	uxth	r2, r3
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c3a:	b29b      	uxth	r3, r3
 8007c3c:	3b01      	subs	r3, #1
 8007c3e:	b29a      	uxth	r2, r3
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007c44:	e042      	b.n	8007ccc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c48:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007c4a:	68f8      	ldr	r0, [r7, #12]
 8007c4c:	f000 fb2a 	bl	80082a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007c50:	4603      	mov	r3, r0
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d001      	beq.n	8007c5a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007c56:	2301      	movs	r3, #1
 8007c58:	e04c      	b.n	8007cf4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	691a      	ldr	r2, [r3, #16]
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c64:	b2d2      	uxtb	r2, r2
 8007c66:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c6c:	1c5a      	adds	r2, r3, #1
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c76:	3b01      	subs	r3, #1
 8007c78:	b29a      	uxth	r2, r3
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c82:	b29b      	uxth	r3, r3
 8007c84:	3b01      	subs	r3, #1
 8007c86:	b29a      	uxth	r2, r3
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	695b      	ldr	r3, [r3, #20]
 8007c92:	f003 0304 	and.w	r3, r3, #4
 8007c96:	2b04      	cmp	r3, #4
 8007c98:	d118      	bne.n	8007ccc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	691a      	ldr	r2, [r3, #16]
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ca4:	b2d2      	uxtb	r2, r2
 8007ca6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cac:	1c5a      	adds	r2, r3, #1
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cb6:	3b01      	subs	r3, #1
 8007cb8:	b29a      	uxth	r2, r3
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cc2:	b29b      	uxth	r3, r3
 8007cc4:	3b01      	subs	r3, #1
 8007cc6:	b29a      	uxth	r2, r3
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	f47f aec2 	bne.w	8007a5a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	2220      	movs	r2, #32
 8007cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	e000      	b.n	8007cf4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007cf2:	2302      	movs	r3, #2
  }
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	3728      	adds	r7, #40	; 0x28
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}
 8007cfc:	00010004 	.word	0x00010004

08007d00 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b088      	sub	sp, #32
 8007d04:	af02      	add	r7, sp, #8
 8007d06:	60f8      	str	r0, [r7, #12]
 8007d08:	4608      	mov	r0, r1
 8007d0a:	4611      	mov	r1, r2
 8007d0c:	461a      	mov	r2, r3
 8007d0e:	4603      	mov	r3, r0
 8007d10:	817b      	strh	r3, [r7, #10]
 8007d12:	460b      	mov	r3, r1
 8007d14:	813b      	strh	r3, [r7, #8]
 8007d16:	4613      	mov	r3, r2
 8007d18:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	681a      	ldr	r2, [r3, #0]
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007d28:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d2c:	9300      	str	r3, [sp, #0]
 8007d2e:	6a3b      	ldr	r3, [r7, #32]
 8007d30:	2200      	movs	r2, #0
 8007d32:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007d36:	68f8      	ldr	r0, [r7, #12]
 8007d38:	f000 f95c 	bl	8007ff4 <I2C_WaitOnFlagUntilTimeout>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d00c      	beq.n	8007d5c <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d003      	beq.n	8007d58 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d56:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007d58:	2303      	movs	r3, #3
 8007d5a:	e05f      	b.n	8007e1c <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007d5c:	897b      	ldrh	r3, [r7, #10]
 8007d5e:	b2db      	uxtb	r3, r3
 8007d60:	461a      	mov	r2, r3
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007d6a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d6e:	6a3a      	ldr	r2, [r7, #32]
 8007d70:	492c      	ldr	r1, [pc, #176]	; (8007e24 <I2C_RequestMemoryWrite+0x124>)
 8007d72:	68f8      	ldr	r0, [r7, #12]
 8007d74:	f000 f995 	bl	80080a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d001      	beq.n	8007d82 <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 8007d7e:	2301      	movs	r3, #1
 8007d80:	e04c      	b.n	8007e1c <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d82:	2300      	movs	r3, #0
 8007d84:	617b      	str	r3, [r7, #20]
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	695b      	ldr	r3, [r3, #20]
 8007d8c:	617b      	str	r3, [r7, #20]
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	699b      	ldr	r3, [r3, #24]
 8007d94:	617b      	str	r3, [r7, #20]
 8007d96:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d9a:	6a39      	ldr	r1, [r7, #32]
 8007d9c:	68f8      	ldr	r0, [r7, #12]
 8007d9e:	f000 f9ff 	bl	80081a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007da2:	4603      	mov	r3, r0
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d00d      	beq.n	8007dc4 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dac:	2b04      	cmp	r3, #4
 8007dae:	d107      	bne.n	8007dc0 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	681a      	ldr	r2, [r3, #0]
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007dbe:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	e02b      	b.n	8007e1c <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007dc4:	88fb      	ldrh	r3, [r7, #6]
 8007dc6:	2b01      	cmp	r3, #1
 8007dc8:	d105      	bne.n	8007dd6 <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007dca:	893b      	ldrh	r3, [r7, #8]
 8007dcc:	b2da      	uxtb	r2, r3
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	611a      	str	r2, [r3, #16]
 8007dd4:	e021      	b.n	8007e1a <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007dd6:	893b      	ldrh	r3, [r7, #8]
 8007dd8:	0a1b      	lsrs	r3, r3, #8
 8007dda:	b29b      	uxth	r3, r3
 8007ddc:	b2da      	uxtb	r2, r3
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007de4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007de6:	6a39      	ldr	r1, [r7, #32]
 8007de8:	68f8      	ldr	r0, [r7, #12]
 8007dea:	f000 f9d9 	bl	80081a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007dee:	4603      	mov	r3, r0
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d00d      	beq.n	8007e10 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007df8:	2b04      	cmp	r3, #4
 8007dfa:	d107      	bne.n	8007e0c <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	681a      	ldr	r2, [r3, #0]
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e0a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	e005      	b.n	8007e1c <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007e10:	893b      	ldrh	r3, [r7, #8]
 8007e12:	b2da      	uxtb	r2, r3
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007e1a:	2300      	movs	r3, #0
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	3718      	adds	r7, #24
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}
 8007e24:	00010002 	.word	0x00010002

08007e28 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b088      	sub	sp, #32
 8007e2c:	af02      	add	r7, sp, #8
 8007e2e:	60f8      	str	r0, [r7, #12]
 8007e30:	4608      	mov	r0, r1
 8007e32:	4611      	mov	r1, r2
 8007e34:	461a      	mov	r2, r3
 8007e36:	4603      	mov	r3, r0
 8007e38:	817b      	strh	r3, [r7, #10]
 8007e3a:	460b      	mov	r3, r1
 8007e3c:	813b      	strh	r3, [r7, #8]
 8007e3e:	4613      	mov	r3, r2
 8007e40:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	681a      	ldr	r2, [r3, #0]
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007e50:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	681a      	ldr	r2, [r3, #0]
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e60:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e64:	9300      	str	r3, [sp, #0]
 8007e66:	6a3b      	ldr	r3, [r7, #32]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007e6e:	68f8      	ldr	r0, [r7, #12]
 8007e70:	f000 f8c0 	bl	8007ff4 <I2C_WaitOnFlagUntilTimeout>
 8007e74:	4603      	mov	r3, r0
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d00c      	beq.n	8007e94 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d003      	beq.n	8007e90 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e8e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007e90:	2303      	movs	r3, #3
 8007e92:	e0a9      	b.n	8007fe8 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007e94:	897b      	ldrh	r3, [r7, #10]
 8007e96:	b2db      	uxtb	r3, r3
 8007e98:	461a      	mov	r2, r3
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007ea2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea6:	6a3a      	ldr	r2, [r7, #32]
 8007ea8:	4951      	ldr	r1, [pc, #324]	; (8007ff0 <I2C_RequestMemoryRead+0x1c8>)
 8007eaa:	68f8      	ldr	r0, [r7, #12]
 8007eac:	f000 f8f9 	bl	80080a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d001      	beq.n	8007eba <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	e096      	b.n	8007fe8 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007eba:	2300      	movs	r3, #0
 8007ebc:	617b      	str	r3, [r7, #20]
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	695b      	ldr	r3, [r3, #20]
 8007ec4:	617b      	str	r3, [r7, #20]
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	699b      	ldr	r3, [r3, #24]
 8007ecc:	617b      	str	r3, [r7, #20]
 8007ece:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ed0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ed2:	6a39      	ldr	r1, [r7, #32]
 8007ed4:	68f8      	ldr	r0, [r7, #12]
 8007ed6:	f000 f963 	bl	80081a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007eda:	4603      	mov	r3, r0
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d00d      	beq.n	8007efc <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ee4:	2b04      	cmp	r3, #4
 8007ee6:	d107      	bne.n	8007ef8 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	681a      	ldr	r2, [r3, #0]
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ef6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007ef8:	2301      	movs	r3, #1
 8007efa:	e075      	b.n	8007fe8 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007efc:	88fb      	ldrh	r3, [r7, #6]
 8007efe:	2b01      	cmp	r3, #1
 8007f00:	d105      	bne.n	8007f0e <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007f02:	893b      	ldrh	r3, [r7, #8]
 8007f04:	b2da      	uxtb	r2, r3
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	611a      	str	r2, [r3, #16]
 8007f0c:	e021      	b.n	8007f52 <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007f0e:	893b      	ldrh	r3, [r7, #8]
 8007f10:	0a1b      	lsrs	r3, r3, #8
 8007f12:	b29b      	uxth	r3, r3
 8007f14:	b2da      	uxtb	r2, r3
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f1e:	6a39      	ldr	r1, [r7, #32]
 8007f20:	68f8      	ldr	r0, [r7, #12]
 8007f22:	f000 f93d 	bl	80081a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007f26:	4603      	mov	r3, r0
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d00d      	beq.n	8007f48 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f30:	2b04      	cmp	r3, #4
 8007f32:	d107      	bne.n	8007f44 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	681a      	ldr	r2, [r3, #0]
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f42:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007f44:	2301      	movs	r3, #1
 8007f46:	e04f      	b.n	8007fe8 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007f48:	893b      	ldrh	r3, [r7, #8]
 8007f4a:	b2da      	uxtb	r2, r3
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f54:	6a39      	ldr	r1, [r7, #32]
 8007f56:	68f8      	ldr	r0, [r7, #12]
 8007f58:	f000 f922 	bl	80081a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d00d      	beq.n	8007f7e <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f66:	2b04      	cmp	r3, #4
 8007f68:	d107      	bne.n	8007f7a <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	681a      	ldr	r2, [r3, #0]
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f78:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	e034      	b.n	8007fe8 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	681a      	ldr	r2, [r3, #0]
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f8c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f90:	9300      	str	r3, [sp, #0]
 8007f92:	6a3b      	ldr	r3, [r7, #32]
 8007f94:	2200      	movs	r2, #0
 8007f96:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007f9a:	68f8      	ldr	r0, [r7, #12]
 8007f9c:	f000 f82a 	bl	8007ff4 <I2C_WaitOnFlagUntilTimeout>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d00c      	beq.n	8007fc0 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d003      	beq.n	8007fbc <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007fba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007fbc:	2303      	movs	r3, #3
 8007fbe:	e013      	b.n	8007fe8 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007fc0:	897b      	ldrh	r3, [r7, #10]
 8007fc2:	b2db      	uxtb	r3, r3
 8007fc4:	f043 0301 	orr.w	r3, r3, #1
 8007fc8:	b2da      	uxtb	r2, r3
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd2:	6a3a      	ldr	r2, [r7, #32]
 8007fd4:	4906      	ldr	r1, [pc, #24]	; (8007ff0 <I2C_RequestMemoryRead+0x1c8>)
 8007fd6:	68f8      	ldr	r0, [r7, #12]
 8007fd8:	f000 f863 	bl	80080a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d001      	beq.n	8007fe6 <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	e000      	b.n	8007fe8 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8007fe6:	2300      	movs	r3, #0
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	3718      	adds	r7, #24
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}
 8007ff0:	00010002 	.word	0x00010002

08007ff4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b084      	sub	sp, #16
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	60f8      	str	r0, [r7, #12]
 8007ffc:	60b9      	str	r1, [r7, #8]
 8007ffe:	603b      	str	r3, [r7, #0]
 8008000:	4613      	mov	r3, r2
 8008002:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008004:	e025      	b.n	8008052 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800800c:	d021      	beq.n	8008052 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800800e:	f7fd ffc1 	bl	8005f94 <HAL_GetTick>
 8008012:	4602      	mov	r2, r0
 8008014:	69bb      	ldr	r3, [r7, #24]
 8008016:	1ad3      	subs	r3, r2, r3
 8008018:	683a      	ldr	r2, [r7, #0]
 800801a:	429a      	cmp	r2, r3
 800801c:	d302      	bcc.n	8008024 <I2C_WaitOnFlagUntilTimeout+0x30>
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d116      	bne.n	8008052 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	2200      	movs	r2, #0
 8008028:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	2220      	movs	r2, #32
 800802e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	2200      	movs	r2, #0
 8008036:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800803e:	f043 0220 	orr.w	r2, r3, #32
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	2200      	movs	r2, #0
 800804a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800804e:	2301      	movs	r3, #1
 8008050:	e023      	b.n	800809a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	0c1b      	lsrs	r3, r3, #16
 8008056:	b2db      	uxtb	r3, r3
 8008058:	2b01      	cmp	r3, #1
 800805a:	d10d      	bne.n	8008078 <I2C_WaitOnFlagUntilTimeout+0x84>
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	695b      	ldr	r3, [r3, #20]
 8008062:	43da      	mvns	r2, r3
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	4013      	ands	r3, r2
 8008068:	b29b      	uxth	r3, r3
 800806a:	2b00      	cmp	r3, #0
 800806c:	bf0c      	ite	eq
 800806e:	2301      	moveq	r3, #1
 8008070:	2300      	movne	r3, #0
 8008072:	b2db      	uxtb	r3, r3
 8008074:	461a      	mov	r2, r3
 8008076:	e00c      	b.n	8008092 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	699b      	ldr	r3, [r3, #24]
 800807e:	43da      	mvns	r2, r3
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	4013      	ands	r3, r2
 8008084:	b29b      	uxth	r3, r3
 8008086:	2b00      	cmp	r3, #0
 8008088:	bf0c      	ite	eq
 800808a:	2301      	moveq	r3, #1
 800808c:	2300      	movne	r3, #0
 800808e:	b2db      	uxtb	r3, r3
 8008090:	461a      	mov	r2, r3
 8008092:	79fb      	ldrb	r3, [r7, #7]
 8008094:	429a      	cmp	r2, r3
 8008096:	d0b6      	beq.n	8008006 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008098:	2300      	movs	r3, #0
}
 800809a:	4618      	mov	r0, r3
 800809c:	3710      	adds	r7, #16
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}

080080a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80080a2:	b580      	push	{r7, lr}
 80080a4:	b084      	sub	sp, #16
 80080a6:	af00      	add	r7, sp, #0
 80080a8:	60f8      	str	r0, [r7, #12]
 80080aa:	60b9      	str	r1, [r7, #8]
 80080ac:	607a      	str	r2, [r7, #4]
 80080ae:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80080b0:	e051      	b.n	8008156 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	695b      	ldr	r3, [r3, #20]
 80080b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80080bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080c0:	d123      	bne.n	800810a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	681a      	ldr	r2, [r3, #0]
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80080d0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80080da:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	2200      	movs	r2, #0
 80080e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	2220      	movs	r2, #32
 80080e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	2200      	movs	r2, #0
 80080ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080f6:	f043 0204 	orr.w	r2, r3, #4
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	2200      	movs	r2, #0
 8008102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008106:	2301      	movs	r3, #1
 8008108:	e046      	b.n	8008198 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008110:	d021      	beq.n	8008156 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008112:	f7fd ff3f 	bl	8005f94 <HAL_GetTick>
 8008116:	4602      	mov	r2, r0
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	1ad3      	subs	r3, r2, r3
 800811c:	687a      	ldr	r2, [r7, #4]
 800811e:	429a      	cmp	r2, r3
 8008120:	d302      	bcc.n	8008128 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d116      	bne.n	8008156 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	2200      	movs	r2, #0
 800812c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	2220      	movs	r2, #32
 8008132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	2200      	movs	r2, #0
 800813a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008142:	f043 0220 	orr.w	r2, r3, #32
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	2200      	movs	r2, #0
 800814e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008152:	2301      	movs	r3, #1
 8008154:	e020      	b.n	8008198 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	0c1b      	lsrs	r3, r3, #16
 800815a:	b2db      	uxtb	r3, r3
 800815c:	2b01      	cmp	r3, #1
 800815e:	d10c      	bne.n	800817a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	695b      	ldr	r3, [r3, #20]
 8008166:	43da      	mvns	r2, r3
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	4013      	ands	r3, r2
 800816c:	b29b      	uxth	r3, r3
 800816e:	2b00      	cmp	r3, #0
 8008170:	bf14      	ite	ne
 8008172:	2301      	movne	r3, #1
 8008174:	2300      	moveq	r3, #0
 8008176:	b2db      	uxtb	r3, r3
 8008178:	e00b      	b.n	8008192 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	699b      	ldr	r3, [r3, #24]
 8008180:	43da      	mvns	r2, r3
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	4013      	ands	r3, r2
 8008186:	b29b      	uxth	r3, r3
 8008188:	2b00      	cmp	r3, #0
 800818a:	bf14      	ite	ne
 800818c:	2301      	movne	r3, #1
 800818e:	2300      	moveq	r3, #0
 8008190:	b2db      	uxtb	r3, r3
 8008192:	2b00      	cmp	r3, #0
 8008194:	d18d      	bne.n	80080b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008196:	2300      	movs	r3, #0
}
 8008198:	4618      	mov	r0, r3
 800819a:	3710      	adds	r7, #16
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}

080081a0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b084      	sub	sp, #16
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	60f8      	str	r0, [r7, #12]
 80081a8:	60b9      	str	r1, [r7, #8]
 80081aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80081ac:	e02d      	b.n	800820a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80081ae:	68f8      	ldr	r0, [r7, #12]
 80081b0:	f000 f8ce 	bl	8008350 <I2C_IsAcknowledgeFailed>
 80081b4:	4603      	mov	r3, r0
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d001      	beq.n	80081be <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80081ba:	2301      	movs	r3, #1
 80081bc:	e02d      	b.n	800821a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80081c4:	d021      	beq.n	800820a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081c6:	f7fd fee5 	bl	8005f94 <HAL_GetTick>
 80081ca:	4602      	mov	r2, r0
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	1ad3      	subs	r3, r2, r3
 80081d0:	68ba      	ldr	r2, [r7, #8]
 80081d2:	429a      	cmp	r2, r3
 80081d4:	d302      	bcc.n	80081dc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d116      	bne.n	800820a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	2200      	movs	r2, #0
 80081e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	2220      	movs	r2, #32
 80081e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	2200      	movs	r2, #0
 80081ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081f6:	f043 0220 	orr.w	r2, r3, #32
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	2200      	movs	r2, #0
 8008202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008206:	2301      	movs	r3, #1
 8008208:	e007      	b.n	800821a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	695b      	ldr	r3, [r3, #20]
 8008210:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008214:	2b80      	cmp	r3, #128	; 0x80
 8008216:	d1ca      	bne.n	80081ae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008218:	2300      	movs	r3, #0
}
 800821a:	4618      	mov	r0, r3
 800821c:	3710      	adds	r7, #16
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}

08008222 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008222:	b580      	push	{r7, lr}
 8008224:	b084      	sub	sp, #16
 8008226:	af00      	add	r7, sp, #0
 8008228:	60f8      	str	r0, [r7, #12]
 800822a:	60b9      	str	r1, [r7, #8]
 800822c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800822e:	e02d      	b.n	800828c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008230:	68f8      	ldr	r0, [r7, #12]
 8008232:	f000 f88d 	bl	8008350 <I2C_IsAcknowledgeFailed>
 8008236:	4603      	mov	r3, r0
 8008238:	2b00      	cmp	r3, #0
 800823a:	d001      	beq.n	8008240 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800823c:	2301      	movs	r3, #1
 800823e:	e02d      	b.n	800829c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008246:	d021      	beq.n	800828c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008248:	f7fd fea4 	bl	8005f94 <HAL_GetTick>
 800824c:	4602      	mov	r2, r0
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	1ad3      	subs	r3, r2, r3
 8008252:	68ba      	ldr	r2, [r7, #8]
 8008254:	429a      	cmp	r2, r3
 8008256:	d302      	bcc.n	800825e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d116      	bne.n	800828c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	2200      	movs	r2, #0
 8008262:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	2220      	movs	r2, #32
 8008268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	2200      	movs	r2, #0
 8008270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008278:	f043 0220 	orr.w	r2, r3, #32
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	2200      	movs	r2, #0
 8008284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008288:	2301      	movs	r3, #1
 800828a:	e007      	b.n	800829c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	695b      	ldr	r3, [r3, #20]
 8008292:	f003 0304 	and.w	r3, r3, #4
 8008296:	2b04      	cmp	r3, #4
 8008298:	d1ca      	bne.n	8008230 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800829a:	2300      	movs	r3, #0
}
 800829c:	4618      	mov	r0, r3
 800829e:	3710      	adds	r7, #16
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}

080082a4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b084      	sub	sp, #16
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	60f8      	str	r0, [r7, #12]
 80082ac:	60b9      	str	r1, [r7, #8]
 80082ae:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80082b0:	e042      	b.n	8008338 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	695b      	ldr	r3, [r3, #20]
 80082b8:	f003 0310 	and.w	r3, r3, #16
 80082bc:	2b10      	cmp	r3, #16
 80082be:	d119      	bne.n	80082f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f06f 0210 	mvn.w	r2, #16
 80082c8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	2200      	movs	r2, #0
 80082ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	2220      	movs	r2, #32
 80082d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	2200      	movs	r2, #0
 80082dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	2200      	movs	r2, #0
 80082ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80082f0:	2301      	movs	r3, #1
 80082f2:	e029      	b.n	8008348 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082f4:	f7fd fe4e 	bl	8005f94 <HAL_GetTick>
 80082f8:	4602      	mov	r2, r0
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	1ad3      	subs	r3, r2, r3
 80082fe:	68ba      	ldr	r2, [r7, #8]
 8008300:	429a      	cmp	r2, r3
 8008302:	d302      	bcc.n	800830a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d116      	bne.n	8008338 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	2200      	movs	r2, #0
 800830e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	2220      	movs	r2, #32
 8008314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	2200      	movs	r2, #0
 800831c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008324:	f043 0220 	orr.w	r2, r3, #32
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	2200      	movs	r2, #0
 8008330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008334:	2301      	movs	r3, #1
 8008336:	e007      	b.n	8008348 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	695b      	ldr	r3, [r3, #20]
 800833e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008342:	2b40      	cmp	r3, #64	; 0x40
 8008344:	d1b5      	bne.n	80082b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008346:	2300      	movs	r3, #0
}
 8008348:	4618      	mov	r0, r3
 800834a:	3710      	adds	r7, #16
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}

08008350 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008350:	b480      	push	{r7}
 8008352:	b083      	sub	sp, #12
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	695b      	ldr	r3, [r3, #20]
 800835e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008362:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008366:	d11b      	bne.n	80083a0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008370:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2200      	movs	r2, #0
 8008376:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2220      	movs	r2, #32
 800837c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2200      	movs	r2, #0
 8008384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800838c:	f043 0204 	orr.w	r2, r3, #4
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2200      	movs	r2, #0
 8008398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800839c:	2301      	movs	r3, #1
 800839e:	e000      	b.n	80083a2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80083a0:	2300      	movs	r3, #0
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	370c      	adds	r7, #12
 80083a6:	46bd      	mov	sp, r7
 80083a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ac:	4770      	bx	lr
	...

080083b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b086      	sub	sp, #24
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d101      	bne.n	80083c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80083be:	2301      	movs	r3, #1
 80083c0:	e25b      	b.n	800887a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f003 0301 	and.w	r3, r3, #1
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d075      	beq.n	80084ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80083ce:	4ba3      	ldr	r3, [pc, #652]	; (800865c <HAL_RCC_OscConfig+0x2ac>)
 80083d0:	689b      	ldr	r3, [r3, #8]
 80083d2:	f003 030c 	and.w	r3, r3, #12
 80083d6:	2b04      	cmp	r3, #4
 80083d8:	d00c      	beq.n	80083f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80083da:	4ba0      	ldr	r3, [pc, #640]	; (800865c <HAL_RCC_OscConfig+0x2ac>)
 80083dc:	689b      	ldr	r3, [r3, #8]
 80083de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80083e2:	2b08      	cmp	r3, #8
 80083e4:	d112      	bne.n	800840c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80083e6:	4b9d      	ldr	r3, [pc, #628]	; (800865c <HAL_RCC_OscConfig+0x2ac>)
 80083e8:	685b      	ldr	r3, [r3, #4]
 80083ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80083ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80083f2:	d10b      	bne.n	800840c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80083f4:	4b99      	ldr	r3, [pc, #612]	; (800865c <HAL_RCC_OscConfig+0x2ac>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d05b      	beq.n	80084b8 <HAL_RCC_OscConfig+0x108>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	685b      	ldr	r3, [r3, #4]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d157      	bne.n	80084b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008408:	2301      	movs	r3, #1
 800840a:	e236      	b.n	800887a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	685b      	ldr	r3, [r3, #4]
 8008410:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008414:	d106      	bne.n	8008424 <HAL_RCC_OscConfig+0x74>
 8008416:	4b91      	ldr	r3, [pc, #580]	; (800865c <HAL_RCC_OscConfig+0x2ac>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	4a90      	ldr	r2, [pc, #576]	; (800865c <HAL_RCC_OscConfig+0x2ac>)
 800841c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008420:	6013      	str	r3, [r2, #0]
 8008422:	e01d      	b.n	8008460 <HAL_RCC_OscConfig+0xb0>
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800842c:	d10c      	bne.n	8008448 <HAL_RCC_OscConfig+0x98>
 800842e:	4b8b      	ldr	r3, [pc, #556]	; (800865c <HAL_RCC_OscConfig+0x2ac>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	4a8a      	ldr	r2, [pc, #552]	; (800865c <HAL_RCC_OscConfig+0x2ac>)
 8008434:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008438:	6013      	str	r3, [r2, #0]
 800843a:	4b88      	ldr	r3, [pc, #544]	; (800865c <HAL_RCC_OscConfig+0x2ac>)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	4a87      	ldr	r2, [pc, #540]	; (800865c <HAL_RCC_OscConfig+0x2ac>)
 8008440:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008444:	6013      	str	r3, [r2, #0]
 8008446:	e00b      	b.n	8008460 <HAL_RCC_OscConfig+0xb0>
 8008448:	4b84      	ldr	r3, [pc, #528]	; (800865c <HAL_RCC_OscConfig+0x2ac>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	4a83      	ldr	r2, [pc, #524]	; (800865c <HAL_RCC_OscConfig+0x2ac>)
 800844e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008452:	6013      	str	r3, [r2, #0]
 8008454:	4b81      	ldr	r3, [pc, #516]	; (800865c <HAL_RCC_OscConfig+0x2ac>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4a80      	ldr	r2, [pc, #512]	; (800865c <HAL_RCC_OscConfig+0x2ac>)
 800845a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800845e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	685b      	ldr	r3, [r3, #4]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d013      	beq.n	8008490 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008468:	f7fd fd94 	bl	8005f94 <HAL_GetTick>
 800846c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800846e:	e008      	b.n	8008482 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008470:	f7fd fd90 	bl	8005f94 <HAL_GetTick>
 8008474:	4602      	mov	r2, r0
 8008476:	693b      	ldr	r3, [r7, #16]
 8008478:	1ad3      	subs	r3, r2, r3
 800847a:	2b64      	cmp	r3, #100	; 0x64
 800847c:	d901      	bls.n	8008482 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800847e:	2303      	movs	r3, #3
 8008480:	e1fb      	b.n	800887a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008482:	4b76      	ldr	r3, [pc, #472]	; (800865c <HAL_RCC_OscConfig+0x2ac>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800848a:	2b00      	cmp	r3, #0
 800848c:	d0f0      	beq.n	8008470 <HAL_RCC_OscConfig+0xc0>
 800848e:	e014      	b.n	80084ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008490:	f7fd fd80 	bl	8005f94 <HAL_GetTick>
 8008494:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008496:	e008      	b.n	80084aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008498:	f7fd fd7c 	bl	8005f94 <HAL_GetTick>
 800849c:	4602      	mov	r2, r0
 800849e:	693b      	ldr	r3, [r7, #16]
 80084a0:	1ad3      	subs	r3, r2, r3
 80084a2:	2b64      	cmp	r3, #100	; 0x64
 80084a4:	d901      	bls.n	80084aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80084a6:	2303      	movs	r3, #3
 80084a8:	e1e7      	b.n	800887a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80084aa:	4b6c      	ldr	r3, [pc, #432]	; (800865c <HAL_RCC_OscConfig+0x2ac>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d1f0      	bne.n	8008498 <HAL_RCC_OscConfig+0xe8>
 80084b6:	e000      	b.n	80084ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80084b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f003 0302 	and.w	r3, r3, #2
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d063      	beq.n	800858e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80084c6:	4b65      	ldr	r3, [pc, #404]	; (800865c <HAL_RCC_OscConfig+0x2ac>)
 80084c8:	689b      	ldr	r3, [r3, #8]
 80084ca:	f003 030c 	and.w	r3, r3, #12
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d00b      	beq.n	80084ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80084d2:	4b62      	ldr	r3, [pc, #392]	; (800865c <HAL_RCC_OscConfig+0x2ac>)
 80084d4:	689b      	ldr	r3, [r3, #8]
 80084d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80084da:	2b08      	cmp	r3, #8
 80084dc:	d11c      	bne.n	8008518 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80084de:	4b5f      	ldr	r3, [pc, #380]	; (800865c <HAL_RCC_OscConfig+0x2ac>)
 80084e0:	685b      	ldr	r3, [r3, #4]
 80084e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d116      	bne.n	8008518 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80084ea:	4b5c      	ldr	r3, [pc, #368]	; (800865c <HAL_RCC_OscConfig+0x2ac>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f003 0302 	and.w	r3, r3, #2
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d005      	beq.n	8008502 <HAL_RCC_OscConfig+0x152>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	68db      	ldr	r3, [r3, #12]
 80084fa:	2b01      	cmp	r3, #1
 80084fc:	d001      	beq.n	8008502 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80084fe:	2301      	movs	r3, #1
 8008500:	e1bb      	b.n	800887a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008502:	4b56      	ldr	r3, [pc, #344]	; (800865c <HAL_RCC_OscConfig+0x2ac>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	691b      	ldr	r3, [r3, #16]
 800850e:	00db      	lsls	r3, r3, #3
 8008510:	4952      	ldr	r1, [pc, #328]	; (800865c <HAL_RCC_OscConfig+0x2ac>)
 8008512:	4313      	orrs	r3, r2
 8008514:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008516:	e03a      	b.n	800858e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	68db      	ldr	r3, [r3, #12]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d020      	beq.n	8008562 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008520:	4b4f      	ldr	r3, [pc, #316]	; (8008660 <HAL_RCC_OscConfig+0x2b0>)
 8008522:	2201      	movs	r2, #1
 8008524:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008526:	f7fd fd35 	bl	8005f94 <HAL_GetTick>
 800852a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800852c:	e008      	b.n	8008540 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800852e:	f7fd fd31 	bl	8005f94 <HAL_GetTick>
 8008532:	4602      	mov	r2, r0
 8008534:	693b      	ldr	r3, [r7, #16]
 8008536:	1ad3      	subs	r3, r2, r3
 8008538:	2b02      	cmp	r3, #2
 800853a:	d901      	bls.n	8008540 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800853c:	2303      	movs	r3, #3
 800853e:	e19c      	b.n	800887a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008540:	4b46      	ldr	r3, [pc, #280]	; (800865c <HAL_RCC_OscConfig+0x2ac>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f003 0302 	and.w	r3, r3, #2
 8008548:	2b00      	cmp	r3, #0
 800854a:	d0f0      	beq.n	800852e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800854c:	4b43      	ldr	r3, [pc, #268]	; (800865c <HAL_RCC_OscConfig+0x2ac>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	691b      	ldr	r3, [r3, #16]
 8008558:	00db      	lsls	r3, r3, #3
 800855a:	4940      	ldr	r1, [pc, #256]	; (800865c <HAL_RCC_OscConfig+0x2ac>)
 800855c:	4313      	orrs	r3, r2
 800855e:	600b      	str	r3, [r1, #0]
 8008560:	e015      	b.n	800858e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008562:	4b3f      	ldr	r3, [pc, #252]	; (8008660 <HAL_RCC_OscConfig+0x2b0>)
 8008564:	2200      	movs	r2, #0
 8008566:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008568:	f7fd fd14 	bl	8005f94 <HAL_GetTick>
 800856c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800856e:	e008      	b.n	8008582 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008570:	f7fd fd10 	bl	8005f94 <HAL_GetTick>
 8008574:	4602      	mov	r2, r0
 8008576:	693b      	ldr	r3, [r7, #16]
 8008578:	1ad3      	subs	r3, r2, r3
 800857a:	2b02      	cmp	r3, #2
 800857c:	d901      	bls.n	8008582 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800857e:	2303      	movs	r3, #3
 8008580:	e17b      	b.n	800887a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008582:	4b36      	ldr	r3, [pc, #216]	; (800865c <HAL_RCC_OscConfig+0x2ac>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f003 0302 	and.w	r3, r3, #2
 800858a:	2b00      	cmp	r3, #0
 800858c:	d1f0      	bne.n	8008570 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f003 0308 	and.w	r3, r3, #8
 8008596:	2b00      	cmp	r3, #0
 8008598:	d030      	beq.n	80085fc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	695b      	ldr	r3, [r3, #20]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d016      	beq.n	80085d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80085a2:	4b30      	ldr	r3, [pc, #192]	; (8008664 <HAL_RCC_OscConfig+0x2b4>)
 80085a4:	2201      	movs	r2, #1
 80085a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085a8:	f7fd fcf4 	bl	8005f94 <HAL_GetTick>
 80085ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80085ae:	e008      	b.n	80085c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80085b0:	f7fd fcf0 	bl	8005f94 <HAL_GetTick>
 80085b4:	4602      	mov	r2, r0
 80085b6:	693b      	ldr	r3, [r7, #16]
 80085b8:	1ad3      	subs	r3, r2, r3
 80085ba:	2b02      	cmp	r3, #2
 80085bc:	d901      	bls.n	80085c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80085be:	2303      	movs	r3, #3
 80085c0:	e15b      	b.n	800887a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80085c2:	4b26      	ldr	r3, [pc, #152]	; (800865c <HAL_RCC_OscConfig+0x2ac>)
 80085c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80085c6:	f003 0302 	and.w	r3, r3, #2
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d0f0      	beq.n	80085b0 <HAL_RCC_OscConfig+0x200>
 80085ce:	e015      	b.n	80085fc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80085d0:	4b24      	ldr	r3, [pc, #144]	; (8008664 <HAL_RCC_OscConfig+0x2b4>)
 80085d2:	2200      	movs	r2, #0
 80085d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80085d6:	f7fd fcdd 	bl	8005f94 <HAL_GetTick>
 80085da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80085dc:	e008      	b.n	80085f0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80085de:	f7fd fcd9 	bl	8005f94 <HAL_GetTick>
 80085e2:	4602      	mov	r2, r0
 80085e4:	693b      	ldr	r3, [r7, #16]
 80085e6:	1ad3      	subs	r3, r2, r3
 80085e8:	2b02      	cmp	r3, #2
 80085ea:	d901      	bls.n	80085f0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80085ec:	2303      	movs	r3, #3
 80085ee:	e144      	b.n	800887a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80085f0:	4b1a      	ldr	r3, [pc, #104]	; (800865c <HAL_RCC_OscConfig+0x2ac>)
 80085f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80085f4:	f003 0302 	and.w	r3, r3, #2
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d1f0      	bne.n	80085de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f003 0304 	and.w	r3, r3, #4
 8008604:	2b00      	cmp	r3, #0
 8008606:	f000 80a0 	beq.w	800874a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800860a:	2300      	movs	r3, #0
 800860c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800860e:	4b13      	ldr	r3, [pc, #76]	; (800865c <HAL_RCC_OscConfig+0x2ac>)
 8008610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008616:	2b00      	cmp	r3, #0
 8008618:	d10f      	bne.n	800863a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800861a:	2300      	movs	r3, #0
 800861c:	60bb      	str	r3, [r7, #8]
 800861e:	4b0f      	ldr	r3, [pc, #60]	; (800865c <HAL_RCC_OscConfig+0x2ac>)
 8008620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008622:	4a0e      	ldr	r2, [pc, #56]	; (800865c <HAL_RCC_OscConfig+0x2ac>)
 8008624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008628:	6413      	str	r3, [r2, #64]	; 0x40
 800862a:	4b0c      	ldr	r3, [pc, #48]	; (800865c <HAL_RCC_OscConfig+0x2ac>)
 800862c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800862e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008632:	60bb      	str	r3, [r7, #8]
 8008634:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008636:	2301      	movs	r3, #1
 8008638:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800863a:	4b0b      	ldr	r3, [pc, #44]	; (8008668 <HAL_RCC_OscConfig+0x2b8>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008642:	2b00      	cmp	r3, #0
 8008644:	d121      	bne.n	800868a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008646:	4b08      	ldr	r3, [pc, #32]	; (8008668 <HAL_RCC_OscConfig+0x2b8>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	4a07      	ldr	r2, [pc, #28]	; (8008668 <HAL_RCC_OscConfig+0x2b8>)
 800864c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008650:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008652:	f7fd fc9f 	bl	8005f94 <HAL_GetTick>
 8008656:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008658:	e011      	b.n	800867e <HAL_RCC_OscConfig+0x2ce>
 800865a:	bf00      	nop
 800865c:	40023800 	.word	0x40023800
 8008660:	42470000 	.word	0x42470000
 8008664:	42470e80 	.word	0x42470e80
 8008668:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800866c:	f7fd fc92 	bl	8005f94 <HAL_GetTick>
 8008670:	4602      	mov	r2, r0
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	1ad3      	subs	r3, r2, r3
 8008676:	2b02      	cmp	r3, #2
 8008678:	d901      	bls.n	800867e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800867a:	2303      	movs	r3, #3
 800867c:	e0fd      	b.n	800887a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800867e:	4b81      	ldr	r3, [pc, #516]	; (8008884 <HAL_RCC_OscConfig+0x4d4>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008686:	2b00      	cmp	r3, #0
 8008688:	d0f0      	beq.n	800866c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	689b      	ldr	r3, [r3, #8]
 800868e:	2b01      	cmp	r3, #1
 8008690:	d106      	bne.n	80086a0 <HAL_RCC_OscConfig+0x2f0>
 8008692:	4b7d      	ldr	r3, [pc, #500]	; (8008888 <HAL_RCC_OscConfig+0x4d8>)
 8008694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008696:	4a7c      	ldr	r2, [pc, #496]	; (8008888 <HAL_RCC_OscConfig+0x4d8>)
 8008698:	f043 0301 	orr.w	r3, r3, #1
 800869c:	6713      	str	r3, [r2, #112]	; 0x70
 800869e:	e01c      	b.n	80086da <HAL_RCC_OscConfig+0x32a>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	689b      	ldr	r3, [r3, #8]
 80086a4:	2b05      	cmp	r3, #5
 80086a6:	d10c      	bne.n	80086c2 <HAL_RCC_OscConfig+0x312>
 80086a8:	4b77      	ldr	r3, [pc, #476]	; (8008888 <HAL_RCC_OscConfig+0x4d8>)
 80086aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086ac:	4a76      	ldr	r2, [pc, #472]	; (8008888 <HAL_RCC_OscConfig+0x4d8>)
 80086ae:	f043 0304 	orr.w	r3, r3, #4
 80086b2:	6713      	str	r3, [r2, #112]	; 0x70
 80086b4:	4b74      	ldr	r3, [pc, #464]	; (8008888 <HAL_RCC_OscConfig+0x4d8>)
 80086b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086b8:	4a73      	ldr	r2, [pc, #460]	; (8008888 <HAL_RCC_OscConfig+0x4d8>)
 80086ba:	f043 0301 	orr.w	r3, r3, #1
 80086be:	6713      	str	r3, [r2, #112]	; 0x70
 80086c0:	e00b      	b.n	80086da <HAL_RCC_OscConfig+0x32a>
 80086c2:	4b71      	ldr	r3, [pc, #452]	; (8008888 <HAL_RCC_OscConfig+0x4d8>)
 80086c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086c6:	4a70      	ldr	r2, [pc, #448]	; (8008888 <HAL_RCC_OscConfig+0x4d8>)
 80086c8:	f023 0301 	bic.w	r3, r3, #1
 80086cc:	6713      	str	r3, [r2, #112]	; 0x70
 80086ce:	4b6e      	ldr	r3, [pc, #440]	; (8008888 <HAL_RCC_OscConfig+0x4d8>)
 80086d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086d2:	4a6d      	ldr	r2, [pc, #436]	; (8008888 <HAL_RCC_OscConfig+0x4d8>)
 80086d4:	f023 0304 	bic.w	r3, r3, #4
 80086d8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	689b      	ldr	r3, [r3, #8]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d015      	beq.n	800870e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086e2:	f7fd fc57 	bl	8005f94 <HAL_GetTick>
 80086e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80086e8:	e00a      	b.n	8008700 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80086ea:	f7fd fc53 	bl	8005f94 <HAL_GetTick>
 80086ee:	4602      	mov	r2, r0
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	1ad3      	subs	r3, r2, r3
 80086f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d901      	bls.n	8008700 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80086fc:	2303      	movs	r3, #3
 80086fe:	e0bc      	b.n	800887a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008700:	4b61      	ldr	r3, [pc, #388]	; (8008888 <HAL_RCC_OscConfig+0x4d8>)
 8008702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008704:	f003 0302 	and.w	r3, r3, #2
 8008708:	2b00      	cmp	r3, #0
 800870a:	d0ee      	beq.n	80086ea <HAL_RCC_OscConfig+0x33a>
 800870c:	e014      	b.n	8008738 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800870e:	f7fd fc41 	bl	8005f94 <HAL_GetTick>
 8008712:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008714:	e00a      	b.n	800872c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008716:	f7fd fc3d 	bl	8005f94 <HAL_GetTick>
 800871a:	4602      	mov	r2, r0
 800871c:	693b      	ldr	r3, [r7, #16]
 800871e:	1ad3      	subs	r3, r2, r3
 8008720:	f241 3288 	movw	r2, #5000	; 0x1388
 8008724:	4293      	cmp	r3, r2
 8008726:	d901      	bls.n	800872c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8008728:	2303      	movs	r3, #3
 800872a:	e0a6      	b.n	800887a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800872c:	4b56      	ldr	r3, [pc, #344]	; (8008888 <HAL_RCC_OscConfig+0x4d8>)
 800872e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008730:	f003 0302 	and.w	r3, r3, #2
 8008734:	2b00      	cmp	r3, #0
 8008736:	d1ee      	bne.n	8008716 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008738:	7dfb      	ldrb	r3, [r7, #23]
 800873a:	2b01      	cmp	r3, #1
 800873c:	d105      	bne.n	800874a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800873e:	4b52      	ldr	r3, [pc, #328]	; (8008888 <HAL_RCC_OscConfig+0x4d8>)
 8008740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008742:	4a51      	ldr	r2, [pc, #324]	; (8008888 <HAL_RCC_OscConfig+0x4d8>)
 8008744:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008748:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	699b      	ldr	r3, [r3, #24]
 800874e:	2b00      	cmp	r3, #0
 8008750:	f000 8092 	beq.w	8008878 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008754:	4b4c      	ldr	r3, [pc, #304]	; (8008888 <HAL_RCC_OscConfig+0x4d8>)
 8008756:	689b      	ldr	r3, [r3, #8]
 8008758:	f003 030c 	and.w	r3, r3, #12
 800875c:	2b08      	cmp	r3, #8
 800875e:	d05c      	beq.n	800881a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	699b      	ldr	r3, [r3, #24]
 8008764:	2b02      	cmp	r3, #2
 8008766:	d141      	bne.n	80087ec <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008768:	4b48      	ldr	r3, [pc, #288]	; (800888c <HAL_RCC_OscConfig+0x4dc>)
 800876a:	2200      	movs	r2, #0
 800876c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800876e:	f7fd fc11 	bl	8005f94 <HAL_GetTick>
 8008772:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008774:	e008      	b.n	8008788 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008776:	f7fd fc0d 	bl	8005f94 <HAL_GetTick>
 800877a:	4602      	mov	r2, r0
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	1ad3      	subs	r3, r2, r3
 8008780:	2b02      	cmp	r3, #2
 8008782:	d901      	bls.n	8008788 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8008784:	2303      	movs	r3, #3
 8008786:	e078      	b.n	800887a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008788:	4b3f      	ldr	r3, [pc, #252]	; (8008888 <HAL_RCC_OscConfig+0x4d8>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008790:	2b00      	cmp	r3, #0
 8008792:	d1f0      	bne.n	8008776 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	69da      	ldr	r2, [r3, #28]
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6a1b      	ldr	r3, [r3, #32]
 800879c:	431a      	orrs	r2, r3
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087a2:	019b      	lsls	r3, r3, #6
 80087a4:	431a      	orrs	r2, r3
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087aa:	085b      	lsrs	r3, r3, #1
 80087ac:	3b01      	subs	r3, #1
 80087ae:	041b      	lsls	r3, r3, #16
 80087b0:	431a      	orrs	r2, r3
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087b6:	061b      	lsls	r3, r3, #24
 80087b8:	4933      	ldr	r1, [pc, #204]	; (8008888 <HAL_RCC_OscConfig+0x4d8>)
 80087ba:	4313      	orrs	r3, r2
 80087bc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80087be:	4b33      	ldr	r3, [pc, #204]	; (800888c <HAL_RCC_OscConfig+0x4dc>)
 80087c0:	2201      	movs	r2, #1
 80087c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80087c4:	f7fd fbe6 	bl	8005f94 <HAL_GetTick>
 80087c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80087ca:	e008      	b.n	80087de <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80087cc:	f7fd fbe2 	bl	8005f94 <HAL_GetTick>
 80087d0:	4602      	mov	r2, r0
 80087d2:	693b      	ldr	r3, [r7, #16]
 80087d4:	1ad3      	subs	r3, r2, r3
 80087d6:	2b02      	cmp	r3, #2
 80087d8:	d901      	bls.n	80087de <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80087da:	2303      	movs	r3, #3
 80087dc:	e04d      	b.n	800887a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80087de:	4b2a      	ldr	r3, [pc, #168]	; (8008888 <HAL_RCC_OscConfig+0x4d8>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d0f0      	beq.n	80087cc <HAL_RCC_OscConfig+0x41c>
 80087ea:	e045      	b.n	8008878 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80087ec:	4b27      	ldr	r3, [pc, #156]	; (800888c <HAL_RCC_OscConfig+0x4dc>)
 80087ee:	2200      	movs	r2, #0
 80087f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80087f2:	f7fd fbcf 	bl	8005f94 <HAL_GetTick>
 80087f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80087f8:	e008      	b.n	800880c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80087fa:	f7fd fbcb 	bl	8005f94 <HAL_GetTick>
 80087fe:	4602      	mov	r2, r0
 8008800:	693b      	ldr	r3, [r7, #16]
 8008802:	1ad3      	subs	r3, r2, r3
 8008804:	2b02      	cmp	r3, #2
 8008806:	d901      	bls.n	800880c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8008808:	2303      	movs	r3, #3
 800880a:	e036      	b.n	800887a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800880c:	4b1e      	ldr	r3, [pc, #120]	; (8008888 <HAL_RCC_OscConfig+0x4d8>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008814:	2b00      	cmp	r3, #0
 8008816:	d1f0      	bne.n	80087fa <HAL_RCC_OscConfig+0x44a>
 8008818:	e02e      	b.n	8008878 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	699b      	ldr	r3, [r3, #24]
 800881e:	2b01      	cmp	r3, #1
 8008820:	d101      	bne.n	8008826 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8008822:	2301      	movs	r3, #1
 8008824:	e029      	b.n	800887a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008826:	4b18      	ldr	r3, [pc, #96]	; (8008888 <HAL_RCC_OscConfig+0x4d8>)
 8008828:	685b      	ldr	r3, [r3, #4]
 800882a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	69db      	ldr	r3, [r3, #28]
 8008836:	429a      	cmp	r2, r3
 8008838:	d11c      	bne.n	8008874 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008844:	429a      	cmp	r2, r3
 8008846:	d115      	bne.n	8008874 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8008848:	68fa      	ldr	r2, [r7, #12]
 800884a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800884e:	4013      	ands	r3, r2
 8008850:	687a      	ldr	r2, [r7, #4]
 8008852:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008854:	4293      	cmp	r3, r2
 8008856:	d10d      	bne.n	8008874 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8008862:	429a      	cmp	r2, r3
 8008864:	d106      	bne.n	8008874 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008870:	429a      	cmp	r2, r3
 8008872:	d001      	beq.n	8008878 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8008874:	2301      	movs	r3, #1
 8008876:	e000      	b.n	800887a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8008878:	2300      	movs	r3, #0
}
 800887a:	4618      	mov	r0, r3
 800887c:	3718      	adds	r7, #24
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}
 8008882:	bf00      	nop
 8008884:	40007000 	.word	0x40007000
 8008888:	40023800 	.word	0x40023800
 800888c:	42470060 	.word	0x42470060

08008890 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b084      	sub	sp, #16
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
 8008898:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d101      	bne.n	80088a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80088a0:	2301      	movs	r3, #1
 80088a2:	e0cc      	b.n	8008a3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80088a4:	4b68      	ldr	r3, [pc, #416]	; (8008a48 <HAL_RCC_ClockConfig+0x1b8>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f003 030f 	and.w	r3, r3, #15
 80088ac:	683a      	ldr	r2, [r7, #0]
 80088ae:	429a      	cmp	r2, r3
 80088b0:	d90c      	bls.n	80088cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80088b2:	4b65      	ldr	r3, [pc, #404]	; (8008a48 <HAL_RCC_ClockConfig+0x1b8>)
 80088b4:	683a      	ldr	r2, [r7, #0]
 80088b6:	b2d2      	uxtb	r2, r2
 80088b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80088ba:	4b63      	ldr	r3, [pc, #396]	; (8008a48 <HAL_RCC_ClockConfig+0x1b8>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f003 030f 	and.w	r3, r3, #15
 80088c2:	683a      	ldr	r2, [r7, #0]
 80088c4:	429a      	cmp	r2, r3
 80088c6:	d001      	beq.n	80088cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80088c8:	2301      	movs	r3, #1
 80088ca:	e0b8      	b.n	8008a3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f003 0302 	and.w	r3, r3, #2
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d020      	beq.n	800891a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f003 0304 	and.w	r3, r3, #4
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d005      	beq.n	80088f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80088e4:	4b59      	ldr	r3, [pc, #356]	; (8008a4c <HAL_RCC_ClockConfig+0x1bc>)
 80088e6:	689b      	ldr	r3, [r3, #8]
 80088e8:	4a58      	ldr	r2, [pc, #352]	; (8008a4c <HAL_RCC_ClockConfig+0x1bc>)
 80088ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80088ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f003 0308 	and.w	r3, r3, #8
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d005      	beq.n	8008908 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80088fc:	4b53      	ldr	r3, [pc, #332]	; (8008a4c <HAL_RCC_ClockConfig+0x1bc>)
 80088fe:	689b      	ldr	r3, [r3, #8]
 8008900:	4a52      	ldr	r2, [pc, #328]	; (8008a4c <HAL_RCC_ClockConfig+0x1bc>)
 8008902:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008906:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008908:	4b50      	ldr	r3, [pc, #320]	; (8008a4c <HAL_RCC_ClockConfig+0x1bc>)
 800890a:	689b      	ldr	r3, [r3, #8]
 800890c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	689b      	ldr	r3, [r3, #8]
 8008914:	494d      	ldr	r1, [pc, #308]	; (8008a4c <HAL_RCC_ClockConfig+0x1bc>)
 8008916:	4313      	orrs	r3, r2
 8008918:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f003 0301 	and.w	r3, r3, #1
 8008922:	2b00      	cmp	r3, #0
 8008924:	d044      	beq.n	80089b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	685b      	ldr	r3, [r3, #4]
 800892a:	2b01      	cmp	r3, #1
 800892c:	d107      	bne.n	800893e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800892e:	4b47      	ldr	r3, [pc, #284]	; (8008a4c <HAL_RCC_ClockConfig+0x1bc>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008936:	2b00      	cmp	r3, #0
 8008938:	d119      	bne.n	800896e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800893a:	2301      	movs	r3, #1
 800893c:	e07f      	b.n	8008a3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	685b      	ldr	r3, [r3, #4]
 8008942:	2b02      	cmp	r3, #2
 8008944:	d003      	beq.n	800894e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800894a:	2b03      	cmp	r3, #3
 800894c:	d107      	bne.n	800895e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800894e:	4b3f      	ldr	r3, [pc, #252]	; (8008a4c <HAL_RCC_ClockConfig+0x1bc>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008956:	2b00      	cmp	r3, #0
 8008958:	d109      	bne.n	800896e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800895a:	2301      	movs	r3, #1
 800895c:	e06f      	b.n	8008a3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800895e:	4b3b      	ldr	r3, [pc, #236]	; (8008a4c <HAL_RCC_ClockConfig+0x1bc>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f003 0302 	and.w	r3, r3, #2
 8008966:	2b00      	cmp	r3, #0
 8008968:	d101      	bne.n	800896e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800896a:	2301      	movs	r3, #1
 800896c:	e067      	b.n	8008a3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800896e:	4b37      	ldr	r3, [pc, #220]	; (8008a4c <HAL_RCC_ClockConfig+0x1bc>)
 8008970:	689b      	ldr	r3, [r3, #8]
 8008972:	f023 0203 	bic.w	r2, r3, #3
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	685b      	ldr	r3, [r3, #4]
 800897a:	4934      	ldr	r1, [pc, #208]	; (8008a4c <HAL_RCC_ClockConfig+0x1bc>)
 800897c:	4313      	orrs	r3, r2
 800897e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008980:	f7fd fb08 	bl	8005f94 <HAL_GetTick>
 8008984:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008986:	e00a      	b.n	800899e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008988:	f7fd fb04 	bl	8005f94 <HAL_GetTick>
 800898c:	4602      	mov	r2, r0
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	1ad3      	subs	r3, r2, r3
 8008992:	f241 3288 	movw	r2, #5000	; 0x1388
 8008996:	4293      	cmp	r3, r2
 8008998:	d901      	bls.n	800899e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800899a:	2303      	movs	r3, #3
 800899c:	e04f      	b.n	8008a3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800899e:	4b2b      	ldr	r3, [pc, #172]	; (8008a4c <HAL_RCC_ClockConfig+0x1bc>)
 80089a0:	689b      	ldr	r3, [r3, #8]
 80089a2:	f003 020c 	and.w	r2, r3, #12
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	685b      	ldr	r3, [r3, #4]
 80089aa:	009b      	lsls	r3, r3, #2
 80089ac:	429a      	cmp	r2, r3
 80089ae:	d1eb      	bne.n	8008988 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80089b0:	4b25      	ldr	r3, [pc, #148]	; (8008a48 <HAL_RCC_ClockConfig+0x1b8>)
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f003 030f 	and.w	r3, r3, #15
 80089b8:	683a      	ldr	r2, [r7, #0]
 80089ba:	429a      	cmp	r2, r3
 80089bc:	d20c      	bcs.n	80089d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80089be:	4b22      	ldr	r3, [pc, #136]	; (8008a48 <HAL_RCC_ClockConfig+0x1b8>)
 80089c0:	683a      	ldr	r2, [r7, #0]
 80089c2:	b2d2      	uxtb	r2, r2
 80089c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80089c6:	4b20      	ldr	r3, [pc, #128]	; (8008a48 <HAL_RCC_ClockConfig+0x1b8>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f003 030f 	and.w	r3, r3, #15
 80089ce:	683a      	ldr	r2, [r7, #0]
 80089d0:	429a      	cmp	r2, r3
 80089d2:	d001      	beq.n	80089d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80089d4:	2301      	movs	r3, #1
 80089d6:	e032      	b.n	8008a3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f003 0304 	and.w	r3, r3, #4
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d008      	beq.n	80089f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80089e4:	4b19      	ldr	r3, [pc, #100]	; (8008a4c <HAL_RCC_ClockConfig+0x1bc>)
 80089e6:	689b      	ldr	r3, [r3, #8]
 80089e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	68db      	ldr	r3, [r3, #12]
 80089f0:	4916      	ldr	r1, [pc, #88]	; (8008a4c <HAL_RCC_ClockConfig+0x1bc>)
 80089f2:	4313      	orrs	r3, r2
 80089f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f003 0308 	and.w	r3, r3, #8
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d009      	beq.n	8008a16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008a02:	4b12      	ldr	r3, [pc, #72]	; (8008a4c <HAL_RCC_ClockConfig+0x1bc>)
 8008a04:	689b      	ldr	r3, [r3, #8]
 8008a06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	691b      	ldr	r3, [r3, #16]
 8008a0e:	00db      	lsls	r3, r3, #3
 8008a10:	490e      	ldr	r1, [pc, #56]	; (8008a4c <HAL_RCC_ClockConfig+0x1bc>)
 8008a12:	4313      	orrs	r3, r2
 8008a14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008a16:	f000 f821 	bl	8008a5c <HAL_RCC_GetSysClockFreq>
 8008a1a:	4601      	mov	r1, r0
 8008a1c:	4b0b      	ldr	r3, [pc, #44]	; (8008a4c <HAL_RCC_ClockConfig+0x1bc>)
 8008a1e:	689b      	ldr	r3, [r3, #8]
 8008a20:	091b      	lsrs	r3, r3, #4
 8008a22:	f003 030f 	and.w	r3, r3, #15
 8008a26:	4a0a      	ldr	r2, [pc, #40]	; (8008a50 <HAL_RCC_ClockConfig+0x1c0>)
 8008a28:	5cd3      	ldrb	r3, [r2, r3]
 8008a2a:	fa21 f303 	lsr.w	r3, r1, r3
 8008a2e:	4a09      	ldr	r2, [pc, #36]	; (8008a54 <HAL_RCC_ClockConfig+0x1c4>)
 8008a30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008a32:	4b09      	ldr	r3, [pc, #36]	; (8008a58 <HAL_RCC_ClockConfig+0x1c8>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	4618      	mov	r0, r3
 8008a38:	f7fd fa68 	bl	8005f0c <HAL_InitTick>

  return HAL_OK;
 8008a3c:	2300      	movs	r3, #0
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3710      	adds	r7, #16
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}
 8008a46:	bf00      	nop
 8008a48:	40023c00 	.word	0x40023c00
 8008a4c:	40023800 	.word	0x40023800
 8008a50:	0800e69c 	.word	0x0800e69c
 8008a54:	20000004 	.word	0x20000004
 8008a58:	20000008 	.word	0x20000008

08008a5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a5e:	b085      	sub	sp, #20
 8008a60:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008a62:	2300      	movs	r3, #0
 8008a64:	607b      	str	r3, [r7, #4]
 8008a66:	2300      	movs	r3, #0
 8008a68:	60fb      	str	r3, [r7, #12]
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008a72:	4b63      	ldr	r3, [pc, #396]	; (8008c00 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008a74:	689b      	ldr	r3, [r3, #8]
 8008a76:	f003 030c 	and.w	r3, r3, #12
 8008a7a:	2b04      	cmp	r3, #4
 8008a7c:	d007      	beq.n	8008a8e <HAL_RCC_GetSysClockFreq+0x32>
 8008a7e:	2b08      	cmp	r3, #8
 8008a80:	d008      	beq.n	8008a94 <HAL_RCC_GetSysClockFreq+0x38>
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	f040 80b4 	bne.w	8008bf0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008a88:	4b5e      	ldr	r3, [pc, #376]	; (8008c04 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8008a8a:	60bb      	str	r3, [r7, #8]
       break;
 8008a8c:	e0b3      	b.n	8008bf6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008a8e:	4b5e      	ldr	r3, [pc, #376]	; (8008c08 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8008a90:	60bb      	str	r3, [r7, #8]
      break;
 8008a92:	e0b0      	b.n	8008bf6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008a94:	4b5a      	ldr	r3, [pc, #360]	; (8008c00 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008a96:	685b      	ldr	r3, [r3, #4]
 8008a98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008a9c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008a9e:	4b58      	ldr	r3, [pc, #352]	; (8008c00 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008aa0:	685b      	ldr	r3, [r3, #4]
 8008aa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d04a      	beq.n	8008b40 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008aaa:	4b55      	ldr	r3, [pc, #340]	; (8008c00 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008aac:	685b      	ldr	r3, [r3, #4]
 8008aae:	099b      	lsrs	r3, r3, #6
 8008ab0:	f04f 0400 	mov.w	r4, #0
 8008ab4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008ab8:	f04f 0200 	mov.w	r2, #0
 8008abc:	ea03 0501 	and.w	r5, r3, r1
 8008ac0:	ea04 0602 	and.w	r6, r4, r2
 8008ac4:	4629      	mov	r1, r5
 8008ac6:	4632      	mov	r2, r6
 8008ac8:	f04f 0300 	mov.w	r3, #0
 8008acc:	f04f 0400 	mov.w	r4, #0
 8008ad0:	0154      	lsls	r4, r2, #5
 8008ad2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008ad6:	014b      	lsls	r3, r1, #5
 8008ad8:	4619      	mov	r1, r3
 8008ada:	4622      	mov	r2, r4
 8008adc:	1b49      	subs	r1, r1, r5
 8008ade:	eb62 0206 	sbc.w	r2, r2, r6
 8008ae2:	f04f 0300 	mov.w	r3, #0
 8008ae6:	f04f 0400 	mov.w	r4, #0
 8008aea:	0194      	lsls	r4, r2, #6
 8008aec:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008af0:	018b      	lsls	r3, r1, #6
 8008af2:	1a5b      	subs	r3, r3, r1
 8008af4:	eb64 0402 	sbc.w	r4, r4, r2
 8008af8:	f04f 0100 	mov.w	r1, #0
 8008afc:	f04f 0200 	mov.w	r2, #0
 8008b00:	00e2      	lsls	r2, r4, #3
 8008b02:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008b06:	00d9      	lsls	r1, r3, #3
 8008b08:	460b      	mov	r3, r1
 8008b0a:	4614      	mov	r4, r2
 8008b0c:	195b      	adds	r3, r3, r5
 8008b0e:	eb44 0406 	adc.w	r4, r4, r6
 8008b12:	f04f 0100 	mov.w	r1, #0
 8008b16:	f04f 0200 	mov.w	r2, #0
 8008b1a:	0262      	lsls	r2, r4, #9
 8008b1c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8008b20:	0259      	lsls	r1, r3, #9
 8008b22:	460b      	mov	r3, r1
 8008b24:	4614      	mov	r4, r2
 8008b26:	4618      	mov	r0, r3
 8008b28:	4621      	mov	r1, r4
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	f04f 0400 	mov.w	r4, #0
 8008b30:	461a      	mov	r2, r3
 8008b32:	4623      	mov	r3, r4
 8008b34:	f7f8 f888 	bl	8000c48 <__aeabi_uldivmod>
 8008b38:	4603      	mov	r3, r0
 8008b3a:	460c      	mov	r4, r1
 8008b3c:	60fb      	str	r3, [r7, #12]
 8008b3e:	e049      	b.n	8008bd4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008b40:	4b2f      	ldr	r3, [pc, #188]	; (8008c00 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008b42:	685b      	ldr	r3, [r3, #4]
 8008b44:	099b      	lsrs	r3, r3, #6
 8008b46:	f04f 0400 	mov.w	r4, #0
 8008b4a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008b4e:	f04f 0200 	mov.w	r2, #0
 8008b52:	ea03 0501 	and.w	r5, r3, r1
 8008b56:	ea04 0602 	and.w	r6, r4, r2
 8008b5a:	4629      	mov	r1, r5
 8008b5c:	4632      	mov	r2, r6
 8008b5e:	f04f 0300 	mov.w	r3, #0
 8008b62:	f04f 0400 	mov.w	r4, #0
 8008b66:	0154      	lsls	r4, r2, #5
 8008b68:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008b6c:	014b      	lsls	r3, r1, #5
 8008b6e:	4619      	mov	r1, r3
 8008b70:	4622      	mov	r2, r4
 8008b72:	1b49      	subs	r1, r1, r5
 8008b74:	eb62 0206 	sbc.w	r2, r2, r6
 8008b78:	f04f 0300 	mov.w	r3, #0
 8008b7c:	f04f 0400 	mov.w	r4, #0
 8008b80:	0194      	lsls	r4, r2, #6
 8008b82:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008b86:	018b      	lsls	r3, r1, #6
 8008b88:	1a5b      	subs	r3, r3, r1
 8008b8a:	eb64 0402 	sbc.w	r4, r4, r2
 8008b8e:	f04f 0100 	mov.w	r1, #0
 8008b92:	f04f 0200 	mov.w	r2, #0
 8008b96:	00e2      	lsls	r2, r4, #3
 8008b98:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008b9c:	00d9      	lsls	r1, r3, #3
 8008b9e:	460b      	mov	r3, r1
 8008ba0:	4614      	mov	r4, r2
 8008ba2:	195b      	adds	r3, r3, r5
 8008ba4:	eb44 0406 	adc.w	r4, r4, r6
 8008ba8:	f04f 0100 	mov.w	r1, #0
 8008bac:	f04f 0200 	mov.w	r2, #0
 8008bb0:	02a2      	lsls	r2, r4, #10
 8008bb2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8008bb6:	0299      	lsls	r1, r3, #10
 8008bb8:	460b      	mov	r3, r1
 8008bba:	4614      	mov	r4, r2
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	4621      	mov	r1, r4
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f04f 0400 	mov.w	r4, #0
 8008bc6:	461a      	mov	r2, r3
 8008bc8:	4623      	mov	r3, r4
 8008bca:	f7f8 f83d 	bl	8000c48 <__aeabi_uldivmod>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	460c      	mov	r4, r1
 8008bd2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008bd4:	4b0a      	ldr	r3, [pc, #40]	; (8008c00 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008bd6:	685b      	ldr	r3, [r3, #4]
 8008bd8:	0c1b      	lsrs	r3, r3, #16
 8008bda:	f003 0303 	and.w	r3, r3, #3
 8008bde:	3301      	adds	r3, #1
 8008be0:	005b      	lsls	r3, r3, #1
 8008be2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008be4:	68fa      	ldr	r2, [r7, #12]
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bec:	60bb      	str	r3, [r7, #8]
      break;
 8008bee:	e002      	b.n	8008bf6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008bf0:	4b04      	ldr	r3, [pc, #16]	; (8008c04 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8008bf2:	60bb      	str	r3, [r7, #8]
      break;
 8008bf4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008bf6:	68bb      	ldr	r3, [r7, #8]
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	3714      	adds	r7, #20
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c00:	40023800 	.word	0x40023800
 8008c04:	00f42400 	.word	0x00f42400
 8008c08:	007a1200 	.word	0x007a1200

08008c0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008c10:	4b03      	ldr	r3, [pc, #12]	; (8008c20 <HAL_RCC_GetHCLKFreq+0x14>)
 8008c12:	681b      	ldr	r3, [r3, #0]
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	46bd      	mov	sp, r7
 8008c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1c:	4770      	bx	lr
 8008c1e:	bf00      	nop
 8008c20:	20000004 	.word	0x20000004

08008c24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008c28:	f7ff fff0 	bl	8008c0c <HAL_RCC_GetHCLKFreq>
 8008c2c:	4601      	mov	r1, r0
 8008c2e:	4b05      	ldr	r3, [pc, #20]	; (8008c44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008c30:	689b      	ldr	r3, [r3, #8]
 8008c32:	0a9b      	lsrs	r3, r3, #10
 8008c34:	f003 0307 	and.w	r3, r3, #7
 8008c38:	4a03      	ldr	r2, [pc, #12]	; (8008c48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008c3a:	5cd3      	ldrb	r3, [r2, r3]
 8008c3c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	bd80      	pop	{r7, pc}
 8008c44:	40023800 	.word	0x40023800
 8008c48:	0800e6ac 	.word	0x0800e6ac

08008c4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008c50:	f7ff ffdc 	bl	8008c0c <HAL_RCC_GetHCLKFreq>
 8008c54:	4601      	mov	r1, r0
 8008c56:	4b05      	ldr	r3, [pc, #20]	; (8008c6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008c58:	689b      	ldr	r3, [r3, #8]
 8008c5a:	0b5b      	lsrs	r3, r3, #13
 8008c5c:	f003 0307 	and.w	r3, r3, #7
 8008c60:	4a03      	ldr	r2, [pc, #12]	; (8008c70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008c62:	5cd3      	ldrb	r3, [r2, r3]
 8008c64:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	bd80      	pop	{r7, pc}
 8008c6c:	40023800 	.word	0x40023800
 8008c70:	0800e6ac 	.word	0x0800e6ac

08008c74 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b082      	sub	sp, #8
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d101      	bne.n	8008c86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008c82:	2301      	movs	r3, #1
 8008c84:	e03f      	b.n	8008d06 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008c8c:	b2db      	uxtb	r3, r3
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d106      	bne.n	8008ca0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2200      	movs	r2, #0
 8008c96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f7fd f89a 	bl	8005dd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2224      	movs	r2, #36	; 0x24
 8008ca4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	68da      	ldr	r2, [r3, #12]
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008cb6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f000 fbdb 	bl	8009474 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	691a      	ldr	r2, [r3, #16]
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008ccc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	695a      	ldr	r2, [r3, #20]
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008cdc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	68da      	ldr	r2, [r3, #12]
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008cec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2220      	movs	r2, #32
 8008cf8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2220      	movs	r2, #32
 8008d00:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8008d04:	2300      	movs	r3, #0
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	3708      	adds	r7, #8
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}

08008d0e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008d0e:	b580      	push	{r7, lr}
 8008d10:	b088      	sub	sp, #32
 8008d12:	af02      	add	r7, sp, #8
 8008d14:	60f8      	str	r0, [r7, #12]
 8008d16:	60b9      	str	r1, [r7, #8]
 8008d18:	603b      	str	r3, [r7, #0]
 8008d1a:	4613      	mov	r3, r2
 8008d1c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8008d1e:	2300      	movs	r3, #0
 8008d20:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008d28:	b2db      	uxtb	r3, r3
 8008d2a:	2b20      	cmp	r3, #32
 8008d2c:	f040 8083 	bne.w	8008e36 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d30:	68bb      	ldr	r3, [r7, #8]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d002      	beq.n	8008d3c <HAL_UART_Transmit+0x2e>
 8008d36:	88fb      	ldrh	r3, [r7, #6]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d101      	bne.n	8008d40 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	e07b      	b.n	8008e38 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008d46:	2b01      	cmp	r3, #1
 8008d48:	d101      	bne.n	8008d4e <HAL_UART_Transmit+0x40>
 8008d4a:	2302      	movs	r3, #2
 8008d4c:	e074      	b.n	8008e38 <HAL_UART_Transmit+0x12a>
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	2201      	movs	r2, #1
 8008d52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	2200      	movs	r2, #0
 8008d5a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	2221      	movs	r2, #33	; 0x21
 8008d60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8008d64:	f7fd f916 	bl	8005f94 <HAL_GetTick>
 8008d68:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	88fa      	ldrh	r2, [r7, #6]
 8008d6e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	88fa      	ldrh	r2, [r7, #6]
 8008d74:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	2200      	movs	r2, #0
 8008d7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8008d7e:	e042      	b.n	8008e06 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008d84:	b29b      	uxth	r3, r3
 8008d86:	3b01      	subs	r3, #1
 8008d88:	b29a      	uxth	r2, r3
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	689b      	ldr	r3, [r3, #8]
 8008d92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d96:	d122      	bne.n	8008dde <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	9300      	str	r3, [sp, #0]
 8008d9c:	697b      	ldr	r3, [r7, #20]
 8008d9e:	2200      	movs	r2, #0
 8008da0:	2180      	movs	r1, #128	; 0x80
 8008da2:	68f8      	ldr	r0, [r7, #12]
 8008da4:	f000 f9fa 	bl	800919c <UART_WaitOnFlagUntilTimeout>
 8008da8:	4603      	mov	r3, r0
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d001      	beq.n	8008db2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8008dae:	2303      	movs	r3, #3
 8008db0:	e042      	b.n	8008e38 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8008db2:	68bb      	ldr	r3, [r7, #8]
 8008db4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8008db6:	693b      	ldr	r3, [r7, #16]
 8008db8:	881b      	ldrh	r3, [r3, #0]
 8008dba:	461a      	mov	r2, r3
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008dc4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	691b      	ldr	r3, [r3, #16]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d103      	bne.n	8008dd6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	3302      	adds	r3, #2
 8008dd2:	60bb      	str	r3, [r7, #8]
 8008dd4:	e017      	b.n	8008e06 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8008dd6:	68bb      	ldr	r3, [r7, #8]
 8008dd8:	3301      	adds	r3, #1
 8008dda:	60bb      	str	r3, [r7, #8]
 8008ddc:	e013      	b.n	8008e06 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	9300      	str	r3, [sp, #0]
 8008de2:	697b      	ldr	r3, [r7, #20]
 8008de4:	2200      	movs	r2, #0
 8008de6:	2180      	movs	r1, #128	; 0x80
 8008de8:	68f8      	ldr	r0, [r7, #12]
 8008dea:	f000 f9d7 	bl	800919c <UART_WaitOnFlagUntilTimeout>
 8008dee:	4603      	mov	r3, r0
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d001      	beq.n	8008df8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8008df4:	2303      	movs	r3, #3
 8008df6:	e01f      	b.n	8008e38 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	1c5a      	adds	r2, r3, #1
 8008dfc:	60ba      	str	r2, [r7, #8]
 8008dfe:	781a      	ldrb	r2, [r3, #0]
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008e0a:	b29b      	uxth	r3, r3
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d1b7      	bne.n	8008d80 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	9300      	str	r3, [sp, #0]
 8008e14:	697b      	ldr	r3, [r7, #20]
 8008e16:	2200      	movs	r2, #0
 8008e18:	2140      	movs	r1, #64	; 0x40
 8008e1a:	68f8      	ldr	r0, [r7, #12]
 8008e1c:	f000 f9be 	bl	800919c <UART_WaitOnFlagUntilTimeout>
 8008e20:	4603      	mov	r3, r0
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d001      	beq.n	8008e2a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8008e26:	2303      	movs	r3, #3
 8008e28:	e006      	b.n	8008e38 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	2220      	movs	r2, #32
 8008e2e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8008e32:	2300      	movs	r3, #0
 8008e34:	e000      	b.n	8008e38 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8008e36:	2302      	movs	r3, #2
  }
}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	3718      	adds	r7, #24
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}

08008e40 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008e40:	b480      	push	{r7}
 8008e42:	b085      	sub	sp, #20
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	60f8      	str	r0, [r7, #12]
 8008e48:	60b9      	str	r1, [r7, #8]
 8008e4a:	4613      	mov	r3, r2
 8008e4c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008e54:	b2db      	uxtb	r3, r3
 8008e56:	2b20      	cmp	r3, #32
 8008e58:	d130      	bne.n	8008ebc <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d002      	beq.n	8008e66 <HAL_UART_Transmit_IT+0x26>
 8008e60:	88fb      	ldrh	r3, [r7, #6]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d101      	bne.n	8008e6a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8008e66:	2301      	movs	r3, #1
 8008e68:	e029      	b.n	8008ebe <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008e70:	2b01      	cmp	r3, #1
 8008e72:	d101      	bne.n	8008e78 <HAL_UART_Transmit_IT+0x38>
 8008e74:	2302      	movs	r3, #2
 8008e76:	e022      	b.n	8008ebe <HAL_UART_Transmit_IT+0x7e>
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	2201      	movs	r2, #1
 8008e7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	68ba      	ldr	r2, [r7, #8]
 8008e84:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	88fa      	ldrh	r2, [r7, #6]
 8008e8a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	88fa      	ldrh	r2, [r7, #6]
 8008e90:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	2200      	movs	r2, #0
 8008e96:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	2221      	movs	r2, #33	; 0x21
 8008e9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	68da      	ldr	r2, [r3, #12]
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008eb6:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8008eb8:	2300      	movs	r3, #0
 8008eba:	e000      	b.n	8008ebe <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8008ebc:	2302      	movs	r3, #2
  }
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	3714      	adds	r7, #20
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec8:	4770      	bx	lr

08008eca <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008eca:	b480      	push	{r7}
 8008ecc:	b085      	sub	sp, #20
 8008ece:	af00      	add	r7, sp, #0
 8008ed0:	60f8      	str	r0, [r7, #12]
 8008ed2:	60b9      	str	r1, [r7, #8]
 8008ed4:	4613      	mov	r3, r2
 8008ed6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008ede:	b2db      	uxtb	r3, r3
 8008ee0:	2b20      	cmp	r3, #32
 8008ee2:	d140      	bne.n	8008f66 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d002      	beq.n	8008ef0 <HAL_UART_Receive_IT+0x26>
 8008eea:	88fb      	ldrh	r3, [r7, #6]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d101      	bne.n	8008ef4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	e039      	b.n	8008f68 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008efa:	2b01      	cmp	r3, #1
 8008efc:	d101      	bne.n	8008f02 <HAL_UART_Receive_IT+0x38>
 8008efe:	2302      	movs	r3, #2
 8008f00:	e032      	b.n	8008f68 <HAL_UART_Receive_IT+0x9e>
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	2201      	movs	r2, #1
 8008f06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	68ba      	ldr	r2, [r7, #8]
 8008f0e:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	88fa      	ldrh	r2, [r7, #6]
 8008f14:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	88fa      	ldrh	r2, [r7, #6]
 8008f1a:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	2200      	movs	r2, #0
 8008f20:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	2222      	movs	r2, #34	; 0x22
 8008f26:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	68da      	ldr	r2, [r3, #12]
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008f40:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	695a      	ldr	r2, [r3, #20]
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f042 0201 	orr.w	r2, r2, #1
 8008f50:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	68da      	ldr	r2, [r3, #12]
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f042 0220 	orr.w	r2, r2, #32
 8008f60:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8008f62:	2300      	movs	r3, #0
 8008f64:	e000      	b.n	8008f68 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8008f66:	2302      	movs	r3, #2
  }
}
 8008f68:	4618      	mov	r0, r3
 8008f6a:	3714      	adds	r7, #20
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f72:	4770      	bx	lr

08008f74 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b088      	sub	sp, #32
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	68db      	ldr	r3, [r3, #12]
 8008f8a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	695b      	ldr	r3, [r3, #20]
 8008f92:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8008f94:	2300      	movs	r3, #0
 8008f96:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8008f98:	2300      	movs	r3, #0
 8008f9a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008f9c:	69fb      	ldr	r3, [r7, #28]
 8008f9e:	f003 030f 	and.w	r3, r3, #15
 8008fa2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8008fa4:	693b      	ldr	r3, [r7, #16]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d10d      	bne.n	8008fc6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008faa:	69fb      	ldr	r3, [r7, #28]
 8008fac:	f003 0320 	and.w	r3, r3, #32
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d008      	beq.n	8008fc6 <HAL_UART_IRQHandler+0x52>
 8008fb4:	69bb      	ldr	r3, [r7, #24]
 8008fb6:	f003 0320 	and.w	r3, r3, #32
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d003      	beq.n	8008fc6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f000 f9d6 	bl	8009370 <UART_Receive_IT>
      return;
 8008fc4:	e0d1      	b.n	800916a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008fc6:	693b      	ldr	r3, [r7, #16]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	f000 80b0 	beq.w	800912e <HAL_UART_IRQHandler+0x1ba>
 8008fce:	697b      	ldr	r3, [r7, #20]
 8008fd0:	f003 0301 	and.w	r3, r3, #1
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d105      	bne.n	8008fe4 <HAL_UART_IRQHandler+0x70>
 8008fd8:	69bb      	ldr	r3, [r7, #24]
 8008fda:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	f000 80a5 	beq.w	800912e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008fe4:	69fb      	ldr	r3, [r7, #28]
 8008fe6:	f003 0301 	and.w	r3, r3, #1
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d00a      	beq.n	8009004 <HAL_UART_IRQHandler+0x90>
 8008fee:	69bb      	ldr	r3, [r7, #24]
 8008ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d005      	beq.n	8009004 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ffc:	f043 0201 	orr.w	r2, r3, #1
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009004:	69fb      	ldr	r3, [r7, #28]
 8009006:	f003 0304 	and.w	r3, r3, #4
 800900a:	2b00      	cmp	r3, #0
 800900c:	d00a      	beq.n	8009024 <HAL_UART_IRQHandler+0xb0>
 800900e:	697b      	ldr	r3, [r7, #20]
 8009010:	f003 0301 	and.w	r3, r3, #1
 8009014:	2b00      	cmp	r3, #0
 8009016:	d005      	beq.n	8009024 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800901c:	f043 0202 	orr.w	r2, r3, #2
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009024:	69fb      	ldr	r3, [r7, #28]
 8009026:	f003 0302 	and.w	r3, r3, #2
 800902a:	2b00      	cmp	r3, #0
 800902c:	d00a      	beq.n	8009044 <HAL_UART_IRQHandler+0xd0>
 800902e:	697b      	ldr	r3, [r7, #20]
 8009030:	f003 0301 	and.w	r3, r3, #1
 8009034:	2b00      	cmp	r3, #0
 8009036:	d005      	beq.n	8009044 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800903c:	f043 0204 	orr.w	r2, r3, #4
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8009044:	69fb      	ldr	r3, [r7, #28]
 8009046:	f003 0308 	and.w	r3, r3, #8
 800904a:	2b00      	cmp	r3, #0
 800904c:	d00f      	beq.n	800906e <HAL_UART_IRQHandler+0xfa>
 800904e:	69bb      	ldr	r3, [r7, #24]
 8009050:	f003 0320 	and.w	r3, r3, #32
 8009054:	2b00      	cmp	r3, #0
 8009056:	d104      	bne.n	8009062 <HAL_UART_IRQHandler+0xee>
 8009058:	697b      	ldr	r3, [r7, #20]
 800905a:	f003 0301 	and.w	r3, r3, #1
 800905e:	2b00      	cmp	r3, #0
 8009060:	d005      	beq.n	800906e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009066:	f043 0208 	orr.w	r2, r3, #8
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009072:	2b00      	cmp	r3, #0
 8009074:	d078      	beq.n	8009168 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009076:	69fb      	ldr	r3, [r7, #28]
 8009078:	f003 0320 	and.w	r3, r3, #32
 800907c:	2b00      	cmp	r3, #0
 800907e:	d007      	beq.n	8009090 <HAL_UART_IRQHandler+0x11c>
 8009080:	69bb      	ldr	r3, [r7, #24]
 8009082:	f003 0320 	and.w	r3, r3, #32
 8009086:	2b00      	cmp	r3, #0
 8009088:	d002      	beq.n	8009090 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	f000 f970 	bl	8009370 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	695b      	ldr	r3, [r3, #20]
 8009096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800909a:	2b40      	cmp	r3, #64	; 0x40
 800909c:	bf0c      	ite	eq
 800909e:	2301      	moveq	r3, #1
 80090a0:	2300      	movne	r3, #0
 80090a2:	b2db      	uxtb	r3, r3
 80090a4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090aa:	f003 0308 	and.w	r3, r3, #8
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d102      	bne.n	80090b8 <HAL_UART_IRQHandler+0x144>
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d031      	beq.n	800911c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	f000 f8b9 	bl	8009230 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	695b      	ldr	r3, [r3, #20]
 80090c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090c8:	2b40      	cmp	r3, #64	; 0x40
 80090ca:	d123      	bne.n	8009114 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	695a      	ldr	r2, [r3, #20]
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80090da:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d013      	beq.n	800910c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090e8:	4a21      	ldr	r2, [pc, #132]	; (8009170 <HAL_UART_IRQHandler+0x1fc>)
 80090ea:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090f0:	4618      	mov	r0, r3
 80090f2:	f7fd fd89 	bl	8006c08 <HAL_DMA_Abort_IT>
 80090f6:	4603      	mov	r3, r0
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d016      	beq.n	800912a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009100:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009102:	687a      	ldr	r2, [r7, #4]
 8009104:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009106:	4610      	mov	r0, r2
 8009108:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800910a:	e00e      	b.n	800912a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f000 f83b 	bl	8009188 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009112:	e00a      	b.n	800912a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	f000 f837 	bl	8009188 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800911a:	e006      	b.n	800912a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	f000 f833 	bl	8009188 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2200      	movs	r2, #0
 8009126:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8009128:	e01e      	b.n	8009168 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800912a:	bf00      	nop
    return;
 800912c:	e01c      	b.n	8009168 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800912e:	69fb      	ldr	r3, [r7, #28]
 8009130:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009134:	2b00      	cmp	r3, #0
 8009136:	d008      	beq.n	800914a <HAL_UART_IRQHandler+0x1d6>
 8009138:	69bb      	ldr	r3, [r7, #24]
 800913a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800913e:	2b00      	cmp	r3, #0
 8009140:	d003      	beq.n	800914a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f000 f8a6 	bl	8009294 <UART_Transmit_IT>
    return;
 8009148:	e00f      	b.n	800916a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800914a:	69fb      	ldr	r3, [r7, #28]
 800914c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009150:	2b00      	cmp	r3, #0
 8009152:	d00a      	beq.n	800916a <HAL_UART_IRQHandler+0x1f6>
 8009154:	69bb      	ldr	r3, [r7, #24]
 8009156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800915a:	2b00      	cmp	r3, #0
 800915c:	d005      	beq.n	800916a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f000 f8ee 	bl	8009340 <UART_EndTransmit_IT>
    return;
 8009164:	bf00      	nop
 8009166:	e000      	b.n	800916a <HAL_UART_IRQHandler+0x1f6>
    return;
 8009168:	bf00      	nop
  }
}
 800916a:	3720      	adds	r7, #32
 800916c:	46bd      	mov	sp, r7
 800916e:	bd80      	pop	{r7, pc}
 8009170:	0800926d 	.word	0x0800926d

08009174 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009174:	b480      	push	{r7}
 8009176:	b083      	sub	sp, #12
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800917c:	bf00      	nop
 800917e:	370c      	adds	r7, #12
 8009180:	46bd      	mov	sp, r7
 8009182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009186:	4770      	bx	lr

08009188 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009188:	b480      	push	{r7}
 800918a:	b083      	sub	sp, #12
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009190:	bf00      	nop
 8009192:	370c      	adds	r7, #12
 8009194:	46bd      	mov	sp, r7
 8009196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919a:	4770      	bx	lr

0800919c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b084      	sub	sp, #16
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	60f8      	str	r0, [r7, #12]
 80091a4:	60b9      	str	r1, [r7, #8]
 80091a6:	603b      	str	r3, [r7, #0]
 80091a8:	4613      	mov	r3, r2
 80091aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80091ac:	e02c      	b.n	8009208 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80091ae:	69bb      	ldr	r3, [r7, #24]
 80091b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80091b4:	d028      	beq.n	8009208 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80091b6:	69bb      	ldr	r3, [r7, #24]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d007      	beq.n	80091cc <UART_WaitOnFlagUntilTimeout+0x30>
 80091bc:	f7fc feea 	bl	8005f94 <HAL_GetTick>
 80091c0:	4602      	mov	r2, r0
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	1ad3      	subs	r3, r2, r3
 80091c6:	69ba      	ldr	r2, [r7, #24]
 80091c8:	429a      	cmp	r2, r3
 80091ca:	d21d      	bcs.n	8009208 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	68da      	ldr	r2, [r3, #12]
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80091da:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	695a      	ldr	r2, [r3, #20]
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f022 0201 	bic.w	r2, r2, #1
 80091ea:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	2220      	movs	r2, #32
 80091f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	2220      	movs	r2, #32
 80091f8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	2200      	movs	r2, #0
 8009200:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8009204:	2303      	movs	r3, #3
 8009206:	e00f      	b.n	8009228 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	681a      	ldr	r2, [r3, #0]
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	4013      	ands	r3, r2
 8009212:	68ba      	ldr	r2, [r7, #8]
 8009214:	429a      	cmp	r2, r3
 8009216:	bf0c      	ite	eq
 8009218:	2301      	moveq	r3, #1
 800921a:	2300      	movne	r3, #0
 800921c:	b2db      	uxtb	r3, r3
 800921e:	461a      	mov	r2, r3
 8009220:	79fb      	ldrb	r3, [r7, #7]
 8009222:	429a      	cmp	r2, r3
 8009224:	d0c3      	beq.n	80091ae <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009226:	2300      	movs	r3, #0
}
 8009228:	4618      	mov	r0, r3
 800922a:	3710      	adds	r7, #16
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}

08009230 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009230:	b480      	push	{r7}
 8009232:	b083      	sub	sp, #12
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	68da      	ldr	r2, [r3, #12]
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009246:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	695a      	ldr	r2, [r3, #20]
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f022 0201 	bic.w	r2, r2, #1
 8009256:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2220      	movs	r2, #32
 800925c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8009260:	bf00      	nop
 8009262:	370c      	adds	r7, #12
 8009264:	46bd      	mov	sp, r7
 8009266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926a:	4770      	bx	lr

0800926c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b084      	sub	sp, #16
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009278:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	2200      	movs	r2, #0
 800927e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	2200      	movs	r2, #0
 8009284:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009286:	68f8      	ldr	r0, [r7, #12]
 8009288:	f7ff ff7e 	bl	8009188 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800928c:	bf00      	nop
 800928e:	3710      	adds	r7, #16
 8009290:	46bd      	mov	sp, r7
 8009292:	bd80      	pop	{r7, pc}

08009294 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009294:	b480      	push	{r7}
 8009296:	b085      	sub	sp, #20
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80092a2:	b2db      	uxtb	r3, r3
 80092a4:	2b21      	cmp	r3, #33	; 0x21
 80092a6:	d144      	bne.n	8009332 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	689b      	ldr	r3, [r3, #8]
 80092ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092b0:	d11a      	bne.n	80092e8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6a1b      	ldr	r3, [r3, #32]
 80092b6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	881b      	ldrh	r3, [r3, #0]
 80092bc:	461a      	mov	r2, r3
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80092c6:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	691b      	ldr	r3, [r3, #16]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d105      	bne.n	80092dc <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6a1b      	ldr	r3, [r3, #32]
 80092d4:	1c9a      	adds	r2, r3, #2
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	621a      	str	r2, [r3, #32]
 80092da:	e00e      	b.n	80092fa <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6a1b      	ldr	r3, [r3, #32]
 80092e0:	1c5a      	adds	r2, r3, #1
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	621a      	str	r2, [r3, #32]
 80092e6:	e008      	b.n	80092fa <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	6a1b      	ldr	r3, [r3, #32]
 80092ec:	1c59      	adds	r1, r3, #1
 80092ee:	687a      	ldr	r2, [r7, #4]
 80092f0:	6211      	str	r1, [r2, #32]
 80092f2:	781a      	ldrb	r2, [r3, #0]
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80092fe:	b29b      	uxth	r3, r3
 8009300:	3b01      	subs	r3, #1
 8009302:	b29b      	uxth	r3, r3
 8009304:	687a      	ldr	r2, [r7, #4]
 8009306:	4619      	mov	r1, r3
 8009308:	84d1      	strh	r1, [r2, #38]	; 0x26
 800930a:	2b00      	cmp	r3, #0
 800930c:	d10f      	bne.n	800932e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	68da      	ldr	r2, [r3, #12]
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800931c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	68da      	ldr	r2, [r3, #12]
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800932c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800932e:	2300      	movs	r3, #0
 8009330:	e000      	b.n	8009334 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8009332:	2302      	movs	r3, #2
  }
}
 8009334:	4618      	mov	r0, r3
 8009336:	3714      	adds	r7, #20
 8009338:	46bd      	mov	sp, r7
 800933a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933e:	4770      	bx	lr

08009340 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b082      	sub	sp, #8
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	68da      	ldr	r2, [r3, #12]
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009356:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2220      	movs	r2, #32
 800935c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	f7ff ff07 	bl	8009174 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009366:	2300      	movs	r3, #0
}
 8009368:	4618      	mov	r0, r3
 800936a:	3708      	adds	r7, #8
 800936c:	46bd      	mov	sp, r7
 800936e:	bd80      	pop	{r7, pc}

08009370 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b084      	sub	sp, #16
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800937e:	b2db      	uxtb	r3, r3
 8009380:	2b22      	cmp	r3, #34	; 0x22
 8009382:	d171      	bne.n	8009468 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	689b      	ldr	r3, [r3, #8]
 8009388:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800938c:	d123      	bne.n	80093d6 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009392:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	691b      	ldr	r3, [r3, #16]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d10e      	bne.n	80093ba <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	685b      	ldr	r3, [r3, #4]
 80093a2:	b29b      	uxth	r3, r3
 80093a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093a8:	b29a      	uxth	r2, r3
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093b2:	1c9a      	adds	r2, r3, #2
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	629a      	str	r2, [r3, #40]	; 0x28
 80093b8:	e029      	b.n	800940e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	685b      	ldr	r3, [r3, #4]
 80093c0:	b29b      	uxth	r3, r3
 80093c2:	b2db      	uxtb	r3, r3
 80093c4:	b29a      	uxth	r2, r3
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093ce:	1c5a      	adds	r2, r3, #1
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	629a      	str	r2, [r3, #40]	; 0x28
 80093d4:	e01b      	b.n	800940e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	691b      	ldr	r3, [r3, #16]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d10a      	bne.n	80093f4 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	6858      	ldr	r0, [r3, #4]
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093e8:	1c59      	adds	r1, r3, #1
 80093ea:	687a      	ldr	r2, [r7, #4]
 80093ec:	6291      	str	r1, [r2, #40]	; 0x28
 80093ee:	b2c2      	uxtb	r2, r0
 80093f0:	701a      	strb	r2, [r3, #0]
 80093f2:	e00c      	b.n	800940e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	685b      	ldr	r3, [r3, #4]
 80093fa:	b2da      	uxtb	r2, r3
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009400:	1c58      	adds	r0, r3, #1
 8009402:	6879      	ldr	r1, [r7, #4]
 8009404:	6288      	str	r0, [r1, #40]	; 0x28
 8009406:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800940a:	b2d2      	uxtb	r2, r2
 800940c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009412:	b29b      	uxth	r3, r3
 8009414:	3b01      	subs	r3, #1
 8009416:	b29b      	uxth	r3, r3
 8009418:	687a      	ldr	r2, [r7, #4]
 800941a:	4619      	mov	r1, r3
 800941c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800941e:	2b00      	cmp	r3, #0
 8009420:	d120      	bne.n	8009464 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	68da      	ldr	r2, [r3, #12]
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f022 0220 	bic.w	r2, r2, #32
 8009430:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	68da      	ldr	r2, [r3, #12]
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009440:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	695a      	ldr	r2, [r3, #20]
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f022 0201 	bic.w	r2, r2, #1
 8009450:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2220      	movs	r2, #32
 8009456:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f7fb f8a6 	bl	80045ac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8009460:	2300      	movs	r3, #0
 8009462:	e002      	b.n	800946a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8009464:	2300      	movs	r3, #0
 8009466:	e000      	b.n	800946a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8009468:	2302      	movs	r3, #2
  }
}
 800946a:	4618      	mov	r0, r3
 800946c:	3710      	adds	r7, #16
 800946e:	46bd      	mov	sp, r7
 8009470:	bd80      	pop	{r7, pc}
	...

08009474 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009478:	b085      	sub	sp, #20
 800947a:	af00      	add	r7, sp, #0
 800947c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	691b      	ldr	r3, [r3, #16]
 8009484:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	68da      	ldr	r2, [r3, #12]
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	430a      	orrs	r2, r1
 8009492:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	689a      	ldr	r2, [r3, #8]
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	691b      	ldr	r3, [r3, #16]
 800949c:	431a      	orrs	r2, r3
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	695b      	ldr	r3, [r3, #20]
 80094a2:	431a      	orrs	r2, r3
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	69db      	ldr	r3, [r3, #28]
 80094a8:	4313      	orrs	r3, r2
 80094aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	68db      	ldr	r3, [r3, #12]
 80094b2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80094b6:	f023 030c 	bic.w	r3, r3, #12
 80094ba:	687a      	ldr	r2, [r7, #4]
 80094bc:	6812      	ldr	r2, [r2, #0]
 80094be:	68f9      	ldr	r1, [r7, #12]
 80094c0:	430b      	orrs	r3, r1
 80094c2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	695b      	ldr	r3, [r3, #20]
 80094ca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	699a      	ldr	r2, [r3, #24]
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	430a      	orrs	r2, r1
 80094d8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	69db      	ldr	r3, [r3, #28]
 80094de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80094e2:	f040 818b 	bne.w	80097fc <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	4ac1      	ldr	r2, [pc, #772]	; (80097f0 <UART_SetConfig+0x37c>)
 80094ec:	4293      	cmp	r3, r2
 80094ee:	d005      	beq.n	80094fc <UART_SetConfig+0x88>
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	4abf      	ldr	r2, [pc, #764]	; (80097f4 <UART_SetConfig+0x380>)
 80094f6:	4293      	cmp	r3, r2
 80094f8:	f040 80bd 	bne.w	8009676 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80094fc:	f7ff fba6 	bl	8008c4c <HAL_RCC_GetPCLK2Freq>
 8009500:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009502:	68bb      	ldr	r3, [r7, #8]
 8009504:	461d      	mov	r5, r3
 8009506:	f04f 0600 	mov.w	r6, #0
 800950a:	46a8      	mov	r8, r5
 800950c:	46b1      	mov	r9, r6
 800950e:	eb18 0308 	adds.w	r3, r8, r8
 8009512:	eb49 0409 	adc.w	r4, r9, r9
 8009516:	4698      	mov	r8, r3
 8009518:	46a1      	mov	r9, r4
 800951a:	eb18 0805 	adds.w	r8, r8, r5
 800951e:	eb49 0906 	adc.w	r9, r9, r6
 8009522:	f04f 0100 	mov.w	r1, #0
 8009526:	f04f 0200 	mov.w	r2, #0
 800952a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800952e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009532:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009536:	4688      	mov	r8, r1
 8009538:	4691      	mov	r9, r2
 800953a:	eb18 0005 	adds.w	r0, r8, r5
 800953e:	eb49 0106 	adc.w	r1, r9, r6
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	685b      	ldr	r3, [r3, #4]
 8009546:	461d      	mov	r5, r3
 8009548:	f04f 0600 	mov.w	r6, #0
 800954c:	196b      	adds	r3, r5, r5
 800954e:	eb46 0406 	adc.w	r4, r6, r6
 8009552:	461a      	mov	r2, r3
 8009554:	4623      	mov	r3, r4
 8009556:	f7f7 fb77 	bl	8000c48 <__aeabi_uldivmod>
 800955a:	4603      	mov	r3, r0
 800955c:	460c      	mov	r4, r1
 800955e:	461a      	mov	r2, r3
 8009560:	4ba5      	ldr	r3, [pc, #660]	; (80097f8 <UART_SetConfig+0x384>)
 8009562:	fba3 2302 	umull	r2, r3, r3, r2
 8009566:	095b      	lsrs	r3, r3, #5
 8009568:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	461d      	mov	r5, r3
 8009570:	f04f 0600 	mov.w	r6, #0
 8009574:	46a9      	mov	r9, r5
 8009576:	46b2      	mov	sl, r6
 8009578:	eb19 0309 	adds.w	r3, r9, r9
 800957c:	eb4a 040a 	adc.w	r4, sl, sl
 8009580:	4699      	mov	r9, r3
 8009582:	46a2      	mov	sl, r4
 8009584:	eb19 0905 	adds.w	r9, r9, r5
 8009588:	eb4a 0a06 	adc.w	sl, sl, r6
 800958c:	f04f 0100 	mov.w	r1, #0
 8009590:	f04f 0200 	mov.w	r2, #0
 8009594:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009598:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800959c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80095a0:	4689      	mov	r9, r1
 80095a2:	4692      	mov	sl, r2
 80095a4:	eb19 0005 	adds.w	r0, r9, r5
 80095a8:	eb4a 0106 	adc.w	r1, sl, r6
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	685b      	ldr	r3, [r3, #4]
 80095b0:	461d      	mov	r5, r3
 80095b2:	f04f 0600 	mov.w	r6, #0
 80095b6:	196b      	adds	r3, r5, r5
 80095b8:	eb46 0406 	adc.w	r4, r6, r6
 80095bc:	461a      	mov	r2, r3
 80095be:	4623      	mov	r3, r4
 80095c0:	f7f7 fb42 	bl	8000c48 <__aeabi_uldivmod>
 80095c4:	4603      	mov	r3, r0
 80095c6:	460c      	mov	r4, r1
 80095c8:	461a      	mov	r2, r3
 80095ca:	4b8b      	ldr	r3, [pc, #556]	; (80097f8 <UART_SetConfig+0x384>)
 80095cc:	fba3 1302 	umull	r1, r3, r3, r2
 80095d0:	095b      	lsrs	r3, r3, #5
 80095d2:	2164      	movs	r1, #100	; 0x64
 80095d4:	fb01 f303 	mul.w	r3, r1, r3
 80095d8:	1ad3      	subs	r3, r2, r3
 80095da:	00db      	lsls	r3, r3, #3
 80095dc:	3332      	adds	r3, #50	; 0x32
 80095de:	4a86      	ldr	r2, [pc, #536]	; (80097f8 <UART_SetConfig+0x384>)
 80095e0:	fba2 2303 	umull	r2, r3, r2, r3
 80095e4:	095b      	lsrs	r3, r3, #5
 80095e6:	005b      	lsls	r3, r3, #1
 80095e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80095ec:	4498      	add	r8, r3
 80095ee:	68bb      	ldr	r3, [r7, #8]
 80095f0:	461d      	mov	r5, r3
 80095f2:	f04f 0600 	mov.w	r6, #0
 80095f6:	46a9      	mov	r9, r5
 80095f8:	46b2      	mov	sl, r6
 80095fa:	eb19 0309 	adds.w	r3, r9, r9
 80095fe:	eb4a 040a 	adc.w	r4, sl, sl
 8009602:	4699      	mov	r9, r3
 8009604:	46a2      	mov	sl, r4
 8009606:	eb19 0905 	adds.w	r9, r9, r5
 800960a:	eb4a 0a06 	adc.w	sl, sl, r6
 800960e:	f04f 0100 	mov.w	r1, #0
 8009612:	f04f 0200 	mov.w	r2, #0
 8009616:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800961a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800961e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009622:	4689      	mov	r9, r1
 8009624:	4692      	mov	sl, r2
 8009626:	eb19 0005 	adds.w	r0, r9, r5
 800962a:	eb4a 0106 	adc.w	r1, sl, r6
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	685b      	ldr	r3, [r3, #4]
 8009632:	461d      	mov	r5, r3
 8009634:	f04f 0600 	mov.w	r6, #0
 8009638:	196b      	adds	r3, r5, r5
 800963a:	eb46 0406 	adc.w	r4, r6, r6
 800963e:	461a      	mov	r2, r3
 8009640:	4623      	mov	r3, r4
 8009642:	f7f7 fb01 	bl	8000c48 <__aeabi_uldivmod>
 8009646:	4603      	mov	r3, r0
 8009648:	460c      	mov	r4, r1
 800964a:	461a      	mov	r2, r3
 800964c:	4b6a      	ldr	r3, [pc, #424]	; (80097f8 <UART_SetConfig+0x384>)
 800964e:	fba3 1302 	umull	r1, r3, r3, r2
 8009652:	095b      	lsrs	r3, r3, #5
 8009654:	2164      	movs	r1, #100	; 0x64
 8009656:	fb01 f303 	mul.w	r3, r1, r3
 800965a:	1ad3      	subs	r3, r2, r3
 800965c:	00db      	lsls	r3, r3, #3
 800965e:	3332      	adds	r3, #50	; 0x32
 8009660:	4a65      	ldr	r2, [pc, #404]	; (80097f8 <UART_SetConfig+0x384>)
 8009662:	fba2 2303 	umull	r2, r3, r2, r3
 8009666:	095b      	lsrs	r3, r3, #5
 8009668:	f003 0207 	and.w	r2, r3, #7
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	4442      	add	r2, r8
 8009672:	609a      	str	r2, [r3, #8]
 8009674:	e26f      	b.n	8009b56 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009676:	f7ff fad5 	bl	8008c24 <HAL_RCC_GetPCLK1Freq>
 800967a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800967c:	68bb      	ldr	r3, [r7, #8]
 800967e:	461d      	mov	r5, r3
 8009680:	f04f 0600 	mov.w	r6, #0
 8009684:	46a8      	mov	r8, r5
 8009686:	46b1      	mov	r9, r6
 8009688:	eb18 0308 	adds.w	r3, r8, r8
 800968c:	eb49 0409 	adc.w	r4, r9, r9
 8009690:	4698      	mov	r8, r3
 8009692:	46a1      	mov	r9, r4
 8009694:	eb18 0805 	adds.w	r8, r8, r5
 8009698:	eb49 0906 	adc.w	r9, r9, r6
 800969c:	f04f 0100 	mov.w	r1, #0
 80096a0:	f04f 0200 	mov.w	r2, #0
 80096a4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80096a8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80096ac:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80096b0:	4688      	mov	r8, r1
 80096b2:	4691      	mov	r9, r2
 80096b4:	eb18 0005 	adds.w	r0, r8, r5
 80096b8:	eb49 0106 	adc.w	r1, r9, r6
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	685b      	ldr	r3, [r3, #4]
 80096c0:	461d      	mov	r5, r3
 80096c2:	f04f 0600 	mov.w	r6, #0
 80096c6:	196b      	adds	r3, r5, r5
 80096c8:	eb46 0406 	adc.w	r4, r6, r6
 80096cc:	461a      	mov	r2, r3
 80096ce:	4623      	mov	r3, r4
 80096d0:	f7f7 faba 	bl	8000c48 <__aeabi_uldivmod>
 80096d4:	4603      	mov	r3, r0
 80096d6:	460c      	mov	r4, r1
 80096d8:	461a      	mov	r2, r3
 80096da:	4b47      	ldr	r3, [pc, #284]	; (80097f8 <UART_SetConfig+0x384>)
 80096dc:	fba3 2302 	umull	r2, r3, r3, r2
 80096e0:	095b      	lsrs	r3, r3, #5
 80096e2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80096e6:	68bb      	ldr	r3, [r7, #8]
 80096e8:	461d      	mov	r5, r3
 80096ea:	f04f 0600 	mov.w	r6, #0
 80096ee:	46a9      	mov	r9, r5
 80096f0:	46b2      	mov	sl, r6
 80096f2:	eb19 0309 	adds.w	r3, r9, r9
 80096f6:	eb4a 040a 	adc.w	r4, sl, sl
 80096fa:	4699      	mov	r9, r3
 80096fc:	46a2      	mov	sl, r4
 80096fe:	eb19 0905 	adds.w	r9, r9, r5
 8009702:	eb4a 0a06 	adc.w	sl, sl, r6
 8009706:	f04f 0100 	mov.w	r1, #0
 800970a:	f04f 0200 	mov.w	r2, #0
 800970e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009712:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009716:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800971a:	4689      	mov	r9, r1
 800971c:	4692      	mov	sl, r2
 800971e:	eb19 0005 	adds.w	r0, r9, r5
 8009722:	eb4a 0106 	adc.w	r1, sl, r6
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	685b      	ldr	r3, [r3, #4]
 800972a:	461d      	mov	r5, r3
 800972c:	f04f 0600 	mov.w	r6, #0
 8009730:	196b      	adds	r3, r5, r5
 8009732:	eb46 0406 	adc.w	r4, r6, r6
 8009736:	461a      	mov	r2, r3
 8009738:	4623      	mov	r3, r4
 800973a:	f7f7 fa85 	bl	8000c48 <__aeabi_uldivmod>
 800973e:	4603      	mov	r3, r0
 8009740:	460c      	mov	r4, r1
 8009742:	461a      	mov	r2, r3
 8009744:	4b2c      	ldr	r3, [pc, #176]	; (80097f8 <UART_SetConfig+0x384>)
 8009746:	fba3 1302 	umull	r1, r3, r3, r2
 800974a:	095b      	lsrs	r3, r3, #5
 800974c:	2164      	movs	r1, #100	; 0x64
 800974e:	fb01 f303 	mul.w	r3, r1, r3
 8009752:	1ad3      	subs	r3, r2, r3
 8009754:	00db      	lsls	r3, r3, #3
 8009756:	3332      	adds	r3, #50	; 0x32
 8009758:	4a27      	ldr	r2, [pc, #156]	; (80097f8 <UART_SetConfig+0x384>)
 800975a:	fba2 2303 	umull	r2, r3, r2, r3
 800975e:	095b      	lsrs	r3, r3, #5
 8009760:	005b      	lsls	r3, r3, #1
 8009762:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009766:	4498      	add	r8, r3
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	461d      	mov	r5, r3
 800976c:	f04f 0600 	mov.w	r6, #0
 8009770:	46a9      	mov	r9, r5
 8009772:	46b2      	mov	sl, r6
 8009774:	eb19 0309 	adds.w	r3, r9, r9
 8009778:	eb4a 040a 	adc.w	r4, sl, sl
 800977c:	4699      	mov	r9, r3
 800977e:	46a2      	mov	sl, r4
 8009780:	eb19 0905 	adds.w	r9, r9, r5
 8009784:	eb4a 0a06 	adc.w	sl, sl, r6
 8009788:	f04f 0100 	mov.w	r1, #0
 800978c:	f04f 0200 	mov.w	r2, #0
 8009790:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009794:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009798:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800979c:	4689      	mov	r9, r1
 800979e:	4692      	mov	sl, r2
 80097a0:	eb19 0005 	adds.w	r0, r9, r5
 80097a4:	eb4a 0106 	adc.w	r1, sl, r6
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	685b      	ldr	r3, [r3, #4]
 80097ac:	461d      	mov	r5, r3
 80097ae:	f04f 0600 	mov.w	r6, #0
 80097b2:	196b      	adds	r3, r5, r5
 80097b4:	eb46 0406 	adc.w	r4, r6, r6
 80097b8:	461a      	mov	r2, r3
 80097ba:	4623      	mov	r3, r4
 80097bc:	f7f7 fa44 	bl	8000c48 <__aeabi_uldivmod>
 80097c0:	4603      	mov	r3, r0
 80097c2:	460c      	mov	r4, r1
 80097c4:	461a      	mov	r2, r3
 80097c6:	4b0c      	ldr	r3, [pc, #48]	; (80097f8 <UART_SetConfig+0x384>)
 80097c8:	fba3 1302 	umull	r1, r3, r3, r2
 80097cc:	095b      	lsrs	r3, r3, #5
 80097ce:	2164      	movs	r1, #100	; 0x64
 80097d0:	fb01 f303 	mul.w	r3, r1, r3
 80097d4:	1ad3      	subs	r3, r2, r3
 80097d6:	00db      	lsls	r3, r3, #3
 80097d8:	3332      	adds	r3, #50	; 0x32
 80097da:	4a07      	ldr	r2, [pc, #28]	; (80097f8 <UART_SetConfig+0x384>)
 80097dc:	fba2 2303 	umull	r2, r3, r2, r3
 80097e0:	095b      	lsrs	r3, r3, #5
 80097e2:	f003 0207 	and.w	r2, r3, #7
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	4442      	add	r2, r8
 80097ec:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80097ee:	e1b2      	b.n	8009b56 <UART_SetConfig+0x6e2>
 80097f0:	40011000 	.word	0x40011000
 80097f4:	40011400 	.word	0x40011400
 80097f8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	4ad7      	ldr	r2, [pc, #860]	; (8009b60 <UART_SetConfig+0x6ec>)
 8009802:	4293      	cmp	r3, r2
 8009804:	d005      	beq.n	8009812 <UART_SetConfig+0x39e>
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	4ad6      	ldr	r2, [pc, #856]	; (8009b64 <UART_SetConfig+0x6f0>)
 800980c:	4293      	cmp	r3, r2
 800980e:	f040 80d1 	bne.w	80099b4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8009812:	f7ff fa1b 	bl	8008c4c <HAL_RCC_GetPCLK2Freq>
 8009816:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	469a      	mov	sl, r3
 800981c:	f04f 0b00 	mov.w	fp, #0
 8009820:	46d0      	mov	r8, sl
 8009822:	46d9      	mov	r9, fp
 8009824:	eb18 0308 	adds.w	r3, r8, r8
 8009828:	eb49 0409 	adc.w	r4, r9, r9
 800982c:	4698      	mov	r8, r3
 800982e:	46a1      	mov	r9, r4
 8009830:	eb18 080a 	adds.w	r8, r8, sl
 8009834:	eb49 090b 	adc.w	r9, r9, fp
 8009838:	f04f 0100 	mov.w	r1, #0
 800983c:	f04f 0200 	mov.w	r2, #0
 8009840:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009844:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009848:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800984c:	4688      	mov	r8, r1
 800984e:	4691      	mov	r9, r2
 8009850:	eb1a 0508 	adds.w	r5, sl, r8
 8009854:	eb4b 0609 	adc.w	r6, fp, r9
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	685b      	ldr	r3, [r3, #4]
 800985c:	4619      	mov	r1, r3
 800985e:	f04f 0200 	mov.w	r2, #0
 8009862:	f04f 0300 	mov.w	r3, #0
 8009866:	f04f 0400 	mov.w	r4, #0
 800986a:	0094      	lsls	r4, r2, #2
 800986c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009870:	008b      	lsls	r3, r1, #2
 8009872:	461a      	mov	r2, r3
 8009874:	4623      	mov	r3, r4
 8009876:	4628      	mov	r0, r5
 8009878:	4631      	mov	r1, r6
 800987a:	f7f7 f9e5 	bl	8000c48 <__aeabi_uldivmod>
 800987e:	4603      	mov	r3, r0
 8009880:	460c      	mov	r4, r1
 8009882:	461a      	mov	r2, r3
 8009884:	4bb8      	ldr	r3, [pc, #736]	; (8009b68 <UART_SetConfig+0x6f4>)
 8009886:	fba3 2302 	umull	r2, r3, r3, r2
 800988a:	095b      	lsrs	r3, r3, #5
 800988c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009890:	68bb      	ldr	r3, [r7, #8]
 8009892:	469b      	mov	fp, r3
 8009894:	f04f 0c00 	mov.w	ip, #0
 8009898:	46d9      	mov	r9, fp
 800989a:	46e2      	mov	sl, ip
 800989c:	eb19 0309 	adds.w	r3, r9, r9
 80098a0:	eb4a 040a 	adc.w	r4, sl, sl
 80098a4:	4699      	mov	r9, r3
 80098a6:	46a2      	mov	sl, r4
 80098a8:	eb19 090b 	adds.w	r9, r9, fp
 80098ac:	eb4a 0a0c 	adc.w	sl, sl, ip
 80098b0:	f04f 0100 	mov.w	r1, #0
 80098b4:	f04f 0200 	mov.w	r2, #0
 80098b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80098bc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80098c0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80098c4:	4689      	mov	r9, r1
 80098c6:	4692      	mov	sl, r2
 80098c8:	eb1b 0509 	adds.w	r5, fp, r9
 80098cc:	eb4c 060a 	adc.w	r6, ip, sl
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	685b      	ldr	r3, [r3, #4]
 80098d4:	4619      	mov	r1, r3
 80098d6:	f04f 0200 	mov.w	r2, #0
 80098da:	f04f 0300 	mov.w	r3, #0
 80098de:	f04f 0400 	mov.w	r4, #0
 80098e2:	0094      	lsls	r4, r2, #2
 80098e4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80098e8:	008b      	lsls	r3, r1, #2
 80098ea:	461a      	mov	r2, r3
 80098ec:	4623      	mov	r3, r4
 80098ee:	4628      	mov	r0, r5
 80098f0:	4631      	mov	r1, r6
 80098f2:	f7f7 f9a9 	bl	8000c48 <__aeabi_uldivmod>
 80098f6:	4603      	mov	r3, r0
 80098f8:	460c      	mov	r4, r1
 80098fa:	461a      	mov	r2, r3
 80098fc:	4b9a      	ldr	r3, [pc, #616]	; (8009b68 <UART_SetConfig+0x6f4>)
 80098fe:	fba3 1302 	umull	r1, r3, r3, r2
 8009902:	095b      	lsrs	r3, r3, #5
 8009904:	2164      	movs	r1, #100	; 0x64
 8009906:	fb01 f303 	mul.w	r3, r1, r3
 800990a:	1ad3      	subs	r3, r2, r3
 800990c:	011b      	lsls	r3, r3, #4
 800990e:	3332      	adds	r3, #50	; 0x32
 8009910:	4a95      	ldr	r2, [pc, #596]	; (8009b68 <UART_SetConfig+0x6f4>)
 8009912:	fba2 2303 	umull	r2, r3, r2, r3
 8009916:	095b      	lsrs	r3, r3, #5
 8009918:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800991c:	4498      	add	r8, r3
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	469b      	mov	fp, r3
 8009922:	f04f 0c00 	mov.w	ip, #0
 8009926:	46d9      	mov	r9, fp
 8009928:	46e2      	mov	sl, ip
 800992a:	eb19 0309 	adds.w	r3, r9, r9
 800992e:	eb4a 040a 	adc.w	r4, sl, sl
 8009932:	4699      	mov	r9, r3
 8009934:	46a2      	mov	sl, r4
 8009936:	eb19 090b 	adds.w	r9, r9, fp
 800993a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800993e:	f04f 0100 	mov.w	r1, #0
 8009942:	f04f 0200 	mov.w	r2, #0
 8009946:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800994a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800994e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009952:	4689      	mov	r9, r1
 8009954:	4692      	mov	sl, r2
 8009956:	eb1b 0509 	adds.w	r5, fp, r9
 800995a:	eb4c 060a 	adc.w	r6, ip, sl
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	685b      	ldr	r3, [r3, #4]
 8009962:	4619      	mov	r1, r3
 8009964:	f04f 0200 	mov.w	r2, #0
 8009968:	f04f 0300 	mov.w	r3, #0
 800996c:	f04f 0400 	mov.w	r4, #0
 8009970:	0094      	lsls	r4, r2, #2
 8009972:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009976:	008b      	lsls	r3, r1, #2
 8009978:	461a      	mov	r2, r3
 800997a:	4623      	mov	r3, r4
 800997c:	4628      	mov	r0, r5
 800997e:	4631      	mov	r1, r6
 8009980:	f7f7 f962 	bl	8000c48 <__aeabi_uldivmod>
 8009984:	4603      	mov	r3, r0
 8009986:	460c      	mov	r4, r1
 8009988:	461a      	mov	r2, r3
 800998a:	4b77      	ldr	r3, [pc, #476]	; (8009b68 <UART_SetConfig+0x6f4>)
 800998c:	fba3 1302 	umull	r1, r3, r3, r2
 8009990:	095b      	lsrs	r3, r3, #5
 8009992:	2164      	movs	r1, #100	; 0x64
 8009994:	fb01 f303 	mul.w	r3, r1, r3
 8009998:	1ad3      	subs	r3, r2, r3
 800999a:	011b      	lsls	r3, r3, #4
 800999c:	3332      	adds	r3, #50	; 0x32
 800999e:	4a72      	ldr	r2, [pc, #456]	; (8009b68 <UART_SetConfig+0x6f4>)
 80099a0:	fba2 2303 	umull	r2, r3, r2, r3
 80099a4:	095b      	lsrs	r3, r3, #5
 80099a6:	f003 020f 	and.w	r2, r3, #15
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	4442      	add	r2, r8
 80099b0:	609a      	str	r2, [r3, #8]
 80099b2:	e0d0      	b.n	8009b56 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80099b4:	f7ff f936 	bl	8008c24 <HAL_RCC_GetPCLK1Freq>
 80099b8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80099ba:	68bb      	ldr	r3, [r7, #8]
 80099bc:	469a      	mov	sl, r3
 80099be:	f04f 0b00 	mov.w	fp, #0
 80099c2:	46d0      	mov	r8, sl
 80099c4:	46d9      	mov	r9, fp
 80099c6:	eb18 0308 	adds.w	r3, r8, r8
 80099ca:	eb49 0409 	adc.w	r4, r9, r9
 80099ce:	4698      	mov	r8, r3
 80099d0:	46a1      	mov	r9, r4
 80099d2:	eb18 080a 	adds.w	r8, r8, sl
 80099d6:	eb49 090b 	adc.w	r9, r9, fp
 80099da:	f04f 0100 	mov.w	r1, #0
 80099de:	f04f 0200 	mov.w	r2, #0
 80099e2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80099e6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80099ea:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80099ee:	4688      	mov	r8, r1
 80099f0:	4691      	mov	r9, r2
 80099f2:	eb1a 0508 	adds.w	r5, sl, r8
 80099f6:	eb4b 0609 	adc.w	r6, fp, r9
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	685b      	ldr	r3, [r3, #4]
 80099fe:	4619      	mov	r1, r3
 8009a00:	f04f 0200 	mov.w	r2, #0
 8009a04:	f04f 0300 	mov.w	r3, #0
 8009a08:	f04f 0400 	mov.w	r4, #0
 8009a0c:	0094      	lsls	r4, r2, #2
 8009a0e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009a12:	008b      	lsls	r3, r1, #2
 8009a14:	461a      	mov	r2, r3
 8009a16:	4623      	mov	r3, r4
 8009a18:	4628      	mov	r0, r5
 8009a1a:	4631      	mov	r1, r6
 8009a1c:	f7f7 f914 	bl	8000c48 <__aeabi_uldivmod>
 8009a20:	4603      	mov	r3, r0
 8009a22:	460c      	mov	r4, r1
 8009a24:	461a      	mov	r2, r3
 8009a26:	4b50      	ldr	r3, [pc, #320]	; (8009b68 <UART_SetConfig+0x6f4>)
 8009a28:	fba3 2302 	umull	r2, r3, r3, r2
 8009a2c:	095b      	lsrs	r3, r3, #5
 8009a2e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009a32:	68bb      	ldr	r3, [r7, #8]
 8009a34:	469b      	mov	fp, r3
 8009a36:	f04f 0c00 	mov.w	ip, #0
 8009a3a:	46d9      	mov	r9, fp
 8009a3c:	46e2      	mov	sl, ip
 8009a3e:	eb19 0309 	adds.w	r3, r9, r9
 8009a42:	eb4a 040a 	adc.w	r4, sl, sl
 8009a46:	4699      	mov	r9, r3
 8009a48:	46a2      	mov	sl, r4
 8009a4a:	eb19 090b 	adds.w	r9, r9, fp
 8009a4e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009a52:	f04f 0100 	mov.w	r1, #0
 8009a56:	f04f 0200 	mov.w	r2, #0
 8009a5a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009a5e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009a62:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009a66:	4689      	mov	r9, r1
 8009a68:	4692      	mov	sl, r2
 8009a6a:	eb1b 0509 	adds.w	r5, fp, r9
 8009a6e:	eb4c 060a 	adc.w	r6, ip, sl
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	685b      	ldr	r3, [r3, #4]
 8009a76:	4619      	mov	r1, r3
 8009a78:	f04f 0200 	mov.w	r2, #0
 8009a7c:	f04f 0300 	mov.w	r3, #0
 8009a80:	f04f 0400 	mov.w	r4, #0
 8009a84:	0094      	lsls	r4, r2, #2
 8009a86:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009a8a:	008b      	lsls	r3, r1, #2
 8009a8c:	461a      	mov	r2, r3
 8009a8e:	4623      	mov	r3, r4
 8009a90:	4628      	mov	r0, r5
 8009a92:	4631      	mov	r1, r6
 8009a94:	f7f7 f8d8 	bl	8000c48 <__aeabi_uldivmod>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	460c      	mov	r4, r1
 8009a9c:	461a      	mov	r2, r3
 8009a9e:	4b32      	ldr	r3, [pc, #200]	; (8009b68 <UART_SetConfig+0x6f4>)
 8009aa0:	fba3 1302 	umull	r1, r3, r3, r2
 8009aa4:	095b      	lsrs	r3, r3, #5
 8009aa6:	2164      	movs	r1, #100	; 0x64
 8009aa8:	fb01 f303 	mul.w	r3, r1, r3
 8009aac:	1ad3      	subs	r3, r2, r3
 8009aae:	011b      	lsls	r3, r3, #4
 8009ab0:	3332      	adds	r3, #50	; 0x32
 8009ab2:	4a2d      	ldr	r2, [pc, #180]	; (8009b68 <UART_SetConfig+0x6f4>)
 8009ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8009ab8:	095b      	lsrs	r3, r3, #5
 8009aba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009abe:	4498      	add	r8, r3
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	469b      	mov	fp, r3
 8009ac4:	f04f 0c00 	mov.w	ip, #0
 8009ac8:	46d9      	mov	r9, fp
 8009aca:	46e2      	mov	sl, ip
 8009acc:	eb19 0309 	adds.w	r3, r9, r9
 8009ad0:	eb4a 040a 	adc.w	r4, sl, sl
 8009ad4:	4699      	mov	r9, r3
 8009ad6:	46a2      	mov	sl, r4
 8009ad8:	eb19 090b 	adds.w	r9, r9, fp
 8009adc:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009ae0:	f04f 0100 	mov.w	r1, #0
 8009ae4:	f04f 0200 	mov.w	r2, #0
 8009ae8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009aec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009af0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009af4:	4689      	mov	r9, r1
 8009af6:	4692      	mov	sl, r2
 8009af8:	eb1b 0509 	adds.w	r5, fp, r9
 8009afc:	eb4c 060a 	adc.w	r6, ip, sl
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	685b      	ldr	r3, [r3, #4]
 8009b04:	4619      	mov	r1, r3
 8009b06:	f04f 0200 	mov.w	r2, #0
 8009b0a:	f04f 0300 	mov.w	r3, #0
 8009b0e:	f04f 0400 	mov.w	r4, #0
 8009b12:	0094      	lsls	r4, r2, #2
 8009b14:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009b18:	008b      	lsls	r3, r1, #2
 8009b1a:	461a      	mov	r2, r3
 8009b1c:	4623      	mov	r3, r4
 8009b1e:	4628      	mov	r0, r5
 8009b20:	4631      	mov	r1, r6
 8009b22:	f7f7 f891 	bl	8000c48 <__aeabi_uldivmod>
 8009b26:	4603      	mov	r3, r0
 8009b28:	460c      	mov	r4, r1
 8009b2a:	461a      	mov	r2, r3
 8009b2c:	4b0e      	ldr	r3, [pc, #56]	; (8009b68 <UART_SetConfig+0x6f4>)
 8009b2e:	fba3 1302 	umull	r1, r3, r3, r2
 8009b32:	095b      	lsrs	r3, r3, #5
 8009b34:	2164      	movs	r1, #100	; 0x64
 8009b36:	fb01 f303 	mul.w	r3, r1, r3
 8009b3a:	1ad3      	subs	r3, r2, r3
 8009b3c:	011b      	lsls	r3, r3, #4
 8009b3e:	3332      	adds	r3, #50	; 0x32
 8009b40:	4a09      	ldr	r2, [pc, #36]	; (8009b68 <UART_SetConfig+0x6f4>)
 8009b42:	fba2 2303 	umull	r2, r3, r2, r3
 8009b46:	095b      	lsrs	r3, r3, #5
 8009b48:	f003 020f 	and.w	r2, r3, #15
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	4442      	add	r2, r8
 8009b52:	609a      	str	r2, [r3, #8]
}
 8009b54:	e7ff      	b.n	8009b56 <UART_SetConfig+0x6e2>
 8009b56:	bf00      	nop
 8009b58:	3714      	adds	r7, #20
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b60:	40011000 	.word	0x40011000
 8009b64:	40011400 	.word	0x40011400
 8009b68:	51eb851f 	.word	0x51eb851f

08009b6c <LL_GPIO_SetPinMode>:
{
 8009b6c:	b480      	push	{r7}
 8009b6e:	b089      	sub	sp, #36	; 0x24
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	60f8      	str	r0, [r7, #12]
 8009b74:	60b9      	str	r1, [r7, #8]
 8009b76:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	681a      	ldr	r2, [r3, #0]
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b80:	697b      	ldr	r3, [r7, #20]
 8009b82:	fa93 f3a3 	rbit	r3, r3
 8009b86:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8009b88:	693b      	ldr	r3, [r7, #16]
 8009b8a:	fab3 f383 	clz	r3, r3
 8009b8e:	b2db      	uxtb	r3, r3
 8009b90:	005b      	lsls	r3, r3, #1
 8009b92:	2103      	movs	r1, #3
 8009b94:	fa01 f303 	lsl.w	r3, r1, r3
 8009b98:	43db      	mvns	r3, r3
 8009b9a:	401a      	ands	r2, r3
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009ba0:	69fb      	ldr	r3, [r7, #28]
 8009ba2:	fa93 f3a3 	rbit	r3, r3
 8009ba6:	61bb      	str	r3, [r7, #24]
  return result;
 8009ba8:	69bb      	ldr	r3, [r7, #24]
 8009baa:	fab3 f383 	clz	r3, r3
 8009bae:	b2db      	uxtb	r3, r3
 8009bb0:	005b      	lsls	r3, r3, #1
 8009bb2:	6879      	ldr	r1, [r7, #4]
 8009bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8009bb8:	431a      	orrs	r2, r3
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	601a      	str	r2, [r3, #0]
}
 8009bbe:	bf00      	nop
 8009bc0:	3724      	adds	r7, #36	; 0x24
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc8:	4770      	bx	lr

08009bca <LL_GPIO_SetPinOutputType>:
{
 8009bca:	b480      	push	{r7}
 8009bcc:	b085      	sub	sp, #20
 8009bce:	af00      	add	r7, sp, #0
 8009bd0:	60f8      	str	r0, [r7, #12]
 8009bd2:	60b9      	str	r1, [r7, #8]
 8009bd4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	685a      	ldr	r2, [r3, #4]
 8009bda:	68bb      	ldr	r3, [r7, #8]
 8009bdc:	43db      	mvns	r3, r3
 8009bde:	401a      	ands	r2, r3
 8009be0:	68bb      	ldr	r3, [r7, #8]
 8009be2:	6879      	ldr	r1, [r7, #4]
 8009be4:	fb01 f303 	mul.w	r3, r1, r3
 8009be8:	431a      	orrs	r2, r3
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	605a      	str	r2, [r3, #4]
}
 8009bee:	bf00      	nop
 8009bf0:	3714      	adds	r7, #20
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf8:	4770      	bx	lr

08009bfa <LL_GPIO_SetPinSpeed>:
{
 8009bfa:	b480      	push	{r7}
 8009bfc:	b089      	sub	sp, #36	; 0x24
 8009bfe:	af00      	add	r7, sp, #0
 8009c00:	60f8      	str	r0, [r7, #12]
 8009c02:	60b9      	str	r1, [r7, #8]
 8009c04:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	689a      	ldr	r2, [r3, #8]
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c0e:	697b      	ldr	r3, [r7, #20]
 8009c10:	fa93 f3a3 	rbit	r3, r3
 8009c14:	613b      	str	r3, [r7, #16]
  return result;
 8009c16:	693b      	ldr	r3, [r7, #16]
 8009c18:	fab3 f383 	clz	r3, r3
 8009c1c:	b2db      	uxtb	r3, r3
 8009c1e:	005b      	lsls	r3, r3, #1
 8009c20:	2103      	movs	r1, #3
 8009c22:	fa01 f303 	lsl.w	r3, r1, r3
 8009c26:	43db      	mvns	r3, r3
 8009c28:	401a      	ands	r2, r3
 8009c2a:	68bb      	ldr	r3, [r7, #8]
 8009c2c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c2e:	69fb      	ldr	r3, [r7, #28]
 8009c30:	fa93 f3a3 	rbit	r3, r3
 8009c34:	61bb      	str	r3, [r7, #24]
  return result;
 8009c36:	69bb      	ldr	r3, [r7, #24]
 8009c38:	fab3 f383 	clz	r3, r3
 8009c3c:	b2db      	uxtb	r3, r3
 8009c3e:	005b      	lsls	r3, r3, #1
 8009c40:	6879      	ldr	r1, [r7, #4]
 8009c42:	fa01 f303 	lsl.w	r3, r1, r3
 8009c46:	431a      	orrs	r2, r3
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	609a      	str	r2, [r3, #8]
}
 8009c4c:	bf00      	nop
 8009c4e:	3724      	adds	r7, #36	; 0x24
 8009c50:	46bd      	mov	sp, r7
 8009c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c56:	4770      	bx	lr

08009c58 <LL_GPIO_SetPinPull>:
{
 8009c58:	b480      	push	{r7}
 8009c5a:	b089      	sub	sp, #36	; 0x24
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	60f8      	str	r0, [r7, #12]
 8009c60:	60b9      	str	r1, [r7, #8]
 8009c62:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	68da      	ldr	r2, [r3, #12]
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c6c:	697b      	ldr	r3, [r7, #20]
 8009c6e:	fa93 f3a3 	rbit	r3, r3
 8009c72:	613b      	str	r3, [r7, #16]
  return result;
 8009c74:	693b      	ldr	r3, [r7, #16]
 8009c76:	fab3 f383 	clz	r3, r3
 8009c7a:	b2db      	uxtb	r3, r3
 8009c7c:	005b      	lsls	r3, r3, #1
 8009c7e:	2103      	movs	r1, #3
 8009c80:	fa01 f303 	lsl.w	r3, r1, r3
 8009c84:	43db      	mvns	r3, r3
 8009c86:	401a      	ands	r2, r3
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c8c:	69fb      	ldr	r3, [r7, #28]
 8009c8e:	fa93 f3a3 	rbit	r3, r3
 8009c92:	61bb      	str	r3, [r7, #24]
  return result;
 8009c94:	69bb      	ldr	r3, [r7, #24]
 8009c96:	fab3 f383 	clz	r3, r3
 8009c9a:	b2db      	uxtb	r3, r3
 8009c9c:	005b      	lsls	r3, r3, #1
 8009c9e:	6879      	ldr	r1, [r7, #4]
 8009ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8009ca4:	431a      	orrs	r2, r3
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	60da      	str	r2, [r3, #12]
}
 8009caa:	bf00      	nop
 8009cac:	3724      	adds	r7, #36	; 0x24
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb4:	4770      	bx	lr

08009cb6 <LL_GPIO_SetAFPin_0_7>:
{
 8009cb6:	b480      	push	{r7}
 8009cb8:	b089      	sub	sp, #36	; 0x24
 8009cba:	af00      	add	r7, sp, #0
 8009cbc:	60f8      	str	r0, [r7, #12]
 8009cbe:	60b9      	str	r1, [r7, #8]
 8009cc0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	6a1a      	ldr	r2, [r3, #32]
 8009cc6:	68bb      	ldr	r3, [r7, #8]
 8009cc8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009cca:	697b      	ldr	r3, [r7, #20]
 8009ccc:	fa93 f3a3 	rbit	r3, r3
 8009cd0:	613b      	str	r3, [r7, #16]
  return result;
 8009cd2:	693b      	ldr	r3, [r7, #16]
 8009cd4:	fab3 f383 	clz	r3, r3
 8009cd8:	b2db      	uxtb	r3, r3
 8009cda:	009b      	lsls	r3, r3, #2
 8009cdc:	210f      	movs	r1, #15
 8009cde:	fa01 f303 	lsl.w	r3, r1, r3
 8009ce2:	43db      	mvns	r3, r3
 8009ce4:	401a      	ands	r2, r3
 8009ce6:	68bb      	ldr	r3, [r7, #8]
 8009ce8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009cea:	69fb      	ldr	r3, [r7, #28]
 8009cec:	fa93 f3a3 	rbit	r3, r3
 8009cf0:	61bb      	str	r3, [r7, #24]
  return result;
 8009cf2:	69bb      	ldr	r3, [r7, #24]
 8009cf4:	fab3 f383 	clz	r3, r3
 8009cf8:	b2db      	uxtb	r3, r3
 8009cfa:	009b      	lsls	r3, r3, #2
 8009cfc:	6879      	ldr	r1, [r7, #4]
 8009cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8009d02:	431a      	orrs	r2, r3
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	621a      	str	r2, [r3, #32]
}
 8009d08:	bf00      	nop
 8009d0a:	3724      	adds	r7, #36	; 0x24
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d12:	4770      	bx	lr

08009d14 <LL_GPIO_SetAFPin_8_15>:
{
 8009d14:	b480      	push	{r7}
 8009d16:	b089      	sub	sp, #36	; 0x24
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	60f8      	str	r0, [r7, #12]
 8009d1c:	60b9      	str	r1, [r7, #8]
 8009d1e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009d24:	68bb      	ldr	r3, [r7, #8]
 8009d26:	0a1b      	lsrs	r3, r3, #8
 8009d28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009d2a:	697b      	ldr	r3, [r7, #20]
 8009d2c:	fa93 f3a3 	rbit	r3, r3
 8009d30:	613b      	str	r3, [r7, #16]
  return result;
 8009d32:	693b      	ldr	r3, [r7, #16]
 8009d34:	fab3 f383 	clz	r3, r3
 8009d38:	b2db      	uxtb	r3, r3
 8009d3a:	009b      	lsls	r3, r3, #2
 8009d3c:	210f      	movs	r1, #15
 8009d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8009d42:	43db      	mvns	r3, r3
 8009d44:	401a      	ands	r2, r3
 8009d46:	68bb      	ldr	r3, [r7, #8]
 8009d48:	0a1b      	lsrs	r3, r3, #8
 8009d4a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009d4c:	69fb      	ldr	r3, [r7, #28]
 8009d4e:	fa93 f3a3 	rbit	r3, r3
 8009d52:	61bb      	str	r3, [r7, #24]
  return result;
 8009d54:	69bb      	ldr	r3, [r7, #24]
 8009d56:	fab3 f383 	clz	r3, r3
 8009d5a:	b2db      	uxtb	r3, r3
 8009d5c:	009b      	lsls	r3, r3, #2
 8009d5e:	6879      	ldr	r1, [r7, #4]
 8009d60:	fa01 f303 	lsl.w	r3, r1, r3
 8009d64:	431a      	orrs	r2, r3
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	625a      	str	r2, [r3, #36]	; 0x24
}
 8009d6a:	bf00      	nop
 8009d6c:	3724      	adds	r7, #36	; 0x24
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d74:	4770      	bx	lr

08009d76 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8009d76:	b580      	push	{r7, lr}
 8009d78:	b088      	sub	sp, #32
 8009d7a:	af00      	add	r7, sp, #0
 8009d7c:	6078      	str	r0, [r7, #4]
 8009d7e:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8009d80:	2300      	movs	r3, #0
 8009d82:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8009d84:	2300      	movs	r3, #0
 8009d86:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009d8e:	697b      	ldr	r3, [r7, #20]
 8009d90:	fa93 f3a3 	rbit	r3, r3
 8009d94:	613b      	str	r3, [r7, #16]
  return result;
 8009d96:	693b      	ldr	r3, [r7, #16]
 8009d98:	fab3 f383 	clz	r3, r3
 8009d9c:	b2db      	uxtb	r3, r3
 8009d9e:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8009da0:	e050      	b.n	8009e44 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	681a      	ldr	r2, [r3, #0]
 8009da6:	2101      	movs	r1, #1
 8009da8:	69fb      	ldr	r3, [r7, #28]
 8009daa:	fa01 f303 	lsl.w	r3, r1, r3
 8009dae:	4013      	ands	r3, r2
 8009db0:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8009db2:	69bb      	ldr	r3, [r7, #24]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d042      	beq.n	8009e3e <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	685b      	ldr	r3, [r3, #4]
 8009dbc:	2b01      	cmp	r3, #1
 8009dbe:	d003      	beq.n	8009dc8 <LL_GPIO_Init+0x52>
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	685b      	ldr	r3, [r3, #4]
 8009dc4:	2b02      	cmp	r3, #2
 8009dc6:	d10d      	bne.n	8009de4 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	689b      	ldr	r3, [r3, #8]
 8009dcc:	461a      	mov	r2, r3
 8009dce:	69b9      	ldr	r1, [r7, #24]
 8009dd0:	6878      	ldr	r0, [r7, #4]
 8009dd2:	f7ff ff12 	bl	8009bfa <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	68db      	ldr	r3, [r3, #12]
 8009dda:	461a      	mov	r2, r3
 8009ddc:	69b9      	ldr	r1, [r7, #24]
 8009dde:	6878      	ldr	r0, [r7, #4]
 8009de0:	f7ff fef3 	bl	8009bca <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	691b      	ldr	r3, [r3, #16]
 8009de8:	461a      	mov	r2, r3
 8009dea:	69b9      	ldr	r1, [r7, #24]
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	f7ff ff33 	bl	8009c58 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	685b      	ldr	r3, [r3, #4]
 8009df6:	2b02      	cmp	r3, #2
 8009df8:	d11a      	bne.n	8009e30 <LL_GPIO_Init+0xba>
 8009dfa:	69bb      	ldr	r3, [r7, #24]
 8009dfc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	fa93 f3a3 	rbit	r3, r3
 8009e04:	60bb      	str	r3, [r7, #8]
  return result;
 8009e06:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8009e08:	fab3 f383 	clz	r3, r3
 8009e0c:	b2db      	uxtb	r3, r3
 8009e0e:	2b07      	cmp	r3, #7
 8009e10:	d807      	bhi.n	8009e22 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	695b      	ldr	r3, [r3, #20]
 8009e16:	461a      	mov	r2, r3
 8009e18:	69b9      	ldr	r1, [r7, #24]
 8009e1a:	6878      	ldr	r0, [r7, #4]
 8009e1c:	f7ff ff4b 	bl	8009cb6 <LL_GPIO_SetAFPin_0_7>
 8009e20:	e006      	b.n	8009e30 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8009e22:	683b      	ldr	r3, [r7, #0]
 8009e24:	695b      	ldr	r3, [r3, #20]
 8009e26:	461a      	mov	r2, r3
 8009e28:	69b9      	ldr	r1, [r7, #24]
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	f7ff ff72 	bl	8009d14 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8009e30:	683b      	ldr	r3, [r7, #0]
 8009e32:	685b      	ldr	r3, [r3, #4]
 8009e34:	461a      	mov	r2, r3
 8009e36:	69b9      	ldr	r1, [r7, #24]
 8009e38:	6878      	ldr	r0, [r7, #4]
 8009e3a:	f7ff fe97 	bl	8009b6c <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8009e3e:	69fb      	ldr	r3, [r7, #28]
 8009e40:	3301      	adds	r3, #1
 8009e42:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	681a      	ldr	r2, [r3, #0]
 8009e48:	69fb      	ldr	r3, [r7, #28]
 8009e4a:	fa22 f303 	lsr.w	r3, r2, r3
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d1a7      	bne.n	8009da2 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8009e52:	2300      	movs	r3, #0
}
 8009e54:	4618      	mov	r0, r3
 8009e56:	3720      	adds	r7, #32
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	bd80      	pop	{r7, pc}

08009e5c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8009e5c:	b480      	push	{r7}
 8009e5e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8009e60:	4b04      	ldr	r3, [pc, #16]	; (8009e74 <LL_RCC_GetSysClkSource+0x18>)
 8009e62:	689b      	ldr	r3, [r3, #8]
 8009e64:	f003 030c 	and.w	r3, r3, #12
}
 8009e68:	4618      	mov	r0, r3
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e70:	4770      	bx	lr
 8009e72:	bf00      	nop
 8009e74:	40023800 	.word	0x40023800

08009e78 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8009e78:	b480      	push	{r7}
 8009e7a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8009e7c:	4b04      	ldr	r3, [pc, #16]	; (8009e90 <LL_RCC_GetAHBPrescaler+0x18>)
 8009e7e:	689b      	ldr	r3, [r3, #8]
 8009e80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8009e84:	4618      	mov	r0, r3
 8009e86:	46bd      	mov	sp, r7
 8009e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8c:	4770      	bx	lr
 8009e8e:	bf00      	nop
 8009e90:	40023800 	.word	0x40023800

08009e94 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8009e94:	b480      	push	{r7}
 8009e96:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8009e98:	4b04      	ldr	r3, [pc, #16]	; (8009eac <LL_RCC_GetAPB1Prescaler+0x18>)
 8009e9a:	689b      	ldr	r3, [r3, #8]
 8009e9c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea8:	4770      	bx	lr
 8009eaa:	bf00      	nop
 8009eac:	40023800 	.word	0x40023800

08009eb0 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8009eb0:	b480      	push	{r7}
 8009eb2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8009eb4:	4b04      	ldr	r3, [pc, #16]	; (8009ec8 <LL_RCC_GetAPB2Prescaler+0x18>)
 8009eb6:	689b      	ldr	r3, [r3, #8]
 8009eb8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec4:	4770      	bx	lr
 8009ec6:	bf00      	nop
 8009ec8:	40023800 	.word	0x40023800

08009ecc <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8009ecc:	b480      	push	{r7}
 8009ece:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8009ed0:	4b04      	ldr	r3, [pc, #16]	; (8009ee4 <LL_RCC_PLL_GetMainSource+0x18>)
 8009ed2:	685b      	ldr	r3, [r3, #4]
 8009ed4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8009ed8:	4618      	mov	r0, r3
 8009eda:	46bd      	mov	sp, r7
 8009edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee0:	4770      	bx	lr
 8009ee2:	bf00      	nop
 8009ee4:	40023800 	.word	0x40023800

08009ee8 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8009ee8:	b480      	push	{r7}
 8009eea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8009eec:	4b04      	ldr	r3, [pc, #16]	; (8009f00 <LL_RCC_PLL_GetN+0x18>)
 8009eee:	685b      	ldr	r3, [r3, #4]
 8009ef0:	099b      	lsrs	r3, r3, #6
 8009ef2:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efe:	4770      	bx	lr
 8009f00:	40023800 	.word	0x40023800

08009f04 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8009f04:	b480      	push	{r7}
 8009f06:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8009f08:	4b04      	ldr	r3, [pc, #16]	; (8009f1c <LL_RCC_PLL_GetP+0x18>)
 8009f0a:	685b      	ldr	r3, [r3, #4]
 8009f0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8009f10:	4618      	mov	r0, r3
 8009f12:	46bd      	mov	sp, r7
 8009f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f18:	4770      	bx	lr
 8009f1a:	bf00      	nop
 8009f1c:	40023800 	.word	0x40023800

08009f20 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8009f20:	b480      	push	{r7}
 8009f22:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8009f24:	4b04      	ldr	r3, [pc, #16]	; (8009f38 <LL_RCC_PLL_GetDivider+0x18>)
 8009f26:	685b      	ldr	r3, [r3, #4]
 8009f28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f34:	4770      	bx	lr
 8009f36:	bf00      	nop
 8009f38:	40023800 	.word	0x40023800

08009f3c <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b082      	sub	sp, #8
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8009f44:	f000 f820 	bl	8009f88 <RCC_GetSystemClockFreq>
 8009f48:	4602      	mov	r2, r0
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	4618      	mov	r0, r3
 8009f54:	f000 f83e 	bl	8009fd4 <RCC_GetHCLKClockFreq>
 8009f58:	4602      	mov	r2, r0
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	685b      	ldr	r3, [r3, #4]
 8009f62:	4618      	mov	r0, r3
 8009f64:	f000 f84c 	bl	800a000 <RCC_GetPCLK1ClockFreq>
 8009f68:	4602      	mov	r2, r0
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	685b      	ldr	r3, [r3, #4]
 8009f72:	4618      	mov	r0, r3
 8009f74:	f000 f858 	bl	800a028 <RCC_GetPCLK2ClockFreq>
 8009f78:	4602      	mov	r2, r0
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	60da      	str	r2, [r3, #12]
}
 8009f7e:	bf00      	nop
 8009f80:	3708      	adds	r7, #8
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd80      	pop	{r7, pc}
	...

08009f88 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b082      	sub	sp, #8
 8009f8c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8009f8e:	2300      	movs	r3, #0
 8009f90:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8009f92:	f7ff ff63 	bl	8009e5c <LL_RCC_GetSysClkSource>
 8009f96:	4603      	mov	r3, r0
 8009f98:	2b04      	cmp	r3, #4
 8009f9a:	d006      	beq.n	8009faa <RCC_GetSystemClockFreq+0x22>
 8009f9c:	2b08      	cmp	r3, #8
 8009f9e:	d007      	beq.n	8009fb0 <RCC_GetSystemClockFreq+0x28>
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d10a      	bne.n	8009fba <RCC_GetSystemClockFreq+0x32>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8009fa4:	4b09      	ldr	r3, [pc, #36]	; (8009fcc <RCC_GetSystemClockFreq+0x44>)
 8009fa6:	607b      	str	r3, [r7, #4]
      break;
 8009fa8:	e00a      	b.n	8009fc0 <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8009faa:	4b09      	ldr	r3, [pc, #36]	; (8009fd0 <RCC_GetSystemClockFreq+0x48>)
 8009fac:	607b      	str	r3, [r7, #4]
      break;
 8009fae:	e007      	b.n	8009fc0 <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8009fb0:	2008      	movs	r0, #8
 8009fb2:	f000 f84d 	bl	800a050 <RCC_PLL_GetFreqDomain_SYS>
 8009fb6:	6078      	str	r0, [r7, #4]
      break;
 8009fb8:	e002      	b.n	8009fc0 <RCC_GetSystemClockFreq+0x38>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8009fba:	4b04      	ldr	r3, [pc, #16]	; (8009fcc <RCC_GetSystemClockFreq+0x44>)
 8009fbc:	607b      	str	r3, [r7, #4]
      break;
 8009fbe:	bf00      	nop
  }

  return frequency;
 8009fc0:	687b      	ldr	r3, [r7, #4]
}
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	3708      	adds	r7, #8
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bd80      	pop	{r7, pc}
 8009fca:	bf00      	nop
 8009fcc:	00f42400 	.word	0x00f42400
 8009fd0:	007a1200 	.word	0x007a1200

08009fd4 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b082      	sub	sp, #8
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8009fdc:	f7ff ff4c 	bl	8009e78 <LL_RCC_GetAHBPrescaler>
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	091b      	lsrs	r3, r3, #4
 8009fe4:	f003 030f 	and.w	r3, r3, #15
 8009fe8:	4a04      	ldr	r2, [pc, #16]	; (8009ffc <RCC_GetHCLKClockFreq+0x28>)
 8009fea:	5cd3      	ldrb	r3, [r2, r3]
 8009fec:	461a      	mov	r2, r3
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	40d3      	lsrs	r3, r2
}
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	3708      	adds	r7, #8
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	bd80      	pop	{r7, pc}
 8009ffa:	bf00      	nop
 8009ffc:	0800e69c 	.word	0x0800e69c

0800a000 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b082      	sub	sp, #8
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800a008:	f7ff ff44 	bl	8009e94 <LL_RCC_GetAPB1Prescaler>
 800a00c:	4603      	mov	r3, r0
 800a00e:	0a9b      	lsrs	r3, r3, #10
 800a010:	4a04      	ldr	r2, [pc, #16]	; (800a024 <RCC_GetPCLK1ClockFreq+0x24>)
 800a012:	5cd3      	ldrb	r3, [r2, r3]
 800a014:	461a      	mov	r2, r3
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	40d3      	lsrs	r3, r2
}
 800a01a:	4618      	mov	r0, r3
 800a01c:	3708      	adds	r7, #8
 800a01e:	46bd      	mov	sp, r7
 800a020:	bd80      	pop	{r7, pc}
 800a022:	bf00      	nop
 800a024:	0800e6ac 	.word	0x0800e6ac

0800a028 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b082      	sub	sp, #8
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800a030:	f7ff ff3e 	bl	8009eb0 <LL_RCC_GetAPB2Prescaler>
 800a034:	4603      	mov	r3, r0
 800a036:	0b5b      	lsrs	r3, r3, #13
 800a038:	4a04      	ldr	r2, [pc, #16]	; (800a04c <RCC_GetPCLK2ClockFreq+0x24>)
 800a03a:	5cd3      	ldrb	r3, [r2, r3]
 800a03c:	461a      	mov	r2, r3
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	40d3      	lsrs	r3, r2
}
 800a042:	4618      	mov	r0, r3
 800a044:	3708      	adds	r7, #8
 800a046:	46bd      	mov	sp, r7
 800a048:	bd80      	pop	{r7, pc}
 800a04a:	bf00      	nop
 800a04c:	0800e6ac 	.word	0x0800e6ac

0800a050 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 800a050:	b590      	push	{r4, r7, lr}
 800a052:	b087      	sub	sp, #28
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 800a058:	2300      	movs	r3, #0
 800a05a:	617b      	str	r3, [r7, #20]
 800a05c:	2300      	movs	r3, #0
 800a05e:	60fb      	str	r3, [r7, #12]
 800a060:	2300      	movs	r3, #0
 800a062:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800a064:	f7ff ff32 	bl	8009ecc <LL_RCC_PLL_GetMainSource>
 800a068:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d003      	beq.n	800a078 <RCC_PLL_GetFreqDomain_SYS+0x28>
 800a070:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a074:	d003      	beq.n	800a07e <RCC_PLL_GetFreqDomain_SYS+0x2e>
 800a076:	e005      	b.n	800a084 <RCC_PLL_GetFreqDomain_SYS+0x34>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800a078:	4b12      	ldr	r3, [pc, #72]	; (800a0c4 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800a07a:	617b      	str	r3, [r7, #20]
      break;
 800a07c:	e005      	b.n	800a08a <RCC_PLL_GetFreqDomain_SYS+0x3a>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800a07e:	4b12      	ldr	r3, [pc, #72]	; (800a0c8 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 800a080:	617b      	str	r3, [r7, #20]
      break;
 800a082:	e002      	b.n	800a08a <RCC_PLL_GetFreqDomain_SYS+0x3a>

    default:
      pllinputfreq = HSI_VALUE;
 800a084:	4b0f      	ldr	r3, [pc, #60]	; (800a0c4 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800a086:	617b      	str	r3, [r7, #20]
      break;
 800a088:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2b08      	cmp	r3, #8
 800a08e:	d113      	bne.n	800a0b8 <RCC_PLL_GetFreqDomain_SYS+0x68>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800a090:	f7ff ff46 	bl	8009f20 <LL_RCC_PLL_GetDivider>
 800a094:	4602      	mov	r2, r0
 800a096:	697b      	ldr	r3, [r7, #20]
 800a098:	fbb3 f4f2 	udiv	r4, r3, r2
 800a09c:	f7ff ff24 	bl	8009ee8 <LL_RCC_PLL_GetN>
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	fb03 f404 	mul.w	r4, r3, r4
 800a0a6:	f7ff ff2d 	bl	8009f04 <LL_RCC_PLL_GetP>
 800a0aa:	4603      	mov	r3, r0
 800a0ac:	0c1b      	lsrs	r3, r3, #16
 800a0ae:	3301      	adds	r3, #1
 800a0b0:	005b      	lsls	r3, r3, #1
 800a0b2:	fbb4 f3f3 	udiv	r3, r4, r3
 800a0b6:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 800a0b8:	693b      	ldr	r3, [r7, #16]
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	371c      	adds	r7, #28
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd90      	pop	{r4, r7, pc}
 800a0c2:	bf00      	nop
 800a0c4:	00f42400 	.word	0x00f42400
 800a0c8:	007a1200 	.word	0x007a1200

0800a0cc <LL_SPI_IsEnabled>:
{
 800a0cc:	b480      	push	{r7}
 800a0ce:	b083      	sub	sp, #12
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0dc:	2b40      	cmp	r3, #64	; 0x40
 800a0de:	d101      	bne.n	800a0e4 <LL_SPI_IsEnabled+0x18>
 800a0e0:	2301      	movs	r3, #1
 800a0e2:	e000      	b.n	800a0e6 <LL_SPI_IsEnabled+0x1a>
 800a0e4:	2300      	movs	r3, #0
}
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	370c      	adds	r7, #12
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f0:	4770      	bx	lr

0800a0f2 <LL_SPI_SetCRCPolynomial>:
{
 800a0f2:	b480      	push	{r7}
 800a0f4:	b083      	sub	sp, #12
 800a0f6:	af00      	add	r7, sp, #0
 800a0f8:	6078      	str	r0, [r7, #4]
 800a0fa:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	b29b      	uxth	r3, r3
 800a100:	461a      	mov	r2, r3
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	611a      	str	r2, [r3, #16]
}
 800a106:	bf00      	nop
 800a108:	370c      	adds	r7, #12
 800a10a:	46bd      	mov	sp, r7
 800a10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a110:	4770      	bx	lr

0800a112 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 800a112:	b580      	push	{r7, lr}
 800a114:	b084      	sub	sp, #16
 800a116:	af00      	add	r7, sp, #0
 800a118:	6078      	str	r0, [r7, #4]
 800a11a:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800a11c:	2301      	movs	r3, #1
 800a11e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 800a120:	6878      	ldr	r0, [r7, #4]
 800a122:	f7ff ffd3 	bl	800a0cc <LL_SPI_IsEnabled>
 800a126:	4603      	mov	r3, r0
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d139      	bne.n	800a1a0 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a134:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 800a138:	683a      	ldr	r2, [r7, #0]
 800a13a:	6811      	ldr	r1, [r2, #0]
 800a13c:	683a      	ldr	r2, [r7, #0]
 800a13e:	6852      	ldr	r2, [r2, #4]
 800a140:	4311      	orrs	r1, r2
 800a142:	683a      	ldr	r2, [r7, #0]
 800a144:	6892      	ldr	r2, [r2, #8]
 800a146:	4311      	orrs	r1, r2
 800a148:	683a      	ldr	r2, [r7, #0]
 800a14a:	68d2      	ldr	r2, [r2, #12]
 800a14c:	4311      	orrs	r1, r2
 800a14e:	683a      	ldr	r2, [r7, #0]
 800a150:	6912      	ldr	r2, [r2, #16]
 800a152:	4311      	orrs	r1, r2
 800a154:	683a      	ldr	r2, [r7, #0]
 800a156:	6952      	ldr	r2, [r2, #20]
 800a158:	4311      	orrs	r1, r2
 800a15a:	683a      	ldr	r2, [r7, #0]
 800a15c:	6992      	ldr	r2, [r2, #24]
 800a15e:	4311      	orrs	r1, r2
 800a160:	683a      	ldr	r2, [r7, #0]
 800a162:	69d2      	ldr	r2, [r2, #28]
 800a164:	4311      	orrs	r1, r2
 800a166:	683a      	ldr	r2, [r7, #0]
 800a168:	6a12      	ldr	r2, [r2, #32]
 800a16a:	430a      	orrs	r2, r1
 800a16c:	431a      	orrs	r2, r3
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	685b      	ldr	r3, [r3, #4]
 800a176:	f023 0204 	bic.w	r2, r3, #4
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	695b      	ldr	r3, [r3, #20]
 800a17e:	0c1b      	lsrs	r3, r3, #16
 800a180:	431a      	orrs	r2, r3
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	6a1b      	ldr	r3, [r3, #32]
 800a18a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a18e:	d105      	bne.n	800a19c <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a194:	4619      	mov	r1, r3
 800a196:	6878      	ldr	r0, [r7, #4]
 800a198:	f7ff ffab 	bl	800a0f2 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 800a19c:	2300      	movs	r3, #0
 800a19e:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	69db      	ldr	r3, [r3, #28]
 800a1a4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	61da      	str	r2, [r3, #28]
  return status;
 800a1ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	3710      	adds	r7, #16
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	bd80      	pop	{r7, pc}

0800a1b6 <LL_TIM_SetPrescaler>:
{
 800a1b6:	b480      	push	{r7}
 800a1b8:	b083      	sub	sp, #12
 800a1ba:	af00      	add	r7, sp, #0
 800a1bc:	6078      	str	r0, [r7, #4]
 800a1be:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	683a      	ldr	r2, [r7, #0]
 800a1c4:	629a      	str	r2, [r3, #40]	; 0x28
}
 800a1c6:	bf00      	nop
 800a1c8:	370c      	adds	r7, #12
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d0:	4770      	bx	lr

0800a1d2 <LL_TIM_SetAutoReload>:
{
 800a1d2:	b480      	push	{r7}
 800a1d4:	b083      	sub	sp, #12
 800a1d6:	af00      	add	r7, sp, #0
 800a1d8:	6078      	str	r0, [r7, #4]
 800a1da:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	683a      	ldr	r2, [r7, #0]
 800a1e0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800a1e2:	bf00      	nop
 800a1e4:	370c      	adds	r7, #12
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ec:	4770      	bx	lr

0800a1ee <LL_TIM_SetRepetitionCounter>:
{
 800a1ee:	b480      	push	{r7}
 800a1f0:	b083      	sub	sp, #12
 800a1f2:	af00      	add	r7, sp, #0
 800a1f4:	6078      	str	r0, [r7, #4]
 800a1f6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	683a      	ldr	r2, [r7, #0]
 800a1fc:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a1fe:	bf00      	nop
 800a200:	370c      	adds	r7, #12
 800a202:	46bd      	mov	sp, r7
 800a204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a208:	4770      	bx	lr

0800a20a <LL_TIM_OC_SetCompareCH1>:
{
 800a20a:	b480      	push	{r7}
 800a20c:	b083      	sub	sp, #12
 800a20e:	af00      	add	r7, sp, #0
 800a210:	6078      	str	r0, [r7, #4]
 800a212:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	683a      	ldr	r2, [r7, #0]
 800a218:	635a      	str	r2, [r3, #52]	; 0x34
}
 800a21a:	bf00      	nop
 800a21c:	370c      	adds	r7, #12
 800a21e:	46bd      	mov	sp, r7
 800a220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a224:	4770      	bx	lr

0800a226 <LL_TIM_OC_SetCompareCH2>:
{
 800a226:	b480      	push	{r7}
 800a228:	b083      	sub	sp, #12
 800a22a:	af00      	add	r7, sp, #0
 800a22c:	6078      	str	r0, [r7, #4]
 800a22e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	683a      	ldr	r2, [r7, #0]
 800a234:	639a      	str	r2, [r3, #56]	; 0x38
}
 800a236:	bf00      	nop
 800a238:	370c      	adds	r7, #12
 800a23a:	46bd      	mov	sp, r7
 800a23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a240:	4770      	bx	lr

0800a242 <LL_TIM_OC_SetCompareCH3>:
{
 800a242:	b480      	push	{r7}
 800a244:	b083      	sub	sp, #12
 800a246:	af00      	add	r7, sp, #0
 800a248:	6078      	str	r0, [r7, #4]
 800a24a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	683a      	ldr	r2, [r7, #0]
 800a250:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800a252:	bf00      	nop
 800a254:	370c      	adds	r7, #12
 800a256:	46bd      	mov	sp, r7
 800a258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25c:	4770      	bx	lr

0800a25e <LL_TIM_OC_SetCompareCH4>:
{
 800a25e:	b480      	push	{r7}
 800a260:	b083      	sub	sp, #12
 800a262:	af00      	add	r7, sp, #0
 800a264:	6078      	str	r0, [r7, #4]
 800a266:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	683a      	ldr	r2, [r7, #0]
 800a26c:	641a      	str	r2, [r3, #64]	; 0x40
}
 800a26e:	bf00      	nop
 800a270:	370c      	adds	r7, #12
 800a272:	46bd      	mov	sp, r7
 800a274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a278:	4770      	bx	lr

0800a27a <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800a27a:	b480      	push	{r7}
 800a27c:	b083      	sub	sp, #12
 800a27e:	af00      	add	r7, sp, #0
 800a280:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	695b      	ldr	r3, [r3, #20]
 800a286:	f043 0201 	orr.w	r2, r3, #1
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	615a      	str	r2, [r3, #20]
}
 800a28e:	bf00      	nop
 800a290:	370c      	adds	r7, #12
 800a292:	46bd      	mov	sp, r7
 800a294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a298:	4770      	bx	lr
	...

0800a29c <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b084      	sub	sp, #16
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
 800a2a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	4a3d      	ldr	r2, [pc, #244]	; (800a3a4 <LL_TIM_Init+0x108>)
 800a2b0:	4293      	cmp	r3, r2
 800a2b2:	d013      	beq.n	800a2dc <LL_TIM_Init+0x40>
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2ba:	d00f      	beq.n	800a2dc <LL_TIM_Init+0x40>
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	4a3a      	ldr	r2, [pc, #232]	; (800a3a8 <LL_TIM_Init+0x10c>)
 800a2c0:	4293      	cmp	r3, r2
 800a2c2:	d00b      	beq.n	800a2dc <LL_TIM_Init+0x40>
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	4a39      	ldr	r2, [pc, #228]	; (800a3ac <LL_TIM_Init+0x110>)
 800a2c8:	4293      	cmp	r3, r2
 800a2ca:	d007      	beq.n	800a2dc <LL_TIM_Init+0x40>
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	4a38      	ldr	r2, [pc, #224]	; (800a3b0 <LL_TIM_Init+0x114>)
 800a2d0:	4293      	cmp	r3, r2
 800a2d2:	d003      	beq.n	800a2dc <LL_TIM_Init+0x40>
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	4a37      	ldr	r2, [pc, #220]	; (800a3b4 <LL_TIM_Init+0x118>)
 800a2d8:	4293      	cmp	r3, r2
 800a2da:	d106      	bne.n	800a2ea <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	685b      	ldr	r3, [r3, #4]
 800a2e6:	4313      	orrs	r3, r2
 800a2e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	4a2d      	ldr	r2, [pc, #180]	; (800a3a4 <LL_TIM_Init+0x108>)
 800a2ee:	4293      	cmp	r3, r2
 800a2f0:	d02b      	beq.n	800a34a <LL_TIM_Init+0xae>
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2f8:	d027      	beq.n	800a34a <LL_TIM_Init+0xae>
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	4a2a      	ldr	r2, [pc, #168]	; (800a3a8 <LL_TIM_Init+0x10c>)
 800a2fe:	4293      	cmp	r3, r2
 800a300:	d023      	beq.n	800a34a <LL_TIM_Init+0xae>
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	4a29      	ldr	r2, [pc, #164]	; (800a3ac <LL_TIM_Init+0x110>)
 800a306:	4293      	cmp	r3, r2
 800a308:	d01f      	beq.n	800a34a <LL_TIM_Init+0xae>
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	4a28      	ldr	r2, [pc, #160]	; (800a3b0 <LL_TIM_Init+0x114>)
 800a30e:	4293      	cmp	r3, r2
 800a310:	d01b      	beq.n	800a34a <LL_TIM_Init+0xae>
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	4a27      	ldr	r2, [pc, #156]	; (800a3b4 <LL_TIM_Init+0x118>)
 800a316:	4293      	cmp	r3, r2
 800a318:	d017      	beq.n	800a34a <LL_TIM_Init+0xae>
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	4a26      	ldr	r2, [pc, #152]	; (800a3b8 <LL_TIM_Init+0x11c>)
 800a31e:	4293      	cmp	r3, r2
 800a320:	d013      	beq.n	800a34a <LL_TIM_Init+0xae>
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	4a25      	ldr	r2, [pc, #148]	; (800a3bc <LL_TIM_Init+0x120>)
 800a326:	4293      	cmp	r3, r2
 800a328:	d00f      	beq.n	800a34a <LL_TIM_Init+0xae>
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	4a24      	ldr	r2, [pc, #144]	; (800a3c0 <LL_TIM_Init+0x124>)
 800a32e:	4293      	cmp	r3, r2
 800a330:	d00b      	beq.n	800a34a <LL_TIM_Init+0xae>
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	4a23      	ldr	r2, [pc, #140]	; (800a3c4 <LL_TIM_Init+0x128>)
 800a336:	4293      	cmp	r3, r2
 800a338:	d007      	beq.n	800a34a <LL_TIM_Init+0xae>
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	4a22      	ldr	r2, [pc, #136]	; (800a3c8 <LL_TIM_Init+0x12c>)
 800a33e:	4293      	cmp	r3, r2
 800a340:	d003      	beq.n	800a34a <LL_TIM_Init+0xae>
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	4a21      	ldr	r2, [pc, #132]	; (800a3cc <LL_TIM_Init+0x130>)
 800a346:	4293      	cmp	r3, r2
 800a348:	d106      	bne.n	800a358 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	68db      	ldr	r3, [r3, #12]
 800a354:	4313      	orrs	r3, r2
 800a356:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	68fa      	ldr	r2, [r7, #12]
 800a35c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	689b      	ldr	r3, [r3, #8]
 800a362:	4619      	mov	r1, r3
 800a364:	6878      	ldr	r0, [r7, #4]
 800a366:	f7ff ff34 	bl	800a1d2 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	881b      	ldrh	r3, [r3, #0]
 800a36e:	4619      	mov	r1, r3
 800a370:	6878      	ldr	r0, [r7, #4]
 800a372:	f7ff ff20 	bl	800a1b6 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	4a0a      	ldr	r2, [pc, #40]	; (800a3a4 <LL_TIM_Init+0x108>)
 800a37a:	4293      	cmp	r3, r2
 800a37c:	d003      	beq.n	800a386 <LL_TIM_Init+0xea>
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	4a0c      	ldr	r2, [pc, #48]	; (800a3b4 <LL_TIM_Init+0x118>)
 800a382:	4293      	cmp	r3, r2
 800a384:	d105      	bne.n	800a392 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	7c1b      	ldrb	r3, [r3, #16]
 800a38a:	4619      	mov	r1, r3
 800a38c:	6878      	ldr	r0, [r7, #4]
 800a38e:	f7ff ff2e 	bl	800a1ee <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800a392:	6878      	ldr	r0, [r7, #4]
 800a394:	f7ff ff71 	bl	800a27a <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 800a398:	2300      	movs	r3, #0
}
 800a39a:	4618      	mov	r0, r3
 800a39c:	3710      	adds	r7, #16
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bd80      	pop	{r7, pc}
 800a3a2:	bf00      	nop
 800a3a4:	40010000 	.word	0x40010000
 800a3a8:	40000400 	.word	0x40000400
 800a3ac:	40000800 	.word	0x40000800
 800a3b0:	40000c00 	.word	0x40000c00
 800a3b4:	40010400 	.word	0x40010400
 800a3b8:	40014000 	.word	0x40014000
 800a3bc:	40014400 	.word	0x40014400
 800a3c0:	40014800 	.word	0x40014800
 800a3c4:	40001800 	.word	0x40001800
 800a3c8:	40001c00 	.word	0x40001c00
 800a3cc:	40002000 	.word	0x40002000

0800a3d0 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	b086      	sub	sp, #24
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	60f8      	str	r0, [r7, #12]
 800a3d8:	60b9      	str	r1, [r7, #8]
 800a3da:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 800a3dc:	2301      	movs	r3, #1
 800a3de:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 800a3e0:	68bb      	ldr	r3, [r7, #8]
 800a3e2:	2b10      	cmp	r3, #16
 800a3e4:	d012      	beq.n	800a40c <LL_TIM_OC_Init+0x3c>
 800a3e6:	2b10      	cmp	r3, #16
 800a3e8:	d802      	bhi.n	800a3f0 <LL_TIM_OC_Init+0x20>
 800a3ea:	2b01      	cmp	r3, #1
 800a3ec:	d007      	beq.n	800a3fe <LL_TIM_OC_Init+0x2e>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 800a3ee:	e022      	b.n	800a436 <LL_TIM_OC_Init+0x66>
  switch (Channel)
 800a3f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3f4:	d011      	beq.n	800a41a <LL_TIM_OC_Init+0x4a>
 800a3f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a3fa:	d015      	beq.n	800a428 <LL_TIM_OC_Init+0x58>
      break;
 800a3fc:	e01b      	b.n	800a436 <LL_TIM_OC_Init+0x66>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 800a3fe:	6879      	ldr	r1, [r7, #4]
 800a400:	68f8      	ldr	r0, [r7, #12]
 800a402:	f000 f81d 	bl	800a440 <OC1Config>
 800a406:	4603      	mov	r3, r0
 800a408:	75fb      	strb	r3, [r7, #23]
      break;
 800a40a:	e014      	b.n	800a436 <LL_TIM_OC_Init+0x66>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 800a40c:	6879      	ldr	r1, [r7, #4]
 800a40e:	68f8      	ldr	r0, [r7, #12]
 800a410:	f000 f882 	bl	800a518 <OC2Config>
 800a414:	4603      	mov	r3, r0
 800a416:	75fb      	strb	r3, [r7, #23]
      break;
 800a418:	e00d      	b.n	800a436 <LL_TIM_OC_Init+0x66>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 800a41a:	6879      	ldr	r1, [r7, #4]
 800a41c:	68f8      	ldr	r0, [r7, #12]
 800a41e:	f000 f8eb 	bl	800a5f8 <OC3Config>
 800a422:	4603      	mov	r3, r0
 800a424:	75fb      	strb	r3, [r7, #23]
      break;
 800a426:	e006      	b.n	800a436 <LL_TIM_OC_Init+0x66>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 800a428:	6879      	ldr	r1, [r7, #4]
 800a42a:	68f8      	ldr	r0, [r7, #12]
 800a42c:	f000 f954 	bl	800a6d8 <OC4Config>
 800a430:	4603      	mov	r3, r0
 800a432:	75fb      	strb	r3, [r7, #23]
      break;
 800a434:	bf00      	nop
  }

  return result;
 800a436:	7dfb      	ldrb	r3, [r7, #23]
}
 800a438:	4618      	mov	r0, r3
 800a43a:	3718      	adds	r7, #24
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bd80      	pop	{r7, pc}

0800a440 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b086      	sub	sp, #24
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
 800a448:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	6a1b      	ldr	r3, [r3, #32]
 800a44e:	f023 0201 	bic.w	r2, r3, #1
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	6a1b      	ldr	r3, [r3, #32]
 800a45a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	685b      	ldr	r3, [r3, #4]
 800a460:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	699b      	ldr	r3, [r3, #24]
 800a466:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	f023 0303 	bic.w	r3, r3, #3
 800a46e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	4313      	orrs	r3, r2
 800a47c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800a47e:	697b      	ldr	r3, [r7, #20]
 800a480:	f023 0202 	bic.w	r2, r3, #2
 800a484:	683b      	ldr	r3, [r7, #0]
 800a486:	691b      	ldr	r3, [r3, #16]
 800a488:	4313      	orrs	r3, r2
 800a48a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 800a48c:	697b      	ldr	r3, [r7, #20]
 800a48e:	f023 0201 	bic.w	r2, r3, #1
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	685b      	ldr	r3, [r3, #4]
 800a496:	4313      	orrs	r3, r2
 800a498:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	4a1c      	ldr	r2, [pc, #112]	; (800a510 <OC1Config+0xd0>)
 800a49e:	4293      	cmp	r3, r2
 800a4a0:	d003      	beq.n	800a4aa <OC1Config+0x6a>
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	4a1b      	ldr	r2, [pc, #108]	; (800a514 <OC1Config+0xd4>)
 800a4a6:	4293      	cmp	r3, r2
 800a4a8:	d11e      	bne.n	800a4e8 <OC1Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 800a4aa:	697b      	ldr	r3, [r7, #20]
 800a4ac:	f023 0208 	bic.w	r2, r3, #8
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	695b      	ldr	r3, [r3, #20]
 800a4b4:	009b      	lsls	r3, r3, #2
 800a4b6:	4313      	orrs	r3, r2
 800a4b8:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800a4ba:	697b      	ldr	r3, [r7, #20]
 800a4bc:	f023 0204 	bic.w	r2, r3, #4
 800a4c0:	683b      	ldr	r3, [r7, #0]
 800a4c2:	689b      	ldr	r3, [r3, #8]
 800a4c4:	009b      	lsls	r3, r3, #2
 800a4c6:	4313      	orrs	r3, r2
 800a4c8:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800a4ca:	693b      	ldr	r3, [r7, #16]
 800a4cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	699b      	ldr	r3, [r3, #24]
 800a4d4:	4313      	orrs	r3, r2
 800a4d6:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 800a4d8:	693b      	ldr	r3, [r7, #16]
 800a4da:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	69db      	ldr	r3, [r3, #28]
 800a4e2:	005b      	lsls	r3, r3, #1
 800a4e4:	4313      	orrs	r3, r2
 800a4e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	693a      	ldr	r2, [r7, #16]
 800a4ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	68fa      	ldr	r2, [r7, #12]
 800a4f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 800a4f4:	683b      	ldr	r3, [r7, #0]
 800a4f6:	68db      	ldr	r3, [r3, #12]
 800a4f8:	4619      	mov	r1, r3
 800a4fa:	6878      	ldr	r0, [r7, #4]
 800a4fc:	f7ff fe85 	bl	800a20a <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	697a      	ldr	r2, [r7, #20]
 800a504:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800a506:	2300      	movs	r3, #0
}
 800a508:	4618      	mov	r0, r3
 800a50a:	3718      	adds	r7, #24
 800a50c:	46bd      	mov	sp, r7
 800a50e:	bd80      	pop	{r7, pc}
 800a510:	40010000 	.word	0x40010000
 800a514:	40010400 	.word	0x40010400

0800a518 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b086      	sub	sp, #24
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
 800a520:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	6a1b      	ldr	r3, [r3, #32]
 800a526:	f023 0210 	bic.w	r2, r3, #16
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	6a1b      	ldr	r3, [r3, #32]
 800a532:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	685b      	ldr	r3, [r3, #4]
 800a538:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	699b      	ldr	r3, [r3, #24]
 800a53e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a546:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800a54e:	683b      	ldr	r3, [r7, #0]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	021b      	lsls	r3, r3, #8
 800a554:	4313      	orrs	r3, r2
 800a556:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 800a558:	697b      	ldr	r3, [r7, #20]
 800a55a:	f023 0220 	bic.w	r2, r3, #32
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	691b      	ldr	r3, [r3, #16]
 800a562:	011b      	lsls	r3, r3, #4
 800a564:	4313      	orrs	r3, r2
 800a566:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 800a568:	697b      	ldr	r3, [r7, #20]
 800a56a:	f023 0210 	bic.w	r2, r3, #16
 800a56e:	683b      	ldr	r3, [r7, #0]
 800a570:	685b      	ldr	r3, [r3, #4]
 800a572:	011b      	lsls	r3, r3, #4
 800a574:	4313      	orrs	r3, r2
 800a576:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	4a1d      	ldr	r2, [pc, #116]	; (800a5f0 <OC2Config+0xd8>)
 800a57c:	4293      	cmp	r3, r2
 800a57e:	d003      	beq.n	800a588 <OC2Config+0x70>
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	4a1c      	ldr	r2, [pc, #112]	; (800a5f4 <OC2Config+0xdc>)
 800a584:	4293      	cmp	r3, r2
 800a586:	d11f      	bne.n	800a5c8 <OC2Config+0xb0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 800a588:	697b      	ldr	r3, [r7, #20]
 800a58a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	695b      	ldr	r3, [r3, #20]
 800a592:	019b      	lsls	r3, r3, #6
 800a594:	4313      	orrs	r3, r2
 800a596:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 800a598:	697b      	ldr	r3, [r7, #20]
 800a59a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800a59e:	683b      	ldr	r3, [r7, #0]
 800a5a0:	689b      	ldr	r3, [r3, #8]
 800a5a2:	019b      	lsls	r3, r3, #6
 800a5a4:	4313      	orrs	r3, r2
 800a5a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 800a5a8:	693b      	ldr	r3, [r7, #16]
 800a5aa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	699b      	ldr	r3, [r3, #24]
 800a5b2:	009b      	lsls	r3, r3, #2
 800a5b4:	4313      	orrs	r3, r2
 800a5b6:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 800a5b8:	693b      	ldr	r3, [r7, #16]
 800a5ba:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	69db      	ldr	r3, [r3, #28]
 800a5c2:	00db      	lsls	r3, r3, #3
 800a5c4:	4313      	orrs	r3, r2
 800a5c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	693a      	ldr	r2, [r7, #16]
 800a5cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	68fa      	ldr	r2, [r7, #12]
 800a5d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	68db      	ldr	r3, [r3, #12]
 800a5d8:	4619      	mov	r1, r3
 800a5da:	6878      	ldr	r0, [r7, #4]
 800a5dc:	f7ff fe23 	bl	800a226 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	697a      	ldr	r2, [r7, #20]
 800a5e4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800a5e6:	2300      	movs	r3, #0
}
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	3718      	adds	r7, #24
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	bd80      	pop	{r7, pc}
 800a5f0:	40010000 	.word	0x40010000
 800a5f4:	40010400 	.word	0x40010400

0800a5f8 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b086      	sub	sp, #24
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
 800a600:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	6a1b      	ldr	r3, [r3, #32]
 800a606:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	6a1b      	ldr	r3, [r3, #32]
 800a612:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	685b      	ldr	r3, [r3, #4]
 800a618:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	69db      	ldr	r3, [r3, #28]
 800a61e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	f023 0303 	bic.w	r3, r3, #3
 800a626:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	4313      	orrs	r3, r2
 800a634:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 800a636:	697b      	ldr	r3, [r7, #20]
 800a638:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	691b      	ldr	r3, [r3, #16]
 800a640:	021b      	lsls	r3, r3, #8
 800a642:	4313      	orrs	r3, r2
 800a644:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 800a646:	697b      	ldr	r3, [r7, #20]
 800a648:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	685b      	ldr	r3, [r3, #4]
 800a650:	021b      	lsls	r3, r3, #8
 800a652:	4313      	orrs	r3, r2
 800a654:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	4a1d      	ldr	r2, [pc, #116]	; (800a6d0 <OC3Config+0xd8>)
 800a65a:	4293      	cmp	r3, r2
 800a65c:	d003      	beq.n	800a666 <OC3Config+0x6e>
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	4a1c      	ldr	r2, [pc, #112]	; (800a6d4 <OC3Config+0xdc>)
 800a662:	4293      	cmp	r3, r2
 800a664:	d11f      	bne.n	800a6a6 <OC3Config+0xae>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 800a666:	697b      	ldr	r3, [r7, #20]
 800a668:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	695b      	ldr	r3, [r3, #20]
 800a670:	029b      	lsls	r3, r3, #10
 800a672:	4313      	orrs	r3, r2
 800a674:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800a676:	697b      	ldr	r3, [r7, #20]
 800a678:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	689b      	ldr	r3, [r3, #8]
 800a680:	029b      	lsls	r3, r3, #10
 800a682:	4313      	orrs	r3, r2
 800a684:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800a686:	693b      	ldr	r3, [r7, #16]
 800a688:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	699b      	ldr	r3, [r3, #24]
 800a690:	011b      	lsls	r3, r3, #4
 800a692:	4313      	orrs	r3, r2
 800a694:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800a696:	693b      	ldr	r3, [r7, #16]
 800a698:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	69db      	ldr	r3, [r3, #28]
 800a6a0:	015b      	lsls	r3, r3, #5
 800a6a2:	4313      	orrs	r3, r2
 800a6a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	693a      	ldr	r2, [r7, #16]
 800a6aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	68fa      	ldr	r2, [r7, #12]
 800a6b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800a6b2:	683b      	ldr	r3, [r7, #0]
 800a6b4:	68db      	ldr	r3, [r3, #12]
 800a6b6:	4619      	mov	r1, r3
 800a6b8:	6878      	ldr	r0, [r7, #4]
 800a6ba:	f7ff fdc2 	bl	800a242 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	697a      	ldr	r2, [r7, #20]
 800a6c2:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800a6c4:	2300      	movs	r3, #0
}
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	3718      	adds	r7, #24
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	bd80      	pop	{r7, pc}
 800a6ce:	bf00      	nop
 800a6d0:	40010000 	.word	0x40010000
 800a6d4:	40010400 	.word	0x40010400

0800a6d8 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b086      	sub	sp, #24
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
 800a6e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	6a1b      	ldr	r3, [r3, #32]
 800a6e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	6a1b      	ldr	r3, [r3, #32]
 800a6f2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	685b      	ldr	r3, [r3, #4]
 800a6f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	69db      	ldr	r3, [r3, #28]
 800a6fe:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a706:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	021b      	lsls	r3, r3, #8
 800a714:	4313      	orrs	r3, r2
 800a716:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 800a718:	693b      	ldr	r3, [r7, #16]
 800a71a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	691b      	ldr	r3, [r3, #16]
 800a722:	031b      	lsls	r3, r3, #12
 800a724:	4313      	orrs	r3, r2
 800a726:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 800a728:	693b      	ldr	r3, [r7, #16]
 800a72a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a72e:	683b      	ldr	r3, [r7, #0]
 800a730:	685b      	ldr	r3, [r3, #4]
 800a732:	031b      	lsls	r3, r3, #12
 800a734:	4313      	orrs	r3, r2
 800a736:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	4a11      	ldr	r2, [pc, #68]	; (800a780 <OC4Config+0xa8>)
 800a73c:	4293      	cmp	r3, r2
 800a73e:	d003      	beq.n	800a748 <OC4Config+0x70>
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	4a10      	ldr	r2, [pc, #64]	; (800a784 <OC4Config+0xac>)
 800a744:	4293      	cmp	r3, r2
 800a746:	d107      	bne.n	800a758 <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 800a748:	697b      	ldr	r3, [r7, #20]
 800a74a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	699b      	ldr	r3, [r3, #24]
 800a752:	019b      	lsls	r3, r3, #6
 800a754:	4313      	orrs	r3, r2
 800a756:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	697a      	ldr	r2, [r7, #20]
 800a75c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	68fa      	ldr	r2, [r7, #12]
 800a762:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 800a764:	683b      	ldr	r3, [r7, #0]
 800a766:	68db      	ldr	r3, [r3, #12]
 800a768:	4619      	mov	r1, r3
 800a76a:	6878      	ldr	r0, [r7, #4]
 800a76c:	f7ff fd77 	bl	800a25e <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	693a      	ldr	r2, [r7, #16]
 800a774:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800a776:	2300      	movs	r3, #0
}
 800a778:	4618      	mov	r0, r3
 800a77a:	3718      	adds	r7, #24
 800a77c:	46bd      	mov	sp, r7
 800a77e:	bd80      	pop	{r7, pc}
 800a780:	40010000 	.word	0x40010000
 800a784:	40010400 	.word	0x40010400

0800a788 <LL_USART_IsEnabled>:
{
 800a788:	b480      	push	{r7}
 800a78a:	b083      	sub	sp, #12
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	68db      	ldr	r3, [r3, #12]
 800a794:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a798:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a79c:	bf0c      	ite	eq
 800a79e:	2301      	moveq	r3, #1
 800a7a0:	2300      	movne	r3, #0
 800a7a2:	b2db      	uxtb	r3, r3
}
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	370c      	adds	r7, #12
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ae:	4770      	bx	lr

0800a7b0 <LL_USART_SetStopBitsLength>:
{
 800a7b0:	b480      	push	{r7}
 800a7b2:	b083      	sub	sp, #12
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
 800a7b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	691b      	ldr	r3, [r3, #16]
 800a7be:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	431a      	orrs	r2, r3
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	611a      	str	r2, [r3, #16]
}
 800a7ca:	bf00      	nop
 800a7cc:	370c      	adds	r7, #12
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d4:	4770      	bx	lr

0800a7d6 <LL_USART_SetHWFlowCtrl>:
{
 800a7d6:	b480      	push	{r7}
 800a7d8:	b083      	sub	sp, #12
 800a7da:	af00      	add	r7, sp, #0
 800a7dc:	6078      	str	r0, [r7, #4]
 800a7de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	695b      	ldr	r3, [r3, #20]
 800a7e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	431a      	orrs	r2, r3
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	615a      	str	r2, [r3, #20]
}
 800a7f0:	bf00      	nop
 800a7f2:	370c      	adds	r7, #12
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fa:	4770      	bx	lr

0800a7fc <LL_USART_SetBaudRate>:
{
 800a7fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a800:	b085      	sub	sp, #20
 800a802:	af00      	add	r7, sp, #0
 800a804:	60f8      	str	r0, [r7, #12]
 800a806:	60b9      	str	r1, [r7, #8]
 800a808:	607a      	str	r2, [r7, #4]
 800a80a:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a812:	f040 80c1 	bne.w	800a998 <LL_USART_SetBaudRate+0x19c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 800a816:	68bb      	ldr	r3, [r7, #8]
 800a818:	461d      	mov	r5, r3
 800a81a:	f04f 0600 	mov.w	r6, #0
 800a81e:	46a8      	mov	r8, r5
 800a820:	46b1      	mov	r9, r6
 800a822:	eb18 0308 	adds.w	r3, r8, r8
 800a826:	eb49 0409 	adc.w	r4, r9, r9
 800a82a:	4698      	mov	r8, r3
 800a82c:	46a1      	mov	r9, r4
 800a82e:	eb18 0805 	adds.w	r8, r8, r5
 800a832:	eb49 0906 	adc.w	r9, r9, r6
 800a836:	f04f 0100 	mov.w	r1, #0
 800a83a:	f04f 0200 	mov.w	r2, #0
 800a83e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a842:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a846:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a84a:	4688      	mov	r8, r1
 800a84c:	4691      	mov	r9, r2
 800a84e:	eb18 0005 	adds.w	r0, r8, r5
 800a852:	eb49 0106 	adc.w	r1, r9, r6
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	461d      	mov	r5, r3
 800a85a:	f04f 0600 	mov.w	r6, #0
 800a85e:	196b      	adds	r3, r5, r5
 800a860:	eb46 0406 	adc.w	r4, r6, r6
 800a864:	461a      	mov	r2, r3
 800a866:	4623      	mov	r3, r4
 800a868:	f7f6 f9ee 	bl	8000c48 <__aeabi_uldivmod>
 800a86c:	4603      	mov	r3, r0
 800a86e:	460c      	mov	r4, r1
 800a870:	461a      	mov	r2, r3
 800a872:	4bb5      	ldr	r3, [pc, #724]	; (800ab48 <LL_USART_SetBaudRate+0x34c>)
 800a874:	fba3 2302 	umull	r2, r3, r3, r2
 800a878:	095b      	lsrs	r3, r3, #5
 800a87a:	b29b      	uxth	r3, r3
 800a87c:	011b      	lsls	r3, r3, #4
 800a87e:	fa1f f883 	uxth.w	r8, r3
 800a882:	68bb      	ldr	r3, [r7, #8]
 800a884:	461d      	mov	r5, r3
 800a886:	f04f 0600 	mov.w	r6, #0
 800a88a:	46a9      	mov	r9, r5
 800a88c:	46b2      	mov	sl, r6
 800a88e:	eb19 0309 	adds.w	r3, r9, r9
 800a892:	eb4a 040a 	adc.w	r4, sl, sl
 800a896:	4699      	mov	r9, r3
 800a898:	46a2      	mov	sl, r4
 800a89a:	eb19 0905 	adds.w	r9, r9, r5
 800a89e:	eb4a 0a06 	adc.w	sl, sl, r6
 800a8a2:	f04f 0100 	mov.w	r1, #0
 800a8a6:	f04f 0200 	mov.w	r2, #0
 800a8aa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a8ae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a8b2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a8b6:	4689      	mov	r9, r1
 800a8b8:	4692      	mov	sl, r2
 800a8ba:	eb19 0005 	adds.w	r0, r9, r5
 800a8be:	eb4a 0106 	adc.w	r1, sl, r6
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	461d      	mov	r5, r3
 800a8c6:	f04f 0600 	mov.w	r6, #0
 800a8ca:	196b      	adds	r3, r5, r5
 800a8cc:	eb46 0406 	adc.w	r4, r6, r6
 800a8d0:	461a      	mov	r2, r3
 800a8d2:	4623      	mov	r3, r4
 800a8d4:	f7f6 f9b8 	bl	8000c48 <__aeabi_uldivmod>
 800a8d8:	4603      	mov	r3, r0
 800a8da:	460c      	mov	r4, r1
 800a8dc:	461a      	mov	r2, r3
 800a8de:	4b9a      	ldr	r3, [pc, #616]	; (800ab48 <LL_USART_SetBaudRate+0x34c>)
 800a8e0:	fba3 1302 	umull	r1, r3, r3, r2
 800a8e4:	095b      	lsrs	r3, r3, #5
 800a8e6:	2164      	movs	r1, #100	; 0x64
 800a8e8:	fb01 f303 	mul.w	r3, r1, r3
 800a8ec:	1ad3      	subs	r3, r2, r3
 800a8ee:	00db      	lsls	r3, r3, #3
 800a8f0:	3332      	adds	r3, #50	; 0x32
 800a8f2:	4a95      	ldr	r2, [pc, #596]	; (800ab48 <LL_USART_SetBaudRate+0x34c>)
 800a8f4:	fba2 2303 	umull	r2, r3, r2, r3
 800a8f8:	095b      	lsrs	r3, r3, #5
 800a8fa:	b29b      	uxth	r3, r3
 800a8fc:	005b      	lsls	r3, r3, #1
 800a8fe:	b29b      	uxth	r3, r3
 800a900:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a904:	b29b      	uxth	r3, r3
 800a906:	4443      	add	r3, r8
 800a908:	fa1f f883 	uxth.w	r8, r3
 800a90c:	68bb      	ldr	r3, [r7, #8]
 800a90e:	461d      	mov	r5, r3
 800a910:	f04f 0600 	mov.w	r6, #0
 800a914:	46a9      	mov	r9, r5
 800a916:	46b2      	mov	sl, r6
 800a918:	eb19 0309 	adds.w	r3, r9, r9
 800a91c:	eb4a 040a 	adc.w	r4, sl, sl
 800a920:	4699      	mov	r9, r3
 800a922:	46a2      	mov	sl, r4
 800a924:	eb19 0905 	adds.w	r9, r9, r5
 800a928:	eb4a 0a06 	adc.w	sl, sl, r6
 800a92c:	f04f 0100 	mov.w	r1, #0
 800a930:	f04f 0200 	mov.w	r2, #0
 800a934:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a938:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a93c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a940:	4689      	mov	r9, r1
 800a942:	4692      	mov	sl, r2
 800a944:	eb19 0005 	adds.w	r0, r9, r5
 800a948:	eb4a 0106 	adc.w	r1, sl, r6
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	461d      	mov	r5, r3
 800a950:	f04f 0600 	mov.w	r6, #0
 800a954:	196b      	adds	r3, r5, r5
 800a956:	eb46 0406 	adc.w	r4, r6, r6
 800a95a:	461a      	mov	r2, r3
 800a95c:	4623      	mov	r3, r4
 800a95e:	f7f6 f973 	bl	8000c48 <__aeabi_uldivmod>
 800a962:	4603      	mov	r3, r0
 800a964:	460c      	mov	r4, r1
 800a966:	461a      	mov	r2, r3
 800a968:	4b77      	ldr	r3, [pc, #476]	; (800ab48 <LL_USART_SetBaudRate+0x34c>)
 800a96a:	fba3 1302 	umull	r1, r3, r3, r2
 800a96e:	095b      	lsrs	r3, r3, #5
 800a970:	2164      	movs	r1, #100	; 0x64
 800a972:	fb01 f303 	mul.w	r3, r1, r3
 800a976:	1ad3      	subs	r3, r2, r3
 800a978:	00db      	lsls	r3, r3, #3
 800a97a:	3332      	adds	r3, #50	; 0x32
 800a97c:	4a72      	ldr	r2, [pc, #456]	; (800ab48 <LL_USART_SetBaudRate+0x34c>)
 800a97e:	fba2 2303 	umull	r2, r3, r2, r3
 800a982:	095b      	lsrs	r3, r3, #5
 800a984:	b29b      	uxth	r3, r3
 800a986:	f003 0307 	and.w	r3, r3, #7
 800a98a:	b29b      	uxth	r3, r3
 800a98c:	4443      	add	r3, r8
 800a98e:	b29b      	uxth	r3, r3
 800a990:	461a      	mov	r2, r3
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	609a      	str	r2, [r3, #8]
}
 800a996:	e0d2      	b.n	800ab3e <LL_USART_SetBaudRate+0x342>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800a998:	68bb      	ldr	r3, [r7, #8]
 800a99a:	469a      	mov	sl, r3
 800a99c:	f04f 0b00 	mov.w	fp, #0
 800a9a0:	46d0      	mov	r8, sl
 800a9a2:	46d9      	mov	r9, fp
 800a9a4:	eb18 0308 	adds.w	r3, r8, r8
 800a9a8:	eb49 0409 	adc.w	r4, r9, r9
 800a9ac:	4698      	mov	r8, r3
 800a9ae:	46a1      	mov	r9, r4
 800a9b0:	eb18 080a 	adds.w	r8, r8, sl
 800a9b4:	eb49 090b 	adc.w	r9, r9, fp
 800a9b8:	f04f 0100 	mov.w	r1, #0
 800a9bc:	f04f 0200 	mov.w	r2, #0
 800a9c0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a9c4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a9c8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a9cc:	4688      	mov	r8, r1
 800a9ce:	4691      	mov	r9, r2
 800a9d0:	eb1a 0508 	adds.w	r5, sl, r8
 800a9d4:	eb4b 0609 	adc.w	r6, fp, r9
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	4619      	mov	r1, r3
 800a9dc:	f04f 0200 	mov.w	r2, #0
 800a9e0:	f04f 0300 	mov.w	r3, #0
 800a9e4:	f04f 0400 	mov.w	r4, #0
 800a9e8:	0094      	lsls	r4, r2, #2
 800a9ea:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a9ee:	008b      	lsls	r3, r1, #2
 800a9f0:	461a      	mov	r2, r3
 800a9f2:	4623      	mov	r3, r4
 800a9f4:	4628      	mov	r0, r5
 800a9f6:	4631      	mov	r1, r6
 800a9f8:	f7f6 f926 	bl	8000c48 <__aeabi_uldivmod>
 800a9fc:	4603      	mov	r3, r0
 800a9fe:	460c      	mov	r4, r1
 800aa00:	461a      	mov	r2, r3
 800aa02:	4b51      	ldr	r3, [pc, #324]	; (800ab48 <LL_USART_SetBaudRate+0x34c>)
 800aa04:	fba3 2302 	umull	r2, r3, r3, r2
 800aa08:	095b      	lsrs	r3, r3, #5
 800aa0a:	b29b      	uxth	r3, r3
 800aa0c:	011b      	lsls	r3, r3, #4
 800aa0e:	fa1f f883 	uxth.w	r8, r3
 800aa12:	68bb      	ldr	r3, [r7, #8]
 800aa14:	469b      	mov	fp, r3
 800aa16:	f04f 0c00 	mov.w	ip, #0
 800aa1a:	46d9      	mov	r9, fp
 800aa1c:	46e2      	mov	sl, ip
 800aa1e:	eb19 0309 	adds.w	r3, r9, r9
 800aa22:	eb4a 040a 	adc.w	r4, sl, sl
 800aa26:	4699      	mov	r9, r3
 800aa28:	46a2      	mov	sl, r4
 800aa2a:	eb19 090b 	adds.w	r9, r9, fp
 800aa2e:	eb4a 0a0c 	adc.w	sl, sl, ip
 800aa32:	f04f 0100 	mov.w	r1, #0
 800aa36:	f04f 0200 	mov.w	r2, #0
 800aa3a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800aa3e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800aa42:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800aa46:	4689      	mov	r9, r1
 800aa48:	4692      	mov	sl, r2
 800aa4a:	eb1b 0509 	adds.w	r5, fp, r9
 800aa4e:	eb4c 060a 	adc.w	r6, ip, sl
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	4619      	mov	r1, r3
 800aa56:	f04f 0200 	mov.w	r2, #0
 800aa5a:	f04f 0300 	mov.w	r3, #0
 800aa5e:	f04f 0400 	mov.w	r4, #0
 800aa62:	0094      	lsls	r4, r2, #2
 800aa64:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800aa68:	008b      	lsls	r3, r1, #2
 800aa6a:	461a      	mov	r2, r3
 800aa6c:	4623      	mov	r3, r4
 800aa6e:	4628      	mov	r0, r5
 800aa70:	4631      	mov	r1, r6
 800aa72:	f7f6 f8e9 	bl	8000c48 <__aeabi_uldivmod>
 800aa76:	4603      	mov	r3, r0
 800aa78:	460c      	mov	r4, r1
 800aa7a:	461a      	mov	r2, r3
 800aa7c:	4b32      	ldr	r3, [pc, #200]	; (800ab48 <LL_USART_SetBaudRate+0x34c>)
 800aa7e:	fba3 1302 	umull	r1, r3, r3, r2
 800aa82:	095b      	lsrs	r3, r3, #5
 800aa84:	2164      	movs	r1, #100	; 0x64
 800aa86:	fb01 f303 	mul.w	r3, r1, r3
 800aa8a:	1ad3      	subs	r3, r2, r3
 800aa8c:	011b      	lsls	r3, r3, #4
 800aa8e:	3332      	adds	r3, #50	; 0x32
 800aa90:	4a2d      	ldr	r2, [pc, #180]	; (800ab48 <LL_USART_SetBaudRate+0x34c>)
 800aa92:	fba2 2303 	umull	r2, r3, r2, r3
 800aa96:	095b      	lsrs	r3, r3, #5
 800aa98:	b29b      	uxth	r3, r3
 800aa9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aa9e:	b29b      	uxth	r3, r3
 800aaa0:	4443      	add	r3, r8
 800aaa2:	fa1f f883 	uxth.w	r8, r3
 800aaa6:	68bb      	ldr	r3, [r7, #8]
 800aaa8:	469b      	mov	fp, r3
 800aaaa:	f04f 0c00 	mov.w	ip, #0
 800aaae:	46d9      	mov	r9, fp
 800aab0:	46e2      	mov	sl, ip
 800aab2:	eb19 0309 	adds.w	r3, r9, r9
 800aab6:	eb4a 040a 	adc.w	r4, sl, sl
 800aaba:	4699      	mov	r9, r3
 800aabc:	46a2      	mov	sl, r4
 800aabe:	eb19 090b 	adds.w	r9, r9, fp
 800aac2:	eb4a 0a0c 	adc.w	sl, sl, ip
 800aac6:	f04f 0100 	mov.w	r1, #0
 800aaca:	f04f 0200 	mov.w	r2, #0
 800aace:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800aad2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800aad6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800aada:	4689      	mov	r9, r1
 800aadc:	4692      	mov	sl, r2
 800aade:	eb1b 0509 	adds.w	r5, fp, r9
 800aae2:	eb4c 060a 	adc.w	r6, ip, sl
 800aae6:	683b      	ldr	r3, [r7, #0]
 800aae8:	4619      	mov	r1, r3
 800aaea:	f04f 0200 	mov.w	r2, #0
 800aaee:	f04f 0300 	mov.w	r3, #0
 800aaf2:	f04f 0400 	mov.w	r4, #0
 800aaf6:	0094      	lsls	r4, r2, #2
 800aaf8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800aafc:	008b      	lsls	r3, r1, #2
 800aafe:	461a      	mov	r2, r3
 800ab00:	4623      	mov	r3, r4
 800ab02:	4628      	mov	r0, r5
 800ab04:	4631      	mov	r1, r6
 800ab06:	f7f6 f89f 	bl	8000c48 <__aeabi_uldivmod>
 800ab0a:	4603      	mov	r3, r0
 800ab0c:	460c      	mov	r4, r1
 800ab0e:	461a      	mov	r2, r3
 800ab10:	4b0d      	ldr	r3, [pc, #52]	; (800ab48 <LL_USART_SetBaudRate+0x34c>)
 800ab12:	fba3 1302 	umull	r1, r3, r3, r2
 800ab16:	095b      	lsrs	r3, r3, #5
 800ab18:	2164      	movs	r1, #100	; 0x64
 800ab1a:	fb01 f303 	mul.w	r3, r1, r3
 800ab1e:	1ad3      	subs	r3, r2, r3
 800ab20:	011b      	lsls	r3, r3, #4
 800ab22:	3332      	adds	r3, #50	; 0x32
 800ab24:	4a08      	ldr	r2, [pc, #32]	; (800ab48 <LL_USART_SetBaudRate+0x34c>)
 800ab26:	fba2 2303 	umull	r2, r3, r2, r3
 800ab2a:	095b      	lsrs	r3, r3, #5
 800ab2c:	b29b      	uxth	r3, r3
 800ab2e:	f003 030f 	and.w	r3, r3, #15
 800ab32:	b29b      	uxth	r3, r3
 800ab34:	4443      	add	r3, r8
 800ab36:	b29b      	uxth	r3, r3
 800ab38:	461a      	mov	r2, r3
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	609a      	str	r2, [r3, #8]
}
 800ab3e:	bf00      	nop
 800ab40:	3714      	adds	r7, #20
 800ab42:	46bd      	mov	sp, r7
 800ab44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab48:	51eb851f 	.word	0x51eb851f

0800ab4c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b088      	sub	sp, #32
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
 800ab54:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800ab56:	2301      	movs	r3, #1
 800ab58:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800ab5e:	6878      	ldr	r0, [r7, #4]
 800ab60:	f7ff fe12 	bl	800a788 <LL_USART_IsEnabled>
 800ab64:	4603      	mov	r3, r0
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d15e      	bne.n	800ac28 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	68db      	ldr	r3, [r3, #12]
 800ab6e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800ab72:	f023 030c 	bic.w	r3, r3, #12
 800ab76:	683a      	ldr	r2, [r7, #0]
 800ab78:	6851      	ldr	r1, [r2, #4]
 800ab7a:	683a      	ldr	r2, [r7, #0]
 800ab7c:	68d2      	ldr	r2, [r2, #12]
 800ab7e:	4311      	orrs	r1, r2
 800ab80:	683a      	ldr	r2, [r7, #0]
 800ab82:	6912      	ldr	r2, [r2, #16]
 800ab84:	4311      	orrs	r1, r2
 800ab86:	683a      	ldr	r2, [r7, #0]
 800ab88:	6992      	ldr	r2, [r2, #24]
 800ab8a:	430a      	orrs	r2, r1
 800ab8c:	431a      	orrs	r2, r3
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	689b      	ldr	r3, [r3, #8]
 800ab96:	4619      	mov	r1, r3
 800ab98:	6878      	ldr	r0, [r7, #4]
 800ab9a:	f7ff fe09 	bl	800a7b0 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800ab9e:	683b      	ldr	r3, [r7, #0]
 800aba0:	695b      	ldr	r3, [r3, #20]
 800aba2:	4619      	mov	r1, r3
 800aba4:	6878      	ldr	r0, [r7, #4]
 800aba6:	f7ff fe16 	bl	800a7d6 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800abaa:	f107 0308 	add.w	r3, r7, #8
 800abae:	4618      	mov	r0, r3
 800abb0:	f7ff f9c4 	bl	8009f3c <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	4a1f      	ldr	r2, [pc, #124]	; (800ac34 <LL_USART_Init+0xe8>)
 800abb8:	4293      	cmp	r3, r2
 800abba:	d102      	bne.n	800abc2 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800abbc:	697b      	ldr	r3, [r7, #20]
 800abbe:	61bb      	str	r3, [r7, #24]
 800abc0:	e021      	b.n	800ac06 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	4a1c      	ldr	r2, [pc, #112]	; (800ac38 <LL_USART_Init+0xec>)
 800abc6:	4293      	cmp	r3, r2
 800abc8:	d102      	bne.n	800abd0 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800abca:	693b      	ldr	r3, [r7, #16]
 800abcc:	61bb      	str	r3, [r7, #24]
 800abce:	e01a      	b.n	800ac06 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	4a1a      	ldr	r2, [pc, #104]	; (800ac3c <LL_USART_Init+0xf0>)
 800abd4:	4293      	cmp	r3, r2
 800abd6:	d102      	bne.n	800abde <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800abd8:	693b      	ldr	r3, [r7, #16]
 800abda:	61bb      	str	r3, [r7, #24]
 800abdc:	e013      	b.n	800ac06 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	4a17      	ldr	r2, [pc, #92]	; (800ac40 <LL_USART_Init+0xf4>)
 800abe2:	4293      	cmp	r3, r2
 800abe4:	d102      	bne.n	800abec <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800abe6:	697b      	ldr	r3, [r7, #20]
 800abe8:	61bb      	str	r3, [r7, #24]
 800abea:	e00c      	b.n	800ac06 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	4a15      	ldr	r2, [pc, #84]	; (800ac44 <LL_USART_Init+0xf8>)
 800abf0:	4293      	cmp	r3, r2
 800abf2:	d102      	bne.n	800abfa <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800abf4:	693b      	ldr	r3, [r7, #16]
 800abf6:	61bb      	str	r3, [r7, #24]
 800abf8:	e005      	b.n	800ac06 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	4a12      	ldr	r2, [pc, #72]	; (800ac48 <LL_USART_Init+0xfc>)
 800abfe:	4293      	cmp	r3, r2
 800ac00:	d101      	bne.n	800ac06 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800ac02:	693b      	ldr	r3, [r7, #16]
 800ac04:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800ac06:	69bb      	ldr	r3, [r7, #24]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d00d      	beq.n	800ac28 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d009      	beq.n	800ac28 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 800ac14:	2300      	movs	r3, #0
 800ac16:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 800ac18:	683b      	ldr	r3, [r7, #0]
 800ac1a:	699a      	ldr	r2, [r3, #24]
 800ac1c:	683b      	ldr	r3, [r7, #0]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	69b9      	ldr	r1, [r7, #24]
 800ac22:	6878      	ldr	r0, [r7, #4]
 800ac24:	f7ff fdea 	bl	800a7fc <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800ac28:	7ffb      	ldrb	r3, [r7, #31]
}
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	3720      	adds	r7, #32
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	bd80      	pop	{r7, pc}
 800ac32:	bf00      	nop
 800ac34:	40011000 	.word	0x40011000
 800ac38:	40004400 	.word	0x40004400
 800ac3c:	40004800 	.word	0x40004800
 800ac40:	40011400 	.word	0x40011400
 800ac44:	40004c00 	.word	0x40004c00
 800ac48:	40005000 	.word	0x40005000

0800ac4c <__errno>:
 800ac4c:	4b01      	ldr	r3, [pc, #4]	; (800ac54 <__errno+0x8>)
 800ac4e:	6818      	ldr	r0, [r3, #0]
 800ac50:	4770      	bx	lr
 800ac52:	bf00      	nop
 800ac54:	20000010 	.word	0x20000010

0800ac58 <__libc_init_array>:
 800ac58:	b570      	push	{r4, r5, r6, lr}
 800ac5a:	4e0d      	ldr	r6, [pc, #52]	; (800ac90 <__libc_init_array+0x38>)
 800ac5c:	4c0d      	ldr	r4, [pc, #52]	; (800ac94 <__libc_init_array+0x3c>)
 800ac5e:	1ba4      	subs	r4, r4, r6
 800ac60:	10a4      	asrs	r4, r4, #2
 800ac62:	2500      	movs	r5, #0
 800ac64:	42a5      	cmp	r5, r4
 800ac66:	d109      	bne.n	800ac7c <__libc_init_array+0x24>
 800ac68:	4e0b      	ldr	r6, [pc, #44]	; (800ac98 <__libc_init_array+0x40>)
 800ac6a:	4c0c      	ldr	r4, [pc, #48]	; (800ac9c <__libc_init_array+0x44>)
 800ac6c:	f003 fb7e 	bl	800e36c <_init>
 800ac70:	1ba4      	subs	r4, r4, r6
 800ac72:	10a4      	asrs	r4, r4, #2
 800ac74:	2500      	movs	r5, #0
 800ac76:	42a5      	cmp	r5, r4
 800ac78:	d105      	bne.n	800ac86 <__libc_init_array+0x2e>
 800ac7a:	bd70      	pop	{r4, r5, r6, pc}
 800ac7c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ac80:	4798      	blx	r3
 800ac82:	3501      	adds	r5, #1
 800ac84:	e7ee      	b.n	800ac64 <__libc_init_array+0xc>
 800ac86:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ac8a:	4798      	blx	r3
 800ac8c:	3501      	adds	r5, #1
 800ac8e:	e7f2      	b.n	800ac76 <__libc_init_array+0x1e>
 800ac90:	0800e9dc 	.word	0x0800e9dc
 800ac94:	0800e9dc 	.word	0x0800e9dc
 800ac98:	0800e9dc 	.word	0x0800e9dc
 800ac9c:	0800e9e0 	.word	0x0800e9e0

0800aca0 <memset>:
 800aca0:	4402      	add	r2, r0
 800aca2:	4603      	mov	r3, r0
 800aca4:	4293      	cmp	r3, r2
 800aca6:	d100      	bne.n	800acaa <memset+0xa>
 800aca8:	4770      	bx	lr
 800acaa:	f803 1b01 	strb.w	r1, [r3], #1
 800acae:	e7f9      	b.n	800aca4 <memset+0x4>

0800acb0 <__cvt>:
 800acb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800acb4:	ec55 4b10 	vmov	r4, r5, d0
 800acb8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800acba:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800acbe:	2d00      	cmp	r5, #0
 800acc0:	460e      	mov	r6, r1
 800acc2:	4691      	mov	r9, r2
 800acc4:	4619      	mov	r1, r3
 800acc6:	bfb8      	it	lt
 800acc8:	4622      	movlt	r2, r4
 800acca:	462b      	mov	r3, r5
 800accc:	f027 0720 	bic.w	r7, r7, #32
 800acd0:	bfbb      	ittet	lt
 800acd2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800acd6:	461d      	movlt	r5, r3
 800acd8:	2300      	movge	r3, #0
 800acda:	232d      	movlt	r3, #45	; 0x2d
 800acdc:	bfb8      	it	lt
 800acde:	4614      	movlt	r4, r2
 800ace0:	2f46      	cmp	r7, #70	; 0x46
 800ace2:	700b      	strb	r3, [r1, #0]
 800ace4:	d004      	beq.n	800acf0 <__cvt+0x40>
 800ace6:	2f45      	cmp	r7, #69	; 0x45
 800ace8:	d100      	bne.n	800acec <__cvt+0x3c>
 800acea:	3601      	adds	r6, #1
 800acec:	2102      	movs	r1, #2
 800acee:	e000      	b.n	800acf2 <__cvt+0x42>
 800acf0:	2103      	movs	r1, #3
 800acf2:	ab03      	add	r3, sp, #12
 800acf4:	9301      	str	r3, [sp, #4]
 800acf6:	ab02      	add	r3, sp, #8
 800acf8:	9300      	str	r3, [sp, #0]
 800acfa:	4632      	mov	r2, r6
 800acfc:	4653      	mov	r3, sl
 800acfe:	ec45 4b10 	vmov	d0, r4, r5
 800ad02:	f000 fdf9 	bl	800b8f8 <_dtoa_r>
 800ad06:	2f47      	cmp	r7, #71	; 0x47
 800ad08:	4680      	mov	r8, r0
 800ad0a:	d102      	bne.n	800ad12 <__cvt+0x62>
 800ad0c:	f019 0f01 	tst.w	r9, #1
 800ad10:	d026      	beq.n	800ad60 <__cvt+0xb0>
 800ad12:	2f46      	cmp	r7, #70	; 0x46
 800ad14:	eb08 0906 	add.w	r9, r8, r6
 800ad18:	d111      	bne.n	800ad3e <__cvt+0x8e>
 800ad1a:	f898 3000 	ldrb.w	r3, [r8]
 800ad1e:	2b30      	cmp	r3, #48	; 0x30
 800ad20:	d10a      	bne.n	800ad38 <__cvt+0x88>
 800ad22:	2200      	movs	r2, #0
 800ad24:	2300      	movs	r3, #0
 800ad26:	4620      	mov	r0, r4
 800ad28:	4629      	mov	r1, r5
 800ad2a:	f7f5 fecd 	bl	8000ac8 <__aeabi_dcmpeq>
 800ad2e:	b918      	cbnz	r0, 800ad38 <__cvt+0x88>
 800ad30:	f1c6 0601 	rsb	r6, r6, #1
 800ad34:	f8ca 6000 	str.w	r6, [sl]
 800ad38:	f8da 3000 	ldr.w	r3, [sl]
 800ad3c:	4499      	add	r9, r3
 800ad3e:	2200      	movs	r2, #0
 800ad40:	2300      	movs	r3, #0
 800ad42:	4620      	mov	r0, r4
 800ad44:	4629      	mov	r1, r5
 800ad46:	f7f5 febf 	bl	8000ac8 <__aeabi_dcmpeq>
 800ad4a:	b938      	cbnz	r0, 800ad5c <__cvt+0xac>
 800ad4c:	2230      	movs	r2, #48	; 0x30
 800ad4e:	9b03      	ldr	r3, [sp, #12]
 800ad50:	454b      	cmp	r3, r9
 800ad52:	d205      	bcs.n	800ad60 <__cvt+0xb0>
 800ad54:	1c59      	adds	r1, r3, #1
 800ad56:	9103      	str	r1, [sp, #12]
 800ad58:	701a      	strb	r2, [r3, #0]
 800ad5a:	e7f8      	b.n	800ad4e <__cvt+0x9e>
 800ad5c:	f8cd 900c 	str.w	r9, [sp, #12]
 800ad60:	9b03      	ldr	r3, [sp, #12]
 800ad62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ad64:	eba3 0308 	sub.w	r3, r3, r8
 800ad68:	4640      	mov	r0, r8
 800ad6a:	6013      	str	r3, [r2, #0]
 800ad6c:	b004      	add	sp, #16
 800ad6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800ad72 <__exponent>:
 800ad72:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ad74:	2900      	cmp	r1, #0
 800ad76:	4604      	mov	r4, r0
 800ad78:	bfba      	itte	lt
 800ad7a:	4249      	neglt	r1, r1
 800ad7c:	232d      	movlt	r3, #45	; 0x2d
 800ad7e:	232b      	movge	r3, #43	; 0x2b
 800ad80:	2909      	cmp	r1, #9
 800ad82:	f804 2b02 	strb.w	r2, [r4], #2
 800ad86:	7043      	strb	r3, [r0, #1]
 800ad88:	dd20      	ble.n	800adcc <__exponent+0x5a>
 800ad8a:	f10d 0307 	add.w	r3, sp, #7
 800ad8e:	461f      	mov	r7, r3
 800ad90:	260a      	movs	r6, #10
 800ad92:	fb91 f5f6 	sdiv	r5, r1, r6
 800ad96:	fb06 1115 	mls	r1, r6, r5, r1
 800ad9a:	3130      	adds	r1, #48	; 0x30
 800ad9c:	2d09      	cmp	r5, #9
 800ad9e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ada2:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800ada6:	4629      	mov	r1, r5
 800ada8:	dc09      	bgt.n	800adbe <__exponent+0x4c>
 800adaa:	3130      	adds	r1, #48	; 0x30
 800adac:	3b02      	subs	r3, #2
 800adae:	f802 1c01 	strb.w	r1, [r2, #-1]
 800adb2:	42bb      	cmp	r3, r7
 800adb4:	4622      	mov	r2, r4
 800adb6:	d304      	bcc.n	800adc2 <__exponent+0x50>
 800adb8:	1a10      	subs	r0, r2, r0
 800adba:	b003      	add	sp, #12
 800adbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800adbe:	4613      	mov	r3, r2
 800adc0:	e7e7      	b.n	800ad92 <__exponent+0x20>
 800adc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800adc6:	f804 2b01 	strb.w	r2, [r4], #1
 800adca:	e7f2      	b.n	800adb2 <__exponent+0x40>
 800adcc:	2330      	movs	r3, #48	; 0x30
 800adce:	4419      	add	r1, r3
 800add0:	7083      	strb	r3, [r0, #2]
 800add2:	1d02      	adds	r2, r0, #4
 800add4:	70c1      	strb	r1, [r0, #3]
 800add6:	e7ef      	b.n	800adb8 <__exponent+0x46>

0800add8 <_printf_float>:
 800add8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800addc:	b08d      	sub	sp, #52	; 0x34
 800adde:	460c      	mov	r4, r1
 800ade0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800ade4:	4616      	mov	r6, r2
 800ade6:	461f      	mov	r7, r3
 800ade8:	4605      	mov	r5, r0
 800adea:	f001 fcb7 	bl	800c75c <_localeconv_r>
 800adee:	6803      	ldr	r3, [r0, #0]
 800adf0:	9304      	str	r3, [sp, #16]
 800adf2:	4618      	mov	r0, r3
 800adf4:	f7f5 f9ec 	bl	80001d0 <strlen>
 800adf8:	2300      	movs	r3, #0
 800adfa:	930a      	str	r3, [sp, #40]	; 0x28
 800adfc:	f8d8 3000 	ldr.w	r3, [r8]
 800ae00:	9005      	str	r0, [sp, #20]
 800ae02:	3307      	adds	r3, #7
 800ae04:	f023 0307 	bic.w	r3, r3, #7
 800ae08:	f103 0208 	add.w	r2, r3, #8
 800ae0c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ae10:	f8d4 b000 	ldr.w	fp, [r4]
 800ae14:	f8c8 2000 	str.w	r2, [r8]
 800ae18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae1c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ae20:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ae24:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ae28:	9307      	str	r3, [sp, #28]
 800ae2a:	f8cd 8018 	str.w	r8, [sp, #24]
 800ae2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ae32:	4ba7      	ldr	r3, [pc, #668]	; (800b0d0 <_printf_float+0x2f8>)
 800ae34:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ae38:	f7f5 fe78 	bl	8000b2c <__aeabi_dcmpun>
 800ae3c:	bb70      	cbnz	r0, 800ae9c <_printf_float+0xc4>
 800ae3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ae42:	4ba3      	ldr	r3, [pc, #652]	; (800b0d0 <_printf_float+0x2f8>)
 800ae44:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ae48:	f7f5 fe52 	bl	8000af0 <__aeabi_dcmple>
 800ae4c:	bb30      	cbnz	r0, 800ae9c <_printf_float+0xc4>
 800ae4e:	2200      	movs	r2, #0
 800ae50:	2300      	movs	r3, #0
 800ae52:	4640      	mov	r0, r8
 800ae54:	4649      	mov	r1, r9
 800ae56:	f7f5 fe41 	bl	8000adc <__aeabi_dcmplt>
 800ae5a:	b110      	cbz	r0, 800ae62 <_printf_float+0x8a>
 800ae5c:	232d      	movs	r3, #45	; 0x2d
 800ae5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae62:	4a9c      	ldr	r2, [pc, #624]	; (800b0d4 <_printf_float+0x2fc>)
 800ae64:	4b9c      	ldr	r3, [pc, #624]	; (800b0d8 <_printf_float+0x300>)
 800ae66:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800ae6a:	bf8c      	ite	hi
 800ae6c:	4690      	movhi	r8, r2
 800ae6e:	4698      	movls	r8, r3
 800ae70:	2303      	movs	r3, #3
 800ae72:	f02b 0204 	bic.w	r2, fp, #4
 800ae76:	6123      	str	r3, [r4, #16]
 800ae78:	6022      	str	r2, [r4, #0]
 800ae7a:	f04f 0900 	mov.w	r9, #0
 800ae7e:	9700      	str	r7, [sp, #0]
 800ae80:	4633      	mov	r3, r6
 800ae82:	aa0b      	add	r2, sp, #44	; 0x2c
 800ae84:	4621      	mov	r1, r4
 800ae86:	4628      	mov	r0, r5
 800ae88:	f000 f9e6 	bl	800b258 <_printf_common>
 800ae8c:	3001      	adds	r0, #1
 800ae8e:	f040 808d 	bne.w	800afac <_printf_float+0x1d4>
 800ae92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ae96:	b00d      	add	sp, #52	; 0x34
 800ae98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae9c:	4642      	mov	r2, r8
 800ae9e:	464b      	mov	r3, r9
 800aea0:	4640      	mov	r0, r8
 800aea2:	4649      	mov	r1, r9
 800aea4:	f7f5 fe42 	bl	8000b2c <__aeabi_dcmpun>
 800aea8:	b110      	cbz	r0, 800aeb0 <_printf_float+0xd8>
 800aeaa:	4a8c      	ldr	r2, [pc, #560]	; (800b0dc <_printf_float+0x304>)
 800aeac:	4b8c      	ldr	r3, [pc, #560]	; (800b0e0 <_printf_float+0x308>)
 800aeae:	e7da      	b.n	800ae66 <_printf_float+0x8e>
 800aeb0:	6861      	ldr	r1, [r4, #4]
 800aeb2:	1c4b      	adds	r3, r1, #1
 800aeb4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800aeb8:	a80a      	add	r0, sp, #40	; 0x28
 800aeba:	d13e      	bne.n	800af3a <_printf_float+0x162>
 800aebc:	2306      	movs	r3, #6
 800aebe:	6063      	str	r3, [r4, #4]
 800aec0:	2300      	movs	r3, #0
 800aec2:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800aec6:	ab09      	add	r3, sp, #36	; 0x24
 800aec8:	9300      	str	r3, [sp, #0]
 800aeca:	ec49 8b10 	vmov	d0, r8, r9
 800aece:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800aed2:	6022      	str	r2, [r4, #0]
 800aed4:	f8cd a004 	str.w	sl, [sp, #4]
 800aed8:	6861      	ldr	r1, [r4, #4]
 800aeda:	4628      	mov	r0, r5
 800aedc:	f7ff fee8 	bl	800acb0 <__cvt>
 800aee0:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800aee4:	2b47      	cmp	r3, #71	; 0x47
 800aee6:	4680      	mov	r8, r0
 800aee8:	d109      	bne.n	800aefe <_printf_float+0x126>
 800aeea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aeec:	1cd8      	adds	r0, r3, #3
 800aeee:	db02      	blt.n	800aef6 <_printf_float+0x11e>
 800aef0:	6862      	ldr	r2, [r4, #4]
 800aef2:	4293      	cmp	r3, r2
 800aef4:	dd47      	ble.n	800af86 <_printf_float+0x1ae>
 800aef6:	f1aa 0a02 	sub.w	sl, sl, #2
 800aefa:	fa5f fa8a 	uxtb.w	sl, sl
 800aefe:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800af02:	9909      	ldr	r1, [sp, #36]	; 0x24
 800af04:	d824      	bhi.n	800af50 <_printf_float+0x178>
 800af06:	3901      	subs	r1, #1
 800af08:	4652      	mov	r2, sl
 800af0a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800af0e:	9109      	str	r1, [sp, #36]	; 0x24
 800af10:	f7ff ff2f 	bl	800ad72 <__exponent>
 800af14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800af16:	1813      	adds	r3, r2, r0
 800af18:	2a01      	cmp	r2, #1
 800af1a:	4681      	mov	r9, r0
 800af1c:	6123      	str	r3, [r4, #16]
 800af1e:	dc02      	bgt.n	800af26 <_printf_float+0x14e>
 800af20:	6822      	ldr	r2, [r4, #0]
 800af22:	07d1      	lsls	r1, r2, #31
 800af24:	d501      	bpl.n	800af2a <_printf_float+0x152>
 800af26:	3301      	adds	r3, #1
 800af28:	6123      	str	r3, [r4, #16]
 800af2a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d0a5      	beq.n	800ae7e <_printf_float+0xa6>
 800af32:	232d      	movs	r3, #45	; 0x2d
 800af34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af38:	e7a1      	b.n	800ae7e <_printf_float+0xa6>
 800af3a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800af3e:	f000 8177 	beq.w	800b230 <_printf_float+0x458>
 800af42:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800af46:	d1bb      	bne.n	800aec0 <_printf_float+0xe8>
 800af48:	2900      	cmp	r1, #0
 800af4a:	d1b9      	bne.n	800aec0 <_printf_float+0xe8>
 800af4c:	2301      	movs	r3, #1
 800af4e:	e7b6      	b.n	800aebe <_printf_float+0xe6>
 800af50:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800af54:	d119      	bne.n	800af8a <_printf_float+0x1b2>
 800af56:	2900      	cmp	r1, #0
 800af58:	6863      	ldr	r3, [r4, #4]
 800af5a:	dd0c      	ble.n	800af76 <_printf_float+0x19e>
 800af5c:	6121      	str	r1, [r4, #16]
 800af5e:	b913      	cbnz	r3, 800af66 <_printf_float+0x18e>
 800af60:	6822      	ldr	r2, [r4, #0]
 800af62:	07d2      	lsls	r2, r2, #31
 800af64:	d502      	bpl.n	800af6c <_printf_float+0x194>
 800af66:	3301      	adds	r3, #1
 800af68:	440b      	add	r3, r1
 800af6a:	6123      	str	r3, [r4, #16]
 800af6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af6e:	65a3      	str	r3, [r4, #88]	; 0x58
 800af70:	f04f 0900 	mov.w	r9, #0
 800af74:	e7d9      	b.n	800af2a <_printf_float+0x152>
 800af76:	b913      	cbnz	r3, 800af7e <_printf_float+0x1a6>
 800af78:	6822      	ldr	r2, [r4, #0]
 800af7a:	07d0      	lsls	r0, r2, #31
 800af7c:	d501      	bpl.n	800af82 <_printf_float+0x1aa>
 800af7e:	3302      	adds	r3, #2
 800af80:	e7f3      	b.n	800af6a <_printf_float+0x192>
 800af82:	2301      	movs	r3, #1
 800af84:	e7f1      	b.n	800af6a <_printf_float+0x192>
 800af86:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800af8a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800af8e:	4293      	cmp	r3, r2
 800af90:	db05      	blt.n	800af9e <_printf_float+0x1c6>
 800af92:	6822      	ldr	r2, [r4, #0]
 800af94:	6123      	str	r3, [r4, #16]
 800af96:	07d1      	lsls	r1, r2, #31
 800af98:	d5e8      	bpl.n	800af6c <_printf_float+0x194>
 800af9a:	3301      	adds	r3, #1
 800af9c:	e7e5      	b.n	800af6a <_printf_float+0x192>
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	bfd4      	ite	le
 800afa2:	f1c3 0302 	rsble	r3, r3, #2
 800afa6:	2301      	movgt	r3, #1
 800afa8:	4413      	add	r3, r2
 800afaa:	e7de      	b.n	800af6a <_printf_float+0x192>
 800afac:	6823      	ldr	r3, [r4, #0]
 800afae:	055a      	lsls	r2, r3, #21
 800afb0:	d407      	bmi.n	800afc2 <_printf_float+0x1ea>
 800afb2:	6923      	ldr	r3, [r4, #16]
 800afb4:	4642      	mov	r2, r8
 800afb6:	4631      	mov	r1, r6
 800afb8:	4628      	mov	r0, r5
 800afba:	47b8      	blx	r7
 800afbc:	3001      	adds	r0, #1
 800afbe:	d12b      	bne.n	800b018 <_printf_float+0x240>
 800afc0:	e767      	b.n	800ae92 <_printf_float+0xba>
 800afc2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800afc6:	f240 80dc 	bls.w	800b182 <_printf_float+0x3aa>
 800afca:	2200      	movs	r2, #0
 800afcc:	2300      	movs	r3, #0
 800afce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800afd2:	f7f5 fd79 	bl	8000ac8 <__aeabi_dcmpeq>
 800afd6:	2800      	cmp	r0, #0
 800afd8:	d033      	beq.n	800b042 <_printf_float+0x26a>
 800afda:	2301      	movs	r3, #1
 800afdc:	4a41      	ldr	r2, [pc, #260]	; (800b0e4 <_printf_float+0x30c>)
 800afde:	4631      	mov	r1, r6
 800afe0:	4628      	mov	r0, r5
 800afe2:	47b8      	blx	r7
 800afe4:	3001      	adds	r0, #1
 800afe6:	f43f af54 	beq.w	800ae92 <_printf_float+0xba>
 800afea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800afee:	429a      	cmp	r2, r3
 800aff0:	db02      	blt.n	800aff8 <_printf_float+0x220>
 800aff2:	6823      	ldr	r3, [r4, #0]
 800aff4:	07d8      	lsls	r0, r3, #31
 800aff6:	d50f      	bpl.n	800b018 <_printf_float+0x240>
 800aff8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800affc:	4631      	mov	r1, r6
 800affe:	4628      	mov	r0, r5
 800b000:	47b8      	blx	r7
 800b002:	3001      	adds	r0, #1
 800b004:	f43f af45 	beq.w	800ae92 <_printf_float+0xba>
 800b008:	f04f 0800 	mov.w	r8, #0
 800b00c:	f104 091a 	add.w	r9, r4, #26
 800b010:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b012:	3b01      	subs	r3, #1
 800b014:	4543      	cmp	r3, r8
 800b016:	dc09      	bgt.n	800b02c <_printf_float+0x254>
 800b018:	6823      	ldr	r3, [r4, #0]
 800b01a:	079b      	lsls	r3, r3, #30
 800b01c:	f100 8103 	bmi.w	800b226 <_printf_float+0x44e>
 800b020:	68e0      	ldr	r0, [r4, #12]
 800b022:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b024:	4298      	cmp	r0, r3
 800b026:	bfb8      	it	lt
 800b028:	4618      	movlt	r0, r3
 800b02a:	e734      	b.n	800ae96 <_printf_float+0xbe>
 800b02c:	2301      	movs	r3, #1
 800b02e:	464a      	mov	r2, r9
 800b030:	4631      	mov	r1, r6
 800b032:	4628      	mov	r0, r5
 800b034:	47b8      	blx	r7
 800b036:	3001      	adds	r0, #1
 800b038:	f43f af2b 	beq.w	800ae92 <_printf_float+0xba>
 800b03c:	f108 0801 	add.w	r8, r8, #1
 800b040:	e7e6      	b.n	800b010 <_printf_float+0x238>
 800b042:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b044:	2b00      	cmp	r3, #0
 800b046:	dc2b      	bgt.n	800b0a0 <_printf_float+0x2c8>
 800b048:	2301      	movs	r3, #1
 800b04a:	4a26      	ldr	r2, [pc, #152]	; (800b0e4 <_printf_float+0x30c>)
 800b04c:	4631      	mov	r1, r6
 800b04e:	4628      	mov	r0, r5
 800b050:	47b8      	blx	r7
 800b052:	3001      	adds	r0, #1
 800b054:	f43f af1d 	beq.w	800ae92 <_printf_float+0xba>
 800b058:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b05a:	b923      	cbnz	r3, 800b066 <_printf_float+0x28e>
 800b05c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b05e:	b913      	cbnz	r3, 800b066 <_printf_float+0x28e>
 800b060:	6823      	ldr	r3, [r4, #0]
 800b062:	07d9      	lsls	r1, r3, #31
 800b064:	d5d8      	bpl.n	800b018 <_printf_float+0x240>
 800b066:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b06a:	4631      	mov	r1, r6
 800b06c:	4628      	mov	r0, r5
 800b06e:	47b8      	blx	r7
 800b070:	3001      	adds	r0, #1
 800b072:	f43f af0e 	beq.w	800ae92 <_printf_float+0xba>
 800b076:	f04f 0900 	mov.w	r9, #0
 800b07a:	f104 0a1a 	add.w	sl, r4, #26
 800b07e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b080:	425b      	negs	r3, r3
 800b082:	454b      	cmp	r3, r9
 800b084:	dc01      	bgt.n	800b08a <_printf_float+0x2b2>
 800b086:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b088:	e794      	b.n	800afb4 <_printf_float+0x1dc>
 800b08a:	2301      	movs	r3, #1
 800b08c:	4652      	mov	r2, sl
 800b08e:	4631      	mov	r1, r6
 800b090:	4628      	mov	r0, r5
 800b092:	47b8      	blx	r7
 800b094:	3001      	adds	r0, #1
 800b096:	f43f aefc 	beq.w	800ae92 <_printf_float+0xba>
 800b09a:	f109 0901 	add.w	r9, r9, #1
 800b09e:	e7ee      	b.n	800b07e <_printf_float+0x2a6>
 800b0a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b0a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b0a4:	429a      	cmp	r2, r3
 800b0a6:	bfa8      	it	ge
 800b0a8:	461a      	movge	r2, r3
 800b0aa:	2a00      	cmp	r2, #0
 800b0ac:	4691      	mov	r9, r2
 800b0ae:	dd07      	ble.n	800b0c0 <_printf_float+0x2e8>
 800b0b0:	4613      	mov	r3, r2
 800b0b2:	4631      	mov	r1, r6
 800b0b4:	4642      	mov	r2, r8
 800b0b6:	4628      	mov	r0, r5
 800b0b8:	47b8      	blx	r7
 800b0ba:	3001      	adds	r0, #1
 800b0bc:	f43f aee9 	beq.w	800ae92 <_printf_float+0xba>
 800b0c0:	f104 031a 	add.w	r3, r4, #26
 800b0c4:	f04f 0b00 	mov.w	fp, #0
 800b0c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b0cc:	9306      	str	r3, [sp, #24]
 800b0ce:	e015      	b.n	800b0fc <_printf_float+0x324>
 800b0d0:	7fefffff 	.word	0x7fefffff
 800b0d4:	0800e98a 	.word	0x0800e98a
 800b0d8:	0800e6d0 	.word	0x0800e6d0
 800b0dc:	0800e6d8 	.word	0x0800e6d8
 800b0e0:	0800e6d4 	.word	0x0800e6d4
 800b0e4:	0800e6dc 	.word	0x0800e6dc
 800b0e8:	2301      	movs	r3, #1
 800b0ea:	9a06      	ldr	r2, [sp, #24]
 800b0ec:	4631      	mov	r1, r6
 800b0ee:	4628      	mov	r0, r5
 800b0f0:	47b8      	blx	r7
 800b0f2:	3001      	adds	r0, #1
 800b0f4:	f43f aecd 	beq.w	800ae92 <_printf_float+0xba>
 800b0f8:	f10b 0b01 	add.w	fp, fp, #1
 800b0fc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800b100:	ebaa 0309 	sub.w	r3, sl, r9
 800b104:	455b      	cmp	r3, fp
 800b106:	dcef      	bgt.n	800b0e8 <_printf_float+0x310>
 800b108:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b10c:	429a      	cmp	r2, r3
 800b10e:	44d0      	add	r8, sl
 800b110:	db15      	blt.n	800b13e <_printf_float+0x366>
 800b112:	6823      	ldr	r3, [r4, #0]
 800b114:	07da      	lsls	r2, r3, #31
 800b116:	d412      	bmi.n	800b13e <_printf_float+0x366>
 800b118:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b11a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b11c:	eba3 020a 	sub.w	r2, r3, sl
 800b120:	eba3 0a01 	sub.w	sl, r3, r1
 800b124:	4592      	cmp	sl, r2
 800b126:	bfa8      	it	ge
 800b128:	4692      	movge	sl, r2
 800b12a:	f1ba 0f00 	cmp.w	sl, #0
 800b12e:	dc0e      	bgt.n	800b14e <_printf_float+0x376>
 800b130:	f04f 0800 	mov.w	r8, #0
 800b134:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b138:	f104 091a 	add.w	r9, r4, #26
 800b13c:	e019      	b.n	800b172 <_printf_float+0x39a>
 800b13e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b142:	4631      	mov	r1, r6
 800b144:	4628      	mov	r0, r5
 800b146:	47b8      	blx	r7
 800b148:	3001      	adds	r0, #1
 800b14a:	d1e5      	bne.n	800b118 <_printf_float+0x340>
 800b14c:	e6a1      	b.n	800ae92 <_printf_float+0xba>
 800b14e:	4653      	mov	r3, sl
 800b150:	4642      	mov	r2, r8
 800b152:	4631      	mov	r1, r6
 800b154:	4628      	mov	r0, r5
 800b156:	47b8      	blx	r7
 800b158:	3001      	adds	r0, #1
 800b15a:	d1e9      	bne.n	800b130 <_printf_float+0x358>
 800b15c:	e699      	b.n	800ae92 <_printf_float+0xba>
 800b15e:	2301      	movs	r3, #1
 800b160:	464a      	mov	r2, r9
 800b162:	4631      	mov	r1, r6
 800b164:	4628      	mov	r0, r5
 800b166:	47b8      	blx	r7
 800b168:	3001      	adds	r0, #1
 800b16a:	f43f ae92 	beq.w	800ae92 <_printf_float+0xba>
 800b16e:	f108 0801 	add.w	r8, r8, #1
 800b172:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b176:	1a9b      	subs	r3, r3, r2
 800b178:	eba3 030a 	sub.w	r3, r3, sl
 800b17c:	4543      	cmp	r3, r8
 800b17e:	dcee      	bgt.n	800b15e <_printf_float+0x386>
 800b180:	e74a      	b.n	800b018 <_printf_float+0x240>
 800b182:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b184:	2a01      	cmp	r2, #1
 800b186:	dc01      	bgt.n	800b18c <_printf_float+0x3b4>
 800b188:	07db      	lsls	r3, r3, #31
 800b18a:	d53a      	bpl.n	800b202 <_printf_float+0x42a>
 800b18c:	2301      	movs	r3, #1
 800b18e:	4642      	mov	r2, r8
 800b190:	4631      	mov	r1, r6
 800b192:	4628      	mov	r0, r5
 800b194:	47b8      	blx	r7
 800b196:	3001      	adds	r0, #1
 800b198:	f43f ae7b 	beq.w	800ae92 <_printf_float+0xba>
 800b19c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b1a0:	4631      	mov	r1, r6
 800b1a2:	4628      	mov	r0, r5
 800b1a4:	47b8      	blx	r7
 800b1a6:	3001      	adds	r0, #1
 800b1a8:	f108 0801 	add.w	r8, r8, #1
 800b1ac:	f43f ae71 	beq.w	800ae92 <_printf_float+0xba>
 800b1b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 800b1b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b1bc:	2300      	movs	r3, #0
 800b1be:	f7f5 fc83 	bl	8000ac8 <__aeabi_dcmpeq>
 800b1c2:	b9c8      	cbnz	r0, 800b1f8 <_printf_float+0x420>
 800b1c4:	4653      	mov	r3, sl
 800b1c6:	4642      	mov	r2, r8
 800b1c8:	4631      	mov	r1, r6
 800b1ca:	4628      	mov	r0, r5
 800b1cc:	47b8      	blx	r7
 800b1ce:	3001      	adds	r0, #1
 800b1d0:	d10e      	bne.n	800b1f0 <_printf_float+0x418>
 800b1d2:	e65e      	b.n	800ae92 <_printf_float+0xba>
 800b1d4:	2301      	movs	r3, #1
 800b1d6:	4652      	mov	r2, sl
 800b1d8:	4631      	mov	r1, r6
 800b1da:	4628      	mov	r0, r5
 800b1dc:	47b8      	blx	r7
 800b1de:	3001      	adds	r0, #1
 800b1e0:	f43f ae57 	beq.w	800ae92 <_printf_float+0xba>
 800b1e4:	f108 0801 	add.w	r8, r8, #1
 800b1e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1ea:	3b01      	subs	r3, #1
 800b1ec:	4543      	cmp	r3, r8
 800b1ee:	dcf1      	bgt.n	800b1d4 <_printf_float+0x3fc>
 800b1f0:	464b      	mov	r3, r9
 800b1f2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b1f6:	e6de      	b.n	800afb6 <_printf_float+0x1de>
 800b1f8:	f04f 0800 	mov.w	r8, #0
 800b1fc:	f104 0a1a 	add.w	sl, r4, #26
 800b200:	e7f2      	b.n	800b1e8 <_printf_float+0x410>
 800b202:	2301      	movs	r3, #1
 800b204:	e7df      	b.n	800b1c6 <_printf_float+0x3ee>
 800b206:	2301      	movs	r3, #1
 800b208:	464a      	mov	r2, r9
 800b20a:	4631      	mov	r1, r6
 800b20c:	4628      	mov	r0, r5
 800b20e:	47b8      	blx	r7
 800b210:	3001      	adds	r0, #1
 800b212:	f43f ae3e 	beq.w	800ae92 <_printf_float+0xba>
 800b216:	f108 0801 	add.w	r8, r8, #1
 800b21a:	68e3      	ldr	r3, [r4, #12]
 800b21c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b21e:	1a9b      	subs	r3, r3, r2
 800b220:	4543      	cmp	r3, r8
 800b222:	dcf0      	bgt.n	800b206 <_printf_float+0x42e>
 800b224:	e6fc      	b.n	800b020 <_printf_float+0x248>
 800b226:	f04f 0800 	mov.w	r8, #0
 800b22a:	f104 0919 	add.w	r9, r4, #25
 800b22e:	e7f4      	b.n	800b21a <_printf_float+0x442>
 800b230:	2900      	cmp	r1, #0
 800b232:	f43f ae8b 	beq.w	800af4c <_printf_float+0x174>
 800b236:	2300      	movs	r3, #0
 800b238:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800b23c:	ab09      	add	r3, sp, #36	; 0x24
 800b23e:	9300      	str	r3, [sp, #0]
 800b240:	ec49 8b10 	vmov	d0, r8, r9
 800b244:	6022      	str	r2, [r4, #0]
 800b246:	f8cd a004 	str.w	sl, [sp, #4]
 800b24a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b24e:	4628      	mov	r0, r5
 800b250:	f7ff fd2e 	bl	800acb0 <__cvt>
 800b254:	4680      	mov	r8, r0
 800b256:	e648      	b.n	800aeea <_printf_float+0x112>

0800b258 <_printf_common>:
 800b258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b25c:	4691      	mov	r9, r2
 800b25e:	461f      	mov	r7, r3
 800b260:	688a      	ldr	r2, [r1, #8]
 800b262:	690b      	ldr	r3, [r1, #16]
 800b264:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b268:	4293      	cmp	r3, r2
 800b26a:	bfb8      	it	lt
 800b26c:	4613      	movlt	r3, r2
 800b26e:	f8c9 3000 	str.w	r3, [r9]
 800b272:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b276:	4606      	mov	r6, r0
 800b278:	460c      	mov	r4, r1
 800b27a:	b112      	cbz	r2, 800b282 <_printf_common+0x2a>
 800b27c:	3301      	adds	r3, #1
 800b27e:	f8c9 3000 	str.w	r3, [r9]
 800b282:	6823      	ldr	r3, [r4, #0]
 800b284:	0699      	lsls	r1, r3, #26
 800b286:	bf42      	ittt	mi
 800b288:	f8d9 3000 	ldrmi.w	r3, [r9]
 800b28c:	3302      	addmi	r3, #2
 800b28e:	f8c9 3000 	strmi.w	r3, [r9]
 800b292:	6825      	ldr	r5, [r4, #0]
 800b294:	f015 0506 	ands.w	r5, r5, #6
 800b298:	d107      	bne.n	800b2aa <_printf_common+0x52>
 800b29a:	f104 0a19 	add.w	sl, r4, #25
 800b29e:	68e3      	ldr	r3, [r4, #12]
 800b2a0:	f8d9 2000 	ldr.w	r2, [r9]
 800b2a4:	1a9b      	subs	r3, r3, r2
 800b2a6:	42ab      	cmp	r3, r5
 800b2a8:	dc28      	bgt.n	800b2fc <_printf_common+0xa4>
 800b2aa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800b2ae:	6822      	ldr	r2, [r4, #0]
 800b2b0:	3300      	adds	r3, #0
 800b2b2:	bf18      	it	ne
 800b2b4:	2301      	movne	r3, #1
 800b2b6:	0692      	lsls	r2, r2, #26
 800b2b8:	d42d      	bmi.n	800b316 <_printf_common+0xbe>
 800b2ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b2be:	4639      	mov	r1, r7
 800b2c0:	4630      	mov	r0, r6
 800b2c2:	47c0      	blx	r8
 800b2c4:	3001      	adds	r0, #1
 800b2c6:	d020      	beq.n	800b30a <_printf_common+0xb2>
 800b2c8:	6823      	ldr	r3, [r4, #0]
 800b2ca:	68e5      	ldr	r5, [r4, #12]
 800b2cc:	f8d9 2000 	ldr.w	r2, [r9]
 800b2d0:	f003 0306 	and.w	r3, r3, #6
 800b2d4:	2b04      	cmp	r3, #4
 800b2d6:	bf08      	it	eq
 800b2d8:	1aad      	subeq	r5, r5, r2
 800b2da:	68a3      	ldr	r3, [r4, #8]
 800b2dc:	6922      	ldr	r2, [r4, #16]
 800b2de:	bf0c      	ite	eq
 800b2e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b2e4:	2500      	movne	r5, #0
 800b2e6:	4293      	cmp	r3, r2
 800b2e8:	bfc4      	itt	gt
 800b2ea:	1a9b      	subgt	r3, r3, r2
 800b2ec:	18ed      	addgt	r5, r5, r3
 800b2ee:	f04f 0900 	mov.w	r9, #0
 800b2f2:	341a      	adds	r4, #26
 800b2f4:	454d      	cmp	r5, r9
 800b2f6:	d11a      	bne.n	800b32e <_printf_common+0xd6>
 800b2f8:	2000      	movs	r0, #0
 800b2fa:	e008      	b.n	800b30e <_printf_common+0xb6>
 800b2fc:	2301      	movs	r3, #1
 800b2fe:	4652      	mov	r2, sl
 800b300:	4639      	mov	r1, r7
 800b302:	4630      	mov	r0, r6
 800b304:	47c0      	blx	r8
 800b306:	3001      	adds	r0, #1
 800b308:	d103      	bne.n	800b312 <_printf_common+0xba>
 800b30a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b30e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b312:	3501      	adds	r5, #1
 800b314:	e7c3      	b.n	800b29e <_printf_common+0x46>
 800b316:	18e1      	adds	r1, r4, r3
 800b318:	1c5a      	adds	r2, r3, #1
 800b31a:	2030      	movs	r0, #48	; 0x30
 800b31c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b320:	4422      	add	r2, r4
 800b322:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b326:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b32a:	3302      	adds	r3, #2
 800b32c:	e7c5      	b.n	800b2ba <_printf_common+0x62>
 800b32e:	2301      	movs	r3, #1
 800b330:	4622      	mov	r2, r4
 800b332:	4639      	mov	r1, r7
 800b334:	4630      	mov	r0, r6
 800b336:	47c0      	blx	r8
 800b338:	3001      	adds	r0, #1
 800b33a:	d0e6      	beq.n	800b30a <_printf_common+0xb2>
 800b33c:	f109 0901 	add.w	r9, r9, #1
 800b340:	e7d8      	b.n	800b2f4 <_printf_common+0x9c>
	...

0800b344 <_printf_i>:
 800b344:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b348:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800b34c:	460c      	mov	r4, r1
 800b34e:	7e09      	ldrb	r1, [r1, #24]
 800b350:	b085      	sub	sp, #20
 800b352:	296e      	cmp	r1, #110	; 0x6e
 800b354:	4617      	mov	r7, r2
 800b356:	4606      	mov	r6, r0
 800b358:	4698      	mov	r8, r3
 800b35a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b35c:	f000 80b3 	beq.w	800b4c6 <_printf_i+0x182>
 800b360:	d822      	bhi.n	800b3a8 <_printf_i+0x64>
 800b362:	2963      	cmp	r1, #99	; 0x63
 800b364:	d036      	beq.n	800b3d4 <_printf_i+0x90>
 800b366:	d80a      	bhi.n	800b37e <_printf_i+0x3a>
 800b368:	2900      	cmp	r1, #0
 800b36a:	f000 80b9 	beq.w	800b4e0 <_printf_i+0x19c>
 800b36e:	2958      	cmp	r1, #88	; 0x58
 800b370:	f000 8083 	beq.w	800b47a <_printf_i+0x136>
 800b374:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b378:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800b37c:	e032      	b.n	800b3e4 <_printf_i+0xa0>
 800b37e:	2964      	cmp	r1, #100	; 0x64
 800b380:	d001      	beq.n	800b386 <_printf_i+0x42>
 800b382:	2969      	cmp	r1, #105	; 0x69
 800b384:	d1f6      	bne.n	800b374 <_printf_i+0x30>
 800b386:	6820      	ldr	r0, [r4, #0]
 800b388:	6813      	ldr	r3, [r2, #0]
 800b38a:	0605      	lsls	r5, r0, #24
 800b38c:	f103 0104 	add.w	r1, r3, #4
 800b390:	d52a      	bpl.n	800b3e8 <_printf_i+0xa4>
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	6011      	str	r1, [r2, #0]
 800b396:	2b00      	cmp	r3, #0
 800b398:	da03      	bge.n	800b3a2 <_printf_i+0x5e>
 800b39a:	222d      	movs	r2, #45	; 0x2d
 800b39c:	425b      	negs	r3, r3
 800b39e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800b3a2:	486f      	ldr	r0, [pc, #444]	; (800b560 <_printf_i+0x21c>)
 800b3a4:	220a      	movs	r2, #10
 800b3a6:	e039      	b.n	800b41c <_printf_i+0xd8>
 800b3a8:	2973      	cmp	r1, #115	; 0x73
 800b3aa:	f000 809d 	beq.w	800b4e8 <_printf_i+0x1a4>
 800b3ae:	d808      	bhi.n	800b3c2 <_printf_i+0x7e>
 800b3b0:	296f      	cmp	r1, #111	; 0x6f
 800b3b2:	d020      	beq.n	800b3f6 <_printf_i+0xb2>
 800b3b4:	2970      	cmp	r1, #112	; 0x70
 800b3b6:	d1dd      	bne.n	800b374 <_printf_i+0x30>
 800b3b8:	6823      	ldr	r3, [r4, #0]
 800b3ba:	f043 0320 	orr.w	r3, r3, #32
 800b3be:	6023      	str	r3, [r4, #0]
 800b3c0:	e003      	b.n	800b3ca <_printf_i+0x86>
 800b3c2:	2975      	cmp	r1, #117	; 0x75
 800b3c4:	d017      	beq.n	800b3f6 <_printf_i+0xb2>
 800b3c6:	2978      	cmp	r1, #120	; 0x78
 800b3c8:	d1d4      	bne.n	800b374 <_printf_i+0x30>
 800b3ca:	2378      	movs	r3, #120	; 0x78
 800b3cc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b3d0:	4864      	ldr	r0, [pc, #400]	; (800b564 <_printf_i+0x220>)
 800b3d2:	e055      	b.n	800b480 <_printf_i+0x13c>
 800b3d4:	6813      	ldr	r3, [r2, #0]
 800b3d6:	1d19      	adds	r1, r3, #4
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	6011      	str	r1, [r2, #0]
 800b3dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b3e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b3e4:	2301      	movs	r3, #1
 800b3e6:	e08c      	b.n	800b502 <_printf_i+0x1be>
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	6011      	str	r1, [r2, #0]
 800b3ec:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b3f0:	bf18      	it	ne
 800b3f2:	b21b      	sxthne	r3, r3
 800b3f4:	e7cf      	b.n	800b396 <_printf_i+0x52>
 800b3f6:	6813      	ldr	r3, [r2, #0]
 800b3f8:	6825      	ldr	r5, [r4, #0]
 800b3fa:	1d18      	adds	r0, r3, #4
 800b3fc:	6010      	str	r0, [r2, #0]
 800b3fe:	0628      	lsls	r0, r5, #24
 800b400:	d501      	bpl.n	800b406 <_printf_i+0xc2>
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	e002      	b.n	800b40c <_printf_i+0xc8>
 800b406:	0668      	lsls	r0, r5, #25
 800b408:	d5fb      	bpl.n	800b402 <_printf_i+0xbe>
 800b40a:	881b      	ldrh	r3, [r3, #0]
 800b40c:	4854      	ldr	r0, [pc, #336]	; (800b560 <_printf_i+0x21c>)
 800b40e:	296f      	cmp	r1, #111	; 0x6f
 800b410:	bf14      	ite	ne
 800b412:	220a      	movne	r2, #10
 800b414:	2208      	moveq	r2, #8
 800b416:	2100      	movs	r1, #0
 800b418:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b41c:	6865      	ldr	r5, [r4, #4]
 800b41e:	60a5      	str	r5, [r4, #8]
 800b420:	2d00      	cmp	r5, #0
 800b422:	f2c0 8095 	blt.w	800b550 <_printf_i+0x20c>
 800b426:	6821      	ldr	r1, [r4, #0]
 800b428:	f021 0104 	bic.w	r1, r1, #4
 800b42c:	6021      	str	r1, [r4, #0]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d13d      	bne.n	800b4ae <_printf_i+0x16a>
 800b432:	2d00      	cmp	r5, #0
 800b434:	f040 808e 	bne.w	800b554 <_printf_i+0x210>
 800b438:	4665      	mov	r5, ip
 800b43a:	2a08      	cmp	r2, #8
 800b43c:	d10b      	bne.n	800b456 <_printf_i+0x112>
 800b43e:	6823      	ldr	r3, [r4, #0]
 800b440:	07db      	lsls	r3, r3, #31
 800b442:	d508      	bpl.n	800b456 <_printf_i+0x112>
 800b444:	6923      	ldr	r3, [r4, #16]
 800b446:	6862      	ldr	r2, [r4, #4]
 800b448:	429a      	cmp	r2, r3
 800b44a:	bfde      	ittt	le
 800b44c:	2330      	movle	r3, #48	; 0x30
 800b44e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b452:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b456:	ebac 0305 	sub.w	r3, ip, r5
 800b45a:	6123      	str	r3, [r4, #16]
 800b45c:	f8cd 8000 	str.w	r8, [sp]
 800b460:	463b      	mov	r3, r7
 800b462:	aa03      	add	r2, sp, #12
 800b464:	4621      	mov	r1, r4
 800b466:	4630      	mov	r0, r6
 800b468:	f7ff fef6 	bl	800b258 <_printf_common>
 800b46c:	3001      	adds	r0, #1
 800b46e:	d14d      	bne.n	800b50c <_printf_i+0x1c8>
 800b470:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b474:	b005      	add	sp, #20
 800b476:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b47a:	4839      	ldr	r0, [pc, #228]	; (800b560 <_printf_i+0x21c>)
 800b47c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800b480:	6813      	ldr	r3, [r2, #0]
 800b482:	6821      	ldr	r1, [r4, #0]
 800b484:	1d1d      	adds	r5, r3, #4
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	6015      	str	r5, [r2, #0]
 800b48a:	060a      	lsls	r2, r1, #24
 800b48c:	d50b      	bpl.n	800b4a6 <_printf_i+0x162>
 800b48e:	07ca      	lsls	r2, r1, #31
 800b490:	bf44      	itt	mi
 800b492:	f041 0120 	orrmi.w	r1, r1, #32
 800b496:	6021      	strmi	r1, [r4, #0]
 800b498:	b91b      	cbnz	r3, 800b4a2 <_printf_i+0x15e>
 800b49a:	6822      	ldr	r2, [r4, #0]
 800b49c:	f022 0220 	bic.w	r2, r2, #32
 800b4a0:	6022      	str	r2, [r4, #0]
 800b4a2:	2210      	movs	r2, #16
 800b4a4:	e7b7      	b.n	800b416 <_printf_i+0xd2>
 800b4a6:	064d      	lsls	r5, r1, #25
 800b4a8:	bf48      	it	mi
 800b4aa:	b29b      	uxthmi	r3, r3
 800b4ac:	e7ef      	b.n	800b48e <_printf_i+0x14a>
 800b4ae:	4665      	mov	r5, ip
 800b4b0:	fbb3 f1f2 	udiv	r1, r3, r2
 800b4b4:	fb02 3311 	mls	r3, r2, r1, r3
 800b4b8:	5cc3      	ldrb	r3, [r0, r3]
 800b4ba:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800b4be:	460b      	mov	r3, r1
 800b4c0:	2900      	cmp	r1, #0
 800b4c2:	d1f5      	bne.n	800b4b0 <_printf_i+0x16c>
 800b4c4:	e7b9      	b.n	800b43a <_printf_i+0xf6>
 800b4c6:	6813      	ldr	r3, [r2, #0]
 800b4c8:	6825      	ldr	r5, [r4, #0]
 800b4ca:	6961      	ldr	r1, [r4, #20]
 800b4cc:	1d18      	adds	r0, r3, #4
 800b4ce:	6010      	str	r0, [r2, #0]
 800b4d0:	0628      	lsls	r0, r5, #24
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	d501      	bpl.n	800b4da <_printf_i+0x196>
 800b4d6:	6019      	str	r1, [r3, #0]
 800b4d8:	e002      	b.n	800b4e0 <_printf_i+0x19c>
 800b4da:	066a      	lsls	r2, r5, #25
 800b4dc:	d5fb      	bpl.n	800b4d6 <_printf_i+0x192>
 800b4de:	8019      	strh	r1, [r3, #0]
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	6123      	str	r3, [r4, #16]
 800b4e4:	4665      	mov	r5, ip
 800b4e6:	e7b9      	b.n	800b45c <_printf_i+0x118>
 800b4e8:	6813      	ldr	r3, [r2, #0]
 800b4ea:	1d19      	adds	r1, r3, #4
 800b4ec:	6011      	str	r1, [r2, #0]
 800b4ee:	681d      	ldr	r5, [r3, #0]
 800b4f0:	6862      	ldr	r2, [r4, #4]
 800b4f2:	2100      	movs	r1, #0
 800b4f4:	4628      	mov	r0, r5
 800b4f6:	f7f4 fe73 	bl	80001e0 <memchr>
 800b4fa:	b108      	cbz	r0, 800b500 <_printf_i+0x1bc>
 800b4fc:	1b40      	subs	r0, r0, r5
 800b4fe:	6060      	str	r0, [r4, #4]
 800b500:	6863      	ldr	r3, [r4, #4]
 800b502:	6123      	str	r3, [r4, #16]
 800b504:	2300      	movs	r3, #0
 800b506:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b50a:	e7a7      	b.n	800b45c <_printf_i+0x118>
 800b50c:	6923      	ldr	r3, [r4, #16]
 800b50e:	462a      	mov	r2, r5
 800b510:	4639      	mov	r1, r7
 800b512:	4630      	mov	r0, r6
 800b514:	47c0      	blx	r8
 800b516:	3001      	adds	r0, #1
 800b518:	d0aa      	beq.n	800b470 <_printf_i+0x12c>
 800b51a:	6823      	ldr	r3, [r4, #0]
 800b51c:	079b      	lsls	r3, r3, #30
 800b51e:	d413      	bmi.n	800b548 <_printf_i+0x204>
 800b520:	68e0      	ldr	r0, [r4, #12]
 800b522:	9b03      	ldr	r3, [sp, #12]
 800b524:	4298      	cmp	r0, r3
 800b526:	bfb8      	it	lt
 800b528:	4618      	movlt	r0, r3
 800b52a:	e7a3      	b.n	800b474 <_printf_i+0x130>
 800b52c:	2301      	movs	r3, #1
 800b52e:	464a      	mov	r2, r9
 800b530:	4639      	mov	r1, r7
 800b532:	4630      	mov	r0, r6
 800b534:	47c0      	blx	r8
 800b536:	3001      	adds	r0, #1
 800b538:	d09a      	beq.n	800b470 <_printf_i+0x12c>
 800b53a:	3501      	adds	r5, #1
 800b53c:	68e3      	ldr	r3, [r4, #12]
 800b53e:	9a03      	ldr	r2, [sp, #12]
 800b540:	1a9b      	subs	r3, r3, r2
 800b542:	42ab      	cmp	r3, r5
 800b544:	dcf2      	bgt.n	800b52c <_printf_i+0x1e8>
 800b546:	e7eb      	b.n	800b520 <_printf_i+0x1dc>
 800b548:	2500      	movs	r5, #0
 800b54a:	f104 0919 	add.w	r9, r4, #25
 800b54e:	e7f5      	b.n	800b53c <_printf_i+0x1f8>
 800b550:	2b00      	cmp	r3, #0
 800b552:	d1ac      	bne.n	800b4ae <_printf_i+0x16a>
 800b554:	7803      	ldrb	r3, [r0, #0]
 800b556:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b55a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b55e:	e76c      	b.n	800b43a <_printf_i+0xf6>
 800b560:	0800e6de 	.word	0x0800e6de
 800b564:	0800e6ef 	.word	0x0800e6ef

0800b568 <iprintf>:
 800b568:	b40f      	push	{r0, r1, r2, r3}
 800b56a:	4b0a      	ldr	r3, [pc, #40]	; (800b594 <iprintf+0x2c>)
 800b56c:	b513      	push	{r0, r1, r4, lr}
 800b56e:	681c      	ldr	r4, [r3, #0]
 800b570:	b124      	cbz	r4, 800b57c <iprintf+0x14>
 800b572:	69a3      	ldr	r3, [r4, #24]
 800b574:	b913      	cbnz	r3, 800b57c <iprintf+0x14>
 800b576:	4620      	mov	r0, r4
 800b578:	f001 f866 	bl	800c648 <__sinit>
 800b57c:	ab05      	add	r3, sp, #20
 800b57e:	9a04      	ldr	r2, [sp, #16]
 800b580:	68a1      	ldr	r1, [r4, #8]
 800b582:	9301      	str	r3, [sp, #4]
 800b584:	4620      	mov	r0, r4
 800b586:	f001 fd29 	bl	800cfdc <_vfiprintf_r>
 800b58a:	b002      	add	sp, #8
 800b58c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b590:	b004      	add	sp, #16
 800b592:	4770      	bx	lr
 800b594:	20000010 	.word	0x20000010

0800b598 <_puts_r>:
 800b598:	b570      	push	{r4, r5, r6, lr}
 800b59a:	460e      	mov	r6, r1
 800b59c:	4605      	mov	r5, r0
 800b59e:	b118      	cbz	r0, 800b5a8 <_puts_r+0x10>
 800b5a0:	6983      	ldr	r3, [r0, #24]
 800b5a2:	b90b      	cbnz	r3, 800b5a8 <_puts_r+0x10>
 800b5a4:	f001 f850 	bl	800c648 <__sinit>
 800b5a8:	69ab      	ldr	r3, [r5, #24]
 800b5aa:	68ac      	ldr	r4, [r5, #8]
 800b5ac:	b913      	cbnz	r3, 800b5b4 <_puts_r+0x1c>
 800b5ae:	4628      	mov	r0, r5
 800b5b0:	f001 f84a 	bl	800c648 <__sinit>
 800b5b4:	4b23      	ldr	r3, [pc, #140]	; (800b644 <_puts_r+0xac>)
 800b5b6:	429c      	cmp	r4, r3
 800b5b8:	d117      	bne.n	800b5ea <_puts_r+0x52>
 800b5ba:	686c      	ldr	r4, [r5, #4]
 800b5bc:	89a3      	ldrh	r3, [r4, #12]
 800b5be:	071b      	lsls	r3, r3, #28
 800b5c0:	d51d      	bpl.n	800b5fe <_puts_r+0x66>
 800b5c2:	6923      	ldr	r3, [r4, #16]
 800b5c4:	b1db      	cbz	r3, 800b5fe <_puts_r+0x66>
 800b5c6:	3e01      	subs	r6, #1
 800b5c8:	68a3      	ldr	r3, [r4, #8]
 800b5ca:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b5ce:	3b01      	subs	r3, #1
 800b5d0:	60a3      	str	r3, [r4, #8]
 800b5d2:	b9e9      	cbnz	r1, 800b610 <_puts_r+0x78>
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	da2e      	bge.n	800b636 <_puts_r+0x9e>
 800b5d8:	4622      	mov	r2, r4
 800b5da:	210a      	movs	r1, #10
 800b5dc:	4628      	mov	r0, r5
 800b5de:	f000 f83f 	bl	800b660 <__swbuf_r>
 800b5e2:	3001      	adds	r0, #1
 800b5e4:	d011      	beq.n	800b60a <_puts_r+0x72>
 800b5e6:	200a      	movs	r0, #10
 800b5e8:	e011      	b.n	800b60e <_puts_r+0x76>
 800b5ea:	4b17      	ldr	r3, [pc, #92]	; (800b648 <_puts_r+0xb0>)
 800b5ec:	429c      	cmp	r4, r3
 800b5ee:	d101      	bne.n	800b5f4 <_puts_r+0x5c>
 800b5f0:	68ac      	ldr	r4, [r5, #8]
 800b5f2:	e7e3      	b.n	800b5bc <_puts_r+0x24>
 800b5f4:	4b15      	ldr	r3, [pc, #84]	; (800b64c <_puts_r+0xb4>)
 800b5f6:	429c      	cmp	r4, r3
 800b5f8:	bf08      	it	eq
 800b5fa:	68ec      	ldreq	r4, [r5, #12]
 800b5fc:	e7de      	b.n	800b5bc <_puts_r+0x24>
 800b5fe:	4621      	mov	r1, r4
 800b600:	4628      	mov	r0, r5
 800b602:	f000 f87f 	bl	800b704 <__swsetup_r>
 800b606:	2800      	cmp	r0, #0
 800b608:	d0dd      	beq.n	800b5c6 <_puts_r+0x2e>
 800b60a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b60e:	bd70      	pop	{r4, r5, r6, pc}
 800b610:	2b00      	cmp	r3, #0
 800b612:	da04      	bge.n	800b61e <_puts_r+0x86>
 800b614:	69a2      	ldr	r2, [r4, #24]
 800b616:	429a      	cmp	r2, r3
 800b618:	dc06      	bgt.n	800b628 <_puts_r+0x90>
 800b61a:	290a      	cmp	r1, #10
 800b61c:	d004      	beq.n	800b628 <_puts_r+0x90>
 800b61e:	6823      	ldr	r3, [r4, #0]
 800b620:	1c5a      	adds	r2, r3, #1
 800b622:	6022      	str	r2, [r4, #0]
 800b624:	7019      	strb	r1, [r3, #0]
 800b626:	e7cf      	b.n	800b5c8 <_puts_r+0x30>
 800b628:	4622      	mov	r2, r4
 800b62a:	4628      	mov	r0, r5
 800b62c:	f000 f818 	bl	800b660 <__swbuf_r>
 800b630:	3001      	adds	r0, #1
 800b632:	d1c9      	bne.n	800b5c8 <_puts_r+0x30>
 800b634:	e7e9      	b.n	800b60a <_puts_r+0x72>
 800b636:	6823      	ldr	r3, [r4, #0]
 800b638:	200a      	movs	r0, #10
 800b63a:	1c5a      	adds	r2, r3, #1
 800b63c:	6022      	str	r2, [r4, #0]
 800b63e:	7018      	strb	r0, [r3, #0]
 800b640:	e7e5      	b.n	800b60e <_puts_r+0x76>
 800b642:	bf00      	nop
 800b644:	0800e730 	.word	0x0800e730
 800b648:	0800e750 	.word	0x0800e750
 800b64c:	0800e710 	.word	0x0800e710

0800b650 <puts>:
 800b650:	4b02      	ldr	r3, [pc, #8]	; (800b65c <puts+0xc>)
 800b652:	4601      	mov	r1, r0
 800b654:	6818      	ldr	r0, [r3, #0]
 800b656:	f7ff bf9f 	b.w	800b598 <_puts_r>
 800b65a:	bf00      	nop
 800b65c:	20000010 	.word	0x20000010

0800b660 <__swbuf_r>:
 800b660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b662:	460e      	mov	r6, r1
 800b664:	4614      	mov	r4, r2
 800b666:	4605      	mov	r5, r0
 800b668:	b118      	cbz	r0, 800b672 <__swbuf_r+0x12>
 800b66a:	6983      	ldr	r3, [r0, #24]
 800b66c:	b90b      	cbnz	r3, 800b672 <__swbuf_r+0x12>
 800b66e:	f000 ffeb 	bl	800c648 <__sinit>
 800b672:	4b21      	ldr	r3, [pc, #132]	; (800b6f8 <__swbuf_r+0x98>)
 800b674:	429c      	cmp	r4, r3
 800b676:	d12a      	bne.n	800b6ce <__swbuf_r+0x6e>
 800b678:	686c      	ldr	r4, [r5, #4]
 800b67a:	69a3      	ldr	r3, [r4, #24]
 800b67c:	60a3      	str	r3, [r4, #8]
 800b67e:	89a3      	ldrh	r3, [r4, #12]
 800b680:	071a      	lsls	r2, r3, #28
 800b682:	d52e      	bpl.n	800b6e2 <__swbuf_r+0x82>
 800b684:	6923      	ldr	r3, [r4, #16]
 800b686:	b363      	cbz	r3, 800b6e2 <__swbuf_r+0x82>
 800b688:	6923      	ldr	r3, [r4, #16]
 800b68a:	6820      	ldr	r0, [r4, #0]
 800b68c:	1ac0      	subs	r0, r0, r3
 800b68e:	6963      	ldr	r3, [r4, #20]
 800b690:	b2f6      	uxtb	r6, r6
 800b692:	4283      	cmp	r3, r0
 800b694:	4637      	mov	r7, r6
 800b696:	dc04      	bgt.n	800b6a2 <__swbuf_r+0x42>
 800b698:	4621      	mov	r1, r4
 800b69a:	4628      	mov	r0, r5
 800b69c:	f000 ff6a 	bl	800c574 <_fflush_r>
 800b6a0:	bb28      	cbnz	r0, 800b6ee <__swbuf_r+0x8e>
 800b6a2:	68a3      	ldr	r3, [r4, #8]
 800b6a4:	3b01      	subs	r3, #1
 800b6a6:	60a3      	str	r3, [r4, #8]
 800b6a8:	6823      	ldr	r3, [r4, #0]
 800b6aa:	1c5a      	adds	r2, r3, #1
 800b6ac:	6022      	str	r2, [r4, #0]
 800b6ae:	701e      	strb	r6, [r3, #0]
 800b6b0:	6963      	ldr	r3, [r4, #20]
 800b6b2:	3001      	adds	r0, #1
 800b6b4:	4283      	cmp	r3, r0
 800b6b6:	d004      	beq.n	800b6c2 <__swbuf_r+0x62>
 800b6b8:	89a3      	ldrh	r3, [r4, #12]
 800b6ba:	07db      	lsls	r3, r3, #31
 800b6bc:	d519      	bpl.n	800b6f2 <__swbuf_r+0x92>
 800b6be:	2e0a      	cmp	r6, #10
 800b6c0:	d117      	bne.n	800b6f2 <__swbuf_r+0x92>
 800b6c2:	4621      	mov	r1, r4
 800b6c4:	4628      	mov	r0, r5
 800b6c6:	f000 ff55 	bl	800c574 <_fflush_r>
 800b6ca:	b190      	cbz	r0, 800b6f2 <__swbuf_r+0x92>
 800b6cc:	e00f      	b.n	800b6ee <__swbuf_r+0x8e>
 800b6ce:	4b0b      	ldr	r3, [pc, #44]	; (800b6fc <__swbuf_r+0x9c>)
 800b6d0:	429c      	cmp	r4, r3
 800b6d2:	d101      	bne.n	800b6d8 <__swbuf_r+0x78>
 800b6d4:	68ac      	ldr	r4, [r5, #8]
 800b6d6:	e7d0      	b.n	800b67a <__swbuf_r+0x1a>
 800b6d8:	4b09      	ldr	r3, [pc, #36]	; (800b700 <__swbuf_r+0xa0>)
 800b6da:	429c      	cmp	r4, r3
 800b6dc:	bf08      	it	eq
 800b6de:	68ec      	ldreq	r4, [r5, #12]
 800b6e0:	e7cb      	b.n	800b67a <__swbuf_r+0x1a>
 800b6e2:	4621      	mov	r1, r4
 800b6e4:	4628      	mov	r0, r5
 800b6e6:	f000 f80d 	bl	800b704 <__swsetup_r>
 800b6ea:	2800      	cmp	r0, #0
 800b6ec:	d0cc      	beq.n	800b688 <__swbuf_r+0x28>
 800b6ee:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b6f2:	4638      	mov	r0, r7
 800b6f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6f6:	bf00      	nop
 800b6f8:	0800e730 	.word	0x0800e730
 800b6fc:	0800e750 	.word	0x0800e750
 800b700:	0800e710 	.word	0x0800e710

0800b704 <__swsetup_r>:
 800b704:	4b32      	ldr	r3, [pc, #200]	; (800b7d0 <__swsetup_r+0xcc>)
 800b706:	b570      	push	{r4, r5, r6, lr}
 800b708:	681d      	ldr	r5, [r3, #0]
 800b70a:	4606      	mov	r6, r0
 800b70c:	460c      	mov	r4, r1
 800b70e:	b125      	cbz	r5, 800b71a <__swsetup_r+0x16>
 800b710:	69ab      	ldr	r3, [r5, #24]
 800b712:	b913      	cbnz	r3, 800b71a <__swsetup_r+0x16>
 800b714:	4628      	mov	r0, r5
 800b716:	f000 ff97 	bl	800c648 <__sinit>
 800b71a:	4b2e      	ldr	r3, [pc, #184]	; (800b7d4 <__swsetup_r+0xd0>)
 800b71c:	429c      	cmp	r4, r3
 800b71e:	d10f      	bne.n	800b740 <__swsetup_r+0x3c>
 800b720:	686c      	ldr	r4, [r5, #4]
 800b722:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b726:	b29a      	uxth	r2, r3
 800b728:	0715      	lsls	r5, r2, #28
 800b72a:	d42c      	bmi.n	800b786 <__swsetup_r+0x82>
 800b72c:	06d0      	lsls	r0, r2, #27
 800b72e:	d411      	bmi.n	800b754 <__swsetup_r+0x50>
 800b730:	2209      	movs	r2, #9
 800b732:	6032      	str	r2, [r6, #0]
 800b734:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b738:	81a3      	strh	r3, [r4, #12]
 800b73a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b73e:	e03e      	b.n	800b7be <__swsetup_r+0xba>
 800b740:	4b25      	ldr	r3, [pc, #148]	; (800b7d8 <__swsetup_r+0xd4>)
 800b742:	429c      	cmp	r4, r3
 800b744:	d101      	bne.n	800b74a <__swsetup_r+0x46>
 800b746:	68ac      	ldr	r4, [r5, #8]
 800b748:	e7eb      	b.n	800b722 <__swsetup_r+0x1e>
 800b74a:	4b24      	ldr	r3, [pc, #144]	; (800b7dc <__swsetup_r+0xd8>)
 800b74c:	429c      	cmp	r4, r3
 800b74e:	bf08      	it	eq
 800b750:	68ec      	ldreq	r4, [r5, #12]
 800b752:	e7e6      	b.n	800b722 <__swsetup_r+0x1e>
 800b754:	0751      	lsls	r1, r2, #29
 800b756:	d512      	bpl.n	800b77e <__swsetup_r+0x7a>
 800b758:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b75a:	b141      	cbz	r1, 800b76e <__swsetup_r+0x6a>
 800b75c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b760:	4299      	cmp	r1, r3
 800b762:	d002      	beq.n	800b76a <__swsetup_r+0x66>
 800b764:	4630      	mov	r0, r6
 800b766:	f001 fb67 	bl	800ce38 <_free_r>
 800b76a:	2300      	movs	r3, #0
 800b76c:	6363      	str	r3, [r4, #52]	; 0x34
 800b76e:	89a3      	ldrh	r3, [r4, #12]
 800b770:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b774:	81a3      	strh	r3, [r4, #12]
 800b776:	2300      	movs	r3, #0
 800b778:	6063      	str	r3, [r4, #4]
 800b77a:	6923      	ldr	r3, [r4, #16]
 800b77c:	6023      	str	r3, [r4, #0]
 800b77e:	89a3      	ldrh	r3, [r4, #12]
 800b780:	f043 0308 	orr.w	r3, r3, #8
 800b784:	81a3      	strh	r3, [r4, #12]
 800b786:	6923      	ldr	r3, [r4, #16]
 800b788:	b94b      	cbnz	r3, 800b79e <__swsetup_r+0x9a>
 800b78a:	89a3      	ldrh	r3, [r4, #12]
 800b78c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b790:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b794:	d003      	beq.n	800b79e <__swsetup_r+0x9a>
 800b796:	4621      	mov	r1, r4
 800b798:	4630      	mov	r0, r6
 800b79a:	f001 f811 	bl	800c7c0 <__smakebuf_r>
 800b79e:	89a2      	ldrh	r2, [r4, #12]
 800b7a0:	f012 0301 	ands.w	r3, r2, #1
 800b7a4:	d00c      	beq.n	800b7c0 <__swsetup_r+0xbc>
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	60a3      	str	r3, [r4, #8]
 800b7aa:	6963      	ldr	r3, [r4, #20]
 800b7ac:	425b      	negs	r3, r3
 800b7ae:	61a3      	str	r3, [r4, #24]
 800b7b0:	6923      	ldr	r3, [r4, #16]
 800b7b2:	b953      	cbnz	r3, 800b7ca <__swsetup_r+0xc6>
 800b7b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7b8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800b7bc:	d1ba      	bne.n	800b734 <__swsetup_r+0x30>
 800b7be:	bd70      	pop	{r4, r5, r6, pc}
 800b7c0:	0792      	lsls	r2, r2, #30
 800b7c2:	bf58      	it	pl
 800b7c4:	6963      	ldrpl	r3, [r4, #20]
 800b7c6:	60a3      	str	r3, [r4, #8]
 800b7c8:	e7f2      	b.n	800b7b0 <__swsetup_r+0xac>
 800b7ca:	2000      	movs	r0, #0
 800b7cc:	e7f7      	b.n	800b7be <__swsetup_r+0xba>
 800b7ce:	bf00      	nop
 800b7d0:	20000010 	.word	0x20000010
 800b7d4:	0800e730 	.word	0x0800e730
 800b7d8:	0800e750 	.word	0x0800e750
 800b7dc:	0800e710 	.word	0x0800e710

0800b7e0 <quorem>:
 800b7e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7e4:	6903      	ldr	r3, [r0, #16]
 800b7e6:	690c      	ldr	r4, [r1, #16]
 800b7e8:	42a3      	cmp	r3, r4
 800b7ea:	4680      	mov	r8, r0
 800b7ec:	f2c0 8082 	blt.w	800b8f4 <quorem+0x114>
 800b7f0:	3c01      	subs	r4, #1
 800b7f2:	f101 0714 	add.w	r7, r1, #20
 800b7f6:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800b7fa:	f100 0614 	add.w	r6, r0, #20
 800b7fe:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800b802:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800b806:	eb06 030c 	add.w	r3, r6, ip
 800b80a:	3501      	adds	r5, #1
 800b80c:	eb07 090c 	add.w	r9, r7, ip
 800b810:	9301      	str	r3, [sp, #4]
 800b812:	fbb0 f5f5 	udiv	r5, r0, r5
 800b816:	b395      	cbz	r5, 800b87e <quorem+0x9e>
 800b818:	f04f 0a00 	mov.w	sl, #0
 800b81c:	4638      	mov	r0, r7
 800b81e:	46b6      	mov	lr, r6
 800b820:	46d3      	mov	fp, sl
 800b822:	f850 2b04 	ldr.w	r2, [r0], #4
 800b826:	b293      	uxth	r3, r2
 800b828:	fb05 a303 	mla	r3, r5, r3, sl
 800b82c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b830:	b29b      	uxth	r3, r3
 800b832:	ebab 0303 	sub.w	r3, fp, r3
 800b836:	0c12      	lsrs	r2, r2, #16
 800b838:	f8de b000 	ldr.w	fp, [lr]
 800b83c:	fb05 a202 	mla	r2, r5, r2, sl
 800b840:	fa13 f38b 	uxtah	r3, r3, fp
 800b844:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800b848:	fa1f fb82 	uxth.w	fp, r2
 800b84c:	f8de 2000 	ldr.w	r2, [lr]
 800b850:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800b854:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b858:	b29b      	uxth	r3, r3
 800b85a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b85e:	4581      	cmp	r9, r0
 800b860:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800b864:	f84e 3b04 	str.w	r3, [lr], #4
 800b868:	d2db      	bcs.n	800b822 <quorem+0x42>
 800b86a:	f856 300c 	ldr.w	r3, [r6, ip]
 800b86e:	b933      	cbnz	r3, 800b87e <quorem+0x9e>
 800b870:	9b01      	ldr	r3, [sp, #4]
 800b872:	3b04      	subs	r3, #4
 800b874:	429e      	cmp	r6, r3
 800b876:	461a      	mov	r2, r3
 800b878:	d330      	bcc.n	800b8dc <quorem+0xfc>
 800b87a:	f8c8 4010 	str.w	r4, [r8, #16]
 800b87e:	4640      	mov	r0, r8
 800b880:	f001 fa06 	bl	800cc90 <__mcmp>
 800b884:	2800      	cmp	r0, #0
 800b886:	db25      	blt.n	800b8d4 <quorem+0xf4>
 800b888:	3501      	adds	r5, #1
 800b88a:	4630      	mov	r0, r6
 800b88c:	f04f 0c00 	mov.w	ip, #0
 800b890:	f857 2b04 	ldr.w	r2, [r7], #4
 800b894:	f8d0 e000 	ldr.w	lr, [r0]
 800b898:	b293      	uxth	r3, r2
 800b89a:	ebac 0303 	sub.w	r3, ip, r3
 800b89e:	0c12      	lsrs	r2, r2, #16
 800b8a0:	fa13 f38e 	uxtah	r3, r3, lr
 800b8a4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b8a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b8ac:	b29b      	uxth	r3, r3
 800b8ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b8b2:	45b9      	cmp	r9, r7
 800b8b4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b8b8:	f840 3b04 	str.w	r3, [r0], #4
 800b8bc:	d2e8      	bcs.n	800b890 <quorem+0xb0>
 800b8be:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800b8c2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800b8c6:	b92a      	cbnz	r2, 800b8d4 <quorem+0xf4>
 800b8c8:	3b04      	subs	r3, #4
 800b8ca:	429e      	cmp	r6, r3
 800b8cc:	461a      	mov	r2, r3
 800b8ce:	d30b      	bcc.n	800b8e8 <quorem+0x108>
 800b8d0:	f8c8 4010 	str.w	r4, [r8, #16]
 800b8d4:	4628      	mov	r0, r5
 800b8d6:	b003      	add	sp, #12
 800b8d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8dc:	6812      	ldr	r2, [r2, #0]
 800b8de:	3b04      	subs	r3, #4
 800b8e0:	2a00      	cmp	r2, #0
 800b8e2:	d1ca      	bne.n	800b87a <quorem+0x9a>
 800b8e4:	3c01      	subs	r4, #1
 800b8e6:	e7c5      	b.n	800b874 <quorem+0x94>
 800b8e8:	6812      	ldr	r2, [r2, #0]
 800b8ea:	3b04      	subs	r3, #4
 800b8ec:	2a00      	cmp	r2, #0
 800b8ee:	d1ef      	bne.n	800b8d0 <quorem+0xf0>
 800b8f0:	3c01      	subs	r4, #1
 800b8f2:	e7ea      	b.n	800b8ca <quorem+0xea>
 800b8f4:	2000      	movs	r0, #0
 800b8f6:	e7ee      	b.n	800b8d6 <quorem+0xf6>

0800b8f8 <_dtoa_r>:
 800b8f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8fc:	ec57 6b10 	vmov	r6, r7, d0
 800b900:	b097      	sub	sp, #92	; 0x5c
 800b902:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b904:	9106      	str	r1, [sp, #24]
 800b906:	4604      	mov	r4, r0
 800b908:	920b      	str	r2, [sp, #44]	; 0x2c
 800b90a:	9312      	str	r3, [sp, #72]	; 0x48
 800b90c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b910:	e9cd 6700 	strd	r6, r7, [sp]
 800b914:	b93d      	cbnz	r5, 800b926 <_dtoa_r+0x2e>
 800b916:	2010      	movs	r0, #16
 800b918:	f000 ff92 	bl	800c840 <malloc>
 800b91c:	6260      	str	r0, [r4, #36]	; 0x24
 800b91e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b922:	6005      	str	r5, [r0, #0]
 800b924:	60c5      	str	r5, [r0, #12]
 800b926:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b928:	6819      	ldr	r1, [r3, #0]
 800b92a:	b151      	cbz	r1, 800b942 <_dtoa_r+0x4a>
 800b92c:	685a      	ldr	r2, [r3, #4]
 800b92e:	604a      	str	r2, [r1, #4]
 800b930:	2301      	movs	r3, #1
 800b932:	4093      	lsls	r3, r2
 800b934:	608b      	str	r3, [r1, #8]
 800b936:	4620      	mov	r0, r4
 800b938:	f000 ffc9 	bl	800c8ce <_Bfree>
 800b93c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b93e:	2200      	movs	r2, #0
 800b940:	601a      	str	r2, [r3, #0]
 800b942:	1e3b      	subs	r3, r7, #0
 800b944:	bfbb      	ittet	lt
 800b946:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b94a:	9301      	strlt	r3, [sp, #4]
 800b94c:	2300      	movge	r3, #0
 800b94e:	2201      	movlt	r2, #1
 800b950:	bfac      	ite	ge
 800b952:	f8c8 3000 	strge.w	r3, [r8]
 800b956:	f8c8 2000 	strlt.w	r2, [r8]
 800b95a:	4baf      	ldr	r3, [pc, #700]	; (800bc18 <_dtoa_r+0x320>)
 800b95c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b960:	ea33 0308 	bics.w	r3, r3, r8
 800b964:	d114      	bne.n	800b990 <_dtoa_r+0x98>
 800b966:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b968:	f242 730f 	movw	r3, #9999	; 0x270f
 800b96c:	6013      	str	r3, [r2, #0]
 800b96e:	9b00      	ldr	r3, [sp, #0]
 800b970:	b923      	cbnz	r3, 800b97c <_dtoa_r+0x84>
 800b972:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800b976:	2800      	cmp	r0, #0
 800b978:	f000 8542 	beq.w	800c400 <_dtoa_r+0xb08>
 800b97c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b97e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800bc2c <_dtoa_r+0x334>
 800b982:	2b00      	cmp	r3, #0
 800b984:	f000 8544 	beq.w	800c410 <_dtoa_r+0xb18>
 800b988:	f10b 0303 	add.w	r3, fp, #3
 800b98c:	f000 bd3e 	b.w	800c40c <_dtoa_r+0xb14>
 800b990:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b994:	2200      	movs	r2, #0
 800b996:	2300      	movs	r3, #0
 800b998:	4630      	mov	r0, r6
 800b99a:	4639      	mov	r1, r7
 800b99c:	f7f5 f894 	bl	8000ac8 <__aeabi_dcmpeq>
 800b9a0:	4681      	mov	r9, r0
 800b9a2:	b168      	cbz	r0, 800b9c0 <_dtoa_r+0xc8>
 800b9a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b9a6:	2301      	movs	r3, #1
 800b9a8:	6013      	str	r3, [r2, #0]
 800b9aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	f000 8524 	beq.w	800c3fa <_dtoa_r+0xb02>
 800b9b2:	4b9a      	ldr	r3, [pc, #616]	; (800bc1c <_dtoa_r+0x324>)
 800b9b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b9b6:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800b9ba:	6013      	str	r3, [r2, #0]
 800b9bc:	f000 bd28 	b.w	800c410 <_dtoa_r+0xb18>
 800b9c0:	aa14      	add	r2, sp, #80	; 0x50
 800b9c2:	a915      	add	r1, sp, #84	; 0x54
 800b9c4:	ec47 6b10 	vmov	d0, r6, r7
 800b9c8:	4620      	mov	r0, r4
 800b9ca:	f001 f9d8 	bl	800cd7e <__d2b>
 800b9ce:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800b9d2:	9004      	str	r0, [sp, #16]
 800b9d4:	2d00      	cmp	r5, #0
 800b9d6:	d07c      	beq.n	800bad2 <_dtoa_r+0x1da>
 800b9d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b9dc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800b9e0:	46b2      	mov	sl, r6
 800b9e2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800b9e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b9ea:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	4b8b      	ldr	r3, [pc, #556]	; (800bc20 <_dtoa_r+0x328>)
 800b9f2:	4650      	mov	r0, sl
 800b9f4:	4659      	mov	r1, fp
 800b9f6:	f7f4 fc47 	bl	8000288 <__aeabi_dsub>
 800b9fa:	a381      	add	r3, pc, #516	; (adr r3, 800bc00 <_dtoa_r+0x308>)
 800b9fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba00:	f7f4 fdfa 	bl	80005f8 <__aeabi_dmul>
 800ba04:	a380      	add	r3, pc, #512	; (adr r3, 800bc08 <_dtoa_r+0x310>)
 800ba06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba0a:	f7f4 fc3f 	bl	800028c <__adddf3>
 800ba0e:	4606      	mov	r6, r0
 800ba10:	4628      	mov	r0, r5
 800ba12:	460f      	mov	r7, r1
 800ba14:	f7f4 fd86 	bl	8000524 <__aeabi_i2d>
 800ba18:	a37d      	add	r3, pc, #500	; (adr r3, 800bc10 <_dtoa_r+0x318>)
 800ba1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba1e:	f7f4 fdeb 	bl	80005f8 <__aeabi_dmul>
 800ba22:	4602      	mov	r2, r0
 800ba24:	460b      	mov	r3, r1
 800ba26:	4630      	mov	r0, r6
 800ba28:	4639      	mov	r1, r7
 800ba2a:	f7f4 fc2f 	bl	800028c <__adddf3>
 800ba2e:	4606      	mov	r6, r0
 800ba30:	460f      	mov	r7, r1
 800ba32:	f7f5 f891 	bl	8000b58 <__aeabi_d2iz>
 800ba36:	2200      	movs	r2, #0
 800ba38:	4682      	mov	sl, r0
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	4630      	mov	r0, r6
 800ba3e:	4639      	mov	r1, r7
 800ba40:	f7f5 f84c 	bl	8000adc <__aeabi_dcmplt>
 800ba44:	b148      	cbz	r0, 800ba5a <_dtoa_r+0x162>
 800ba46:	4650      	mov	r0, sl
 800ba48:	f7f4 fd6c 	bl	8000524 <__aeabi_i2d>
 800ba4c:	4632      	mov	r2, r6
 800ba4e:	463b      	mov	r3, r7
 800ba50:	f7f5 f83a 	bl	8000ac8 <__aeabi_dcmpeq>
 800ba54:	b908      	cbnz	r0, 800ba5a <_dtoa_r+0x162>
 800ba56:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800ba5a:	f1ba 0f16 	cmp.w	sl, #22
 800ba5e:	d859      	bhi.n	800bb14 <_dtoa_r+0x21c>
 800ba60:	4970      	ldr	r1, [pc, #448]	; (800bc24 <_dtoa_r+0x32c>)
 800ba62:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800ba66:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ba6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba6e:	f7f5 f853 	bl	8000b18 <__aeabi_dcmpgt>
 800ba72:	2800      	cmp	r0, #0
 800ba74:	d050      	beq.n	800bb18 <_dtoa_r+0x220>
 800ba76:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	930f      	str	r3, [sp, #60]	; 0x3c
 800ba7e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ba80:	1b5d      	subs	r5, r3, r5
 800ba82:	f1b5 0801 	subs.w	r8, r5, #1
 800ba86:	bf49      	itett	mi
 800ba88:	f1c5 0301 	rsbmi	r3, r5, #1
 800ba8c:	2300      	movpl	r3, #0
 800ba8e:	9305      	strmi	r3, [sp, #20]
 800ba90:	f04f 0800 	movmi.w	r8, #0
 800ba94:	bf58      	it	pl
 800ba96:	9305      	strpl	r3, [sp, #20]
 800ba98:	f1ba 0f00 	cmp.w	sl, #0
 800ba9c:	db3e      	blt.n	800bb1c <_dtoa_r+0x224>
 800ba9e:	2300      	movs	r3, #0
 800baa0:	44d0      	add	r8, sl
 800baa2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800baa6:	9307      	str	r3, [sp, #28]
 800baa8:	9b06      	ldr	r3, [sp, #24]
 800baaa:	2b09      	cmp	r3, #9
 800baac:	f200 8090 	bhi.w	800bbd0 <_dtoa_r+0x2d8>
 800bab0:	2b05      	cmp	r3, #5
 800bab2:	bfc4      	itt	gt
 800bab4:	3b04      	subgt	r3, #4
 800bab6:	9306      	strgt	r3, [sp, #24]
 800bab8:	9b06      	ldr	r3, [sp, #24]
 800baba:	f1a3 0302 	sub.w	r3, r3, #2
 800babe:	bfcc      	ite	gt
 800bac0:	2500      	movgt	r5, #0
 800bac2:	2501      	movle	r5, #1
 800bac4:	2b03      	cmp	r3, #3
 800bac6:	f200 808f 	bhi.w	800bbe8 <_dtoa_r+0x2f0>
 800baca:	e8df f003 	tbb	[pc, r3]
 800bace:	7f7d      	.short	0x7f7d
 800bad0:	7131      	.short	0x7131
 800bad2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800bad6:	441d      	add	r5, r3
 800bad8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800badc:	2820      	cmp	r0, #32
 800bade:	dd13      	ble.n	800bb08 <_dtoa_r+0x210>
 800bae0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800bae4:	9b00      	ldr	r3, [sp, #0]
 800bae6:	fa08 f800 	lsl.w	r8, r8, r0
 800baea:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800baee:	fa23 f000 	lsr.w	r0, r3, r0
 800baf2:	ea48 0000 	orr.w	r0, r8, r0
 800baf6:	f7f4 fd05 	bl	8000504 <__aeabi_ui2d>
 800bafa:	2301      	movs	r3, #1
 800bafc:	4682      	mov	sl, r0
 800bafe:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800bb02:	3d01      	subs	r5, #1
 800bb04:	9313      	str	r3, [sp, #76]	; 0x4c
 800bb06:	e772      	b.n	800b9ee <_dtoa_r+0xf6>
 800bb08:	9b00      	ldr	r3, [sp, #0]
 800bb0a:	f1c0 0020 	rsb	r0, r0, #32
 800bb0e:	fa03 f000 	lsl.w	r0, r3, r0
 800bb12:	e7f0      	b.n	800baf6 <_dtoa_r+0x1fe>
 800bb14:	2301      	movs	r3, #1
 800bb16:	e7b1      	b.n	800ba7c <_dtoa_r+0x184>
 800bb18:	900f      	str	r0, [sp, #60]	; 0x3c
 800bb1a:	e7b0      	b.n	800ba7e <_dtoa_r+0x186>
 800bb1c:	9b05      	ldr	r3, [sp, #20]
 800bb1e:	eba3 030a 	sub.w	r3, r3, sl
 800bb22:	9305      	str	r3, [sp, #20]
 800bb24:	f1ca 0300 	rsb	r3, sl, #0
 800bb28:	9307      	str	r3, [sp, #28]
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	930e      	str	r3, [sp, #56]	; 0x38
 800bb2e:	e7bb      	b.n	800baa8 <_dtoa_r+0x1b0>
 800bb30:	2301      	movs	r3, #1
 800bb32:	930a      	str	r3, [sp, #40]	; 0x28
 800bb34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	dd59      	ble.n	800bbee <_dtoa_r+0x2f6>
 800bb3a:	9302      	str	r3, [sp, #8]
 800bb3c:	4699      	mov	r9, r3
 800bb3e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bb40:	2200      	movs	r2, #0
 800bb42:	6072      	str	r2, [r6, #4]
 800bb44:	2204      	movs	r2, #4
 800bb46:	f102 0014 	add.w	r0, r2, #20
 800bb4a:	4298      	cmp	r0, r3
 800bb4c:	6871      	ldr	r1, [r6, #4]
 800bb4e:	d953      	bls.n	800bbf8 <_dtoa_r+0x300>
 800bb50:	4620      	mov	r0, r4
 800bb52:	f000 fe88 	bl	800c866 <_Balloc>
 800bb56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bb58:	6030      	str	r0, [r6, #0]
 800bb5a:	f1b9 0f0e 	cmp.w	r9, #14
 800bb5e:	f8d3 b000 	ldr.w	fp, [r3]
 800bb62:	f200 80e6 	bhi.w	800bd32 <_dtoa_r+0x43a>
 800bb66:	2d00      	cmp	r5, #0
 800bb68:	f000 80e3 	beq.w	800bd32 <_dtoa_r+0x43a>
 800bb6c:	ed9d 7b00 	vldr	d7, [sp]
 800bb70:	f1ba 0f00 	cmp.w	sl, #0
 800bb74:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800bb78:	dd74      	ble.n	800bc64 <_dtoa_r+0x36c>
 800bb7a:	4a2a      	ldr	r2, [pc, #168]	; (800bc24 <_dtoa_r+0x32c>)
 800bb7c:	f00a 030f 	and.w	r3, sl, #15
 800bb80:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bb84:	ed93 7b00 	vldr	d7, [r3]
 800bb88:	ea4f 162a 	mov.w	r6, sl, asr #4
 800bb8c:	06f0      	lsls	r0, r6, #27
 800bb8e:	ed8d 7b08 	vstr	d7, [sp, #32]
 800bb92:	d565      	bpl.n	800bc60 <_dtoa_r+0x368>
 800bb94:	4b24      	ldr	r3, [pc, #144]	; (800bc28 <_dtoa_r+0x330>)
 800bb96:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bb9a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bb9e:	f7f4 fe55 	bl	800084c <__aeabi_ddiv>
 800bba2:	e9cd 0100 	strd	r0, r1, [sp]
 800bba6:	f006 060f 	and.w	r6, r6, #15
 800bbaa:	2503      	movs	r5, #3
 800bbac:	4f1e      	ldr	r7, [pc, #120]	; (800bc28 <_dtoa_r+0x330>)
 800bbae:	e04c      	b.n	800bc4a <_dtoa_r+0x352>
 800bbb0:	2301      	movs	r3, #1
 800bbb2:	930a      	str	r3, [sp, #40]	; 0x28
 800bbb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bbb6:	4453      	add	r3, sl
 800bbb8:	f103 0901 	add.w	r9, r3, #1
 800bbbc:	9302      	str	r3, [sp, #8]
 800bbbe:	464b      	mov	r3, r9
 800bbc0:	2b01      	cmp	r3, #1
 800bbc2:	bfb8      	it	lt
 800bbc4:	2301      	movlt	r3, #1
 800bbc6:	e7ba      	b.n	800bb3e <_dtoa_r+0x246>
 800bbc8:	2300      	movs	r3, #0
 800bbca:	e7b2      	b.n	800bb32 <_dtoa_r+0x23a>
 800bbcc:	2300      	movs	r3, #0
 800bbce:	e7f0      	b.n	800bbb2 <_dtoa_r+0x2ba>
 800bbd0:	2501      	movs	r5, #1
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	9306      	str	r3, [sp, #24]
 800bbd6:	950a      	str	r5, [sp, #40]	; 0x28
 800bbd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bbdc:	9302      	str	r3, [sp, #8]
 800bbde:	4699      	mov	r9, r3
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	2312      	movs	r3, #18
 800bbe4:	920b      	str	r2, [sp, #44]	; 0x2c
 800bbe6:	e7aa      	b.n	800bb3e <_dtoa_r+0x246>
 800bbe8:	2301      	movs	r3, #1
 800bbea:	930a      	str	r3, [sp, #40]	; 0x28
 800bbec:	e7f4      	b.n	800bbd8 <_dtoa_r+0x2e0>
 800bbee:	2301      	movs	r3, #1
 800bbf0:	9302      	str	r3, [sp, #8]
 800bbf2:	4699      	mov	r9, r3
 800bbf4:	461a      	mov	r2, r3
 800bbf6:	e7f5      	b.n	800bbe4 <_dtoa_r+0x2ec>
 800bbf8:	3101      	adds	r1, #1
 800bbfa:	6071      	str	r1, [r6, #4]
 800bbfc:	0052      	lsls	r2, r2, #1
 800bbfe:	e7a2      	b.n	800bb46 <_dtoa_r+0x24e>
 800bc00:	636f4361 	.word	0x636f4361
 800bc04:	3fd287a7 	.word	0x3fd287a7
 800bc08:	8b60c8b3 	.word	0x8b60c8b3
 800bc0c:	3fc68a28 	.word	0x3fc68a28
 800bc10:	509f79fb 	.word	0x509f79fb
 800bc14:	3fd34413 	.word	0x3fd34413
 800bc18:	7ff00000 	.word	0x7ff00000
 800bc1c:	0800e6dd 	.word	0x0800e6dd
 800bc20:	3ff80000 	.word	0x3ff80000
 800bc24:	0800e798 	.word	0x0800e798
 800bc28:	0800e770 	.word	0x0800e770
 800bc2c:	0800e709 	.word	0x0800e709
 800bc30:	07f1      	lsls	r1, r6, #31
 800bc32:	d508      	bpl.n	800bc46 <_dtoa_r+0x34e>
 800bc34:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bc38:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bc3c:	f7f4 fcdc 	bl	80005f8 <__aeabi_dmul>
 800bc40:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bc44:	3501      	adds	r5, #1
 800bc46:	1076      	asrs	r6, r6, #1
 800bc48:	3708      	adds	r7, #8
 800bc4a:	2e00      	cmp	r6, #0
 800bc4c:	d1f0      	bne.n	800bc30 <_dtoa_r+0x338>
 800bc4e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bc52:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bc56:	f7f4 fdf9 	bl	800084c <__aeabi_ddiv>
 800bc5a:	e9cd 0100 	strd	r0, r1, [sp]
 800bc5e:	e01a      	b.n	800bc96 <_dtoa_r+0x39e>
 800bc60:	2502      	movs	r5, #2
 800bc62:	e7a3      	b.n	800bbac <_dtoa_r+0x2b4>
 800bc64:	f000 80a0 	beq.w	800bda8 <_dtoa_r+0x4b0>
 800bc68:	f1ca 0600 	rsb	r6, sl, #0
 800bc6c:	4b9f      	ldr	r3, [pc, #636]	; (800beec <_dtoa_r+0x5f4>)
 800bc6e:	4fa0      	ldr	r7, [pc, #640]	; (800bef0 <_dtoa_r+0x5f8>)
 800bc70:	f006 020f 	and.w	r2, r6, #15
 800bc74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bc78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc7c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bc80:	f7f4 fcba 	bl	80005f8 <__aeabi_dmul>
 800bc84:	e9cd 0100 	strd	r0, r1, [sp]
 800bc88:	1136      	asrs	r6, r6, #4
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	2502      	movs	r5, #2
 800bc8e:	2e00      	cmp	r6, #0
 800bc90:	d17f      	bne.n	800bd92 <_dtoa_r+0x49a>
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d1e1      	bne.n	800bc5a <_dtoa_r+0x362>
 800bc96:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	f000 8087 	beq.w	800bdac <_dtoa_r+0x4b4>
 800bc9e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800bca2:	2200      	movs	r2, #0
 800bca4:	4b93      	ldr	r3, [pc, #588]	; (800bef4 <_dtoa_r+0x5fc>)
 800bca6:	4630      	mov	r0, r6
 800bca8:	4639      	mov	r1, r7
 800bcaa:	f7f4 ff17 	bl	8000adc <__aeabi_dcmplt>
 800bcae:	2800      	cmp	r0, #0
 800bcb0:	d07c      	beq.n	800bdac <_dtoa_r+0x4b4>
 800bcb2:	f1b9 0f00 	cmp.w	r9, #0
 800bcb6:	d079      	beq.n	800bdac <_dtoa_r+0x4b4>
 800bcb8:	9b02      	ldr	r3, [sp, #8]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	dd35      	ble.n	800bd2a <_dtoa_r+0x432>
 800bcbe:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800bcc2:	9308      	str	r3, [sp, #32]
 800bcc4:	4639      	mov	r1, r7
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	4b8b      	ldr	r3, [pc, #556]	; (800bef8 <_dtoa_r+0x600>)
 800bcca:	4630      	mov	r0, r6
 800bccc:	f7f4 fc94 	bl	80005f8 <__aeabi_dmul>
 800bcd0:	e9cd 0100 	strd	r0, r1, [sp]
 800bcd4:	9f02      	ldr	r7, [sp, #8]
 800bcd6:	3501      	adds	r5, #1
 800bcd8:	4628      	mov	r0, r5
 800bcda:	f7f4 fc23 	bl	8000524 <__aeabi_i2d>
 800bcde:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bce2:	f7f4 fc89 	bl	80005f8 <__aeabi_dmul>
 800bce6:	2200      	movs	r2, #0
 800bce8:	4b84      	ldr	r3, [pc, #528]	; (800befc <_dtoa_r+0x604>)
 800bcea:	f7f4 facf 	bl	800028c <__adddf3>
 800bcee:	4605      	mov	r5, r0
 800bcf0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800bcf4:	2f00      	cmp	r7, #0
 800bcf6:	d15d      	bne.n	800bdb4 <_dtoa_r+0x4bc>
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	4b81      	ldr	r3, [pc, #516]	; (800bf00 <_dtoa_r+0x608>)
 800bcfc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bd00:	f7f4 fac2 	bl	8000288 <__aeabi_dsub>
 800bd04:	462a      	mov	r2, r5
 800bd06:	4633      	mov	r3, r6
 800bd08:	e9cd 0100 	strd	r0, r1, [sp]
 800bd0c:	f7f4 ff04 	bl	8000b18 <__aeabi_dcmpgt>
 800bd10:	2800      	cmp	r0, #0
 800bd12:	f040 8288 	bne.w	800c226 <_dtoa_r+0x92e>
 800bd16:	462a      	mov	r2, r5
 800bd18:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800bd1c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bd20:	f7f4 fedc 	bl	8000adc <__aeabi_dcmplt>
 800bd24:	2800      	cmp	r0, #0
 800bd26:	f040 827c 	bne.w	800c222 <_dtoa_r+0x92a>
 800bd2a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bd2e:	e9cd 2300 	strd	r2, r3, [sp]
 800bd32:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	f2c0 8150 	blt.w	800bfda <_dtoa_r+0x6e2>
 800bd3a:	f1ba 0f0e 	cmp.w	sl, #14
 800bd3e:	f300 814c 	bgt.w	800bfda <_dtoa_r+0x6e2>
 800bd42:	4b6a      	ldr	r3, [pc, #424]	; (800beec <_dtoa_r+0x5f4>)
 800bd44:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800bd48:	ed93 7b00 	vldr	d7, [r3]
 800bd4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bd54:	f280 80d8 	bge.w	800bf08 <_dtoa_r+0x610>
 800bd58:	f1b9 0f00 	cmp.w	r9, #0
 800bd5c:	f300 80d4 	bgt.w	800bf08 <_dtoa_r+0x610>
 800bd60:	f040 825e 	bne.w	800c220 <_dtoa_r+0x928>
 800bd64:	2200      	movs	r2, #0
 800bd66:	4b66      	ldr	r3, [pc, #408]	; (800bf00 <_dtoa_r+0x608>)
 800bd68:	ec51 0b17 	vmov	r0, r1, d7
 800bd6c:	f7f4 fc44 	bl	80005f8 <__aeabi_dmul>
 800bd70:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bd74:	f7f4 fec6 	bl	8000b04 <__aeabi_dcmpge>
 800bd78:	464f      	mov	r7, r9
 800bd7a:	464e      	mov	r6, r9
 800bd7c:	2800      	cmp	r0, #0
 800bd7e:	f040 8234 	bne.w	800c1ea <_dtoa_r+0x8f2>
 800bd82:	2331      	movs	r3, #49	; 0x31
 800bd84:	f10b 0501 	add.w	r5, fp, #1
 800bd88:	f88b 3000 	strb.w	r3, [fp]
 800bd8c:	f10a 0a01 	add.w	sl, sl, #1
 800bd90:	e22f      	b.n	800c1f2 <_dtoa_r+0x8fa>
 800bd92:	07f2      	lsls	r2, r6, #31
 800bd94:	d505      	bpl.n	800bda2 <_dtoa_r+0x4aa>
 800bd96:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bd9a:	f7f4 fc2d 	bl	80005f8 <__aeabi_dmul>
 800bd9e:	3501      	adds	r5, #1
 800bda0:	2301      	movs	r3, #1
 800bda2:	1076      	asrs	r6, r6, #1
 800bda4:	3708      	adds	r7, #8
 800bda6:	e772      	b.n	800bc8e <_dtoa_r+0x396>
 800bda8:	2502      	movs	r5, #2
 800bdaa:	e774      	b.n	800bc96 <_dtoa_r+0x39e>
 800bdac:	f8cd a020 	str.w	sl, [sp, #32]
 800bdb0:	464f      	mov	r7, r9
 800bdb2:	e791      	b.n	800bcd8 <_dtoa_r+0x3e0>
 800bdb4:	4b4d      	ldr	r3, [pc, #308]	; (800beec <_dtoa_r+0x5f4>)
 800bdb6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bdba:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800bdbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d047      	beq.n	800be54 <_dtoa_r+0x55c>
 800bdc4:	4602      	mov	r2, r0
 800bdc6:	460b      	mov	r3, r1
 800bdc8:	2000      	movs	r0, #0
 800bdca:	494e      	ldr	r1, [pc, #312]	; (800bf04 <_dtoa_r+0x60c>)
 800bdcc:	f7f4 fd3e 	bl	800084c <__aeabi_ddiv>
 800bdd0:	462a      	mov	r2, r5
 800bdd2:	4633      	mov	r3, r6
 800bdd4:	f7f4 fa58 	bl	8000288 <__aeabi_dsub>
 800bdd8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800bddc:	465d      	mov	r5, fp
 800bdde:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bde2:	f7f4 feb9 	bl	8000b58 <__aeabi_d2iz>
 800bde6:	4606      	mov	r6, r0
 800bde8:	f7f4 fb9c 	bl	8000524 <__aeabi_i2d>
 800bdec:	4602      	mov	r2, r0
 800bdee:	460b      	mov	r3, r1
 800bdf0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bdf4:	f7f4 fa48 	bl	8000288 <__aeabi_dsub>
 800bdf8:	3630      	adds	r6, #48	; 0x30
 800bdfa:	f805 6b01 	strb.w	r6, [r5], #1
 800bdfe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800be02:	e9cd 0100 	strd	r0, r1, [sp]
 800be06:	f7f4 fe69 	bl	8000adc <__aeabi_dcmplt>
 800be0a:	2800      	cmp	r0, #0
 800be0c:	d163      	bne.n	800bed6 <_dtoa_r+0x5de>
 800be0e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800be12:	2000      	movs	r0, #0
 800be14:	4937      	ldr	r1, [pc, #220]	; (800bef4 <_dtoa_r+0x5fc>)
 800be16:	f7f4 fa37 	bl	8000288 <__aeabi_dsub>
 800be1a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800be1e:	f7f4 fe5d 	bl	8000adc <__aeabi_dcmplt>
 800be22:	2800      	cmp	r0, #0
 800be24:	f040 80b7 	bne.w	800bf96 <_dtoa_r+0x69e>
 800be28:	eba5 030b 	sub.w	r3, r5, fp
 800be2c:	429f      	cmp	r7, r3
 800be2e:	f77f af7c 	ble.w	800bd2a <_dtoa_r+0x432>
 800be32:	2200      	movs	r2, #0
 800be34:	4b30      	ldr	r3, [pc, #192]	; (800bef8 <_dtoa_r+0x600>)
 800be36:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800be3a:	f7f4 fbdd 	bl	80005f8 <__aeabi_dmul>
 800be3e:	2200      	movs	r2, #0
 800be40:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800be44:	4b2c      	ldr	r3, [pc, #176]	; (800bef8 <_dtoa_r+0x600>)
 800be46:	e9dd 0100 	ldrd	r0, r1, [sp]
 800be4a:	f7f4 fbd5 	bl	80005f8 <__aeabi_dmul>
 800be4e:	e9cd 0100 	strd	r0, r1, [sp]
 800be52:	e7c4      	b.n	800bdde <_dtoa_r+0x4e6>
 800be54:	462a      	mov	r2, r5
 800be56:	4633      	mov	r3, r6
 800be58:	f7f4 fbce 	bl	80005f8 <__aeabi_dmul>
 800be5c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800be60:	eb0b 0507 	add.w	r5, fp, r7
 800be64:	465e      	mov	r6, fp
 800be66:	e9dd 0100 	ldrd	r0, r1, [sp]
 800be6a:	f7f4 fe75 	bl	8000b58 <__aeabi_d2iz>
 800be6e:	4607      	mov	r7, r0
 800be70:	f7f4 fb58 	bl	8000524 <__aeabi_i2d>
 800be74:	3730      	adds	r7, #48	; 0x30
 800be76:	4602      	mov	r2, r0
 800be78:	460b      	mov	r3, r1
 800be7a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800be7e:	f7f4 fa03 	bl	8000288 <__aeabi_dsub>
 800be82:	f806 7b01 	strb.w	r7, [r6], #1
 800be86:	42ae      	cmp	r6, r5
 800be88:	e9cd 0100 	strd	r0, r1, [sp]
 800be8c:	f04f 0200 	mov.w	r2, #0
 800be90:	d126      	bne.n	800bee0 <_dtoa_r+0x5e8>
 800be92:	4b1c      	ldr	r3, [pc, #112]	; (800bf04 <_dtoa_r+0x60c>)
 800be94:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800be98:	f7f4 f9f8 	bl	800028c <__adddf3>
 800be9c:	4602      	mov	r2, r0
 800be9e:	460b      	mov	r3, r1
 800bea0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bea4:	f7f4 fe38 	bl	8000b18 <__aeabi_dcmpgt>
 800bea8:	2800      	cmp	r0, #0
 800beaa:	d174      	bne.n	800bf96 <_dtoa_r+0x69e>
 800beac:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800beb0:	2000      	movs	r0, #0
 800beb2:	4914      	ldr	r1, [pc, #80]	; (800bf04 <_dtoa_r+0x60c>)
 800beb4:	f7f4 f9e8 	bl	8000288 <__aeabi_dsub>
 800beb8:	4602      	mov	r2, r0
 800beba:	460b      	mov	r3, r1
 800bebc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bec0:	f7f4 fe0c 	bl	8000adc <__aeabi_dcmplt>
 800bec4:	2800      	cmp	r0, #0
 800bec6:	f43f af30 	beq.w	800bd2a <_dtoa_r+0x432>
 800beca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bece:	2b30      	cmp	r3, #48	; 0x30
 800bed0:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800bed4:	d002      	beq.n	800bedc <_dtoa_r+0x5e4>
 800bed6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800beda:	e04a      	b.n	800bf72 <_dtoa_r+0x67a>
 800bedc:	4615      	mov	r5, r2
 800bede:	e7f4      	b.n	800beca <_dtoa_r+0x5d2>
 800bee0:	4b05      	ldr	r3, [pc, #20]	; (800bef8 <_dtoa_r+0x600>)
 800bee2:	f7f4 fb89 	bl	80005f8 <__aeabi_dmul>
 800bee6:	e9cd 0100 	strd	r0, r1, [sp]
 800beea:	e7bc      	b.n	800be66 <_dtoa_r+0x56e>
 800beec:	0800e798 	.word	0x0800e798
 800bef0:	0800e770 	.word	0x0800e770
 800bef4:	3ff00000 	.word	0x3ff00000
 800bef8:	40240000 	.word	0x40240000
 800befc:	401c0000 	.word	0x401c0000
 800bf00:	40140000 	.word	0x40140000
 800bf04:	3fe00000 	.word	0x3fe00000
 800bf08:	e9dd 6700 	ldrd	r6, r7, [sp]
 800bf0c:	465d      	mov	r5, fp
 800bf0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bf12:	4630      	mov	r0, r6
 800bf14:	4639      	mov	r1, r7
 800bf16:	f7f4 fc99 	bl	800084c <__aeabi_ddiv>
 800bf1a:	f7f4 fe1d 	bl	8000b58 <__aeabi_d2iz>
 800bf1e:	4680      	mov	r8, r0
 800bf20:	f7f4 fb00 	bl	8000524 <__aeabi_i2d>
 800bf24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bf28:	f7f4 fb66 	bl	80005f8 <__aeabi_dmul>
 800bf2c:	4602      	mov	r2, r0
 800bf2e:	460b      	mov	r3, r1
 800bf30:	4630      	mov	r0, r6
 800bf32:	4639      	mov	r1, r7
 800bf34:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800bf38:	f7f4 f9a6 	bl	8000288 <__aeabi_dsub>
 800bf3c:	f805 6b01 	strb.w	r6, [r5], #1
 800bf40:	eba5 060b 	sub.w	r6, r5, fp
 800bf44:	45b1      	cmp	r9, r6
 800bf46:	4602      	mov	r2, r0
 800bf48:	460b      	mov	r3, r1
 800bf4a:	d139      	bne.n	800bfc0 <_dtoa_r+0x6c8>
 800bf4c:	f7f4 f99e 	bl	800028c <__adddf3>
 800bf50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bf54:	4606      	mov	r6, r0
 800bf56:	460f      	mov	r7, r1
 800bf58:	f7f4 fdde 	bl	8000b18 <__aeabi_dcmpgt>
 800bf5c:	b9c8      	cbnz	r0, 800bf92 <_dtoa_r+0x69a>
 800bf5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bf62:	4630      	mov	r0, r6
 800bf64:	4639      	mov	r1, r7
 800bf66:	f7f4 fdaf 	bl	8000ac8 <__aeabi_dcmpeq>
 800bf6a:	b110      	cbz	r0, 800bf72 <_dtoa_r+0x67a>
 800bf6c:	f018 0f01 	tst.w	r8, #1
 800bf70:	d10f      	bne.n	800bf92 <_dtoa_r+0x69a>
 800bf72:	9904      	ldr	r1, [sp, #16]
 800bf74:	4620      	mov	r0, r4
 800bf76:	f000 fcaa 	bl	800c8ce <_Bfree>
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bf7e:	702b      	strb	r3, [r5, #0]
 800bf80:	f10a 0301 	add.w	r3, sl, #1
 800bf84:	6013      	str	r3, [r2, #0]
 800bf86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	f000 8241 	beq.w	800c410 <_dtoa_r+0xb18>
 800bf8e:	601d      	str	r5, [r3, #0]
 800bf90:	e23e      	b.n	800c410 <_dtoa_r+0xb18>
 800bf92:	f8cd a020 	str.w	sl, [sp, #32]
 800bf96:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bf9a:	2a39      	cmp	r2, #57	; 0x39
 800bf9c:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 800bfa0:	d108      	bne.n	800bfb4 <_dtoa_r+0x6bc>
 800bfa2:	459b      	cmp	fp, r3
 800bfa4:	d10a      	bne.n	800bfbc <_dtoa_r+0x6c4>
 800bfa6:	9b08      	ldr	r3, [sp, #32]
 800bfa8:	3301      	adds	r3, #1
 800bfaa:	9308      	str	r3, [sp, #32]
 800bfac:	2330      	movs	r3, #48	; 0x30
 800bfae:	f88b 3000 	strb.w	r3, [fp]
 800bfb2:	465b      	mov	r3, fp
 800bfb4:	781a      	ldrb	r2, [r3, #0]
 800bfb6:	3201      	adds	r2, #1
 800bfb8:	701a      	strb	r2, [r3, #0]
 800bfba:	e78c      	b.n	800bed6 <_dtoa_r+0x5de>
 800bfbc:	461d      	mov	r5, r3
 800bfbe:	e7ea      	b.n	800bf96 <_dtoa_r+0x69e>
 800bfc0:	2200      	movs	r2, #0
 800bfc2:	4b9b      	ldr	r3, [pc, #620]	; (800c230 <_dtoa_r+0x938>)
 800bfc4:	f7f4 fb18 	bl	80005f8 <__aeabi_dmul>
 800bfc8:	2200      	movs	r2, #0
 800bfca:	2300      	movs	r3, #0
 800bfcc:	4606      	mov	r6, r0
 800bfce:	460f      	mov	r7, r1
 800bfd0:	f7f4 fd7a 	bl	8000ac8 <__aeabi_dcmpeq>
 800bfd4:	2800      	cmp	r0, #0
 800bfd6:	d09a      	beq.n	800bf0e <_dtoa_r+0x616>
 800bfd8:	e7cb      	b.n	800bf72 <_dtoa_r+0x67a>
 800bfda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bfdc:	2a00      	cmp	r2, #0
 800bfde:	f000 808b 	beq.w	800c0f8 <_dtoa_r+0x800>
 800bfe2:	9a06      	ldr	r2, [sp, #24]
 800bfe4:	2a01      	cmp	r2, #1
 800bfe6:	dc6e      	bgt.n	800c0c6 <_dtoa_r+0x7ce>
 800bfe8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bfea:	2a00      	cmp	r2, #0
 800bfec:	d067      	beq.n	800c0be <_dtoa_r+0x7c6>
 800bfee:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bff2:	9f07      	ldr	r7, [sp, #28]
 800bff4:	9d05      	ldr	r5, [sp, #20]
 800bff6:	9a05      	ldr	r2, [sp, #20]
 800bff8:	2101      	movs	r1, #1
 800bffa:	441a      	add	r2, r3
 800bffc:	4620      	mov	r0, r4
 800bffe:	9205      	str	r2, [sp, #20]
 800c000:	4498      	add	r8, r3
 800c002:	f000 fd04 	bl	800ca0e <__i2b>
 800c006:	4606      	mov	r6, r0
 800c008:	2d00      	cmp	r5, #0
 800c00a:	dd0c      	ble.n	800c026 <_dtoa_r+0x72e>
 800c00c:	f1b8 0f00 	cmp.w	r8, #0
 800c010:	dd09      	ble.n	800c026 <_dtoa_r+0x72e>
 800c012:	4545      	cmp	r5, r8
 800c014:	9a05      	ldr	r2, [sp, #20]
 800c016:	462b      	mov	r3, r5
 800c018:	bfa8      	it	ge
 800c01a:	4643      	movge	r3, r8
 800c01c:	1ad2      	subs	r2, r2, r3
 800c01e:	9205      	str	r2, [sp, #20]
 800c020:	1aed      	subs	r5, r5, r3
 800c022:	eba8 0803 	sub.w	r8, r8, r3
 800c026:	9b07      	ldr	r3, [sp, #28]
 800c028:	b1eb      	cbz	r3, 800c066 <_dtoa_r+0x76e>
 800c02a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d067      	beq.n	800c100 <_dtoa_r+0x808>
 800c030:	b18f      	cbz	r7, 800c056 <_dtoa_r+0x75e>
 800c032:	4631      	mov	r1, r6
 800c034:	463a      	mov	r2, r7
 800c036:	4620      	mov	r0, r4
 800c038:	f000 fd88 	bl	800cb4c <__pow5mult>
 800c03c:	9a04      	ldr	r2, [sp, #16]
 800c03e:	4601      	mov	r1, r0
 800c040:	4606      	mov	r6, r0
 800c042:	4620      	mov	r0, r4
 800c044:	f000 fcec 	bl	800ca20 <__multiply>
 800c048:	9904      	ldr	r1, [sp, #16]
 800c04a:	9008      	str	r0, [sp, #32]
 800c04c:	4620      	mov	r0, r4
 800c04e:	f000 fc3e 	bl	800c8ce <_Bfree>
 800c052:	9b08      	ldr	r3, [sp, #32]
 800c054:	9304      	str	r3, [sp, #16]
 800c056:	9b07      	ldr	r3, [sp, #28]
 800c058:	1bda      	subs	r2, r3, r7
 800c05a:	d004      	beq.n	800c066 <_dtoa_r+0x76e>
 800c05c:	9904      	ldr	r1, [sp, #16]
 800c05e:	4620      	mov	r0, r4
 800c060:	f000 fd74 	bl	800cb4c <__pow5mult>
 800c064:	9004      	str	r0, [sp, #16]
 800c066:	2101      	movs	r1, #1
 800c068:	4620      	mov	r0, r4
 800c06a:	f000 fcd0 	bl	800ca0e <__i2b>
 800c06e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c070:	4607      	mov	r7, r0
 800c072:	2b00      	cmp	r3, #0
 800c074:	f000 81d0 	beq.w	800c418 <_dtoa_r+0xb20>
 800c078:	461a      	mov	r2, r3
 800c07a:	4601      	mov	r1, r0
 800c07c:	4620      	mov	r0, r4
 800c07e:	f000 fd65 	bl	800cb4c <__pow5mult>
 800c082:	9b06      	ldr	r3, [sp, #24]
 800c084:	2b01      	cmp	r3, #1
 800c086:	4607      	mov	r7, r0
 800c088:	dc40      	bgt.n	800c10c <_dtoa_r+0x814>
 800c08a:	9b00      	ldr	r3, [sp, #0]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d139      	bne.n	800c104 <_dtoa_r+0x80c>
 800c090:	9b01      	ldr	r3, [sp, #4]
 800c092:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c096:	2b00      	cmp	r3, #0
 800c098:	d136      	bne.n	800c108 <_dtoa_r+0x810>
 800c09a:	9b01      	ldr	r3, [sp, #4]
 800c09c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c0a0:	0d1b      	lsrs	r3, r3, #20
 800c0a2:	051b      	lsls	r3, r3, #20
 800c0a4:	b12b      	cbz	r3, 800c0b2 <_dtoa_r+0x7ba>
 800c0a6:	9b05      	ldr	r3, [sp, #20]
 800c0a8:	3301      	adds	r3, #1
 800c0aa:	9305      	str	r3, [sp, #20]
 800c0ac:	f108 0801 	add.w	r8, r8, #1
 800c0b0:	2301      	movs	r3, #1
 800c0b2:	9307      	str	r3, [sp, #28]
 800c0b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d12a      	bne.n	800c110 <_dtoa_r+0x818>
 800c0ba:	2001      	movs	r0, #1
 800c0bc:	e030      	b.n	800c120 <_dtoa_r+0x828>
 800c0be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c0c0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c0c4:	e795      	b.n	800bff2 <_dtoa_r+0x6fa>
 800c0c6:	9b07      	ldr	r3, [sp, #28]
 800c0c8:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 800c0cc:	42bb      	cmp	r3, r7
 800c0ce:	bfbf      	itttt	lt
 800c0d0:	9b07      	ldrlt	r3, [sp, #28]
 800c0d2:	9707      	strlt	r7, [sp, #28]
 800c0d4:	1afa      	sublt	r2, r7, r3
 800c0d6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800c0d8:	bfbb      	ittet	lt
 800c0da:	189b      	addlt	r3, r3, r2
 800c0dc:	930e      	strlt	r3, [sp, #56]	; 0x38
 800c0de:	1bdf      	subge	r7, r3, r7
 800c0e0:	2700      	movlt	r7, #0
 800c0e2:	f1b9 0f00 	cmp.w	r9, #0
 800c0e6:	bfb5      	itete	lt
 800c0e8:	9b05      	ldrlt	r3, [sp, #20]
 800c0ea:	9d05      	ldrge	r5, [sp, #20]
 800c0ec:	eba3 0509 	sublt.w	r5, r3, r9
 800c0f0:	464b      	movge	r3, r9
 800c0f2:	bfb8      	it	lt
 800c0f4:	2300      	movlt	r3, #0
 800c0f6:	e77e      	b.n	800bff6 <_dtoa_r+0x6fe>
 800c0f8:	9f07      	ldr	r7, [sp, #28]
 800c0fa:	9d05      	ldr	r5, [sp, #20]
 800c0fc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800c0fe:	e783      	b.n	800c008 <_dtoa_r+0x710>
 800c100:	9a07      	ldr	r2, [sp, #28]
 800c102:	e7ab      	b.n	800c05c <_dtoa_r+0x764>
 800c104:	2300      	movs	r3, #0
 800c106:	e7d4      	b.n	800c0b2 <_dtoa_r+0x7ba>
 800c108:	9b00      	ldr	r3, [sp, #0]
 800c10a:	e7d2      	b.n	800c0b2 <_dtoa_r+0x7ba>
 800c10c:	2300      	movs	r3, #0
 800c10e:	9307      	str	r3, [sp, #28]
 800c110:	693b      	ldr	r3, [r7, #16]
 800c112:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800c116:	6918      	ldr	r0, [r3, #16]
 800c118:	f000 fc2b 	bl	800c972 <__hi0bits>
 800c11c:	f1c0 0020 	rsb	r0, r0, #32
 800c120:	4440      	add	r0, r8
 800c122:	f010 001f 	ands.w	r0, r0, #31
 800c126:	d047      	beq.n	800c1b8 <_dtoa_r+0x8c0>
 800c128:	f1c0 0320 	rsb	r3, r0, #32
 800c12c:	2b04      	cmp	r3, #4
 800c12e:	dd3b      	ble.n	800c1a8 <_dtoa_r+0x8b0>
 800c130:	9b05      	ldr	r3, [sp, #20]
 800c132:	f1c0 001c 	rsb	r0, r0, #28
 800c136:	4403      	add	r3, r0
 800c138:	9305      	str	r3, [sp, #20]
 800c13a:	4405      	add	r5, r0
 800c13c:	4480      	add	r8, r0
 800c13e:	9b05      	ldr	r3, [sp, #20]
 800c140:	2b00      	cmp	r3, #0
 800c142:	dd05      	ble.n	800c150 <_dtoa_r+0x858>
 800c144:	461a      	mov	r2, r3
 800c146:	9904      	ldr	r1, [sp, #16]
 800c148:	4620      	mov	r0, r4
 800c14a:	f000 fd4d 	bl	800cbe8 <__lshift>
 800c14e:	9004      	str	r0, [sp, #16]
 800c150:	f1b8 0f00 	cmp.w	r8, #0
 800c154:	dd05      	ble.n	800c162 <_dtoa_r+0x86a>
 800c156:	4639      	mov	r1, r7
 800c158:	4642      	mov	r2, r8
 800c15a:	4620      	mov	r0, r4
 800c15c:	f000 fd44 	bl	800cbe8 <__lshift>
 800c160:	4607      	mov	r7, r0
 800c162:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c164:	b353      	cbz	r3, 800c1bc <_dtoa_r+0x8c4>
 800c166:	4639      	mov	r1, r7
 800c168:	9804      	ldr	r0, [sp, #16]
 800c16a:	f000 fd91 	bl	800cc90 <__mcmp>
 800c16e:	2800      	cmp	r0, #0
 800c170:	da24      	bge.n	800c1bc <_dtoa_r+0x8c4>
 800c172:	2300      	movs	r3, #0
 800c174:	220a      	movs	r2, #10
 800c176:	9904      	ldr	r1, [sp, #16]
 800c178:	4620      	mov	r0, r4
 800c17a:	f000 fbbf 	bl	800c8fc <__multadd>
 800c17e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c180:	9004      	str	r0, [sp, #16]
 800c182:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800c186:	2b00      	cmp	r3, #0
 800c188:	f000 814d 	beq.w	800c426 <_dtoa_r+0xb2e>
 800c18c:	2300      	movs	r3, #0
 800c18e:	4631      	mov	r1, r6
 800c190:	220a      	movs	r2, #10
 800c192:	4620      	mov	r0, r4
 800c194:	f000 fbb2 	bl	800c8fc <__multadd>
 800c198:	9b02      	ldr	r3, [sp, #8]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	4606      	mov	r6, r0
 800c19e:	dc4f      	bgt.n	800c240 <_dtoa_r+0x948>
 800c1a0:	9b06      	ldr	r3, [sp, #24]
 800c1a2:	2b02      	cmp	r3, #2
 800c1a4:	dd4c      	ble.n	800c240 <_dtoa_r+0x948>
 800c1a6:	e011      	b.n	800c1cc <_dtoa_r+0x8d4>
 800c1a8:	d0c9      	beq.n	800c13e <_dtoa_r+0x846>
 800c1aa:	9a05      	ldr	r2, [sp, #20]
 800c1ac:	331c      	adds	r3, #28
 800c1ae:	441a      	add	r2, r3
 800c1b0:	9205      	str	r2, [sp, #20]
 800c1b2:	441d      	add	r5, r3
 800c1b4:	4498      	add	r8, r3
 800c1b6:	e7c2      	b.n	800c13e <_dtoa_r+0x846>
 800c1b8:	4603      	mov	r3, r0
 800c1ba:	e7f6      	b.n	800c1aa <_dtoa_r+0x8b2>
 800c1bc:	f1b9 0f00 	cmp.w	r9, #0
 800c1c0:	dc38      	bgt.n	800c234 <_dtoa_r+0x93c>
 800c1c2:	9b06      	ldr	r3, [sp, #24]
 800c1c4:	2b02      	cmp	r3, #2
 800c1c6:	dd35      	ble.n	800c234 <_dtoa_r+0x93c>
 800c1c8:	f8cd 9008 	str.w	r9, [sp, #8]
 800c1cc:	9b02      	ldr	r3, [sp, #8]
 800c1ce:	b963      	cbnz	r3, 800c1ea <_dtoa_r+0x8f2>
 800c1d0:	4639      	mov	r1, r7
 800c1d2:	2205      	movs	r2, #5
 800c1d4:	4620      	mov	r0, r4
 800c1d6:	f000 fb91 	bl	800c8fc <__multadd>
 800c1da:	4601      	mov	r1, r0
 800c1dc:	4607      	mov	r7, r0
 800c1de:	9804      	ldr	r0, [sp, #16]
 800c1e0:	f000 fd56 	bl	800cc90 <__mcmp>
 800c1e4:	2800      	cmp	r0, #0
 800c1e6:	f73f adcc 	bgt.w	800bd82 <_dtoa_r+0x48a>
 800c1ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c1ec:	465d      	mov	r5, fp
 800c1ee:	ea6f 0a03 	mvn.w	sl, r3
 800c1f2:	f04f 0900 	mov.w	r9, #0
 800c1f6:	4639      	mov	r1, r7
 800c1f8:	4620      	mov	r0, r4
 800c1fa:	f000 fb68 	bl	800c8ce <_Bfree>
 800c1fe:	2e00      	cmp	r6, #0
 800c200:	f43f aeb7 	beq.w	800bf72 <_dtoa_r+0x67a>
 800c204:	f1b9 0f00 	cmp.w	r9, #0
 800c208:	d005      	beq.n	800c216 <_dtoa_r+0x91e>
 800c20a:	45b1      	cmp	r9, r6
 800c20c:	d003      	beq.n	800c216 <_dtoa_r+0x91e>
 800c20e:	4649      	mov	r1, r9
 800c210:	4620      	mov	r0, r4
 800c212:	f000 fb5c 	bl	800c8ce <_Bfree>
 800c216:	4631      	mov	r1, r6
 800c218:	4620      	mov	r0, r4
 800c21a:	f000 fb58 	bl	800c8ce <_Bfree>
 800c21e:	e6a8      	b.n	800bf72 <_dtoa_r+0x67a>
 800c220:	2700      	movs	r7, #0
 800c222:	463e      	mov	r6, r7
 800c224:	e7e1      	b.n	800c1ea <_dtoa_r+0x8f2>
 800c226:	f8dd a020 	ldr.w	sl, [sp, #32]
 800c22a:	463e      	mov	r6, r7
 800c22c:	e5a9      	b.n	800bd82 <_dtoa_r+0x48a>
 800c22e:	bf00      	nop
 800c230:	40240000 	.word	0x40240000
 800c234:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c236:	f8cd 9008 	str.w	r9, [sp, #8]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	f000 80fa 	beq.w	800c434 <_dtoa_r+0xb3c>
 800c240:	2d00      	cmp	r5, #0
 800c242:	dd05      	ble.n	800c250 <_dtoa_r+0x958>
 800c244:	4631      	mov	r1, r6
 800c246:	462a      	mov	r2, r5
 800c248:	4620      	mov	r0, r4
 800c24a:	f000 fccd 	bl	800cbe8 <__lshift>
 800c24e:	4606      	mov	r6, r0
 800c250:	9b07      	ldr	r3, [sp, #28]
 800c252:	2b00      	cmp	r3, #0
 800c254:	d04c      	beq.n	800c2f0 <_dtoa_r+0x9f8>
 800c256:	6871      	ldr	r1, [r6, #4]
 800c258:	4620      	mov	r0, r4
 800c25a:	f000 fb04 	bl	800c866 <_Balloc>
 800c25e:	6932      	ldr	r2, [r6, #16]
 800c260:	3202      	adds	r2, #2
 800c262:	4605      	mov	r5, r0
 800c264:	0092      	lsls	r2, r2, #2
 800c266:	f106 010c 	add.w	r1, r6, #12
 800c26a:	300c      	adds	r0, #12
 800c26c:	f000 faf0 	bl	800c850 <memcpy>
 800c270:	2201      	movs	r2, #1
 800c272:	4629      	mov	r1, r5
 800c274:	4620      	mov	r0, r4
 800c276:	f000 fcb7 	bl	800cbe8 <__lshift>
 800c27a:	9b00      	ldr	r3, [sp, #0]
 800c27c:	f8cd b014 	str.w	fp, [sp, #20]
 800c280:	f003 0301 	and.w	r3, r3, #1
 800c284:	46b1      	mov	r9, r6
 800c286:	9307      	str	r3, [sp, #28]
 800c288:	4606      	mov	r6, r0
 800c28a:	4639      	mov	r1, r7
 800c28c:	9804      	ldr	r0, [sp, #16]
 800c28e:	f7ff faa7 	bl	800b7e0 <quorem>
 800c292:	4649      	mov	r1, r9
 800c294:	4605      	mov	r5, r0
 800c296:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800c29a:	9804      	ldr	r0, [sp, #16]
 800c29c:	f000 fcf8 	bl	800cc90 <__mcmp>
 800c2a0:	4632      	mov	r2, r6
 800c2a2:	9000      	str	r0, [sp, #0]
 800c2a4:	4639      	mov	r1, r7
 800c2a6:	4620      	mov	r0, r4
 800c2a8:	f000 fd0c 	bl	800ccc4 <__mdiff>
 800c2ac:	68c3      	ldr	r3, [r0, #12]
 800c2ae:	4602      	mov	r2, r0
 800c2b0:	bb03      	cbnz	r3, 800c2f4 <_dtoa_r+0x9fc>
 800c2b2:	4601      	mov	r1, r0
 800c2b4:	9008      	str	r0, [sp, #32]
 800c2b6:	9804      	ldr	r0, [sp, #16]
 800c2b8:	f000 fcea 	bl	800cc90 <__mcmp>
 800c2bc:	9a08      	ldr	r2, [sp, #32]
 800c2be:	4603      	mov	r3, r0
 800c2c0:	4611      	mov	r1, r2
 800c2c2:	4620      	mov	r0, r4
 800c2c4:	9308      	str	r3, [sp, #32]
 800c2c6:	f000 fb02 	bl	800c8ce <_Bfree>
 800c2ca:	9b08      	ldr	r3, [sp, #32]
 800c2cc:	b9a3      	cbnz	r3, 800c2f8 <_dtoa_r+0xa00>
 800c2ce:	9a06      	ldr	r2, [sp, #24]
 800c2d0:	b992      	cbnz	r2, 800c2f8 <_dtoa_r+0xa00>
 800c2d2:	9a07      	ldr	r2, [sp, #28]
 800c2d4:	b982      	cbnz	r2, 800c2f8 <_dtoa_r+0xa00>
 800c2d6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c2da:	d029      	beq.n	800c330 <_dtoa_r+0xa38>
 800c2dc:	9b00      	ldr	r3, [sp, #0]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	dd01      	ble.n	800c2e6 <_dtoa_r+0x9ee>
 800c2e2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800c2e6:	9b05      	ldr	r3, [sp, #20]
 800c2e8:	1c5d      	adds	r5, r3, #1
 800c2ea:	f883 8000 	strb.w	r8, [r3]
 800c2ee:	e782      	b.n	800c1f6 <_dtoa_r+0x8fe>
 800c2f0:	4630      	mov	r0, r6
 800c2f2:	e7c2      	b.n	800c27a <_dtoa_r+0x982>
 800c2f4:	2301      	movs	r3, #1
 800c2f6:	e7e3      	b.n	800c2c0 <_dtoa_r+0x9c8>
 800c2f8:	9a00      	ldr	r2, [sp, #0]
 800c2fa:	2a00      	cmp	r2, #0
 800c2fc:	db04      	blt.n	800c308 <_dtoa_r+0xa10>
 800c2fe:	d125      	bne.n	800c34c <_dtoa_r+0xa54>
 800c300:	9a06      	ldr	r2, [sp, #24]
 800c302:	bb1a      	cbnz	r2, 800c34c <_dtoa_r+0xa54>
 800c304:	9a07      	ldr	r2, [sp, #28]
 800c306:	bb0a      	cbnz	r2, 800c34c <_dtoa_r+0xa54>
 800c308:	2b00      	cmp	r3, #0
 800c30a:	ddec      	ble.n	800c2e6 <_dtoa_r+0x9ee>
 800c30c:	2201      	movs	r2, #1
 800c30e:	9904      	ldr	r1, [sp, #16]
 800c310:	4620      	mov	r0, r4
 800c312:	f000 fc69 	bl	800cbe8 <__lshift>
 800c316:	4639      	mov	r1, r7
 800c318:	9004      	str	r0, [sp, #16]
 800c31a:	f000 fcb9 	bl	800cc90 <__mcmp>
 800c31e:	2800      	cmp	r0, #0
 800c320:	dc03      	bgt.n	800c32a <_dtoa_r+0xa32>
 800c322:	d1e0      	bne.n	800c2e6 <_dtoa_r+0x9ee>
 800c324:	f018 0f01 	tst.w	r8, #1
 800c328:	d0dd      	beq.n	800c2e6 <_dtoa_r+0x9ee>
 800c32a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c32e:	d1d8      	bne.n	800c2e2 <_dtoa_r+0x9ea>
 800c330:	9b05      	ldr	r3, [sp, #20]
 800c332:	9a05      	ldr	r2, [sp, #20]
 800c334:	1c5d      	adds	r5, r3, #1
 800c336:	2339      	movs	r3, #57	; 0x39
 800c338:	7013      	strb	r3, [r2, #0]
 800c33a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c33e:	2b39      	cmp	r3, #57	; 0x39
 800c340:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800c344:	d04f      	beq.n	800c3e6 <_dtoa_r+0xaee>
 800c346:	3301      	adds	r3, #1
 800c348:	7013      	strb	r3, [r2, #0]
 800c34a:	e754      	b.n	800c1f6 <_dtoa_r+0x8fe>
 800c34c:	9a05      	ldr	r2, [sp, #20]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	f102 0501 	add.w	r5, r2, #1
 800c354:	dd06      	ble.n	800c364 <_dtoa_r+0xa6c>
 800c356:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c35a:	d0e9      	beq.n	800c330 <_dtoa_r+0xa38>
 800c35c:	f108 0801 	add.w	r8, r8, #1
 800c360:	9b05      	ldr	r3, [sp, #20]
 800c362:	e7c2      	b.n	800c2ea <_dtoa_r+0x9f2>
 800c364:	9a02      	ldr	r2, [sp, #8]
 800c366:	f805 8c01 	strb.w	r8, [r5, #-1]
 800c36a:	eba5 030b 	sub.w	r3, r5, fp
 800c36e:	4293      	cmp	r3, r2
 800c370:	d021      	beq.n	800c3b6 <_dtoa_r+0xabe>
 800c372:	2300      	movs	r3, #0
 800c374:	220a      	movs	r2, #10
 800c376:	9904      	ldr	r1, [sp, #16]
 800c378:	4620      	mov	r0, r4
 800c37a:	f000 fabf 	bl	800c8fc <__multadd>
 800c37e:	45b1      	cmp	r9, r6
 800c380:	9004      	str	r0, [sp, #16]
 800c382:	f04f 0300 	mov.w	r3, #0
 800c386:	f04f 020a 	mov.w	r2, #10
 800c38a:	4649      	mov	r1, r9
 800c38c:	4620      	mov	r0, r4
 800c38e:	d105      	bne.n	800c39c <_dtoa_r+0xaa4>
 800c390:	f000 fab4 	bl	800c8fc <__multadd>
 800c394:	4681      	mov	r9, r0
 800c396:	4606      	mov	r6, r0
 800c398:	9505      	str	r5, [sp, #20]
 800c39a:	e776      	b.n	800c28a <_dtoa_r+0x992>
 800c39c:	f000 faae 	bl	800c8fc <__multadd>
 800c3a0:	4631      	mov	r1, r6
 800c3a2:	4681      	mov	r9, r0
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	220a      	movs	r2, #10
 800c3a8:	4620      	mov	r0, r4
 800c3aa:	f000 faa7 	bl	800c8fc <__multadd>
 800c3ae:	4606      	mov	r6, r0
 800c3b0:	e7f2      	b.n	800c398 <_dtoa_r+0xaa0>
 800c3b2:	f04f 0900 	mov.w	r9, #0
 800c3b6:	2201      	movs	r2, #1
 800c3b8:	9904      	ldr	r1, [sp, #16]
 800c3ba:	4620      	mov	r0, r4
 800c3bc:	f000 fc14 	bl	800cbe8 <__lshift>
 800c3c0:	4639      	mov	r1, r7
 800c3c2:	9004      	str	r0, [sp, #16]
 800c3c4:	f000 fc64 	bl	800cc90 <__mcmp>
 800c3c8:	2800      	cmp	r0, #0
 800c3ca:	dcb6      	bgt.n	800c33a <_dtoa_r+0xa42>
 800c3cc:	d102      	bne.n	800c3d4 <_dtoa_r+0xadc>
 800c3ce:	f018 0f01 	tst.w	r8, #1
 800c3d2:	d1b2      	bne.n	800c33a <_dtoa_r+0xa42>
 800c3d4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c3d8:	2b30      	cmp	r3, #48	; 0x30
 800c3da:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800c3de:	f47f af0a 	bne.w	800c1f6 <_dtoa_r+0x8fe>
 800c3e2:	4615      	mov	r5, r2
 800c3e4:	e7f6      	b.n	800c3d4 <_dtoa_r+0xadc>
 800c3e6:	4593      	cmp	fp, r2
 800c3e8:	d105      	bne.n	800c3f6 <_dtoa_r+0xafe>
 800c3ea:	2331      	movs	r3, #49	; 0x31
 800c3ec:	f10a 0a01 	add.w	sl, sl, #1
 800c3f0:	f88b 3000 	strb.w	r3, [fp]
 800c3f4:	e6ff      	b.n	800c1f6 <_dtoa_r+0x8fe>
 800c3f6:	4615      	mov	r5, r2
 800c3f8:	e79f      	b.n	800c33a <_dtoa_r+0xa42>
 800c3fa:	f8df b064 	ldr.w	fp, [pc, #100]	; 800c460 <_dtoa_r+0xb68>
 800c3fe:	e007      	b.n	800c410 <_dtoa_r+0xb18>
 800c400:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c402:	f8df b060 	ldr.w	fp, [pc, #96]	; 800c464 <_dtoa_r+0xb6c>
 800c406:	b11b      	cbz	r3, 800c410 <_dtoa_r+0xb18>
 800c408:	f10b 0308 	add.w	r3, fp, #8
 800c40c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c40e:	6013      	str	r3, [r2, #0]
 800c410:	4658      	mov	r0, fp
 800c412:	b017      	add	sp, #92	; 0x5c
 800c414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c418:	9b06      	ldr	r3, [sp, #24]
 800c41a:	2b01      	cmp	r3, #1
 800c41c:	f77f ae35 	ble.w	800c08a <_dtoa_r+0x792>
 800c420:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c422:	9307      	str	r3, [sp, #28]
 800c424:	e649      	b.n	800c0ba <_dtoa_r+0x7c2>
 800c426:	9b02      	ldr	r3, [sp, #8]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	dc03      	bgt.n	800c434 <_dtoa_r+0xb3c>
 800c42c:	9b06      	ldr	r3, [sp, #24]
 800c42e:	2b02      	cmp	r3, #2
 800c430:	f73f aecc 	bgt.w	800c1cc <_dtoa_r+0x8d4>
 800c434:	465d      	mov	r5, fp
 800c436:	4639      	mov	r1, r7
 800c438:	9804      	ldr	r0, [sp, #16]
 800c43a:	f7ff f9d1 	bl	800b7e0 <quorem>
 800c43e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800c442:	f805 8b01 	strb.w	r8, [r5], #1
 800c446:	9a02      	ldr	r2, [sp, #8]
 800c448:	eba5 030b 	sub.w	r3, r5, fp
 800c44c:	429a      	cmp	r2, r3
 800c44e:	ddb0      	ble.n	800c3b2 <_dtoa_r+0xaba>
 800c450:	2300      	movs	r3, #0
 800c452:	220a      	movs	r2, #10
 800c454:	9904      	ldr	r1, [sp, #16]
 800c456:	4620      	mov	r0, r4
 800c458:	f000 fa50 	bl	800c8fc <__multadd>
 800c45c:	9004      	str	r0, [sp, #16]
 800c45e:	e7ea      	b.n	800c436 <_dtoa_r+0xb3e>
 800c460:	0800e6dc 	.word	0x0800e6dc
 800c464:	0800e700 	.word	0x0800e700

0800c468 <__sflush_r>:
 800c468:	898a      	ldrh	r2, [r1, #12]
 800c46a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c46e:	4605      	mov	r5, r0
 800c470:	0710      	lsls	r0, r2, #28
 800c472:	460c      	mov	r4, r1
 800c474:	d458      	bmi.n	800c528 <__sflush_r+0xc0>
 800c476:	684b      	ldr	r3, [r1, #4]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	dc05      	bgt.n	800c488 <__sflush_r+0x20>
 800c47c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c47e:	2b00      	cmp	r3, #0
 800c480:	dc02      	bgt.n	800c488 <__sflush_r+0x20>
 800c482:	2000      	movs	r0, #0
 800c484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c488:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c48a:	2e00      	cmp	r6, #0
 800c48c:	d0f9      	beq.n	800c482 <__sflush_r+0x1a>
 800c48e:	2300      	movs	r3, #0
 800c490:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c494:	682f      	ldr	r7, [r5, #0]
 800c496:	6a21      	ldr	r1, [r4, #32]
 800c498:	602b      	str	r3, [r5, #0]
 800c49a:	d032      	beq.n	800c502 <__sflush_r+0x9a>
 800c49c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c49e:	89a3      	ldrh	r3, [r4, #12]
 800c4a0:	075a      	lsls	r2, r3, #29
 800c4a2:	d505      	bpl.n	800c4b0 <__sflush_r+0x48>
 800c4a4:	6863      	ldr	r3, [r4, #4]
 800c4a6:	1ac0      	subs	r0, r0, r3
 800c4a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c4aa:	b10b      	cbz	r3, 800c4b0 <__sflush_r+0x48>
 800c4ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c4ae:	1ac0      	subs	r0, r0, r3
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	4602      	mov	r2, r0
 800c4b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c4b6:	6a21      	ldr	r1, [r4, #32]
 800c4b8:	4628      	mov	r0, r5
 800c4ba:	47b0      	blx	r6
 800c4bc:	1c43      	adds	r3, r0, #1
 800c4be:	89a3      	ldrh	r3, [r4, #12]
 800c4c0:	d106      	bne.n	800c4d0 <__sflush_r+0x68>
 800c4c2:	6829      	ldr	r1, [r5, #0]
 800c4c4:	291d      	cmp	r1, #29
 800c4c6:	d848      	bhi.n	800c55a <__sflush_r+0xf2>
 800c4c8:	4a29      	ldr	r2, [pc, #164]	; (800c570 <__sflush_r+0x108>)
 800c4ca:	40ca      	lsrs	r2, r1
 800c4cc:	07d6      	lsls	r6, r2, #31
 800c4ce:	d544      	bpl.n	800c55a <__sflush_r+0xf2>
 800c4d0:	2200      	movs	r2, #0
 800c4d2:	6062      	str	r2, [r4, #4]
 800c4d4:	04d9      	lsls	r1, r3, #19
 800c4d6:	6922      	ldr	r2, [r4, #16]
 800c4d8:	6022      	str	r2, [r4, #0]
 800c4da:	d504      	bpl.n	800c4e6 <__sflush_r+0x7e>
 800c4dc:	1c42      	adds	r2, r0, #1
 800c4de:	d101      	bne.n	800c4e4 <__sflush_r+0x7c>
 800c4e0:	682b      	ldr	r3, [r5, #0]
 800c4e2:	b903      	cbnz	r3, 800c4e6 <__sflush_r+0x7e>
 800c4e4:	6560      	str	r0, [r4, #84]	; 0x54
 800c4e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c4e8:	602f      	str	r7, [r5, #0]
 800c4ea:	2900      	cmp	r1, #0
 800c4ec:	d0c9      	beq.n	800c482 <__sflush_r+0x1a>
 800c4ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c4f2:	4299      	cmp	r1, r3
 800c4f4:	d002      	beq.n	800c4fc <__sflush_r+0x94>
 800c4f6:	4628      	mov	r0, r5
 800c4f8:	f000 fc9e 	bl	800ce38 <_free_r>
 800c4fc:	2000      	movs	r0, #0
 800c4fe:	6360      	str	r0, [r4, #52]	; 0x34
 800c500:	e7c0      	b.n	800c484 <__sflush_r+0x1c>
 800c502:	2301      	movs	r3, #1
 800c504:	4628      	mov	r0, r5
 800c506:	47b0      	blx	r6
 800c508:	1c41      	adds	r1, r0, #1
 800c50a:	d1c8      	bne.n	800c49e <__sflush_r+0x36>
 800c50c:	682b      	ldr	r3, [r5, #0]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d0c5      	beq.n	800c49e <__sflush_r+0x36>
 800c512:	2b1d      	cmp	r3, #29
 800c514:	d001      	beq.n	800c51a <__sflush_r+0xb2>
 800c516:	2b16      	cmp	r3, #22
 800c518:	d101      	bne.n	800c51e <__sflush_r+0xb6>
 800c51a:	602f      	str	r7, [r5, #0]
 800c51c:	e7b1      	b.n	800c482 <__sflush_r+0x1a>
 800c51e:	89a3      	ldrh	r3, [r4, #12]
 800c520:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c524:	81a3      	strh	r3, [r4, #12]
 800c526:	e7ad      	b.n	800c484 <__sflush_r+0x1c>
 800c528:	690f      	ldr	r7, [r1, #16]
 800c52a:	2f00      	cmp	r7, #0
 800c52c:	d0a9      	beq.n	800c482 <__sflush_r+0x1a>
 800c52e:	0793      	lsls	r3, r2, #30
 800c530:	680e      	ldr	r6, [r1, #0]
 800c532:	bf08      	it	eq
 800c534:	694b      	ldreq	r3, [r1, #20]
 800c536:	600f      	str	r7, [r1, #0]
 800c538:	bf18      	it	ne
 800c53a:	2300      	movne	r3, #0
 800c53c:	eba6 0807 	sub.w	r8, r6, r7
 800c540:	608b      	str	r3, [r1, #8]
 800c542:	f1b8 0f00 	cmp.w	r8, #0
 800c546:	dd9c      	ble.n	800c482 <__sflush_r+0x1a>
 800c548:	4643      	mov	r3, r8
 800c54a:	463a      	mov	r2, r7
 800c54c:	6a21      	ldr	r1, [r4, #32]
 800c54e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c550:	4628      	mov	r0, r5
 800c552:	47b0      	blx	r6
 800c554:	2800      	cmp	r0, #0
 800c556:	dc06      	bgt.n	800c566 <__sflush_r+0xfe>
 800c558:	89a3      	ldrh	r3, [r4, #12]
 800c55a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c55e:	81a3      	strh	r3, [r4, #12]
 800c560:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c564:	e78e      	b.n	800c484 <__sflush_r+0x1c>
 800c566:	4407      	add	r7, r0
 800c568:	eba8 0800 	sub.w	r8, r8, r0
 800c56c:	e7e9      	b.n	800c542 <__sflush_r+0xda>
 800c56e:	bf00      	nop
 800c570:	20400001 	.word	0x20400001

0800c574 <_fflush_r>:
 800c574:	b538      	push	{r3, r4, r5, lr}
 800c576:	690b      	ldr	r3, [r1, #16]
 800c578:	4605      	mov	r5, r0
 800c57a:	460c      	mov	r4, r1
 800c57c:	b1db      	cbz	r3, 800c5b6 <_fflush_r+0x42>
 800c57e:	b118      	cbz	r0, 800c588 <_fflush_r+0x14>
 800c580:	6983      	ldr	r3, [r0, #24]
 800c582:	b90b      	cbnz	r3, 800c588 <_fflush_r+0x14>
 800c584:	f000 f860 	bl	800c648 <__sinit>
 800c588:	4b0c      	ldr	r3, [pc, #48]	; (800c5bc <_fflush_r+0x48>)
 800c58a:	429c      	cmp	r4, r3
 800c58c:	d109      	bne.n	800c5a2 <_fflush_r+0x2e>
 800c58e:	686c      	ldr	r4, [r5, #4]
 800c590:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c594:	b17b      	cbz	r3, 800c5b6 <_fflush_r+0x42>
 800c596:	4621      	mov	r1, r4
 800c598:	4628      	mov	r0, r5
 800c59a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c59e:	f7ff bf63 	b.w	800c468 <__sflush_r>
 800c5a2:	4b07      	ldr	r3, [pc, #28]	; (800c5c0 <_fflush_r+0x4c>)
 800c5a4:	429c      	cmp	r4, r3
 800c5a6:	d101      	bne.n	800c5ac <_fflush_r+0x38>
 800c5a8:	68ac      	ldr	r4, [r5, #8]
 800c5aa:	e7f1      	b.n	800c590 <_fflush_r+0x1c>
 800c5ac:	4b05      	ldr	r3, [pc, #20]	; (800c5c4 <_fflush_r+0x50>)
 800c5ae:	429c      	cmp	r4, r3
 800c5b0:	bf08      	it	eq
 800c5b2:	68ec      	ldreq	r4, [r5, #12]
 800c5b4:	e7ec      	b.n	800c590 <_fflush_r+0x1c>
 800c5b6:	2000      	movs	r0, #0
 800c5b8:	bd38      	pop	{r3, r4, r5, pc}
 800c5ba:	bf00      	nop
 800c5bc:	0800e730 	.word	0x0800e730
 800c5c0:	0800e750 	.word	0x0800e750
 800c5c4:	0800e710 	.word	0x0800e710

0800c5c8 <std>:
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	b510      	push	{r4, lr}
 800c5cc:	4604      	mov	r4, r0
 800c5ce:	e9c0 3300 	strd	r3, r3, [r0]
 800c5d2:	6083      	str	r3, [r0, #8]
 800c5d4:	8181      	strh	r1, [r0, #12]
 800c5d6:	6643      	str	r3, [r0, #100]	; 0x64
 800c5d8:	81c2      	strh	r2, [r0, #14]
 800c5da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c5de:	6183      	str	r3, [r0, #24]
 800c5e0:	4619      	mov	r1, r3
 800c5e2:	2208      	movs	r2, #8
 800c5e4:	305c      	adds	r0, #92	; 0x5c
 800c5e6:	f7fe fb5b 	bl	800aca0 <memset>
 800c5ea:	4b05      	ldr	r3, [pc, #20]	; (800c600 <std+0x38>)
 800c5ec:	6263      	str	r3, [r4, #36]	; 0x24
 800c5ee:	4b05      	ldr	r3, [pc, #20]	; (800c604 <std+0x3c>)
 800c5f0:	62a3      	str	r3, [r4, #40]	; 0x28
 800c5f2:	4b05      	ldr	r3, [pc, #20]	; (800c608 <std+0x40>)
 800c5f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c5f6:	4b05      	ldr	r3, [pc, #20]	; (800c60c <std+0x44>)
 800c5f8:	6224      	str	r4, [r4, #32]
 800c5fa:	6323      	str	r3, [r4, #48]	; 0x30
 800c5fc:	bd10      	pop	{r4, pc}
 800c5fe:	bf00      	nop
 800c600:	0800d229 	.word	0x0800d229
 800c604:	0800d24b 	.word	0x0800d24b
 800c608:	0800d283 	.word	0x0800d283
 800c60c:	0800d2a7 	.word	0x0800d2a7

0800c610 <_cleanup_r>:
 800c610:	4901      	ldr	r1, [pc, #4]	; (800c618 <_cleanup_r+0x8>)
 800c612:	f000 b885 	b.w	800c720 <_fwalk_reent>
 800c616:	bf00      	nop
 800c618:	0800c575 	.word	0x0800c575

0800c61c <__sfmoreglue>:
 800c61c:	b570      	push	{r4, r5, r6, lr}
 800c61e:	1e4a      	subs	r2, r1, #1
 800c620:	2568      	movs	r5, #104	; 0x68
 800c622:	4355      	muls	r5, r2
 800c624:	460e      	mov	r6, r1
 800c626:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c62a:	f000 fc53 	bl	800ced4 <_malloc_r>
 800c62e:	4604      	mov	r4, r0
 800c630:	b140      	cbz	r0, 800c644 <__sfmoreglue+0x28>
 800c632:	2100      	movs	r1, #0
 800c634:	e9c0 1600 	strd	r1, r6, [r0]
 800c638:	300c      	adds	r0, #12
 800c63a:	60a0      	str	r0, [r4, #8]
 800c63c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c640:	f7fe fb2e 	bl	800aca0 <memset>
 800c644:	4620      	mov	r0, r4
 800c646:	bd70      	pop	{r4, r5, r6, pc}

0800c648 <__sinit>:
 800c648:	6983      	ldr	r3, [r0, #24]
 800c64a:	b510      	push	{r4, lr}
 800c64c:	4604      	mov	r4, r0
 800c64e:	bb33      	cbnz	r3, 800c69e <__sinit+0x56>
 800c650:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800c654:	6503      	str	r3, [r0, #80]	; 0x50
 800c656:	4b12      	ldr	r3, [pc, #72]	; (800c6a0 <__sinit+0x58>)
 800c658:	4a12      	ldr	r2, [pc, #72]	; (800c6a4 <__sinit+0x5c>)
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	6282      	str	r2, [r0, #40]	; 0x28
 800c65e:	4298      	cmp	r0, r3
 800c660:	bf04      	itt	eq
 800c662:	2301      	moveq	r3, #1
 800c664:	6183      	streq	r3, [r0, #24]
 800c666:	f000 f81f 	bl	800c6a8 <__sfp>
 800c66a:	6060      	str	r0, [r4, #4]
 800c66c:	4620      	mov	r0, r4
 800c66e:	f000 f81b 	bl	800c6a8 <__sfp>
 800c672:	60a0      	str	r0, [r4, #8]
 800c674:	4620      	mov	r0, r4
 800c676:	f000 f817 	bl	800c6a8 <__sfp>
 800c67a:	2200      	movs	r2, #0
 800c67c:	60e0      	str	r0, [r4, #12]
 800c67e:	2104      	movs	r1, #4
 800c680:	6860      	ldr	r0, [r4, #4]
 800c682:	f7ff ffa1 	bl	800c5c8 <std>
 800c686:	2201      	movs	r2, #1
 800c688:	2109      	movs	r1, #9
 800c68a:	68a0      	ldr	r0, [r4, #8]
 800c68c:	f7ff ff9c 	bl	800c5c8 <std>
 800c690:	2202      	movs	r2, #2
 800c692:	2112      	movs	r1, #18
 800c694:	68e0      	ldr	r0, [r4, #12]
 800c696:	f7ff ff97 	bl	800c5c8 <std>
 800c69a:	2301      	movs	r3, #1
 800c69c:	61a3      	str	r3, [r4, #24]
 800c69e:	bd10      	pop	{r4, pc}
 800c6a0:	0800e6cc 	.word	0x0800e6cc
 800c6a4:	0800c611 	.word	0x0800c611

0800c6a8 <__sfp>:
 800c6a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6aa:	4b1b      	ldr	r3, [pc, #108]	; (800c718 <__sfp+0x70>)
 800c6ac:	681e      	ldr	r6, [r3, #0]
 800c6ae:	69b3      	ldr	r3, [r6, #24]
 800c6b0:	4607      	mov	r7, r0
 800c6b2:	b913      	cbnz	r3, 800c6ba <__sfp+0x12>
 800c6b4:	4630      	mov	r0, r6
 800c6b6:	f7ff ffc7 	bl	800c648 <__sinit>
 800c6ba:	3648      	adds	r6, #72	; 0x48
 800c6bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c6c0:	3b01      	subs	r3, #1
 800c6c2:	d503      	bpl.n	800c6cc <__sfp+0x24>
 800c6c4:	6833      	ldr	r3, [r6, #0]
 800c6c6:	b133      	cbz	r3, 800c6d6 <__sfp+0x2e>
 800c6c8:	6836      	ldr	r6, [r6, #0]
 800c6ca:	e7f7      	b.n	800c6bc <__sfp+0x14>
 800c6cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c6d0:	b16d      	cbz	r5, 800c6ee <__sfp+0x46>
 800c6d2:	3468      	adds	r4, #104	; 0x68
 800c6d4:	e7f4      	b.n	800c6c0 <__sfp+0x18>
 800c6d6:	2104      	movs	r1, #4
 800c6d8:	4638      	mov	r0, r7
 800c6da:	f7ff ff9f 	bl	800c61c <__sfmoreglue>
 800c6de:	6030      	str	r0, [r6, #0]
 800c6e0:	2800      	cmp	r0, #0
 800c6e2:	d1f1      	bne.n	800c6c8 <__sfp+0x20>
 800c6e4:	230c      	movs	r3, #12
 800c6e6:	603b      	str	r3, [r7, #0]
 800c6e8:	4604      	mov	r4, r0
 800c6ea:	4620      	mov	r0, r4
 800c6ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c6ee:	4b0b      	ldr	r3, [pc, #44]	; (800c71c <__sfp+0x74>)
 800c6f0:	6665      	str	r5, [r4, #100]	; 0x64
 800c6f2:	e9c4 5500 	strd	r5, r5, [r4]
 800c6f6:	60a5      	str	r5, [r4, #8]
 800c6f8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800c6fc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800c700:	2208      	movs	r2, #8
 800c702:	4629      	mov	r1, r5
 800c704:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c708:	f7fe faca 	bl	800aca0 <memset>
 800c70c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c710:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c714:	e7e9      	b.n	800c6ea <__sfp+0x42>
 800c716:	bf00      	nop
 800c718:	0800e6cc 	.word	0x0800e6cc
 800c71c:	ffff0001 	.word	0xffff0001

0800c720 <_fwalk_reent>:
 800c720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c724:	4680      	mov	r8, r0
 800c726:	4689      	mov	r9, r1
 800c728:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c72c:	2600      	movs	r6, #0
 800c72e:	b914      	cbnz	r4, 800c736 <_fwalk_reent+0x16>
 800c730:	4630      	mov	r0, r6
 800c732:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c736:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800c73a:	3f01      	subs	r7, #1
 800c73c:	d501      	bpl.n	800c742 <_fwalk_reent+0x22>
 800c73e:	6824      	ldr	r4, [r4, #0]
 800c740:	e7f5      	b.n	800c72e <_fwalk_reent+0xe>
 800c742:	89ab      	ldrh	r3, [r5, #12]
 800c744:	2b01      	cmp	r3, #1
 800c746:	d907      	bls.n	800c758 <_fwalk_reent+0x38>
 800c748:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c74c:	3301      	adds	r3, #1
 800c74e:	d003      	beq.n	800c758 <_fwalk_reent+0x38>
 800c750:	4629      	mov	r1, r5
 800c752:	4640      	mov	r0, r8
 800c754:	47c8      	blx	r9
 800c756:	4306      	orrs	r6, r0
 800c758:	3568      	adds	r5, #104	; 0x68
 800c75a:	e7ee      	b.n	800c73a <_fwalk_reent+0x1a>

0800c75c <_localeconv_r>:
 800c75c:	4b04      	ldr	r3, [pc, #16]	; (800c770 <_localeconv_r+0x14>)
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	6a18      	ldr	r0, [r3, #32]
 800c762:	4b04      	ldr	r3, [pc, #16]	; (800c774 <_localeconv_r+0x18>)
 800c764:	2800      	cmp	r0, #0
 800c766:	bf08      	it	eq
 800c768:	4618      	moveq	r0, r3
 800c76a:	30f0      	adds	r0, #240	; 0xf0
 800c76c:	4770      	bx	lr
 800c76e:	bf00      	nop
 800c770:	20000010 	.word	0x20000010
 800c774:	20000074 	.word	0x20000074

0800c778 <__swhatbuf_r>:
 800c778:	b570      	push	{r4, r5, r6, lr}
 800c77a:	460e      	mov	r6, r1
 800c77c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c780:	2900      	cmp	r1, #0
 800c782:	b096      	sub	sp, #88	; 0x58
 800c784:	4614      	mov	r4, r2
 800c786:	461d      	mov	r5, r3
 800c788:	da07      	bge.n	800c79a <__swhatbuf_r+0x22>
 800c78a:	2300      	movs	r3, #0
 800c78c:	602b      	str	r3, [r5, #0]
 800c78e:	89b3      	ldrh	r3, [r6, #12]
 800c790:	061a      	lsls	r2, r3, #24
 800c792:	d410      	bmi.n	800c7b6 <__swhatbuf_r+0x3e>
 800c794:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c798:	e00e      	b.n	800c7b8 <__swhatbuf_r+0x40>
 800c79a:	466a      	mov	r2, sp
 800c79c:	f000 fdaa 	bl	800d2f4 <_fstat_r>
 800c7a0:	2800      	cmp	r0, #0
 800c7a2:	dbf2      	blt.n	800c78a <__swhatbuf_r+0x12>
 800c7a4:	9a01      	ldr	r2, [sp, #4]
 800c7a6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c7aa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c7ae:	425a      	negs	r2, r3
 800c7b0:	415a      	adcs	r2, r3
 800c7b2:	602a      	str	r2, [r5, #0]
 800c7b4:	e7ee      	b.n	800c794 <__swhatbuf_r+0x1c>
 800c7b6:	2340      	movs	r3, #64	; 0x40
 800c7b8:	2000      	movs	r0, #0
 800c7ba:	6023      	str	r3, [r4, #0]
 800c7bc:	b016      	add	sp, #88	; 0x58
 800c7be:	bd70      	pop	{r4, r5, r6, pc}

0800c7c0 <__smakebuf_r>:
 800c7c0:	898b      	ldrh	r3, [r1, #12]
 800c7c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c7c4:	079d      	lsls	r5, r3, #30
 800c7c6:	4606      	mov	r6, r0
 800c7c8:	460c      	mov	r4, r1
 800c7ca:	d507      	bpl.n	800c7dc <__smakebuf_r+0x1c>
 800c7cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c7d0:	6023      	str	r3, [r4, #0]
 800c7d2:	6123      	str	r3, [r4, #16]
 800c7d4:	2301      	movs	r3, #1
 800c7d6:	6163      	str	r3, [r4, #20]
 800c7d8:	b002      	add	sp, #8
 800c7da:	bd70      	pop	{r4, r5, r6, pc}
 800c7dc:	ab01      	add	r3, sp, #4
 800c7de:	466a      	mov	r2, sp
 800c7e0:	f7ff ffca 	bl	800c778 <__swhatbuf_r>
 800c7e4:	9900      	ldr	r1, [sp, #0]
 800c7e6:	4605      	mov	r5, r0
 800c7e8:	4630      	mov	r0, r6
 800c7ea:	f000 fb73 	bl	800ced4 <_malloc_r>
 800c7ee:	b948      	cbnz	r0, 800c804 <__smakebuf_r+0x44>
 800c7f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c7f4:	059a      	lsls	r2, r3, #22
 800c7f6:	d4ef      	bmi.n	800c7d8 <__smakebuf_r+0x18>
 800c7f8:	f023 0303 	bic.w	r3, r3, #3
 800c7fc:	f043 0302 	orr.w	r3, r3, #2
 800c800:	81a3      	strh	r3, [r4, #12]
 800c802:	e7e3      	b.n	800c7cc <__smakebuf_r+0xc>
 800c804:	4b0d      	ldr	r3, [pc, #52]	; (800c83c <__smakebuf_r+0x7c>)
 800c806:	62b3      	str	r3, [r6, #40]	; 0x28
 800c808:	89a3      	ldrh	r3, [r4, #12]
 800c80a:	6020      	str	r0, [r4, #0]
 800c80c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c810:	81a3      	strh	r3, [r4, #12]
 800c812:	9b00      	ldr	r3, [sp, #0]
 800c814:	6163      	str	r3, [r4, #20]
 800c816:	9b01      	ldr	r3, [sp, #4]
 800c818:	6120      	str	r0, [r4, #16]
 800c81a:	b15b      	cbz	r3, 800c834 <__smakebuf_r+0x74>
 800c81c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c820:	4630      	mov	r0, r6
 800c822:	f000 fd79 	bl	800d318 <_isatty_r>
 800c826:	b128      	cbz	r0, 800c834 <__smakebuf_r+0x74>
 800c828:	89a3      	ldrh	r3, [r4, #12]
 800c82a:	f023 0303 	bic.w	r3, r3, #3
 800c82e:	f043 0301 	orr.w	r3, r3, #1
 800c832:	81a3      	strh	r3, [r4, #12]
 800c834:	89a3      	ldrh	r3, [r4, #12]
 800c836:	431d      	orrs	r5, r3
 800c838:	81a5      	strh	r5, [r4, #12]
 800c83a:	e7cd      	b.n	800c7d8 <__smakebuf_r+0x18>
 800c83c:	0800c611 	.word	0x0800c611

0800c840 <malloc>:
 800c840:	4b02      	ldr	r3, [pc, #8]	; (800c84c <malloc+0xc>)
 800c842:	4601      	mov	r1, r0
 800c844:	6818      	ldr	r0, [r3, #0]
 800c846:	f000 bb45 	b.w	800ced4 <_malloc_r>
 800c84a:	bf00      	nop
 800c84c:	20000010 	.word	0x20000010

0800c850 <memcpy>:
 800c850:	b510      	push	{r4, lr}
 800c852:	1e43      	subs	r3, r0, #1
 800c854:	440a      	add	r2, r1
 800c856:	4291      	cmp	r1, r2
 800c858:	d100      	bne.n	800c85c <memcpy+0xc>
 800c85a:	bd10      	pop	{r4, pc}
 800c85c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c860:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c864:	e7f7      	b.n	800c856 <memcpy+0x6>

0800c866 <_Balloc>:
 800c866:	b570      	push	{r4, r5, r6, lr}
 800c868:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c86a:	4604      	mov	r4, r0
 800c86c:	460e      	mov	r6, r1
 800c86e:	b93d      	cbnz	r5, 800c880 <_Balloc+0x1a>
 800c870:	2010      	movs	r0, #16
 800c872:	f7ff ffe5 	bl	800c840 <malloc>
 800c876:	6260      	str	r0, [r4, #36]	; 0x24
 800c878:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c87c:	6005      	str	r5, [r0, #0]
 800c87e:	60c5      	str	r5, [r0, #12]
 800c880:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800c882:	68eb      	ldr	r3, [r5, #12]
 800c884:	b183      	cbz	r3, 800c8a8 <_Balloc+0x42>
 800c886:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c888:	68db      	ldr	r3, [r3, #12]
 800c88a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c88e:	b9b8      	cbnz	r0, 800c8c0 <_Balloc+0x5a>
 800c890:	2101      	movs	r1, #1
 800c892:	fa01 f506 	lsl.w	r5, r1, r6
 800c896:	1d6a      	adds	r2, r5, #5
 800c898:	0092      	lsls	r2, r2, #2
 800c89a:	4620      	mov	r0, r4
 800c89c:	f000 fabe 	bl	800ce1c <_calloc_r>
 800c8a0:	b160      	cbz	r0, 800c8bc <_Balloc+0x56>
 800c8a2:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800c8a6:	e00e      	b.n	800c8c6 <_Balloc+0x60>
 800c8a8:	2221      	movs	r2, #33	; 0x21
 800c8aa:	2104      	movs	r1, #4
 800c8ac:	4620      	mov	r0, r4
 800c8ae:	f000 fab5 	bl	800ce1c <_calloc_r>
 800c8b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c8b4:	60e8      	str	r0, [r5, #12]
 800c8b6:	68db      	ldr	r3, [r3, #12]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d1e4      	bne.n	800c886 <_Balloc+0x20>
 800c8bc:	2000      	movs	r0, #0
 800c8be:	bd70      	pop	{r4, r5, r6, pc}
 800c8c0:	6802      	ldr	r2, [r0, #0]
 800c8c2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c8cc:	e7f7      	b.n	800c8be <_Balloc+0x58>

0800c8ce <_Bfree>:
 800c8ce:	b570      	push	{r4, r5, r6, lr}
 800c8d0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800c8d2:	4606      	mov	r6, r0
 800c8d4:	460d      	mov	r5, r1
 800c8d6:	b93c      	cbnz	r4, 800c8e8 <_Bfree+0x1a>
 800c8d8:	2010      	movs	r0, #16
 800c8da:	f7ff ffb1 	bl	800c840 <malloc>
 800c8de:	6270      	str	r0, [r6, #36]	; 0x24
 800c8e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c8e4:	6004      	str	r4, [r0, #0]
 800c8e6:	60c4      	str	r4, [r0, #12]
 800c8e8:	b13d      	cbz	r5, 800c8fa <_Bfree+0x2c>
 800c8ea:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c8ec:	686a      	ldr	r2, [r5, #4]
 800c8ee:	68db      	ldr	r3, [r3, #12]
 800c8f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c8f4:	6029      	str	r1, [r5, #0]
 800c8f6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800c8fa:	bd70      	pop	{r4, r5, r6, pc}

0800c8fc <__multadd>:
 800c8fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c900:	690d      	ldr	r5, [r1, #16]
 800c902:	461f      	mov	r7, r3
 800c904:	4606      	mov	r6, r0
 800c906:	460c      	mov	r4, r1
 800c908:	f101 0c14 	add.w	ip, r1, #20
 800c90c:	2300      	movs	r3, #0
 800c90e:	f8dc 0000 	ldr.w	r0, [ip]
 800c912:	b281      	uxth	r1, r0
 800c914:	fb02 7101 	mla	r1, r2, r1, r7
 800c918:	0c0f      	lsrs	r7, r1, #16
 800c91a:	0c00      	lsrs	r0, r0, #16
 800c91c:	fb02 7000 	mla	r0, r2, r0, r7
 800c920:	b289      	uxth	r1, r1
 800c922:	3301      	adds	r3, #1
 800c924:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800c928:	429d      	cmp	r5, r3
 800c92a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800c92e:	f84c 1b04 	str.w	r1, [ip], #4
 800c932:	dcec      	bgt.n	800c90e <__multadd+0x12>
 800c934:	b1d7      	cbz	r7, 800c96c <__multadd+0x70>
 800c936:	68a3      	ldr	r3, [r4, #8]
 800c938:	42ab      	cmp	r3, r5
 800c93a:	dc12      	bgt.n	800c962 <__multadd+0x66>
 800c93c:	6861      	ldr	r1, [r4, #4]
 800c93e:	4630      	mov	r0, r6
 800c940:	3101      	adds	r1, #1
 800c942:	f7ff ff90 	bl	800c866 <_Balloc>
 800c946:	6922      	ldr	r2, [r4, #16]
 800c948:	3202      	adds	r2, #2
 800c94a:	f104 010c 	add.w	r1, r4, #12
 800c94e:	4680      	mov	r8, r0
 800c950:	0092      	lsls	r2, r2, #2
 800c952:	300c      	adds	r0, #12
 800c954:	f7ff ff7c 	bl	800c850 <memcpy>
 800c958:	4621      	mov	r1, r4
 800c95a:	4630      	mov	r0, r6
 800c95c:	f7ff ffb7 	bl	800c8ce <_Bfree>
 800c960:	4644      	mov	r4, r8
 800c962:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c966:	3501      	adds	r5, #1
 800c968:	615f      	str	r7, [r3, #20]
 800c96a:	6125      	str	r5, [r4, #16]
 800c96c:	4620      	mov	r0, r4
 800c96e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c972 <__hi0bits>:
 800c972:	0c02      	lsrs	r2, r0, #16
 800c974:	0412      	lsls	r2, r2, #16
 800c976:	4603      	mov	r3, r0
 800c978:	b9b2      	cbnz	r2, 800c9a8 <__hi0bits+0x36>
 800c97a:	0403      	lsls	r3, r0, #16
 800c97c:	2010      	movs	r0, #16
 800c97e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800c982:	bf04      	itt	eq
 800c984:	021b      	lsleq	r3, r3, #8
 800c986:	3008      	addeq	r0, #8
 800c988:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800c98c:	bf04      	itt	eq
 800c98e:	011b      	lsleq	r3, r3, #4
 800c990:	3004      	addeq	r0, #4
 800c992:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800c996:	bf04      	itt	eq
 800c998:	009b      	lsleq	r3, r3, #2
 800c99a:	3002      	addeq	r0, #2
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	db06      	blt.n	800c9ae <__hi0bits+0x3c>
 800c9a0:	005b      	lsls	r3, r3, #1
 800c9a2:	d503      	bpl.n	800c9ac <__hi0bits+0x3a>
 800c9a4:	3001      	adds	r0, #1
 800c9a6:	4770      	bx	lr
 800c9a8:	2000      	movs	r0, #0
 800c9aa:	e7e8      	b.n	800c97e <__hi0bits+0xc>
 800c9ac:	2020      	movs	r0, #32
 800c9ae:	4770      	bx	lr

0800c9b0 <__lo0bits>:
 800c9b0:	6803      	ldr	r3, [r0, #0]
 800c9b2:	f013 0207 	ands.w	r2, r3, #7
 800c9b6:	4601      	mov	r1, r0
 800c9b8:	d00b      	beq.n	800c9d2 <__lo0bits+0x22>
 800c9ba:	07da      	lsls	r2, r3, #31
 800c9bc:	d423      	bmi.n	800ca06 <__lo0bits+0x56>
 800c9be:	0798      	lsls	r0, r3, #30
 800c9c0:	bf49      	itett	mi
 800c9c2:	085b      	lsrmi	r3, r3, #1
 800c9c4:	089b      	lsrpl	r3, r3, #2
 800c9c6:	2001      	movmi	r0, #1
 800c9c8:	600b      	strmi	r3, [r1, #0]
 800c9ca:	bf5c      	itt	pl
 800c9cc:	600b      	strpl	r3, [r1, #0]
 800c9ce:	2002      	movpl	r0, #2
 800c9d0:	4770      	bx	lr
 800c9d2:	b298      	uxth	r0, r3
 800c9d4:	b9a8      	cbnz	r0, 800ca02 <__lo0bits+0x52>
 800c9d6:	0c1b      	lsrs	r3, r3, #16
 800c9d8:	2010      	movs	r0, #16
 800c9da:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c9de:	bf04      	itt	eq
 800c9e0:	0a1b      	lsreq	r3, r3, #8
 800c9e2:	3008      	addeq	r0, #8
 800c9e4:	071a      	lsls	r2, r3, #28
 800c9e6:	bf04      	itt	eq
 800c9e8:	091b      	lsreq	r3, r3, #4
 800c9ea:	3004      	addeq	r0, #4
 800c9ec:	079a      	lsls	r2, r3, #30
 800c9ee:	bf04      	itt	eq
 800c9f0:	089b      	lsreq	r3, r3, #2
 800c9f2:	3002      	addeq	r0, #2
 800c9f4:	07da      	lsls	r2, r3, #31
 800c9f6:	d402      	bmi.n	800c9fe <__lo0bits+0x4e>
 800c9f8:	085b      	lsrs	r3, r3, #1
 800c9fa:	d006      	beq.n	800ca0a <__lo0bits+0x5a>
 800c9fc:	3001      	adds	r0, #1
 800c9fe:	600b      	str	r3, [r1, #0]
 800ca00:	4770      	bx	lr
 800ca02:	4610      	mov	r0, r2
 800ca04:	e7e9      	b.n	800c9da <__lo0bits+0x2a>
 800ca06:	2000      	movs	r0, #0
 800ca08:	4770      	bx	lr
 800ca0a:	2020      	movs	r0, #32
 800ca0c:	4770      	bx	lr

0800ca0e <__i2b>:
 800ca0e:	b510      	push	{r4, lr}
 800ca10:	460c      	mov	r4, r1
 800ca12:	2101      	movs	r1, #1
 800ca14:	f7ff ff27 	bl	800c866 <_Balloc>
 800ca18:	2201      	movs	r2, #1
 800ca1a:	6144      	str	r4, [r0, #20]
 800ca1c:	6102      	str	r2, [r0, #16]
 800ca1e:	bd10      	pop	{r4, pc}

0800ca20 <__multiply>:
 800ca20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca24:	4614      	mov	r4, r2
 800ca26:	690a      	ldr	r2, [r1, #16]
 800ca28:	6923      	ldr	r3, [r4, #16]
 800ca2a:	429a      	cmp	r2, r3
 800ca2c:	bfb8      	it	lt
 800ca2e:	460b      	movlt	r3, r1
 800ca30:	4688      	mov	r8, r1
 800ca32:	bfbc      	itt	lt
 800ca34:	46a0      	movlt	r8, r4
 800ca36:	461c      	movlt	r4, r3
 800ca38:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ca3c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ca40:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ca44:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ca48:	eb07 0609 	add.w	r6, r7, r9
 800ca4c:	42b3      	cmp	r3, r6
 800ca4e:	bfb8      	it	lt
 800ca50:	3101      	addlt	r1, #1
 800ca52:	f7ff ff08 	bl	800c866 <_Balloc>
 800ca56:	f100 0514 	add.w	r5, r0, #20
 800ca5a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800ca5e:	462b      	mov	r3, r5
 800ca60:	2200      	movs	r2, #0
 800ca62:	4573      	cmp	r3, lr
 800ca64:	d316      	bcc.n	800ca94 <__multiply+0x74>
 800ca66:	f104 0214 	add.w	r2, r4, #20
 800ca6a:	f108 0114 	add.w	r1, r8, #20
 800ca6e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800ca72:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800ca76:	9300      	str	r3, [sp, #0]
 800ca78:	9b00      	ldr	r3, [sp, #0]
 800ca7a:	9201      	str	r2, [sp, #4]
 800ca7c:	4293      	cmp	r3, r2
 800ca7e:	d80c      	bhi.n	800ca9a <__multiply+0x7a>
 800ca80:	2e00      	cmp	r6, #0
 800ca82:	dd03      	ble.n	800ca8c <__multiply+0x6c>
 800ca84:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d05d      	beq.n	800cb48 <__multiply+0x128>
 800ca8c:	6106      	str	r6, [r0, #16]
 800ca8e:	b003      	add	sp, #12
 800ca90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca94:	f843 2b04 	str.w	r2, [r3], #4
 800ca98:	e7e3      	b.n	800ca62 <__multiply+0x42>
 800ca9a:	f8b2 b000 	ldrh.w	fp, [r2]
 800ca9e:	f1bb 0f00 	cmp.w	fp, #0
 800caa2:	d023      	beq.n	800caec <__multiply+0xcc>
 800caa4:	4689      	mov	r9, r1
 800caa6:	46ac      	mov	ip, r5
 800caa8:	f04f 0800 	mov.w	r8, #0
 800caac:	f859 4b04 	ldr.w	r4, [r9], #4
 800cab0:	f8dc a000 	ldr.w	sl, [ip]
 800cab4:	b2a3      	uxth	r3, r4
 800cab6:	fa1f fa8a 	uxth.w	sl, sl
 800caba:	fb0b a303 	mla	r3, fp, r3, sl
 800cabe:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800cac2:	f8dc 4000 	ldr.w	r4, [ip]
 800cac6:	4443      	add	r3, r8
 800cac8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800cacc:	fb0b 840a 	mla	r4, fp, sl, r8
 800cad0:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800cad4:	46e2      	mov	sl, ip
 800cad6:	b29b      	uxth	r3, r3
 800cad8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800cadc:	454f      	cmp	r7, r9
 800cade:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800cae2:	f84a 3b04 	str.w	r3, [sl], #4
 800cae6:	d82b      	bhi.n	800cb40 <__multiply+0x120>
 800cae8:	f8cc 8004 	str.w	r8, [ip, #4]
 800caec:	9b01      	ldr	r3, [sp, #4]
 800caee:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800caf2:	3204      	adds	r2, #4
 800caf4:	f1ba 0f00 	cmp.w	sl, #0
 800caf8:	d020      	beq.n	800cb3c <__multiply+0x11c>
 800cafa:	682b      	ldr	r3, [r5, #0]
 800cafc:	4689      	mov	r9, r1
 800cafe:	46a8      	mov	r8, r5
 800cb00:	f04f 0b00 	mov.w	fp, #0
 800cb04:	f8b9 c000 	ldrh.w	ip, [r9]
 800cb08:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800cb0c:	fb0a 440c 	mla	r4, sl, ip, r4
 800cb10:	445c      	add	r4, fp
 800cb12:	46c4      	mov	ip, r8
 800cb14:	b29b      	uxth	r3, r3
 800cb16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800cb1a:	f84c 3b04 	str.w	r3, [ip], #4
 800cb1e:	f859 3b04 	ldr.w	r3, [r9], #4
 800cb22:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800cb26:	0c1b      	lsrs	r3, r3, #16
 800cb28:	fb0a b303 	mla	r3, sl, r3, fp
 800cb2c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800cb30:	454f      	cmp	r7, r9
 800cb32:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800cb36:	d805      	bhi.n	800cb44 <__multiply+0x124>
 800cb38:	f8c8 3004 	str.w	r3, [r8, #4]
 800cb3c:	3504      	adds	r5, #4
 800cb3e:	e79b      	b.n	800ca78 <__multiply+0x58>
 800cb40:	46d4      	mov	ip, sl
 800cb42:	e7b3      	b.n	800caac <__multiply+0x8c>
 800cb44:	46e0      	mov	r8, ip
 800cb46:	e7dd      	b.n	800cb04 <__multiply+0xe4>
 800cb48:	3e01      	subs	r6, #1
 800cb4a:	e799      	b.n	800ca80 <__multiply+0x60>

0800cb4c <__pow5mult>:
 800cb4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb50:	4615      	mov	r5, r2
 800cb52:	f012 0203 	ands.w	r2, r2, #3
 800cb56:	4606      	mov	r6, r0
 800cb58:	460f      	mov	r7, r1
 800cb5a:	d007      	beq.n	800cb6c <__pow5mult+0x20>
 800cb5c:	3a01      	subs	r2, #1
 800cb5e:	4c21      	ldr	r4, [pc, #132]	; (800cbe4 <__pow5mult+0x98>)
 800cb60:	2300      	movs	r3, #0
 800cb62:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cb66:	f7ff fec9 	bl	800c8fc <__multadd>
 800cb6a:	4607      	mov	r7, r0
 800cb6c:	10ad      	asrs	r5, r5, #2
 800cb6e:	d035      	beq.n	800cbdc <__pow5mult+0x90>
 800cb70:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800cb72:	b93c      	cbnz	r4, 800cb84 <__pow5mult+0x38>
 800cb74:	2010      	movs	r0, #16
 800cb76:	f7ff fe63 	bl	800c840 <malloc>
 800cb7a:	6270      	str	r0, [r6, #36]	; 0x24
 800cb7c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cb80:	6004      	str	r4, [r0, #0]
 800cb82:	60c4      	str	r4, [r0, #12]
 800cb84:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800cb88:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cb8c:	b94c      	cbnz	r4, 800cba2 <__pow5mult+0x56>
 800cb8e:	f240 2171 	movw	r1, #625	; 0x271
 800cb92:	4630      	mov	r0, r6
 800cb94:	f7ff ff3b 	bl	800ca0e <__i2b>
 800cb98:	2300      	movs	r3, #0
 800cb9a:	f8c8 0008 	str.w	r0, [r8, #8]
 800cb9e:	4604      	mov	r4, r0
 800cba0:	6003      	str	r3, [r0, #0]
 800cba2:	f04f 0800 	mov.w	r8, #0
 800cba6:	07eb      	lsls	r3, r5, #31
 800cba8:	d50a      	bpl.n	800cbc0 <__pow5mult+0x74>
 800cbaa:	4639      	mov	r1, r7
 800cbac:	4622      	mov	r2, r4
 800cbae:	4630      	mov	r0, r6
 800cbb0:	f7ff ff36 	bl	800ca20 <__multiply>
 800cbb4:	4639      	mov	r1, r7
 800cbb6:	4681      	mov	r9, r0
 800cbb8:	4630      	mov	r0, r6
 800cbba:	f7ff fe88 	bl	800c8ce <_Bfree>
 800cbbe:	464f      	mov	r7, r9
 800cbc0:	106d      	asrs	r5, r5, #1
 800cbc2:	d00b      	beq.n	800cbdc <__pow5mult+0x90>
 800cbc4:	6820      	ldr	r0, [r4, #0]
 800cbc6:	b938      	cbnz	r0, 800cbd8 <__pow5mult+0x8c>
 800cbc8:	4622      	mov	r2, r4
 800cbca:	4621      	mov	r1, r4
 800cbcc:	4630      	mov	r0, r6
 800cbce:	f7ff ff27 	bl	800ca20 <__multiply>
 800cbd2:	6020      	str	r0, [r4, #0]
 800cbd4:	f8c0 8000 	str.w	r8, [r0]
 800cbd8:	4604      	mov	r4, r0
 800cbda:	e7e4      	b.n	800cba6 <__pow5mult+0x5a>
 800cbdc:	4638      	mov	r0, r7
 800cbde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cbe2:	bf00      	nop
 800cbe4:	0800e860 	.word	0x0800e860

0800cbe8 <__lshift>:
 800cbe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cbec:	460c      	mov	r4, r1
 800cbee:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cbf2:	6923      	ldr	r3, [r4, #16]
 800cbf4:	6849      	ldr	r1, [r1, #4]
 800cbf6:	eb0a 0903 	add.w	r9, sl, r3
 800cbfa:	68a3      	ldr	r3, [r4, #8]
 800cbfc:	4607      	mov	r7, r0
 800cbfe:	4616      	mov	r6, r2
 800cc00:	f109 0501 	add.w	r5, r9, #1
 800cc04:	42ab      	cmp	r3, r5
 800cc06:	db32      	blt.n	800cc6e <__lshift+0x86>
 800cc08:	4638      	mov	r0, r7
 800cc0a:	f7ff fe2c 	bl	800c866 <_Balloc>
 800cc0e:	2300      	movs	r3, #0
 800cc10:	4680      	mov	r8, r0
 800cc12:	f100 0114 	add.w	r1, r0, #20
 800cc16:	461a      	mov	r2, r3
 800cc18:	4553      	cmp	r3, sl
 800cc1a:	db2b      	blt.n	800cc74 <__lshift+0x8c>
 800cc1c:	6920      	ldr	r0, [r4, #16]
 800cc1e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cc22:	f104 0314 	add.w	r3, r4, #20
 800cc26:	f016 021f 	ands.w	r2, r6, #31
 800cc2a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cc2e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cc32:	d025      	beq.n	800cc80 <__lshift+0x98>
 800cc34:	f1c2 0e20 	rsb	lr, r2, #32
 800cc38:	2000      	movs	r0, #0
 800cc3a:	681e      	ldr	r6, [r3, #0]
 800cc3c:	468a      	mov	sl, r1
 800cc3e:	4096      	lsls	r6, r2
 800cc40:	4330      	orrs	r0, r6
 800cc42:	f84a 0b04 	str.w	r0, [sl], #4
 800cc46:	f853 0b04 	ldr.w	r0, [r3], #4
 800cc4a:	459c      	cmp	ip, r3
 800cc4c:	fa20 f00e 	lsr.w	r0, r0, lr
 800cc50:	d814      	bhi.n	800cc7c <__lshift+0x94>
 800cc52:	6048      	str	r0, [r1, #4]
 800cc54:	b108      	cbz	r0, 800cc5a <__lshift+0x72>
 800cc56:	f109 0502 	add.w	r5, r9, #2
 800cc5a:	3d01      	subs	r5, #1
 800cc5c:	4638      	mov	r0, r7
 800cc5e:	f8c8 5010 	str.w	r5, [r8, #16]
 800cc62:	4621      	mov	r1, r4
 800cc64:	f7ff fe33 	bl	800c8ce <_Bfree>
 800cc68:	4640      	mov	r0, r8
 800cc6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc6e:	3101      	adds	r1, #1
 800cc70:	005b      	lsls	r3, r3, #1
 800cc72:	e7c7      	b.n	800cc04 <__lshift+0x1c>
 800cc74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800cc78:	3301      	adds	r3, #1
 800cc7a:	e7cd      	b.n	800cc18 <__lshift+0x30>
 800cc7c:	4651      	mov	r1, sl
 800cc7e:	e7dc      	b.n	800cc3a <__lshift+0x52>
 800cc80:	3904      	subs	r1, #4
 800cc82:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc86:	f841 2f04 	str.w	r2, [r1, #4]!
 800cc8a:	459c      	cmp	ip, r3
 800cc8c:	d8f9      	bhi.n	800cc82 <__lshift+0x9a>
 800cc8e:	e7e4      	b.n	800cc5a <__lshift+0x72>

0800cc90 <__mcmp>:
 800cc90:	6903      	ldr	r3, [r0, #16]
 800cc92:	690a      	ldr	r2, [r1, #16]
 800cc94:	1a9b      	subs	r3, r3, r2
 800cc96:	b530      	push	{r4, r5, lr}
 800cc98:	d10c      	bne.n	800ccb4 <__mcmp+0x24>
 800cc9a:	0092      	lsls	r2, r2, #2
 800cc9c:	3014      	adds	r0, #20
 800cc9e:	3114      	adds	r1, #20
 800cca0:	1884      	adds	r4, r0, r2
 800cca2:	4411      	add	r1, r2
 800cca4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cca8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ccac:	4295      	cmp	r5, r2
 800ccae:	d003      	beq.n	800ccb8 <__mcmp+0x28>
 800ccb0:	d305      	bcc.n	800ccbe <__mcmp+0x2e>
 800ccb2:	2301      	movs	r3, #1
 800ccb4:	4618      	mov	r0, r3
 800ccb6:	bd30      	pop	{r4, r5, pc}
 800ccb8:	42a0      	cmp	r0, r4
 800ccba:	d3f3      	bcc.n	800cca4 <__mcmp+0x14>
 800ccbc:	e7fa      	b.n	800ccb4 <__mcmp+0x24>
 800ccbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ccc2:	e7f7      	b.n	800ccb4 <__mcmp+0x24>

0800ccc4 <__mdiff>:
 800ccc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ccc8:	460d      	mov	r5, r1
 800ccca:	4607      	mov	r7, r0
 800cccc:	4611      	mov	r1, r2
 800ccce:	4628      	mov	r0, r5
 800ccd0:	4614      	mov	r4, r2
 800ccd2:	f7ff ffdd 	bl	800cc90 <__mcmp>
 800ccd6:	1e06      	subs	r6, r0, #0
 800ccd8:	d108      	bne.n	800ccec <__mdiff+0x28>
 800ccda:	4631      	mov	r1, r6
 800ccdc:	4638      	mov	r0, r7
 800ccde:	f7ff fdc2 	bl	800c866 <_Balloc>
 800cce2:	2301      	movs	r3, #1
 800cce4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800cce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccec:	bfa4      	itt	ge
 800ccee:	4623      	movge	r3, r4
 800ccf0:	462c      	movge	r4, r5
 800ccf2:	4638      	mov	r0, r7
 800ccf4:	6861      	ldr	r1, [r4, #4]
 800ccf6:	bfa6      	itte	ge
 800ccf8:	461d      	movge	r5, r3
 800ccfa:	2600      	movge	r6, #0
 800ccfc:	2601      	movlt	r6, #1
 800ccfe:	f7ff fdb2 	bl	800c866 <_Balloc>
 800cd02:	692b      	ldr	r3, [r5, #16]
 800cd04:	60c6      	str	r6, [r0, #12]
 800cd06:	6926      	ldr	r6, [r4, #16]
 800cd08:	f105 0914 	add.w	r9, r5, #20
 800cd0c:	f104 0214 	add.w	r2, r4, #20
 800cd10:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800cd14:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800cd18:	f100 0514 	add.w	r5, r0, #20
 800cd1c:	f04f 0e00 	mov.w	lr, #0
 800cd20:	f852 ab04 	ldr.w	sl, [r2], #4
 800cd24:	f859 4b04 	ldr.w	r4, [r9], #4
 800cd28:	fa1e f18a 	uxtah	r1, lr, sl
 800cd2c:	b2a3      	uxth	r3, r4
 800cd2e:	1ac9      	subs	r1, r1, r3
 800cd30:	0c23      	lsrs	r3, r4, #16
 800cd32:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800cd36:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800cd3a:	b289      	uxth	r1, r1
 800cd3c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800cd40:	45c8      	cmp	r8, r9
 800cd42:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800cd46:	4694      	mov	ip, r2
 800cd48:	f845 3b04 	str.w	r3, [r5], #4
 800cd4c:	d8e8      	bhi.n	800cd20 <__mdiff+0x5c>
 800cd4e:	45bc      	cmp	ip, r7
 800cd50:	d304      	bcc.n	800cd5c <__mdiff+0x98>
 800cd52:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800cd56:	b183      	cbz	r3, 800cd7a <__mdiff+0xb6>
 800cd58:	6106      	str	r6, [r0, #16]
 800cd5a:	e7c5      	b.n	800cce8 <__mdiff+0x24>
 800cd5c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800cd60:	fa1e f381 	uxtah	r3, lr, r1
 800cd64:	141a      	asrs	r2, r3, #16
 800cd66:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800cd6a:	b29b      	uxth	r3, r3
 800cd6c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cd70:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800cd74:	f845 3b04 	str.w	r3, [r5], #4
 800cd78:	e7e9      	b.n	800cd4e <__mdiff+0x8a>
 800cd7a:	3e01      	subs	r6, #1
 800cd7c:	e7e9      	b.n	800cd52 <__mdiff+0x8e>

0800cd7e <__d2b>:
 800cd7e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cd82:	460e      	mov	r6, r1
 800cd84:	2101      	movs	r1, #1
 800cd86:	ec59 8b10 	vmov	r8, r9, d0
 800cd8a:	4615      	mov	r5, r2
 800cd8c:	f7ff fd6b 	bl	800c866 <_Balloc>
 800cd90:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800cd94:	4607      	mov	r7, r0
 800cd96:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cd9a:	bb34      	cbnz	r4, 800cdea <__d2b+0x6c>
 800cd9c:	9301      	str	r3, [sp, #4]
 800cd9e:	f1b8 0300 	subs.w	r3, r8, #0
 800cda2:	d027      	beq.n	800cdf4 <__d2b+0x76>
 800cda4:	a802      	add	r0, sp, #8
 800cda6:	f840 3d08 	str.w	r3, [r0, #-8]!
 800cdaa:	f7ff fe01 	bl	800c9b0 <__lo0bits>
 800cdae:	9900      	ldr	r1, [sp, #0]
 800cdb0:	b1f0      	cbz	r0, 800cdf0 <__d2b+0x72>
 800cdb2:	9a01      	ldr	r2, [sp, #4]
 800cdb4:	f1c0 0320 	rsb	r3, r0, #32
 800cdb8:	fa02 f303 	lsl.w	r3, r2, r3
 800cdbc:	430b      	orrs	r3, r1
 800cdbe:	40c2      	lsrs	r2, r0
 800cdc0:	617b      	str	r3, [r7, #20]
 800cdc2:	9201      	str	r2, [sp, #4]
 800cdc4:	9b01      	ldr	r3, [sp, #4]
 800cdc6:	61bb      	str	r3, [r7, #24]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	bf14      	ite	ne
 800cdcc:	2102      	movne	r1, #2
 800cdce:	2101      	moveq	r1, #1
 800cdd0:	6139      	str	r1, [r7, #16]
 800cdd2:	b1c4      	cbz	r4, 800ce06 <__d2b+0x88>
 800cdd4:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800cdd8:	4404      	add	r4, r0
 800cdda:	6034      	str	r4, [r6, #0]
 800cddc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cde0:	6028      	str	r0, [r5, #0]
 800cde2:	4638      	mov	r0, r7
 800cde4:	b003      	add	sp, #12
 800cde6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cdea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cdee:	e7d5      	b.n	800cd9c <__d2b+0x1e>
 800cdf0:	6179      	str	r1, [r7, #20]
 800cdf2:	e7e7      	b.n	800cdc4 <__d2b+0x46>
 800cdf4:	a801      	add	r0, sp, #4
 800cdf6:	f7ff fddb 	bl	800c9b0 <__lo0bits>
 800cdfa:	9b01      	ldr	r3, [sp, #4]
 800cdfc:	617b      	str	r3, [r7, #20]
 800cdfe:	2101      	movs	r1, #1
 800ce00:	6139      	str	r1, [r7, #16]
 800ce02:	3020      	adds	r0, #32
 800ce04:	e7e5      	b.n	800cdd2 <__d2b+0x54>
 800ce06:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800ce0a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ce0e:	6030      	str	r0, [r6, #0]
 800ce10:	6918      	ldr	r0, [r3, #16]
 800ce12:	f7ff fdae 	bl	800c972 <__hi0bits>
 800ce16:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800ce1a:	e7e1      	b.n	800cde0 <__d2b+0x62>

0800ce1c <_calloc_r>:
 800ce1c:	b538      	push	{r3, r4, r5, lr}
 800ce1e:	fb02 f401 	mul.w	r4, r2, r1
 800ce22:	4621      	mov	r1, r4
 800ce24:	f000 f856 	bl	800ced4 <_malloc_r>
 800ce28:	4605      	mov	r5, r0
 800ce2a:	b118      	cbz	r0, 800ce34 <_calloc_r+0x18>
 800ce2c:	4622      	mov	r2, r4
 800ce2e:	2100      	movs	r1, #0
 800ce30:	f7fd ff36 	bl	800aca0 <memset>
 800ce34:	4628      	mov	r0, r5
 800ce36:	bd38      	pop	{r3, r4, r5, pc}

0800ce38 <_free_r>:
 800ce38:	b538      	push	{r3, r4, r5, lr}
 800ce3a:	4605      	mov	r5, r0
 800ce3c:	2900      	cmp	r1, #0
 800ce3e:	d045      	beq.n	800cecc <_free_r+0x94>
 800ce40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce44:	1f0c      	subs	r4, r1, #4
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	bfb8      	it	lt
 800ce4a:	18e4      	addlt	r4, r4, r3
 800ce4c:	f000 fa98 	bl	800d380 <__malloc_lock>
 800ce50:	4a1f      	ldr	r2, [pc, #124]	; (800ced0 <_free_r+0x98>)
 800ce52:	6813      	ldr	r3, [r2, #0]
 800ce54:	4610      	mov	r0, r2
 800ce56:	b933      	cbnz	r3, 800ce66 <_free_r+0x2e>
 800ce58:	6063      	str	r3, [r4, #4]
 800ce5a:	6014      	str	r4, [r2, #0]
 800ce5c:	4628      	mov	r0, r5
 800ce5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ce62:	f000 ba8e 	b.w	800d382 <__malloc_unlock>
 800ce66:	42a3      	cmp	r3, r4
 800ce68:	d90c      	bls.n	800ce84 <_free_r+0x4c>
 800ce6a:	6821      	ldr	r1, [r4, #0]
 800ce6c:	1862      	adds	r2, r4, r1
 800ce6e:	4293      	cmp	r3, r2
 800ce70:	bf04      	itt	eq
 800ce72:	681a      	ldreq	r2, [r3, #0]
 800ce74:	685b      	ldreq	r3, [r3, #4]
 800ce76:	6063      	str	r3, [r4, #4]
 800ce78:	bf04      	itt	eq
 800ce7a:	1852      	addeq	r2, r2, r1
 800ce7c:	6022      	streq	r2, [r4, #0]
 800ce7e:	6004      	str	r4, [r0, #0]
 800ce80:	e7ec      	b.n	800ce5c <_free_r+0x24>
 800ce82:	4613      	mov	r3, r2
 800ce84:	685a      	ldr	r2, [r3, #4]
 800ce86:	b10a      	cbz	r2, 800ce8c <_free_r+0x54>
 800ce88:	42a2      	cmp	r2, r4
 800ce8a:	d9fa      	bls.n	800ce82 <_free_r+0x4a>
 800ce8c:	6819      	ldr	r1, [r3, #0]
 800ce8e:	1858      	adds	r0, r3, r1
 800ce90:	42a0      	cmp	r0, r4
 800ce92:	d10b      	bne.n	800ceac <_free_r+0x74>
 800ce94:	6820      	ldr	r0, [r4, #0]
 800ce96:	4401      	add	r1, r0
 800ce98:	1858      	adds	r0, r3, r1
 800ce9a:	4282      	cmp	r2, r0
 800ce9c:	6019      	str	r1, [r3, #0]
 800ce9e:	d1dd      	bne.n	800ce5c <_free_r+0x24>
 800cea0:	6810      	ldr	r0, [r2, #0]
 800cea2:	6852      	ldr	r2, [r2, #4]
 800cea4:	605a      	str	r2, [r3, #4]
 800cea6:	4401      	add	r1, r0
 800cea8:	6019      	str	r1, [r3, #0]
 800ceaa:	e7d7      	b.n	800ce5c <_free_r+0x24>
 800ceac:	d902      	bls.n	800ceb4 <_free_r+0x7c>
 800ceae:	230c      	movs	r3, #12
 800ceb0:	602b      	str	r3, [r5, #0]
 800ceb2:	e7d3      	b.n	800ce5c <_free_r+0x24>
 800ceb4:	6820      	ldr	r0, [r4, #0]
 800ceb6:	1821      	adds	r1, r4, r0
 800ceb8:	428a      	cmp	r2, r1
 800ceba:	bf04      	itt	eq
 800cebc:	6811      	ldreq	r1, [r2, #0]
 800cebe:	6852      	ldreq	r2, [r2, #4]
 800cec0:	6062      	str	r2, [r4, #4]
 800cec2:	bf04      	itt	eq
 800cec4:	1809      	addeq	r1, r1, r0
 800cec6:	6021      	streq	r1, [r4, #0]
 800cec8:	605c      	str	r4, [r3, #4]
 800ceca:	e7c7      	b.n	800ce5c <_free_r+0x24>
 800cecc:	bd38      	pop	{r3, r4, r5, pc}
 800cece:	bf00      	nop
 800ced0:	20000220 	.word	0x20000220

0800ced4 <_malloc_r>:
 800ced4:	b570      	push	{r4, r5, r6, lr}
 800ced6:	1ccd      	adds	r5, r1, #3
 800ced8:	f025 0503 	bic.w	r5, r5, #3
 800cedc:	3508      	adds	r5, #8
 800cede:	2d0c      	cmp	r5, #12
 800cee0:	bf38      	it	cc
 800cee2:	250c      	movcc	r5, #12
 800cee4:	2d00      	cmp	r5, #0
 800cee6:	4606      	mov	r6, r0
 800cee8:	db01      	blt.n	800ceee <_malloc_r+0x1a>
 800ceea:	42a9      	cmp	r1, r5
 800ceec:	d903      	bls.n	800cef6 <_malloc_r+0x22>
 800ceee:	230c      	movs	r3, #12
 800cef0:	6033      	str	r3, [r6, #0]
 800cef2:	2000      	movs	r0, #0
 800cef4:	bd70      	pop	{r4, r5, r6, pc}
 800cef6:	f000 fa43 	bl	800d380 <__malloc_lock>
 800cefa:	4a21      	ldr	r2, [pc, #132]	; (800cf80 <_malloc_r+0xac>)
 800cefc:	6814      	ldr	r4, [r2, #0]
 800cefe:	4621      	mov	r1, r4
 800cf00:	b991      	cbnz	r1, 800cf28 <_malloc_r+0x54>
 800cf02:	4c20      	ldr	r4, [pc, #128]	; (800cf84 <_malloc_r+0xb0>)
 800cf04:	6823      	ldr	r3, [r4, #0]
 800cf06:	b91b      	cbnz	r3, 800cf10 <_malloc_r+0x3c>
 800cf08:	4630      	mov	r0, r6
 800cf0a:	f000 f97d 	bl	800d208 <_sbrk_r>
 800cf0e:	6020      	str	r0, [r4, #0]
 800cf10:	4629      	mov	r1, r5
 800cf12:	4630      	mov	r0, r6
 800cf14:	f000 f978 	bl	800d208 <_sbrk_r>
 800cf18:	1c43      	adds	r3, r0, #1
 800cf1a:	d124      	bne.n	800cf66 <_malloc_r+0x92>
 800cf1c:	230c      	movs	r3, #12
 800cf1e:	6033      	str	r3, [r6, #0]
 800cf20:	4630      	mov	r0, r6
 800cf22:	f000 fa2e 	bl	800d382 <__malloc_unlock>
 800cf26:	e7e4      	b.n	800cef2 <_malloc_r+0x1e>
 800cf28:	680b      	ldr	r3, [r1, #0]
 800cf2a:	1b5b      	subs	r3, r3, r5
 800cf2c:	d418      	bmi.n	800cf60 <_malloc_r+0x8c>
 800cf2e:	2b0b      	cmp	r3, #11
 800cf30:	d90f      	bls.n	800cf52 <_malloc_r+0x7e>
 800cf32:	600b      	str	r3, [r1, #0]
 800cf34:	50cd      	str	r5, [r1, r3]
 800cf36:	18cc      	adds	r4, r1, r3
 800cf38:	4630      	mov	r0, r6
 800cf3a:	f000 fa22 	bl	800d382 <__malloc_unlock>
 800cf3e:	f104 000b 	add.w	r0, r4, #11
 800cf42:	1d23      	adds	r3, r4, #4
 800cf44:	f020 0007 	bic.w	r0, r0, #7
 800cf48:	1ac3      	subs	r3, r0, r3
 800cf4a:	d0d3      	beq.n	800cef4 <_malloc_r+0x20>
 800cf4c:	425a      	negs	r2, r3
 800cf4e:	50e2      	str	r2, [r4, r3]
 800cf50:	e7d0      	b.n	800cef4 <_malloc_r+0x20>
 800cf52:	428c      	cmp	r4, r1
 800cf54:	684b      	ldr	r3, [r1, #4]
 800cf56:	bf16      	itet	ne
 800cf58:	6063      	strne	r3, [r4, #4]
 800cf5a:	6013      	streq	r3, [r2, #0]
 800cf5c:	460c      	movne	r4, r1
 800cf5e:	e7eb      	b.n	800cf38 <_malloc_r+0x64>
 800cf60:	460c      	mov	r4, r1
 800cf62:	6849      	ldr	r1, [r1, #4]
 800cf64:	e7cc      	b.n	800cf00 <_malloc_r+0x2c>
 800cf66:	1cc4      	adds	r4, r0, #3
 800cf68:	f024 0403 	bic.w	r4, r4, #3
 800cf6c:	42a0      	cmp	r0, r4
 800cf6e:	d005      	beq.n	800cf7c <_malloc_r+0xa8>
 800cf70:	1a21      	subs	r1, r4, r0
 800cf72:	4630      	mov	r0, r6
 800cf74:	f000 f948 	bl	800d208 <_sbrk_r>
 800cf78:	3001      	adds	r0, #1
 800cf7a:	d0cf      	beq.n	800cf1c <_malloc_r+0x48>
 800cf7c:	6025      	str	r5, [r4, #0]
 800cf7e:	e7db      	b.n	800cf38 <_malloc_r+0x64>
 800cf80:	20000220 	.word	0x20000220
 800cf84:	20000224 	.word	0x20000224

0800cf88 <__sfputc_r>:
 800cf88:	6893      	ldr	r3, [r2, #8]
 800cf8a:	3b01      	subs	r3, #1
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	b410      	push	{r4}
 800cf90:	6093      	str	r3, [r2, #8]
 800cf92:	da08      	bge.n	800cfa6 <__sfputc_r+0x1e>
 800cf94:	6994      	ldr	r4, [r2, #24]
 800cf96:	42a3      	cmp	r3, r4
 800cf98:	db01      	blt.n	800cf9e <__sfputc_r+0x16>
 800cf9a:	290a      	cmp	r1, #10
 800cf9c:	d103      	bne.n	800cfa6 <__sfputc_r+0x1e>
 800cf9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cfa2:	f7fe bb5d 	b.w	800b660 <__swbuf_r>
 800cfa6:	6813      	ldr	r3, [r2, #0]
 800cfa8:	1c58      	adds	r0, r3, #1
 800cfaa:	6010      	str	r0, [r2, #0]
 800cfac:	7019      	strb	r1, [r3, #0]
 800cfae:	4608      	mov	r0, r1
 800cfb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cfb4:	4770      	bx	lr

0800cfb6 <__sfputs_r>:
 800cfb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfb8:	4606      	mov	r6, r0
 800cfba:	460f      	mov	r7, r1
 800cfbc:	4614      	mov	r4, r2
 800cfbe:	18d5      	adds	r5, r2, r3
 800cfc0:	42ac      	cmp	r4, r5
 800cfc2:	d101      	bne.n	800cfc8 <__sfputs_r+0x12>
 800cfc4:	2000      	movs	r0, #0
 800cfc6:	e007      	b.n	800cfd8 <__sfputs_r+0x22>
 800cfc8:	463a      	mov	r2, r7
 800cfca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfce:	4630      	mov	r0, r6
 800cfd0:	f7ff ffda 	bl	800cf88 <__sfputc_r>
 800cfd4:	1c43      	adds	r3, r0, #1
 800cfd6:	d1f3      	bne.n	800cfc0 <__sfputs_r+0xa>
 800cfd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cfdc <_vfiprintf_r>:
 800cfdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfe0:	460c      	mov	r4, r1
 800cfe2:	b09d      	sub	sp, #116	; 0x74
 800cfe4:	4617      	mov	r7, r2
 800cfe6:	461d      	mov	r5, r3
 800cfe8:	4606      	mov	r6, r0
 800cfea:	b118      	cbz	r0, 800cff4 <_vfiprintf_r+0x18>
 800cfec:	6983      	ldr	r3, [r0, #24]
 800cfee:	b90b      	cbnz	r3, 800cff4 <_vfiprintf_r+0x18>
 800cff0:	f7ff fb2a 	bl	800c648 <__sinit>
 800cff4:	4b7c      	ldr	r3, [pc, #496]	; (800d1e8 <_vfiprintf_r+0x20c>)
 800cff6:	429c      	cmp	r4, r3
 800cff8:	d158      	bne.n	800d0ac <_vfiprintf_r+0xd0>
 800cffa:	6874      	ldr	r4, [r6, #4]
 800cffc:	89a3      	ldrh	r3, [r4, #12]
 800cffe:	0718      	lsls	r0, r3, #28
 800d000:	d55e      	bpl.n	800d0c0 <_vfiprintf_r+0xe4>
 800d002:	6923      	ldr	r3, [r4, #16]
 800d004:	2b00      	cmp	r3, #0
 800d006:	d05b      	beq.n	800d0c0 <_vfiprintf_r+0xe4>
 800d008:	2300      	movs	r3, #0
 800d00a:	9309      	str	r3, [sp, #36]	; 0x24
 800d00c:	2320      	movs	r3, #32
 800d00e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d012:	2330      	movs	r3, #48	; 0x30
 800d014:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d018:	9503      	str	r5, [sp, #12]
 800d01a:	f04f 0b01 	mov.w	fp, #1
 800d01e:	46b8      	mov	r8, r7
 800d020:	4645      	mov	r5, r8
 800d022:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d026:	b10b      	cbz	r3, 800d02c <_vfiprintf_r+0x50>
 800d028:	2b25      	cmp	r3, #37	; 0x25
 800d02a:	d154      	bne.n	800d0d6 <_vfiprintf_r+0xfa>
 800d02c:	ebb8 0a07 	subs.w	sl, r8, r7
 800d030:	d00b      	beq.n	800d04a <_vfiprintf_r+0x6e>
 800d032:	4653      	mov	r3, sl
 800d034:	463a      	mov	r2, r7
 800d036:	4621      	mov	r1, r4
 800d038:	4630      	mov	r0, r6
 800d03a:	f7ff ffbc 	bl	800cfb6 <__sfputs_r>
 800d03e:	3001      	adds	r0, #1
 800d040:	f000 80c2 	beq.w	800d1c8 <_vfiprintf_r+0x1ec>
 800d044:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d046:	4453      	add	r3, sl
 800d048:	9309      	str	r3, [sp, #36]	; 0x24
 800d04a:	f898 3000 	ldrb.w	r3, [r8]
 800d04e:	2b00      	cmp	r3, #0
 800d050:	f000 80ba 	beq.w	800d1c8 <_vfiprintf_r+0x1ec>
 800d054:	2300      	movs	r3, #0
 800d056:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d05a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d05e:	9304      	str	r3, [sp, #16]
 800d060:	9307      	str	r3, [sp, #28]
 800d062:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d066:	931a      	str	r3, [sp, #104]	; 0x68
 800d068:	46a8      	mov	r8, r5
 800d06a:	2205      	movs	r2, #5
 800d06c:	f818 1b01 	ldrb.w	r1, [r8], #1
 800d070:	485e      	ldr	r0, [pc, #376]	; (800d1ec <_vfiprintf_r+0x210>)
 800d072:	f7f3 f8b5 	bl	80001e0 <memchr>
 800d076:	9b04      	ldr	r3, [sp, #16]
 800d078:	bb78      	cbnz	r0, 800d0da <_vfiprintf_r+0xfe>
 800d07a:	06d9      	lsls	r1, r3, #27
 800d07c:	bf44      	itt	mi
 800d07e:	2220      	movmi	r2, #32
 800d080:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d084:	071a      	lsls	r2, r3, #28
 800d086:	bf44      	itt	mi
 800d088:	222b      	movmi	r2, #43	; 0x2b
 800d08a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d08e:	782a      	ldrb	r2, [r5, #0]
 800d090:	2a2a      	cmp	r2, #42	; 0x2a
 800d092:	d02a      	beq.n	800d0ea <_vfiprintf_r+0x10e>
 800d094:	9a07      	ldr	r2, [sp, #28]
 800d096:	46a8      	mov	r8, r5
 800d098:	2000      	movs	r0, #0
 800d09a:	250a      	movs	r5, #10
 800d09c:	4641      	mov	r1, r8
 800d09e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d0a2:	3b30      	subs	r3, #48	; 0x30
 800d0a4:	2b09      	cmp	r3, #9
 800d0a6:	d969      	bls.n	800d17c <_vfiprintf_r+0x1a0>
 800d0a8:	b360      	cbz	r0, 800d104 <_vfiprintf_r+0x128>
 800d0aa:	e024      	b.n	800d0f6 <_vfiprintf_r+0x11a>
 800d0ac:	4b50      	ldr	r3, [pc, #320]	; (800d1f0 <_vfiprintf_r+0x214>)
 800d0ae:	429c      	cmp	r4, r3
 800d0b0:	d101      	bne.n	800d0b6 <_vfiprintf_r+0xda>
 800d0b2:	68b4      	ldr	r4, [r6, #8]
 800d0b4:	e7a2      	b.n	800cffc <_vfiprintf_r+0x20>
 800d0b6:	4b4f      	ldr	r3, [pc, #316]	; (800d1f4 <_vfiprintf_r+0x218>)
 800d0b8:	429c      	cmp	r4, r3
 800d0ba:	bf08      	it	eq
 800d0bc:	68f4      	ldreq	r4, [r6, #12]
 800d0be:	e79d      	b.n	800cffc <_vfiprintf_r+0x20>
 800d0c0:	4621      	mov	r1, r4
 800d0c2:	4630      	mov	r0, r6
 800d0c4:	f7fe fb1e 	bl	800b704 <__swsetup_r>
 800d0c8:	2800      	cmp	r0, #0
 800d0ca:	d09d      	beq.n	800d008 <_vfiprintf_r+0x2c>
 800d0cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d0d0:	b01d      	add	sp, #116	; 0x74
 800d0d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0d6:	46a8      	mov	r8, r5
 800d0d8:	e7a2      	b.n	800d020 <_vfiprintf_r+0x44>
 800d0da:	4a44      	ldr	r2, [pc, #272]	; (800d1ec <_vfiprintf_r+0x210>)
 800d0dc:	1a80      	subs	r0, r0, r2
 800d0de:	fa0b f000 	lsl.w	r0, fp, r0
 800d0e2:	4318      	orrs	r0, r3
 800d0e4:	9004      	str	r0, [sp, #16]
 800d0e6:	4645      	mov	r5, r8
 800d0e8:	e7be      	b.n	800d068 <_vfiprintf_r+0x8c>
 800d0ea:	9a03      	ldr	r2, [sp, #12]
 800d0ec:	1d11      	adds	r1, r2, #4
 800d0ee:	6812      	ldr	r2, [r2, #0]
 800d0f0:	9103      	str	r1, [sp, #12]
 800d0f2:	2a00      	cmp	r2, #0
 800d0f4:	db01      	blt.n	800d0fa <_vfiprintf_r+0x11e>
 800d0f6:	9207      	str	r2, [sp, #28]
 800d0f8:	e004      	b.n	800d104 <_vfiprintf_r+0x128>
 800d0fa:	4252      	negs	r2, r2
 800d0fc:	f043 0302 	orr.w	r3, r3, #2
 800d100:	9207      	str	r2, [sp, #28]
 800d102:	9304      	str	r3, [sp, #16]
 800d104:	f898 3000 	ldrb.w	r3, [r8]
 800d108:	2b2e      	cmp	r3, #46	; 0x2e
 800d10a:	d10e      	bne.n	800d12a <_vfiprintf_r+0x14e>
 800d10c:	f898 3001 	ldrb.w	r3, [r8, #1]
 800d110:	2b2a      	cmp	r3, #42	; 0x2a
 800d112:	d138      	bne.n	800d186 <_vfiprintf_r+0x1aa>
 800d114:	9b03      	ldr	r3, [sp, #12]
 800d116:	1d1a      	adds	r2, r3, #4
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	9203      	str	r2, [sp, #12]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	bfb8      	it	lt
 800d120:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d124:	f108 0802 	add.w	r8, r8, #2
 800d128:	9305      	str	r3, [sp, #20]
 800d12a:	4d33      	ldr	r5, [pc, #204]	; (800d1f8 <_vfiprintf_r+0x21c>)
 800d12c:	f898 1000 	ldrb.w	r1, [r8]
 800d130:	2203      	movs	r2, #3
 800d132:	4628      	mov	r0, r5
 800d134:	f7f3 f854 	bl	80001e0 <memchr>
 800d138:	b140      	cbz	r0, 800d14c <_vfiprintf_r+0x170>
 800d13a:	2340      	movs	r3, #64	; 0x40
 800d13c:	1b40      	subs	r0, r0, r5
 800d13e:	fa03 f000 	lsl.w	r0, r3, r0
 800d142:	9b04      	ldr	r3, [sp, #16]
 800d144:	4303      	orrs	r3, r0
 800d146:	f108 0801 	add.w	r8, r8, #1
 800d14a:	9304      	str	r3, [sp, #16]
 800d14c:	f898 1000 	ldrb.w	r1, [r8]
 800d150:	482a      	ldr	r0, [pc, #168]	; (800d1fc <_vfiprintf_r+0x220>)
 800d152:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d156:	2206      	movs	r2, #6
 800d158:	f108 0701 	add.w	r7, r8, #1
 800d15c:	f7f3 f840 	bl	80001e0 <memchr>
 800d160:	2800      	cmp	r0, #0
 800d162:	d037      	beq.n	800d1d4 <_vfiprintf_r+0x1f8>
 800d164:	4b26      	ldr	r3, [pc, #152]	; (800d200 <_vfiprintf_r+0x224>)
 800d166:	bb1b      	cbnz	r3, 800d1b0 <_vfiprintf_r+0x1d4>
 800d168:	9b03      	ldr	r3, [sp, #12]
 800d16a:	3307      	adds	r3, #7
 800d16c:	f023 0307 	bic.w	r3, r3, #7
 800d170:	3308      	adds	r3, #8
 800d172:	9303      	str	r3, [sp, #12]
 800d174:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d176:	444b      	add	r3, r9
 800d178:	9309      	str	r3, [sp, #36]	; 0x24
 800d17a:	e750      	b.n	800d01e <_vfiprintf_r+0x42>
 800d17c:	fb05 3202 	mla	r2, r5, r2, r3
 800d180:	2001      	movs	r0, #1
 800d182:	4688      	mov	r8, r1
 800d184:	e78a      	b.n	800d09c <_vfiprintf_r+0xc0>
 800d186:	2300      	movs	r3, #0
 800d188:	f108 0801 	add.w	r8, r8, #1
 800d18c:	9305      	str	r3, [sp, #20]
 800d18e:	4619      	mov	r1, r3
 800d190:	250a      	movs	r5, #10
 800d192:	4640      	mov	r0, r8
 800d194:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d198:	3a30      	subs	r2, #48	; 0x30
 800d19a:	2a09      	cmp	r2, #9
 800d19c:	d903      	bls.n	800d1a6 <_vfiprintf_r+0x1ca>
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d0c3      	beq.n	800d12a <_vfiprintf_r+0x14e>
 800d1a2:	9105      	str	r1, [sp, #20]
 800d1a4:	e7c1      	b.n	800d12a <_vfiprintf_r+0x14e>
 800d1a6:	fb05 2101 	mla	r1, r5, r1, r2
 800d1aa:	2301      	movs	r3, #1
 800d1ac:	4680      	mov	r8, r0
 800d1ae:	e7f0      	b.n	800d192 <_vfiprintf_r+0x1b6>
 800d1b0:	ab03      	add	r3, sp, #12
 800d1b2:	9300      	str	r3, [sp, #0]
 800d1b4:	4622      	mov	r2, r4
 800d1b6:	4b13      	ldr	r3, [pc, #76]	; (800d204 <_vfiprintf_r+0x228>)
 800d1b8:	a904      	add	r1, sp, #16
 800d1ba:	4630      	mov	r0, r6
 800d1bc:	f7fd fe0c 	bl	800add8 <_printf_float>
 800d1c0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800d1c4:	4681      	mov	r9, r0
 800d1c6:	d1d5      	bne.n	800d174 <_vfiprintf_r+0x198>
 800d1c8:	89a3      	ldrh	r3, [r4, #12]
 800d1ca:	065b      	lsls	r3, r3, #25
 800d1cc:	f53f af7e 	bmi.w	800d0cc <_vfiprintf_r+0xf0>
 800d1d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d1d2:	e77d      	b.n	800d0d0 <_vfiprintf_r+0xf4>
 800d1d4:	ab03      	add	r3, sp, #12
 800d1d6:	9300      	str	r3, [sp, #0]
 800d1d8:	4622      	mov	r2, r4
 800d1da:	4b0a      	ldr	r3, [pc, #40]	; (800d204 <_vfiprintf_r+0x228>)
 800d1dc:	a904      	add	r1, sp, #16
 800d1de:	4630      	mov	r0, r6
 800d1e0:	f7fe f8b0 	bl	800b344 <_printf_i>
 800d1e4:	e7ec      	b.n	800d1c0 <_vfiprintf_r+0x1e4>
 800d1e6:	bf00      	nop
 800d1e8:	0800e730 	.word	0x0800e730
 800d1ec:	0800e86c 	.word	0x0800e86c
 800d1f0:	0800e750 	.word	0x0800e750
 800d1f4:	0800e710 	.word	0x0800e710
 800d1f8:	0800e872 	.word	0x0800e872
 800d1fc:	0800e876 	.word	0x0800e876
 800d200:	0800add9 	.word	0x0800add9
 800d204:	0800cfb7 	.word	0x0800cfb7

0800d208 <_sbrk_r>:
 800d208:	b538      	push	{r3, r4, r5, lr}
 800d20a:	4c06      	ldr	r4, [pc, #24]	; (800d224 <_sbrk_r+0x1c>)
 800d20c:	2300      	movs	r3, #0
 800d20e:	4605      	mov	r5, r0
 800d210:	4608      	mov	r0, r1
 800d212:	6023      	str	r3, [r4, #0]
 800d214:	f7f8 f864 	bl	80052e0 <_sbrk>
 800d218:	1c43      	adds	r3, r0, #1
 800d21a:	d102      	bne.n	800d222 <_sbrk_r+0x1a>
 800d21c:	6823      	ldr	r3, [r4, #0]
 800d21e:	b103      	cbz	r3, 800d222 <_sbrk_r+0x1a>
 800d220:	602b      	str	r3, [r5, #0]
 800d222:	bd38      	pop	{r3, r4, r5, pc}
 800d224:	200005bc 	.word	0x200005bc

0800d228 <__sread>:
 800d228:	b510      	push	{r4, lr}
 800d22a:	460c      	mov	r4, r1
 800d22c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d230:	f000 f8a8 	bl	800d384 <_read_r>
 800d234:	2800      	cmp	r0, #0
 800d236:	bfab      	itete	ge
 800d238:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d23a:	89a3      	ldrhlt	r3, [r4, #12]
 800d23c:	181b      	addge	r3, r3, r0
 800d23e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d242:	bfac      	ite	ge
 800d244:	6563      	strge	r3, [r4, #84]	; 0x54
 800d246:	81a3      	strhlt	r3, [r4, #12]
 800d248:	bd10      	pop	{r4, pc}

0800d24a <__swrite>:
 800d24a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d24e:	461f      	mov	r7, r3
 800d250:	898b      	ldrh	r3, [r1, #12]
 800d252:	05db      	lsls	r3, r3, #23
 800d254:	4605      	mov	r5, r0
 800d256:	460c      	mov	r4, r1
 800d258:	4616      	mov	r6, r2
 800d25a:	d505      	bpl.n	800d268 <__swrite+0x1e>
 800d25c:	2302      	movs	r3, #2
 800d25e:	2200      	movs	r2, #0
 800d260:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d264:	f000 f868 	bl	800d338 <_lseek_r>
 800d268:	89a3      	ldrh	r3, [r4, #12]
 800d26a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d26e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d272:	81a3      	strh	r3, [r4, #12]
 800d274:	4632      	mov	r2, r6
 800d276:	463b      	mov	r3, r7
 800d278:	4628      	mov	r0, r5
 800d27a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d27e:	f000 b817 	b.w	800d2b0 <_write_r>

0800d282 <__sseek>:
 800d282:	b510      	push	{r4, lr}
 800d284:	460c      	mov	r4, r1
 800d286:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d28a:	f000 f855 	bl	800d338 <_lseek_r>
 800d28e:	1c43      	adds	r3, r0, #1
 800d290:	89a3      	ldrh	r3, [r4, #12]
 800d292:	bf15      	itete	ne
 800d294:	6560      	strne	r0, [r4, #84]	; 0x54
 800d296:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d29a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d29e:	81a3      	strheq	r3, [r4, #12]
 800d2a0:	bf18      	it	ne
 800d2a2:	81a3      	strhne	r3, [r4, #12]
 800d2a4:	bd10      	pop	{r4, pc}

0800d2a6 <__sclose>:
 800d2a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2aa:	f000 b813 	b.w	800d2d4 <_close_r>
	...

0800d2b0 <_write_r>:
 800d2b0:	b538      	push	{r3, r4, r5, lr}
 800d2b2:	4c07      	ldr	r4, [pc, #28]	; (800d2d0 <_write_r+0x20>)
 800d2b4:	4605      	mov	r5, r0
 800d2b6:	4608      	mov	r0, r1
 800d2b8:	4611      	mov	r1, r2
 800d2ba:	2200      	movs	r2, #0
 800d2bc:	6022      	str	r2, [r4, #0]
 800d2be:	461a      	mov	r2, r3
 800d2c0:	f7f6 f9d4 	bl	800366c <_write>
 800d2c4:	1c43      	adds	r3, r0, #1
 800d2c6:	d102      	bne.n	800d2ce <_write_r+0x1e>
 800d2c8:	6823      	ldr	r3, [r4, #0]
 800d2ca:	b103      	cbz	r3, 800d2ce <_write_r+0x1e>
 800d2cc:	602b      	str	r3, [r5, #0]
 800d2ce:	bd38      	pop	{r3, r4, r5, pc}
 800d2d0:	200005bc 	.word	0x200005bc

0800d2d4 <_close_r>:
 800d2d4:	b538      	push	{r3, r4, r5, lr}
 800d2d6:	4c06      	ldr	r4, [pc, #24]	; (800d2f0 <_close_r+0x1c>)
 800d2d8:	2300      	movs	r3, #0
 800d2da:	4605      	mov	r5, r0
 800d2dc:	4608      	mov	r0, r1
 800d2de:	6023      	str	r3, [r4, #0]
 800d2e0:	f7f7 ffc9 	bl	8005276 <_close>
 800d2e4:	1c43      	adds	r3, r0, #1
 800d2e6:	d102      	bne.n	800d2ee <_close_r+0x1a>
 800d2e8:	6823      	ldr	r3, [r4, #0]
 800d2ea:	b103      	cbz	r3, 800d2ee <_close_r+0x1a>
 800d2ec:	602b      	str	r3, [r5, #0]
 800d2ee:	bd38      	pop	{r3, r4, r5, pc}
 800d2f0:	200005bc 	.word	0x200005bc

0800d2f4 <_fstat_r>:
 800d2f4:	b538      	push	{r3, r4, r5, lr}
 800d2f6:	4c07      	ldr	r4, [pc, #28]	; (800d314 <_fstat_r+0x20>)
 800d2f8:	2300      	movs	r3, #0
 800d2fa:	4605      	mov	r5, r0
 800d2fc:	4608      	mov	r0, r1
 800d2fe:	4611      	mov	r1, r2
 800d300:	6023      	str	r3, [r4, #0]
 800d302:	f7f7 ffc4 	bl	800528e <_fstat>
 800d306:	1c43      	adds	r3, r0, #1
 800d308:	d102      	bne.n	800d310 <_fstat_r+0x1c>
 800d30a:	6823      	ldr	r3, [r4, #0]
 800d30c:	b103      	cbz	r3, 800d310 <_fstat_r+0x1c>
 800d30e:	602b      	str	r3, [r5, #0]
 800d310:	bd38      	pop	{r3, r4, r5, pc}
 800d312:	bf00      	nop
 800d314:	200005bc 	.word	0x200005bc

0800d318 <_isatty_r>:
 800d318:	b538      	push	{r3, r4, r5, lr}
 800d31a:	4c06      	ldr	r4, [pc, #24]	; (800d334 <_isatty_r+0x1c>)
 800d31c:	2300      	movs	r3, #0
 800d31e:	4605      	mov	r5, r0
 800d320:	4608      	mov	r0, r1
 800d322:	6023      	str	r3, [r4, #0]
 800d324:	f7f7 ffc3 	bl	80052ae <_isatty>
 800d328:	1c43      	adds	r3, r0, #1
 800d32a:	d102      	bne.n	800d332 <_isatty_r+0x1a>
 800d32c:	6823      	ldr	r3, [r4, #0]
 800d32e:	b103      	cbz	r3, 800d332 <_isatty_r+0x1a>
 800d330:	602b      	str	r3, [r5, #0]
 800d332:	bd38      	pop	{r3, r4, r5, pc}
 800d334:	200005bc 	.word	0x200005bc

0800d338 <_lseek_r>:
 800d338:	b538      	push	{r3, r4, r5, lr}
 800d33a:	4c07      	ldr	r4, [pc, #28]	; (800d358 <_lseek_r+0x20>)
 800d33c:	4605      	mov	r5, r0
 800d33e:	4608      	mov	r0, r1
 800d340:	4611      	mov	r1, r2
 800d342:	2200      	movs	r2, #0
 800d344:	6022      	str	r2, [r4, #0]
 800d346:	461a      	mov	r2, r3
 800d348:	f7f7 ffbc 	bl	80052c4 <_lseek>
 800d34c:	1c43      	adds	r3, r0, #1
 800d34e:	d102      	bne.n	800d356 <_lseek_r+0x1e>
 800d350:	6823      	ldr	r3, [r4, #0]
 800d352:	b103      	cbz	r3, 800d356 <_lseek_r+0x1e>
 800d354:	602b      	str	r3, [r5, #0]
 800d356:	bd38      	pop	{r3, r4, r5, pc}
 800d358:	200005bc 	.word	0x200005bc

0800d35c <__ascii_mbtowc>:
 800d35c:	b082      	sub	sp, #8
 800d35e:	b901      	cbnz	r1, 800d362 <__ascii_mbtowc+0x6>
 800d360:	a901      	add	r1, sp, #4
 800d362:	b142      	cbz	r2, 800d376 <__ascii_mbtowc+0x1a>
 800d364:	b14b      	cbz	r3, 800d37a <__ascii_mbtowc+0x1e>
 800d366:	7813      	ldrb	r3, [r2, #0]
 800d368:	600b      	str	r3, [r1, #0]
 800d36a:	7812      	ldrb	r2, [r2, #0]
 800d36c:	1c10      	adds	r0, r2, #0
 800d36e:	bf18      	it	ne
 800d370:	2001      	movne	r0, #1
 800d372:	b002      	add	sp, #8
 800d374:	4770      	bx	lr
 800d376:	4610      	mov	r0, r2
 800d378:	e7fb      	b.n	800d372 <__ascii_mbtowc+0x16>
 800d37a:	f06f 0001 	mvn.w	r0, #1
 800d37e:	e7f8      	b.n	800d372 <__ascii_mbtowc+0x16>

0800d380 <__malloc_lock>:
 800d380:	4770      	bx	lr

0800d382 <__malloc_unlock>:
 800d382:	4770      	bx	lr

0800d384 <_read_r>:
 800d384:	b538      	push	{r3, r4, r5, lr}
 800d386:	4c07      	ldr	r4, [pc, #28]	; (800d3a4 <_read_r+0x20>)
 800d388:	4605      	mov	r5, r0
 800d38a:	4608      	mov	r0, r1
 800d38c:	4611      	mov	r1, r2
 800d38e:	2200      	movs	r2, #0
 800d390:	6022      	str	r2, [r4, #0]
 800d392:	461a      	mov	r2, r3
 800d394:	f7f7 ff52 	bl	800523c <_read>
 800d398:	1c43      	adds	r3, r0, #1
 800d39a:	d102      	bne.n	800d3a2 <_read_r+0x1e>
 800d39c:	6823      	ldr	r3, [r4, #0]
 800d39e:	b103      	cbz	r3, 800d3a2 <_read_r+0x1e>
 800d3a0:	602b      	str	r3, [r5, #0]
 800d3a2:	bd38      	pop	{r3, r4, r5, pc}
 800d3a4:	200005bc 	.word	0x200005bc

0800d3a8 <__ascii_wctomb>:
 800d3a8:	b149      	cbz	r1, 800d3be <__ascii_wctomb+0x16>
 800d3aa:	2aff      	cmp	r2, #255	; 0xff
 800d3ac:	bf85      	ittet	hi
 800d3ae:	238a      	movhi	r3, #138	; 0x8a
 800d3b0:	6003      	strhi	r3, [r0, #0]
 800d3b2:	700a      	strbls	r2, [r1, #0]
 800d3b4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800d3b8:	bf98      	it	ls
 800d3ba:	2001      	movls	r0, #1
 800d3bc:	4770      	bx	lr
 800d3be:	4608      	mov	r0, r1
 800d3c0:	4770      	bx	lr
	...

0800d3c4 <asinf>:
 800d3c4:	b510      	push	{r4, lr}
 800d3c6:	ed2d 8b02 	vpush	{d8}
 800d3ca:	4c27      	ldr	r4, [pc, #156]	; (800d468 <asinf+0xa4>)
 800d3cc:	b08a      	sub	sp, #40	; 0x28
 800d3ce:	eeb0 8a40 	vmov.f32	s16, s0
 800d3d2:	f000 f9b5 	bl	800d740 <__ieee754_asinf>
 800d3d6:	f994 3000 	ldrsb.w	r3, [r4]
 800d3da:	3301      	adds	r3, #1
 800d3dc:	eef0 8a40 	vmov.f32	s17, s0
 800d3e0:	d03c      	beq.n	800d45c <asinf+0x98>
 800d3e2:	eeb4 8a48 	vcmp.f32	s16, s16
 800d3e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3ea:	d637      	bvs.n	800d45c <asinf+0x98>
 800d3ec:	eeb0 0a48 	vmov.f32	s0, s16
 800d3f0:	f000 fede 	bl	800e1b0 <fabsf>
 800d3f4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d3f8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800d3fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d400:	dd2c      	ble.n	800d45c <asinf+0x98>
 800d402:	2301      	movs	r3, #1
 800d404:	9300      	str	r3, [sp, #0]
 800d406:	4b19      	ldr	r3, [pc, #100]	; (800d46c <asinf+0xa8>)
 800d408:	9301      	str	r3, [sp, #4]
 800d40a:	ee18 0a10 	vmov	r0, s16
 800d40e:	2300      	movs	r3, #0
 800d410:	9308      	str	r3, [sp, #32]
 800d412:	f7f3 f899 	bl	8000548 <__aeabi_f2d>
 800d416:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d41a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d41e:	4814      	ldr	r0, [pc, #80]	; (800d470 <asinf+0xac>)
 800d420:	f000 fdea 	bl	800dff8 <nan>
 800d424:	f994 3000 	ldrsb.w	r3, [r4]
 800d428:	2b02      	cmp	r3, #2
 800d42a:	ed8d 0b06 	vstr	d0, [sp, #24]
 800d42e:	d104      	bne.n	800d43a <asinf+0x76>
 800d430:	f7fd fc0c 	bl	800ac4c <__errno>
 800d434:	2321      	movs	r3, #33	; 0x21
 800d436:	6003      	str	r3, [r0, #0]
 800d438:	e004      	b.n	800d444 <asinf+0x80>
 800d43a:	4668      	mov	r0, sp
 800d43c:	f000 fdd9 	bl	800dff2 <matherr>
 800d440:	2800      	cmp	r0, #0
 800d442:	d0f5      	beq.n	800d430 <asinf+0x6c>
 800d444:	9b08      	ldr	r3, [sp, #32]
 800d446:	b11b      	cbz	r3, 800d450 <asinf+0x8c>
 800d448:	f7fd fc00 	bl	800ac4c <__errno>
 800d44c:	9b08      	ldr	r3, [sp, #32]
 800d44e:	6003      	str	r3, [r0, #0]
 800d450:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d454:	f7f3 fba8 	bl	8000ba8 <__aeabi_d2f>
 800d458:	ee08 0a90 	vmov	s17, r0
 800d45c:	eeb0 0a68 	vmov.f32	s0, s17
 800d460:	b00a      	add	sp, #40	; 0x28
 800d462:	ecbd 8b02 	vpop	{d8}
 800d466:	bd10      	pop	{r4, pc}
 800d468:	200001e0 	.word	0x200001e0
 800d46c:	0800e988 	.word	0x0800e988
 800d470:	0800e871 	.word	0x0800e871

0800d474 <atan2f>:
 800d474:	f000 ba4c 	b.w	800d910 <__ieee754_atan2f>

0800d478 <powf>:
 800d478:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 800d47c:	ed2d 8b04 	vpush	{d8-d9}
 800d480:	4ca7      	ldr	r4, [pc, #668]	; (800d720 <powf+0x2a8>)
 800d482:	b08a      	sub	sp, #40	; 0x28
 800d484:	eef0 8a40 	vmov.f32	s17, s0
 800d488:	eeb0 8a60 	vmov.f32	s16, s1
 800d48c:	f000 faee 	bl	800da6c <__ieee754_powf>
 800d490:	f994 5000 	ldrsb.w	r5, [r4]
 800d494:	1c6b      	adds	r3, r5, #1
 800d496:	eeb0 9a40 	vmov.f32	s18, s0
 800d49a:	4626      	mov	r6, r4
 800d49c:	d05f      	beq.n	800d55e <powf+0xe6>
 800d49e:	eeb4 8a48 	vcmp.f32	s16, s16
 800d4a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4a6:	d65a      	bvs.n	800d55e <powf+0xe6>
 800d4a8:	eef4 8a68 	vcmp.f32	s17, s17
 800d4ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4b0:	d721      	bvc.n	800d4f6 <powf+0x7e>
 800d4b2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800d4b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4ba:	d150      	bne.n	800d55e <powf+0xe6>
 800d4bc:	2301      	movs	r3, #1
 800d4be:	9300      	str	r3, [sp, #0]
 800d4c0:	4b98      	ldr	r3, [pc, #608]	; (800d724 <powf+0x2ac>)
 800d4c2:	9301      	str	r3, [sp, #4]
 800d4c4:	ee18 0a90 	vmov	r0, s17
 800d4c8:	2300      	movs	r3, #0
 800d4ca:	9308      	str	r3, [sp, #32]
 800d4cc:	f7f3 f83c 	bl	8000548 <__aeabi_f2d>
 800d4d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d4d4:	ee18 0a10 	vmov	r0, s16
 800d4d8:	f7f3 f836 	bl	8000548 <__aeabi_f2d>
 800d4dc:	4b92      	ldr	r3, [pc, #584]	; (800d728 <powf+0x2b0>)
 800d4de:	2200      	movs	r2, #0
 800d4e0:	2d02      	cmp	r5, #2
 800d4e2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d4e6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d4ea:	d032      	beq.n	800d552 <powf+0xda>
 800d4ec:	4668      	mov	r0, sp
 800d4ee:	f000 fd80 	bl	800dff2 <matherr>
 800d4f2:	bb40      	cbnz	r0, 800d546 <powf+0xce>
 800d4f4:	e065      	b.n	800d5c2 <powf+0x14a>
 800d4f6:	eddf 9a8d 	vldr	s19, [pc, #564]	; 800d72c <powf+0x2b4>
 800d4fa:	eef4 8a69 	vcmp.f32	s17, s19
 800d4fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d502:	d163      	bne.n	800d5cc <powf+0x154>
 800d504:	eeb4 8a69 	vcmp.f32	s16, s19
 800d508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d50c:	d12e      	bne.n	800d56c <powf+0xf4>
 800d50e:	2301      	movs	r3, #1
 800d510:	9300      	str	r3, [sp, #0]
 800d512:	4b84      	ldr	r3, [pc, #528]	; (800d724 <powf+0x2ac>)
 800d514:	9301      	str	r3, [sp, #4]
 800d516:	ee18 0a90 	vmov	r0, s17
 800d51a:	2300      	movs	r3, #0
 800d51c:	9308      	str	r3, [sp, #32]
 800d51e:	f7f3 f813 	bl	8000548 <__aeabi_f2d>
 800d522:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d526:	ee18 0a10 	vmov	r0, s16
 800d52a:	f7f3 f80d 	bl	8000548 <__aeabi_f2d>
 800d52e:	2200      	movs	r2, #0
 800d530:	2300      	movs	r3, #0
 800d532:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d536:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d53a:	2d00      	cmp	r5, #0
 800d53c:	d0d6      	beq.n	800d4ec <powf+0x74>
 800d53e:	4b7a      	ldr	r3, [pc, #488]	; (800d728 <powf+0x2b0>)
 800d540:	2200      	movs	r2, #0
 800d542:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d546:	9b08      	ldr	r3, [sp, #32]
 800d548:	b11b      	cbz	r3, 800d552 <powf+0xda>
 800d54a:	f7fd fb7f 	bl	800ac4c <__errno>
 800d54e:	9b08      	ldr	r3, [sp, #32]
 800d550:	6003      	str	r3, [r0, #0]
 800d552:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d556:	f7f3 fb27 	bl	8000ba8 <__aeabi_d2f>
 800d55a:	ee09 0a10 	vmov	s18, r0
 800d55e:	eeb0 0a49 	vmov.f32	s0, s18
 800d562:	b00a      	add	sp, #40	; 0x28
 800d564:	ecbd 8b04 	vpop	{d8-d9}
 800d568:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800d56c:	eeb0 0a48 	vmov.f32	s0, s16
 800d570:	f000 fe25 	bl	800e1be <finitef>
 800d574:	2800      	cmp	r0, #0
 800d576:	d0f2      	beq.n	800d55e <powf+0xe6>
 800d578:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800d57c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d580:	d5ed      	bpl.n	800d55e <powf+0xe6>
 800d582:	2301      	movs	r3, #1
 800d584:	9300      	str	r3, [sp, #0]
 800d586:	4b67      	ldr	r3, [pc, #412]	; (800d724 <powf+0x2ac>)
 800d588:	9301      	str	r3, [sp, #4]
 800d58a:	ee18 0a90 	vmov	r0, s17
 800d58e:	2300      	movs	r3, #0
 800d590:	9308      	str	r3, [sp, #32]
 800d592:	f7f2 ffd9 	bl	8000548 <__aeabi_f2d>
 800d596:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d59a:	ee18 0a10 	vmov	r0, s16
 800d59e:	f7f2 ffd3 	bl	8000548 <__aeabi_f2d>
 800d5a2:	f994 3000 	ldrsb.w	r3, [r4]
 800d5a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d5aa:	b923      	cbnz	r3, 800d5b6 <powf+0x13e>
 800d5ac:	2200      	movs	r2, #0
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d5b4:	e79a      	b.n	800d4ec <powf+0x74>
 800d5b6:	495e      	ldr	r1, [pc, #376]	; (800d730 <powf+0x2b8>)
 800d5b8:	2000      	movs	r0, #0
 800d5ba:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d5be:	2b02      	cmp	r3, #2
 800d5c0:	d194      	bne.n	800d4ec <powf+0x74>
 800d5c2:	f7fd fb43 	bl	800ac4c <__errno>
 800d5c6:	2321      	movs	r3, #33	; 0x21
 800d5c8:	6003      	str	r3, [r0, #0]
 800d5ca:	e7bc      	b.n	800d546 <powf+0xce>
 800d5cc:	f000 fdf7 	bl	800e1be <finitef>
 800d5d0:	4605      	mov	r5, r0
 800d5d2:	2800      	cmp	r0, #0
 800d5d4:	d173      	bne.n	800d6be <powf+0x246>
 800d5d6:	eeb0 0a68 	vmov.f32	s0, s17
 800d5da:	f000 fdf0 	bl	800e1be <finitef>
 800d5de:	2800      	cmp	r0, #0
 800d5e0:	d06d      	beq.n	800d6be <powf+0x246>
 800d5e2:	eeb0 0a48 	vmov.f32	s0, s16
 800d5e6:	f000 fdea 	bl	800e1be <finitef>
 800d5ea:	2800      	cmp	r0, #0
 800d5ec:	d067      	beq.n	800d6be <powf+0x246>
 800d5ee:	ee18 0a90 	vmov	r0, s17
 800d5f2:	f7f2 ffa9 	bl	8000548 <__aeabi_f2d>
 800d5f6:	4680      	mov	r8, r0
 800d5f8:	ee18 0a10 	vmov	r0, s16
 800d5fc:	4689      	mov	r9, r1
 800d5fe:	f7f2 ffa3 	bl	8000548 <__aeabi_f2d>
 800d602:	eeb4 9a49 	vcmp.f32	s18, s18
 800d606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d60a:	f994 4000 	ldrsb.w	r4, [r4]
 800d60e:	4b45      	ldr	r3, [pc, #276]	; (800d724 <powf+0x2ac>)
 800d610:	d713      	bvc.n	800d63a <powf+0x1c2>
 800d612:	2201      	movs	r2, #1
 800d614:	e9cd 2300 	strd	r2, r3, [sp]
 800d618:	9508      	str	r5, [sp, #32]
 800d61a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800d61e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d622:	2c00      	cmp	r4, #0
 800d624:	d0c2      	beq.n	800d5ac <powf+0x134>
 800d626:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 800d62a:	ee17 0a90 	vmov	r0, s15
 800d62e:	f7f2 ff8b 	bl	8000548 <__aeabi_f2d>
 800d632:	2c02      	cmp	r4, #2
 800d634:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d638:	e7c2      	b.n	800d5c0 <powf+0x148>
 800d63a:	2203      	movs	r2, #3
 800d63c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d640:	e9cd 2300 	strd	r2, r3, [sp]
 800d644:	9508      	str	r5, [sp, #32]
 800d646:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800d64a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d64e:	ee28 8a27 	vmul.f32	s16, s16, s15
 800d652:	b9fc      	cbnz	r4, 800d694 <powf+0x21c>
 800d654:	4b37      	ldr	r3, [pc, #220]	; (800d734 <powf+0x2bc>)
 800d656:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800d65a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800d65e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d662:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d666:	d553      	bpl.n	800d710 <powf+0x298>
 800d668:	eeb0 0a48 	vmov.f32	s0, s16
 800d66c:	f000 fdb8 	bl	800e1e0 <rintf>
 800d670:	eeb4 0a48 	vcmp.f32	s0, s16
 800d674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d678:	d004      	beq.n	800d684 <powf+0x20c>
 800d67a:	4b2f      	ldr	r3, [pc, #188]	; (800d738 <powf+0x2c0>)
 800d67c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800d680:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d684:	f996 3000 	ldrsb.w	r3, [r6]
 800d688:	2b02      	cmp	r3, #2
 800d68a:	d141      	bne.n	800d710 <powf+0x298>
 800d68c:	f7fd fade 	bl	800ac4c <__errno>
 800d690:	2322      	movs	r3, #34	; 0x22
 800d692:	e799      	b.n	800d5c8 <powf+0x150>
 800d694:	4b29      	ldr	r3, [pc, #164]	; (800d73c <powf+0x2c4>)
 800d696:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800d69a:	2200      	movs	r2, #0
 800d69c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6a0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d6a4:	d5ee      	bpl.n	800d684 <powf+0x20c>
 800d6a6:	eeb0 0a48 	vmov.f32	s0, s16
 800d6aa:	f000 fd99 	bl	800e1e0 <rintf>
 800d6ae:	eeb4 0a48 	vcmp.f32	s0, s16
 800d6b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6b6:	d0e5      	beq.n	800d684 <powf+0x20c>
 800d6b8:	2200      	movs	r2, #0
 800d6ba:	4b1d      	ldr	r3, [pc, #116]	; (800d730 <powf+0x2b8>)
 800d6bc:	e7e0      	b.n	800d680 <powf+0x208>
 800d6be:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800d6c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6c6:	f47f af4a 	bne.w	800d55e <powf+0xe6>
 800d6ca:	eeb0 0a68 	vmov.f32	s0, s17
 800d6ce:	f000 fd76 	bl	800e1be <finitef>
 800d6d2:	2800      	cmp	r0, #0
 800d6d4:	f43f af43 	beq.w	800d55e <powf+0xe6>
 800d6d8:	eeb0 0a48 	vmov.f32	s0, s16
 800d6dc:	f000 fd6f 	bl	800e1be <finitef>
 800d6e0:	2800      	cmp	r0, #0
 800d6e2:	f43f af3c 	beq.w	800d55e <powf+0xe6>
 800d6e6:	2304      	movs	r3, #4
 800d6e8:	9300      	str	r3, [sp, #0]
 800d6ea:	4b0e      	ldr	r3, [pc, #56]	; (800d724 <powf+0x2ac>)
 800d6ec:	9301      	str	r3, [sp, #4]
 800d6ee:	ee18 0a90 	vmov	r0, s17
 800d6f2:	2300      	movs	r3, #0
 800d6f4:	9308      	str	r3, [sp, #32]
 800d6f6:	f7f2 ff27 	bl	8000548 <__aeabi_f2d>
 800d6fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d6fe:	ee18 0a10 	vmov	r0, s16
 800d702:	f7f2 ff21 	bl	8000548 <__aeabi_f2d>
 800d706:	2200      	movs	r2, #0
 800d708:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d70c:	2300      	movs	r3, #0
 800d70e:	e7b7      	b.n	800d680 <powf+0x208>
 800d710:	4668      	mov	r0, sp
 800d712:	f000 fc6e 	bl	800dff2 <matherr>
 800d716:	2800      	cmp	r0, #0
 800d718:	f47f af15 	bne.w	800d546 <powf+0xce>
 800d71c:	e7b6      	b.n	800d68c <powf+0x214>
 800d71e:	bf00      	nop
 800d720:	200001e0 	.word	0x200001e0
 800d724:	0800e98e 	.word	0x0800e98e
 800d728:	3ff00000 	.word	0x3ff00000
 800d72c:	00000000 	.word	0x00000000
 800d730:	fff00000 	.word	0xfff00000
 800d734:	47efffff 	.word	0x47efffff
 800d738:	c7efffff 	.word	0xc7efffff
 800d73c:	7ff00000 	.word	0x7ff00000

0800d740 <__ieee754_asinf>:
 800d740:	b538      	push	{r3, r4, r5, lr}
 800d742:	ee10 5a10 	vmov	r5, s0
 800d746:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800d74a:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800d74e:	ed2d 8b04 	vpush	{d8-d9}
 800d752:	d10c      	bne.n	800d76e <__ieee754_asinf+0x2e>
 800d754:	eddf 7a5e 	vldr	s15, [pc, #376]	; 800d8d0 <__ieee754_asinf+0x190>
 800d758:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 800d8d4 <__ieee754_asinf+0x194>
 800d75c:	ee60 7a27 	vmul.f32	s15, s0, s15
 800d760:	eee0 7a07 	vfma.f32	s15, s0, s14
 800d764:	eeb0 0a67 	vmov.f32	s0, s15
 800d768:	ecbd 8b04 	vpop	{d8-d9}
 800d76c:	bd38      	pop	{r3, r4, r5, pc}
 800d76e:	dd04      	ble.n	800d77a <__ieee754_asinf+0x3a>
 800d770:	ee70 7a40 	vsub.f32	s15, s0, s0
 800d774:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800d778:	e7f6      	b.n	800d768 <__ieee754_asinf+0x28>
 800d77a:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800d77e:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800d782:	da0b      	bge.n	800d79c <__ieee754_asinf+0x5c>
 800d784:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800d788:	da52      	bge.n	800d830 <__ieee754_asinf+0xf0>
 800d78a:	eddf 7a53 	vldr	s15, [pc, #332]	; 800d8d8 <__ieee754_asinf+0x198>
 800d78e:	ee70 7a27 	vadd.f32	s15, s0, s15
 800d792:	eef4 7ae8 	vcmpe.f32	s15, s17
 800d796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d79a:	dce5      	bgt.n	800d768 <__ieee754_asinf+0x28>
 800d79c:	f000 fd08 	bl	800e1b0 <fabsf>
 800d7a0:	ee38 0ac0 	vsub.f32	s0, s17, s0
 800d7a4:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800d7a8:	ee20 8a08 	vmul.f32	s16, s0, s16
 800d7ac:	eddf 7a4b 	vldr	s15, [pc, #300]	; 800d8dc <__ieee754_asinf+0x19c>
 800d7b0:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800d8e0 <__ieee754_asinf+0x1a0>
 800d7b4:	ed9f 9a4b 	vldr	s18, [pc, #300]	; 800d8e4 <__ieee754_asinf+0x1a4>
 800d7b8:	eea8 7a27 	vfma.f32	s14, s16, s15
 800d7bc:	eddf 7a4a 	vldr	s15, [pc, #296]	; 800d8e8 <__ieee754_asinf+0x1a8>
 800d7c0:	eee7 7a08 	vfma.f32	s15, s14, s16
 800d7c4:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800d8ec <__ieee754_asinf+0x1ac>
 800d7c8:	eea7 7a88 	vfma.f32	s14, s15, s16
 800d7cc:	eddf 7a48 	vldr	s15, [pc, #288]	; 800d8f0 <__ieee754_asinf+0x1b0>
 800d7d0:	eee7 7a08 	vfma.f32	s15, s14, s16
 800d7d4:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800d8f4 <__ieee754_asinf+0x1b4>
 800d7d8:	eea7 9a88 	vfma.f32	s18, s15, s16
 800d7dc:	eddf 7a46 	vldr	s15, [pc, #280]	; 800d8f8 <__ieee754_asinf+0x1b8>
 800d7e0:	eee8 7a07 	vfma.f32	s15, s16, s14
 800d7e4:	ed9f 7a45 	vldr	s14, [pc, #276]	; 800d8fc <__ieee754_asinf+0x1bc>
 800d7e8:	eea7 7a88 	vfma.f32	s14, s15, s16
 800d7ec:	eddf 7a44 	vldr	s15, [pc, #272]	; 800d900 <__ieee754_asinf+0x1c0>
 800d7f0:	eee7 7a08 	vfma.f32	s15, s14, s16
 800d7f4:	eeb0 0a48 	vmov.f32	s0, s16
 800d7f8:	eee7 8a88 	vfma.f32	s17, s15, s16
 800d7fc:	f000 fbf6 	bl	800dfec <__ieee754_sqrtf>
 800d800:	4b40      	ldr	r3, [pc, #256]	; (800d904 <__ieee754_asinf+0x1c4>)
 800d802:	ee29 9a08 	vmul.f32	s18, s18, s16
 800d806:	429c      	cmp	r4, r3
 800d808:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800d80c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800d810:	dd3d      	ble.n	800d88e <__ieee754_asinf+0x14e>
 800d812:	eea0 0a06 	vfma.f32	s0, s0, s12
 800d816:	eddf 7a3c 	vldr	s15, [pc, #240]	; 800d908 <__ieee754_asinf+0x1c8>
 800d81a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800d81e:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 800d8d4 <__ieee754_asinf+0x194>
 800d822:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d826:	2d00      	cmp	r5, #0
 800d828:	bfd8      	it	le
 800d82a:	eeb1 0a40 	vnegle.f32	s0, s0
 800d82e:	e79b      	b.n	800d768 <__ieee754_asinf+0x28>
 800d830:	ee60 7a00 	vmul.f32	s15, s0, s0
 800d834:	eddf 6a29 	vldr	s13, [pc, #164]	; 800d8dc <__ieee754_asinf+0x19c>
 800d838:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800d8e0 <__ieee754_asinf+0x1a0>
 800d83c:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 800d8f4 <__ieee754_asinf+0x1b4>
 800d840:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800d844:	eddf 6a28 	vldr	s13, [pc, #160]	; 800d8e8 <__ieee754_asinf+0x1a8>
 800d848:	eee7 6a27 	vfma.f32	s13, s14, s15
 800d84c:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800d8ec <__ieee754_asinf+0x1ac>
 800d850:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d854:	eddf 6a26 	vldr	s13, [pc, #152]	; 800d8f0 <__ieee754_asinf+0x1b0>
 800d858:	eee7 6a27 	vfma.f32	s13, s14, s15
 800d85c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800d8e4 <__ieee754_asinf+0x1a4>
 800d860:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d864:	eddf 6a24 	vldr	s13, [pc, #144]	; 800d8f8 <__ieee754_asinf+0x1b8>
 800d868:	eee7 6a86 	vfma.f32	s13, s15, s12
 800d86c:	ed9f 6a23 	vldr	s12, [pc, #140]	; 800d8fc <__ieee754_asinf+0x1bc>
 800d870:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800d874:	eddf 6a22 	vldr	s13, [pc, #136]	; 800d900 <__ieee754_asinf+0x1c0>
 800d878:	eee6 6a27 	vfma.f32	s13, s12, s15
 800d87c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d880:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800d884:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800d888:	eea0 0a27 	vfma.f32	s0, s0, s15
 800d88c:	e76c      	b.n	800d768 <__ieee754_asinf+0x28>
 800d88e:	ee10 3a10 	vmov	r3, s0
 800d892:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800d896:	f023 030f 	bic.w	r3, r3, #15
 800d89a:	ee07 3a90 	vmov	s15, r3
 800d89e:	eef1 6a67 	vneg.f32	s13, s15
 800d8a2:	eea6 8aa7 	vfma.f32	s16, s13, s15
 800d8a6:	ee70 5a00 	vadd.f32	s11, s0, s0
 800d8aa:	ee37 0a80 	vadd.f32	s0, s15, s0
 800d8ae:	eddf 7a08 	vldr	s15, [pc, #32]	; 800d8d0 <__ieee754_asinf+0x190>
 800d8b2:	ee88 5a00 	vdiv.f32	s10, s16, s0
 800d8b6:	ed9f 0a15 	vldr	s0, [pc, #84]	; 800d90c <__ieee754_asinf+0x1cc>
 800d8ba:	eee5 7a47 	vfms.f32	s15, s10, s14
 800d8be:	eed5 7a86 	vfnms.f32	s15, s11, s12
 800d8c2:	eeb0 6a40 	vmov.f32	s12, s0
 800d8c6:	eea6 6a87 	vfma.f32	s12, s13, s14
 800d8ca:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800d8ce:	e7a8      	b.n	800d822 <__ieee754_asinf+0xe2>
 800d8d0:	b33bbd2e 	.word	0xb33bbd2e
 800d8d4:	3fc90fdb 	.word	0x3fc90fdb
 800d8d8:	7149f2ca 	.word	0x7149f2ca
 800d8dc:	3811ef08 	.word	0x3811ef08
 800d8e0:	3a4f7f04 	.word	0x3a4f7f04
 800d8e4:	3e2aaaab 	.word	0x3e2aaaab
 800d8e8:	bd241146 	.word	0xbd241146
 800d8ec:	3e4e0aa8 	.word	0x3e4e0aa8
 800d8f0:	bea6b090 	.word	0xbea6b090
 800d8f4:	3d9dc62e 	.word	0x3d9dc62e
 800d8f8:	bf303361 	.word	0xbf303361
 800d8fc:	4001572d 	.word	0x4001572d
 800d900:	c019d139 	.word	0xc019d139
 800d904:	3f799999 	.word	0x3f799999
 800d908:	333bbd2e 	.word	0x333bbd2e
 800d90c:	3f490fdb 	.word	0x3f490fdb

0800d910 <__ieee754_atan2f>:
 800d910:	ee10 2a90 	vmov	r2, s1
 800d914:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800d918:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800d91c:	b510      	push	{r4, lr}
 800d91e:	eef0 7a40 	vmov.f32	s15, s0
 800d922:	dc06      	bgt.n	800d932 <__ieee754_atan2f+0x22>
 800d924:	ee10 0a10 	vmov	r0, s0
 800d928:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800d92c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800d930:	dd04      	ble.n	800d93c <__ieee754_atan2f+0x2c>
 800d932:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800d936:	eeb0 0a67 	vmov.f32	s0, s15
 800d93a:	bd10      	pop	{r4, pc}
 800d93c:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800d940:	d103      	bne.n	800d94a <__ieee754_atan2f+0x3a>
 800d942:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d946:	f000 bb5f 	b.w	800e008 <atanf>
 800d94a:	1794      	asrs	r4, r2, #30
 800d94c:	f004 0402 	and.w	r4, r4, #2
 800d950:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800d954:	b943      	cbnz	r3, 800d968 <__ieee754_atan2f+0x58>
 800d956:	2c02      	cmp	r4, #2
 800d958:	d06e      	beq.n	800da38 <__ieee754_atan2f+0x128>
 800d95a:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800da40 <__ieee754_atan2f+0x130>
 800d95e:	2c03      	cmp	r4, #3
 800d960:	bf08      	it	eq
 800d962:	eef0 7a47 	vmoveq.f32	s15, s14
 800d966:	e7e6      	b.n	800d936 <__ieee754_atan2f+0x26>
 800d968:	b941      	cbnz	r1, 800d97c <__ieee754_atan2f+0x6c>
 800d96a:	eddf 7a36 	vldr	s15, [pc, #216]	; 800da44 <__ieee754_atan2f+0x134>
 800d96e:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800da48 <__ieee754_atan2f+0x138>
 800d972:	2800      	cmp	r0, #0
 800d974:	bfb8      	it	lt
 800d976:	eef0 7a47 	vmovlt.f32	s15, s14
 800d97a:	e7dc      	b.n	800d936 <__ieee754_atan2f+0x26>
 800d97c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800d980:	d122      	bne.n	800d9c8 <__ieee754_atan2f+0xb8>
 800d982:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800d986:	d112      	bne.n	800d9ae <__ieee754_atan2f+0x9e>
 800d988:	2c02      	cmp	r4, #2
 800d98a:	d00a      	beq.n	800d9a2 <__ieee754_atan2f+0x92>
 800d98c:	2c03      	cmp	r4, #3
 800d98e:	d00b      	beq.n	800d9a8 <__ieee754_atan2f+0x98>
 800d990:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800da4c <__ieee754_atan2f+0x13c>
 800d994:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800da50 <__ieee754_atan2f+0x140>
 800d998:	2c01      	cmp	r4, #1
 800d99a:	bf18      	it	ne
 800d99c:	eef0 7a47 	vmovne.f32	s15, s14
 800d9a0:	e7c9      	b.n	800d936 <__ieee754_atan2f+0x26>
 800d9a2:	eddf 7a2c 	vldr	s15, [pc, #176]	; 800da54 <__ieee754_atan2f+0x144>
 800d9a6:	e7c6      	b.n	800d936 <__ieee754_atan2f+0x26>
 800d9a8:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800da58 <__ieee754_atan2f+0x148>
 800d9ac:	e7c3      	b.n	800d936 <__ieee754_atan2f+0x26>
 800d9ae:	2c02      	cmp	r4, #2
 800d9b0:	d042      	beq.n	800da38 <__ieee754_atan2f+0x128>
 800d9b2:	2c03      	cmp	r4, #3
 800d9b4:	d005      	beq.n	800d9c2 <__ieee754_atan2f+0xb2>
 800d9b6:	2c01      	cmp	r4, #1
 800d9b8:	eddf 7a28 	vldr	s15, [pc, #160]	; 800da5c <__ieee754_atan2f+0x14c>
 800d9bc:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800da60 <__ieee754_atan2f+0x150>
 800d9c0:	e7eb      	b.n	800d99a <__ieee754_atan2f+0x8a>
 800d9c2:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800da40 <__ieee754_atan2f+0x130>
 800d9c6:	e7b6      	b.n	800d936 <__ieee754_atan2f+0x26>
 800d9c8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800d9cc:	d0cd      	beq.n	800d96a <__ieee754_atan2f+0x5a>
 800d9ce:	1a5b      	subs	r3, r3, r1
 800d9d0:	15db      	asrs	r3, r3, #23
 800d9d2:	2b3c      	cmp	r3, #60	; 0x3c
 800d9d4:	dc1a      	bgt.n	800da0c <__ieee754_atan2f+0xfc>
 800d9d6:	2a00      	cmp	r2, #0
 800d9d8:	da01      	bge.n	800d9de <__ieee754_atan2f+0xce>
 800d9da:	333c      	adds	r3, #60	; 0x3c
 800d9dc:	db19      	blt.n	800da12 <__ieee754_atan2f+0x102>
 800d9de:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800d9e2:	f000 fbe5 	bl	800e1b0 <fabsf>
 800d9e6:	f000 fb0f 	bl	800e008 <atanf>
 800d9ea:	eef0 7a40 	vmov.f32	s15, s0
 800d9ee:	2c01      	cmp	r4, #1
 800d9f0:	d012      	beq.n	800da18 <__ieee754_atan2f+0x108>
 800d9f2:	2c02      	cmp	r4, #2
 800d9f4:	d017      	beq.n	800da26 <__ieee754_atan2f+0x116>
 800d9f6:	2c00      	cmp	r4, #0
 800d9f8:	d09d      	beq.n	800d936 <__ieee754_atan2f+0x26>
 800d9fa:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800da64 <__ieee754_atan2f+0x154>
 800d9fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 800da02:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800da68 <__ieee754_atan2f+0x158>
 800da06:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800da0a:	e794      	b.n	800d936 <__ieee754_atan2f+0x26>
 800da0c:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800da44 <__ieee754_atan2f+0x134>
 800da10:	e7ed      	b.n	800d9ee <__ieee754_atan2f+0xde>
 800da12:	eddf 7a13 	vldr	s15, [pc, #76]	; 800da60 <__ieee754_atan2f+0x150>
 800da16:	e7ea      	b.n	800d9ee <__ieee754_atan2f+0xde>
 800da18:	ee17 3a90 	vmov	r3, s15
 800da1c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800da20:	ee07 3a90 	vmov	s15, r3
 800da24:	e787      	b.n	800d936 <__ieee754_atan2f+0x26>
 800da26:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800da64 <__ieee754_atan2f+0x154>
 800da2a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800da2e:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800da68 <__ieee754_atan2f+0x158>
 800da32:	ee77 7a67 	vsub.f32	s15, s14, s15
 800da36:	e77e      	b.n	800d936 <__ieee754_atan2f+0x26>
 800da38:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800da68 <__ieee754_atan2f+0x158>
 800da3c:	e77b      	b.n	800d936 <__ieee754_atan2f+0x26>
 800da3e:	bf00      	nop
 800da40:	c0490fdb 	.word	0xc0490fdb
 800da44:	3fc90fdb 	.word	0x3fc90fdb
 800da48:	bfc90fdb 	.word	0xbfc90fdb
 800da4c:	bf490fdb 	.word	0xbf490fdb
 800da50:	3f490fdb 	.word	0x3f490fdb
 800da54:	4016cbe4 	.word	0x4016cbe4
 800da58:	c016cbe4 	.word	0xc016cbe4
 800da5c:	80000000 	.word	0x80000000
 800da60:	00000000 	.word	0x00000000
 800da64:	33bbbd2e 	.word	0x33bbbd2e
 800da68:	40490fdb 	.word	0x40490fdb

0800da6c <__ieee754_powf>:
 800da6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da70:	ee10 5a90 	vmov	r5, s1
 800da74:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 800da78:	ed2d 8b02 	vpush	{d8}
 800da7c:	eeb0 8a40 	vmov.f32	s16, s0
 800da80:	eef0 8a60 	vmov.f32	s17, s1
 800da84:	f000 8293 	beq.w	800dfae <__ieee754_powf+0x542>
 800da88:	ee10 8a10 	vmov	r8, s0
 800da8c:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 800da90:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800da94:	dc06      	bgt.n	800daa4 <__ieee754_powf+0x38>
 800da96:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800da9a:	dd0a      	ble.n	800dab2 <__ieee754_powf+0x46>
 800da9c:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800daa0:	f000 8285 	beq.w	800dfae <__ieee754_powf+0x542>
 800daa4:	ecbd 8b02 	vpop	{d8}
 800daa8:	48d9      	ldr	r0, [pc, #868]	; (800de10 <__ieee754_powf+0x3a4>)
 800daaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800daae:	f000 bb91 	b.w	800e1d4 <nanf>
 800dab2:	f1b8 0f00 	cmp.w	r8, #0
 800dab6:	da1d      	bge.n	800daf4 <__ieee754_powf+0x88>
 800dab8:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 800dabc:	da2c      	bge.n	800db18 <__ieee754_powf+0xac>
 800dabe:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800dac2:	db30      	blt.n	800db26 <__ieee754_powf+0xba>
 800dac4:	15fb      	asrs	r3, r7, #23
 800dac6:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800daca:	fa47 f603 	asr.w	r6, r7, r3
 800dace:	fa06 f303 	lsl.w	r3, r6, r3
 800dad2:	42bb      	cmp	r3, r7
 800dad4:	d127      	bne.n	800db26 <__ieee754_powf+0xba>
 800dad6:	f006 0601 	and.w	r6, r6, #1
 800dada:	f1c6 0602 	rsb	r6, r6, #2
 800dade:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800dae2:	d122      	bne.n	800db2a <__ieee754_powf+0xbe>
 800dae4:	2d00      	cmp	r5, #0
 800dae6:	f280 8268 	bge.w	800dfba <__ieee754_powf+0x54e>
 800daea:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800daee:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800daf2:	e00d      	b.n	800db10 <__ieee754_powf+0xa4>
 800daf4:	2600      	movs	r6, #0
 800daf6:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800dafa:	d1f0      	bne.n	800dade <__ieee754_powf+0x72>
 800dafc:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800db00:	f000 8255 	beq.w	800dfae <__ieee754_powf+0x542>
 800db04:	dd0a      	ble.n	800db1c <__ieee754_powf+0xb0>
 800db06:	2d00      	cmp	r5, #0
 800db08:	f280 8254 	bge.w	800dfb4 <__ieee754_powf+0x548>
 800db0c:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 800de14 <__ieee754_powf+0x3a8>
 800db10:	ecbd 8b02 	vpop	{d8}
 800db14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db18:	2602      	movs	r6, #2
 800db1a:	e7ec      	b.n	800daf6 <__ieee754_powf+0x8a>
 800db1c:	2d00      	cmp	r5, #0
 800db1e:	daf5      	bge.n	800db0c <__ieee754_powf+0xa0>
 800db20:	eeb1 0a68 	vneg.f32	s0, s17
 800db24:	e7f4      	b.n	800db10 <__ieee754_powf+0xa4>
 800db26:	2600      	movs	r6, #0
 800db28:	e7d9      	b.n	800dade <__ieee754_powf+0x72>
 800db2a:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 800db2e:	d102      	bne.n	800db36 <__ieee754_powf+0xca>
 800db30:	ee28 0a08 	vmul.f32	s0, s16, s16
 800db34:	e7ec      	b.n	800db10 <__ieee754_powf+0xa4>
 800db36:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 800db3a:	eeb0 0a48 	vmov.f32	s0, s16
 800db3e:	d108      	bne.n	800db52 <__ieee754_powf+0xe6>
 800db40:	f1b8 0f00 	cmp.w	r8, #0
 800db44:	db05      	blt.n	800db52 <__ieee754_powf+0xe6>
 800db46:	ecbd 8b02 	vpop	{d8}
 800db4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800db4e:	f000 ba4d 	b.w	800dfec <__ieee754_sqrtf>
 800db52:	f000 fb2d 	bl	800e1b0 <fabsf>
 800db56:	b124      	cbz	r4, 800db62 <__ieee754_powf+0xf6>
 800db58:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 800db5c:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800db60:	d117      	bne.n	800db92 <__ieee754_powf+0x126>
 800db62:	2d00      	cmp	r5, #0
 800db64:	bfbc      	itt	lt
 800db66:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800db6a:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800db6e:	f1b8 0f00 	cmp.w	r8, #0
 800db72:	dacd      	bge.n	800db10 <__ieee754_powf+0xa4>
 800db74:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 800db78:	ea54 0306 	orrs.w	r3, r4, r6
 800db7c:	d104      	bne.n	800db88 <__ieee754_powf+0x11c>
 800db7e:	ee70 7a40 	vsub.f32	s15, s0, s0
 800db82:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800db86:	e7c3      	b.n	800db10 <__ieee754_powf+0xa4>
 800db88:	2e01      	cmp	r6, #1
 800db8a:	d1c1      	bne.n	800db10 <__ieee754_powf+0xa4>
 800db8c:	eeb1 0a40 	vneg.f32	s0, s0
 800db90:	e7be      	b.n	800db10 <__ieee754_powf+0xa4>
 800db92:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 800db96:	3801      	subs	r0, #1
 800db98:	ea56 0300 	orrs.w	r3, r6, r0
 800db9c:	d104      	bne.n	800dba8 <__ieee754_powf+0x13c>
 800db9e:	ee38 8a48 	vsub.f32	s16, s16, s16
 800dba2:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800dba6:	e7b3      	b.n	800db10 <__ieee754_powf+0xa4>
 800dba8:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 800dbac:	dd6d      	ble.n	800dc8a <__ieee754_powf+0x21e>
 800dbae:	4b9a      	ldr	r3, [pc, #616]	; (800de18 <__ieee754_powf+0x3ac>)
 800dbb0:	429c      	cmp	r4, r3
 800dbb2:	dc06      	bgt.n	800dbc2 <__ieee754_powf+0x156>
 800dbb4:	2d00      	cmp	r5, #0
 800dbb6:	daa9      	bge.n	800db0c <__ieee754_powf+0xa0>
 800dbb8:	ed9f 0a98 	vldr	s0, [pc, #608]	; 800de1c <__ieee754_powf+0x3b0>
 800dbbc:	ee20 0a00 	vmul.f32	s0, s0, s0
 800dbc0:	e7a6      	b.n	800db10 <__ieee754_powf+0xa4>
 800dbc2:	4b97      	ldr	r3, [pc, #604]	; (800de20 <__ieee754_powf+0x3b4>)
 800dbc4:	429c      	cmp	r4, r3
 800dbc6:	dd02      	ble.n	800dbce <__ieee754_powf+0x162>
 800dbc8:	2d00      	cmp	r5, #0
 800dbca:	dcf5      	bgt.n	800dbb8 <__ieee754_powf+0x14c>
 800dbcc:	e79e      	b.n	800db0c <__ieee754_powf+0xa0>
 800dbce:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800dbd2:	ee30 0a67 	vsub.f32	s0, s0, s15
 800dbd6:	ed9f 7a93 	vldr	s14, [pc, #588]	; 800de24 <__ieee754_powf+0x3b8>
 800dbda:	eef1 6a40 	vneg.f32	s13, s0
 800dbde:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800dbe2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800dbe6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800dbea:	eee7 7a40 	vfms.f32	s15, s14, s0
 800dbee:	ee60 0a00 	vmul.f32	s1, s0, s0
 800dbf2:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 800de28 <__ieee754_powf+0x3bc>
 800dbf6:	ee67 0aa0 	vmul.f32	s1, s15, s1
 800dbfa:	eddf 7a8c 	vldr	s15, [pc, #560]	; 800de2c <__ieee754_powf+0x3c0>
 800dbfe:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 800dc02:	eee0 7a07 	vfma.f32	s15, s0, s14
 800dc06:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800de30 <__ieee754_powf+0x3c4>
 800dc0a:	eeb0 6a67 	vmov.f32	s12, s15
 800dc0e:	eea0 6a07 	vfma.f32	s12, s0, s14
 800dc12:	ee16 3a10 	vmov	r3, s12
 800dc16:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800dc1a:	f023 030f 	bic.w	r3, r3, #15
 800dc1e:	ee00 3a90 	vmov	s1, r3
 800dc22:	eee6 0a87 	vfma.f32	s1, s13, s14
 800dc26:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800dc2a:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 800dc2e:	f025 050f 	bic.w	r5, r5, #15
 800dc32:	ee07 5a10 	vmov	s14, r5
 800dc36:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800dc3a:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800dc3e:	ee07 3a90 	vmov	s15, r3
 800dc42:	eee7 0a27 	vfma.f32	s1, s14, s15
 800dc46:	3e01      	subs	r6, #1
 800dc48:	ea56 0200 	orrs.w	r2, r6, r0
 800dc4c:	ee07 5a10 	vmov	s14, r5
 800dc50:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dc54:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800dc58:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800dc5c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800dc60:	ee17 4a10 	vmov	r4, s14
 800dc64:	bf08      	it	eq
 800dc66:	eeb0 8a40 	vmoveq.f32	s16, s0
 800dc6a:	2c00      	cmp	r4, #0
 800dc6c:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800dc70:	f340 8184 	ble.w	800df7c <__ieee754_powf+0x510>
 800dc74:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800dc78:	f340 80fc 	ble.w	800de74 <__ieee754_powf+0x408>
 800dc7c:	eddf 7a67 	vldr	s15, [pc, #412]	; 800de1c <__ieee754_powf+0x3b0>
 800dc80:	ee28 0a27 	vmul.f32	s0, s16, s15
 800dc84:	ee20 0a27 	vmul.f32	s0, s0, s15
 800dc88:	e742      	b.n	800db10 <__ieee754_powf+0xa4>
 800dc8a:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 800dc8e:	bfbf      	itttt	lt
 800dc90:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 800de34 <__ieee754_powf+0x3c8>
 800dc94:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800dc98:	f06f 0217 	mvnlt.w	r2, #23
 800dc9c:	ee17 4a90 	vmovlt	r4, s15
 800dca0:	ea4f 53e4 	mov.w	r3, r4, asr #23
 800dca4:	bfa8      	it	ge
 800dca6:	2200      	movge	r2, #0
 800dca8:	3b7f      	subs	r3, #127	; 0x7f
 800dcaa:	4413      	add	r3, r2
 800dcac:	4a62      	ldr	r2, [pc, #392]	; (800de38 <__ieee754_powf+0x3cc>)
 800dcae:	f3c4 0416 	ubfx	r4, r4, #0, #23
 800dcb2:	4294      	cmp	r4, r2
 800dcb4:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 800dcb8:	dd06      	ble.n	800dcc8 <__ieee754_powf+0x25c>
 800dcba:	4a60      	ldr	r2, [pc, #384]	; (800de3c <__ieee754_powf+0x3d0>)
 800dcbc:	4294      	cmp	r4, r2
 800dcbe:	f340 80a5 	ble.w	800de0c <__ieee754_powf+0x3a0>
 800dcc2:	3301      	adds	r3, #1
 800dcc4:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800dcc8:	2400      	movs	r4, #0
 800dcca:	4a5d      	ldr	r2, [pc, #372]	; (800de40 <__ieee754_powf+0x3d4>)
 800dccc:	00a7      	lsls	r7, r4, #2
 800dcce:	443a      	add	r2, r7
 800dcd0:	ee07 1a90 	vmov	s15, r1
 800dcd4:	ed92 7a00 	vldr	s14, [r2]
 800dcd8:	4a5a      	ldr	r2, [pc, #360]	; (800de44 <__ieee754_powf+0x3d8>)
 800dcda:	ee37 6a27 	vadd.f32	s12, s14, s15
 800dcde:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800dce2:	eec5 6a06 	vdiv.f32	s13, s10, s12
 800dce6:	1049      	asrs	r1, r1, #1
 800dce8:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800dcec:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800dcf0:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 800dcf4:	ee77 5ac7 	vsub.f32	s11, s15, s14
 800dcf8:	ee06 1a10 	vmov	s12, r1
 800dcfc:	ee65 4aa6 	vmul.f32	s9, s11, s13
 800dd00:	ee14 ca90 	vmov	ip, s9
 800dd04:	ea02 0c0c 	and.w	ip, r2, ip
 800dd08:	ee05 ca10 	vmov	s10, ip
 800dd0c:	eeb1 4a45 	vneg.f32	s8, s10
 800dd10:	eee4 5a06 	vfma.f32	s11, s8, s12
 800dd14:	ee36 6a47 	vsub.f32	s12, s12, s14
 800dd18:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800de48 <__ieee754_powf+0x3dc>
 800dd1c:	ee37 6ac6 	vsub.f32	s12, s15, s12
 800dd20:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800dd24:	eee4 5a06 	vfma.f32	s11, s8, s12
 800dd28:	ee67 3aa7 	vmul.f32	s7, s15, s15
 800dd2c:	ee25 6aa6 	vmul.f32	s12, s11, s13
 800dd30:	eddf 5a46 	vldr	s11, [pc, #280]	; 800de4c <__ieee754_powf+0x3e0>
 800dd34:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800dd38:	eddf 5a45 	vldr	s11, [pc, #276]	; 800de50 <__ieee754_powf+0x3e4>
 800dd3c:	eee7 5a27 	vfma.f32	s11, s14, s15
 800dd40:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800de24 <__ieee754_powf+0x3b8>
 800dd44:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800dd48:	eddf 5a42 	vldr	s11, [pc, #264]	; 800de54 <__ieee754_powf+0x3e8>
 800dd4c:	eee7 5a27 	vfma.f32	s11, s14, s15
 800dd50:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800de58 <__ieee754_powf+0x3ec>
 800dd54:	ee75 6a24 	vadd.f32	s13, s10, s9
 800dd58:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800dd5c:	ee66 6a86 	vmul.f32	s13, s13, s12
 800dd60:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 800dd64:	eef0 7a65 	vmov.f32	s15, s11
 800dd68:	eee3 6a87 	vfma.f32	s13, s7, s14
 800dd6c:	eee5 7a05 	vfma.f32	s15, s10, s10
 800dd70:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dd74:	ee17 1a90 	vmov	r1, s15
 800dd78:	4011      	ands	r1, r2
 800dd7a:	ee07 1a90 	vmov	s15, r1
 800dd7e:	ee37 7ae5 	vsub.f32	s14, s15, s11
 800dd82:	eddf 5a36 	vldr	s11, [pc, #216]	; 800de5c <__ieee754_powf+0x3f0>
 800dd86:	eea4 7a05 	vfma.f32	s14, s8, s10
 800dd8a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800dd8e:	ee27 7a24 	vmul.f32	s14, s14, s9
 800dd92:	eea7 7a86 	vfma.f32	s14, s15, s12
 800dd96:	eeb0 6a47 	vmov.f32	s12, s14
 800dd9a:	eea5 6a27 	vfma.f32	s12, s10, s15
 800dd9e:	ee16 1a10 	vmov	r1, s12
 800dda2:	4011      	ands	r1, r2
 800dda4:	ee06 1a90 	vmov	s13, r1
 800dda8:	eee4 6a27 	vfma.f32	s13, s8, s15
 800ddac:	eddf 7a2c 	vldr	s15, [pc, #176]	; 800de60 <__ieee754_powf+0x3f4>
 800ddb0:	ee37 7a66 	vsub.f32	s14, s14, s13
 800ddb4:	ee06 1a10 	vmov	s12, r1
 800ddb8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ddbc:	eddf 7a29 	vldr	s15, [pc, #164]	; 800de64 <__ieee754_powf+0x3f8>
 800ddc0:	4929      	ldr	r1, [pc, #164]	; (800de68 <__ieee754_powf+0x3fc>)
 800ddc2:	eea6 7a27 	vfma.f32	s14, s12, s15
 800ddc6:	4439      	add	r1, r7
 800ddc8:	edd1 7a00 	vldr	s15, [r1]
 800ddcc:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ddd0:	ee07 3a90 	vmov	s15, r3
 800ddd4:	eef0 0a47 	vmov.f32	s1, s14
 800ddd8:	4b24      	ldr	r3, [pc, #144]	; (800de6c <__ieee754_powf+0x400>)
 800ddda:	eee6 0a25 	vfma.f32	s1, s12, s11
 800ddde:	443b      	add	r3, r7
 800dde0:	ed93 5a00 	vldr	s10, [r3]
 800dde4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800dde8:	ee70 0a85 	vadd.f32	s1, s1, s10
 800ddec:	ee70 7aa6 	vadd.f32	s15, s1, s13
 800ddf0:	ee17 3a90 	vmov	r3, s15
 800ddf4:	4013      	ands	r3, r2
 800ddf6:	ee07 3a90 	vmov	s15, r3
 800ddfa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ddfe:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800de02:	eee6 7a65 	vfms.f32	s15, s12, s11
 800de06:	ee77 7a67 	vsub.f32	s15, s14, s15
 800de0a:	e70e      	b.n	800dc2a <__ieee754_powf+0x1be>
 800de0c:	2401      	movs	r4, #1
 800de0e:	e75c      	b.n	800dcca <__ieee754_powf+0x25e>
 800de10:	0800e871 	.word	0x0800e871
 800de14:	00000000 	.word	0x00000000
 800de18:	3f7ffff7 	.word	0x3f7ffff7
 800de1c:	7149f2ca 	.word	0x7149f2ca
 800de20:	3f800007 	.word	0x3f800007
 800de24:	3eaaaaab 	.word	0x3eaaaaab
 800de28:	36eca570 	.word	0x36eca570
 800de2c:	3fb8aa3b 	.word	0x3fb8aa3b
 800de30:	3fb8aa00 	.word	0x3fb8aa00
 800de34:	4b800000 	.word	0x4b800000
 800de38:	001cc471 	.word	0x001cc471
 800de3c:	005db3d6 	.word	0x005db3d6
 800de40:	0800e994 	.word	0x0800e994
 800de44:	fffff000 	.word	0xfffff000
 800de48:	3e6c3255 	.word	0x3e6c3255
 800de4c:	3e53f142 	.word	0x3e53f142
 800de50:	3e8ba305 	.word	0x3e8ba305
 800de54:	3edb6db7 	.word	0x3edb6db7
 800de58:	3f19999a 	.word	0x3f19999a
 800de5c:	3f763800 	.word	0x3f763800
 800de60:	3f76384f 	.word	0x3f76384f
 800de64:	369dc3a0 	.word	0x369dc3a0
 800de68:	0800e9a4 	.word	0x0800e9a4
 800de6c:	0800e99c 	.word	0x0800e99c
 800de70:	3338aa3c 	.word	0x3338aa3c
 800de74:	f040 8092 	bne.w	800df9c <__ieee754_powf+0x530>
 800de78:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800de70 <__ieee754_powf+0x404>
 800de7c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800de80:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800de84:	eef4 6ac7 	vcmpe.f32	s13, s14
 800de88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de8c:	f73f aef6 	bgt.w	800dc7c <__ieee754_powf+0x210>
 800de90:	15db      	asrs	r3, r3, #23
 800de92:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800de96:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800de9a:	4103      	asrs	r3, r0
 800de9c:	4423      	add	r3, r4
 800de9e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800dea2:	4947      	ldr	r1, [pc, #284]	; (800dfc0 <__ieee754_powf+0x554>)
 800dea4:	3a7f      	subs	r2, #127	; 0x7f
 800dea6:	4111      	asrs	r1, r2
 800dea8:	ea23 0101 	bic.w	r1, r3, r1
 800deac:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800deb0:	ee07 1a10 	vmov	s14, r1
 800deb4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800deb8:	f1c2 0217 	rsb	r2, r2, #23
 800debc:	4110      	asrs	r0, r2
 800debe:	2c00      	cmp	r4, #0
 800dec0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dec4:	bfb8      	it	lt
 800dec6:	4240      	neglt	r0, r0
 800dec8:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800decc:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800dfc4 <__ieee754_powf+0x558>
 800ded0:	ee17 3a10 	vmov	r3, s14
 800ded4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800ded8:	f023 030f 	bic.w	r3, r3, #15
 800dedc:	ee07 3a10 	vmov	s14, r3
 800dee0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dee4:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800dee8:	eddf 7a37 	vldr	s15, [pc, #220]	; 800dfc8 <__ieee754_powf+0x55c>
 800deec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800def0:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800def4:	eddf 6a35 	vldr	s13, [pc, #212]	; 800dfcc <__ieee754_powf+0x560>
 800def8:	eeb0 0a67 	vmov.f32	s0, s15
 800defc:	eea7 0a26 	vfma.f32	s0, s14, s13
 800df00:	eeb0 6a40 	vmov.f32	s12, s0
 800df04:	eea7 6a66 	vfms.f32	s12, s14, s13
 800df08:	ee20 7a00 	vmul.f32	s14, s0, s0
 800df0c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800df10:	eddf 6a2f 	vldr	s13, [pc, #188]	; 800dfd0 <__ieee754_powf+0x564>
 800df14:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800dfd4 <__ieee754_powf+0x568>
 800df18:	eea7 6a26 	vfma.f32	s12, s14, s13
 800df1c:	eddf 6a2e 	vldr	s13, [pc, #184]	; 800dfd8 <__ieee754_powf+0x56c>
 800df20:	eee6 6a07 	vfma.f32	s13, s12, s14
 800df24:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 800dfdc <__ieee754_powf+0x570>
 800df28:	eea6 6a87 	vfma.f32	s12, s13, s14
 800df2c:	eddf 6a2c 	vldr	s13, [pc, #176]	; 800dfe0 <__ieee754_powf+0x574>
 800df30:	eee6 6a07 	vfma.f32	s13, s12, s14
 800df34:	eeb0 6a40 	vmov.f32	s12, s0
 800df38:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800df3c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800df40:	eeb0 7a46 	vmov.f32	s14, s12
 800df44:	ee77 6a66 	vsub.f32	s13, s14, s13
 800df48:	ee20 6a06 	vmul.f32	s12, s0, s12
 800df4c:	eee0 7a27 	vfma.f32	s15, s0, s15
 800df50:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800df54:	ee77 7a67 	vsub.f32	s15, s14, s15
 800df58:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800df5c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800df60:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800df64:	ee10 3a10 	vmov	r3, s0
 800df68:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800df6c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800df70:	da1a      	bge.n	800dfa8 <__ieee754_powf+0x53c>
 800df72:	f000 f98f 	bl	800e294 <scalbnf>
 800df76:	ee20 0a08 	vmul.f32	s0, s0, s16
 800df7a:	e5c9      	b.n	800db10 <__ieee754_powf+0xa4>
 800df7c:	4a19      	ldr	r2, [pc, #100]	; (800dfe4 <__ieee754_powf+0x578>)
 800df7e:	4293      	cmp	r3, r2
 800df80:	dd02      	ble.n	800df88 <__ieee754_powf+0x51c>
 800df82:	eddf 7a19 	vldr	s15, [pc, #100]	; 800dfe8 <__ieee754_powf+0x57c>
 800df86:	e67b      	b.n	800dc80 <__ieee754_powf+0x214>
 800df88:	d108      	bne.n	800df9c <__ieee754_powf+0x530>
 800df8a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800df8e:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800df92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df96:	f6ff af7b 	blt.w	800de90 <__ieee754_powf+0x424>
 800df9a:	e7f2      	b.n	800df82 <__ieee754_powf+0x516>
 800df9c:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800dfa0:	f73f af76 	bgt.w	800de90 <__ieee754_powf+0x424>
 800dfa4:	2000      	movs	r0, #0
 800dfa6:	e78f      	b.n	800dec8 <__ieee754_powf+0x45c>
 800dfa8:	ee00 3a10 	vmov	s0, r3
 800dfac:	e7e3      	b.n	800df76 <__ieee754_powf+0x50a>
 800dfae:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800dfb2:	e5ad      	b.n	800db10 <__ieee754_powf+0xa4>
 800dfb4:	eeb0 0a68 	vmov.f32	s0, s17
 800dfb8:	e5aa      	b.n	800db10 <__ieee754_powf+0xa4>
 800dfba:	eeb0 0a48 	vmov.f32	s0, s16
 800dfbe:	e5a7      	b.n	800db10 <__ieee754_powf+0xa4>
 800dfc0:	007fffff 	.word	0x007fffff
 800dfc4:	3f317218 	.word	0x3f317218
 800dfc8:	35bfbe8c 	.word	0x35bfbe8c
 800dfcc:	3f317200 	.word	0x3f317200
 800dfd0:	3331bb4c 	.word	0x3331bb4c
 800dfd4:	b5ddea0e 	.word	0xb5ddea0e
 800dfd8:	388ab355 	.word	0x388ab355
 800dfdc:	bb360b61 	.word	0xbb360b61
 800dfe0:	3e2aaaab 	.word	0x3e2aaaab
 800dfe4:	43160000 	.word	0x43160000
 800dfe8:	0da24260 	.word	0x0da24260

0800dfec <__ieee754_sqrtf>:
 800dfec:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800dff0:	4770      	bx	lr

0800dff2 <matherr>:
 800dff2:	2000      	movs	r0, #0
 800dff4:	4770      	bx	lr
	...

0800dff8 <nan>:
 800dff8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e000 <nan+0x8>
 800dffc:	4770      	bx	lr
 800dffe:	bf00      	nop
 800e000:	00000000 	.word	0x00000000
 800e004:	7ff80000 	.word	0x7ff80000

0800e008 <atanf>:
 800e008:	b538      	push	{r3, r4, r5, lr}
 800e00a:	ee10 5a10 	vmov	r5, s0
 800e00e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800e012:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800e016:	eef0 7a40 	vmov.f32	s15, s0
 800e01a:	db10      	blt.n	800e03e <atanf+0x36>
 800e01c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800e020:	dd04      	ble.n	800e02c <atanf+0x24>
 800e022:	ee70 7a00 	vadd.f32	s15, s0, s0
 800e026:	eeb0 0a67 	vmov.f32	s0, s15
 800e02a:	bd38      	pop	{r3, r4, r5, pc}
 800e02c:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800e164 <atanf+0x15c>
 800e030:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800e168 <atanf+0x160>
 800e034:	2d00      	cmp	r5, #0
 800e036:	bfd8      	it	le
 800e038:	eef0 7a47 	vmovle.f32	s15, s14
 800e03c:	e7f3      	b.n	800e026 <atanf+0x1e>
 800e03e:	4b4b      	ldr	r3, [pc, #300]	; (800e16c <atanf+0x164>)
 800e040:	429c      	cmp	r4, r3
 800e042:	dc10      	bgt.n	800e066 <atanf+0x5e>
 800e044:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800e048:	da0a      	bge.n	800e060 <atanf+0x58>
 800e04a:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800e170 <atanf+0x168>
 800e04e:	ee30 7a07 	vadd.f32	s14, s0, s14
 800e052:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e056:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800e05a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e05e:	dce2      	bgt.n	800e026 <atanf+0x1e>
 800e060:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e064:	e013      	b.n	800e08e <atanf+0x86>
 800e066:	f000 f8a3 	bl	800e1b0 <fabsf>
 800e06a:	4b42      	ldr	r3, [pc, #264]	; (800e174 <atanf+0x16c>)
 800e06c:	429c      	cmp	r4, r3
 800e06e:	dc4f      	bgt.n	800e110 <atanf+0x108>
 800e070:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800e074:	429c      	cmp	r4, r3
 800e076:	dc41      	bgt.n	800e0fc <atanf+0xf4>
 800e078:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800e07c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800e080:	eea0 7a27 	vfma.f32	s14, s0, s15
 800e084:	2300      	movs	r3, #0
 800e086:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e08a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800e08e:	1c5a      	adds	r2, r3, #1
 800e090:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800e094:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800e178 <atanf+0x170>
 800e098:	eddf 5a38 	vldr	s11, [pc, #224]	; 800e17c <atanf+0x174>
 800e09c:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800e180 <atanf+0x178>
 800e0a0:	ee66 6a06 	vmul.f32	s13, s12, s12
 800e0a4:	eee6 5a87 	vfma.f32	s11, s13, s14
 800e0a8:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800e184 <atanf+0x17c>
 800e0ac:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800e0b0:	eddf 5a35 	vldr	s11, [pc, #212]	; 800e188 <atanf+0x180>
 800e0b4:	eee7 5a26 	vfma.f32	s11, s14, s13
 800e0b8:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800e18c <atanf+0x184>
 800e0bc:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800e0c0:	eddf 5a33 	vldr	s11, [pc, #204]	; 800e190 <atanf+0x188>
 800e0c4:	eee7 5a26 	vfma.f32	s11, s14, s13
 800e0c8:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800e194 <atanf+0x18c>
 800e0cc:	eea6 5a87 	vfma.f32	s10, s13, s14
 800e0d0:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800e198 <atanf+0x190>
 800e0d4:	eea5 7a26 	vfma.f32	s14, s10, s13
 800e0d8:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800e19c <atanf+0x194>
 800e0dc:	eea7 5a26 	vfma.f32	s10, s14, s13
 800e0e0:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800e1a0 <atanf+0x198>
 800e0e4:	eea5 7a26 	vfma.f32	s14, s10, s13
 800e0e8:	ee27 7a26 	vmul.f32	s14, s14, s13
 800e0ec:	eea5 7a86 	vfma.f32	s14, s11, s12
 800e0f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e0f4:	d121      	bne.n	800e13a <atanf+0x132>
 800e0f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e0fa:	e794      	b.n	800e026 <atanf+0x1e>
 800e0fc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e100:	ee30 7a67 	vsub.f32	s14, s0, s15
 800e104:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e108:	2301      	movs	r3, #1
 800e10a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800e10e:	e7be      	b.n	800e08e <atanf+0x86>
 800e110:	4b24      	ldr	r3, [pc, #144]	; (800e1a4 <atanf+0x19c>)
 800e112:	429c      	cmp	r4, r3
 800e114:	dc0b      	bgt.n	800e12e <atanf+0x126>
 800e116:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800e11a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e11e:	eea0 7a27 	vfma.f32	s14, s0, s15
 800e122:	2302      	movs	r3, #2
 800e124:	ee70 6a67 	vsub.f32	s13, s0, s15
 800e128:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e12c:	e7af      	b.n	800e08e <atanf+0x86>
 800e12e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800e132:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800e136:	2303      	movs	r3, #3
 800e138:	e7a9      	b.n	800e08e <atanf+0x86>
 800e13a:	4a1b      	ldr	r2, [pc, #108]	; (800e1a8 <atanf+0x1a0>)
 800e13c:	491b      	ldr	r1, [pc, #108]	; (800e1ac <atanf+0x1a4>)
 800e13e:	009b      	lsls	r3, r3, #2
 800e140:	441a      	add	r2, r3
 800e142:	440b      	add	r3, r1
 800e144:	edd3 6a00 	vldr	s13, [r3]
 800e148:	ee37 7a66 	vsub.f32	s14, s14, s13
 800e14c:	2d00      	cmp	r5, #0
 800e14e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e152:	ed92 7a00 	vldr	s14, [r2]
 800e156:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e15a:	bfb8      	it	lt
 800e15c:	eef1 7a67 	vneglt.f32	s15, s15
 800e160:	e761      	b.n	800e026 <atanf+0x1e>
 800e162:	bf00      	nop
 800e164:	bfc90fdb 	.word	0xbfc90fdb
 800e168:	3fc90fdb 	.word	0x3fc90fdb
 800e16c:	3edfffff 	.word	0x3edfffff
 800e170:	7149f2ca 	.word	0x7149f2ca
 800e174:	3f97ffff 	.word	0x3f97ffff
 800e178:	3c8569d7 	.word	0x3c8569d7
 800e17c:	3d4bda59 	.word	0x3d4bda59
 800e180:	bd6ef16b 	.word	0xbd6ef16b
 800e184:	3d886b35 	.word	0x3d886b35
 800e188:	3dba2e6e 	.word	0x3dba2e6e
 800e18c:	3e124925 	.word	0x3e124925
 800e190:	3eaaaaab 	.word	0x3eaaaaab
 800e194:	bd15a221 	.word	0xbd15a221
 800e198:	bd9d8795 	.word	0xbd9d8795
 800e19c:	bde38e38 	.word	0xbde38e38
 800e1a0:	be4ccccd 	.word	0xbe4ccccd
 800e1a4:	401bffff 	.word	0x401bffff
 800e1a8:	0800e9ac 	.word	0x0800e9ac
 800e1ac:	0800e9bc 	.word	0x0800e9bc

0800e1b0 <fabsf>:
 800e1b0:	ee10 3a10 	vmov	r3, s0
 800e1b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e1b8:	ee00 3a10 	vmov	s0, r3
 800e1bc:	4770      	bx	lr

0800e1be <finitef>:
 800e1be:	ee10 3a10 	vmov	r3, s0
 800e1c2:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 800e1c6:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800e1ca:	bfac      	ite	ge
 800e1cc:	2000      	movge	r0, #0
 800e1ce:	2001      	movlt	r0, #1
 800e1d0:	4770      	bx	lr
	...

0800e1d4 <nanf>:
 800e1d4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e1dc <nanf+0x8>
 800e1d8:	4770      	bx	lr
 800e1da:	bf00      	nop
 800e1dc:	7fc00000 	.word	0x7fc00000

0800e1e0 <rintf>:
 800e1e0:	b513      	push	{r0, r1, r4, lr}
 800e1e2:	ee10 1a10 	vmov	r1, s0
 800e1e6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e1ea:	0ddc      	lsrs	r4, r3, #23
 800e1ec:	3c7f      	subs	r4, #127	; 0x7f
 800e1ee:	2c16      	cmp	r4, #22
 800e1f0:	dc46      	bgt.n	800e280 <rintf+0xa0>
 800e1f2:	b32b      	cbz	r3, 800e240 <rintf+0x60>
 800e1f4:	2c00      	cmp	r4, #0
 800e1f6:	ee10 2a10 	vmov	r2, s0
 800e1fa:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 800e1fe:	da21      	bge.n	800e244 <rintf+0x64>
 800e200:	f3c1 0316 	ubfx	r3, r1, #0, #23
 800e204:	425b      	negs	r3, r3
 800e206:	4a21      	ldr	r2, [pc, #132]	; (800e28c <rintf+0xac>)
 800e208:	0a5b      	lsrs	r3, r3, #9
 800e20a:	0d09      	lsrs	r1, r1, #20
 800e20c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e210:	0509      	lsls	r1, r1, #20
 800e212:	430b      	orrs	r3, r1
 800e214:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800e218:	ee07 3a90 	vmov	s15, r3
 800e21c:	edd2 6a00 	vldr	s13, [r2]
 800e220:	ee36 7aa7 	vadd.f32	s14, s13, s15
 800e224:	ed8d 7a01 	vstr	s14, [sp, #4]
 800e228:	eddd 7a01 	vldr	s15, [sp, #4]
 800e22c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e230:	ee17 3a90 	vmov	r3, s15
 800e234:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e238:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 800e23c:	ee00 3a10 	vmov	s0, r3
 800e240:	b002      	add	sp, #8
 800e242:	bd10      	pop	{r4, pc}
 800e244:	4b12      	ldr	r3, [pc, #72]	; (800e290 <rintf+0xb0>)
 800e246:	4123      	asrs	r3, r4
 800e248:	4219      	tst	r1, r3
 800e24a:	d0f9      	beq.n	800e240 <rintf+0x60>
 800e24c:	085b      	lsrs	r3, r3, #1
 800e24e:	4219      	tst	r1, r3
 800e250:	d006      	beq.n	800e260 <rintf+0x80>
 800e252:	ea21 0203 	bic.w	r2, r1, r3
 800e256:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800e25a:	fa43 f404 	asr.w	r4, r3, r4
 800e25e:	4322      	orrs	r2, r4
 800e260:	4b0a      	ldr	r3, [pc, #40]	; (800e28c <rintf+0xac>)
 800e262:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e266:	ed90 7a00 	vldr	s14, [r0]
 800e26a:	ee07 2a90 	vmov	s15, r2
 800e26e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e272:	edcd 7a01 	vstr	s15, [sp, #4]
 800e276:	ed9d 0a01 	vldr	s0, [sp, #4]
 800e27a:	ee30 0a47 	vsub.f32	s0, s0, s14
 800e27e:	e7df      	b.n	800e240 <rintf+0x60>
 800e280:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800e284:	d3dc      	bcc.n	800e240 <rintf+0x60>
 800e286:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e28a:	e7d9      	b.n	800e240 <rintf+0x60>
 800e28c:	0800e9cc 	.word	0x0800e9cc
 800e290:	007fffff 	.word	0x007fffff

0800e294 <scalbnf>:
 800e294:	b508      	push	{r3, lr}
 800e296:	ee10 2a10 	vmov	r2, s0
 800e29a:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800e29e:	ed2d 8b02 	vpush	{d8}
 800e2a2:	eef0 0a40 	vmov.f32	s1, s0
 800e2a6:	d004      	beq.n	800e2b2 <scalbnf+0x1e>
 800e2a8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800e2ac:	d306      	bcc.n	800e2bc <scalbnf+0x28>
 800e2ae:	ee70 0a00 	vadd.f32	s1, s0, s0
 800e2b2:	ecbd 8b02 	vpop	{d8}
 800e2b6:	eeb0 0a60 	vmov.f32	s0, s1
 800e2ba:	bd08      	pop	{r3, pc}
 800e2bc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e2c0:	d21c      	bcs.n	800e2fc <scalbnf+0x68>
 800e2c2:	4b1f      	ldr	r3, [pc, #124]	; (800e340 <scalbnf+0xac>)
 800e2c4:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800e344 <scalbnf+0xb0>
 800e2c8:	4298      	cmp	r0, r3
 800e2ca:	ee60 0a27 	vmul.f32	s1, s0, s15
 800e2ce:	db10      	blt.n	800e2f2 <scalbnf+0x5e>
 800e2d0:	ee10 2a90 	vmov	r2, s1
 800e2d4:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 800e2d8:	3b19      	subs	r3, #25
 800e2da:	4403      	add	r3, r0
 800e2dc:	2bfe      	cmp	r3, #254	; 0xfe
 800e2de:	dd0f      	ble.n	800e300 <scalbnf+0x6c>
 800e2e0:	ed9f 8a19 	vldr	s16, [pc, #100]	; 800e348 <scalbnf+0xb4>
 800e2e4:	eeb0 0a48 	vmov.f32	s0, s16
 800e2e8:	f000 f834 	bl	800e354 <copysignf>
 800e2ec:	ee60 0a08 	vmul.f32	s1, s0, s16
 800e2f0:	e7df      	b.n	800e2b2 <scalbnf+0x1e>
 800e2f2:	eddf 7a16 	vldr	s15, [pc, #88]	; 800e34c <scalbnf+0xb8>
 800e2f6:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800e2fa:	e7da      	b.n	800e2b2 <scalbnf+0x1e>
 800e2fc:	0ddb      	lsrs	r3, r3, #23
 800e2fe:	e7ec      	b.n	800e2da <scalbnf+0x46>
 800e300:	2b00      	cmp	r3, #0
 800e302:	dd06      	ble.n	800e312 <scalbnf+0x7e>
 800e304:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800e308:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800e30c:	ee00 3a90 	vmov	s1, r3
 800e310:	e7cf      	b.n	800e2b2 <scalbnf+0x1e>
 800e312:	f113 0f16 	cmn.w	r3, #22
 800e316:	da06      	bge.n	800e326 <scalbnf+0x92>
 800e318:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e31c:	4298      	cmp	r0, r3
 800e31e:	dcdf      	bgt.n	800e2e0 <scalbnf+0x4c>
 800e320:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 800e34c <scalbnf+0xb8>
 800e324:	e7de      	b.n	800e2e4 <scalbnf+0x50>
 800e326:	3319      	adds	r3, #25
 800e328:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800e32c:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800e330:	eddf 7a07 	vldr	s15, [pc, #28]	; 800e350 <scalbnf+0xbc>
 800e334:	ee07 3a10 	vmov	s14, r3
 800e338:	ee67 0a27 	vmul.f32	s1, s14, s15
 800e33c:	e7b9      	b.n	800e2b2 <scalbnf+0x1e>
 800e33e:	bf00      	nop
 800e340:	ffff3cb0 	.word	0xffff3cb0
 800e344:	4c000000 	.word	0x4c000000
 800e348:	7149f2ca 	.word	0x7149f2ca
 800e34c:	0da24260 	.word	0x0da24260
 800e350:	33000000 	.word	0x33000000

0800e354 <copysignf>:
 800e354:	ee10 3a10 	vmov	r3, s0
 800e358:	ee10 2a90 	vmov	r2, s1
 800e35c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e360:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800e364:	4313      	orrs	r3, r2
 800e366:	ee00 3a10 	vmov	s0, r3
 800e36a:	4770      	bx	lr

0800e36c <_init>:
 800e36c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e36e:	bf00      	nop
 800e370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e372:	bc08      	pop	{r3}
 800e374:	469e      	mov	lr, r3
 800e376:	4770      	bx	lr

0800e378 <_fini>:
 800e378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e37a:	bf00      	nop
 800e37c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e37e:	bc08      	pop	{r3}
 800e380:	469e      	mov	lr, r3
 800e382:	4770      	bx	lr
