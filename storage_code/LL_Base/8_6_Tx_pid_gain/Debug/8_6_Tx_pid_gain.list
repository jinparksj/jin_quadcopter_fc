
8_6_Tx_pid_gain.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d324  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000064c  0800d4b8  0800d4b8  0001d4b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800db04  0800db04  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800db04  0800db04  0001db04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800db0c  0800db0c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800db0c  0800db0c  0001db0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800db10  0800db10  0001db10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800db14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000378  200001e8  0800dcf8  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000560  0800dcf8  00020560  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a8bd  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000043ff  00000000  00000000  0003aad1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001700  00000000  00000000  0003eed0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001520  00000000  00000000  000405d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026c00  00000000  00000000  00041af0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015063  00000000  00000000  000686f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d351b  00000000  00000000  0007d753  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00150c6e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f24  00000000  00000000  00150cec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d49c 	.word	0x0800d49c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800d49c 	.word	0x0800d49c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c5c:	f000 b972 	b.w	8000f44 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	4688      	mov	r8, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14b      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4615      	mov	r5, r2
 8000c8a:	d967      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0720 	rsb	r7, r2, #32
 8000c96:	fa01 f302 	lsl.w	r3, r1, r2
 8000c9a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c9e:	4095      	lsls	r5, r2
 8000ca0:	ea47 0803 	orr.w	r8, r7, r3
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cb0:	fa1f fc85 	uxth.w	ip, r5
 8000cb4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cb8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18eb      	adds	r3, r5, r3
 8000cc6:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000cca:	f080 811b 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8118 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000cd4:	3f02      	subs	r7, #2
 8000cd6:	442b      	add	r3, r5
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cec:	45a4      	cmp	ip, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	192c      	adds	r4, r5, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cf6:	f080 8107 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cfa:	45a4      	cmp	ip, r4
 8000cfc:	f240 8104 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000d00:	3802      	subs	r0, #2
 8000d02:	442c      	add	r4, r5
 8000d04:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d08:	eba4 040c 	sub.w	r4, r4, ip
 8000d0c:	2700      	movs	r7, #0
 8000d0e:	b11e      	cbz	r6, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c6 4300 	strd	r4, r3, [r6]
 8000d18:	4639      	mov	r1, r7
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0xbe>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80eb 	beq.w	8000efe <__udivmoddi4+0x286>
 8000d28:	2700      	movs	r7, #0
 8000d2a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d2e:	4638      	mov	r0, r7
 8000d30:	4639      	mov	r1, r7
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	fab3 f783 	clz	r7, r3
 8000d3a:	2f00      	cmp	r7, #0
 8000d3c:	d147      	bne.n	8000dce <__udivmoddi4+0x156>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0xd0>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	f200 80fa 	bhi.w	8000f3c <__udivmoddi4+0x2c4>
 8000d48:	1a84      	subs	r4, r0, r2
 8000d4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	4698      	mov	r8, r3
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d0e0      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000d56:	e9c6 4800 	strd	r4, r8, [r6]
 8000d5a:	e7dd      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000d5c:	b902      	cbnz	r2, 8000d60 <__udivmoddi4+0xe8>
 8000d5e:	deff      	udf	#255	; 0xff
 8000d60:	fab2 f282 	clz	r2, r2
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f040 808f 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d6a:	1b49      	subs	r1, r1, r5
 8000d6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d70:	fa1f f885 	uxth.w	r8, r5
 8000d74:	2701      	movs	r7, #1
 8000d76:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d7a:	0c23      	lsrs	r3, r4, #16
 8000d7c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d84:	fb08 f10c 	mul.w	r1, r8, ip
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8c:	18eb      	adds	r3, r5, r3
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4299      	cmp	r1, r3
 8000d96:	f200 80cd 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1a59      	subs	r1, r3, r1
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000da8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x14c>
 8000db4:	192c      	adds	r4, r5, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x14a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80b6 	bhi.w	8000f2e <__udivmoddi4+0x2b6>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e79f      	b.n	8000d0e <__udivmoddi4+0x96>
 8000dce:	f1c7 0c20 	rsb	ip, r7, #32
 8000dd2:	40bb      	lsls	r3, r7
 8000dd4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dd8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ddc:	fa01 f407 	lsl.w	r4, r1, r7
 8000de0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000de4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000de8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dec:	4325      	orrs	r5, r4
 8000dee:	fbb3 f9f8 	udiv	r9, r3, r8
 8000df2:	0c2c      	lsrs	r4, r5, #16
 8000df4:	fb08 3319 	mls	r3, r8, r9, r3
 8000df8:	fa1f fa8e 	uxth.w	sl, lr
 8000dfc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e00:	fb09 f40a 	mul.w	r4, r9, sl
 8000e04:	429c      	cmp	r4, r3
 8000e06:	fa02 f207 	lsl.w	r2, r2, r7
 8000e0a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1e 0303 	adds.w	r3, lr, r3
 8000e14:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e18:	f080 8087 	bcs.w	8000f2a <__udivmoddi4+0x2b2>
 8000e1c:	429c      	cmp	r4, r3
 8000e1e:	f240 8084 	bls.w	8000f2a <__udivmoddi4+0x2b2>
 8000e22:	f1a9 0902 	sub.w	r9, r9, #2
 8000e26:	4473      	add	r3, lr
 8000e28:	1b1b      	subs	r3, r3, r4
 8000e2a:	b2ad      	uxth	r5, r5
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e38:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e3c:	45a2      	cmp	sl, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1e 0404 	adds.w	r4, lr, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e48:	d26b      	bcs.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4a:	45a2      	cmp	sl, r4
 8000e4c:	d969      	bls.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	4474      	add	r4, lr
 8000e52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e56:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5a:	eba4 040a 	sub.w	r4, r4, sl
 8000e5e:	454c      	cmp	r4, r9
 8000e60:	46c2      	mov	sl, r8
 8000e62:	464b      	mov	r3, r9
 8000e64:	d354      	bcc.n	8000f10 <__udivmoddi4+0x298>
 8000e66:	d051      	beq.n	8000f0c <__udivmoddi4+0x294>
 8000e68:	2e00      	cmp	r6, #0
 8000e6a:	d069      	beq.n	8000f40 <__udivmoddi4+0x2c8>
 8000e6c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e70:	eb64 0403 	sbc.w	r4, r4, r3
 8000e74:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e78:	40fd      	lsrs	r5, r7
 8000e7a:	40fc      	lsrs	r4, r7
 8000e7c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e80:	e9c6 5400 	strd	r5, r4, [r6]
 8000e84:	2700      	movs	r7, #0
 8000e86:	e747      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e90:	4095      	lsls	r5, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	fa21 f303 	lsr.w	r3, r1, r3
 8000e9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e9e:	4338      	orrs	r0, r7
 8000ea0:	0c01      	lsrs	r1, r0, #16
 8000ea2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ea6:	fa1f f885 	uxth.w	r8, r5
 8000eaa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb2:	fb07 f308 	mul.w	r3, r7, r8
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ebc:	d907      	bls.n	8000ece <__udivmoddi4+0x256>
 8000ebe:	1869      	adds	r1, r5, r1
 8000ec0:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000ec4:	d22f      	bcs.n	8000f26 <__udivmoddi4+0x2ae>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d92d      	bls.n	8000f26 <__udivmoddi4+0x2ae>
 8000eca:	3f02      	subs	r7, #2
 8000ecc:	4429      	add	r1, r5
 8000ece:	1acb      	subs	r3, r1, r3
 8000ed0:	b281      	uxth	r1, r0
 8000ed2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ede:	fb00 f308 	mul.w	r3, r0, r8
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x27e>
 8000ee6:	1869      	adds	r1, r5, r1
 8000ee8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000eec:	d217      	bcs.n	8000f1e <__udivmoddi4+0x2a6>
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	d915      	bls.n	8000f1e <__udivmoddi4+0x2a6>
 8000ef2:	3802      	subs	r0, #2
 8000ef4:	4429      	add	r1, r5
 8000ef6:	1ac9      	subs	r1, r1, r3
 8000ef8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000efc:	e73b      	b.n	8000d76 <__udivmoddi4+0xfe>
 8000efe:	4637      	mov	r7, r6
 8000f00:	4630      	mov	r0, r6
 8000f02:	e709      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f04:	4607      	mov	r7, r0
 8000f06:	e6e7      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f08:	4618      	mov	r0, r3
 8000f0a:	e6fb      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f0c:	4541      	cmp	r1, r8
 8000f0e:	d2ab      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f10:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f14:	eb69 020e 	sbc.w	r2, r9, lr
 8000f18:	3801      	subs	r0, #1
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	e7a4      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f1e:	4660      	mov	r0, ip
 8000f20:	e7e9      	b.n	8000ef6 <__udivmoddi4+0x27e>
 8000f22:	4618      	mov	r0, r3
 8000f24:	e795      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f26:	4667      	mov	r7, ip
 8000f28:	e7d1      	b.n	8000ece <__udivmoddi4+0x256>
 8000f2a:	4681      	mov	r9, r0
 8000f2c:	e77c      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f2e:	3802      	subs	r0, #2
 8000f30:	442c      	add	r4, r5
 8000f32:	e747      	b.n	8000dc4 <__udivmoddi4+0x14c>
 8000f34:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f38:	442b      	add	r3, r5
 8000f3a:	e72f      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f3c:	4638      	mov	r0, r7
 8000f3e:	e708      	b.n	8000d52 <__udivmoddi4+0xda>
 8000f40:	4637      	mov	r7, r6
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0xa0>

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <AT24C08_Page_Read>:
	HAL_I2C_Mem_Write(&hi2c1, devAddress, wordAddress, I2C_MEMADD_SIZE_8BIT, &data[0], 16, 1);
	HAL_Delay(1);
	LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_13);
}

void AT24C08_Page_Read(unsigned char page, unsigned char *data, unsigned char len) {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b088      	sub	sp, #32
 8000f4c:	af04      	add	r7, sp, #16
 8000f4e:	4603      	mov	r3, r0
 8000f50:	6039      	str	r1, [r7, #0]
 8000f52:	71fb      	strb	r3, [r7, #7]
 8000f54:	4613      	mov	r3, r2
 8000f56:	71bb      	strb	r3, [r7, #6]
	unsigned char devAddress = ((page * 16) >> 8) << 1 | 0xA0;
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	011b      	lsls	r3, r3, #4
 8000f5c:	121b      	asrs	r3, r3, #8
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	b25b      	sxtb	r3, r3
 8000f62:	f063 035f 	orn	r3, r3, #95	; 0x5f
 8000f66:	b25b      	sxtb	r3, r3
 8000f68:	73fb      	strb	r3, [r7, #15]
	unsigned char wordAddress = (page * 16) & 0xff;
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	011b      	lsls	r3, r3, #4
 8000f6e:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Mem_Read(&hi2c1, devAddress, wordAddress, I2C_MEMADD_SIZE_8BIT, &data[0], 16, 1);
 8000f70:	7bfb      	ldrb	r3, [r7, #15]
 8000f72:	b299      	uxth	r1, r3
 8000f74:	7bbb      	ldrb	r3, [r7, #14]
 8000f76:	b29a      	uxth	r2, r3
 8000f78:	2301      	movs	r3, #1
 8000f7a:	9302      	str	r3, [sp, #8]
 8000f7c:	2310      	movs	r3, #16
 8000f7e:	9301      	str	r3, [sp, #4]
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	9300      	str	r3, [sp, #0]
 8000f84:	2301      	movs	r3, #1
 8000f86:	4803      	ldr	r0, [pc, #12]	; (8000f94 <AT24C08_Page_Read+0x4c>)
 8000f88:	f005 fe02 	bl	8006b90 <HAL_I2C_Mem_Read>
}
 8000f8c:	bf00      	nop
 8000f8e:	3710      	adds	r7, #16
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20000454 	.word	0x20000454

08000f98 <EP_PIDGain_Read>:
//		AT24C08_Page_Write(5, &buf_write[0], 16);
//		break;
//	}
}

unsigned char EP_PIDGain_Read(unsigned char id, float *PGain, float *IGain, float *DGain) {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b08c      	sub	sp, #48	; 0x30
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60b9      	str	r1, [r7, #8]
 8000fa0:	607a      	str	r2, [r7, #4]
 8000fa2:	603b      	str	r3, [r7, #0]
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	73fb      	strb	r3, [r7, #15]
	unsigned char buf_read[16];
	Parser parser;

	AT24C08_Page_Read(id, &buf_read[0], 16);
 8000fa8:	f107 0118 	add.w	r1, r7, #24
 8000fac:	7bfb      	ldrb	r3, [r7, #15]
 8000fae:	2210      	movs	r2, #16
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff ffc9 	bl	8000f48 <AT24C08_Page_Read>
//	case 5:
//		AT24C08_Page_Read(5, &buf_read[0], 16);
//		break;
//	}

	unsigned char checksum = 0xff;
 8000fb6:	23ff      	movs	r3, #255	; 0xff
 8000fb8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	for (int i = 0; i < 15; i++) {
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	62bb      	str	r3, [r7, #40]	; 0x28
 8000fc0:	e00c      	b.n	8000fdc <EP_PIDGain_Read+0x44>
		checksum -= buf_read[i];
 8000fc2:	f107 0218 	add.w	r2, r7, #24
 8000fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fc8:	4413      	add	r3, r2
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	for (int i = 0; i < 15; i++) {
 8000fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fd8:	3301      	adds	r3, #1
 8000fda:	62bb      	str	r3, [r7, #40]	; 0x28
 8000fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fde:	2b0e      	cmp	r3, #14
 8000fe0:	ddef      	ble.n	8000fc2 <EP_PIDGain_Read+0x2a>
	}

	if (buf_read[15] == checksum && buf_read[0] == 0x45 && buf_read[1] == 0x50) {
 8000fe2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000fe6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000fea:	429a      	cmp	r2, r3
 8000fec:	d12f      	bne.n	800104e <EP_PIDGain_Read+0xb6>
 8000fee:	7e3b      	ldrb	r3, [r7, #24]
 8000ff0:	2b45      	cmp	r3, #69	; 0x45
 8000ff2:	d12c      	bne.n	800104e <EP_PIDGain_Read+0xb6>
 8000ff4:	7e7b      	ldrb	r3, [r7, #25]
 8000ff6:	2b50      	cmp	r3, #80	; 0x50
 8000ff8:	d129      	bne.n	800104e <EP_PIDGain_Read+0xb6>
		parser.byte[0] = buf_read[3];
 8000ffa:	7efb      	ldrb	r3, [r7, #27]
 8000ffc:	753b      	strb	r3, [r7, #20]
		parser.byte[1] = buf_read[4];
 8000ffe:	7f3b      	ldrb	r3, [r7, #28]
 8001000:	757b      	strb	r3, [r7, #21]
		parser.byte[2] = buf_read[5];
 8001002:	7f7b      	ldrb	r3, [r7, #29]
 8001004:	75bb      	strb	r3, [r7, #22]
		parser.byte[3] = buf_read[6];
 8001006:	7fbb      	ldrb	r3, [r7, #30]
 8001008:	75fb      	strb	r3, [r7, #23]
		*PGain = parser.f;
 800100a:	697a      	ldr	r2, [r7, #20]
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	601a      	str	r2, [r3, #0]

		parser.byte[0] = buf_read[7];
 8001010:	7ffb      	ldrb	r3, [r7, #31]
 8001012:	753b      	strb	r3, [r7, #20]
		parser.byte[1] = buf_read[8];
 8001014:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001018:	757b      	strb	r3, [r7, #21]
		parser.byte[2] = buf_read[9];
 800101a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800101e:	75bb      	strb	r3, [r7, #22]
		parser.byte[3] = buf_read[10];
 8001020:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001024:	75fb      	strb	r3, [r7, #23]
		*IGain = parser.f;
 8001026:	697a      	ldr	r2, [r7, #20]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	601a      	str	r2, [r3, #0]

		parser.byte[0] = buf_read[11];
 800102c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001030:	753b      	strb	r3, [r7, #20]
		parser.byte[1] = buf_read[12];
 8001032:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001036:	757b      	strb	r3, [r7, #21]
		parser.byte[2] = buf_read[13];
 8001038:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800103c:	75bb      	strb	r3, [r7, #22]
		parser.byte[3] = buf_read[14];
 800103e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001042:	75fb      	strb	r3, [r7, #23]
		*DGain = parser.f;
 8001044:	697a      	ldr	r2, [r7, #20]
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	601a      	str	r2, [r3, #0]
		return 0;
 800104a:	2300      	movs	r3, #0
 800104c:	e000      	b.n	8001050 <EP_PIDGain_Read+0xb8>
	}

	return 1;
 800104e:	2301      	movs	r3, #1
}
 8001050:	4618      	mov	r0, r3
 8001052:	3730      	adds	r7, #48	; 0x30
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	601a      	str	r2, [r3, #0]
}
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f023 0210 	bic.w	r2, r3, #16
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	431a      	orrs	r2, r3
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	605a      	str	r2, [r3, #4]
}
 8001092:	bf00      	nop
 8001094:	370c      	adds	r7, #12
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr

0800109e <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 800109e:	b480      	push	{r7}
 80010a0:	b083      	sub	sp, #12
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	f003 0301 	and.w	r3, r3, #1
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d101      	bne.n	80010b6 <LL_SPI_IsActiveFlag_RXNE+0x18>
 80010b2:	2301      	movs	r3, #1
 80010b4:	e000      	b.n	80010b8 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 80010b6:	2300      	movs	r3, #0
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	f003 0302 	and.w	r3, r3, #2
 80010d4:	2b02      	cmp	r3, #2
 80010d6:	d101      	bne.n	80010dc <LL_SPI_IsActiveFlag_TXE+0x18>
 80010d8:	2301      	movs	r3, #1
 80010da:	e000      	b.n	80010de <LL_SPI_IsActiveFlag_TXE+0x1a>
 80010dc:	2300      	movs	r3, #0
}
 80010de:	4618      	mov	r0, r3
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr

080010ea <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 80010ea:	b480      	push	{r7}
 80010ec:	b083      	sub	sp, #12
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_REG(SPIx->DR));
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	68db      	ldr	r3, [r3, #12]
 80010f6:	b2db      	uxtb	r3, r3
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8001104:	b480      	push	{r7}
 8001106:	b085      	sub	sp, #20
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	460b      	mov	r3, r1
 800110e:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	330c      	adds	r3, #12
 8001114:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	78fa      	ldrb	r2, [r7, #3]
 800111a:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 800111c:	bf00      	nop
 800111e:	3714      	adds	r7, #20
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	691a      	ldr	r2, [r3, #16]
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	4013      	ands	r3, r2
 800113a:	683a      	ldr	r2, [r7, #0]
 800113c:	429a      	cmp	r2, r3
 800113e:	bf0c      	ite	eq
 8001140:	2301      	moveq	r3, #1
 8001142:	2300      	movne	r3, #0
 8001144:	b2db      	uxtb	r3, r3
}
 8001146:	4618      	mov	r0, r3
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr

08001152 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001152:	b480      	push	{r7}
 8001154:	b083      	sub	sp, #12
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
 800115a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	683a      	ldr	r2, [r7, #0]
 8001160:	619a      	str	r2, [r3, #24]
}
 8001162:	bf00      	nop
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr

0800116e <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800116e:	b480      	push	{r7}
 8001170:	b083      	sub	sp, #12
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
 8001176:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	041a      	lsls	r2, r3, #16
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	619a      	str	r2, [r3, #24]
}
 8001180:	bf00      	nop
 8001182:	370c      	adds	r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800118c:	b480      	push	{r7}
 800118e:	b085      	sub	sp, #20
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001194:	4b08      	ldr	r3, [pc, #32]	; (80011b8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001196:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001198:	4907      	ldr	r1, [pc, #28]	; (80011b8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4313      	orrs	r3, r2
 800119e:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80011a0:	4b05      	ldr	r3, [pc, #20]	; (80011b8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80011a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	4013      	ands	r3, r2
 80011a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011aa:	68fb      	ldr	r3, [r7, #12]
}
 80011ac:	bf00      	nop
 80011ae:	3714      	adds	r7, #20
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	40023800 	.word	0x40023800

080011bc <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80011bc:	b480      	push	{r7}
 80011be:	b085      	sub	sp, #20
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80011c4:	4b08      	ldr	r3, [pc, #32]	; (80011e8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80011c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011c8:	4907      	ldr	r1, [pc, #28]	; (80011e8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80011d0:	4b05      	ldr	r3, [pc, #20]	; (80011e8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80011d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	4013      	ands	r3, r2
 80011d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011da:	68fb      	ldr	r3, [r7, #12]
}
 80011dc:	bf00      	nop
 80011de:	3714      	adds	r7, #20
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr
 80011e8:	40023800 	.word	0x40023800

080011ec <BNO080_GPIO_SPI_Initialization>:
int16_t gyro_Q1 = 9;
int16_t magnetometer_Q1 = 4;


void BNO080_GPIO_SPI_Initialization(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b090      	sub	sp, #64	; 0x40
 80011f0:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80011f2:	f107 0318 	add.w	r3, r7, #24
 80011f6:	2228      	movs	r2, #40	; 0x28
 80011f8:	2100      	movs	r1, #0
 80011fa:	4618      	mov	r0, r3
 80011fc:	f008 fde8 	bl	8009dd0 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001200:	463b      	mov	r3, r7
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	605a      	str	r2, [r3, #4]
 8001208:	609a      	str	r2, [r3, #8]
 800120a:	60da      	str	r2, [r3, #12]
 800120c:	611a      	str	r2, [r3, #16]
 800120e:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8001210:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001214:	f7ff ffd2 	bl	80011bc <LL_APB1_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001218:	2002      	movs	r0, #2
 800121a:	f7ff ffb7 	bl	800118c <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800121e:	2004      	movs	r0, #4
 8001220:	f7ff ffb4 	bl	800118c <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001224:	2001      	movs	r0, #1
 8001226:	f7ff ffb1 	bl	800118c <LL_AHB1_GRP1_EnableClock>
	/**SPI2 GPIO Configuration
	PB13   ------> SPI2_SCK
	PB14   ------> SPI2_MISO
	PB15   ------> SPI2_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 800122a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800122e:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001230:	2302      	movs	r3, #2
 8001232:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001234:	2303      	movs	r3, #3
 8001236:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001238:	2300      	movs	r3, #0
 800123a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800123c:	2300      	movs	r3, #0
 800123e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001240:	2305      	movs	r3, #5
 8001242:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001244:	463b      	mov	r3, r7
 8001246:	4619      	mov	r1, r3
 8001248:	4841      	ldr	r0, [pc, #260]	; (8001350 <BNO080_GPIO_SPI_Initialization+0x164>)
 800124a:	f007 fe2c 	bl	8008ea6 <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800124e:	2300      	movs	r3, #0
 8001250:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001252:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001256:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001258:	2300      	movs	r3, #0
 800125a:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 800125c:	2302      	movs	r3, #2
 800125e:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001260:	2301      	movs	r3, #1
 8001262:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001264:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001268:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 800126a:	2318      	movs	r3, #24
 800126c:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800126e:	2300      	movs	r3, #0
 8001270:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001272:	2300      	movs	r3, #0
 8001274:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 8001276:	230a      	movs	r3, #10
 8001278:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(BNO080_SPI_CHANNEL, &SPI_InitStruct);
 800127a:	f107 0318 	add.w	r3, r7, #24
 800127e:	4619      	mov	r1, r3
 8001280:	4834      	ldr	r0, [pc, #208]	; (8001354 <BNO080_GPIO_SPI_Initialization+0x168>)
 8001282:	f007 ffde 	bl	8009242 <LL_SPI_Init>
	LL_SPI_SetStandard(BNO080_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 8001286:	2100      	movs	r1, #0
 8001288:	4832      	ldr	r0, [pc, #200]	; (8001354 <BNO080_GPIO_SPI_Initialization+0x168>)
 800128a:	f7ff fef5 	bl	8001078 <LL_SPI_SetStandard>
	 * PA8  ------> BNO080_PS0/WAKE (output)
	 * PC9  ------> BNO080_RST (output)
	 * PC8  ------> BNO080_INT (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(BNO080_RST_PORT, BNO080_RST_PIN);
 800128e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001292:	4831      	ldr	r0, [pc, #196]	; (8001358 <BNO080_GPIO_SPI_Initialization+0x16c>)
 8001294:	f7ff ff6b 	bl	800116e <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_SPI_CS_PORT, BNO080_SPI_CS_PIN);
 8001298:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800129c:	482c      	ldr	r0, [pc, #176]	; (8001350 <BNO080_GPIO_SPI_Initialization+0x164>)
 800129e:	f7ff ff66 	bl	800116e <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_PS0_WAKE_PORT, BNO080_PS0_WAKE_PIN);
 80012a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012a6:	482d      	ldr	r0, [pc, #180]	; (800135c <BNO080_GPIO_SPI_Initialization+0x170>)
 80012a8:	f7ff ff61 	bl	800116e <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_SPI_CS_PIN;
 80012ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012b0:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80012b2:	2301      	movs	r3, #1
 80012b4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80012b6:	2303      	movs	r3, #3
 80012b8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80012be:	2300      	movs	r3, #0
 80012c0:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_SPI_CS_PORT, &GPIO_InitStruct);
 80012c2:	463b      	mov	r3, r7
 80012c4:	4619      	mov	r1, r3
 80012c6:	4822      	ldr	r0, [pc, #136]	; (8001350 <BNO080_GPIO_SPI_Initialization+0x164>)
 80012c8:	f007 fded 	bl	8008ea6 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_RST_PIN;
 80012cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012d0:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80012d2:	2301      	movs	r3, #1
 80012d4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80012d6:	2303      	movs	r3, #3
 80012d8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80012da:	2300      	movs	r3, #0
 80012dc:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80012de:	2300      	movs	r3, #0
 80012e0:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_RST_PORT, &GPIO_InitStruct);
 80012e2:	463b      	mov	r3, r7
 80012e4:	4619      	mov	r1, r3
 80012e6:	481c      	ldr	r0, [pc, #112]	; (8001358 <BNO080_GPIO_SPI_Initialization+0x16c>)
 80012e8:	f007 fddd 	bl	8008ea6 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_PS0_WAKE_PIN;
 80012ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012f0:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80012f2:	2301      	movs	r3, #1
 80012f4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80012f6:	2303      	movs	r3, #3
 80012f8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80012fe:	2300      	movs	r3, #0
 8001300:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_PS0_WAKE_PORT, &GPIO_InitStruct);
 8001302:	463b      	mov	r3, r7
 8001304:	4619      	mov	r1, r3
 8001306:	4815      	ldr	r0, [pc, #84]	; (800135c <BNO080_GPIO_SPI_Initialization+0x170>)
 8001308:	f007 fdcd 	bl	8008ea6 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_INT_PIN;
 800130c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001310:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001312:	2300      	movs	r3, #0
 8001314:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001316:	2301      	movs	r3, #1
 8001318:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_INT_PORT, &GPIO_InitStruct);
 800131a:	463b      	mov	r3, r7
 800131c:	4619      	mov	r1, r3
 800131e:	480e      	ldr	r0, [pc, #56]	; (8001358 <BNO080_GPIO_SPI_Initialization+0x16c>)
 8001320:	f007 fdc1 	bl	8008ea6 <LL_GPIO_Init>

	LL_SPI_Enable(BNO080_SPI_CHANNEL);
 8001324:	480b      	ldr	r0, [pc, #44]	; (8001354 <BNO080_GPIO_SPI_Initialization+0x168>)
 8001326:	f7ff fe97 	bl	8001058 <LL_SPI_Enable>

	CHIP_DESELECT(BNO080);
 800132a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800132e:	4808      	ldr	r0, [pc, #32]	; (8001350 <BNO080_GPIO_SPI_Initialization+0x164>)
 8001330:	f7ff ff0f 	bl	8001152 <LL_GPIO_SetOutputPin>
	WAKE_HIGH();
 8001334:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001338:	4808      	ldr	r0, [pc, #32]	; (800135c <BNO080_GPIO_SPI_Initialization+0x170>)
 800133a:	f7ff ff0a 	bl	8001152 <LL_GPIO_SetOutputPin>
	RESET_HIGH();
 800133e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001342:	4805      	ldr	r0, [pc, #20]	; (8001358 <BNO080_GPIO_SPI_Initialization+0x16c>)
 8001344:	f7ff ff05 	bl	8001152 <LL_GPIO_SetOutputPin>
}
 8001348:	bf00      	nop
 800134a:	3740      	adds	r7, #64	; 0x40
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	40020400 	.word	0x40020400
 8001354:	40003800 	.word	0x40003800
 8001358:	40020800 	.word	0x40020800
 800135c:	40020000 	.word	0x40020000

08001360 <BNO080_Initialization>:

int BNO080_Initialization(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af02      	add	r7, sp, #8
	BNO080_GPIO_SPI_Initialization();
 8001366:	f7ff ff41 	bl	80011ec <BNO080_GPIO_SPI_Initialization>
	
	printf("Checking BNO080...");
 800136a:	482e      	ldr	r0, [pc, #184]	; (8001424 <BNO080_Initialization+0xc4>)
 800136c:	f009 f994 	bl	800a698 <iprintf>
	
	CHIP_DESELECT(BNO080);
 8001370:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001374:	482c      	ldr	r0, [pc, #176]	; (8001428 <BNO080_Initialization+0xc8>)
 8001376:	f7ff feec 	bl	8001152 <LL_GPIO_SetOutputPin>
	
	//Configure the BNO080 for SPI communication
	WAKE_HIGH();	//Before boot up the PS0/WAK pin must be high to enter SPI mode
 800137a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800137e:	482b      	ldr	r0, [pc, #172]	; (800142c <BNO080_Initialization+0xcc>)
 8001380:	f7ff fee7 	bl	8001152 <LL_GPIO_SetOutputPin>
	RESET_LOW();	//Reset BNO080
 8001384:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001388:	4829      	ldr	r0, [pc, #164]	; (8001430 <BNO080_Initialization+0xd0>)
 800138a:	f7ff fef0 	bl	800116e <LL_GPIO_ResetOutputPin>
	HAL_Delay(200);	//Min length not specified in datasheet?
 800138e:	20c8      	movs	r0, #200	; 0xc8
 8001390:	f004 f874 	bl	800547c <HAL_Delay>
	RESET_HIGH();	//Bring out of reset
 8001394:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001398:	4825      	ldr	r0, [pc, #148]	; (8001430 <BNO080_Initialization+0xd0>)
 800139a:	f7ff feda 	bl	8001152 <LL_GPIO_SetOutputPin>
	
	BNO080_waitForSPI(); //Wait until INT pin goes low.
 800139e:	f000 faf7 	bl	8001990 <BNO080_waitForSPI>
	
	//At system startup, the hub must send its full advertisement message (see 5.2 and 5.3) to the
	//host. It must not send any other data until this step is complete.
	//When BNO080 first boots it broadcasts big startup packet
	//Read it and dump it
	BNO080_waitForSPI(); //Wait for assertion of INT before reading advert message.
 80013a2:	f000 faf5 	bl	8001990 <BNO080_waitForSPI>
	BNO080_receivePacket();
 80013a6:	f000 fb17 	bl	80019d8 <BNO080_receivePacket>
	
	//The BNO080 will then transmit an unsolicited Initialize Response (see 6.4.5.2)
	//Read it and dump it
	BNO080_waitForSPI();  //Wait for assertion of INT before reading Init response
 80013aa:	f000 faf1 	bl	8001990 <BNO080_waitForSPI>
	BNO080_receivePacket();
 80013ae:	f000 fb13 	bl	80019d8 <BNO080_receivePacket>
	
	//Check communication with device
	shtpData[0] = SHTP_REPORT_PRODUCT_ID_REQUEST; //Request the product ID and reset info
 80013b2:	4b20      	ldr	r3, [pc, #128]	; (8001434 <BNO080_Initialization+0xd4>)
 80013b4:	22f9      	movs	r2, #249	; 0xf9
 80013b6:	701a      	strb	r2, [r3, #0]
	shtpData[1] = 0;						 //Reserved
 80013b8:	4b1e      	ldr	r3, [pc, #120]	; (8001434 <BNO080_Initialization+0xd4>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	705a      	strb	r2, [r3, #1]
	
	//Transmit packet on channel 2, 2 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 2);
 80013be:	2102      	movs	r1, #2
 80013c0:	2002      	movs	r0, #2
 80013c2:	f000 fb79 	bl	8001ab8 <BNO080_sendPacket>
	
	//Now we wait for response
	BNO080_waitForSPI();
 80013c6:	f000 fae3 	bl	8001990 <BNO080_waitForSPI>
	if (BNO080_receivePacket() == 1)
 80013ca:	f000 fb05 	bl	80019d8 <BNO080_receivePacket>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d11b      	bne.n	800140c <BNO080_Initialization+0xac>
	{
		printf("header: %d %d %d %d\n", shtpHeader[0], shtpHeader[1], shtpHeader[2], shtpHeader[3]);
 80013d4:	4b18      	ldr	r3, [pc, #96]	; (8001438 <BNO080_Initialization+0xd8>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	4619      	mov	r1, r3
 80013da:	4b17      	ldr	r3, [pc, #92]	; (8001438 <BNO080_Initialization+0xd8>)
 80013dc:	785b      	ldrb	r3, [r3, #1]
 80013de:	461a      	mov	r2, r3
 80013e0:	4b15      	ldr	r3, [pc, #84]	; (8001438 <BNO080_Initialization+0xd8>)
 80013e2:	789b      	ldrb	r3, [r3, #2]
 80013e4:	4618      	mov	r0, r3
 80013e6:	4b14      	ldr	r3, [pc, #80]	; (8001438 <BNO080_Initialization+0xd8>)
 80013e8:	78db      	ldrb	r3, [r3, #3]
 80013ea:	9300      	str	r3, [sp, #0]
 80013ec:	4603      	mov	r3, r0
 80013ee:	4813      	ldr	r0, [pc, #76]	; (800143c <BNO080_Initialization+0xdc>)
 80013f0:	f009 f952 	bl	800a698 <iprintf>
		if (shtpData[0] == SHTP_REPORT_PRODUCT_ID_RESPONSE)
 80013f4:	4b0f      	ldr	r3, [pc, #60]	; (8001434 <BNO080_Initialization+0xd4>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	2bf8      	cmp	r3, #248	; 0xf8
 80013fa:	d107      	bne.n	800140c <BNO080_Initialization+0xac>
		{
			printf("BNO080 who_am_i = 0x%02x...ok\n\n", shtpData[0]);
 80013fc:	4b0d      	ldr	r3, [pc, #52]	; (8001434 <BNO080_Initialization+0xd4>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	4619      	mov	r1, r3
 8001402:	480f      	ldr	r0, [pc, #60]	; (8001440 <BNO080_Initialization+0xe0>)
 8001404:	f009 f948 	bl	800a698 <iprintf>
			return (0);
 8001408:	2300      	movs	r3, #0
 800140a:	e007      	b.n	800141c <BNO080_Initialization+0xbc>
		}// Sensor OK
	}
	
	printf("BNO080 Not OK: 0x%02x Should be 0x%02x\n", shtpData[0], SHTP_REPORT_PRODUCT_ID_RESPONSE);
 800140c:	4b09      	ldr	r3, [pc, #36]	; (8001434 <BNO080_Initialization+0xd4>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	22f8      	movs	r2, #248	; 0xf8
 8001412:	4619      	mov	r1, r3
 8001414:	480b      	ldr	r0, [pc, #44]	; (8001444 <BNO080_Initialization+0xe4>)
 8001416:	f009 f93f 	bl	800a698 <iprintf>
	return (1); //Something went wrong
 800141a:	2301      	movs	r3, #1
}
 800141c:	4618      	mov	r0, r3
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	0800d4b8 	.word	0x0800d4b8
 8001428:	40020400 	.word	0x40020400
 800142c:	40020000 	.word	0x40020000
 8001430:	40020800 	.word	0x40020800
 8001434:	20000280 	.word	0x20000280
 8001438:	2000022c 	.word	0x2000022c
 800143c:	0800d4cc 	.word	0x0800d4cc
 8001440:	0800d4e4 	.word	0x0800d4e4
 8001444:	0800d504 	.word	0x0800d504

08001448 <SPI2_SendByte>:

unsigned char SPI2_SendByte(unsigned char data)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(BNO080_SPI_CHANNEL)==RESET);
 8001452:	bf00      	nop
 8001454:	480c      	ldr	r0, [pc, #48]	; (8001488 <SPI2_SendByte+0x40>)
 8001456:	f7ff fe35 	bl	80010c4 <LL_SPI_IsActiveFlag_TXE>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d0f9      	beq.n	8001454 <SPI2_SendByte+0xc>
	LL_SPI_TransmitData8(BNO080_SPI_CHANNEL, data);
 8001460:	79fb      	ldrb	r3, [r7, #7]
 8001462:	4619      	mov	r1, r3
 8001464:	4808      	ldr	r0, [pc, #32]	; (8001488 <SPI2_SendByte+0x40>)
 8001466:	f7ff fe4d 	bl	8001104 <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(BNO080_SPI_CHANNEL)==RESET);
 800146a:	bf00      	nop
 800146c:	4806      	ldr	r0, [pc, #24]	; (8001488 <SPI2_SendByte+0x40>)
 800146e:	f7ff fe16 	bl	800109e <LL_SPI_IsActiveFlag_RXNE>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d0f9      	beq.n	800146c <SPI2_SendByte+0x24>
	return LL_SPI_ReceiveData8(BNO080_SPI_CHANNEL);
 8001478:	4803      	ldr	r0, [pc, #12]	; (8001488 <SPI2_SendByte+0x40>)
 800147a:	f7ff fe36 	bl	80010ea <LL_SPI_ReceiveData8>
 800147e:	4603      	mov	r3, r0
}
 8001480:	4618      	mov	r0, r3
 8001482:	3708      	adds	r7, #8
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	40003800 	.word	0x40003800

0800148c <BNO080_dataAvailable>:
//////////////////////////////////////////////////////////////////////////

//Updates the latest variables if possible
//Returns false if new readings are not available
int BNO080_dataAvailable(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
	//If we have an interrupt pin connection available, check if data is available.
	//If int pin is NULL, then we'll rely on BNO080_receivePacket() to timeout
	//See issue 13: https://github.com/sparkfun/SparkFun_BNO080_Arduino_Library/issues/13
	if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 1)
 8001490:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001494:	4811      	ldr	r0, [pc, #68]	; (80014dc <BNO080_dataAvailable+0x50>)
 8001496:	f7ff fe47 	bl	8001128 <LL_GPIO_IsInputPinSet>
 800149a:	4603      	mov	r3, r0
 800149c:	2b01      	cmp	r3, #1
 800149e:	d101      	bne.n	80014a4 <BNO080_dataAvailable+0x18>
		return (0);
 80014a0:	2300      	movs	r3, #0
 80014a2:	e019      	b.n	80014d8 <BNO080_dataAvailable+0x4c>

	if (BNO080_receivePacket() == 1)
 80014a4:	f000 fa98 	bl	80019d8 <BNO080_receivePacket>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d113      	bne.n	80014d6 <BNO080_dataAvailable+0x4a>
	{
		//Check to see if this packet is a sensor reporting its data to us
		if (shtpHeader[2] == CHANNEL_REPORTS && shtpData[0] == SHTP_REPORT_BASE_TIMESTAMP)
 80014ae:	4b0c      	ldr	r3, [pc, #48]	; (80014e0 <BNO080_dataAvailable+0x54>)
 80014b0:	789b      	ldrb	r3, [r3, #2]
 80014b2:	2b03      	cmp	r3, #3
 80014b4:	d107      	bne.n	80014c6 <BNO080_dataAvailable+0x3a>
 80014b6:	4b0b      	ldr	r3, [pc, #44]	; (80014e4 <BNO080_dataAvailable+0x58>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	2bfb      	cmp	r3, #251	; 0xfb
 80014bc:	d103      	bne.n	80014c6 <BNO080_dataAvailable+0x3a>
		{
			BNO080_parseInputReport(); //This will update the rawAccelX, etc variables depending on which feature report is found
 80014be:	f000 f82f 	bl	8001520 <BNO080_parseInputReport>
			return (1);
 80014c2:	2301      	movs	r3, #1
 80014c4:	e008      	b.n	80014d8 <BNO080_dataAvailable+0x4c>
		}
		else if (shtpHeader[2] == CHANNEL_CONTROL)
 80014c6:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <BNO080_dataAvailable+0x54>)
 80014c8:	789b      	ldrb	r3, [r3, #2]
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d103      	bne.n	80014d6 <BNO080_dataAvailable+0x4a>
		{
			BNO080_parseCommandReport(); //This will update responses to commands, calibrationStatus, etc.
 80014ce:	f000 f80b 	bl	80014e8 <BNO080_parseCommandReport>
			return (1);
 80014d2:	2301      	movs	r3, #1
 80014d4:	e000      	b.n	80014d8 <BNO080_dataAvailable+0x4c>
		}
	}
	return (0);
 80014d6:	2300      	movs	r3, #0
}
 80014d8:	4618      	mov	r0, r3
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	40020800 	.word	0x40020800
 80014e0:	2000022c 	.word	0x2000022c
 80014e4:	20000280 	.word	0x20000280

080014e8 <BNO080_parseCommandReport>:
//shtpData[5 + 5]: R5
//shtpData[5 + 6]: R6
//shtpData[5 + 7]: R7
//shtpData[5 + 8]: R8
void BNO080_parseCommandReport(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
	if (shtpData[0] == SHTP_REPORT_COMMAND_RESPONSE)
 80014ee:	4b0a      	ldr	r3, [pc, #40]	; (8001518 <BNO080_parseCommandReport+0x30>)
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	2bf1      	cmp	r3, #241	; 0xf1
 80014f4:	d109      	bne.n	800150a <BNO080_parseCommandReport+0x22>
	{
		//The BNO080 responds with this report to command requests. It's up to use to remember which command we issued.
		uint8_t command = shtpData[2]; //This is the Command byte of the response
 80014f6:	4b08      	ldr	r3, [pc, #32]	; (8001518 <BNO080_parseCommandReport+0x30>)
 80014f8:	789b      	ldrb	r3, [r3, #2]
 80014fa:	71fb      	strb	r3, [r7, #7]

		if (command == COMMAND_ME_CALIBRATE)
 80014fc:	79fb      	ldrb	r3, [r7, #7]
 80014fe:	2b07      	cmp	r3, #7
 8001500:	d103      	bne.n	800150a <BNO080_parseCommandReport+0x22>
		{
			calibrationStatus = shtpData[5]; //R0 - Status (0 = success, non-zero = fail)
 8001502:	4b05      	ldr	r3, [pc, #20]	; (8001518 <BNO080_parseCommandReport+0x30>)
 8001504:	795a      	ldrb	r2, [r3, #5]
 8001506:	4b05      	ldr	r3, [pc, #20]	; (800151c <BNO080_parseCommandReport+0x34>)
 8001508:	701a      	strb	r2, [r3, #0]
		//This sensor report ID is unhandled.
		//See reference manual to add additional feature reports as needed
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 800150a:	bf00      	nop
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	20000280 	.word	0x20000280
 800151c:	20000303 	.word	0x20000303

08001520 <BNO080_parseInputReport>:
//shtpData[6:7]: j/accel y/gyro y/etc
//shtpData[8:9]: k/accel z/gyro z/etc
//shtpData[10:11]: real/gyro temp/etc
//shtpData[12:13]: Accuracy estimate
void BNO080_parseInputReport(void)
{
 8001520:	b480      	push	{r7}
 8001522:	b087      	sub	sp, #28
 8001524:	af00      	add	r7, sp, #0
	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)shtpHeader[1] << 8 | shtpHeader[0]);
 8001526:	4b81      	ldr	r3, [pc, #516]	; (800172c <BNO080_parseInputReport+0x20c>)
 8001528:	785b      	ldrb	r3, [r3, #1]
 800152a:	021b      	lsls	r3, r3, #8
 800152c:	b21a      	sxth	r2, r3
 800152e:	4b7f      	ldr	r3, [pc, #508]	; (800172c <BNO080_parseInputReport+0x20c>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	b21b      	sxth	r3, r3
 8001534:	4313      	orrs	r3, r2
 8001536:	823b      	strh	r3, [r7, #16]
	dataLength &= ~(1 << 15); //Clear the MSbit. This bit indicates if this package is a continuation of the last.
 8001538:	8a3b      	ldrh	r3, [r7, #16]
 800153a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800153e:	823b      	strh	r3, [r7, #16]
	//Ignore it for now. TODO catch this as an error and exit

	dataLength -= 4; //Remove the header bytes from the data count
 8001540:	8a3b      	ldrh	r3, [r7, #16]
 8001542:	3b04      	subs	r3, #4
 8001544:	b29b      	uxth	r3, r3
 8001546:	823b      	strh	r3, [r7, #16]

	timeStamp = ((uint32_t)shtpData[4] << (8 * 3)) | (shtpData[3] << (8 * 2)) | (shtpData[2] << (8 * 1)) | (shtpData[1] << (8 * 0));
 8001548:	4b79      	ldr	r3, [pc, #484]	; (8001730 <BNO080_parseInputReport+0x210>)
 800154a:	791b      	ldrb	r3, [r3, #4]
 800154c:	061b      	lsls	r3, r3, #24
 800154e:	4a78      	ldr	r2, [pc, #480]	; (8001730 <BNO080_parseInputReport+0x210>)
 8001550:	78d2      	ldrb	r2, [r2, #3]
 8001552:	0412      	lsls	r2, r2, #16
 8001554:	4313      	orrs	r3, r2
 8001556:	4a76      	ldr	r2, [pc, #472]	; (8001730 <BNO080_parseInputReport+0x210>)
 8001558:	7892      	ldrb	r2, [r2, #2]
 800155a:	0212      	lsls	r2, r2, #8
 800155c:	4313      	orrs	r3, r2
 800155e:	4a74      	ldr	r2, [pc, #464]	; (8001730 <BNO080_parseInputReport+0x210>)
 8001560:	7852      	ldrb	r2, [r2, #1]
 8001562:	4313      	orrs	r3, r2
 8001564:	4a73      	ldr	r2, [pc, #460]	; (8001734 <BNO080_parseInputReport+0x214>)
 8001566:	6013      	str	r3, [r2, #0]

	uint8_t status = shtpData[7] & 0x03; //Get status bits
 8001568:	4b71      	ldr	r3, [pc, #452]	; (8001730 <BNO080_parseInputReport+0x210>)
 800156a:	79db      	ldrb	r3, [r3, #7]
 800156c:	f003 0303 	and.w	r3, r3, #3
 8001570:	73fb      	strb	r3, [r7, #15]
	uint16_t data1 = (uint16_t)shtpData[10] << 8 | shtpData[9];
 8001572:	4b6f      	ldr	r3, [pc, #444]	; (8001730 <BNO080_parseInputReport+0x210>)
 8001574:	7a9b      	ldrb	r3, [r3, #10]
 8001576:	021b      	lsls	r3, r3, #8
 8001578:	b21a      	sxth	r2, r3
 800157a:	4b6d      	ldr	r3, [pc, #436]	; (8001730 <BNO080_parseInputReport+0x210>)
 800157c:	7a5b      	ldrb	r3, [r3, #9]
 800157e:	b21b      	sxth	r3, r3
 8001580:	4313      	orrs	r3, r2
 8001582:	b21b      	sxth	r3, r3
 8001584:	81bb      	strh	r3, [r7, #12]
	uint16_t data2 = (uint16_t)shtpData[12] << 8 | shtpData[11];
 8001586:	4b6a      	ldr	r3, [pc, #424]	; (8001730 <BNO080_parseInputReport+0x210>)
 8001588:	7b1b      	ldrb	r3, [r3, #12]
 800158a:	021b      	lsls	r3, r3, #8
 800158c:	b21a      	sxth	r2, r3
 800158e:	4b68      	ldr	r3, [pc, #416]	; (8001730 <BNO080_parseInputReport+0x210>)
 8001590:	7adb      	ldrb	r3, [r3, #11]
 8001592:	b21b      	sxth	r3, r3
 8001594:	4313      	orrs	r3, r2
 8001596:	b21b      	sxth	r3, r3
 8001598:	817b      	strh	r3, [r7, #10]
	uint16_t data3 = (uint16_t)shtpData[14] << 8 | shtpData[13];
 800159a:	4b65      	ldr	r3, [pc, #404]	; (8001730 <BNO080_parseInputReport+0x210>)
 800159c:	7b9b      	ldrb	r3, [r3, #14]
 800159e:	021b      	lsls	r3, r3, #8
 80015a0:	b21a      	sxth	r2, r3
 80015a2:	4b63      	ldr	r3, [pc, #396]	; (8001730 <BNO080_parseInputReport+0x210>)
 80015a4:	7b5b      	ldrb	r3, [r3, #13]
 80015a6:	b21b      	sxth	r3, r3
 80015a8:	4313      	orrs	r3, r2
 80015aa:	b21b      	sxth	r3, r3
 80015ac:	813b      	strh	r3, [r7, #8]
	uint16_t data4 = 0;
 80015ae:	2300      	movs	r3, #0
 80015b0:	82fb      	strh	r3, [r7, #22]
	uint16_t data5 = 0;
 80015b2:	2300      	movs	r3, #0
 80015b4:	82bb      	strh	r3, [r7, #20]

	if (dataLength > 14)
 80015b6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80015ba:	2b0e      	cmp	r3, #14
 80015bc:	dd09      	ble.n	80015d2 <BNO080_parseInputReport+0xb2>
	{
		data4 = (uint16_t)shtpData[16] << 8 | shtpData[15];
 80015be:	4b5c      	ldr	r3, [pc, #368]	; (8001730 <BNO080_parseInputReport+0x210>)
 80015c0:	7c1b      	ldrb	r3, [r3, #16]
 80015c2:	021b      	lsls	r3, r3, #8
 80015c4:	b21a      	sxth	r2, r3
 80015c6:	4b5a      	ldr	r3, [pc, #360]	; (8001730 <BNO080_parseInputReport+0x210>)
 80015c8:	7bdb      	ldrb	r3, [r3, #15]
 80015ca:	b21b      	sxth	r3, r3
 80015cc:	4313      	orrs	r3, r2
 80015ce:	b21b      	sxth	r3, r3
 80015d0:	82fb      	strh	r3, [r7, #22]
	}
	if (dataLength > 16)
 80015d2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80015d6:	2b10      	cmp	r3, #16
 80015d8:	dd09      	ble.n	80015ee <BNO080_parseInputReport+0xce>
	{
		data5 = (uint16_t)shtpData[18] << 8 | shtpData[17];
 80015da:	4b55      	ldr	r3, [pc, #340]	; (8001730 <BNO080_parseInputReport+0x210>)
 80015dc:	7c9b      	ldrb	r3, [r3, #18]
 80015de:	021b      	lsls	r3, r3, #8
 80015e0:	b21a      	sxth	r2, r3
 80015e2:	4b53      	ldr	r3, [pc, #332]	; (8001730 <BNO080_parseInputReport+0x210>)
 80015e4:	7c5b      	ldrb	r3, [r3, #17]
 80015e6:	b21b      	sxth	r3, r3
 80015e8:	4313      	orrs	r3, r2
 80015ea:	b21b      	sxth	r3, r3
 80015ec:	82bb      	strh	r3, [r7, #20]
	}

	//Store these generic values to their proper global variable
	switch(shtpData[5])
 80015ee:	4b50      	ldr	r3, [pc, #320]	; (8001730 <BNO080_parseInputReport+0x210>)
 80015f0:	795b      	ldrb	r3, [r3, #5]
 80015f2:	2b05      	cmp	r3, #5
 80015f4:	d053      	beq.n	800169e <BNO080_parseInputReport+0x17e>
 80015f6:	2b05      	cmp	r3, #5
 80015f8:	dc0b      	bgt.n	8001612 <BNO080_parseInputReport+0xf2>
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d033      	beq.n	8001666 <BNO080_parseInputReport+0x146>
 80015fe:	2b02      	cmp	r3, #2
 8001600:	dc02      	bgt.n	8001608 <BNO080_parseInputReport+0xe8>
 8001602:	2b01      	cmp	r3, #1
 8001604:	d013      	beq.n	800162e <BNO080_parseInputReport+0x10e>
			//See reference manual to add additional feature reports as needed
		}
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 8001606:	e08a      	b.n	800171e <BNO080_parseInputReport+0x1fe>
	switch(shtpData[5])
 8001608:	2b03      	cmp	r3, #3
 800160a:	d03a      	beq.n	8001682 <BNO080_parseInputReport+0x162>
 800160c:	2b04      	cmp	r3, #4
 800160e:	d01c      	beq.n	800164a <BNO080_parseInputReport+0x12a>
}
 8001610:	e085      	b.n	800171e <BNO080_parseInputReport+0x1fe>
	switch(shtpData[5])
 8001612:	2b13      	cmp	r3, #19
 8001614:	d05b      	beq.n	80016ce <BNO080_parseInputReport+0x1ae>
 8001616:	2b13      	cmp	r3, #19
 8001618:	dc04      	bgt.n	8001624 <BNO080_parseInputReport+0x104>
 800161a:	2b08      	cmp	r3, #8
 800161c:	d03f      	beq.n	800169e <BNO080_parseInputReport+0x17e>
 800161e:	2b11      	cmp	r3, #17
 8001620:	d051      	beq.n	80016c6 <BNO080_parseInputReport+0x1a6>
}
 8001622:	e07c      	b.n	800171e <BNO080_parseInputReport+0x1fe>
	switch(shtpData[5])
 8001624:	2b1e      	cmp	r3, #30
 8001626:	d057      	beq.n	80016d8 <BNO080_parseInputReport+0x1b8>
 8001628:	2bf1      	cmp	r3, #241	; 0xf1
 800162a:	d06d      	beq.n	8001708 <BNO080_parseInputReport+0x1e8>
}
 800162c:	e077      	b.n	800171e <BNO080_parseInputReport+0x1fe>
			accelAccuracy = status;
 800162e:	7bfb      	ldrb	r3, [r7, #15]
 8001630:	b29a      	uxth	r2, r3
 8001632:	4b41      	ldr	r3, [pc, #260]	; (8001738 <BNO080_parseInputReport+0x218>)
 8001634:	801a      	strh	r2, [r3, #0]
			rawAccelX = data1;
 8001636:	4a41      	ldr	r2, [pc, #260]	; (800173c <BNO080_parseInputReport+0x21c>)
 8001638:	89bb      	ldrh	r3, [r7, #12]
 800163a:	8013      	strh	r3, [r2, #0]
			rawAccelY = data2;
 800163c:	4a40      	ldr	r2, [pc, #256]	; (8001740 <BNO080_parseInputReport+0x220>)
 800163e:	897b      	ldrh	r3, [r7, #10]
 8001640:	8013      	strh	r3, [r2, #0]
			rawAccelZ = data3;
 8001642:	4a40      	ldr	r2, [pc, #256]	; (8001744 <BNO080_parseInputReport+0x224>)
 8001644:	893b      	ldrh	r3, [r7, #8]
 8001646:	8013      	strh	r3, [r2, #0]
			break;
 8001648:	e069      	b.n	800171e <BNO080_parseInputReport+0x1fe>
			accelLinAccuracy = status;
 800164a:	7bfb      	ldrb	r3, [r7, #15]
 800164c:	b29a      	uxth	r2, r3
 800164e:	4b3e      	ldr	r3, [pc, #248]	; (8001748 <BNO080_parseInputReport+0x228>)
 8001650:	801a      	strh	r2, [r3, #0]
			rawLinAccelX = data1;
 8001652:	4a3e      	ldr	r2, [pc, #248]	; (800174c <BNO080_parseInputReport+0x22c>)
 8001654:	89bb      	ldrh	r3, [r7, #12]
 8001656:	8013      	strh	r3, [r2, #0]
			rawLinAccelY = data2;
 8001658:	4a3d      	ldr	r2, [pc, #244]	; (8001750 <BNO080_parseInputReport+0x230>)
 800165a:	897b      	ldrh	r3, [r7, #10]
 800165c:	8013      	strh	r3, [r2, #0]
			rawLinAccelZ = data3;
 800165e:	4a3d      	ldr	r2, [pc, #244]	; (8001754 <BNO080_parseInputReport+0x234>)
 8001660:	893b      	ldrh	r3, [r7, #8]
 8001662:	8013      	strh	r3, [r2, #0]
			break;
 8001664:	e05b      	b.n	800171e <BNO080_parseInputReport+0x1fe>
			gyroAccuracy = status;
 8001666:	7bfb      	ldrb	r3, [r7, #15]
 8001668:	b29a      	uxth	r2, r3
 800166a:	4b3b      	ldr	r3, [pc, #236]	; (8001758 <BNO080_parseInputReport+0x238>)
 800166c:	801a      	strh	r2, [r3, #0]
			rawGyroX = data1;
 800166e:	4a3b      	ldr	r2, [pc, #236]	; (800175c <BNO080_parseInputReport+0x23c>)
 8001670:	89bb      	ldrh	r3, [r7, #12]
 8001672:	8013      	strh	r3, [r2, #0]
			rawGyroY = data2;
 8001674:	4a3a      	ldr	r2, [pc, #232]	; (8001760 <BNO080_parseInputReport+0x240>)
 8001676:	897b      	ldrh	r3, [r7, #10]
 8001678:	8013      	strh	r3, [r2, #0]
			rawGyroZ = data3;
 800167a:	4a3a      	ldr	r2, [pc, #232]	; (8001764 <BNO080_parseInputReport+0x244>)
 800167c:	893b      	ldrh	r3, [r7, #8]
 800167e:	8013      	strh	r3, [r2, #0]
			break;
 8001680:	e04d      	b.n	800171e <BNO080_parseInputReport+0x1fe>
			magAccuracy = status;
 8001682:	7bfb      	ldrb	r3, [r7, #15]
 8001684:	b29a      	uxth	r2, r3
 8001686:	4b38      	ldr	r3, [pc, #224]	; (8001768 <BNO080_parseInputReport+0x248>)
 8001688:	801a      	strh	r2, [r3, #0]
			rawMagX = data1;
 800168a:	4a38      	ldr	r2, [pc, #224]	; (800176c <BNO080_parseInputReport+0x24c>)
 800168c:	89bb      	ldrh	r3, [r7, #12]
 800168e:	8013      	strh	r3, [r2, #0]
			rawMagY = data2;
 8001690:	4a37      	ldr	r2, [pc, #220]	; (8001770 <BNO080_parseInputReport+0x250>)
 8001692:	897b      	ldrh	r3, [r7, #10]
 8001694:	8013      	strh	r3, [r2, #0]
			rawMagZ = data3;
 8001696:	4a37      	ldr	r2, [pc, #220]	; (8001774 <BNO080_parseInputReport+0x254>)
 8001698:	893b      	ldrh	r3, [r7, #8]
 800169a:	8013      	strh	r3, [r2, #0]
			break;
 800169c:	e03f      	b.n	800171e <BNO080_parseInputReport+0x1fe>
			quatAccuracy = status;
 800169e:	7bfb      	ldrb	r3, [r7, #15]
 80016a0:	b29a      	uxth	r2, r3
 80016a2:	4b35      	ldr	r3, [pc, #212]	; (8001778 <BNO080_parseInputReport+0x258>)
 80016a4:	801a      	strh	r2, [r3, #0]
			rawQuatI = data1;
 80016a6:	4a35      	ldr	r2, [pc, #212]	; (800177c <BNO080_parseInputReport+0x25c>)
 80016a8:	89bb      	ldrh	r3, [r7, #12]
 80016aa:	8013      	strh	r3, [r2, #0]
			rawQuatJ = data2;
 80016ac:	4a34      	ldr	r2, [pc, #208]	; (8001780 <BNO080_parseInputReport+0x260>)
 80016ae:	897b      	ldrh	r3, [r7, #10]
 80016b0:	8013      	strh	r3, [r2, #0]
			rawQuatK = data3;
 80016b2:	4a34      	ldr	r2, [pc, #208]	; (8001784 <BNO080_parseInputReport+0x264>)
 80016b4:	893b      	ldrh	r3, [r7, #8]
 80016b6:	8013      	strh	r3, [r2, #0]
			rawQuatReal = data4;
 80016b8:	4a33      	ldr	r2, [pc, #204]	; (8001788 <BNO080_parseInputReport+0x268>)
 80016ba:	8afb      	ldrh	r3, [r7, #22]
 80016bc:	8013      	strh	r3, [r2, #0]
			rawQuatRadianAccuracy = data5; //Only available on rotation vector, not game rot vector
 80016be:	4a33      	ldr	r2, [pc, #204]	; (800178c <BNO080_parseInputReport+0x26c>)
 80016c0:	8abb      	ldrh	r3, [r7, #20]
 80016c2:	8013      	strh	r3, [r2, #0]
			break;
 80016c4:	e02b      	b.n	800171e <BNO080_parseInputReport+0x1fe>
			stepCount = data3; //Bytes 8/9
 80016c6:	4a32      	ldr	r2, [pc, #200]	; (8001790 <BNO080_parseInputReport+0x270>)
 80016c8:	893b      	ldrh	r3, [r7, #8]
 80016ca:	8013      	strh	r3, [r2, #0]
			break;
 80016cc:	e027      	b.n	800171e <BNO080_parseInputReport+0x1fe>
			stabilityClassifier = shtpData[5 + 4]; //Byte 4 only
 80016ce:	4b18      	ldr	r3, [pc, #96]	; (8001730 <BNO080_parseInputReport+0x210>)
 80016d0:	7a5a      	ldrb	r2, [r3, #9]
 80016d2:	4b30      	ldr	r3, [pc, #192]	; (8001794 <BNO080_parseInputReport+0x274>)
 80016d4:	701a      	strb	r2, [r3, #0]
			break;
 80016d6:	e022      	b.n	800171e <BNO080_parseInputReport+0x1fe>
			activityClassifier = shtpData[5 + 5]; //Most likely state
 80016d8:	4b15      	ldr	r3, [pc, #84]	; (8001730 <BNO080_parseInputReport+0x210>)
 80016da:	7a9a      	ldrb	r2, [r3, #10]
 80016dc:	4b2e      	ldr	r3, [pc, #184]	; (8001798 <BNO080_parseInputReport+0x278>)
 80016de:	701a      	strb	r2, [r3, #0]
			for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 80016e0:	2300      	movs	r3, #0
 80016e2:	74fb      	strb	r3, [r7, #19]
 80016e4:	e00c      	b.n	8001700 <BNO080_parseInputReport+0x1e0>
				_activityConfidences[x] = shtpData[11 + x]; //5 bytes of timestamp, byte 6 is first confidence byte
 80016e6:	7cfb      	ldrb	r3, [r7, #19]
 80016e8:	f103 020b 	add.w	r2, r3, #11
 80016ec:	4b2b      	ldr	r3, [pc, #172]	; (800179c <BNO080_parseInputReport+0x27c>)
 80016ee:	6819      	ldr	r1, [r3, #0]
 80016f0:	7cfb      	ldrb	r3, [r7, #19]
 80016f2:	440b      	add	r3, r1
 80016f4:	490e      	ldr	r1, [pc, #56]	; (8001730 <BNO080_parseInputReport+0x210>)
 80016f6:	5c8a      	ldrb	r2, [r1, r2]
 80016f8:	701a      	strb	r2, [r3, #0]
			for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 80016fa:	7cfb      	ldrb	r3, [r7, #19]
 80016fc:	3301      	adds	r3, #1
 80016fe:	74fb      	strb	r3, [r7, #19]
 8001700:	7cfb      	ldrb	r3, [r7, #19]
 8001702:	2b08      	cmp	r3, #8
 8001704:	d9ef      	bls.n	80016e6 <BNO080_parseInputReport+0x1c6>
			break;
 8001706:	e00a      	b.n	800171e <BNO080_parseInputReport+0x1fe>
			uint8_t command = shtpData[5 + 2]; //This is the Command byte of the response
 8001708:	4b09      	ldr	r3, [pc, #36]	; (8001730 <BNO080_parseInputReport+0x210>)
 800170a:	79db      	ldrb	r3, [r3, #7]
 800170c:	71fb      	strb	r3, [r7, #7]
			if (command == COMMAND_ME_CALIBRATE)
 800170e:	79fb      	ldrb	r3, [r7, #7]
 8001710:	2b07      	cmp	r3, #7
 8001712:	d103      	bne.n	800171c <BNO080_parseInputReport+0x1fc>
				calibrationStatus = shtpData[5 + 5]; //R0 - Status (0 = success, non-zero = fail)
 8001714:	4b06      	ldr	r3, [pc, #24]	; (8001730 <BNO080_parseInputReport+0x210>)
 8001716:	7a9a      	ldrb	r2, [r3, #10]
 8001718:	4b21      	ldr	r3, [pc, #132]	; (80017a0 <BNO080_parseInputReport+0x280>)
 800171a:	701a      	strb	r2, [r3, #0]
			break;
 800171c:	bf00      	nop
}
 800171e:	bf00      	nop
 8001720:	371c      	adds	r7, #28
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	2000022c 	.word	0x2000022c
 8001730:	20000280 	.word	0x20000280
 8001734:	20000234 	.word	0x20000234
 8001738:	20000308 	.word	0x20000308
 800173c:	20000300 	.word	0x20000300
 8001740:	2000030c 	.word	0x2000030c
 8001744:	2000026a 	.word	0x2000026a
 8001748:	20000266 	.word	0x20000266
 800174c:	2000023a 	.word	0x2000023a
 8001750:	20000304 	.word	0x20000304
 8001754:	20000276 	.word	0x20000276
 8001758:	20000278 	.word	0x20000278
 800175c:	2000027a 	.word	0x2000027a
 8001760:	20000262 	.word	0x20000262
 8001764:	20000260 	.word	0x20000260
 8001768:	20000230 	.word	0x20000230
 800176c:	20000264 	.word	0x20000264
 8001770:	20000306 	.word	0x20000306
 8001774:	20000268 	.word	0x20000268
 8001778:	20000238 	.word	0x20000238
 800177c:	2000030a 	.word	0x2000030a
 8001780:	20000274 	.word	0x20000274
 8001784:	20000228 	.word	0x20000228
 8001788:	20000232 	.word	0x20000232
 800178c:	2000026c 	.word	0x2000026c
 8001790:	2000030e 	.word	0x2000030e
 8001794:	2000027c 	.word	0x2000027c
 8001798:	20000302 	.word	0x20000302
 800179c:	20000270 	.word	0x20000270
 80017a0:	20000303 	.word	0x20000303

080017a4 <BNO080_getQuatI>:

//Return the rotation vector quaternion I
float BNO080_getQuatI()
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatI, rotationVector_Q1);
 80017a8:	4b07      	ldr	r3, [pc, #28]	; (80017c8 <BNO080_getQuatI+0x24>)
 80017aa:	881b      	ldrh	r3, [r3, #0]
 80017ac:	b21a      	sxth	r2, r3
 80017ae:	4b07      	ldr	r3, [pc, #28]	; (80017cc <BNO080_getQuatI+0x28>)
 80017b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	4619      	mov	r1, r3
 80017b8:	4610      	mov	r0, r2
 80017ba:	f000 f861 	bl	8001880 <BNO080_qToFloat>
 80017be:	eef0 7a40 	vmov.f32	s15, s0
}
 80017c2:	eeb0 0a67 	vmov.f32	s0, s15
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	2000030a 	.word	0x2000030a
 80017cc:	20000000 	.word	0x20000000

080017d0 <BNO080_getQuatJ>:

//Return the rotation vector quaternion J
float BNO080_getQuatJ()
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatJ, rotationVector_Q1);
 80017d4:	4b07      	ldr	r3, [pc, #28]	; (80017f4 <BNO080_getQuatJ+0x24>)
 80017d6:	881b      	ldrh	r3, [r3, #0]
 80017d8:	b21a      	sxth	r2, r3
 80017da:	4b07      	ldr	r3, [pc, #28]	; (80017f8 <BNO080_getQuatJ+0x28>)
 80017dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	4619      	mov	r1, r3
 80017e4:	4610      	mov	r0, r2
 80017e6:	f000 f84b 	bl	8001880 <BNO080_qToFloat>
 80017ea:	eef0 7a40 	vmov.f32	s15, s0
}
 80017ee:	eeb0 0a67 	vmov.f32	s0, s15
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	20000274 	.word	0x20000274
 80017f8:	20000000 	.word	0x20000000

080017fc <BNO080_getQuatK>:

//Return the rotation vector quaternion K
float BNO080_getQuatK()
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatK, rotationVector_Q1);
 8001800:	4b07      	ldr	r3, [pc, #28]	; (8001820 <BNO080_getQuatK+0x24>)
 8001802:	881b      	ldrh	r3, [r3, #0]
 8001804:	b21a      	sxth	r2, r3
 8001806:	4b07      	ldr	r3, [pc, #28]	; (8001824 <BNO080_getQuatK+0x28>)
 8001808:	f9b3 3000 	ldrsh.w	r3, [r3]
 800180c:	b2db      	uxtb	r3, r3
 800180e:	4619      	mov	r1, r3
 8001810:	4610      	mov	r0, r2
 8001812:	f000 f835 	bl	8001880 <BNO080_qToFloat>
 8001816:	eef0 7a40 	vmov.f32	s15, s0
}
 800181a:	eeb0 0a67 	vmov.f32	s0, s15
 800181e:	bd80      	pop	{r7, pc}
 8001820:	20000228 	.word	0x20000228
 8001824:	20000000 	.word	0x20000000

08001828 <BNO080_getQuatReal>:

//Return the rotation vector quaternion Real
float BNO080_getQuatReal()
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatReal, rotationVector_Q1);
 800182c:	4b07      	ldr	r3, [pc, #28]	; (800184c <BNO080_getQuatReal+0x24>)
 800182e:	881b      	ldrh	r3, [r3, #0]
 8001830:	b21a      	sxth	r2, r3
 8001832:	4b07      	ldr	r3, [pc, #28]	; (8001850 <BNO080_getQuatReal+0x28>)
 8001834:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001838:	b2db      	uxtb	r3, r3
 800183a:	4619      	mov	r1, r3
 800183c:	4610      	mov	r0, r2
 800183e:	f000 f81f 	bl	8001880 <BNO080_qToFloat>
 8001842:	eef0 7a40 	vmov.f32	s15, s0
}
 8001846:	eeb0 0a67 	vmov.f32	s0, s15
 800184a:	bd80      	pop	{r7, pc}
 800184c:	20000232 	.word	0x20000232
 8001850:	20000000 	.word	0x20000000

08001854 <BNO080_getQuatRadianAccuracy>:

//Return the rotation vector accuracy
float BNO080_getQuatRadianAccuracy()
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatRadianAccuracy, rotationVector_Q1);
 8001858:	4b07      	ldr	r3, [pc, #28]	; (8001878 <BNO080_getQuatRadianAccuracy+0x24>)
 800185a:	881b      	ldrh	r3, [r3, #0]
 800185c:	b21a      	sxth	r2, r3
 800185e:	4b07      	ldr	r3, [pc, #28]	; (800187c <BNO080_getQuatRadianAccuracy+0x28>)
 8001860:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001864:	b2db      	uxtb	r3, r3
 8001866:	4619      	mov	r1, r3
 8001868:	4610      	mov	r0, r2
 800186a:	f000 f809 	bl	8001880 <BNO080_qToFloat>
 800186e:	eef0 7a40 	vmov.f32	s15, s0
}
 8001872:	eeb0 0a67 	vmov.f32	s0, s15
 8001876:	bd80      	pop	{r7, pc}
 8001878:	2000026c 	.word	0x2000026c
 800187c:	20000000 	.word	0x20000000

08001880 <BNO080_qToFloat>:
}

//Given a register value and a Q point, convert to float
//See https://en.wikipedia.org/wiki/Q_(number_format)
float BNO080_qToFloat(int16_t fixedPointValue, uint8_t qPoint)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	ed2d 8b02 	vpush	{d8}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	460a      	mov	r2, r1
 800188e:	80fb      	strh	r3, [r7, #6]
 8001890:	4613      	mov	r3, r2
 8001892:	717b      	strb	r3, [r7, #5]
	return fixedPointValue * powf(2, qPoint * -1);
 8001894:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001898:	ee07 3a90 	vmov	s15, r3
 800189c:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80018a0:	797b      	ldrb	r3, [r7, #5]
 80018a2:	425b      	negs	r3, r3
 80018a4:	ee07 3a90 	vmov	s15, r3
 80018a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018ac:	eef0 0a67 	vmov.f32	s1, s15
 80018b0:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80018b4:	f00a fe78 	bl	800c5a8 <powf>
 80018b8:	eef0 7a40 	vmov.f32	s15, s0
 80018bc:	ee68 7a27 	vmul.f32	s15, s16, s15
}
 80018c0:	eeb0 0a67 	vmov.f32	s0, s15
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	ecbd 8b02 	vpop	{d8}
 80018cc:	bd80      	pop	{r7, pc}

080018ce <BNO080_enableRotationVector>:

//Sends the packet to enable the rotation vector
void BNO080_enableRotationVector(uint16_t timeBetweenReports)
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b082      	sub	sp, #8
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	4603      	mov	r3, r0
 80018d6:	80fb      	strh	r3, [r7, #6]
	BNO080_setFeatureCommand(SENSOR_REPORTID_ROTATION_VECTOR, timeBetweenReports, 0);
 80018d8:	88fb      	ldrh	r3, [r7, #6]
 80018da:	2200      	movs	r2, #0
 80018dc:	4619      	mov	r1, r3
 80018de:	2005      	movs	r0, #5
 80018e0:	f000 f804 	bl	80018ec <BNO080_setFeatureCommand>
}
 80018e4:	bf00      	nop
 80018e6:	3708      	adds	r7, #8
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}

080018ec <BNO080_setFeatureCommand>:
}

//Given a sensor's report ID, this tells the BNO080 to begin reporting the values
//Also sets the specific config word. Useful for personal activity classifier
void BNO080_setFeatureCommand(uint8_t reportID, uint32_t microsBetweenReports, uint32_t specificConfig)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	4603      	mov	r3, r0
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	607a      	str	r2, [r7, #4]
 80018f8:	73fb      	strb	r3, [r7, #15]
	shtpData[0] = SHTP_REPORT_SET_FEATURE_COMMAND;	 //Set feature command. Reference page 55
 80018fa:	4b24      	ldr	r3, [pc, #144]	; (800198c <BNO080_setFeatureCommand+0xa0>)
 80018fc:	22fd      	movs	r2, #253	; 0xfd
 80018fe:	701a      	strb	r2, [r3, #0]
	shtpData[1] = reportID;						 //Feature Report ID. 0x01 = Accelerometer, 0x05 = Rotation vector
 8001900:	4a22      	ldr	r2, [pc, #136]	; (800198c <BNO080_setFeatureCommand+0xa0>)
 8001902:	7bfb      	ldrb	r3, [r7, #15]
 8001904:	7053      	strb	r3, [r2, #1]
	shtpData[2] = 0;							 //Feature flags
 8001906:	4b21      	ldr	r3, [pc, #132]	; (800198c <BNO080_setFeatureCommand+0xa0>)
 8001908:	2200      	movs	r2, #0
 800190a:	709a      	strb	r2, [r3, #2]
	shtpData[3] = 0;							 //Change sensitivity (LSB)
 800190c:	4b1f      	ldr	r3, [pc, #124]	; (800198c <BNO080_setFeatureCommand+0xa0>)
 800190e:	2200      	movs	r2, #0
 8001910:	70da      	strb	r2, [r3, #3]
	shtpData[4] = 0;							 //Change sensitivity (MSB)
 8001912:	4b1e      	ldr	r3, [pc, #120]	; (800198c <BNO080_setFeatureCommand+0xa0>)
 8001914:	2200      	movs	r2, #0
 8001916:	711a      	strb	r2, [r3, #4]
	shtpData[5] = (microsBetweenReports >> 0) & 0xFF;  //Report interval (LSB) in microseconds. 0x7A120 = 500ms
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	b2da      	uxtb	r2, r3
 800191c:	4b1b      	ldr	r3, [pc, #108]	; (800198c <BNO080_setFeatureCommand+0xa0>)
 800191e:	715a      	strb	r2, [r3, #5]
	shtpData[6] = (microsBetweenReports >> 8) & 0xFF;  //Report interval
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	0a1b      	lsrs	r3, r3, #8
 8001924:	b2da      	uxtb	r2, r3
 8001926:	4b19      	ldr	r3, [pc, #100]	; (800198c <BNO080_setFeatureCommand+0xa0>)
 8001928:	719a      	strb	r2, [r3, #6]
	shtpData[7] = (microsBetweenReports >> 16) & 0xFF; //Report interval
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	0c1b      	lsrs	r3, r3, #16
 800192e:	b2da      	uxtb	r2, r3
 8001930:	4b16      	ldr	r3, [pc, #88]	; (800198c <BNO080_setFeatureCommand+0xa0>)
 8001932:	71da      	strb	r2, [r3, #7]
	shtpData[8] = (microsBetweenReports >> 24) & 0xFF; //Report interval (MSB)
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	0e1b      	lsrs	r3, r3, #24
 8001938:	b2da      	uxtb	r2, r3
 800193a:	4b14      	ldr	r3, [pc, #80]	; (800198c <BNO080_setFeatureCommand+0xa0>)
 800193c:	721a      	strb	r2, [r3, #8]
	shtpData[9] = 0;							 //Batch Interval (LSB)
 800193e:	4b13      	ldr	r3, [pc, #76]	; (800198c <BNO080_setFeatureCommand+0xa0>)
 8001940:	2200      	movs	r2, #0
 8001942:	725a      	strb	r2, [r3, #9]
	shtpData[10] = 0;							 //Batch Interval
 8001944:	4b11      	ldr	r3, [pc, #68]	; (800198c <BNO080_setFeatureCommand+0xa0>)
 8001946:	2200      	movs	r2, #0
 8001948:	729a      	strb	r2, [r3, #10]
	shtpData[11] = 0;							 //Batch Interval
 800194a:	4b10      	ldr	r3, [pc, #64]	; (800198c <BNO080_setFeatureCommand+0xa0>)
 800194c:	2200      	movs	r2, #0
 800194e:	72da      	strb	r2, [r3, #11]
	shtpData[12] = 0;							 //Batch Interval (MSB)
 8001950:	4b0e      	ldr	r3, [pc, #56]	; (800198c <BNO080_setFeatureCommand+0xa0>)
 8001952:	2200      	movs	r2, #0
 8001954:	731a      	strb	r2, [r3, #12]
	shtpData[13] = (specificConfig >> 0) & 0xFF;	   	 //Sensor-specific config (LSB)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	b2da      	uxtb	r2, r3
 800195a:	4b0c      	ldr	r3, [pc, #48]	; (800198c <BNO080_setFeatureCommand+0xa0>)
 800195c:	735a      	strb	r2, [r3, #13]
	shtpData[14] = (specificConfig >> 8) & 0xFF;	   	 //Sensor-specific config
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	0a1b      	lsrs	r3, r3, #8
 8001962:	b2da      	uxtb	r2, r3
 8001964:	4b09      	ldr	r3, [pc, #36]	; (800198c <BNO080_setFeatureCommand+0xa0>)
 8001966:	739a      	strb	r2, [r3, #14]
	shtpData[15] = (specificConfig >> 16) & 0xFF;	 //Sensor-specific config
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	0c1b      	lsrs	r3, r3, #16
 800196c:	b2da      	uxtb	r2, r3
 800196e:	4b07      	ldr	r3, [pc, #28]	; (800198c <BNO080_setFeatureCommand+0xa0>)
 8001970:	73da      	strb	r2, [r3, #15]
	shtpData[16] = (specificConfig >> 24) & 0xFF;	 //Sensor-specific config (MSB)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	0e1b      	lsrs	r3, r3, #24
 8001976:	b2da      	uxtb	r2, r3
 8001978:	4b04      	ldr	r3, [pc, #16]	; (800198c <BNO080_setFeatureCommand+0xa0>)
 800197a:	741a      	strb	r2, [r3, #16]

	//Transmit packet on channel 2, 17 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 17);
 800197c:	2111      	movs	r1, #17
 800197e:	2002      	movs	r0, #2
 8001980:	f000 f89a 	bl	8001ab8 <BNO080_sendPacket>
}
 8001984:	bf00      	nop
 8001986:	3710      	adds	r7, #16
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	20000280 	.word	0x20000280

08001990 <BNO080_waitForSPI>:

//Blocking wait for BNO080 to assert (pull low) the INT pin
//indicating it's ready for comm. Can take more than 104ms
//after a hardware reset
int BNO080_waitForSPI(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 8001996:	2300      	movs	r3, #0
 8001998:	607b      	str	r3, [r7, #4]
 800199a:	e00c      	b.n	80019b6 <BNO080_waitForSPI+0x26>
	{
		if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 0)
 800199c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019a0:	480b      	ldr	r0, [pc, #44]	; (80019d0 <BNO080_waitForSPI+0x40>)
 80019a2:	f7ff fbc1 	bl	8001128 <LL_GPIO_IsInputPinSet>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d101      	bne.n	80019b0 <BNO080_waitForSPI+0x20>
		{
			//printf("\nData available\n");
			return (1);
 80019ac:	2301      	movs	r3, #1
 80019ae:	e00a      	b.n	80019c6 <BNO080_waitForSPI+0x36>
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	3301      	adds	r3, #1
 80019b4:	607b      	str	r3, [r7, #4]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80019bc:	d1ee      	bne.n	800199c <BNO080_waitForSPI+0xc>
		}
		//printf("SPI Wait %d\n", counter);
	}
	printf("\nData not available\n");
 80019be:	4805      	ldr	r0, [pc, #20]	; (80019d4 <BNO080_waitForSPI+0x44>)
 80019c0:	f008 fede 	bl	800a780 <puts>
	return (0);
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	40020800 	.word	0x40020800
 80019d4:	0800d550 	.word	0x0800d550

080019d8 <BNO080_receivePacket>:


//Check to see if there is any new data available
//Read the contents of the incoming packet into the shtpData array
int BNO080_receivePacket(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
	uint8_t incoming;

	if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 1)
 80019de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019e2:	4831      	ldr	r0, [pc, #196]	; (8001aa8 <BNO080_receivePacket+0xd0>)
 80019e4:	f7ff fba0 	bl	8001128 <LL_GPIO_IsInputPinSet>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d101      	bne.n	80019f2 <BNO080_receivePacket+0x1a>
		return (0); //Data is not available
 80019ee:	2300      	movs	r3, #0
 80019f0:	e056      	b.n	8001aa0 <BNO080_receivePacket+0xc8>

	//Old way: if (BNO080_waitForSPI() == 0) return (0); //Something went wrong

	//Get first four bytes to find out how much data we need to read

	CHIP_SELECT(BNO080);
 80019f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019f6:	482d      	ldr	r0, [pc, #180]	; (8001aac <BNO080_receivePacket+0xd4>)
 80019f8:	f7ff fbb9 	bl	800116e <LL_GPIO_ResetOutputPin>

	//Get the first four bytes, aka the packet header
	uint8_t packetLSB = SPI2_SendByte(0);
 80019fc:	2000      	movs	r0, #0
 80019fe:	f7ff fd23 	bl	8001448 <SPI2_SendByte>
 8001a02:	4603      	mov	r3, r0
 8001a04:	737b      	strb	r3, [r7, #13]
	uint8_t packetMSB = SPI2_SendByte(0);
 8001a06:	2000      	movs	r0, #0
 8001a08:	f7ff fd1e 	bl	8001448 <SPI2_SendByte>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	733b      	strb	r3, [r7, #12]
	uint8_t channelNumber = SPI2_SendByte(0);
 8001a10:	2000      	movs	r0, #0
 8001a12:	f7ff fd19 	bl	8001448 <SPI2_SendByte>
 8001a16:	4603      	mov	r3, r0
 8001a18:	72fb      	strb	r3, [r7, #11]
	uint8_t sequenceNumber = SPI2_SendByte(0); //Not sure if we need to store this or not
 8001a1a:	2000      	movs	r0, #0
 8001a1c:	f7ff fd14 	bl	8001448 <SPI2_SendByte>
 8001a20:	4603      	mov	r3, r0
 8001a22:	72bb      	strb	r3, [r7, #10]

	//Store the header info
	shtpHeader[0] = packetLSB;
 8001a24:	4a22      	ldr	r2, [pc, #136]	; (8001ab0 <BNO080_receivePacket+0xd8>)
 8001a26:	7b7b      	ldrb	r3, [r7, #13]
 8001a28:	7013      	strb	r3, [r2, #0]
	shtpHeader[1] = packetMSB;
 8001a2a:	4a21      	ldr	r2, [pc, #132]	; (8001ab0 <BNO080_receivePacket+0xd8>)
 8001a2c:	7b3b      	ldrb	r3, [r7, #12]
 8001a2e:	7053      	strb	r3, [r2, #1]
	shtpHeader[2] = channelNumber;
 8001a30:	4a1f      	ldr	r2, [pc, #124]	; (8001ab0 <BNO080_receivePacket+0xd8>)
 8001a32:	7afb      	ldrb	r3, [r7, #11]
 8001a34:	7093      	strb	r3, [r2, #2]
	shtpHeader[3] = sequenceNumber;
 8001a36:	4a1e      	ldr	r2, [pc, #120]	; (8001ab0 <BNO080_receivePacket+0xd8>)
 8001a38:	7abb      	ldrb	r3, [r7, #10]
 8001a3a:	70d3      	strb	r3, [r2, #3]

	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)packetMSB << 8 | packetLSB);
 8001a3c:	7b3b      	ldrb	r3, [r7, #12]
 8001a3e:	021b      	lsls	r3, r3, #8
 8001a40:	b21a      	sxth	r2, r3
 8001a42:	7b7b      	ldrb	r3, [r7, #13]
 8001a44:	b21b      	sxth	r3, r3
 8001a46:	4313      	orrs	r3, r2
 8001a48:	813b      	strh	r3, [r7, #8]
	dataLength &= 0x7fff; //Clear the MSbit.
 8001a4a:	893b      	ldrh	r3, [r7, #8]
 8001a4c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001a50:	813b      	strh	r3, [r7, #8]
	//This bit indicates if this package is a continuation of the last. Ignore it for now.
	//TODO catch this as an error and exit
	if (dataLength == 0)
 8001a52:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d101      	bne.n	8001a5e <BNO080_receivePacket+0x86>
	{
		//Packet is empty
		return (0); //All done
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	e020      	b.n	8001aa0 <BNO080_receivePacket+0xc8>
	}
	dataLength -= 4; //Remove the header bytes from the data count
 8001a5e:	893b      	ldrh	r3, [r7, #8]
 8001a60:	3b04      	subs	r3, #4
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	813b      	strh	r3, [r7, #8]

	//printf("length: %d\n", dataLength);

	//Read incoming data into the shtpData array
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 8001a66:	2300      	movs	r3, #0
 8001a68:	81fb      	strh	r3, [r7, #14]
 8001a6a:	e00e      	b.n	8001a8a <BNO080_receivePacket+0xb2>
	{
		incoming = SPI2_SendByte(0xFF);
 8001a6c:	20ff      	movs	r0, #255	; 0xff
 8001a6e:	f7ff fceb 	bl	8001448 <SPI2_SendByte>
 8001a72:	4603      	mov	r3, r0
 8001a74:	71fb      	strb	r3, [r7, #7]
		//printf("%d ", incoming);
		if (dataSpot < MAX_PACKET_SIZE)	//BNO080 can respond with upto 270 bytes, avoid overflow
 8001a76:	89fb      	ldrh	r3, [r7, #14]
 8001a78:	2b7f      	cmp	r3, #127	; 0x7f
 8001a7a:	d803      	bhi.n	8001a84 <BNO080_receivePacket+0xac>
			shtpData[dataSpot] = incoming; //Store data into the shtpData array
 8001a7c:	89fb      	ldrh	r3, [r7, #14]
 8001a7e:	490d      	ldr	r1, [pc, #52]	; (8001ab4 <BNO080_receivePacket+0xdc>)
 8001a80:	79fa      	ldrb	r2, [r7, #7]
 8001a82:	54ca      	strb	r2, [r1, r3]
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 8001a84:	89fb      	ldrh	r3, [r7, #14]
 8001a86:	3301      	adds	r3, #1
 8001a88:	81fb      	strh	r3, [r7, #14]
 8001a8a:	89fa      	ldrh	r2, [r7, #14]
 8001a8c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	dbeb      	blt.n	8001a6c <BNO080_receivePacket+0x94>
	}
	//printf("\n");

	CHIP_DESELECT(BNO080); //Release BNO080
 8001a94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a98:	4804      	ldr	r0, [pc, #16]	; (8001aac <BNO080_receivePacket+0xd4>)
 8001a9a:	f7ff fb5a 	bl	8001152 <LL_GPIO_SetOutputPin>
	return (1); //We're done!
 8001a9e:	2301      	movs	r3, #1
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3710      	adds	r7, #16
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	40020800 	.word	0x40020800
 8001aac:	40020400 	.word	0x40020400
 8001ab0:	2000022c 	.word	0x2000022c
 8001ab4:	20000280 	.word	0x20000280

08001ab8 <BNO080_sendPacket>:

//Given the data packet, send the header then the data
//Returns false if sensor does not ACK
//TODO - Arduino has a max 32 byte send. Break sending into multi packets if needed.
int BNO080_sendPacket(uint8_t channelNumber, uint8_t dataLength)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	4603      	mov	r3, r0
 8001ac0:	460a      	mov	r2, r1
 8001ac2:	71fb      	strb	r3, [r7, #7]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	71bb      	strb	r3, [r7, #6]
	uint8_t packetLength = dataLength + 4; //Add four bytes for the header
 8001ac8:	79bb      	ldrb	r3, [r7, #6]
 8001aca:	3304      	adds	r3, #4
 8001acc:	73bb      	strb	r3, [r7, #14]

	//Wait for BNO080 to indicate it is available for communication
	if (BNO080_waitForSPI() == 0)
 8001ace:	f7ff ff5f 	bl	8001990 <BNO080_waitForSPI>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d101      	bne.n	8001adc <BNO080_sendPacket+0x24>
		return (0); //Data is not available
 8001ad8:	2300      	movs	r3, #0
 8001ada:	e032      	b.n	8001b42 <BNO080_sendPacket+0x8a>

	//BNO080 has max CLK of 3MHz, MSB first,
	//The BNO080 uses CPOL = 1 and CPHA = 1. This is mode3
	CHIP_SELECT(BNO080);
 8001adc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ae0:	481a      	ldr	r0, [pc, #104]	; (8001b4c <BNO080_sendPacket+0x94>)
 8001ae2:	f7ff fb44 	bl	800116e <LL_GPIO_ResetOutputPin>

	//Send the 4 byte packet header
	SPI2_SendByte(packetLength & 0xFF);			//Packet length LSB
 8001ae6:	7bbb      	ldrb	r3, [r7, #14]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7ff fcad 	bl	8001448 <SPI2_SendByte>
	SPI2_SendByte(packetLength >> 8);				//Packet length MSB
 8001aee:	7bbb      	ldrb	r3, [r7, #14]
 8001af0:	121b      	asrs	r3, r3, #8
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff fca7 	bl	8001448 <SPI2_SendByte>
	SPI2_SendByte(channelNumber);					//Channel number
 8001afa:	79fb      	ldrb	r3, [r7, #7]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff fca3 	bl	8001448 <SPI2_SendByte>
	SPI2_SendByte(sequenceNumber[channelNumber]++); 	//Send the sequence number, increments with each packet sent, different counter for each channel
 8001b02:	79fb      	ldrb	r3, [r7, #7]
 8001b04:	4a12      	ldr	r2, [pc, #72]	; (8001b50 <BNO080_sendPacket+0x98>)
 8001b06:	5cd2      	ldrb	r2, [r2, r3]
 8001b08:	1c51      	adds	r1, r2, #1
 8001b0a:	b2c8      	uxtb	r0, r1
 8001b0c:	4910      	ldr	r1, [pc, #64]	; (8001b50 <BNO080_sendPacket+0x98>)
 8001b0e:	54c8      	strb	r0, [r1, r3]
 8001b10:	4610      	mov	r0, r2
 8001b12:	f7ff fc99 	bl	8001448 <SPI2_SendByte>

	//Send the user's data packet
	for (uint8_t i = 0; i < dataLength; i++)
 8001b16:	2300      	movs	r3, #0
 8001b18:	73fb      	strb	r3, [r7, #15]
 8001b1a:	e008      	b.n	8001b2e <BNO080_sendPacket+0x76>
	{
		SPI2_SendByte(shtpData[i]);
 8001b1c:	7bfb      	ldrb	r3, [r7, #15]
 8001b1e:	4a0d      	ldr	r2, [pc, #52]	; (8001b54 <BNO080_sendPacket+0x9c>)
 8001b20:	5cd3      	ldrb	r3, [r2, r3]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7ff fc90 	bl	8001448 <SPI2_SendByte>
	for (uint8_t i = 0; i < dataLength; i++)
 8001b28:	7bfb      	ldrb	r3, [r7, #15]
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	73fb      	strb	r3, [r7, #15]
 8001b2e:	7bfa      	ldrb	r2, [r7, #15]
 8001b30:	79bb      	ldrb	r3, [r7, #6]
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d3f2      	bcc.n	8001b1c <BNO080_sendPacket+0x64>
	}

	CHIP_DESELECT(BNO080);
 8001b36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b3a:	4804      	ldr	r0, [pc, #16]	; (8001b4c <BNO080_sendPacket+0x94>)
 8001b3c:	f7ff fb09 	bl	8001152 <LL_GPIO_SetOutputPin>

	return (1);
 8001b40:	2301      	movs	r3, #1
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3710      	adds	r7, #16
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	40020400 	.word	0x40020400
 8001b50:	20000204 	.word	0x20000204
 8001b54:	20000280 	.word	0x20000280

08001b58 <iBus_Check_CHECKSUM>:

#include "FS_iA6B.h"

FSiA6B_iBus iBus;

unsigned char iBus_Check_CHECKSUM(unsigned char *data, unsigned char len) {
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	460b      	mov	r3, r1
 8001b62:	70fb      	strb	r3, [r7, #3]

	unsigned short checksum = 0xffff;
 8001b64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b68:	81fb      	strh	r3, [r7, #14]

	for (int i = 0; i < len - 2; i++) {
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	60bb      	str	r3, [r7, #8]
 8001b6e:	e00a      	b.n	8001b86 <iBus_Check_CHECKSUM+0x2e>
		checksum = checksum - data[i];
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	4413      	add	r3, r2
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	b29b      	uxth	r3, r3
 8001b7a:	89fa      	ldrh	r2, [r7, #14]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	81fb      	strh	r3, [r7, #14]
	for (int i = 0; i < len - 2; i++) {
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	3301      	adds	r3, #1
 8001b84:	60bb      	str	r3, [r7, #8]
 8001b86:	78fb      	ldrb	r3, [r7, #3]
 8001b88:	3b02      	subs	r3, #2
 8001b8a:	68ba      	ldr	r2, [r7, #8]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	dbef      	blt.n	8001b70 <iBus_Check_CHECKSUM+0x18>
	}

	return ((checksum & 0x00ff) == data[30]) && ((checksum >> 8) == data[31]);
 8001b90:	89fb      	ldrh	r3, [r7, #14]
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	321e      	adds	r2, #30
 8001b98:	7812      	ldrb	r2, [r2, #0]
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d10a      	bne.n	8001bb4 <iBus_Check_CHECKSUM+0x5c>
 8001b9e:	89fb      	ldrh	r3, [r7, #14]
 8001ba0:	0a1b      	lsrs	r3, r3, #8
 8001ba2:	b29a      	uxth	r2, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	331f      	adds	r3, #31
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d101      	bne.n	8001bb4 <iBus_Check_CHECKSUM+0x5c>
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e000      	b.n	8001bb6 <iBus_Check_CHECKSUM+0x5e>
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	b2db      	uxtb	r3, r3
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3714      	adds	r7, #20
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <iBus_Parsing>:

void iBus_Parsing(unsigned char *data, FSiA6B_iBus *iBus) {
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
	iBus->RH = (data[2] | data[3] << 8) & 0x0fff;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	3302      	adds	r3, #2
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	b21a      	sxth	r2, r3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	3303      	adds	r3, #3
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	021b      	lsls	r3, r3, #8
 8001bde:	b21b      	sxth	r3, r3
 8001be0:	4313      	orrs	r3, r2
 8001be2:	b21b      	sxth	r3, r3
 8001be4:	b29b      	uxth	r3, r3
 8001be6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bea:	b29a      	uxth	r2, r3
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	801a      	strh	r2, [r3, #0]
	iBus->RV = (data[4] | data[5] << 8) & 0x0fff;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	3304      	adds	r3, #4
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	b21a      	sxth	r2, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	3305      	adds	r3, #5
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	021b      	lsls	r3, r3, #8
 8001c00:	b21b      	sxth	r3, r3
 8001c02:	4313      	orrs	r3, r2
 8001c04:	b21b      	sxth	r3, r3
 8001c06:	b29b      	uxth	r3, r3
 8001c08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c0c:	b29a      	uxth	r2, r3
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	805a      	strh	r2, [r3, #2]
	iBus->LV = (data[6] | data[7] << 8) & 0x0fff;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	3306      	adds	r3, #6
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	b21a      	sxth	r2, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	3307      	adds	r3, #7
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	021b      	lsls	r3, r3, #8
 8001c22:	b21b      	sxth	r3, r3
 8001c24:	4313      	orrs	r3, r2
 8001c26:	b21b      	sxth	r3, r3
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c2e:	b29a      	uxth	r2, r3
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	809a      	strh	r2, [r3, #4]
	iBus->LH = (data[8] | data[9] << 8) & 0x0fff;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	3308      	adds	r3, #8
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	b21a      	sxth	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	3309      	adds	r3, #9
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	021b      	lsls	r3, r3, #8
 8001c44:	b21b      	sxth	r3, r3
 8001c46:	4313      	orrs	r3, r2
 8001c48:	b21b      	sxth	r3, r3
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c50:	b29a      	uxth	r2, r3
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	80da      	strh	r2, [r3, #6]
	iBus->SwA = (data[10] | data[11] << 8) & 0x0fff;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	330a      	adds	r3, #10
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	b21a      	sxth	r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	330b      	adds	r3, #11
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	021b      	lsls	r3, r3, #8
 8001c66:	b21b      	sxth	r3, r3
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	b21b      	sxth	r3, r3
 8001c6c:	b29b      	uxth	r3, r3
 8001c6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c72:	b29a      	uxth	r2, r3
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	811a      	strh	r2, [r3, #8]
	iBus->SwC = (data[12] | data[13] << 8) & 0x0fff;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	330c      	adds	r3, #12
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	b21a      	sxth	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	330d      	adds	r3, #13
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	021b      	lsls	r3, r3, #8
 8001c88:	b21b      	sxth	r3, r3
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	b21b      	sxth	r3, r3
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c94:	b29a      	uxth	r2, r3
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	819a      	strh	r2, [r3, #12]

	iBus->FailSafe = (data[13] >> 4);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	330d      	adds	r3, #13
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	091b      	lsrs	r3, r3, #4
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	b29a      	uxth	r2, r3
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	829a      	strh	r2, [r3, #20]
}
 8001caa:	bf00      	nop
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr

08001cb6 <iBus_isActiveFailSafe>:

unsigned char iBus_isActiveFailSafe(FSiA6B_iBus *iBus) {
 8001cb6:	b480      	push	{r7}
 8001cb8:	b083      	sub	sp, #12
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
	//1: Not Failsafe mode, 0: Failsafe mode
	return iBus -> FailSafe != 0;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	8a9b      	ldrh	r3, [r3, #20]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	bf14      	ite	ne
 8001cc6:	2301      	movne	r3, #1
 8001cc8:	2300      	moveq	r3, #0
 8001cca:	b2db      	uxtb	r3, r3
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <LL_SPI_Enable>:
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	601a      	str	r2, [r3, #0]
}
 8001cec:	bf00      	nop
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <LL_SPI_SetStandard>:
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f023 0210 	bic.w	r2, r3, #16
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	431a      	orrs	r2, r3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	605a      	str	r2, [r3, #4]
}
 8001d12:	bf00      	nop
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr

08001d1e <LL_SPI_IsActiveFlag_RXNE>:
{
 8001d1e:	b480      	push	{r7}
 8001d20:	b083      	sub	sp, #12
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d101      	bne.n	8001d36 <LL_SPI_IsActiveFlag_RXNE+0x18>
 8001d32:	2301      	movs	r3, #1
 8001d34:	e000      	b.n	8001d38 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8001d36:	2300      	movs	r3, #0
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <LL_SPI_IsActiveFlag_TXE>:
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f003 0302 	and.w	r3, r3, #2
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d101      	bne.n	8001d5c <LL_SPI_IsActiveFlag_TXE+0x18>
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e000      	b.n	8001d5e <LL_SPI_IsActiveFlag_TXE+0x1a>
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr

08001d6a <LL_SPI_ReceiveData8>:
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	b083      	sub	sp, #12
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_REG(SPIx->DR));
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	b2db      	uxtb	r3, r3
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <LL_SPI_TransmitData8>:
{
 8001d84:	b480      	push	{r7}
 8001d86:	b085      	sub	sp, #20
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	330c      	adds	r3, #12
 8001d94:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	78fa      	ldrb	r2, [r7, #3]
 8001d9a:	701a      	strb	r2, [r3, #0]
}
 8001d9c:	bf00      	nop
 8001d9e:	3714      	adds	r7, #20
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <LL_GPIO_IsInputPinSet>:
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	691a      	ldr	r2, [r3, #16]
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	4013      	ands	r3, r2
 8001dba:	683a      	ldr	r2, [r7, #0]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	bf0c      	ite	eq
 8001dc0:	2301      	moveq	r3, #1
 8001dc2:	2300      	movne	r3, #0
 8001dc4:	b2db      	uxtb	r3, r3
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr

08001dd2 <LL_GPIO_SetOutputPin>:
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	b083      	sub	sp, #12
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
 8001dda:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	683a      	ldr	r2, [r7, #0]
 8001de0:	619a      	str	r2, [r3, #24]
}
 8001de2:	bf00      	nop
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr

08001dee <LL_GPIO_ResetOutputPin>:
{
 8001dee:	b480      	push	{r7}
 8001df0:	b083      	sub	sp, #12
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
 8001df6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	041a      	lsls	r2, r3, #16
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	619a      	str	r2, [r3, #24]
}
 8001e00:	bf00      	nop
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <LL_AHB1_GRP1_EnableClock>:
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b085      	sub	sp, #20
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001e14:	4b08      	ldr	r3, [pc, #32]	; (8001e38 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001e16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e18:	4907      	ldr	r1, [pc, #28]	; (8001e38 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001e20:	4b05      	ldr	r3, [pc, #20]	; (8001e38 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001e22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4013      	ands	r3, r2
 8001e28:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
}
 8001e2c:	bf00      	nop
 8001e2e:	3714      	adds	r7, #20
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr
 8001e38:	40023800 	.word	0x40023800

08001e3c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b085      	sub	sp, #20
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001e44:	4b08      	ldr	r3, [pc, #32]	; (8001e68 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001e46:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e48:	4907      	ldr	r1, [pc, #28]	; (8001e68 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001e50:	4b05      	ldr	r3, [pc, #20]	; (8001e68 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001e52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	4013      	ands	r3, r2
 8001e58:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
}
 8001e5c:	bf00      	nop
 8001e5e:	3714      	adds	r7, #20
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr
 8001e68:	40023800 	.word	0x40023800

08001e6c <ICM20602_GPIO_SPI_Initialization>:
Struct_ICM20602 ICM20602;
int32_t gyro_x_offset, gyro_y_offset, gyro_z_offset; // To remove offset


void ICM20602_GPIO_SPI_Initialization(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b090      	sub	sp, #64	; 0x40
 8001e70:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001e72:	f107 0318 	add.w	r3, r7, #24
 8001e76:	2228      	movs	r2, #40	; 0x28
 8001e78:	2100      	movs	r1, #0
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f007 ffa8 	bl	8009dd0 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e80:	463b      	mov	r3, r7
 8001e82:	2200      	movs	r2, #0
 8001e84:	601a      	str	r2, [r3, #0]
 8001e86:	605a      	str	r2, [r3, #4]
 8001e88:	609a      	str	r2, [r3, #8]
 8001e8a:	60da      	str	r2, [r3, #12]
 8001e8c:	611a      	str	r2, [r3, #16]
 8001e8e:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8001e90:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001e94:	f7ff ffd2 	bl	8001e3c <LL_APB2_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001e98:	2001      	movs	r0, #1
 8001e9a:	f7ff ffb7 	bl	8001e0c <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001e9e:	2004      	movs	r0, #4
 8001ea0:	f7ff ffb4 	bl	8001e0c <LL_AHB1_GRP1_EnableClock>
	/**SPI1 GPIO Configuration
	PA5   ------> SPI1_SCK
	PA6   ------> SPI1_MISO
	PA7   ------> SPI1_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8001ea4:	23e0      	movs	r3, #224	; 0xe0
 8001ea6:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001eac:	2303      	movs	r3, #3
 8001eae:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001eb8:	2305      	movs	r3, #5
 8001eba:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ebc:	463b      	mov	r3, r7
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	4825      	ldr	r0, [pc, #148]	; (8001f58 <ICM20602_GPIO_SPI_Initialization+0xec>)
 8001ec2:	f006 fff0 	bl	8008ea6 <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001eca:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001ece:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001edc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8; //ICM-20602 MAX SPI CLK is 10MHz. But DIV2(42MHz) is available.
 8001ee2:	2310      	movs	r3, #16
 8001ee4:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001eea:	2300      	movs	r3, #0
 8001eec:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 8001eee:	230a      	movs	r3, #10
 8001ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(ICM20602_SPI_CHANNEL, &SPI_InitStruct);
 8001ef2:	f107 0318 	add.w	r3, r7, #24
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	4818      	ldr	r0, [pc, #96]	; (8001f5c <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8001efa:	f007 f9a2 	bl	8009242 <LL_SPI_Init>
	LL_SPI_SetStandard(ICM20602_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 8001efe:	2100      	movs	r1, #0
 8001f00:	4816      	ldr	r0, [pc, #88]	; (8001f5c <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8001f02:	f7ff fef9 	bl	8001cf8 <LL_SPI_SetStandard>
	/**ICM20602 GPIO Control Configuration
	 * PC4  ------> ICM20602_SPI_CS_PIN (output)
	 * PC5  ------> ICM20602_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(ICM20602_SPI_CS_PORT, ICM20602_SPI_CS_PIN);
 8001f06:	2110      	movs	r1, #16
 8001f08:	4815      	ldr	r0, [pc, #84]	; (8001f60 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8001f0a:	f7ff ff70 	bl	8001dee <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_SPI_CS_PIN;
 8001f0e:	2310      	movs	r3, #16
 8001f10:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001f12:	2301      	movs	r3, #1
 8001f14:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001f16:	2303      	movs	r3, #3
 8001f18:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_SPI_CS_PORT, &GPIO_InitStruct);
 8001f22:	463b      	mov	r3, r7
 8001f24:	4619      	mov	r1, r3
 8001f26:	480e      	ldr	r0, [pc, #56]	; (8001f60 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8001f28:	f006 ffbd 	bl	8008ea6 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_INT_PIN;
 8001f2c:	2320      	movs	r3, #32
 8001f2e:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001f30:	2300      	movs	r3, #0
 8001f32:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001f34:	2301      	movs	r3, #1
 8001f36:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_INT_PORT, &GPIO_InitStruct);
 8001f38:	463b      	mov	r3, r7
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	4808      	ldr	r0, [pc, #32]	; (8001f60 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8001f3e:	f006 ffb2 	bl	8008ea6 <LL_GPIO_Init>

	LL_SPI_Enable(ICM20602_SPI_CHANNEL);
 8001f42:	4806      	ldr	r0, [pc, #24]	; (8001f5c <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8001f44:	f7ff fec8 	bl	8001cd8 <LL_SPI_Enable>

	CHIP_DESELECT(ICM20602);
 8001f48:	2110      	movs	r1, #16
 8001f4a:	4805      	ldr	r0, [pc, #20]	; (8001f60 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8001f4c:	f7ff ff41 	bl	8001dd2 <LL_GPIO_SetOutputPin>
}
 8001f50:	bf00      	nop
 8001f52:	3740      	adds	r7, #64	; 0x40
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	40020000 	.word	0x40020000
 8001f5c:	40013000 	.word	0x40013000
 8001f60:	40020800 	.word	0x40020800

08001f64 <SPI1_SendByte>:


unsigned char SPI1_SendByte(unsigned char data)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(ICM20602_SPI_CHANNEL)==RESET);
 8001f6e:	bf00      	nop
 8001f70:	480c      	ldr	r0, [pc, #48]	; (8001fa4 <SPI1_SendByte+0x40>)
 8001f72:	f7ff fee7 	bl	8001d44 <LL_SPI_IsActiveFlag_TXE>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d0f9      	beq.n	8001f70 <SPI1_SendByte+0xc>
	LL_SPI_TransmitData8(ICM20602_SPI_CHANNEL, data);
 8001f7c:	79fb      	ldrb	r3, [r7, #7]
 8001f7e:	4619      	mov	r1, r3
 8001f80:	4808      	ldr	r0, [pc, #32]	; (8001fa4 <SPI1_SendByte+0x40>)
 8001f82:	f7ff feff 	bl	8001d84 <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(ICM20602_SPI_CHANNEL)==RESET);
 8001f86:	bf00      	nop
 8001f88:	4806      	ldr	r0, [pc, #24]	; (8001fa4 <SPI1_SendByte+0x40>)
 8001f8a:	f7ff fec8 	bl	8001d1e <LL_SPI_IsActiveFlag_RXNE>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d0f9      	beq.n	8001f88 <SPI1_SendByte+0x24>
	return LL_SPI_ReceiveData8(ICM20602_SPI_CHANNEL);
 8001f94:	4803      	ldr	r0, [pc, #12]	; (8001fa4 <SPI1_SendByte+0x40>)
 8001f96:	f7ff fee8 	bl	8001d6a <LL_SPI_ReceiveData8>
 8001f9a:	4603      	mov	r3, r0
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3708      	adds	r7, #8
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	40013000 	.word	0x40013000

08001fa8 <ICM20602_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t ICM20602_Readbyte(uint8_t reg_addr)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	4603      	mov	r3, r0
 8001fb0:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(ICM20602);
 8001fb2:	2110      	movs	r1, #16
 8001fb4:	480b      	ldr	r0, [pc, #44]	; (8001fe4 <ICM20602_Readbyte+0x3c>)
 8001fb6:	f7ff ff1a 	bl	8001dee <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8001fba:	79fb      	ldrb	r3, [r7, #7]
 8001fbc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7ff ffce 	bl	8001f64 <SPI1_SendByte>
	val = SPI1_SendByte(0x00); //Send DUMMY to read data
 8001fc8:	2000      	movs	r0, #0
 8001fca:	f7ff ffcb 	bl	8001f64 <SPI1_SendByte>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(ICM20602);
 8001fd2:	2110      	movs	r1, #16
 8001fd4:	4803      	ldr	r0, [pc, #12]	; (8001fe4 <ICM20602_Readbyte+0x3c>)
 8001fd6:	f7ff fefc 	bl	8001dd2 <LL_GPIO_SetOutputPin>
	
	return val;
 8001fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3710      	adds	r7, #16
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	40020800 	.word	0x40020800

08001fe8 <ICM20602_Readbytes>:

void ICM20602_Readbytes(unsigned char reg_addr, unsigned char len, unsigned char* data)
{
 8001fe8:	b590      	push	{r4, r7, lr}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	4603      	mov	r3, r0
 8001ff0:	603a      	str	r2, [r7, #0]
 8001ff2:	71fb      	strb	r3, [r7, #7]
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	71bb      	strb	r3, [r7, #6]
	unsigned int i = 0;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	60fb      	str	r3, [r7, #12]

	CHIP_SELECT(ICM20602);
 8001ffc:	2110      	movs	r1, #16
 8001ffe:	4810      	ldr	r0, [pc, #64]	; (8002040 <ICM20602_Readbytes+0x58>)
 8002000:	f7ff fef5 	bl	8001dee <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8002004:	79fb      	ldrb	r3, [r7, #7]
 8002006:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800200a:	b2db      	uxtb	r3, r3
 800200c:	4618      	mov	r0, r3
 800200e:	f7ff ffa9 	bl	8001f64 <SPI1_SendByte>
	while(i < len)
 8002012:	e009      	b.n	8002028 <ICM20602_Readbytes+0x40>
	{
		data[i++] = SPI1_SendByte(0x00); //Send DUMMY to read data
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	1c5a      	adds	r2, r3, #1
 8002018:	60fa      	str	r2, [r7, #12]
 800201a:	683a      	ldr	r2, [r7, #0]
 800201c:	18d4      	adds	r4, r2, r3
 800201e:	2000      	movs	r0, #0
 8002020:	f7ff ffa0 	bl	8001f64 <SPI1_SendByte>
 8002024:	4603      	mov	r3, r0
 8002026:	7023      	strb	r3, [r4, #0]
	while(i < len)
 8002028:	79bb      	ldrb	r3, [r7, #6]
 800202a:	68fa      	ldr	r2, [r7, #12]
 800202c:	429a      	cmp	r2, r3
 800202e:	d3f1      	bcc.n	8002014 <ICM20602_Readbytes+0x2c>
	}
	CHIP_DESELECT(ICM20602);
 8002030:	2110      	movs	r1, #16
 8002032:	4803      	ldr	r0, [pc, #12]	; (8002040 <ICM20602_Readbytes+0x58>)
 8002034:	f7ff fecd 	bl	8001dd2 <LL_GPIO_SetOutputPin>
}
 8002038:	bf00      	nop
 800203a:	3714      	adds	r7, #20
 800203c:	46bd      	mov	sp, r7
 800203e:	bd90      	pop	{r4, r7, pc}
 8002040:	40020800 	.word	0x40020800

08002044 <ICM20602_Writebyte>:

void ICM20602_Writebyte(uint8_t reg_addr, uint8_t val)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	4603      	mov	r3, r0
 800204c:	460a      	mov	r2, r1
 800204e:	71fb      	strb	r3, [r7, #7]
 8002050:	4613      	mov	r3, r2
 8002052:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(ICM20602);
 8002054:	2110      	movs	r1, #16
 8002056:	480b      	ldr	r0, [pc, #44]	; (8002084 <ICM20602_Writebyte+0x40>)
 8002058:	f7ff fec9 	bl	8001dee <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 800205c:	79fb      	ldrb	r3, [r7, #7]
 800205e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002062:	b2db      	uxtb	r3, r3
 8002064:	4618      	mov	r0, r3
 8002066:	f7ff ff7d 	bl	8001f64 <SPI1_SendByte>
	SPI1_SendByte(val); //Send Data to write
 800206a:	79bb      	ldrb	r3, [r7, #6]
 800206c:	4618      	mov	r0, r3
 800206e:	f7ff ff79 	bl	8001f64 <SPI1_SendByte>
	CHIP_DESELECT(ICM20602);
 8002072:	2110      	movs	r1, #16
 8002074:	4803      	ldr	r0, [pc, #12]	; (8002084 <ICM20602_Writebyte+0x40>)
 8002076:	f7ff feac 	bl	8001dd2 <LL_GPIO_SetOutputPin>
}
 800207a:	bf00      	nop
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	40020800 	.word	0x40020800

08002088 <ICM20602_Initialization>:
	CHIP_DESELECT(ICM20602);
}


int ICM20602_Initialization(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 800208e:	2300      	movs	r3, #0
 8002090:	73fb      	strb	r3, [r7, #15]
	int16_t accel_raw_data[3] = {0};  // To remove offset
 8002092:	f107 0308 	add.w	r3, r7, #8
 8002096:	2200      	movs	r2, #0
 8002098:	601a      	str	r2, [r3, #0]
 800209a:	809a      	strh	r2, [r3, #4]
	int16_t gyro_raw_data[3] = {0};   // To remove offset
 800209c:	463b      	mov	r3, r7
 800209e:	2200      	movs	r2, #0
 80020a0:	601a      	str	r2, [r3, #0]
 80020a2:	809a      	strh	r2, [r3, #4]
	
	ICM20602_GPIO_SPI_Initialization();
 80020a4:	f7ff fee2 	bl	8001e6c <ICM20602_GPIO_SPI_Initialization>
	
	printf("Checking ICM20602...");
 80020a8:	4833      	ldr	r0, [pc, #204]	; (8002178 <ICM20602_Initialization+0xf0>)
 80020aa:	f008 faf5 	bl	800a698 <iprintf>
	
	// check WHO_AM_I (0x75)
	who_am_i = ICM20602_Readbyte(WHO_AM_I); 
 80020ae:	2075      	movs	r0, #117	; 0x75
 80020b0:	f7ff ff7a 	bl	8001fa8 <ICM20602_Readbyte>
 80020b4:	4603      	mov	r3, r0
 80020b6:	73fb      	strb	r3, [r7, #15]

	// who am i = 0x12
	if(who_am_i == 0x12)
 80020b8:	7bfb      	ldrb	r3, [r7, #15]
 80020ba:	2b12      	cmp	r3, #18
 80020bc:	d105      	bne.n	80020ca <ICM20602_Initialization+0x42>
	{
		printf("\nICM20602 who_am_i = 0x%02x...OK\n\n", who_am_i);
 80020be:	7bfb      	ldrb	r3, [r7, #15]
 80020c0:	4619      	mov	r1, r3
 80020c2:	482e      	ldr	r0, [pc, #184]	; (800217c <ICM20602_Initialization+0xf4>)
 80020c4:	f008 fae8 	bl	800a698 <iprintf>
 80020c8:	e012      	b.n	80020f0 <ICM20602_Initialization+0x68>
	}
	// recheck
	else if(who_am_i != 0x12)
 80020ca:	7bfb      	ldrb	r3, [r7, #15]
 80020cc:	2b12      	cmp	r3, #18
 80020ce:	d00f      	beq.n	80020f0 <ICM20602_Initialization+0x68>
	{
		who_am_i = ICM20602_Readbyte(WHO_AM_I); // check again WHO_AM_I (0x75)
 80020d0:	2075      	movs	r0, #117	; 0x75
 80020d2:	f7ff ff69 	bl	8001fa8 <ICM20602_Readbyte>
 80020d6:	4603      	mov	r3, r0
 80020d8:	73fb      	strb	r3, [r7, #15]

		if (who_am_i != 0x12){
 80020da:	7bfb      	ldrb	r3, [r7, #15]
 80020dc:	2b12      	cmp	r3, #18
 80020de:	d007      	beq.n	80020f0 <ICM20602_Initialization+0x68>
			printf( "ICM20602 Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0x12);
 80020e0:	7bfb      	ldrb	r3, [r7, #15]
 80020e2:	2212      	movs	r2, #18
 80020e4:	4619      	mov	r1, r3
 80020e6:	4826      	ldr	r0, [pc, #152]	; (8002180 <ICM20602_Initialization+0xf8>)
 80020e8:	f008 fad6 	bl	800a698 <iprintf>
			return 1; //ERROR
 80020ec:	2301      	movs	r3, #1
 80020ee:	e03f      	b.n	8002170 <ICM20602_Initialization+0xe8>
		}
	}
	
	// Reset ICM20602
	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x80); //Reset ICM20602
 80020f0:	2180      	movs	r1, #128	; 0x80
 80020f2:	206b      	movs	r0, #107	; 0x6b
 80020f4:	f7ff ffa6 	bl	8002044 <ICM20602_Writebyte>
	HAL_Delay(50);
 80020f8:	2032      	movs	r0, #50	; 0x32
 80020fa:	f003 f9bf 	bl	800547c <HAL_Delay>

	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x01); // Enable Temperature sensor(bit4-0), Use PLL(bit2:0-01)
 80020fe:	2101      	movs	r1, #1
 8002100:	206b      	movs	r0, #107	; 0x6b
 8002102:	f7ff ff9f 	bl	8002044 <ICM20602_Writebyte>
									// 온도센서 끄면 자이로 값 이상하게 출력됨
	HAL_Delay(50);
 8002106:	2032      	movs	r0, #50	; 0x32
 8002108:	f003 f9b8 	bl	800547c <HAL_Delay>

	// PWR_MGMT_2 0x6C
	ICM20602_Writebyte(PWR_MGMT_2, 0x38); // Disable Acc(bit5:3-111), Enable Gyro(bit2:0-000)
 800210c:	2138      	movs	r1, #56	; 0x38
 800210e:	206c      	movs	r0, #108	; 0x6c
 8002110:	f7ff ff98 	bl	8002044 <ICM20602_Writebyte>
	//ICM20602_Writebyte( PWR_MGMT_2, 0x00 ); // Enable Acc(bit5:3-000), Enable Gyro(bit2:0-000)
	HAL_Delay(50);
 8002114:	2032      	movs	r0, #50	; 0x32
 8002116:	f003 f9b1 	bl	800547c <HAL_Delay>
	
	// set sample rate to 1000Hz and apply a software filter
	ICM20602_Writebyte(SMPLRT_DIV, 0x00);
 800211a:	2100      	movs	r1, #0
 800211c:	2019      	movs	r0, #25
 800211e:	f7ff ff91 	bl	8002044 <ICM20602_Writebyte>
	HAL_Delay(50);
 8002122:	2032      	movs	r0, #50	; 0x32
 8002124:	f003 f9aa 	bl	800547c <HAL_Delay>
	
	// Gyro DLPF Config
	//ICM20602_Writebyte(CONFIG, 0x00); // Gyro LPF fc 250Hz(bit2:0-000)
	ICM20602_Writebyte(CONFIG, 0x05); // Gyro LPF fc 20Hz(bit2:0-100) at 1kHz sample rate
 8002128:	2105      	movs	r1, #5
 800212a:	201a      	movs	r0, #26
 800212c:	f7ff ff8a 	bl	8002044 <ICM20602_Writebyte>
	HAL_Delay(50);
 8002130:	2032      	movs	r0, #50	; 0x32
 8002132:	f003 f9a3 	bl	800547c <HAL_Delay>

	// GYRO_CONFIG 0x1B
	ICM20602_Writebyte(GYRO_CONFIG, 0x18); // Gyro sensitivity 2000 dps(bit4:3-11), FCHOICE (bit1:0-00)
 8002136:	2118      	movs	r1, #24
 8002138:	201b      	movs	r0, #27
 800213a:	f7ff ff83 	bl	8002044 <ICM20602_Writebyte>
	HAL_Delay(50);
 800213e:	2032      	movs	r0, #50	; 0x32
 8002140:	f003 f99c 	bl	800547c <HAL_Delay>

	// ACCEL_CONFIG 0x1C
	ICM20602_Writebyte(ACCEL_CONFIG, 0x18); // Acc sensitivity 16g
 8002144:	2118      	movs	r1, #24
 8002146:	201c      	movs	r0, #28
 8002148:	f7ff ff7c 	bl	8002044 <ICM20602_Writebyte>
	HAL_Delay(50);
 800214c:	2032      	movs	r0, #50	; 0x32
 800214e:	f003 f995 	bl	800547c <HAL_Delay>
	
	// ACCEL_CONFIG2 0x1D
	ICM20602_Writebyte(ACCEL_CONFIG2, 0x03); // Acc FCHOICE 1kHz(bit3-0), DLPF fc 44.8Hz(bit2:0-011)
 8002152:	2103      	movs	r1, #3
 8002154:	201d      	movs	r0, #29
 8002156:	f7ff ff75 	bl	8002044 <ICM20602_Writebyte>
	HAL_Delay(50);
 800215a:	2032      	movs	r0, #50	; 0x32
 800215c:	f003 f98e 	bl	800547c <HAL_Delay>
	
	// Enable Interrupts when data is ready
	ICM20602_Writebyte(INT_ENABLE, 0x01); // Enable DRDY Interrupt
 8002160:	2101      	movs	r1, #1
 8002162:	2038      	movs	r0, #56	; 0x38
 8002164:	f7ff ff6e 	bl	8002044 <ICM20602_Writebyte>
	HAL_Delay(50);
 8002168:	2032      	movs	r0, #50	; 0x32
 800216a:	f003 f987 	bl	800547c <HAL_Delay>
//	
//	// Remove Gyro Z offset
//	ICM20602_Writebyte( ZG_OFFS_USRH, offset_z>>8 );	// gyro z offset high byte
//	ICM20602_Writebyte( ZG_OFFS_USRL, offset_z );	// gyro z offset low byte

	return 0; //OK
 800216e:	2300      	movs	r3, #0
}
 8002170:	4618      	mov	r0, r3
 8002172:	3710      	adds	r7, #16
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	0800d564 	.word	0x0800d564
 800217c:	0800d57c 	.word	0x0800d57c
 8002180:	0800d5a0 	.word	0x0800d5a0

08002184 <ICM20602_Get3AxisGyroRawData>:
	gyro[1] = ((data[10] << 8) | data[11]);
	gyro[2] = ((data[12] << 8) | data[13]);
}

void ICM20602_Get3AxisGyroRawData(short* gyro)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
	unsigned char data[6];
	ICM20602_Readbytes(GYRO_XOUT_H, 6, data);
 800218c:	f107 0308 	add.w	r3, r7, #8
 8002190:	461a      	mov	r2, r3
 8002192:	2106      	movs	r1, #6
 8002194:	2043      	movs	r0, #67	; 0x43
 8002196:	f7ff ff27 	bl	8001fe8 <ICM20602_Readbytes>
	
	gyro[0] = ((data[0] << 8) | data[1]);
 800219a:	7a3b      	ldrb	r3, [r7, #8]
 800219c:	021b      	lsls	r3, r3, #8
 800219e:	b21a      	sxth	r2, r3
 80021a0:	7a7b      	ldrb	r3, [r7, #9]
 80021a2:	b21b      	sxth	r3, r3
 80021a4:	4313      	orrs	r3, r2
 80021a6:	b21a      	sxth	r2, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	801a      	strh	r2, [r3, #0]
	gyro[1] = ((data[2] << 8) | data[3]);
 80021ac:	7abb      	ldrb	r3, [r7, #10]
 80021ae:	021b      	lsls	r3, r3, #8
 80021b0:	b219      	sxth	r1, r3
 80021b2:	7afb      	ldrb	r3, [r7, #11]
 80021b4:	b21a      	sxth	r2, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	3302      	adds	r3, #2
 80021ba:	430a      	orrs	r2, r1
 80021bc:	b212      	sxth	r2, r2
 80021be:	801a      	strh	r2, [r3, #0]
	gyro[2] = ((data[4] << 8) | data[5]);
 80021c0:	7b3b      	ldrb	r3, [r7, #12]
 80021c2:	021b      	lsls	r3, r3, #8
 80021c4:	b219      	sxth	r1, r3
 80021c6:	7b7b      	ldrb	r3, [r7, #13]
 80021c8:	b21a      	sxth	r2, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	3304      	adds	r3, #4
 80021ce:	430a      	orrs	r2, r1
 80021d0:	b212      	sxth	r2, r2
 80021d2:	801a      	strh	r2, [r3, #0]
}
 80021d4:	bf00      	nop
 80021d6:	3710      	adds	r7, #16
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <ICM20602_DataReady>:
	accel[1] = ((data[2] << 8) | data[3]);
	accel[2] = ((data[4] << 8) | data[5]);
}

int ICM20602_DataReady(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
	return LL_GPIO_IsInputPinSet(ICM20602_INT_PORT, ICM20602_INT_PIN);
 80021e0:	2120      	movs	r1, #32
 80021e2:	4803      	ldr	r0, [pc, #12]	; (80021f0 <ICM20602_DataReady+0x14>)
 80021e4:	f7ff fde0 	bl	8001da8 <LL_GPIO_IsInputPinSet>
 80021e8:	4603      	mov	r3, r0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	40020800 	.word	0x40020800

080021f4 <LL_SPI_Enable>:
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	601a      	str	r2, [r3, #0]
}
 8002208:	bf00      	nop
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <LL_SPI_SetStandard>:
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f023 0210 	bic.w	r2, r3, #16
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	431a      	orrs	r2, r3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	605a      	str	r2, [r3, #4]
}
 800222e:	bf00      	nop
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr

0800223a <LL_SPI_IsActiveFlag_RXNE>:
{
 800223a:	b480      	push	{r7}
 800223c:	b083      	sub	sp, #12
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	2b01      	cmp	r3, #1
 800224c:	d101      	bne.n	8002252 <LL_SPI_IsActiveFlag_RXNE+0x18>
 800224e:	2301      	movs	r3, #1
 8002250:	e000      	b.n	8002254 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8002252:	2300      	movs	r3, #0
}
 8002254:	4618      	mov	r0, r3
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <LL_SPI_IsActiveFlag_TXE>:
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f003 0302 	and.w	r3, r3, #2
 8002270:	2b02      	cmp	r3, #2
 8002272:	d101      	bne.n	8002278 <LL_SPI_IsActiveFlag_TXE+0x18>
 8002274:	2301      	movs	r3, #1
 8002276:	e000      	b.n	800227a <LL_SPI_IsActiveFlag_TXE+0x1a>
 8002278:	2300      	movs	r3, #0
}
 800227a:	4618      	mov	r0, r3
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr

08002286 <LL_SPI_ReceiveData8>:
{
 8002286:	b480      	push	{r7}
 8002288:	b083      	sub	sp, #12
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_REG(SPIx->DR));
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	b2db      	uxtb	r3, r3
}
 8002294:	4618      	mov	r0, r3
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <LL_SPI_TransmitData8>:
{
 80022a0:	b480      	push	{r7}
 80022a2:	b085      	sub	sp, #20
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	460b      	mov	r3, r1
 80022aa:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	330c      	adds	r3, #12
 80022b0:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	78fa      	ldrb	r2, [r7, #3]
 80022b6:	701a      	strb	r2, [r3, #0]
}
 80022b8:	bf00      	nop
 80022ba:	3714      	adds	r7, #20
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <LL_GPIO_IsInputPinSet>:
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	691a      	ldr	r2, [r3, #16]
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	4013      	ands	r3, r2
 80022d6:	683a      	ldr	r2, [r7, #0]
 80022d8:	429a      	cmp	r2, r3
 80022da:	bf0c      	ite	eq
 80022dc:	2301      	moveq	r3, #1
 80022de:	2300      	movne	r3, #0
 80022e0:	b2db      	uxtb	r3, r3
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	370c      	adds	r7, #12
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr

080022ee <LL_GPIO_SetOutputPin>:
{
 80022ee:	b480      	push	{r7}
 80022f0:	b083      	sub	sp, #12
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
 80022f6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	683a      	ldr	r2, [r7, #0]
 80022fc:	619a      	str	r2, [r3, #24]
}
 80022fe:	bf00      	nop
 8002300:	370c      	adds	r7, #12
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr

0800230a <LL_GPIO_ResetOutputPin>:
{
 800230a:	b480      	push	{r7}
 800230c:	b083      	sub	sp, #12
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
 8002312:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	041a      	lsls	r2, r3, #16
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	619a      	str	r2, [r3, #24]
}
 800231c:	bf00      	nop
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <LL_AHB1_GRP1_EnableClock>:
{
 8002328:	b480      	push	{r7}
 800232a:	b085      	sub	sp, #20
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002330:	4b08      	ldr	r3, [pc, #32]	; (8002354 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002332:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002334:	4907      	ldr	r1, [pc, #28]	; (8002354 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4313      	orrs	r3, r2
 800233a:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800233c:	4b05      	ldr	r3, [pc, #20]	; (8002354 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800233e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	4013      	ands	r3, r2
 8002344:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002346:	68fb      	ldr	r3, [r7, #12]
}
 8002348:	bf00      	nop
 800234a:	3714      	adds	r7, #20
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr
 8002354:	40023800 	.word	0x40023800

08002358 <LL_APB1_GRP1_EnableClock>:
{
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002360:	4b08      	ldr	r3, [pc, #32]	; (8002384 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002362:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002364:	4907      	ldr	r1, [pc, #28]	; (8002384 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4313      	orrs	r3, r2
 800236a:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800236c:	4b05      	ldr	r3, [pc, #20]	; (8002384 <LL_APB1_GRP1_EnableClock+0x2c>)
 800236e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	4013      	ands	r3, r2
 8002374:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002376:	68fb      	ldr	r3, [r7, #12]
}
 8002378:	bf00      	nop
 800237a:	3714      	adds	r7, #20
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr
 8002384:	40023800 	.word	0x40023800

08002388 <LPS22HH_GPIO_SPI_Initialization>:

Struct_LPS22HH LPS22HH;


void LPS22HH_GPIO_SPI_Initialization(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b090      	sub	sp, #64	; 0x40
 800238c:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800238e:	f107 0318 	add.w	r3, r7, #24
 8002392:	2228      	movs	r2, #40	; 0x28
 8002394:	2100      	movs	r1, #0
 8002396:	4618      	mov	r0, r3
 8002398:	f007 fd1a 	bl	8009dd0 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800239c:	463b      	mov	r3, r7
 800239e:	2200      	movs	r2, #0
 80023a0:	601a      	str	r2, [r3, #0]
 80023a2:	605a      	str	r2, [r3, #4]
 80023a4:	609a      	str	r2, [r3, #8]
 80023a6:	60da      	str	r2, [r3, #12]
 80023a8:	611a      	str	r2, [r3, #16]
 80023aa:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 80023ac:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80023b0:	f7ff ffd2 	bl	8002358 <LL_APB1_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80023b4:	2002      	movs	r0, #2
 80023b6:	f7ff ffb7 	bl	8002328 <LL_AHB1_GRP1_EnableClock>
	/**SPI3 GPIO Configuration
	PB3   ------> SPI3_SCK
	PB4   ------> SPI3_MISO
	PB5   ------> SPI3_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 80023ba:	2338      	movs	r3, #56	; 0x38
 80023bc:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80023be:	2302      	movs	r3, #2
 80023c0:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80023c2:	2303      	movs	r3, #3
 80023c4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80023c6:	2300      	movs	r3, #0
 80023c8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80023ca:	2300      	movs	r3, #0
 80023cc:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 80023ce:	2306      	movs	r3, #6
 80023d0:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023d2:	463b      	mov	r3, r7
 80023d4:	4619      	mov	r1, r3
 80023d6:	4826      	ldr	r0, [pc, #152]	; (8002470 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 80023d8:	f006 fd65 	bl	8008ea6 <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80023dc:	2300      	movs	r3, #0
 80023de:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80023e0:	f44f 7382 	mov.w	r3, #260	; 0x104
 80023e4:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80023e6:	2300      	movs	r3, #0
 80023e8:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80023ea:	2302      	movs	r3, #2
 80023ec:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80023ee:	2301      	movs	r3, #1
 80023f0:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80023f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023f6:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 80023f8:	2308      	movs	r3, #8
 80023fa:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80023fc:	2300      	movs	r3, #0
 80023fe:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8002400:	2300      	movs	r3, #0
 8002402:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 8002404:	230a      	movs	r3, #10
 8002406:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(LPS22HH_SPI_CHANNEL, &SPI_InitStruct);
 8002408:	f107 0318 	add.w	r3, r7, #24
 800240c:	4619      	mov	r1, r3
 800240e:	4819      	ldr	r0, [pc, #100]	; (8002474 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 8002410:	f006 ff17 	bl	8009242 <LL_SPI_Init>
	LL_SPI_SetStandard(LPS22HH_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 8002414:	2100      	movs	r1, #0
 8002416:	4817      	ldr	r0, [pc, #92]	; (8002474 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 8002418:	f7ff fefc 	bl	8002214 <LL_SPI_SetStandard>
	/**LPS22HH GPIO Control Configuration
	 * PB6  ------> LPS22HH_SPI_CS_PIN (output)
	 * PB7  ------> LPS22HH_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(LPS22HH_SPI_CS_PORT, LPS22HH_SPI_CS_PIN);
 800241c:	2140      	movs	r1, #64	; 0x40
 800241e:	4814      	ldr	r0, [pc, #80]	; (8002470 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8002420:	f7ff ff73 	bl	800230a <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = LPS22HH_SPI_CS_PIN;
 8002424:	2340      	movs	r3, #64	; 0x40
 8002426:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002428:	2301      	movs	r3, #1
 800242a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800242c:	2303      	movs	r3, #3
 800242e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002430:	2300      	movs	r3, #0
 8002432:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002434:	2300      	movs	r3, #0
 8002436:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(LPS22HH_SPI_CS_PORT, &GPIO_InitStruct);
 8002438:	463b      	mov	r3, r7
 800243a:	4619      	mov	r1, r3
 800243c:	480c      	ldr	r0, [pc, #48]	; (8002470 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 800243e:	f006 fd32 	bl	8008ea6 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = LPS22HH_INT_PIN;
 8002442:	2380      	movs	r3, #128	; 0x80
 8002444:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002446:	2300      	movs	r3, #0
 8002448:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800244a:	2301      	movs	r3, #1
 800244c:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(LPS22HH_INT_PORT, &GPIO_InitStruct);
 800244e:	463b      	mov	r3, r7
 8002450:	4619      	mov	r1, r3
 8002452:	4807      	ldr	r0, [pc, #28]	; (8002470 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8002454:	f006 fd27 	bl	8008ea6 <LL_GPIO_Init>
	
	LL_SPI_Enable(LPS22HH_SPI_CHANNEL);
 8002458:	4806      	ldr	r0, [pc, #24]	; (8002474 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 800245a:	f7ff fecb 	bl	80021f4 <LL_SPI_Enable>
	
	CHIP_DESELECT(LPS22HH);
 800245e:	2140      	movs	r1, #64	; 0x40
 8002460:	4803      	ldr	r0, [pc, #12]	; (8002470 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8002462:	f7ff ff44 	bl	80022ee <LL_GPIO_SetOutputPin>
}
 8002466:	bf00      	nop
 8002468:	3740      	adds	r7, #64	; 0x40
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	40020400 	.word	0x40020400
 8002474:	40003c00 	.word	0x40003c00

08002478 <SPI3_SendByte>:


unsigned char SPI3_SendByte(unsigned char data)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	4603      	mov	r3, r0
 8002480:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(LPS22HH_SPI_CHANNEL)==RESET);
 8002482:	bf00      	nop
 8002484:	480c      	ldr	r0, [pc, #48]	; (80024b8 <SPI3_SendByte+0x40>)
 8002486:	f7ff feeb 	bl	8002260 <LL_SPI_IsActiveFlag_TXE>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d0f9      	beq.n	8002484 <SPI3_SendByte+0xc>
	LL_SPI_TransmitData8(LPS22HH_SPI_CHANNEL, data);
 8002490:	79fb      	ldrb	r3, [r7, #7]
 8002492:	4619      	mov	r1, r3
 8002494:	4808      	ldr	r0, [pc, #32]	; (80024b8 <SPI3_SendByte+0x40>)
 8002496:	f7ff ff03 	bl	80022a0 <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(LPS22HH_SPI_CHANNEL)==RESET);
 800249a:	bf00      	nop
 800249c:	4806      	ldr	r0, [pc, #24]	; (80024b8 <SPI3_SendByte+0x40>)
 800249e:	f7ff fecc 	bl	800223a <LL_SPI_IsActiveFlag_RXNE>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d0f9      	beq.n	800249c <SPI3_SendByte+0x24>
	return LL_SPI_ReceiveData8(LPS22HH_SPI_CHANNEL);
 80024a8:	4803      	ldr	r0, [pc, #12]	; (80024b8 <SPI3_SendByte+0x40>)
 80024aa:	f7ff feec 	bl	8002286 <LL_SPI_ReceiveData8>
 80024ae:	4603      	mov	r3, r0
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3708      	adds	r7, #8
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	40003c00 	.word	0x40003c00

080024bc <LPS22HH_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t LPS22HH_Readbyte(uint8_t reg_addr)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	4603      	mov	r3, r0
 80024c4:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(LPS22HH);
 80024c6:	2140      	movs	r1, #64	; 0x40
 80024c8:	480b      	ldr	r0, [pc, #44]	; (80024f8 <LPS22HH_Readbyte+0x3c>)
 80024ca:	f7ff ff1e 	bl	800230a <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 80024ce:	79fb      	ldrb	r3, [r7, #7]
 80024d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7ff ffce 	bl	8002478 <SPI3_SendByte>
	val = SPI3_SendByte(0x00); //Send DUMMY
 80024dc:	2000      	movs	r0, #0
 80024de:	f7ff ffcb 	bl	8002478 <SPI3_SendByte>
 80024e2:	4603      	mov	r3, r0
 80024e4:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(LPS22HH);
 80024e6:	2140      	movs	r1, #64	; 0x40
 80024e8:	4803      	ldr	r0, [pc, #12]	; (80024f8 <LPS22HH_Readbyte+0x3c>)
 80024ea:	f7ff ff00 	bl	80022ee <LL_GPIO_SetOutputPin>
	
	return val;
 80024ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3710      	adds	r7, #16
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	40020400 	.word	0x40020400

080024fc <LPS22HH_Readbytes>:

void LPS22HH_Readbytes(unsigned char reg_addr, unsigned char len, unsigned char* data)
{
 80024fc:	b590      	push	{r4, r7, lr}
 80024fe:	b085      	sub	sp, #20
 8002500:	af00      	add	r7, sp, #0
 8002502:	4603      	mov	r3, r0
 8002504:	603a      	str	r2, [r7, #0]
 8002506:	71fb      	strb	r3, [r7, #7]
 8002508:	460b      	mov	r3, r1
 800250a:	71bb      	strb	r3, [r7, #6]
	unsigned int i = 0;
 800250c:	2300      	movs	r3, #0
 800250e:	60fb      	str	r3, [r7, #12]

	CHIP_SELECT(LPS22HH);
 8002510:	2140      	movs	r1, #64	; 0x40
 8002512:	4810      	ldr	r0, [pc, #64]	; (8002554 <LPS22HH_Readbytes+0x58>)
 8002514:	f7ff fef9 	bl	800230a <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8002518:	79fb      	ldrb	r3, [r7, #7]
 800251a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800251e:	b2db      	uxtb	r3, r3
 8002520:	4618      	mov	r0, r3
 8002522:	f7ff ffa9 	bl	8002478 <SPI3_SendByte>
	while(i < len)
 8002526:	e009      	b.n	800253c <LPS22HH_Readbytes+0x40>
	{
		data[i++] = SPI3_SendByte(0x00); //Send DUMMY
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	1c5a      	adds	r2, r3, #1
 800252c:	60fa      	str	r2, [r7, #12]
 800252e:	683a      	ldr	r2, [r7, #0]
 8002530:	18d4      	adds	r4, r2, r3
 8002532:	2000      	movs	r0, #0
 8002534:	f7ff ffa0 	bl	8002478 <SPI3_SendByte>
 8002538:	4603      	mov	r3, r0
 800253a:	7023      	strb	r3, [r4, #0]
	while(i < len)
 800253c:	79bb      	ldrb	r3, [r7, #6]
 800253e:	68fa      	ldr	r2, [r7, #12]
 8002540:	429a      	cmp	r2, r3
 8002542:	d3f1      	bcc.n	8002528 <LPS22HH_Readbytes+0x2c>
	}
	CHIP_DESELECT(LPS22HH);
 8002544:	2140      	movs	r1, #64	; 0x40
 8002546:	4803      	ldr	r0, [pc, #12]	; (8002554 <LPS22HH_Readbytes+0x58>)
 8002548:	f7ff fed1 	bl	80022ee <LL_GPIO_SetOutputPin>
}
 800254c:	bf00      	nop
 800254e:	3714      	adds	r7, #20
 8002550:	46bd      	mov	sp, r7
 8002552:	bd90      	pop	{r4, r7, pc}
 8002554:	40020400 	.word	0x40020400

08002558 <LPS22HH_Writebyte>:

void LPS22HH_Writebyte(uint8_t reg_addr, uint8_t val)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	4603      	mov	r3, r0
 8002560:	460a      	mov	r2, r1
 8002562:	71fb      	strb	r3, [r7, #7]
 8002564:	4613      	mov	r3, r2
 8002566:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(LPS22HH);
 8002568:	2140      	movs	r1, #64	; 0x40
 800256a:	480b      	ldr	r0, [pc, #44]	; (8002598 <LPS22HH_Writebyte+0x40>)
 800256c:	f7ff fecd 	bl	800230a <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 8002570:	79fb      	ldrb	r3, [r7, #7]
 8002572:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002576:	b2db      	uxtb	r3, r3
 8002578:	4618      	mov	r0, r3
 800257a:	f7ff ff7d 	bl	8002478 <SPI3_SendByte>
	SPI3_SendByte(val); //Data
 800257e:	79bb      	ldrb	r3, [r7, #6]
 8002580:	4618      	mov	r0, r3
 8002582:	f7ff ff79 	bl	8002478 <SPI3_SendByte>
	CHIP_DESELECT(LPS22HH);
 8002586:	2140      	movs	r1, #64	; 0x40
 8002588:	4803      	ldr	r0, [pc, #12]	; (8002598 <LPS22HH_Writebyte+0x40>)
 800258a:	f7ff feb0 	bl	80022ee <LL_GPIO_SetOutputPin>
}
 800258e:	bf00      	nop
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	40020400 	.word	0x40020400

0800259c <LPS22HH_Initialization>:




int LPS22HH_Initialization(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
	uint8_t temp_reg;
	uint8_t who_am_i = 0;
 80025a2:	2300      	movs	r3, #0
 80025a4:	71fb      	strb	r3, [r7, #7]
	
	LPS22HH_GPIO_SPI_Initialization();
 80025a6:	f7ff feef 	bl	8002388 <LPS22HH_GPIO_SPI_Initialization>
	
	printf("Checking LPS22HH...");
 80025aa:	4841      	ldr	r0, [pc, #260]	; (80026b0 <LPS22HH_Initialization+0x114>)
 80025ac:	f008 f874 	bl	800a698 <iprintf>
	
	// check WHO_AM_I (0x0F)
	who_am_i = LPS22HH_Readbyte(0x0F); 
 80025b0:	200f      	movs	r0, #15
 80025b2:	f7ff ff83 	bl	80024bc <LPS22HH_Readbyte>
 80025b6:	4603      	mov	r3, r0
 80025b8:	71fb      	strb	r3, [r7, #7]

	// who am i = 0xb3
	if( who_am_i == 0xb3)
 80025ba:	79fb      	ldrb	r3, [r7, #7]
 80025bc:	2bb3      	cmp	r3, #179	; 0xb3
 80025be:	d105      	bne.n	80025cc <LPS22HH_Initialization+0x30>
	{
		printf("\nLPS22HH who_am_i = 0x%02x...OK\n\n", who_am_i );
 80025c0:	79fb      	ldrb	r3, [r7, #7]
 80025c2:	4619      	mov	r1, r3
 80025c4:	483b      	ldr	r0, [pc, #236]	; (80026b4 <LPS22HH_Initialization+0x118>)
 80025c6:	f008 f867 	bl	800a698 <iprintf>
 80025ca:	e012      	b.n	80025f2 <LPS22HH_Initialization+0x56>
	}
	// recheck
	else if( who_am_i != 0xb3)
 80025cc:	79fb      	ldrb	r3, [r7, #7]
 80025ce:	2bb3      	cmp	r3, #179	; 0xb3
 80025d0:	d00f      	beq.n	80025f2 <LPS22HH_Initialization+0x56>
	{
		who_am_i = LPS22HH_Readbyte(0x0F); // check WHO_AM_I (0x0F)
 80025d2:	200f      	movs	r0, #15
 80025d4:	f7ff ff72 	bl	80024bc <LPS22HH_Readbyte>
 80025d8:	4603      	mov	r3, r0
 80025da:	71fb      	strb	r3, [r7, #7]

		if ( who_am_i != 0xb3 ){
 80025dc:	79fb      	ldrb	r3, [r7, #7]
 80025de:	2bb3      	cmp	r3, #179	; 0xb3
 80025e0:	d007      	beq.n	80025f2 <LPS22HH_Initialization+0x56>
			printf( "nLPS22HH Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0xb3);
 80025e2:	79fb      	ldrb	r3, [r7, #7]
 80025e4:	22b3      	movs	r2, #179	; 0xb3
 80025e6:	4619      	mov	r1, r3
 80025e8:	4833      	ldr	r0, [pc, #204]	; (80026b8 <LPS22HH_Initialization+0x11c>)
 80025ea:	f008 f855 	bl	800a698 <iprintf>
			return 1; //ERROR
 80025ee:	2301      	movs	r3, #1
 80025f0:	e059      	b.n	80026a6 <LPS22HH_Initialization+0x10a>
		}
	}
	
	// Reset LPS22HH
	// CTRL_REG2 0x11
	LPS22HH_Writebyte(CTRL_REG2, 0x04);
 80025f2:	2104      	movs	r1, #4
 80025f4:	2011      	movs	r0, #17
 80025f6:	f7ff ffaf 	bl	8002558 <LPS22HH_Writebyte>
	//printf("LPS22HH Reset");
	do{
		//printf(".");
	}
	while((LPS22HH_Readbyte(CTRL_REG2) & 0x04) != 0x00);
 80025fa:	2011      	movs	r0, #17
 80025fc:	f7ff ff5e 	bl	80024bc <LPS22HH_Readbyte>
 8002600:	4603      	mov	r3, r0
 8002602:	f003 0304 	and.w	r3, r3, #4
 8002606:	2b00      	cmp	r3, #0
 8002608:	d1f7      	bne.n	80025fa <LPS22HH_Initialization+0x5e>
	
	// Set Output Data Rate
	//0x00: One Shot
	//0x10: 1Hz	0x20: 10Hz	0x30: 25Hz	0x40: 50Hz
	//0x50: 75Hz	0x60: 100Hz	0x70: 200Hz
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 800260a:	2010      	movs	r0, #16
 800260c:	f7ff ff56 	bl	80024bc <LPS22HH_Readbyte>
 8002610:	4603      	mov	r3, r0
 8002612:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x40;
 8002614:	79bb      	ldrb	r3, [r7, #6]
 8002616:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800261a:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 800261c:	79bb      	ldrb	r3, [r7, #6]
 800261e:	4619      	mov	r1, r3
 8002620:	2010      	movs	r0, #16
 8002622:	f7ff ff99 	bl	8002558 <LPS22HH_Writebyte>
	temp_reg = 0;
 8002626:	2300      	movs	r3, #0
 8002628:	71bb      	strb	r3, [r7, #6]
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 800262a:	2010      	movs	r0, #16
 800262c:	f7ff ff46 	bl	80024bc <LPS22HH_Readbyte>
 8002630:	4603      	mov	r3, r0
 8002632:	71bb      	strb	r3, [r7, #6]
	//printf("%x\n", temp_reg);
	
	// Enable LPF, Cut-off frequency
	//0x08: ODR/9	0x0c: ODR/20
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8002634:	2010      	movs	r0, #16
 8002636:	f7ff ff41 	bl	80024bc <LPS22HH_Readbyte>
 800263a:	4603      	mov	r3, r0
 800263c:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x0c;
 800263e:	79bb      	ldrb	r3, [r7, #6]
 8002640:	f043 030c 	orr.w	r3, r3, #12
 8002644:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 8002646:	79bb      	ldrb	r3, [r7, #6]
 8002648:	4619      	mov	r1, r3
 800264a:	2010      	movs	r0, #16
 800264c:	f7ff ff84 	bl	8002558 <LPS22HH_Writebyte>
	
	// Enable Block Data Update
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8002650:	2010      	movs	r0, #16
 8002652:	f7ff ff33 	bl	80024bc <LPS22HH_Readbyte>
 8002656:	4603      	mov	r3, r0
 8002658:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x02;
 800265a:	79bb      	ldrb	r3, [r7, #6]
 800265c:	f043 0302 	orr.w	r3, r3, #2
 8002660:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 8002662:	79bb      	ldrb	r3, [r7, #6]
 8002664:	4619      	mov	r1, r3
 8002666:	2010      	movs	r0, #16
 8002668:	f7ff ff76 	bl	8002558 <LPS22HH_Writebyte>
	
	// Enable Low Noise Mode (ODR should be lower than 100Hz. This is igonored when ODR = 100Hz or 200Hz)
	temp_reg = LPS22HH_Readbyte(CTRL_REG2);
 800266c:	2011      	movs	r0, #17
 800266e:	f7ff ff25 	bl	80024bc <LPS22HH_Readbyte>
 8002672:	4603      	mov	r3, r0
 8002674:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x02;
 8002676:	79bb      	ldrb	r3, [r7, #6]
 8002678:	f043 0302 	orr.w	r3, r3, #2
 800267c:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG2, temp_reg);
 800267e:	79bb      	ldrb	r3, [r7, #6]
 8002680:	4619      	mov	r1, r3
 8002682:	2011      	movs	r0, #17
 8002684:	f7ff ff68 	bl	8002558 <LPS22HH_Writebyte>
	
	// Enable Data-ready signal on INT-DRDY pin
	temp_reg = LPS22HH_Readbyte(CTRL_REG3);
 8002688:	2012      	movs	r0, #18
 800268a:	f7ff ff17 	bl	80024bc <LPS22HH_Readbyte>
 800268e:	4603      	mov	r3, r0
 8002690:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x04;
 8002692:	79bb      	ldrb	r3, [r7, #6]
 8002694:	f043 0304 	orr.w	r3, r3, #4
 8002698:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG3, temp_reg);
 800269a:	79bb      	ldrb	r3, [r7, #6]
 800269c:	4619      	mov	r1, r3
 800269e:	2012      	movs	r0, #18
 80026a0:	f7ff ff5a 	bl	8002558 <LPS22HH_Writebyte>
	
	return 0; //OK
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3708      	adds	r7, #8
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	0800d5cc 	.word	0x0800d5cc
 80026b4:	0800d5e0 	.word	0x0800d5e0
 80026b8:	0800d604 	.word	0x0800d604

080026bc <LPS22HH_DataReady>:


int LPS22HH_DataReady(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	af00      	add	r7, sp, #0
	return LL_GPIO_IsInputPinSet(LPS22HH_INT_PORT, LPS22HH_INT_PIN);
 80026c0:	2180      	movs	r1, #128	; 0x80
 80026c2:	4803      	ldr	r0, [pc, #12]	; (80026d0 <LPS22HH_DataReady+0x14>)
 80026c4:	f7ff fdfe 	bl	80022c4 <LL_GPIO_IsInputPinSet>
 80026c8:	4603      	mov	r3, r0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	40020400 	.word	0x40020400

080026d4 <LPS22HH_GetPressure>:

void LPS22HH_GetPressure(int32_t* pressure)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
	LPS22HH_Readbytes(PRESSURE_OUT_XL, 3, (unsigned char*)pressure);
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	2103      	movs	r1, #3
 80026e0:	2028      	movs	r0, #40	; 0x28
 80026e2:	f7ff ff0b 	bl	80024fc <LPS22HH_Readbytes>
}
 80026e6:	bf00      	nop
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}

080026ee <LPS22HH_GetTemperature>:

void LPS22HH_GetTemperature(int16_t* temperature)
{
 80026ee:	b580      	push	{r7, lr}
 80026f0:	b082      	sub	sp, #8
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
	LPS22HH_Readbytes(TEMP_OUT_L, 2, (unsigned char*)temperature);
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	2102      	movs	r1, #2
 80026fa:	202b      	movs	r0, #43	; 0x2b
 80026fc:	f7ff fefe 	bl	80024fc <LPS22HH_Readbytes>
}
 8002700:	bf00      	nop
 8002702:	3708      	adds	r7, #8
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <getAltitude2>:
{
	return (1.0f - powf((pressure / SEA_PRESSURE), 0.1902226f)) * 44307.69396f; //145366.45f * 0.3048f = 44307.69396f;
}

float getAltitude2(float pressure, float temperature) //Get Altitude with temperature correction.
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002712:	edc7 0a00 	vstr	s1, [r7]
	return (1.0f - powf((pressure / SEA_PRESSURE), 0.1902226f)) * (temperature + 273.15f) / 0.0065f;
 8002716:	edd7 7a01 	vldr	s15, [r7, #4]
 800271a:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8002760 <getAltitude2+0x58>
 800271e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002722:	eddf 0a10 	vldr	s1, [pc, #64]	; 8002764 <getAltitude2+0x5c>
 8002726:	eeb0 0a66 	vmov.f32	s0, s13
 800272a:	f009 ff3d 	bl	800c5a8 <powf>
 800272e:	eeb0 7a40 	vmov.f32	s14, s0
 8002732:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002736:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800273a:	edd7 7a00 	vldr	s15, [r7]
 800273e:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8002768 <getAltitude2+0x60>
 8002742:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800274a:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800276c <getAltitude2+0x64>
 800274e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002752:	eef0 7a66 	vmov.f32	s15, s13
}
 8002756:	eeb0 0a67 	vmov.f32	s0, s15
 800275a:	3708      	adds	r7, #8
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	447d5000 	.word	0x447d5000
 8002764:	3e42c9b7 	.word	0x3e42c9b7
 8002768:	43889333 	.word	0x43889333
 800276c:	3bd4fdf4 	.word	0x3bd4fdf4

08002770 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002774:	4b04      	ldr	r3, [pc, #16]	; (8002788 <__NVIC_GetPriorityGrouping+0x18>)
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	0a1b      	lsrs	r3, r3, #8
 800277a:	f003 0307 	and.w	r3, r3, #7
}
 800277e:	4618      	mov	r0, r3
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr
 8002788:	e000ed00 	.word	0xe000ed00

0800278c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	4603      	mov	r3, r0
 8002794:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279a:	2b00      	cmp	r3, #0
 800279c:	db0b      	blt.n	80027b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800279e:	79fb      	ldrb	r3, [r7, #7]
 80027a0:	f003 021f 	and.w	r2, r3, #31
 80027a4:	4907      	ldr	r1, [pc, #28]	; (80027c4 <__NVIC_EnableIRQ+0x38>)
 80027a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027aa:	095b      	lsrs	r3, r3, #5
 80027ac:	2001      	movs	r0, #1
 80027ae:	fa00 f202 	lsl.w	r2, r0, r2
 80027b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027b6:	bf00      	nop
 80027b8:	370c      	adds	r7, #12
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	e000e100 	.word	0xe000e100

080027c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	4603      	mov	r3, r0
 80027d0:	6039      	str	r1, [r7, #0]
 80027d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	db0a      	blt.n	80027f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	b2da      	uxtb	r2, r3
 80027e0:	490c      	ldr	r1, [pc, #48]	; (8002814 <__NVIC_SetPriority+0x4c>)
 80027e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e6:	0112      	lsls	r2, r2, #4
 80027e8:	b2d2      	uxtb	r2, r2
 80027ea:	440b      	add	r3, r1
 80027ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027f0:	e00a      	b.n	8002808 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	b2da      	uxtb	r2, r3
 80027f6:	4908      	ldr	r1, [pc, #32]	; (8002818 <__NVIC_SetPriority+0x50>)
 80027f8:	79fb      	ldrb	r3, [r7, #7]
 80027fa:	f003 030f 	and.w	r3, r3, #15
 80027fe:	3b04      	subs	r3, #4
 8002800:	0112      	lsls	r2, r2, #4
 8002802:	b2d2      	uxtb	r2, r2
 8002804:	440b      	add	r3, r1
 8002806:	761a      	strb	r2, [r3, #24]
}
 8002808:	bf00      	nop
 800280a:	370c      	adds	r7, #12
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr
 8002814:	e000e100 	.word	0xe000e100
 8002818:	e000ed00 	.word	0xe000ed00

0800281c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800281c:	b480      	push	{r7}
 800281e:	b089      	sub	sp, #36	; 0x24
 8002820:	af00      	add	r7, sp, #0
 8002822:	60f8      	str	r0, [r7, #12]
 8002824:	60b9      	str	r1, [r7, #8]
 8002826:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f003 0307 	and.w	r3, r3, #7
 800282e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	f1c3 0307 	rsb	r3, r3, #7
 8002836:	2b04      	cmp	r3, #4
 8002838:	bf28      	it	cs
 800283a:	2304      	movcs	r3, #4
 800283c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	3304      	adds	r3, #4
 8002842:	2b06      	cmp	r3, #6
 8002844:	d902      	bls.n	800284c <NVIC_EncodePriority+0x30>
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	3b03      	subs	r3, #3
 800284a:	e000      	b.n	800284e <NVIC_EncodePriority+0x32>
 800284c:	2300      	movs	r3, #0
 800284e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002850:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	fa02 f303 	lsl.w	r3, r2, r3
 800285a:	43da      	mvns	r2, r3
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	401a      	ands	r2, r3
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002864:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	fa01 f303 	lsl.w	r3, r1, r3
 800286e:	43d9      	mvns	r1, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002874:	4313      	orrs	r3, r2
         );
}
 8002876:	4618      	mov	r0, r3
 8002878:	3724      	adds	r7, #36	; 0x24
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr

08002882 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8002882:	b480      	push	{r7}
 8002884:	b083      	sub	sp, #12
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	60da      	str	r2, [r3, #12]
}
 8002896:	bf00      	nop
 8002898:	370c      	adds	r7, #12
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr

080028a2 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80028a2:	b480      	push	{r7}
 80028a4:	b083      	sub	sp, #12
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	695b      	ldr	r3, [r3, #20]
 80028ba:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	615a      	str	r2, [r3, #20]
}
 80028c2:	bf00      	nop
 80028c4:	370c      	adds	r7, #12
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr

080028ce <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 80028ce:	b480      	push	{r7}
 80028d0:	b083      	sub	sp, #12
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028de:	2b80      	cmp	r3, #128	; 0x80
 80028e0:	bf0c      	ite	eq
 80028e2:	2301      	moveq	r3, #1
 80028e4:	2300      	movne	r3, #0
 80028e6:	b2db      	uxtb	r3, r3
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	460b      	mov	r3, r1
 80028fe:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8002900:	78fa      	ldrb	r2, [r7, #3]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	605a      	str	r2, [r3, #4]
}
 8002906:	bf00      	nop
 8002908:	370c      	adds	r7, #12
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
	...

08002914 <LL_AHB1_GRP1_EnableClock>:
{
 8002914:	b480      	push	{r7}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800291c:	4b08      	ldr	r3, [pc, #32]	; (8002940 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800291e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002920:	4907      	ldr	r1, [pc, #28]	; (8002940 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4313      	orrs	r3, r2
 8002926:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002928:	4b05      	ldr	r3, [pc, #20]	; (8002940 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800292a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4013      	ands	r3, r2
 8002930:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002932:	68fb      	ldr	r3, [r7, #12]
}
 8002934:	bf00      	nop
 8002936:	3714      	adds	r7, #20
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr
 8002940:	40023800 	.word	0x40023800

08002944 <LL_APB1_GRP1_EnableClock>:
{
 8002944:	b480      	push	{r7}
 8002946:	b085      	sub	sp, #20
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 800294c:	4b08      	ldr	r3, [pc, #32]	; (8002970 <LL_APB1_GRP1_EnableClock+0x2c>)
 800294e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002950:	4907      	ldr	r1, [pc, #28]	; (8002970 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4313      	orrs	r3, r2
 8002956:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002958:	4b05      	ldr	r3, [pc, #20]	; (8002970 <LL_APB1_GRP1_EnableClock+0x2c>)
 800295a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	4013      	ands	r3, r2
 8002960:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002962:	68fb      	ldr	r3, [r7, #12]
}
 8002964:	bf00      	nop
 8002966:	3714      	adds	r7, #20
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr
 8002970:	40023800 	.word	0x40023800

08002974 <M8N_TransmitData>:
		0xB5, 0x62, 0x06, 0x09, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00,
		0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x31,
		0xBF
};

void M8N_TransmitData(unsigned char *data, unsigned char len) {
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	460b      	mov	r3, r1
 800297e:	70fb      	strb	r3, [r7, #3]
	for (int i = 0; i < len; i++) {
 8002980:	2300      	movs	r3, #0
 8002982:	60fb      	str	r3, [r7, #12]
 8002984:	e011      	b.n	80029aa <M8N_TransmitData+0x36>
		while(!LL_USART_IsActiveFlag_TXE(UART4));
 8002986:	bf00      	nop
 8002988:	480c      	ldr	r0, [pc, #48]	; (80029bc <M8N_TransmitData+0x48>)
 800298a:	f7ff ffa0 	bl	80028ce <LL_USART_IsActiveFlag_TXE>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d0f9      	beq.n	8002988 <M8N_TransmitData+0x14>
		LL_USART_TransmitData8(UART4, *(data + i));
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	4413      	add	r3, r2
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	4619      	mov	r1, r3
 800299e:	4807      	ldr	r0, [pc, #28]	; (80029bc <M8N_TransmitData+0x48>)
 80029a0:	f7ff ffa8 	bl	80028f4 <LL_USART_TransmitData8>
	for (int i = 0; i < len; i++) {
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	3301      	adds	r3, #1
 80029a8:	60fb      	str	r3, [r7, #12]
 80029aa:	78fb      	ldrb	r3, [r7, #3]
 80029ac:	68fa      	ldr	r2, [r7, #12]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	dbe9      	blt.n	8002986 <M8N_TransmitData+0x12>
	}
}
 80029b2:	bf00      	nop
 80029b4:	3710      	adds	r7, #16
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	40004c00 	.word	0x40004c00

080029c0 <M8N_UART4_Initialization>:

void M8N_UART4_Initialization(void) {
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b08e      	sub	sp, #56	; 0x38
 80029c4:	af00      	add	r7, sp, #0
	  LL_USART_InitTypeDef USART_InitStruct = {0};
 80029c6:	f107 031c 	add.w	r3, r7, #28
 80029ca:	2200      	movs	r2, #0
 80029cc:	601a      	str	r2, [r3, #0]
 80029ce:	605a      	str	r2, [r3, #4]
 80029d0:	609a      	str	r2, [r3, #8]
 80029d2:	60da      	str	r2, [r3, #12]
 80029d4:	611a      	str	r2, [r3, #16]
 80029d6:	615a      	str	r2, [r3, #20]
 80029d8:	619a      	str	r2, [r3, #24]

	  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029da:	1d3b      	adds	r3, r7, #4
 80029dc:	2200      	movs	r2, #0
 80029de:	601a      	str	r2, [r3, #0]
 80029e0:	605a      	str	r2, [r3, #4]
 80029e2:	609a      	str	r2, [r3, #8]
 80029e4:	60da      	str	r2, [r3, #12]
 80029e6:	611a      	str	r2, [r3, #16]
 80029e8:	615a      	str	r2, [r3, #20]

	  /* Peripheral clock enable */
	  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 80029ea:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80029ee:	f7ff ffa9 	bl	8002944 <LL_APB1_GRP1_EnableClock>

	  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80029f2:	2004      	movs	r0, #4
 80029f4:	f7ff ff8e 	bl	8002914 <LL_AHB1_GRP1_EnableClock>
	  /**UART4 GPIO Configuration
	  PC10   ------> UART4_TX
	  PC11   ------> UART4_RX
	  */
	  GPIO_InitStruct.Pin = M8N_TX4_Pin|M8N_RX4_Pin;
 80029f8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80029fc:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80029fe:	2302      	movs	r3, #2
 8002a00:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002a02:	2303      	movs	r3, #3
 8002a04:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002a06:	2300      	movs	r3, #0
 8002a08:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8002a0e:	2308      	movs	r3, #8
 8002a10:	61bb      	str	r3, [r7, #24]
	  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a12:	1d3b      	adds	r3, r7, #4
 8002a14:	4619      	mov	r1, r3
 8002a16:	4819      	ldr	r0, [pc, #100]	; (8002a7c <M8N_UART4_Initialization+0xbc>)
 8002a18:	f006 fa45 	bl	8008ea6 <LL_GPIO_Init>

	  /* UART4 interrupt Init */
	  NVIC_SetPriority(UART4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002a1c:	f7ff fea8 	bl	8002770 <__NVIC_GetPriorityGrouping>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2200      	movs	r2, #0
 8002a24:	2100      	movs	r1, #0
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7ff fef8 	bl	800281c <NVIC_EncodePriority>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	4619      	mov	r1, r3
 8002a30:	2034      	movs	r0, #52	; 0x34
 8002a32:	f7ff fec9 	bl	80027c8 <__NVIC_SetPriority>
	  NVIC_EnableIRQ(UART4_IRQn);
 8002a36:	2034      	movs	r0, #52	; 0x34
 8002a38:	f7ff fea8 	bl	800278c <__NVIC_EnableIRQ>

	  USART_InitStruct.BaudRate = 9600;
 8002a3c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8002a40:	61fb      	str	r3, [r7, #28]
	  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002a42:	2300      	movs	r3, #0
 8002a44:	623b      	str	r3, [r7, #32]
	  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002a46:	2300      	movs	r3, #0
 8002a48:	627b      	str	r3, [r7, #36]	; 0x24
	  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	62bb      	str	r3, [r7, #40]	; 0x28
	  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002a4e:	230c      	movs	r3, #12
 8002a50:	62fb      	str	r3, [r7, #44]	; 0x2c
	  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002a52:	2300      	movs	r3, #0
 8002a54:	633b      	str	r3, [r7, #48]	; 0x30
	  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002a56:	2300      	movs	r3, #0
 8002a58:	637b      	str	r3, [r7, #52]	; 0x34
	  LL_USART_Init(UART4, &USART_InitStruct);
 8002a5a:	f107 031c 	add.w	r3, r7, #28
 8002a5e:	4619      	mov	r1, r3
 8002a60:	4807      	ldr	r0, [pc, #28]	; (8002a80 <M8N_UART4_Initialization+0xc0>)
 8002a62:	f007 f90b 	bl	8009c7c <LL_USART_Init>
	  LL_USART_ConfigAsyncMode(UART4);
 8002a66:	4806      	ldr	r0, [pc, #24]	; (8002a80 <M8N_UART4_Initialization+0xc0>)
 8002a68:	f7ff ff1b 	bl	80028a2 <LL_USART_ConfigAsyncMode>
	  LL_USART_Enable(UART4);
 8002a6c:	4804      	ldr	r0, [pc, #16]	; (8002a80 <M8N_UART4_Initialization+0xc0>)
 8002a6e:	f7ff ff08 	bl	8002882 <LL_USART_Enable>
}
 8002a72:	bf00      	nop
 8002a74:	3738      	adds	r7, #56	; 0x38
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	40020800 	.word	0x40020800
 8002a80:	40004c00 	.word	0x40004c00

08002a84 <M8N_Initialization>:

void M8N_Initialization(void) {
 8002a84:	b580      	push	{r7, lr}
 8002a86:	af00      	add	r7, sp, #0
	M8N_UART4_Initialization();
 8002a88:	f7ff ff9a 	bl	80029c0 <M8N_UART4_Initialization>

	M8N_TransmitData(&UBX_CFG_PRT[0], sizeof(UBX_CFG_PRT));
 8002a8c:	211c      	movs	r1, #28
 8002a8e:	480d      	ldr	r0, [pc, #52]	; (8002ac4 <M8N_Initialization+0x40>)
 8002a90:	f7ff ff70 	bl	8002974 <M8N_TransmitData>
	HAL_Delay(100);
 8002a94:	2064      	movs	r0, #100	; 0x64
 8002a96:	f002 fcf1 	bl	800547c <HAL_Delay>
	M8N_TransmitData(&UBX_CFG_MSG[0], sizeof(UBX_CFG_MSG));
 8002a9a:	2110      	movs	r1, #16
 8002a9c:	480a      	ldr	r0, [pc, #40]	; (8002ac8 <M8N_Initialization+0x44>)
 8002a9e:	f7ff ff69 	bl	8002974 <M8N_TransmitData>
	HAL_Delay(100);
 8002aa2:	2064      	movs	r0, #100	; 0x64
 8002aa4:	f002 fcea 	bl	800547c <HAL_Delay>
	M8N_TransmitData(&UBX_CFG_RATE[0], sizeof(UBX_CFG_RATE));
 8002aa8:	210e      	movs	r1, #14
 8002aaa:	4808      	ldr	r0, [pc, #32]	; (8002acc <M8N_Initialization+0x48>)
 8002aac:	f7ff ff62 	bl	8002974 <M8N_TransmitData>
	HAL_Delay(100);
 8002ab0:	2064      	movs	r0, #100	; 0x64
 8002ab2:	f002 fce3 	bl	800547c <HAL_Delay>
	M8N_TransmitData(&UBX_CFG_CFG[0], sizeof(UBX_CFG_CFG));
 8002ab6:	2115      	movs	r1, #21
 8002ab8:	4805      	ldr	r0, [pc, #20]	; (8002ad0 <M8N_Initialization+0x4c>)
 8002aba:	f7ff ff5b 	bl	8002974 <M8N_TransmitData>
}
 8002abe:	bf00      	nop
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	0800d778 	.word	0x0800d778
 8002ac8:	0800d794 	.word	0x0800d794
 8002acc:	0800d7a4 	.word	0x0800d7a4
 8002ad0:	0800d7b4 	.word	0x0800d7b4

08002ad4 <M8N_UBX_CHKSUM_Check>:

unsigned char M8N_UBX_CHKSUM_Check(unsigned char *data, unsigned char len) {
 8002ad4:	b480      	push	{r7}
 8002ad6:	b085      	sub	sp, #20
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	460b      	mov	r3, r1
 8002ade:	70fb      	strb	r3, [r7, #3]
	unsigned char CK_A = 0, CK_B = 0;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	73fb      	strb	r3, [r7, #15]
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	73bb      	strb	r3, [r7, #14]

	for (int i = 2; i < len - 2; i++) {
 8002ae8:	2302      	movs	r3, #2
 8002aea:	60bb      	str	r3, [r7, #8]
 8002aec:	e00d      	b.n	8002b0a <M8N_UBX_CHKSUM_Check+0x36>
		//exclude SYNC CHAR and CHECKSUM bytes
		CK_A = CK_A + data[i];
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	4413      	add	r3, r2
 8002af4:	781a      	ldrb	r2, [r3, #0]
 8002af6:	7bfb      	ldrb	r3, [r7, #15]
 8002af8:	4413      	add	r3, r2
 8002afa:	73fb      	strb	r3, [r7, #15]
		CK_B = CK_B + CK_A;
 8002afc:	7bba      	ldrb	r2, [r7, #14]
 8002afe:	7bfb      	ldrb	r3, [r7, #15]
 8002b00:	4413      	add	r3, r2
 8002b02:	73bb      	strb	r3, [r7, #14]
	for (int i = 2; i < len - 2; i++) {
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	3301      	adds	r3, #1
 8002b08:	60bb      	str	r3, [r7, #8]
 8002b0a:	78fb      	ldrb	r3, [r7, #3]
 8002b0c:	3b02      	subs	r3, #2
 8002b0e:	68ba      	ldr	r2, [r7, #8]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	dbec      	blt.n	8002aee <M8N_UBX_CHKSUM_Check+0x1a>
	}

	return (CK_A == data[len - 2]) && (CK_B == data[len - 1]);
 8002b14:	78fb      	ldrb	r3, [r7, #3]
 8002b16:	3b02      	subs	r3, #2
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	7bfa      	ldrb	r2, [r7, #15]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d109      	bne.n	8002b38 <M8N_UBX_CHKSUM_Check+0x64>
 8002b24:	78fb      	ldrb	r3, [r7, #3]
 8002b26:	3b01      	subs	r3, #1
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	4413      	add	r3, r2
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	7bba      	ldrb	r2, [r7, #14]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d101      	bne.n	8002b38 <M8N_UBX_CHKSUM_Check+0x64>
 8002b34:	2301      	movs	r3, #1
 8002b36:	e000      	b.n	8002b3a <M8N_UBX_CHKSUM_Check+0x66>
 8002b38:	2300      	movs	r3, #0
 8002b3a:	b2db      	uxtb	r3, r3
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3714      	adds	r7, #20
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr

08002b48 <M8N_UBX_NAV_POSLLH_Parsing>:


void M8N_UBX_NAV_POSLLH_Parsing(unsigned char *data, M8N_UBX_NAV_POSLLH *posllh) {
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
	posllh -> CLASS = data[2];
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	789a      	ldrb	r2, [r3, #2]
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	701a      	strb	r2, [r3, #0]
	posllh -> ID = data[3];
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	78da      	ldrb	r2, [r3, #3]
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	705a      	strb	r2, [r3, #1]
	posllh -> length = data[4] | data[5] << 8;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	3304      	adds	r3, #4
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	b21a      	sxth	r2, r3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	3305      	adds	r3, #5
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	021b      	lsls	r3, r3, #8
 8002b72:	b21b      	sxth	r3, r3
 8002b74:	4313      	orrs	r3, r2
 8002b76:	b21b      	sxth	r3, r3
 8002b78:	b29a      	uxth	r2, r3
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	805a      	strh	r2, [r3, #2]

	posllh -> iTOW = data[6] | data[7] << 8 | data[8] << 16 | data[9] << 24;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	3306      	adds	r3, #6
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	461a      	mov	r2, r3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	3307      	adds	r3, #7
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	021b      	lsls	r3, r3, #8
 8002b8e:	431a      	orrs	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	3308      	adds	r3, #8
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	041b      	lsls	r3, r3, #16
 8002b98:	431a      	orrs	r2, r3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	3309      	adds	r3, #9
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	061b      	lsls	r3, r3, #24
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	605a      	str	r2, [r3, #4]
	posllh -> lon = data[10] | data[11] << 8 | data[12] << 16 | data[13] << 24;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	330a      	adds	r3, #10
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	330b      	adds	r3, #11
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	021b      	lsls	r3, r3, #8
 8002bba:	431a      	orrs	r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	330c      	adds	r3, #12
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	041b      	lsls	r3, r3, #16
 8002bc4:	431a      	orrs	r2, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	330d      	adds	r3, #13
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	061b      	lsls	r3, r3, #24
 8002bce:	431a      	orrs	r2, r3
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	609a      	str	r2, [r3, #8]
	posllh -> lat = data[14] | data[15] << 8 | data[16] << 16 | data[17] << 24;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	330e      	adds	r3, #14
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	461a      	mov	r2, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	330f      	adds	r3, #15
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	021b      	lsls	r3, r3, #8
 8002be4:	431a      	orrs	r2, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	3310      	adds	r3, #16
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	041b      	lsls	r3, r3, #16
 8002bee:	431a      	orrs	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	3311      	adds	r3, #17
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	061b      	lsls	r3, r3, #24
 8002bf8:	431a      	orrs	r2, r3
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	60da      	str	r2, [r3, #12]
	posllh -> height = data[18] | data[19] << 8 | data[20] << 16 | data[21] << 24;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	3312      	adds	r3, #18
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	461a      	mov	r2, r3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	3313      	adds	r3, #19
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	021b      	lsls	r3, r3, #8
 8002c0e:	431a      	orrs	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	3314      	adds	r3, #20
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	041b      	lsls	r3, r3, #16
 8002c18:	431a      	orrs	r2, r3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	3315      	adds	r3, #21
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	061b      	lsls	r3, r3, #24
 8002c22:	431a      	orrs	r2, r3
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	611a      	str	r2, [r3, #16]
	posllh -> hMSL = data[22] | data[23] << 8 | data[24] << 16 | data[25] << 24;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	3316      	adds	r3, #22
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	461a      	mov	r2, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	3317      	adds	r3, #23
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	021b      	lsls	r3, r3, #8
 8002c38:	431a      	orrs	r2, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	3318      	adds	r3, #24
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	041b      	lsls	r3, r3, #16
 8002c42:	431a      	orrs	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	3319      	adds	r3, #25
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	061b      	lsls	r3, r3, #24
 8002c4c:	431a      	orrs	r2, r3
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	615a      	str	r2, [r3, #20]
	posllh -> hAcc = data[26] | data[27] << 8 | data[28] << 16 | data[29] << 24;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	331a      	adds	r3, #26
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	461a      	mov	r2, r3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	331b      	adds	r3, #27
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	021b      	lsls	r3, r3, #8
 8002c62:	431a      	orrs	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	331c      	adds	r3, #28
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	041b      	lsls	r3, r3, #16
 8002c6c:	431a      	orrs	r2, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	331d      	adds	r3, #29
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	061b      	lsls	r3, r3, #24
 8002c76:	4313      	orrs	r3, r2
 8002c78:	461a      	mov	r2, r3
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	619a      	str	r2, [r3, #24]
	posllh -> vAcc = data[30] | data[31] << 8 | data[32] << 16 | data[33] << 24;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	331e      	adds	r3, #30
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	461a      	mov	r2, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	331f      	adds	r3, #31
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	021b      	lsls	r3, r3, #8
 8002c8e:	431a      	orrs	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	3320      	adds	r3, #32
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	041b      	lsls	r3, r3, #16
 8002c98:	431a      	orrs	r2, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	3321      	adds	r3, #33	; 0x21
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	061b      	lsls	r3, r3, #24
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	61da      	str	r2, [r3, #28]

//	posllh -> lon_f64 = posllh -> lon / 10000000.;
//	posllh -> lat_f64 = posllh -> lat / 10000000.;

}
 8002caa:	bf00      	nop
 8002cac:	370c      	adds	r7, #12
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
	...

08002cb8 <Quaternion_Update>:
float BNO080_Roll;
float BNO080_Pitch;
float BNO080_Yaw;

void Quaternion_Update(float* q)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b088      	sub	sp, #32
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
	float q1, q2, q3, q4;
	float norm;

	norm = invSqrt(q[0]*q[0] + q[1]*q[1] + q[2]*q[2] + q[3]*q[3]);    // normalize quaternion
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	ed93 7a00 	vldr	s14, [r3]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	edd3 7a00 	vldr	s15, [r3]
 8002ccc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	3304      	adds	r3, #4
 8002cd4:	edd3 6a00 	vldr	s13, [r3]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	3304      	adds	r3, #4
 8002cdc:	edd3 7a00 	vldr	s15, [r3]
 8002ce0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ce4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	3308      	adds	r3, #8
 8002cec:	edd3 6a00 	vldr	s13, [r3]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	3308      	adds	r3, #8
 8002cf4:	edd3 7a00 	vldr	s15, [r3]
 8002cf8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cfc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	330c      	adds	r3, #12
 8002d04:	edd3 6a00 	vldr	s13, [r3]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	330c      	adds	r3, #12
 8002d0c:	edd3 7a00 	vldr	s15, [r3]
 8002d10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d18:	eeb0 0a67 	vmov.f32	s0, s15
 8002d1c:	f000 f91e 	bl	8002f5c <invSqrt>
 8002d20:	ed87 0a07 	vstr	s0, [r7, #28]
	
	q1 = q[0] * norm; //x
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	edd3 7a00 	vldr	s15, [r3]
 8002d2a:	ed97 7a07 	vldr	s14, [r7, #28]
 8002d2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d32:	edc7 7a06 	vstr	s15, [r7, #24]
	q2 = q[1] * norm; //y
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	3304      	adds	r3, #4
 8002d3a:	edd3 7a00 	vldr	s15, [r3]
 8002d3e:	ed97 7a07 	vldr	s14, [r7, #28]
 8002d42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d46:	edc7 7a05 	vstr	s15, [r7, #20]
	q3 = q[2] * norm; //z
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	3308      	adds	r3, #8
 8002d4e:	edd3 7a00 	vldr	s15, [r3]
 8002d52:	ed97 7a07 	vldr	s14, [r7, #28]
 8002d56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d5a:	edc7 7a04 	vstr	s15, [r7, #16]
	q4 = q[3] * norm; //w
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	330c      	adds	r3, #12
 8002d62:	edd3 7a00 	vldr	s15, [r3]
 8002d66:	ed97 7a07 	vldr	s14, [r7, #28]
 8002d6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d6e:	edc7 7a03 	vstr	s15, [r7, #12]

	BNO080_Pitch = atan2f(2.0f * (q2*q3 + q1*q4), q1*q1 + q2*q2 - q3*q3 - q4*q4);
 8002d72:	ed97 7a05 	vldr	s14, [r7, #20]
 8002d76:	edd7 7a04 	vldr	s15, [r7, #16]
 8002d7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d7e:	edd7 6a06 	vldr	s13, [r7, #24]
 8002d82:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d8e:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8002d92:	ed97 7a06 	vldr	s14, [r7, #24]
 8002d96:	edd7 7a06 	vldr	s15, [r7, #24]
 8002d9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d9e:	edd7 6a05 	vldr	s13, [r7, #20]
 8002da2:	edd7 7a05 	vldr	s15, [r7, #20]
 8002da6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002daa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002dae:	edd7 6a04 	vldr	s13, [r7, #16]
 8002db2:	edd7 7a04 	vldr	s15, [r7, #16]
 8002db6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002dba:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002dbe:	edd7 6a03 	vldr	s13, [r7, #12]
 8002dc2:	edd7 7a03 	vldr	s15, [r7, #12]
 8002dc6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002dca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dce:	eef0 0a67 	vmov.f32	s1, s15
 8002dd2:	eeb0 0a46 	vmov.f32	s0, s12
 8002dd6:	f009 fbe5 	bl	800c5a4 <atan2f>
 8002dda:	eef0 7a40 	vmov.f32	s15, s0
 8002dde:	4b59      	ldr	r3, [pc, #356]	; (8002f44 <Quaternion_Update+0x28c>)
 8002de0:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Roll  = -asinf(2.0f * (q2*q4 - q1*q3));
 8002de4:	ed97 7a05 	vldr	s14, [r7, #20]
 8002de8:	edd7 7a03 	vldr	s15, [r7, #12]
 8002dec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002df0:	edd7 6a06 	vldr	s13, [r7, #24]
 8002df4:	edd7 7a04 	vldr	s15, [r7, #16]
 8002df8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002dfc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e00:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002e04:	eeb0 0a67 	vmov.f32	s0, s15
 8002e08:	f009 fb74 	bl	800c4f4 <asinf>
 8002e0c:	eef0 7a40 	vmov.f32	s15, s0
 8002e10:	eef1 7a67 	vneg.f32	s15, s15
 8002e14:	4b4c      	ldr	r3, [pc, #304]	; (8002f48 <Quaternion_Update+0x290>)
 8002e16:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Yaw   = atan2f(2.0f * (q1*q2 + q3*q4), q1*q1 - q2*q2 - q3*q3 + q4*q4);
 8002e1a:	ed97 7a06 	vldr	s14, [r7, #24]
 8002e1e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e22:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e26:	edd7 6a04 	vldr	s13, [r7, #16]
 8002e2a:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e36:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8002e3a:	ed97 7a06 	vldr	s14, [r7, #24]
 8002e3e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002e42:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e46:	edd7 6a05 	vldr	s13, [r7, #20]
 8002e4a:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e52:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002e56:	edd7 6a04 	vldr	s13, [r7, #16]
 8002e5a:	edd7 7a04 	vldr	s15, [r7, #16]
 8002e5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e62:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002e66:	edd7 6a03 	vldr	s13, [r7, #12]
 8002e6a:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e76:	eef0 0a67 	vmov.f32	s1, s15
 8002e7a:	eeb0 0a46 	vmov.f32	s0, s12
 8002e7e:	f009 fb91 	bl	800c5a4 <atan2f>
 8002e82:	eef0 7a40 	vmov.f32	s15, s0
 8002e86:	4b31      	ldr	r3, [pc, #196]	; (8002f4c <Quaternion_Update+0x294>)
 8002e88:	edc3 7a00 	vstr	s15, [r3]

	BNO080_Pitch *= _180_DIV_PI;
 8002e8c:	4b2d      	ldr	r3, [pc, #180]	; (8002f44 <Quaternion_Update+0x28c>)
 8002e8e:	edd3 7a00 	vldr	s15, [r3]
 8002e92:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002f50 <Quaternion_Update+0x298>
 8002e96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e9a:	4b2a      	ldr	r3, [pc, #168]	; (8002f44 <Quaternion_Update+0x28c>)
 8002e9c:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Roll  *= _180_DIV_PI;
 8002ea0:	4b29      	ldr	r3, [pc, #164]	; (8002f48 <Quaternion_Update+0x290>)
 8002ea2:	edd3 7a00 	vldr	s15, [r3]
 8002ea6:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002f50 <Quaternion_Update+0x298>
 8002eaa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002eae:	4b26      	ldr	r3, [pc, #152]	; (8002f48 <Quaternion_Update+0x290>)
 8002eb0:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Yaw   *= _180_DIV_PI;
 8002eb4:	4b25      	ldr	r3, [pc, #148]	; (8002f4c <Quaternion_Update+0x294>)
 8002eb6:	edd3 7a00 	vldr	s15, [r3]
 8002eba:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8002f50 <Quaternion_Update+0x298>
 8002ebe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ec2:	4b22      	ldr	r3, [pc, #136]	; (8002f4c <Quaternion_Update+0x294>)
 8002ec4:	edc3 7a00 	vstr	s15, [r3]
	
	if(BNO080_Yaw>=0)
 8002ec8:	4b20      	ldr	r3, [pc, #128]	; (8002f4c <Quaternion_Update+0x294>)
 8002eca:	edd3 7a00 	vldr	s15, [r3]
 8002ece:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ed6:	db0a      	blt.n	8002eee <Quaternion_Update+0x236>
		BNO080_Yaw = 360.f - BNO080_Yaw;
 8002ed8:	4b1c      	ldr	r3, [pc, #112]	; (8002f4c <Quaternion_Update+0x294>)
 8002eda:	edd3 7a00 	vldr	s15, [r3]
 8002ede:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8002f54 <Quaternion_Update+0x29c>
 8002ee2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ee6:	4b19      	ldr	r3, [pc, #100]	; (8002f4c <Quaternion_Update+0x294>)
 8002ee8:	edc3 7a00 	vstr	s15, [r3]
 8002eec:	e007      	b.n	8002efe <Quaternion_Update+0x246>
	else	
		BNO080_Yaw = -BNO080_Yaw;
 8002eee:	4b17      	ldr	r3, [pc, #92]	; (8002f4c <Quaternion_Update+0x294>)
 8002ef0:	edd3 7a00 	vldr	s15, [r3]
 8002ef4:	eef1 7a67 	vneg.f32	s15, s15
 8002ef8:	4b14      	ldr	r3, [pc, #80]	; (8002f4c <Quaternion_Update+0x294>)
 8002efa:	edc3 7a00 	vstr	s15, [r3]
	
	
	if(BNO080_Pitch>=0)
 8002efe:	4b11      	ldr	r3, [pc, #68]	; (8002f44 <Quaternion_Update+0x28c>)
 8002f00:	edd3 7a00 	vldr	s15, [r3]
 8002f04:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f0c:	db0a      	blt.n	8002f24 <Quaternion_Update+0x26c>
		BNO080_Pitch = 180.f - BNO080_Pitch;
 8002f0e:	4b0d      	ldr	r3, [pc, #52]	; (8002f44 <Quaternion_Update+0x28c>)
 8002f10:	edd3 7a00 	vldr	s15, [r3]
 8002f14:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002f58 <Quaternion_Update+0x2a0>
 8002f18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f1c:	4b09      	ldr	r3, [pc, #36]	; (8002f44 <Quaternion_Update+0x28c>)
 8002f1e:	edc3 7a00 	vstr	s15, [r3]
	else
		BNO080_Pitch = -(BNO080_Pitch + 180.f);
}
 8002f22:	e00b      	b.n	8002f3c <Quaternion_Update+0x284>
		BNO080_Pitch = -(BNO080_Pitch + 180.f);
 8002f24:	4b07      	ldr	r3, [pc, #28]	; (8002f44 <Quaternion_Update+0x28c>)
 8002f26:	edd3 7a00 	vldr	s15, [r3]
 8002f2a:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8002f58 <Quaternion_Update+0x2a0>
 8002f2e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002f32:	eef1 7a67 	vneg.f32	s15, s15
 8002f36:	4b03      	ldr	r3, [pc, #12]	; (8002f44 <Quaternion_Update+0x28c>)
 8002f38:	edc3 7a00 	vstr	s15, [r3]
}
 8002f3c:	bf00      	nop
 8002f3e:	3720      	adds	r7, #32
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	200003a8 	.word	0x200003a8
 8002f48:	200003a0 	.word	0x200003a0
 8002f4c:	200003a4 	.word	0x200003a4
 8002f50:	42652ee1 	.word	0x42652ee1
 8002f54:	43b40000 	.word	0x43b40000
 8002f58:	43340000 	.word	0x43340000

08002f5c <invSqrt>:

// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b087      	sub	sp, #28
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 8002f66:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f6a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002f6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f72:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 8002f7a:	f107 0310 	add.w	r3, r7, #16
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	105a      	asrs	r2, r3, #1
 8002f86:	4b12      	ldr	r3, [pc, #72]	; (8002fd0 <invSqrt+0x74>)
 8002f88:	1a9b      	subs	r3, r3, r2
 8002f8a:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8002f8c:	f107 030c 	add.w	r3, r7, #12
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8002f94:	ed97 7a04 	vldr	s14, [r7, #16]
 8002f98:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002fa0:	edd7 7a04 	vldr	s15, [r7, #16]
 8002fa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fa8:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002fac:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002fb0:	edd7 7a04 	vldr	s15, [r7, #16]
 8002fb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fb8:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	ee07 3a90 	vmov	s15, r3
}
 8002fc2:	eeb0 0a67 	vmov.f32	s0, s15
 8002fc6:	371c      	adds	r7, #28
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr
 8002fd0:	5f3759df 	.word	0x5f3759df

08002fd4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8002fda:	463b      	mov	r3, r7
 8002fdc:	2200      	movs	r2, #0
 8002fde:	601a      	str	r2, [r3, #0]
 8002fe0:	605a      	str	r2, [r3, #4]
 8002fe2:	609a      	str	r2, [r3, #8]
 8002fe4:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8002fe6:	4b21      	ldr	r3, [pc, #132]	; (800306c <MX_ADC1_Init+0x98>)
 8002fe8:	4a21      	ldr	r2, [pc, #132]	; (8003070 <MX_ADC1_Init+0x9c>)
 8002fea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8002fec:	4b1f      	ldr	r3, [pc, #124]	; (800306c <MX_ADC1_Init+0x98>)
 8002fee:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002ff2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002ff4:	4b1d      	ldr	r3, [pc, #116]	; (800306c <MX_ADC1_Init+0x98>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002ffa:	4b1c      	ldr	r3, [pc, #112]	; (800306c <MX_ADC1_Init+0x98>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003000:	4b1a      	ldr	r3, [pc, #104]	; (800306c <MX_ADC1_Init+0x98>)
 8003002:	2201      	movs	r2, #1
 8003004:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003006:	4b19      	ldr	r3, [pc, #100]	; (800306c <MX_ADC1_Init+0x98>)
 8003008:	2200      	movs	r2, #0
 800300a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800300e:	4b17      	ldr	r3, [pc, #92]	; (800306c <MX_ADC1_Init+0x98>)
 8003010:	2200      	movs	r2, #0
 8003012:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003014:	4b15      	ldr	r3, [pc, #84]	; (800306c <MX_ADC1_Init+0x98>)
 8003016:	4a17      	ldr	r2, [pc, #92]	; (8003074 <MX_ADC1_Init+0xa0>)
 8003018:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800301a:	4b14      	ldr	r3, [pc, #80]	; (800306c <MX_ADC1_Init+0x98>)
 800301c:	2200      	movs	r2, #0
 800301e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003020:	4b12      	ldr	r3, [pc, #72]	; (800306c <MX_ADC1_Init+0x98>)
 8003022:	2201      	movs	r2, #1
 8003024:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8003026:	4b11      	ldr	r3, [pc, #68]	; (800306c <MX_ADC1_Init+0x98>)
 8003028:	2201      	movs	r2, #1
 800302a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800302e:	4b0f      	ldr	r3, [pc, #60]	; (800306c <MX_ADC1_Init+0x98>)
 8003030:	2201      	movs	r2, #1
 8003032:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003034:	480d      	ldr	r0, [pc, #52]	; (800306c <MX_ADC1_Init+0x98>)
 8003036:	f002 fa43 	bl	80054c0 <HAL_ADC_Init>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d001      	beq.n	8003044 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8003040:	f001 f816 	bl	8004070 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8003044:	2308      	movs	r3, #8
 8003046:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003048:	2301      	movs	r3, #1
 800304a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800304c:	2307      	movs	r3, #7
 800304e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003050:	463b      	mov	r3, r7
 8003052:	4619      	mov	r1, r3
 8003054:	4805      	ldr	r0, [pc, #20]	; (800306c <MX_ADC1_Init+0x98>)
 8003056:	f002 fb87 	bl	8005768 <HAL_ADC_ConfigChannel>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8003060:	f001 f806 	bl	8004070 <Error_Handler>
  }

}
 8003064:	bf00      	nop
 8003066:	3710      	adds	r7, #16
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}
 800306c:	200003ac 	.word	0x200003ac
 8003070:	40012000 	.word	0x40012000
 8003074:	0f000001 	.word	0x0f000001

08003078 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b08a      	sub	sp, #40	; 0x28
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003080:	f107 0314 	add.w	r3, r7, #20
 8003084:	2200      	movs	r2, #0
 8003086:	601a      	str	r2, [r3, #0]
 8003088:	605a      	str	r2, [r3, #4]
 800308a:	609a      	str	r2, [r3, #8]
 800308c:	60da      	str	r2, [r3, #12]
 800308e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a2e      	ldr	r2, [pc, #184]	; (8003150 <HAL_ADC_MspInit+0xd8>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d156      	bne.n	8003148 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800309a:	2300      	movs	r3, #0
 800309c:	613b      	str	r3, [r7, #16]
 800309e:	4b2d      	ldr	r3, [pc, #180]	; (8003154 <HAL_ADC_MspInit+0xdc>)
 80030a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a2:	4a2c      	ldr	r2, [pc, #176]	; (8003154 <HAL_ADC_MspInit+0xdc>)
 80030a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030a8:	6453      	str	r3, [r2, #68]	; 0x44
 80030aa:	4b2a      	ldr	r3, [pc, #168]	; (8003154 <HAL_ADC_MspInit+0xdc>)
 80030ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b2:	613b      	str	r3, [r7, #16]
 80030b4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030b6:	2300      	movs	r3, #0
 80030b8:	60fb      	str	r3, [r7, #12]
 80030ba:	4b26      	ldr	r3, [pc, #152]	; (8003154 <HAL_ADC_MspInit+0xdc>)
 80030bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030be:	4a25      	ldr	r2, [pc, #148]	; (8003154 <HAL_ADC_MspInit+0xdc>)
 80030c0:	f043 0302 	orr.w	r3, r3, #2
 80030c4:	6313      	str	r3, [r2, #48]	; 0x30
 80030c6:	4b23      	ldr	r3, [pc, #140]	; (8003154 <HAL_ADC_MspInit+0xdc>)
 80030c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	60fb      	str	r3, [r7, #12]
 80030d0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PB0     ------> ADC1_IN8 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80030d2:	2301      	movs	r3, #1
 80030d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030d6:	2303      	movs	r3, #3
 80030d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030da:	2300      	movs	r3, #0
 80030dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030de:	f107 0314 	add.w	r3, r7, #20
 80030e2:	4619      	mov	r1, r3
 80030e4:	481c      	ldr	r0, [pc, #112]	; (8003158 <HAL_ADC_MspInit+0xe0>)
 80030e6:	f003 fa81 	bl	80065ec <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80030ea:	4b1c      	ldr	r3, [pc, #112]	; (800315c <HAL_ADC_MspInit+0xe4>)
 80030ec:	4a1c      	ldr	r2, [pc, #112]	; (8003160 <HAL_ADC_MspInit+0xe8>)
 80030ee:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80030f0:	4b1a      	ldr	r3, [pc, #104]	; (800315c <HAL_ADC_MspInit+0xe4>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80030f6:	4b19      	ldr	r3, [pc, #100]	; (800315c <HAL_ADC_MspInit+0xe4>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80030fc:	4b17      	ldr	r3, [pc, #92]	; (800315c <HAL_ADC_MspInit+0xe4>)
 80030fe:	2200      	movs	r2, #0
 8003100:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_DISABLE;
 8003102:	4b16      	ldr	r3, [pc, #88]	; (800315c <HAL_ADC_MspInit+0xe4>)
 8003104:	2200      	movs	r2, #0
 8003106:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003108:	4b14      	ldr	r3, [pc, #80]	; (800315c <HAL_ADC_MspInit+0xe4>)
 800310a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800310e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003110:	4b12      	ldr	r3, [pc, #72]	; (800315c <HAL_ADC_MspInit+0xe4>)
 8003112:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003116:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003118:	4b10      	ldr	r3, [pc, #64]	; (800315c <HAL_ADC_MspInit+0xe4>)
 800311a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800311e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003120:	4b0e      	ldr	r3, [pc, #56]	; (800315c <HAL_ADC_MspInit+0xe4>)
 8003122:	2200      	movs	r2, #0
 8003124:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003126:	4b0d      	ldr	r3, [pc, #52]	; (800315c <HAL_ADC_MspInit+0xe4>)
 8003128:	2200      	movs	r2, #0
 800312a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800312c:	480b      	ldr	r0, [pc, #44]	; (800315c <HAL_ADC_MspInit+0xe4>)
 800312e:	f002 fecd 	bl	8005ecc <HAL_DMA_Init>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d001      	beq.n	800313c <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8003138:	f000 ff9a 	bl	8004070 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4a07      	ldr	r2, [pc, #28]	; (800315c <HAL_ADC_MspInit+0xe4>)
 8003140:	639a      	str	r2, [r3, #56]	; 0x38
 8003142:	4a06      	ldr	r2, [pc, #24]	; (800315c <HAL_ADC_MspInit+0xe4>)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8003148:	bf00      	nop
 800314a:	3728      	adds	r7, #40	; 0x28
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	40012000 	.word	0x40012000
 8003154:	40023800 	.word	0x40023800
 8003158:	40020400 	.word	0x40020400
 800315c:	200003f4 	.word	0x200003f4
 8003160:	40026410 	.word	0x40026410

08003164 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800316a:	2300      	movs	r3, #0
 800316c:	607b      	str	r3, [r7, #4]
 800316e:	4b0c      	ldr	r3, [pc, #48]	; (80031a0 <MX_DMA_Init+0x3c>)
 8003170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003172:	4a0b      	ldr	r2, [pc, #44]	; (80031a0 <MX_DMA_Init+0x3c>)
 8003174:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003178:	6313      	str	r3, [r2, #48]	; 0x30
 800317a:	4b09      	ldr	r3, [pc, #36]	; (80031a0 <MX_DMA_Init+0x3c>)
 800317c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003182:	607b      	str	r3, [r7, #4]
 8003184:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8003186:	2200      	movs	r2, #0
 8003188:	2100      	movs	r1, #0
 800318a:	2038      	movs	r0, #56	; 0x38
 800318c:	f002 fe67 	bl	8005e5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003190:	2038      	movs	r0, #56	; 0x38
 8003192:	f002 fe80 	bl	8005e96 <HAL_NVIC_EnableIRQ>

}
 8003196:	bf00      	nop
 8003198:	3708      	adds	r7, #8
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	40023800 	.word	0x40023800

080031a4 <LL_GPIO_SetOutputPin>:
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	683a      	ldr	r2, [r7, #0]
 80031b2:	619a      	str	r2, [r3, #24]
}
 80031b4:	bf00      	nop
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <LL_GPIO_ResetOutputPin>:
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	041a      	lsls	r2, r3, #16
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	619a      	str	r2, [r3, #24]
}
 80031d2:	bf00      	nop
 80031d4:	370c      	adds	r7, #12
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
	...

080031e0 <LL_AHB1_GRP1_EnableClock>:
{
 80031e0:	b480      	push	{r7}
 80031e2:	b085      	sub	sp, #20
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80031e8:	4b08      	ldr	r3, [pc, #32]	; (800320c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80031ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031ec:	4907      	ldr	r1, [pc, #28]	; (800320c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80031f4:	4b05      	ldr	r3, [pc, #20]	; (800320c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80031f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4013      	ands	r3, r2
 80031fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80031fe:	68fb      	ldr	r3, [r7, #12]
}
 8003200:	bf00      	nop
 8003202:	3714      	adds	r7, #20
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr
 800320c:	40023800 	.word	0x40023800

08003210 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b086      	sub	sp, #24
 8003214:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003216:	463b      	mov	r3, r7
 8003218:	2200      	movs	r2, #0
 800321a:	601a      	str	r2, [r3, #0]
 800321c:	605a      	str	r2, [r3, #4]
 800321e:	609a      	str	r2, [r3, #8]
 8003220:	60da      	str	r2, [r3, #12]
 8003222:	611a      	str	r2, [r3, #16]
 8003224:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8003226:	2004      	movs	r0, #4
 8003228:	f7ff ffda 	bl	80031e0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 800322c:	2080      	movs	r0, #128	; 0x80
 800322e:	f7ff ffd7 	bl	80031e0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8003232:	2001      	movs	r0, #1
 8003234:	f7ff ffd4 	bl	80031e0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8003238:	2002      	movs	r0, #2
 800323a:	f7ff ffd1 	bl	80031e0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 800323e:	2008      	movs	r0, #8
 8003240:	f7ff ffce 	bl	80031e0 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_13);
 8003244:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003248:	482e      	ldr	r0, [pc, #184]	; (8003304 <MX_GPIO_Init+0xf4>)
 800324a:	f7ff ffab 	bl	80031a4 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_4 
 800324e:	f240 2117 	movw	r1, #535	; 0x217
 8003252:	482c      	ldr	r0, [pc, #176]	; (8003304 <MX_GPIO_Init+0xf4>)
 8003254:	f7ff ffb4 	bl	80031c0 <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_9);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_12|LL_GPIO_PIN_6);
 8003258:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800325c:	482a      	ldr	r0, [pc, #168]	; (8003308 <MX_GPIO_Init+0xf8>)
 800325e:	f7ff ffaf 	bl	80031c0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8003262:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003266:	4829      	ldr	r0, [pc, #164]	; (800330c <MX_GPIO_Init+0xfc>)
 8003268:	f7ff ffaa 	bl	80031c0 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2 
 800326c:	f242 2317 	movw	r3, #8727	; 0x2217
 8003270:	603b      	str	r3, [r7, #0]
                          |LL_GPIO_PIN_4|LL_GPIO_PIN_9;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8003272:	2301      	movs	r3, #1
 8003274:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003276:	2300      	movs	r3, #0
 8003278:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800327a:	2300      	movs	r3, #0
 800327c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800327e:	2300      	movs	r3, #0
 8003280:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003282:	463b      	mov	r3, r7
 8003284:	4619      	mov	r1, r3
 8003286:	481f      	ldr	r0, [pc, #124]	; (8003304 <MX_GPIO_Init+0xf4>)
 8003288:	f005 fe0d 	bl	8008ea6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_8;
 800328c:	f44f 7390 	mov.w	r3, #288	; 0x120
 8003290:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8003292:	2300      	movs	r3, #0
 8003294:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003296:	2300      	movs	r3, #0
 8003298:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800329a:	463b      	mov	r3, r7
 800329c:	4619      	mov	r1, r3
 800329e:	4819      	ldr	r0, [pc, #100]	; (8003304 <MX_GPIO_Init+0xf4>)
 80032a0:	f005 fe01 	bl	8008ea6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12|LL_GPIO_PIN_6;
 80032a4:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 80032a8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80032aa:	2301      	movs	r3, #1
 80032ac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80032ae:	2300      	movs	r3, #0
 80032b0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80032b2:	2300      	movs	r3, #0
 80032b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80032b6:	2300      	movs	r3, #0
 80032b8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032ba:	463b      	mov	r3, r7
 80032bc:	4619      	mov	r1, r3
 80032be:	4812      	ldr	r0, [pc, #72]	; (8003308 <MX_GPIO_Init+0xf8>)
 80032c0:	f005 fdf1 	bl	8008ea6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 80032c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032c8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80032ca:	2301      	movs	r3, #1
 80032cc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80032ce:	2300      	movs	r3, #0
 80032d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80032d2:	2300      	movs	r3, #0
 80032d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80032d6:	2300      	movs	r3, #0
 80032d8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032da:	463b      	mov	r3, r7
 80032dc:	4619      	mov	r1, r3
 80032de:	480b      	ldr	r0, [pc, #44]	; (800330c <MX_GPIO_Init+0xfc>)
 80032e0:	f005 fde1 	bl	8008ea6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 80032e4:	2380      	movs	r3, #128	; 0x80
 80032e6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80032e8:	2300      	movs	r3, #0
 80032ea:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80032ec:	2300      	movs	r3, #0
 80032ee:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032f0:	463b      	mov	r3, r7
 80032f2:	4619      	mov	r1, r3
 80032f4:	4804      	ldr	r0, [pc, #16]	; (8003308 <MX_GPIO_Init+0xf8>)
 80032f6:	f005 fdd6 	bl	8008ea6 <LL_GPIO_Init>

}
 80032fa:	bf00      	nop
 80032fc:	3718      	adds	r7, #24
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	40020800 	.word	0x40020800
 8003308:	40020400 	.word	0x40020400
 800330c:	40020000 	.word	0x40020000

08003310 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8003314:	4b12      	ldr	r3, [pc, #72]	; (8003360 <MX_I2C1_Init+0x50>)
 8003316:	4a13      	ldr	r2, [pc, #76]	; (8003364 <MX_I2C1_Init+0x54>)
 8003318:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800331a:	4b11      	ldr	r3, [pc, #68]	; (8003360 <MX_I2C1_Init+0x50>)
 800331c:	4a12      	ldr	r2, [pc, #72]	; (8003368 <MX_I2C1_Init+0x58>)
 800331e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003320:	4b0f      	ldr	r3, [pc, #60]	; (8003360 <MX_I2C1_Init+0x50>)
 8003322:	2200      	movs	r2, #0
 8003324:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003326:	4b0e      	ldr	r3, [pc, #56]	; (8003360 <MX_I2C1_Init+0x50>)
 8003328:	2200      	movs	r2, #0
 800332a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800332c:	4b0c      	ldr	r3, [pc, #48]	; (8003360 <MX_I2C1_Init+0x50>)
 800332e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003332:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003334:	4b0a      	ldr	r3, [pc, #40]	; (8003360 <MX_I2C1_Init+0x50>)
 8003336:	2200      	movs	r2, #0
 8003338:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800333a:	4b09      	ldr	r3, [pc, #36]	; (8003360 <MX_I2C1_Init+0x50>)
 800333c:	2200      	movs	r2, #0
 800333e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003340:	4b07      	ldr	r3, [pc, #28]	; (8003360 <MX_I2C1_Init+0x50>)
 8003342:	2200      	movs	r2, #0
 8003344:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003346:	4b06      	ldr	r3, [pc, #24]	; (8003360 <MX_I2C1_Init+0x50>)
 8003348:	2200      	movs	r2, #0
 800334a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800334c:	4804      	ldr	r0, [pc, #16]	; (8003360 <MX_I2C1_Init+0x50>)
 800334e:	f003 fae7 	bl	8006920 <HAL_I2C_Init>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d001      	beq.n	800335c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003358:	f000 fe8a 	bl	8004070 <Error_Handler>
  }

}
 800335c:	bf00      	nop
 800335e:	bd80      	pop	{r7, pc}
 8003360:	20000454 	.word	0x20000454
 8003364:	40005400 	.word	0x40005400
 8003368:	00061a80 	.word	0x00061a80

0800336c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b08a      	sub	sp, #40	; 0x28
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003374:	f107 0314 	add.w	r3, r7, #20
 8003378:	2200      	movs	r2, #0
 800337a:	601a      	str	r2, [r3, #0]
 800337c:	605a      	str	r2, [r3, #4]
 800337e:	609a      	str	r2, [r3, #8]
 8003380:	60da      	str	r2, [r3, #12]
 8003382:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a19      	ldr	r2, [pc, #100]	; (80033f0 <HAL_I2C_MspInit+0x84>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d12c      	bne.n	80033e8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800338e:	2300      	movs	r3, #0
 8003390:	613b      	str	r3, [r7, #16]
 8003392:	4b18      	ldr	r3, [pc, #96]	; (80033f4 <HAL_I2C_MspInit+0x88>)
 8003394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003396:	4a17      	ldr	r2, [pc, #92]	; (80033f4 <HAL_I2C_MspInit+0x88>)
 8003398:	f043 0302 	orr.w	r3, r3, #2
 800339c:	6313      	str	r3, [r2, #48]	; 0x30
 800339e:	4b15      	ldr	r3, [pc, #84]	; (80033f4 <HAL_I2C_MspInit+0x88>)
 80033a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a2:	f003 0302 	and.w	r3, r3, #2
 80033a6:	613b      	str	r3, [r7, #16]
 80033a8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80033aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80033ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80033b0:	2312      	movs	r3, #18
 80033b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033b4:	2301      	movs	r3, #1
 80033b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033b8:	2303      	movs	r3, #3
 80033ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80033bc:	2304      	movs	r3, #4
 80033be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033c0:	f107 0314 	add.w	r3, r7, #20
 80033c4:	4619      	mov	r1, r3
 80033c6:	480c      	ldr	r0, [pc, #48]	; (80033f8 <HAL_I2C_MspInit+0x8c>)
 80033c8:	f003 f910 	bl	80065ec <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80033cc:	2300      	movs	r3, #0
 80033ce:	60fb      	str	r3, [r7, #12]
 80033d0:	4b08      	ldr	r3, [pc, #32]	; (80033f4 <HAL_I2C_MspInit+0x88>)
 80033d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d4:	4a07      	ldr	r2, [pc, #28]	; (80033f4 <HAL_I2C_MspInit+0x88>)
 80033d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80033da:	6413      	str	r3, [r2, #64]	; 0x40
 80033dc:	4b05      	ldr	r3, [pc, #20]	; (80033f4 <HAL_I2C_MspInit+0x88>)
 80033de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033e4:	60fb      	str	r3, [r7, #12]
 80033e6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80033e8:	bf00      	nop
 80033ea:	3728      	adds	r7, #40	; 0x28
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	40005400 	.word	0x40005400
 80033f4:	40023800 	.word	0x40023800
 80033f8:	40020400 	.word	0x40020400

080033fc <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f043 0201 	orr.w	r2, r3, #1
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	601a      	str	r2, [r3, #0]
}
 8003410:	bf00      	nop
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a1a      	ldr	r2, [r3, #32]
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	431a      	orrs	r2, r3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	621a      	str	r2, [r3, #32]
}
 8003432:	bf00      	nop
 8003434:	370c      	adds	r7, #12
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr

0800343e <LL_TIM_CC_DisableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 800343e:	b480      	push	{r7}
 8003440:	b083      	sub	sp, #12
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
 8003446:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a1a      	ldr	r2, [r3, #32]
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	43db      	mvns	r3, r3
 8003450:	401a      	ands	r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	621a      	str	r2, [r3, #32]
}
 8003456:	bf00      	nop
 8003458:	370c      	adds	r7, #12
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr

08003462 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8003462:	b480      	push	{r7}
 8003464:	b083      	sub	sp, #12
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	f043 0201 	orr.w	r2, r3, #1
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	60da      	str	r2, [r3, #12]
}
 8003476:	bf00      	nop
 8003478:	370c      	adds	r7, #12
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr

08003482 <LL_USART_IsActiveFlag_TXE>:
{
 8003482:	b480      	push	{r7}
 8003484:	b083      	sub	sp, #12
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003492:	2b80      	cmp	r3, #128	; 0x80
 8003494:	bf0c      	ite	eq
 8003496:	2301      	moveq	r3, #1
 8003498:	2300      	movne	r3, #0
 800349a:	b2db      	uxtb	r3, r3
}
 800349c:	4618      	mov	r0, r3
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <LL_USART_EnableIT_RXNE>:
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	f043 0220 	orr.w	r2, r3, #32
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	60da      	str	r2, [r3, #12]
}
 80034bc:	bf00      	nop
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <LL_USART_TransmitData8>:
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	460b      	mov	r3, r1
 80034d2:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 80034d4:	78fa      	ldrb	r2, [r7, #3]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	605a      	str	r2, [r3, #4]
}
 80034da:	bf00      	nop
 80034dc:	370c      	adds	r7, #12
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr

080034e6 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80034e6:	b480      	push	{r7}
 80034e8:	b083      	sub	sp, #12
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
 80034ee:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->ODR, READ_REG(GPIOx->ODR) ^ PinMask);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	695a      	ldr	r2, [r3, #20]
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	405a      	eors	r2, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	615a      	str	r2, [r3, #20]
}
 80034fc:	bf00      	nop
 80034fe:	370c      	adds	r7, #12
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr

08003508 <_write>:

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
int _write(int file, char *p, int len) {
 8003508:	b580      	push	{r7, lr}
 800350a:	b086      	sub	sp, #24
 800350c:	af00      	add	r7, sp, #0
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < len; i++) {
 8003514:	2300      	movs	r3, #0
 8003516:	617b      	str	r3, [r7, #20]
 8003518:	e011      	b.n	800353e <_write+0x36>
		while (!LL_USART_IsActiveFlag_TXE(USART6))
 800351a:	bf00      	nop
 800351c:	480c      	ldr	r0, [pc, #48]	; (8003550 <_write+0x48>)
 800351e:	f7ff ffb0 	bl	8003482 <LL_USART_IsActiveFlag_TXE>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d0f9      	beq.n	800351c <_write+0x14>
			;
		LL_USART_TransmitData8(USART6, *(p + i));
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	68ba      	ldr	r2, [r7, #8]
 800352c:	4413      	add	r3, r2
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	4619      	mov	r1, r3
 8003532:	4807      	ldr	r0, [pc, #28]	; (8003550 <_write+0x48>)
 8003534:	f7ff ffc8 	bl	80034c8 <LL_USART_TransmitData8>
	for (int i = 0; i < len; i++) {
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	3301      	adds	r3, #1
 800353c:	617b      	str	r3, [r7, #20]
 800353e:	697a      	ldr	r2, [r7, #20]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	429a      	cmp	r2, r3
 8003544:	dbe9      	blt.n	800351a <_write+0x12>
	}
	return len;
 8003546:	687b      	ldr	r3, [r7, #4]
}
 8003548:	4618      	mov	r0, r3
 800354a:	3718      	adds	r7, #24
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}
 8003550:	40011400 	.word	0x40011400

08003554 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8003554:	b590      	push	{r4, r7, lr}
 8003556:	b095      	sub	sp, #84	; 0x54
 8003558:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	float q[4];
	float quatRadianAccuracy;
	unsigned char buf_read[16] = {1};
 800355a:	f107 0320 	add.w	r3, r7, #32
 800355e:	2200      	movs	r2, #0
 8003560:	601a      	str	r2, [r3, #0]
 8003562:	605a      	str	r2, [r3, #4]
 8003564:	609a      	str	r2, [r3, #8]
 8003566:	60da      	str	r2, [r3, #12]
 8003568:	2301      	movs	r3, #1
 800356a:	f887 3020 	strb.w	r3, [r7, #32]
	unsigned char buf_write[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 800356e:	4ba7      	ldr	r3, [pc, #668]	; (800380c <main+0x2b8>)
 8003570:	f107 0410 	add.w	r4, r7, #16
 8003574:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003576:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	unsigned short adcVal;

	short gyro_x_offset = 8;
 800357a:	2308      	movs	r3, #8
 800357c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	short gyro_y_offset = -23;
 8003580:	f64f 73e9 	movw	r3, #65513	; 0xffe9
 8003584:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	short gyro_z_offset = -2;
 8003588:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800358c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8003590:	f001 ff02 	bl	8005398 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8003594:	f000 fa70 	bl	8003a78 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8003598:	f7ff fe3a 	bl	8003210 <MX_GPIO_Init>
	MX_DMA_Init();
 800359c:	f7ff fde2 	bl	8003164 <MX_DMA_Init>
	MX_TIM3_Init();
 80035a0:	f001 face 	bl	8004b40 <MX_TIM3_Init>
	MX_USART6_UART_Init();
 80035a4:	f001 fe1e 	bl	80051e4 <MX_USART6_UART_Init>
	MX_SPI2_Init();
 80035a8:	f000 fe16 	bl	80041d8 <MX_SPI2_Init>
	MX_SPI1_Init();
 80035ac:	f000 fdc2 	bl	8004134 <MX_SPI1_Init>
	MX_SPI3_Init();
 80035b0:	f000 fe66 	bl	8004280 <MX_SPI3_Init>
	MX_UART4_Init();
 80035b4:	f001 fd12 	bl	8004fdc <MX_UART4_Init>
	MX_UART5_Init();
 80035b8:	f001 fd72 	bl	80050a0 <MX_UART5_Init>
	MX_TIM5_Init();
 80035bc:	f001 fb2e 	bl	8004c1c <MX_TIM5_Init>
	MX_I2C1_Init();
 80035c0:	f7ff fea6 	bl	8003310 <MX_I2C1_Init>
	MX_ADC1_Init();
 80035c4:	f7ff fd06 	bl	8002fd4 <MX_ADC1_Init>
	MX_USART1_UART_Init();
 80035c8:	f001 fde2 	bl	8005190 <MX_USART1_UART_Init>
	MX_TIM7_Init();
 80035cc:	f001 fbd4 	bl	8004d78 <MX_TIM7_Init>
	/* USER CODE BEGIN 2 */
	//TIM3 Initialization
	LL_TIM_EnableCounter(TIM3);
 80035d0:	488f      	ldr	r0, [pc, #572]	; (8003810 <main+0x2bc>)
 80035d2:	f7ff ff13 	bl	80033fc <LL_TIM_EnableCounter>

	//UART4, 5, 6 Initialization
	LL_USART_EnableIT_RXNE(USART6);
 80035d6:	488f      	ldr	r0, [pc, #572]	; (8003814 <main+0x2c0>)
 80035d8:	f7ff ff66 	bl	80034a8 <LL_USART_EnableIT_RXNE>
	LL_USART_EnableIT_RXNE(UART4);
 80035dc:	488e      	ldr	r0, [pc, #568]	; (8003818 <main+0x2c4>)
 80035de:	f7ff ff63 	bl	80034a8 <LL_USART_EnableIT_RXNE>
	LL_USART_EnableIT_RXNE(UART5);
 80035e2:	488e      	ldr	r0, [pc, #568]	; (800381c <main+0x2c8>)
 80035e4:	f7ff ff60 	bl	80034a8 <LL_USART_EnableIT_RXNE>

	//9DOF Initialization
	BNO080_Initialization();
 80035e8:	f7fd feba 	bl	8001360 <BNO080_Initialization>
	BNO080_enableRotationVector(2500); //400Hz, maximum value describing in datasheet
 80035ec:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80035f0:	f7fe f96d 	bl	80018ce <BNO080_enableRotationVector>

	//6DOF Initialization
	ICM20602_Initialization();
 80035f4:	f7fe fd48 	bl	8002088 <ICM20602_Initialization>
	LPS22HH_Initialization();
 80035f8:	f7fe ffd0 	bl	800259c <LPS22HH_Initialization>
	M8N_Initialization();
 80035fc:	f7ff fa42 	bl	8002a84 <M8N_Initialization>

	//TIM5 Initialization
	LL_TIM_EnableCounter(TIM5);
 8003600:	4887      	ldr	r0, [pc, #540]	; (8003820 <main+0x2cc>)
 8003602:	f7ff fefb 	bl	80033fc <LL_TIM_EnableCounter>
	LL_TIM_CC_EnableChannel(TIM5, LL_TIM_CHANNEL_CH1);
 8003606:	2101      	movs	r1, #1
 8003608:	4885      	ldr	r0, [pc, #532]	; (8003820 <main+0x2cc>)
 800360a:	f7ff ff07 	bl	800341c <LL_TIM_CC_EnableChannel>
	LL_TIM_CC_EnableChannel(TIM5, LL_TIM_CHANNEL_CH2);
 800360e:	2110      	movs	r1, #16
 8003610:	4883      	ldr	r0, [pc, #524]	; (8003820 <main+0x2cc>)
 8003612:	f7ff ff03 	bl	800341c <LL_TIM_CC_EnableChannel>
	LL_TIM_CC_EnableChannel(TIM5, LL_TIM_CHANNEL_CH3);
 8003616:	f44f 7180 	mov.w	r1, #256	; 0x100
 800361a:	4881      	ldr	r0, [pc, #516]	; (8003820 <main+0x2cc>)
 800361c:	f7ff fefe 	bl	800341c <LL_TIM_CC_EnableChannel>
	LL_TIM_CC_EnableChannel(TIM5, LL_TIM_CHANNEL_CH4);
 8003620:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003624:	487e      	ldr	r0, [pc, #504]	; (8003820 <main+0x2cc>)
 8003626:	f7ff fef9 	bl	800341c <LL_TIM_CC_EnableChannel>

	HAL_ADC_Start_DMA(&hadc1, &adcVal, 1);
 800362a:	f107 030e 	add.w	r3, r7, #14
 800362e:	2201      	movs	r2, #1
 8003630:	4619      	mov	r1, r3
 8003632:	487c      	ldr	r0, [pc, #496]	; (8003824 <main+0x2d0>)
 8003634:	f001 ff88 	bl	8005548 <HAL_ADC_Start_DMA>

	//UART1 - HAL Rx Interrupt
	HAL_UART_Receive_IT(&huart1, &uart1_rx_data, 1);
 8003638:	2201      	movs	r2, #1
 800363a:	497b      	ldr	r1, [pc, #492]	; (8003828 <main+0x2d4>)
 800363c:	487b      	ldr	r0, [pc, #492]	; (800382c <main+0x2d8>)
 800363e:	f004 fcdc 	bl	8007ffa <HAL_UART_Receive_IT>

	//TIM7 Initialization for FC <-> GCS
	LL_TIM_EnableCounter(TIM7);
 8003642:	487b      	ldr	r0, [pc, #492]	; (8003830 <main+0x2dc>)
 8003644:	f7ff feda 	bl	80033fc <LL_TIM_EnableCounter>
	LL_TIM_EnableIT_UPDATE(TIM7);
 8003648:	4879      	ldr	r0, [pc, #484]	; (8003830 <main+0x2dc>)
 800364a:	f7ff ff0a 	bl	8003462 <LL_TIM_EnableIT_UPDATE>

	//ICM20602 DC BIAS OFFSET CALIBRATION
	ICM20602_Writebyte(0x13, (gyro_x_offset * -2) >> 8);
 800364e:	f9b7 204a 	ldrsh.w	r2, [r7, #74]	; 0x4a
 8003652:	4613      	mov	r3, r2
 8003654:	07db      	lsls	r3, r3, #31
 8003656:	1a9b      	subs	r3, r3, r2
 8003658:	005b      	lsls	r3, r3, #1
 800365a:	121b      	asrs	r3, r3, #8
 800365c:	4619      	mov	r1, r3
 800365e:	2013      	movs	r0, #19
 8003660:	f7fe fcf0 	bl	8002044 <ICM20602_Writebyte>
	ICM20602_Writebyte(0x14, (gyro_x_offset * -2));
 8003664:	f9b7 204a 	ldrsh.w	r2, [r7, #74]	; 0x4a
 8003668:	4613      	mov	r3, r2
 800366a:	07db      	lsls	r3, r3, #31
 800366c:	1a9b      	subs	r3, r3, r2
 800366e:	005b      	lsls	r3, r3, #1
 8003670:	4619      	mov	r1, r3
 8003672:	2014      	movs	r0, #20
 8003674:	f7fe fce6 	bl	8002044 <ICM20602_Writebyte>

	ICM20602_Writebyte(0x15, (gyro_y_offset * -2) >> 8);
 8003678:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 800367c:	4613      	mov	r3, r2
 800367e:	07db      	lsls	r3, r3, #31
 8003680:	1a9b      	subs	r3, r3, r2
 8003682:	005b      	lsls	r3, r3, #1
 8003684:	121b      	asrs	r3, r3, #8
 8003686:	4619      	mov	r1, r3
 8003688:	2015      	movs	r0, #21
 800368a:	f7fe fcdb 	bl	8002044 <ICM20602_Writebyte>
	ICM20602_Writebyte(0x16, (gyro_y_offset * -2));
 800368e:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 8003692:	4613      	mov	r3, r2
 8003694:	07db      	lsls	r3, r3, #31
 8003696:	1a9b      	subs	r3, r3, r2
 8003698:	005b      	lsls	r3, r3, #1
 800369a:	4619      	mov	r1, r3
 800369c:	2016      	movs	r0, #22
 800369e:	f7fe fcd1 	bl	8002044 <ICM20602_Writebyte>

	ICM20602_Writebyte(0x17, (gyro_z_offset * -2) >> 8);
 80036a2:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 80036a6:	4613      	mov	r3, r2
 80036a8:	07db      	lsls	r3, r3, #31
 80036aa:	1a9b      	subs	r3, r3, r2
 80036ac:	005b      	lsls	r3, r3, #1
 80036ae:	121b      	asrs	r3, r3, #8
 80036b0:	4619      	mov	r1, r3
 80036b2:	2017      	movs	r0, #23
 80036b4:	f7fe fcc6 	bl	8002044 <ICM20602_Writebyte>
	ICM20602_Writebyte(0x18, (gyro_z_offset * -2));
 80036b8:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 80036bc:	4613      	mov	r3, r2
 80036be:	07db      	lsls	r3, r3, #31
 80036c0:	1a9b      	subs	r3, r3, r2
 80036c2:	005b      	lsls	r3, r3, #1
 80036c4:	4619      	mov	r1, r3
 80036c6:	2018      	movs	r0, #24
 80036c8:	f7fe fcbc 	bl	8002044 <ICM20602_Writebyte>

	float kp, ki, kd;

	//0 - Roll 0, 1 - Roll 1, 2 - Pitch 0, 3 - Pitch 1, 4 - Yaw 0, 5 - Yaw 1
	for (int i = 0; i < 6; i++) {
 80036cc:	2300      	movs	r3, #0
 80036ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036d0:	e022      	b.n	8003718 <main+0x1c4>
		EP_PIDGain_Read(i, &kp, &ki, &kd);
 80036d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036d4:	b2d8      	uxtb	r0, r3
 80036d6:	463b      	mov	r3, r7
 80036d8:	1d3a      	adds	r2, r7, #4
 80036da:	f107 0108 	add.w	r1, r7, #8
 80036de:	f7fd fc5b 	bl	8000f98 <EP_PIDGain_Read>
		Encode_Msg_PID_Gain(&telemetry_tx_buf[0], i, kp, ki, kd);
 80036e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	edd7 7a02 	vldr	s15, [r7, #8]
 80036ea:	ed97 7a01 	vldr	s14, [r7, #4]
 80036ee:	edd7 6a00 	vldr	s13, [r7]
 80036f2:	eeb0 1a66 	vmov.f32	s2, s13
 80036f6:	eef0 0a47 	vmov.f32	s1, s14
 80036fa:	eeb0 0a67 	vmov.f32	s0, s15
 80036fe:	4619      	mov	r1, r3
 8003700:	484c      	ldr	r0, [pc, #304]	; (8003834 <main+0x2e0>)
 8003702:	f000 fc63 	bl	8003fcc <Encode_Msg_PID_Gain>
		HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8003706:	230a      	movs	r3, #10
 8003708:	2214      	movs	r2, #20
 800370a:	494a      	ldr	r1, [pc, #296]	; (8003834 <main+0x2e0>)
 800370c:	4847      	ldr	r0, [pc, #284]	; (800382c <main+0x2d8>)
 800370e:	f004 fb96 	bl	8007e3e <HAL_UART_Transmit>
	for (int i = 0; i < 6; i++) {
 8003712:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003714:	3301      	adds	r3, #1
 8003716:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003718:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800371a:	2b05      	cmp	r3, #5
 800371c:	ddd9      	ble.n	80036d2 <main+0x17e>
	//
	//	//EEPROM Read
	//	EP_PIDGain_Read(0, &p, &i, &d);
	//	printf("%f %f %f", p, i, d);

	LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800371e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003722:	483b      	ldr	r0, [pc, #236]	; (8003810 <main+0x2bc>)
 8003724:	f7ff fe7a 	bl	800341c <LL_TIM_CC_EnableChannel>
	TIM3->PSC = 6000;
 8003728:	4b39      	ldr	r3, [pc, #228]	; (8003810 <main+0x2bc>)
 800372a:	f241 7270 	movw	r2, #6000	; 0x1770
 800372e:	629a      	str	r2, [r3, #40]	; 0x28
	HAL_Delay(200);
 8003730:	20c8      	movs	r0, #200	; 0xc8
 8003732:	f001 fea3 	bl	800547c <HAL_Delay>
	TIM3->PSC = 4000;
 8003736:	4b36      	ldr	r3, [pc, #216]	; (8003810 <main+0x2bc>)
 8003738:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800373c:	629a      	str	r2, [r3, #40]	; 0x28
	HAL_Delay(100);
 800373e:	2064      	movs	r0, #100	; 0x64
 8003740:	f001 fe9c 	bl	800547c <HAL_Delay>
	TIM3->PSC = 4000;
 8003744:	4b32      	ldr	r3, [pc, #200]	; (8003810 <main+0x2bc>)
 8003746:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800374a:	629a      	str	r2, [r3, #40]	; 0x28
	HAL_Delay(100);
 800374c:	2064      	movs	r0, #100	; 0x64
 800374e:	f001 fe95 	bl	800547c <HAL_Delay>
	TIM3->PSC = 6000;
 8003752:	4b2f      	ldr	r3, [pc, #188]	; (8003810 <main+0x2bc>)
 8003754:	f241 7270 	movw	r2, #6000	; 0x1770
 8003758:	629a      	str	r2, [r3, #40]	; 0x28
	HAL_Delay(200);
 800375a:	20c8      	movs	r0, #200	; 0xc8
 800375c:	f001 fe8e 	bl	800547c <HAL_Delay>
	//  TIM3 -> CCR4 = TIM3 -> ARR / 2;
	LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003760:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003764:	482a      	ldr	r0, [pc, #168]	; (8003810 <main+0x2bc>)
 8003766:	f7ff fe6a 	bl	800343e <LL_TIM_CC_DisableChannel>

	printf("Starts\n");
 800376a:	4833      	ldr	r0, [pc, #204]	; (8003838 <main+0x2e4>)
 800376c:	f007 f808 	bl	800a780 <puts>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if (tim7_20ms_flag == 1 && tim7_100ms_flag != 1) {
 8003770:	4b32      	ldr	r3, [pc, #200]	; (800383c <main+0x2e8>)
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	2b01      	cmp	r3, #1
 8003776:	d10f      	bne.n	8003798 <main+0x244>
 8003778:	4b31      	ldr	r3, [pc, #196]	; (8003840 <main+0x2ec>)
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	2b01      	cmp	r3, #1
 800377e:	d00b      	beq.n	8003798 <main+0x244>
			//20ms - 50Hz
			tim7_20ms_flag = 0;
 8003780:	4b2e      	ldr	r3, [pc, #184]	; (800383c <main+0x2e8>)
 8003782:	2200      	movs	r2, #0
 8003784:	701a      	strb	r2, [r3, #0]
			Encode_Msg_AHRS(&telemetry_tx_buf[0]);
 8003786:	482b      	ldr	r0, [pc, #172]	; (8003834 <main+0x2e0>)
 8003788:	f000 f9f8 	bl	8003b7c <Encode_Msg_AHRS>
			//Transmit
			HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 20);
 800378c:	2214      	movs	r2, #20
 800378e:	4929      	ldr	r1, [pc, #164]	; (8003834 <main+0x2e0>)
 8003790:	4826      	ldr	r0, [pc, #152]	; (800382c <main+0x2d8>)
 8003792:	f004 fbed 	bl	8007f70 <HAL_UART_Transmit_IT>
 8003796:	e018      	b.n	80037ca <main+0x276>
		}
		else if (tim7_100ms_flag == 1 && tim7_20ms_flag == 1) {
 8003798:	4b29      	ldr	r3, [pc, #164]	; (8003840 <main+0x2ec>)
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	2b01      	cmp	r3, #1
 800379e:	d114      	bne.n	80037ca <main+0x276>
 80037a0:	4b26      	ldr	r3, [pc, #152]	; (800383c <main+0x2e8>)
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d110      	bne.n	80037ca <main+0x276>
			//100ms - 10Hz
			tim7_100ms_flag = 0;
 80037a8:	4b25      	ldr	r3, [pc, #148]	; (8003840 <main+0x2ec>)
 80037aa:	2200      	movs	r2, #0
 80037ac:	701a      	strb	r2, [r3, #0]
			//20ms - 50Hz
			tim7_20ms_flag = 0;
 80037ae:	4b23      	ldr	r3, [pc, #140]	; (800383c <main+0x2e8>)
 80037b0:	2200      	movs	r2, #0
 80037b2:	701a      	strb	r2, [r3, #0]
			//AHRS
			Encode_Msg_AHRS(&telemetry_tx_buf[0]);
 80037b4:	481f      	ldr	r0, [pc, #124]	; (8003834 <main+0x2e0>)
 80037b6:	f000 f9e1 	bl	8003b7c <Encode_Msg_AHRS>
			//GPS
			Encode_Msg_GPS(&telemetry_tx_buf[20]);
 80037ba:	4822      	ldr	r0, [pc, #136]	; (8003844 <main+0x2f0>)
 80037bc:	f000 fb48 	bl	8003e50 <Encode_Msg_GPS>
			//Transmit
			HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 40);
 80037c0:	2228      	movs	r2, #40	; 0x28
 80037c2:	491c      	ldr	r1, [pc, #112]	; (8003834 <main+0x2e0>)
 80037c4:	4819      	ldr	r0, [pc, #100]	; (800382c <main+0x2d8>)
 80037c6:	f004 fbd3 	bl	8007f70 <HAL_UART_Transmit_IT>
		}

		//Battery Part
		batteryVolt = adcVal * 0.003619f;
 80037ca:	89fb      	ldrh	r3, [r7, #14]
 80037cc:	ee07 3a90 	vmov	s15, r3
 80037d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037d4:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8003848 <main+0x2f4>
 80037d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037dc:	4b1b      	ldr	r3, [pc, #108]	; (800384c <main+0x2f8>)
 80037de:	edc3 7a00 	vstr	s15, [r3]
		//		printf("%d\t%.2f\n", adcVal, batteryVolt);
		if (batteryVolt < 10.0f) {
 80037e2:	4b1a      	ldr	r3, [pc, #104]	; (800384c <main+0x2f8>)
 80037e4:	edd3 7a00 	vldr	s15, [r3]
 80037e8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80037ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037f4:	d52c      	bpl.n	8003850 <main+0x2fc>
			LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80037f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80037fa:	4805      	ldr	r0, [pc, #20]	; (8003810 <main+0x2bc>)
 80037fc:	f7ff fe0e 	bl	800341c <LL_TIM_CC_EnableChannel>
			TIM3->PSC = 1500;
 8003800:	4b03      	ldr	r3, [pc, #12]	; (8003810 <main+0x2bc>)
 8003802:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003806:	629a      	str	r2, [r3, #40]	; 0x28
 8003808:	e027      	b.n	800385a <main+0x306>
 800380a:	bf00      	nop
 800380c:	0800d638 	.word	0x0800d638
 8003810:	40000400 	.word	0x40000400
 8003814:	40011400 	.word	0x40011400
 8003818:	40004c00 	.word	0x40004c00
 800381c:	40005000 	.word	0x40005000
 8003820:	40000c00 	.word	0x40000c00
 8003824:	200003ac 	.word	0x200003ac
 8003828:	20000212 	.word	0x20000212
 800382c:	20000518 	.word	0x20000518
 8003830:	40001400 	.word	0x40001400
 8003834:	200004ac 	.word	0x200004ac
 8003838:	0800d630 	.word	0x0800d630
 800383c:	20000213 	.word	0x20000213
 8003840:	20000214 	.word	0x20000214
 8003844:	200004c0 	.word	0x200004c0
 8003848:	3b6d2cbf 	.word	0x3b6d2cbf
 800384c:	200004a8 	.word	0x200004a8
		}
		else {
			LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003850:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003854:	4876      	ldr	r0, [pc, #472]	; (8003a30 <main+0x4dc>)
 8003856:	f7ff fdf2 	bl	800343e <LL_TIM_CC_DisableChannel>
		}


		//BNO080 - 9DOF
		if (BNO080_dataAvailable() == 1) {
 800385a:	f7fd fe17 	bl	800148c <BNO080_dataAvailable>
 800385e:	4603      	mov	r3, r0
 8003860:	2b01      	cmp	r3, #1
 8003862:	d124      	bne.n	80038ae <main+0x35a>
			LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_0);
 8003864:	2101      	movs	r1, #1
 8003866:	4873      	ldr	r0, [pc, #460]	; (8003a34 <main+0x4e0>)
 8003868:	f7ff fe3d 	bl	80034e6 <LL_GPIO_TogglePin>

			q[0] = BNO080_getQuatI();
 800386c:	f7fd ff9a 	bl	80017a4 <BNO080_getQuatI>
 8003870:	eef0 7a40 	vmov.f32	s15, s0
 8003874:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
			q[1] = BNO080_getQuatJ();
 8003878:	f7fd ffaa 	bl	80017d0 <BNO080_getQuatJ>
 800387c:	eef0 7a40 	vmov.f32	s15, s0
 8003880:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
			q[2] = BNO080_getQuatK();
 8003884:	f7fd ffba 	bl	80017fc <BNO080_getQuatK>
 8003888:	eef0 7a40 	vmov.f32	s15, s0
 800388c:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
			q[3] = BNO080_getQuatReal();
 8003890:	f7fd ffca 	bl	8001828 <BNO080_getQuatReal>
 8003894:	eef0 7a40 	vmov.f32	s15, s0
 8003898:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
			quatRadianAccuracy = BNO080_getQuatRadianAccuracy();
 800389c:	f7fd ffda 	bl	8001854 <BNO080_getQuatRadianAccuracy>
 80038a0:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40

			Quaternion_Update(&q[0]);
 80038a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80038a8:	4618      	mov	r0, r3
 80038aa:	f7ff fa05 	bl	8002cb8 <Quaternion_Update>
			//			printf("%.2f\t%.2f\n", BNO080_Roll, BNO080_Pitch);
			//			printf("%.2f\n", BNO080_Yaw);
		}

		//ICM20602 - 6DOF
		if (ICM20602_DataReady() == 1) {
 80038ae:	f7fe fc95 	bl	80021dc <ICM20602_DataReady>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d13c      	bne.n	8003932 <main+0x3de>
			LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_1);
 80038b8:	2102      	movs	r1, #2
 80038ba:	485e      	ldr	r0, [pc, #376]	; (8003a34 <main+0x4e0>)
 80038bc:	f7ff fe13 	bl	80034e6 <LL_GPIO_TogglePin>
			ICM20602_Get3AxisGyroRawData(&ICM20602.gyro_x_raw);
 80038c0:	485d      	ldr	r0, [pc, #372]	; (8003a38 <main+0x4e4>)
 80038c2:	f7fe fc5f 	bl	8002184 <ICM20602_Get3AxisGyroRawData>
			ICM20602.gyro_x = ICM20602.gyro_x_raw * 2000.f / 32768.f;
 80038c6:	4b5d      	ldr	r3, [pc, #372]	; (8003a3c <main+0x4e8>)
 80038c8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80038cc:	ee07 3a90 	vmov	s15, r3
 80038d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038d4:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8003a40 <main+0x4ec>
 80038d8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80038dc:	eddf 6a59 	vldr	s13, [pc, #356]	; 8003a44 <main+0x4f0>
 80038e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80038e4:	4b55      	ldr	r3, [pc, #340]	; (8003a3c <main+0x4e8>)
 80038e6:	edc3 7a07 	vstr	s15, [r3, #28]
			ICM20602.gyro_y = ICM20602.gyro_y_raw * 2000.f / 32768.f;
 80038ea:	4b54      	ldr	r3, [pc, #336]	; (8003a3c <main+0x4e8>)
 80038ec:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80038f0:	ee07 3a90 	vmov	s15, r3
 80038f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038f8:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8003a40 <main+0x4ec>
 80038fc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003900:	eddf 6a50 	vldr	s13, [pc, #320]	; 8003a44 <main+0x4f0>
 8003904:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003908:	4b4c      	ldr	r3, [pc, #304]	; (8003a3c <main+0x4e8>)
 800390a:	edc3 7a08 	vstr	s15, [r3, #32]
			ICM20602.gyro_z = ICM20602.gyro_z_raw * 2000.f / 32768.f;
 800390e:	4b4b      	ldr	r3, [pc, #300]	; (8003a3c <main+0x4e8>)
 8003910:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003914:	ee07 3a90 	vmov	s15, r3
 8003918:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800391c:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8003a40 <main+0x4ec>
 8003920:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003924:	eddf 6a47 	vldr	s13, [pc, #284]	; 8003a44 <main+0x4f0>
 8003928:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800392c:	4b43      	ldr	r3, [pc, #268]	; (8003a3c <main+0x4e8>)
 800392e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			//		printf("%d,%d,%d\n", ICM20602.gyro_x_raw ,ICM20602.gyro_y_raw, ICM20602.gyro_z_raw);
			//		printf("%d,%d,%d\n", (int)(ICM20602.gyro_x * 100), (int)(ICM20602.gyro_y * 100), (int)(ICM20602.gyro_z * 100));
		}

		//LPS22HH Barometer
		if(LPS22HH_DataReady() == 1) {
 8003932:	f7fe fec3 	bl	80026bc <LPS22HH_DataReady>
 8003936:	4603      	mov	r3, r0
 8003938:	2b01      	cmp	r3, #1
 800393a:	d138      	bne.n	80039ae <main+0x45a>
			LPS22HH_GetPressure(&LPS22HH.pressure_raw);
 800393c:	4842      	ldr	r0, [pc, #264]	; (8003a48 <main+0x4f4>)
 800393e:	f7fe fec9 	bl	80026d4 <LPS22HH_GetPressure>
			LPS22HH_GetTemperature(&LPS22HH.temperature_raw);
 8003942:	4842      	ldr	r0, [pc, #264]	; (8003a4c <main+0x4f8>)
 8003944:	f7fe fed3 	bl	80026ee <LPS22HH_GetTemperature>
			LPS22HH.baroAlt = getAltitude2(LPS22HH.pressure_raw/4096.f, LPS22HH.temperature_raw / 100.f);
 8003948:	4b3f      	ldr	r3, [pc, #252]	; (8003a48 <main+0x4f4>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	ee07 3a90 	vmov	s15, r3
 8003950:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003954:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8003a50 <main+0x4fc>
 8003958:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800395c:	4b3a      	ldr	r3, [pc, #232]	; (8003a48 <main+0x4f4>)
 800395e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003962:	ee07 3a90 	vmov	s15, r3
 8003966:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800396a:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8003a54 <main+0x500>
 800396e:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8003972:	eef0 0a46 	vmov.f32	s1, s12
 8003976:	eeb0 0a66 	vmov.f32	s0, s13
 800397a:	f7fe fec5 	bl	8002708 <getAltitude2>
 800397e:	eef0 7a40 	vmov.f32	s15, s0
 8003982:	4b31      	ldr	r3, [pc, #196]	; (8003a48 <main+0x4f4>)
 8003984:	edc3 7a02 	vstr	s15, [r3, #8]
#define X 0.99f
			LPS22HH.baroAltFilt = LPS22HH.baroAltFilt * X + LPS22HH.baroAlt * (1.0f -X);
 8003988:	4b2f      	ldr	r3, [pc, #188]	; (8003a48 <main+0x4f4>)
 800398a:	edd3 7a03 	vldr	s15, [r3, #12]
 800398e:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8003a58 <main+0x504>
 8003992:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003996:	4b2c      	ldr	r3, [pc, #176]	; (8003a48 <main+0x4f4>)
 8003998:	edd3 7a02 	vldr	s15, [r3, #8]
 800399c:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8003a5c <main+0x508>
 80039a0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80039a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039a8:	4b27      	ldr	r3, [pc, #156]	; (8003a48 <main+0x4f4>)
 80039aa:	edc3 7a03 	vstr	s15, [r3, #12]
			//			printf("%d,%d\n", (int)(LPS22HH.baroAlt * 100), (int)(LPS22HH.baroAltFilt * 100));
		}
		//M8N GPS
		if(m8n_rx_cplt_flag == 1) {
 80039ae:	4b2c      	ldr	r3, [pc, #176]	; (8003a60 <main+0x50c>)
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d111      	bne.n	80039da <main+0x486>
			m8n_rx_cplt_flag = 0;
 80039b6:	4b2a      	ldr	r3, [pc, #168]	; (8003a60 <main+0x50c>)
 80039b8:	2200      	movs	r2, #0
 80039ba:	701a      	strb	r2, [r3, #0]
			if (M8N_UBX_CHKSUM_Check(&m8n_rx_buf[0], 36) == 1) {
 80039bc:	2124      	movs	r1, #36	; 0x24
 80039be:	4829      	ldr	r0, [pc, #164]	; (8003a64 <main+0x510>)
 80039c0:	f7ff f888 	bl	8002ad4 <M8N_UBX_CHKSUM_Check>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d107      	bne.n	80039da <main+0x486>
				LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_2);
 80039ca:	2104      	movs	r1, #4
 80039cc:	4819      	ldr	r0, [pc, #100]	; (8003a34 <main+0x4e0>)
 80039ce:	f7ff fd8a 	bl	80034e6 <LL_GPIO_TogglePin>
				M8N_UBX_NAV_POSLLH_Parsing(&m8n_rx_buf[0], &posllh);
 80039d2:	4925      	ldr	r1, [pc, #148]	; (8003a68 <main+0x514>)
 80039d4:	4823      	ldr	r0, [pc, #140]	; (8003a64 <main+0x510>)
 80039d6:	f7ff f8b7 	bl	8002b48 <M8N_UBX_NAV_POSLLH_Parsing>

				//				printf("LAT: %ld\tLON: %ld\tHeight: %ld\n", posllh.lat, posllh.lon, posllh.height);
			}
		}
		//Controller
		if (ibus_rx_cplt_flag == 1) {
 80039da:	4b24      	ldr	r3, [pc, #144]	; (8003a6c <main+0x518>)
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	2b01      	cmp	r3, #1
 80039e0:	f47f aec6 	bne.w	8003770 <main+0x21c>
			ibus_rx_cplt_flag = 0;
 80039e4:	4b21      	ldr	r3, [pc, #132]	; (8003a6c <main+0x518>)
 80039e6:	2200      	movs	r2, #0
 80039e8:	701a      	strb	r2, [r3, #0]
			if (iBus_Check_CHECKSUM(&ibus_rx_buf[0], 32) == 1) {
 80039ea:	2120      	movs	r1, #32
 80039ec:	4820      	ldr	r0, [pc, #128]	; (8003a70 <main+0x51c>)
 80039ee:	f7fe f8b3 	bl	8001b58 <iBus_Check_CHECKSUM>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	f47f aebb 	bne.w	8003770 <main+0x21c>
				LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_2);
 80039fa:	2104      	movs	r1, #4
 80039fc:	480d      	ldr	r0, [pc, #52]	; (8003a34 <main+0x4e0>)
 80039fe:	f7ff fd72 	bl	80034e6 <LL_GPIO_TogglePin>

				iBus_Parsing(&ibus_rx_buf[0], &iBus);
 8003a02:	491c      	ldr	r1, [pc, #112]	; (8003a74 <main+0x520>)
 8003a04:	481a      	ldr	r0, [pc, #104]	; (8003a70 <main+0x51c>)
 8003a06:	f7fe f8dd 	bl	8001bc4 <iBus_Parsing>
				if (iBus_isActiveFailSafe(&iBus) == 1) {
 8003a0a:	481a      	ldr	r0, [pc, #104]	; (8003a74 <main+0x520>)
 8003a0c:	f7fe f953 	bl	8001cb6 <iBus_isActiveFailSafe>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d105      	bne.n	8003a22 <main+0x4ce>
					LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003a16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003a1a:	4805      	ldr	r0, [pc, #20]	; (8003a30 <main+0x4dc>)
 8003a1c:	f7ff fcfe 	bl	800341c <LL_TIM_CC_EnableChannel>
 8003a20:	e6a6      	b.n	8003770 <main+0x21c>
				}
				else {
					LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003a22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003a26:	4802      	ldr	r0, [pc, #8]	; (8003a30 <main+0x4dc>)
 8003a28:	f7ff fd09 	bl	800343e <LL_TIM_CC_DisableChannel>
		if (tim7_20ms_flag == 1 && tim7_100ms_flag != 1) {
 8003a2c:	e6a0      	b.n	8003770 <main+0x21c>
 8003a2e:	bf00      	nop
 8003a30:	40000400 	.word	0x40000400
 8003a34:	40020800 	.word	0x40020800
 8003a38:	2000033c 	.word	0x2000033c
 8003a3c:	20000334 	.word	0x20000334
 8003a40:	44fa0000 	.word	0x44fa0000
 8003a44:	47000000 	.word	0x47000000
 8003a48:	2000035c 	.word	0x2000035c
 8003a4c:	20000360 	.word	0x20000360
 8003a50:	45800000 	.word	0x45800000
 8003a54:	42c80000 	.word	0x42c80000
 8003a58:	3f7d70a4 	.word	0x3f7d70a4
 8003a5c:	3c23d700 	.word	0x3c23d700
 8003a60:	20000210 	.word	0x20000210
 8003a64:	200004f4 	.word	0x200004f4
 8003a68:	20000370 	.word	0x20000370
 8003a6c:	20000211 	.word	0x20000211
 8003a70:	200004d4 	.word	0x200004d4
 8003a74:	20000310 	.word	0x20000310

08003a78 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b094      	sub	sp, #80	; 0x50
 8003a7c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003a7e:	f107 0320 	add.w	r3, r7, #32
 8003a82:	2230      	movs	r2, #48	; 0x30
 8003a84:	2100      	movs	r1, #0
 8003a86:	4618      	mov	r0, r3
 8003a88:	f006 f9a2 	bl	8009dd0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003a8c:	f107 030c 	add.w	r3, r7, #12
 8003a90:	2200      	movs	r2, #0
 8003a92:	601a      	str	r2, [r3, #0]
 8003a94:	605a      	str	r2, [r3, #4]
 8003a96:	609a      	str	r2, [r3, #8]
 8003a98:	60da      	str	r2, [r3, #12]
 8003a9a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	60bb      	str	r3, [r7, #8]
 8003aa0:	4b28      	ldr	r3, [pc, #160]	; (8003b44 <SystemClock_Config+0xcc>)
 8003aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa4:	4a27      	ldr	r2, [pc, #156]	; (8003b44 <SystemClock_Config+0xcc>)
 8003aa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aaa:	6413      	str	r3, [r2, #64]	; 0x40
 8003aac:	4b25      	ldr	r3, [pc, #148]	; (8003b44 <SystemClock_Config+0xcc>)
 8003aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ab4:	60bb      	str	r3, [r7, #8]
 8003ab6:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ab8:	2300      	movs	r3, #0
 8003aba:	607b      	str	r3, [r7, #4]
 8003abc:	4b22      	ldr	r3, [pc, #136]	; (8003b48 <SystemClock_Config+0xd0>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a21      	ldr	r2, [pc, #132]	; (8003b48 <SystemClock_Config+0xd0>)
 8003ac2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ac6:	6013      	str	r3, [r2, #0]
 8003ac8:	4b1f      	ldr	r3, [pc, #124]	; (8003b48 <SystemClock_Config+0xd0>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ad0:	607b      	str	r3, [r7, #4]
 8003ad2:	687b      	ldr	r3, [r7, #4]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003ad8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003adc:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003ade:	2302      	movs	r3, #2
 8003ae0:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003ae2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8003ae8:	2304      	movs	r3, #4
 8003aea:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8003aec:	23a8      	movs	r3, #168	; 0xa8
 8003aee:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003af0:	2302      	movs	r3, #2
 8003af2:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8003af4:	2304      	movs	r3, #4
 8003af6:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003af8:	f107 0320 	add.w	r3, r7, #32
 8003afc:	4618      	mov	r0, r3
 8003afe:	f003 fcef 	bl	80074e0 <HAL_RCC_OscConfig>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d001      	beq.n	8003b0c <SystemClock_Config+0x94>
	{
		Error_Handler();
 8003b08:	f000 fab2 	bl	8004070 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003b0c:	230f      	movs	r3, #15
 8003b0e:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003b10:	2302      	movs	r3, #2
 8003b12:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003b14:	2300      	movs	r3, #0
 8003b16:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003b18:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003b1c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003b1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b22:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003b24:	f107 030c 	add.w	r3, r7, #12
 8003b28:	2105      	movs	r1, #5
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f003 ff48 	bl	80079c0 <HAL_RCC_ClockConfig>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d001      	beq.n	8003b3a <SystemClock_Config+0xc2>
	{
		Error_Handler();
 8003b36:	f000 fa9b 	bl	8004070 <Error_Handler>
	}
}
 8003b3a:	bf00      	nop
 8003b3c:	3750      	adds	r7, #80	; 0x50
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	40023800 	.word	0x40023800
 8003b48:	40007000 	.word	0x40007000

08003b4c <HAL_UART_RxCpltCallback>:
	//Enables Rotation Vector
	BNO080_Initialization();
	BNO080_enableRotationVector(2500); //Send data update every 2.5ms (400Hz)
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b082      	sub	sp, #8
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
	//HAL Only, LL cannot be supported
	//HAL UART Receive Call back function
	if (huart->Instance == USART1) {
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a05      	ldr	r2, [pc, #20]	; (8003b70 <HAL_UART_RxCpltCallback+0x24>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d104      	bne.n	8003b68 <HAL_UART_RxCpltCallback+0x1c>
		HAL_UART_Receive_IT(&huart1, &uart1_rx_data, 1);
 8003b5e:	2201      	movs	r2, #1
 8003b60:	4904      	ldr	r1, [pc, #16]	; (8003b74 <HAL_UART_RxCpltCallback+0x28>)
 8003b62:	4805      	ldr	r0, [pc, #20]	; (8003b78 <HAL_UART_RxCpltCallback+0x2c>)
 8003b64:	f004 fa49 	bl	8007ffa <HAL_UART_Receive_IT>
		//		HAL_UART_Transmit_IT(&huart1, &uart1_rx_data, 1);
	}
}
 8003b68:	bf00      	nop
 8003b6a:	3708      	adds	r7, #8
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	40011000 	.word	0x40011000
 8003b74:	20000212 	.word	0x20000212
 8003b78:	20000518 	.word	0x20000518

08003b7c <Encode_Msg_AHRS>:

void Encode_Msg_AHRS(unsigned char *telemetry_tx_buf) {
 8003b7c:	b480      	push	{r7}
 8003b7e:	b085      	sub	sp, #20
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
	//Sync char
	telemetry_tx_buf[0] = 0x46;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2246      	movs	r2, #70	; 0x46
 8003b88:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[1] = 0x43;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	2243      	movs	r2, #67	; 0x43
 8003b90:	701a      	strb	r2, [r3, #0]
	//AHRS
	telemetry_tx_buf[2] = 0x10;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	3302      	adds	r3, #2
 8003b96:	2210      	movs	r2, #16
 8003b98:	701a      	strb	r2, [r3, #0]
	//Current Roll
	telemetry_tx_buf[3] = (short)(BNO080_Roll * 100);
 8003b9a:	4ba5      	ldr	r3, [pc, #660]	; (8003e30 <Encode_Msg_AHRS+0x2b4>)
 8003b9c:	edd3 7a00 	vldr	s15, [r3]
 8003ba0:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 8003e34 <Encode_Msg_AHRS+0x2b8>
 8003ba4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ba8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003bac:	ee17 3a90 	vmov	r3, s15
 8003bb0:	b21a      	sxth	r2, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	3303      	adds	r3, #3
 8003bb6:	b2d2      	uxtb	r2, r2
 8003bb8:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[4] = ((short)(BNO080_Roll * 100)) >> 8;
 8003bba:	4b9d      	ldr	r3, [pc, #628]	; (8003e30 <Encode_Msg_AHRS+0x2b4>)
 8003bbc:	edd3 7a00 	vldr	s15, [r3]
 8003bc0:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 8003e34 <Encode_Msg_AHRS+0x2b8>
 8003bc4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003bc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003bcc:	ee17 3a90 	vmov	r3, s15
 8003bd0:	b21b      	sxth	r3, r3
 8003bd2:	121b      	asrs	r3, r3, #8
 8003bd4:	b21a      	sxth	r2, r3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	3304      	adds	r3, #4
 8003bda:	b2d2      	uxtb	r2, r2
 8003bdc:	701a      	strb	r2, [r3, #0]
	//Current Pitch
	telemetry_tx_buf[5] = (short)(BNO080_Pitch * 100);
 8003bde:	4b96      	ldr	r3, [pc, #600]	; (8003e38 <Encode_Msg_AHRS+0x2bc>)
 8003be0:	edd3 7a00 	vldr	s15, [r3]
 8003be4:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8003e34 <Encode_Msg_AHRS+0x2b8>
 8003be8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003bec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003bf0:	ee17 3a90 	vmov	r3, s15
 8003bf4:	b21a      	sxth	r2, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	3305      	adds	r3, #5
 8003bfa:	b2d2      	uxtb	r2, r2
 8003bfc:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[6] = ((short)(BNO080_Pitch * 100)) >> 8;
 8003bfe:	4b8e      	ldr	r3, [pc, #568]	; (8003e38 <Encode_Msg_AHRS+0x2bc>)
 8003c00:	edd3 7a00 	vldr	s15, [r3]
 8003c04:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8003e34 <Encode_Msg_AHRS+0x2b8>
 8003c08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c10:	ee17 3a90 	vmov	r3, s15
 8003c14:	b21b      	sxth	r3, r3
 8003c16:	121b      	asrs	r3, r3, #8
 8003c18:	b21a      	sxth	r2, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	3306      	adds	r3, #6
 8003c1e:	b2d2      	uxtb	r2, r2
 8003c20:	701a      	strb	r2, [r3, #0]
	//Current Yaw
	telemetry_tx_buf[7] = (unsigned short)(BNO080_Yaw * 100);
 8003c22:	4b86      	ldr	r3, [pc, #536]	; (8003e3c <Encode_Msg_AHRS+0x2c0>)
 8003c24:	edd3 7a00 	vldr	s15, [r3]
 8003c28:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8003e34 <Encode_Msg_AHRS+0x2b8>
 8003c2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c34:	ee17 3a90 	vmov	r3, s15
 8003c38:	b29a      	uxth	r2, r3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	3307      	adds	r3, #7
 8003c3e:	b2d2      	uxtb	r2, r2
 8003c40:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[8] = ((unsigned short)(BNO080_Yaw * 100)) >> 8;
 8003c42:	4b7e      	ldr	r3, [pc, #504]	; (8003e3c <Encode_Msg_AHRS+0x2c0>)
 8003c44:	edd3 7a00 	vldr	s15, [r3]
 8003c48:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8003e34 <Encode_Msg_AHRS+0x2b8>
 8003c4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c54:	ee17 3a90 	vmov	r3, s15
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	0a1b      	lsrs	r3, r3, #8
 8003c5c:	b29a      	uxth	r2, r3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	3308      	adds	r3, #8
 8003c62:	b2d2      	uxtb	r2, r2
 8003c64:	701a      	strb	r2, [r3, #0]
	//Current Altitude
	telemetry_tx_buf[9] = (short)(LPS22HH.baroAltFilt * 10);
 8003c66:	4b76      	ldr	r3, [pc, #472]	; (8003e40 <Encode_Msg_AHRS+0x2c4>)
 8003c68:	edd3 7a03 	vldr	s15, [r3, #12]
 8003c6c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003c70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c78:	ee17 3a90 	vmov	r3, s15
 8003c7c:	b21a      	sxth	r2, r3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	3309      	adds	r3, #9
 8003c82:	b2d2      	uxtb	r2, r2
 8003c84:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[10] = ((short)(LPS22HH.baroAltFilt * 100)) >> 8;
 8003c86:	4b6e      	ldr	r3, [pc, #440]	; (8003e40 <Encode_Msg_AHRS+0x2c4>)
 8003c88:	edd3 7a03 	vldr	s15, [r3, #12]
 8003c8c:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8003e34 <Encode_Msg_AHRS+0x2b8>
 8003c90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c98:	ee17 3a90 	vmov	r3, s15
 8003c9c:	b21b      	sxth	r3, r3
 8003c9e:	121b      	asrs	r3, r3, #8
 8003ca0:	b21a      	sxth	r2, r3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	330a      	adds	r3, #10
 8003ca6:	b2d2      	uxtb	r2, r2
 8003ca8:	701a      	strb	r2, [r3, #0]

	//target Roll at Controller
	telemetry_tx_buf[11] = (short)((iBus.RH - 1500) * 0.1f * 100); //-50 ~ +50
 8003caa:	4b66      	ldr	r3, [pc, #408]	; (8003e44 <Encode_Msg_AHRS+0x2c8>)
 8003cac:	881b      	ldrh	r3, [r3, #0]
 8003cae:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8003cb2:	ee07 3a90 	vmov	s15, r3
 8003cb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003cba:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8003e48 <Encode_Msg_AHRS+0x2cc>
 8003cbe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003cc2:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8003e34 <Encode_Msg_AHRS+0x2b8>
 8003cc6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003cca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003cce:	ee17 3a90 	vmov	r3, s15
 8003cd2:	b21a      	sxth	r2, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	330b      	adds	r3, #11
 8003cd8:	b2d2      	uxtb	r2, r2
 8003cda:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[12] = ((short)((iBus.RH - 1500) * 0.1f * 100)) >> 8;
 8003cdc:	4b59      	ldr	r3, [pc, #356]	; (8003e44 <Encode_Msg_AHRS+0x2c8>)
 8003cde:	881b      	ldrh	r3, [r3, #0]
 8003ce0:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8003ce4:	ee07 3a90 	vmov	s15, r3
 8003ce8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003cec:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8003e48 <Encode_Msg_AHRS+0x2cc>
 8003cf0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003cf4:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8003e34 <Encode_Msg_AHRS+0x2b8>
 8003cf8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003cfc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d00:	ee17 3a90 	vmov	r3, s15
 8003d04:	b21b      	sxth	r3, r3
 8003d06:	121b      	asrs	r3, r3, #8
 8003d08:	b21a      	sxth	r2, r3
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	330c      	adds	r3, #12
 8003d0e:	b2d2      	uxtb	r2, r2
 8003d10:	701a      	strb	r2, [r3, #0]

	//target Pitch at Controller
	telemetry_tx_buf[13] = (short)((iBus.RV - 1500) * 0.1f * 100); //-50 ~ +50
 8003d12:	4b4c      	ldr	r3, [pc, #304]	; (8003e44 <Encode_Msg_AHRS+0x2c8>)
 8003d14:	885b      	ldrh	r3, [r3, #2]
 8003d16:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8003d1a:	ee07 3a90 	vmov	s15, r3
 8003d1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d22:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8003e48 <Encode_Msg_AHRS+0x2cc>
 8003d26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d2a:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8003e34 <Encode_Msg_AHRS+0x2b8>
 8003d2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d36:	ee17 3a90 	vmov	r3, s15
 8003d3a:	b21a      	sxth	r2, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	330d      	adds	r3, #13
 8003d40:	b2d2      	uxtb	r2, r2
 8003d42:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[14] = ((short)((iBus.RV - 1500) * 0.1f * 100)) >> 8;
 8003d44:	4b3f      	ldr	r3, [pc, #252]	; (8003e44 <Encode_Msg_AHRS+0x2c8>)
 8003d46:	885b      	ldrh	r3, [r3, #2]
 8003d48:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8003d4c:	ee07 3a90 	vmov	s15, r3
 8003d50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d54:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8003e48 <Encode_Msg_AHRS+0x2cc>
 8003d58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d5c:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8003e34 <Encode_Msg_AHRS+0x2b8>
 8003d60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d68:	ee17 3a90 	vmov	r3, s15
 8003d6c:	b21b      	sxth	r3, r3
 8003d6e:	121b      	asrs	r3, r3, #8
 8003d70:	b21a      	sxth	r2, r3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	330e      	adds	r3, #14
 8003d76:	b2d2      	uxtb	r2, r2
 8003d78:	701a      	strb	r2, [r3, #0]

	//target Yaw at Controller
	telemetry_tx_buf[15] = (unsigned short)((iBus.LH - 1000) * 0.36f * 100); //0 ~ 360
 8003d7a:	4b32      	ldr	r3, [pc, #200]	; (8003e44 <Encode_Msg_AHRS+0x2c8>)
 8003d7c:	88db      	ldrh	r3, [r3, #6]
 8003d7e:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8003d82:	ee07 3a90 	vmov	s15, r3
 8003d86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d8a:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8003e4c <Encode_Msg_AHRS+0x2d0>
 8003d8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d92:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8003e34 <Encode_Msg_AHRS+0x2b8>
 8003d96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d9e:	ee17 3a90 	vmov	r3, s15
 8003da2:	b29a      	uxth	r2, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	330f      	adds	r3, #15
 8003da8:	b2d2      	uxtb	r2, r2
 8003daa:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[16] = ((unsigned short)((iBus.LH - 1000) * 0.36f * 100)) >> 8;
 8003dac:	4b25      	ldr	r3, [pc, #148]	; (8003e44 <Encode_Msg_AHRS+0x2c8>)
 8003dae:	88db      	ldrh	r3, [r3, #6]
 8003db0:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8003db4:	ee07 3a90 	vmov	s15, r3
 8003db8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003dbc:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8003e4c <Encode_Msg_AHRS+0x2d0>
 8003dc0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003dc4:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8003e34 <Encode_Msg_AHRS+0x2b8>
 8003dc8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003dcc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003dd0:	ee17 3a90 	vmov	r3, s15
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	0a1b      	lsrs	r3, r3, #8
 8003dd8:	b29a      	uxth	r2, r3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	3310      	adds	r3, #16
 8003dde:	b2d2      	uxtb	r2, r2
 8003de0:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[17] = 0x00;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	3311      	adds	r3, #17
 8003de6:	2200      	movs	r2, #0
 8003de8:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[18] = 0x00;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	3312      	adds	r3, #18
 8003dee:	2200      	movs	r2, #0
 8003df0:	701a      	strb	r2, [r3, #0]

	//Checksum
	telemetry_tx_buf[19] = 0xff;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	3313      	adds	r3, #19
 8003df6:	22ff      	movs	r2, #255	; 0xff
 8003df8:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 19; i++) {
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	60fb      	str	r3, [r7, #12]
 8003dfe:	e00e      	b.n	8003e1e <Encode_Msg_AHRS+0x2a2>
		telemetry_tx_buf[19] -= telemetry_tx_buf[i];
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	3313      	adds	r3, #19
 8003e04:	7819      	ldrb	r1, [r3, #0]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	4413      	add	r3, r2
 8003e0c:	781a      	ldrb	r2, [r3, #0]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	3313      	adds	r3, #19
 8003e12:	1a8a      	subs	r2, r1, r2
 8003e14:	b2d2      	uxtb	r2, r2
 8003e16:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 19; i++) {
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	3301      	adds	r3, #1
 8003e1c:	60fb      	str	r3, [r7, #12]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2b12      	cmp	r3, #18
 8003e22:	dded      	ble.n	8003e00 <Encode_Msg_AHRS+0x284>
	}
}
 8003e24:	bf00      	nop
 8003e26:	3714      	adds	r7, #20
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr
 8003e30:	200003a0 	.word	0x200003a0
 8003e34:	42c80000 	.word	0x42c80000
 8003e38:	200003a8 	.word	0x200003a8
 8003e3c:	200003a4 	.word	0x200003a4
 8003e40:	2000035c 	.word	0x2000035c
 8003e44:	20000310 	.word	0x20000310
 8003e48:	3dcccccd 	.word	0x3dcccccd
 8003e4c:	3eb851ec 	.word	0x3eb851ec

08003e50 <Encode_Msg_GPS>:

void Encode_Msg_GPS(unsigned char *telemetry_tx_buf) {
 8003e50:	b590      	push	{r4, r7, lr}
 8003e52:	b085      	sub	sp, #20
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
	//Sync char
	telemetry_tx_buf[0] = 0x46;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2246      	movs	r2, #70	; 0x46
 8003e5c:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[1] = 0x43;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	3301      	adds	r3, #1
 8003e62:	2243      	movs	r2, #67	; 0x43
 8003e64:	701a      	strb	r2, [r3, #0]
	//0x11 - GPS
	telemetry_tx_buf[2] = 0x11;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	3302      	adds	r3, #2
 8003e6a:	2211      	movs	r2, #17
 8003e6c:	701a      	strb	r2, [r3, #0]

	//Latitude
	telemetry_tx_buf[3] = posllh.lat & 0xff;
 8003e6e:	4b53      	ldr	r3, [pc, #332]	; (8003fbc <Encode_Msg_GPS+0x16c>)
 8003e70:	68da      	ldr	r2, [r3, #12]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	3303      	adds	r3, #3
 8003e76:	b2d2      	uxtb	r2, r2
 8003e78:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[4] = posllh.lat >> 8;
 8003e7a:	4b50      	ldr	r3, [pc, #320]	; (8003fbc <Encode_Msg_GPS+0x16c>)
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	121a      	asrs	r2, r3, #8
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	3304      	adds	r3, #4
 8003e84:	b2d2      	uxtb	r2, r2
 8003e86:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[5] = posllh.lat >> 16;
 8003e88:	4b4c      	ldr	r3, [pc, #304]	; (8003fbc <Encode_Msg_GPS+0x16c>)
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	141a      	asrs	r2, r3, #16
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	3305      	adds	r3, #5
 8003e92:	b2d2      	uxtb	r2, r2
 8003e94:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[6] = posllh.lat >> 24;
 8003e96:	4b49      	ldr	r3, [pc, #292]	; (8003fbc <Encode_Msg_GPS+0x16c>)
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	161a      	asrs	r2, r3, #24
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	3306      	adds	r3, #6
 8003ea0:	b2d2      	uxtb	r2, r2
 8003ea2:	701a      	strb	r2, [r3, #0]

	//Longitude
	telemetry_tx_buf[7] = posllh.lon & 0xff;
 8003ea4:	4b45      	ldr	r3, [pc, #276]	; (8003fbc <Encode_Msg_GPS+0x16c>)
 8003ea6:	689a      	ldr	r2, [r3, #8]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	3307      	adds	r3, #7
 8003eac:	b2d2      	uxtb	r2, r2
 8003eae:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[8] = posllh.lon >> 8;
 8003eb0:	4b42      	ldr	r3, [pc, #264]	; (8003fbc <Encode_Msg_GPS+0x16c>)
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	121a      	asrs	r2, r3, #8
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	3308      	adds	r3, #8
 8003eba:	b2d2      	uxtb	r2, r2
 8003ebc:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[9] = posllh.lon >> 16;
 8003ebe:	4b3f      	ldr	r3, [pc, #252]	; (8003fbc <Encode_Msg_GPS+0x16c>)
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	141a      	asrs	r2, r3, #16
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	3309      	adds	r3, #9
 8003ec8:	b2d2      	uxtb	r2, r2
 8003eca:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[10] = posllh.lon >> 24;
 8003ecc:	4b3b      	ldr	r3, [pc, #236]	; (8003fbc <Encode_Msg_GPS+0x16c>)
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	161a      	asrs	r2, r3, #24
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	330a      	adds	r3, #10
 8003ed6:	b2d2      	uxtb	r2, r2
 8003ed8:	701a      	strb	r2, [r3, #0]

	//Battery Voltage
	telemetry_tx_buf[11] = (unsigned short)(batteryVolt * 100);
 8003eda:	4b39      	ldr	r3, [pc, #228]	; (8003fc0 <Encode_Msg_GPS+0x170>)
 8003edc:	edd3 7a00 	vldr	s15, [r3]
 8003ee0:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8003fc4 <Encode_Msg_GPS+0x174>
 8003ee4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ee8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003eec:	ee17 3a90 	vmov	r3, s15
 8003ef0:	b29a      	uxth	r2, r3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	330b      	adds	r3, #11
 8003ef6:	b2d2      	uxtb	r2, r2
 8003ef8:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[12] = ((unsigned short)(batteryVolt * 100)) >> 8;
 8003efa:	4b31      	ldr	r3, [pc, #196]	; (8003fc0 <Encode_Msg_GPS+0x170>)
 8003efc:	edd3 7a00 	vldr	s15, [r3]
 8003f00:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8003fc4 <Encode_Msg_GPS+0x174>
 8003f04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f0c:	ee17 3a90 	vmov	r3, s15
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	0a1b      	lsrs	r3, r3, #8
 8003f14:	b29a      	uxth	r2, r3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	330c      	adds	r3, #12
 8003f1a:	b2d2      	uxtb	r2, r2
 8003f1c:	701a      	strb	r2, [r3, #0]

	//SwA SwC
	telemetry_tx_buf[13] = (iBus.SwA == 1000)? 0 : 1;
 8003f1e:	4b2a      	ldr	r3, [pc, #168]	; (8003fc8 <Encode_Msg_GPS+0x178>)
 8003f20:	891b      	ldrh	r3, [r3, #8]
 8003f22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f26:	bf14      	ite	ne
 8003f28:	2301      	movne	r3, #1
 8003f2a:	2300      	moveq	r3, #0
 8003f2c:	b2da      	uxtb	r2, r3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	330d      	adds	r3, #13
 8003f32:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[14] = (iBus.SwC == 1000)? 0 : (iBus.SwC == 1500)? 1 : 2;
 8003f34:	4b24      	ldr	r3, [pc, #144]	; (8003fc8 <Encode_Msg_GPS+0x178>)
 8003f36:	899b      	ldrh	r3, [r3, #12]
 8003f38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f3c:	d009      	beq.n	8003f52 <Encode_Msg_GPS+0x102>
 8003f3e:	4b22      	ldr	r3, [pc, #136]	; (8003fc8 <Encode_Msg_GPS+0x178>)
 8003f40:	899b      	ldrh	r3, [r3, #12]
 8003f42:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d101      	bne.n	8003f4e <Encode_Msg_GPS+0xfe>
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e002      	b.n	8003f54 <Encode_Msg_GPS+0x104>
 8003f4e:	2302      	movs	r3, #2
 8003f50:	e000      	b.n	8003f54 <Encode_Msg_GPS+0x104>
 8003f52:	2300      	movs	r3, #0
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	320e      	adds	r2, #14
 8003f58:	7013      	strb	r3, [r2, #0]

	//Fail-Safe Mode
	telemetry_tx_buf[15] = iBus_isActiveFailSafe(&iBus); // Failsafe active true / inactive false
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f103 040f 	add.w	r4, r3, #15
 8003f60:	4819      	ldr	r0, [pc, #100]	; (8003fc8 <Encode_Msg_GPS+0x178>)
 8003f62:	f7fd fea8 	bl	8001cb6 <iBus_isActiveFailSafe>
 8003f66:	4603      	mov	r3, r0
 8003f68:	7023      	strb	r3, [r4, #0]

	//0x00
	telemetry_tx_buf[16] = 0x00;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	3310      	adds	r3, #16
 8003f6e:	2200      	movs	r2, #0
 8003f70:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[17] = 0x00;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	3311      	adds	r3, #17
 8003f76:	2200      	movs	r2, #0
 8003f78:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[18] = 0x00;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	3312      	adds	r3, #18
 8003f7e:	2200      	movs	r2, #0
 8003f80:	701a      	strb	r2, [r3, #0]

	//Checksum
	telemetry_tx_buf[19] = 0xff;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	3313      	adds	r3, #19
 8003f86:	22ff      	movs	r2, #255	; 0xff
 8003f88:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 19; i++) {
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	60fb      	str	r3, [r7, #12]
 8003f8e:	e00e      	b.n	8003fae <Encode_Msg_GPS+0x15e>
		telemetry_tx_buf[19] -= telemetry_tx_buf[i];
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	3313      	adds	r3, #19
 8003f94:	7819      	ldrb	r1, [r3, #0]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	4413      	add	r3, r2
 8003f9c:	781a      	ldrb	r2, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	3313      	adds	r3, #19
 8003fa2:	1a8a      	subs	r2, r1, r2
 8003fa4:	b2d2      	uxtb	r2, r2
 8003fa6:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 19; i++) {
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	3301      	adds	r3, #1
 8003fac:	60fb      	str	r3, [r7, #12]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2b12      	cmp	r3, #18
 8003fb2:	dded      	ble.n	8003f90 <Encode_Msg_GPS+0x140>
	}
}
 8003fb4:	bf00      	nop
 8003fb6:	3714      	adds	r7, #20
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd90      	pop	{r4, r7, pc}
 8003fbc:	20000370 	.word	0x20000370
 8003fc0:	200004a8 	.word	0x200004a8
 8003fc4:	42c80000 	.word	0x42c80000
 8003fc8:	20000310 	.word	0x20000310

08003fcc <Encode_Msg_PID_Gain>:

void Encode_Msg_PID_Gain(unsigned char *telemetry_tx_buf, unsigned char id, float p, float i, float d) {
 8003fcc:	b480      	push	{r7}
 8003fce:	b089      	sub	sp, #36	; 0x24
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6178      	str	r0, [r7, #20]
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	ed87 0a03 	vstr	s0, [r7, #12]
 8003fda:	edc7 0a02 	vstr	s1, [r7, #8]
 8003fde:	ed87 1a01 	vstr	s2, [r7, #4]
 8003fe2:	74fb      	strb	r3, [r7, #19]
	//Sync char
	telemetry_tx_buf[0] = 0x46;
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	2246      	movs	r2, #70	; 0x46
 8003fe8:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[1] = 0x43;
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	3301      	adds	r3, #1
 8003fee:	2243      	movs	r2, #67	; 0x43
 8003ff0:	701a      	strb	r2, [r3, #0]
	//0x00, 0x01 - Roll, 0x02, 0x03 - Pitch, 0x04, 0x05 - Yaw
	telemetry_tx_buf[2] = id;
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	3302      	adds	r3, #2
 8003ff6:	7cfa      	ldrb	r2, [r7, #19]
 8003ff8:	701a      	strb	r2, [r3, #0]

	//	memcpy(&telemetry_tx_buf[3], &p, 4);
	//	memcpy(&telemetry_tx_buf[7], &i, 4);
	//	memcpy(&telemetry_tx_buf[11], &d, 4);

	*(float *)&telemetry_tx_buf[3] = p;
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	3303      	adds	r3, #3
 8003ffe:	68fa      	ldr	r2, [r7, #12]
 8004000:	601a      	str	r2, [r3, #0]
	*(float *)&telemetry_tx_buf[7] = i;
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	3307      	adds	r3, #7
 8004006:	68ba      	ldr	r2, [r7, #8]
 8004008:	601a      	str	r2, [r3, #0]
	*(float *)&telemetry_tx_buf[11] = d;
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	330b      	adds	r3, #11
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	601a      	str	r2, [r3, #0]

	//0x00
	telemetry_tx_buf[15] = 0x00;
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	330f      	adds	r3, #15
 8004016:	2200      	movs	r2, #0
 8004018:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[16] = 0x00;
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	3310      	adds	r3, #16
 800401e:	2200      	movs	r2, #0
 8004020:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[17] = 0x00;
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	3311      	adds	r3, #17
 8004026:	2200      	movs	r2, #0
 8004028:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[18] = 0x00;
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	3312      	adds	r3, #18
 800402e:	2200      	movs	r2, #0
 8004030:	701a      	strb	r2, [r3, #0]

	//Checksum
	telemetry_tx_buf[19] = 0xff;
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	3313      	adds	r3, #19
 8004036:	22ff      	movs	r2, #255	; 0xff
 8004038:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 19; i++) {
 800403a:	2300      	movs	r3, #0
 800403c:	61fb      	str	r3, [r7, #28]
 800403e:	e00e      	b.n	800405e <Encode_Msg_PID_Gain+0x92>
		telemetry_tx_buf[19] -= telemetry_tx_buf[i];
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	3313      	adds	r3, #19
 8004044:	7819      	ldrb	r1, [r3, #0]
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	697a      	ldr	r2, [r7, #20]
 800404a:	4413      	add	r3, r2
 800404c:	781a      	ldrb	r2, [r3, #0]
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	3313      	adds	r3, #19
 8004052:	1a8a      	subs	r2, r1, r2
 8004054:	b2d2      	uxtb	r2, r2
 8004056:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 19; i++) {
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	3301      	adds	r3, #1
 800405c:	61fb      	str	r3, [r7, #28]
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	2b12      	cmp	r3, #18
 8004062:	dded      	ble.n	8004040 <Encode_Msg_PID_Gain+0x74>
	}
}
 8004064:	bf00      	nop
 8004066:	3724      	adds	r7, #36	; 0x24
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr

08004070 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8004070:	b480      	push	{r7}
 8004072:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8004074:	bf00      	nop
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr

0800407e <LL_SPI_SetStandard>:
{
 800407e:	b480      	push	{r7}
 8004080:	b083      	sub	sp, #12
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
 8004086:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f023 0210 	bic.w	r2, r3, #16
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	431a      	orrs	r2, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	605a      	str	r2, [r3, #4]
}
 8004098:	bf00      	nop
 800409a:	370c      	adds	r7, #12
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <LL_AHB1_GRP1_EnableClock>:
{
 80040a4:	b480      	push	{r7}
 80040a6:	b085      	sub	sp, #20
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80040ac:	4b08      	ldr	r3, [pc, #32]	; (80040d0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80040ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040b0:	4907      	ldr	r1, [pc, #28]	; (80040d0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80040b8:	4b05      	ldr	r3, [pc, #20]	; (80040d0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80040ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	4013      	ands	r3, r2
 80040c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80040c2:	68fb      	ldr	r3, [r7, #12]
}
 80040c4:	bf00      	nop
 80040c6:	3714      	adds	r7, #20
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr
 80040d0:	40023800 	.word	0x40023800

080040d4 <LL_APB1_GRP1_EnableClock>:
{
 80040d4:	b480      	push	{r7}
 80040d6:	b085      	sub	sp, #20
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80040dc:	4b08      	ldr	r3, [pc, #32]	; (8004100 <LL_APB1_GRP1_EnableClock+0x2c>)
 80040de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040e0:	4907      	ldr	r1, [pc, #28]	; (8004100 <LL_APB1_GRP1_EnableClock+0x2c>)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80040e8:	4b05      	ldr	r3, [pc, #20]	; (8004100 <LL_APB1_GRP1_EnableClock+0x2c>)
 80040ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4013      	ands	r3, r2
 80040f0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80040f2:	68fb      	ldr	r3, [r7, #12]
}
 80040f4:	bf00      	nop
 80040f6:	3714      	adds	r7, #20
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr
 8004100:	40023800 	.word	0x40023800

08004104 <LL_APB2_GRP1_EnableClock>:
{
 8004104:	b480      	push	{r7}
 8004106:	b085      	sub	sp, #20
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800410c:	4b08      	ldr	r3, [pc, #32]	; (8004130 <LL_APB2_GRP1_EnableClock+0x2c>)
 800410e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004110:	4907      	ldr	r1, [pc, #28]	; (8004130 <LL_APB2_GRP1_EnableClock+0x2c>)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4313      	orrs	r3, r2
 8004116:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8004118:	4b05      	ldr	r3, [pc, #20]	; (8004130 <LL_APB2_GRP1_EnableClock+0x2c>)
 800411a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	4013      	ands	r3, r2
 8004120:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004122:	68fb      	ldr	r3, [r7, #12]
}
 8004124:	bf00      	nop
 8004126:	3714      	adds	r7, #20
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr
 8004130:	40023800 	.word	0x40023800

08004134 <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b090      	sub	sp, #64	; 0x40
 8004138:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800413a:	f107 0318 	add.w	r3, r7, #24
 800413e:	2228      	movs	r2, #40	; 0x28
 8004140:	2100      	movs	r1, #0
 8004142:	4618      	mov	r0, r3
 8004144:	f005 fe44 	bl	8009dd0 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004148:	463b      	mov	r3, r7
 800414a:	2200      	movs	r2, #0
 800414c:	601a      	str	r2, [r3, #0]
 800414e:	605a      	str	r2, [r3, #4]
 8004150:	609a      	str	r2, [r3, #8]
 8004152:	60da      	str	r2, [r3, #12]
 8004154:	611a      	str	r2, [r3, #16]
 8004156:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8004158:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800415c:	f7ff ffd2 	bl	8004104 <LL_APB2_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8004160:	2001      	movs	r0, #1
 8004162:	f7ff ff9f 	bl	80040a4 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration  
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8004166:	23e0      	movs	r3, #224	; 0xe0
 8004168:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800416a:	2302      	movs	r3, #2
 800416c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800416e:	2303      	movs	r3, #3
 8004170:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004172:	2300      	movs	r3, #0
 8004174:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004176:	2300      	movs	r3, #0
 8004178:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800417a:	2305      	movs	r3, #5
 800417c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800417e:	463b      	mov	r3, r7
 8004180:	4619      	mov	r1, r3
 8004182:	4813      	ldr	r0, [pc, #76]	; (80041d0 <MX_SPI1_Init+0x9c>)
 8004184:	f004 fe8f 	bl	8008ea6 <LL_GPIO_Init>

  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8004188:	2300      	movs	r3, #0
 800418a:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800418c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8004190:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8004192:	2300      	movs	r3, #0
 8004194:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8004196:	2302      	movs	r3, #2
 8004198:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 800419a:	2301      	movs	r3, #1
 800419c:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800419e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80041a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 80041a4:	2310      	movs	r3, #16
 80041a6:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80041a8:	2300      	movs	r3, #0
 80041aa:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80041ac:	2300      	movs	r3, #0
 80041ae:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 80041b0:	230a      	movs	r3, #10
 80041b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 80041b4:	f107 0318 	add.w	r3, r7, #24
 80041b8:	4619      	mov	r1, r3
 80041ba:	4806      	ldr	r0, [pc, #24]	; (80041d4 <MX_SPI1_Init+0xa0>)
 80041bc:	f005 f841 	bl	8009242 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 80041c0:	2100      	movs	r1, #0
 80041c2:	4804      	ldr	r0, [pc, #16]	; (80041d4 <MX_SPI1_Init+0xa0>)
 80041c4:	f7ff ff5b 	bl	800407e <LL_SPI_SetStandard>

}
 80041c8:	bf00      	nop
 80041ca:	3740      	adds	r7, #64	; 0x40
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	40020000 	.word	0x40020000
 80041d4:	40013000 	.word	0x40013000

080041d8 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b090      	sub	sp, #64	; 0x40
 80041dc:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80041de:	f107 0318 	add.w	r3, r7, #24
 80041e2:	2228      	movs	r2, #40	; 0x28
 80041e4:	2100      	movs	r1, #0
 80041e6:	4618      	mov	r0, r3
 80041e8:	f005 fdf2 	bl	8009dd0 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041ec:	463b      	mov	r3, r7
 80041ee:	2200      	movs	r2, #0
 80041f0:	601a      	str	r2, [r3, #0]
 80041f2:	605a      	str	r2, [r3, #4]
 80041f4:	609a      	str	r2, [r3, #8]
 80041f6:	60da      	str	r2, [r3, #12]
 80041f8:	611a      	str	r2, [r3, #16]
 80041fa:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 80041fc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004200:	f7ff ff68 	bl	80040d4 <LL_APB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8004204:	2002      	movs	r0, #2
 8004206:	f7ff ff4d 	bl	80040a4 <LL_AHB1_GRP1_EnableClock>
  /**SPI2 GPIO Configuration  
  PB13   ------> SPI2_SCK
  PB14   ------> SPI2_MISO
  PB15   ------> SPI2_MOSI 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 800420a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800420e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004210:	2302      	movs	r3, #2
 8004212:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8004214:	2303      	movs	r3, #3
 8004216:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004218:	2300      	movs	r3, #0
 800421a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800421c:	2300      	movs	r3, #0
 800421e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8004220:	2305      	movs	r3, #5
 8004222:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004224:	463b      	mov	r3, r7
 8004226:	4619      	mov	r1, r3
 8004228:	4813      	ldr	r0, [pc, #76]	; (8004278 <MX_SPI2_Init+0xa0>)
 800422a:	f004 fe3c 	bl	8008ea6 <LL_GPIO_Init>

  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800422e:	2300      	movs	r3, #0
 8004230:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8004232:	f44f 7382 	mov.w	r3, #260	; 0x104
 8004236:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8004238:	2300      	movs	r3, #0
 800423a:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 800423c:	2302      	movs	r3, #2
 800423e:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8004240:	2301      	movs	r3, #1
 8004242:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8004244:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004248:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 800424a:	2318      	movs	r3, #24
 800424c:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800424e:	2300      	movs	r3, #0
 8004250:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8004252:	2300      	movs	r3, #0
 8004254:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8004256:	230a      	movs	r3, #10
 8004258:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 800425a:	f107 0318 	add.w	r3, r7, #24
 800425e:	4619      	mov	r1, r3
 8004260:	4806      	ldr	r0, [pc, #24]	; (800427c <MX_SPI2_Init+0xa4>)
 8004262:	f004 ffee 	bl	8009242 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 8004266:	2100      	movs	r1, #0
 8004268:	4804      	ldr	r0, [pc, #16]	; (800427c <MX_SPI2_Init+0xa4>)
 800426a:	f7ff ff08 	bl	800407e <LL_SPI_SetStandard>

}
 800426e:	bf00      	nop
 8004270:	3740      	adds	r7, #64	; 0x40
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	40020400 	.word	0x40020400
 800427c:	40003800 	.word	0x40003800

08004280 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b090      	sub	sp, #64	; 0x40
 8004284:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8004286:	f107 0318 	add.w	r3, r7, #24
 800428a:	2228      	movs	r2, #40	; 0x28
 800428c:	2100      	movs	r1, #0
 800428e:	4618      	mov	r0, r3
 8004290:	f005 fd9e 	bl	8009dd0 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004294:	463b      	mov	r3, r7
 8004296:	2200      	movs	r2, #0
 8004298:	601a      	str	r2, [r3, #0]
 800429a:	605a      	str	r2, [r3, #4]
 800429c:	609a      	str	r2, [r3, #8]
 800429e:	60da      	str	r2, [r3, #12]
 80042a0:	611a      	str	r2, [r3, #16]
 80042a2:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 80042a4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80042a8:	f7ff ff14 	bl	80040d4 <LL_APB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80042ac:	2002      	movs	r0, #2
 80042ae:	f7ff fef9 	bl	80040a4 <LL_AHB1_GRP1_EnableClock>
  /**SPI3 GPIO Configuration  
  PB3   ------> SPI3_SCK
  PB4   ------> SPI3_MISO
  PB5   ------> SPI3_MOSI 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 80042b2:	2338      	movs	r3, #56	; 0x38
 80042b4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80042b6:	2302      	movs	r3, #2
 80042b8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80042ba:	2303      	movs	r3, #3
 80042bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80042be:	2300      	movs	r3, #0
 80042c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80042c2:	2300      	movs	r3, #0
 80042c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 80042c6:	2306      	movs	r3, #6
 80042c8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042ca:	463b      	mov	r3, r7
 80042cc:	4619      	mov	r1, r3
 80042ce:	4813      	ldr	r0, [pc, #76]	; (800431c <MX_SPI3_Init+0x9c>)
 80042d0:	f004 fde9 	bl	8008ea6 <LL_GPIO_Init>

  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80042d4:	2300      	movs	r3, #0
 80042d6:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80042d8:	f44f 7382 	mov.w	r3, #260	; 0x104
 80042dc:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80042de:	2300      	movs	r3, #0
 80042e0:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80042e2:	2302      	movs	r3, #2
 80042e4:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80042e6:	2301      	movs	r3, #1
 80042e8:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80042ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80042ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 80042f0:	2308      	movs	r3, #8
 80042f2:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80042f4:	2300      	movs	r3, #0
 80042f6:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80042f8:	2300      	movs	r3, #0
 80042fa:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 80042fc:	230a      	movs	r3, #10
 80042fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 8004300:	f107 0318 	add.w	r3, r7, #24
 8004304:	4619      	mov	r1, r3
 8004306:	4806      	ldr	r0, [pc, #24]	; (8004320 <MX_SPI3_Init+0xa0>)
 8004308:	f004 ff9b 	bl	8009242 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 800430c:	2100      	movs	r1, #0
 800430e:	4804      	ldr	r0, [pc, #16]	; (8004320 <MX_SPI3_Init+0xa0>)
 8004310:	f7ff feb5 	bl	800407e <LL_SPI_SetStandard>

}
 8004314:	bf00      	nop
 8004316:	3740      	adds	r7, #64	; 0x40
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}
 800431c:	40020400 	.word	0x40020400
 8004320:	40003c00 	.word	0x40003c00

08004324 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004324:	b480      	push	{r7}
 8004326:	b083      	sub	sp, #12
 8004328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800432a:	2300      	movs	r3, #0
 800432c:	607b      	str	r3, [r7, #4]
 800432e:	4b10      	ldr	r3, [pc, #64]	; (8004370 <HAL_MspInit+0x4c>)
 8004330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004332:	4a0f      	ldr	r2, [pc, #60]	; (8004370 <HAL_MspInit+0x4c>)
 8004334:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004338:	6453      	str	r3, [r2, #68]	; 0x44
 800433a:	4b0d      	ldr	r3, [pc, #52]	; (8004370 <HAL_MspInit+0x4c>)
 800433c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800433e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004342:	607b      	str	r3, [r7, #4]
 8004344:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004346:	2300      	movs	r3, #0
 8004348:	603b      	str	r3, [r7, #0]
 800434a:	4b09      	ldr	r3, [pc, #36]	; (8004370 <HAL_MspInit+0x4c>)
 800434c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434e:	4a08      	ldr	r2, [pc, #32]	; (8004370 <HAL_MspInit+0x4c>)
 8004350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004354:	6413      	str	r3, [r2, #64]	; 0x40
 8004356:	4b06      	ldr	r3, [pc, #24]	; (8004370 <HAL_MspInit+0x4c>)
 8004358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800435e:	603b      	str	r3, [r7, #0]
 8004360:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004362:	bf00      	nop
 8004364:	370c      	adds	r7, #12
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr
 800436e:	bf00      	nop
 8004370:	40023800 	.word	0x40023800

08004374 <LL_TIM_ClearFlag_UPDATE>:
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f06f 0201 	mvn.w	r2, #1
 8004382:	611a      	str	r2, [r3, #16]
}
 8004384:	bf00      	nop
 8004386:	370c      	adds	r7, #12
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr

08004390 <LL_TIM_IsActiveFlag_UPDATE>:
{
 8004390:	b480      	push	{r7}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	691b      	ldr	r3, [r3, #16]
 800439c:	f003 0301 	and.w	r3, r3, #1
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d101      	bne.n	80043a8 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 80043a4:	2301      	movs	r3, #1
 80043a6:	e000      	b.n	80043aa <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 80043a8:	2300      	movs	r3, #0
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	370c      	adds	r7, #12
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr

080043b6 <LL_USART_IsActiveFlag_RXNE>:
{
 80043b6:	b480      	push	{r7}
 80043b8:	b083      	sub	sp, #12
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0320 	and.w	r3, r3, #32
 80043c6:	2b20      	cmp	r3, #32
 80043c8:	bf0c      	ite	eq
 80043ca:	2301      	moveq	r3, #1
 80043cc:	2300      	movne	r3, #0
 80043ce:	b2db      	uxtb	r3, r3
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <LL_USART_ClearFlag_RXNE>:
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f06f 0220 	mvn.w	r2, #32
 80043ea:	601a      	str	r2, [r3, #0]
}
 80043ec:	bf00      	nop
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <LL_USART_ReceiveData8>:
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	b2db      	uxtb	r3, r3
}
 8004406:	4618      	mov	r0, r3
 8004408:	370c      	adds	r7, #12
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr

08004412 <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 8004412:	b480      	push	{r7}
 8004414:	af00      	add	r7, sp, #0

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */

	/* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004416:	bf00      	nop
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 8004420:	b480      	push	{r7}
 8004422:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1)
 8004424:	e7fe      	b.n	8004424 <HardFault_Handler+0x4>

08004426 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 8004426:	b480      	push	{r7}
 8004428:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1)
 800442a:	e7fe      	b.n	800442a <MemManage_Handler+0x4>

0800442c <BusFault_Handler>:

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 800442c:	b480      	push	{r7}
 800442e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1)
 8004430:	e7fe      	b.n	8004430 <BusFault_Handler+0x4>

08004432 <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 8004432:	b480      	push	{r7}
 8004434:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1)
 8004436:	e7fe      	b.n	8004436 <UsageFault_Handler+0x4>

08004438 <SVC_Handler>:

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void)
{
 8004438:	b480      	push	{r7}
 800443a:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 800443c:	bf00      	nop
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr

08004446 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 8004446:	b480      	push	{r7}
 8004448:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 800444a:	bf00      	nop
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr

08004454 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 8004454:	b480      	push	{r7}
 8004456:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8004458:	bf00      	nop
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr

08004462 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 8004462:	b580      	push	{r7, lr}
 8004464:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8004466:	f000 ffe9 	bl	800543c <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 800446a:	bf00      	nop
 800446c:	bd80      	pop	{r7, pc}
	...

08004470 <USART1_IRQHandler>:

/**
 * @brief This function handles USART1 global interrupt.
 */
void USART1_IRQHandler(void)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART1_IRQn 0 */

	/* USER CODE END USART1_IRQn 0 */
	HAL_UART_IRQHandler(&huart1);
 8004474:	4802      	ldr	r0, [pc, #8]	; (8004480 <USART1_IRQHandler+0x10>)
 8004476:	f003 fe15 	bl	80080a4 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART1_IRQn 1 */

	/* USER CODE END USART1_IRQn 1 */
}
 800447a:	bf00      	nop
 800447c:	bd80      	pop	{r7, pc}
 800447e:	bf00      	nop
 8004480:	20000518 	.word	0x20000518

08004484 <UART4_IRQHandler>:

/**
 * @brief This function handles UART4 global interrupt.
 */
void UART4_IRQHandler(void)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UART4_IRQn 0 */
	static unsigned char cnt = 0;

	if (LL_USART_IsActiveFlag_RXNE(UART4)) {
 8004488:	4831      	ldr	r0, [pc, #196]	; (8004550 <UART4_IRQHandler+0xcc>)
 800448a:	f7ff ff94 	bl	80043b6 <LL_USART_IsActiveFlag_RXNE>
 800448e:	4603      	mov	r3, r0
 8004490:	2b00      	cmp	r3, #0
 8004492:	d058      	beq.n	8004546 <UART4_IRQHandler+0xc2>
		LL_USART_ClearFlag_RXNE(UART4);
 8004494:	482e      	ldr	r0, [pc, #184]	; (8004550 <UART4_IRQHandler+0xcc>)
 8004496:	f7ff ffa1 	bl	80043dc <LL_USART_ClearFlag_RXNE>
		uart4_rx_data = LL_USART_ReceiveData8(UART4);
 800449a:	482d      	ldr	r0, [pc, #180]	; (8004550 <UART4_IRQHandler+0xcc>)
 800449c:	f7ff ffac 	bl	80043f8 <LL_USART_ReceiveData8>
 80044a0:	4603      	mov	r3, r0
 80044a2:	461a      	mov	r2, r3
 80044a4:	4b2b      	ldr	r3, [pc, #172]	; (8004554 <UART4_IRQHandler+0xd0>)
 80044a6:	701a      	strb	r2, [r3, #0]
		uart4_rx_flag = 1;
 80044a8:	4b2b      	ldr	r3, [pc, #172]	; (8004558 <UART4_IRQHandler+0xd4>)
 80044aa:	2201      	movs	r2, #1
 80044ac:	701a      	strb	r2, [r3, #0]
		//		if (cnt == 35) {
		//			m8n_rx_cplt_flag = 1;
		//			cnt = 0;
		//		}

		switch (cnt) {
 80044ae:	4b2b      	ldr	r3, [pc, #172]	; (800455c <UART4_IRQHandler+0xd8>)
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d015      	beq.n	80044e2 <UART4_IRQHandler+0x5e>
 80044b6:	2b23      	cmp	r3, #35	; 0x23
 80044b8:	d029      	beq.n	800450e <UART4_IRQHandler+0x8a>
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d135      	bne.n	800452a <UART4_IRQHandler+0xa6>
		case 0:
			if (uart4_rx_data == 0xb5) {
 80044be:	4b25      	ldr	r3, [pc, #148]	; (8004554 <UART4_IRQHandler+0xd0>)
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	2bb5      	cmp	r3, #181	; 0xb5
 80044c4:	d141      	bne.n	800454a <UART4_IRQHandler+0xc6>
				m8n_rx_buf[cnt] = uart4_rx_data;
 80044c6:	4b25      	ldr	r3, [pc, #148]	; (800455c <UART4_IRQHandler+0xd8>)
 80044c8:	781b      	ldrb	r3, [r3, #0]
 80044ca:	461a      	mov	r2, r3
 80044cc:	4b21      	ldr	r3, [pc, #132]	; (8004554 <UART4_IRQHandler+0xd0>)
 80044ce:	7819      	ldrb	r1, [r3, #0]
 80044d0:	4b23      	ldr	r3, [pc, #140]	; (8004560 <UART4_IRQHandler+0xdc>)
 80044d2:	5499      	strb	r1, [r3, r2]
				cnt++;
 80044d4:	4b21      	ldr	r3, [pc, #132]	; (800455c <UART4_IRQHandler+0xd8>)
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	3301      	adds	r3, #1
 80044da:	b2da      	uxtb	r2, r3
 80044dc:	4b1f      	ldr	r3, [pc, #124]	; (800455c <UART4_IRQHandler+0xd8>)
 80044de:	701a      	strb	r2, [r3, #0]
			}
			break;
 80044e0:	e033      	b.n	800454a <UART4_IRQHandler+0xc6>
		case 1:
			if (uart4_rx_data == 0x62) {
 80044e2:	4b1c      	ldr	r3, [pc, #112]	; (8004554 <UART4_IRQHandler+0xd0>)
 80044e4:	781b      	ldrb	r3, [r3, #0]
 80044e6:	2b62      	cmp	r3, #98	; 0x62
 80044e8:	d10d      	bne.n	8004506 <UART4_IRQHandler+0x82>
				m8n_rx_buf[cnt] = uart4_rx_data;
 80044ea:	4b1c      	ldr	r3, [pc, #112]	; (800455c <UART4_IRQHandler+0xd8>)
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	461a      	mov	r2, r3
 80044f0:	4b18      	ldr	r3, [pc, #96]	; (8004554 <UART4_IRQHandler+0xd0>)
 80044f2:	7819      	ldrb	r1, [r3, #0]
 80044f4:	4b1a      	ldr	r3, [pc, #104]	; (8004560 <UART4_IRQHandler+0xdc>)
 80044f6:	5499      	strb	r1, [r3, r2]
				cnt++;
 80044f8:	4b18      	ldr	r3, [pc, #96]	; (800455c <UART4_IRQHandler+0xd8>)
 80044fa:	781b      	ldrb	r3, [r3, #0]
 80044fc:	3301      	adds	r3, #1
 80044fe:	b2da      	uxtb	r2, r3
 8004500:	4b16      	ldr	r3, [pc, #88]	; (800455c <UART4_IRQHandler+0xd8>)
 8004502:	701a      	strb	r2, [r3, #0]
			} else {
				cnt = 0;
			}
			break;
 8004504:	e022      	b.n	800454c <UART4_IRQHandler+0xc8>
				cnt = 0;
 8004506:	4b15      	ldr	r3, [pc, #84]	; (800455c <UART4_IRQHandler+0xd8>)
 8004508:	2200      	movs	r2, #0
 800450a:	701a      	strb	r2, [r3, #0]
			break;
 800450c:	e01e      	b.n	800454c <UART4_IRQHandler+0xc8>
		case 35:
			m8n_rx_buf[cnt] = uart4_rx_data;
 800450e:	4b13      	ldr	r3, [pc, #76]	; (800455c <UART4_IRQHandler+0xd8>)
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	461a      	mov	r2, r3
 8004514:	4b0f      	ldr	r3, [pc, #60]	; (8004554 <UART4_IRQHandler+0xd0>)
 8004516:	7819      	ldrb	r1, [r3, #0]
 8004518:	4b11      	ldr	r3, [pc, #68]	; (8004560 <UART4_IRQHandler+0xdc>)
 800451a:	5499      	strb	r1, [r3, r2]
			cnt = 0;
 800451c:	4b0f      	ldr	r3, [pc, #60]	; (800455c <UART4_IRQHandler+0xd8>)
 800451e:	2200      	movs	r2, #0
 8004520:	701a      	strb	r2, [r3, #0]
			m8n_rx_cplt_flag = 1;
 8004522:	4b10      	ldr	r3, [pc, #64]	; (8004564 <UART4_IRQHandler+0xe0>)
 8004524:	2201      	movs	r2, #1
 8004526:	701a      	strb	r2, [r3, #0]
			break;
 8004528:	e010      	b.n	800454c <UART4_IRQHandler+0xc8>
		default:
			m8n_rx_buf[cnt] = uart4_rx_data;
 800452a:	4b0c      	ldr	r3, [pc, #48]	; (800455c <UART4_IRQHandler+0xd8>)
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	461a      	mov	r2, r3
 8004530:	4b08      	ldr	r3, [pc, #32]	; (8004554 <UART4_IRQHandler+0xd0>)
 8004532:	7819      	ldrb	r1, [r3, #0]
 8004534:	4b0a      	ldr	r3, [pc, #40]	; (8004560 <UART4_IRQHandler+0xdc>)
 8004536:	5499      	strb	r1, [r3, r2]
			cnt++;
 8004538:	4b08      	ldr	r3, [pc, #32]	; (800455c <UART4_IRQHandler+0xd8>)
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	3301      	adds	r3, #1
 800453e:	b2da      	uxtb	r2, r3
 8004540:	4b06      	ldr	r3, [pc, #24]	; (800455c <UART4_IRQHandler+0xd8>)
 8004542:	701a      	strb	r2, [r3, #0]
			break;
 8004544:	e002      	b.n	800454c <UART4_IRQHandler+0xc8>
		}
	}
 8004546:	bf00      	nop
 8004548:	e000      	b.n	800454c <UART4_IRQHandler+0xc8>
			break;
 800454a:	bf00      	nop

	/* USER CODE END UART4_IRQn 0 */
	/* USER CODE BEGIN UART4_IRQn 1 */

	/* USER CODE END UART4_IRQn 1 */
}
 800454c:	bf00      	nop
 800454e:	bd80      	pop	{r7, pc}
 8004550:	40004c00 	.word	0x40004c00
 8004554:	2000020f 	.word	0x2000020f
 8004558:	2000020e 	.word	0x2000020e
 800455c:	20000215 	.word	0x20000215
 8004560:	200004f4 	.word	0x200004f4
 8004564:	20000210 	.word	0x20000210

08004568 <UART5_IRQHandler>:

/**
 * @brief This function handles UART5 global interrupt.
 */
void UART5_IRQHandler(void)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UART5_IRQn 0 */
	static unsigned char cnt = 0;

	if (LL_USART_IsActiveFlag_RXNE(UART5)) {
 800456c:	4831      	ldr	r0, [pc, #196]	; (8004634 <UART5_IRQHandler+0xcc>)
 800456e:	f7ff ff22 	bl	80043b6 <LL_USART_IsActiveFlag_RXNE>
 8004572:	4603      	mov	r3, r0
 8004574:	2b00      	cmp	r3, #0
 8004576:	d058      	beq.n	800462a <UART5_IRQHandler+0xc2>
		LL_USART_ClearFlag_RXNE(UART5);
 8004578:	482e      	ldr	r0, [pc, #184]	; (8004634 <UART5_IRQHandler+0xcc>)
 800457a:	f7ff ff2f 	bl	80043dc <LL_USART_ClearFlag_RXNE>
		uart5_rx_data = LL_USART_ReceiveData8(UART5);
 800457e:	482d      	ldr	r0, [pc, #180]	; (8004634 <UART5_IRQHandler+0xcc>)
 8004580:	f7ff ff3a 	bl	80043f8 <LL_USART_ReceiveData8>
 8004584:	4603      	mov	r3, r0
 8004586:	461a      	mov	r2, r3
 8004588:	4b2b      	ldr	r3, [pc, #172]	; (8004638 <UART5_IRQHandler+0xd0>)
 800458a:	701a      	strb	r2, [r3, #0]
		uart5_rx_flag = 1;
 800458c:	4b2b      	ldr	r3, [pc, #172]	; (800463c <UART5_IRQHandler+0xd4>)
 800458e:	2201      	movs	r2, #1
 8004590:	701a      	strb	r2, [r3, #0]

		switch (cnt) {
 8004592:	4b2b      	ldr	r3, [pc, #172]	; (8004640 <UART5_IRQHandler+0xd8>)
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	2b01      	cmp	r3, #1
 8004598:	d015      	beq.n	80045c6 <UART5_IRQHandler+0x5e>
 800459a:	2b1f      	cmp	r3, #31
 800459c:	d029      	beq.n	80045f2 <UART5_IRQHandler+0x8a>
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d135      	bne.n	800460e <UART5_IRQHandler+0xa6>
		case 0:
			if (uart5_rx_data == 0x20) {
 80045a2:	4b25      	ldr	r3, [pc, #148]	; (8004638 <UART5_IRQHandler+0xd0>)
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	2b20      	cmp	r3, #32
 80045a8:	d141      	bne.n	800462e <UART5_IRQHandler+0xc6>
				ibus_rx_buf[cnt] = uart5_rx_data;
 80045aa:	4b25      	ldr	r3, [pc, #148]	; (8004640 <UART5_IRQHandler+0xd8>)
 80045ac:	781b      	ldrb	r3, [r3, #0]
 80045ae:	461a      	mov	r2, r3
 80045b0:	4b21      	ldr	r3, [pc, #132]	; (8004638 <UART5_IRQHandler+0xd0>)
 80045b2:	7819      	ldrb	r1, [r3, #0]
 80045b4:	4b23      	ldr	r3, [pc, #140]	; (8004644 <UART5_IRQHandler+0xdc>)
 80045b6:	5499      	strb	r1, [r3, r2]
				cnt++;
 80045b8:	4b21      	ldr	r3, [pc, #132]	; (8004640 <UART5_IRQHandler+0xd8>)
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	3301      	adds	r3, #1
 80045be:	b2da      	uxtb	r2, r3
 80045c0:	4b1f      	ldr	r3, [pc, #124]	; (8004640 <UART5_IRQHandler+0xd8>)
 80045c2:	701a      	strb	r2, [r3, #0]
			}
			break;
 80045c4:	e033      	b.n	800462e <UART5_IRQHandler+0xc6>
		case 1:
			if (uart5_rx_data == 0x40) {
 80045c6:	4b1c      	ldr	r3, [pc, #112]	; (8004638 <UART5_IRQHandler+0xd0>)
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	2b40      	cmp	r3, #64	; 0x40
 80045cc:	d10d      	bne.n	80045ea <UART5_IRQHandler+0x82>
				ibus_rx_buf[cnt] = uart5_rx_data;
 80045ce:	4b1c      	ldr	r3, [pc, #112]	; (8004640 <UART5_IRQHandler+0xd8>)
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	461a      	mov	r2, r3
 80045d4:	4b18      	ldr	r3, [pc, #96]	; (8004638 <UART5_IRQHandler+0xd0>)
 80045d6:	7819      	ldrb	r1, [r3, #0]
 80045d8:	4b1a      	ldr	r3, [pc, #104]	; (8004644 <UART5_IRQHandler+0xdc>)
 80045da:	5499      	strb	r1, [r3, r2]
				cnt++;
 80045dc:	4b18      	ldr	r3, [pc, #96]	; (8004640 <UART5_IRQHandler+0xd8>)
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	3301      	adds	r3, #1
 80045e2:	b2da      	uxtb	r2, r3
 80045e4:	4b16      	ldr	r3, [pc, #88]	; (8004640 <UART5_IRQHandler+0xd8>)
 80045e6:	701a      	strb	r2, [r3, #0]
			} else {
				cnt = 0;
			}
			break;
 80045e8:	e022      	b.n	8004630 <UART5_IRQHandler+0xc8>
				cnt = 0;
 80045ea:	4b15      	ldr	r3, [pc, #84]	; (8004640 <UART5_IRQHandler+0xd8>)
 80045ec:	2200      	movs	r2, #0
 80045ee:	701a      	strb	r2, [r3, #0]
			break;
 80045f0:	e01e      	b.n	8004630 <UART5_IRQHandler+0xc8>
		case 31:
			ibus_rx_buf[cnt] = uart5_rx_data;
 80045f2:	4b13      	ldr	r3, [pc, #76]	; (8004640 <UART5_IRQHandler+0xd8>)
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	461a      	mov	r2, r3
 80045f8:	4b0f      	ldr	r3, [pc, #60]	; (8004638 <UART5_IRQHandler+0xd0>)
 80045fa:	7819      	ldrb	r1, [r3, #0]
 80045fc:	4b11      	ldr	r3, [pc, #68]	; (8004644 <UART5_IRQHandler+0xdc>)
 80045fe:	5499      	strb	r1, [r3, r2]
			cnt = 0;
 8004600:	4b0f      	ldr	r3, [pc, #60]	; (8004640 <UART5_IRQHandler+0xd8>)
 8004602:	2200      	movs	r2, #0
 8004604:	701a      	strb	r2, [r3, #0]
			ibus_rx_cplt_flag = 1;
 8004606:	4b10      	ldr	r3, [pc, #64]	; (8004648 <UART5_IRQHandler+0xe0>)
 8004608:	2201      	movs	r2, #1
 800460a:	701a      	strb	r2, [r3, #0]
			break;
 800460c:	e010      	b.n	8004630 <UART5_IRQHandler+0xc8>
		default:
			ibus_rx_buf[cnt] = uart5_rx_data;
 800460e:	4b0c      	ldr	r3, [pc, #48]	; (8004640 <UART5_IRQHandler+0xd8>)
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	461a      	mov	r2, r3
 8004614:	4b08      	ldr	r3, [pc, #32]	; (8004638 <UART5_IRQHandler+0xd0>)
 8004616:	7819      	ldrb	r1, [r3, #0]
 8004618:	4b0a      	ldr	r3, [pc, #40]	; (8004644 <UART5_IRQHandler+0xdc>)
 800461a:	5499      	strb	r1, [r3, r2]
			cnt++;
 800461c:	4b08      	ldr	r3, [pc, #32]	; (8004640 <UART5_IRQHandler+0xd8>)
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	3301      	adds	r3, #1
 8004622:	b2da      	uxtb	r2, r3
 8004624:	4b06      	ldr	r3, [pc, #24]	; (8004640 <UART5_IRQHandler+0xd8>)
 8004626:	701a      	strb	r2, [r3, #0]
			break;
 8004628:	e002      	b.n	8004630 <UART5_IRQHandler+0xc8>
		}

		//		while(!LL_USART_IsActiveFlag_TXE(USART6));
		//		LL_USART_TransmitData8(USART6, uart5_rx_data);
	}
 800462a:	bf00      	nop
 800462c:	e000      	b.n	8004630 <UART5_IRQHandler+0xc8>
			break;
 800462e:	bf00      	nop
	/* USER CODE END UART5_IRQn 0 */
	/* USER CODE BEGIN UART5_IRQn 1 */

	/* USER CODE END UART5_IRQn 1 */
}
 8004630:	bf00      	nop
 8004632:	bd80      	pop	{r7, pc}
 8004634:	40005000 	.word	0x40005000
 8004638:	2000020d 	.word	0x2000020d
 800463c:	2000020c 	.word	0x2000020c
 8004640:	20000216 	.word	0x20000216
 8004644:	200004d4 	.word	0x200004d4
 8004648:	20000211 	.word	0x20000211

0800464c <TIM7_IRQHandler>:

/**
 * @brief This function handles TIM7 global interrupt.
 */
void TIM7_IRQHandler(void)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM7_IRQn 0 */
	//1ms period
	static unsigned char tim7_20ms_count = 0;
	static unsigned char tim7_100ms_count = 0;

	if(LL_TIM_IsActiveFlag_UPDATE(TIM7)) {
 8004650:	4815      	ldr	r0, [pc, #84]	; (80046a8 <TIM7_IRQHandler+0x5c>)
 8004652:	f7ff fe9d 	bl	8004390 <LL_TIM_IsActiveFlag_UPDATE>
 8004656:	4603      	mov	r3, r0
 8004658:	2b00      	cmp	r3, #0
 800465a:	d022      	beq.n	80046a2 <TIM7_IRQHandler+0x56>
		LL_TIM_ClearFlag_UPDATE(TIM7); //Clear flag of TM7
 800465c:	4812      	ldr	r0, [pc, #72]	; (80046a8 <TIM7_IRQHandler+0x5c>)
 800465e:	f7ff fe89 	bl	8004374 <LL_TIM_ClearFlag_UPDATE>

		//20ms - 50Hz Transmission
		tim7_20ms_count++;
 8004662:	4b12      	ldr	r3, [pc, #72]	; (80046ac <TIM7_IRQHandler+0x60>)
 8004664:	781b      	ldrb	r3, [r3, #0]
 8004666:	3301      	adds	r3, #1
 8004668:	b2da      	uxtb	r2, r3
 800466a:	4b10      	ldr	r3, [pc, #64]	; (80046ac <TIM7_IRQHandler+0x60>)
 800466c:	701a      	strb	r2, [r3, #0]
		if (tim7_20ms_count == 20) {
 800466e:	4b0f      	ldr	r3, [pc, #60]	; (80046ac <TIM7_IRQHandler+0x60>)
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	2b14      	cmp	r3, #20
 8004674:	d105      	bne.n	8004682 <TIM7_IRQHandler+0x36>
			tim7_20ms_count = 0;
 8004676:	4b0d      	ldr	r3, [pc, #52]	; (80046ac <TIM7_IRQHandler+0x60>)
 8004678:	2200      	movs	r2, #0
 800467a:	701a      	strb	r2, [r3, #0]
			tim7_20ms_flag = 1;
 800467c:	4b0c      	ldr	r3, [pc, #48]	; (80046b0 <TIM7_IRQHandler+0x64>)
 800467e:	2201      	movs	r2, #1
 8004680:	701a      	strb	r2, [r3, #0]
		}
		//100ms - 10Hz Transmission
		tim7_100ms_count++;
 8004682:	4b0c      	ldr	r3, [pc, #48]	; (80046b4 <TIM7_IRQHandler+0x68>)
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	3301      	adds	r3, #1
 8004688:	b2da      	uxtb	r2, r3
 800468a:	4b0a      	ldr	r3, [pc, #40]	; (80046b4 <TIM7_IRQHandler+0x68>)
 800468c:	701a      	strb	r2, [r3, #0]
		if (tim7_100ms_count == 100) {
 800468e:	4b09      	ldr	r3, [pc, #36]	; (80046b4 <TIM7_IRQHandler+0x68>)
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	2b64      	cmp	r3, #100	; 0x64
 8004694:	d105      	bne.n	80046a2 <TIM7_IRQHandler+0x56>
			tim7_100ms_count = 0;
 8004696:	4b07      	ldr	r3, [pc, #28]	; (80046b4 <TIM7_IRQHandler+0x68>)
 8004698:	2200      	movs	r2, #0
 800469a:	701a      	strb	r2, [r3, #0]
			tim7_100ms_flag = 1;
 800469c:	4b06      	ldr	r3, [pc, #24]	; (80046b8 <TIM7_IRQHandler+0x6c>)
 800469e:	2201      	movs	r2, #1
 80046a0:	701a      	strb	r2, [r3, #0]

	/* USER CODE END TIM7_IRQn 0 */
	/* USER CODE BEGIN TIM7_IRQn 1 */

	/* USER CODE END TIM7_IRQn 1 */
}
 80046a2:	bf00      	nop
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	40001400 	.word	0x40001400
 80046ac:	20000217 	.word	0x20000217
 80046b0:	20000213 	.word	0x20000213
 80046b4:	20000218 	.word	0x20000218
 80046b8:	20000214 	.word	0x20000214

080046bc <DMA2_Stream0_IRQHandler>:

/**
 * @brief This function handles DMA2 stream0 global interrupt.
 */
void DMA2_Stream0_IRQHandler(void)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

	/* USER CODE END DMA2_Stream0_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_adc1);
 80046c0:	4802      	ldr	r0, [pc, #8]	; (80046cc <DMA2_Stream0_IRQHandler+0x10>)
 80046c2:	f001 fd2b 	bl	800611c <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

	/* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80046c6:	bf00      	nop
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop
 80046cc:	200003f4 	.word	0x200003f4

080046d0 <USART6_IRQHandler>:

/**
 * @brief This function handles USART6 global interrupt.
 */
void USART6_IRQHandler(void)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART6_IRQn 0 */
	if (LL_USART_IsActiveFlag_RXNE(USART6)) {
 80046d4:	480a      	ldr	r0, [pc, #40]	; (8004700 <USART6_IRQHandler+0x30>)
 80046d6:	f7ff fe6e 	bl	80043b6 <LL_USART_IsActiveFlag_RXNE>
 80046da:	4603      	mov	r3, r0
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d00c      	beq.n	80046fa <USART6_IRQHandler+0x2a>
		LL_USART_ClearFlag_RXNE(USART6);
 80046e0:	4807      	ldr	r0, [pc, #28]	; (8004700 <USART6_IRQHandler+0x30>)
 80046e2:	f7ff fe7b 	bl	80043dc <LL_USART_ClearFlag_RXNE>
		uart6_rx_data = LL_USART_ReceiveData8(USART6);
 80046e6:	4806      	ldr	r0, [pc, #24]	; (8004700 <USART6_IRQHandler+0x30>)
 80046e8:	f7ff fe86 	bl	80043f8 <LL_USART_ReceiveData8>
 80046ec:	4603      	mov	r3, r0
 80046ee:	461a      	mov	r2, r3
 80046f0:	4b04      	ldr	r3, [pc, #16]	; (8004704 <USART6_IRQHandler+0x34>)
 80046f2:	701a      	strb	r2, [r3, #0]
		uart6_rx_flag = 1;
 80046f4:	4b04      	ldr	r3, [pc, #16]	; (8004708 <USART6_IRQHandler+0x38>)
 80046f6:	2201      	movs	r2, #1
 80046f8:	701a      	strb	r2, [r3, #0]

	/* USER CODE END USART6_IRQn 0 */
	/* USER CODE BEGIN USART6_IRQn 1 */

	/* USER CODE END USART6_IRQn 1 */
}
 80046fa:	bf00      	nop
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	40011400 	.word	0x40011400
 8004704:	2000020b 	.word	0x2000020b
 8004708:	2000020a 	.word	0x2000020a

0800470c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b086      	sub	sp, #24
 8004710:	af00      	add	r7, sp, #0
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	60b9      	str	r1, [r7, #8]
 8004716:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004718:	2300      	movs	r3, #0
 800471a:	617b      	str	r3, [r7, #20]
 800471c:	e00a      	b.n	8004734 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800471e:	f3af 8000 	nop.w
 8004722:	4601      	mov	r1, r0
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	1c5a      	adds	r2, r3, #1
 8004728:	60ba      	str	r2, [r7, #8]
 800472a:	b2ca      	uxtb	r2, r1
 800472c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	3301      	adds	r3, #1
 8004732:	617b      	str	r3, [r7, #20]
 8004734:	697a      	ldr	r2, [r7, #20]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	429a      	cmp	r2, r3
 800473a:	dbf0      	blt.n	800471e <_read+0x12>
	}

return len;
 800473c:	687b      	ldr	r3, [r7, #4]
}
 800473e:	4618      	mov	r0, r3
 8004740:	3718      	adds	r7, #24
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}

08004746 <_close>:
	}
	return len;
}

int _close(int file)
{
 8004746:	b480      	push	{r7}
 8004748:	b083      	sub	sp, #12
 800474a:	af00      	add	r7, sp, #0
 800474c:	6078      	str	r0, [r7, #4]
	return -1;
 800474e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004752:	4618      	mov	r0, r3
 8004754:	370c      	adds	r7, #12
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr

0800475e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800475e:	b480      	push	{r7}
 8004760:	b083      	sub	sp, #12
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
 8004766:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800476e:	605a      	str	r2, [r3, #4]
	return 0;
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	370c      	adds	r7, #12
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr

0800477e <_isatty>:

int _isatty(int file)
{
 800477e:	b480      	push	{r7}
 8004780:	b083      	sub	sp, #12
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
	return 1;
 8004786:	2301      	movs	r3, #1
}
 8004788:	4618      	mov	r0, r3
 800478a:	370c      	adds	r7, #12
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004794:	b480      	push	{r7}
 8004796:	b085      	sub	sp, #20
 8004798:	af00      	add	r7, sp, #0
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	60b9      	str	r1, [r7, #8]
 800479e:	607a      	str	r2, [r7, #4]
	return 0;
 80047a0:	2300      	movs	r3, #0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3714      	adds	r7, #20
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr
	...

080047b0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80047b8:	4b11      	ldr	r3, [pc, #68]	; (8004800 <_sbrk+0x50>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d102      	bne.n	80047c6 <_sbrk+0x16>
		heap_end = &end;
 80047c0:	4b0f      	ldr	r3, [pc, #60]	; (8004800 <_sbrk+0x50>)
 80047c2:	4a10      	ldr	r2, [pc, #64]	; (8004804 <_sbrk+0x54>)
 80047c4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80047c6:	4b0e      	ldr	r3, [pc, #56]	; (8004800 <_sbrk+0x50>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80047cc:	4b0c      	ldr	r3, [pc, #48]	; (8004800 <_sbrk+0x50>)
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	4413      	add	r3, r2
 80047d4:	466a      	mov	r2, sp
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d907      	bls.n	80047ea <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80047da:	f005 facf 	bl	8009d7c <__errno>
 80047de:	4602      	mov	r2, r0
 80047e0:	230c      	movs	r3, #12
 80047e2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80047e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80047e8:	e006      	b.n	80047f8 <_sbrk+0x48>
	}

	heap_end += incr;
 80047ea:	4b05      	ldr	r3, [pc, #20]	; (8004800 <_sbrk+0x50>)
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4413      	add	r3, r2
 80047f2:	4a03      	ldr	r2, [pc, #12]	; (8004800 <_sbrk+0x50>)
 80047f4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80047f6:	68fb      	ldr	r3, [r7, #12]
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3710      	adds	r7, #16
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}
 8004800:	2000021c 	.word	0x2000021c
 8004804:	20000560 	.word	0x20000560

08004808 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004808:	b480      	push	{r7}
 800480a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800480c:	4b08      	ldr	r3, [pc, #32]	; (8004830 <SystemInit+0x28>)
 800480e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004812:	4a07      	ldr	r2, [pc, #28]	; (8004830 <SystemInit+0x28>)
 8004814:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004818:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800481c:	4b04      	ldr	r3, [pc, #16]	; (8004830 <SystemInit+0x28>)
 800481e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004822:	609a      	str	r2, [r3, #8]
#endif
}
 8004824:	bf00      	nop
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr
 800482e:	bf00      	nop
 8004830:	e000ed00 	.word	0xe000ed00

08004834 <__NVIC_GetPriorityGrouping>:
{
 8004834:	b480      	push	{r7}
 8004836:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004838:	4b04      	ldr	r3, [pc, #16]	; (800484c <__NVIC_GetPriorityGrouping+0x18>)
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	0a1b      	lsrs	r3, r3, #8
 800483e:	f003 0307 	and.w	r3, r3, #7
}
 8004842:	4618      	mov	r0, r3
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr
 800484c:	e000ed00 	.word	0xe000ed00

08004850 <__NVIC_EnableIRQ>:
{
 8004850:	b480      	push	{r7}
 8004852:	b083      	sub	sp, #12
 8004854:	af00      	add	r7, sp, #0
 8004856:	4603      	mov	r3, r0
 8004858:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800485a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800485e:	2b00      	cmp	r3, #0
 8004860:	db0b      	blt.n	800487a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004862:	79fb      	ldrb	r3, [r7, #7]
 8004864:	f003 021f 	and.w	r2, r3, #31
 8004868:	4907      	ldr	r1, [pc, #28]	; (8004888 <__NVIC_EnableIRQ+0x38>)
 800486a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800486e:	095b      	lsrs	r3, r3, #5
 8004870:	2001      	movs	r0, #1
 8004872:	fa00 f202 	lsl.w	r2, r0, r2
 8004876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800487a:	bf00      	nop
 800487c:	370c      	adds	r7, #12
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr
 8004886:	bf00      	nop
 8004888:	e000e100 	.word	0xe000e100

0800488c <__NVIC_SetPriority>:
{
 800488c:	b480      	push	{r7}
 800488e:	b083      	sub	sp, #12
 8004890:	af00      	add	r7, sp, #0
 8004892:	4603      	mov	r3, r0
 8004894:	6039      	str	r1, [r7, #0]
 8004896:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800489c:	2b00      	cmp	r3, #0
 800489e:	db0a      	blt.n	80048b6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	b2da      	uxtb	r2, r3
 80048a4:	490c      	ldr	r1, [pc, #48]	; (80048d8 <__NVIC_SetPriority+0x4c>)
 80048a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048aa:	0112      	lsls	r2, r2, #4
 80048ac:	b2d2      	uxtb	r2, r2
 80048ae:	440b      	add	r3, r1
 80048b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80048b4:	e00a      	b.n	80048cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	b2da      	uxtb	r2, r3
 80048ba:	4908      	ldr	r1, [pc, #32]	; (80048dc <__NVIC_SetPriority+0x50>)
 80048bc:	79fb      	ldrb	r3, [r7, #7]
 80048be:	f003 030f 	and.w	r3, r3, #15
 80048c2:	3b04      	subs	r3, #4
 80048c4:	0112      	lsls	r2, r2, #4
 80048c6:	b2d2      	uxtb	r2, r2
 80048c8:	440b      	add	r3, r1
 80048ca:	761a      	strb	r2, [r3, #24]
}
 80048cc:	bf00      	nop
 80048ce:	370c      	adds	r7, #12
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr
 80048d8:	e000e100 	.word	0xe000e100
 80048dc:	e000ed00 	.word	0xe000ed00

080048e0 <NVIC_EncodePriority>:
{
 80048e0:	b480      	push	{r7}
 80048e2:	b089      	sub	sp, #36	; 0x24
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f003 0307 	and.w	r3, r3, #7
 80048f2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80048f4:	69fb      	ldr	r3, [r7, #28]
 80048f6:	f1c3 0307 	rsb	r3, r3, #7
 80048fa:	2b04      	cmp	r3, #4
 80048fc:	bf28      	it	cs
 80048fe:	2304      	movcs	r3, #4
 8004900:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	3304      	adds	r3, #4
 8004906:	2b06      	cmp	r3, #6
 8004908:	d902      	bls.n	8004910 <NVIC_EncodePriority+0x30>
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	3b03      	subs	r3, #3
 800490e:	e000      	b.n	8004912 <NVIC_EncodePriority+0x32>
 8004910:	2300      	movs	r3, #0
 8004912:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004914:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	fa02 f303 	lsl.w	r3, r2, r3
 800491e:	43da      	mvns	r2, r3
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	401a      	ands	r2, r3
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004928:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	fa01 f303 	lsl.w	r3, r1, r3
 8004932:	43d9      	mvns	r1, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004938:	4313      	orrs	r3, r2
}
 800493a:	4618      	mov	r0, r3
 800493c:	3724      	adds	r7, #36	; 0x24
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr

08004946 <LL_TIM_EnableARRPreload>:
{
 8004946:	b480      	push	{r7}
 8004948:	b083      	sub	sp, #12
 800494a:	af00      	add	r7, sp, #0
 800494c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	601a      	str	r2, [r3, #0]
}
 800495a:	bf00      	nop
 800495c:	370c      	adds	r7, #12
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr
	...

08004968 <LL_TIM_OC_EnableFast>:
{
 8004968:	b4b0      	push	{r4, r5, r7}
 800496a:	b083      	sub	sp, #12
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	2b01      	cmp	r3, #1
 8004976:	d01c      	beq.n	80049b2 <LL_TIM_OC_EnableFast+0x4a>
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	2b04      	cmp	r3, #4
 800497c:	d017      	beq.n	80049ae <LL_TIM_OC_EnableFast+0x46>
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	2b10      	cmp	r3, #16
 8004982:	d012      	beq.n	80049aa <LL_TIM_OC_EnableFast+0x42>
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	2b40      	cmp	r3, #64	; 0x40
 8004988:	d00d      	beq.n	80049a6 <LL_TIM_OC_EnableFast+0x3e>
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004990:	d007      	beq.n	80049a2 <LL_TIM_OC_EnableFast+0x3a>
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004998:	d101      	bne.n	800499e <LL_TIM_OC_EnableFast+0x36>
 800499a:	2305      	movs	r3, #5
 800499c:	e00a      	b.n	80049b4 <LL_TIM_OC_EnableFast+0x4c>
 800499e:	2306      	movs	r3, #6
 80049a0:	e008      	b.n	80049b4 <LL_TIM_OC_EnableFast+0x4c>
 80049a2:	2304      	movs	r3, #4
 80049a4:	e006      	b.n	80049b4 <LL_TIM_OC_EnableFast+0x4c>
 80049a6:	2303      	movs	r3, #3
 80049a8:	e004      	b.n	80049b4 <LL_TIM_OC_EnableFast+0x4c>
 80049aa:	2302      	movs	r3, #2
 80049ac:	e002      	b.n	80049b4 <LL_TIM_OC_EnableFast+0x4c>
 80049ae:	2301      	movs	r3, #1
 80049b0:	e000      	b.n	80049b4 <LL_TIM_OC_EnableFast+0x4c>
 80049b2:	2300      	movs	r3, #0
 80049b4:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	3318      	adds	r3, #24
 80049ba:	461a      	mov	r2, r3
 80049bc:	4629      	mov	r1, r5
 80049be:	4b09      	ldr	r3, [pc, #36]	; (80049e4 <LL_TIM_OC_EnableFast+0x7c>)
 80049c0:	5c5b      	ldrb	r3, [r3, r1]
 80049c2:	4413      	add	r3, r2
 80049c4:	461c      	mov	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80049c6:	6822      	ldr	r2, [r4, #0]
 80049c8:	4629      	mov	r1, r5
 80049ca:	4b07      	ldr	r3, [pc, #28]	; (80049e8 <LL_TIM_OC_EnableFast+0x80>)
 80049cc:	5c5b      	ldrb	r3, [r3, r1]
 80049ce:	4619      	mov	r1, r3
 80049d0:	2304      	movs	r3, #4
 80049d2:	408b      	lsls	r3, r1
 80049d4:	4313      	orrs	r3, r2
 80049d6:	6023      	str	r3, [r4, #0]
}
 80049d8:	bf00      	nop
 80049da:	370c      	adds	r7, #12
 80049dc:	46bd      	mov	sp, r7
 80049de:	bcb0      	pop	{r4, r5, r7}
 80049e0:	4770      	bx	lr
 80049e2:	bf00      	nop
 80049e4:	0800d7e4 	.word	0x0800d7e4
 80049e8:	0800d7ec 	.word	0x0800d7ec

080049ec <LL_TIM_OC_EnablePreload>:
{
 80049ec:	b4b0      	push	{r4, r5, r7}
 80049ee:	b083      	sub	sp, #12
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d01c      	beq.n	8004a36 <LL_TIM_OC_EnablePreload+0x4a>
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	2b04      	cmp	r3, #4
 8004a00:	d017      	beq.n	8004a32 <LL_TIM_OC_EnablePreload+0x46>
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	2b10      	cmp	r3, #16
 8004a06:	d012      	beq.n	8004a2e <LL_TIM_OC_EnablePreload+0x42>
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	2b40      	cmp	r3, #64	; 0x40
 8004a0c:	d00d      	beq.n	8004a2a <LL_TIM_OC_EnablePreload+0x3e>
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a14:	d007      	beq.n	8004a26 <LL_TIM_OC_EnablePreload+0x3a>
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a1c:	d101      	bne.n	8004a22 <LL_TIM_OC_EnablePreload+0x36>
 8004a1e:	2305      	movs	r3, #5
 8004a20:	e00a      	b.n	8004a38 <LL_TIM_OC_EnablePreload+0x4c>
 8004a22:	2306      	movs	r3, #6
 8004a24:	e008      	b.n	8004a38 <LL_TIM_OC_EnablePreload+0x4c>
 8004a26:	2304      	movs	r3, #4
 8004a28:	e006      	b.n	8004a38 <LL_TIM_OC_EnablePreload+0x4c>
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e004      	b.n	8004a38 <LL_TIM_OC_EnablePreload+0x4c>
 8004a2e:	2302      	movs	r3, #2
 8004a30:	e002      	b.n	8004a38 <LL_TIM_OC_EnablePreload+0x4c>
 8004a32:	2301      	movs	r3, #1
 8004a34:	e000      	b.n	8004a38 <LL_TIM_OC_EnablePreload+0x4c>
 8004a36:	2300      	movs	r3, #0
 8004a38:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	3318      	adds	r3, #24
 8004a3e:	461a      	mov	r2, r3
 8004a40:	4629      	mov	r1, r5
 8004a42:	4b09      	ldr	r3, [pc, #36]	; (8004a68 <LL_TIM_OC_EnablePreload+0x7c>)
 8004a44:	5c5b      	ldrb	r3, [r3, r1]
 8004a46:	4413      	add	r3, r2
 8004a48:	461c      	mov	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8004a4a:	6822      	ldr	r2, [r4, #0]
 8004a4c:	4629      	mov	r1, r5
 8004a4e:	4b07      	ldr	r3, [pc, #28]	; (8004a6c <LL_TIM_OC_EnablePreload+0x80>)
 8004a50:	5c5b      	ldrb	r3, [r3, r1]
 8004a52:	4619      	mov	r1, r3
 8004a54:	2308      	movs	r3, #8
 8004a56:	408b      	lsls	r3, r1
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	6023      	str	r3, [r4, #0]
}
 8004a5c:	bf00      	nop
 8004a5e:	370c      	adds	r7, #12
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bcb0      	pop	{r4, r5, r7}
 8004a64:	4770      	bx	lr
 8004a66:	bf00      	nop
 8004a68:	0800d7e4 	.word	0x0800d7e4
 8004a6c:	0800d7ec 	.word	0x0800d7ec

08004a70 <LL_TIM_SetClockSource>:
{
 8004a70:	b480      	push	{r7}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a82:	f023 0307 	bic.w	r3, r3, #7
 8004a86:	683a      	ldr	r2, [r7, #0]
 8004a88:	431a      	orrs	r2, r3
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	609a      	str	r2, [r3, #8]
}
 8004a8e:	bf00      	nop
 8004a90:	370c      	adds	r7, #12
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr

08004a9a <LL_TIM_SetTriggerOutput>:
{
 8004a9a:	b480      	push	{r7}
 8004a9c:	b083      	sub	sp, #12
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
 8004aa2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	431a      	orrs	r2, r3
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	605a      	str	r2, [r3, #4]
}
 8004ab4:	bf00      	nop
 8004ab6:	370c      	adds	r7, #12
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr

08004ac0 <LL_TIM_DisableMasterSlaveMode>:
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	609a      	str	r2, [r3, #8]
}
 8004ad4:	bf00      	nop
 8004ad6:	370c      	adds	r7, #12
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr

08004ae0 <LL_AHB1_GRP1_EnableClock>:
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b085      	sub	sp, #20
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8004ae8:	4b08      	ldr	r3, [pc, #32]	; (8004b0c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004aea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004aec:	4907      	ldr	r1, [pc, #28]	; (8004b0c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8004af4:	4b05      	ldr	r3, [pc, #20]	; (8004b0c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004af6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	4013      	ands	r3, r2
 8004afc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004afe:	68fb      	ldr	r3, [r7, #12]
}
 8004b00:	bf00      	nop
 8004b02:	3714      	adds	r7, #20
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr
 8004b0c:	40023800 	.word	0x40023800

08004b10 <LL_APB1_GRP1_EnableClock>:
{
 8004b10:	b480      	push	{r7}
 8004b12:	b085      	sub	sp, #20
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8004b18:	4b08      	ldr	r3, [pc, #32]	; (8004b3c <LL_APB1_GRP1_EnableClock+0x2c>)
 8004b1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b1c:	4907      	ldr	r1, [pc, #28]	; (8004b3c <LL_APB1_GRP1_EnableClock+0x2c>)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4313      	orrs	r3, r2
 8004b22:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8004b24:	4b05      	ldr	r3, [pc, #20]	; (8004b3c <LL_APB1_GRP1_EnableClock+0x2c>)
 8004b26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
}
 8004b30:	bf00      	nop
 8004b32:	3714      	adds	r7, #20
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr
 8004b3c:	40023800 	.word	0x40023800

08004b40 <MX_TIM3_Init>:

/* USER CODE END 0 */

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b094      	sub	sp, #80	; 0x50
 8004b44:	af00      	add	r7, sp, #0
	LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8004b46:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	601a      	str	r2, [r3, #0]
 8004b4e:	605a      	str	r2, [r3, #4]
 8004b50:	609a      	str	r2, [r3, #8]
 8004b52:	60da      	str	r2, [r3, #12]
 8004b54:	611a      	str	r2, [r3, #16]
	LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8004b56:	f107 031c 	add.w	r3, r7, #28
 8004b5a:	2220      	movs	r2, #32
 8004b5c:	2100      	movs	r1, #0
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f005 f936 	bl	8009dd0 <memset>

	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b64:	1d3b      	adds	r3, r7, #4
 8004b66:	2200      	movs	r2, #0
 8004b68:	601a      	str	r2, [r3, #0]
 8004b6a:	605a      	str	r2, [r3, #4]
 8004b6c:	609a      	str	r2, [r3, #8]
 8004b6e:	60da      	str	r2, [r3, #12]
 8004b70:	611a      	str	r2, [r3, #16]
 8004b72:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8004b74:	2002      	movs	r0, #2
 8004b76:	f7ff ffcb 	bl	8004b10 <LL_APB1_GRP1_EnableClock>

	TIM_InitStruct.Prescaler = 999;
 8004b7a:	f240 33e7 	movw	r3, #999	; 0x3e7
 8004b7e:	87bb      	strh	r3, [r7, #60]	; 0x3c
	TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8004b80:	2300      	movs	r3, #0
 8004b82:	643b      	str	r3, [r7, #64]	; 0x40
	TIM_InitStruct.Autoreload = 20;
 8004b84:	2314      	movs	r3, #20
 8004b86:	647b      	str	r3, [r7, #68]	; 0x44
	TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	64bb      	str	r3, [r7, #72]	; 0x48
	LL_TIM_Init(TIM3, &TIM_InitStruct);
 8004b8c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004b90:	4619      	mov	r1, r3
 8004b92:	4820      	ldr	r0, [pc, #128]	; (8004c14 <MX_TIM3_Init+0xd4>)
 8004b94:	f004 fc1a 	bl	80093cc <LL_TIM_Init>
	LL_TIM_EnableARRPreload(TIM3);
 8004b98:	481e      	ldr	r0, [pc, #120]	; (8004c14 <MX_TIM3_Init+0xd4>)
 8004b9a:	f7ff fed4 	bl	8004946 <LL_TIM_EnableARRPreload>
	LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH4);
 8004b9e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004ba2:	481c      	ldr	r0, [pc, #112]	; (8004c14 <MX_TIM3_Init+0xd4>)
 8004ba4:	f7ff ff22 	bl	80049ec <LL_TIM_OC_EnablePreload>
	TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8004ba8:	2360      	movs	r3, #96	; 0x60
 8004baa:	61fb      	str	r3, [r7, #28]
	TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8004bac:	2300      	movs	r3, #0
 8004bae:	623b      	str	r3, [r7, #32]
	TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	627b      	str	r3, [r7, #36]	; 0x24
	TIM_OC_InitStruct.CompareValue = 10;
 8004bb4:	230a      	movs	r3, #10
 8004bb6:	62bb      	str	r3, [r7, #40]	; 0x28
	TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	62fb      	str	r3, [r7, #44]	; 0x2c
	LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8004bbc:	f107 031c 	add.w	r3, r7, #28
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004bc6:	4813      	ldr	r0, [pc, #76]	; (8004c14 <MX_TIM3_Init+0xd4>)
 8004bc8:	f004 fc9a 	bl	8009500 <LL_TIM_OC_Init>
	LL_TIM_OC_EnableFast(TIM3, LL_TIM_CHANNEL_CH4);
 8004bcc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004bd0:	4810      	ldr	r0, [pc, #64]	; (8004c14 <MX_TIM3_Init+0xd4>)
 8004bd2:	f7ff fec9 	bl	8004968 <LL_TIM_OC_EnableFast>
	LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8004bd6:	2100      	movs	r1, #0
 8004bd8:	480e      	ldr	r0, [pc, #56]	; (8004c14 <MX_TIM3_Init+0xd4>)
 8004bda:	f7ff ff5e 	bl	8004a9a <LL_TIM_SetTriggerOutput>
	LL_TIM_DisableMasterSlaveMode(TIM3);
 8004bde:	480d      	ldr	r0, [pc, #52]	; (8004c14 <MX_TIM3_Init+0xd4>)
 8004be0:	f7ff ff6e 	bl	8004ac0 <LL_TIM_DisableMasterSlaveMode>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8004be4:	2002      	movs	r0, #2
 8004be6:	f7ff ff7b 	bl	8004ae0 <LL_AHB1_GRP1_EnableClock>
	/**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4 
	 */
	GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8004bea:	2302      	movs	r3, #2
 8004bec:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004bee:	2302      	movs	r3, #2
 8004bf0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8004bfe:	2302      	movs	r3, #2
 8004c00:	61bb      	str	r3, [r7, #24]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c02:	1d3b      	adds	r3, r7, #4
 8004c04:	4619      	mov	r1, r3
 8004c06:	4804      	ldr	r0, [pc, #16]	; (8004c18 <MX_TIM3_Init+0xd8>)
 8004c08:	f004 f94d 	bl	8008ea6 <LL_GPIO_Init>

}
 8004c0c:	bf00      	nop
 8004c0e:	3750      	adds	r7, #80	; 0x50
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}
 8004c14:	40000400 	.word	0x40000400
 8004c18:	40020400 	.word	0x40020400

08004c1c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b094      	sub	sp, #80	; 0x50
 8004c20:	af00      	add	r7, sp, #0
	LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8004c22:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004c26:	2200      	movs	r2, #0
 8004c28:	601a      	str	r2, [r3, #0]
 8004c2a:	605a      	str	r2, [r3, #4]
 8004c2c:	609a      	str	r2, [r3, #8]
 8004c2e:	60da      	str	r2, [r3, #12]
 8004c30:	611a      	str	r2, [r3, #16]
	LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8004c32:	f107 031c 	add.w	r3, r7, #28
 8004c36:	2220      	movs	r2, #32
 8004c38:	2100      	movs	r1, #0
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f005 f8c8 	bl	8009dd0 <memset>

	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c40:	1d3b      	adds	r3, r7, #4
 8004c42:	2200      	movs	r2, #0
 8004c44:	601a      	str	r2, [r3, #0]
 8004c46:	605a      	str	r2, [r3, #4]
 8004c48:	609a      	str	r2, [r3, #8]
 8004c4a:	60da      	str	r2, [r3, #12]
 8004c4c:	611a      	str	r2, [r3, #16]
 8004c4e:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM5);
 8004c50:	2008      	movs	r0, #8
 8004c52:	f7ff ff5d 	bl	8004b10 <LL_APB1_GRP1_EnableClock>

	TIM_InitStruct.Prescaler = 0;
 8004c56:	2300      	movs	r3, #0
 8004c58:	87bb      	strh	r3, [r7, #60]	; 0x3c
	TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	643b      	str	r3, [r7, #64]	; 0x40
	TIM_InitStruct.Autoreload = 41999;
 8004c5e:	f24a 430f 	movw	r3, #41999	; 0xa40f
 8004c62:	647b      	str	r3, [r7, #68]	; 0x44
	TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8004c64:	2300      	movs	r3, #0
 8004c66:	64bb      	str	r3, [r7, #72]	; 0x48
	LL_TIM_Init(TIM5, &TIM_InitStruct);
 8004c68:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004c6c:	4619      	mov	r1, r3
 8004c6e:	4840      	ldr	r0, [pc, #256]	; (8004d70 <MX_TIM5_Init+0x154>)
 8004c70:	f004 fbac 	bl	80093cc <LL_TIM_Init>
	LL_TIM_EnableARRPreload(TIM5);
 8004c74:	483e      	ldr	r0, [pc, #248]	; (8004d70 <MX_TIM5_Init+0x154>)
 8004c76:	f7ff fe66 	bl	8004946 <LL_TIM_EnableARRPreload>
	LL_TIM_SetClockSource(TIM5, LL_TIM_CLOCKSOURCE_INTERNAL);
 8004c7a:	2100      	movs	r1, #0
 8004c7c:	483c      	ldr	r0, [pc, #240]	; (8004d70 <MX_TIM5_Init+0x154>)
 8004c7e:	f7ff fef7 	bl	8004a70 <LL_TIM_SetClockSource>
	LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH1);
 8004c82:	2101      	movs	r1, #1
 8004c84:	483a      	ldr	r0, [pc, #232]	; (8004d70 <MX_TIM5_Init+0x154>)
 8004c86:	f7ff feb1 	bl	80049ec <LL_TIM_OC_EnablePreload>
	TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8004c8a:	2360      	movs	r3, #96	; 0x60
 8004c8c:	61fb      	str	r3, [r7, #28]
	TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	623b      	str	r3, [r7, #32]
	TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8004c92:	2300      	movs	r3, #0
 8004c94:	627b      	str	r3, [r7, #36]	; 0x24
	TIM_OC_InitStruct.CompareValue = 0;
 8004c96:	2300      	movs	r3, #0
 8004c98:	62bb      	str	r3, [r7, #40]	; 0x28
	TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
	LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8004c9e:	f107 031c 	add.w	r3, r7, #28
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	2101      	movs	r1, #1
 8004ca6:	4832      	ldr	r0, [pc, #200]	; (8004d70 <MX_TIM5_Init+0x154>)
 8004ca8:	f004 fc2a 	bl	8009500 <LL_TIM_OC_Init>
	LL_TIM_OC_EnableFast(TIM5, LL_TIM_CHANNEL_CH1);
 8004cac:	2101      	movs	r1, #1
 8004cae:	4830      	ldr	r0, [pc, #192]	; (8004d70 <MX_TIM5_Init+0x154>)
 8004cb0:	f7ff fe5a 	bl	8004968 <LL_TIM_OC_EnableFast>
	LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH2);
 8004cb4:	2110      	movs	r1, #16
 8004cb6:	482e      	ldr	r0, [pc, #184]	; (8004d70 <MX_TIM5_Init+0x154>)
 8004cb8:	f7ff fe98 	bl	80049ec <LL_TIM_OC_EnablePreload>
	TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	623b      	str	r3, [r7, #32]
	TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	627b      	str	r3, [r7, #36]	; 0x24
	LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8004cc4:	f107 031c 	add.w	r3, r7, #28
 8004cc8:	461a      	mov	r2, r3
 8004cca:	2110      	movs	r1, #16
 8004ccc:	4828      	ldr	r0, [pc, #160]	; (8004d70 <MX_TIM5_Init+0x154>)
 8004cce:	f004 fc17 	bl	8009500 <LL_TIM_OC_Init>
	LL_TIM_OC_EnableFast(TIM5, LL_TIM_CHANNEL_CH2);
 8004cd2:	2110      	movs	r1, #16
 8004cd4:	4826      	ldr	r0, [pc, #152]	; (8004d70 <MX_TIM5_Init+0x154>)
 8004cd6:	f7ff fe47 	bl	8004968 <LL_TIM_OC_EnableFast>
	LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH3);
 8004cda:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004cde:	4824      	ldr	r0, [pc, #144]	; (8004d70 <MX_TIM5_Init+0x154>)
 8004ce0:	f7ff fe84 	bl	80049ec <LL_TIM_OC_EnablePreload>
	TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	623b      	str	r3, [r7, #32]
	TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	627b      	str	r3, [r7, #36]	; 0x24
	LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8004cec:	f107 031c 	add.w	r3, r7, #28
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004cf6:	481e      	ldr	r0, [pc, #120]	; (8004d70 <MX_TIM5_Init+0x154>)
 8004cf8:	f004 fc02 	bl	8009500 <LL_TIM_OC_Init>
	LL_TIM_OC_EnableFast(TIM5, LL_TIM_CHANNEL_CH3);
 8004cfc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004d00:	481b      	ldr	r0, [pc, #108]	; (8004d70 <MX_TIM5_Init+0x154>)
 8004d02:	f7ff fe31 	bl	8004968 <LL_TIM_OC_EnableFast>
	LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH4);
 8004d06:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004d0a:	4819      	ldr	r0, [pc, #100]	; (8004d70 <MX_TIM5_Init+0x154>)
 8004d0c:	f7ff fe6e 	bl	80049ec <LL_TIM_OC_EnablePreload>
	TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8004d10:	2300      	movs	r3, #0
 8004d12:	623b      	str	r3, [r7, #32]
	TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8004d14:	2300      	movs	r3, #0
 8004d16:	627b      	str	r3, [r7, #36]	; 0x24
	LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8004d18:	f107 031c 	add.w	r3, r7, #28
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004d22:	4813      	ldr	r0, [pc, #76]	; (8004d70 <MX_TIM5_Init+0x154>)
 8004d24:	f004 fbec 	bl	8009500 <LL_TIM_OC_Init>
	LL_TIM_OC_EnableFast(TIM5, LL_TIM_CHANNEL_CH4);
 8004d28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004d2c:	4810      	ldr	r0, [pc, #64]	; (8004d70 <MX_TIM5_Init+0x154>)
 8004d2e:	f7ff fe1b 	bl	8004968 <LL_TIM_OC_EnableFast>
	LL_TIM_SetTriggerOutput(TIM5, LL_TIM_TRGO_RESET);
 8004d32:	2100      	movs	r1, #0
 8004d34:	480e      	ldr	r0, [pc, #56]	; (8004d70 <MX_TIM5_Init+0x154>)
 8004d36:	f7ff feb0 	bl	8004a9a <LL_TIM_SetTriggerOutput>
	LL_TIM_DisableMasterSlaveMode(TIM5);
 8004d3a:	480d      	ldr	r0, [pc, #52]	; (8004d70 <MX_TIM5_Init+0x154>)
 8004d3c:	f7ff fec0 	bl	8004ac0 <LL_TIM_DisableMasterSlaveMode>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8004d40:	2001      	movs	r0, #1
 8004d42:	f7ff fecd 	bl	8004ae0 <LL_AHB1_GRP1_EnableClock>
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    PA2     ------> TIM5_CH3
    PA3     ------> TIM5_CH4 
	 */
	GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8004d46:	230f      	movs	r3, #15
 8004d48:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004d4a:	2302      	movs	r3, #2
 8004d4c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004d52:	2300      	movs	r3, #0
 8004d54:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004d56:	2300      	movs	r3, #0
 8004d58:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8004d5a:	2302      	movs	r3, #2
 8004d5c:	61bb      	str	r3, [r7, #24]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d5e:	1d3b      	adds	r3, r7, #4
 8004d60:	4619      	mov	r1, r3
 8004d62:	4804      	ldr	r0, [pc, #16]	; (8004d74 <MX_TIM5_Init+0x158>)
 8004d64:	f004 f89f 	bl	8008ea6 <LL_GPIO_Init>

}
 8004d68:	bf00      	nop
 8004d6a:	3750      	adds	r7, #80	; 0x50
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}
 8004d70:	40000c00 	.word	0x40000c00
 8004d74:	40020000 	.word	0x40020000

08004d78 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b086      	sub	sp, #24
 8004d7c:	af00      	add	r7, sp, #0
	LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8004d7e:	1d3b      	adds	r3, r7, #4
 8004d80:	2200      	movs	r2, #0
 8004d82:	601a      	str	r2, [r3, #0]
 8004d84:	605a      	str	r2, [r3, #4]
 8004d86:	609a      	str	r2, [r3, #8]
 8004d88:	60da      	str	r2, [r3, #12]
 8004d8a:	611a      	str	r2, [r3, #16]

	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM7);
 8004d8c:	2020      	movs	r0, #32
 8004d8e:	f7ff febf 	bl	8004b10 <LL_APB1_GRP1_EnableClock>

	/* TIM7 interrupt Init */
	NVIC_SetPriority(TIM7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8004d92:	f7ff fd4f 	bl	8004834 <__NVIC_GetPriorityGrouping>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2200      	movs	r2, #0
 8004d9a:	2100      	movs	r1, #0
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f7ff fd9f 	bl	80048e0 <NVIC_EncodePriority>
 8004da2:	4603      	mov	r3, r0
 8004da4:	4619      	mov	r1, r3
 8004da6:	2037      	movs	r0, #55	; 0x37
 8004da8:	f7ff fd70 	bl	800488c <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM7_IRQn);
 8004dac:	2037      	movs	r0, #55	; 0x37
 8004dae:	f7ff fd4f 	bl	8004850 <__NVIC_EnableIRQ>

	TIM_InitStruct.Prescaler = 41999;
 8004db2:	f24a 430f 	movw	r3, #41999	; 0xa40f
 8004db6:	80bb      	strh	r3, [r7, #4]
	TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8004db8:	2300      	movs	r3, #0
 8004dba:	60bb      	str	r3, [r7, #8]
	TIM_InitStruct.Autoreload = 1;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	60fb      	str	r3, [r7, #12]
	LL_TIM_Init(TIM7, &TIM_InitStruct);
 8004dc0:	1d3b      	adds	r3, r7, #4
 8004dc2:	4619      	mov	r1, r3
 8004dc4:	4808      	ldr	r0, [pc, #32]	; (8004de8 <MX_TIM7_Init+0x70>)
 8004dc6:	f004 fb01 	bl	80093cc <LL_TIM_Init>
	LL_TIM_EnableARRPreload(TIM7);
 8004dca:	4807      	ldr	r0, [pc, #28]	; (8004de8 <MX_TIM7_Init+0x70>)
 8004dcc:	f7ff fdbb 	bl	8004946 <LL_TIM_EnableARRPreload>
	LL_TIM_SetTriggerOutput(TIM7, LL_TIM_TRGO_RESET);
 8004dd0:	2100      	movs	r1, #0
 8004dd2:	4805      	ldr	r0, [pc, #20]	; (8004de8 <MX_TIM7_Init+0x70>)
 8004dd4:	f7ff fe61 	bl	8004a9a <LL_TIM_SetTriggerOutput>
	LL_TIM_DisableMasterSlaveMode(TIM7);
 8004dd8:	4803      	ldr	r0, [pc, #12]	; (8004de8 <MX_TIM7_Init+0x70>)
 8004dda:	f7ff fe71 	bl	8004ac0 <LL_TIM_DisableMasterSlaveMode>

}
 8004dde:	bf00      	nop
 8004de0:	3718      	adds	r7, #24
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	40001400 	.word	0x40001400

08004dec <__NVIC_GetPriorityGrouping>:
{
 8004dec:	b480      	push	{r7}
 8004dee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004df0:	4b04      	ldr	r3, [pc, #16]	; (8004e04 <__NVIC_GetPriorityGrouping+0x18>)
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	0a1b      	lsrs	r3, r3, #8
 8004df6:	f003 0307 	and.w	r3, r3, #7
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr
 8004e04:	e000ed00 	.word	0xe000ed00

08004e08 <__NVIC_EnableIRQ>:
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b083      	sub	sp, #12
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	4603      	mov	r3, r0
 8004e10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	db0b      	blt.n	8004e32 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e1a:	79fb      	ldrb	r3, [r7, #7]
 8004e1c:	f003 021f 	and.w	r2, r3, #31
 8004e20:	4907      	ldr	r1, [pc, #28]	; (8004e40 <__NVIC_EnableIRQ+0x38>)
 8004e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e26:	095b      	lsrs	r3, r3, #5
 8004e28:	2001      	movs	r0, #1
 8004e2a:	fa00 f202 	lsl.w	r2, r0, r2
 8004e2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004e32:	bf00      	nop
 8004e34:	370c      	adds	r7, #12
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr
 8004e3e:	bf00      	nop
 8004e40:	e000e100 	.word	0xe000e100

08004e44 <__NVIC_SetPriority>:
{
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	6039      	str	r1, [r7, #0]
 8004e4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	db0a      	blt.n	8004e6e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	b2da      	uxtb	r2, r3
 8004e5c:	490c      	ldr	r1, [pc, #48]	; (8004e90 <__NVIC_SetPriority+0x4c>)
 8004e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e62:	0112      	lsls	r2, r2, #4
 8004e64:	b2d2      	uxtb	r2, r2
 8004e66:	440b      	add	r3, r1
 8004e68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004e6c:	e00a      	b.n	8004e84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	b2da      	uxtb	r2, r3
 8004e72:	4908      	ldr	r1, [pc, #32]	; (8004e94 <__NVIC_SetPriority+0x50>)
 8004e74:	79fb      	ldrb	r3, [r7, #7]
 8004e76:	f003 030f 	and.w	r3, r3, #15
 8004e7a:	3b04      	subs	r3, #4
 8004e7c:	0112      	lsls	r2, r2, #4
 8004e7e:	b2d2      	uxtb	r2, r2
 8004e80:	440b      	add	r3, r1
 8004e82:	761a      	strb	r2, [r3, #24]
}
 8004e84:	bf00      	nop
 8004e86:	370c      	adds	r7, #12
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr
 8004e90:	e000e100 	.word	0xe000e100
 8004e94:	e000ed00 	.word	0xe000ed00

08004e98 <NVIC_EncodePriority>:
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b089      	sub	sp, #36	; 0x24
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	60f8      	str	r0, [r7, #12]
 8004ea0:	60b9      	str	r1, [r7, #8]
 8004ea2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f003 0307 	and.w	r3, r3, #7
 8004eaa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	f1c3 0307 	rsb	r3, r3, #7
 8004eb2:	2b04      	cmp	r3, #4
 8004eb4:	bf28      	it	cs
 8004eb6:	2304      	movcs	r3, #4
 8004eb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004eba:	69fb      	ldr	r3, [r7, #28]
 8004ebc:	3304      	adds	r3, #4
 8004ebe:	2b06      	cmp	r3, #6
 8004ec0:	d902      	bls.n	8004ec8 <NVIC_EncodePriority+0x30>
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	3b03      	subs	r3, #3
 8004ec6:	e000      	b.n	8004eca <NVIC_EncodePriority+0x32>
 8004ec8:	2300      	movs	r3, #0
 8004eca:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ecc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004ed0:	69bb      	ldr	r3, [r7, #24]
 8004ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed6:	43da      	mvns	r2, r3
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	401a      	ands	r2, r3
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ee0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8004eea:	43d9      	mvns	r1, r3
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ef0:	4313      	orrs	r3, r2
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3724      	adds	r7, #36	; 0x24
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr

08004efe <LL_USART_Enable>:
{
 8004efe:	b480      	push	{r7}
 8004f00:	b083      	sub	sp, #12
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	68db      	ldr	r3, [r3, #12]
 8004f0a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	60da      	str	r2, [r3, #12]
}
 8004f12:	bf00      	nop
 8004f14:	370c      	adds	r7, #12
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr

08004f1e <LL_USART_ConfigAsyncMode>:
{
 8004f1e:	b480      	push	{r7}
 8004f20:	b083      	sub	sp, #12
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	695b      	ldr	r3, [r3, #20]
 8004f36:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	615a      	str	r2, [r3, #20]
}
 8004f3e:	bf00      	nop
 8004f40:	370c      	adds	r7, #12
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr
	...

08004f4c <LL_AHB1_GRP1_EnableClock>:
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b085      	sub	sp, #20
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8004f54:	4b08      	ldr	r3, [pc, #32]	; (8004f78 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004f56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f58:	4907      	ldr	r1, [pc, #28]	; (8004f78 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8004f60:	4b05      	ldr	r3, [pc, #20]	; (8004f78 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004f62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4013      	ands	r3, r2
 8004f68:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
}
 8004f6c:	bf00      	nop
 8004f6e:	3714      	adds	r7, #20
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr
 8004f78:	40023800 	.word	0x40023800

08004f7c <LL_APB1_GRP1_EnableClock>:
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b085      	sub	sp, #20
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8004f84:	4b08      	ldr	r3, [pc, #32]	; (8004fa8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8004f86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f88:	4907      	ldr	r1, [pc, #28]	; (8004fa8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8004f90:	4b05      	ldr	r3, [pc, #20]	; (8004fa8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8004f92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	4013      	ands	r3, r2
 8004f98:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
}
 8004f9c:	bf00      	nop
 8004f9e:	3714      	adds	r7, #20
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr
 8004fa8:	40023800 	.word	0x40023800

08004fac <LL_APB2_GRP1_EnableClock>:
{
 8004fac:	b480      	push	{r7}
 8004fae:	b085      	sub	sp, #20
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8004fb4:	4b08      	ldr	r3, [pc, #32]	; (8004fd8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8004fb6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fb8:	4907      	ldr	r1, [pc, #28]	; (8004fd8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8004fc0:	4b05      	ldr	r3, [pc, #20]	; (8004fd8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8004fc2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	4013      	ands	r3, r2
 8004fc8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004fca:	68fb      	ldr	r3, [r7, #12]
}
 8004fcc:	bf00      	nop
 8004fce:	3714      	adds	r7, #20
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr
 8004fd8:	40023800 	.word	0x40023800

08004fdc <MX_UART4_Init>:

UART_HandleTypeDef huart1;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b08e      	sub	sp, #56	; 0x38
 8004fe0:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8004fe2:	f107 031c 	add.w	r3, r7, #28
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	601a      	str	r2, [r3, #0]
 8004fea:	605a      	str	r2, [r3, #4]
 8004fec:	609a      	str	r2, [r3, #8]
 8004fee:	60da      	str	r2, [r3, #12]
 8004ff0:	611a      	str	r2, [r3, #16]
 8004ff2:	615a      	str	r2, [r3, #20]
 8004ff4:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ff6:	1d3b      	adds	r3, r7, #4
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	601a      	str	r2, [r3, #0]
 8004ffc:	605a      	str	r2, [r3, #4]
 8004ffe:	609a      	str	r2, [r3, #8]
 8005000:	60da      	str	r2, [r3, #12]
 8005002:	611a      	str	r2, [r3, #16]
 8005004:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 8005006:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800500a:	f7ff ffb7 	bl	8004f7c <LL_APB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800500e:	2004      	movs	r0, #4
 8005010:	f7ff ff9c 	bl	8004f4c <LL_AHB1_GRP1_EnableClock>
  /**UART4 GPIO Configuration  
  PC10   ------> UART4_TX
  PC11   ------> UART4_RX 
  */
  GPIO_InitStruct.Pin = M8N_TX4_Pin|M8N_RX4_Pin;
 8005014:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005018:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800501a:	2302      	movs	r3, #2
 800501c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800501e:	2303      	movs	r3, #3
 8005020:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005022:	2300      	movs	r3, #0
 8005024:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8005026:	2301      	movs	r3, #1
 8005028:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 800502a:	2308      	movs	r3, #8
 800502c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800502e:	1d3b      	adds	r3, r7, #4
 8005030:	4619      	mov	r1, r3
 8005032:	4819      	ldr	r0, [pc, #100]	; (8005098 <MX_UART4_Init+0xbc>)
 8005034:	f003 ff37 	bl	8008ea6 <LL_GPIO_Init>

  /* UART4 interrupt Init */
  NVIC_SetPriority(UART4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8005038:	f7ff fed8 	bl	8004dec <__NVIC_GetPriorityGrouping>
 800503c:	4603      	mov	r3, r0
 800503e:	2200      	movs	r2, #0
 8005040:	2100      	movs	r1, #0
 8005042:	4618      	mov	r0, r3
 8005044:	f7ff ff28 	bl	8004e98 <NVIC_EncodePriority>
 8005048:	4603      	mov	r3, r0
 800504a:	4619      	mov	r1, r3
 800504c:	2034      	movs	r0, #52	; 0x34
 800504e:	f7ff fef9 	bl	8004e44 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART4_IRQn);
 8005052:	2034      	movs	r0, #52	; 0x34
 8005054:	f7ff fed8 	bl	8004e08 <__NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 9600;
 8005058:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800505c:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800505e:	2300      	movs	r3, #0
 8005060:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8005062:	2300      	movs	r3, #0
 8005064:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8005066:	2300      	movs	r3, #0
 8005068:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800506a:	230c      	movs	r3, #12
 800506c:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800506e:	2300      	movs	r3, #0
 8005070:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8005072:	2300      	movs	r3, #0
 8005074:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(UART4, &USART_InitStruct);
 8005076:	f107 031c 	add.w	r3, r7, #28
 800507a:	4619      	mov	r1, r3
 800507c:	4807      	ldr	r0, [pc, #28]	; (800509c <MX_UART4_Init+0xc0>)
 800507e:	f004 fdfd 	bl	8009c7c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART4);
 8005082:	4806      	ldr	r0, [pc, #24]	; (800509c <MX_UART4_Init+0xc0>)
 8005084:	f7ff ff4b 	bl	8004f1e <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART4);
 8005088:	4804      	ldr	r0, [pc, #16]	; (800509c <MX_UART4_Init+0xc0>)
 800508a:	f7ff ff38 	bl	8004efe <LL_USART_Enable>

}
 800508e:	bf00      	nop
 8005090:	3738      	adds	r7, #56	; 0x38
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	40020800 	.word	0x40020800
 800509c:	40004c00 	.word	0x40004c00

080050a0 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b08e      	sub	sp, #56	; 0x38
 80050a4:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 80050a6:	f107 031c 	add.w	r3, r7, #28
 80050aa:	2200      	movs	r2, #0
 80050ac:	601a      	str	r2, [r3, #0]
 80050ae:	605a      	str	r2, [r3, #4]
 80050b0:	609a      	str	r2, [r3, #8]
 80050b2:	60da      	str	r2, [r3, #12]
 80050b4:	611a      	str	r2, [r3, #16]
 80050b6:	615a      	str	r2, [r3, #20]
 80050b8:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050ba:	1d3b      	adds	r3, r7, #4
 80050bc:	2200      	movs	r2, #0
 80050be:	601a      	str	r2, [r3, #0]
 80050c0:	605a      	str	r2, [r3, #4]
 80050c2:	609a      	str	r2, [r3, #8]
 80050c4:	60da      	str	r2, [r3, #12]
 80050c6:	611a      	str	r2, [r3, #16]
 80050c8:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART5);
 80050ca:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80050ce:	f7ff ff55 	bl	8004f7c <LL_APB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80050d2:	2004      	movs	r0, #4
 80050d4:	f7ff ff3a 	bl	8004f4c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 80050d8:	2008      	movs	r0, #8
 80050da:	f7ff ff37 	bl	8004f4c <LL_AHB1_GRP1_EnableClock>
  /**UART5 GPIO Configuration  
  PC12   ------> UART5_TX
  PD2   ------> UART5_RX 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 80050de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80050e2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80050e4:	2302      	movs	r3, #2
 80050e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80050e8:	2303      	movs	r3, #3
 80050ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80050ec:	2300      	movs	r3, #0
 80050ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80050f0:	2301      	movs	r3, #1
 80050f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80050f4:	2308      	movs	r3, #8
 80050f6:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80050f8:	1d3b      	adds	r3, r7, #4
 80050fa:	4619      	mov	r1, r3
 80050fc:	4821      	ldr	r0, [pc, #132]	; (8005184 <MX_UART5_Init+0xe4>)
 80050fe:	f003 fed2 	bl	8008ea6 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8005102:	2304      	movs	r3, #4
 8005104:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005106:	2302      	movs	r3, #2
 8005108:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800510a:	2303      	movs	r3, #3
 800510c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800510e:	2300      	movs	r3, #0
 8005110:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8005112:	2301      	movs	r3, #1
 8005114:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8005116:	2308      	movs	r3, #8
 8005118:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800511a:	1d3b      	adds	r3, r7, #4
 800511c:	4619      	mov	r1, r3
 800511e:	481a      	ldr	r0, [pc, #104]	; (8005188 <MX_UART5_Init+0xe8>)
 8005120:	f003 fec1 	bl	8008ea6 <LL_GPIO_Init>

  /* UART5 interrupt Init */
  NVIC_SetPriority(UART5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8005124:	f7ff fe62 	bl	8004dec <__NVIC_GetPriorityGrouping>
 8005128:	4603      	mov	r3, r0
 800512a:	2200      	movs	r2, #0
 800512c:	2100      	movs	r1, #0
 800512e:	4618      	mov	r0, r3
 8005130:	f7ff feb2 	bl	8004e98 <NVIC_EncodePriority>
 8005134:	4603      	mov	r3, r0
 8005136:	4619      	mov	r1, r3
 8005138:	2035      	movs	r0, #53	; 0x35
 800513a:	f7ff fe83 	bl	8004e44 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART5_IRQn);
 800513e:	2035      	movs	r0, #53	; 0x35
 8005140:	f7ff fe62 	bl	8004e08 <__NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 115200;
 8005144:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8005148:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800514a:	2300      	movs	r3, #0
 800514c:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800514e:	2300      	movs	r3, #0
 8005150:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8005152:	2300      	movs	r3, #0
 8005154:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_RX;
 8005156:	2304      	movs	r3, #4
 8005158:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800515a:	2300      	movs	r3, #0
 800515c:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800515e:	2300      	movs	r3, #0
 8005160:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(UART5, &USART_InitStruct);
 8005162:	f107 031c 	add.w	r3, r7, #28
 8005166:	4619      	mov	r1, r3
 8005168:	4808      	ldr	r0, [pc, #32]	; (800518c <MX_UART5_Init+0xec>)
 800516a:	f004 fd87 	bl	8009c7c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART5);
 800516e:	4807      	ldr	r0, [pc, #28]	; (800518c <MX_UART5_Init+0xec>)
 8005170:	f7ff fed5 	bl	8004f1e <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART5);
 8005174:	4805      	ldr	r0, [pc, #20]	; (800518c <MX_UART5_Init+0xec>)
 8005176:	f7ff fec2 	bl	8004efe <LL_USART_Enable>

}
 800517a:	bf00      	nop
 800517c:	3738      	adds	r7, #56	; 0x38
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
 8005182:	bf00      	nop
 8005184:	40020800 	.word	0x40020800
 8005188:	40020c00 	.word	0x40020c00
 800518c:	40005000 	.word	0x40005000

08005190 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8005194:	4b11      	ldr	r3, [pc, #68]	; (80051dc <MX_USART1_UART_Init+0x4c>)
 8005196:	4a12      	ldr	r2, [pc, #72]	; (80051e0 <MX_USART1_UART_Init+0x50>)
 8005198:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800519a:	4b10      	ldr	r3, [pc, #64]	; (80051dc <MX_USART1_UART_Init+0x4c>)
 800519c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80051a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80051a2:	4b0e      	ldr	r3, [pc, #56]	; (80051dc <MX_USART1_UART_Init+0x4c>)
 80051a4:	2200      	movs	r2, #0
 80051a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80051a8:	4b0c      	ldr	r3, [pc, #48]	; (80051dc <MX_USART1_UART_Init+0x4c>)
 80051aa:	2200      	movs	r2, #0
 80051ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80051ae:	4b0b      	ldr	r3, [pc, #44]	; (80051dc <MX_USART1_UART_Init+0x4c>)
 80051b0:	2200      	movs	r2, #0
 80051b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80051b4:	4b09      	ldr	r3, [pc, #36]	; (80051dc <MX_USART1_UART_Init+0x4c>)
 80051b6:	220c      	movs	r2, #12
 80051b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80051ba:	4b08      	ldr	r3, [pc, #32]	; (80051dc <MX_USART1_UART_Init+0x4c>)
 80051bc:	2200      	movs	r2, #0
 80051be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80051c0:	4b06      	ldr	r3, [pc, #24]	; (80051dc <MX_USART1_UART_Init+0x4c>)
 80051c2:	2200      	movs	r2, #0
 80051c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80051c6:	4805      	ldr	r0, [pc, #20]	; (80051dc <MX_USART1_UART_Init+0x4c>)
 80051c8:	f002 fdec 	bl	8007da4 <HAL_UART_Init>
 80051cc:	4603      	mov	r3, r0
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d001      	beq.n	80051d6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80051d2:	f7fe ff4d 	bl	8004070 <Error_Handler>
  }

}
 80051d6:	bf00      	nop
 80051d8:	bd80      	pop	{r7, pc}
 80051da:	bf00      	nop
 80051dc:	20000518 	.word	0x20000518
 80051e0:	40011000 	.word	0x40011000

080051e4 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b08e      	sub	sp, #56	; 0x38
 80051e8:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 80051ea:	f107 031c 	add.w	r3, r7, #28
 80051ee:	2200      	movs	r2, #0
 80051f0:	601a      	str	r2, [r3, #0]
 80051f2:	605a      	str	r2, [r3, #4]
 80051f4:	609a      	str	r2, [r3, #8]
 80051f6:	60da      	str	r2, [r3, #12]
 80051f8:	611a      	str	r2, [r3, #16]
 80051fa:	615a      	str	r2, [r3, #20]
 80051fc:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051fe:	1d3b      	adds	r3, r7, #4
 8005200:	2200      	movs	r2, #0
 8005202:	601a      	str	r2, [r3, #0]
 8005204:	605a      	str	r2, [r3, #4]
 8005206:	609a      	str	r2, [r3, #8]
 8005208:	60da      	str	r2, [r3, #12]
 800520a:	611a      	str	r2, [r3, #16]
 800520c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 800520e:	2020      	movs	r0, #32
 8005210:	f7ff fecc 	bl	8004fac <LL_APB2_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8005214:	2004      	movs	r0, #4
 8005216:	f7ff fe99 	bl	8004f4c <LL_AHB1_GRP1_EnableClock>
  /**USART6 GPIO Configuration  
  PC6   ------> USART6_TX
  PC7   ------> USART6_RX 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800521a:	23c0      	movs	r3, #192	; 0xc0
 800521c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800521e:	2302      	movs	r3, #2
 8005220:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8005222:	2303      	movs	r3, #3
 8005224:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005226:	2300      	movs	r3, #0
 8005228:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800522a:	2300      	movs	r3, #0
 800522c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 800522e:	2308      	movs	r3, #8
 8005230:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005232:	1d3b      	adds	r3, r7, #4
 8005234:	4619      	mov	r1, r3
 8005236:	4819      	ldr	r0, [pc, #100]	; (800529c <MX_USART6_UART_Init+0xb8>)
 8005238:	f003 fe35 	bl	8008ea6 <LL_GPIO_Init>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800523c:	f7ff fdd6 	bl	8004dec <__NVIC_GetPriorityGrouping>
 8005240:	4603      	mov	r3, r0
 8005242:	2200      	movs	r2, #0
 8005244:	2100      	movs	r1, #0
 8005246:	4618      	mov	r0, r3
 8005248:	f7ff fe26 	bl	8004e98 <NVIC_EncodePriority>
 800524c:	4603      	mov	r3, r0
 800524e:	4619      	mov	r1, r3
 8005250:	2047      	movs	r0, #71	; 0x47
 8005252:	f7ff fdf7 	bl	8004e44 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 8005256:	2047      	movs	r0, #71	; 0x47
 8005258:	f7ff fdd6 	bl	8004e08 <__NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 115200;
 800525c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8005260:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8005262:	2300      	movs	r3, #0
 8005264:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8005266:	2300      	movs	r3, #0
 8005268:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800526a:	2300      	movs	r3, #0
 800526c:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800526e:	230c      	movs	r3, #12
 8005270:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8005272:	2300      	movs	r3, #0
 8005274:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8005276:	2300      	movs	r3, #0
 8005278:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART6, &USART_InitStruct);
 800527a:	f107 031c 	add.w	r3, r7, #28
 800527e:	4619      	mov	r1, r3
 8005280:	4807      	ldr	r0, [pc, #28]	; (80052a0 <MX_USART6_UART_Init+0xbc>)
 8005282:	f004 fcfb 	bl	8009c7c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART6);
 8005286:	4806      	ldr	r0, [pc, #24]	; (80052a0 <MX_USART6_UART_Init+0xbc>)
 8005288:	f7ff fe49 	bl	8004f1e <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART6);
 800528c:	4804      	ldr	r0, [pc, #16]	; (80052a0 <MX_USART6_UART_Init+0xbc>)
 800528e:	f7ff fe36 	bl	8004efe <LL_USART_Enable>

}
 8005292:	bf00      	nop
 8005294:	3738      	adds	r7, #56	; 0x38
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	40020800 	.word	0x40020800
 80052a0:	40011400 	.word	0x40011400

080052a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b08a      	sub	sp, #40	; 0x28
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052ac:	f107 0314 	add.w	r3, r7, #20
 80052b0:	2200      	movs	r2, #0
 80052b2:	601a      	str	r2, [r3, #0]
 80052b4:	605a      	str	r2, [r3, #4]
 80052b6:	609a      	str	r2, [r3, #8]
 80052b8:	60da      	str	r2, [r3, #12]
 80052ba:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a1d      	ldr	r2, [pc, #116]	; (8005338 <HAL_UART_MspInit+0x94>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d134      	bne.n	8005330 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80052c6:	2300      	movs	r3, #0
 80052c8:	613b      	str	r3, [r7, #16]
 80052ca:	4b1c      	ldr	r3, [pc, #112]	; (800533c <HAL_UART_MspInit+0x98>)
 80052cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052ce:	4a1b      	ldr	r2, [pc, #108]	; (800533c <HAL_UART_MspInit+0x98>)
 80052d0:	f043 0310 	orr.w	r3, r3, #16
 80052d4:	6453      	str	r3, [r2, #68]	; 0x44
 80052d6:	4b19      	ldr	r3, [pc, #100]	; (800533c <HAL_UART_MspInit+0x98>)
 80052d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052da:	f003 0310 	and.w	r3, r3, #16
 80052de:	613b      	str	r3, [r7, #16]
 80052e0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052e2:	2300      	movs	r3, #0
 80052e4:	60fb      	str	r3, [r7, #12]
 80052e6:	4b15      	ldr	r3, [pc, #84]	; (800533c <HAL_UART_MspInit+0x98>)
 80052e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ea:	4a14      	ldr	r2, [pc, #80]	; (800533c <HAL_UART_MspInit+0x98>)
 80052ec:	f043 0301 	orr.w	r3, r3, #1
 80052f0:	6313      	str	r3, [r2, #48]	; 0x30
 80052f2:	4b12      	ldr	r3, [pc, #72]	; (800533c <HAL_UART_MspInit+0x98>)
 80052f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052f6:	f003 0301 	and.w	r3, r3, #1
 80052fa:	60fb      	str	r3, [r7, #12]
 80052fc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80052fe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005302:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005304:	2302      	movs	r3, #2
 8005306:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005308:	2300      	movs	r3, #0
 800530a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800530c:	2303      	movs	r3, #3
 800530e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005310:	2307      	movs	r3, #7
 8005312:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005314:	f107 0314 	add.w	r3, r7, #20
 8005318:	4619      	mov	r1, r3
 800531a:	4809      	ldr	r0, [pc, #36]	; (8005340 <HAL_UART_MspInit+0x9c>)
 800531c:	f001 f966 	bl	80065ec <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005320:	2200      	movs	r2, #0
 8005322:	2100      	movs	r1, #0
 8005324:	2025      	movs	r0, #37	; 0x25
 8005326:	f000 fd9a 	bl	8005e5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800532a:	2025      	movs	r0, #37	; 0x25
 800532c:	f000 fdb3 	bl	8005e96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8005330:	bf00      	nop
 8005332:	3728      	adds	r7, #40	; 0x28
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}
 8005338:	40011000 	.word	0x40011000
 800533c:	40023800 	.word	0x40023800
 8005340:	40020000 	.word	0x40020000

08005344 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005344:	f8df d034 	ldr.w	sp, [pc, #52]	; 800537c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005348:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800534a:	e003      	b.n	8005354 <LoopCopyDataInit>

0800534c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800534c:	4b0c      	ldr	r3, [pc, #48]	; (8005380 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800534e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005350:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005352:	3104      	adds	r1, #4

08005354 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005354:	480b      	ldr	r0, [pc, #44]	; (8005384 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005356:	4b0c      	ldr	r3, [pc, #48]	; (8005388 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005358:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800535a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800535c:	d3f6      	bcc.n	800534c <CopyDataInit>
  ldr  r2, =_sbss
 800535e:	4a0b      	ldr	r2, [pc, #44]	; (800538c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005360:	e002      	b.n	8005368 <LoopFillZerobss>

08005362 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005362:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005364:	f842 3b04 	str.w	r3, [r2], #4

08005368 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005368:	4b09      	ldr	r3, [pc, #36]	; (8005390 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800536a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800536c:	d3f9      	bcc.n	8005362 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800536e:	f7ff fa4b 	bl	8004808 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005372:	f004 fd09 	bl	8009d88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005376:	f7fe f8ed 	bl	8003554 <main>
  bx  lr    
 800537a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800537c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8005380:	0800db14 	.word	0x0800db14
  ldr  r0, =_sdata
 8005384:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005388:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 800538c:	200001e8 	.word	0x200001e8
  ldr  r3, = _ebss
 8005390:	20000560 	.word	0x20000560

08005394 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005394:	e7fe      	b.n	8005394 <ADC_IRQHandler>
	...

08005398 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800539c:	4b0e      	ldr	r3, [pc, #56]	; (80053d8 <HAL_Init+0x40>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a0d      	ldr	r2, [pc, #52]	; (80053d8 <HAL_Init+0x40>)
 80053a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80053a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80053a8:	4b0b      	ldr	r3, [pc, #44]	; (80053d8 <HAL_Init+0x40>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a0a      	ldr	r2, [pc, #40]	; (80053d8 <HAL_Init+0x40>)
 80053ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80053b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80053b4:	4b08      	ldr	r3, [pc, #32]	; (80053d8 <HAL_Init+0x40>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a07      	ldr	r2, [pc, #28]	; (80053d8 <HAL_Init+0x40>)
 80053ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80053c0:	2003      	movs	r0, #3
 80053c2:	f000 fd41 	bl	8005e48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80053c6:	2000      	movs	r0, #0
 80053c8:	f000 f808 	bl	80053dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80053cc:	f7fe ffaa 	bl	8004324 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80053d0:	2300      	movs	r3, #0
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	bf00      	nop
 80053d8:	40023c00 	.word	0x40023c00

080053dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b082      	sub	sp, #8
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80053e4:	4b12      	ldr	r3, [pc, #72]	; (8005430 <HAL_InitTick+0x54>)
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	4b12      	ldr	r3, [pc, #72]	; (8005434 <HAL_InitTick+0x58>)
 80053ea:	781b      	ldrb	r3, [r3, #0]
 80053ec:	4619      	mov	r1, r3
 80053ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80053f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80053f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80053fa:	4618      	mov	r0, r3
 80053fc:	f000 fd59 	bl	8005eb2 <HAL_SYSTICK_Config>
 8005400:	4603      	mov	r3, r0
 8005402:	2b00      	cmp	r3, #0
 8005404:	d001      	beq.n	800540a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e00e      	b.n	8005428 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2b0f      	cmp	r3, #15
 800540e:	d80a      	bhi.n	8005426 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005410:	2200      	movs	r2, #0
 8005412:	6879      	ldr	r1, [r7, #4]
 8005414:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005418:	f000 fd21 	bl	8005e5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800541c:	4a06      	ldr	r2, [pc, #24]	; (8005438 <HAL_InitTick+0x5c>)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005422:	2300      	movs	r3, #0
 8005424:	e000      	b.n	8005428 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
}
 8005428:	4618      	mov	r0, r3
 800542a:	3708      	adds	r7, #8
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}
 8005430:	20000004 	.word	0x20000004
 8005434:	2000000c 	.word	0x2000000c
 8005438:	20000008 	.word	0x20000008

0800543c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800543c:	b480      	push	{r7}
 800543e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005440:	4b06      	ldr	r3, [pc, #24]	; (800545c <HAL_IncTick+0x20>)
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	461a      	mov	r2, r3
 8005446:	4b06      	ldr	r3, [pc, #24]	; (8005460 <HAL_IncTick+0x24>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4413      	add	r3, r2
 800544c:	4a04      	ldr	r2, [pc, #16]	; (8005460 <HAL_IncTick+0x24>)
 800544e:	6013      	str	r3, [r2, #0]
}
 8005450:	bf00      	nop
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr
 800545a:	bf00      	nop
 800545c:	2000000c 	.word	0x2000000c
 8005460:	20000558 	.word	0x20000558

08005464 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005464:	b480      	push	{r7}
 8005466:	af00      	add	r7, sp, #0
  return uwTick;
 8005468:	4b03      	ldr	r3, [pc, #12]	; (8005478 <HAL_GetTick+0x14>)
 800546a:	681b      	ldr	r3, [r3, #0]
}
 800546c:	4618      	mov	r0, r3
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr
 8005476:	bf00      	nop
 8005478:	20000558 	.word	0x20000558

0800547c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b084      	sub	sp, #16
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005484:	f7ff ffee 	bl	8005464 <HAL_GetTick>
 8005488:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005494:	d005      	beq.n	80054a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005496:	4b09      	ldr	r3, [pc, #36]	; (80054bc <HAL_Delay+0x40>)
 8005498:	781b      	ldrb	r3, [r3, #0]
 800549a:	461a      	mov	r2, r3
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	4413      	add	r3, r2
 80054a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80054a2:	bf00      	nop
 80054a4:	f7ff ffde 	bl	8005464 <HAL_GetTick>
 80054a8:	4602      	mov	r2, r0
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	1ad3      	subs	r3, r2, r3
 80054ae:	68fa      	ldr	r2, [r7, #12]
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d8f7      	bhi.n	80054a4 <HAL_Delay+0x28>
  {
  }
}
 80054b4:	bf00      	nop
 80054b6:	3710      	adds	r7, #16
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}
 80054bc:	2000000c 	.word	0x2000000c

080054c0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80054c8:	2300      	movs	r3, #0
 80054ca:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d101      	bne.n	80054d6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	e033      	b.n	800553e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d109      	bne.n	80054f2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f7fd fdca 	bl	8003078 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f6:	f003 0310 	and.w	r3, r3, #16
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d118      	bne.n	8005530 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005502:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005506:	f023 0302 	bic.w	r3, r3, #2
 800550a:	f043 0202 	orr.w	r2, r3, #2
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 fa4a 	bl	80059ac <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005522:	f023 0303 	bic.w	r3, r3, #3
 8005526:	f043 0201 	orr.w	r2, r3, #1
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	641a      	str	r2, [r3, #64]	; 0x40
 800552e:	e001      	b.n	8005534 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800553c:	7bfb      	ldrb	r3, [r7, #15]
}
 800553e:	4618      	mov	r0, r3
 8005540:	3710      	adds	r7, #16
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
	...

08005548 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b086      	sub	sp, #24
 800554c:	af00      	add	r7, sp, #0
 800554e:	60f8      	str	r0, [r7, #12]
 8005550:	60b9      	str	r1, [r7, #8]
 8005552:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8005554:	2300      	movs	r3, #0
 8005556:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800555e:	2b01      	cmp	r3, #1
 8005560:	d101      	bne.n	8005566 <HAL_ADC_Start_DMA+0x1e>
 8005562:	2302      	movs	r3, #2
 8005564:	e0cc      	b.n	8005700 <HAL_ADC_Start_DMA+0x1b8>
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2201      	movs	r2, #1
 800556a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	f003 0301 	and.w	r3, r3, #1
 8005578:	2b01      	cmp	r3, #1
 800557a:	d018      	beq.n	80055ae <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	689a      	ldr	r2, [r3, #8]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f042 0201 	orr.w	r2, r2, #1
 800558a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800558c:	4b5e      	ldr	r3, [pc, #376]	; (8005708 <HAL_ADC_Start_DMA+0x1c0>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a5e      	ldr	r2, [pc, #376]	; (800570c <HAL_ADC_Start_DMA+0x1c4>)
 8005592:	fba2 2303 	umull	r2, r3, r2, r3
 8005596:	0c9a      	lsrs	r2, r3, #18
 8005598:	4613      	mov	r3, r2
 800559a:	005b      	lsls	r3, r3, #1
 800559c:	4413      	add	r3, r2
 800559e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80055a0:	e002      	b.n	80055a8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	3b01      	subs	r3, #1
 80055a6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d1f9      	bne.n	80055a2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	f003 0301 	and.w	r3, r3, #1
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	f040 80a0 	bne.w	80056fe <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80055c6:	f023 0301 	bic.w	r3, r3, #1
 80055ca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d007      	beq.n	80055f0 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80055e8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80055f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055fc:	d106      	bne.n	800560c <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005602:	f023 0206 	bic.w	r2, r3, #6
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	645a      	str	r2, [r3, #68]	; 0x44
 800560a:	e002      	b.n	8005612 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2200      	movs	r2, #0
 8005610:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2200      	movs	r2, #0
 8005616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800561a:	4b3d      	ldr	r3, [pc, #244]	; (8005710 <HAL_ADC_Start_DMA+0x1c8>)
 800561c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005622:	4a3c      	ldr	r2, [pc, #240]	; (8005714 <HAL_ADC_Start_DMA+0x1cc>)
 8005624:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800562a:	4a3b      	ldr	r2, [pc, #236]	; (8005718 <HAL_ADC_Start_DMA+0x1d0>)
 800562c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005632:	4a3a      	ldr	r2, [pc, #232]	; (800571c <HAL_ADC_Start_DMA+0x1d4>)
 8005634:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800563e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	685a      	ldr	r2, [r3, #4]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800564e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	689a      	ldr	r2, [r3, #8]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800565e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	334c      	adds	r3, #76	; 0x4c
 800566a:	4619      	mov	r1, r3
 800566c:	68ba      	ldr	r2, [r7, #8]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f000 fcda 	bl	8006028 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	f003 031f 	and.w	r3, r3, #31
 800567c:	2b00      	cmp	r3, #0
 800567e:	d12a      	bne.n	80056d6 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a26      	ldr	r2, [pc, #152]	; (8005720 <HAL_ADC_Start_DMA+0x1d8>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d015      	beq.n	80056b6 <HAL_ADC_Start_DMA+0x16e>
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a25      	ldr	r2, [pc, #148]	; (8005724 <HAL_ADC_Start_DMA+0x1dc>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d105      	bne.n	80056a0 <HAL_ADC_Start_DMA+0x158>
 8005694:	4b1e      	ldr	r3, [pc, #120]	; (8005710 <HAL_ADC_Start_DMA+0x1c8>)
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	f003 031f 	and.w	r3, r3, #31
 800569c:	2b00      	cmp	r3, #0
 800569e:	d00a      	beq.n	80056b6 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a20      	ldr	r2, [pc, #128]	; (8005728 <HAL_ADC_Start_DMA+0x1e0>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d129      	bne.n	80056fe <HAL_ADC_Start_DMA+0x1b6>
 80056aa:	4b19      	ldr	r3, [pc, #100]	; (8005710 <HAL_ADC_Start_DMA+0x1c8>)
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	f003 031f 	and.w	r3, r3, #31
 80056b2:	2b0f      	cmp	r3, #15
 80056b4:	d823      	bhi.n	80056fe <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d11c      	bne.n	80056fe <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	689a      	ldr	r2, [r3, #8]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80056d2:	609a      	str	r2, [r3, #8]
 80056d4:	e013      	b.n	80056fe <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a11      	ldr	r2, [pc, #68]	; (8005720 <HAL_ADC_Start_DMA+0x1d8>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d10e      	bne.n	80056fe <HAL_ADC_Start_DMA+0x1b6>
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d107      	bne.n	80056fe <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	689a      	ldr	r2, [r3, #8]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80056fc:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80056fe:	2300      	movs	r3, #0
}
 8005700:	4618      	mov	r0, r3
 8005702:	3718      	adds	r7, #24
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}
 8005708:	20000004 	.word	0x20000004
 800570c:	431bde83 	.word	0x431bde83
 8005710:	40012300 	.word	0x40012300
 8005714:	08005ba5 	.word	0x08005ba5
 8005718:	08005c5f 	.word	0x08005c5f
 800571c:	08005c7b 	.word	0x08005c7b
 8005720:	40012000 	.word	0x40012000
 8005724:	40012100 	.word	0x40012100
 8005728:	40012200 	.word	0x40012200

0800572c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800572c:	b480      	push	{r7}
 800572e:	b083      	sub	sp, #12
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8005734:	bf00      	nop
 8005736:	370c      	adds	r7, #12
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005740:	b480      	push	{r7}
 8005742:	b083      	sub	sp, #12
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8005748:	bf00      	nop
 800574a:	370c      	adds	r7, #12
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr

08005754 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005754:	b480      	push	{r7}
 8005756:	b083      	sub	sp, #12
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800575c:	bf00      	nop
 800575e:	370c      	adds	r7, #12
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr

08005768 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005768:	b480      	push	{r7}
 800576a:	b085      	sub	sp, #20
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005772:	2300      	movs	r3, #0
 8005774:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800577c:	2b01      	cmp	r3, #1
 800577e:	d101      	bne.n	8005784 <HAL_ADC_ConfigChannel+0x1c>
 8005780:	2302      	movs	r3, #2
 8005782:	e105      	b.n	8005990 <HAL_ADC_ConfigChannel+0x228>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2201      	movs	r2, #1
 8005788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	2b09      	cmp	r3, #9
 8005792:	d925      	bls.n	80057e0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	68d9      	ldr	r1, [r3, #12]
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	b29b      	uxth	r3, r3
 80057a0:	461a      	mov	r2, r3
 80057a2:	4613      	mov	r3, r2
 80057a4:	005b      	lsls	r3, r3, #1
 80057a6:	4413      	add	r3, r2
 80057a8:	3b1e      	subs	r3, #30
 80057aa:	2207      	movs	r2, #7
 80057ac:	fa02 f303 	lsl.w	r3, r2, r3
 80057b0:	43da      	mvns	r2, r3
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	400a      	ands	r2, r1
 80057b8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	68d9      	ldr	r1, [r3, #12]
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	689a      	ldr	r2, [r3, #8]
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	4618      	mov	r0, r3
 80057cc:	4603      	mov	r3, r0
 80057ce:	005b      	lsls	r3, r3, #1
 80057d0:	4403      	add	r3, r0
 80057d2:	3b1e      	subs	r3, #30
 80057d4:	409a      	lsls	r2, r3
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	430a      	orrs	r2, r1
 80057dc:	60da      	str	r2, [r3, #12]
 80057de:	e022      	b.n	8005826 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	6919      	ldr	r1, [r3, #16]
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	461a      	mov	r2, r3
 80057ee:	4613      	mov	r3, r2
 80057f0:	005b      	lsls	r3, r3, #1
 80057f2:	4413      	add	r3, r2
 80057f4:	2207      	movs	r2, #7
 80057f6:	fa02 f303 	lsl.w	r3, r2, r3
 80057fa:	43da      	mvns	r2, r3
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	400a      	ands	r2, r1
 8005802:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	6919      	ldr	r1, [r3, #16]
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	689a      	ldr	r2, [r3, #8]
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	b29b      	uxth	r3, r3
 8005814:	4618      	mov	r0, r3
 8005816:	4603      	mov	r3, r0
 8005818:	005b      	lsls	r3, r3, #1
 800581a:	4403      	add	r3, r0
 800581c:	409a      	lsls	r2, r3
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	430a      	orrs	r2, r1
 8005824:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	2b06      	cmp	r3, #6
 800582c:	d824      	bhi.n	8005878 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	685a      	ldr	r2, [r3, #4]
 8005838:	4613      	mov	r3, r2
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	4413      	add	r3, r2
 800583e:	3b05      	subs	r3, #5
 8005840:	221f      	movs	r2, #31
 8005842:	fa02 f303 	lsl.w	r3, r2, r3
 8005846:	43da      	mvns	r2, r3
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	400a      	ands	r2, r1
 800584e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	b29b      	uxth	r3, r3
 800585c:	4618      	mov	r0, r3
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	685a      	ldr	r2, [r3, #4]
 8005862:	4613      	mov	r3, r2
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	4413      	add	r3, r2
 8005868:	3b05      	subs	r3, #5
 800586a:	fa00 f203 	lsl.w	r2, r0, r3
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	430a      	orrs	r2, r1
 8005874:	635a      	str	r2, [r3, #52]	; 0x34
 8005876:	e04c      	b.n	8005912 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	2b0c      	cmp	r3, #12
 800587e:	d824      	bhi.n	80058ca <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	685a      	ldr	r2, [r3, #4]
 800588a:	4613      	mov	r3, r2
 800588c:	009b      	lsls	r3, r3, #2
 800588e:	4413      	add	r3, r2
 8005890:	3b23      	subs	r3, #35	; 0x23
 8005892:	221f      	movs	r2, #31
 8005894:	fa02 f303 	lsl.w	r3, r2, r3
 8005898:	43da      	mvns	r2, r3
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	400a      	ands	r2, r1
 80058a0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	4618      	mov	r0, r3
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	685a      	ldr	r2, [r3, #4]
 80058b4:	4613      	mov	r3, r2
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	4413      	add	r3, r2
 80058ba:	3b23      	subs	r3, #35	; 0x23
 80058bc:	fa00 f203 	lsl.w	r2, r0, r3
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	430a      	orrs	r2, r1
 80058c6:	631a      	str	r2, [r3, #48]	; 0x30
 80058c8:	e023      	b.n	8005912 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	685a      	ldr	r2, [r3, #4]
 80058d4:	4613      	mov	r3, r2
 80058d6:	009b      	lsls	r3, r3, #2
 80058d8:	4413      	add	r3, r2
 80058da:	3b41      	subs	r3, #65	; 0x41
 80058dc:	221f      	movs	r2, #31
 80058de:	fa02 f303 	lsl.w	r3, r2, r3
 80058e2:	43da      	mvns	r2, r3
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	400a      	ands	r2, r1
 80058ea:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	4618      	mov	r0, r3
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	685a      	ldr	r2, [r3, #4]
 80058fe:	4613      	mov	r3, r2
 8005900:	009b      	lsls	r3, r3, #2
 8005902:	4413      	add	r3, r2
 8005904:	3b41      	subs	r3, #65	; 0x41
 8005906:	fa00 f203 	lsl.w	r2, r0, r3
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	430a      	orrs	r2, r1
 8005910:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005912:	4b22      	ldr	r3, [pc, #136]	; (800599c <HAL_ADC_ConfigChannel+0x234>)
 8005914:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a21      	ldr	r2, [pc, #132]	; (80059a0 <HAL_ADC_ConfigChannel+0x238>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d109      	bne.n	8005934 <HAL_ADC_ConfigChannel+0x1cc>
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	2b12      	cmp	r3, #18
 8005926:	d105      	bne.n	8005934 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a19      	ldr	r2, [pc, #100]	; (80059a0 <HAL_ADC_ConfigChannel+0x238>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d123      	bne.n	8005986 <HAL_ADC_ConfigChannel+0x21e>
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	2b10      	cmp	r3, #16
 8005944:	d003      	beq.n	800594e <HAL_ADC_ConfigChannel+0x1e6>
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	2b11      	cmp	r3, #17
 800594c:	d11b      	bne.n	8005986 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	2b10      	cmp	r3, #16
 8005960:	d111      	bne.n	8005986 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005962:	4b10      	ldr	r3, [pc, #64]	; (80059a4 <HAL_ADC_ConfigChannel+0x23c>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a10      	ldr	r2, [pc, #64]	; (80059a8 <HAL_ADC_ConfigChannel+0x240>)
 8005968:	fba2 2303 	umull	r2, r3, r2, r3
 800596c:	0c9a      	lsrs	r2, r3, #18
 800596e:	4613      	mov	r3, r2
 8005970:	009b      	lsls	r3, r3, #2
 8005972:	4413      	add	r3, r2
 8005974:	005b      	lsls	r3, r3, #1
 8005976:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005978:	e002      	b.n	8005980 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	3b01      	subs	r3, #1
 800597e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d1f9      	bne.n	800597a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800598e:	2300      	movs	r3, #0
}
 8005990:	4618      	mov	r0, r3
 8005992:	3714      	adds	r7, #20
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr
 800599c:	40012300 	.word	0x40012300
 80059a0:	40012000 	.word	0x40012000
 80059a4:	20000004 	.word	0x20000004
 80059a8:	431bde83 	.word	0x431bde83

080059ac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b085      	sub	sp, #20
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80059b4:	4b79      	ldr	r3, [pc, #484]	; (8005b9c <ADC_Init+0x1f0>)
 80059b6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	685a      	ldr	r2, [r3, #4]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	431a      	orrs	r2, r3
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	685a      	ldr	r2, [r3, #4]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80059e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	6859      	ldr	r1, [r3, #4]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	691b      	ldr	r3, [r3, #16]
 80059ec:	021a      	lsls	r2, r3, #8
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	430a      	orrs	r2, r1
 80059f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	685a      	ldr	r2, [r3, #4]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005a04:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	6859      	ldr	r1, [r3, #4]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	689a      	ldr	r2, [r3, #8]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	430a      	orrs	r2, r1
 8005a16:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	689a      	ldr	r2, [r3, #8]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a26:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	6899      	ldr	r1, [r3, #8]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	68da      	ldr	r2, [r3, #12]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	430a      	orrs	r2, r1
 8005a38:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a3e:	4a58      	ldr	r2, [pc, #352]	; (8005ba0 <ADC_Init+0x1f4>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d022      	beq.n	8005a8a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	689a      	ldr	r2, [r3, #8]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005a52:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	6899      	ldr	r1, [r3, #8]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	430a      	orrs	r2, r1
 8005a64:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	689a      	ldr	r2, [r3, #8]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005a74:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	6899      	ldr	r1, [r3, #8]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	430a      	orrs	r2, r1
 8005a86:	609a      	str	r2, [r3, #8]
 8005a88:	e00f      	b.n	8005aaa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	689a      	ldr	r2, [r3, #8]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005a98:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	689a      	ldr	r2, [r3, #8]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005aa8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	689a      	ldr	r2, [r3, #8]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f022 0202 	bic.w	r2, r2, #2
 8005ab8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	6899      	ldr	r1, [r3, #8]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	7e1b      	ldrb	r3, [r3, #24]
 8005ac4:	005a      	lsls	r2, r3, #1
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	430a      	orrs	r2, r1
 8005acc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d01b      	beq.n	8005b10 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	685a      	ldr	r2, [r3, #4]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ae6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	685a      	ldr	r2, [r3, #4]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005af6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	6859      	ldr	r1, [r3, #4]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b02:	3b01      	subs	r3, #1
 8005b04:	035a      	lsls	r2, r3, #13
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	430a      	orrs	r2, r1
 8005b0c:	605a      	str	r2, [r3, #4]
 8005b0e:	e007      	b.n	8005b20 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	685a      	ldr	r2, [r3, #4]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b1e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005b2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	69db      	ldr	r3, [r3, #28]
 8005b3a:	3b01      	subs	r3, #1
 8005b3c:	051a      	lsls	r2, r3, #20
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	430a      	orrs	r2, r1
 8005b44:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	689a      	ldr	r2, [r3, #8]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005b54:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	6899      	ldr	r1, [r3, #8]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005b62:	025a      	lsls	r2, r3, #9
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	430a      	orrs	r2, r1
 8005b6a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	689a      	ldr	r2, [r3, #8]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b7a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	6899      	ldr	r1, [r3, #8]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	695b      	ldr	r3, [r3, #20]
 8005b86:	029a      	lsls	r2, r3, #10
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	430a      	orrs	r2, r1
 8005b8e:	609a      	str	r2, [r3, #8]
}
 8005b90:	bf00      	nop
 8005b92:	3714      	adds	r7, #20
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr
 8005b9c:	40012300 	.word	0x40012300
 8005ba0:	0f000001 	.word	0x0f000001

08005ba4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b084      	sub	sp, #16
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d13c      	bne.n	8005c38 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d12b      	bne.n	8005c30 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d127      	bne.n	8005c30 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d006      	beq.n	8005bfc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d119      	bne.n	8005c30 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	685a      	ldr	r2, [r3, #4]
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f022 0220 	bic.w	r2, r2, #32
 8005c0a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c10:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d105      	bne.n	8005c30 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c28:	f043 0201 	orr.w	r2, r3, #1
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005c30:	68f8      	ldr	r0, [r7, #12]
 8005c32:	f7ff fd7b 	bl	800572c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005c36:	e00e      	b.n	8005c56 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c3c:	f003 0310 	and.w	r3, r3, #16
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d003      	beq.n	8005c4c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8005c44:	68f8      	ldr	r0, [r7, #12]
 8005c46:	f7ff fd85 	bl	8005754 <HAL_ADC_ErrorCallback>
}
 8005c4a:	e004      	b.n	8005c56 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	4798      	blx	r3
}
 8005c56:	bf00      	nop
 8005c58:	3710      	adds	r7, #16
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}

08005c5e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005c5e:	b580      	push	{r7, lr}
 8005c60:	b084      	sub	sp, #16
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c6a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005c6c:	68f8      	ldr	r0, [r7, #12]
 8005c6e:	f7ff fd67 	bl	8005740 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005c72:	bf00      	nop
 8005c74:	3710      	adds	r7, #16
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}

08005c7a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8005c7a:	b580      	push	{r7, lr}
 8005c7c:	b084      	sub	sp, #16
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c86:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2240      	movs	r2, #64	; 0x40
 8005c8c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c92:	f043 0204 	orr.w	r2, r3, #4
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005c9a:	68f8      	ldr	r0, [r7, #12]
 8005c9c:	f7ff fd5a 	bl	8005754 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005ca0:	bf00      	nop
 8005ca2:	3710      	adds	r7, #16
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}

08005ca8 <__NVIC_SetPriorityGrouping>:
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b085      	sub	sp, #20
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f003 0307 	and.w	r3, r3, #7
 8005cb6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005cb8:	4b0c      	ldr	r3, [pc, #48]	; (8005cec <__NVIC_SetPriorityGrouping+0x44>)
 8005cba:	68db      	ldr	r3, [r3, #12]
 8005cbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005cbe:	68ba      	ldr	r2, [r7, #8]
 8005cc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005cc4:	4013      	ands	r3, r2
 8005cc6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005cd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005cd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005cda:	4a04      	ldr	r2, [pc, #16]	; (8005cec <__NVIC_SetPriorityGrouping+0x44>)
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	60d3      	str	r3, [r2, #12]
}
 8005ce0:	bf00      	nop
 8005ce2:	3714      	adds	r7, #20
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr
 8005cec:	e000ed00 	.word	0xe000ed00

08005cf0 <__NVIC_GetPriorityGrouping>:
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005cf4:	4b04      	ldr	r3, [pc, #16]	; (8005d08 <__NVIC_GetPriorityGrouping+0x18>)
 8005cf6:	68db      	ldr	r3, [r3, #12]
 8005cf8:	0a1b      	lsrs	r3, r3, #8
 8005cfa:	f003 0307 	and.w	r3, r3, #7
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr
 8005d08:	e000ed00 	.word	0xe000ed00

08005d0c <__NVIC_EnableIRQ>:
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b083      	sub	sp, #12
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	4603      	mov	r3, r0
 8005d14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	db0b      	blt.n	8005d36 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005d1e:	79fb      	ldrb	r3, [r7, #7]
 8005d20:	f003 021f 	and.w	r2, r3, #31
 8005d24:	4907      	ldr	r1, [pc, #28]	; (8005d44 <__NVIC_EnableIRQ+0x38>)
 8005d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d2a:	095b      	lsrs	r3, r3, #5
 8005d2c:	2001      	movs	r0, #1
 8005d2e:	fa00 f202 	lsl.w	r2, r0, r2
 8005d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005d36:	bf00      	nop
 8005d38:	370c      	adds	r7, #12
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr
 8005d42:	bf00      	nop
 8005d44:	e000e100 	.word	0xe000e100

08005d48 <__NVIC_SetPriority>:
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b083      	sub	sp, #12
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	4603      	mov	r3, r0
 8005d50:	6039      	str	r1, [r7, #0]
 8005d52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	db0a      	blt.n	8005d72 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	b2da      	uxtb	r2, r3
 8005d60:	490c      	ldr	r1, [pc, #48]	; (8005d94 <__NVIC_SetPriority+0x4c>)
 8005d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d66:	0112      	lsls	r2, r2, #4
 8005d68:	b2d2      	uxtb	r2, r2
 8005d6a:	440b      	add	r3, r1
 8005d6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005d70:	e00a      	b.n	8005d88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	b2da      	uxtb	r2, r3
 8005d76:	4908      	ldr	r1, [pc, #32]	; (8005d98 <__NVIC_SetPriority+0x50>)
 8005d78:	79fb      	ldrb	r3, [r7, #7]
 8005d7a:	f003 030f 	and.w	r3, r3, #15
 8005d7e:	3b04      	subs	r3, #4
 8005d80:	0112      	lsls	r2, r2, #4
 8005d82:	b2d2      	uxtb	r2, r2
 8005d84:	440b      	add	r3, r1
 8005d86:	761a      	strb	r2, [r3, #24]
}
 8005d88:	bf00      	nop
 8005d8a:	370c      	adds	r7, #12
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr
 8005d94:	e000e100 	.word	0xe000e100
 8005d98:	e000ed00 	.word	0xe000ed00

08005d9c <NVIC_EncodePriority>:
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b089      	sub	sp, #36	; 0x24
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	60b9      	str	r1, [r7, #8]
 8005da6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f003 0307 	and.w	r3, r3, #7
 8005dae:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005db0:	69fb      	ldr	r3, [r7, #28]
 8005db2:	f1c3 0307 	rsb	r3, r3, #7
 8005db6:	2b04      	cmp	r3, #4
 8005db8:	bf28      	it	cs
 8005dba:	2304      	movcs	r3, #4
 8005dbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005dbe:	69fb      	ldr	r3, [r7, #28]
 8005dc0:	3304      	adds	r3, #4
 8005dc2:	2b06      	cmp	r3, #6
 8005dc4:	d902      	bls.n	8005dcc <NVIC_EncodePriority+0x30>
 8005dc6:	69fb      	ldr	r3, [r7, #28]
 8005dc8:	3b03      	subs	r3, #3
 8005dca:	e000      	b.n	8005dce <NVIC_EncodePriority+0x32>
 8005dcc:	2300      	movs	r3, #0
 8005dce:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005dd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005dd4:	69bb      	ldr	r3, [r7, #24]
 8005dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8005dda:	43da      	mvns	r2, r3
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	401a      	ands	r2, r3
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005de4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	fa01 f303 	lsl.w	r3, r1, r3
 8005dee:	43d9      	mvns	r1, r3
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005df4:	4313      	orrs	r3, r2
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3724      	adds	r7, #36	; 0x24
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr
	...

08005e04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b082      	sub	sp, #8
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	3b01      	subs	r3, #1
 8005e10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005e14:	d301      	bcc.n	8005e1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005e16:	2301      	movs	r3, #1
 8005e18:	e00f      	b.n	8005e3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005e1a:	4a0a      	ldr	r2, [pc, #40]	; (8005e44 <SysTick_Config+0x40>)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	3b01      	subs	r3, #1
 8005e20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005e22:	210f      	movs	r1, #15
 8005e24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e28:	f7ff ff8e 	bl	8005d48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005e2c:	4b05      	ldr	r3, [pc, #20]	; (8005e44 <SysTick_Config+0x40>)
 8005e2e:	2200      	movs	r2, #0
 8005e30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005e32:	4b04      	ldr	r3, [pc, #16]	; (8005e44 <SysTick_Config+0x40>)
 8005e34:	2207      	movs	r2, #7
 8005e36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005e38:	2300      	movs	r3, #0
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3708      	adds	r7, #8
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}
 8005e42:	bf00      	nop
 8005e44:	e000e010 	.word	0xe000e010

08005e48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b082      	sub	sp, #8
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f7ff ff29 	bl	8005ca8 <__NVIC_SetPriorityGrouping>
}
 8005e56:	bf00      	nop
 8005e58:	3708      	adds	r7, #8
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}

08005e5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005e5e:	b580      	push	{r7, lr}
 8005e60:	b086      	sub	sp, #24
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	4603      	mov	r3, r0
 8005e66:	60b9      	str	r1, [r7, #8]
 8005e68:	607a      	str	r2, [r7, #4]
 8005e6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005e70:	f7ff ff3e 	bl	8005cf0 <__NVIC_GetPriorityGrouping>
 8005e74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	68b9      	ldr	r1, [r7, #8]
 8005e7a:	6978      	ldr	r0, [r7, #20]
 8005e7c:	f7ff ff8e 	bl	8005d9c <NVIC_EncodePriority>
 8005e80:	4602      	mov	r2, r0
 8005e82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e86:	4611      	mov	r1, r2
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f7ff ff5d 	bl	8005d48 <__NVIC_SetPriority>
}
 8005e8e:	bf00      	nop
 8005e90:	3718      	adds	r7, #24
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}

08005e96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e96:	b580      	push	{r7, lr}
 8005e98:	b082      	sub	sp, #8
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005ea0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f7ff ff31 	bl	8005d0c <__NVIC_EnableIRQ>
}
 8005eaa:	bf00      	nop
 8005eac:	3708      	adds	r7, #8
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}

08005eb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005eb2:	b580      	push	{r7, lr}
 8005eb4:	b082      	sub	sp, #8
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f7ff ffa2 	bl	8005e04 <SysTick_Config>
 8005ec0:	4603      	mov	r3, r0
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3708      	adds	r7, #8
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}
	...

08005ecc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b086      	sub	sp, #24
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005ed8:	f7ff fac4 	bl	8005464 <HAL_GetTick>
 8005edc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d101      	bne.n	8005ee8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	e099      	b.n	800601c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2200      	movs	r2, #0
 8005eec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2202      	movs	r2, #2
 8005ef4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f022 0201 	bic.w	r2, r2, #1
 8005f06:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005f08:	e00f      	b.n	8005f2a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005f0a:	f7ff faab 	bl	8005464 <HAL_GetTick>
 8005f0e:	4602      	mov	r2, r0
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	1ad3      	subs	r3, r2, r3
 8005f14:	2b05      	cmp	r3, #5
 8005f16:	d908      	bls.n	8005f2a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2220      	movs	r2, #32
 8005f1c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2203      	movs	r2, #3
 8005f22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005f26:	2303      	movs	r3, #3
 8005f28:	e078      	b.n	800601c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f003 0301 	and.w	r3, r3, #1
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d1e8      	bne.n	8005f0a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005f40:	697a      	ldr	r2, [r7, #20]
 8005f42:	4b38      	ldr	r3, [pc, #224]	; (8006024 <HAL_DMA_Init+0x158>)
 8005f44:	4013      	ands	r3, r2
 8005f46:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	685a      	ldr	r2, [r3, #4]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005f56:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	691b      	ldr	r3, [r3, #16]
 8005f5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f62:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	699b      	ldr	r3, [r3, #24]
 8005f68:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f6e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6a1b      	ldr	r3, [r3, #32]
 8005f74:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005f76:	697a      	ldr	r2, [r7, #20]
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f80:	2b04      	cmp	r3, #4
 8005f82:	d107      	bne.n	8005f94 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	697a      	ldr	r2, [r7, #20]
 8005f90:	4313      	orrs	r3, r2
 8005f92:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	697a      	ldr	r2, [r7, #20]
 8005f9a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	695b      	ldr	r3, [r3, #20]
 8005fa2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	f023 0307 	bic.w	r3, r3, #7
 8005faa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb0:	697a      	ldr	r2, [r7, #20]
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fba:	2b04      	cmp	r3, #4
 8005fbc:	d117      	bne.n	8005fee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fc2:	697a      	ldr	r2, [r7, #20]
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d00e      	beq.n	8005fee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f000 fa91 	bl	80064f8 <DMA_CheckFifoParam>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d008      	beq.n	8005fee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2240      	movs	r2, #64	; 0x40
 8005fe0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005fea:	2301      	movs	r3, #1
 8005fec:	e016      	b.n	800601c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	697a      	ldr	r2, [r7, #20]
 8005ff4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f000 fa48 	bl	800648c <DMA_CalcBaseAndBitshift>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006004:	223f      	movs	r2, #63	; 0x3f
 8006006:	409a      	lsls	r2, r3
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2201      	movs	r2, #1
 8006016:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800601a:	2300      	movs	r3, #0
}
 800601c:	4618      	mov	r0, r3
 800601e:	3718      	adds	r7, #24
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}
 8006024:	f010803f 	.word	0xf010803f

08006028 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b086      	sub	sp, #24
 800602c:	af00      	add	r7, sp, #0
 800602e:	60f8      	str	r0, [r7, #12]
 8006030:	60b9      	str	r1, [r7, #8]
 8006032:	607a      	str	r2, [r7, #4]
 8006034:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006036:	2300      	movs	r3, #0
 8006038:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800603e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006046:	2b01      	cmp	r3, #1
 8006048:	d101      	bne.n	800604e <HAL_DMA_Start_IT+0x26>
 800604a:	2302      	movs	r3, #2
 800604c:	e040      	b.n	80060d0 <HAL_DMA_Start_IT+0xa8>
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2201      	movs	r2, #1
 8006052:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800605c:	b2db      	uxtb	r3, r3
 800605e:	2b01      	cmp	r3, #1
 8006060:	d12f      	bne.n	80060c2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2202      	movs	r2, #2
 8006066:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2200      	movs	r2, #0
 800606e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	68b9      	ldr	r1, [r7, #8]
 8006076:	68f8      	ldr	r0, [r7, #12]
 8006078:	f000 f9da 	bl	8006430 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006080:	223f      	movs	r2, #63	; 0x3f
 8006082:	409a      	lsls	r2, r3
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	681a      	ldr	r2, [r3, #0]
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f042 0216 	orr.w	r2, r2, #22
 8006096:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800609c:	2b00      	cmp	r3, #0
 800609e:	d007      	beq.n	80060b0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	681a      	ldr	r2, [r3, #0]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f042 0208 	orr.w	r2, r2, #8
 80060ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	681a      	ldr	r2, [r3, #0]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f042 0201 	orr.w	r2, r2, #1
 80060be:	601a      	str	r2, [r3, #0]
 80060c0:	e005      	b.n	80060ce <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2200      	movs	r2, #0
 80060c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80060ca:	2302      	movs	r3, #2
 80060cc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80060ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	3718      	adds	r7, #24
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}

080060d8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80060d8:	b480      	push	{r7}
 80060da:	b083      	sub	sp, #12
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	2b02      	cmp	r3, #2
 80060ea:	d004      	beq.n	80060f6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2280      	movs	r2, #128	; 0x80
 80060f0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	e00c      	b.n	8006110 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2205      	movs	r2, #5
 80060fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f022 0201 	bic.w	r2, r2, #1
 800610c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800610e:	2300      	movs	r3, #0
}
 8006110:	4618      	mov	r0, r3
 8006112:	370c      	adds	r7, #12
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr

0800611c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b086      	sub	sp, #24
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006124:	2300      	movs	r3, #0
 8006126:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006128:	4b92      	ldr	r3, [pc, #584]	; (8006374 <HAL_DMA_IRQHandler+0x258>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a92      	ldr	r2, [pc, #584]	; (8006378 <HAL_DMA_IRQHandler+0x25c>)
 800612e:	fba2 2303 	umull	r2, r3, r2, r3
 8006132:	0a9b      	lsrs	r3, r3, #10
 8006134:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800613a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006146:	2208      	movs	r2, #8
 8006148:	409a      	lsls	r2, r3
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	4013      	ands	r3, r2
 800614e:	2b00      	cmp	r3, #0
 8006150:	d01a      	beq.n	8006188 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f003 0304 	and.w	r3, r3, #4
 800615c:	2b00      	cmp	r3, #0
 800615e:	d013      	beq.n	8006188 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f022 0204 	bic.w	r2, r2, #4
 800616e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006174:	2208      	movs	r2, #8
 8006176:	409a      	lsls	r2, r3
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006180:	f043 0201 	orr.w	r2, r3, #1
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800618c:	2201      	movs	r2, #1
 800618e:	409a      	lsls	r2, r3
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	4013      	ands	r3, r2
 8006194:	2b00      	cmp	r3, #0
 8006196:	d012      	beq.n	80061be <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	695b      	ldr	r3, [r3, #20]
 800619e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d00b      	beq.n	80061be <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061aa:	2201      	movs	r2, #1
 80061ac:	409a      	lsls	r2, r3
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061b6:	f043 0202 	orr.w	r2, r3, #2
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061c2:	2204      	movs	r2, #4
 80061c4:	409a      	lsls	r2, r3
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	4013      	ands	r3, r2
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d012      	beq.n	80061f4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f003 0302 	and.w	r3, r3, #2
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d00b      	beq.n	80061f4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061e0:	2204      	movs	r2, #4
 80061e2:	409a      	lsls	r2, r3
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061ec:	f043 0204 	orr.w	r2, r3, #4
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061f8:	2210      	movs	r2, #16
 80061fa:	409a      	lsls	r2, r3
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	4013      	ands	r3, r2
 8006200:	2b00      	cmp	r3, #0
 8006202:	d043      	beq.n	800628c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f003 0308 	and.w	r3, r3, #8
 800620e:	2b00      	cmp	r3, #0
 8006210:	d03c      	beq.n	800628c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006216:	2210      	movs	r2, #16
 8006218:	409a      	lsls	r2, r3
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006228:	2b00      	cmp	r3, #0
 800622a:	d018      	beq.n	800625e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006236:	2b00      	cmp	r3, #0
 8006238:	d108      	bne.n	800624c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800623e:	2b00      	cmp	r3, #0
 8006240:	d024      	beq.n	800628c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	4798      	blx	r3
 800624a:	e01f      	b.n	800628c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006250:	2b00      	cmp	r3, #0
 8006252:	d01b      	beq.n	800628c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	4798      	blx	r3
 800625c:	e016      	b.n	800628c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006268:	2b00      	cmp	r3, #0
 800626a:	d107      	bne.n	800627c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f022 0208 	bic.w	r2, r2, #8
 800627a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006280:	2b00      	cmp	r3, #0
 8006282:	d003      	beq.n	800628c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006290:	2220      	movs	r2, #32
 8006292:	409a      	lsls	r2, r3
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	4013      	ands	r3, r2
 8006298:	2b00      	cmp	r3, #0
 800629a:	f000 808e 	beq.w	80063ba <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f003 0310 	and.w	r3, r3, #16
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	f000 8086 	beq.w	80063ba <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062b2:	2220      	movs	r2, #32
 80062b4:	409a      	lsls	r2, r3
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80062c0:	b2db      	uxtb	r3, r3
 80062c2:	2b05      	cmp	r3, #5
 80062c4:	d136      	bne.n	8006334 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f022 0216 	bic.w	r2, r2, #22
 80062d4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	695a      	ldr	r2, [r3, #20]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80062e4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d103      	bne.n	80062f6 <HAL_DMA_IRQHandler+0x1da>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d007      	beq.n	8006306 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f022 0208 	bic.w	r2, r2, #8
 8006304:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800630a:	223f      	movs	r2, #63	; 0x3f
 800630c:	409a      	lsls	r2, r3
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2200      	movs	r2, #0
 8006316:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2201      	movs	r2, #1
 800631e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006326:	2b00      	cmp	r3, #0
 8006328:	d07d      	beq.n	8006426 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	4798      	blx	r3
        }
        return;
 8006332:	e078      	b.n	8006426 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800633e:	2b00      	cmp	r3, #0
 8006340:	d01c      	beq.n	800637c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800634c:	2b00      	cmp	r3, #0
 800634e:	d108      	bne.n	8006362 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006354:	2b00      	cmp	r3, #0
 8006356:	d030      	beq.n	80063ba <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	4798      	blx	r3
 8006360:	e02b      	b.n	80063ba <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006366:	2b00      	cmp	r3, #0
 8006368:	d027      	beq.n	80063ba <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	4798      	blx	r3
 8006372:	e022      	b.n	80063ba <HAL_DMA_IRQHandler+0x29e>
 8006374:	20000004 	.word	0x20000004
 8006378:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006386:	2b00      	cmp	r3, #0
 8006388:	d10f      	bne.n	80063aa <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f022 0210 	bic.w	r2, r2, #16
 8006398:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2200      	movs	r2, #0
 800639e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2201      	movs	r2, #1
 80063a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d003      	beq.n	80063ba <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d032      	beq.n	8006428 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063c6:	f003 0301 	and.w	r3, r3, #1
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d022      	beq.n	8006414 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2205      	movs	r2, #5
 80063d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f022 0201 	bic.w	r2, r2, #1
 80063e4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	3301      	adds	r3, #1
 80063ea:	60bb      	str	r3, [r7, #8]
 80063ec:	697a      	ldr	r2, [r7, #20]
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d307      	bcc.n	8006402 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f003 0301 	and.w	r3, r3, #1
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d1f2      	bne.n	80063e6 <HAL_DMA_IRQHandler+0x2ca>
 8006400:	e000      	b.n	8006404 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8006402:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2200      	movs	r2, #0
 8006408:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2201      	movs	r2, #1
 8006410:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006418:	2b00      	cmp	r3, #0
 800641a:	d005      	beq.n	8006428 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	4798      	blx	r3
 8006424:	e000      	b.n	8006428 <HAL_DMA_IRQHandler+0x30c>
        return;
 8006426:	bf00      	nop
    }
  }
}
 8006428:	3718      	adds	r7, #24
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}
 800642e:	bf00      	nop

08006430 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006430:	b480      	push	{r7}
 8006432:	b085      	sub	sp, #20
 8006434:	af00      	add	r7, sp, #0
 8006436:	60f8      	str	r0, [r7, #12]
 8006438:	60b9      	str	r1, [r7, #8]
 800643a:	607a      	str	r2, [r7, #4]
 800643c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800644c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	683a      	ldr	r2, [r7, #0]
 8006454:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	2b40      	cmp	r3, #64	; 0x40
 800645c:	d108      	bne.n	8006470 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	68ba      	ldr	r2, [r7, #8]
 800646c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800646e:	e007      	b.n	8006480 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	68ba      	ldr	r2, [r7, #8]
 8006476:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	687a      	ldr	r2, [r7, #4]
 800647e:	60da      	str	r2, [r3, #12]
}
 8006480:	bf00      	nop
 8006482:	3714      	adds	r7, #20
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr

0800648c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800648c:	b480      	push	{r7}
 800648e:	b085      	sub	sp, #20
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	b2db      	uxtb	r3, r3
 800649a:	3b10      	subs	r3, #16
 800649c:	4a14      	ldr	r2, [pc, #80]	; (80064f0 <DMA_CalcBaseAndBitshift+0x64>)
 800649e:	fba2 2303 	umull	r2, r3, r2, r3
 80064a2:	091b      	lsrs	r3, r3, #4
 80064a4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80064a6:	4a13      	ldr	r2, [pc, #76]	; (80064f4 <DMA_CalcBaseAndBitshift+0x68>)
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	4413      	add	r3, r2
 80064ac:	781b      	ldrb	r3, [r3, #0]
 80064ae:	461a      	mov	r2, r3
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2b03      	cmp	r3, #3
 80064b8:	d909      	bls.n	80064ce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80064c2:	f023 0303 	bic.w	r3, r3, #3
 80064c6:	1d1a      	adds	r2, r3, #4
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	659a      	str	r2, [r3, #88]	; 0x58
 80064cc:	e007      	b.n	80064de <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80064d6:	f023 0303 	bic.w	r3, r3, #3
 80064da:	687a      	ldr	r2, [r7, #4]
 80064dc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3714      	adds	r7, #20
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr
 80064ee:	bf00      	nop
 80064f0:	aaaaaaab 	.word	0xaaaaaaab
 80064f4:	0800d7f4 	.word	0x0800d7f4

080064f8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b085      	sub	sp, #20
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006500:	2300      	movs	r3, #0
 8006502:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006508:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	699b      	ldr	r3, [r3, #24]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d11f      	bne.n	8006552 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	2b03      	cmp	r3, #3
 8006516:	d855      	bhi.n	80065c4 <DMA_CheckFifoParam+0xcc>
 8006518:	a201      	add	r2, pc, #4	; (adr r2, 8006520 <DMA_CheckFifoParam+0x28>)
 800651a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800651e:	bf00      	nop
 8006520:	08006531 	.word	0x08006531
 8006524:	08006543 	.word	0x08006543
 8006528:	08006531 	.word	0x08006531
 800652c:	080065c5 	.word	0x080065c5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006534:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006538:	2b00      	cmp	r3, #0
 800653a:	d045      	beq.n	80065c8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800653c:	2301      	movs	r3, #1
 800653e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006540:	e042      	b.n	80065c8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006546:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800654a:	d13f      	bne.n	80065cc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800654c:	2301      	movs	r3, #1
 800654e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006550:	e03c      	b.n	80065cc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	699b      	ldr	r3, [r3, #24]
 8006556:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800655a:	d121      	bne.n	80065a0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	2b03      	cmp	r3, #3
 8006560:	d836      	bhi.n	80065d0 <DMA_CheckFifoParam+0xd8>
 8006562:	a201      	add	r2, pc, #4	; (adr r2, 8006568 <DMA_CheckFifoParam+0x70>)
 8006564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006568:	08006579 	.word	0x08006579
 800656c:	0800657f 	.word	0x0800657f
 8006570:	08006579 	.word	0x08006579
 8006574:	08006591 	.word	0x08006591
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006578:	2301      	movs	r3, #1
 800657a:	73fb      	strb	r3, [r7, #15]
      break;
 800657c:	e02f      	b.n	80065de <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006582:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006586:	2b00      	cmp	r3, #0
 8006588:	d024      	beq.n	80065d4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800658e:	e021      	b.n	80065d4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006594:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006598:	d11e      	bne.n	80065d8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800659a:	2301      	movs	r3, #1
 800659c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800659e:	e01b      	b.n	80065d8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	2b02      	cmp	r3, #2
 80065a4:	d902      	bls.n	80065ac <DMA_CheckFifoParam+0xb4>
 80065a6:	2b03      	cmp	r3, #3
 80065a8:	d003      	beq.n	80065b2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80065aa:	e018      	b.n	80065de <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80065ac:	2301      	movs	r3, #1
 80065ae:	73fb      	strb	r3, [r7, #15]
      break;
 80065b0:	e015      	b.n	80065de <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d00e      	beq.n	80065dc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80065be:	2301      	movs	r3, #1
 80065c0:	73fb      	strb	r3, [r7, #15]
      break;
 80065c2:	e00b      	b.n	80065dc <DMA_CheckFifoParam+0xe4>
      break;
 80065c4:	bf00      	nop
 80065c6:	e00a      	b.n	80065de <DMA_CheckFifoParam+0xe6>
      break;
 80065c8:	bf00      	nop
 80065ca:	e008      	b.n	80065de <DMA_CheckFifoParam+0xe6>
      break;
 80065cc:	bf00      	nop
 80065ce:	e006      	b.n	80065de <DMA_CheckFifoParam+0xe6>
      break;
 80065d0:	bf00      	nop
 80065d2:	e004      	b.n	80065de <DMA_CheckFifoParam+0xe6>
      break;
 80065d4:	bf00      	nop
 80065d6:	e002      	b.n	80065de <DMA_CheckFifoParam+0xe6>
      break;   
 80065d8:	bf00      	nop
 80065da:	e000      	b.n	80065de <DMA_CheckFifoParam+0xe6>
      break;
 80065dc:	bf00      	nop
    }
  } 
  
  return status; 
 80065de:	7bfb      	ldrb	r3, [r7, #15]
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3714      	adds	r7, #20
 80065e4:	46bd      	mov	sp, r7
 80065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ea:	4770      	bx	lr

080065ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b089      	sub	sp, #36	; 0x24
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
 80065f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80065f6:	2300      	movs	r3, #0
 80065f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80065fa:	2300      	movs	r3, #0
 80065fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80065fe:	2300      	movs	r3, #0
 8006600:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006602:	2300      	movs	r3, #0
 8006604:	61fb      	str	r3, [r7, #28]
 8006606:	e16b      	b.n	80068e0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006608:	2201      	movs	r2, #1
 800660a:	69fb      	ldr	r3, [r7, #28]
 800660c:	fa02 f303 	lsl.w	r3, r2, r3
 8006610:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	697a      	ldr	r2, [r7, #20]
 8006618:	4013      	ands	r3, r2
 800661a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800661c:	693a      	ldr	r2, [r7, #16]
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	429a      	cmp	r2, r3
 8006622:	f040 815a 	bne.w	80068da <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	2b01      	cmp	r3, #1
 800662c:	d00b      	beq.n	8006646 <HAL_GPIO_Init+0x5a>
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	2b02      	cmp	r3, #2
 8006634:	d007      	beq.n	8006646 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800663a:	2b11      	cmp	r3, #17
 800663c:	d003      	beq.n	8006646 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	2b12      	cmp	r3, #18
 8006644:	d130      	bne.n	80066a8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	689b      	ldr	r3, [r3, #8]
 800664a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800664c:	69fb      	ldr	r3, [r7, #28]
 800664e:	005b      	lsls	r3, r3, #1
 8006650:	2203      	movs	r2, #3
 8006652:	fa02 f303 	lsl.w	r3, r2, r3
 8006656:	43db      	mvns	r3, r3
 8006658:	69ba      	ldr	r2, [r7, #24]
 800665a:	4013      	ands	r3, r2
 800665c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	68da      	ldr	r2, [r3, #12]
 8006662:	69fb      	ldr	r3, [r7, #28]
 8006664:	005b      	lsls	r3, r3, #1
 8006666:	fa02 f303 	lsl.w	r3, r2, r3
 800666a:	69ba      	ldr	r2, [r7, #24]
 800666c:	4313      	orrs	r3, r2
 800666e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	69ba      	ldr	r2, [r7, #24]
 8006674:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800667c:	2201      	movs	r2, #1
 800667e:	69fb      	ldr	r3, [r7, #28]
 8006680:	fa02 f303 	lsl.w	r3, r2, r3
 8006684:	43db      	mvns	r3, r3
 8006686:	69ba      	ldr	r2, [r7, #24]
 8006688:	4013      	ands	r3, r2
 800668a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	091b      	lsrs	r3, r3, #4
 8006692:	f003 0201 	and.w	r2, r3, #1
 8006696:	69fb      	ldr	r3, [r7, #28]
 8006698:	fa02 f303 	lsl.w	r3, r2, r3
 800669c:	69ba      	ldr	r2, [r7, #24]
 800669e:	4313      	orrs	r3, r2
 80066a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	69ba      	ldr	r2, [r7, #24]
 80066a6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	68db      	ldr	r3, [r3, #12]
 80066ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80066ae:	69fb      	ldr	r3, [r7, #28]
 80066b0:	005b      	lsls	r3, r3, #1
 80066b2:	2203      	movs	r2, #3
 80066b4:	fa02 f303 	lsl.w	r3, r2, r3
 80066b8:	43db      	mvns	r3, r3
 80066ba:	69ba      	ldr	r2, [r7, #24]
 80066bc:	4013      	ands	r3, r2
 80066be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	689a      	ldr	r2, [r3, #8]
 80066c4:	69fb      	ldr	r3, [r7, #28]
 80066c6:	005b      	lsls	r3, r3, #1
 80066c8:	fa02 f303 	lsl.w	r3, r2, r3
 80066cc:	69ba      	ldr	r2, [r7, #24]
 80066ce:	4313      	orrs	r3, r2
 80066d0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	69ba      	ldr	r2, [r7, #24]
 80066d6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	2b02      	cmp	r3, #2
 80066de:	d003      	beq.n	80066e8 <HAL_GPIO_Init+0xfc>
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	2b12      	cmp	r3, #18
 80066e6:	d123      	bne.n	8006730 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80066e8:	69fb      	ldr	r3, [r7, #28]
 80066ea:	08da      	lsrs	r2, r3, #3
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	3208      	adds	r2, #8
 80066f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80066f6:	69fb      	ldr	r3, [r7, #28]
 80066f8:	f003 0307 	and.w	r3, r3, #7
 80066fc:	009b      	lsls	r3, r3, #2
 80066fe:	220f      	movs	r2, #15
 8006700:	fa02 f303 	lsl.w	r3, r2, r3
 8006704:	43db      	mvns	r3, r3
 8006706:	69ba      	ldr	r2, [r7, #24]
 8006708:	4013      	ands	r3, r2
 800670a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	691a      	ldr	r2, [r3, #16]
 8006710:	69fb      	ldr	r3, [r7, #28]
 8006712:	f003 0307 	and.w	r3, r3, #7
 8006716:	009b      	lsls	r3, r3, #2
 8006718:	fa02 f303 	lsl.w	r3, r2, r3
 800671c:	69ba      	ldr	r2, [r7, #24]
 800671e:	4313      	orrs	r3, r2
 8006720:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006722:	69fb      	ldr	r3, [r7, #28]
 8006724:	08da      	lsrs	r2, r3, #3
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	3208      	adds	r2, #8
 800672a:	69b9      	ldr	r1, [r7, #24]
 800672c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006736:	69fb      	ldr	r3, [r7, #28]
 8006738:	005b      	lsls	r3, r3, #1
 800673a:	2203      	movs	r2, #3
 800673c:	fa02 f303 	lsl.w	r3, r2, r3
 8006740:	43db      	mvns	r3, r3
 8006742:	69ba      	ldr	r2, [r7, #24]
 8006744:	4013      	ands	r3, r2
 8006746:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	f003 0203 	and.w	r2, r3, #3
 8006750:	69fb      	ldr	r3, [r7, #28]
 8006752:	005b      	lsls	r3, r3, #1
 8006754:	fa02 f303 	lsl.w	r3, r2, r3
 8006758:	69ba      	ldr	r2, [r7, #24]
 800675a:	4313      	orrs	r3, r2
 800675c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	69ba      	ldr	r2, [r7, #24]
 8006762:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800676c:	2b00      	cmp	r3, #0
 800676e:	f000 80b4 	beq.w	80068da <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006772:	2300      	movs	r3, #0
 8006774:	60fb      	str	r3, [r7, #12]
 8006776:	4b5f      	ldr	r3, [pc, #380]	; (80068f4 <HAL_GPIO_Init+0x308>)
 8006778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800677a:	4a5e      	ldr	r2, [pc, #376]	; (80068f4 <HAL_GPIO_Init+0x308>)
 800677c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006780:	6453      	str	r3, [r2, #68]	; 0x44
 8006782:	4b5c      	ldr	r3, [pc, #368]	; (80068f4 <HAL_GPIO_Init+0x308>)
 8006784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006786:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800678a:	60fb      	str	r3, [r7, #12]
 800678c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800678e:	4a5a      	ldr	r2, [pc, #360]	; (80068f8 <HAL_GPIO_Init+0x30c>)
 8006790:	69fb      	ldr	r3, [r7, #28]
 8006792:	089b      	lsrs	r3, r3, #2
 8006794:	3302      	adds	r3, #2
 8006796:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800679a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800679c:	69fb      	ldr	r3, [r7, #28]
 800679e:	f003 0303 	and.w	r3, r3, #3
 80067a2:	009b      	lsls	r3, r3, #2
 80067a4:	220f      	movs	r2, #15
 80067a6:	fa02 f303 	lsl.w	r3, r2, r3
 80067aa:	43db      	mvns	r3, r3
 80067ac:	69ba      	ldr	r2, [r7, #24]
 80067ae:	4013      	ands	r3, r2
 80067b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	4a51      	ldr	r2, [pc, #324]	; (80068fc <HAL_GPIO_Init+0x310>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d02b      	beq.n	8006812 <HAL_GPIO_Init+0x226>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	4a50      	ldr	r2, [pc, #320]	; (8006900 <HAL_GPIO_Init+0x314>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d025      	beq.n	800680e <HAL_GPIO_Init+0x222>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	4a4f      	ldr	r2, [pc, #316]	; (8006904 <HAL_GPIO_Init+0x318>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d01f      	beq.n	800680a <HAL_GPIO_Init+0x21e>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	4a4e      	ldr	r2, [pc, #312]	; (8006908 <HAL_GPIO_Init+0x31c>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d019      	beq.n	8006806 <HAL_GPIO_Init+0x21a>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	4a4d      	ldr	r2, [pc, #308]	; (800690c <HAL_GPIO_Init+0x320>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d013      	beq.n	8006802 <HAL_GPIO_Init+0x216>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	4a4c      	ldr	r2, [pc, #304]	; (8006910 <HAL_GPIO_Init+0x324>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d00d      	beq.n	80067fe <HAL_GPIO_Init+0x212>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	4a4b      	ldr	r2, [pc, #300]	; (8006914 <HAL_GPIO_Init+0x328>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d007      	beq.n	80067fa <HAL_GPIO_Init+0x20e>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	4a4a      	ldr	r2, [pc, #296]	; (8006918 <HAL_GPIO_Init+0x32c>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d101      	bne.n	80067f6 <HAL_GPIO_Init+0x20a>
 80067f2:	2307      	movs	r3, #7
 80067f4:	e00e      	b.n	8006814 <HAL_GPIO_Init+0x228>
 80067f6:	2308      	movs	r3, #8
 80067f8:	e00c      	b.n	8006814 <HAL_GPIO_Init+0x228>
 80067fa:	2306      	movs	r3, #6
 80067fc:	e00a      	b.n	8006814 <HAL_GPIO_Init+0x228>
 80067fe:	2305      	movs	r3, #5
 8006800:	e008      	b.n	8006814 <HAL_GPIO_Init+0x228>
 8006802:	2304      	movs	r3, #4
 8006804:	e006      	b.n	8006814 <HAL_GPIO_Init+0x228>
 8006806:	2303      	movs	r3, #3
 8006808:	e004      	b.n	8006814 <HAL_GPIO_Init+0x228>
 800680a:	2302      	movs	r3, #2
 800680c:	e002      	b.n	8006814 <HAL_GPIO_Init+0x228>
 800680e:	2301      	movs	r3, #1
 8006810:	e000      	b.n	8006814 <HAL_GPIO_Init+0x228>
 8006812:	2300      	movs	r3, #0
 8006814:	69fa      	ldr	r2, [r7, #28]
 8006816:	f002 0203 	and.w	r2, r2, #3
 800681a:	0092      	lsls	r2, r2, #2
 800681c:	4093      	lsls	r3, r2
 800681e:	69ba      	ldr	r2, [r7, #24]
 8006820:	4313      	orrs	r3, r2
 8006822:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006824:	4934      	ldr	r1, [pc, #208]	; (80068f8 <HAL_GPIO_Init+0x30c>)
 8006826:	69fb      	ldr	r3, [r7, #28]
 8006828:	089b      	lsrs	r3, r3, #2
 800682a:	3302      	adds	r3, #2
 800682c:	69ba      	ldr	r2, [r7, #24]
 800682e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006832:	4b3a      	ldr	r3, [pc, #232]	; (800691c <HAL_GPIO_Init+0x330>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	43db      	mvns	r3, r3
 800683c:	69ba      	ldr	r2, [r7, #24]
 800683e:	4013      	ands	r3, r2
 8006840:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800684a:	2b00      	cmp	r3, #0
 800684c:	d003      	beq.n	8006856 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800684e:	69ba      	ldr	r2, [r7, #24]
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	4313      	orrs	r3, r2
 8006854:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006856:	4a31      	ldr	r2, [pc, #196]	; (800691c <HAL_GPIO_Init+0x330>)
 8006858:	69bb      	ldr	r3, [r7, #24]
 800685a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800685c:	4b2f      	ldr	r3, [pc, #188]	; (800691c <HAL_GPIO_Init+0x330>)
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	43db      	mvns	r3, r3
 8006866:	69ba      	ldr	r2, [r7, #24]
 8006868:	4013      	ands	r3, r2
 800686a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006874:	2b00      	cmp	r3, #0
 8006876:	d003      	beq.n	8006880 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006878:	69ba      	ldr	r2, [r7, #24]
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	4313      	orrs	r3, r2
 800687e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006880:	4a26      	ldr	r2, [pc, #152]	; (800691c <HAL_GPIO_Init+0x330>)
 8006882:	69bb      	ldr	r3, [r7, #24]
 8006884:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006886:	4b25      	ldr	r3, [pc, #148]	; (800691c <HAL_GPIO_Init+0x330>)
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	43db      	mvns	r3, r3
 8006890:	69ba      	ldr	r2, [r7, #24]
 8006892:	4013      	ands	r3, r2
 8006894:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d003      	beq.n	80068aa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80068a2:	69ba      	ldr	r2, [r7, #24]
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	4313      	orrs	r3, r2
 80068a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80068aa:	4a1c      	ldr	r2, [pc, #112]	; (800691c <HAL_GPIO_Init+0x330>)
 80068ac:	69bb      	ldr	r3, [r7, #24]
 80068ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80068b0:	4b1a      	ldr	r3, [pc, #104]	; (800691c <HAL_GPIO_Init+0x330>)
 80068b2:	68db      	ldr	r3, [r3, #12]
 80068b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	43db      	mvns	r3, r3
 80068ba:	69ba      	ldr	r2, [r7, #24]
 80068bc:	4013      	ands	r3, r2
 80068be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d003      	beq.n	80068d4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80068cc:	69ba      	ldr	r2, [r7, #24]
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	4313      	orrs	r3, r2
 80068d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80068d4:	4a11      	ldr	r2, [pc, #68]	; (800691c <HAL_GPIO_Init+0x330>)
 80068d6:	69bb      	ldr	r3, [r7, #24]
 80068d8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80068da:	69fb      	ldr	r3, [r7, #28]
 80068dc:	3301      	adds	r3, #1
 80068de:	61fb      	str	r3, [r7, #28]
 80068e0:	69fb      	ldr	r3, [r7, #28]
 80068e2:	2b0f      	cmp	r3, #15
 80068e4:	f67f ae90 	bls.w	8006608 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80068e8:	bf00      	nop
 80068ea:	3724      	adds	r7, #36	; 0x24
 80068ec:	46bd      	mov	sp, r7
 80068ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f2:	4770      	bx	lr
 80068f4:	40023800 	.word	0x40023800
 80068f8:	40013800 	.word	0x40013800
 80068fc:	40020000 	.word	0x40020000
 8006900:	40020400 	.word	0x40020400
 8006904:	40020800 	.word	0x40020800
 8006908:	40020c00 	.word	0x40020c00
 800690c:	40021000 	.word	0x40021000
 8006910:	40021400 	.word	0x40021400
 8006914:	40021800 	.word	0x40021800
 8006918:	40021c00 	.word	0x40021c00
 800691c:	40013c00 	.word	0x40013c00

08006920 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b084      	sub	sp, #16
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d101      	bne.n	8006932 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	e11f      	b.n	8006b72 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006938:	b2db      	uxtb	r3, r3
 800693a:	2b00      	cmp	r3, #0
 800693c:	d106      	bne.n	800694c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2200      	movs	r2, #0
 8006942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f7fc fd10 	bl	800336c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2224      	movs	r2, #36	; 0x24
 8006950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	681a      	ldr	r2, [r3, #0]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f022 0201 	bic.w	r2, r2, #1
 8006962:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	681a      	ldr	r2, [r3, #0]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006972:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	681a      	ldr	r2, [r3, #0]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006982:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006984:	f001 f9e6 	bl	8007d54 <HAL_RCC_GetPCLK1Freq>
 8006988:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	4a7b      	ldr	r2, [pc, #492]	; (8006b7c <HAL_I2C_Init+0x25c>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d807      	bhi.n	80069a4 <HAL_I2C_Init+0x84>
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	4a7a      	ldr	r2, [pc, #488]	; (8006b80 <HAL_I2C_Init+0x260>)
 8006998:	4293      	cmp	r3, r2
 800699a:	bf94      	ite	ls
 800699c:	2301      	movls	r3, #1
 800699e:	2300      	movhi	r3, #0
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	e006      	b.n	80069b2 <HAL_I2C_Init+0x92>
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	4a77      	ldr	r2, [pc, #476]	; (8006b84 <HAL_I2C_Init+0x264>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	bf94      	ite	ls
 80069ac:	2301      	movls	r3, #1
 80069ae:	2300      	movhi	r3, #0
 80069b0:	b2db      	uxtb	r3, r3
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d001      	beq.n	80069ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80069b6:	2301      	movs	r3, #1
 80069b8:	e0db      	b.n	8006b72 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	4a72      	ldr	r2, [pc, #456]	; (8006b88 <HAL_I2C_Init+0x268>)
 80069be:	fba2 2303 	umull	r2, r3, r2, r3
 80069c2:	0c9b      	lsrs	r3, r3, #18
 80069c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	68ba      	ldr	r2, [r7, #8]
 80069d6:	430a      	orrs	r2, r1
 80069d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	6a1b      	ldr	r3, [r3, #32]
 80069e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	4a64      	ldr	r2, [pc, #400]	; (8006b7c <HAL_I2C_Init+0x25c>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d802      	bhi.n	80069f4 <HAL_I2C_Init+0xd4>
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	3301      	adds	r3, #1
 80069f2:	e009      	b.n	8006a08 <HAL_I2C_Init+0xe8>
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80069fa:	fb02 f303 	mul.w	r3, r2, r3
 80069fe:	4a63      	ldr	r2, [pc, #396]	; (8006b8c <HAL_I2C_Init+0x26c>)
 8006a00:	fba2 2303 	umull	r2, r3, r2, r3
 8006a04:	099b      	lsrs	r3, r3, #6
 8006a06:	3301      	adds	r3, #1
 8006a08:	687a      	ldr	r2, [r7, #4]
 8006a0a:	6812      	ldr	r2, [r2, #0]
 8006a0c:	430b      	orrs	r3, r1
 8006a0e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	69db      	ldr	r3, [r3, #28]
 8006a16:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006a1a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	4956      	ldr	r1, [pc, #344]	; (8006b7c <HAL_I2C_Init+0x25c>)
 8006a24:	428b      	cmp	r3, r1
 8006a26:	d80d      	bhi.n	8006a44 <HAL_I2C_Init+0x124>
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	1e59      	subs	r1, r3, #1
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	005b      	lsls	r3, r3, #1
 8006a32:	fbb1 f3f3 	udiv	r3, r1, r3
 8006a36:	3301      	adds	r3, #1
 8006a38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a3c:	2b04      	cmp	r3, #4
 8006a3e:	bf38      	it	cc
 8006a40:	2304      	movcc	r3, #4
 8006a42:	e04f      	b.n	8006ae4 <HAL_I2C_Init+0x1c4>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	689b      	ldr	r3, [r3, #8]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d111      	bne.n	8006a70 <HAL_I2C_Init+0x150>
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	1e58      	subs	r0, r3, #1
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6859      	ldr	r1, [r3, #4]
 8006a54:	460b      	mov	r3, r1
 8006a56:	005b      	lsls	r3, r3, #1
 8006a58:	440b      	add	r3, r1
 8006a5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8006a5e:	3301      	adds	r3, #1
 8006a60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	bf0c      	ite	eq
 8006a68:	2301      	moveq	r3, #1
 8006a6a:	2300      	movne	r3, #0
 8006a6c:	b2db      	uxtb	r3, r3
 8006a6e:	e012      	b.n	8006a96 <HAL_I2C_Init+0x176>
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	1e58      	subs	r0, r3, #1
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6859      	ldr	r1, [r3, #4]
 8006a78:	460b      	mov	r3, r1
 8006a7a:	009b      	lsls	r3, r3, #2
 8006a7c:	440b      	add	r3, r1
 8006a7e:	0099      	lsls	r1, r3, #2
 8006a80:	440b      	add	r3, r1
 8006a82:	fbb0 f3f3 	udiv	r3, r0, r3
 8006a86:	3301      	adds	r3, #1
 8006a88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	bf0c      	ite	eq
 8006a90:	2301      	moveq	r3, #1
 8006a92:	2300      	movne	r3, #0
 8006a94:	b2db      	uxtb	r3, r3
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d001      	beq.n	8006a9e <HAL_I2C_Init+0x17e>
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	e022      	b.n	8006ae4 <HAL_I2C_Init+0x1c4>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	689b      	ldr	r3, [r3, #8]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d10e      	bne.n	8006ac4 <HAL_I2C_Init+0x1a4>
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	1e58      	subs	r0, r3, #1
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6859      	ldr	r1, [r3, #4]
 8006aae:	460b      	mov	r3, r1
 8006ab0:	005b      	lsls	r3, r3, #1
 8006ab2:	440b      	add	r3, r1
 8006ab4:	fbb0 f3f3 	udiv	r3, r0, r3
 8006ab8:	3301      	adds	r3, #1
 8006aba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006abe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ac2:	e00f      	b.n	8006ae4 <HAL_I2C_Init+0x1c4>
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	1e58      	subs	r0, r3, #1
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6859      	ldr	r1, [r3, #4]
 8006acc:	460b      	mov	r3, r1
 8006ace:	009b      	lsls	r3, r3, #2
 8006ad0:	440b      	add	r3, r1
 8006ad2:	0099      	lsls	r1, r3, #2
 8006ad4:	440b      	add	r3, r1
 8006ad6:	fbb0 f3f3 	udiv	r3, r0, r3
 8006ada:	3301      	adds	r3, #1
 8006adc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ae0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006ae4:	6879      	ldr	r1, [r7, #4]
 8006ae6:	6809      	ldr	r1, [r1, #0]
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	69da      	ldr	r2, [r3, #28]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6a1b      	ldr	r3, [r3, #32]
 8006afe:	431a      	orrs	r2, r3
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	430a      	orrs	r2, r1
 8006b06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	689b      	ldr	r3, [r3, #8]
 8006b0e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006b12:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	6911      	ldr	r1, [r2, #16]
 8006b1a:	687a      	ldr	r2, [r7, #4]
 8006b1c:	68d2      	ldr	r2, [r2, #12]
 8006b1e:	4311      	orrs	r1, r2
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	6812      	ldr	r2, [r2, #0]
 8006b24:	430b      	orrs	r3, r1
 8006b26:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	68db      	ldr	r3, [r3, #12]
 8006b2e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	695a      	ldr	r2, [r3, #20]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	699b      	ldr	r3, [r3, #24]
 8006b3a:	431a      	orrs	r2, r3
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	430a      	orrs	r2, r1
 8006b42:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	681a      	ldr	r2, [r3, #0]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f042 0201 	orr.w	r2, r2, #1
 8006b52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2200      	movs	r2, #0
 8006b58:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2220      	movs	r2, #32
 8006b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2200      	movs	r2, #0
 8006b66:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006b70:	2300      	movs	r3, #0
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3710      	adds	r7, #16
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}
 8006b7a:	bf00      	nop
 8006b7c:	000186a0 	.word	0x000186a0
 8006b80:	001e847f 	.word	0x001e847f
 8006b84:	003d08ff 	.word	0x003d08ff
 8006b88:	431bde83 	.word	0x431bde83
 8006b8c:	10624dd3 	.word	0x10624dd3

08006b90 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b08c      	sub	sp, #48	; 0x30
 8006b94:	af02      	add	r7, sp, #8
 8006b96:	60f8      	str	r0, [r7, #12]
 8006b98:	4608      	mov	r0, r1
 8006b9a:	4611      	mov	r1, r2
 8006b9c:	461a      	mov	r2, r3
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	817b      	strh	r3, [r7, #10]
 8006ba2:	460b      	mov	r3, r1
 8006ba4:	813b      	strh	r3, [r7, #8]
 8006ba6:	4613      	mov	r3, r2
 8006ba8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006baa:	f7fe fc5b 	bl	8005464 <HAL_GetTick>
 8006bae:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bb6:	b2db      	uxtb	r3, r3
 8006bb8:	2b20      	cmp	r3, #32
 8006bba:	f040 8208 	bne.w	8006fce <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc0:	9300      	str	r3, [sp, #0]
 8006bc2:	2319      	movs	r3, #25
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	497b      	ldr	r1, [pc, #492]	; (8006db4 <HAL_I2C_Mem_Read+0x224>)
 8006bc8:	68f8      	ldr	r0, [r7, #12]
 8006bca:	f000 faed 	bl	80071a8 <I2C_WaitOnFlagUntilTimeout>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d001      	beq.n	8006bd8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006bd4:	2302      	movs	r3, #2
 8006bd6:	e1fb      	b.n	8006fd0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bde:	2b01      	cmp	r3, #1
 8006be0:	d101      	bne.n	8006be6 <HAL_I2C_Mem_Read+0x56>
 8006be2:	2302      	movs	r3, #2
 8006be4:	e1f4      	b.n	8006fd0 <HAL_I2C_Mem_Read+0x440>
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	2201      	movs	r2, #1
 8006bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f003 0301 	and.w	r3, r3, #1
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	d007      	beq.n	8006c0c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	681a      	ldr	r2, [r3, #0]
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f042 0201 	orr.w	r2, r2, #1
 8006c0a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	681a      	ldr	r2, [r3, #0]
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c1a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	2222      	movs	r2, #34	; 0x22
 8006c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	2240      	movs	r2, #64	; 0x40
 8006c28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c36:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006c3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c42:	b29a      	uxth	r2, r3
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	4a5b      	ldr	r2, [pc, #364]	; (8006db8 <HAL_I2C_Mem_Read+0x228>)
 8006c4c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006c4e:	88f8      	ldrh	r0, [r7, #6]
 8006c50:	893a      	ldrh	r2, [r7, #8]
 8006c52:	8979      	ldrh	r1, [r7, #10]
 8006c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c56:	9301      	str	r3, [sp, #4]
 8006c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c5a:	9300      	str	r3, [sp, #0]
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	68f8      	ldr	r0, [r7, #12]
 8006c60:	f000 f9bc 	bl	8006fdc <I2C_RequestMemoryRead>
 8006c64:	4603      	mov	r3, r0
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d001      	beq.n	8006c6e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	e1b0      	b.n	8006fd0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d113      	bne.n	8006c9e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c76:	2300      	movs	r3, #0
 8006c78:	623b      	str	r3, [r7, #32]
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	695b      	ldr	r3, [r3, #20]
 8006c80:	623b      	str	r3, [r7, #32]
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	699b      	ldr	r3, [r3, #24]
 8006c88:	623b      	str	r3, [r7, #32]
 8006c8a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	681a      	ldr	r2, [r3, #0]
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c9a:	601a      	str	r2, [r3, #0]
 8006c9c:	e184      	b.n	8006fa8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ca2:	2b01      	cmp	r3, #1
 8006ca4:	d11b      	bne.n	8006cde <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cb4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	61fb      	str	r3, [r7, #28]
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	695b      	ldr	r3, [r3, #20]
 8006cc0:	61fb      	str	r3, [r7, #28]
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	699b      	ldr	r3, [r3, #24]
 8006cc8:	61fb      	str	r3, [r7, #28]
 8006cca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	681a      	ldr	r2, [r3, #0]
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cda:	601a      	str	r2, [r3, #0]
 8006cdc:	e164      	b.n	8006fa8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ce2:	2b02      	cmp	r3, #2
 8006ce4:	d11b      	bne.n	8006d1e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	681a      	ldr	r2, [r3, #0]
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cf4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	681a      	ldr	r2, [r3, #0]
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d04:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d06:	2300      	movs	r3, #0
 8006d08:	61bb      	str	r3, [r7, #24]
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	695b      	ldr	r3, [r3, #20]
 8006d10:	61bb      	str	r3, [r7, #24]
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	699b      	ldr	r3, [r3, #24]
 8006d18:	61bb      	str	r3, [r7, #24]
 8006d1a:	69bb      	ldr	r3, [r7, #24]
 8006d1c:	e144      	b.n	8006fa8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d1e:	2300      	movs	r3, #0
 8006d20:	617b      	str	r3, [r7, #20]
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	695b      	ldr	r3, [r3, #20]
 8006d28:	617b      	str	r3, [r7, #20]
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	699b      	ldr	r3, [r3, #24]
 8006d30:	617b      	str	r3, [r7, #20]
 8006d32:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006d34:	e138      	b.n	8006fa8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d3a:	2b03      	cmp	r3, #3
 8006d3c:	f200 80f1 	bhi.w	8006f22 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	d123      	bne.n	8006d90 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d4a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006d4c:	68f8      	ldr	r0, [r7, #12]
 8006d4e:	f000 fb42 	bl	80073d6 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006d52:	4603      	mov	r3, r0
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d001      	beq.n	8006d5c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006d58:	2301      	movs	r3, #1
 8006d5a:	e139      	b.n	8006fd0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	691a      	ldr	r2, [r3, #16]
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d66:	b2d2      	uxtb	r2, r2
 8006d68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d6e:	1c5a      	adds	r2, r3, #1
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d78:	3b01      	subs	r3, #1
 8006d7a:	b29a      	uxth	r2, r3
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	3b01      	subs	r3, #1
 8006d88:	b29a      	uxth	r2, r3
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006d8e:	e10b      	b.n	8006fa8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d94:	2b02      	cmp	r3, #2
 8006d96:	d14e      	bne.n	8006e36 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9a:	9300      	str	r3, [sp, #0]
 8006d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d9e:	2200      	movs	r2, #0
 8006da0:	4906      	ldr	r1, [pc, #24]	; (8006dbc <HAL_I2C_Mem_Read+0x22c>)
 8006da2:	68f8      	ldr	r0, [r7, #12]
 8006da4:	f000 fa00 	bl	80071a8 <I2C_WaitOnFlagUntilTimeout>
 8006da8:	4603      	mov	r3, r0
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d008      	beq.n	8006dc0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006dae:	2301      	movs	r3, #1
 8006db0:	e10e      	b.n	8006fd0 <HAL_I2C_Mem_Read+0x440>
 8006db2:	bf00      	nop
 8006db4:	00100002 	.word	0x00100002
 8006db8:	ffff0000 	.word	0xffff0000
 8006dbc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	681a      	ldr	r2, [r3, #0]
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006dce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	691a      	ldr	r2, [r3, #16]
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dda:	b2d2      	uxtb	r2, r2
 8006ddc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de2:	1c5a      	adds	r2, r3, #1
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dec:	3b01      	subs	r3, #1
 8006dee:	b29a      	uxth	r2, r3
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006df8:	b29b      	uxth	r3, r3
 8006dfa:	3b01      	subs	r3, #1
 8006dfc:	b29a      	uxth	r2, r3
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	691a      	ldr	r2, [r3, #16]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e0c:	b2d2      	uxtb	r2, r2
 8006e0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e14:	1c5a      	adds	r2, r3, #1
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e1e:	3b01      	subs	r3, #1
 8006e20:	b29a      	uxth	r2, r3
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e2a:	b29b      	uxth	r3, r3
 8006e2c:	3b01      	subs	r3, #1
 8006e2e:	b29a      	uxth	r2, r3
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006e34:	e0b8      	b.n	8006fa8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e38:	9300      	str	r3, [sp, #0]
 8006e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	4966      	ldr	r1, [pc, #408]	; (8006fd8 <HAL_I2C_Mem_Read+0x448>)
 8006e40:	68f8      	ldr	r0, [r7, #12]
 8006e42:	f000 f9b1 	bl	80071a8 <I2C_WaitOnFlagUntilTimeout>
 8006e46:	4603      	mov	r3, r0
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d001      	beq.n	8006e50 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	e0bf      	b.n	8006fd0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	681a      	ldr	r2, [r3, #0]
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	691a      	ldr	r2, [r3, #16]
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e6a:	b2d2      	uxtb	r2, r2
 8006e6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e72:	1c5a      	adds	r2, r3, #1
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e7c:	3b01      	subs	r3, #1
 8006e7e:	b29a      	uxth	r2, r3
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	3b01      	subs	r3, #1
 8006e8c:	b29a      	uxth	r2, r3
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e94:	9300      	str	r3, [sp, #0]
 8006e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e98:	2200      	movs	r2, #0
 8006e9a:	494f      	ldr	r1, [pc, #316]	; (8006fd8 <HAL_I2C_Mem_Read+0x448>)
 8006e9c:	68f8      	ldr	r0, [r7, #12]
 8006e9e:	f000 f983 	bl	80071a8 <I2C_WaitOnFlagUntilTimeout>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d001      	beq.n	8006eac <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	e091      	b.n	8006fd0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	681a      	ldr	r2, [r3, #0]
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006eba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	691a      	ldr	r2, [r3, #16]
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec6:	b2d2      	uxtb	r2, r2
 8006ec8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ece:	1c5a      	adds	r2, r3, #1
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ed8:	3b01      	subs	r3, #1
 8006eda:	b29a      	uxth	r2, r3
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	3b01      	subs	r3, #1
 8006ee8:	b29a      	uxth	r2, r3
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	691a      	ldr	r2, [r3, #16]
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef8:	b2d2      	uxtb	r2, r2
 8006efa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f00:	1c5a      	adds	r2, r3, #1
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f0a:	3b01      	subs	r3, #1
 8006f0c:	b29a      	uxth	r2, r3
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f16:	b29b      	uxth	r3, r3
 8006f18:	3b01      	subs	r3, #1
 8006f1a:	b29a      	uxth	r2, r3
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006f20:	e042      	b.n	8006fa8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f24:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006f26:	68f8      	ldr	r0, [r7, #12]
 8006f28:	f000 fa55 	bl	80073d6 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d001      	beq.n	8006f36 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006f32:	2301      	movs	r3, #1
 8006f34:	e04c      	b.n	8006fd0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	691a      	ldr	r2, [r3, #16]
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f40:	b2d2      	uxtb	r2, r2
 8006f42:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f48:	1c5a      	adds	r2, r3, #1
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f52:	3b01      	subs	r3, #1
 8006f54:	b29a      	uxth	r2, r3
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f5e:	b29b      	uxth	r3, r3
 8006f60:	3b01      	subs	r3, #1
 8006f62:	b29a      	uxth	r2, r3
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	695b      	ldr	r3, [r3, #20]
 8006f6e:	f003 0304 	and.w	r3, r3, #4
 8006f72:	2b04      	cmp	r3, #4
 8006f74:	d118      	bne.n	8006fa8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	691a      	ldr	r2, [r3, #16]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f80:	b2d2      	uxtb	r2, r2
 8006f82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f88:	1c5a      	adds	r2, r3, #1
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f92:	3b01      	subs	r3, #1
 8006f94:	b29a      	uxth	r2, r3
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f9e:	b29b      	uxth	r3, r3
 8006fa0:	3b01      	subs	r3, #1
 8006fa2:	b29a      	uxth	r2, r3
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	f47f aec2 	bne.w	8006d36 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	2220      	movs	r2, #32
 8006fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	e000      	b.n	8006fd0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006fce:	2302      	movs	r3, #2
  }
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3728      	adds	r7, #40	; 0x28
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}
 8006fd8:	00010004 	.word	0x00010004

08006fdc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b088      	sub	sp, #32
 8006fe0:	af02      	add	r7, sp, #8
 8006fe2:	60f8      	str	r0, [r7, #12]
 8006fe4:	4608      	mov	r0, r1
 8006fe6:	4611      	mov	r1, r2
 8006fe8:	461a      	mov	r2, r3
 8006fea:	4603      	mov	r3, r0
 8006fec:	817b      	strh	r3, [r7, #10]
 8006fee:	460b      	mov	r3, r1
 8006ff0:	813b      	strh	r3, [r7, #8]
 8006ff2:	4613      	mov	r3, r2
 8006ff4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	681a      	ldr	r2, [r3, #0]
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007004:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	681a      	ldr	r2, [r3, #0]
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007014:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007018:	9300      	str	r3, [sp, #0]
 800701a:	6a3b      	ldr	r3, [r7, #32]
 800701c:	2200      	movs	r2, #0
 800701e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007022:	68f8      	ldr	r0, [r7, #12]
 8007024:	f000 f8c0 	bl	80071a8 <I2C_WaitOnFlagUntilTimeout>
 8007028:	4603      	mov	r3, r0
 800702a:	2b00      	cmp	r3, #0
 800702c:	d00c      	beq.n	8007048 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007038:	2b00      	cmp	r3, #0
 800703a:	d003      	beq.n	8007044 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007042:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007044:	2303      	movs	r3, #3
 8007046:	e0a9      	b.n	800719c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007048:	897b      	ldrh	r3, [r7, #10]
 800704a:	b2db      	uxtb	r3, r3
 800704c:	461a      	mov	r2, r3
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007056:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800705a:	6a3a      	ldr	r2, [r7, #32]
 800705c:	4951      	ldr	r1, [pc, #324]	; (80071a4 <I2C_RequestMemoryRead+0x1c8>)
 800705e:	68f8      	ldr	r0, [r7, #12]
 8007060:	f000 f8f9 	bl	8007256 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007064:	4603      	mov	r3, r0
 8007066:	2b00      	cmp	r3, #0
 8007068:	d001      	beq.n	800706e <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 800706a:	2301      	movs	r3, #1
 800706c:	e096      	b.n	800719c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800706e:	2300      	movs	r3, #0
 8007070:	617b      	str	r3, [r7, #20]
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	695b      	ldr	r3, [r3, #20]
 8007078:	617b      	str	r3, [r7, #20]
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	699b      	ldr	r3, [r3, #24]
 8007080:	617b      	str	r3, [r7, #20]
 8007082:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007084:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007086:	6a39      	ldr	r1, [r7, #32]
 8007088:	68f8      	ldr	r0, [r7, #12]
 800708a:	f000 f963 	bl	8007354 <I2C_WaitOnTXEFlagUntilTimeout>
 800708e:	4603      	mov	r3, r0
 8007090:	2b00      	cmp	r3, #0
 8007092:	d00d      	beq.n	80070b0 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007098:	2b04      	cmp	r3, #4
 800709a:	d107      	bne.n	80070ac <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070aa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80070ac:	2301      	movs	r3, #1
 80070ae:	e075      	b.n	800719c <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80070b0:	88fb      	ldrh	r3, [r7, #6]
 80070b2:	2b01      	cmp	r3, #1
 80070b4:	d105      	bne.n	80070c2 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80070b6:	893b      	ldrh	r3, [r7, #8]
 80070b8:	b2da      	uxtb	r2, r3
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	611a      	str	r2, [r3, #16]
 80070c0:	e021      	b.n	8007106 <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80070c2:	893b      	ldrh	r3, [r7, #8]
 80070c4:	0a1b      	lsrs	r3, r3, #8
 80070c6:	b29b      	uxth	r3, r3
 80070c8:	b2da      	uxtb	r2, r3
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80070d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070d2:	6a39      	ldr	r1, [r7, #32]
 80070d4:	68f8      	ldr	r0, [r7, #12]
 80070d6:	f000 f93d 	bl	8007354 <I2C_WaitOnTXEFlagUntilTimeout>
 80070da:	4603      	mov	r3, r0
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d00d      	beq.n	80070fc <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070e4:	2b04      	cmp	r3, #4
 80070e6:	d107      	bne.n	80070f8 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070f6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80070f8:	2301      	movs	r3, #1
 80070fa:	e04f      	b.n	800719c <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80070fc:	893b      	ldrh	r3, [r7, #8]
 80070fe:	b2da      	uxtb	r2, r3
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007106:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007108:	6a39      	ldr	r1, [r7, #32]
 800710a:	68f8      	ldr	r0, [r7, #12]
 800710c:	f000 f922 	bl	8007354 <I2C_WaitOnTXEFlagUntilTimeout>
 8007110:	4603      	mov	r3, r0
 8007112:	2b00      	cmp	r3, #0
 8007114:	d00d      	beq.n	8007132 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800711a:	2b04      	cmp	r3, #4
 800711c:	d107      	bne.n	800712e <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	681a      	ldr	r2, [r3, #0]
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800712c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800712e:	2301      	movs	r3, #1
 8007130:	e034      	b.n	800719c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	681a      	ldr	r2, [r3, #0]
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007140:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007144:	9300      	str	r3, [sp, #0]
 8007146:	6a3b      	ldr	r3, [r7, #32]
 8007148:	2200      	movs	r2, #0
 800714a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800714e:	68f8      	ldr	r0, [r7, #12]
 8007150:	f000 f82a 	bl	80071a8 <I2C_WaitOnFlagUntilTimeout>
 8007154:	4603      	mov	r3, r0
 8007156:	2b00      	cmp	r3, #0
 8007158:	d00c      	beq.n	8007174 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007164:	2b00      	cmp	r3, #0
 8007166:	d003      	beq.n	8007170 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800716e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007170:	2303      	movs	r3, #3
 8007172:	e013      	b.n	800719c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007174:	897b      	ldrh	r3, [r7, #10]
 8007176:	b2db      	uxtb	r3, r3
 8007178:	f043 0301 	orr.w	r3, r3, #1
 800717c:	b2da      	uxtb	r2, r3
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007186:	6a3a      	ldr	r2, [r7, #32]
 8007188:	4906      	ldr	r1, [pc, #24]	; (80071a4 <I2C_RequestMemoryRead+0x1c8>)
 800718a:	68f8      	ldr	r0, [r7, #12]
 800718c:	f000 f863 	bl	8007256 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007190:	4603      	mov	r3, r0
 8007192:	2b00      	cmp	r3, #0
 8007194:	d001      	beq.n	800719a <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 8007196:	2301      	movs	r3, #1
 8007198:	e000      	b.n	800719c <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 800719a:	2300      	movs	r3, #0
}
 800719c:	4618      	mov	r0, r3
 800719e:	3718      	adds	r7, #24
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}
 80071a4:	00010002 	.word	0x00010002

080071a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b084      	sub	sp, #16
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	60f8      	str	r0, [r7, #12]
 80071b0:	60b9      	str	r1, [r7, #8]
 80071b2:	603b      	str	r3, [r7, #0]
 80071b4:	4613      	mov	r3, r2
 80071b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80071b8:	e025      	b.n	8007206 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071c0:	d021      	beq.n	8007206 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071c2:	f7fe f94f 	bl	8005464 <HAL_GetTick>
 80071c6:	4602      	mov	r2, r0
 80071c8:	69bb      	ldr	r3, [r7, #24]
 80071ca:	1ad3      	subs	r3, r2, r3
 80071cc:	683a      	ldr	r2, [r7, #0]
 80071ce:	429a      	cmp	r2, r3
 80071d0:	d302      	bcc.n	80071d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d116      	bne.n	8007206 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	2200      	movs	r2, #0
 80071dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2220      	movs	r2, #32
 80071e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2200      	movs	r2, #0
 80071ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071f2:	f043 0220 	orr.w	r2, r3, #32
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2200      	movs	r2, #0
 80071fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007202:	2301      	movs	r3, #1
 8007204:	e023      	b.n	800724e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	0c1b      	lsrs	r3, r3, #16
 800720a:	b2db      	uxtb	r3, r3
 800720c:	2b01      	cmp	r3, #1
 800720e:	d10d      	bne.n	800722c <I2C_WaitOnFlagUntilTimeout+0x84>
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	695b      	ldr	r3, [r3, #20]
 8007216:	43da      	mvns	r2, r3
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	4013      	ands	r3, r2
 800721c:	b29b      	uxth	r3, r3
 800721e:	2b00      	cmp	r3, #0
 8007220:	bf0c      	ite	eq
 8007222:	2301      	moveq	r3, #1
 8007224:	2300      	movne	r3, #0
 8007226:	b2db      	uxtb	r3, r3
 8007228:	461a      	mov	r2, r3
 800722a:	e00c      	b.n	8007246 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	699b      	ldr	r3, [r3, #24]
 8007232:	43da      	mvns	r2, r3
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	4013      	ands	r3, r2
 8007238:	b29b      	uxth	r3, r3
 800723a:	2b00      	cmp	r3, #0
 800723c:	bf0c      	ite	eq
 800723e:	2301      	moveq	r3, #1
 8007240:	2300      	movne	r3, #0
 8007242:	b2db      	uxtb	r3, r3
 8007244:	461a      	mov	r2, r3
 8007246:	79fb      	ldrb	r3, [r7, #7]
 8007248:	429a      	cmp	r2, r3
 800724a:	d0b6      	beq.n	80071ba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800724c:	2300      	movs	r3, #0
}
 800724e:	4618      	mov	r0, r3
 8007250:	3710      	adds	r7, #16
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}

08007256 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007256:	b580      	push	{r7, lr}
 8007258:	b084      	sub	sp, #16
 800725a:	af00      	add	r7, sp, #0
 800725c:	60f8      	str	r0, [r7, #12]
 800725e:	60b9      	str	r1, [r7, #8]
 8007260:	607a      	str	r2, [r7, #4]
 8007262:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007264:	e051      	b.n	800730a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	695b      	ldr	r3, [r3, #20]
 800726c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007270:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007274:	d123      	bne.n	80072be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	681a      	ldr	r2, [r3, #0]
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007284:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800728e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	2200      	movs	r2, #0
 8007294:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2220      	movs	r2, #32
 800729a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2200      	movs	r2, #0
 80072a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072aa:	f043 0204 	orr.w	r2, r3, #4
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2200      	movs	r2, #0
 80072b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80072ba:	2301      	movs	r3, #1
 80072bc:	e046      	b.n	800734c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80072c4:	d021      	beq.n	800730a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072c6:	f7fe f8cd 	bl	8005464 <HAL_GetTick>
 80072ca:	4602      	mov	r2, r0
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	1ad3      	subs	r3, r2, r3
 80072d0:	687a      	ldr	r2, [r7, #4]
 80072d2:	429a      	cmp	r2, r3
 80072d4:	d302      	bcc.n	80072dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d116      	bne.n	800730a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	2200      	movs	r2, #0
 80072e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	2220      	movs	r2, #32
 80072e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	2200      	movs	r2, #0
 80072ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072f6:	f043 0220 	orr.w	r2, r3, #32
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2200      	movs	r2, #0
 8007302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007306:	2301      	movs	r3, #1
 8007308:	e020      	b.n	800734c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	0c1b      	lsrs	r3, r3, #16
 800730e:	b2db      	uxtb	r3, r3
 8007310:	2b01      	cmp	r3, #1
 8007312:	d10c      	bne.n	800732e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	695b      	ldr	r3, [r3, #20]
 800731a:	43da      	mvns	r2, r3
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	4013      	ands	r3, r2
 8007320:	b29b      	uxth	r3, r3
 8007322:	2b00      	cmp	r3, #0
 8007324:	bf14      	ite	ne
 8007326:	2301      	movne	r3, #1
 8007328:	2300      	moveq	r3, #0
 800732a:	b2db      	uxtb	r3, r3
 800732c:	e00b      	b.n	8007346 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	699b      	ldr	r3, [r3, #24]
 8007334:	43da      	mvns	r2, r3
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	4013      	ands	r3, r2
 800733a:	b29b      	uxth	r3, r3
 800733c:	2b00      	cmp	r3, #0
 800733e:	bf14      	ite	ne
 8007340:	2301      	movne	r3, #1
 8007342:	2300      	moveq	r3, #0
 8007344:	b2db      	uxtb	r3, r3
 8007346:	2b00      	cmp	r3, #0
 8007348:	d18d      	bne.n	8007266 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800734a:	2300      	movs	r3, #0
}
 800734c:	4618      	mov	r0, r3
 800734e:	3710      	adds	r7, #16
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}

08007354 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b084      	sub	sp, #16
 8007358:	af00      	add	r7, sp, #0
 800735a:	60f8      	str	r0, [r7, #12]
 800735c:	60b9      	str	r1, [r7, #8]
 800735e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007360:	e02d      	b.n	80073be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007362:	68f8      	ldr	r0, [r7, #12]
 8007364:	f000 f88d 	bl	8007482 <I2C_IsAcknowledgeFailed>
 8007368:	4603      	mov	r3, r0
 800736a:	2b00      	cmp	r3, #0
 800736c:	d001      	beq.n	8007372 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800736e:	2301      	movs	r3, #1
 8007370:	e02d      	b.n	80073ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007378:	d021      	beq.n	80073be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800737a:	f7fe f873 	bl	8005464 <HAL_GetTick>
 800737e:	4602      	mov	r2, r0
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	1ad3      	subs	r3, r2, r3
 8007384:	68ba      	ldr	r2, [r7, #8]
 8007386:	429a      	cmp	r2, r3
 8007388:	d302      	bcc.n	8007390 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d116      	bne.n	80073be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2200      	movs	r2, #0
 8007394:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	2220      	movs	r2, #32
 800739a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2200      	movs	r2, #0
 80073a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073aa:	f043 0220 	orr.w	r2, r3, #32
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2200      	movs	r2, #0
 80073b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80073ba:	2301      	movs	r3, #1
 80073bc:	e007      	b.n	80073ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	695b      	ldr	r3, [r3, #20]
 80073c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073c8:	2b80      	cmp	r3, #128	; 0x80
 80073ca:	d1ca      	bne.n	8007362 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80073cc:	2300      	movs	r3, #0
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3710      	adds	r7, #16
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}

080073d6 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80073d6:	b580      	push	{r7, lr}
 80073d8:	b084      	sub	sp, #16
 80073da:	af00      	add	r7, sp, #0
 80073dc:	60f8      	str	r0, [r7, #12]
 80073de:	60b9      	str	r1, [r7, #8]
 80073e0:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80073e2:	e042      	b.n	800746a <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	695b      	ldr	r3, [r3, #20]
 80073ea:	f003 0310 	and.w	r3, r3, #16
 80073ee:	2b10      	cmp	r3, #16
 80073f0:	d119      	bne.n	8007426 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f06f 0210 	mvn.w	r2, #16
 80073fa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2200      	movs	r2, #0
 8007400:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	2220      	movs	r2, #32
 8007406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2200      	movs	r2, #0
 800740e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2200      	movs	r2, #0
 800741e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007422:	2301      	movs	r3, #1
 8007424:	e029      	b.n	800747a <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007426:	f7fe f81d 	bl	8005464 <HAL_GetTick>
 800742a:	4602      	mov	r2, r0
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	1ad3      	subs	r3, r2, r3
 8007430:	68ba      	ldr	r2, [r7, #8]
 8007432:	429a      	cmp	r2, r3
 8007434:	d302      	bcc.n	800743c <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d116      	bne.n	800746a <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	2200      	movs	r2, #0
 8007440:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	2220      	movs	r2, #32
 8007446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2200      	movs	r2, #0
 800744e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007456:	f043 0220 	orr.w	r2, r3, #32
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	2200      	movs	r2, #0
 8007462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007466:	2301      	movs	r3, #1
 8007468:	e007      	b.n	800747a <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	695b      	ldr	r3, [r3, #20]
 8007470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007474:	2b40      	cmp	r3, #64	; 0x40
 8007476:	d1b5      	bne.n	80073e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007478:	2300      	movs	r3, #0
}
 800747a:	4618      	mov	r0, r3
 800747c:	3710      	adds	r7, #16
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}

08007482 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007482:	b480      	push	{r7}
 8007484:	b083      	sub	sp, #12
 8007486:	af00      	add	r7, sp, #0
 8007488:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	695b      	ldr	r3, [r3, #20]
 8007490:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007494:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007498:	d11b      	bne.n	80074d2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80074a2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2200      	movs	r2, #0
 80074a8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2220      	movs	r2, #32
 80074ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2200      	movs	r2, #0
 80074b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074be:	f043 0204 	orr.w	r2, r3, #4
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2200      	movs	r2, #0
 80074ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80074ce:	2301      	movs	r3, #1
 80074d0:	e000      	b.n	80074d4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80074d2:	2300      	movs	r3, #0
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	370c      	adds	r7, #12
 80074d8:	46bd      	mov	sp, r7
 80074da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074de:	4770      	bx	lr

080074e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b086      	sub	sp, #24
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d101      	bne.n	80074f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80074ee:	2301      	movs	r3, #1
 80074f0:	e25b      	b.n	80079aa <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f003 0301 	and.w	r3, r3, #1
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d075      	beq.n	80075ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80074fe:	4ba3      	ldr	r3, [pc, #652]	; (800778c <HAL_RCC_OscConfig+0x2ac>)
 8007500:	689b      	ldr	r3, [r3, #8]
 8007502:	f003 030c 	and.w	r3, r3, #12
 8007506:	2b04      	cmp	r3, #4
 8007508:	d00c      	beq.n	8007524 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800750a:	4ba0      	ldr	r3, [pc, #640]	; (800778c <HAL_RCC_OscConfig+0x2ac>)
 800750c:	689b      	ldr	r3, [r3, #8]
 800750e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007512:	2b08      	cmp	r3, #8
 8007514:	d112      	bne.n	800753c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007516:	4b9d      	ldr	r3, [pc, #628]	; (800778c <HAL_RCC_OscConfig+0x2ac>)
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800751e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007522:	d10b      	bne.n	800753c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007524:	4b99      	ldr	r3, [pc, #612]	; (800778c <HAL_RCC_OscConfig+0x2ac>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800752c:	2b00      	cmp	r3, #0
 800752e:	d05b      	beq.n	80075e8 <HAL_RCC_OscConfig+0x108>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d157      	bne.n	80075e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007538:	2301      	movs	r3, #1
 800753a:	e236      	b.n	80079aa <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	685b      	ldr	r3, [r3, #4]
 8007540:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007544:	d106      	bne.n	8007554 <HAL_RCC_OscConfig+0x74>
 8007546:	4b91      	ldr	r3, [pc, #580]	; (800778c <HAL_RCC_OscConfig+0x2ac>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a90      	ldr	r2, [pc, #576]	; (800778c <HAL_RCC_OscConfig+0x2ac>)
 800754c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007550:	6013      	str	r3, [r2, #0]
 8007552:	e01d      	b.n	8007590 <HAL_RCC_OscConfig+0xb0>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800755c:	d10c      	bne.n	8007578 <HAL_RCC_OscConfig+0x98>
 800755e:	4b8b      	ldr	r3, [pc, #556]	; (800778c <HAL_RCC_OscConfig+0x2ac>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4a8a      	ldr	r2, [pc, #552]	; (800778c <HAL_RCC_OscConfig+0x2ac>)
 8007564:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007568:	6013      	str	r3, [r2, #0]
 800756a:	4b88      	ldr	r3, [pc, #544]	; (800778c <HAL_RCC_OscConfig+0x2ac>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4a87      	ldr	r2, [pc, #540]	; (800778c <HAL_RCC_OscConfig+0x2ac>)
 8007570:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007574:	6013      	str	r3, [r2, #0]
 8007576:	e00b      	b.n	8007590 <HAL_RCC_OscConfig+0xb0>
 8007578:	4b84      	ldr	r3, [pc, #528]	; (800778c <HAL_RCC_OscConfig+0x2ac>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a83      	ldr	r2, [pc, #524]	; (800778c <HAL_RCC_OscConfig+0x2ac>)
 800757e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007582:	6013      	str	r3, [r2, #0]
 8007584:	4b81      	ldr	r3, [pc, #516]	; (800778c <HAL_RCC_OscConfig+0x2ac>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a80      	ldr	r2, [pc, #512]	; (800778c <HAL_RCC_OscConfig+0x2ac>)
 800758a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800758e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d013      	beq.n	80075c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007598:	f7fd ff64 	bl	8005464 <HAL_GetTick>
 800759c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800759e:	e008      	b.n	80075b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80075a0:	f7fd ff60 	bl	8005464 <HAL_GetTick>
 80075a4:	4602      	mov	r2, r0
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	1ad3      	subs	r3, r2, r3
 80075aa:	2b64      	cmp	r3, #100	; 0x64
 80075ac:	d901      	bls.n	80075b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80075ae:	2303      	movs	r3, #3
 80075b0:	e1fb      	b.n	80079aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80075b2:	4b76      	ldr	r3, [pc, #472]	; (800778c <HAL_RCC_OscConfig+0x2ac>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d0f0      	beq.n	80075a0 <HAL_RCC_OscConfig+0xc0>
 80075be:	e014      	b.n	80075ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075c0:	f7fd ff50 	bl	8005464 <HAL_GetTick>
 80075c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80075c6:	e008      	b.n	80075da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80075c8:	f7fd ff4c 	bl	8005464 <HAL_GetTick>
 80075cc:	4602      	mov	r2, r0
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	1ad3      	subs	r3, r2, r3
 80075d2:	2b64      	cmp	r3, #100	; 0x64
 80075d4:	d901      	bls.n	80075da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80075d6:	2303      	movs	r3, #3
 80075d8:	e1e7      	b.n	80079aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80075da:	4b6c      	ldr	r3, [pc, #432]	; (800778c <HAL_RCC_OscConfig+0x2ac>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d1f0      	bne.n	80075c8 <HAL_RCC_OscConfig+0xe8>
 80075e6:	e000      	b.n	80075ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80075e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f003 0302 	and.w	r3, r3, #2
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d063      	beq.n	80076be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80075f6:	4b65      	ldr	r3, [pc, #404]	; (800778c <HAL_RCC_OscConfig+0x2ac>)
 80075f8:	689b      	ldr	r3, [r3, #8]
 80075fa:	f003 030c 	and.w	r3, r3, #12
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d00b      	beq.n	800761a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007602:	4b62      	ldr	r3, [pc, #392]	; (800778c <HAL_RCC_OscConfig+0x2ac>)
 8007604:	689b      	ldr	r3, [r3, #8]
 8007606:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800760a:	2b08      	cmp	r3, #8
 800760c:	d11c      	bne.n	8007648 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800760e:	4b5f      	ldr	r3, [pc, #380]	; (800778c <HAL_RCC_OscConfig+0x2ac>)
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007616:	2b00      	cmp	r3, #0
 8007618:	d116      	bne.n	8007648 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800761a:	4b5c      	ldr	r3, [pc, #368]	; (800778c <HAL_RCC_OscConfig+0x2ac>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f003 0302 	and.w	r3, r3, #2
 8007622:	2b00      	cmp	r3, #0
 8007624:	d005      	beq.n	8007632 <HAL_RCC_OscConfig+0x152>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	68db      	ldr	r3, [r3, #12]
 800762a:	2b01      	cmp	r3, #1
 800762c:	d001      	beq.n	8007632 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800762e:	2301      	movs	r3, #1
 8007630:	e1bb      	b.n	80079aa <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007632:	4b56      	ldr	r3, [pc, #344]	; (800778c <HAL_RCC_OscConfig+0x2ac>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	691b      	ldr	r3, [r3, #16]
 800763e:	00db      	lsls	r3, r3, #3
 8007640:	4952      	ldr	r1, [pc, #328]	; (800778c <HAL_RCC_OscConfig+0x2ac>)
 8007642:	4313      	orrs	r3, r2
 8007644:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007646:	e03a      	b.n	80076be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	68db      	ldr	r3, [r3, #12]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d020      	beq.n	8007692 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007650:	4b4f      	ldr	r3, [pc, #316]	; (8007790 <HAL_RCC_OscConfig+0x2b0>)
 8007652:	2201      	movs	r2, #1
 8007654:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007656:	f7fd ff05 	bl	8005464 <HAL_GetTick>
 800765a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800765c:	e008      	b.n	8007670 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800765e:	f7fd ff01 	bl	8005464 <HAL_GetTick>
 8007662:	4602      	mov	r2, r0
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	1ad3      	subs	r3, r2, r3
 8007668:	2b02      	cmp	r3, #2
 800766a:	d901      	bls.n	8007670 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800766c:	2303      	movs	r3, #3
 800766e:	e19c      	b.n	80079aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007670:	4b46      	ldr	r3, [pc, #280]	; (800778c <HAL_RCC_OscConfig+0x2ac>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f003 0302 	and.w	r3, r3, #2
 8007678:	2b00      	cmp	r3, #0
 800767a:	d0f0      	beq.n	800765e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800767c:	4b43      	ldr	r3, [pc, #268]	; (800778c <HAL_RCC_OscConfig+0x2ac>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	691b      	ldr	r3, [r3, #16]
 8007688:	00db      	lsls	r3, r3, #3
 800768a:	4940      	ldr	r1, [pc, #256]	; (800778c <HAL_RCC_OscConfig+0x2ac>)
 800768c:	4313      	orrs	r3, r2
 800768e:	600b      	str	r3, [r1, #0]
 8007690:	e015      	b.n	80076be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007692:	4b3f      	ldr	r3, [pc, #252]	; (8007790 <HAL_RCC_OscConfig+0x2b0>)
 8007694:	2200      	movs	r2, #0
 8007696:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007698:	f7fd fee4 	bl	8005464 <HAL_GetTick>
 800769c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800769e:	e008      	b.n	80076b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80076a0:	f7fd fee0 	bl	8005464 <HAL_GetTick>
 80076a4:	4602      	mov	r2, r0
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	1ad3      	subs	r3, r2, r3
 80076aa:	2b02      	cmp	r3, #2
 80076ac:	d901      	bls.n	80076b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80076ae:	2303      	movs	r3, #3
 80076b0:	e17b      	b.n	80079aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80076b2:	4b36      	ldr	r3, [pc, #216]	; (800778c <HAL_RCC_OscConfig+0x2ac>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f003 0302 	and.w	r3, r3, #2
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d1f0      	bne.n	80076a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f003 0308 	and.w	r3, r3, #8
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d030      	beq.n	800772c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	695b      	ldr	r3, [r3, #20]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d016      	beq.n	8007700 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80076d2:	4b30      	ldr	r3, [pc, #192]	; (8007794 <HAL_RCC_OscConfig+0x2b4>)
 80076d4:	2201      	movs	r2, #1
 80076d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076d8:	f7fd fec4 	bl	8005464 <HAL_GetTick>
 80076dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80076de:	e008      	b.n	80076f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80076e0:	f7fd fec0 	bl	8005464 <HAL_GetTick>
 80076e4:	4602      	mov	r2, r0
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	1ad3      	subs	r3, r2, r3
 80076ea:	2b02      	cmp	r3, #2
 80076ec:	d901      	bls.n	80076f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80076ee:	2303      	movs	r3, #3
 80076f0:	e15b      	b.n	80079aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80076f2:	4b26      	ldr	r3, [pc, #152]	; (800778c <HAL_RCC_OscConfig+0x2ac>)
 80076f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076f6:	f003 0302 	and.w	r3, r3, #2
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d0f0      	beq.n	80076e0 <HAL_RCC_OscConfig+0x200>
 80076fe:	e015      	b.n	800772c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007700:	4b24      	ldr	r3, [pc, #144]	; (8007794 <HAL_RCC_OscConfig+0x2b4>)
 8007702:	2200      	movs	r2, #0
 8007704:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007706:	f7fd fead 	bl	8005464 <HAL_GetTick>
 800770a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800770c:	e008      	b.n	8007720 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800770e:	f7fd fea9 	bl	8005464 <HAL_GetTick>
 8007712:	4602      	mov	r2, r0
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	1ad3      	subs	r3, r2, r3
 8007718:	2b02      	cmp	r3, #2
 800771a:	d901      	bls.n	8007720 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800771c:	2303      	movs	r3, #3
 800771e:	e144      	b.n	80079aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007720:	4b1a      	ldr	r3, [pc, #104]	; (800778c <HAL_RCC_OscConfig+0x2ac>)
 8007722:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007724:	f003 0302 	and.w	r3, r3, #2
 8007728:	2b00      	cmp	r3, #0
 800772a:	d1f0      	bne.n	800770e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f003 0304 	and.w	r3, r3, #4
 8007734:	2b00      	cmp	r3, #0
 8007736:	f000 80a0 	beq.w	800787a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800773a:	2300      	movs	r3, #0
 800773c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800773e:	4b13      	ldr	r3, [pc, #76]	; (800778c <HAL_RCC_OscConfig+0x2ac>)
 8007740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007746:	2b00      	cmp	r3, #0
 8007748:	d10f      	bne.n	800776a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800774a:	2300      	movs	r3, #0
 800774c:	60bb      	str	r3, [r7, #8]
 800774e:	4b0f      	ldr	r3, [pc, #60]	; (800778c <HAL_RCC_OscConfig+0x2ac>)
 8007750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007752:	4a0e      	ldr	r2, [pc, #56]	; (800778c <HAL_RCC_OscConfig+0x2ac>)
 8007754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007758:	6413      	str	r3, [r2, #64]	; 0x40
 800775a:	4b0c      	ldr	r3, [pc, #48]	; (800778c <HAL_RCC_OscConfig+0x2ac>)
 800775c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800775e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007762:	60bb      	str	r3, [r7, #8]
 8007764:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007766:	2301      	movs	r3, #1
 8007768:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800776a:	4b0b      	ldr	r3, [pc, #44]	; (8007798 <HAL_RCC_OscConfig+0x2b8>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007772:	2b00      	cmp	r3, #0
 8007774:	d121      	bne.n	80077ba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007776:	4b08      	ldr	r3, [pc, #32]	; (8007798 <HAL_RCC_OscConfig+0x2b8>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a07      	ldr	r2, [pc, #28]	; (8007798 <HAL_RCC_OscConfig+0x2b8>)
 800777c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007780:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007782:	f7fd fe6f 	bl	8005464 <HAL_GetTick>
 8007786:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007788:	e011      	b.n	80077ae <HAL_RCC_OscConfig+0x2ce>
 800778a:	bf00      	nop
 800778c:	40023800 	.word	0x40023800
 8007790:	42470000 	.word	0x42470000
 8007794:	42470e80 	.word	0x42470e80
 8007798:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800779c:	f7fd fe62 	bl	8005464 <HAL_GetTick>
 80077a0:	4602      	mov	r2, r0
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	1ad3      	subs	r3, r2, r3
 80077a6:	2b02      	cmp	r3, #2
 80077a8:	d901      	bls.n	80077ae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80077aa:	2303      	movs	r3, #3
 80077ac:	e0fd      	b.n	80079aa <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80077ae:	4b81      	ldr	r3, [pc, #516]	; (80079b4 <HAL_RCC_OscConfig+0x4d4>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d0f0      	beq.n	800779c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	689b      	ldr	r3, [r3, #8]
 80077be:	2b01      	cmp	r3, #1
 80077c0:	d106      	bne.n	80077d0 <HAL_RCC_OscConfig+0x2f0>
 80077c2:	4b7d      	ldr	r3, [pc, #500]	; (80079b8 <HAL_RCC_OscConfig+0x4d8>)
 80077c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077c6:	4a7c      	ldr	r2, [pc, #496]	; (80079b8 <HAL_RCC_OscConfig+0x4d8>)
 80077c8:	f043 0301 	orr.w	r3, r3, #1
 80077cc:	6713      	str	r3, [r2, #112]	; 0x70
 80077ce:	e01c      	b.n	800780a <HAL_RCC_OscConfig+0x32a>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	689b      	ldr	r3, [r3, #8]
 80077d4:	2b05      	cmp	r3, #5
 80077d6:	d10c      	bne.n	80077f2 <HAL_RCC_OscConfig+0x312>
 80077d8:	4b77      	ldr	r3, [pc, #476]	; (80079b8 <HAL_RCC_OscConfig+0x4d8>)
 80077da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077dc:	4a76      	ldr	r2, [pc, #472]	; (80079b8 <HAL_RCC_OscConfig+0x4d8>)
 80077de:	f043 0304 	orr.w	r3, r3, #4
 80077e2:	6713      	str	r3, [r2, #112]	; 0x70
 80077e4:	4b74      	ldr	r3, [pc, #464]	; (80079b8 <HAL_RCC_OscConfig+0x4d8>)
 80077e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077e8:	4a73      	ldr	r2, [pc, #460]	; (80079b8 <HAL_RCC_OscConfig+0x4d8>)
 80077ea:	f043 0301 	orr.w	r3, r3, #1
 80077ee:	6713      	str	r3, [r2, #112]	; 0x70
 80077f0:	e00b      	b.n	800780a <HAL_RCC_OscConfig+0x32a>
 80077f2:	4b71      	ldr	r3, [pc, #452]	; (80079b8 <HAL_RCC_OscConfig+0x4d8>)
 80077f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077f6:	4a70      	ldr	r2, [pc, #448]	; (80079b8 <HAL_RCC_OscConfig+0x4d8>)
 80077f8:	f023 0301 	bic.w	r3, r3, #1
 80077fc:	6713      	str	r3, [r2, #112]	; 0x70
 80077fe:	4b6e      	ldr	r3, [pc, #440]	; (80079b8 <HAL_RCC_OscConfig+0x4d8>)
 8007800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007802:	4a6d      	ldr	r2, [pc, #436]	; (80079b8 <HAL_RCC_OscConfig+0x4d8>)
 8007804:	f023 0304 	bic.w	r3, r3, #4
 8007808:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	689b      	ldr	r3, [r3, #8]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d015      	beq.n	800783e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007812:	f7fd fe27 	bl	8005464 <HAL_GetTick>
 8007816:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007818:	e00a      	b.n	8007830 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800781a:	f7fd fe23 	bl	8005464 <HAL_GetTick>
 800781e:	4602      	mov	r2, r0
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	1ad3      	subs	r3, r2, r3
 8007824:	f241 3288 	movw	r2, #5000	; 0x1388
 8007828:	4293      	cmp	r3, r2
 800782a:	d901      	bls.n	8007830 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800782c:	2303      	movs	r3, #3
 800782e:	e0bc      	b.n	80079aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007830:	4b61      	ldr	r3, [pc, #388]	; (80079b8 <HAL_RCC_OscConfig+0x4d8>)
 8007832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007834:	f003 0302 	and.w	r3, r3, #2
 8007838:	2b00      	cmp	r3, #0
 800783a:	d0ee      	beq.n	800781a <HAL_RCC_OscConfig+0x33a>
 800783c:	e014      	b.n	8007868 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800783e:	f7fd fe11 	bl	8005464 <HAL_GetTick>
 8007842:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007844:	e00a      	b.n	800785c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007846:	f7fd fe0d 	bl	8005464 <HAL_GetTick>
 800784a:	4602      	mov	r2, r0
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	1ad3      	subs	r3, r2, r3
 8007850:	f241 3288 	movw	r2, #5000	; 0x1388
 8007854:	4293      	cmp	r3, r2
 8007856:	d901      	bls.n	800785c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007858:	2303      	movs	r3, #3
 800785a:	e0a6      	b.n	80079aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800785c:	4b56      	ldr	r3, [pc, #344]	; (80079b8 <HAL_RCC_OscConfig+0x4d8>)
 800785e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007860:	f003 0302 	and.w	r3, r3, #2
 8007864:	2b00      	cmp	r3, #0
 8007866:	d1ee      	bne.n	8007846 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007868:	7dfb      	ldrb	r3, [r7, #23]
 800786a:	2b01      	cmp	r3, #1
 800786c:	d105      	bne.n	800787a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800786e:	4b52      	ldr	r3, [pc, #328]	; (80079b8 <HAL_RCC_OscConfig+0x4d8>)
 8007870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007872:	4a51      	ldr	r2, [pc, #324]	; (80079b8 <HAL_RCC_OscConfig+0x4d8>)
 8007874:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007878:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	699b      	ldr	r3, [r3, #24]
 800787e:	2b00      	cmp	r3, #0
 8007880:	f000 8092 	beq.w	80079a8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007884:	4b4c      	ldr	r3, [pc, #304]	; (80079b8 <HAL_RCC_OscConfig+0x4d8>)
 8007886:	689b      	ldr	r3, [r3, #8]
 8007888:	f003 030c 	and.w	r3, r3, #12
 800788c:	2b08      	cmp	r3, #8
 800788e:	d05c      	beq.n	800794a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	699b      	ldr	r3, [r3, #24]
 8007894:	2b02      	cmp	r3, #2
 8007896:	d141      	bne.n	800791c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007898:	4b48      	ldr	r3, [pc, #288]	; (80079bc <HAL_RCC_OscConfig+0x4dc>)
 800789a:	2200      	movs	r2, #0
 800789c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800789e:	f7fd fde1 	bl	8005464 <HAL_GetTick>
 80078a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80078a4:	e008      	b.n	80078b8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80078a6:	f7fd fddd 	bl	8005464 <HAL_GetTick>
 80078aa:	4602      	mov	r2, r0
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	1ad3      	subs	r3, r2, r3
 80078b0:	2b02      	cmp	r3, #2
 80078b2:	d901      	bls.n	80078b8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80078b4:	2303      	movs	r3, #3
 80078b6:	e078      	b.n	80079aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80078b8:	4b3f      	ldr	r3, [pc, #252]	; (80079b8 <HAL_RCC_OscConfig+0x4d8>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d1f0      	bne.n	80078a6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	69da      	ldr	r2, [r3, #28]
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6a1b      	ldr	r3, [r3, #32]
 80078cc:	431a      	orrs	r2, r3
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078d2:	019b      	lsls	r3, r3, #6
 80078d4:	431a      	orrs	r2, r3
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078da:	085b      	lsrs	r3, r3, #1
 80078dc:	3b01      	subs	r3, #1
 80078de:	041b      	lsls	r3, r3, #16
 80078e0:	431a      	orrs	r2, r3
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078e6:	061b      	lsls	r3, r3, #24
 80078e8:	4933      	ldr	r1, [pc, #204]	; (80079b8 <HAL_RCC_OscConfig+0x4d8>)
 80078ea:	4313      	orrs	r3, r2
 80078ec:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80078ee:	4b33      	ldr	r3, [pc, #204]	; (80079bc <HAL_RCC_OscConfig+0x4dc>)
 80078f0:	2201      	movs	r2, #1
 80078f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078f4:	f7fd fdb6 	bl	8005464 <HAL_GetTick>
 80078f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80078fa:	e008      	b.n	800790e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80078fc:	f7fd fdb2 	bl	8005464 <HAL_GetTick>
 8007900:	4602      	mov	r2, r0
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	1ad3      	subs	r3, r2, r3
 8007906:	2b02      	cmp	r3, #2
 8007908:	d901      	bls.n	800790e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800790a:	2303      	movs	r3, #3
 800790c:	e04d      	b.n	80079aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800790e:	4b2a      	ldr	r3, [pc, #168]	; (80079b8 <HAL_RCC_OscConfig+0x4d8>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007916:	2b00      	cmp	r3, #0
 8007918:	d0f0      	beq.n	80078fc <HAL_RCC_OscConfig+0x41c>
 800791a:	e045      	b.n	80079a8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800791c:	4b27      	ldr	r3, [pc, #156]	; (80079bc <HAL_RCC_OscConfig+0x4dc>)
 800791e:	2200      	movs	r2, #0
 8007920:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007922:	f7fd fd9f 	bl	8005464 <HAL_GetTick>
 8007926:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007928:	e008      	b.n	800793c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800792a:	f7fd fd9b 	bl	8005464 <HAL_GetTick>
 800792e:	4602      	mov	r2, r0
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	1ad3      	subs	r3, r2, r3
 8007934:	2b02      	cmp	r3, #2
 8007936:	d901      	bls.n	800793c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007938:	2303      	movs	r3, #3
 800793a:	e036      	b.n	80079aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800793c:	4b1e      	ldr	r3, [pc, #120]	; (80079b8 <HAL_RCC_OscConfig+0x4d8>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007944:	2b00      	cmp	r3, #0
 8007946:	d1f0      	bne.n	800792a <HAL_RCC_OscConfig+0x44a>
 8007948:	e02e      	b.n	80079a8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	699b      	ldr	r3, [r3, #24]
 800794e:	2b01      	cmp	r3, #1
 8007950:	d101      	bne.n	8007956 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007952:	2301      	movs	r3, #1
 8007954:	e029      	b.n	80079aa <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007956:	4b18      	ldr	r3, [pc, #96]	; (80079b8 <HAL_RCC_OscConfig+0x4d8>)
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	69db      	ldr	r3, [r3, #28]
 8007966:	429a      	cmp	r2, r3
 8007968:	d11c      	bne.n	80079a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007974:	429a      	cmp	r2, r3
 8007976:	d115      	bne.n	80079a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007978:	68fa      	ldr	r2, [r7, #12]
 800797a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800797e:	4013      	ands	r3, r2
 8007980:	687a      	ldr	r2, [r7, #4]
 8007982:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007984:	4293      	cmp	r3, r2
 8007986:	d10d      	bne.n	80079a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007992:	429a      	cmp	r2, r3
 8007994:	d106      	bne.n	80079a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80079a0:	429a      	cmp	r2, r3
 80079a2:	d001      	beq.n	80079a8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80079a4:	2301      	movs	r3, #1
 80079a6:	e000      	b.n	80079aa <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80079a8:	2300      	movs	r3, #0
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3718      	adds	r7, #24
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}
 80079b2:	bf00      	nop
 80079b4:	40007000 	.word	0x40007000
 80079b8:	40023800 	.word	0x40023800
 80079bc:	42470060 	.word	0x42470060

080079c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b084      	sub	sp, #16
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
 80079c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d101      	bne.n	80079d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80079d0:	2301      	movs	r3, #1
 80079d2:	e0cc      	b.n	8007b6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80079d4:	4b68      	ldr	r3, [pc, #416]	; (8007b78 <HAL_RCC_ClockConfig+0x1b8>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f003 030f 	and.w	r3, r3, #15
 80079dc:	683a      	ldr	r2, [r7, #0]
 80079de:	429a      	cmp	r2, r3
 80079e0:	d90c      	bls.n	80079fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80079e2:	4b65      	ldr	r3, [pc, #404]	; (8007b78 <HAL_RCC_ClockConfig+0x1b8>)
 80079e4:	683a      	ldr	r2, [r7, #0]
 80079e6:	b2d2      	uxtb	r2, r2
 80079e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80079ea:	4b63      	ldr	r3, [pc, #396]	; (8007b78 <HAL_RCC_ClockConfig+0x1b8>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f003 030f 	and.w	r3, r3, #15
 80079f2:	683a      	ldr	r2, [r7, #0]
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d001      	beq.n	80079fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80079f8:	2301      	movs	r3, #1
 80079fa:	e0b8      	b.n	8007b6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f003 0302 	and.w	r3, r3, #2
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d020      	beq.n	8007a4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f003 0304 	and.w	r3, r3, #4
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d005      	beq.n	8007a20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007a14:	4b59      	ldr	r3, [pc, #356]	; (8007b7c <HAL_RCC_ClockConfig+0x1bc>)
 8007a16:	689b      	ldr	r3, [r3, #8]
 8007a18:	4a58      	ldr	r2, [pc, #352]	; (8007b7c <HAL_RCC_ClockConfig+0x1bc>)
 8007a1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007a1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f003 0308 	and.w	r3, r3, #8
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d005      	beq.n	8007a38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007a2c:	4b53      	ldr	r3, [pc, #332]	; (8007b7c <HAL_RCC_ClockConfig+0x1bc>)
 8007a2e:	689b      	ldr	r3, [r3, #8]
 8007a30:	4a52      	ldr	r2, [pc, #328]	; (8007b7c <HAL_RCC_ClockConfig+0x1bc>)
 8007a32:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007a36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007a38:	4b50      	ldr	r3, [pc, #320]	; (8007b7c <HAL_RCC_ClockConfig+0x1bc>)
 8007a3a:	689b      	ldr	r3, [r3, #8]
 8007a3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	689b      	ldr	r3, [r3, #8]
 8007a44:	494d      	ldr	r1, [pc, #308]	; (8007b7c <HAL_RCC_ClockConfig+0x1bc>)
 8007a46:	4313      	orrs	r3, r2
 8007a48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f003 0301 	and.w	r3, r3, #1
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d044      	beq.n	8007ae0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	685b      	ldr	r3, [r3, #4]
 8007a5a:	2b01      	cmp	r3, #1
 8007a5c:	d107      	bne.n	8007a6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a5e:	4b47      	ldr	r3, [pc, #284]	; (8007b7c <HAL_RCC_ClockConfig+0x1bc>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d119      	bne.n	8007a9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	e07f      	b.n	8007b6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	685b      	ldr	r3, [r3, #4]
 8007a72:	2b02      	cmp	r3, #2
 8007a74:	d003      	beq.n	8007a7e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007a7a:	2b03      	cmp	r3, #3
 8007a7c:	d107      	bne.n	8007a8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a7e:	4b3f      	ldr	r3, [pc, #252]	; (8007b7c <HAL_RCC_ClockConfig+0x1bc>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d109      	bne.n	8007a9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	e06f      	b.n	8007b6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a8e:	4b3b      	ldr	r3, [pc, #236]	; (8007b7c <HAL_RCC_ClockConfig+0x1bc>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f003 0302 	and.w	r3, r3, #2
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d101      	bne.n	8007a9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	e067      	b.n	8007b6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007a9e:	4b37      	ldr	r3, [pc, #220]	; (8007b7c <HAL_RCC_ClockConfig+0x1bc>)
 8007aa0:	689b      	ldr	r3, [r3, #8]
 8007aa2:	f023 0203 	bic.w	r2, r3, #3
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	685b      	ldr	r3, [r3, #4]
 8007aaa:	4934      	ldr	r1, [pc, #208]	; (8007b7c <HAL_RCC_ClockConfig+0x1bc>)
 8007aac:	4313      	orrs	r3, r2
 8007aae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007ab0:	f7fd fcd8 	bl	8005464 <HAL_GetTick>
 8007ab4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ab6:	e00a      	b.n	8007ace <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007ab8:	f7fd fcd4 	bl	8005464 <HAL_GetTick>
 8007abc:	4602      	mov	r2, r0
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	1ad3      	subs	r3, r2, r3
 8007ac2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d901      	bls.n	8007ace <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007aca:	2303      	movs	r3, #3
 8007acc:	e04f      	b.n	8007b6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ace:	4b2b      	ldr	r3, [pc, #172]	; (8007b7c <HAL_RCC_ClockConfig+0x1bc>)
 8007ad0:	689b      	ldr	r3, [r3, #8]
 8007ad2:	f003 020c 	and.w	r2, r3, #12
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	685b      	ldr	r3, [r3, #4]
 8007ada:	009b      	lsls	r3, r3, #2
 8007adc:	429a      	cmp	r2, r3
 8007ade:	d1eb      	bne.n	8007ab8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007ae0:	4b25      	ldr	r3, [pc, #148]	; (8007b78 <HAL_RCC_ClockConfig+0x1b8>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f003 030f 	and.w	r3, r3, #15
 8007ae8:	683a      	ldr	r2, [r7, #0]
 8007aea:	429a      	cmp	r2, r3
 8007aec:	d20c      	bcs.n	8007b08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007aee:	4b22      	ldr	r3, [pc, #136]	; (8007b78 <HAL_RCC_ClockConfig+0x1b8>)
 8007af0:	683a      	ldr	r2, [r7, #0]
 8007af2:	b2d2      	uxtb	r2, r2
 8007af4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007af6:	4b20      	ldr	r3, [pc, #128]	; (8007b78 <HAL_RCC_ClockConfig+0x1b8>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f003 030f 	and.w	r3, r3, #15
 8007afe:	683a      	ldr	r2, [r7, #0]
 8007b00:	429a      	cmp	r2, r3
 8007b02:	d001      	beq.n	8007b08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007b04:	2301      	movs	r3, #1
 8007b06:	e032      	b.n	8007b6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f003 0304 	and.w	r3, r3, #4
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d008      	beq.n	8007b26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007b14:	4b19      	ldr	r3, [pc, #100]	; (8007b7c <HAL_RCC_ClockConfig+0x1bc>)
 8007b16:	689b      	ldr	r3, [r3, #8]
 8007b18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	68db      	ldr	r3, [r3, #12]
 8007b20:	4916      	ldr	r1, [pc, #88]	; (8007b7c <HAL_RCC_ClockConfig+0x1bc>)
 8007b22:	4313      	orrs	r3, r2
 8007b24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f003 0308 	and.w	r3, r3, #8
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d009      	beq.n	8007b46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007b32:	4b12      	ldr	r3, [pc, #72]	; (8007b7c <HAL_RCC_ClockConfig+0x1bc>)
 8007b34:	689b      	ldr	r3, [r3, #8]
 8007b36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	691b      	ldr	r3, [r3, #16]
 8007b3e:	00db      	lsls	r3, r3, #3
 8007b40:	490e      	ldr	r1, [pc, #56]	; (8007b7c <HAL_RCC_ClockConfig+0x1bc>)
 8007b42:	4313      	orrs	r3, r2
 8007b44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007b46:	f000 f821 	bl	8007b8c <HAL_RCC_GetSysClockFreq>
 8007b4a:	4601      	mov	r1, r0
 8007b4c:	4b0b      	ldr	r3, [pc, #44]	; (8007b7c <HAL_RCC_ClockConfig+0x1bc>)
 8007b4e:	689b      	ldr	r3, [r3, #8]
 8007b50:	091b      	lsrs	r3, r3, #4
 8007b52:	f003 030f 	and.w	r3, r3, #15
 8007b56:	4a0a      	ldr	r2, [pc, #40]	; (8007b80 <HAL_RCC_ClockConfig+0x1c0>)
 8007b58:	5cd3      	ldrb	r3, [r2, r3]
 8007b5a:	fa21 f303 	lsr.w	r3, r1, r3
 8007b5e:	4a09      	ldr	r2, [pc, #36]	; (8007b84 <HAL_RCC_ClockConfig+0x1c4>)
 8007b60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007b62:	4b09      	ldr	r3, [pc, #36]	; (8007b88 <HAL_RCC_ClockConfig+0x1c8>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4618      	mov	r0, r3
 8007b68:	f7fd fc38 	bl	80053dc <HAL_InitTick>

  return HAL_OK;
 8007b6c:	2300      	movs	r3, #0
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3710      	adds	r7, #16
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}
 8007b76:	bf00      	nop
 8007b78:	40023c00 	.word	0x40023c00
 8007b7c:	40023800 	.word	0x40023800
 8007b80:	0800d7cc 	.word	0x0800d7cc
 8007b84:	20000004 	.word	0x20000004
 8007b88:	20000008 	.word	0x20000008

08007b8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b8e:	b085      	sub	sp, #20
 8007b90:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007b92:	2300      	movs	r3, #0
 8007b94:	607b      	str	r3, [r7, #4]
 8007b96:	2300      	movs	r3, #0
 8007b98:	60fb      	str	r3, [r7, #12]
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007ba2:	4b63      	ldr	r3, [pc, #396]	; (8007d30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007ba4:	689b      	ldr	r3, [r3, #8]
 8007ba6:	f003 030c 	and.w	r3, r3, #12
 8007baa:	2b04      	cmp	r3, #4
 8007bac:	d007      	beq.n	8007bbe <HAL_RCC_GetSysClockFreq+0x32>
 8007bae:	2b08      	cmp	r3, #8
 8007bb0:	d008      	beq.n	8007bc4 <HAL_RCC_GetSysClockFreq+0x38>
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	f040 80b4 	bne.w	8007d20 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007bb8:	4b5e      	ldr	r3, [pc, #376]	; (8007d34 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8007bba:	60bb      	str	r3, [r7, #8]
       break;
 8007bbc:	e0b3      	b.n	8007d26 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007bbe:	4b5e      	ldr	r3, [pc, #376]	; (8007d38 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8007bc0:	60bb      	str	r3, [r7, #8]
      break;
 8007bc2:	e0b0      	b.n	8007d26 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007bc4:	4b5a      	ldr	r3, [pc, #360]	; (8007d30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007bc6:	685b      	ldr	r3, [r3, #4]
 8007bc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007bcc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007bce:	4b58      	ldr	r3, [pc, #352]	; (8007d30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007bd0:	685b      	ldr	r3, [r3, #4]
 8007bd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d04a      	beq.n	8007c70 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007bda:	4b55      	ldr	r3, [pc, #340]	; (8007d30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	099b      	lsrs	r3, r3, #6
 8007be0:	f04f 0400 	mov.w	r4, #0
 8007be4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007be8:	f04f 0200 	mov.w	r2, #0
 8007bec:	ea03 0501 	and.w	r5, r3, r1
 8007bf0:	ea04 0602 	and.w	r6, r4, r2
 8007bf4:	4629      	mov	r1, r5
 8007bf6:	4632      	mov	r2, r6
 8007bf8:	f04f 0300 	mov.w	r3, #0
 8007bfc:	f04f 0400 	mov.w	r4, #0
 8007c00:	0154      	lsls	r4, r2, #5
 8007c02:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007c06:	014b      	lsls	r3, r1, #5
 8007c08:	4619      	mov	r1, r3
 8007c0a:	4622      	mov	r2, r4
 8007c0c:	1b49      	subs	r1, r1, r5
 8007c0e:	eb62 0206 	sbc.w	r2, r2, r6
 8007c12:	f04f 0300 	mov.w	r3, #0
 8007c16:	f04f 0400 	mov.w	r4, #0
 8007c1a:	0194      	lsls	r4, r2, #6
 8007c1c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007c20:	018b      	lsls	r3, r1, #6
 8007c22:	1a5b      	subs	r3, r3, r1
 8007c24:	eb64 0402 	sbc.w	r4, r4, r2
 8007c28:	f04f 0100 	mov.w	r1, #0
 8007c2c:	f04f 0200 	mov.w	r2, #0
 8007c30:	00e2      	lsls	r2, r4, #3
 8007c32:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007c36:	00d9      	lsls	r1, r3, #3
 8007c38:	460b      	mov	r3, r1
 8007c3a:	4614      	mov	r4, r2
 8007c3c:	195b      	adds	r3, r3, r5
 8007c3e:	eb44 0406 	adc.w	r4, r4, r6
 8007c42:	f04f 0100 	mov.w	r1, #0
 8007c46:	f04f 0200 	mov.w	r2, #0
 8007c4a:	0262      	lsls	r2, r4, #9
 8007c4c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8007c50:	0259      	lsls	r1, r3, #9
 8007c52:	460b      	mov	r3, r1
 8007c54:	4614      	mov	r4, r2
 8007c56:	4618      	mov	r0, r3
 8007c58:	4621      	mov	r1, r4
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f04f 0400 	mov.w	r4, #0
 8007c60:	461a      	mov	r2, r3
 8007c62:	4623      	mov	r3, r4
 8007c64:	f7f8 fff0 	bl	8000c48 <__aeabi_uldivmod>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	460c      	mov	r4, r1
 8007c6c:	60fb      	str	r3, [r7, #12]
 8007c6e:	e049      	b.n	8007d04 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007c70:	4b2f      	ldr	r3, [pc, #188]	; (8007d30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007c72:	685b      	ldr	r3, [r3, #4]
 8007c74:	099b      	lsrs	r3, r3, #6
 8007c76:	f04f 0400 	mov.w	r4, #0
 8007c7a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007c7e:	f04f 0200 	mov.w	r2, #0
 8007c82:	ea03 0501 	and.w	r5, r3, r1
 8007c86:	ea04 0602 	and.w	r6, r4, r2
 8007c8a:	4629      	mov	r1, r5
 8007c8c:	4632      	mov	r2, r6
 8007c8e:	f04f 0300 	mov.w	r3, #0
 8007c92:	f04f 0400 	mov.w	r4, #0
 8007c96:	0154      	lsls	r4, r2, #5
 8007c98:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007c9c:	014b      	lsls	r3, r1, #5
 8007c9e:	4619      	mov	r1, r3
 8007ca0:	4622      	mov	r2, r4
 8007ca2:	1b49      	subs	r1, r1, r5
 8007ca4:	eb62 0206 	sbc.w	r2, r2, r6
 8007ca8:	f04f 0300 	mov.w	r3, #0
 8007cac:	f04f 0400 	mov.w	r4, #0
 8007cb0:	0194      	lsls	r4, r2, #6
 8007cb2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007cb6:	018b      	lsls	r3, r1, #6
 8007cb8:	1a5b      	subs	r3, r3, r1
 8007cba:	eb64 0402 	sbc.w	r4, r4, r2
 8007cbe:	f04f 0100 	mov.w	r1, #0
 8007cc2:	f04f 0200 	mov.w	r2, #0
 8007cc6:	00e2      	lsls	r2, r4, #3
 8007cc8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007ccc:	00d9      	lsls	r1, r3, #3
 8007cce:	460b      	mov	r3, r1
 8007cd0:	4614      	mov	r4, r2
 8007cd2:	195b      	adds	r3, r3, r5
 8007cd4:	eb44 0406 	adc.w	r4, r4, r6
 8007cd8:	f04f 0100 	mov.w	r1, #0
 8007cdc:	f04f 0200 	mov.w	r2, #0
 8007ce0:	02a2      	lsls	r2, r4, #10
 8007ce2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8007ce6:	0299      	lsls	r1, r3, #10
 8007ce8:	460b      	mov	r3, r1
 8007cea:	4614      	mov	r4, r2
 8007cec:	4618      	mov	r0, r3
 8007cee:	4621      	mov	r1, r4
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f04f 0400 	mov.w	r4, #0
 8007cf6:	461a      	mov	r2, r3
 8007cf8:	4623      	mov	r3, r4
 8007cfa:	f7f8 ffa5 	bl	8000c48 <__aeabi_uldivmod>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	460c      	mov	r4, r1
 8007d02:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007d04:	4b0a      	ldr	r3, [pc, #40]	; (8007d30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007d06:	685b      	ldr	r3, [r3, #4]
 8007d08:	0c1b      	lsrs	r3, r3, #16
 8007d0a:	f003 0303 	and.w	r3, r3, #3
 8007d0e:	3301      	adds	r3, #1
 8007d10:	005b      	lsls	r3, r3, #1
 8007d12:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007d14:	68fa      	ldr	r2, [r7, #12]
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d1c:	60bb      	str	r3, [r7, #8]
      break;
 8007d1e:	e002      	b.n	8007d26 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007d20:	4b04      	ldr	r3, [pc, #16]	; (8007d34 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8007d22:	60bb      	str	r3, [r7, #8]
      break;
 8007d24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007d26:	68bb      	ldr	r3, [r7, #8]
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	3714      	adds	r7, #20
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d30:	40023800 	.word	0x40023800
 8007d34:	00f42400 	.word	0x00f42400
 8007d38:	007a1200 	.word	0x007a1200

08007d3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007d40:	4b03      	ldr	r3, [pc, #12]	; (8007d50 <HAL_RCC_GetHCLKFreq+0x14>)
 8007d42:	681b      	ldr	r3, [r3, #0]
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	46bd      	mov	sp, r7
 8007d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4c:	4770      	bx	lr
 8007d4e:	bf00      	nop
 8007d50:	20000004 	.word	0x20000004

08007d54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007d58:	f7ff fff0 	bl	8007d3c <HAL_RCC_GetHCLKFreq>
 8007d5c:	4601      	mov	r1, r0
 8007d5e:	4b05      	ldr	r3, [pc, #20]	; (8007d74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007d60:	689b      	ldr	r3, [r3, #8]
 8007d62:	0a9b      	lsrs	r3, r3, #10
 8007d64:	f003 0307 	and.w	r3, r3, #7
 8007d68:	4a03      	ldr	r2, [pc, #12]	; (8007d78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007d6a:	5cd3      	ldrb	r3, [r2, r3]
 8007d6c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	bd80      	pop	{r7, pc}
 8007d74:	40023800 	.word	0x40023800
 8007d78:	0800d7dc 	.word	0x0800d7dc

08007d7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007d80:	f7ff ffdc 	bl	8007d3c <HAL_RCC_GetHCLKFreq>
 8007d84:	4601      	mov	r1, r0
 8007d86:	4b05      	ldr	r3, [pc, #20]	; (8007d9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007d88:	689b      	ldr	r3, [r3, #8]
 8007d8a:	0b5b      	lsrs	r3, r3, #13
 8007d8c:	f003 0307 	and.w	r3, r3, #7
 8007d90:	4a03      	ldr	r2, [pc, #12]	; (8007da0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007d92:	5cd3      	ldrb	r3, [r2, r3]
 8007d94:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	bd80      	pop	{r7, pc}
 8007d9c:	40023800 	.word	0x40023800
 8007da0:	0800d7dc 	.word	0x0800d7dc

08007da4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b082      	sub	sp, #8
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d101      	bne.n	8007db6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007db2:	2301      	movs	r3, #1
 8007db4:	e03f      	b.n	8007e36 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007dbc:	b2db      	uxtb	r3, r3
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d106      	bne.n	8007dd0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f7fd fa6a 	bl	80052a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2224      	movs	r2, #36	; 0x24
 8007dd4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	68da      	ldr	r2, [r3, #12]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007de6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f000 fbdb 	bl	80085a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	691a      	ldr	r2, [r3, #16]
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007dfc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	695a      	ldr	r2, [r3, #20]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007e0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	68da      	ldr	r2, [r3, #12]
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007e1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2200      	movs	r2, #0
 8007e22:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2220      	movs	r2, #32
 8007e28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2220      	movs	r2, #32
 8007e30:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007e34:	2300      	movs	r3, #0
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3708      	adds	r7, #8
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}

08007e3e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e3e:	b580      	push	{r7, lr}
 8007e40:	b088      	sub	sp, #32
 8007e42:	af02      	add	r7, sp, #8
 8007e44:	60f8      	str	r0, [r7, #12]
 8007e46:	60b9      	str	r1, [r7, #8]
 8007e48:	603b      	str	r3, [r7, #0]
 8007e4a:	4613      	mov	r3, r2
 8007e4c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007e58:	b2db      	uxtb	r3, r3
 8007e5a:	2b20      	cmp	r3, #32
 8007e5c:	f040 8083 	bne.w	8007f66 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d002      	beq.n	8007e6c <HAL_UART_Transmit+0x2e>
 8007e66:	88fb      	ldrh	r3, [r7, #6]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d101      	bne.n	8007e70 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	e07b      	b.n	8007f68 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007e76:	2b01      	cmp	r3, #1
 8007e78:	d101      	bne.n	8007e7e <HAL_UART_Transmit+0x40>
 8007e7a:	2302      	movs	r3, #2
 8007e7c:	e074      	b.n	8007f68 <HAL_UART_Transmit+0x12a>
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	2201      	movs	r2, #1
 8007e82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	2221      	movs	r2, #33	; 0x21
 8007e90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8007e94:	f7fd fae6 	bl	8005464 <HAL_GetTick>
 8007e98:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	88fa      	ldrh	r2, [r7, #6]
 8007e9e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	88fa      	ldrh	r2, [r7, #6]
 8007ea4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8007eae:	e042      	b.n	8007f36 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007eb4:	b29b      	uxth	r3, r3
 8007eb6:	3b01      	subs	r3, #1
 8007eb8:	b29a      	uxth	r2, r3
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	689b      	ldr	r3, [r3, #8]
 8007ec2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ec6:	d122      	bne.n	8007f0e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	9300      	str	r3, [sp, #0]
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	2180      	movs	r1, #128	; 0x80
 8007ed2:	68f8      	ldr	r0, [r7, #12]
 8007ed4:	f000 f9fa 	bl	80082cc <UART_WaitOnFlagUntilTimeout>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d001      	beq.n	8007ee2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8007ede:	2303      	movs	r3, #3
 8007ee0:	e042      	b.n	8007f68 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8007ee6:	693b      	ldr	r3, [r7, #16]
 8007ee8:	881b      	ldrh	r3, [r3, #0]
 8007eea:	461a      	mov	r2, r3
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007ef4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	691b      	ldr	r3, [r3, #16]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d103      	bne.n	8007f06 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	3302      	adds	r3, #2
 8007f02:	60bb      	str	r3, [r7, #8]
 8007f04:	e017      	b.n	8007f36 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	3301      	adds	r3, #1
 8007f0a:	60bb      	str	r3, [r7, #8]
 8007f0c:	e013      	b.n	8007f36 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	9300      	str	r3, [sp, #0]
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	2200      	movs	r2, #0
 8007f16:	2180      	movs	r1, #128	; 0x80
 8007f18:	68f8      	ldr	r0, [r7, #12]
 8007f1a:	f000 f9d7 	bl	80082cc <UART_WaitOnFlagUntilTimeout>
 8007f1e:	4603      	mov	r3, r0
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d001      	beq.n	8007f28 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8007f24:	2303      	movs	r3, #3
 8007f26:	e01f      	b.n	8007f68 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	1c5a      	adds	r2, r3, #1
 8007f2c:	60ba      	str	r2, [r7, #8]
 8007f2e:	781a      	ldrb	r2, [r3, #0]
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007f3a:	b29b      	uxth	r3, r3
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d1b7      	bne.n	8007eb0 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	9300      	str	r3, [sp, #0]
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	2200      	movs	r2, #0
 8007f48:	2140      	movs	r1, #64	; 0x40
 8007f4a:	68f8      	ldr	r0, [r7, #12]
 8007f4c:	f000 f9be 	bl	80082cc <UART_WaitOnFlagUntilTimeout>
 8007f50:	4603      	mov	r3, r0
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d001      	beq.n	8007f5a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8007f56:	2303      	movs	r3, #3
 8007f58:	e006      	b.n	8007f68 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	2220      	movs	r2, #32
 8007f5e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8007f62:	2300      	movs	r3, #0
 8007f64:	e000      	b.n	8007f68 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8007f66:	2302      	movs	r3, #2
  }
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	3718      	adds	r7, #24
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}

08007f70 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b085      	sub	sp, #20
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	60f8      	str	r0, [r7, #12]
 8007f78:	60b9      	str	r1, [r7, #8]
 8007f7a:	4613      	mov	r3, r2
 8007f7c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007f84:	b2db      	uxtb	r3, r3
 8007f86:	2b20      	cmp	r3, #32
 8007f88:	d130      	bne.n	8007fec <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d002      	beq.n	8007f96 <HAL_UART_Transmit_IT+0x26>
 8007f90:	88fb      	ldrh	r3, [r7, #6]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d101      	bne.n	8007f9a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8007f96:	2301      	movs	r3, #1
 8007f98:	e029      	b.n	8007fee <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007fa0:	2b01      	cmp	r3, #1
 8007fa2:	d101      	bne.n	8007fa8 <HAL_UART_Transmit_IT+0x38>
 8007fa4:	2302      	movs	r3, #2
 8007fa6:	e022      	b.n	8007fee <HAL_UART_Transmit_IT+0x7e>
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	2201      	movs	r2, #1
 8007fac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	68ba      	ldr	r2, [r7, #8]
 8007fb4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	88fa      	ldrh	r2, [r7, #6]
 8007fba:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	88fa      	ldrh	r2, [r7, #6]
 8007fc0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	2221      	movs	r2, #33	; 0x21
 8007fcc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	68da      	ldr	r2, [r3, #12]
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007fe6:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8007fe8:	2300      	movs	r3, #0
 8007fea:	e000      	b.n	8007fee <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8007fec:	2302      	movs	r3, #2
  }
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3714      	adds	r7, #20
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff8:	4770      	bx	lr

08007ffa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ffa:	b480      	push	{r7}
 8007ffc:	b085      	sub	sp, #20
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	60f8      	str	r0, [r7, #12]
 8008002:	60b9      	str	r1, [r7, #8]
 8008004:	4613      	mov	r3, r2
 8008006:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800800e:	b2db      	uxtb	r3, r3
 8008010:	2b20      	cmp	r3, #32
 8008012:	d140      	bne.n	8008096 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d002      	beq.n	8008020 <HAL_UART_Receive_IT+0x26>
 800801a:	88fb      	ldrh	r3, [r7, #6]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d101      	bne.n	8008024 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008020:	2301      	movs	r3, #1
 8008022:	e039      	b.n	8008098 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800802a:	2b01      	cmp	r3, #1
 800802c:	d101      	bne.n	8008032 <HAL_UART_Receive_IT+0x38>
 800802e:	2302      	movs	r3, #2
 8008030:	e032      	b.n	8008098 <HAL_UART_Receive_IT+0x9e>
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	2201      	movs	r2, #1
 8008036:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	68ba      	ldr	r2, [r7, #8]
 800803e:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	88fa      	ldrh	r2, [r7, #6]
 8008044:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	88fa      	ldrh	r2, [r7, #6]
 800804a:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	2200      	movs	r2, #0
 8008050:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	2222      	movs	r2, #34	; 0x22
 8008056:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	2200      	movs	r2, #0
 800805e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	68da      	ldr	r2, [r3, #12]
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008070:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	695a      	ldr	r2, [r3, #20]
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f042 0201 	orr.w	r2, r2, #1
 8008080:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	68da      	ldr	r2, [r3, #12]
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f042 0220 	orr.w	r2, r2, #32
 8008090:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8008092:	2300      	movs	r3, #0
 8008094:	e000      	b.n	8008098 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8008096:	2302      	movs	r3, #2
  }
}
 8008098:	4618      	mov	r0, r3
 800809a:	3714      	adds	r7, #20
 800809c:	46bd      	mov	sp, r7
 800809e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a2:	4770      	bx	lr

080080a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b088      	sub	sp, #32
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	68db      	ldr	r3, [r3, #12]
 80080ba:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	695b      	ldr	r3, [r3, #20]
 80080c2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80080c4:	2300      	movs	r3, #0
 80080c6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80080c8:	2300      	movs	r3, #0
 80080ca:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80080cc:	69fb      	ldr	r3, [r7, #28]
 80080ce:	f003 030f 	and.w	r3, r3, #15
 80080d2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d10d      	bne.n	80080f6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80080da:	69fb      	ldr	r3, [r7, #28]
 80080dc:	f003 0320 	and.w	r3, r3, #32
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d008      	beq.n	80080f6 <HAL_UART_IRQHandler+0x52>
 80080e4:	69bb      	ldr	r3, [r7, #24]
 80080e6:	f003 0320 	and.w	r3, r3, #32
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d003      	beq.n	80080f6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f000 f9d6 	bl	80084a0 <UART_Receive_IT>
      return;
 80080f4:	e0d1      	b.n	800829a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	f000 80b0 	beq.w	800825e <HAL_UART_IRQHandler+0x1ba>
 80080fe:	697b      	ldr	r3, [r7, #20]
 8008100:	f003 0301 	and.w	r3, r3, #1
 8008104:	2b00      	cmp	r3, #0
 8008106:	d105      	bne.n	8008114 <HAL_UART_IRQHandler+0x70>
 8008108:	69bb      	ldr	r3, [r7, #24]
 800810a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800810e:	2b00      	cmp	r3, #0
 8008110:	f000 80a5 	beq.w	800825e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008114:	69fb      	ldr	r3, [r7, #28]
 8008116:	f003 0301 	and.w	r3, r3, #1
 800811a:	2b00      	cmp	r3, #0
 800811c:	d00a      	beq.n	8008134 <HAL_UART_IRQHandler+0x90>
 800811e:	69bb      	ldr	r3, [r7, #24]
 8008120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008124:	2b00      	cmp	r3, #0
 8008126:	d005      	beq.n	8008134 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800812c:	f043 0201 	orr.w	r2, r3, #1
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008134:	69fb      	ldr	r3, [r7, #28]
 8008136:	f003 0304 	and.w	r3, r3, #4
 800813a:	2b00      	cmp	r3, #0
 800813c:	d00a      	beq.n	8008154 <HAL_UART_IRQHandler+0xb0>
 800813e:	697b      	ldr	r3, [r7, #20]
 8008140:	f003 0301 	and.w	r3, r3, #1
 8008144:	2b00      	cmp	r3, #0
 8008146:	d005      	beq.n	8008154 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800814c:	f043 0202 	orr.w	r2, r3, #2
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008154:	69fb      	ldr	r3, [r7, #28]
 8008156:	f003 0302 	and.w	r3, r3, #2
 800815a:	2b00      	cmp	r3, #0
 800815c:	d00a      	beq.n	8008174 <HAL_UART_IRQHandler+0xd0>
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	f003 0301 	and.w	r3, r3, #1
 8008164:	2b00      	cmp	r3, #0
 8008166:	d005      	beq.n	8008174 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800816c:	f043 0204 	orr.w	r2, r3, #4
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8008174:	69fb      	ldr	r3, [r7, #28]
 8008176:	f003 0308 	and.w	r3, r3, #8
 800817a:	2b00      	cmp	r3, #0
 800817c:	d00f      	beq.n	800819e <HAL_UART_IRQHandler+0xfa>
 800817e:	69bb      	ldr	r3, [r7, #24]
 8008180:	f003 0320 	and.w	r3, r3, #32
 8008184:	2b00      	cmp	r3, #0
 8008186:	d104      	bne.n	8008192 <HAL_UART_IRQHandler+0xee>
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	f003 0301 	and.w	r3, r3, #1
 800818e:	2b00      	cmp	r3, #0
 8008190:	d005      	beq.n	800819e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008196:	f043 0208 	orr.w	r2, r3, #8
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d078      	beq.n	8008298 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80081a6:	69fb      	ldr	r3, [r7, #28]
 80081a8:	f003 0320 	and.w	r3, r3, #32
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d007      	beq.n	80081c0 <HAL_UART_IRQHandler+0x11c>
 80081b0:	69bb      	ldr	r3, [r7, #24]
 80081b2:	f003 0320 	and.w	r3, r3, #32
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d002      	beq.n	80081c0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f000 f970 	bl	80084a0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	695b      	ldr	r3, [r3, #20]
 80081c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081ca:	2b40      	cmp	r3, #64	; 0x40
 80081cc:	bf0c      	ite	eq
 80081ce:	2301      	moveq	r3, #1
 80081d0:	2300      	movne	r3, #0
 80081d2:	b2db      	uxtb	r3, r3
 80081d4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081da:	f003 0308 	and.w	r3, r3, #8
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d102      	bne.n	80081e8 <HAL_UART_IRQHandler+0x144>
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d031      	beq.n	800824c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f000 f8b9 	bl	8008360 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	695b      	ldr	r3, [r3, #20]
 80081f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081f8:	2b40      	cmp	r3, #64	; 0x40
 80081fa:	d123      	bne.n	8008244 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	695a      	ldr	r2, [r3, #20]
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800820a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008210:	2b00      	cmp	r3, #0
 8008212:	d013      	beq.n	800823c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008218:	4a21      	ldr	r2, [pc, #132]	; (80082a0 <HAL_UART_IRQHandler+0x1fc>)
 800821a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008220:	4618      	mov	r0, r3
 8008222:	f7fd ff59 	bl	80060d8 <HAL_DMA_Abort_IT>
 8008226:	4603      	mov	r3, r0
 8008228:	2b00      	cmp	r3, #0
 800822a:	d016      	beq.n	800825a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008230:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008232:	687a      	ldr	r2, [r7, #4]
 8008234:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008236:	4610      	mov	r0, r2
 8008238:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800823a:	e00e      	b.n	800825a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f000 f83b 	bl	80082b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008242:	e00a      	b.n	800825a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f000 f837 	bl	80082b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800824a:	e006      	b.n	800825a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f000 f833 	bl	80082b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2200      	movs	r2, #0
 8008256:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8008258:	e01e      	b.n	8008298 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800825a:	bf00      	nop
    return;
 800825c:	e01c      	b.n	8008298 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800825e:	69fb      	ldr	r3, [r7, #28]
 8008260:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008264:	2b00      	cmp	r3, #0
 8008266:	d008      	beq.n	800827a <HAL_UART_IRQHandler+0x1d6>
 8008268:	69bb      	ldr	r3, [r7, #24]
 800826a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800826e:	2b00      	cmp	r3, #0
 8008270:	d003      	beq.n	800827a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f000 f8a6 	bl	80083c4 <UART_Transmit_IT>
    return;
 8008278:	e00f      	b.n	800829a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800827a:	69fb      	ldr	r3, [r7, #28]
 800827c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008280:	2b00      	cmp	r3, #0
 8008282:	d00a      	beq.n	800829a <HAL_UART_IRQHandler+0x1f6>
 8008284:	69bb      	ldr	r3, [r7, #24]
 8008286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800828a:	2b00      	cmp	r3, #0
 800828c:	d005      	beq.n	800829a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f000 f8ee 	bl	8008470 <UART_EndTransmit_IT>
    return;
 8008294:	bf00      	nop
 8008296:	e000      	b.n	800829a <HAL_UART_IRQHandler+0x1f6>
    return;
 8008298:	bf00      	nop
  }
}
 800829a:	3720      	adds	r7, #32
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}
 80082a0:	0800839d 	.word	0x0800839d

080082a4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80082a4:	b480      	push	{r7}
 80082a6:	b083      	sub	sp, #12
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80082ac:	bf00      	nop
 80082ae:	370c      	adds	r7, #12
 80082b0:	46bd      	mov	sp, r7
 80082b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b6:	4770      	bx	lr

080082b8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80082b8:	b480      	push	{r7}
 80082ba:	b083      	sub	sp, #12
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80082c0:	bf00      	nop
 80082c2:	370c      	adds	r7, #12
 80082c4:	46bd      	mov	sp, r7
 80082c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ca:	4770      	bx	lr

080082cc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b084      	sub	sp, #16
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	60f8      	str	r0, [r7, #12]
 80082d4:	60b9      	str	r1, [r7, #8]
 80082d6:	603b      	str	r3, [r7, #0]
 80082d8:	4613      	mov	r3, r2
 80082da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082dc:	e02c      	b.n	8008338 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082de:	69bb      	ldr	r3, [r7, #24]
 80082e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082e4:	d028      	beq.n	8008338 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80082e6:	69bb      	ldr	r3, [r7, #24]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d007      	beq.n	80082fc <UART_WaitOnFlagUntilTimeout+0x30>
 80082ec:	f7fd f8ba 	bl	8005464 <HAL_GetTick>
 80082f0:	4602      	mov	r2, r0
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	1ad3      	subs	r3, r2, r3
 80082f6:	69ba      	ldr	r2, [r7, #24]
 80082f8:	429a      	cmp	r2, r3
 80082fa:	d21d      	bcs.n	8008338 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	68da      	ldr	r2, [r3, #12]
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800830a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	695a      	ldr	r2, [r3, #20]
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f022 0201 	bic.w	r2, r2, #1
 800831a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	2220      	movs	r2, #32
 8008320:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	2220      	movs	r2, #32
 8008328:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	2200      	movs	r2, #0
 8008330:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8008334:	2303      	movs	r3, #3
 8008336:	e00f      	b.n	8008358 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	681a      	ldr	r2, [r3, #0]
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	4013      	ands	r3, r2
 8008342:	68ba      	ldr	r2, [r7, #8]
 8008344:	429a      	cmp	r2, r3
 8008346:	bf0c      	ite	eq
 8008348:	2301      	moveq	r3, #1
 800834a:	2300      	movne	r3, #0
 800834c:	b2db      	uxtb	r3, r3
 800834e:	461a      	mov	r2, r3
 8008350:	79fb      	ldrb	r3, [r7, #7]
 8008352:	429a      	cmp	r2, r3
 8008354:	d0c3      	beq.n	80082de <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008356:	2300      	movs	r3, #0
}
 8008358:	4618      	mov	r0, r3
 800835a:	3710      	adds	r7, #16
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}

08008360 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008360:	b480      	push	{r7}
 8008362:	b083      	sub	sp, #12
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	68da      	ldr	r2, [r3, #12]
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008376:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	695a      	ldr	r2, [r3, #20]
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f022 0201 	bic.w	r2, r2, #1
 8008386:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2220      	movs	r2, #32
 800838c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8008390:	bf00      	nop
 8008392:	370c      	adds	r7, #12
 8008394:	46bd      	mov	sp, r7
 8008396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839a:	4770      	bx	lr

0800839c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b084      	sub	sp, #16
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	2200      	movs	r2, #0
 80083ae:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	2200      	movs	r2, #0
 80083b4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80083b6:	68f8      	ldr	r0, [r7, #12]
 80083b8:	f7ff ff7e 	bl	80082b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80083bc:	bf00      	nop
 80083be:	3710      	adds	r7, #16
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd80      	pop	{r7, pc}

080083c4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80083c4:	b480      	push	{r7}
 80083c6:	b085      	sub	sp, #20
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80083d2:	b2db      	uxtb	r3, r3
 80083d4:	2b21      	cmp	r3, #33	; 0x21
 80083d6:	d144      	bne.n	8008462 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	689b      	ldr	r3, [r3, #8]
 80083dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083e0:	d11a      	bne.n	8008418 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6a1b      	ldr	r3, [r3, #32]
 80083e6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	881b      	ldrh	r3, [r3, #0]
 80083ec:	461a      	mov	r2, r3
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80083f6:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	691b      	ldr	r3, [r3, #16]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d105      	bne.n	800840c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6a1b      	ldr	r3, [r3, #32]
 8008404:	1c9a      	adds	r2, r3, #2
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	621a      	str	r2, [r3, #32]
 800840a:	e00e      	b.n	800842a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6a1b      	ldr	r3, [r3, #32]
 8008410:	1c5a      	adds	r2, r3, #1
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	621a      	str	r2, [r3, #32]
 8008416:	e008      	b.n	800842a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6a1b      	ldr	r3, [r3, #32]
 800841c:	1c59      	adds	r1, r3, #1
 800841e:	687a      	ldr	r2, [r7, #4]
 8008420:	6211      	str	r1, [r2, #32]
 8008422:	781a      	ldrb	r2, [r3, #0]
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800842e:	b29b      	uxth	r3, r3
 8008430:	3b01      	subs	r3, #1
 8008432:	b29b      	uxth	r3, r3
 8008434:	687a      	ldr	r2, [r7, #4]
 8008436:	4619      	mov	r1, r3
 8008438:	84d1      	strh	r1, [r2, #38]	; 0x26
 800843a:	2b00      	cmp	r3, #0
 800843c:	d10f      	bne.n	800845e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	68da      	ldr	r2, [r3, #12]
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800844c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	68da      	ldr	r2, [r3, #12]
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800845c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800845e:	2300      	movs	r3, #0
 8008460:	e000      	b.n	8008464 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008462:	2302      	movs	r3, #2
  }
}
 8008464:	4618      	mov	r0, r3
 8008466:	3714      	adds	r7, #20
 8008468:	46bd      	mov	sp, r7
 800846a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846e:	4770      	bx	lr

08008470 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b082      	sub	sp, #8
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	68da      	ldr	r2, [r3, #12]
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008486:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2220      	movs	r2, #32
 800848c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f7ff ff07 	bl	80082a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008496:	2300      	movs	r3, #0
}
 8008498:	4618      	mov	r0, r3
 800849a:	3708      	adds	r7, #8
 800849c:	46bd      	mov	sp, r7
 800849e:	bd80      	pop	{r7, pc}

080084a0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b084      	sub	sp, #16
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80084ae:	b2db      	uxtb	r3, r3
 80084b0:	2b22      	cmp	r3, #34	; 0x22
 80084b2:	d171      	bne.n	8008598 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	689b      	ldr	r3, [r3, #8]
 80084b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084bc:	d123      	bne.n	8008506 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084c2:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	691b      	ldr	r3, [r3, #16]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d10e      	bne.n	80084ea <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	685b      	ldr	r3, [r3, #4]
 80084d2:	b29b      	uxth	r3, r3
 80084d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084d8:	b29a      	uxth	r2, r3
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084e2:	1c9a      	adds	r2, r3, #2
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	629a      	str	r2, [r3, #40]	; 0x28
 80084e8:	e029      	b.n	800853e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	685b      	ldr	r3, [r3, #4]
 80084f0:	b29b      	uxth	r3, r3
 80084f2:	b2db      	uxtb	r3, r3
 80084f4:	b29a      	uxth	r2, r3
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084fe:	1c5a      	adds	r2, r3, #1
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	629a      	str	r2, [r3, #40]	; 0x28
 8008504:	e01b      	b.n	800853e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	691b      	ldr	r3, [r3, #16]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d10a      	bne.n	8008524 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	6858      	ldr	r0, [r3, #4]
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008518:	1c59      	adds	r1, r3, #1
 800851a:	687a      	ldr	r2, [r7, #4]
 800851c:	6291      	str	r1, [r2, #40]	; 0x28
 800851e:	b2c2      	uxtb	r2, r0
 8008520:	701a      	strb	r2, [r3, #0]
 8008522:	e00c      	b.n	800853e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	685b      	ldr	r3, [r3, #4]
 800852a:	b2da      	uxtb	r2, r3
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008530:	1c58      	adds	r0, r3, #1
 8008532:	6879      	ldr	r1, [r7, #4]
 8008534:	6288      	str	r0, [r1, #40]	; 0x28
 8008536:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800853a:	b2d2      	uxtb	r2, r2
 800853c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008542:	b29b      	uxth	r3, r3
 8008544:	3b01      	subs	r3, #1
 8008546:	b29b      	uxth	r3, r3
 8008548:	687a      	ldr	r2, [r7, #4]
 800854a:	4619      	mov	r1, r3
 800854c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800854e:	2b00      	cmp	r3, #0
 8008550:	d120      	bne.n	8008594 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	68da      	ldr	r2, [r3, #12]
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f022 0220 	bic.w	r2, r2, #32
 8008560:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	68da      	ldr	r2, [r3, #12]
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008570:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	695a      	ldr	r2, [r3, #20]
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f022 0201 	bic.w	r2, r2, #1
 8008580:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2220      	movs	r2, #32
 8008586:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f7fb fade 	bl	8003b4c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8008590:	2300      	movs	r3, #0
 8008592:	e002      	b.n	800859a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8008594:	2300      	movs	r3, #0
 8008596:	e000      	b.n	800859a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8008598:	2302      	movs	r3, #2
  }
}
 800859a:	4618      	mov	r0, r3
 800859c:	3710      	adds	r7, #16
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}
	...

080085a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80085a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085a8:	b085      	sub	sp, #20
 80085aa:	af00      	add	r7, sp, #0
 80085ac:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	691b      	ldr	r3, [r3, #16]
 80085b4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	68da      	ldr	r2, [r3, #12]
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	430a      	orrs	r2, r1
 80085c2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	689a      	ldr	r2, [r3, #8]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	691b      	ldr	r3, [r3, #16]
 80085cc:	431a      	orrs	r2, r3
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	695b      	ldr	r3, [r3, #20]
 80085d2:	431a      	orrs	r2, r3
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	69db      	ldr	r3, [r3, #28]
 80085d8:	4313      	orrs	r3, r2
 80085da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	68db      	ldr	r3, [r3, #12]
 80085e2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80085e6:	f023 030c 	bic.w	r3, r3, #12
 80085ea:	687a      	ldr	r2, [r7, #4]
 80085ec:	6812      	ldr	r2, [r2, #0]
 80085ee:	68f9      	ldr	r1, [r7, #12]
 80085f0:	430b      	orrs	r3, r1
 80085f2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	695b      	ldr	r3, [r3, #20]
 80085fa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	699a      	ldr	r2, [r3, #24]
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	430a      	orrs	r2, r1
 8008608:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	69db      	ldr	r3, [r3, #28]
 800860e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008612:	f040 818b 	bne.w	800892c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	4ac1      	ldr	r2, [pc, #772]	; (8008920 <UART_SetConfig+0x37c>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d005      	beq.n	800862c <UART_SetConfig+0x88>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	4abf      	ldr	r2, [pc, #764]	; (8008924 <UART_SetConfig+0x380>)
 8008626:	4293      	cmp	r3, r2
 8008628:	f040 80bd 	bne.w	80087a6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800862c:	f7ff fba6 	bl	8007d7c <HAL_RCC_GetPCLK2Freq>
 8008630:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	461d      	mov	r5, r3
 8008636:	f04f 0600 	mov.w	r6, #0
 800863a:	46a8      	mov	r8, r5
 800863c:	46b1      	mov	r9, r6
 800863e:	eb18 0308 	adds.w	r3, r8, r8
 8008642:	eb49 0409 	adc.w	r4, r9, r9
 8008646:	4698      	mov	r8, r3
 8008648:	46a1      	mov	r9, r4
 800864a:	eb18 0805 	adds.w	r8, r8, r5
 800864e:	eb49 0906 	adc.w	r9, r9, r6
 8008652:	f04f 0100 	mov.w	r1, #0
 8008656:	f04f 0200 	mov.w	r2, #0
 800865a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800865e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008662:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008666:	4688      	mov	r8, r1
 8008668:	4691      	mov	r9, r2
 800866a:	eb18 0005 	adds.w	r0, r8, r5
 800866e:	eb49 0106 	adc.w	r1, r9, r6
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	685b      	ldr	r3, [r3, #4]
 8008676:	461d      	mov	r5, r3
 8008678:	f04f 0600 	mov.w	r6, #0
 800867c:	196b      	adds	r3, r5, r5
 800867e:	eb46 0406 	adc.w	r4, r6, r6
 8008682:	461a      	mov	r2, r3
 8008684:	4623      	mov	r3, r4
 8008686:	f7f8 fadf 	bl	8000c48 <__aeabi_uldivmod>
 800868a:	4603      	mov	r3, r0
 800868c:	460c      	mov	r4, r1
 800868e:	461a      	mov	r2, r3
 8008690:	4ba5      	ldr	r3, [pc, #660]	; (8008928 <UART_SetConfig+0x384>)
 8008692:	fba3 2302 	umull	r2, r3, r3, r2
 8008696:	095b      	lsrs	r3, r3, #5
 8008698:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	461d      	mov	r5, r3
 80086a0:	f04f 0600 	mov.w	r6, #0
 80086a4:	46a9      	mov	r9, r5
 80086a6:	46b2      	mov	sl, r6
 80086a8:	eb19 0309 	adds.w	r3, r9, r9
 80086ac:	eb4a 040a 	adc.w	r4, sl, sl
 80086b0:	4699      	mov	r9, r3
 80086b2:	46a2      	mov	sl, r4
 80086b4:	eb19 0905 	adds.w	r9, r9, r5
 80086b8:	eb4a 0a06 	adc.w	sl, sl, r6
 80086bc:	f04f 0100 	mov.w	r1, #0
 80086c0:	f04f 0200 	mov.w	r2, #0
 80086c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80086c8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80086cc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80086d0:	4689      	mov	r9, r1
 80086d2:	4692      	mov	sl, r2
 80086d4:	eb19 0005 	adds.w	r0, r9, r5
 80086d8:	eb4a 0106 	adc.w	r1, sl, r6
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	685b      	ldr	r3, [r3, #4]
 80086e0:	461d      	mov	r5, r3
 80086e2:	f04f 0600 	mov.w	r6, #0
 80086e6:	196b      	adds	r3, r5, r5
 80086e8:	eb46 0406 	adc.w	r4, r6, r6
 80086ec:	461a      	mov	r2, r3
 80086ee:	4623      	mov	r3, r4
 80086f0:	f7f8 faaa 	bl	8000c48 <__aeabi_uldivmod>
 80086f4:	4603      	mov	r3, r0
 80086f6:	460c      	mov	r4, r1
 80086f8:	461a      	mov	r2, r3
 80086fa:	4b8b      	ldr	r3, [pc, #556]	; (8008928 <UART_SetConfig+0x384>)
 80086fc:	fba3 1302 	umull	r1, r3, r3, r2
 8008700:	095b      	lsrs	r3, r3, #5
 8008702:	2164      	movs	r1, #100	; 0x64
 8008704:	fb01 f303 	mul.w	r3, r1, r3
 8008708:	1ad3      	subs	r3, r2, r3
 800870a:	00db      	lsls	r3, r3, #3
 800870c:	3332      	adds	r3, #50	; 0x32
 800870e:	4a86      	ldr	r2, [pc, #536]	; (8008928 <UART_SetConfig+0x384>)
 8008710:	fba2 2303 	umull	r2, r3, r2, r3
 8008714:	095b      	lsrs	r3, r3, #5
 8008716:	005b      	lsls	r3, r3, #1
 8008718:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800871c:	4498      	add	r8, r3
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	461d      	mov	r5, r3
 8008722:	f04f 0600 	mov.w	r6, #0
 8008726:	46a9      	mov	r9, r5
 8008728:	46b2      	mov	sl, r6
 800872a:	eb19 0309 	adds.w	r3, r9, r9
 800872e:	eb4a 040a 	adc.w	r4, sl, sl
 8008732:	4699      	mov	r9, r3
 8008734:	46a2      	mov	sl, r4
 8008736:	eb19 0905 	adds.w	r9, r9, r5
 800873a:	eb4a 0a06 	adc.w	sl, sl, r6
 800873e:	f04f 0100 	mov.w	r1, #0
 8008742:	f04f 0200 	mov.w	r2, #0
 8008746:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800874a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800874e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008752:	4689      	mov	r9, r1
 8008754:	4692      	mov	sl, r2
 8008756:	eb19 0005 	adds.w	r0, r9, r5
 800875a:	eb4a 0106 	adc.w	r1, sl, r6
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	685b      	ldr	r3, [r3, #4]
 8008762:	461d      	mov	r5, r3
 8008764:	f04f 0600 	mov.w	r6, #0
 8008768:	196b      	adds	r3, r5, r5
 800876a:	eb46 0406 	adc.w	r4, r6, r6
 800876e:	461a      	mov	r2, r3
 8008770:	4623      	mov	r3, r4
 8008772:	f7f8 fa69 	bl	8000c48 <__aeabi_uldivmod>
 8008776:	4603      	mov	r3, r0
 8008778:	460c      	mov	r4, r1
 800877a:	461a      	mov	r2, r3
 800877c:	4b6a      	ldr	r3, [pc, #424]	; (8008928 <UART_SetConfig+0x384>)
 800877e:	fba3 1302 	umull	r1, r3, r3, r2
 8008782:	095b      	lsrs	r3, r3, #5
 8008784:	2164      	movs	r1, #100	; 0x64
 8008786:	fb01 f303 	mul.w	r3, r1, r3
 800878a:	1ad3      	subs	r3, r2, r3
 800878c:	00db      	lsls	r3, r3, #3
 800878e:	3332      	adds	r3, #50	; 0x32
 8008790:	4a65      	ldr	r2, [pc, #404]	; (8008928 <UART_SetConfig+0x384>)
 8008792:	fba2 2303 	umull	r2, r3, r2, r3
 8008796:	095b      	lsrs	r3, r3, #5
 8008798:	f003 0207 	and.w	r2, r3, #7
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	4442      	add	r2, r8
 80087a2:	609a      	str	r2, [r3, #8]
 80087a4:	e26f      	b.n	8008c86 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80087a6:	f7ff fad5 	bl	8007d54 <HAL_RCC_GetPCLK1Freq>
 80087aa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	461d      	mov	r5, r3
 80087b0:	f04f 0600 	mov.w	r6, #0
 80087b4:	46a8      	mov	r8, r5
 80087b6:	46b1      	mov	r9, r6
 80087b8:	eb18 0308 	adds.w	r3, r8, r8
 80087bc:	eb49 0409 	adc.w	r4, r9, r9
 80087c0:	4698      	mov	r8, r3
 80087c2:	46a1      	mov	r9, r4
 80087c4:	eb18 0805 	adds.w	r8, r8, r5
 80087c8:	eb49 0906 	adc.w	r9, r9, r6
 80087cc:	f04f 0100 	mov.w	r1, #0
 80087d0:	f04f 0200 	mov.w	r2, #0
 80087d4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80087d8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80087dc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80087e0:	4688      	mov	r8, r1
 80087e2:	4691      	mov	r9, r2
 80087e4:	eb18 0005 	adds.w	r0, r8, r5
 80087e8:	eb49 0106 	adc.w	r1, r9, r6
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	685b      	ldr	r3, [r3, #4]
 80087f0:	461d      	mov	r5, r3
 80087f2:	f04f 0600 	mov.w	r6, #0
 80087f6:	196b      	adds	r3, r5, r5
 80087f8:	eb46 0406 	adc.w	r4, r6, r6
 80087fc:	461a      	mov	r2, r3
 80087fe:	4623      	mov	r3, r4
 8008800:	f7f8 fa22 	bl	8000c48 <__aeabi_uldivmod>
 8008804:	4603      	mov	r3, r0
 8008806:	460c      	mov	r4, r1
 8008808:	461a      	mov	r2, r3
 800880a:	4b47      	ldr	r3, [pc, #284]	; (8008928 <UART_SetConfig+0x384>)
 800880c:	fba3 2302 	umull	r2, r3, r3, r2
 8008810:	095b      	lsrs	r3, r3, #5
 8008812:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	461d      	mov	r5, r3
 800881a:	f04f 0600 	mov.w	r6, #0
 800881e:	46a9      	mov	r9, r5
 8008820:	46b2      	mov	sl, r6
 8008822:	eb19 0309 	adds.w	r3, r9, r9
 8008826:	eb4a 040a 	adc.w	r4, sl, sl
 800882a:	4699      	mov	r9, r3
 800882c:	46a2      	mov	sl, r4
 800882e:	eb19 0905 	adds.w	r9, r9, r5
 8008832:	eb4a 0a06 	adc.w	sl, sl, r6
 8008836:	f04f 0100 	mov.w	r1, #0
 800883a:	f04f 0200 	mov.w	r2, #0
 800883e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008842:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008846:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800884a:	4689      	mov	r9, r1
 800884c:	4692      	mov	sl, r2
 800884e:	eb19 0005 	adds.w	r0, r9, r5
 8008852:	eb4a 0106 	adc.w	r1, sl, r6
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	685b      	ldr	r3, [r3, #4]
 800885a:	461d      	mov	r5, r3
 800885c:	f04f 0600 	mov.w	r6, #0
 8008860:	196b      	adds	r3, r5, r5
 8008862:	eb46 0406 	adc.w	r4, r6, r6
 8008866:	461a      	mov	r2, r3
 8008868:	4623      	mov	r3, r4
 800886a:	f7f8 f9ed 	bl	8000c48 <__aeabi_uldivmod>
 800886e:	4603      	mov	r3, r0
 8008870:	460c      	mov	r4, r1
 8008872:	461a      	mov	r2, r3
 8008874:	4b2c      	ldr	r3, [pc, #176]	; (8008928 <UART_SetConfig+0x384>)
 8008876:	fba3 1302 	umull	r1, r3, r3, r2
 800887a:	095b      	lsrs	r3, r3, #5
 800887c:	2164      	movs	r1, #100	; 0x64
 800887e:	fb01 f303 	mul.w	r3, r1, r3
 8008882:	1ad3      	subs	r3, r2, r3
 8008884:	00db      	lsls	r3, r3, #3
 8008886:	3332      	adds	r3, #50	; 0x32
 8008888:	4a27      	ldr	r2, [pc, #156]	; (8008928 <UART_SetConfig+0x384>)
 800888a:	fba2 2303 	umull	r2, r3, r2, r3
 800888e:	095b      	lsrs	r3, r3, #5
 8008890:	005b      	lsls	r3, r3, #1
 8008892:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008896:	4498      	add	r8, r3
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	461d      	mov	r5, r3
 800889c:	f04f 0600 	mov.w	r6, #0
 80088a0:	46a9      	mov	r9, r5
 80088a2:	46b2      	mov	sl, r6
 80088a4:	eb19 0309 	adds.w	r3, r9, r9
 80088a8:	eb4a 040a 	adc.w	r4, sl, sl
 80088ac:	4699      	mov	r9, r3
 80088ae:	46a2      	mov	sl, r4
 80088b0:	eb19 0905 	adds.w	r9, r9, r5
 80088b4:	eb4a 0a06 	adc.w	sl, sl, r6
 80088b8:	f04f 0100 	mov.w	r1, #0
 80088bc:	f04f 0200 	mov.w	r2, #0
 80088c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80088c4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80088c8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80088cc:	4689      	mov	r9, r1
 80088ce:	4692      	mov	sl, r2
 80088d0:	eb19 0005 	adds.w	r0, r9, r5
 80088d4:	eb4a 0106 	adc.w	r1, sl, r6
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	685b      	ldr	r3, [r3, #4]
 80088dc:	461d      	mov	r5, r3
 80088de:	f04f 0600 	mov.w	r6, #0
 80088e2:	196b      	adds	r3, r5, r5
 80088e4:	eb46 0406 	adc.w	r4, r6, r6
 80088e8:	461a      	mov	r2, r3
 80088ea:	4623      	mov	r3, r4
 80088ec:	f7f8 f9ac 	bl	8000c48 <__aeabi_uldivmod>
 80088f0:	4603      	mov	r3, r0
 80088f2:	460c      	mov	r4, r1
 80088f4:	461a      	mov	r2, r3
 80088f6:	4b0c      	ldr	r3, [pc, #48]	; (8008928 <UART_SetConfig+0x384>)
 80088f8:	fba3 1302 	umull	r1, r3, r3, r2
 80088fc:	095b      	lsrs	r3, r3, #5
 80088fe:	2164      	movs	r1, #100	; 0x64
 8008900:	fb01 f303 	mul.w	r3, r1, r3
 8008904:	1ad3      	subs	r3, r2, r3
 8008906:	00db      	lsls	r3, r3, #3
 8008908:	3332      	adds	r3, #50	; 0x32
 800890a:	4a07      	ldr	r2, [pc, #28]	; (8008928 <UART_SetConfig+0x384>)
 800890c:	fba2 2303 	umull	r2, r3, r2, r3
 8008910:	095b      	lsrs	r3, r3, #5
 8008912:	f003 0207 	and.w	r2, r3, #7
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	4442      	add	r2, r8
 800891c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800891e:	e1b2      	b.n	8008c86 <UART_SetConfig+0x6e2>
 8008920:	40011000 	.word	0x40011000
 8008924:	40011400 	.word	0x40011400
 8008928:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4ad7      	ldr	r2, [pc, #860]	; (8008c90 <UART_SetConfig+0x6ec>)
 8008932:	4293      	cmp	r3, r2
 8008934:	d005      	beq.n	8008942 <UART_SetConfig+0x39e>
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	4ad6      	ldr	r2, [pc, #856]	; (8008c94 <UART_SetConfig+0x6f0>)
 800893c:	4293      	cmp	r3, r2
 800893e:	f040 80d1 	bne.w	8008ae4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8008942:	f7ff fa1b 	bl	8007d7c <HAL_RCC_GetPCLK2Freq>
 8008946:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	469a      	mov	sl, r3
 800894c:	f04f 0b00 	mov.w	fp, #0
 8008950:	46d0      	mov	r8, sl
 8008952:	46d9      	mov	r9, fp
 8008954:	eb18 0308 	adds.w	r3, r8, r8
 8008958:	eb49 0409 	adc.w	r4, r9, r9
 800895c:	4698      	mov	r8, r3
 800895e:	46a1      	mov	r9, r4
 8008960:	eb18 080a 	adds.w	r8, r8, sl
 8008964:	eb49 090b 	adc.w	r9, r9, fp
 8008968:	f04f 0100 	mov.w	r1, #0
 800896c:	f04f 0200 	mov.w	r2, #0
 8008970:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008974:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008978:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800897c:	4688      	mov	r8, r1
 800897e:	4691      	mov	r9, r2
 8008980:	eb1a 0508 	adds.w	r5, sl, r8
 8008984:	eb4b 0609 	adc.w	r6, fp, r9
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	685b      	ldr	r3, [r3, #4]
 800898c:	4619      	mov	r1, r3
 800898e:	f04f 0200 	mov.w	r2, #0
 8008992:	f04f 0300 	mov.w	r3, #0
 8008996:	f04f 0400 	mov.w	r4, #0
 800899a:	0094      	lsls	r4, r2, #2
 800899c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80089a0:	008b      	lsls	r3, r1, #2
 80089a2:	461a      	mov	r2, r3
 80089a4:	4623      	mov	r3, r4
 80089a6:	4628      	mov	r0, r5
 80089a8:	4631      	mov	r1, r6
 80089aa:	f7f8 f94d 	bl	8000c48 <__aeabi_uldivmod>
 80089ae:	4603      	mov	r3, r0
 80089b0:	460c      	mov	r4, r1
 80089b2:	461a      	mov	r2, r3
 80089b4:	4bb8      	ldr	r3, [pc, #736]	; (8008c98 <UART_SetConfig+0x6f4>)
 80089b6:	fba3 2302 	umull	r2, r3, r3, r2
 80089ba:	095b      	lsrs	r3, r3, #5
 80089bc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	469b      	mov	fp, r3
 80089c4:	f04f 0c00 	mov.w	ip, #0
 80089c8:	46d9      	mov	r9, fp
 80089ca:	46e2      	mov	sl, ip
 80089cc:	eb19 0309 	adds.w	r3, r9, r9
 80089d0:	eb4a 040a 	adc.w	r4, sl, sl
 80089d4:	4699      	mov	r9, r3
 80089d6:	46a2      	mov	sl, r4
 80089d8:	eb19 090b 	adds.w	r9, r9, fp
 80089dc:	eb4a 0a0c 	adc.w	sl, sl, ip
 80089e0:	f04f 0100 	mov.w	r1, #0
 80089e4:	f04f 0200 	mov.w	r2, #0
 80089e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80089ec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80089f0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80089f4:	4689      	mov	r9, r1
 80089f6:	4692      	mov	sl, r2
 80089f8:	eb1b 0509 	adds.w	r5, fp, r9
 80089fc:	eb4c 060a 	adc.w	r6, ip, sl
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	685b      	ldr	r3, [r3, #4]
 8008a04:	4619      	mov	r1, r3
 8008a06:	f04f 0200 	mov.w	r2, #0
 8008a0a:	f04f 0300 	mov.w	r3, #0
 8008a0e:	f04f 0400 	mov.w	r4, #0
 8008a12:	0094      	lsls	r4, r2, #2
 8008a14:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008a18:	008b      	lsls	r3, r1, #2
 8008a1a:	461a      	mov	r2, r3
 8008a1c:	4623      	mov	r3, r4
 8008a1e:	4628      	mov	r0, r5
 8008a20:	4631      	mov	r1, r6
 8008a22:	f7f8 f911 	bl	8000c48 <__aeabi_uldivmod>
 8008a26:	4603      	mov	r3, r0
 8008a28:	460c      	mov	r4, r1
 8008a2a:	461a      	mov	r2, r3
 8008a2c:	4b9a      	ldr	r3, [pc, #616]	; (8008c98 <UART_SetConfig+0x6f4>)
 8008a2e:	fba3 1302 	umull	r1, r3, r3, r2
 8008a32:	095b      	lsrs	r3, r3, #5
 8008a34:	2164      	movs	r1, #100	; 0x64
 8008a36:	fb01 f303 	mul.w	r3, r1, r3
 8008a3a:	1ad3      	subs	r3, r2, r3
 8008a3c:	011b      	lsls	r3, r3, #4
 8008a3e:	3332      	adds	r3, #50	; 0x32
 8008a40:	4a95      	ldr	r2, [pc, #596]	; (8008c98 <UART_SetConfig+0x6f4>)
 8008a42:	fba2 2303 	umull	r2, r3, r2, r3
 8008a46:	095b      	lsrs	r3, r3, #5
 8008a48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008a4c:	4498      	add	r8, r3
 8008a4e:	68bb      	ldr	r3, [r7, #8]
 8008a50:	469b      	mov	fp, r3
 8008a52:	f04f 0c00 	mov.w	ip, #0
 8008a56:	46d9      	mov	r9, fp
 8008a58:	46e2      	mov	sl, ip
 8008a5a:	eb19 0309 	adds.w	r3, r9, r9
 8008a5e:	eb4a 040a 	adc.w	r4, sl, sl
 8008a62:	4699      	mov	r9, r3
 8008a64:	46a2      	mov	sl, r4
 8008a66:	eb19 090b 	adds.w	r9, r9, fp
 8008a6a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008a6e:	f04f 0100 	mov.w	r1, #0
 8008a72:	f04f 0200 	mov.w	r2, #0
 8008a76:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008a7a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008a7e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008a82:	4689      	mov	r9, r1
 8008a84:	4692      	mov	sl, r2
 8008a86:	eb1b 0509 	adds.w	r5, fp, r9
 8008a8a:	eb4c 060a 	adc.w	r6, ip, sl
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	685b      	ldr	r3, [r3, #4]
 8008a92:	4619      	mov	r1, r3
 8008a94:	f04f 0200 	mov.w	r2, #0
 8008a98:	f04f 0300 	mov.w	r3, #0
 8008a9c:	f04f 0400 	mov.w	r4, #0
 8008aa0:	0094      	lsls	r4, r2, #2
 8008aa2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008aa6:	008b      	lsls	r3, r1, #2
 8008aa8:	461a      	mov	r2, r3
 8008aaa:	4623      	mov	r3, r4
 8008aac:	4628      	mov	r0, r5
 8008aae:	4631      	mov	r1, r6
 8008ab0:	f7f8 f8ca 	bl	8000c48 <__aeabi_uldivmod>
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	460c      	mov	r4, r1
 8008ab8:	461a      	mov	r2, r3
 8008aba:	4b77      	ldr	r3, [pc, #476]	; (8008c98 <UART_SetConfig+0x6f4>)
 8008abc:	fba3 1302 	umull	r1, r3, r3, r2
 8008ac0:	095b      	lsrs	r3, r3, #5
 8008ac2:	2164      	movs	r1, #100	; 0x64
 8008ac4:	fb01 f303 	mul.w	r3, r1, r3
 8008ac8:	1ad3      	subs	r3, r2, r3
 8008aca:	011b      	lsls	r3, r3, #4
 8008acc:	3332      	adds	r3, #50	; 0x32
 8008ace:	4a72      	ldr	r2, [pc, #456]	; (8008c98 <UART_SetConfig+0x6f4>)
 8008ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8008ad4:	095b      	lsrs	r3, r3, #5
 8008ad6:	f003 020f 	and.w	r2, r3, #15
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	4442      	add	r2, r8
 8008ae0:	609a      	str	r2, [r3, #8]
 8008ae2:	e0d0      	b.n	8008c86 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8008ae4:	f7ff f936 	bl	8007d54 <HAL_RCC_GetPCLK1Freq>
 8008ae8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	469a      	mov	sl, r3
 8008aee:	f04f 0b00 	mov.w	fp, #0
 8008af2:	46d0      	mov	r8, sl
 8008af4:	46d9      	mov	r9, fp
 8008af6:	eb18 0308 	adds.w	r3, r8, r8
 8008afa:	eb49 0409 	adc.w	r4, r9, r9
 8008afe:	4698      	mov	r8, r3
 8008b00:	46a1      	mov	r9, r4
 8008b02:	eb18 080a 	adds.w	r8, r8, sl
 8008b06:	eb49 090b 	adc.w	r9, r9, fp
 8008b0a:	f04f 0100 	mov.w	r1, #0
 8008b0e:	f04f 0200 	mov.w	r2, #0
 8008b12:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008b16:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008b1a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008b1e:	4688      	mov	r8, r1
 8008b20:	4691      	mov	r9, r2
 8008b22:	eb1a 0508 	adds.w	r5, sl, r8
 8008b26:	eb4b 0609 	adc.w	r6, fp, r9
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	685b      	ldr	r3, [r3, #4]
 8008b2e:	4619      	mov	r1, r3
 8008b30:	f04f 0200 	mov.w	r2, #0
 8008b34:	f04f 0300 	mov.w	r3, #0
 8008b38:	f04f 0400 	mov.w	r4, #0
 8008b3c:	0094      	lsls	r4, r2, #2
 8008b3e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008b42:	008b      	lsls	r3, r1, #2
 8008b44:	461a      	mov	r2, r3
 8008b46:	4623      	mov	r3, r4
 8008b48:	4628      	mov	r0, r5
 8008b4a:	4631      	mov	r1, r6
 8008b4c:	f7f8 f87c 	bl	8000c48 <__aeabi_uldivmod>
 8008b50:	4603      	mov	r3, r0
 8008b52:	460c      	mov	r4, r1
 8008b54:	461a      	mov	r2, r3
 8008b56:	4b50      	ldr	r3, [pc, #320]	; (8008c98 <UART_SetConfig+0x6f4>)
 8008b58:	fba3 2302 	umull	r2, r3, r3, r2
 8008b5c:	095b      	lsrs	r3, r3, #5
 8008b5e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	469b      	mov	fp, r3
 8008b66:	f04f 0c00 	mov.w	ip, #0
 8008b6a:	46d9      	mov	r9, fp
 8008b6c:	46e2      	mov	sl, ip
 8008b6e:	eb19 0309 	adds.w	r3, r9, r9
 8008b72:	eb4a 040a 	adc.w	r4, sl, sl
 8008b76:	4699      	mov	r9, r3
 8008b78:	46a2      	mov	sl, r4
 8008b7a:	eb19 090b 	adds.w	r9, r9, fp
 8008b7e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008b82:	f04f 0100 	mov.w	r1, #0
 8008b86:	f04f 0200 	mov.w	r2, #0
 8008b8a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008b8e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008b92:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008b96:	4689      	mov	r9, r1
 8008b98:	4692      	mov	sl, r2
 8008b9a:	eb1b 0509 	adds.w	r5, fp, r9
 8008b9e:	eb4c 060a 	adc.w	r6, ip, sl
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	685b      	ldr	r3, [r3, #4]
 8008ba6:	4619      	mov	r1, r3
 8008ba8:	f04f 0200 	mov.w	r2, #0
 8008bac:	f04f 0300 	mov.w	r3, #0
 8008bb0:	f04f 0400 	mov.w	r4, #0
 8008bb4:	0094      	lsls	r4, r2, #2
 8008bb6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008bba:	008b      	lsls	r3, r1, #2
 8008bbc:	461a      	mov	r2, r3
 8008bbe:	4623      	mov	r3, r4
 8008bc0:	4628      	mov	r0, r5
 8008bc2:	4631      	mov	r1, r6
 8008bc4:	f7f8 f840 	bl	8000c48 <__aeabi_uldivmod>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	460c      	mov	r4, r1
 8008bcc:	461a      	mov	r2, r3
 8008bce:	4b32      	ldr	r3, [pc, #200]	; (8008c98 <UART_SetConfig+0x6f4>)
 8008bd0:	fba3 1302 	umull	r1, r3, r3, r2
 8008bd4:	095b      	lsrs	r3, r3, #5
 8008bd6:	2164      	movs	r1, #100	; 0x64
 8008bd8:	fb01 f303 	mul.w	r3, r1, r3
 8008bdc:	1ad3      	subs	r3, r2, r3
 8008bde:	011b      	lsls	r3, r3, #4
 8008be0:	3332      	adds	r3, #50	; 0x32
 8008be2:	4a2d      	ldr	r2, [pc, #180]	; (8008c98 <UART_SetConfig+0x6f4>)
 8008be4:	fba2 2303 	umull	r2, r3, r2, r3
 8008be8:	095b      	lsrs	r3, r3, #5
 8008bea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008bee:	4498      	add	r8, r3
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	469b      	mov	fp, r3
 8008bf4:	f04f 0c00 	mov.w	ip, #0
 8008bf8:	46d9      	mov	r9, fp
 8008bfa:	46e2      	mov	sl, ip
 8008bfc:	eb19 0309 	adds.w	r3, r9, r9
 8008c00:	eb4a 040a 	adc.w	r4, sl, sl
 8008c04:	4699      	mov	r9, r3
 8008c06:	46a2      	mov	sl, r4
 8008c08:	eb19 090b 	adds.w	r9, r9, fp
 8008c0c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008c10:	f04f 0100 	mov.w	r1, #0
 8008c14:	f04f 0200 	mov.w	r2, #0
 8008c18:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008c1c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008c20:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008c24:	4689      	mov	r9, r1
 8008c26:	4692      	mov	sl, r2
 8008c28:	eb1b 0509 	adds.w	r5, fp, r9
 8008c2c:	eb4c 060a 	adc.w	r6, ip, sl
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	685b      	ldr	r3, [r3, #4]
 8008c34:	4619      	mov	r1, r3
 8008c36:	f04f 0200 	mov.w	r2, #0
 8008c3a:	f04f 0300 	mov.w	r3, #0
 8008c3e:	f04f 0400 	mov.w	r4, #0
 8008c42:	0094      	lsls	r4, r2, #2
 8008c44:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008c48:	008b      	lsls	r3, r1, #2
 8008c4a:	461a      	mov	r2, r3
 8008c4c:	4623      	mov	r3, r4
 8008c4e:	4628      	mov	r0, r5
 8008c50:	4631      	mov	r1, r6
 8008c52:	f7f7 fff9 	bl	8000c48 <__aeabi_uldivmod>
 8008c56:	4603      	mov	r3, r0
 8008c58:	460c      	mov	r4, r1
 8008c5a:	461a      	mov	r2, r3
 8008c5c:	4b0e      	ldr	r3, [pc, #56]	; (8008c98 <UART_SetConfig+0x6f4>)
 8008c5e:	fba3 1302 	umull	r1, r3, r3, r2
 8008c62:	095b      	lsrs	r3, r3, #5
 8008c64:	2164      	movs	r1, #100	; 0x64
 8008c66:	fb01 f303 	mul.w	r3, r1, r3
 8008c6a:	1ad3      	subs	r3, r2, r3
 8008c6c:	011b      	lsls	r3, r3, #4
 8008c6e:	3332      	adds	r3, #50	; 0x32
 8008c70:	4a09      	ldr	r2, [pc, #36]	; (8008c98 <UART_SetConfig+0x6f4>)
 8008c72:	fba2 2303 	umull	r2, r3, r2, r3
 8008c76:	095b      	lsrs	r3, r3, #5
 8008c78:	f003 020f 	and.w	r2, r3, #15
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	4442      	add	r2, r8
 8008c82:	609a      	str	r2, [r3, #8]
}
 8008c84:	e7ff      	b.n	8008c86 <UART_SetConfig+0x6e2>
 8008c86:	bf00      	nop
 8008c88:	3714      	adds	r7, #20
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c90:	40011000 	.word	0x40011000
 8008c94:	40011400 	.word	0x40011400
 8008c98:	51eb851f 	.word	0x51eb851f

08008c9c <LL_GPIO_SetPinMode>:
{
 8008c9c:	b480      	push	{r7}
 8008c9e:	b089      	sub	sp, #36	; 0x24
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	60f8      	str	r0, [r7, #12]
 8008ca4:	60b9      	str	r1, [r7, #8]
 8008ca6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	681a      	ldr	r2, [r3, #0]
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008cb0:	697b      	ldr	r3, [r7, #20]
 8008cb2:	fa93 f3a3 	rbit	r3, r3
 8008cb6:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8008cb8:	693b      	ldr	r3, [r7, #16]
 8008cba:	fab3 f383 	clz	r3, r3
 8008cbe:	b2db      	uxtb	r3, r3
 8008cc0:	005b      	lsls	r3, r3, #1
 8008cc2:	2103      	movs	r1, #3
 8008cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8008cc8:	43db      	mvns	r3, r3
 8008cca:	401a      	ands	r2, r3
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008cd0:	69fb      	ldr	r3, [r7, #28]
 8008cd2:	fa93 f3a3 	rbit	r3, r3
 8008cd6:	61bb      	str	r3, [r7, #24]
  return result;
 8008cd8:	69bb      	ldr	r3, [r7, #24]
 8008cda:	fab3 f383 	clz	r3, r3
 8008cde:	b2db      	uxtb	r3, r3
 8008ce0:	005b      	lsls	r3, r3, #1
 8008ce2:	6879      	ldr	r1, [r7, #4]
 8008ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8008ce8:	431a      	orrs	r2, r3
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	601a      	str	r2, [r3, #0]
}
 8008cee:	bf00      	nop
 8008cf0:	3724      	adds	r7, #36	; 0x24
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf8:	4770      	bx	lr

08008cfa <LL_GPIO_SetPinOutputType>:
{
 8008cfa:	b480      	push	{r7}
 8008cfc:	b085      	sub	sp, #20
 8008cfe:	af00      	add	r7, sp, #0
 8008d00:	60f8      	str	r0, [r7, #12]
 8008d02:	60b9      	str	r1, [r7, #8]
 8008d04:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	685a      	ldr	r2, [r3, #4]
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	43db      	mvns	r3, r3
 8008d0e:	401a      	ands	r2, r3
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	6879      	ldr	r1, [r7, #4]
 8008d14:	fb01 f303 	mul.w	r3, r1, r3
 8008d18:	431a      	orrs	r2, r3
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	605a      	str	r2, [r3, #4]
}
 8008d1e:	bf00      	nop
 8008d20:	3714      	adds	r7, #20
 8008d22:	46bd      	mov	sp, r7
 8008d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d28:	4770      	bx	lr

08008d2a <LL_GPIO_SetPinSpeed>:
{
 8008d2a:	b480      	push	{r7}
 8008d2c:	b089      	sub	sp, #36	; 0x24
 8008d2e:	af00      	add	r7, sp, #0
 8008d30:	60f8      	str	r0, [r7, #12]
 8008d32:	60b9      	str	r1, [r7, #8]
 8008d34:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	689a      	ldr	r2, [r3, #8]
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d3e:	697b      	ldr	r3, [r7, #20]
 8008d40:	fa93 f3a3 	rbit	r3, r3
 8008d44:	613b      	str	r3, [r7, #16]
  return result;
 8008d46:	693b      	ldr	r3, [r7, #16]
 8008d48:	fab3 f383 	clz	r3, r3
 8008d4c:	b2db      	uxtb	r3, r3
 8008d4e:	005b      	lsls	r3, r3, #1
 8008d50:	2103      	movs	r1, #3
 8008d52:	fa01 f303 	lsl.w	r3, r1, r3
 8008d56:	43db      	mvns	r3, r3
 8008d58:	401a      	ands	r2, r3
 8008d5a:	68bb      	ldr	r3, [r7, #8]
 8008d5c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d5e:	69fb      	ldr	r3, [r7, #28]
 8008d60:	fa93 f3a3 	rbit	r3, r3
 8008d64:	61bb      	str	r3, [r7, #24]
  return result;
 8008d66:	69bb      	ldr	r3, [r7, #24]
 8008d68:	fab3 f383 	clz	r3, r3
 8008d6c:	b2db      	uxtb	r3, r3
 8008d6e:	005b      	lsls	r3, r3, #1
 8008d70:	6879      	ldr	r1, [r7, #4]
 8008d72:	fa01 f303 	lsl.w	r3, r1, r3
 8008d76:	431a      	orrs	r2, r3
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	609a      	str	r2, [r3, #8]
}
 8008d7c:	bf00      	nop
 8008d7e:	3724      	adds	r7, #36	; 0x24
 8008d80:	46bd      	mov	sp, r7
 8008d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d86:	4770      	bx	lr

08008d88 <LL_GPIO_SetPinPull>:
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b089      	sub	sp, #36	; 0x24
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	60f8      	str	r0, [r7, #12]
 8008d90:	60b9      	str	r1, [r7, #8]
 8008d92:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	68da      	ldr	r2, [r3, #12]
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d9c:	697b      	ldr	r3, [r7, #20]
 8008d9e:	fa93 f3a3 	rbit	r3, r3
 8008da2:	613b      	str	r3, [r7, #16]
  return result;
 8008da4:	693b      	ldr	r3, [r7, #16]
 8008da6:	fab3 f383 	clz	r3, r3
 8008daa:	b2db      	uxtb	r3, r3
 8008dac:	005b      	lsls	r3, r3, #1
 8008dae:	2103      	movs	r1, #3
 8008db0:	fa01 f303 	lsl.w	r3, r1, r3
 8008db4:	43db      	mvns	r3, r3
 8008db6:	401a      	ands	r2, r3
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008dbc:	69fb      	ldr	r3, [r7, #28]
 8008dbe:	fa93 f3a3 	rbit	r3, r3
 8008dc2:	61bb      	str	r3, [r7, #24]
  return result;
 8008dc4:	69bb      	ldr	r3, [r7, #24]
 8008dc6:	fab3 f383 	clz	r3, r3
 8008dca:	b2db      	uxtb	r3, r3
 8008dcc:	005b      	lsls	r3, r3, #1
 8008dce:	6879      	ldr	r1, [r7, #4]
 8008dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8008dd4:	431a      	orrs	r2, r3
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	60da      	str	r2, [r3, #12]
}
 8008dda:	bf00      	nop
 8008ddc:	3724      	adds	r7, #36	; 0x24
 8008dde:	46bd      	mov	sp, r7
 8008de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de4:	4770      	bx	lr

08008de6 <LL_GPIO_SetAFPin_0_7>:
{
 8008de6:	b480      	push	{r7}
 8008de8:	b089      	sub	sp, #36	; 0x24
 8008dea:	af00      	add	r7, sp, #0
 8008dec:	60f8      	str	r0, [r7, #12]
 8008dee:	60b9      	str	r1, [r7, #8]
 8008df0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	6a1a      	ldr	r2, [r3, #32]
 8008df6:	68bb      	ldr	r3, [r7, #8]
 8008df8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008dfa:	697b      	ldr	r3, [r7, #20]
 8008dfc:	fa93 f3a3 	rbit	r3, r3
 8008e00:	613b      	str	r3, [r7, #16]
  return result;
 8008e02:	693b      	ldr	r3, [r7, #16]
 8008e04:	fab3 f383 	clz	r3, r3
 8008e08:	b2db      	uxtb	r3, r3
 8008e0a:	009b      	lsls	r3, r3, #2
 8008e0c:	210f      	movs	r1, #15
 8008e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8008e12:	43db      	mvns	r3, r3
 8008e14:	401a      	ands	r2, r3
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e1a:	69fb      	ldr	r3, [r7, #28]
 8008e1c:	fa93 f3a3 	rbit	r3, r3
 8008e20:	61bb      	str	r3, [r7, #24]
  return result;
 8008e22:	69bb      	ldr	r3, [r7, #24]
 8008e24:	fab3 f383 	clz	r3, r3
 8008e28:	b2db      	uxtb	r3, r3
 8008e2a:	009b      	lsls	r3, r3, #2
 8008e2c:	6879      	ldr	r1, [r7, #4]
 8008e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8008e32:	431a      	orrs	r2, r3
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	621a      	str	r2, [r3, #32]
}
 8008e38:	bf00      	nop
 8008e3a:	3724      	adds	r7, #36	; 0x24
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e42:	4770      	bx	lr

08008e44 <LL_GPIO_SetAFPin_8_15>:
{
 8008e44:	b480      	push	{r7}
 8008e46:	b089      	sub	sp, #36	; 0x24
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	60f8      	str	r0, [r7, #12]
 8008e4c:	60b9      	str	r1, [r7, #8]
 8008e4e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	0a1b      	lsrs	r3, r3, #8
 8008e58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e5a:	697b      	ldr	r3, [r7, #20]
 8008e5c:	fa93 f3a3 	rbit	r3, r3
 8008e60:	613b      	str	r3, [r7, #16]
  return result;
 8008e62:	693b      	ldr	r3, [r7, #16]
 8008e64:	fab3 f383 	clz	r3, r3
 8008e68:	b2db      	uxtb	r3, r3
 8008e6a:	009b      	lsls	r3, r3, #2
 8008e6c:	210f      	movs	r1, #15
 8008e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8008e72:	43db      	mvns	r3, r3
 8008e74:	401a      	ands	r2, r3
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	0a1b      	lsrs	r3, r3, #8
 8008e7a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e7c:	69fb      	ldr	r3, [r7, #28]
 8008e7e:	fa93 f3a3 	rbit	r3, r3
 8008e82:	61bb      	str	r3, [r7, #24]
  return result;
 8008e84:	69bb      	ldr	r3, [r7, #24]
 8008e86:	fab3 f383 	clz	r3, r3
 8008e8a:	b2db      	uxtb	r3, r3
 8008e8c:	009b      	lsls	r3, r3, #2
 8008e8e:	6879      	ldr	r1, [r7, #4]
 8008e90:	fa01 f303 	lsl.w	r3, r1, r3
 8008e94:	431a      	orrs	r2, r3
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	625a      	str	r2, [r3, #36]	; 0x24
}
 8008e9a:	bf00      	nop
 8008e9c:	3724      	adds	r7, #36	; 0x24
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea4:	4770      	bx	lr

08008ea6 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8008ea6:	b580      	push	{r7, lr}
 8008ea8:	b088      	sub	sp, #32
 8008eaa:	af00      	add	r7, sp, #0
 8008eac:	6078      	str	r0, [r7, #4]
 8008eae:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	fa93 f3a3 	rbit	r3, r3
 8008ec4:	613b      	str	r3, [r7, #16]
  return result;
 8008ec6:	693b      	ldr	r3, [r7, #16]
 8008ec8:	fab3 f383 	clz	r3, r3
 8008ecc:	b2db      	uxtb	r3, r3
 8008ece:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8008ed0:	e050      	b.n	8008f74 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	681a      	ldr	r2, [r3, #0]
 8008ed6:	2101      	movs	r1, #1
 8008ed8:	69fb      	ldr	r3, [r7, #28]
 8008eda:	fa01 f303 	lsl.w	r3, r1, r3
 8008ede:	4013      	ands	r3, r2
 8008ee0:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8008ee2:	69bb      	ldr	r3, [r7, #24]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d042      	beq.n	8008f6e <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	685b      	ldr	r3, [r3, #4]
 8008eec:	2b01      	cmp	r3, #1
 8008eee:	d003      	beq.n	8008ef8 <LL_GPIO_Init+0x52>
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	685b      	ldr	r3, [r3, #4]
 8008ef4:	2b02      	cmp	r3, #2
 8008ef6:	d10d      	bne.n	8008f14 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	689b      	ldr	r3, [r3, #8]
 8008efc:	461a      	mov	r2, r3
 8008efe:	69b9      	ldr	r1, [r7, #24]
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f7ff ff12 	bl	8008d2a <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	68db      	ldr	r3, [r3, #12]
 8008f0a:	461a      	mov	r2, r3
 8008f0c:	69b9      	ldr	r1, [r7, #24]
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	f7ff fef3 	bl	8008cfa <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	691b      	ldr	r3, [r3, #16]
 8008f18:	461a      	mov	r2, r3
 8008f1a:	69b9      	ldr	r1, [r7, #24]
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f7ff ff33 	bl	8008d88 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	685b      	ldr	r3, [r3, #4]
 8008f26:	2b02      	cmp	r3, #2
 8008f28:	d11a      	bne.n	8008f60 <LL_GPIO_Init+0xba>
 8008f2a:	69bb      	ldr	r3, [r7, #24]
 8008f2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	fa93 f3a3 	rbit	r3, r3
 8008f34:	60bb      	str	r3, [r7, #8]
  return result;
 8008f36:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8008f38:	fab3 f383 	clz	r3, r3
 8008f3c:	b2db      	uxtb	r3, r3
 8008f3e:	2b07      	cmp	r3, #7
 8008f40:	d807      	bhi.n	8008f52 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	695b      	ldr	r3, [r3, #20]
 8008f46:	461a      	mov	r2, r3
 8008f48:	69b9      	ldr	r1, [r7, #24]
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f7ff ff4b 	bl	8008de6 <LL_GPIO_SetAFPin_0_7>
 8008f50:	e006      	b.n	8008f60 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	695b      	ldr	r3, [r3, #20]
 8008f56:	461a      	mov	r2, r3
 8008f58:	69b9      	ldr	r1, [r7, #24]
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f7ff ff72 	bl	8008e44 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	685b      	ldr	r3, [r3, #4]
 8008f64:	461a      	mov	r2, r3
 8008f66:	69b9      	ldr	r1, [r7, #24]
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f7ff fe97 	bl	8008c9c <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8008f6e:	69fb      	ldr	r3, [r7, #28]
 8008f70:	3301      	adds	r3, #1
 8008f72:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	681a      	ldr	r2, [r3, #0]
 8008f78:	69fb      	ldr	r3, [r7, #28]
 8008f7a:	fa22 f303 	lsr.w	r3, r2, r3
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d1a7      	bne.n	8008ed2 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8008f82:	2300      	movs	r3, #0
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3720      	adds	r7, #32
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}

08008f8c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8008f90:	4b04      	ldr	r3, [pc, #16]	; (8008fa4 <LL_RCC_GetSysClkSource+0x18>)
 8008f92:	689b      	ldr	r3, [r3, #8]
 8008f94:	f003 030c 	and.w	r3, r3, #12
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa0:	4770      	bx	lr
 8008fa2:	bf00      	nop
 8008fa4:	40023800 	.word	0x40023800

08008fa8 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8008fa8:	b480      	push	{r7}
 8008faa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8008fac:	4b04      	ldr	r3, [pc, #16]	; (8008fc0 <LL_RCC_GetAHBPrescaler+0x18>)
 8008fae:	689b      	ldr	r3, [r3, #8]
 8008fb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbc:	4770      	bx	lr
 8008fbe:	bf00      	nop
 8008fc0:	40023800 	.word	0x40023800

08008fc4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8008fc8:	4b04      	ldr	r3, [pc, #16]	; (8008fdc <LL_RCC_GetAPB1Prescaler+0x18>)
 8008fca:	689b      	ldr	r3, [r3, #8]
 8008fcc:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd8:	4770      	bx	lr
 8008fda:	bf00      	nop
 8008fdc:	40023800 	.word	0x40023800

08008fe0 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8008fe0:	b480      	push	{r7}
 8008fe2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8008fe4:	4b04      	ldr	r3, [pc, #16]	; (8008ff8 <LL_RCC_GetAPB2Prescaler+0x18>)
 8008fe6:	689b      	ldr	r3, [r3, #8]
 8008fe8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8008fec:	4618      	mov	r0, r3
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff4:	4770      	bx	lr
 8008ff6:	bf00      	nop
 8008ff8:	40023800 	.word	0x40023800

08008ffc <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8009000:	4b04      	ldr	r3, [pc, #16]	; (8009014 <LL_RCC_PLL_GetMainSource+0x18>)
 8009002:	685b      	ldr	r3, [r3, #4]
 8009004:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8009008:	4618      	mov	r0, r3
 800900a:	46bd      	mov	sp, r7
 800900c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009010:	4770      	bx	lr
 8009012:	bf00      	nop
 8009014:	40023800 	.word	0x40023800

08009018 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8009018:	b480      	push	{r7}
 800901a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800901c:	4b04      	ldr	r3, [pc, #16]	; (8009030 <LL_RCC_PLL_GetN+0x18>)
 800901e:	685b      	ldr	r3, [r3, #4]
 8009020:	099b      	lsrs	r3, r3, #6
 8009022:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8009026:	4618      	mov	r0, r3
 8009028:	46bd      	mov	sp, r7
 800902a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902e:	4770      	bx	lr
 8009030:	40023800 	.word	0x40023800

08009034 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8009034:	b480      	push	{r7}
 8009036:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8009038:	4b04      	ldr	r3, [pc, #16]	; (800904c <LL_RCC_PLL_GetP+0x18>)
 800903a:	685b      	ldr	r3, [r3, #4]
 800903c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8009040:	4618      	mov	r0, r3
 8009042:	46bd      	mov	sp, r7
 8009044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009048:	4770      	bx	lr
 800904a:	bf00      	nop
 800904c:	40023800 	.word	0x40023800

08009050 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8009050:	b480      	push	{r7}
 8009052:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8009054:	4b04      	ldr	r3, [pc, #16]	; (8009068 <LL_RCC_PLL_GetDivider+0x18>)
 8009056:	685b      	ldr	r3, [r3, #4]
 8009058:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 800905c:	4618      	mov	r0, r3
 800905e:	46bd      	mov	sp, r7
 8009060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009064:	4770      	bx	lr
 8009066:	bf00      	nop
 8009068:	40023800 	.word	0x40023800

0800906c <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b082      	sub	sp, #8
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8009074:	f000 f820 	bl	80090b8 <RCC_GetSystemClockFreq>
 8009078:	4602      	mov	r2, r0
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	4618      	mov	r0, r3
 8009084:	f000 f83e 	bl	8009104 <RCC_GetHCLKClockFreq>
 8009088:	4602      	mov	r2, r0
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	685b      	ldr	r3, [r3, #4]
 8009092:	4618      	mov	r0, r3
 8009094:	f000 f84c 	bl	8009130 <RCC_GetPCLK1ClockFreq>
 8009098:	4602      	mov	r2, r0
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	685b      	ldr	r3, [r3, #4]
 80090a2:	4618      	mov	r0, r3
 80090a4:	f000 f858 	bl	8009158 <RCC_GetPCLK2ClockFreq>
 80090a8:	4602      	mov	r2, r0
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	60da      	str	r2, [r3, #12]
}
 80090ae:	bf00      	nop
 80090b0:	3708      	adds	r7, #8
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}
	...

080090b8 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b082      	sub	sp, #8
 80090bc:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80090be:	2300      	movs	r3, #0
 80090c0:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80090c2:	f7ff ff63 	bl	8008f8c <LL_RCC_GetSysClkSource>
 80090c6:	4603      	mov	r3, r0
 80090c8:	2b04      	cmp	r3, #4
 80090ca:	d006      	beq.n	80090da <RCC_GetSystemClockFreq+0x22>
 80090cc:	2b08      	cmp	r3, #8
 80090ce:	d007      	beq.n	80090e0 <RCC_GetSystemClockFreq+0x28>
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d10a      	bne.n	80090ea <RCC_GetSystemClockFreq+0x32>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80090d4:	4b09      	ldr	r3, [pc, #36]	; (80090fc <RCC_GetSystemClockFreq+0x44>)
 80090d6:	607b      	str	r3, [r7, #4]
      break;
 80090d8:	e00a      	b.n	80090f0 <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80090da:	4b09      	ldr	r3, [pc, #36]	; (8009100 <RCC_GetSystemClockFreq+0x48>)
 80090dc:	607b      	str	r3, [r7, #4]
      break;
 80090de:	e007      	b.n	80090f0 <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 80090e0:	2008      	movs	r0, #8
 80090e2:	f000 f84d 	bl	8009180 <RCC_PLL_GetFreqDomain_SYS>
 80090e6:	6078      	str	r0, [r7, #4]
      break;
 80090e8:	e002      	b.n	80090f0 <RCC_GetSystemClockFreq+0x38>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 80090ea:	4b04      	ldr	r3, [pc, #16]	; (80090fc <RCC_GetSystemClockFreq+0x44>)
 80090ec:	607b      	str	r3, [r7, #4]
      break;
 80090ee:	bf00      	nop
  }

  return frequency;
 80090f0:	687b      	ldr	r3, [r7, #4]
}
 80090f2:	4618      	mov	r0, r3
 80090f4:	3708      	adds	r7, #8
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bd80      	pop	{r7, pc}
 80090fa:	bf00      	nop
 80090fc:	00f42400 	.word	0x00f42400
 8009100:	007a1200 	.word	0x007a1200

08009104 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b082      	sub	sp, #8
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800910c:	f7ff ff4c 	bl	8008fa8 <LL_RCC_GetAHBPrescaler>
 8009110:	4603      	mov	r3, r0
 8009112:	091b      	lsrs	r3, r3, #4
 8009114:	f003 030f 	and.w	r3, r3, #15
 8009118:	4a04      	ldr	r2, [pc, #16]	; (800912c <RCC_GetHCLKClockFreq+0x28>)
 800911a:	5cd3      	ldrb	r3, [r2, r3]
 800911c:	461a      	mov	r2, r3
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	40d3      	lsrs	r3, r2
}
 8009122:	4618      	mov	r0, r3
 8009124:	3708      	adds	r7, #8
 8009126:	46bd      	mov	sp, r7
 8009128:	bd80      	pop	{r7, pc}
 800912a:	bf00      	nop
 800912c:	0800d7cc 	.word	0x0800d7cc

08009130 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b082      	sub	sp, #8
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8009138:	f7ff ff44 	bl	8008fc4 <LL_RCC_GetAPB1Prescaler>
 800913c:	4603      	mov	r3, r0
 800913e:	0a9b      	lsrs	r3, r3, #10
 8009140:	4a04      	ldr	r2, [pc, #16]	; (8009154 <RCC_GetPCLK1ClockFreq+0x24>)
 8009142:	5cd3      	ldrb	r3, [r2, r3]
 8009144:	461a      	mov	r2, r3
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	40d3      	lsrs	r3, r2
}
 800914a:	4618      	mov	r0, r3
 800914c:	3708      	adds	r7, #8
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}
 8009152:	bf00      	nop
 8009154:	0800d7dc 	.word	0x0800d7dc

08009158 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b082      	sub	sp, #8
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8009160:	f7ff ff3e 	bl	8008fe0 <LL_RCC_GetAPB2Prescaler>
 8009164:	4603      	mov	r3, r0
 8009166:	0b5b      	lsrs	r3, r3, #13
 8009168:	4a04      	ldr	r2, [pc, #16]	; (800917c <RCC_GetPCLK2ClockFreq+0x24>)
 800916a:	5cd3      	ldrb	r3, [r2, r3]
 800916c:	461a      	mov	r2, r3
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	40d3      	lsrs	r3, r2
}
 8009172:	4618      	mov	r0, r3
 8009174:	3708      	adds	r7, #8
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}
 800917a:	bf00      	nop
 800917c:	0800d7dc 	.word	0x0800d7dc

08009180 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8009180:	b590      	push	{r4, r7, lr}
 8009182:	b087      	sub	sp, #28
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8009188:	2300      	movs	r3, #0
 800918a:	617b      	str	r3, [r7, #20]
 800918c:	2300      	movs	r3, #0
 800918e:	60fb      	str	r3, [r7, #12]
 8009190:	2300      	movs	r3, #0
 8009192:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8009194:	f7ff ff32 	bl	8008ffc <LL_RCC_PLL_GetMainSource>
 8009198:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d003      	beq.n	80091a8 <RCC_PLL_GetFreqDomain_SYS+0x28>
 80091a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80091a4:	d003      	beq.n	80091ae <RCC_PLL_GetFreqDomain_SYS+0x2e>
 80091a6:	e005      	b.n	80091b4 <RCC_PLL_GetFreqDomain_SYS+0x34>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80091a8:	4b12      	ldr	r3, [pc, #72]	; (80091f4 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80091aa:	617b      	str	r3, [r7, #20]
      break;
 80091ac:	e005      	b.n	80091ba <RCC_PLL_GetFreqDomain_SYS+0x3a>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80091ae:	4b12      	ldr	r3, [pc, #72]	; (80091f8 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 80091b0:	617b      	str	r3, [r7, #20]
      break;
 80091b2:	e002      	b.n	80091ba <RCC_PLL_GetFreqDomain_SYS+0x3a>

    default:
      pllinputfreq = HSI_VALUE;
 80091b4:	4b0f      	ldr	r3, [pc, #60]	; (80091f4 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80091b6:	617b      	str	r3, [r7, #20]
      break;
 80091b8:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2b08      	cmp	r3, #8
 80091be:	d113      	bne.n	80091e8 <RCC_PLL_GetFreqDomain_SYS+0x68>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80091c0:	f7ff ff46 	bl	8009050 <LL_RCC_PLL_GetDivider>
 80091c4:	4602      	mov	r2, r0
 80091c6:	697b      	ldr	r3, [r7, #20]
 80091c8:	fbb3 f4f2 	udiv	r4, r3, r2
 80091cc:	f7ff ff24 	bl	8009018 <LL_RCC_PLL_GetN>
 80091d0:	4603      	mov	r3, r0
 80091d2:	fb03 f404 	mul.w	r4, r3, r4
 80091d6:	f7ff ff2d 	bl	8009034 <LL_RCC_PLL_GetP>
 80091da:	4603      	mov	r3, r0
 80091dc:	0c1b      	lsrs	r3, r3, #16
 80091de:	3301      	adds	r3, #1
 80091e0:	005b      	lsls	r3, r3, #1
 80091e2:	fbb4 f3f3 	udiv	r3, r4, r3
 80091e6:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 80091e8:	693b      	ldr	r3, [r7, #16]
}
 80091ea:	4618      	mov	r0, r3
 80091ec:	371c      	adds	r7, #28
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bd90      	pop	{r4, r7, pc}
 80091f2:	bf00      	nop
 80091f4:	00f42400 	.word	0x00f42400
 80091f8:	007a1200 	.word	0x007a1200

080091fc <LL_SPI_IsEnabled>:
{
 80091fc:	b480      	push	{r7}
 80091fe:	b083      	sub	sp, #12
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800920c:	2b40      	cmp	r3, #64	; 0x40
 800920e:	d101      	bne.n	8009214 <LL_SPI_IsEnabled+0x18>
 8009210:	2301      	movs	r3, #1
 8009212:	e000      	b.n	8009216 <LL_SPI_IsEnabled+0x1a>
 8009214:	2300      	movs	r3, #0
}
 8009216:	4618      	mov	r0, r3
 8009218:	370c      	adds	r7, #12
 800921a:	46bd      	mov	sp, r7
 800921c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009220:	4770      	bx	lr

08009222 <LL_SPI_SetCRCPolynomial>:
{
 8009222:	b480      	push	{r7}
 8009224:	b083      	sub	sp, #12
 8009226:	af00      	add	r7, sp, #0
 8009228:	6078      	str	r0, [r7, #4]
 800922a:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	b29b      	uxth	r3, r3
 8009230:	461a      	mov	r2, r3
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	611a      	str	r2, [r3, #16]
}
 8009236:	bf00      	nop
 8009238:	370c      	adds	r7, #12
 800923a:	46bd      	mov	sp, r7
 800923c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009240:	4770      	bx	lr

08009242 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8009242:	b580      	push	{r7, lr}
 8009244:	b084      	sub	sp, #16
 8009246:	af00      	add	r7, sp, #0
 8009248:	6078      	str	r0, [r7, #4]
 800924a:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800924c:	2301      	movs	r3, #1
 800924e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f7ff ffd3 	bl	80091fc <LL_SPI_IsEnabled>
 8009256:	4603      	mov	r3, r0
 8009258:	2b00      	cmp	r3, #0
 800925a:	d139      	bne.n	80092d0 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009264:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8009268:	683a      	ldr	r2, [r7, #0]
 800926a:	6811      	ldr	r1, [r2, #0]
 800926c:	683a      	ldr	r2, [r7, #0]
 800926e:	6852      	ldr	r2, [r2, #4]
 8009270:	4311      	orrs	r1, r2
 8009272:	683a      	ldr	r2, [r7, #0]
 8009274:	6892      	ldr	r2, [r2, #8]
 8009276:	4311      	orrs	r1, r2
 8009278:	683a      	ldr	r2, [r7, #0]
 800927a:	68d2      	ldr	r2, [r2, #12]
 800927c:	4311      	orrs	r1, r2
 800927e:	683a      	ldr	r2, [r7, #0]
 8009280:	6912      	ldr	r2, [r2, #16]
 8009282:	4311      	orrs	r1, r2
 8009284:	683a      	ldr	r2, [r7, #0]
 8009286:	6952      	ldr	r2, [r2, #20]
 8009288:	4311      	orrs	r1, r2
 800928a:	683a      	ldr	r2, [r7, #0]
 800928c:	6992      	ldr	r2, [r2, #24]
 800928e:	4311      	orrs	r1, r2
 8009290:	683a      	ldr	r2, [r7, #0]
 8009292:	69d2      	ldr	r2, [r2, #28]
 8009294:	4311      	orrs	r1, r2
 8009296:	683a      	ldr	r2, [r7, #0]
 8009298:	6a12      	ldr	r2, [r2, #32]
 800929a:	430a      	orrs	r2, r1
 800929c:	431a      	orrs	r2, r3
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	685b      	ldr	r3, [r3, #4]
 80092a6:	f023 0204 	bic.w	r2, r3, #4
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	695b      	ldr	r3, [r3, #20]
 80092ae:	0c1b      	lsrs	r3, r3, #16
 80092b0:	431a      	orrs	r2, r3
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	6a1b      	ldr	r3, [r3, #32]
 80092ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80092be:	d105      	bne.n	80092cc <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092c4:	4619      	mov	r1, r3
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	f7ff ffab 	bl	8009222 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 80092cc:	2300      	movs	r3, #0
 80092ce:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	69db      	ldr	r3, [r3, #28]
 80092d4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	61da      	str	r2, [r3, #28]
  return status;
 80092dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80092de:	4618      	mov	r0, r3
 80092e0:	3710      	adds	r7, #16
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd80      	pop	{r7, pc}

080092e6 <LL_TIM_SetPrescaler>:
{
 80092e6:	b480      	push	{r7}
 80092e8:	b083      	sub	sp, #12
 80092ea:	af00      	add	r7, sp, #0
 80092ec:	6078      	str	r0, [r7, #4]
 80092ee:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	683a      	ldr	r2, [r7, #0]
 80092f4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80092f6:	bf00      	nop
 80092f8:	370c      	adds	r7, #12
 80092fa:	46bd      	mov	sp, r7
 80092fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009300:	4770      	bx	lr

08009302 <LL_TIM_SetAutoReload>:
{
 8009302:	b480      	push	{r7}
 8009304:	b083      	sub	sp, #12
 8009306:	af00      	add	r7, sp, #0
 8009308:	6078      	str	r0, [r7, #4]
 800930a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	683a      	ldr	r2, [r7, #0]
 8009310:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8009312:	bf00      	nop
 8009314:	370c      	adds	r7, #12
 8009316:	46bd      	mov	sp, r7
 8009318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931c:	4770      	bx	lr

0800931e <LL_TIM_SetRepetitionCounter>:
{
 800931e:	b480      	push	{r7}
 8009320:	b083      	sub	sp, #12
 8009322:	af00      	add	r7, sp, #0
 8009324:	6078      	str	r0, [r7, #4]
 8009326:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	683a      	ldr	r2, [r7, #0]
 800932c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800932e:	bf00      	nop
 8009330:	370c      	adds	r7, #12
 8009332:	46bd      	mov	sp, r7
 8009334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009338:	4770      	bx	lr

0800933a <LL_TIM_OC_SetCompareCH1>:
{
 800933a:	b480      	push	{r7}
 800933c:	b083      	sub	sp, #12
 800933e:	af00      	add	r7, sp, #0
 8009340:	6078      	str	r0, [r7, #4]
 8009342:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	683a      	ldr	r2, [r7, #0]
 8009348:	635a      	str	r2, [r3, #52]	; 0x34
}
 800934a:	bf00      	nop
 800934c:	370c      	adds	r7, #12
 800934e:	46bd      	mov	sp, r7
 8009350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009354:	4770      	bx	lr

08009356 <LL_TIM_OC_SetCompareCH2>:
{
 8009356:	b480      	push	{r7}
 8009358:	b083      	sub	sp, #12
 800935a:	af00      	add	r7, sp, #0
 800935c:	6078      	str	r0, [r7, #4]
 800935e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	683a      	ldr	r2, [r7, #0]
 8009364:	639a      	str	r2, [r3, #56]	; 0x38
}
 8009366:	bf00      	nop
 8009368:	370c      	adds	r7, #12
 800936a:	46bd      	mov	sp, r7
 800936c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009370:	4770      	bx	lr

08009372 <LL_TIM_OC_SetCompareCH3>:
{
 8009372:	b480      	push	{r7}
 8009374:	b083      	sub	sp, #12
 8009376:	af00      	add	r7, sp, #0
 8009378:	6078      	str	r0, [r7, #4]
 800937a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	683a      	ldr	r2, [r7, #0]
 8009380:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8009382:	bf00      	nop
 8009384:	370c      	adds	r7, #12
 8009386:	46bd      	mov	sp, r7
 8009388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938c:	4770      	bx	lr

0800938e <LL_TIM_OC_SetCompareCH4>:
{
 800938e:	b480      	push	{r7}
 8009390:	b083      	sub	sp, #12
 8009392:	af00      	add	r7, sp, #0
 8009394:	6078      	str	r0, [r7, #4]
 8009396:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	683a      	ldr	r2, [r7, #0]
 800939c:	641a      	str	r2, [r3, #64]	; 0x40
}
 800939e:	bf00      	nop
 80093a0:	370c      	adds	r7, #12
 80093a2:	46bd      	mov	sp, r7
 80093a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a8:	4770      	bx	lr

080093aa <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80093aa:	b480      	push	{r7}
 80093ac:	b083      	sub	sp, #12
 80093ae:	af00      	add	r7, sp, #0
 80093b0:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	695b      	ldr	r3, [r3, #20]
 80093b6:	f043 0201 	orr.w	r2, r3, #1
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	615a      	str	r2, [r3, #20]
}
 80093be:	bf00      	nop
 80093c0:	370c      	adds	r7, #12
 80093c2:	46bd      	mov	sp, r7
 80093c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c8:	4770      	bx	lr
	...

080093cc <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b084      	sub	sp, #16
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
 80093d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	4a3d      	ldr	r2, [pc, #244]	; (80094d4 <LL_TIM_Init+0x108>)
 80093e0:	4293      	cmp	r3, r2
 80093e2:	d013      	beq.n	800940c <LL_TIM_Init+0x40>
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093ea:	d00f      	beq.n	800940c <LL_TIM_Init+0x40>
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	4a3a      	ldr	r2, [pc, #232]	; (80094d8 <LL_TIM_Init+0x10c>)
 80093f0:	4293      	cmp	r3, r2
 80093f2:	d00b      	beq.n	800940c <LL_TIM_Init+0x40>
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	4a39      	ldr	r2, [pc, #228]	; (80094dc <LL_TIM_Init+0x110>)
 80093f8:	4293      	cmp	r3, r2
 80093fa:	d007      	beq.n	800940c <LL_TIM_Init+0x40>
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	4a38      	ldr	r2, [pc, #224]	; (80094e0 <LL_TIM_Init+0x114>)
 8009400:	4293      	cmp	r3, r2
 8009402:	d003      	beq.n	800940c <LL_TIM_Init+0x40>
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	4a37      	ldr	r2, [pc, #220]	; (80094e4 <LL_TIM_Init+0x118>)
 8009408:	4293      	cmp	r3, r2
 800940a:	d106      	bne.n	800941a <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	685b      	ldr	r3, [r3, #4]
 8009416:	4313      	orrs	r3, r2
 8009418:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	4a2d      	ldr	r2, [pc, #180]	; (80094d4 <LL_TIM_Init+0x108>)
 800941e:	4293      	cmp	r3, r2
 8009420:	d02b      	beq.n	800947a <LL_TIM_Init+0xae>
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009428:	d027      	beq.n	800947a <LL_TIM_Init+0xae>
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	4a2a      	ldr	r2, [pc, #168]	; (80094d8 <LL_TIM_Init+0x10c>)
 800942e:	4293      	cmp	r3, r2
 8009430:	d023      	beq.n	800947a <LL_TIM_Init+0xae>
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	4a29      	ldr	r2, [pc, #164]	; (80094dc <LL_TIM_Init+0x110>)
 8009436:	4293      	cmp	r3, r2
 8009438:	d01f      	beq.n	800947a <LL_TIM_Init+0xae>
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	4a28      	ldr	r2, [pc, #160]	; (80094e0 <LL_TIM_Init+0x114>)
 800943e:	4293      	cmp	r3, r2
 8009440:	d01b      	beq.n	800947a <LL_TIM_Init+0xae>
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	4a27      	ldr	r2, [pc, #156]	; (80094e4 <LL_TIM_Init+0x118>)
 8009446:	4293      	cmp	r3, r2
 8009448:	d017      	beq.n	800947a <LL_TIM_Init+0xae>
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	4a26      	ldr	r2, [pc, #152]	; (80094e8 <LL_TIM_Init+0x11c>)
 800944e:	4293      	cmp	r3, r2
 8009450:	d013      	beq.n	800947a <LL_TIM_Init+0xae>
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	4a25      	ldr	r2, [pc, #148]	; (80094ec <LL_TIM_Init+0x120>)
 8009456:	4293      	cmp	r3, r2
 8009458:	d00f      	beq.n	800947a <LL_TIM_Init+0xae>
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	4a24      	ldr	r2, [pc, #144]	; (80094f0 <LL_TIM_Init+0x124>)
 800945e:	4293      	cmp	r3, r2
 8009460:	d00b      	beq.n	800947a <LL_TIM_Init+0xae>
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	4a23      	ldr	r2, [pc, #140]	; (80094f4 <LL_TIM_Init+0x128>)
 8009466:	4293      	cmp	r3, r2
 8009468:	d007      	beq.n	800947a <LL_TIM_Init+0xae>
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	4a22      	ldr	r2, [pc, #136]	; (80094f8 <LL_TIM_Init+0x12c>)
 800946e:	4293      	cmp	r3, r2
 8009470:	d003      	beq.n	800947a <LL_TIM_Init+0xae>
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	4a21      	ldr	r2, [pc, #132]	; (80094fc <LL_TIM_Init+0x130>)
 8009476:	4293      	cmp	r3, r2
 8009478:	d106      	bne.n	8009488 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	68db      	ldr	r3, [r3, #12]
 8009484:	4313      	orrs	r3, r2
 8009486:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	68fa      	ldr	r2, [r7, #12]
 800948c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	689b      	ldr	r3, [r3, #8]
 8009492:	4619      	mov	r1, r3
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f7ff ff34 	bl	8009302 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	881b      	ldrh	r3, [r3, #0]
 800949e:	4619      	mov	r1, r3
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	f7ff ff20 	bl	80092e6 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	4a0a      	ldr	r2, [pc, #40]	; (80094d4 <LL_TIM_Init+0x108>)
 80094aa:	4293      	cmp	r3, r2
 80094ac:	d003      	beq.n	80094b6 <LL_TIM_Init+0xea>
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	4a0c      	ldr	r2, [pc, #48]	; (80094e4 <LL_TIM_Init+0x118>)
 80094b2:	4293      	cmp	r3, r2
 80094b4:	d105      	bne.n	80094c2 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	7c1b      	ldrb	r3, [r3, #16]
 80094ba:	4619      	mov	r1, r3
 80094bc:	6878      	ldr	r0, [r7, #4]
 80094be:	f7ff ff2e 	bl	800931e <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f7ff ff71 	bl	80093aa <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80094c8:	2300      	movs	r3, #0
}
 80094ca:	4618      	mov	r0, r3
 80094cc:	3710      	adds	r7, #16
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bd80      	pop	{r7, pc}
 80094d2:	bf00      	nop
 80094d4:	40010000 	.word	0x40010000
 80094d8:	40000400 	.word	0x40000400
 80094dc:	40000800 	.word	0x40000800
 80094e0:	40000c00 	.word	0x40000c00
 80094e4:	40010400 	.word	0x40010400
 80094e8:	40014000 	.word	0x40014000
 80094ec:	40014400 	.word	0x40014400
 80094f0:	40014800 	.word	0x40014800
 80094f4:	40001800 	.word	0x40001800
 80094f8:	40001c00 	.word	0x40001c00
 80094fc:	40002000 	.word	0x40002000

08009500 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b086      	sub	sp, #24
 8009504:	af00      	add	r7, sp, #0
 8009506:	60f8      	str	r0, [r7, #12]
 8009508:	60b9      	str	r1, [r7, #8]
 800950a:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 800950c:	2301      	movs	r3, #1
 800950e:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	2b10      	cmp	r3, #16
 8009514:	d012      	beq.n	800953c <LL_TIM_OC_Init+0x3c>
 8009516:	2b10      	cmp	r3, #16
 8009518:	d802      	bhi.n	8009520 <LL_TIM_OC_Init+0x20>
 800951a:	2b01      	cmp	r3, #1
 800951c:	d007      	beq.n	800952e <LL_TIM_OC_Init+0x2e>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 800951e:	e022      	b.n	8009566 <LL_TIM_OC_Init+0x66>
  switch (Channel)
 8009520:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009524:	d011      	beq.n	800954a <LL_TIM_OC_Init+0x4a>
 8009526:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800952a:	d015      	beq.n	8009558 <LL_TIM_OC_Init+0x58>
      break;
 800952c:	e01b      	b.n	8009566 <LL_TIM_OC_Init+0x66>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 800952e:	6879      	ldr	r1, [r7, #4]
 8009530:	68f8      	ldr	r0, [r7, #12]
 8009532:	f000 f81d 	bl	8009570 <OC1Config>
 8009536:	4603      	mov	r3, r0
 8009538:	75fb      	strb	r3, [r7, #23]
      break;
 800953a:	e014      	b.n	8009566 <LL_TIM_OC_Init+0x66>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 800953c:	6879      	ldr	r1, [r7, #4]
 800953e:	68f8      	ldr	r0, [r7, #12]
 8009540:	f000 f882 	bl	8009648 <OC2Config>
 8009544:	4603      	mov	r3, r0
 8009546:	75fb      	strb	r3, [r7, #23]
      break;
 8009548:	e00d      	b.n	8009566 <LL_TIM_OC_Init+0x66>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 800954a:	6879      	ldr	r1, [r7, #4]
 800954c:	68f8      	ldr	r0, [r7, #12]
 800954e:	f000 f8eb 	bl	8009728 <OC3Config>
 8009552:	4603      	mov	r3, r0
 8009554:	75fb      	strb	r3, [r7, #23]
      break;
 8009556:	e006      	b.n	8009566 <LL_TIM_OC_Init+0x66>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8009558:	6879      	ldr	r1, [r7, #4]
 800955a:	68f8      	ldr	r0, [r7, #12]
 800955c:	f000 f954 	bl	8009808 <OC4Config>
 8009560:	4603      	mov	r3, r0
 8009562:	75fb      	strb	r3, [r7, #23]
      break;
 8009564:	bf00      	nop
  }

  return result;
 8009566:	7dfb      	ldrb	r3, [r7, #23]
}
 8009568:	4618      	mov	r0, r3
 800956a:	3718      	adds	r7, #24
 800956c:	46bd      	mov	sp, r7
 800956e:	bd80      	pop	{r7, pc}

08009570 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b086      	sub	sp, #24
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
 8009578:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6a1b      	ldr	r3, [r3, #32]
 800957e:	f023 0201 	bic.w	r2, r3, #1
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6a1b      	ldr	r3, [r3, #32]
 800958a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	685b      	ldr	r3, [r3, #4]
 8009590:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	699b      	ldr	r3, [r3, #24]
 8009596:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	f023 0303 	bic.w	r3, r3, #3
 800959e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	4313      	orrs	r3, r2
 80095ac:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 80095ae:	697b      	ldr	r3, [r7, #20]
 80095b0:	f023 0202 	bic.w	r2, r3, #2
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	691b      	ldr	r3, [r3, #16]
 80095b8:	4313      	orrs	r3, r2
 80095ba:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 80095bc:	697b      	ldr	r3, [r7, #20]
 80095be:	f023 0201 	bic.w	r2, r3, #1
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	685b      	ldr	r3, [r3, #4]
 80095c6:	4313      	orrs	r3, r2
 80095c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	4a1c      	ldr	r2, [pc, #112]	; (8009640 <OC1Config+0xd0>)
 80095ce:	4293      	cmp	r3, r2
 80095d0:	d003      	beq.n	80095da <OC1Config+0x6a>
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	4a1b      	ldr	r2, [pc, #108]	; (8009644 <OC1Config+0xd4>)
 80095d6:	4293      	cmp	r3, r2
 80095d8:	d11e      	bne.n	8009618 <OC1Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80095da:	697b      	ldr	r3, [r7, #20]
 80095dc:	f023 0208 	bic.w	r2, r3, #8
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	695b      	ldr	r3, [r3, #20]
 80095e4:	009b      	lsls	r3, r3, #2
 80095e6:	4313      	orrs	r3, r2
 80095e8:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80095ea:	697b      	ldr	r3, [r7, #20]
 80095ec:	f023 0204 	bic.w	r2, r3, #4
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	689b      	ldr	r3, [r3, #8]
 80095f4:	009b      	lsls	r3, r3, #2
 80095f6:	4313      	orrs	r3, r2
 80095f8:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80095fa:	693b      	ldr	r3, [r7, #16]
 80095fc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	699b      	ldr	r3, [r3, #24]
 8009604:	4313      	orrs	r3, r2
 8009606:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8009608:	693b      	ldr	r3, [r7, #16]
 800960a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	69db      	ldr	r3, [r3, #28]
 8009612:	005b      	lsls	r3, r3, #1
 8009614:	4313      	orrs	r3, r2
 8009616:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	693a      	ldr	r2, [r7, #16]
 800961c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	68fa      	ldr	r2, [r7, #12]
 8009622:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	68db      	ldr	r3, [r3, #12]
 8009628:	4619      	mov	r1, r3
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	f7ff fe85 	bl	800933a <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	697a      	ldr	r2, [r7, #20]
 8009634:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8009636:	2300      	movs	r3, #0
}
 8009638:	4618      	mov	r0, r3
 800963a:	3718      	adds	r7, #24
 800963c:	46bd      	mov	sp, r7
 800963e:	bd80      	pop	{r7, pc}
 8009640:	40010000 	.word	0x40010000
 8009644:	40010400 	.word	0x40010400

08009648 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b086      	sub	sp, #24
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
 8009650:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6a1b      	ldr	r3, [r3, #32]
 8009656:	f023 0210 	bic.w	r2, r3, #16
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6a1b      	ldr	r3, [r3, #32]
 8009662:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	685b      	ldr	r3, [r3, #4]
 8009668:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	699b      	ldr	r3, [r3, #24]
 800966e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009676:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	021b      	lsls	r3, r3, #8
 8009684:	4313      	orrs	r3, r2
 8009686:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8009688:	697b      	ldr	r3, [r7, #20]
 800968a:	f023 0220 	bic.w	r2, r3, #32
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	691b      	ldr	r3, [r3, #16]
 8009692:	011b      	lsls	r3, r3, #4
 8009694:	4313      	orrs	r3, r2
 8009696:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8009698:	697b      	ldr	r3, [r7, #20]
 800969a:	f023 0210 	bic.w	r2, r3, #16
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	685b      	ldr	r3, [r3, #4]
 80096a2:	011b      	lsls	r3, r3, #4
 80096a4:	4313      	orrs	r3, r2
 80096a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	4a1d      	ldr	r2, [pc, #116]	; (8009720 <OC2Config+0xd8>)
 80096ac:	4293      	cmp	r3, r2
 80096ae:	d003      	beq.n	80096b8 <OC2Config+0x70>
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	4a1c      	ldr	r2, [pc, #112]	; (8009724 <OC2Config+0xdc>)
 80096b4:	4293      	cmp	r3, r2
 80096b6:	d11f      	bne.n	80096f8 <OC2Config+0xb0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 80096b8:	697b      	ldr	r3, [r7, #20]
 80096ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	695b      	ldr	r3, [r3, #20]
 80096c2:	019b      	lsls	r3, r3, #6
 80096c4:	4313      	orrs	r3, r2
 80096c6:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80096c8:	697b      	ldr	r3, [r7, #20]
 80096ca:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	689b      	ldr	r3, [r3, #8]
 80096d2:	019b      	lsls	r3, r3, #6
 80096d4:	4313      	orrs	r3, r2
 80096d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80096d8:	693b      	ldr	r3, [r7, #16]
 80096da:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	699b      	ldr	r3, [r3, #24]
 80096e2:	009b      	lsls	r3, r3, #2
 80096e4:	4313      	orrs	r3, r2
 80096e6:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80096e8:	693b      	ldr	r3, [r7, #16]
 80096ea:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	69db      	ldr	r3, [r3, #28]
 80096f2:	00db      	lsls	r3, r3, #3
 80096f4:	4313      	orrs	r3, r2
 80096f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	693a      	ldr	r2, [r7, #16]
 80096fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	68fa      	ldr	r2, [r7, #12]
 8009702:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	68db      	ldr	r3, [r3, #12]
 8009708:	4619      	mov	r1, r3
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f7ff fe23 	bl	8009356 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	697a      	ldr	r2, [r7, #20]
 8009714:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8009716:	2300      	movs	r3, #0
}
 8009718:	4618      	mov	r0, r3
 800971a:	3718      	adds	r7, #24
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}
 8009720:	40010000 	.word	0x40010000
 8009724:	40010400 	.word	0x40010400

08009728 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b086      	sub	sp, #24
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
 8009730:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6a1b      	ldr	r3, [r3, #32]
 8009736:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6a1b      	ldr	r3, [r3, #32]
 8009742:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	685b      	ldr	r3, [r3, #4]
 8009748:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	69db      	ldr	r3, [r3, #28]
 800974e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	f023 0303 	bic.w	r3, r3, #3
 8009756:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	4313      	orrs	r3, r2
 8009764:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8009766:	697b      	ldr	r3, [r7, #20]
 8009768:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	691b      	ldr	r3, [r3, #16]
 8009770:	021b      	lsls	r3, r3, #8
 8009772:	4313      	orrs	r3, r2
 8009774:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8009776:	697b      	ldr	r3, [r7, #20]
 8009778:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	685b      	ldr	r3, [r3, #4]
 8009780:	021b      	lsls	r3, r3, #8
 8009782:	4313      	orrs	r3, r2
 8009784:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	4a1d      	ldr	r2, [pc, #116]	; (8009800 <OC3Config+0xd8>)
 800978a:	4293      	cmp	r3, r2
 800978c:	d003      	beq.n	8009796 <OC3Config+0x6e>
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	4a1c      	ldr	r2, [pc, #112]	; (8009804 <OC3Config+0xdc>)
 8009792:	4293      	cmp	r3, r2
 8009794:	d11f      	bne.n	80097d6 <OC3Config+0xae>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8009796:	697b      	ldr	r3, [r7, #20]
 8009798:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	695b      	ldr	r3, [r3, #20]
 80097a0:	029b      	lsls	r3, r3, #10
 80097a2:	4313      	orrs	r3, r2
 80097a4:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 80097a6:	697b      	ldr	r3, [r7, #20]
 80097a8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	689b      	ldr	r3, [r3, #8]
 80097b0:	029b      	lsls	r3, r3, #10
 80097b2:	4313      	orrs	r3, r2
 80097b4:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 80097b6:	693b      	ldr	r3, [r7, #16]
 80097b8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	699b      	ldr	r3, [r3, #24]
 80097c0:	011b      	lsls	r3, r3, #4
 80097c2:	4313      	orrs	r3, r2
 80097c4:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 80097c6:	693b      	ldr	r3, [r7, #16]
 80097c8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	69db      	ldr	r3, [r3, #28]
 80097d0:	015b      	lsls	r3, r3, #5
 80097d2:	4313      	orrs	r3, r2
 80097d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	693a      	ldr	r2, [r7, #16]
 80097da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	68fa      	ldr	r2, [r7, #12]
 80097e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	68db      	ldr	r3, [r3, #12]
 80097e6:	4619      	mov	r1, r3
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	f7ff fdc2 	bl	8009372 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	697a      	ldr	r2, [r7, #20]
 80097f2:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80097f4:	2300      	movs	r3, #0
}
 80097f6:	4618      	mov	r0, r3
 80097f8:	3718      	adds	r7, #24
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bd80      	pop	{r7, pc}
 80097fe:	bf00      	nop
 8009800:	40010000 	.word	0x40010000
 8009804:	40010400 	.word	0x40010400

08009808 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b086      	sub	sp, #24
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
 8009810:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6a1b      	ldr	r3, [r3, #32]
 8009816:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	6a1b      	ldr	r3, [r3, #32]
 8009822:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	685b      	ldr	r3, [r3, #4]
 8009828:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	69db      	ldr	r3, [r3, #28]
 800982e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009836:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	021b      	lsls	r3, r3, #8
 8009844:	4313      	orrs	r3, r2
 8009846:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8009848:	693b      	ldr	r3, [r7, #16]
 800984a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	691b      	ldr	r3, [r3, #16]
 8009852:	031b      	lsls	r3, r3, #12
 8009854:	4313      	orrs	r3, r2
 8009856:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8009858:	693b      	ldr	r3, [r7, #16]
 800985a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	685b      	ldr	r3, [r3, #4]
 8009862:	031b      	lsls	r3, r3, #12
 8009864:	4313      	orrs	r3, r2
 8009866:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	4a11      	ldr	r2, [pc, #68]	; (80098b0 <OC4Config+0xa8>)
 800986c:	4293      	cmp	r3, r2
 800986e:	d003      	beq.n	8009878 <OC4Config+0x70>
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	4a10      	ldr	r2, [pc, #64]	; (80098b4 <OC4Config+0xac>)
 8009874:	4293      	cmp	r3, r2
 8009876:	d107      	bne.n	8009888 <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8009878:	697b      	ldr	r3, [r7, #20]
 800987a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	699b      	ldr	r3, [r3, #24]
 8009882:	019b      	lsls	r3, r3, #6
 8009884:	4313      	orrs	r3, r2
 8009886:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	697a      	ldr	r2, [r7, #20]
 800988c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	68fa      	ldr	r2, [r7, #12]
 8009892:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	68db      	ldr	r3, [r3, #12]
 8009898:	4619      	mov	r1, r3
 800989a:	6878      	ldr	r0, [r7, #4]
 800989c:	f7ff fd77 	bl	800938e <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	693a      	ldr	r2, [r7, #16]
 80098a4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80098a6:	2300      	movs	r3, #0
}
 80098a8:	4618      	mov	r0, r3
 80098aa:	3718      	adds	r7, #24
 80098ac:	46bd      	mov	sp, r7
 80098ae:	bd80      	pop	{r7, pc}
 80098b0:	40010000 	.word	0x40010000
 80098b4:	40010400 	.word	0x40010400

080098b8 <LL_USART_IsEnabled>:
{
 80098b8:	b480      	push	{r7}
 80098ba:	b083      	sub	sp, #12
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	68db      	ldr	r3, [r3, #12]
 80098c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80098c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80098cc:	bf0c      	ite	eq
 80098ce:	2301      	moveq	r3, #1
 80098d0:	2300      	movne	r3, #0
 80098d2:	b2db      	uxtb	r3, r3
}
 80098d4:	4618      	mov	r0, r3
 80098d6:	370c      	adds	r7, #12
 80098d8:	46bd      	mov	sp, r7
 80098da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098de:	4770      	bx	lr

080098e0 <LL_USART_SetStopBitsLength>:
{
 80098e0:	b480      	push	{r7}
 80098e2:	b083      	sub	sp, #12
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
 80098e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	691b      	ldr	r3, [r3, #16]
 80098ee:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	431a      	orrs	r2, r3
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	611a      	str	r2, [r3, #16]
}
 80098fa:	bf00      	nop
 80098fc:	370c      	adds	r7, #12
 80098fe:	46bd      	mov	sp, r7
 8009900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009904:	4770      	bx	lr

08009906 <LL_USART_SetHWFlowCtrl>:
{
 8009906:	b480      	push	{r7}
 8009908:	b083      	sub	sp, #12
 800990a:	af00      	add	r7, sp, #0
 800990c:	6078      	str	r0, [r7, #4]
 800990e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	695b      	ldr	r3, [r3, #20]
 8009914:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	431a      	orrs	r2, r3
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	615a      	str	r2, [r3, #20]
}
 8009920:	bf00      	nop
 8009922:	370c      	adds	r7, #12
 8009924:	46bd      	mov	sp, r7
 8009926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992a:	4770      	bx	lr

0800992c <LL_USART_SetBaudRate>:
{
 800992c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009930:	b085      	sub	sp, #20
 8009932:	af00      	add	r7, sp, #0
 8009934:	60f8      	str	r0, [r7, #12]
 8009936:	60b9      	str	r1, [r7, #8]
 8009938:	607a      	str	r2, [r7, #4]
 800993a:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009942:	f040 80c1 	bne.w	8009ac8 <LL_USART_SetBaudRate+0x19c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	461d      	mov	r5, r3
 800994a:	f04f 0600 	mov.w	r6, #0
 800994e:	46a8      	mov	r8, r5
 8009950:	46b1      	mov	r9, r6
 8009952:	eb18 0308 	adds.w	r3, r8, r8
 8009956:	eb49 0409 	adc.w	r4, r9, r9
 800995a:	4698      	mov	r8, r3
 800995c:	46a1      	mov	r9, r4
 800995e:	eb18 0805 	adds.w	r8, r8, r5
 8009962:	eb49 0906 	adc.w	r9, r9, r6
 8009966:	f04f 0100 	mov.w	r1, #0
 800996a:	f04f 0200 	mov.w	r2, #0
 800996e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009972:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009976:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800997a:	4688      	mov	r8, r1
 800997c:	4691      	mov	r9, r2
 800997e:	eb18 0005 	adds.w	r0, r8, r5
 8009982:	eb49 0106 	adc.w	r1, r9, r6
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	461d      	mov	r5, r3
 800998a:	f04f 0600 	mov.w	r6, #0
 800998e:	196b      	adds	r3, r5, r5
 8009990:	eb46 0406 	adc.w	r4, r6, r6
 8009994:	461a      	mov	r2, r3
 8009996:	4623      	mov	r3, r4
 8009998:	f7f7 f956 	bl	8000c48 <__aeabi_uldivmod>
 800999c:	4603      	mov	r3, r0
 800999e:	460c      	mov	r4, r1
 80099a0:	461a      	mov	r2, r3
 80099a2:	4bb5      	ldr	r3, [pc, #724]	; (8009c78 <LL_USART_SetBaudRate+0x34c>)
 80099a4:	fba3 2302 	umull	r2, r3, r3, r2
 80099a8:	095b      	lsrs	r3, r3, #5
 80099aa:	b29b      	uxth	r3, r3
 80099ac:	011b      	lsls	r3, r3, #4
 80099ae:	fa1f f883 	uxth.w	r8, r3
 80099b2:	68bb      	ldr	r3, [r7, #8]
 80099b4:	461d      	mov	r5, r3
 80099b6:	f04f 0600 	mov.w	r6, #0
 80099ba:	46a9      	mov	r9, r5
 80099bc:	46b2      	mov	sl, r6
 80099be:	eb19 0309 	adds.w	r3, r9, r9
 80099c2:	eb4a 040a 	adc.w	r4, sl, sl
 80099c6:	4699      	mov	r9, r3
 80099c8:	46a2      	mov	sl, r4
 80099ca:	eb19 0905 	adds.w	r9, r9, r5
 80099ce:	eb4a 0a06 	adc.w	sl, sl, r6
 80099d2:	f04f 0100 	mov.w	r1, #0
 80099d6:	f04f 0200 	mov.w	r2, #0
 80099da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80099de:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80099e2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80099e6:	4689      	mov	r9, r1
 80099e8:	4692      	mov	sl, r2
 80099ea:	eb19 0005 	adds.w	r0, r9, r5
 80099ee:	eb4a 0106 	adc.w	r1, sl, r6
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	461d      	mov	r5, r3
 80099f6:	f04f 0600 	mov.w	r6, #0
 80099fa:	196b      	adds	r3, r5, r5
 80099fc:	eb46 0406 	adc.w	r4, r6, r6
 8009a00:	461a      	mov	r2, r3
 8009a02:	4623      	mov	r3, r4
 8009a04:	f7f7 f920 	bl	8000c48 <__aeabi_uldivmod>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	460c      	mov	r4, r1
 8009a0c:	461a      	mov	r2, r3
 8009a0e:	4b9a      	ldr	r3, [pc, #616]	; (8009c78 <LL_USART_SetBaudRate+0x34c>)
 8009a10:	fba3 1302 	umull	r1, r3, r3, r2
 8009a14:	095b      	lsrs	r3, r3, #5
 8009a16:	2164      	movs	r1, #100	; 0x64
 8009a18:	fb01 f303 	mul.w	r3, r1, r3
 8009a1c:	1ad3      	subs	r3, r2, r3
 8009a1e:	00db      	lsls	r3, r3, #3
 8009a20:	3332      	adds	r3, #50	; 0x32
 8009a22:	4a95      	ldr	r2, [pc, #596]	; (8009c78 <LL_USART_SetBaudRate+0x34c>)
 8009a24:	fba2 2303 	umull	r2, r3, r2, r3
 8009a28:	095b      	lsrs	r3, r3, #5
 8009a2a:	b29b      	uxth	r3, r3
 8009a2c:	005b      	lsls	r3, r3, #1
 8009a2e:	b29b      	uxth	r3, r3
 8009a30:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009a34:	b29b      	uxth	r3, r3
 8009a36:	4443      	add	r3, r8
 8009a38:	fa1f f883 	uxth.w	r8, r3
 8009a3c:	68bb      	ldr	r3, [r7, #8]
 8009a3e:	461d      	mov	r5, r3
 8009a40:	f04f 0600 	mov.w	r6, #0
 8009a44:	46a9      	mov	r9, r5
 8009a46:	46b2      	mov	sl, r6
 8009a48:	eb19 0309 	adds.w	r3, r9, r9
 8009a4c:	eb4a 040a 	adc.w	r4, sl, sl
 8009a50:	4699      	mov	r9, r3
 8009a52:	46a2      	mov	sl, r4
 8009a54:	eb19 0905 	adds.w	r9, r9, r5
 8009a58:	eb4a 0a06 	adc.w	sl, sl, r6
 8009a5c:	f04f 0100 	mov.w	r1, #0
 8009a60:	f04f 0200 	mov.w	r2, #0
 8009a64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009a68:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009a6c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009a70:	4689      	mov	r9, r1
 8009a72:	4692      	mov	sl, r2
 8009a74:	eb19 0005 	adds.w	r0, r9, r5
 8009a78:	eb4a 0106 	adc.w	r1, sl, r6
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	461d      	mov	r5, r3
 8009a80:	f04f 0600 	mov.w	r6, #0
 8009a84:	196b      	adds	r3, r5, r5
 8009a86:	eb46 0406 	adc.w	r4, r6, r6
 8009a8a:	461a      	mov	r2, r3
 8009a8c:	4623      	mov	r3, r4
 8009a8e:	f7f7 f8db 	bl	8000c48 <__aeabi_uldivmod>
 8009a92:	4603      	mov	r3, r0
 8009a94:	460c      	mov	r4, r1
 8009a96:	461a      	mov	r2, r3
 8009a98:	4b77      	ldr	r3, [pc, #476]	; (8009c78 <LL_USART_SetBaudRate+0x34c>)
 8009a9a:	fba3 1302 	umull	r1, r3, r3, r2
 8009a9e:	095b      	lsrs	r3, r3, #5
 8009aa0:	2164      	movs	r1, #100	; 0x64
 8009aa2:	fb01 f303 	mul.w	r3, r1, r3
 8009aa6:	1ad3      	subs	r3, r2, r3
 8009aa8:	00db      	lsls	r3, r3, #3
 8009aaa:	3332      	adds	r3, #50	; 0x32
 8009aac:	4a72      	ldr	r2, [pc, #456]	; (8009c78 <LL_USART_SetBaudRate+0x34c>)
 8009aae:	fba2 2303 	umull	r2, r3, r2, r3
 8009ab2:	095b      	lsrs	r3, r3, #5
 8009ab4:	b29b      	uxth	r3, r3
 8009ab6:	f003 0307 	and.w	r3, r3, #7
 8009aba:	b29b      	uxth	r3, r3
 8009abc:	4443      	add	r3, r8
 8009abe:	b29b      	uxth	r3, r3
 8009ac0:	461a      	mov	r2, r3
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	609a      	str	r2, [r3, #8]
}
 8009ac6:	e0d2      	b.n	8009c6e <LL_USART_SetBaudRate+0x342>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	469a      	mov	sl, r3
 8009acc:	f04f 0b00 	mov.w	fp, #0
 8009ad0:	46d0      	mov	r8, sl
 8009ad2:	46d9      	mov	r9, fp
 8009ad4:	eb18 0308 	adds.w	r3, r8, r8
 8009ad8:	eb49 0409 	adc.w	r4, r9, r9
 8009adc:	4698      	mov	r8, r3
 8009ade:	46a1      	mov	r9, r4
 8009ae0:	eb18 080a 	adds.w	r8, r8, sl
 8009ae4:	eb49 090b 	adc.w	r9, r9, fp
 8009ae8:	f04f 0100 	mov.w	r1, #0
 8009aec:	f04f 0200 	mov.w	r2, #0
 8009af0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009af4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009af8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009afc:	4688      	mov	r8, r1
 8009afe:	4691      	mov	r9, r2
 8009b00:	eb1a 0508 	adds.w	r5, sl, r8
 8009b04:	eb4b 0609 	adc.w	r6, fp, r9
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	4619      	mov	r1, r3
 8009b0c:	f04f 0200 	mov.w	r2, #0
 8009b10:	f04f 0300 	mov.w	r3, #0
 8009b14:	f04f 0400 	mov.w	r4, #0
 8009b18:	0094      	lsls	r4, r2, #2
 8009b1a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009b1e:	008b      	lsls	r3, r1, #2
 8009b20:	461a      	mov	r2, r3
 8009b22:	4623      	mov	r3, r4
 8009b24:	4628      	mov	r0, r5
 8009b26:	4631      	mov	r1, r6
 8009b28:	f7f7 f88e 	bl	8000c48 <__aeabi_uldivmod>
 8009b2c:	4603      	mov	r3, r0
 8009b2e:	460c      	mov	r4, r1
 8009b30:	461a      	mov	r2, r3
 8009b32:	4b51      	ldr	r3, [pc, #324]	; (8009c78 <LL_USART_SetBaudRate+0x34c>)
 8009b34:	fba3 2302 	umull	r2, r3, r3, r2
 8009b38:	095b      	lsrs	r3, r3, #5
 8009b3a:	b29b      	uxth	r3, r3
 8009b3c:	011b      	lsls	r3, r3, #4
 8009b3e:	fa1f f883 	uxth.w	r8, r3
 8009b42:	68bb      	ldr	r3, [r7, #8]
 8009b44:	469b      	mov	fp, r3
 8009b46:	f04f 0c00 	mov.w	ip, #0
 8009b4a:	46d9      	mov	r9, fp
 8009b4c:	46e2      	mov	sl, ip
 8009b4e:	eb19 0309 	adds.w	r3, r9, r9
 8009b52:	eb4a 040a 	adc.w	r4, sl, sl
 8009b56:	4699      	mov	r9, r3
 8009b58:	46a2      	mov	sl, r4
 8009b5a:	eb19 090b 	adds.w	r9, r9, fp
 8009b5e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009b62:	f04f 0100 	mov.w	r1, #0
 8009b66:	f04f 0200 	mov.w	r2, #0
 8009b6a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009b6e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009b72:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009b76:	4689      	mov	r9, r1
 8009b78:	4692      	mov	sl, r2
 8009b7a:	eb1b 0509 	adds.w	r5, fp, r9
 8009b7e:	eb4c 060a 	adc.w	r6, ip, sl
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	4619      	mov	r1, r3
 8009b86:	f04f 0200 	mov.w	r2, #0
 8009b8a:	f04f 0300 	mov.w	r3, #0
 8009b8e:	f04f 0400 	mov.w	r4, #0
 8009b92:	0094      	lsls	r4, r2, #2
 8009b94:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009b98:	008b      	lsls	r3, r1, #2
 8009b9a:	461a      	mov	r2, r3
 8009b9c:	4623      	mov	r3, r4
 8009b9e:	4628      	mov	r0, r5
 8009ba0:	4631      	mov	r1, r6
 8009ba2:	f7f7 f851 	bl	8000c48 <__aeabi_uldivmod>
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	460c      	mov	r4, r1
 8009baa:	461a      	mov	r2, r3
 8009bac:	4b32      	ldr	r3, [pc, #200]	; (8009c78 <LL_USART_SetBaudRate+0x34c>)
 8009bae:	fba3 1302 	umull	r1, r3, r3, r2
 8009bb2:	095b      	lsrs	r3, r3, #5
 8009bb4:	2164      	movs	r1, #100	; 0x64
 8009bb6:	fb01 f303 	mul.w	r3, r1, r3
 8009bba:	1ad3      	subs	r3, r2, r3
 8009bbc:	011b      	lsls	r3, r3, #4
 8009bbe:	3332      	adds	r3, #50	; 0x32
 8009bc0:	4a2d      	ldr	r2, [pc, #180]	; (8009c78 <LL_USART_SetBaudRate+0x34c>)
 8009bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8009bc6:	095b      	lsrs	r3, r3, #5
 8009bc8:	b29b      	uxth	r3, r3
 8009bca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009bce:	b29b      	uxth	r3, r3
 8009bd0:	4443      	add	r3, r8
 8009bd2:	fa1f f883 	uxth.w	r8, r3
 8009bd6:	68bb      	ldr	r3, [r7, #8]
 8009bd8:	469b      	mov	fp, r3
 8009bda:	f04f 0c00 	mov.w	ip, #0
 8009bde:	46d9      	mov	r9, fp
 8009be0:	46e2      	mov	sl, ip
 8009be2:	eb19 0309 	adds.w	r3, r9, r9
 8009be6:	eb4a 040a 	adc.w	r4, sl, sl
 8009bea:	4699      	mov	r9, r3
 8009bec:	46a2      	mov	sl, r4
 8009bee:	eb19 090b 	adds.w	r9, r9, fp
 8009bf2:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009bf6:	f04f 0100 	mov.w	r1, #0
 8009bfa:	f04f 0200 	mov.w	r2, #0
 8009bfe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009c02:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009c06:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009c0a:	4689      	mov	r9, r1
 8009c0c:	4692      	mov	sl, r2
 8009c0e:	eb1b 0509 	adds.w	r5, fp, r9
 8009c12:	eb4c 060a 	adc.w	r6, ip, sl
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	4619      	mov	r1, r3
 8009c1a:	f04f 0200 	mov.w	r2, #0
 8009c1e:	f04f 0300 	mov.w	r3, #0
 8009c22:	f04f 0400 	mov.w	r4, #0
 8009c26:	0094      	lsls	r4, r2, #2
 8009c28:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009c2c:	008b      	lsls	r3, r1, #2
 8009c2e:	461a      	mov	r2, r3
 8009c30:	4623      	mov	r3, r4
 8009c32:	4628      	mov	r0, r5
 8009c34:	4631      	mov	r1, r6
 8009c36:	f7f7 f807 	bl	8000c48 <__aeabi_uldivmod>
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	460c      	mov	r4, r1
 8009c3e:	461a      	mov	r2, r3
 8009c40:	4b0d      	ldr	r3, [pc, #52]	; (8009c78 <LL_USART_SetBaudRate+0x34c>)
 8009c42:	fba3 1302 	umull	r1, r3, r3, r2
 8009c46:	095b      	lsrs	r3, r3, #5
 8009c48:	2164      	movs	r1, #100	; 0x64
 8009c4a:	fb01 f303 	mul.w	r3, r1, r3
 8009c4e:	1ad3      	subs	r3, r2, r3
 8009c50:	011b      	lsls	r3, r3, #4
 8009c52:	3332      	adds	r3, #50	; 0x32
 8009c54:	4a08      	ldr	r2, [pc, #32]	; (8009c78 <LL_USART_SetBaudRate+0x34c>)
 8009c56:	fba2 2303 	umull	r2, r3, r2, r3
 8009c5a:	095b      	lsrs	r3, r3, #5
 8009c5c:	b29b      	uxth	r3, r3
 8009c5e:	f003 030f 	and.w	r3, r3, #15
 8009c62:	b29b      	uxth	r3, r3
 8009c64:	4443      	add	r3, r8
 8009c66:	b29b      	uxth	r3, r3
 8009c68:	461a      	mov	r2, r3
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	609a      	str	r2, [r3, #8]
}
 8009c6e:	bf00      	nop
 8009c70:	3714      	adds	r7, #20
 8009c72:	46bd      	mov	sp, r7
 8009c74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c78:	51eb851f 	.word	0x51eb851f

08009c7c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b088      	sub	sp, #32
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
 8009c84:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8009c86:	2301      	movs	r3, #1
 8009c88:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	f7ff fe12 	bl	80098b8 <LL_USART_IsEnabled>
 8009c94:	4603      	mov	r3, r0
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d15e      	bne.n	8009d58 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	68db      	ldr	r3, [r3, #12]
 8009c9e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8009ca2:	f023 030c 	bic.w	r3, r3, #12
 8009ca6:	683a      	ldr	r2, [r7, #0]
 8009ca8:	6851      	ldr	r1, [r2, #4]
 8009caa:	683a      	ldr	r2, [r7, #0]
 8009cac:	68d2      	ldr	r2, [r2, #12]
 8009cae:	4311      	orrs	r1, r2
 8009cb0:	683a      	ldr	r2, [r7, #0]
 8009cb2:	6912      	ldr	r2, [r2, #16]
 8009cb4:	4311      	orrs	r1, r2
 8009cb6:	683a      	ldr	r2, [r7, #0]
 8009cb8:	6992      	ldr	r2, [r2, #24]
 8009cba:	430a      	orrs	r2, r1
 8009cbc:	431a      	orrs	r2, r3
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	689b      	ldr	r3, [r3, #8]
 8009cc6:	4619      	mov	r1, r3
 8009cc8:	6878      	ldr	r0, [r7, #4]
 8009cca:	f7ff fe09 	bl	80098e0 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	695b      	ldr	r3, [r3, #20]
 8009cd2:	4619      	mov	r1, r3
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f7ff fe16 	bl	8009906 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8009cda:	f107 0308 	add.w	r3, r7, #8
 8009cde:	4618      	mov	r0, r3
 8009ce0:	f7ff f9c4 	bl	800906c <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	4a1f      	ldr	r2, [pc, #124]	; (8009d64 <LL_USART_Init+0xe8>)
 8009ce8:	4293      	cmp	r3, r2
 8009cea:	d102      	bne.n	8009cf2 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8009cec:	697b      	ldr	r3, [r7, #20]
 8009cee:	61bb      	str	r3, [r7, #24]
 8009cf0:	e021      	b.n	8009d36 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	4a1c      	ldr	r2, [pc, #112]	; (8009d68 <LL_USART_Init+0xec>)
 8009cf6:	4293      	cmp	r3, r2
 8009cf8:	d102      	bne.n	8009d00 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8009cfa:	693b      	ldr	r3, [r7, #16]
 8009cfc:	61bb      	str	r3, [r7, #24]
 8009cfe:	e01a      	b.n	8009d36 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	4a1a      	ldr	r2, [pc, #104]	; (8009d6c <LL_USART_Init+0xf0>)
 8009d04:	4293      	cmp	r3, r2
 8009d06:	d102      	bne.n	8009d0e <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8009d08:	693b      	ldr	r3, [r7, #16]
 8009d0a:	61bb      	str	r3, [r7, #24]
 8009d0c:	e013      	b.n	8009d36 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	4a17      	ldr	r2, [pc, #92]	; (8009d70 <LL_USART_Init+0xf4>)
 8009d12:	4293      	cmp	r3, r2
 8009d14:	d102      	bne.n	8009d1c <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8009d16:	697b      	ldr	r3, [r7, #20]
 8009d18:	61bb      	str	r3, [r7, #24]
 8009d1a:	e00c      	b.n	8009d36 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	4a15      	ldr	r2, [pc, #84]	; (8009d74 <LL_USART_Init+0xf8>)
 8009d20:	4293      	cmp	r3, r2
 8009d22:	d102      	bne.n	8009d2a <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8009d24:	693b      	ldr	r3, [r7, #16]
 8009d26:	61bb      	str	r3, [r7, #24]
 8009d28:	e005      	b.n	8009d36 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	4a12      	ldr	r2, [pc, #72]	; (8009d78 <LL_USART_Init+0xfc>)
 8009d2e:	4293      	cmp	r3, r2
 8009d30:	d101      	bne.n	8009d36 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8009d32:	693b      	ldr	r3, [r7, #16]
 8009d34:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8009d36:	69bb      	ldr	r3, [r7, #24]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d00d      	beq.n	8009d58 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d009      	beq.n	8009d58 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8009d44:	2300      	movs	r3, #0
 8009d46:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	699a      	ldr	r2, [r3, #24]
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	69b9      	ldr	r1, [r7, #24]
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	f7ff fdea 	bl	800992c <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8009d58:	7ffb      	ldrb	r3, [r7, #31]
}
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	3720      	adds	r7, #32
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd80      	pop	{r7, pc}
 8009d62:	bf00      	nop
 8009d64:	40011000 	.word	0x40011000
 8009d68:	40004400 	.word	0x40004400
 8009d6c:	40004800 	.word	0x40004800
 8009d70:	40011400 	.word	0x40011400
 8009d74:	40004c00 	.word	0x40004c00
 8009d78:	40005000 	.word	0x40005000

08009d7c <__errno>:
 8009d7c:	4b01      	ldr	r3, [pc, #4]	; (8009d84 <__errno+0x8>)
 8009d7e:	6818      	ldr	r0, [r3, #0]
 8009d80:	4770      	bx	lr
 8009d82:	bf00      	nop
 8009d84:	20000010 	.word	0x20000010

08009d88 <__libc_init_array>:
 8009d88:	b570      	push	{r4, r5, r6, lr}
 8009d8a:	4e0d      	ldr	r6, [pc, #52]	; (8009dc0 <__libc_init_array+0x38>)
 8009d8c:	4c0d      	ldr	r4, [pc, #52]	; (8009dc4 <__libc_init_array+0x3c>)
 8009d8e:	1ba4      	subs	r4, r4, r6
 8009d90:	10a4      	asrs	r4, r4, #2
 8009d92:	2500      	movs	r5, #0
 8009d94:	42a5      	cmp	r5, r4
 8009d96:	d109      	bne.n	8009dac <__libc_init_array+0x24>
 8009d98:	4e0b      	ldr	r6, [pc, #44]	; (8009dc8 <__libc_init_array+0x40>)
 8009d9a:	4c0c      	ldr	r4, [pc, #48]	; (8009dcc <__libc_init_array+0x44>)
 8009d9c:	f003 fb7e 	bl	800d49c <_init>
 8009da0:	1ba4      	subs	r4, r4, r6
 8009da2:	10a4      	asrs	r4, r4, #2
 8009da4:	2500      	movs	r5, #0
 8009da6:	42a5      	cmp	r5, r4
 8009da8:	d105      	bne.n	8009db6 <__libc_init_array+0x2e>
 8009daa:	bd70      	pop	{r4, r5, r6, pc}
 8009dac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009db0:	4798      	blx	r3
 8009db2:	3501      	adds	r5, #1
 8009db4:	e7ee      	b.n	8009d94 <__libc_init_array+0xc>
 8009db6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009dba:	4798      	blx	r3
 8009dbc:	3501      	adds	r5, #1
 8009dbe:	e7f2      	b.n	8009da6 <__libc_init_array+0x1e>
 8009dc0:	0800db0c 	.word	0x0800db0c
 8009dc4:	0800db0c 	.word	0x0800db0c
 8009dc8:	0800db0c 	.word	0x0800db0c
 8009dcc:	0800db10 	.word	0x0800db10

08009dd0 <memset>:
 8009dd0:	4402      	add	r2, r0
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	4293      	cmp	r3, r2
 8009dd6:	d100      	bne.n	8009dda <memset+0xa>
 8009dd8:	4770      	bx	lr
 8009dda:	f803 1b01 	strb.w	r1, [r3], #1
 8009dde:	e7f9      	b.n	8009dd4 <memset+0x4>

08009de0 <__cvt>:
 8009de0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009de4:	ec55 4b10 	vmov	r4, r5, d0
 8009de8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8009dea:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009dee:	2d00      	cmp	r5, #0
 8009df0:	460e      	mov	r6, r1
 8009df2:	4691      	mov	r9, r2
 8009df4:	4619      	mov	r1, r3
 8009df6:	bfb8      	it	lt
 8009df8:	4622      	movlt	r2, r4
 8009dfa:	462b      	mov	r3, r5
 8009dfc:	f027 0720 	bic.w	r7, r7, #32
 8009e00:	bfbb      	ittet	lt
 8009e02:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009e06:	461d      	movlt	r5, r3
 8009e08:	2300      	movge	r3, #0
 8009e0a:	232d      	movlt	r3, #45	; 0x2d
 8009e0c:	bfb8      	it	lt
 8009e0e:	4614      	movlt	r4, r2
 8009e10:	2f46      	cmp	r7, #70	; 0x46
 8009e12:	700b      	strb	r3, [r1, #0]
 8009e14:	d004      	beq.n	8009e20 <__cvt+0x40>
 8009e16:	2f45      	cmp	r7, #69	; 0x45
 8009e18:	d100      	bne.n	8009e1c <__cvt+0x3c>
 8009e1a:	3601      	adds	r6, #1
 8009e1c:	2102      	movs	r1, #2
 8009e1e:	e000      	b.n	8009e22 <__cvt+0x42>
 8009e20:	2103      	movs	r1, #3
 8009e22:	ab03      	add	r3, sp, #12
 8009e24:	9301      	str	r3, [sp, #4]
 8009e26:	ab02      	add	r3, sp, #8
 8009e28:	9300      	str	r3, [sp, #0]
 8009e2a:	4632      	mov	r2, r6
 8009e2c:	4653      	mov	r3, sl
 8009e2e:	ec45 4b10 	vmov	d0, r4, r5
 8009e32:	f000 fdf9 	bl	800aa28 <_dtoa_r>
 8009e36:	2f47      	cmp	r7, #71	; 0x47
 8009e38:	4680      	mov	r8, r0
 8009e3a:	d102      	bne.n	8009e42 <__cvt+0x62>
 8009e3c:	f019 0f01 	tst.w	r9, #1
 8009e40:	d026      	beq.n	8009e90 <__cvt+0xb0>
 8009e42:	2f46      	cmp	r7, #70	; 0x46
 8009e44:	eb08 0906 	add.w	r9, r8, r6
 8009e48:	d111      	bne.n	8009e6e <__cvt+0x8e>
 8009e4a:	f898 3000 	ldrb.w	r3, [r8]
 8009e4e:	2b30      	cmp	r3, #48	; 0x30
 8009e50:	d10a      	bne.n	8009e68 <__cvt+0x88>
 8009e52:	2200      	movs	r2, #0
 8009e54:	2300      	movs	r3, #0
 8009e56:	4620      	mov	r0, r4
 8009e58:	4629      	mov	r1, r5
 8009e5a:	f7f6 fe35 	bl	8000ac8 <__aeabi_dcmpeq>
 8009e5e:	b918      	cbnz	r0, 8009e68 <__cvt+0x88>
 8009e60:	f1c6 0601 	rsb	r6, r6, #1
 8009e64:	f8ca 6000 	str.w	r6, [sl]
 8009e68:	f8da 3000 	ldr.w	r3, [sl]
 8009e6c:	4499      	add	r9, r3
 8009e6e:	2200      	movs	r2, #0
 8009e70:	2300      	movs	r3, #0
 8009e72:	4620      	mov	r0, r4
 8009e74:	4629      	mov	r1, r5
 8009e76:	f7f6 fe27 	bl	8000ac8 <__aeabi_dcmpeq>
 8009e7a:	b938      	cbnz	r0, 8009e8c <__cvt+0xac>
 8009e7c:	2230      	movs	r2, #48	; 0x30
 8009e7e:	9b03      	ldr	r3, [sp, #12]
 8009e80:	454b      	cmp	r3, r9
 8009e82:	d205      	bcs.n	8009e90 <__cvt+0xb0>
 8009e84:	1c59      	adds	r1, r3, #1
 8009e86:	9103      	str	r1, [sp, #12]
 8009e88:	701a      	strb	r2, [r3, #0]
 8009e8a:	e7f8      	b.n	8009e7e <__cvt+0x9e>
 8009e8c:	f8cd 900c 	str.w	r9, [sp, #12]
 8009e90:	9b03      	ldr	r3, [sp, #12]
 8009e92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009e94:	eba3 0308 	sub.w	r3, r3, r8
 8009e98:	4640      	mov	r0, r8
 8009e9a:	6013      	str	r3, [r2, #0]
 8009e9c:	b004      	add	sp, #16
 8009e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08009ea2 <__exponent>:
 8009ea2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009ea4:	2900      	cmp	r1, #0
 8009ea6:	4604      	mov	r4, r0
 8009ea8:	bfba      	itte	lt
 8009eaa:	4249      	neglt	r1, r1
 8009eac:	232d      	movlt	r3, #45	; 0x2d
 8009eae:	232b      	movge	r3, #43	; 0x2b
 8009eb0:	2909      	cmp	r1, #9
 8009eb2:	f804 2b02 	strb.w	r2, [r4], #2
 8009eb6:	7043      	strb	r3, [r0, #1]
 8009eb8:	dd20      	ble.n	8009efc <__exponent+0x5a>
 8009eba:	f10d 0307 	add.w	r3, sp, #7
 8009ebe:	461f      	mov	r7, r3
 8009ec0:	260a      	movs	r6, #10
 8009ec2:	fb91 f5f6 	sdiv	r5, r1, r6
 8009ec6:	fb06 1115 	mls	r1, r6, r5, r1
 8009eca:	3130      	adds	r1, #48	; 0x30
 8009ecc:	2d09      	cmp	r5, #9
 8009ece:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009ed2:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8009ed6:	4629      	mov	r1, r5
 8009ed8:	dc09      	bgt.n	8009eee <__exponent+0x4c>
 8009eda:	3130      	adds	r1, #48	; 0x30
 8009edc:	3b02      	subs	r3, #2
 8009ede:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009ee2:	42bb      	cmp	r3, r7
 8009ee4:	4622      	mov	r2, r4
 8009ee6:	d304      	bcc.n	8009ef2 <__exponent+0x50>
 8009ee8:	1a10      	subs	r0, r2, r0
 8009eea:	b003      	add	sp, #12
 8009eec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009eee:	4613      	mov	r3, r2
 8009ef0:	e7e7      	b.n	8009ec2 <__exponent+0x20>
 8009ef2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ef6:	f804 2b01 	strb.w	r2, [r4], #1
 8009efa:	e7f2      	b.n	8009ee2 <__exponent+0x40>
 8009efc:	2330      	movs	r3, #48	; 0x30
 8009efe:	4419      	add	r1, r3
 8009f00:	7083      	strb	r3, [r0, #2]
 8009f02:	1d02      	adds	r2, r0, #4
 8009f04:	70c1      	strb	r1, [r0, #3]
 8009f06:	e7ef      	b.n	8009ee8 <__exponent+0x46>

08009f08 <_printf_float>:
 8009f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f0c:	b08d      	sub	sp, #52	; 0x34
 8009f0e:	460c      	mov	r4, r1
 8009f10:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8009f14:	4616      	mov	r6, r2
 8009f16:	461f      	mov	r7, r3
 8009f18:	4605      	mov	r5, r0
 8009f1a:	f001 fcb7 	bl	800b88c <_localeconv_r>
 8009f1e:	6803      	ldr	r3, [r0, #0]
 8009f20:	9304      	str	r3, [sp, #16]
 8009f22:	4618      	mov	r0, r3
 8009f24:	f7f6 f954 	bl	80001d0 <strlen>
 8009f28:	2300      	movs	r3, #0
 8009f2a:	930a      	str	r3, [sp, #40]	; 0x28
 8009f2c:	f8d8 3000 	ldr.w	r3, [r8]
 8009f30:	9005      	str	r0, [sp, #20]
 8009f32:	3307      	adds	r3, #7
 8009f34:	f023 0307 	bic.w	r3, r3, #7
 8009f38:	f103 0208 	add.w	r2, r3, #8
 8009f3c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009f40:	f8d4 b000 	ldr.w	fp, [r4]
 8009f44:	f8c8 2000 	str.w	r2, [r8]
 8009f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f4c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009f50:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009f54:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009f58:	9307      	str	r3, [sp, #28]
 8009f5a:	f8cd 8018 	str.w	r8, [sp, #24]
 8009f5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009f62:	4ba7      	ldr	r3, [pc, #668]	; (800a200 <_printf_float+0x2f8>)
 8009f64:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009f68:	f7f6 fde0 	bl	8000b2c <__aeabi_dcmpun>
 8009f6c:	bb70      	cbnz	r0, 8009fcc <_printf_float+0xc4>
 8009f6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009f72:	4ba3      	ldr	r3, [pc, #652]	; (800a200 <_printf_float+0x2f8>)
 8009f74:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009f78:	f7f6 fdba 	bl	8000af0 <__aeabi_dcmple>
 8009f7c:	bb30      	cbnz	r0, 8009fcc <_printf_float+0xc4>
 8009f7e:	2200      	movs	r2, #0
 8009f80:	2300      	movs	r3, #0
 8009f82:	4640      	mov	r0, r8
 8009f84:	4649      	mov	r1, r9
 8009f86:	f7f6 fda9 	bl	8000adc <__aeabi_dcmplt>
 8009f8a:	b110      	cbz	r0, 8009f92 <_printf_float+0x8a>
 8009f8c:	232d      	movs	r3, #45	; 0x2d
 8009f8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f92:	4a9c      	ldr	r2, [pc, #624]	; (800a204 <_printf_float+0x2fc>)
 8009f94:	4b9c      	ldr	r3, [pc, #624]	; (800a208 <_printf_float+0x300>)
 8009f96:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8009f9a:	bf8c      	ite	hi
 8009f9c:	4690      	movhi	r8, r2
 8009f9e:	4698      	movls	r8, r3
 8009fa0:	2303      	movs	r3, #3
 8009fa2:	f02b 0204 	bic.w	r2, fp, #4
 8009fa6:	6123      	str	r3, [r4, #16]
 8009fa8:	6022      	str	r2, [r4, #0]
 8009faa:	f04f 0900 	mov.w	r9, #0
 8009fae:	9700      	str	r7, [sp, #0]
 8009fb0:	4633      	mov	r3, r6
 8009fb2:	aa0b      	add	r2, sp, #44	; 0x2c
 8009fb4:	4621      	mov	r1, r4
 8009fb6:	4628      	mov	r0, r5
 8009fb8:	f000 f9e6 	bl	800a388 <_printf_common>
 8009fbc:	3001      	adds	r0, #1
 8009fbe:	f040 808d 	bne.w	800a0dc <_printf_float+0x1d4>
 8009fc2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009fc6:	b00d      	add	sp, #52	; 0x34
 8009fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fcc:	4642      	mov	r2, r8
 8009fce:	464b      	mov	r3, r9
 8009fd0:	4640      	mov	r0, r8
 8009fd2:	4649      	mov	r1, r9
 8009fd4:	f7f6 fdaa 	bl	8000b2c <__aeabi_dcmpun>
 8009fd8:	b110      	cbz	r0, 8009fe0 <_printf_float+0xd8>
 8009fda:	4a8c      	ldr	r2, [pc, #560]	; (800a20c <_printf_float+0x304>)
 8009fdc:	4b8c      	ldr	r3, [pc, #560]	; (800a210 <_printf_float+0x308>)
 8009fde:	e7da      	b.n	8009f96 <_printf_float+0x8e>
 8009fe0:	6861      	ldr	r1, [r4, #4]
 8009fe2:	1c4b      	adds	r3, r1, #1
 8009fe4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8009fe8:	a80a      	add	r0, sp, #40	; 0x28
 8009fea:	d13e      	bne.n	800a06a <_printf_float+0x162>
 8009fec:	2306      	movs	r3, #6
 8009fee:	6063      	str	r3, [r4, #4]
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8009ff6:	ab09      	add	r3, sp, #36	; 0x24
 8009ff8:	9300      	str	r3, [sp, #0]
 8009ffa:	ec49 8b10 	vmov	d0, r8, r9
 8009ffe:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a002:	6022      	str	r2, [r4, #0]
 800a004:	f8cd a004 	str.w	sl, [sp, #4]
 800a008:	6861      	ldr	r1, [r4, #4]
 800a00a:	4628      	mov	r0, r5
 800a00c:	f7ff fee8 	bl	8009de0 <__cvt>
 800a010:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800a014:	2b47      	cmp	r3, #71	; 0x47
 800a016:	4680      	mov	r8, r0
 800a018:	d109      	bne.n	800a02e <_printf_float+0x126>
 800a01a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a01c:	1cd8      	adds	r0, r3, #3
 800a01e:	db02      	blt.n	800a026 <_printf_float+0x11e>
 800a020:	6862      	ldr	r2, [r4, #4]
 800a022:	4293      	cmp	r3, r2
 800a024:	dd47      	ble.n	800a0b6 <_printf_float+0x1ae>
 800a026:	f1aa 0a02 	sub.w	sl, sl, #2
 800a02a:	fa5f fa8a 	uxtb.w	sl, sl
 800a02e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800a032:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a034:	d824      	bhi.n	800a080 <_printf_float+0x178>
 800a036:	3901      	subs	r1, #1
 800a038:	4652      	mov	r2, sl
 800a03a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a03e:	9109      	str	r1, [sp, #36]	; 0x24
 800a040:	f7ff ff2f 	bl	8009ea2 <__exponent>
 800a044:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a046:	1813      	adds	r3, r2, r0
 800a048:	2a01      	cmp	r2, #1
 800a04a:	4681      	mov	r9, r0
 800a04c:	6123      	str	r3, [r4, #16]
 800a04e:	dc02      	bgt.n	800a056 <_printf_float+0x14e>
 800a050:	6822      	ldr	r2, [r4, #0]
 800a052:	07d1      	lsls	r1, r2, #31
 800a054:	d501      	bpl.n	800a05a <_printf_float+0x152>
 800a056:	3301      	adds	r3, #1
 800a058:	6123      	str	r3, [r4, #16]
 800a05a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d0a5      	beq.n	8009fae <_printf_float+0xa6>
 800a062:	232d      	movs	r3, #45	; 0x2d
 800a064:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a068:	e7a1      	b.n	8009fae <_printf_float+0xa6>
 800a06a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800a06e:	f000 8177 	beq.w	800a360 <_printf_float+0x458>
 800a072:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800a076:	d1bb      	bne.n	8009ff0 <_printf_float+0xe8>
 800a078:	2900      	cmp	r1, #0
 800a07a:	d1b9      	bne.n	8009ff0 <_printf_float+0xe8>
 800a07c:	2301      	movs	r3, #1
 800a07e:	e7b6      	b.n	8009fee <_printf_float+0xe6>
 800a080:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800a084:	d119      	bne.n	800a0ba <_printf_float+0x1b2>
 800a086:	2900      	cmp	r1, #0
 800a088:	6863      	ldr	r3, [r4, #4]
 800a08a:	dd0c      	ble.n	800a0a6 <_printf_float+0x19e>
 800a08c:	6121      	str	r1, [r4, #16]
 800a08e:	b913      	cbnz	r3, 800a096 <_printf_float+0x18e>
 800a090:	6822      	ldr	r2, [r4, #0]
 800a092:	07d2      	lsls	r2, r2, #31
 800a094:	d502      	bpl.n	800a09c <_printf_float+0x194>
 800a096:	3301      	adds	r3, #1
 800a098:	440b      	add	r3, r1
 800a09a:	6123      	str	r3, [r4, #16]
 800a09c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a09e:	65a3      	str	r3, [r4, #88]	; 0x58
 800a0a0:	f04f 0900 	mov.w	r9, #0
 800a0a4:	e7d9      	b.n	800a05a <_printf_float+0x152>
 800a0a6:	b913      	cbnz	r3, 800a0ae <_printf_float+0x1a6>
 800a0a8:	6822      	ldr	r2, [r4, #0]
 800a0aa:	07d0      	lsls	r0, r2, #31
 800a0ac:	d501      	bpl.n	800a0b2 <_printf_float+0x1aa>
 800a0ae:	3302      	adds	r3, #2
 800a0b0:	e7f3      	b.n	800a09a <_printf_float+0x192>
 800a0b2:	2301      	movs	r3, #1
 800a0b4:	e7f1      	b.n	800a09a <_printf_float+0x192>
 800a0b6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800a0ba:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a0be:	4293      	cmp	r3, r2
 800a0c0:	db05      	blt.n	800a0ce <_printf_float+0x1c6>
 800a0c2:	6822      	ldr	r2, [r4, #0]
 800a0c4:	6123      	str	r3, [r4, #16]
 800a0c6:	07d1      	lsls	r1, r2, #31
 800a0c8:	d5e8      	bpl.n	800a09c <_printf_float+0x194>
 800a0ca:	3301      	adds	r3, #1
 800a0cc:	e7e5      	b.n	800a09a <_printf_float+0x192>
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	bfd4      	ite	le
 800a0d2:	f1c3 0302 	rsble	r3, r3, #2
 800a0d6:	2301      	movgt	r3, #1
 800a0d8:	4413      	add	r3, r2
 800a0da:	e7de      	b.n	800a09a <_printf_float+0x192>
 800a0dc:	6823      	ldr	r3, [r4, #0]
 800a0de:	055a      	lsls	r2, r3, #21
 800a0e0:	d407      	bmi.n	800a0f2 <_printf_float+0x1ea>
 800a0e2:	6923      	ldr	r3, [r4, #16]
 800a0e4:	4642      	mov	r2, r8
 800a0e6:	4631      	mov	r1, r6
 800a0e8:	4628      	mov	r0, r5
 800a0ea:	47b8      	blx	r7
 800a0ec:	3001      	adds	r0, #1
 800a0ee:	d12b      	bne.n	800a148 <_printf_float+0x240>
 800a0f0:	e767      	b.n	8009fc2 <_printf_float+0xba>
 800a0f2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800a0f6:	f240 80dc 	bls.w	800a2b2 <_printf_float+0x3aa>
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a102:	f7f6 fce1 	bl	8000ac8 <__aeabi_dcmpeq>
 800a106:	2800      	cmp	r0, #0
 800a108:	d033      	beq.n	800a172 <_printf_float+0x26a>
 800a10a:	2301      	movs	r3, #1
 800a10c:	4a41      	ldr	r2, [pc, #260]	; (800a214 <_printf_float+0x30c>)
 800a10e:	4631      	mov	r1, r6
 800a110:	4628      	mov	r0, r5
 800a112:	47b8      	blx	r7
 800a114:	3001      	adds	r0, #1
 800a116:	f43f af54 	beq.w	8009fc2 <_printf_float+0xba>
 800a11a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a11e:	429a      	cmp	r2, r3
 800a120:	db02      	blt.n	800a128 <_printf_float+0x220>
 800a122:	6823      	ldr	r3, [r4, #0]
 800a124:	07d8      	lsls	r0, r3, #31
 800a126:	d50f      	bpl.n	800a148 <_printf_float+0x240>
 800a128:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a12c:	4631      	mov	r1, r6
 800a12e:	4628      	mov	r0, r5
 800a130:	47b8      	blx	r7
 800a132:	3001      	adds	r0, #1
 800a134:	f43f af45 	beq.w	8009fc2 <_printf_float+0xba>
 800a138:	f04f 0800 	mov.w	r8, #0
 800a13c:	f104 091a 	add.w	r9, r4, #26
 800a140:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a142:	3b01      	subs	r3, #1
 800a144:	4543      	cmp	r3, r8
 800a146:	dc09      	bgt.n	800a15c <_printf_float+0x254>
 800a148:	6823      	ldr	r3, [r4, #0]
 800a14a:	079b      	lsls	r3, r3, #30
 800a14c:	f100 8103 	bmi.w	800a356 <_printf_float+0x44e>
 800a150:	68e0      	ldr	r0, [r4, #12]
 800a152:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a154:	4298      	cmp	r0, r3
 800a156:	bfb8      	it	lt
 800a158:	4618      	movlt	r0, r3
 800a15a:	e734      	b.n	8009fc6 <_printf_float+0xbe>
 800a15c:	2301      	movs	r3, #1
 800a15e:	464a      	mov	r2, r9
 800a160:	4631      	mov	r1, r6
 800a162:	4628      	mov	r0, r5
 800a164:	47b8      	blx	r7
 800a166:	3001      	adds	r0, #1
 800a168:	f43f af2b 	beq.w	8009fc2 <_printf_float+0xba>
 800a16c:	f108 0801 	add.w	r8, r8, #1
 800a170:	e7e6      	b.n	800a140 <_printf_float+0x238>
 800a172:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a174:	2b00      	cmp	r3, #0
 800a176:	dc2b      	bgt.n	800a1d0 <_printf_float+0x2c8>
 800a178:	2301      	movs	r3, #1
 800a17a:	4a26      	ldr	r2, [pc, #152]	; (800a214 <_printf_float+0x30c>)
 800a17c:	4631      	mov	r1, r6
 800a17e:	4628      	mov	r0, r5
 800a180:	47b8      	blx	r7
 800a182:	3001      	adds	r0, #1
 800a184:	f43f af1d 	beq.w	8009fc2 <_printf_float+0xba>
 800a188:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a18a:	b923      	cbnz	r3, 800a196 <_printf_float+0x28e>
 800a18c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a18e:	b913      	cbnz	r3, 800a196 <_printf_float+0x28e>
 800a190:	6823      	ldr	r3, [r4, #0]
 800a192:	07d9      	lsls	r1, r3, #31
 800a194:	d5d8      	bpl.n	800a148 <_printf_float+0x240>
 800a196:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a19a:	4631      	mov	r1, r6
 800a19c:	4628      	mov	r0, r5
 800a19e:	47b8      	blx	r7
 800a1a0:	3001      	adds	r0, #1
 800a1a2:	f43f af0e 	beq.w	8009fc2 <_printf_float+0xba>
 800a1a6:	f04f 0900 	mov.w	r9, #0
 800a1aa:	f104 0a1a 	add.w	sl, r4, #26
 800a1ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1b0:	425b      	negs	r3, r3
 800a1b2:	454b      	cmp	r3, r9
 800a1b4:	dc01      	bgt.n	800a1ba <_printf_float+0x2b2>
 800a1b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1b8:	e794      	b.n	800a0e4 <_printf_float+0x1dc>
 800a1ba:	2301      	movs	r3, #1
 800a1bc:	4652      	mov	r2, sl
 800a1be:	4631      	mov	r1, r6
 800a1c0:	4628      	mov	r0, r5
 800a1c2:	47b8      	blx	r7
 800a1c4:	3001      	adds	r0, #1
 800a1c6:	f43f aefc 	beq.w	8009fc2 <_printf_float+0xba>
 800a1ca:	f109 0901 	add.w	r9, r9, #1
 800a1ce:	e7ee      	b.n	800a1ae <_printf_float+0x2a6>
 800a1d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a1d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a1d4:	429a      	cmp	r2, r3
 800a1d6:	bfa8      	it	ge
 800a1d8:	461a      	movge	r2, r3
 800a1da:	2a00      	cmp	r2, #0
 800a1dc:	4691      	mov	r9, r2
 800a1de:	dd07      	ble.n	800a1f0 <_printf_float+0x2e8>
 800a1e0:	4613      	mov	r3, r2
 800a1e2:	4631      	mov	r1, r6
 800a1e4:	4642      	mov	r2, r8
 800a1e6:	4628      	mov	r0, r5
 800a1e8:	47b8      	blx	r7
 800a1ea:	3001      	adds	r0, #1
 800a1ec:	f43f aee9 	beq.w	8009fc2 <_printf_float+0xba>
 800a1f0:	f104 031a 	add.w	r3, r4, #26
 800a1f4:	f04f 0b00 	mov.w	fp, #0
 800a1f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a1fc:	9306      	str	r3, [sp, #24]
 800a1fe:	e015      	b.n	800a22c <_printf_float+0x324>
 800a200:	7fefffff 	.word	0x7fefffff
 800a204:	0800daba 	.word	0x0800daba
 800a208:	0800d800 	.word	0x0800d800
 800a20c:	0800d808 	.word	0x0800d808
 800a210:	0800d804 	.word	0x0800d804
 800a214:	0800d80c 	.word	0x0800d80c
 800a218:	2301      	movs	r3, #1
 800a21a:	9a06      	ldr	r2, [sp, #24]
 800a21c:	4631      	mov	r1, r6
 800a21e:	4628      	mov	r0, r5
 800a220:	47b8      	blx	r7
 800a222:	3001      	adds	r0, #1
 800a224:	f43f aecd 	beq.w	8009fc2 <_printf_float+0xba>
 800a228:	f10b 0b01 	add.w	fp, fp, #1
 800a22c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800a230:	ebaa 0309 	sub.w	r3, sl, r9
 800a234:	455b      	cmp	r3, fp
 800a236:	dcef      	bgt.n	800a218 <_printf_float+0x310>
 800a238:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a23c:	429a      	cmp	r2, r3
 800a23e:	44d0      	add	r8, sl
 800a240:	db15      	blt.n	800a26e <_printf_float+0x366>
 800a242:	6823      	ldr	r3, [r4, #0]
 800a244:	07da      	lsls	r2, r3, #31
 800a246:	d412      	bmi.n	800a26e <_printf_float+0x366>
 800a248:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a24a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a24c:	eba3 020a 	sub.w	r2, r3, sl
 800a250:	eba3 0a01 	sub.w	sl, r3, r1
 800a254:	4592      	cmp	sl, r2
 800a256:	bfa8      	it	ge
 800a258:	4692      	movge	sl, r2
 800a25a:	f1ba 0f00 	cmp.w	sl, #0
 800a25e:	dc0e      	bgt.n	800a27e <_printf_float+0x376>
 800a260:	f04f 0800 	mov.w	r8, #0
 800a264:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a268:	f104 091a 	add.w	r9, r4, #26
 800a26c:	e019      	b.n	800a2a2 <_printf_float+0x39a>
 800a26e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a272:	4631      	mov	r1, r6
 800a274:	4628      	mov	r0, r5
 800a276:	47b8      	blx	r7
 800a278:	3001      	adds	r0, #1
 800a27a:	d1e5      	bne.n	800a248 <_printf_float+0x340>
 800a27c:	e6a1      	b.n	8009fc2 <_printf_float+0xba>
 800a27e:	4653      	mov	r3, sl
 800a280:	4642      	mov	r2, r8
 800a282:	4631      	mov	r1, r6
 800a284:	4628      	mov	r0, r5
 800a286:	47b8      	blx	r7
 800a288:	3001      	adds	r0, #1
 800a28a:	d1e9      	bne.n	800a260 <_printf_float+0x358>
 800a28c:	e699      	b.n	8009fc2 <_printf_float+0xba>
 800a28e:	2301      	movs	r3, #1
 800a290:	464a      	mov	r2, r9
 800a292:	4631      	mov	r1, r6
 800a294:	4628      	mov	r0, r5
 800a296:	47b8      	blx	r7
 800a298:	3001      	adds	r0, #1
 800a29a:	f43f ae92 	beq.w	8009fc2 <_printf_float+0xba>
 800a29e:	f108 0801 	add.w	r8, r8, #1
 800a2a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a2a6:	1a9b      	subs	r3, r3, r2
 800a2a8:	eba3 030a 	sub.w	r3, r3, sl
 800a2ac:	4543      	cmp	r3, r8
 800a2ae:	dcee      	bgt.n	800a28e <_printf_float+0x386>
 800a2b0:	e74a      	b.n	800a148 <_printf_float+0x240>
 800a2b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a2b4:	2a01      	cmp	r2, #1
 800a2b6:	dc01      	bgt.n	800a2bc <_printf_float+0x3b4>
 800a2b8:	07db      	lsls	r3, r3, #31
 800a2ba:	d53a      	bpl.n	800a332 <_printf_float+0x42a>
 800a2bc:	2301      	movs	r3, #1
 800a2be:	4642      	mov	r2, r8
 800a2c0:	4631      	mov	r1, r6
 800a2c2:	4628      	mov	r0, r5
 800a2c4:	47b8      	blx	r7
 800a2c6:	3001      	adds	r0, #1
 800a2c8:	f43f ae7b 	beq.w	8009fc2 <_printf_float+0xba>
 800a2cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a2d0:	4631      	mov	r1, r6
 800a2d2:	4628      	mov	r0, r5
 800a2d4:	47b8      	blx	r7
 800a2d6:	3001      	adds	r0, #1
 800a2d8:	f108 0801 	add.w	r8, r8, #1
 800a2dc:	f43f ae71 	beq.w	8009fc2 <_printf_float+0xba>
 800a2e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 800a2e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	f7f6 fbeb 	bl	8000ac8 <__aeabi_dcmpeq>
 800a2f2:	b9c8      	cbnz	r0, 800a328 <_printf_float+0x420>
 800a2f4:	4653      	mov	r3, sl
 800a2f6:	4642      	mov	r2, r8
 800a2f8:	4631      	mov	r1, r6
 800a2fa:	4628      	mov	r0, r5
 800a2fc:	47b8      	blx	r7
 800a2fe:	3001      	adds	r0, #1
 800a300:	d10e      	bne.n	800a320 <_printf_float+0x418>
 800a302:	e65e      	b.n	8009fc2 <_printf_float+0xba>
 800a304:	2301      	movs	r3, #1
 800a306:	4652      	mov	r2, sl
 800a308:	4631      	mov	r1, r6
 800a30a:	4628      	mov	r0, r5
 800a30c:	47b8      	blx	r7
 800a30e:	3001      	adds	r0, #1
 800a310:	f43f ae57 	beq.w	8009fc2 <_printf_float+0xba>
 800a314:	f108 0801 	add.w	r8, r8, #1
 800a318:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a31a:	3b01      	subs	r3, #1
 800a31c:	4543      	cmp	r3, r8
 800a31e:	dcf1      	bgt.n	800a304 <_printf_float+0x3fc>
 800a320:	464b      	mov	r3, r9
 800a322:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a326:	e6de      	b.n	800a0e6 <_printf_float+0x1de>
 800a328:	f04f 0800 	mov.w	r8, #0
 800a32c:	f104 0a1a 	add.w	sl, r4, #26
 800a330:	e7f2      	b.n	800a318 <_printf_float+0x410>
 800a332:	2301      	movs	r3, #1
 800a334:	e7df      	b.n	800a2f6 <_printf_float+0x3ee>
 800a336:	2301      	movs	r3, #1
 800a338:	464a      	mov	r2, r9
 800a33a:	4631      	mov	r1, r6
 800a33c:	4628      	mov	r0, r5
 800a33e:	47b8      	blx	r7
 800a340:	3001      	adds	r0, #1
 800a342:	f43f ae3e 	beq.w	8009fc2 <_printf_float+0xba>
 800a346:	f108 0801 	add.w	r8, r8, #1
 800a34a:	68e3      	ldr	r3, [r4, #12]
 800a34c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a34e:	1a9b      	subs	r3, r3, r2
 800a350:	4543      	cmp	r3, r8
 800a352:	dcf0      	bgt.n	800a336 <_printf_float+0x42e>
 800a354:	e6fc      	b.n	800a150 <_printf_float+0x248>
 800a356:	f04f 0800 	mov.w	r8, #0
 800a35a:	f104 0919 	add.w	r9, r4, #25
 800a35e:	e7f4      	b.n	800a34a <_printf_float+0x442>
 800a360:	2900      	cmp	r1, #0
 800a362:	f43f ae8b 	beq.w	800a07c <_printf_float+0x174>
 800a366:	2300      	movs	r3, #0
 800a368:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800a36c:	ab09      	add	r3, sp, #36	; 0x24
 800a36e:	9300      	str	r3, [sp, #0]
 800a370:	ec49 8b10 	vmov	d0, r8, r9
 800a374:	6022      	str	r2, [r4, #0]
 800a376:	f8cd a004 	str.w	sl, [sp, #4]
 800a37a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a37e:	4628      	mov	r0, r5
 800a380:	f7ff fd2e 	bl	8009de0 <__cvt>
 800a384:	4680      	mov	r8, r0
 800a386:	e648      	b.n	800a01a <_printf_float+0x112>

0800a388 <_printf_common>:
 800a388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a38c:	4691      	mov	r9, r2
 800a38e:	461f      	mov	r7, r3
 800a390:	688a      	ldr	r2, [r1, #8]
 800a392:	690b      	ldr	r3, [r1, #16]
 800a394:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a398:	4293      	cmp	r3, r2
 800a39a:	bfb8      	it	lt
 800a39c:	4613      	movlt	r3, r2
 800a39e:	f8c9 3000 	str.w	r3, [r9]
 800a3a2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a3a6:	4606      	mov	r6, r0
 800a3a8:	460c      	mov	r4, r1
 800a3aa:	b112      	cbz	r2, 800a3b2 <_printf_common+0x2a>
 800a3ac:	3301      	adds	r3, #1
 800a3ae:	f8c9 3000 	str.w	r3, [r9]
 800a3b2:	6823      	ldr	r3, [r4, #0]
 800a3b4:	0699      	lsls	r1, r3, #26
 800a3b6:	bf42      	ittt	mi
 800a3b8:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a3bc:	3302      	addmi	r3, #2
 800a3be:	f8c9 3000 	strmi.w	r3, [r9]
 800a3c2:	6825      	ldr	r5, [r4, #0]
 800a3c4:	f015 0506 	ands.w	r5, r5, #6
 800a3c8:	d107      	bne.n	800a3da <_printf_common+0x52>
 800a3ca:	f104 0a19 	add.w	sl, r4, #25
 800a3ce:	68e3      	ldr	r3, [r4, #12]
 800a3d0:	f8d9 2000 	ldr.w	r2, [r9]
 800a3d4:	1a9b      	subs	r3, r3, r2
 800a3d6:	42ab      	cmp	r3, r5
 800a3d8:	dc28      	bgt.n	800a42c <_printf_common+0xa4>
 800a3da:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a3de:	6822      	ldr	r2, [r4, #0]
 800a3e0:	3300      	adds	r3, #0
 800a3e2:	bf18      	it	ne
 800a3e4:	2301      	movne	r3, #1
 800a3e6:	0692      	lsls	r2, r2, #26
 800a3e8:	d42d      	bmi.n	800a446 <_printf_common+0xbe>
 800a3ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a3ee:	4639      	mov	r1, r7
 800a3f0:	4630      	mov	r0, r6
 800a3f2:	47c0      	blx	r8
 800a3f4:	3001      	adds	r0, #1
 800a3f6:	d020      	beq.n	800a43a <_printf_common+0xb2>
 800a3f8:	6823      	ldr	r3, [r4, #0]
 800a3fa:	68e5      	ldr	r5, [r4, #12]
 800a3fc:	f8d9 2000 	ldr.w	r2, [r9]
 800a400:	f003 0306 	and.w	r3, r3, #6
 800a404:	2b04      	cmp	r3, #4
 800a406:	bf08      	it	eq
 800a408:	1aad      	subeq	r5, r5, r2
 800a40a:	68a3      	ldr	r3, [r4, #8]
 800a40c:	6922      	ldr	r2, [r4, #16]
 800a40e:	bf0c      	ite	eq
 800a410:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a414:	2500      	movne	r5, #0
 800a416:	4293      	cmp	r3, r2
 800a418:	bfc4      	itt	gt
 800a41a:	1a9b      	subgt	r3, r3, r2
 800a41c:	18ed      	addgt	r5, r5, r3
 800a41e:	f04f 0900 	mov.w	r9, #0
 800a422:	341a      	adds	r4, #26
 800a424:	454d      	cmp	r5, r9
 800a426:	d11a      	bne.n	800a45e <_printf_common+0xd6>
 800a428:	2000      	movs	r0, #0
 800a42a:	e008      	b.n	800a43e <_printf_common+0xb6>
 800a42c:	2301      	movs	r3, #1
 800a42e:	4652      	mov	r2, sl
 800a430:	4639      	mov	r1, r7
 800a432:	4630      	mov	r0, r6
 800a434:	47c0      	blx	r8
 800a436:	3001      	adds	r0, #1
 800a438:	d103      	bne.n	800a442 <_printf_common+0xba>
 800a43a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a43e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a442:	3501      	adds	r5, #1
 800a444:	e7c3      	b.n	800a3ce <_printf_common+0x46>
 800a446:	18e1      	adds	r1, r4, r3
 800a448:	1c5a      	adds	r2, r3, #1
 800a44a:	2030      	movs	r0, #48	; 0x30
 800a44c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a450:	4422      	add	r2, r4
 800a452:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a456:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a45a:	3302      	adds	r3, #2
 800a45c:	e7c5      	b.n	800a3ea <_printf_common+0x62>
 800a45e:	2301      	movs	r3, #1
 800a460:	4622      	mov	r2, r4
 800a462:	4639      	mov	r1, r7
 800a464:	4630      	mov	r0, r6
 800a466:	47c0      	blx	r8
 800a468:	3001      	adds	r0, #1
 800a46a:	d0e6      	beq.n	800a43a <_printf_common+0xb2>
 800a46c:	f109 0901 	add.w	r9, r9, #1
 800a470:	e7d8      	b.n	800a424 <_printf_common+0x9c>
	...

0800a474 <_printf_i>:
 800a474:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a478:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a47c:	460c      	mov	r4, r1
 800a47e:	7e09      	ldrb	r1, [r1, #24]
 800a480:	b085      	sub	sp, #20
 800a482:	296e      	cmp	r1, #110	; 0x6e
 800a484:	4617      	mov	r7, r2
 800a486:	4606      	mov	r6, r0
 800a488:	4698      	mov	r8, r3
 800a48a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a48c:	f000 80b3 	beq.w	800a5f6 <_printf_i+0x182>
 800a490:	d822      	bhi.n	800a4d8 <_printf_i+0x64>
 800a492:	2963      	cmp	r1, #99	; 0x63
 800a494:	d036      	beq.n	800a504 <_printf_i+0x90>
 800a496:	d80a      	bhi.n	800a4ae <_printf_i+0x3a>
 800a498:	2900      	cmp	r1, #0
 800a49a:	f000 80b9 	beq.w	800a610 <_printf_i+0x19c>
 800a49e:	2958      	cmp	r1, #88	; 0x58
 800a4a0:	f000 8083 	beq.w	800a5aa <_printf_i+0x136>
 800a4a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a4a8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a4ac:	e032      	b.n	800a514 <_printf_i+0xa0>
 800a4ae:	2964      	cmp	r1, #100	; 0x64
 800a4b0:	d001      	beq.n	800a4b6 <_printf_i+0x42>
 800a4b2:	2969      	cmp	r1, #105	; 0x69
 800a4b4:	d1f6      	bne.n	800a4a4 <_printf_i+0x30>
 800a4b6:	6820      	ldr	r0, [r4, #0]
 800a4b8:	6813      	ldr	r3, [r2, #0]
 800a4ba:	0605      	lsls	r5, r0, #24
 800a4bc:	f103 0104 	add.w	r1, r3, #4
 800a4c0:	d52a      	bpl.n	800a518 <_printf_i+0xa4>
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	6011      	str	r1, [r2, #0]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	da03      	bge.n	800a4d2 <_printf_i+0x5e>
 800a4ca:	222d      	movs	r2, #45	; 0x2d
 800a4cc:	425b      	negs	r3, r3
 800a4ce:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a4d2:	486f      	ldr	r0, [pc, #444]	; (800a690 <_printf_i+0x21c>)
 800a4d4:	220a      	movs	r2, #10
 800a4d6:	e039      	b.n	800a54c <_printf_i+0xd8>
 800a4d8:	2973      	cmp	r1, #115	; 0x73
 800a4da:	f000 809d 	beq.w	800a618 <_printf_i+0x1a4>
 800a4de:	d808      	bhi.n	800a4f2 <_printf_i+0x7e>
 800a4e0:	296f      	cmp	r1, #111	; 0x6f
 800a4e2:	d020      	beq.n	800a526 <_printf_i+0xb2>
 800a4e4:	2970      	cmp	r1, #112	; 0x70
 800a4e6:	d1dd      	bne.n	800a4a4 <_printf_i+0x30>
 800a4e8:	6823      	ldr	r3, [r4, #0]
 800a4ea:	f043 0320 	orr.w	r3, r3, #32
 800a4ee:	6023      	str	r3, [r4, #0]
 800a4f0:	e003      	b.n	800a4fa <_printf_i+0x86>
 800a4f2:	2975      	cmp	r1, #117	; 0x75
 800a4f4:	d017      	beq.n	800a526 <_printf_i+0xb2>
 800a4f6:	2978      	cmp	r1, #120	; 0x78
 800a4f8:	d1d4      	bne.n	800a4a4 <_printf_i+0x30>
 800a4fa:	2378      	movs	r3, #120	; 0x78
 800a4fc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a500:	4864      	ldr	r0, [pc, #400]	; (800a694 <_printf_i+0x220>)
 800a502:	e055      	b.n	800a5b0 <_printf_i+0x13c>
 800a504:	6813      	ldr	r3, [r2, #0]
 800a506:	1d19      	adds	r1, r3, #4
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	6011      	str	r1, [r2, #0]
 800a50c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a510:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a514:	2301      	movs	r3, #1
 800a516:	e08c      	b.n	800a632 <_printf_i+0x1be>
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	6011      	str	r1, [r2, #0]
 800a51c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a520:	bf18      	it	ne
 800a522:	b21b      	sxthne	r3, r3
 800a524:	e7cf      	b.n	800a4c6 <_printf_i+0x52>
 800a526:	6813      	ldr	r3, [r2, #0]
 800a528:	6825      	ldr	r5, [r4, #0]
 800a52a:	1d18      	adds	r0, r3, #4
 800a52c:	6010      	str	r0, [r2, #0]
 800a52e:	0628      	lsls	r0, r5, #24
 800a530:	d501      	bpl.n	800a536 <_printf_i+0xc2>
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	e002      	b.n	800a53c <_printf_i+0xc8>
 800a536:	0668      	lsls	r0, r5, #25
 800a538:	d5fb      	bpl.n	800a532 <_printf_i+0xbe>
 800a53a:	881b      	ldrh	r3, [r3, #0]
 800a53c:	4854      	ldr	r0, [pc, #336]	; (800a690 <_printf_i+0x21c>)
 800a53e:	296f      	cmp	r1, #111	; 0x6f
 800a540:	bf14      	ite	ne
 800a542:	220a      	movne	r2, #10
 800a544:	2208      	moveq	r2, #8
 800a546:	2100      	movs	r1, #0
 800a548:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a54c:	6865      	ldr	r5, [r4, #4]
 800a54e:	60a5      	str	r5, [r4, #8]
 800a550:	2d00      	cmp	r5, #0
 800a552:	f2c0 8095 	blt.w	800a680 <_printf_i+0x20c>
 800a556:	6821      	ldr	r1, [r4, #0]
 800a558:	f021 0104 	bic.w	r1, r1, #4
 800a55c:	6021      	str	r1, [r4, #0]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d13d      	bne.n	800a5de <_printf_i+0x16a>
 800a562:	2d00      	cmp	r5, #0
 800a564:	f040 808e 	bne.w	800a684 <_printf_i+0x210>
 800a568:	4665      	mov	r5, ip
 800a56a:	2a08      	cmp	r2, #8
 800a56c:	d10b      	bne.n	800a586 <_printf_i+0x112>
 800a56e:	6823      	ldr	r3, [r4, #0]
 800a570:	07db      	lsls	r3, r3, #31
 800a572:	d508      	bpl.n	800a586 <_printf_i+0x112>
 800a574:	6923      	ldr	r3, [r4, #16]
 800a576:	6862      	ldr	r2, [r4, #4]
 800a578:	429a      	cmp	r2, r3
 800a57a:	bfde      	ittt	le
 800a57c:	2330      	movle	r3, #48	; 0x30
 800a57e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a582:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a586:	ebac 0305 	sub.w	r3, ip, r5
 800a58a:	6123      	str	r3, [r4, #16]
 800a58c:	f8cd 8000 	str.w	r8, [sp]
 800a590:	463b      	mov	r3, r7
 800a592:	aa03      	add	r2, sp, #12
 800a594:	4621      	mov	r1, r4
 800a596:	4630      	mov	r0, r6
 800a598:	f7ff fef6 	bl	800a388 <_printf_common>
 800a59c:	3001      	adds	r0, #1
 800a59e:	d14d      	bne.n	800a63c <_printf_i+0x1c8>
 800a5a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a5a4:	b005      	add	sp, #20
 800a5a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a5aa:	4839      	ldr	r0, [pc, #228]	; (800a690 <_printf_i+0x21c>)
 800a5ac:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a5b0:	6813      	ldr	r3, [r2, #0]
 800a5b2:	6821      	ldr	r1, [r4, #0]
 800a5b4:	1d1d      	adds	r5, r3, #4
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	6015      	str	r5, [r2, #0]
 800a5ba:	060a      	lsls	r2, r1, #24
 800a5bc:	d50b      	bpl.n	800a5d6 <_printf_i+0x162>
 800a5be:	07ca      	lsls	r2, r1, #31
 800a5c0:	bf44      	itt	mi
 800a5c2:	f041 0120 	orrmi.w	r1, r1, #32
 800a5c6:	6021      	strmi	r1, [r4, #0]
 800a5c8:	b91b      	cbnz	r3, 800a5d2 <_printf_i+0x15e>
 800a5ca:	6822      	ldr	r2, [r4, #0]
 800a5cc:	f022 0220 	bic.w	r2, r2, #32
 800a5d0:	6022      	str	r2, [r4, #0]
 800a5d2:	2210      	movs	r2, #16
 800a5d4:	e7b7      	b.n	800a546 <_printf_i+0xd2>
 800a5d6:	064d      	lsls	r5, r1, #25
 800a5d8:	bf48      	it	mi
 800a5da:	b29b      	uxthmi	r3, r3
 800a5dc:	e7ef      	b.n	800a5be <_printf_i+0x14a>
 800a5de:	4665      	mov	r5, ip
 800a5e0:	fbb3 f1f2 	udiv	r1, r3, r2
 800a5e4:	fb02 3311 	mls	r3, r2, r1, r3
 800a5e8:	5cc3      	ldrb	r3, [r0, r3]
 800a5ea:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a5ee:	460b      	mov	r3, r1
 800a5f0:	2900      	cmp	r1, #0
 800a5f2:	d1f5      	bne.n	800a5e0 <_printf_i+0x16c>
 800a5f4:	e7b9      	b.n	800a56a <_printf_i+0xf6>
 800a5f6:	6813      	ldr	r3, [r2, #0]
 800a5f8:	6825      	ldr	r5, [r4, #0]
 800a5fa:	6961      	ldr	r1, [r4, #20]
 800a5fc:	1d18      	adds	r0, r3, #4
 800a5fe:	6010      	str	r0, [r2, #0]
 800a600:	0628      	lsls	r0, r5, #24
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	d501      	bpl.n	800a60a <_printf_i+0x196>
 800a606:	6019      	str	r1, [r3, #0]
 800a608:	e002      	b.n	800a610 <_printf_i+0x19c>
 800a60a:	066a      	lsls	r2, r5, #25
 800a60c:	d5fb      	bpl.n	800a606 <_printf_i+0x192>
 800a60e:	8019      	strh	r1, [r3, #0]
 800a610:	2300      	movs	r3, #0
 800a612:	6123      	str	r3, [r4, #16]
 800a614:	4665      	mov	r5, ip
 800a616:	e7b9      	b.n	800a58c <_printf_i+0x118>
 800a618:	6813      	ldr	r3, [r2, #0]
 800a61a:	1d19      	adds	r1, r3, #4
 800a61c:	6011      	str	r1, [r2, #0]
 800a61e:	681d      	ldr	r5, [r3, #0]
 800a620:	6862      	ldr	r2, [r4, #4]
 800a622:	2100      	movs	r1, #0
 800a624:	4628      	mov	r0, r5
 800a626:	f7f5 fddb 	bl	80001e0 <memchr>
 800a62a:	b108      	cbz	r0, 800a630 <_printf_i+0x1bc>
 800a62c:	1b40      	subs	r0, r0, r5
 800a62e:	6060      	str	r0, [r4, #4]
 800a630:	6863      	ldr	r3, [r4, #4]
 800a632:	6123      	str	r3, [r4, #16]
 800a634:	2300      	movs	r3, #0
 800a636:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a63a:	e7a7      	b.n	800a58c <_printf_i+0x118>
 800a63c:	6923      	ldr	r3, [r4, #16]
 800a63e:	462a      	mov	r2, r5
 800a640:	4639      	mov	r1, r7
 800a642:	4630      	mov	r0, r6
 800a644:	47c0      	blx	r8
 800a646:	3001      	adds	r0, #1
 800a648:	d0aa      	beq.n	800a5a0 <_printf_i+0x12c>
 800a64a:	6823      	ldr	r3, [r4, #0]
 800a64c:	079b      	lsls	r3, r3, #30
 800a64e:	d413      	bmi.n	800a678 <_printf_i+0x204>
 800a650:	68e0      	ldr	r0, [r4, #12]
 800a652:	9b03      	ldr	r3, [sp, #12]
 800a654:	4298      	cmp	r0, r3
 800a656:	bfb8      	it	lt
 800a658:	4618      	movlt	r0, r3
 800a65a:	e7a3      	b.n	800a5a4 <_printf_i+0x130>
 800a65c:	2301      	movs	r3, #1
 800a65e:	464a      	mov	r2, r9
 800a660:	4639      	mov	r1, r7
 800a662:	4630      	mov	r0, r6
 800a664:	47c0      	blx	r8
 800a666:	3001      	adds	r0, #1
 800a668:	d09a      	beq.n	800a5a0 <_printf_i+0x12c>
 800a66a:	3501      	adds	r5, #1
 800a66c:	68e3      	ldr	r3, [r4, #12]
 800a66e:	9a03      	ldr	r2, [sp, #12]
 800a670:	1a9b      	subs	r3, r3, r2
 800a672:	42ab      	cmp	r3, r5
 800a674:	dcf2      	bgt.n	800a65c <_printf_i+0x1e8>
 800a676:	e7eb      	b.n	800a650 <_printf_i+0x1dc>
 800a678:	2500      	movs	r5, #0
 800a67a:	f104 0919 	add.w	r9, r4, #25
 800a67e:	e7f5      	b.n	800a66c <_printf_i+0x1f8>
 800a680:	2b00      	cmp	r3, #0
 800a682:	d1ac      	bne.n	800a5de <_printf_i+0x16a>
 800a684:	7803      	ldrb	r3, [r0, #0]
 800a686:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a68a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a68e:	e76c      	b.n	800a56a <_printf_i+0xf6>
 800a690:	0800d80e 	.word	0x0800d80e
 800a694:	0800d81f 	.word	0x0800d81f

0800a698 <iprintf>:
 800a698:	b40f      	push	{r0, r1, r2, r3}
 800a69a:	4b0a      	ldr	r3, [pc, #40]	; (800a6c4 <iprintf+0x2c>)
 800a69c:	b513      	push	{r0, r1, r4, lr}
 800a69e:	681c      	ldr	r4, [r3, #0]
 800a6a0:	b124      	cbz	r4, 800a6ac <iprintf+0x14>
 800a6a2:	69a3      	ldr	r3, [r4, #24]
 800a6a4:	b913      	cbnz	r3, 800a6ac <iprintf+0x14>
 800a6a6:	4620      	mov	r0, r4
 800a6a8:	f001 f866 	bl	800b778 <__sinit>
 800a6ac:	ab05      	add	r3, sp, #20
 800a6ae:	9a04      	ldr	r2, [sp, #16]
 800a6b0:	68a1      	ldr	r1, [r4, #8]
 800a6b2:	9301      	str	r3, [sp, #4]
 800a6b4:	4620      	mov	r0, r4
 800a6b6:	f001 fd29 	bl	800c10c <_vfiprintf_r>
 800a6ba:	b002      	add	sp, #8
 800a6bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a6c0:	b004      	add	sp, #16
 800a6c2:	4770      	bx	lr
 800a6c4:	20000010 	.word	0x20000010

0800a6c8 <_puts_r>:
 800a6c8:	b570      	push	{r4, r5, r6, lr}
 800a6ca:	460e      	mov	r6, r1
 800a6cc:	4605      	mov	r5, r0
 800a6ce:	b118      	cbz	r0, 800a6d8 <_puts_r+0x10>
 800a6d0:	6983      	ldr	r3, [r0, #24]
 800a6d2:	b90b      	cbnz	r3, 800a6d8 <_puts_r+0x10>
 800a6d4:	f001 f850 	bl	800b778 <__sinit>
 800a6d8:	69ab      	ldr	r3, [r5, #24]
 800a6da:	68ac      	ldr	r4, [r5, #8]
 800a6dc:	b913      	cbnz	r3, 800a6e4 <_puts_r+0x1c>
 800a6de:	4628      	mov	r0, r5
 800a6e0:	f001 f84a 	bl	800b778 <__sinit>
 800a6e4:	4b23      	ldr	r3, [pc, #140]	; (800a774 <_puts_r+0xac>)
 800a6e6:	429c      	cmp	r4, r3
 800a6e8:	d117      	bne.n	800a71a <_puts_r+0x52>
 800a6ea:	686c      	ldr	r4, [r5, #4]
 800a6ec:	89a3      	ldrh	r3, [r4, #12]
 800a6ee:	071b      	lsls	r3, r3, #28
 800a6f0:	d51d      	bpl.n	800a72e <_puts_r+0x66>
 800a6f2:	6923      	ldr	r3, [r4, #16]
 800a6f4:	b1db      	cbz	r3, 800a72e <_puts_r+0x66>
 800a6f6:	3e01      	subs	r6, #1
 800a6f8:	68a3      	ldr	r3, [r4, #8]
 800a6fa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a6fe:	3b01      	subs	r3, #1
 800a700:	60a3      	str	r3, [r4, #8]
 800a702:	b9e9      	cbnz	r1, 800a740 <_puts_r+0x78>
 800a704:	2b00      	cmp	r3, #0
 800a706:	da2e      	bge.n	800a766 <_puts_r+0x9e>
 800a708:	4622      	mov	r2, r4
 800a70a:	210a      	movs	r1, #10
 800a70c:	4628      	mov	r0, r5
 800a70e:	f000 f83f 	bl	800a790 <__swbuf_r>
 800a712:	3001      	adds	r0, #1
 800a714:	d011      	beq.n	800a73a <_puts_r+0x72>
 800a716:	200a      	movs	r0, #10
 800a718:	e011      	b.n	800a73e <_puts_r+0x76>
 800a71a:	4b17      	ldr	r3, [pc, #92]	; (800a778 <_puts_r+0xb0>)
 800a71c:	429c      	cmp	r4, r3
 800a71e:	d101      	bne.n	800a724 <_puts_r+0x5c>
 800a720:	68ac      	ldr	r4, [r5, #8]
 800a722:	e7e3      	b.n	800a6ec <_puts_r+0x24>
 800a724:	4b15      	ldr	r3, [pc, #84]	; (800a77c <_puts_r+0xb4>)
 800a726:	429c      	cmp	r4, r3
 800a728:	bf08      	it	eq
 800a72a:	68ec      	ldreq	r4, [r5, #12]
 800a72c:	e7de      	b.n	800a6ec <_puts_r+0x24>
 800a72e:	4621      	mov	r1, r4
 800a730:	4628      	mov	r0, r5
 800a732:	f000 f87f 	bl	800a834 <__swsetup_r>
 800a736:	2800      	cmp	r0, #0
 800a738:	d0dd      	beq.n	800a6f6 <_puts_r+0x2e>
 800a73a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a73e:	bd70      	pop	{r4, r5, r6, pc}
 800a740:	2b00      	cmp	r3, #0
 800a742:	da04      	bge.n	800a74e <_puts_r+0x86>
 800a744:	69a2      	ldr	r2, [r4, #24]
 800a746:	429a      	cmp	r2, r3
 800a748:	dc06      	bgt.n	800a758 <_puts_r+0x90>
 800a74a:	290a      	cmp	r1, #10
 800a74c:	d004      	beq.n	800a758 <_puts_r+0x90>
 800a74e:	6823      	ldr	r3, [r4, #0]
 800a750:	1c5a      	adds	r2, r3, #1
 800a752:	6022      	str	r2, [r4, #0]
 800a754:	7019      	strb	r1, [r3, #0]
 800a756:	e7cf      	b.n	800a6f8 <_puts_r+0x30>
 800a758:	4622      	mov	r2, r4
 800a75a:	4628      	mov	r0, r5
 800a75c:	f000 f818 	bl	800a790 <__swbuf_r>
 800a760:	3001      	adds	r0, #1
 800a762:	d1c9      	bne.n	800a6f8 <_puts_r+0x30>
 800a764:	e7e9      	b.n	800a73a <_puts_r+0x72>
 800a766:	6823      	ldr	r3, [r4, #0]
 800a768:	200a      	movs	r0, #10
 800a76a:	1c5a      	adds	r2, r3, #1
 800a76c:	6022      	str	r2, [r4, #0]
 800a76e:	7018      	strb	r0, [r3, #0]
 800a770:	e7e5      	b.n	800a73e <_puts_r+0x76>
 800a772:	bf00      	nop
 800a774:	0800d860 	.word	0x0800d860
 800a778:	0800d880 	.word	0x0800d880
 800a77c:	0800d840 	.word	0x0800d840

0800a780 <puts>:
 800a780:	4b02      	ldr	r3, [pc, #8]	; (800a78c <puts+0xc>)
 800a782:	4601      	mov	r1, r0
 800a784:	6818      	ldr	r0, [r3, #0]
 800a786:	f7ff bf9f 	b.w	800a6c8 <_puts_r>
 800a78a:	bf00      	nop
 800a78c:	20000010 	.word	0x20000010

0800a790 <__swbuf_r>:
 800a790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a792:	460e      	mov	r6, r1
 800a794:	4614      	mov	r4, r2
 800a796:	4605      	mov	r5, r0
 800a798:	b118      	cbz	r0, 800a7a2 <__swbuf_r+0x12>
 800a79a:	6983      	ldr	r3, [r0, #24]
 800a79c:	b90b      	cbnz	r3, 800a7a2 <__swbuf_r+0x12>
 800a79e:	f000 ffeb 	bl	800b778 <__sinit>
 800a7a2:	4b21      	ldr	r3, [pc, #132]	; (800a828 <__swbuf_r+0x98>)
 800a7a4:	429c      	cmp	r4, r3
 800a7a6:	d12a      	bne.n	800a7fe <__swbuf_r+0x6e>
 800a7a8:	686c      	ldr	r4, [r5, #4]
 800a7aa:	69a3      	ldr	r3, [r4, #24]
 800a7ac:	60a3      	str	r3, [r4, #8]
 800a7ae:	89a3      	ldrh	r3, [r4, #12]
 800a7b0:	071a      	lsls	r2, r3, #28
 800a7b2:	d52e      	bpl.n	800a812 <__swbuf_r+0x82>
 800a7b4:	6923      	ldr	r3, [r4, #16]
 800a7b6:	b363      	cbz	r3, 800a812 <__swbuf_r+0x82>
 800a7b8:	6923      	ldr	r3, [r4, #16]
 800a7ba:	6820      	ldr	r0, [r4, #0]
 800a7bc:	1ac0      	subs	r0, r0, r3
 800a7be:	6963      	ldr	r3, [r4, #20]
 800a7c0:	b2f6      	uxtb	r6, r6
 800a7c2:	4283      	cmp	r3, r0
 800a7c4:	4637      	mov	r7, r6
 800a7c6:	dc04      	bgt.n	800a7d2 <__swbuf_r+0x42>
 800a7c8:	4621      	mov	r1, r4
 800a7ca:	4628      	mov	r0, r5
 800a7cc:	f000 ff6a 	bl	800b6a4 <_fflush_r>
 800a7d0:	bb28      	cbnz	r0, 800a81e <__swbuf_r+0x8e>
 800a7d2:	68a3      	ldr	r3, [r4, #8]
 800a7d4:	3b01      	subs	r3, #1
 800a7d6:	60a3      	str	r3, [r4, #8]
 800a7d8:	6823      	ldr	r3, [r4, #0]
 800a7da:	1c5a      	adds	r2, r3, #1
 800a7dc:	6022      	str	r2, [r4, #0]
 800a7de:	701e      	strb	r6, [r3, #0]
 800a7e0:	6963      	ldr	r3, [r4, #20]
 800a7e2:	3001      	adds	r0, #1
 800a7e4:	4283      	cmp	r3, r0
 800a7e6:	d004      	beq.n	800a7f2 <__swbuf_r+0x62>
 800a7e8:	89a3      	ldrh	r3, [r4, #12]
 800a7ea:	07db      	lsls	r3, r3, #31
 800a7ec:	d519      	bpl.n	800a822 <__swbuf_r+0x92>
 800a7ee:	2e0a      	cmp	r6, #10
 800a7f0:	d117      	bne.n	800a822 <__swbuf_r+0x92>
 800a7f2:	4621      	mov	r1, r4
 800a7f4:	4628      	mov	r0, r5
 800a7f6:	f000 ff55 	bl	800b6a4 <_fflush_r>
 800a7fa:	b190      	cbz	r0, 800a822 <__swbuf_r+0x92>
 800a7fc:	e00f      	b.n	800a81e <__swbuf_r+0x8e>
 800a7fe:	4b0b      	ldr	r3, [pc, #44]	; (800a82c <__swbuf_r+0x9c>)
 800a800:	429c      	cmp	r4, r3
 800a802:	d101      	bne.n	800a808 <__swbuf_r+0x78>
 800a804:	68ac      	ldr	r4, [r5, #8]
 800a806:	e7d0      	b.n	800a7aa <__swbuf_r+0x1a>
 800a808:	4b09      	ldr	r3, [pc, #36]	; (800a830 <__swbuf_r+0xa0>)
 800a80a:	429c      	cmp	r4, r3
 800a80c:	bf08      	it	eq
 800a80e:	68ec      	ldreq	r4, [r5, #12]
 800a810:	e7cb      	b.n	800a7aa <__swbuf_r+0x1a>
 800a812:	4621      	mov	r1, r4
 800a814:	4628      	mov	r0, r5
 800a816:	f000 f80d 	bl	800a834 <__swsetup_r>
 800a81a:	2800      	cmp	r0, #0
 800a81c:	d0cc      	beq.n	800a7b8 <__swbuf_r+0x28>
 800a81e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a822:	4638      	mov	r0, r7
 800a824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a826:	bf00      	nop
 800a828:	0800d860 	.word	0x0800d860
 800a82c:	0800d880 	.word	0x0800d880
 800a830:	0800d840 	.word	0x0800d840

0800a834 <__swsetup_r>:
 800a834:	4b32      	ldr	r3, [pc, #200]	; (800a900 <__swsetup_r+0xcc>)
 800a836:	b570      	push	{r4, r5, r6, lr}
 800a838:	681d      	ldr	r5, [r3, #0]
 800a83a:	4606      	mov	r6, r0
 800a83c:	460c      	mov	r4, r1
 800a83e:	b125      	cbz	r5, 800a84a <__swsetup_r+0x16>
 800a840:	69ab      	ldr	r3, [r5, #24]
 800a842:	b913      	cbnz	r3, 800a84a <__swsetup_r+0x16>
 800a844:	4628      	mov	r0, r5
 800a846:	f000 ff97 	bl	800b778 <__sinit>
 800a84a:	4b2e      	ldr	r3, [pc, #184]	; (800a904 <__swsetup_r+0xd0>)
 800a84c:	429c      	cmp	r4, r3
 800a84e:	d10f      	bne.n	800a870 <__swsetup_r+0x3c>
 800a850:	686c      	ldr	r4, [r5, #4]
 800a852:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a856:	b29a      	uxth	r2, r3
 800a858:	0715      	lsls	r5, r2, #28
 800a85a:	d42c      	bmi.n	800a8b6 <__swsetup_r+0x82>
 800a85c:	06d0      	lsls	r0, r2, #27
 800a85e:	d411      	bmi.n	800a884 <__swsetup_r+0x50>
 800a860:	2209      	movs	r2, #9
 800a862:	6032      	str	r2, [r6, #0]
 800a864:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a868:	81a3      	strh	r3, [r4, #12]
 800a86a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a86e:	e03e      	b.n	800a8ee <__swsetup_r+0xba>
 800a870:	4b25      	ldr	r3, [pc, #148]	; (800a908 <__swsetup_r+0xd4>)
 800a872:	429c      	cmp	r4, r3
 800a874:	d101      	bne.n	800a87a <__swsetup_r+0x46>
 800a876:	68ac      	ldr	r4, [r5, #8]
 800a878:	e7eb      	b.n	800a852 <__swsetup_r+0x1e>
 800a87a:	4b24      	ldr	r3, [pc, #144]	; (800a90c <__swsetup_r+0xd8>)
 800a87c:	429c      	cmp	r4, r3
 800a87e:	bf08      	it	eq
 800a880:	68ec      	ldreq	r4, [r5, #12]
 800a882:	e7e6      	b.n	800a852 <__swsetup_r+0x1e>
 800a884:	0751      	lsls	r1, r2, #29
 800a886:	d512      	bpl.n	800a8ae <__swsetup_r+0x7a>
 800a888:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a88a:	b141      	cbz	r1, 800a89e <__swsetup_r+0x6a>
 800a88c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a890:	4299      	cmp	r1, r3
 800a892:	d002      	beq.n	800a89a <__swsetup_r+0x66>
 800a894:	4630      	mov	r0, r6
 800a896:	f001 fb67 	bl	800bf68 <_free_r>
 800a89a:	2300      	movs	r3, #0
 800a89c:	6363      	str	r3, [r4, #52]	; 0x34
 800a89e:	89a3      	ldrh	r3, [r4, #12]
 800a8a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a8a4:	81a3      	strh	r3, [r4, #12]
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	6063      	str	r3, [r4, #4]
 800a8aa:	6923      	ldr	r3, [r4, #16]
 800a8ac:	6023      	str	r3, [r4, #0]
 800a8ae:	89a3      	ldrh	r3, [r4, #12]
 800a8b0:	f043 0308 	orr.w	r3, r3, #8
 800a8b4:	81a3      	strh	r3, [r4, #12]
 800a8b6:	6923      	ldr	r3, [r4, #16]
 800a8b8:	b94b      	cbnz	r3, 800a8ce <__swsetup_r+0x9a>
 800a8ba:	89a3      	ldrh	r3, [r4, #12]
 800a8bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a8c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a8c4:	d003      	beq.n	800a8ce <__swsetup_r+0x9a>
 800a8c6:	4621      	mov	r1, r4
 800a8c8:	4630      	mov	r0, r6
 800a8ca:	f001 f811 	bl	800b8f0 <__smakebuf_r>
 800a8ce:	89a2      	ldrh	r2, [r4, #12]
 800a8d0:	f012 0301 	ands.w	r3, r2, #1
 800a8d4:	d00c      	beq.n	800a8f0 <__swsetup_r+0xbc>
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	60a3      	str	r3, [r4, #8]
 800a8da:	6963      	ldr	r3, [r4, #20]
 800a8dc:	425b      	negs	r3, r3
 800a8de:	61a3      	str	r3, [r4, #24]
 800a8e0:	6923      	ldr	r3, [r4, #16]
 800a8e2:	b953      	cbnz	r3, 800a8fa <__swsetup_r+0xc6>
 800a8e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8e8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800a8ec:	d1ba      	bne.n	800a864 <__swsetup_r+0x30>
 800a8ee:	bd70      	pop	{r4, r5, r6, pc}
 800a8f0:	0792      	lsls	r2, r2, #30
 800a8f2:	bf58      	it	pl
 800a8f4:	6963      	ldrpl	r3, [r4, #20]
 800a8f6:	60a3      	str	r3, [r4, #8]
 800a8f8:	e7f2      	b.n	800a8e0 <__swsetup_r+0xac>
 800a8fa:	2000      	movs	r0, #0
 800a8fc:	e7f7      	b.n	800a8ee <__swsetup_r+0xba>
 800a8fe:	bf00      	nop
 800a900:	20000010 	.word	0x20000010
 800a904:	0800d860 	.word	0x0800d860
 800a908:	0800d880 	.word	0x0800d880
 800a90c:	0800d840 	.word	0x0800d840

0800a910 <quorem>:
 800a910:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a914:	6903      	ldr	r3, [r0, #16]
 800a916:	690c      	ldr	r4, [r1, #16]
 800a918:	42a3      	cmp	r3, r4
 800a91a:	4680      	mov	r8, r0
 800a91c:	f2c0 8082 	blt.w	800aa24 <quorem+0x114>
 800a920:	3c01      	subs	r4, #1
 800a922:	f101 0714 	add.w	r7, r1, #20
 800a926:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800a92a:	f100 0614 	add.w	r6, r0, #20
 800a92e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800a932:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800a936:	eb06 030c 	add.w	r3, r6, ip
 800a93a:	3501      	adds	r5, #1
 800a93c:	eb07 090c 	add.w	r9, r7, ip
 800a940:	9301      	str	r3, [sp, #4]
 800a942:	fbb0 f5f5 	udiv	r5, r0, r5
 800a946:	b395      	cbz	r5, 800a9ae <quorem+0x9e>
 800a948:	f04f 0a00 	mov.w	sl, #0
 800a94c:	4638      	mov	r0, r7
 800a94e:	46b6      	mov	lr, r6
 800a950:	46d3      	mov	fp, sl
 800a952:	f850 2b04 	ldr.w	r2, [r0], #4
 800a956:	b293      	uxth	r3, r2
 800a958:	fb05 a303 	mla	r3, r5, r3, sl
 800a95c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a960:	b29b      	uxth	r3, r3
 800a962:	ebab 0303 	sub.w	r3, fp, r3
 800a966:	0c12      	lsrs	r2, r2, #16
 800a968:	f8de b000 	ldr.w	fp, [lr]
 800a96c:	fb05 a202 	mla	r2, r5, r2, sl
 800a970:	fa13 f38b 	uxtah	r3, r3, fp
 800a974:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800a978:	fa1f fb82 	uxth.w	fp, r2
 800a97c:	f8de 2000 	ldr.w	r2, [lr]
 800a980:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800a984:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a988:	b29b      	uxth	r3, r3
 800a98a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a98e:	4581      	cmp	r9, r0
 800a990:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800a994:	f84e 3b04 	str.w	r3, [lr], #4
 800a998:	d2db      	bcs.n	800a952 <quorem+0x42>
 800a99a:	f856 300c 	ldr.w	r3, [r6, ip]
 800a99e:	b933      	cbnz	r3, 800a9ae <quorem+0x9e>
 800a9a0:	9b01      	ldr	r3, [sp, #4]
 800a9a2:	3b04      	subs	r3, #4
 800a9a4:	429e      	cmp	r6, r3
 800a9a6:	461a      	mov	r2, r3
 800a9a8:	d330      	bcc.n	800aa0c <quorem+0xfc>
 800a9aa:	f8c8 4010 	str.w	r4, [r8, #16]
 800a9ae:	4640      	mov	r0, r8
 800a9b0:	f001 fa06 	bl	800bdc0 <__mcmp>
 800a9b4:	2800      	cmp	r0, #0
 800a9b6:	db25      	blt.n	800aa04 <quorem+0xf4>
 800a9b8:	3501      	adds	r5, #1
 800a9ba:	4630      	mov	r0, r6
 800a9bc:	f04f 0c00 	mov.w	ip, #0
 800a9c0:	f857 2b04 	ldr.w	r2, [r7], #4
 800a9c4:	f8d0 e000 	ldr.w	lr, [r0]
 800a9c8:	b293      	uxth	r3, r2
 800a9ca:	ebac 0303 	sub.w	r3, ip, r3
 800a9ce:	0c12      	lsrs	r2, r2, #16
 800a9d0:	fa13 f38e 	uxtah	r3, r3, lr
 800a9d4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a9d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a9dc:	b29b      	uxth	r3, r3
 800a9de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a9e2:	45b9      	cmp	r9, r7
 800a9e4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a9e8:	f840 3b04 	str.w	r3, [r0], #4
 800a9ec:	d2e8      	bcs.n	800a9c0 <quorem+0xb0>
 800a9ee:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800a9f2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800a9f6:	b92a      	cbnz	r2, 800aa04 <quorem+0xf4>
 800a9f8:	3b04      	subs	r3, #4
 800a9fa:	429e      	cmp	r6, r3
 800a9fc:	461a      	mov	r2, r3
 800a9fe:	d30b      	bcc.n	800aa18 <quorem+0x108>
 800aa00:	f8c8 4010 	str.w	r4, [r8, #16]
 800aa04:	4628      	mov	r0, r5
 800aa06:	b003      	add	sp, #12
 800aa08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa0c:	6812      	ldr	r2, [r2, #0]
 800aa0e:	3b04      	subs	r3, #4
 800aa10:	2a00      	cmp	r2, #0
 800aa12:	d1ca      	bne.n	800a9aa <quorem+0x9a>
 800aa14:	3c01      	subs	r4, #1
 800aa16:	e7c5      	b.n	800a9a4 <quorem+0x94>
 800aa18:	6812      	ldr	r2, [r2, #0]
 800aa1a:	3b04      	subs	r3, #4
 800aa1c:	2a00      	cmp	r2, #0
 800aa1e:	d1ef      	bne.n	800aa00 <quorem+0xf0>
 800aa20:	3c01      	subs	r4, #1
 800aa22:	e7ea      	b.n	800a9fa <quorem+0xea>
 800aa24:	2000      	movs	r0, #0
 800aa26:	e7ee      	b.n	800aa06 <quorem+0xf6>

0800aa28 <_dtoa_r>:
 800aa28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa2c:	ec57 6b10 	vmov	r6, r7, d0
 800aa30:	b097      	sub	sp, #92	; 0x5c
 800aa32:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800aa34:	9106      	str	r1, [sp, #24]
 800aa36:	4604      	mov	r4, r0
 800aa38:	920b      	str	r2, [sp, #44]	; 0x2c
 800aa3a:	9312      	str	r3, [sp, #72]	; 0x48
 800aa3c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800aa40:	e9cd 6700 	strd	r6, r7, [sp]
 800aa44:	b93d      	cbnz	r5, 800aa56 <_dtoa_r+0x2e>
 800aa46:	2010      	movs	r0, #16
 800aa48:	f000 ff92 	bl	800b970 <malloc>
 800aa4c:	6260      	str	r0, [r4, #36]	; 0x24
 800aa4e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800aa52:	6005      	str	r5, [r0, #0]
 800aa54:	60c5      	str	r5, [r0, #12]
 800aa56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa58:	6819      	ldr	r1, [r3, #0]
 800aa5a:	b151      	cbz	r1, 800aa72 <_dtoa_r+0x4a>
 800aa5c:	685a      	ldr	r2, [r3, #4]
 800aa5e:	604a      	str	r2, [r1, #4]
 800aa60:	2301      	movs	r3, #1
 800aa62:	4093      	lsls	r3, r2
 800aa64:	608b      	str	r3, [r1, #8]
 800aa66:	4620      	mov	r0, r4
 800aa68:	f000 ffc9 	bl	800b9fe <_Bfree>
 800aa6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa6e:	2200      	movs	r2, #0
 800aa70:	601a      	str	r2, [r3, #0]
 800aa72:	1e3b      	subs	r3, r7, #0
 800aa74:	bfbb      	ittet	lt
 800aa76:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800aa7a:	9301      	strlt	r3, [sp, #4]
 800aa7c:	2300      	movge	r3, #0
 800aa7e:	2201      	movlt	r2, #1
 800aa80:	bfac      	ite	ge
 800aa82:	f8c8 3000 	strge.w	r3, [r8]
 800aa86:	f8c8 2000 	strlt.w	r2, [r8]
 800aa8a:	4baf      	ldr	r3, [pc, #700]	; (800ad48 <_dtoa_r+0x320>)
 800aa8c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800aa90:	ea33 0308 	bics.w	r3, r3, r8
 800aa94:	d114      	bne.n	800aac0 <_dtoa_r+0x98>
 800aa96:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800aa98:	f242 730f 	movw	r3, #9999	; 0x270f
 800aa9c:	6013      	str	r3, [r2, #0]
 800aa9e:	9b00      	ldr	r3, [sp, #0]
 800aaa0:	b923      	cbnz	r3, 800aaac <_dtoa_r+0x84>
 800aaa2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800aaa6:	2800      	cmp	r0, #0
 800aaa8:	f000 8542 	beq.w	800b530 <_dtoa_r+0xb08>
 800aaac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aaae:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800ad5c <_dtoa_r+0x334>
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	f000 8544 	beq.w	800b540 <_dtoa_r+0xb18>
 800aab8:	f10b 0303 	add.w	r3, fp, #3
 800aabc:	f000 bd3e 	b.w	800b53c <_dtoa_r+0xb14>
 800aac0:	e9dd 6700 	ldrd	r6, r7, [sp]
 800aac4:	2200      	movs	r2, #0
 800aac6:	2300      	movs	r3, #0
 800aac8:	4630      	mov	r0, r6
 800aaca:	4639      	mov	r1, r7
 800aacc:	f7f5 fffc 	bl	8000ac8 <__aeabi_dcmpeq>
 800aad0:	4681      	mov	r9, r0
 800aad2:	b168      	cbz	r0, 800aaf0 <_dtoa_r+0xc8>
 800aad4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800aad6:	2301      	movs	r3, #1
 800aad8:	6013      	str	r3, [r2, #0]
 800aada:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aadc:	2b00      	cmp	r3, #0
 800aade:	f000 8524 	beq.w	800b52a <_dtoa_r+0xb02>
 800aae2:	4b9a      	ldr	r3, [pc, #616]	; (800ad4c <_dtoa_r+0x324>)
 800aae4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800aae6:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800aaea:	6013      	str	r3, [r2, #0]
 800aaec:	f000 bd28 	b.w	800b540 <_dtoa_r+0xb18>
 800aaf0:	aa14      	add	r2, sp, #80	; 0x50
 800aaf2:	a915      	add	r1, sp, #84	; 0x54
 800aaf4:	ec47 6b10 	vmov	d0, r6, r7
 800aaf8:	4620      	mov	r0, r4
 800aafa:	f001 f9d8 	bl	800beae <__d2b>
 800aafe:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800ab02:	9004      	str	r0, [sp, #16]
 800ab04:	2d00      	cmp	r5, #0
 800ab06:	d07c      	beq.n	800ac02 <_dtoa_r+0x1da>
 800ab08:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ab0c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800ab10:	46b2      	mov	sl, r6
 800ab12:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800ab16:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ab1a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800ab1e:	2200      	movs	r2, #0
 800ab20:	4b8b      	ldr	r3, [pc, #556]	; (800ad50 <_dtoa_r+0x328>)
 800ab22:	4650      	mov	r0, sl
 800ab24:	4659      	mov	r1, fp
 800ab26:	f7f5 fbaf 	bl	8000288 <__aeabi_dsub>
 800ab2a:	a381      	add	r3, pc, #516	; (adr r3, 800ad30 <_dtoa_r+0x308>)
 800ab2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab30:	f7f5 fd62 	bl	80005f8 <__aeabi_dmul>
 800ab34:	a380      	add	r3, pc, #512	; (adr r3, 800ad38 <_dtoa_r+0x310>)
 800ab36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab3a:	f7f5 fba7 	bl	800028c <__adddf3>
 800ab3e:	4606      	mov	r6, r0
 800ab40:	4628      	mov	r0, r5
 800ab42:	460f      	mov	r7, r1
 800ab44:	f7f5 fcee 	bl	8000524 <__aeabi_i2d>
 800ab48:	a37d      	add	r3, pc, #500	; (adr r3, 800ad40 <_dtoa_r+0x318>)
 800ab4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab4e:	f7f5 fd53 	bl	80005f8 <__aeabi_dmul>
 800ab52:	4602      	mov	r2, r0
 800ab54:	460b      	mov	r3, r1
 800ab56:	4630      	mov	r0, r6
 800ab58:	4639      	mov	r1, r7
 800ab5a:	f7f5 fb97 	bl	800028c <__adddf3>
 800ab5e:	4606      	mov	r6, r0
 800ab60:	460f      	mov	r7, r1
 800ab62:	f7f5 fff9 	bl	8000b58 <__aeabi_d2iz>
 800ab66:	2200      	movs	r2, #0
 800ab68:	4682      	mov	sl, r0
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	4630      	mov	r0, r6
 800ab6e:	4639      	mov	r1, r7
 800ab70:	f7f5 ffb4 	bl	8000adc <__aeabi_dcmplt>
 800ab74:	b148      	cbz	r0, 800ab8a <_dtoa_r+0x162>
 800ab76:	4650      	mov	r0, sl
 800ab78:	f7f5 fcd4 	bl	8000524 <__aeabi_i2d>
 800ab7c:	4632      	mov	r2, r6
 800ab7e:	463b      	mov	r3, r7
 800ab80:	f7f5 ffa2 	bl	8000ac8 <__aeabi_dcmpeq>
 800ab84:	b908      	cbnz	r0, 800ab8a <_dtoa_r+0x162>
 800ab86:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800ab8a:	f1ba 0f16 	cmp.w	sl, #22
 800ab8e:	d859      	bhi.n	800ac44 <_dtoa_r+0x21c>
 800ab90:	4970      	ldr	r1, [pc, #448]	; (800ad54 <_dtoa_r+0x32c>)
 800ab92:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800ab96:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab9e:	f7f5 ffbb 	bl	8000b18 <__aeabi_dcmpgt>
 800aba2:	2800      	cmp	r0, #0
 800aba4:	d050      	beq.n	800ac48 <_dtoa_r+0x220>
 800aba6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800abaa:	2300      	movs	r3, #0
 800abac:	930f      	str	r3, [sp, #60]	; 0x3c
 800abae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800abb0:	1b5d      	subs	r5, r3, r5
 800abb2:	f1b5 0801 	subs.w	r8, r5, #1
 800abb6:	bf49      	itett	mi
 800abb8:	f1c5 0301 	rsbmi	r3, r5, #1
 800abbc:	2300      	movpl	r3, #0
 800abbe:	9305      	strmi	r3, [sp, #20]
 800abc0:	f04f 0800 	movmi.w	r8, #0
 800abc4:	bf58      	it	pl
 800abc6:	9305      	strpl	r3, [sp, #20]
 800abc8:	f1ba 0f00 	cmp.w	sl, #0
 800abcc:	db3e      	blt.n	800ac4c <_dtoa_r+0x224>
 800abce:	2300      	movs	r3, #0
 800abd0:	44d0      	add	r8, sl
 800abd2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800abd6:	9307      	str	r3, [sp, #28]
 800abd8:	9b06      	ldr	r3, [sp, #24]
 800abda:	2b09      	cmp	r3, #9
 800abdc:	f200 8090 	bhi.w	800ad00 <_dtoa_r+0x2d8>
 800abe0:	2b05      	cmp	r3, #5
 800abe2:	bfc4      	itt	gt
 800abe4:	3b04      	subgt	r3, #4
 800abe6:	9306      	strgt	r3, [sp, #24]
 800abe8:	9b06      	ldr	r3, [sp, #24]
 800abea:	f1a3 0302 	sub.w	r3, r3, #2
 800abee:	bfcc      	ite	gt
 800abf0:	2500      	movgt	r5, #0
 800abf2:	2501      	movle	r5, #1
 800abf4:	2b03      	cmp	r3, #3
 800abf6:	f200 808f 	bhi.w	800ad18 <_dtoa_r+0x2f0>
 800abfa:	e8df f003 	tbb	[pc, r3]
 800abfe:	7f7d      	.short	0x7f7d
 800ac00:	7131      	.short	0x7131
 800ac02:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800ac06:	441d      	add	r5, r3
 800ac08:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800ac0c:	2820      	cmp	r0, #32
 800ac0e:	dd13      	ble.n	800ac38 <_dtoa_r+0x210>
 800ac10:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800ac14:	9b00      	ldr	r3, [sp, #0]
 800ac16:	fa08 f800 	lsl.w	r8, r8, r0
 800ac1a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800ac1e:	fa23 f000 	lsr.w	r0, r3, r0
 800ac22:	ea48 0000 	orr.w	r0, r8, r0
 800ac26:	f7f5 fc6d 	bl	8000504 <__aeabi_ui2d>
 800ac2a:	2301      	movs	r3, #1
 800ac2c:	4682      	mov	sl, r0
 800ac2e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800ac32:	3d01      	subs	r5, #1
 800ac34:	9313      	str	r3, [sp, #76]	; 0x4c
 800ac36:	e772      	b.n	800ab1e <_dtoa_r+0xf6>
 800ac38:	9b00      	ldr	r3, [sp, #0]
 800ac3a:	f1c0 0020 	rsb	r0, r0, #32
 800ac3e:	fa03 f000 	lsl.w	r0, r3, r0
 800ac42:	e7f0      	b.n	800ac26 <_dtoa_r+0x1fe>
 800ac44:	2301      	movs	r3, #1
 800ac46:	e7b1      	b.n	800abac <_dtoa_r+0x184>
 800ac48:	900f      	str	r0, [sp, #60]	; 0x3c
 800ac4a:	e7b0      	b.n	800abae <_dtoa_r+0x186>
 800ac4c:	9b05      	ldr	r3, [sp, #20]
 800ac4e:	eba3 030a 	sub.w	r3, r3, sl
 800ac52:	9305      	str	r3, [sp, #20]
 800ac54:	f1ca 0300 	rsb	r3, sl, #0
 800ac58:	9307      	str	r3, [sp, #28]
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	930e      	str	r3, [sp, #56]	; 0x38
 800ac5e:	e7bb      	b.n	800abd8 <_dtoa_r+0x1b0>
 800ac60:	2301      	movs	r3, #1
 800ac62:	930a      	str	r3, [sp, #40]	; 0x28
 800ac64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	dd59      	ble.n	800ad1e <_dtoa_r+0x2f6>
 800ac6a:	9302      	str	r3, [sp, #8]
 800ac6c:	4699      	mov	r9, r3
 800ac6e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ac70:	2200      	movs	r2, #0
 800ac72:	6072      	str	r2, [r6, #4]
 800ac74:	2204      	movs	r2, #4
 800ac76:	f102 0014 	add.w	r0, r2, #20
 800ac7a:	4298      	cmp	r0, r3
 800ac7c:	6871      	ldr	r1, [r6, #4]
 800ac7e:	d953      	bls.n	800ad28 <_dtoa_r+0x300>
 800ac80:	4620      	mov	r0, r4
 800ac82:	f000 fe88 	bl	800b996 <_Balloc>
 800ac86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ac88:	6030      	str	r0, [r6, #0]
 800ac8a:	f1b9 0f0e 	cmp.w	r9, #14
 800ac8e:	f8d3 b000 	ldr.w	fp, [r3]
 800ac92:	f200 80e6 	bhi.w	800ae62 <_dtoa_r+0x43a>
 800ac96:	2d00      	cmp	r5, #0
 800ac98:	f000 80e3 	beq.w	800ae62 <_dtoa_r+0x43a>
 800ac9c:	ed9d 7b00 	vldr	d7, [sp]
 800aca0:	f1ba 0f00 	cmp.w	sl, #0
 800aca4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800aca8:	dd74      	ble.n	800ad94 <_dtoa_r+0x36c>
 800acaa:	4a2a      	ldr	r2, [pc, #168]	; (800ad54 <_dtoa_r+0x32c>)
 800acac:	f00a 030f 	and.w	r3, sl, #15
 800acb0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800acb4:	ed93 7b00 	vldr	d7, [r3]
 800acb8:	ea4f 162a 	mov.w	r6, sl, asr #4
 800acbc:	06f0      	lsls	r0, r6, #27
 800acbe:	ed8d 7b08 	vstr	d7, [sp, #32]
 800acc2:	d565      	bpl.n	800ad90 <_dtoa_r+0x368>
 800acc4:	4b24      	ldr	r3, [pc, #144]	; (800ad58 <_dtoa_r+0x330>)
 800acc6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800acca:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800acce:	f7f5 fdbd 	bl	800084c <__aeabi_ddiv>
 800acd2:	e9cd 0100 	strd	r0, r1, [sp]
 800acd6:	f006 060f 	and.w	r6, r6, #15
 800acda:	2503      	movs	r5, #3
 800acdc:	4f1e      	ldr	r7, [pc, #120]	; (800ad58 <_dtoa_r+0x330>)
 800acde:	e04c      	b.n	800ad7a <_dtoa_r+0x352>
 800ace0:	2301      	movs	r3, #1
 800ace2:	930a      	str	r3, [sp, #40]	; 0x28
 800ace4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ace6:	4453      	add	r3, sl
 800ace8:	f103 0901 	add.w	r9, r3, #1
 800acec:	9302      	str	r3, [sp, #8]
 800acee:	464b      	mov	r3, r9
 800acf0:	2b01      	cmp	r3, #1
 800acf2:	bfb8      	it	lt
 800acf4:	2301      	movlt	r3, #1
 800acf6:	e7ba      	b.n	800ac6e <_dtoa_r+0x246>
 800acf8:	2300      	movs	r3, #0
 800acfa:	e7b2      	b.n	800ac62 <_dtoa_r+0x23a>
 800acfc:	2300      	movs	r3, #0
 800acfe:	e7f0      	b.n	800ace2 <_dtoa_r+0x2ba>
 800ad00:	2501      	movs	r5, #1
 800ad02:	2300      	movs	r3, #0
 800ad04:	9306      	str	r3, [sp, #24]
 800ad06:	950a      	str	r5, [sp, #40]	; 0x28
 800ad08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ad0c:	9302      	str	r3, [sp, #8]
 800ad0e:	4699      	mov	r9, r3
 800ad10:	2200      	movs	r2, #0
 800ad12:	2312      	movs	r3, #18
 800ad14:	920b      	str	r2, [sp, #44]	; 0x2c
 800ad16:	e7aa      	b.n	800ac6e <_dtoa_r+0x246>
 800ad18:	2301      	movs	r3, #1
 800ad1a:	930a      	str	r3, [sp, #40]	; 0x28
 800ad1c:	e7f4      	b.n	800ad08 <_dtoa_r+0x2e0>
 800ad1e:	2301      	movs	r3, #1
 800ad20:	9302      	str	r3, [sp, #8]
 800ad22:	4699      	mov	r9, r3
 800ad24:	461a      	mov	r2, r3
 800ad26:	e7f5      	b.n	800ad14 <_dtoa_r+0x2ec>
 800ad28:	3101      	adds	r1, #1
 800ad2a:	6071      	str	r1, [r6, #4]
 800ad2c:	0052      	lsls	r2, r2, #1
 800ad2e:	e7a2      	b.n	800ac76 <_dtoa_r+0x24e>
 800ad30:	636f4361 	.word	0x636f4361
 800ad34:	3fd287a7 	.word	0x3fd287a7
 800ad38:	8b60c8b3 	.word	0x8b60c8b3
 800ad3c:	3fc68a28 	.word	0x3fc68a28
 800ad40:	509f79fb 	.word	0x509f79fb
 800ad44:	3fd34413 	.word	0x3fd34413
 800ad48:	7ff00000 	.word	0x7ff00000
 800ad4c:	0800d80d 	.word	0x0800d80d
 800ad50:	3ff80000 	.word	0x3ff80000
 800ad54:	0800d8c8 	.word	0x0800d8c8
 800ad58:	0800d8a0 	.word	0x0800d8a0
 800ad5c:	0800d839 	.word	0x0800d839
 800ad60:	07f1      	lsls	r1, r6, #31
 800ad62:	d508      	bpl.n	800ad76 <_dtoa_r+0x34e>
 800ad64:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ad68:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad6c:	f7f5 fc44 	bl	80005f8 <__aeabi_dmul>
 800ad70:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ad74:	3501      	adds	r5, #1
 800ad76:	1076      	asrs	r6, r6, #1
 800ad78:	3708      	adds	r7, #8
 800ad7a:	2e00      	cmp	r6, #0
 800ad7c:	d1f0      	bne.n	800ad60 <_dtoa_r+0x338>
 800ad7e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ad82:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ad86:	f7f5 fd61 	bl	800084c <__aeabi_ddiv>
 800ad8a:	e9cd 0100 	strd	r0, r1, [sp]
 800ad8e:	e01a      	b.n	800adc6 <_dtoa_r+0x39e>
 800ad90:	2502      	movs	r5, #2
 800ad92:	e7a3      	b.n	800acdc <_dtoa_r+0x2b4>
 800ad94:	f000 80a0 	beq.w	800aed8 <_dtoa_r+0x4b0>
 800ad98:	f1ca 0600 	rsb	r6, sl, #0
 800ad9c:	4b9f      	ldr	r3, [pc, #636]	; (800b01c <_dtoa_r+0x5f4>)
 800ad9e:	4fa0      	ldr	r7, [pc, #640]	; (800b020 <_dtoa_r+0x5f8>)
 800ada0:	f006 020f 	and.w	r2, r6, #15
 800ada4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ada8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adac:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800adb0:	f7f5 fc22 	bl	80005f8 <__aeabi_dmul>
 800adb4:	e9cd 0100 	strd	r0, r1, [sp]
 800adb8:	1136      	asrs	r6, r6, #4
 800adba:	2300      	movs	r3, #0
 800adbc:	2502      	movs	r5, #2
 800adbe:	2e00      	cmp	r6, #0
 800adc0:	d17f      	bne.n	800aec2 <_dtoa_r+0x49a>
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d1e1      	bne.n	800ad8a <_dtoa_r+0x362>
 800adc6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800adc8:	2b00      	cmp	r3, #0
 800adca:	f000 8087 	beq.w	800aedc <_dtoa_r+0x4b4>
 800adce:	e9dd 6700 	ldrd	r6, r7, [sp]
 800add2:	2200      	movs	r2, #0
 800add4:	4b93      	ldr	r3, [pc, #588]	; (800b024 <_dtoa_r+0x5fc>)
 800add6:	4630      	mov	r0, r6
 800add8:	4639      	mov	r1, r7
 800adda:	f7f5 fe7f 	bl	8000adc <__aeabi_dcmplt>
 800adde:	2800      	cmp	r0, #0
 800ade0:	d07c      	beq.n	800aedc <_dtoa_r+0x4b4>
 800ade2:	f1b9 0f00 	cmp.w	r9, #0
 800ade6:	d079      	beq.n	800aedc <_dtoa_r+0x4b4>
 800ade8:	9b02      	ldr	r3, [sp, #8]
 800adea:	2b00      	cmp	r3, #0
 800adec:	dd35      	ble.n	800ae5a <_dtoa_r+0x432>
 800adee:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800adf2:	9308      	str	r3, [sp, #32]
 800adf4:	4639      	mov	r1, r7
 800adf6:	2200      	movs	r2, #0
 800adf8:	4b8b      	ldr	r3, [pc, #556]	; (800b028 <_dtoa_r+0x600>)
 800adfa:	4630      	mov	r0, r6
 800adfc:	f7f5 fbfc 	bl	80005f8 <__aeabi_dmul>
 800ae00:	e9cd 0100 	strd	r0, r1, [sp]
 800ae04:	9f02      	ldr	r7, [sp, #8]
 800ae06:	3501      	adds	r5, #1
 800ae08:	4628      	mov	r0, r5
 800ae0a:	f7f5 fb8b 	bl	8000524 <__aeabi_i2d>
 800ae0e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ae12:	f7f5 fbf1 	bl	80005f8 <__aeabi_dmul>
 800ae16:	2200      	movs	r2, #0
 800ae18:	4b84      	ldr	r3, [pc, #528]	; (800b02c <_dtoa_r+0x604>)
 800ae1a:	f7f5 fa37 	bl	800028c <__adddf3>
 800ae1e:	4605      	mov	r5, r0
 800ae20:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800ae24:	2f00      	cmp	r7, #0
 800ae26:	d15d      	bne.n	800aee4 <_dtoa_r+0x4bc>
 800ae28:	2200      	movs	r2, #0
 800ae2a:	4b81      	ldr	r3, [pc, #516]	; (800b030 <_dtoa_r+0x608>)
 800ae2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ae30:	f7f5 fa2a 	bl	8000288 <__aeabi_dsub>
 800ae34:	462a      	mov	r2, r5
 800ae36:	4633      	mov	r3, r6
 800ae38:	e9cd 0100 	strd	r0, r1, [sp]
 800ae3c:	f7f5 fe6c 	bl	8000b18 <__aeabi_dcmpgt>
 800ae40:	2800      	cmp	r0, #0
 800ae42:	f040 8288 	bne.w	800b356 <_dtoa_r+0x92e>
 800ae46:	462a      	mov	r2, r5
 800ae48:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800ae4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ae50:	f7f5 fe44 	bl	8000adc <__aeabi_dcmplt>
 800ae54:	2800      	cmp	r0, #0
 800ae56:	f040 827c 	bne.w	800b352 <_dtoa_r+0x92a>
 800ae5a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ae5e:	e9cd 2300 	strd	r2, r3, [sp]
 800ae62:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	f2c0 8150 	blt.w	800b10a <_dtoa_r+0x6e2>
 800ae6a:	f1ba 0f0e 	cmp.w	sl, #14
 800ae6e:	f300 814c 	bgt.w	800b10a <_dtoa_r+0x6e2>
 800ae72:	4b6a      	ldr	r3, [pc, #424]	; (800b01c <_dtoa_r+0x5f4>)
 800ae74:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ae78:	ed93 7b00 	vldr	d7, [r3]
 800ae7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ae84:	f280 80d8 	bge.w	800b038 <_dtoa_r+0x610>
 800ae88:	f1b9 0f00 	cmp.w	r9, #0
 800ae8c:	f300 80d4 	bgt.w	800b038 <_dtoa_r+0x610>
 800ae90:	f040 825e 	bne.w	800b350 <_dtoa_r+0x928>
 800ae94:	2200      	movs	r2, #0
 800ae96:	4b66      	ldr	r3, [pc, #408]	; (800b030 <_dtoa_r+0x608>)
 800ae98:	ec51 0b17 	vmov	r0, r1, d7
 800ae9c:	f7f5 fbac 	bl	80005f8 <__aeabi_dmul>
 800aea0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aea4:	f7f5 fe2e 	bl	8000b04 <__aeabi_dcmpge>
 800aea8:	464f      	mov	r7, r9
 800aeaa:	464e      	mov	r6, r9
 800aeac:	2800      	cmp	r0, #0
 800aeae:	f040 8234 	bne.w	800b31a <_dtoa_r+0x8f2>
 800aeb2:	2331      	movs	r3, #49	; 0x31
 800aeb4:	f10b 0501 	add.w	r5, fp, #1
 800aeb8:	f88b 3000 	strb.w	r3, [fp]
 800aebc:	f10a 0a01 	add.w	sl, sl, #1
 800aec0:	e22f      	b.n	800b322 <_dtoa_r+0x8fa>
 800aec2:	07f2      	lsls	r2, r6, #31
 800aec4:	d505      	bpl.n	800aed2 <_dtoa_r+0x4aa>
 800aec6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aeca:	f7f5 fb95 	bl	80005f8 <__aeabi_dmul>
 800aece:	3501      	adds	r5, #1
 800aed0:	2301      	movs	r3, #1
 800aed2:	1076      	asrs	r6, r6, #1
 800aed4:	3708      	adds	r7, #8
 800aed6:	e772      	b.n	800adbe <_dtoa_r+0x396>
 800aed8:	2502      	movs	r5, #2
 800aeda:	e774      	b.n	800adc6 <_dtoa_r+0x39e>
 800aedc:	f8cd a020 	str.w	sl, [sp, #32]
 800aee0:	464f      	mov	r7, r9
 800aee2:	e791      	b.n	800ae08 <_dtoa_r+0x3e0>
 800aee4:	4b4d      	ldr	r3, [pc, #308]	; (800b01c <_dtoa_r+0x5f4>)
 800aee6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800aeea:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800aeee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d047      	beq.n	800af84 <_dtoa_r+0x55c>
 800aef4:	4602      	mov	r2, r0
 800aef6:	460b      	mov	r3, r1
 800aef8:	2000      	movs	r0, #0
 800aefa:	494e      	ldr	r1, [pc, #312]	; (800b034 <_dtoa_r+0x60c>)
 800aefc:	f7f5 fca6 	bl	800084c <__aeabi_ddiv>
 800af00:	462a      	mov	r2, r5
 800af02:	4633      	mov	r3, r6
 800af04:	f7f5 f9c0 	bl	8000288 <__aeabi_dsub>
 800af08:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800af0c:	465d      	mov	r5, fp
 800af0e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800af12:	f7f5 fe21 	bl	8000b58 <__aeabi_d2iz>
 800af16:	4606      	mov	r6, r0
 800af18:	f7f5 fb04 	bl	8000524 <__aeabi_i2d>
 800af1c:	4602      	mov	r2, r0
 800af1e:	460b      	mov	r3, r1
 800af20:	e9dd 0100 	ldrd	r0, r1, [sp]
 800af24:	f7f5 f9b0 	bl	8000288 <__aeabi_dsub>
 800af28:	3630      	adds	r6, #48	; 0x30
 800af2a:	f805 6b01 	strb.w	r6, [r5], #1
 800af2e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800af32:	e9cd 0100 	strd	r0, r1, [sp]
 800af36:	f7f5 fdd1 	bl	8000adc <__aeabi_dcmplt>
 800af3a:	2800      	cmp	r0, #0
 800af3c:	d163      	bne.n	800b006 <_dtoa_r+0x5de>
 800af3e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800af42:	2000      	movs	r0, #0
 800af44:	4937      	ldr	r1, [pc, #220]	; (800b024 <_dtoa_r+0x5fc>)
 800af46:	f7f5 f99f 	bl	8000288 <__aeabi_dsub>
 800af4a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800af4e:	f7f5 fdc5 	bl	8000adc <__aeabi_dcmplt>
 800af52:	2800      	cmp	r0, #0
 800af54:	f040 80b7 	bne.w	800b0c6 <_dtoa_r+0x69e>
 800af58:	eba5 030b 	sub.w	r3, r5, fp
 800af5c:	429f      	cmp	r7, r3
 800af5e:	f77f af7c 	ble.w	800ae5a <_dtoa_r+0x432>
 800af62:	2200      	movs	r2, #0
 800af64:	4b30      	ldr	r3, [pc, #192]	; (800b028 <_dtoa_r+0x600>)
 800af66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800af6a:	f7f5 fb45 	bl	80005f8 <__aeabi_dmul>
 800af6e:	2200      	movs	r2, #0
 800af70:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800af74:	4b2c      	ldr	r3, [pc, #176]	; (800b028 <_dtoa_r+0x600>)
 800af76:	e9dd 0100 	ldrd	r0, r1, [sp]
 800af7a:	f7f5 fb3d 	bl	80005f8 <__aeabi_dmul>
 800af7e:	e9cd 0100 	strd	r0, r1, [sp]
 800af82:	e7c4      	b.n	800af0e <_dtoa_r+0x4e6>
 800af84:	462a      	mov	r2, r5
 800af86:	4633      	mov	r3, r6
 800af88:	f7f5 fb36 	bl	80005f8 <__aeabi_dmul>
 800af8c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800af90:	eb0b 0507 	add.w	r5, fp, r7
 800af94:	465e      	mov	r6, fp
 800af96:	e9dd 0100 	ldrd	r0, r1, [sp]
 800af9a:	f7f5 fddd 	bl	8000b58 <__aeabi_d2iz>
 800af9e:	4607      	mov	r7, r0
 800afa0:	f7f5 fac0 	bl	8000524 <__aeabi_i2d>
 800afa4:	3730      	adds	r7, #48	; 0x30
 800afa6:	4602      	mov	r2, r0
 800afa8:	460b      	mov	r3, r1
 800afaa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800afae:	f7f5 f96b 	bl	8000288 <__aeabi_dsub>
 800afb2:	f806 7b01 	strb.w	r7, [r6], #1
 800afb6:	42ae      	cmp	r6, r5
 800afb8:	e9cd 0100 	strd	r0, r1, [sp]
 800afbc:	f04f 0200 	mov.w	r2, #0
 800afc0:	d126      	bne.n	800b010 <_dtoa_r+0x5e8>
 800afc2:	4b1c      	ldr	r3, [pc, #112]	; (800b034 <_dtoa_r+0x60c>)
 800afc4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800afc8:	f7f5 f960 	bl	800028c <__adddf3>
 800afcc:	4602      	mov	r2, r0
 800afce:	460b      	mov	r3, r1
 800afd0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800afd4:	f7f5 fda0 	bl	8000b18 <__aeabi_dcmpgt>
 800afd8:	2800      	cmp	r0, #0
 800afda:	d174      	bne.n	800b0c6 <_dtoa_r+0x69e>
 800afdc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800afe0:	2000      	movs	r0, #0
 800afe2:	4914      	ldr	r1, [pc, #80]	; (800b034 <_dtoa_r+0x60c>)
 800afe4:	f7f5 f950 	bl	8000288 <__aeabi_dsub>
 800afe8:	4602      	mov	r2, r0
 800afea:	460b      	mov	r3, r1
 800afec:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aff0:	f7f5 fd74 	bl	8000adc <__aeabi_dcmplt>
 800aff4:	2800      	cmp	r0, #0
 800aff6:	f43f af30 	beq.w	800ae5a <_dtoa_r+0x432>
 800affa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800affe:	2b30      	cmp	r3, #48	; 0x30
 800b000:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800b004:	d002      	beq.n	800b00c <_dtoa_r+0x5e4>
 800b006:	f8dd a020 	ldr.w	sl, [sp, #32]
 800b00a:	e04a      	b.n	800b0a2 <_dtoa_r+0x67a>
 800b00c:	4615      	mov	r5, r2
 800b00e:	e7f4      	b.n	800affa <_dtoa_r+0x5d2>
 800b010:	4b05      	ldr	r3, [pc, #20]	; (800b028 <_dtoa_r+0x600>)
 800b012:	f7f5 faf1 	bl	80005f8 <__aeabi_dmul>
 800b016:	e9cd 0100 	strd	r0, r1, [sp]
 800b01a:	e7bc      	b.n	800af96 <_dtoa_r+0x56e>
 800b01c:	0800d8c8 	.word	0x0800d8c8
 800b020:	0800d8a0 	.word	0x0800d8a0
 800b024:	3ff00000 	.word	0x3ff00000
 800b028:	40240000 	.word	0x40240000
 800b02c:	401c0000 	.word	0x401c0000
 800b030:	40140000 	.word	0x40140000
 800b034:	3fe00000 	.word	0x3fe00000
 800b038:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b03c:	465d      	mov	r5, fp
 800b03e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b042:	4630      	mov	r0, r6
 800b044:	4639      	mov	r1, r7
 800b046:	f7f5 fc01 	bl	800084c <__aeabi_ddiv>
 800b04a:	f7f5 fd85 	bl	8000b58 <__aeabi_d2iz>
 800b04e:	4680      	mov	r8, r0
 800b050:	f7f5 fa68 	bl	8000524 <__aeabi_i2d>
 800b054:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b058:	f7f5 face 	bl	80005f8 <__aeabi_dmul>
 800b05c:	4602      	mov	r2, r0
 800b05e:	460b      	mov	r3, r1
 800b060:	4630      	mov	r0, r6
 800b062:	4639      	mov	r1, r7
 800b064:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800b068:	f7f5 f90e 	bl	8000288 <__aeabi_dsub>
 800b06c:	f805 6b01 	strb.w	r6, [r5], #1
 800b070:	eba5 060b 	sub.w	r6, r5, fp
 800b074:	45b1      	cmp	r9, r6
 800b076:	4602      	mov	r2, r0
 800b078:	460b      	mov	r3, r1
 800b07a:	d139      	bne.n	800b0f0 <_dtoa_r+0x6c8>
 800b07c:	f7f5 f906 	bl	800028c <__adddf3>
 800b080:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b084:	4606      	mov	r6, r0
 800b086:	460f      	mov	r7, r1
 800b088:	f7f5 fd46 	bl	8000b18 <__aeabi_dcmpgt>
 800b08c:	b9c8      	cbnz	r0, 800b0c2 <_dtoa_r+0x69a>
 800b08e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b092:	4630      	mov	r0, r6
 800b094:	4639      	mov	r1, r7
 800b096:	f7f5 fd17 	bl	8000ac8 <__aeabi_dcmpeq>
 800b09a:	b110      	cbz	r0, 800b0a2 <_dtoa_r+0x67a>
 800b09c:	f018 0f01 	tst.w	r8, #1
 800b0a0:	d10f      	bne.n	800b0c2 <_dtoa_r+0x69a>
 800b0a2:	9904      	ldr	r1, [sp, #16]
 800b0a4:	4620      	mov	r0, r4
 800b0a6:	f000 fcaa 	bl	800b9fe <_Bfree>
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b0ae:	702b      	strb	r3, [r5, #0]
 800b0b0:	f10a 0301 	add.w	r3, sl, #1
 800b0b4:	6013      	str	r3, [r2, #0]
 800b0b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	f000 8241 	beq.w	800b540 <_dtoa_r+0xb18>
 800b0be:	601d      	str	r5, [r3, #0]
 800b0c0:	e23e      	b.n	800b540 <_dtoa_r+0xb18>
 800b0c2:	f8cd a020 	str.w	sl, [sp, #32]
 800b0c6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b0ca:	2a39      	cmp	r2, #57	; 0x39
 800b0cc:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 800b0d0:	d108      	bne.n	800b0e4 <_dtoa_r+0x6bc>
 800b0d2:	459b      	cmp	fp, r3
 800b0d4:	d10a      	bne.n	800b0ec <_dtoa_r+0x6c4>
 800b0d6:	9b08      	ldr	r3, [sp, #32]
 800b0d8:	3301      	adds	r3, #1
 800b0da:	9308      	str	r3, [sp, #32]
 800b0dc:	2330      	movs	r3, #48	; 0x30
 800b0de:	f88b 3000 	strb.w	r3, [fp]
 800b0e2:	465b      	mov	r3, fp
 800b0e4:	781a      	ldrb	r2, [r3, #0]
 800b0e6:	3201      	adds	r2, #1
 800b0e8:	701a      	strb	r2, [r3, #0]
 800b0ea:	e78c      	b.n	800b006 <_dtoa_r+0x5de>
 800b0ec:	461d      	mov	r5, r3
 800b0ee:	e7ea      	b.n	800b0c6 <_dtoa_r+0x69e>
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	4b9b      	ldr	r3, [pc, #620]	; (800b360 <_dtoa_r+0x938>)
 800b0f4:	f7f5 fa80 	bl	80005f8 <__aeabi_dmul>
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	4606      	mov	r6, r0
 800b0fe:	460f      	mov	r7, r1
 800b100:	f7f5 fce2 	bl	8000ac8 <__aeabi_dcmpeq>
 800b104:	2800      	cmp	r0, #0
 800b106:	d09a      	beq.n	800b03e <_dtoa_r+0x616>
 800b108:	e7cb      	b.n	800b0a2 <_dtoa_r+0x67a>
 800b10a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b10c:	2a00      	cmp	r2, #0
 800b10e:	f000 808b 	beq.w	800b228 <_dtoa_r+0x800>
 800b112:	9a06      	ldr	r2, [sp, #24]
 800b114:	2a01      	cmp	r2, #1
 800b116:	dc6e      	bgt.n	800b1f6 <_dtoa_r+0x7ce>
 800b118:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b11a:	2a00      	cmp	r2, #0
 800b11c:	d067      	beq.n	800b1ee <_dtoa_r+0x7c6>
 800b11e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b122:	9f07      	ldr	r7, [sp, #28]
 800b124:	9d05      	ldr	r5, [sp, #20]
 800b126:	9a05      	ldr	r2, [sp, #20]
 800b128:	2101      	movs	r1, #1
 800b12a:	441a      	add	r2, r3
 800b12c:	4620      	mov	r0, r4
 800b12e:	9205      	str	r2, [sp, #20]
 800b130:	4498      	add	r8, r3
 800b132:	f000 fd04 	bl	800bb3e <__i2b>
 800b136:	4606      	mov	r6, r0
 800b138:	2d00      	cmp	r5, #0
 800b13a:	dd0c      	ble.n	800b156 <_dtoa_r+0x72e>
 800b13c:	f1b8 0f00 	cmp.w	r8, #0
 800b140:	dd09      	ble.n	800b156 <_dtoa_r+0x72e>
 800b142:	4545      	cmp	r5, r8
 800b144:	9a05      	ldr	r2, [sp, #20]
 800b146:	462b      	mov	r3, r5
 800b148:	bfa8      	it	ge
 800b14a:	4643      	movge	r3, r8
 800b14c:	1ad2      	subs	r2, r2, r3
 800b14e:	9205      	str	r2, [sp, #20]
 800b150:	1aed      	subs	r5, r5, r3
 800b152:	eba8 0803 	sub.w	r8, r8, r3
 800b156:	9b07      	ldr	r3, [sp, #28]
 800b158:	b1eb      	cbz	r3, 800b196 <_dtoa_r+0x76e>
 800b15a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d067      	beq.n	800b230 <_dtoa_r+0x808>
 800b160:	b18f      	cbz	r7, 800b186 <_dtoa_r+0x75e>
 800b162:	4631      	mov	r1, r6
 800b164:	463a      	mov	r2, r7
 800b166:	4620      	mov	r0, r4
 800b168:	f000 fd88 	bl	800bc7c <__pow5mult>
 800b16c:	9a04      	ldr	r2, [sp, #16]
 800b16e:	4601      	mov	r1, r0
 800b170:	4606      	mov	r6, r0
 800b172:	4620      	mov	r0, r4
 800b174:	f000 fcec 	bl	800bb50 <__multiply>
 800b178:	9904      	ldr	r1, [sp, #16]
 800b17a:	9008      	str	r0, [sp, #32]
 800b17c:	4620      	mov	r0, r4
 800b17e:	f000 fc3e 	bl	800b9fe <_Bfree>
 800b182:	9b08      	ldr	r3, [sp, #32]
 800b184:	9304      	str	r3, [sp, #16]
 800b186:	9b07      	ldr	r3, [sp, #28]
 800b188:	1bda      	subs	r2, r3, r7
 800b18a:	d004      	beq.n	800b196 <_dtoa_r+0x76e>
 800b18c:	9904      	ldr	r1, [sp, #16]
 800b18e:	4620      	mov	r0, r4
 800b190:	f000 fd74 	bl	800bc7c <__pow5mult>
 800b194:	9004      	str	r0, [sp, #16]
 800b196:	2101      	movs	r1, #1
 800b198:	4620      	mov	r0, r4
 800b19a:	f000 fcd0 	bl	800bb3e <__i2b>
 800b19e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b1a0:	4607      	mov	r7, r0
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	f000 81d0 	beq.w	800b548 <_dtoa_r+0xb20>
 800b1a8:	461a      	mov	r2, r3
 800b1aa:	4601      	mov	r1, r0
 800b1ac:	4620      	mov	r0, r4
 800b1ae:	f000 fd65 	bl	800bc7c <__pow5mult>
 800b1b2:	9b06      	ldr	r3, [sp, #24]
 800b1b4:	2b01      	cmp	r3, #1
 800b1b6:	4607      	mov	r7, r0
 800b1b8:	dc40      	bgt.n	800b23c <_dtoa_r+0x814>
 800b1ba:	9b00      	ldr	r3, [sp, #0]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d139      	bne.n	800b234 <_dtoa_r+0x80c>
 800b1c0:	9b01      	ldr	r3, [sp, #4]
 800b1c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d136      	bne.n	800b238 <_dtoa_r+0x810>
 800b1ca:	9b01      	ldr	r3, [sp, #4]
 800b1cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b1d0:	0d1b      	lsrs	r3, r3, #20
 800b1d2:	051b      	lsls	r3, r3, #20
 800b1d4:	b12b      	cbz	r3, 800b1e2 <_dtoa_r+0x7ba>
 800b1d6:	9b05      	ldr	r3, [sp, #20]
 800b1d8:	3301      	adds	r3, #1
 800b1da:	9305      	str	r3, [sp, #20]
 800b1dc:	f108 0801 	add.w	r8, r8, #1
 800b1e0:	2301      	movs	r3, #1
 800b1e2:	9307      	str	r3, [sp, #28]
 800b1e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d12a      	bne.n	800b240 <_dtoa_r+0x818>
 800b1ea:	2001      	movs	r0, #1
 800b1ec:	e030      	b.n	800b250 <_dtoa_r+0x828>
 800b1ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b1f0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b1f4:	e795      	b.n	800b122 <_dtoa_r+0x6fa>
 800b1f6:	9b07      	ldr	r3, [sp, #28]
 800b1f8:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 800b1fc:	42bb      	cmp	r3, r7
 800b1fe:	bfbf      	itttt	lt
 800b200:	9b07      	ldrlt	r3, [sp, #28]
 800b202:	9707      	strlt	r7, [sp, #28]
 800b204:	1afa      	sublt	r2, r7, r3
 800b206:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800b208:	bfbb      	ittet	lt
 800b20a:	189b      	addlt	r3, r3, r2
 800b20c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800b20e:	1bdf      	subge	r7, r3, r7
 800b210:	2700      	movlt	r7, #0
 800b212:	f1b9 0f00 	cmp.w	r9, #0
 800b216:	bfb5      	itete	lt
 800b218:	9b05      	ldrlt	r3, [sp, #20]
 800b21a:	9d05      	ldrge	r5, [sp, #20]
 800b21c:	eba3 0509 	sublt.w	r5, r3, r9
 800b220:	464b      	movge	r3, r9
 800b222:	bfb8      	it	lt
 800b224:	2300      	movlt	r3, #0
 800b226:	e77e      	b.n	800b126 <_dtoa_r+0x6fe>
 800b228:	9f07      	ldr	r7, [sp, #28]
 800b22a:	9d05      	ldr	r5, [sp, #20]
 800b22c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800b22e:	e783      	b.n	800b138 <_dtoa_r+0x710>
 800b230:	9a07      	ldr	r2, [sp, #28]
 800b232:	e7ab      	b.n	800b18c <_dtoa_r+0x764>
 800b234:	2300      	movs	r3, #0
 800b236:	e7d4      	b.n	800b1e2 <_dtoa_r+0x7ba>
 800b238:	9b00      	ldr	r3, [sp, #0]
 800b23a:	e7d2      	b.n	800b1e2 <_dtoa_r+0x7ba>
 800b23c:	2300      	movs	r3, #0
 800b23e:	9307      	str	r3, [sp, #28]
 800b240:	693b      	ldr	r3, [r7, #16]
 800b242:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800b246:	6918      	ldr	r0, [r3, #16]
 800b248:	f000 fc2b 	bl	800baa2 <__hi0bits>
 800b24c:	f1c0 0020 	rsb	r0, r0, #32
 800b250:	4440      	add	r0, r8
 800b252:	f010 001f 	ands.w	r0, r0, #31
 800b256:	d047      	beq.n	800b2e8 <_dtoa_r+0x8c0>
 800b258:	f1c0 0320 	rsb	r3, r0, #32
 800b25c:	2b04      	cmp	r3, #4
 800b25e:	dd3b      	ble.n	800b2d8 <_dtoa_r+0x8b0>
 800b260:	9b05      	ldr	r3, [sp, #20]
 800b262:	f1c0 001c 	rsb	r0, r0, #28
 800b266:	4403      	add	r3, r0
 800b268:	9305      	str	r3, [sp, #20]
 800b26a:	4405      	add	r5, r0
 800b26c:	4480      	add	r8, r0
 800b26e:	9b05      	ldr	r3, [sp, #20]
 800b270:	2b00      	cmp	r3, #0
 800b272:	dd05      	ble.n	800b280 <_dtoa_r+0x858>
 800b274:	461a      	mov	r2, r3
 800b276:	9904      	ldr	r1, [sp, #16]
 800b278:	4620      	mov	r0, r4
 800b27a:	f000 fd4d 	bl	800bd18 <__lshift>
 800b27e:	9004      	str	r0, [sp, #16]
 800b280:	f1b8 0f00 	cmp.w	r8, #0
 800b284:	dd05      	ble.n	800b292 <_dtoa_r+0x86a>
 800b286:	4639      	mov	r1, r7
 800b288:	4642      	mov	r2, r8
 800b28a:	4620      	mov	r0, r4
 800b28c:	f000 fd44 	bl	800bd18 <__lshift>
 800b290:	4607      	mov	r7, r0
 800b292:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b294:	b353      	cbz	r3, 800b2ec <_dtoa_r+0x8c4>
 800b296:	4639      	mov	r1, r7
 800b298:	9804      	ldr	r0, [sp, #16]
 800b29a:	f000 fd91 	bl	800bdc0 <__mcmp>
 800b29e:	2800      	cmp	r0, #0
 800b2a0:	da24      	bge.n	800b2ec <_dtoa_r+0x8c4>
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	220a      	movs	r2, #10
 800b2a6:	9904      	ldr	r1, [sp, #16]
 800b2a8:	4620      	mov	r0, r4
 800b2aa:	f000 fbbf 	bl	800ba2c <__multadd>
 800b2ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2b0:	9004      	str	r0, [sp, #16]
 800b2b2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	f000 814d 	beq.w	800b556 <_dtoa_r+0xb2e>
 800b2bc:	2300      	movs	r3, #0
 800b2be:	4631      	mov	r1, r6
 800b2c0:	220a      	movs	r2, #10
 800b2c2:	4620      	mov	r0, r4
 800b2c4:	f000 fbb2 	bl	800ba2c <__multadd>
 800b2c8:	9b02      	ldr	r3, [sp, #8]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	4606      	mov	r6, r0
 800b2ce:	dc4f      	bgt.n	800b370 <_dtoa_r+0x948>
 800b2d0:	9b06      	ldr	r3, [sp, #24]
 800b2d2:	2b02      	cmp	r3, #2
 800b2d4:	dd4c      	ble.n	800b370 <_dtoa_r+0x948>
 800b2d6:	e011      	b.n	800b2fc <_dtoa_r+0x8d4>
 800b2d8:	d0c9      	beq.n	800b26e <_dtoa_r+0x846>
 800b2da:	9a05      	ldr	r2, [sp, #20]
 800b2dc:	331c      	adds	r3, #28
 800b2de:	441a      	add	r2, r3
 800b2e0:	9205      	str	r2, [sp, #20]
 800b2e2:	441d      	add	r5, r3
 800b2e4:	4498      	add	r8, r3
 800b2e6:	e7c2      	b.n	800b26e <_dtoa_r+0x846>
 800b2e8:	4603      	mov	r3, r0
 800b2ea:	e7f6      	b.n	800b2da <_dtoa_r+0x8b2>
 800b2ec:	f1b9 0f00 	cmp.w	r9, #0
 800b2f0:	dc38      	bgt.n	800b364 <_dtoa_r+0x93c>
 800b2f2:	9b06      	ldr	r3, [sp, #24]
 800b2f4:	2b02      	cmp	r3, #2
 800b2f6:	dd35      	ble.n	800b364 <_dtoa_r+0x93c>
 800b2f8:	f8cd 9008 	str.w	r9, [sp, #8]
 800b2fc:	9b02      	ldr	r3, [sp, #8]
 800b2fe:	b963      	cbnz	r3, 800b31a <_dtoa_r+0x8f2>
 800b300:	4639      	mov	r1, r7
 800b302:	2205      	movs	r2, #5
 800b304:	4620      	mov	r0, r4
 800b306:	f000 fb91 	bl	800ba2c <__multadd>
 800b30a:	4601      	mov	r1, r0
 800b30c:	4607      	mov	r7, r0
 800b30e:	9804      	ldr	r0, [sp, #16]
 800b310:	f000 fd56 	bl	800bdc0 <__mcmp>
 800b314:	2800      	cmp	r0, #0
 800b316:	f73f adcc 	bgt.w	800aeb2 <_dtoa_r+0x48a>
 800b31a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b31c:	465d      	mov	r5, fp
 800b31e:	ea6f 0a03 	mvn.w	sl, r3
 800b322:	f04f 0900 	mov.w	r9, #0
 800b326:	4639      	mov	r1, r7
 800b328:	4620      	mov	r0, r4
 800b32a:	f000 fb68 	bl	800b9fe <_Bfree>
 800b32e:	2e00      	cmp	r6, #0
 800b330:	f43f aeb7 	beq.w	800b0a2 <_dtoa_r+0x67a>
 800b334:	f1b9 0f00 	cmp.w	r9, #0
 800b338:	d005      	beq.n	800b346 <_dtoa_r+0x91e>
 800b33a:	45b1      	cmp	r9, r6
 800b33c:	d003      	beq.n	800b346 <_dtoa_r+0x91e>
 800b33e:	4649      	mov	r1, r9
 800b340:	4620      	mov	r0, r4
 800b342:	f000 fb5c 	bl	800b9fe <_Bfree>
 800b346:	4631      	mov	r1, r6
 800b348:	4620      	mov	r0, r4
 800b34a:	f000 fb58 	bl	800b9fe <_Bfree>
 800b34e:	e6a8      	b.n	800b0a2 <_dtoa_r+0x67a>
 800b350:	2700      	movs	r7, #0
 800b352:	463e      	mov	r6, r7
 800b354:	e7e1      	b.n	800b31a <_dtoa_r+0x8f2>
 800b356:	f8dd a020 	ldr.w	sl, [sp, #32]
 800b35a:	463e      	mov	r6, r7
 800b35c:	e5a9      	b.n	800aeb2 <_dtoa_r+0x48a>
 800b35e:	bf00      	nop
 800b360:	40240000 	.word	0x40240000
 800b364:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b366:	f8cd 9008 	str.w	r9, [sp, #8]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	f000 80fa 	beq.w	800b564 <_dtoa_r+0xb3c>
 800b370:	2d00      	cmp	r5, #0
 800b372:	dd05      	ble.n	800b380 <_dtoa_r+0x958>
 800b374:	4631      	mov	r1, r6
 800b376:	462a      	mov	r2, r5
 800b378:	4620      	mov	r0, r4
 800b37a:	f000 fccd 	bl	800bd18 <__lshift>
 800b37e:	4606      	mov	r6, r0
 800b380:	9b07      	ldr	r3, [sp, #28]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d04c      	beq.n	800b420 <_dtoa_r+0x9f8>
 800b386:	6871      	ldr	r1, [r6, #4]
 800b388:	4620      	mov	r0, r4
 800b38a:	f000 fb04 	bl	800b996 <_Balloc>
 800b38e:	6932      	ldr	r2, [r6, #16]
 800b390:	3202      	adds	r2, #2
 800b392:	4605      	mov	r5, r0
 800b394:	0092      	lsls	r2, r2, #2
 800b396:	f106 010c 	add.w	r1, r6, #12
 800b39a:	300c      	adds	r0, #12
 800b39c:	f000 faf0 	bl	800b980 <memcpy>
 800b3a0:	2201      	movs	r2, #1
 800b3a2:	4629      	mov	r1, r5
 800b3a4:	4620      	mov	r0, r4
 800b3a6:	f000 fcb7 	bl	800bd18 <__lshift>
 800b3aa:	9b00      	ldr	r3, [sp, #0]
 800b3ac:	f8cd b014 	str.w	fp, [sp, #20]
 800b3b0:	f003 0301 	and.w	r3, r3, #1
 800b3b4:	46b1      	mov	r9, r6
 800b3b6:	9307      	str	r3, [sp, #28]
 800b3b8:	4606      	mov	r6, r0
 800b3ba:	4639      	mov	r1, r7
 800b3bc:	9804      	ldr	r0, [sp, #16]
 800b3be:	f7ff faa7 	bl	800a910 <quorem>
 800b3c2:	4649      	mov	r1, r9
 800b3c4:	4605      	mov	r5, r0
 800b3c6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800b3ca:	9804      	ldr	r0, [sp, #16]
 800b3cc:	f000 fcf8 	bl	800bdc0 <__mcmp>
 800b3d0:	4632      	mov	r2, r6
 800b3d2:	9000      	str	r0, [sp, #0]
 800b3d4:	4639      	mov	r1, r7
 800b3d6:	4620      	mov	r0, r4
 800b3d8:	f000 fd0c 	bl	800bdf4 <__mdiff>
 800b3dc:	68c3      	ldr	r3, [r0, #12]
 800b3de:	4602      	mov	r2, r0
 800b3e0:	bb03      	cbnz	r3, 800b424 <_dtoa_r+0x9fc>
 800b3e2:	4601      	mov	r1, r0
 800b3e4:	9008      	str	r0, [sp, #32]
 800b3e6:	9804      	ldr	r0, [sp, #16]
 800b3e8:	f000 fcea 	bl	800bdc0 <__mcmp>
 800b3ec:	9a08      	ldr	r2, [sp, #32]
 800b3ee:	4603      	mov	r3, r0
 800b3f0:	4611      	mov	r1, r2
 800b3f2:	4620      	mov	r0, r4
 800b3f4:	9308      	str	r3, [sp, #32]
 800b3f6:	f000 fb02 	bl	800b9fe <_Bfree>
 800b3fa:	9b08      	ldr	r3, [sp, #32]
 800b3fc:	b9a3      	cbnz	r3, 800b428 <_dtoa_r+0xa00>
 800b3fe:	9a06      	ldr	r2, [sp, #24]
 800b400:	b992      	cbnz	r2, 800b428 <_dtoa_r+0xa00>
 800b402:	9a07      	ldr	r2, [sp, #28]
 800b404:	b982      	cbnz	r2, 800b428 <_dtoa_r+0xa00>
 800b406:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b40a:	d029      	beq.n	800b460 <_dtoa_r+0xa38>
 800b40c:	9b00      	ldr	r3, [sp, #0]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	dd01      	ble.n	800b416 <_dtoa_r+0x9ee>
 800b412:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800b416:	9b05      	ldr	r3, [sp, #20]
 800b418:	1c5d      	adds	r5, r3, #1
 800b41a:	f883 8000 	strb.w	r8, [r3]
 800b41e:	e782      	b.n	800b326 <_dtoa_r+0x8fe>
 800b420:	4630      	mov	r0, r6
 800b422:	e7c2      	b.n	800b3aa <_dtoa_r+0x982>
 800b424:	2301      	movs	r3, #1
 800b426:	e7e3      	b.n	800b3f0 <_dtoa_r+0x9c8>
 800b428:	9a00      	ldr	r2, [sp, #0]
 800b42a:	2a00      	cmp	r2, #0
 800b42c:	db04      	blt.n	800b438 <_dtoa_r+0xa10>
 800b42e:	d125      	bne.n	800b47c <_dtoa_r+0xa54>
 800b430:	9a06      	ldr	r2, [sp, #24]
 800b432:	bb1a      	cbnz	r2, 800b47c <_dtoa_r+0xa54>
 800b434:	9a07      	ldr	r2, [sp, #28]
 800b436:	bb0a      	cbnz	r2, 800b47c <_dtoa_r+0xa54>
 800b438:	2b00      	cmp	r3, #0
 800b43a:	ddec      	ble.n	800b416 <_dtoa_r+0x9ee>
 800b43c:	2201      	movs	r2, #1
 800b43e:	9904      	ldr	r1, [sp, #16]
 800b440:	4620      	mov	r0, r4
 800b442:	f000 fc69 	bl	800bd18 <__lshift>
 800b446:	4639      	mov	r1, r7
 800b448:	9004      	str	r0, [sp, #16]
 800b44a:	f000 fcb9 	bl	800bdc0 <__mcmp>
 800b44e:	2800      	cmp	r0, #0
 800b450:	dc03      	bgt.n	800b45a <_dtoa_r+0xa32>
 800b452:	d1e0      	bne.n	800b416 <_dtoa_r+0x9ee>
 800b454:	f018 0f01 	tst.w	r8, #1
 800b458:	d0dd      	beq.n	800b416 <_dtoa_r+0x9ee>
 800b45a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b45e:	d1d8      	bne.n	800b412 <_dtoa_r+0x9ea>
 800b460:	9b05      	ldr	r3, [sp, #20]
 800b462:	9a05      	ldr	r2, [sp, #20]
 800b464:	1c5d      	adds	r5, r3, #1
 800b466:	2339      	movs	r3, #57	; 0x39
 800b468:	7013      	strb	r3, [r2, #0]
 800b46a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b46e:	2b39      	cmp	r3, #57	; 0x39
 800b470:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800b474:	d04f      	beq.n	800b516 <_dtoa_r+0xaee>
 800b476:	3301      	adds	r3, #1
 800b478:	7013      	strb	r3, [r2, #0]
 800b47a:	e754      	b.n	800b326 <_dtoa_r+0x8fe>
 800b47c:	9a05      	ldr	r2, [sp, #20]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	f102 0501 	add.w	r5, r2, #1
 800b484:	dd06      	ble.n	800b494 <_dtoa_r+0xa6c>
 800b486:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b48a:	d0e9      	beq.n	800b460 <_dtoa_r+0xa38>
 800b48c:	f108 0801 	add.w	r8, r8, #1
 800b490:	9b05      	ldr	r3, [sp, #20]
 800b492:	e7c2      	b.n	800b41a <_dtoa_r+0x9f2>
 800b494:	9a02      	ldr	r2, [sp, #8]
 800b496:	f805 8c01 	strb.w	r8, [r5, #-1]
 800b49a:	eba5 030b 	sub.w	r3, r5, fp
 800b49e:	4293      	cmp	r3, r2
 800b4a0:	d021      	beq.n	800b4e6 <_dtoa_r+0xabe>
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	220a      	movs	r2, #10
 800b4a6:	9904      	ldr	r1, [sp, #16]
 800b4a8:	4620      	mov	r0, r4
 800b4aa:	f000 fabf 	bl	800ba2c <__multadd>
 800b4ae:	45b1      	cmp	r9, r6
 800b4b0:	9004      	str	r0, [sp, #16]
 800b4b2:	f04f 0300 	mov.w	r3, #0
 800b4b6:	f04f 020a 	mov.w	r2, #10
 800b4ba:	4649      	mov	r1, r9
 800b4bc:	4620      	mov	r0, r4
 800b4be:	d105      	bne.n	800b4cc <_dtoa_r+0xaa4>
 800b4c0:	f000 fab4 	bl	800ba2c <__multadd>
 800b4c4:	4681      	mov	r9, r0
 800b4c6:	4606      	mov	r6, r0
 800b4c8:	9505      	str	r5, [sp, #20]
 800b4ca:	e776      	b.n	800b3ba <_dtoa_r+0x992>
 800b4cc:	f000 faae 	bl	800ba2c <__multadd>
 800b4d0:	4631      	mov	r1, r6
 800b4d2:	4681      	mov	r9, r0
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	220a      	movs	r2, #10
 800b4d8:	4620      	mov	r0, r4
 800b4da:	f000 faa7 	bl	800ba2c <__multadd>
 800b4de:	4606      	mov	r6, r0
 800b4e0:	e7f2      	b.n	800b4c8 <_dtoa_r+0xaa0>
 800b4e2:	f04f 0900 	mov.w	r9, #0
 800b4e6:	2201      	movs	r2, #1
 800b4e8:	9904      	ldr	r1, [sp, #16]
 800b4ea:	4620      	mov	r0, r4
 800b4ec:	f000 fc14 	bl	800bd18 <__lshift>
 800b4f0:	4639      	mov	r1, r7
 800b4f2:	9004      	str	r0, [sp, #16]
 800b4f4:	f000 fc64 	bl	800bdc0 <__mcmp>
 800b4f8:	2800      	cmp	r0, #0
 800b4fa:	dcb6      	bgt.n	800b46a <_dtoa_r+0xa42>
 800b4fc:	d102      	bne.n	800b504 <_dtoa_r+0xadc>
 800b4fe:	f018 0f01 	tst.w	r8, #1
 800b502:	d1b2      	bne.n	800b46a <_dtoa_r+0xa42>
 800b504:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b508:	2b30      	cmp	r3, #48	; 0x30
 800b50a:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800b50e:	f47f af0a 	bne.w	800b326 <_dtoa_r+0x8fe>
 800b512:	4615      	mov	r5, r2
 800b514:	e7f6      	b.n	800b504 <_dtoa_r+0xadc>
 800b516:	4593      	cmp	fp, r2
 800b518:	d105      	bne.n	800b526 <_dtoa_r+0xafe>
 800b51a:	2331      	movs	r3, #49	; 0x31
 800b51c:	f10a 0a01 	add.w	sl, sl, #1
 800b520:	f88b 3000 	strb.w	r3, [fp]
 800b524:	e6ff      	b.n	800b326 <_dtoa_r+0x8fe>
 800b526:	4615      	mov	r5, r2
 800b528:	e79f      	b.n	800b46a <_dtoa_r+0xa42>
 800b52a:	f8df b064 	ldr.w	fp, [pc, #100]	; 800b590 <_dtoa_r+0xb68>
 800b52e:	e007      	b.n	800b540 <_dtoa_r+0xb18>
 800b530:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b532:	f8df b060 	ldr.w	fp, [pc, #96]	; 800b594 <_dtoa_r+0xb6c>
 800b536:	b11b      	cbz	r3, 800b540 <_dtoa_r+0xb18>
 800b538:	f10b 0308 	add.w	r3, fp, #8
 800b53c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b53e:	6013      	str	r3, [r2, #0]
 800b540:	4658      	mov	r0, fp
 800b542:	b017      	add	sp, #92	; 0x5c
 800b544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b548:	9b06      	ldr	r3, [sp, #24]
 800b54a:	2b01      	cmp	r3, #1
 800b54c:	f77f ae35 	ble.w	800b1ba <_dtoa_r+0x792>
 800b550:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b552:	9307      	str	r3, [sp, #28]
 800b554:	e649      	b.n	800b1ea <_dtoa_r+0x7c2>
 800b556:	9b02      	ldr	r3, [sp, #8]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	dc03      	bgt.n	800b564 <_dtoa_r+0xb3c>
 800b55c:	9b06      	ldr	r3, [sp, #24]
 800b55e:	2b02      	cmp	r3, #2
 800b560:	f73f aecc 	bgt.w	800b2fc <_dtoa_r+0x8d4>
 800b564:	465d      	mov	r5, fp
 800b566:	4639      	mov	r1, r7
 800b568:	9804      	ldr	r0, [sp, #16]
 800b56a:	f7ff f9d1 	bl	800a910 <quorem>
 800b56e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800b572:	f805 8b01 	strb.w	r8, [r5], #1
 800b576:	9a02      	ldr	r2, [sp, #8]
 800b578:	eba5 030b 	sub.w	r3, r5, fp
 800b57c:	429a      	cmp	r2, r3
 800b57e:	ddb0      	ble.n	800b4e2 <_dtoa_r+0xaba>
 800b580:	2300      	movs	r3, #0
 800b582:	220a      	movs	r2, #10
 800b584:	9904      	ldr	r1, [sp, #16]
 800b586:	4620      	mov	r0, r4
 800b588:	f000 fa50 	bl	800ba2c <__multadd>
 800b58c:	9004      	str	r0, [sp, #16]
 800b58e:	e7ea      	b.n	800b566 <_dtoa_r+0xb3e>
 800b590:	0800d80c 	.word	0x0800d80c
 800b594:	0800d830 	.word	0x0800d830

0800b598 <__sflush_r>:
 800b598:	898a      	ldrh	r2, [r1, #12]
 800b59a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b59e:	4605      	mov	r5, r0
 800b5a0:	0710      	lsls	r0, r2, #28
 800b5a2:	460c      	mov	r4, r1
 800b5a4:	d458      	bmi.n	800b658 <__sflush_r+0xc0>
 800b5a6:	684b      	ldr	r3, [r1, #4]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	dc05      	bgt.n	800b5b8 <__sflush_r+0x20>
 800b5ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	dc02      	bgt.n	800b5b8 <__sflush_r+0x20>
 800b5b2:	2000      	movs	r0, #0
 800b5b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b5ba:	2e00      	cmp	r6, #0
 800b5bc:	d0f9      	beq.n	800b5b2 <__sflush_r+0x1a>
 800b5be:	2300      	movs	r3, #0
 800b5c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b5c4:	682f      	ldr	r7, [r5, #0]
 800b5c6:	6a21      	ldr	r1, [r4, #32]
 800b5c8:	602b      	str	r3, [r5, #0]
 800b5ca:	d032      	beq.n	800b632 <__sflush_r+0x9a>
 800b5cc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b5ce:	89a3      	ldrh	r3, [r4, #12]
 800b5d0:	075a      	lsls	r2, r3, #29
 800b5d2:	d505      	bpl.n	800b5e0 <__sflush_r+0x48>
 800b5d4:	6863      	ldr	r3, [r4, #4]
 800b5d6:	1ac0      	subs	r0, r0, r3
 800b5d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b5da:	b10b      	cbz	r3, 800b5e0 <__sflush_r+0x48>
 800b5dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b5de:	1ac0      	subs	r0, r0, r3
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	4602      	mov	r2, r0
 800b5e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b5e6:	6a21      	ldr	r1, [r4, #32]
 800b5e8:	4628      	mov	r0, r5
 800b5ea:	47b0      	blx	r6
 800b5ec:	1c43      	adds	r3, r0, #1
 800b5ee:	89a3      	ldrh	r3, [r4, #12]
 800b5f0:	d106      	bne.n	800b600 <__sflush_r+0x68>
 800b5f2:	6829      	ldr	r1, [r5, #0]
 800b5f4:	291d      	cmp	r1, #29
 800b5f6:	d848      	bhi.n	800b68a <__sflush_r+0xf2>
 800b5f8:	4a29      	ldr	r2, [pc, #164]	; (800b6a0 <__sflush_r+0x108>)
 800b5fa:	40ca      	lsrs	r2, r1
 800b5fc:	07d6      	lsls	r6, r2, #31
 800b5fe:	d544      	bpl.n	800b68a <__sflush_r+0xf2>
 800b600:	2200      	movs	r2, #0
 800b602:	6062      	str	r2, [r4, #4]
 800b604:	04d9      	lsls	r1, r3, #19
 800b606:	6922      	ldr	r2, [r4, #16]
 800b608:	6022      	str	r2, [r4, #0]
 800b60a:	d504      	bpl.n	800b616 <__sflush_r+0x7e>
 800b60c:	1c42      	adds	r2, r0, #1
 800b60e:	d101      	bne.n	800b614 <__sflush_r+0x7c>
 800b610:	682b      	ldr	r3, [r5, #0]
 800b612:	b903      	cbnz	r3, 800b616 <__sflush_r+0x7e>
 800b614:	6560      	str	r0, [r4, #84]	; 0x54
 800b616:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b618:	602f      	str	r7, [r5, #0]
 800b61a:	2900      	cmp	r1, #0
 800b61c:	d0c9      	beq.n	800b5b2 <__sflush_r+0x1a>
 800b61e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b622:	4299      	cmp	r1, r3
 800b624:	d002      	beq.n	800b62c <__sflush_r+0x94>
 800b626:	4628      	mov	r0, r5
 800b628:	f000 fc9e 	bl	800bf68 <_free_r>
 800b62c:	2000      	movs	r0, #0
 800b62e:	6360      	str	r0, [r4, #52]	; 0x34
 800b630:	e7c0      	b.n	800b5b4 <__sflush_r+0x1c>
 800b632:	2301      	movs	r3, #1
 800b634:	4628      	mov	r0, r5
 800b636:	47b0      	blx	r6
 800b638:	1c41      	adds	r1, r0, #1
 800b63a:	d1c8      	bne.n	800b5ce <__sflush_r+0x36>
 800b63c:	682b      	ldr	r3, [r5, #0]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d0c5      	beq.n	800b5ce <__sflush_r+0x36>
 800b642:	2b1d      	cmp	r3, #29
 800b644:	d001      	beq.n	800b64a <__sflush_r+0xb2>
 800b646:	2b16      	cmp	r3, #22
 800b648:	d101      	bne.n	800b64e <__sflush_r+0xb6>
 800b64a:	602f      	str	r7, [r5, #0]
 800b64c:	e7b1      	b.n	800b5b2 <__sflush_r+0x1a>
 800b64e:	89a3      	ldrh	r3, [r4, #12]
 800b650:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b654:	81a3      	strh	r3, [r4, #12]
 800b656:	e7ad      	b.n	800b5b4 <__sflush_r+0x1c>
 800b658:	690f      	ldr	r7, [r1, #16]
 800b65a:	2f00      	cmp	r7, #0
 800b65c:	d0a9      	beq.n	800b5b2 <__sflush_r+0x1a>
 800b65e:	0793      	lsls	r3, r2, #30
 800b660:	680e      	ldr	r6, [r1, #0]
 800b662:	bf08      	it	eq
 800b664:	694b      	ldreq	r3, [r1, #20]
 800b666:	600f      	str	r7, [r1, #0]
 800b668:	bf18      	it	ne
 800b66a:	2300      	movne	r3, #0
 800b66c:	eba6 0807 	sub.w	r8, r6, r7
 800b670:	608b      	str	r3, [r1, #8]
 800b672:	f1b8 0f00 	cmp.w	r8, #0
 800b676:	dd9c      	ble.n	800b5b2 <__sflush_r+0x1a>
 800b678:	4643      	mov	r3, r8
 800b67a:	463a      	mov	r2, r7
 800b67c:	6a21      	ldr	r1, [r4, #32]
 800b67e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b680:	4628      	mov	r0, r5
 800b682:	47b0      	blx	r6
 800b684:	2800      	cmp	r0, #0
 800b686:	dc06      	bgt.n	800b696 <__sflush_r+0xfe>
 800b688:	89a3      	ldrh	r3, [r4, #12]
 800b68a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b68e:	81a3      	strh	r3, [r4, #12]
 800b690:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b694:	e78e      	b.n	800b5b4 <__sflush_r+0x1c>
 800b696:	4407      	add	r7, r0
 800b698:	eba8 0800 	sub.w	r8, r8, r0
 800b69c:	e7e9      	b.n	800b672 <__sflush_r+0xda>
 800b69e:	bf00      	nop
 800b6a0:	20400001 	.word	0x20400001

0800b6a4 <_fflush_r>:
 800b6a4:	b538      	push	{r3, r4, r5, lr}
 800b6a6:	690b      	ldr	r3, [r1, #16]
 800b6a8:	4605      	mov	r5, r0
 800b6aa:	460c      	mov	r4, r1
 800b6ac:	b1db      	cbz	r3, 800b6e6 <_fflush_r+0x42>
 800b6ae:	b118      	cbz	r0, 800b6b8 <_fflush_r+0x14>
 800b6b0:	6983      	ldr	r3, [r0, #24]
 800b6b2:	b90b      	cbnz	r3, 800b6b8 <_fflush_r+0x14>
 800b6b4:	f000 f860 	bl	800b778 <__sinit>
 800b6b8:	4b0c      	ldr	r3, [pc, #48]	; (800b6ec <_fflush_r+0x48>)
 800b6ba:	429c      	cmp	r4, r3
 800b6bc:	d109      	bne.n	800b6d2 <_fflush_r+0x2e>
 800b6be:	686c      	ldr	r4, [r5, #4]
 800b6c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6c4:	b17b      	cbz	r3, 800b6e6 <_fflush_r+0x42>
 800b6c6:	4621      	mov	r1, r4
 800b6c8:	4628      	mov	r0, r5
 800b6ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b6ce:	f7ff bf63 	b.w	800b598 <__sflush_r>
 800b6d2:	4b07      	ldr	r3, [pc, #28]	; (800b6f0 <_fflush_r+0x4c>)
 800b6d4:	429c      	cmp	r4, r3
 800b6d6:	d101      	bne.n	800b6dc <_fflush_r+0x38>
 800b6d8:	68ac      	ldr	r4, [r5, #8]
 800b6da:	e7f1      	b.n	800b6c0 <_fflush_r+0x1c>
 800b6dc:	4b05      	ldr	r3, [pc, #20]	; (800b6f4 <_fflush_r+0x50>)
 800b6de:	429c      	cmp	r4, r3
 800b6e0:	bf08      	it	eq
 800b6e2:	68ec      	ldreq	r4, [r5, #12]
 800b6e4:	e7ec      	b.n	800b6c0 <_fflush_r+0x1c>
 800b6e6:	2000      	movs	r0, #0
 800b6e8:	bd38      	pop	{r3, r4, r5, pc}
 800b6ea:	bf00      	nop
 800b6ec:	0800d860 	.word	0x0800d860
 800b6f0:	0800d880 	.word	0x0800d880
 800b6f4:	0800d840 	.word	0x0800d840

0800b6f8 <std>:
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	b510      	push	{r4, lr}
 800b6fc:	4604      	mov	r4, r0
 800b6fe:	e9c0 3300 	strd	r3, r3, [r0]
 800b702:	6083      	str	r3, [r0, #8]
 800b704:	8181      	strh	r1, [r0, #12]
 800b706:	6643      	str	r3, [r0, #100]	; 0x64
 800b708:	81c2      	strh	r2, [r0, #14]
 800b70a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b70e:	6183      	str	r3, [r0, #24]
 800b710:	4619      	mov	r1, r3
 800b712:	2208      	movs	r2, #8
 800b714:	305c      	adds	r0, #92	; 0x5c
 800b716:	f7fe fb5b 	bl	8009dd0 <memset>
 800b71a:	4b05      	ldr	r3, [pc, #20]	; (800b730 <std+0x38>)
 800b71c:	6263      	str	r3, [r4, #36]	; 0x24
 800b71e:	4b05      	ldr	r3, [pc, #20]	; (800b734 <std+0x3c>)
 800b720:	62a3      	str	r3, [r4, #40]	; 0x28
 800b722:	4b05      	ldr	r3, [pc, #20]	; (800b738 <std+0x40>)
 800b724:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b726:	4b05      	ldr	r3, [pc, #20]	; (800b73c <std+0x44>)
 800b728:	6224      	str	r4, [r4, #32]
 800b72a:	6323      	str	r3, [r4, #48]	; 0x30
 800b72c:	bd10      	pop	{r4, pc}
 800b72e:	bf00      	nop
 800b730:	0800c359 	.word	0x0800c359
 800b734:	0800c37b 	.word	0x0800c37b
 800b738:	0800c3b3 	.word	0x0800c3b3
 800b73c:	0800c3d7 	.word	0x0800c3d7

0800b740 <_cleanup_r>:
 800b740:	4901      	ldr	r1, [pc, #4]	; (800b748 <_cleanup_r+0x8>)
 800b742:	f000 b885 	b.w	800b850 <_fwalk_reent>
 800b746:	bf00      	nop
 800b748:	0800b6a5 	.word	0x0800b6a5

0800b74c <__sfmoreglue>:
 800b74c:	b570      	push	{r4, r5, r6, lr}
 800b74e:	1e4a      	subs	r2, r1, #1
 800b750:	2568      	movs	r5, #104	; 0x68
 800b752:	4355      	muls	r5, r2
 800b754:	460e      	mov	r6, r1
 800b756:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b75a:	f000 fc53 	bl	800c004 <_malloc_r>
 800b75e:	4604      	mov	r4, r0
 800b760:	b140      	cbz	r0, 800b774 <__sfmoreglue+0x28>
 800b762:	2100      	movs	r1, #0
 800b764:	e9c0 1600 	strd	r1, r6, [r0]
 800b768:	300c      	adds	r0, #12
 800b76a:	60a0      	str	r0, [r4, #8]
 800b76c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b770:	f7fe fb2e 	bl	8009dd0 <memset>
 800b774:	4620      	mov	r0, r4
 800b776:	bd70      	pop	{r4, r5, r6, pc}

0800b778 <__sinit>:
 800b778:	6983      	ldr	r3, [r0, #24]
 800b77a:	b510      	push	{r4, lr}
 800b77c:	4604      	mov	r4, r0
 800b77e:	bb33      	cbnz	r3, 800b7ce <__sinit+0x56>
 800b780:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800b784:	6503      	str	r3, [r0, #80]	; 0x50
 800b786:	4b12      	ldr	r3, [pc, #72]	; (800b7d0 <__sinit+0x58>)
 800b788:	4a12      	ldr	r2, [pc, #72]	; (800b7d4 <__sinit+0x5c>)
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	6282      	str	r2, [r0, #40]	; 0x28
 800b78e:	4298      	cmp	r0, r3
 800b790:	bf04      	itt	eq
 800b792:	2301      	moveq	r3, #1
 800b794:	6183      	streq	r3, [r0, #24]
 800b796:	f000 f81f 	bl	800b7d8 <__sfp>
 800b79a:	6060      	str	r0, [r4, #4]
 800b79c:	4620      	mov	r0, r4
 800b79e:	f000 f81b 	bl	800b7d8 <__sfp>
 800b7a2:	60a0      	str	r0, [r4, #8]
 800b7a4:	4620      	mov	r0, r4
 800b7a6:	f000 f817 	bl	800b7d8 <__sfp>
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	60e0      	str	r0, [r4, #12]
 800b7ae:	2104      	movs	r1, #4
 800b7b0:	6860      	ldr	r0, [r4, #4]
 800b7b2:	f7ff ffa1 	bl	800b6f8 <std>
 800b7b6:	2201      	movs	r2, #1
 800b7b8:	2109      	movs	r1, #9
 800b7ba:	68a0      	ldr	r0, [r4, #8]
 800b7bc:	f7ff ff9c 	bl	800b6f8 <std>
 800b7c0:	2202      	movs	r2, #2
 800b7c2:	2112      	movs	r1, #18
 800b7c4:	68e0      	ldr	r0, [r4, #12]
 800b7c6:	f7ff ff97 	bl	800b6f8 <std>
 800b7ca:	2301      	movs	r3, #1
 800b7cc:	61a3      	str	r3, [r4, #24]
 800b7ce:	bd10      	pop	{r4, pc}
 800b7d0:	0800d7fc 	.word	0x0800d7fc
 800b7d4:	0800b741 	.word	0x0800b741

0800b7d8 <__sfp>:
 800b7d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7da:	4b1b      	ldr	r3, [pc, #108]	; (800b848 <__sfp+0x70>)
 800b7dc:	681e      	ldr	r6, [r3, #0]
 800b7de:	69b3      	ldr	r3, [r6, #24]
 800b7e0:	4607      	mov	r7, r0
 800b7e2:	b913      	cbnz	r3, 800b7ea <__sfp+0x12>
 800b7e4:	4630      	mov	r0, r6
 800b7e6:	f7ff ffc7 	bl	800b778 <__sinit>
 800b7ea:	3648      	adds	r6, #72	; 0x48
 800b7ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b7f0:	3b01      	subs	r3, #1
 800b7f2:	d503      	bpl.n	800b7fc <__sfp+0x24>
 800b7f4:	6833      	ldr	r3, [r6, #0]
 800b7f6:	b133      	cbz	r3, 800b806 <__sfp+0x2e>
 800b7f8:	6836      	ldr	r6, [r6, #0]
 800b7fa:	e7f7      	b.n	800b7ec <__sfp+0x14>
 800b7fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b800:	b16d      	cbz	r5, 800b81e <__sfp+0x46>
 800b802:	3468      	adds	r4, #104	; 0x68
 800b804:	e7f4      	b.n	800b7f0 <__sfp+0x18>
 800b806:	2104      	movs	r1, #4
 800b808:	4638      	mov	r0, r7
 800b80a:	f7ff ff9f 	bl	800b74c <__sfmoreglue>
 800b80e:	6030      	str	r0, [r6, #0]
 800b810:	2800      	cmp	r0, #0
 800b812:	d1f1      	bne.n	800b7f8 <__sfp+0x20>
 800b814:	230c      	movs	r3, #12
 800b816:	603b      	str	r3, [r7, #0]
 800b818:	4604      	mov	r4, r0
 800b81a:	4620      	mov	r0, r4
 800b81c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b81e:	4b0b      	ldr	r3, [pc, #44]	; (800b84c <__sfp+0x74>)
 800b820:	6665      	str	r5, [r4, #100]	; 0x64
 800b822:	e9c4 5500 	strd	r5, r5, [r4]
 800b826:	60a5      	str	r5, [r4, #8]
 800b828:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800b82c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800b830:	2208      	movs	r2, #8
 800b832:	4629      	mov	r1, r5
 800b834:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b838:	f7fe faca 	bl	8009dd0 <memset>
 800b83c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b840:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b844:	e7e9      	b.n	800b81a <__sfp+0x42>
 800b846:	bf00      	nop
 800b848:	0800d7fc 	.word	0x0800d7fc
 800b84c:	ffff0001 	.word	0xffff0001

0800b850 <_fwalk_reent>:
 800b850:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b854:	4680      	mov	r8, r0
 800b856:	4689      	mov	r9, r1
 800b858:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b85c:	2600      	movs	r6, #0
 800b85e:	b914      	cbnz	r4, 800b866 <_fwalk_reent+0x16>
 800b860:	4630      	mov	r0, r6
 800b862:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b866:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800b86a:	3f01      	subs	r7, #1
 800b86c:	d501      	bpl.n	800b872 <_fwalk_reent+0x22>
 800b86e:	6824      	ldr	r4, [r4, #0]
 800b870:	e7f5      	b.n	800b85e <_fwalk_reent+0xe>
 800b872:	89ab      	ldrh	r3, [r5, #12]
 800b874:	2b01      	cmp	r3, #1
 800b876:	d907      	bls.n	800b888 <_fwalk_reent+0x38>
 800b878:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b87c:	3301      	adds	r3, #1
 800b87e:	d003      	beq.n	800b888 <_fwalk_reent+0x38>
 800b880:	4629      	mov	r1, r5
 800b882:	4640      	mov	r0, r8
 800b884:	47c8      	blx	r9
 800b886:	4306      	orrs	r6, r0
 800b888:	3568      	adds	r5, #104	; 0x68
 800b88a:	e7ee      	b.n	800b86a <_fwalk_reent+0x1a>

0800b88c <_localeconv_r>:
 800b88c:	4b04      	ldr	r3, [pc, #16]	; (800b8a0 <_localeconv_r+0x14>)
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	6a18      	ldr	r0, [r3, #32]
 800b892:	4b04      	ldr	r3, [pc, #16]	; (800b8a4 <_localeconv_r+0x18>)
 800b894:	2800      	cmp	r0, #0
 800b896:	bf08      	it	eq
 800b898:	4618      	moveq	r0, r3
 800b89a:	30f0      	adds	r0, #240	; 0xf0
 800b89c:	4770      	bx	lr
 800b89e:	bf00      	nop
 800b8a0:	20000010 	.word	0x20000010
 800b8a4:	20000074 	.word	0x20000074

0800b8a8 <__swhatbuf_r>:
 800b8a8:	b570      	push	{r4, r5, r6, lr}
 800b8aa:	460e      	mov	r6, r1
 800b8ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8b0:	2900      	cmp	r1, #0
 800b8b2:	b096      	sub	sp, #88	; 0x58
 800b8b4:	4614      	mov	r4, r2
 800b8b6:	461d      	mov	r5, r3
 800b8b8:	da07      	bge.n	800b8ca <__swhatbuf_r+0x22>
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	602b      	str	r3, [r5, #0]
 800b8be:	89b3      	ldrh	r3, [r6, #12]
 800b8c0:	061a      	lsls	r2, r3, #24
 800b8c2:	d410      	bmi.n	800b8e6 <__swhatbuf_r+0x3e>
 800b8c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b8c8:	e00e      	b.n	800b8e8 <__swhatbuf_r+0x40>
 800b8ca:	466a      	mov	r2, sp
 800b8cc:	f000 fdaa 	bl	800c424 <_fstat_r>
 800b8d0:	2800      	cmp	r0, #0
 800b8d2:	dbf2      	blt.n	800b8ba <__swhatbuf_r+0x12>
 800b8d4:	9a01      	ldr	r2, [sp, #4]
 800b8d6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b8da:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b8de:	425a      	negs	r2, r3
 800b8e0:	415a      	adcs	r2, r3
 800b8e2:	602a      	str	r2, [r5, #0]
 800b8e4:	e7ee      	b.n	800b8c4 <__swhatbuf_r+0x1c>
 800b8e6:	2340      	movs	r3, #64	; 0x40
 800b8e8:	2000      	movs	r0, #0
 800b8ea:	6023      	str	r3, [r4, #0]
 800b8ec:	b016      	add	sp, #88	; 0x58
 800b8ee:	bd70      	pop	{r4, r5, r6, pc}

0800b8f0 <__smakebuf_r>:
 800b8f0:	898b      	ldrh	r3, [r1, #12]
 800b8f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b8f4:	079d      	lsls	r5, r3, #30
 800b8f6:	4606      	mov	r6, r0
 800b8f8:	460c      	mov	r4, r1
 800b8fa:	d507      	bpl.n	800b90c <__smakebuf_r+0x1c>
 800b8fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b900:	6023      	str	r3, [r4, #0]
 800b902:	6123      	str	r3, [r4, #16]
 800b904:	2301      	movs	r3, #1
 800b906:	6163      	str	r3, [r4, #20]
 800b908:	b002      	add	sp, #8
 800b90a:	bd70      	pop	{r4, r5, r6, pc}
 800b90c:	ab01      	add	r3, sp, #4
 800b90e:	466a      	mov	r2, sp
 800b910:	f7ff ffca 	bl	800b8a8 <__swhatbuf_r>
 800b914:	9900      	ldr	r1, [sp, #0]
 800b916:	4605      	mov	r5, r0
 800b918:	4630      	mov	r0, r6
 800b91a:	f000 fb73 	bl	800c004 <_malloc_r>
 800b91e:	b948      	cbnz	r0, 800b934 <__smakebuf_r+0x44>
 800b920:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b924:	059a      	lsls	r2, r3, #22
 800b926:	d4ef      	bmi.n	800b908 <__smakebuf_r+0x18>
 800b928:	f023 0303 	bic.w	r3, r3, #3
 800b92c:	f043 0302 	orr.w	r3, r3, #2
 800b930:	81a3      	strh	r3, [r4, #12]
 800b932:	e7e3      	b.n	800b8fc <__smakebuf_r+0xc>
 800b934:	4b0d      	ldr	r3, [pc, #52]	; (800b96c <__smakebuf_r+0x7c>)
 800b936:	62b3      	str	r3, [r6, #40]	; 0x28
 800b938:	89a3      	ldrh	r3, [r4, #12]
 800b93a:	6020      	str	r0, [r4, #0]
 800b93c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b940:	81a3      	strh	r3, [r4, #12]
 800b942:	9b00      	ldr	r3, [sp, #0]
 800b944:	6163      	str	r3, [r4, #20]
 800b946:	9b01      	ldr	r3, [sp, #4]
 800b948:	6120      	str	r0, [r4, #16]
 800b94a:	b15b      	cbz	r3, 800b964 <__smakebuf_r+0x74>
 800b94c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b950:	4630      	mov	r0, r6
 800b952:	f000 fd79 	bl	800c448 <_isatty_r>
 800b956:	b128      	cbz	r0, 800b964 <__smakebuf_r+0x74>
 800b958:	89a3      	ldrh	r3, [r4, #12]
 800b95a:	f023 0303 	bic.w	r3, r3, #3
 800b95e:	f043 0301 	orr.w	r3, r3, #1
 800b962:	81a3      	strh	r3, [r4, #12]
 800b964:	89a3      	ldrh	r3, [r4, #12]
 800b966:	431d      	orrs	r5, r3
 800b968:	81a5      	strh	r5, [r4, #12]
 800b96a:	e7cd      	b.n	800b908 <__smakebuf_r+0x18>
 800b96c:	0800b741 	.word	0x0800b741

0800b970 <malloc>:
 800b970:	4b02      	ldr	r3, [pc, #8]	; (800b97c <malloc+0xc>)
 800b972:	4601      	mov	r1, r0
 800b974:	6818      	ldr	r0, [r3, #0]
 800b976:	f000 bb45 	b.w	800c004 <_malloc_r>
 800b97a:	bf00      	nop
 800b97c:	20000010 	.word	0x20000010

0800b980 <memcpy>:
 800b980:	b510      	push	{r4, lr}
 800b982:	1e43      	subs	r3, r0, #1
 800b984:	440a      	add	r2, r1
 800b986:	4291      	cmp	r1, r2
 800b988:	d100      	bne.n	800b98c <memcpy+0xc>
 800b98a:	bd10      	pop	{r4, pc}
 800b98c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b990:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b994:	e7f7      	b.n	800b986 <memcpy+0x6>

0800b996 <_Balloc>:
 800b996:	b570      	push	{r4, r5, r6, lr}
 800b998:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b99a:	4604      	mov	r4, r0
 800b99c:	460e      	mov	r6, r1
 800b99e:	b93d      	cbnz	r5, 800b9b0 <_Balloc+0x1a>
 800b9a0:	2010      	movs	r0, #16
 800b9a2:	f7ff ffe5 	bl	800b970 <malloc>
 800b9a6:	6260      	str	r0, [r4, #36]	; 0x24
 800b9a8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b9ac:	6005      	str	r5, [r0, #0]
 800b9ae:	60c5      	str	r5, [r0, #12]
 800b9b0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800b9b2:	68eb      	ldr	r3, [r5, #12]
 800b9b4:	b183      	cbz	r3, 800b9d8 <_Balloc+0x42>
 800b9b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b9b8:	68db      	ldr	r3, [r3, #12]
 800b9ba:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b9be:	b9b8      	cbnz	r0, 800b9f0 <_Balloc+0x5a>
 800b9c0:	2101      	movs	r1, #1
 800b9c2:	fa01 f506 	lsl.w	r5, r1, r6
 800b9c6:	1d6a      	adds	r2, r5, #5
 800b9c8:	0092      	lsls	r2, r2, #2
 800b9ca:	4620      	mov	r0, r4
 800b9cc:	f000 fabe 	bl	800bf4c <_calloc_r>
 800b9d0:	b160      	cbz	r0, 800b9ec <_Balloc+0x56>
 800b9d2:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800b9d6:	e00e      	b.n	800b9f6 <_Balloc+0x60>
 800b9d8:	2221      	movs	r2, #33	; 0x21
 800b9da:	2104      	movs	r1, #4
 800b9dc:	4620      	mov	r0, r4
 800b9de:	f000 fab5 	bl	800bf4c <_calloc_r>
 800b9e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b9e4:	60e8      	str	r0, [r5, #12]
 800b9e6:	68db      	ldr	r3, [r3, #12]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d1e4      	bne.n	800b9b6 <_Balloc+0x20>
 800b9ec:	2000      	movs	r0, #0
 800b9ee:	bd70      	pop	{r4, r5, r6, pc}
 800b9f0:	6802      	ldr	r2, [r0, #0]
 800b9f2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b9fc:	e7f7      	b.n	800b9ee <_Balloc+0x58>

0800b9fe <_Bfree>:
 800b9fe:	b570      	push	{r4, r5, r6, lr}
 800ba00:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800ba02:	4606      	mov	r6, r0
 800ba04:	460d      	mov	r5, r1
 800ba06:	b93c      	cbnz	r4, 800ba18 <_Bfree+0x1a>
 800ba08:	2010      	movs	r0, #16
 800ba0a:	f7ff ffb1 	bl	800b970 <malloc>
 800ba0e:	6270      	str	r0, [r6, #36]	; 0x24
 800ba10:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ba14:	6004      	str	r4, [r0, #0]
 800ba16:	60c4      	str	r4, [r0, #12]
 800ba18:	b13d      	cbz	r5, 800ba2a <_Bfree+0x2c>
 800ba1a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ba1c:	686a      	ldr	r2, [r5, #4]
 800ba1e:	68db      	ldr	r3, [r3, #12]
 800ba20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ba24:	6029      	str	r1, [r5, #0]
 800ba26:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800ba2a:	bd70      	pop	{r4, r5, r6, pc}

0800ba2c <__multadd>:
 800ba2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba30:	690d      	ldr	r5, [r1, #16]
 800ba32:	461f      	mov	r7, r3
 800ba34:	4606      	mov	r6, r0
 800ba36:	460c      	mov	r4, r1
 800ba38:	f101 0c14 	add.w	ip, r1, #20
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	f8dc 0000 	ldr.w	r0, [ip]
 800ba42:	b281      	uxth	r1, r0
 800ba44:	fb02 7101 	mla	r1, r2, r1, r7
 800ba48:	0c0f      	lsrs	r7, r1, #16
 800ba4a:	0c00      	lsrs	r0, r0, #16
 800ba4c:	fb02 7000 	mla	r0, r2, r0, r7
 800ba50:	b289      	uxth	r1, r1
 800ba52:	3301      	adds	r3, #1
 800ba54:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800ba58:	429d      	cmp	r5, r3
 800ba5a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800ba5e:	f84c 1b04 	str.w	r1, [ip], #4
 800ba62:	dcec      	bgt.n	800ba3e <__multadd+0x12>
 800ba64:	b1d7      	cbz	r7, 800ba9c <__multadd+0x70>
 800ba66:	68a3      	ldr	r3, [r4, #8]
 800ba68:	42ab      	cmp	r3, r5
 800ba6a:	dc12      	bgt.n	800ba92 <__multadd+0x66>
 800ba6c:	6861      	ldr	r1, [r4, #4]
 800ba6e:	4630      	mov	r0, r6
 800ba70:	3101      	adds	r1, #1
 800ba72:	f7ff ff90 	bl	800b996 <_Balloc>
 800ba76:	6922      	ldr	r2, [r4, #16]
 800ba78:	3202      	adds	r2, #2
 800ba7a:	f104 010c 	add.w	r1, r4, #12
 800ba7e:	4680      	mov	r8, r0
 800ba80:	0092      	lsls	r2, r2, #2
 800ba82:	300c      	adds	r0, #12
 800ba84:	f7ff ff7c 	bl	800b980 <memcpy>
 800ba88:	4621      	mov	r1, r4
 800ba8a:	4630      	mov	r0, r6
 800ba8c:	f7ff ffb7 	bl	800b9fe <_Bfree>
 800ba90:	4644      	mov	r4, r8
 800ba92:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ba96:	3501      	adds	r5, #1
 800ba98:	615f      	str	r7, [r3, #20]
 800ba9a:	6125      	str	r5, [r4, #16]
 800ba9c:	4620      	mov	r0, r4
 800ba9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800baa2 <__hi0bits>:
 800baa2:	0c02      	lsrs	r2, r0, #16
 800baa4:	0412      	lsls	r2, r2, #16
 800baa6:	4603      	mov	r3, r0
 800baa8:	b9b2      	cbnz	r2, 800bad8 <__hi0bits+0x36>
 800baaa:	0403      	lsls	r3, r0, #16
 800baac:	2010      	movs	r0, #16
 800baae:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800bab2:	bf04      	itt	eq
 800bab4:	021b      	lsleq	r3, r3, #8
 800bab6:	3008      	addeq	r0, #8
 800bab8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800babc:	bf04      	itt	eq
 800babe:	011b      	lsleq	r3, r3, #4
 800bac0:	3004      	addeq	r0, #4
 800bac2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800bac6:	bf04      	itt	eq
 800bac8:	009b      	lsleq	r3, r3, #2
 800baca:	3002      	addeq	r0, #2
 800bacc:	2b00      	cmp	r3, #0
 800bace:	db06      	blt.n	800bade <__hi0bits+0x3c>
 800bad0:	005b      	lsls	r3, r3, #1
 800bad2:	d503      	bpl.n	800badc <__hi0bits+0x3a>
 800bad4:	3001      	adds	r0, #1
 800bad6:	4770      	bx	lr
 800bad8:	2000      	movs	r0, #0
 800bada:	e7e8      	b.n	800baae <__hi0bits+0xc>
 800badc:	2020      	movs	r0, #32
 800bade:	4770      	bx	lr

0800bae0 <__lo0bits>:
 800bae0:	6803      	ldr	r3, [r0, #0]
 800bae2:	f013 0207 	ands.w	r2, r3, #7
 800bae6:	4601      	mov	r1, r0
 800bae8:	d00b      	beq.n	800bb02 <__lo0bits+0x22>
 800baea:	07da      	lsls	r2, r3, #31
 800baec:	d423      	bmi.n	800bb36 <__lo0bits+0x56>
 800baee:	0798      	lsls	r0, r3, #30
 800baf0:	bf49      	itett	mi
 800baf2:	085b      	lsrmi	r3, r3, #1
 800baf4:	089b      	lsrpl	r3, r3, #2
 800baf6:	2001      	movmi	r0, #1
 800baf8:	600b      	strmi	r3, [r1, #0]
 800bafa:	bf5c      	itt	pl
 800bafc:	600b      	strpl	r3, [r1, #0]
 800bafe:	2002      	movpl	r0, #2
 800bb00:	4770      	bx	lr
 800bb02:	b298      	uxth	r0, r3
 800bb04:	b9a8      	cbnz	r0, 800bb32 <__lo0bits+0x52>
 800bb06:	0c1b      	lsrs	r3, r3, #16
 800bb08:	2010      	movs	r0, #16
 800bb0a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800bb0e:	bf04      	itt	eq
 800bb10:	0a1b      	lsreq	r3, r3, #8
 800bb12:	3008      	addeq	r0, #8
 800bb14:	071a      	lsls	r2, r3, #28
 800bb16:	bf04      	itt	eq
 800bb18:	091b      	lsreq	r3, r3, #4
 800bb1a:	3004      	addeq	r0, #4
 800bb1c:	079a      	lsls	r2, r3, #30
 800bb1e:	bf04      	itt	eq
 800bb20:	089b      	lsreq	r3, r3, #2
 800bb22:	3002      	addeq	r0, #2
 800bb24:	07da      	lsls	r2, r3, #31
 800bb26:	d402      	bmi.n	800bb2e <__lo0bits+0x4e>
 800bb28:	085b      	lsrs	r3, r3, #1
 800bb2a:	d006      	beq.n	800bb3a <__lo0bits+0x5a>
 800bb2c:	3001      	adds	r0, #1
 800bb2e:	600b      	str	r3, [r1, #0]
 800bb30:	4770      	bx	lr
 800bb32:	4610      	mov	r0, r2
 800bb34:	e7e9      	b.n	800bb0a <__lo0bits+0x2a>
 800bb36:	2000      	movs	r0, #0
 800bb38:	4770      	bx	lr
 800bb3a:	2020      	movs	r0, #32
 800bb3c:	4770      	bx	lr

0800bb3e <__i2b>:
 800bb3e:	b510      	push	{r4, lr}
 800bb40:	460c      	mov	r4, r1
 800bb42:	2101      	movs	r1, #1
 800bb44:	f7ff ff27 	bl	800b996 <_Balloc>
 800bb48:	2201      	movs	r2, #1
 800bb4a:	6144      	str	r4, [r0, #20]
 800bb4c:	6102      	str	r2, [r0, #16]
 800bb4e:	bd10      	pop	{r4, pc}

0800bb50 <__multiply>:
 800bb50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb54:	4614      	mov	r4, r2
 800bb56:	690a      	ldr	r2, [r1, #16]
 800bb58:	6923      	ldr	r3, [r4, #16]
 800bb5a:	429a      	cmp	r2, r3
 800bb5c:	bfb8      	it	lt
 800bb5e:	460b      	movlt	r3, r1
 800bb60:	4688      	mov	r8, r1
 800bb62:	bfbc      	itt	lt
 800bb64:	46a0      	movlt	r8, r4
 800bb66:	461c      	movlt	r4, r3
 800bb68:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bb6c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800bb70:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bb74:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bb78:	eb07 0609 	add.w	r6, r7, r9
 800bb7c:	42b3      	cmp	r3, r6
 800bb7e:	bfb8      	it	lt
 800bb80:	3101      	addlt	r1, #1
 800bb82:	f7ff ff08 	bl	800b996 <_Balloc>
 800bb86:	f100 0514 	add.w	r5, r0, #20
 800bb8a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800bb8e:	462b      	mov	r3, r5
 800bb90:	2200      	movs	r2, #0
 800bb92:	4573      	cmp	r3, lr
 800bb94:	d316      	bcc.n	800bbc4 <__multiply+0x74>
 800bb96:	f104 0214 	add.w	r2, r4, #20
 800bb9a:	f108 0114 	add.w	r1, r8, #20
 800bb9e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800bba2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800bba6:	9300      	str	r3, [sp, #0]
 800bba8:	9b00      	ldr	r3, [sp, #0]
 800bbaa:	9201      	str	r2, [sp, #4]
 800bbac:	4293      	cmp	r3, r2
 800bbae:	d80c      	bhi.n	800bbca <__multiply+0x7a>
 800bbb0:	2e00      	cmp	r6, #0
 800bbb2:	dd03      	ble.n	800bbbc <__multiply+0x6c>
 800bbb4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d05d      	beq.n	800bc78 <__multiply+0x128>
 800bbbc:	6106      	str	r6, [r0, #16]
 800bbbe:	b003      	add	sp, #12
 800bbc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbc4:	f843 2b04 	str.w	r2, [r3], #4
 800bbc8:	e7e3      	b.n	800bb92 <__multiply+0x42>
 800bbca:	f8b2 b000 	ldrh.w	fp, [r2]
 800bbce:	f1bb 0f00 	cmp.w	fp, #0
 800bbd2:	d023      	beq.n	800bc1c <__multiply+0xcc>
 800bbd4:	4689      	mov	r9, r1
 800bbd6:	46ac      	mov	ip, r5
 800bbd8:	f04f 0800 	mov.w	r8, #0
 800bbdc:	f859 4b04 	ldr.w	r4, [r9], #4
 800bbe0:	f8dc a000 	ldr.w	sl, [ip]
 800bbe4:	b2a3      	uxth	r3, r4
 800bbe6:	fa1f fa8a 	uxth.w	sl, sl
 800bbea:	fb0b a303 	mla	r3, fp, r3, sl
 800bbee:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800bbf2:	f8dc 4000 	ldr.w	r4, [ip]
 800bbf6:	4443      	add	r3, r8
 800bbf8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800bbfc:	fb0b 840a 	mla	r4, fp, sl, r8
 800bc00:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800bc04:	46e2      	mov	sl, ip
 800bc06:	b29b      	uxth	r3, r3
 800bc08:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800bc0c:	454f      	cmp	r7, r9
 800bc0e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800bc12:	f84a 3b04 	str.w	r3, [sl], #4
 800bc16:	d82b      	bhi.n	800bc70 <__multiply+0x120>
 800bc18:	f8cc 8004 	str.w	r8, [ip, #4]
 800bc1c:	9b01      	ldr	r3, [sp, #4]
 800bc1e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800bc22:	3204      	adds	r2, #4
 800bc24:	f1ba 0f00 	cmp.w	sl, #0
 800bc28:	d020      	beq.n	800bc6c <__multiply+0x11c>
 800bc2a:	682b      	ldr	r3, [r5, #0]
 800bc2c:	4689      	mov	r9, r1
 800bc2e:	46a8      	mov	r8, r5
 800bc30:	f04f 0b00 	mov.w	fp, #0
 800bc34:	f8b9 c000 	ldrh.w	ip, [r9]
 800bc38:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800bc3c:	fb0a 440c 	mla	r4, sl, ip, r4
 800bc40:	445c      	add	r4, fp
 800bc42:	46c4      	mov	ip, r8
 800bc44:	b29b      	uxth	r3, r3
 800bc46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800bc4a:	f84c 3b04 	str.w	r3, [ip], #4
 800bc4e:	f859 3b04 	ldr.w	r3, [r9], #4
 800bc52:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800bc56:	0c1b      	lsrs	r3, r3, #16
 800bc58:	fb0a b303 	mla	r3, sl, r3, fp
 800bc5c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800bc60:	454f      	cmp	r7, r9
 800bc62:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800bc66:	d805      	bhi.n	800bc74 <__multiply+0x124>
 800bc68:	f8c8 3004 	str.w	r3, [r8, #4]
 800bc6c:	3504      	adds	r5, #4
 800bc6e:	e79b      	b.n	800bba8 <__multiply+0x58>
 800bc70:	46d4      	mov	ip, sl
 800bc72:	e7b3      	b.n	800bbdc <__multiply+0x8c>
 800bc74:	46e0      	mov	r8, ip
 800bc76:	e7dd      	b.n	800bc34 <__multiply+0xe4>
 800bc78:	3e01      	subs	r6, #1
 800bc7a:	e799      	b.n	800bbb0 <__multiply+0x60>

0800bc7c <__pow5mult>:
 800bc7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc80:	4615      	mov	r5, r2
 800bc82:	f012 0203 	ands.w	r2, r2, #3
 800bc86:	4606      	mov	r6, r0
 800bc88:	460f      	mov	r7, r1
 800bc8a:	d007      	beq.n	800bc9c <__pow5mult+0x20>
 800bc8c:	3a01      	subs	r2, #1
 800bc8e:	4c21      	ldr	r4, [pc, #132]	; (800bd14 <__pow5mult+0x98>)
 800bc90:	2300      	movs	r3, #0
 800bc92:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bc96:	f7ff fec9 	bl	800ba2c <__multadd>
 800bc9a:	4607      	mov	r7, r0
 800bc9c:	10ad      	asrs	r5, r5, #2
 800bc9e:	d035      	beq.n	800bd0c <__pow5mult+0x90>
 800bca0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bca2:	b93c      	cbnz	r4, 800bcb4 <__pow5mult+0x38>
 800bca4:	2010      	movs	r0, #16
 800bca6:	f7ff fe63 	bl	800b970 <malloc>
 800bcaa:	6270      	str	r0, [r6, #36]	; 0x24
 800bcac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bcb0:	6004      	str	r4, [r0, #0]
 800bcb2:	60c4      	str	r4, [r0, #12]
 800bcb4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bcb8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bcbc:	b94c      	cbnz	r4, 800bcd2 <__pow5mult+0x56>
 800bcbe:	f240 2171 	movw	r1, #625	; 0x271
 800bcc2:	4630      	mov	r0, r6
 800bcc4:	f7ff ff3b 	bl	800bb3e <__i2b>
 800bcc8:	2300      	movs	r3, #0
 800bcca:	f8c8 0008 	str.w	r0, [r8, #8]
 800bcce:	4604      	mov	r4, r0
 800bcd0:	6003      	str	r3, [r0, #0]
 800bcd2:	f04f 0800 	mov.w	r8, #0
 800bcd6:	07eb      	lsls	r3, r5, #31
 800bcd8:	d50a      	bpl.n	800bcf0 <__pow5mult+0x74>
 800bcda:	4639      	mov	r1, r7
 800bcdc:	4622      	mov	r2, r4
 800bcde:	4630      	mov	r0, r6
 800bce0:	f7ff ff36 	bl	800bb50 <__multiply>
 800bce4:	4639      	mov	r1, r7
 800bce6:	4681      	mov	r9, r0
 800bce8:	4630      	mov	r0, r6
 800bcea:	f7ff fe88 	bl	800b9fe <_Bfree>
 800bcee:	464f      	mov	r7, r9
 800bcf0:	106d      	asrs	r5, r5, #1
 800bcf2:	d00b      	beq.n	800bd0c <__pow5mult+0x90>
 800bcf4:	6820      	ldr	r0, [r4, #0]
 800bcf6:	b938      	cbnz	r0, 800bd08 <__pow5mult+0x8c>
 800bcf8:	4622      	mov	r2, r4
 800bcfa:	4621      	mov	r1, r4
 800bcfc:	4630      	mov	r0, r6
 800bcfe:	f7ff ff27 	bl	800bb50 <__multiply>
 800bd02:	6020      	str	r0, [r4, #0]
 800bd04:	f8c0 8000 	str.w	r8, [r0]
 800bd08:	4604      	mov	r4, r0
 800bd0a:	e7e4      	b.n	800bcd6 <__pow5mult+0x5a>
 800bd0c:	4638      	mov	r0, r7
 800bd0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd12:	bf00      	nop
 800bd14:	0800d990 	.word	0x0800d990

0800bd18 <__lshift>:
 800bd18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd1c:	460c      	mov	r4, r1
 800bd1e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bd22:	6923      	ldr	r3, [r4, #16]
 800bd24:	6849      	ldr	r1, [r1, #4]
 800bd26:	eb0a 0903 	add.w	r9, sl, r3
 800bd2a:	68a3      	ldr	r3, [r4, #8]
 800bd2c:	4607      	mov	r7, r0
 800bd2e:	4616      	mov	r6, r2
 800bd30:	f109 0501 	add.w	r5, r9, #1
 800bd34:	42ab      	cmp	r3, r5
 800bd36:	db32      	blt.n	800bd9e <__lshift+0x86>
 800bd38:	4638      	mov	r0, r7
 800bd3a:	f7ff fe2c 	bl	800b996 <_Balloc>
 800bd3e:	2300      	movs	r3, #0
 800bd40:	4680      	mov	r8, r0
 800bd42:	f100 0114 	add.w	r1, r0, #20
 800bd46:	461a      	mov	r2, r3
 800bd48:	4553      	cmp	r3, sl
 800bd4a:	db2b      	blt.n	800bda4 <__lshift+0x8c>
 800bd4c:	6920      	ldr	r0, [r4, #16]
 800bd4e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bd52:	f104 0314 	add.w	r3, r4, #20
 800bd56:	f016 021f 	ands.w	r2, r6, #31
 800bd5a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bd5e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bd62:	d025      	beq.n	800bdb0 <__lshift+0x98>
 800bd64:	f1c2 0e20 	rsb	lr, r2, #32
 800bd68:	2000      	movs	r0, #0
 800bd6a:	681e      	ldr	r6, [r3, #0]
 800bd6c:	468a      	mov	sl, r1
 800bd6e:	4096      	lsls	r6, r2
 800bd70:	4330      	orrs	r0, r6
 800bd72:	f84a 0b04 	str.w	r0, [sl], #4
 800bd76:	f853 0b04 	ldr.w	r0, [r3], #4
 800bd7a:	459c      	cmp	ip, r3
 800bd7c:	fa20 f00e 	lsr.w	r0, r0, lr
 800bd80:	d814      	bhi.n	800bdac <__lshift+0x94>
 800bd82:	6048      	str	r0, [r1, #4]
 800bd84:	b108      	cbz	r0, 800bd8a <__lshift+0x72>
 800bd86:	f109 0502 	add.w	r5, r9, #2
 800bd8a:	3d01      	subs	r5, #1
 800bd8c:	4638      	mov	r0, r7
 800bd8e:	f8c8 5010 	str.w	r5, [r8, #16]
 800bd92:	4621      	mov	r1, r4
 800bd94:	f7ff fe33 	bl	800b9fe <_Bfree>
 800bd98:	4640      	mov	r0, r8
 800bd9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd9e:	3101      	adds	r1, #1
 800bda0:	005b      	lsls	r3, r3, #1
 800bda2:	e7c7      	b.n	800bd34 <__lshift+0x1c>
 800bda4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800bda8:	3301      	adds	r3, #1
 800bdaa:	e7cd      	b.n	800bd48 <__lshift+0x30>
 800bdac:	4651      	mov	r1, sl
 800bdae:	e7dc      	b.n	800bd6a <__lshift+0x52>
 800bdb0:	3904      	subs	r1, #4
 800bdb2:	f853 2b04 	ldr.w	r2, [r3], #4
 800bdb6:	f841 2f04 	str.w	r2, [r1, #4]!
 800bdba:	459c      	cmp	ip, r3
 800bdbc:	d8f9      	bhi.n	800bdb2 <__lshift+0x9a>
 800bdbe:	e7e4      	b.n	800bd8a <__lshift+0x72>

0800bdc0 <__mcmp>:
 800bdc0:	6903      	ldr	r3, [r0, #16]
 800bdc2:	690a      	ldr	r2, [r1, #16]
 800bdc4:	1a9b      	subs	r3, r3, r2
 800bdc6:	b530      	push	{r4, r5, lr}
 800bdc8:	d10c      	bne.n	800bde4 <__mcmp+0x24>
 800bdca:	0092      	lsls	r2, r2, #2
 800bdcc:	3014      	adds	r0, #20
 800bdce:	3114      	adds	r1, #20
 800bdd0:	1884      	adds	r4, r0, r2
 800bdd2:	4411      	add	r1, r2
 800bdd4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bdd8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bddc:	4295      	cmp	r5, r2
 800bdde:	d003      	beq.n	800bde8 <__mcmp+0x28>
 800bde0:	d305      	bcc.n	800bdee <__mcmp+0x2e>
 800bde2:	2301      	movs	r3, #1
 800bde4:	4618      	mov	r0, r3
 800bde6:	bd30      	pop	{r4, r5, pc}
 800bde8:	42a0      	cmp	r0, r4
 800bdea:	d3f3      	bcc.n	800bdd4 <__mcmp+0x14>
 800bdec:	e7fa      	b.n	800bde4 <__mcmp+0x24>
 800bdee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bdf2:	e7f7      	b.n	800bde4 <__mcmp+0x24>

0800bdf4 <__mdiff>:
 800bdf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bdf8:	460d      	mov	r5, r1
 800bdfa:	4607      	mov	r7, r0
 800bdfc:	4611      	mov	r1, r2
 800bdfe:	4628      	mov	r0, r5
 800be00:	4614      	mov	r4, r2
 800be02:	f7ff ffdd 	bl	800bdc0 <__mcmp>
 800be06:	1e06      	subs	r6, r0, #0
 800be08:	d108      	bne.n	800be1c <__mdiff+0x28>
 800be0a:	4631      	mov	r1, r6
 800be0c:	4638      	mov	r0, r7
 800be0e:	f7ff fdc2 	bl	800b996 <_Balloc>
 800be12:	2301      	movs	r3, #1
 800be14:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800be18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be1c:	bfa4      	itt	ge
 800be1e:	4623      	movge	r3, r4
 800be20:	462c      	movge	r4, r5
 800be22:	4638      	mov	r0, r7
 800be24:	6861      	ldr	r1, [r4, #4]
 800be26:	bfa6      	itte	ge
 800be28:	461d      	movge	r5, r3
 800be2a:	2600      	movge	r6, #0
 800be2c:	2601      	movlt	r6, #1
 800be2e:	f7ff fdb2 	bl	800b996 <_Balloc>
 800be32:	692b      	ldr	r3, [r5, #16]
 800be34:	60c6      	str	r6, [r0, #12]
 800be36:	6926      	ldr	r6, [r4, #16]
 800be38:	f105 0914 	add.w	r9, r5, #20
 800be3c:	f104 0214 	add.w	r2, r4, #20
 800be40:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800be44:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800be48:	f100 0514 	add.w	r5, r0, #20
 800be4c:	f04f 0e00 	mov.w	lr, #0
 800be50:	f852 ab04 	ldr.w	sl, [r2], #4
 800be54:	f859 4b04 	ldr.w	r4, [r9], #4
 800be58:	fa1e f18a 	uxtah	r1, lr, sl
 800be5c:	b2a3      	uxth	r3, r4
 800be5e:	1ac9      	subs	r1, r1, r3
 800be60:	0c23      	lsrs	r3, r4, #16
 800be62:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800be66:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800be6a:	b289      	uxth	r1, r1
 800be6c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800be70:	45c8      	cmp	r8, r9
 800be72:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800be76:	4694      	mov	ip, r2
 800be78:	f845 3b04 	str.w	r3, [r5], #4
 800be7c:	d8e8      	bhi.n	800be50 <__mdiff+0x5c>
 800be7e:	45bc      	cmp	ip, r7
 800be80:	d304      	bcc.n	800be8c <__mdiff+0x98>
 800be82:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800be86:	b183      	cbz	r3, 800beaa <__mdiff+0xb6>
 800be88:	6106      	str	r6, [r0, #16]
 800be8a:	e7c5      	b.n	800be18 <__mdiff+0x24>
 800be8c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800be90:	fa1e f381 	uxtah	r3, lr, r1
 800be94:	141a      	asrs	r2, r3, #16
 800be96:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800be9a:	b29b      	uxth	r3, r3
 800be9c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bea0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800bea4:	f845 3b04 	str.w	r3, [r5], #4
 800bea8:	e7e9      	b.n	800be7e <__mdiff+0x8a>
 800beaa:	3e01      	subs	r6, #1
 800beac:	e7e9      	b.n	800be82 <__mdiff+0x8e>

0800beae <__d2b>:
 800beae:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800beb2:	460e      	mov	r6, r1
 800beb4:	2101      	movs	r1, #1
 800beb6:	ec59 8b10 	vmov	r8, r9, d0
 800beba:	4615      	mov	r5, r2
 800bebc:	f7ff fd6b 	bl	800b996 <_Balloc>
 800bec0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800bec4:	4607      	mov	r7, r0
 800bec6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800beca:	bb34      	cbnz	r4, 800bf1a <__d2b+0x6c>
 800becc:	9301      	str	r3, [sp, #4]
 800bece:	f1b8 0300 	subs.w	r3, r8, #0
 800bed2:	d027      	beq.n	800bf24 <__d2b+0x76>
 800bed4:	a802      	add	r0, sp, #8
 800bed6:	f840 3d08 	str.w	r3, [r0, #-8]!
 800beda:	f7ff fe01 	bl	800bae0 <__lo0bits>
 800bede:	9900      	ldr	r1, [sp, #0]
 800bee0:	b1f0      	cbz	r0, 800bf20 <__d2b+0x72>
 800bee2:	9a01      	ldr	r2, [sp, #4]
 800bee4:	f1c0 0320 	rsb	r3, r0, #32
 800bee8:	fa02 f303 	lsl.w	r3, r2, r3
 800beec:	430b      	orrs	r3, r1
 800beee:	40c2      	lsrs	r2, r0
 800bef0:	617b      	str	r3, [r7, #20]
 800bef2:	9201      	str	r2, [sp, #4]
 800bef4:	9b01      	ldr	r3, [sp, #4]
 800bef6:	61bb      	str	r3, [r7, #24]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	bf14      	ite	ne
 800befc:	2102      	movne	r1, #2
 800befe:	2101      	moveq	r1, #1
 800bf00:	6139      	str	r1, [r7, #16]
 800bf02:	b1c4      	cbz	r4, 800bf36 <__d2b+0x88>
 800bf04:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800bf08:	4404      	add	r4, r0
 800bf0a:	6034      	str	r4, [r6, #0]
 800bf0c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bf10:	6028      	str	r0, [r5, #0]
 800bf12:	4638      	mov	r0, r7
 800bf14:	b003      	add	sp, #12
 800bf16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bf1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bf1e:	e7d5      	b.n	800becc <__d2b+0x1e>
 800bf20:	6179      	str	r1, [r7, #20]
 800bf22:	e7e7      	b.n	800bef4 <__d2b+0x46>
 800bf24:	a801      	add	r0, sp, #4
 800bf26:	f7ff fddb 	bl	800bae0 <__lo0bits>
 800bf2a:	9b01      	ldr	r3, [sp, #4]
 800bf2c:	617b      	str	r3, [r7, #20]
 800bf2e:	2101      	movs	r1, #1
 800bf30:	6139      	str	r1, [r7, #16]
 800bf32:	3020      	adds	r0, #32
 800bf34:	e7e5      	b.n	800bf02 <__d2b+0x54>
 800bf36:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800bf3a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bf3e:	6030      	str	r0, [r6, #0]
 800bf40:	6918      	ldr	r0, [r3, #16]
 800bf42:	f7ff fdae 	bl	800baa2 <__hi0bits>
 800bf46:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800bf4a:	e7e1      	b.n	800bf10 <__d2b+0x62>

0800bf4c <_calloc_r>:
 800bf4c:	b538      	push	{r3, r4, r5, lr}
 800bf4e:	fb02 f401 	mul.w	r4, r2, r1
 800bf52:	4621      	mov	r1, r4
 800bf54:	f000 f856 	bl	800c004 <_malloc_r>
 800bf58:	4605      	mov	r5, r0
 800bf5a:	b118      	cbz	r0, 800bf64 <_calloc_r+0x18>
 800bf5c:	4622      	mov	r2, r4
 800bf5e:	2100      	movs	r1, #0
 800bf60:	f7fd ff36 	bl	8009dd0 <memset>
 800bf64:	4628      	mov	r0, r5
 800bf66:	bd38      	pop	{r3, r4, r5, pc}

0800bf68 <_free_r>:
 800bf68:	b538      	push	{r3, r4, r5, lr}
 800bf6a:	4605      	mov	r5, r0
 800bf6c:	2900      	cmp	r1, #0
 800bf6e:	d045      	beq.n	800bffc <_free_r+0x94>
 800bf70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf74:	1f0c      	subs	r4, r1, #4
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	bfb8      	it	lt
 800bf7a:	18e4      	addlt	r4, r4, r3
 800bf7c:	f000 fa98 	bl	800c4b0 <__malloc_lock>
 800bf80:	4a1f      	ldr	r2, [pc, #124]	; (800c000 <_free_r+0x98>)
 800bf82:	6813      	ldr	r3, [r2, #0]
 800bf84:	4610      	mov	r0, r2
 800bf86:	b933      	cbnz	r3, 800bf96 <_free_r+0x2e>
 800bf88:	6063      	str	r3, [r4, #4]
 800bf8a:	6014      	str	r4, [r2, #0]
 800bf8c:	4628      	mov	r0, r5
 800bf8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bf92:	f000 ba8e 	b.w	800c4b2 <__malloc_unlock>
 800bf96:	42a3      	cmp	r3, r4
 800bf98:	d90c      	bls.n	800bfb4 <_free_r+0x4c>
 800bf9a:	6821      	ldr	r1, [r4, #0]
 800bf9c:	1862      	adds	r2, r4, r1
 800bf9e:	4293      	cmp	r3, r2
 800bfa0:	bf04      	itt	eq
 800bfa2:	681a      	ldreq	r2, [r3, #0]
 800bfa4:	685b      	ldreq	r3, [r3, #4]
 800bfa6:	6063      	str	r3, [r4, #4]
 800bfa8:	bf04      	itt	eq
 800bfaa:	1852      	addeq	r2, r2, r1
 800bfac:	6022      	streq	r2, [r4, #0]
 800bfae:	6004      	str	r4, [r0, #0]
 800bfb0:	e7ec      	b.n	800bf8c <_free_r+0x24>
 800bfb2:	4613      	mov	r3, r2
 800bfb4:	685a      	ldr	r2, [r3, #4]
 800bfb6:	b10a      	cbz	r2, 800bfbc <_free_r+0x54>
 800bfb8:	42a2      	cmp	r2, r4
 800bfba:	d9fa      	bls.n	800bfb2 <_free_r+0x4a>
 800bfbc:	6819      	ldr	r1, [r3, #0]
 800bfbe:	1858      	adds	r0, r3, r1
 800bfc0:	42a0      	cmp	r0, r4
 800bfc2:	d10b      	bne.n	800bfdc <_free_r+0x74>
 800bfc4:	6820      	ldr	r0, [r4, #0]
 800bfc6:	4401      	add	r1, r0
 800bfc8:	1858      	adds	r0, r3, r1
 800bfca:	4282      	cmp	r2, r0
 800bfcc:	6019      	str	r1, [r3, #0]
 800bfce:	d1dd      	bne.n	800bf8c <_free_r+0x24>
 800bfd0:	6810      	ldr	r0, [r2, #0]
 800bfd2:	6852      	ldr	r2, [r2, #4]
 800bfd4:	605a      	str	r2, [r3, #4]
 800bfd6:	4401      	add	r1, r0
 800bfd8:	6019      	str	r1, [r3, #0]
 800bfda:	e7d7      	b.n	800bf8c <_free_r+0x24>
 800bfdc:	d902      	bls.n	800bfe4 <_free_r+0x7c>
 800bfde:	230c      	movs	r3, #12
 800bfe0:	602b      	str	r3, [r5, #0]
 800bfe2:	e7d3      	b.n	800bf8c <_free_r+0x24>
 800bfe4:	6820      	ldr	r0, [r4, #0]
 800bfe6:	1821      	adds	r1, r4, r0
 800bfe8:	428a      	cmp	r2, r1
 800bfea:	bf04      	itt	eq
 800bfec:	6811      	ldreq	r1, [r2, #0]
 800bfee:	6852      	ldreq	r2, [r2, #4]
 800bff0:	6062      	str	r2, [r4, #4]
 800bff2:	bf04      	itt	eq
 800bff4:	1809      	addeq	r1, r1, r0
 800bff6:	6021      	streq	r1, [r4, #0]
 800bff8:	605c      	str	r4, [r3, #4]
 800bffa:	e7c7      	b.n	800bf8c <_free_r+0x24>
 800bffc:	bd38      	pop	{r3, r4, r5, pc}
 800bffe:	bf00      	nop
 800c000:	20000220 	.word	0x20000220

0800c004 <_malloc_r>:
 800c004:	b570      	push	{r4, r5, r6, lr}
 800c006:	1ccd      	adds	r5, r1, #3
 800c008:	f025 0503 	bic.w	r5, r5, #3
 800c00c:	3508      	adds	r5, #8
 800c00e:	2d0c      	cmp	r5, #12
 800c010:	bf38      	it	cc
 800c012:	250c      	movcc	r5, #12
 800c014:	2d00      	cmp	r5, #0
 800c016:	4606      	mov	r6, r0
 800c018:	db01      	blt.n	800c01e <_malloc_r+0x1a>
 800c01a:	42a9      	cmp	r1, r5
 800c01c:	d903      	bls.n	800c026 <_malloc_r+0x22>
 800c01e:	230c      	movs	r3, #12
 800c020:	6033      	str	r3, [r6, #0]
 800c022:	2000      	movs	r0, #0
 800c024:	bd70      	pop	{r4, r5, r6, pc}
 800c026:	f000 fa43 	bl	800c4b0 <__malloc_lock>
 800c02a:	4a21      	ldr	r2, [pc, #132]	; (800c0b0 <_malloc_r+0xac>)
 800c02c:	6814      	ldr	r4, [r2, #0]
 800c02e:	4621      	mov	r1, r4
 800c030:	b991      	cbnz	r1, 800c058 <_malloc_r+0x54>
 800c032:	4c20      	ldr	r4, [pc, #128]	; (800c0b4 <_malloc_r+0xb0>)
 800c034:	6823      	ldr	r3, [r4, #0]
 800c036:	b91b      	cbnz	r3, 800c040 <_malloc_r+0x3c>
 800c038:	4630      	mov	r0, r6
 800c03a:	f000 f97d 	bl	800c338 <_sbrk_r>
 800c03e:	6020      	str	r0, [r4, #0]
 800c040:	4629      	mov	r1, r5
 800c042:	4630      	mov	r0, r6
 800c044:	f000 f978 	bl	800c338 <_sbrk_r>
 800c048:	1c43      	adds	r3, r0, #1
 800c04a:	d124      	bne.n	800c096 <_malloc_r+0x92>
 800c04c:	230c      	movs	r3, #12
 800c04e:	6033      	str	r3, [r6, #0]
 800c050:	4630      	mov	r0, r6
 800c052:	f000 fa2e 	bl	800c4b2 <__malloc_unlock>
 800c056:	e7e4      	b.n	800c022 <_malloc_r+0x1e>
 800c058:	680b      	ldr	r3, [r1, #0]
 800c05a:	1b5b      	subs	r3, r3, r5
 800c05c:	d418      	bmi.n	800c090 <_malloc_r+0x8c>
 800c05e:	2b0b      	cmp	r3, #11
 800c060:	d90f      	bls.n	800c082 <_malloc_r+0x7e>
 800c062:	600b      	str	r3, [r1, #0]
 800c064:	50cd      	str	r5, [r1, r3]
 800c066:	18cc      	adds	r4, r1, r3
 800c068:	4630      	mov	r0, r6
 800c06a:	f000 fa22 	bl	800c4b2 <__malloc_unlock>
 800c06e:	f104 000b 	add.w	r0, r4, #11
 800c072:	1d23      	adds	r3, r4, #4
 800c074:	f020 0007 	bic.w	r0, r0, #7
 800c078:	1ac3      	subs	r3, r0, r3
 800c07a:	d0d3      	beq.n	800c024 <_malloc_r+0x20>
 800c07c:	425a      	negs	r2, r3
 800c07e:	50e2      	str	r2, [r4, r3]
 800c080:	e7d0      	b.n	800c024 <_malloc_r+0x20>
 800c082:	428c      	cmp	r4, r1
 800c084:	684b      	ldr	r3, [r1, #4]
 800c086:	bf16      	itet	ne
 800c088:	6063      	strne	r3, [r4, #4]
 800c08a:	6013      	streq	r3, [r2, #0]
 800c08c:	460c      	movne	r4, r1
 800c08e:	e7eb      	b.n	800c068 <_malloc_r+0x64>
 800c090:	460c      	mov	r4, r1
 800c092:	6849      	ldr	r1, [r1, #4]
 800c094:	e7cc      	b.n	800c030 <_malloc_r+0x2c>
 800c096:	1cc4      	adds	r4, r0, #3
 800c098:	f024 0403 	bic.w	r4, r4, #3
 800c09c:	42a0      	cmp	r0, r4
 800c09e:	d005      	beq.n	800c0ac <_malloc_r+0xa8>
 800c0a0:	1a21      	subs	r1, r4, r0
 800c0a2:	4630      	mov	r0, r6
 800c0a4:	f000 f948 	bl	800c338 <_sbrk_r>
 800c0a8:	3001      	adds	r0, #1
 800c0aa:	d0cf      	beq.n	800c04c <_malloc_r+0x48>
 800c0ac:	6025      	str	r5, [r4, #0]
 800c0ae:	e7db      	b.n	800c068 <_malloc_r+0x64>
 800c0b0:	20000220 	.word	0x20000220
 800c0b4:	20000224 	.word	0x20000224

0800c0b8 <__sfputc_r>:
 800c0b8:	6893      	ldr	r3, [r2, #8]
 800c0ba:	3b01      	subs	r3, #1
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	b410      	push	{r4}
 800c0c0:	6093      	str	r3, [r2, #8]
 800c0c2:	da08      	bge.n	800c0d6 <__sfputc_r+0x1e>
 800c0c4:	6994      	ldr	r4, [r2, #24]
 800c0c6:	42a3      	cmp	r3, r4
 800c0c8:	db01      	blt.n	800c0ce <__sfputc_r+0x16>
 800c0ca:	290a      	cmp	r1, #10
 800c0cc:	d103      	bne.n	800c0d6 <__sfputc_r+0x1e>
 800c0ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c0d2:	f7fe bb5d 	b.w	800a790 <__swbuf_r>
 800c0d6:	6813      	ldr	r3, [r2, #0]
 800c0d8:	1c58      	adds	r0, r3, #1
 800c0da:	6010      	str	r0, [r2, #0]
 800c0dc:	7019      	strb	r1, [r3, #0]
 800c0de:	4608      	mov	r0, r1
 800c0e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c0e4:	4770      	bx	lr

0800c0e6 <__sfputs_r>:
 800c0e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0e8:	4606      	mov	r6, r0
 800c0ea:	460f      	mov	r7, r1
 800c0ec:	4614      	mov	r4, r2
 800c0ee:	18d5      	adds	r5, r2, r3
 800c0f0:	42ac      	cmp	r4, r5
 800c0f2:	d101      	bne.n	800c0f8 <__sfputs_r+0x12>
 800c0f4:	2000      	movs	r0, #0
 800c0f6:	e007      	b.n	800c108 <__sfputs_r+0x22>
 800c0f8:	463a      	mov	r2, r7
 800c0fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0fe:	4630      	mov	r0, r6
 800c100:	f7ff ffda 	bl	800c0b8 <__sfputc_r>
 800c104:	1c43      	adds	r3, r0, #1
 800c106:	d1f3      	bne.n	800c0f0 <__sfputs_r+0xa>
 800c108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c10c <_vfiprintf_r>:
 800c10c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c110:	460c      	mov	r4, r1
 800c112:	b09d      	sub	sp, #116	; 0x74
 800c114:	4617      	mov	r7, r2
 800c116:	461d      	mov	r5, r3
 800c118:	4606      	mov	r6, r0
 800c11a:	b118      	cbz	r0, 800c124 <_vfiprintf_r+0x18>
 800c11c:	6983      	ldr	r3, [r0, #24]
 800c11e:	b90b      	cbnz	r3, 800c124 <_vfiprintf_r+0x18>
 800c120:	f7ff fb2a 	bl	800b778 <__sinit>
 800c124:	4b7c      	ldr	r3, [pc, #496]	; (800c318 <_vfiprintf_r+0x20c>)
 800c126:	429c      	cmp	r4, r3
 800c128:	d158      	bne.n	800c1dc <_vfiprintf_r+0xd0>
 800c12a:	6874      	ldr	r4, [r6, #4]
 800c12c:	89a3      	ldrh	r3, [r4, #12]
 800c12e:	0718      	lsls	r0, r3, #28
 800c130:	d55e      	bpl.n	800c1f0 <_vfiprintf_r+0xe4>
 800c132:	6923      	ldr	r3, [r4, #16]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d05b      	beq.n	800c1f0 <_vfiprintf_r+0xe4>
 800c138:	2300      	movs	r3, #0
 800c13a:	9309      	str	r3, [sp, #36]	; 0x24
 800c13c:	2320      	movs	r3, #32
 800c13e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c142:	2330      	movs	r3, #48	; 0x30
 800c144:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c148:	9503      	str	r5, [sp, #12]
 800c14a:	f04f 0b01 	mov.w	fp, #1
 800c14e:	46b8      	mov	r8, r7
 800c150:	4645      	mov	r5, r8
 800c152:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c156:	b10b      	cbz	r3, 800c15c <_vfiprintf_r+0x50>
 800c158:	2b25      	cmp	r3, #37	; 0x25
 800c15a:	d154      	bne.n	800c206 <_vfiprintf_r+0xfa>
 800c15c:	ebb8 0a07 	subs.w	sl, r8, r7
 800c160:	d00b      	beq.n	800c17a <_vfiprintf_r+0x6e>
 800c162:	4653      	mov	r3, sl
 800c164:	463a      	mov	r2, r7
 800c166:	4621      	mov	r1, r4
 800c168:	4630      	mov	r0, r6
 800c16a:	f7ff ffbc 	bl	800c0e6 <__sfputs_r>
 800c16e:	3001      	adds	r0, #1
 800c170:	f000 80c2 	beq.w	800c2f8 <_vfiprintf_r+0x1ec>
 800c174:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c176:	4453      	add	r3, sl
 800c178:	9309      	str	r3, [sp, #36]	; 0x24
 800c17a:	f898 3000 	ldrb.w	r3, [r8]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	f000 80ba 	beq.w	800c2f8 <_vfiprintf_r+0x1ec>
 800c184:	2300      	movs	r3, #0
 800c186:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c18a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c18e:	9304      	str	r3, [sp, #16]
 800c190:	9307      	str	r3, [sp, #28]
 800c192:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c196:	931a      	str	r3, [sp, #104]	; 0x68
 800c198:	46a8      	mov	r8, r5
 800c19a:	2205      	movs	r2, #5
 800c19c:	f818 1b01 	ldrb.w	r1, [r8], #1
 800c1a0:	485e      	ldr	r0, [pc, #376]	; (800c31c <_vfiprintf_r+0x210>)
 800c1a2:	f7f4 f81d 	bl	80001e0 <memchr>
 800c1a6:	9b04      	ldr	r3, [sp, #16]
 800c1a8:	bb78      	cbnz	r0, 800c20a <_vfiprintf_r+0xfe>
 800c1aa:	06d9      	lsls	r1, r3, #27
 800c1ac:	bf44      	itt	mi
 800c1ae:	2220      	movmi	r2, #32
 800c1b0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c1b4:	071a      	lsls	r2, r3, #28
 800c1b6:	bf44      	itt	mi
 800c1b8:	222b      	movmi	r2, #43	; 0x2b
 800c1ba:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c1be:	782a      	ldrb	r2, [r5, #0]
 800c1c0:	2a2a      	cmp	r2, #42	; 0x2a
 800c1c2:	d02a      	beq.n	800c21a <_vfiprintf_r+0x10e>
 800c1c4:	9a07      	ldr	r2, [sp, #28]
 800c1c6:	46a8      	mov	r8, r5
 800c1c8:	2000      	movs	r0, #0
 800c1ca:	250a      	movs	r5, #10
 800c1cc:	4641      	mov	r1, r8
 800c1ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c1d2:	3b30      	subs	r3, #48	; 0x30
 800c1d4:	2b09      	cmp	r3, #9
 800c1d6:	d969      	bls.n	800c2ac <_vfiprintf_r+0x1a0>
 800c1d8:	b360      	cbz	r0, 800c234 <_vfiprintf_r+0x128>
 800c1da:	e024      	b.n	800c226 <_vfiprintf_r+0x11a>
 800c1dc:	4b50      	ldr	r3, [pc, #320]	; (800c320 <_vfiprintf_r+0x214>)
 800c1de:	429c      	cmp	r4, r3
 800c1e0:	d101      	bne.n	800c1e6 <_vfiprintf_r+0xda>
 800c1e2:	68b4      	ldr	r4, [r6, #8]
 800c1e4:	e7a2      	b.n	800c12c <_vfiprintf_r+0x20>
 800c1e6:	4b4f      	ldr	r3, [pc, #316]	; (800c324 <_vfiprintf_r+0x218>)
 800c1e8:	429c      	cmp	r4, r3
 800c1ea:	bf08      	it	eq
 800c1ec:	68f4      	ldreq	r4, [r6, #12]
 800c1ee:	e79d      	b.n	800c12c <_vfiprintf_r+0x20>
 800c1f0:	4621      	mov	r1, r4
 800c1f2:	4630      	mov	r0, r6
 800c1f4:	f7fe fb1e 	bl	800a834 <__swsetup_r>
 800c1f8:	2800      	cmp	r0, #0
 800c1fa:	d09d      	beq.n	800c138 <_vfiprintf_r+0x2c>
 800c1fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c200:	b01d      	add	sp, #116	; 0x74
 800c202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c206:	46a8      	mov	r8, r5
 800c208:	e7a2      	b.n	800c150 <_vfiprintf_r+0x44>
 800c20a:	4a44      	ldr	r2, [pc, #272]	; (800c31c <_vfiprintf_r+0x210>)
 800c20c:	1a80      	subs	r0, r0, r2
 800c20e:	fa0b f000 	lsl.w	r0, fp, r0
 800c212:	4318      	orrs	r0, r3
 800c214:	9004      	str	r0, [sp, #16]
 800c216:	4645      	mov	r5, r8
 800c218:	e7be      	b.n	800c198 <_vfiprintf_r+0x8c>
 800c21a:	9a03      	ldr	r2, [sp, #12]
 800c21c:	1d11      	adds	r1, r2, #4
 800c21e:	6812      	ldr	r2, [r2, #0]
 800c220:	9103      	str	r1, [sp, #12]
 800c222:	2a00      	cmp	r2, #0
 800c224:	db01      	blt.n	800c22a <_vfiprintf_r+0x11e>
 800c226:	9207      	str	r2, [sp, #28]
 800c228:	e004      	b.n	800c234 <_vfiprintf_r+0x128>
 800c22a:	4252      	negs	r2, r2
 800c22c:	f043 0302 	orr.w	r3, r3, #2
 800c230:	9207      	str	r2, [sp, #28]
 800c232:	9304      	str	r3, [sp, #16]
 800c234:	f898 3000 	ldrb.w	r3, [r8]
 800c238:	2b2e      	cmp	r3, #46	; 0x2e
 800c23a:	d10e      	bne.n	800c25a <_vfiprintf_r+0x14e>
 800c23c:	f898 3001 	ldrb.w	r3, [r8, #1]
 800c240:	2b2a      	cmp	r3, #42	; 0x2a
 800c242:	d138      	bne.n	800c2b6 <_vfiprintf_r+0x1aa>
 800c244:	9b03      	ldr	r3, [sp, #12]
 800c246:	1d1a      	adds	r2, r3, #4
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	9203      	str	r2, [sp, #12]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	bfb8      	it	lt
 800c250:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c254:	f108 0802 	add.w	r8, r8, #2
 800c258:	9305      	str	r3, [sp, #20]
 800c25a:	4d33      	ldr	r5, [pc, #204]	; (800c328 <_vfiprintf_r+0x21c>)
 800c25c:	f898 1000 	ldrb.w	r1, [r8]
 800c260:	2203      	movs	r2, #3
 800c262:	4628      	mov	r0, r5
 800c264:	f7f3 ffbc 	bl	80001e0 <memchr>
 800c268:	b140      	cbz	r0, 800c27c <_vfiprintf_r+0x170>
 800c26a:	2340      	movs	r3, #64	; 0x40
 800c26c:	1b40      	subs	r0, r0, r5
 800c26e:	fa03 f000 	lsl.w	r0, r3, r0
 800c272:	9b04      	ldr	r3, [sp, #16]
 800c274:	4303      	orrs	r3, r0
 800c276:	f108 0801 	add.w	r8, r8, #1
 800c27a:	9304      	str	r3, [sp, #16]
 800c27c:	f898 1000 	ldrb.w	r1, [r8]
 800c280:	482a      	ldr	r0, [pc, #168]	; (800c32c <_vfiprintf_r+0x220>)
 800c282:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c286:	2206      	movs	r2, #6
 800c288:	f108 0701 	add.w	r7, r8, #1
 800c28c:	f7f3 ffa8 	bl	80001e0 <memchr>
 800c290:	2800      	cmp	r0, #0
 800c292:	d037      	beq.n	800c304 <_vfiprintf_r+0x1f8>
 800c294:	4b26      	ldr	r3, [pc, #152]	; (800c330 <_vfiprintf_r+0x224>)
 800c296:	bb1b      	cbnz	r3, 800c2e0 <_vfiprintf_r+0x1d4>
 800c298:	9b03      	ldr	r3, [sp, #12]
 800c29a:	3307      	adds	r3, #7
 800c29c:	f023 0307 	bic.w	r3, r3, #7
 800c2a0:	3308      	adds	r3, #8
 800c2a2:	9303      	str	r3, [sp, #12]
 800c2a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2a6:	444b      	add	r3, r9
 800c2a8:	9309      	str	r3, [sp, #36]	; 0x24
 800c2aa:	e750      	b.n	800c14e <_vfiprintf_r+0x42>
 800c2ac:	fb05 3202 	mla	r2, r5, r2, r3
 800c2b0:	2001      	movs	r0, #1
 800c2b2:	4688      	mov	r8, r1
 800c2b4:	e78a      	b.n	800c1cc <_vfiprintf_r+0xc0>
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	f108 0801 	add.w	r8, r8, #1
 800c2bc:	9305      	str	r3, [sp, #20]
 800c2be:	4619      	mov	r1, r3
 800c2c0:	250a      	movs	r5, #10
 800c2c2:	4640      	mov	r0, r8
 800c2c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c2c8:	3a30      	subs	r2, #48	; 0x30
 800c2ca:	2a09      	cmp	r2, #9
 800c2cc:	d903      	bls.n	800c2d6 <_vfiprintf_r+0x1ca>
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d0c3      	beq.n	800c25a <_vfiprintf_r+0x14e>
 800c2d2:	9105      	str	r1, [sp, #20]
 800c2d4:	e7c1      	b.n	800c25a <_vfiprintf_r+0x14e>
 800c2d6:	fb05 2101 	mla	r1, r5, r1, r2
 800c2da:	2301      	movs	r3, #1
 800c2dc:	4680      	mov	r8, r0
 800c2de:	e7f0      	b.n	800c2c2 <_vfiprintf_r+0x1b6>
 800c2e0:	ab03      	add	r3, sp, #12
 800c2e2:	9300      	str	r3, [sp, #0]
 800c2e4:	4622      	mov	r2, r4
 800c2e6:	4b13      	ldr	r3, [pc, #76]	; (800c334 <_vfiprintf_r+0x228>)
 800c2e8:	a904      	add	r1, sp, #16
 800c2ea:	4630      	mov	r0, r6
 800c2ec:	f7fd fe0c 	bl	8009f08 <_printf_float>
 800c2f0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800c2f4:	4681      	mov	r9, r0
 800c2f6:	d1d5      	bne.n	800c2a4 <_vfiprintf_r+0x198>
 800c2f8:	89a3      	ldrh	r3, [r4, #12]
 800c2fa:	065b      	lsls	r3, r3, #25
 800c2fc:	f53f af7e 	bmi.w	800c1fc <_vfiprintf_r+0xf0>
 800c300:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c302:	e77d      	b.n	800c200 <_vfiprintf_r+0xf4>
 800c304:	ab03      	add	r3, sp, #12
 800c306:	9300      	str	r3, [sp, #0]
 800c308:	4622      	mov	r2, r4
 800c30a:	4b0a      	ldr	r3, [pc, #40]	; (800c334 <_vfiprintf_r+0x228>)
 800c30c:	a904      	add	r1, sp, #16
 800c30e:	4630      	mov	r0, r6
 800c310:	f7fe f8b0 	bl	800a474 <_printf_i>
 800c314:	e7ec      	b.n	800c2f0 <_vfiprintf_r+0x1e4>
 800c316:	bf00      	nop
 800c318:	0800d860 	.word	0x0800d860
 800c31c:	0800d99c 	.word	0x0800d99c
 800c320:	0800d880 	.word	0x0800d880
 800c324:	0800d840 	.word	0x0800d840
 800c328:	0800d9a2 	.word	0x0800d9a2
 800c32c:	0800d9a6 	.word	0x0800d9a6
 800c330:	08009f09 	.word	0x08009f09
 800c334:	0800c0e7 	.word	0x0800c0e7

0800c338 <_sbrk_r>:
 800c338:	b538      	push	{r3, r4, r5, lr}
 800c33a:	4c06      	ldr	r4, [pc, #24]	; (800c354 <_sbrk_r+0x1c>)
 800c33c:	2300      	movs	r3, #0
 800c33e:	4605      	mov	r5, r0
 800c340:	4608      	mov	r0, r1
 800c342:	6023      	str	r3, [r4, #0]
 800c344:	f7f8 fa34 	bl	80047b0 <_sbrk>
 800c348:	1c43      	adds	r3, r0, #1
 800c34a:	d102      	bne.n	800c352 <_sbrk_r+0x1a>
 800c34c:	6823      	ldr	r3, [r4, #0]
 800c34e:	b103      	cbz	r3, 800c352 <_sbrk_r+0x1a>
 800c350:	602b      	str	r3, [r5, #0]
 800c352:	bd38      	pop	{r3, r4, r5, pc}
 800c354:	2000055c 	.word	0x2000055c

0800c358 <__sread>:
 800c358:	b510      	push	{r4, lr}
 800c35a:	460c      	mov	r4, r1
 800c35c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c360:	f000 f8a8 	bl	800c4b4 <_read_r>
 800c364:	2800      	cmp	r0, #0
 800c366:	bfab      	itete	ge
 800c368:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c36a:	89a3      	ldrhlt	r3, [r4, #12]
 800c36c:	181b      	addge	r3, r3, r0
 800c36e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c372:	bfac      	ite	ge
 800c374:	6563      	strge	r3, [r4, #84]	; 0x54
 800c376:	81a3      	strhlt	r3, [r4, #12]
 800c378:	bd10      	pop	{r4, pc}

0800c37a <__swrite>:
 800c37a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c37e:	461f      	mov	r7, r3
 800c380:	898b      	ldrh	r3, [r1, #12]
 800c382:	05db      	lsls	r3, r3, #23
 800c384:	4605      	mov	r5, r0
 800c386:	460c      	mov	r4, r1
 800c388:	4616      	mov	r6, r2
 800c38a:	d505      	bpl.n	800c398 <__swrite+0x1e>
 800c38c:	2302      	movs	r3, #2
 800c38e:	2200      	movs	r2, #0
 800c390:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c394:	f000 f868 	bl	800c468 <_lseek_r>
 800c398:	89a3      	ldrh	r3, [r4, #12]
 800c39a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c39e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c3a2:	81a3      	strh	r3, [r4, #12]
 800c3a4:	4632      	mov	r2, r6
 800c3a6:	463b      	mov	r3, r7
 800c3a8:	4628      	mov	r0, r5
 800c3aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c3ae:	f000 b817 	b.w	800c3e0 <_write_r>

0800c3b2 <__sseek>:
 800c3b2:	b510      	push	{r4, lr}
 800c3b4:	460c      	mov	r4, r1
 800c3b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3ba:	f000 f855 	bl	800c468 <_lseek_r>
 800c3be:	1c43      	adds	r3, r0, #1
 800c3c0:	89a3      	ldrh	r3, [r4, #12]
 800c3c2:	bf15      	itete	ne
 800c3c4:	6560      	strne	r0, [r4, #84]	; 0x54
 800c3c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c3ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c3ce:	81a3      	strheq	r3, [r4, #12]
 800c3d0:	bf18      	it	ne
 800c3d2:	81a3      	strhne	r3, [r4, #12]
 800c3d4:	bd10      	pop	{r4, pc}

0800c3d6 <__sclose>:
 800c3d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3da:	f000 b813 	b.w	800c404 <_close_r>
	...

0800c3e0 <_write_r>:
 800c3e0:	b538      	push	{r3, r4, r5, lr}
 800c3e2:	4c07      	ldr	r4, [pc, #28]	; (800c400 <_write_r+0x20>)
 800c3e4:	4605      	mov	r5, r0
 800c3e6:	4608      	mov	r0, r1
 800c3e8:	4611      	mov	r1, r2
 800c3ea:	2200      	movs	r2, #0
 800c3ec:	6022      	str	r2, [r4, #0]
 800c3ee:	461a      	mov	r2, r3
 800c3f0:	f7f7 f88a 	bl	8003508 <_write>
 800c3f4:	1c43      	adds	r3, r0, #1
 800c3f6:	d102      	bne.n	800c3fe <_write_r+0x1e>
 800c3f8:	6823      	ldr	r3, [r4, #0]
 800c3fa:	b103      	cbz	r3, 800c3fe <_write_r+0x1e>
 800c3fc:	602b      	str	r3, [r5, #0]
 800c3fe:	bd38      	pop	{r3, r4, r5, pc}
 800c400:	2000055c 	.word	0x2000055c

0800c404 <_close_r>:
 800c404:	b538      	push	{r3, r4, r5, lr}
 800c406:	4c06      	ldr	r4, [pc, #24]	; (800c420 <_close_r+0x1c>)
 800c408:	2300      	movs	r3, #0
 800c40a:	4605      	mov	r5, r0
 800c40c:	4608      	mov	r0, r1
 800c40e:	6023      	str	r3, [r4, #0]
 800c410:	f7f8 f999 	bl	8004746 <_close>
 800c414:	1c43      	adds	r3, r0, #1
 800c416:	d102      	bne.n	800c41e <_close_r+0x1a>
 800c418:	6823      	ldr	r3, [r4, #0]
 800c41a:	b103      	cbz	r3, 800c41e <_close_r+0x1a>
 800c41c:	602b      	str	r3, [r5, #0]
 800c41e:	bd38      	pop	{r3, r4, r5, pc}
 800c420:	2000055c 	.word	0x2000055c

0800c424 <_fstat_r>:
 800c424:	b538      	push	{r3, r4, r5, lr}
 800c426:	4c07      	ldr	r4, [pc, #28]	; (800c444 <_fstat_r+0x20>)
 800c428:	2300      	movs	r3, #0
 800c42a:	4605      	mov	r5, r0
 800c42c:	4608      	mov	r0, r1
 800c42e:	4611      	mov	r1, r2
 800c430:	6023      	str	r3, [r4, #0]
 800c432:	f7f8 f994 	bl	800475e <_fstat>
 800c436:	1c43      	adds	r3, r0, #1
 800c438:	d102      	bne.n	800c440 <_fstat_r+0x1c>
 800c43a:	6823      	ldr	r3, [r4, #0]
 800c43c:	b103      	cbz	r3, 800c440 <_fstat_r+0x1c>
 800c43e:	602b      	str	r3, [r5, #0]
 800c440:	bd38      	pop	{r3, r4, r5, pc}
 800c442:	bf00      	nop
 800c444:	2000055c 	.word	0x2000055c

0800c448 <_isatty_r>:
 800c448:	b538      	push	{r3, r4, r5, lr}
 800c44a:	4c06      	ldr	r4, [pc, #24]	; (800c464 <_isatty_r+0x1c>)
 800c44c:	2300      	movs	r3, #0
 800c44e:	4605      	mov	r5, r0
 800c450:	4608      	mov	r0, r1
 800c452:	6023      	str	r3, [r4, #0]
 800c454:	f7f8 f993 	bl	800477e <_isatty>
 800c458:	1c43      	adds	r3, r0, #1
 800c45a:	d102      	bne.n	800c462 <_isatty_r+0x1a>
 800c45c:	6823      	ldr	r3, [r4, #0]
 800c45e:	b103      	cbz	r3, 800c462 <_isatty_r+0x1a>
 800c460:	602b      	str	r3, [r5, #0]
 800c462:	bd38      	pop	{r3, r4, r5, pc}
 800c464:	2000055c 	.word	0x2000055c

0800c468 <_lseek_r>:
 800c468:	b538      	push	{r3, r4, r5, lr}
 800c46a:	4c07      	ldr	r4, [pc, #28]	; (800c488 <_lseek_r+0x20>)
 800c46c:	4605      	mov	r5, r0
 800c46e:	4608      	mov	r0, r1
 800c470:	4611      	mov	r1, r2
 800c472:	2200      	movs	r2, #0
 800c474:	6022      	str	r2, [r4, #0]
 800c476:	461a      	mov	r2, r3
 800c478:	f7f8 f98c 	bl	8004794 <_lseek>
 800c47c:	1c43      	adds	r3, r0, #1
 800c47e:	d102      	bne.n	800c486 <_lseek_r+0x1e>
 800c480:	6823      	ldr	r3, [r4, #0]
 800c482:	b103      	cbz	r3, 800c486 <_lseek_r+0x1e>
 800c484:	602b      	str	r3, [r5, #0]
 800c486:	bd38      	pop	{r3, r4, r5, pc}
 800c488:	2000055c 	.word	0x2000055c

0800c48c <__ascii_mbtowc>:
 800c48c:	b082      	sub	sp, #8
 800c48e:	b901      	cbnz	r1, 800c492 <__ascii_mbtowc+0x6>
 800c490:	a901      	add	r1, sp, #4
 800c492:	b142      	cbz	r2, 800c4a6 <__ascii_mbtowc+0x1a>
 800c494:	b14b      	cbz	r3, 800c4aa <__ascii_mbtowc+0x1e>
 800c496:	7813      	ldrb	r3, [r2, #0]
 800c498:	600b      	str	r3, [r1, #0]
 800c49a:	7812      	ldrb	r2, [r2, #0]
 800c49c:	1c10      	adds	r0, r2, #0
 800c49e:	bf18      	it	ne
 800c4a0:	2001      	movne	r0, #1
 800c4a2:	b002      	add	sp, #8
 800c4a4:	4770      	bx	lr
 800c4a6:	4610      	mov	r0, r2
 800c4a8:	e7fb      	b.n	800c4a2 <__ascii_mbtowc+0x16>
 800c4aa:	f06f 0001 	mvn.w	r0, #1
 800c4ae:	e7f8      	b.n	800c4a2 <__ascii_mbtowc+0x16>

0800c4b0 <__malloc_lock>:
 800c4b0:	4770      	bx	lr

0800c4b2 <__malloc_unlock>:
 800c4b2:	4770      	bx	lr

0800c4b4 <_read_r>:
 800c4b4:	b538      	push	{r3, r4, r5, lr}
 800c4b6:	4c07      	ldr	r4, [pc, #28]	; (800c4d4 <_read_r+0x20>)
 800c4b8:	4605      	mov	r5, r0
 800c4ba:	4608      	mov	r0, r1
 800c4bc:	4611      	mov	r1, r2
 800c4be:	2200      	movs	r2, #0
 800c4c0:	6022      	str	r2, [r4, #0]
 800c4c2:	461a      	mov	r2, r3
 800c4c4:	f7f8 f922 	bl	800470c <_read>
 800c4c8:	1c43      	adds	r3, r0, #1
 800c4ca:	d102      	bne.n	800c4d2 <_read_r+0x1e>
 800c4cc:	6823      	ldr	r3, [r4, #0]
 800c4ce:	b103      	cbz	r3, 800c4d2 <_read_r+0x1e>
 800c4d0:	602b      	str	r3, [r5, #0]
 800c4d2:	bd38      	pop	{r3, r4, r5, pc}
 800c4d4:	2000055c 	.word	0x2000055c

0800c4d8 <__ascii_wctomb>:
 800c4d8:	b149      	cbz	r1, 800c4ee <__ascii_wctomb+0x16>
 800c4da:	2aff      	cmp	r2, #255	; 0xff
 800c4dc:	bf85      	ittet	hi
 800c4de:	238a      	movhi	r3, #138	; 0x8a
 800c4e0:	6003      	strhi	r3, [r0, #0]
 800c4e2:	700a      	strbls	r2, [r1, #0]
 800c4e4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800c4e8:	bf98      	it	ls
 800c4ea:	2001      	movls	r0, #1
 800c4ec:	4770      	bx	lr
 800c4ee:	4608      	mov	r0, r1
 800c4f0:	4770      	bx	lr
	...

0800c4f4 <asinf>:
 800c4f4:	b510      	push	{r4, lr}
 800c4f6:	ed2d 8b02 	vpush	{d8}
 800c4fa:	4c27      	ldr	r4, [pc, #156]	; (800c598 <asinf+0xa4>)
 800c4fc:	b08a      	sub	sp, #40	; 0x28
 800c4fe:	eeb0 8a40 	vmov.f32	s16, s0
 800c502:	f000 f9b5 	bl	800c870 <__ieee754_asinf>
 800c506:	f994 3000 	ldrsb.w	r3, [r4]
 800c50a:	3301      	adds	r3, #1
 800c50c:	eef0 8a40 	vmov.f32	s17, s0
 800c510:	d03c      	beq.n	800c58c <asinf+0x98>
 800c512:	eeb4 8a48 	vcmp.f32	s16, s16
 800c516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c51a:	d637      	bvs.n	800c58c <asinf+0x98>
 800c51c:	eeb0 0a48 	vmov.f32	s0, s16
 800c520:	f000 fede 	bl	800d2e0 <fabsf>
 800c524:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c528:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800c52c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c530:	dd2c      	ble.n	800c58c <asinf+0x98>
 800c532:	2301      	movs	r3, #1
 800c534:	9300      	str	r3, [sp, #0]
 800c536:	4b19      	ldr	r3, [pc, #100]	; (800c59c <asinf+0xa8>)
 800c538:	9301      	str	r3, [sp, #4]
 800c53a:	ee18 0a10 	vmov	r0, s16
 800c53e:	2300      	movs	r3, #0
 800c540:	9308      	str	r3, [sp, #32]
 800c542:	f7f4 f801 	bl	8000548 <__aeabi_f2d>
 800c546:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c54a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c54e:	4814      	ldr	r0, [pc, #80]	; (800c5a0 <asinf+0xac>)
 800c550:	f000 fdea 	bl	800d128 <nan>
 800c554:	f994 3000 	ldrsb.w	r3, [r4]
 800c558:	2b02      	cmp	r3, #2
 800c55a:	ed8d 0b06 	vstr	d0, [sp, #24]
 800c55e:	d104      	bne.n	800c56a <asinf+0x76>
 800c560:	f7fd fc0c 	bl	8009d7c <__errno>
 800c564:	2321      	movs	r3, #33	; 0x21
 800c566:	6003      	str	r3, [r0, #0]
 800c568:	e004      	b.n	800c574 <asinf+0x80>
 800c56a:	4668      	mov	r0, sp
 800c56c:	f000 fdd9 	bl	800d122 <matherr>
 800c570:	2800      	cmp	r0, #0
 800c572:	d0f5      	beq.n	800c560 <asinf+0x6c>
 800c574:	9b08      	ldr	r3, [sp, #32]
 800c576:	b11b      	cbz	r3, 800c580 <asinf+0x8c>
 800c578:	f7fd fc00 	bl	8009d7c <__errno>
 800c57c:	9b08      	ldr	r3, [sp, #32]
 800c57e:	6003      	str	r3, [r0, #0]
 800c580:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c584:	f7f4 fb10 	bl	8000ba8 <__aeabi_d2f>
 800c588:	ee08 0a90 	vmov	s17, r0
 800c58c:	eeb0 0a68 	vmov.f32	s0, s17
 800c590:	b00a      	add	sp, #40	; 0x28
 800c592:	ecbd 8b02 	vpop	{d8}
 800c596:	bd10      	pop	{r4, pc}
 800c598:	200001e0 	.word	0x200001e0
 800c59c:	0800dab8 	.word	0x0800dab8
 800c5a0:	0800d9a1 	.word	0x0800d9a1

0800c5a4 <atan2f>:
 800c5a4:	f000 ba4c 	b.w	800ca40 <__ieee754_atan2f>

0800c5a8 <powf>:
 800c5a8:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 800c5ac:	ed2d 8b04 	vpush	{d8-d9}
 800c5b0:	4ca7      	ldr	r4, [pc, #668]	; (800c850 <powf+0x2a8>)
 800c5b2:	b08a      	sub	sp, #40	; 0x28
 800c5b4:	eef0 8a40 	vmov.f32	s17, s0
 800c5b8:	eeb0 8a60 	vmov.f32	s16, s1
 800c5bc:	f000 faee 	bl	800cb9c <__ieee754_powf>
 800c5c0:	f994 5000 	ldrsb.w	r5, [r4]
 800c5c4:	1c6b      	adds	r3, r5, #1
 800c5c6:	eeb0 9a40 	vmov.f32	s18, s0
 800c5ca:	4626      	mov	r6, r4
 800c5cc:	d05f      	beq.n	800c68e <powf+0xe6>
 800c5ce:	eeb4 8a48 	vcmp.f32	s16, s16
 800c5d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5d6:	d65a      	bvs.n	800c68e <powf+0xe6>
 800c5d8:	eef4 8a68 	vcmp.f32	s17, s17
 800c5dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5e0:	d721      	bvc.n	800c626 <powf+0x7e>
 800c5e2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800c5e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5ea:	d150      	bne.n	800c68e <powf+0xe6>
 800c5ec:	2301      	movs	r3, #1
 800c5ee:	9300      	str	r3, [sp, #0]
 800c5f0:	4b98      	ldr	r3, [pc, #608]	; (800c854 <powf+0x2ac>)
 800c5f2:	9301      	str	r3, [sp, #4]
 800c5f4:	ee18 0a90 	vmov	r0, s17
 800c5f8:	2300      	movs	r3, #0
 800c5fa:	9308      	str	r3, [sp, #32]
 800c5fc:	f7f3 ffa4 	bl	8000548 <__aeabi_f2d>
 800c600:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c604:	ee18 0a10 	vmov	r0, s16
 800c608:	f7f3 ff9e 	bl	8000548 <__aeabi_f2d>
 800c60c:	4b92      	ldr	r3, [pc, #584]	; (800c858 <powf+0x2b0>)
 800c60e:	2200      	movs	r2, #0
 800c610:	2d02      	cmp	r5, #2
 800c612:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c616:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c61a:	d032      	beq.n	800c682 <powf+0xda>
 800c61c:	4668      	mov	r0, sp
 800c61e:	f000 fd80 	bl	800d122 <matherr>
 800c622:	bb40      	cbnz	r0, 800c676 <powf+0xce>
 800c624:	e065      	b.n	800c6f2 <powf+0x14a>
 800c626:	eddf 9a8d 	vldr	s19, [pc, #564]	; 800c85c <powf+0x2b4>
 800c62a:	eef4 8a69 	vcmp.f32	s17, s19
 800c62e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c632:	d163      	bne.n	800c6fc <powf+0x154>
 800c634:	eeb4 8a69 	vcmp.f32	s16, s19
 800c638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c63c:	d12e      	bne.n	800c69c <powf+0xf4>
 800c63e:	2301      	movs	r3, #1
 800c640:	9300      	str	r3, [sp, #0]
 800c642:	4b84      	ldr	r3, [pc, #528]	; (800c854 <powf+0x2ac>)
 800c644:	9301      	str	r3, [sp, #4]
 800c646:	ee18 0a90 	vmov	r0, s17
 800c64a:	2300      	movs	r3, #0
 800c64c:	9308      	str	r3, [sp, #32]
 800c64e:	f7f3 ff7b 	bl	8000548 <__aeabi_f2d>
 800c652:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c656:	ee18 0a10 	vmov	r0, s16
 800c65a:	f7f3 ff75 	bl	8000548 <__aeabi_f2d>
 800c65e:	2200      	movs	r2, #0
 800c660:	2300      	movs	r3, #0
 800c662:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c666:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c66a:	2d00      	cmp	r5, #0
 800c66c:	d0d6      	beq.n	800c61c <powf+0x74>
 800c66e:	4b7a      	ldr	r3, [pc, #488]	; (800c858 <powf+0x2b0>)
 800c670:	2200      	movs	r2, #0
 800c672:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c676:	9b08      	ldr	r3, [sp, #32]
 800c678:	b11b      	cbz	r3, 800c682 <powf+0xda>
 800c67a:	f7fd fb7f 	bl	8009d7c <__errno>
 800c67e:	9b08      	ldr	r3, [sp, #32]
 800c680:	6003      	str	r3, [r0, #0]
 800c682:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c686:	f7f4 fa8f 	bl	8000ba8 <__aeabi_d2f>
 800c68a:	ee09 0a10 	vmov	s18, r0
 800c68e:	eeb0 0a49 	vmov.f32	s0, s18
 800c692:	b00a      	add	sp, #40	; 0x28
 800c694:	ecbd 8b04 	vpop	{d8-d9}
 800c698:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800c69c:	eeb0 0a48 	vmov.f32	s0, s16
 800c6a0:	f000 fe25 	bl	800d2ee <finitef>
 800c6a4:	2800      	cmp	r0, #0
 800c6a6:	d0f2      	beq.n	800c68e <powf+0xe6>
 800c6a8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800c6ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6b0:	d5ed      	bpl.n	800c68e <powf+0xe6>
 800c6b2:	2301      	movs	r3, #1
 800c6b4:	9300      	str	r3, [sp, #0]
 800c6b6:	4b67      	ldr	r3, [pc, #412]	; (800c854 <powf+0x2ac>)
 800c6b8:	9301      	str	r3, [sp, #4]
 800c6ba:	ee18 0a90 	vmov	r0, s17
 800c6be:	2300      	movs	r3, #0
 800c6c0:	9308      	str	r3, [sp, #32]
 800c6c2:	f7f3 ff41 	bl	8000548 <__aeabi_f2d>
 800c6c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c6ca:	ee18 0a10 	vmov	r0, s16
 800c6ce:	f7f3 ff3b 	bl	8000548 <__aeabi_f2d>
 800c6d2:	f994 3000 	ldrsb.w	r3, [r4]
 800c6d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c6da:	b923      	cbnz	r3, 800c6e6 <powf+0x13e>
 800c6dc:	2200      	movs	r2, #0
 800c6de:	2300      	movs	r3, #0
 800c6e0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c6e4:	e79a      	b.n	800c61c <powf+0x74>
 800c6e6:	495e      	ldr	r1, [pc, #376]	; (800c860 <powf+0x2b8>)
 800c6e8:	2000      	movs	r0, #0
 800c6ea:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c6ee:	2b02      	cmp	r3, #2
 800c6f0:	d194      	bne.n	800c61c <powf+0x74>
 800c6f2:	f7fd fb43 	bl	8009d7c <__errno>
 800c6f6:	2321      	movs	r3, #33	; 0x21
 800c6f8:	6003      	str	r3, [r0, #0]
 800c6fa:	e7bc      	b.n	800c676 <powf+0xce>
 800c6fc:	f000 fdf7 	bl	800d2ee <finitef>
 800c700:	4605      	mov	r5, r0
 800c702:	2800      	cmp	r0, #0
 800c704:	d173      	bne.n	800c7ee <powf+0x246>
 800c706:	eeb0 0a68 	vmov.f32	s0, s17
 800c70a:	f000 fdf0 	bl	800d2ee <finitef>
 800c70e:	2800      	cmp	r0, #0
 800c710:	d06d      	beq.n	800c7ee <powf+0x246>
 800c712:	eeb0 0a48 	vmov.f32	s0, s16
 800c716:	f000 fdea 	bl	800d2ee <finitef>
 800c71a:	2800      	cmp	r0, #0
 800c71c:	d067      	beq.n	800c7ee <powf+0x246>
 800c71e:	ee18 0a90 	vmov	r0, s17
 800c722:	f7f3 ff11 	bl	8000548 <__aeabi_f2d>
 800c726:	4680      	mov	r8, r0
 800c728:	ee18 0a10 	vmov	r0, s16
 800c72c:	4689      	mov	r9, r1
 800c72e:	f7f3 ff0b 	bl	8000548 <__aeabi_f2d>
 800c732:	eeb4 9a49 	vcmp.f32	s18, s18
 800c736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c73a:	f994 4000 	ldrsb.w	r4, [r4]
 800c73e:	4b45      	ldr	r3, [pc, #276]	; (800c854 <powf+0x2ac>)
 800c740:	d713      	bvc.n	800c76a <powf+0x1c2>
 800c742:	2201      	movs	r2, #1
 800c744:	e9cd 2300 	strd	r2, r3, [sp]
 800c748:	9508      	str	r5, [sp, #32]
 800c74a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800c74e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c752:	2c00      	cmp	r4, #0
 800c754:	d0c2      	beq.n	800c6dc <powf+0x134>
 800c756:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 800c75a:	ee17 0a90 	vmov	r0, s15
 800c75e:	f7f3 fef3 	bl	8000548 <__aeabi_f2d>
 800c762:	2c02      	cmp	r4, #2
 800c764:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c768:	e7c2      	b.n	800c6f0 <powf+0x148>
 800c76a:	2203      	movs	r2, #3
 800c76c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800c770:	e9cd 2300 	strd	r2, r3, [sp]
 800c774:	9508      	str	r5, [sp, #32]
 800c776:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800c77a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c77e:	ee28 8a27 	vmul.f32	s16, s16, s15
 800c782:	b9fc      	cbnz	r4, 800c7c4 <powf+0x21c>
 800c784:	4b37      	ldr	r3, [pc, #220]	; (800c864 <powf+0x2bc>)
 800c786:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800c78a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800c78e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c792:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c796:	d553      	bpl.n	800c840 <powf+0x298>
 800c798:	eeb0 0a48 	vmov.f32	s0, s16
 800c79c:	f000 fdb8 	bl	800d310 <rintf>
 800c7a0:	eeb4 0a48 	vcmp.f32	s0, s16
 800c7a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7a8:	d004      	beq.n	800c7b4 <powf+0x20c>
 800c7aa:	4b2f      	ldr	r3, [pc, #188]	; (800c868 <powf+0x2c0>)
 800c7ac:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800c7b0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c7b4:	f996 3000 	ldrsb.w	r3, [r6]
 800c7b8:	2b02      	cmp	r3, #2
 800c7ba:	d141      	bne.n	800c840 <powf+0x298>
 800c7bc:	f7fd fade 	bl	8009d7c <__errno>
 800c7c0:	2322      	movs	r3, #34	; 0x22
 800c7c2:	e799      	b.n	800c6f8 <powf+0x150>
 800c7c4:	4b29      	ldr	r3, [pc, #164]	; (800c86c <powf+0x2c4>)
 800c7c6:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7d0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c7d4:	d5ee      	bpl.n	800c7b4 <powf+0x20c>
 800c7d6:	eeb0 0a48 	vmov.f32	s0, s16
 800c7da:	f000 fd99 	bl	800d310 <rintf>
 800c7de:	eeb4 0a48 	vcmp.f32	s0, s16
 800c7e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7e6:	d0e5      	beq.n	800c7b4 <powf+0x20c>
 800c7e8:	2200      	movs	r2, #0
 800c7ea:	4b1d      	ldr	r3, [pc, #116]	; (800c860 <powf+0x2b8>)
 800c7ec:	e7e0      	b.n	800c7b0 <powf+0x208>
 800c7ee:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800c7f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7f6:	f47f af4a 	bne.w	800c68e <powf+0xe6>
 800c7fa:	eeb0 0a68 	vmov.f32	s0, s17
 800c7fe:	f000 fd76 	bl	800d2ee <finitef>
 800c802:	2800      	cmp	r0, #0
 800c804:	f43f af43 	beq.w	800c68e <powf+0xe6>
 800c808:	eeb0 0a48 	vmov.f32	s0, s16
 800c80c:	f000 fd6f 	bl	800d2ee <finitef>
 800c810:	2800      	cmp	r0, #0
 800c812:	f43f af3c 	beq.w	800c68e <powf+0xe6>
 800c816:	2304      	movs	r3, #4
 800c818:	9300      	str	r3, [sp, #0]
 800c81a:	4b0e      	ldr	r3, [pc, #56]	; (800c854 <powf+0x2ac>)
 800c81c:	9301      	str	r3, [sp, #4]
 800c81e:	ee18 0a90 	vmov	r0, s17
 800c822:	2300      	movs	r3, #0
 800c824:	9308      	str	r3, [sp, #32]
 800c826:	f7f3 fe8f 	bl	8000548 <__aeabi_f2d>
 800c82a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c82e:	ee18 0a10 	vmov	r0, s16
 800c832:	f7f3 fe89 	bl	8000548 <__aeabi_f2d>
 800c836:	2200      	movs	r2, #0
 800c838:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c83c:	2300      	movs	r3, #0
 800c83e:	e7b7      	b.n	800c7b0 <powf+0x208>
 800c840:	4668      	mov	r0, sp
 800c842:	f000 fc6e 	bl	800d122 <matherr>
 800c846:	2800      	cmp	r0, #0
 800c848:	f47f af15 	bne.w	800c676 <powf+0xce>
 800c84c:	e7b6      	b.n	800c7bc <powf+0x214>
 800c84e:	bf00      	nop
 800c850:	200001e0 	.word	0x200001e0
 800c854:	0800dabe 	.word	0x0800dabe
 800c858:	3ff00000 	.word	0x3ff00000
 800c85c:	00000000 	.word	0x00000000
 800c860:	fff00000 	.word	0xfff00000
 800c864:	47efffff 	.word	0x47efffff
 800c868:	c7efffff 	.word	0xc7efffff
 800c86c:	7ff00000 	.word	0x7ff00000

0800c870 <__ieee754_asinf>:
 800c870:	b538      	push	{r3, r4, r5, lr}
 800c872:	ee10 5a10 	vmov	r5, s0
 800c876:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800c87a:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800c87e:	ed2d 8b04 	vpush	{d8-d9}
 800c882:	d10c      	bne.n	800c89e <__ieee754_asinf+0x2e>
 800c884:	eddf 7a5e 	vldr	s15, [pc, #376]	; 800ca00 <__ieee754_asinf+0x190>
 800c888:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 800ca04 <__ieee754_asinf+0x194>
 800c88c:	ee60 7a27 	vmul.f32	s15, s0, s15
 800c890:	eee0 7a07 	vfma.f32	s15, s0, s14
 800c894:	eeb0 0a67 	vmov.f32	s0, s15
 800c898:	ecbd 8b04 	vpop	{d8-d9}
 800c89c:	bd38      	pop	{r3, r4, r5, pc}
 800c89e:	dd04      	ble.n	800c8aa <__ieee754_asinf+0x3a>
 800c8a0:	ee70 7a40 	vsub.f32	s15, s0, s0
 800c8a4:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800c8a8:	e7f6      	b.n	800c898 <__ieee754_asinf+0x28>
 800c8aa:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800c8ae:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800c8b2:	da0b      	bge.n	800c8cc <__ieee754_asinf+0x5c>
 800c8b4:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800c8b8:	da52      	bge.n	800c960 <__ieee754_asinf+0xf0>
 800c8ba:	eddf 7a53 	vldr	s15, [pc, #332]	; 800ca08 <__ieee754_asinf+0x198>
 800c8be:	ee70 7a27 	vadd.f32	s15, s0, s15
 800c8c2:	eef4 7ae8 	vcmpe.f32	s15, s17
 800c8c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8ca:	dce5      	bgt.n	800c898 <__ieee754_asinf+0x28>
 800c8cc:	f000 fd08 	bl	800d2e0 <fabsf>
 800c8d0:	ee38 0ac0 	vsub.f32	s0, s17, s0
 800c8d4:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800c8d8:	ee20 8a08 	vmul.f32	s16, s0, s16
 800c8dc:	eddf 7a4b 	vldr	s15, [pc, #300]	; 800ca0c <__ieee754_asinf+0x19c>
 800c8e0:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800ca10 <__ieee754_asinf+0x1a0>
 800c8e4:	ed9f 9a4b 	vldr	s18, [pc, #300]	; 800ca14 <__ieee754_asinf+0x1a4>
 800c8e8:	eea8 7a27 	vfma.f32	s14, s16, s15
 800c8ec:	eddf 7a4a 	vldr	s15, [pc, #296]	; 800ca18 <__ieee754_asinf+0x1a8>
 800c8f0:	eee7 7a08 	vfma.f32	s15, s14, s16
 800c8f4:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800ca1c <__ieee754_asinf+0x1ac>
 800c8f8:	eea7 7a88 	vfma.f32	s14, s15, s16
 800c8fc:	eddf 7a48 	vldr	s15, [pc, #288]	; 800ca20 <__ieee754_asinf+0x1b0>
 800c900:	eee7 7a08 	vfma.f32	s15, s14, s16
 800c904:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800ca24 <__ieee754_asinf+0x1b4>
 800c908:	eea7 9a88 	vfma.f32	s18, s15, s16
 800c90c:	eddf 7a46 	vldr	s15, [pc, #280]	; 800ca28 <__ieee754_asinf+0x1b8>
 800c910:	eee8 7a07 	vfma.f32	s15, s16, s14
 800c914:	ed9f 7a45 	vldr	s14, [pc, #276]	; 800ca2c <__ieee754_asinf+0x1bc>
 800c918:	eea7 7a88 	vfma.f32	s14, s15, s16
 800c91c:	eddf 7a44 	vldr	s15, [pc, #272]	; 800ca30 <__ieee754_asinf+0x1c0>
 800c920:	eee7 7a08 	vfma.f32	s15, s14, s16
 800c924:	eeb0 0a48 	vmov.f32	s0, s16
 800c928:	eee7 8a88 	vfma.f32	s17, s15, s16
 800c92c:	f000 fbf6 	bl	800d11c <__ieee754_sqrtf>
 800c930:	4b40      	ldr	r3, [pc, #256]	; (800ca34 <__ieee754_asinf+0x1c4>)
 800c932:	ee29 9a08 	vmul.f32	s18, s18, s16
 800c936:	429c      	cmp	r4, r3
 800c938:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800c93c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800c940:	dd3d      	ble.n	800c9be <__ieee754_asinf+0x14e>
 800c942:	eea0 0a06 	vfma.f32	s0, s0, s12
 800c946:	eddf 7a3c 	vldr	s15, [pc, #240]	; 800ca38 <__ieee754_asinf+0x1c8>
 800c94a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800c94e:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 800ca04 <__ieee754_asinf+0x194>
 800c952:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c956:	2d00      	cmp	r5, #0
 800c958:	bfd8      	it	le
 800c95a:	eeb1 0a40 	vnegle.f32	s0, s0
 800c95e:	e79b      	b.n	800c898 <__ieee754_asinf+0x28>
 800c960:	ee60 7a00 	vmul.f32	s15, s0, s0
 800c964:	eddf 6a29 	vldr	s13, [pc, #164]	; 800ca0c <__ieee754_asinf+0x19c>
 800c968:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800ca10 <__ieee754_asinf+0x1a0>
 800c96c:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 800ca24 <__ieee754_asinf+0x1b4>
 800c970:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800c974:	eddf 6a28 	vldr	s13, [pc, #160]	; 800ca18 <__ieee754_asinf+0x1a8>
 800c978:	eee7 6a27 	vfma.f32	s13, s14, s15
 800c97c:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800ca1c <__ieee754_asinf+0x1ac>
 800c980:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c984:	eddf 6a26 	vldr	s13, [pc, #152]	; 800ca20 <__ieee754_asinf+0x1b0>
 800c988:	eee7 6a27 	vfma.f32	s13, s14, s15
 800c98c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800ca14 <__ieee754_asinf+0x1a4>
 800c990:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c994:	eddf 6a24 	vldr	s13, [pc, #144]	; 800ca28 <__ieee754_asinf+0x1b8>
 800c998:	eee7 6a86 	vfma.f32	s13, s15, s12
 800c99c:	ed9f 6a23 	vldr	s12, [pc, #140]	; 800ca2c <__ieee754_asinf+0x1bc>
 800c9a0:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800c9a4:	eddf 6a22 	vldr	s13, [pc, #136]	; 800ca30 <__ieee754_asinf+0x1c0>
 800c9a8:	eee6 6a27 	vfma.f32	s13, s12, s15
 800c9ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c9b0:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800c9b4:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800c9b8:	eea0 0a27 	vfma.f32	s0, s0, s15
 800c9bc:	e76c      	b.n	800c898 <__ieee754_asinf+0x28>
 800c9be:	ee10 3a10 	vmov	r3, s0
 800c9c2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800c9c6:	f023 030f 	bic.w	r3, r3, #15
 800c9ca:	ee07 3a90 	vmov	s15, r3
 800c9ce:	eef1 6a67 	vneg.f32	s13, s15
 800c9d2:	eea6 8aa7 	vfma.f32	s16, s13, s15
 800c9d6:	ee70 5a00 	vadd.f32	s11, s0, s0
 800c9da:	ee37 0a80 	vadd.f32	s0, s15, s0
 800c9de:	eddf 7a08 	vldr	s15, [pc, #32]	; 800ca00 <__ieee754_asinf+0x190>
 800c9e2:	ee88 5a00 	vdiv.f32	s10, s16, s0
 800c9e6:	ed9f 0a15 	vldr	s0, [pc, #84]	; 800ca3c <__ieee754_asinf+0x1cc>
 800c9ea:	eee5 7a47 	vfms.f32	s15, s10, s14
 800c9ee:	eed5 7a86 	vfnms.f32	s15, s11, s12
 800c9f2:	eeb0 6a40 	vmov.f32	s12, s0
 800c9f6:	eea6 6a87 	vfma.f32	s12, s13, s14
 800c9fa:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800c9fe:	e7a8      	b.n	800c952 <__ieee754_asinf+0xe2>
 800ca00:	b33bbd2e 	.word	0xb33bbd2e
 800ca04:	3fc90fdb 	.word	0x3fc90fdb
 800ca08:	7149f2ca 	.word	0x7149f2ca
 800ca0c:	3811ef08 	.word	0x3811ef08
 800ca10:	3a4f7f04 	.word	0x3a4f7f04
 800ca14:	3e2aaaab 	.word	0x3e2aaaab
 800ca18:	bd241146 	.word	0xbd241146
 800ca1c:	3e4e0aa8 	.word	0x3e4e0aa8
 800ca20:	bea6b090 	.word	0xbea6b090
 800ca24:	3d9dc62e 	.word	0x3d9dc62e
 800ca28:	bf303361 	.word	0xbf303361
 800ca2c:	4001572d 	.word	0x4001572d
 800ca30:	c019d139 	.word	0xc019d139
 800ca34:	3f799999 	.word	0x3f799999
 800ca38:	333bbd2e 	.word	0x333bbd2e
 800ca3c:	3f490fdb 	.word	0x3f490fdb

0800ca40 <__ieee754_atan2f>:
 800ca40:	ee10 2a90 	vmov	r2, s1
 800ca44:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800ca48:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800ca4c:	b510      	push	{r4, lr}
 800ca4e:	eef0 7a40 	vmov.f32	s15, s0
 800ca52:	dc06      	bgt.n	800ca62 <__ieee754_atan2f+0x22>
 800ca54:	ee10 0a10 	vmov	r0, s0
 800ca58:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800ca5c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800ca60:	dd04      	ble.n	800ca6c <__ieee754_atan2f+0x2c>
 800ca62:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800ca66:	eeb0 0a67 	vmov.f32	s0, s15
 800ca6a:	bd10      	pop	{r4, pc}
 800ca6c:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800ca70:	d103      	bne.n	800ca7a <__ieee754_atan2f+0x3a>
 800ca72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca76:	f000 bb5f 	b.w	800d138 <atanf>
 800ca7a:	1794      	asrs	r4, r2, #30
 800ca7c:	f004 0402 	and.w	r4, r4, #2
 800ca80:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800ca84:	b943      	cbnz	r3, 800ca98 <__ieee754_atan2f+0x58>
 800ca86:	2c02      	cmp	r4, #2
 800ca88:	d06e      	beq.n	800cb68 <__ieee754_atan2f+0x128>
 800ca8a:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800cb70 <__ieee754_atan2f+0x130>
 800ca8e:	2c03      	cmp	r4, #3
 800ca90:	bf08      	it	eq
 800ca92:	eef0 7a47 	vmoveq.f32	s15, s14
 800ca96:	e7e6      	b.n	800ca66 <__ieee754_atan2f+0x26>
 800ca98:	b941      	cbnz	r1, 800caac <__ieee754_atan2f+0x6c>
 800ca9a:	eddf 7a36 	vldr	s15, [pc, #216]	; 800cb74 <__ieee754_atan2f+0x134>
 800ca9e:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800cb78 <__ieee754_atan2f+0x138>
 800caa2:	2800      	cmp	r0, #0
 800caa4:	bfb8      	it	lt
 800caa6:	eef0 7a47 	vmovlt.f32	s15, s14
 800caaa:	e7dc      	b.n	800ca66 <__ieee754_atan2f+0x26>
 800caac:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800cab0:	d122      	bne.n	800caf8 <__ieee754_atan2f+0xb8>
 800cab2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800cab6:	d112      	bne.n	800cade <__ieee754_atan2f+0x9e>
 800cab8:	2c02      	cmp	r4, #2
 800caba:	d00a      	beq.n	800cad2 <__ieee754_atan2f+0x92>
 800cabc:	2c03      	cmp	r4, #3
 800cabe:	d00b      	beq.n	800cad8 <__ieee754_atan2f+0x98>
 800cac0:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800cb7c <__ieee754_atan2f+0x13c>
 800cac4:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800cb80 <__ieee754_atan2f+0x140>
 800cac8:	2c01      	cmp	r4, #1
 800caca:	bf18      	it	ne
 800cacc:	eef0 7a47 	vmovne.f32	s15, s14
 800cad0:	e7c9      	b.n	800ca66 <__ieee754_atan2f+0x26>
 800cad2:	eddf 7a2c 	vldr	s15, [pc, #176]	; 800cb84 <__ieee754_atan2f+0x144>
 800cad6:	e7c6      	b.n	800ca66 <__ieee754_atan2f+0x26>
 800cad8:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800cb88 <__ieee754_atan2f+0x148>
 800cadc:	e7c3      	b.n	800ca66 <__ieee754_atan2f+0x26>
 800cade:	2c02      	cmp	r4, #2
 800cae0:	d042      	beq.n	800cb68 <__ieee754_atan2f+0x128>
 800cae2:	2c03      	cmp	r4, #3
 800cae4:	d005      	beq.n	800caf2 <__ieee754_atan2f+0xb2>
 800cae6:	2c01      	cmp	r4, #1
 800cae8:	eddf 7a28 	vldr	s15, [pc, #160]	; 800cb8c <__ieee754_atan2f+0x14c>
 800caec:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800cb90 <__ieee754_atan2f+0x150>
 800caf0:	e7eb      	b.n	800caca <__ieee754_atan2f+0x8a>
 800caf2:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800cb70 <__ieee754_atan2f+0x130>
 800caf6:	e7b6      	b.n	800ca66 <__ieee754_atan2f+0x26>
 800caf8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800cafc:	d0cd      	beq.n	800ca9a <__ieee754_atan2f+0x5a>
 800cafe:	1a5b      	subs	r3, r3, r1
 800cb00:	15db      	asrs	r3, r3, #23
 800cb02:	2b3c      	cmp	r3, #60	; 0x3c
 800cb04:	dc1a      	bgt.n	800cb3c <__ieee754_atan2f+0xfc>
 800cb06:	2a00      	cmp	r2, #0
 800cb08:	da01      	bge.n	800cb0e <__ieee754_atan2f+0xce>
 800cb0a:	333c      	adds	r3, #60	; 0x3c
 800cb0c:	db19      	blt.n	800cb42 <__ieee754_atan2f+0x102>
 800cb0e:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800cb12:	f000 fbe5 	bl	800d2e0 <fabsf>
 800cb16:	f000 fb0f 	bl	800d138 <atanf>
 800cb1a:	eef0 7a40 	vmov.f32	s15, s0
 800cb1e:	2c01      	cmp	r4, #1
 800cb20:	d012      	beq.n	800cb48 <__ieee754_atan2f+0x108>
 800cb22:	2c02      	cmp	r4, #2
 800cb24:	d017      	beq.n	800cb56 <__ieee754_atan2f+0x116>
 800cb26:	2c00      	cmp	r4, #0
 800cb28:	d09d      	beq.n	800ca66 <__ieee754_atan2f+0x26>
 800cb2a:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800cb94 <__ieee754_atan2f+0x154>
 800cb2e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cb32:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800cb98 <__ieee754_atan2f+0x158>
 800cb36:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cb3a:	e794      	b.n	800ca66 <__ieee754_atan2f+0x26>
 800cb3c:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800cb74 <__ieee754_atan2f+0x134>
 800cb40:	e7ed      	b.n	800cb1e <__ieee754_atan2f+0xde>
 800cb42:	eddf 7a13 	vldr	s15, [pc, #76]	; 800cb90 <__ieee754_atan2f+0x150>
 800cb46:	e7ea      	b.n	800cb1e <__ieee754_atan2f+0xde>
 800cb48:	ee17 3a90 	vmov	r3, s15
 800cb4c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800cb50:	ee07 3a90 	vmov	s15, r3
 800cb54:	e787      	b.n	800ca66 <__ieee754_atan2f+0x26>
 800cb56:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800cb94 <__ieee754_atan2f+0x154>
 800cb5a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cb5e:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800cb98 <__ieee754_atan2f+0x158>
 800cb62:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cb66:	e77e      	b.n	800ca66 <__ieee754_atan2f+0x26>
 800cb68:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800cb98 <__ieee754_atan2f+0x158>
 800cb6c:	e77b      	b.n	800ca66 <__ieee754_atan2f+0x26>
 800cb6e:	bf00      	nop
 800cb70:	c0490fdb 	.word	0xc0490fdb
 800cb74:	3fc90fdb 	.word	0x3fc90fdb
 800cb78:	bfc90fdb 	.word	0xbfc90fdb
 800cb7c:	bf490fdb 	.word	0xbf490fdb
 800cb80:	3f490fdb 	.word	0x3f490fdb
 800cb84:	4016cbe4 	.word	0x4016cbe4
 800cb88:	c016cbe4 	.word	0xc016cbe4
 800cb8c:	80000000 	.word	0x80000000
 800cb90:	00000000 	.word	0x00000000
 800cb94:	33bbbd2e 	.word	0x33bbbd2e
 800cb98:	40490fdb 	.word	0x40490fdb

0800cb9c <__ieee754_powf>:
 800cb9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cba0:	ee10 5a90 	vmov	r5, s1
 800cba4:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 800cba8:	ed2d 8b02 	vpush	{d8}
 800cbac:	eeb0 8a40 	vmov.f32	s16, s0
 800cbb0:	eef0 8a60 	vmov.f32	s17, s1
 800cbb4:	f000 8293 	beq.w	800d0de <__ieee754_powf+0x542>
 800cbb8:	ee10 8a10 	vmov	r8, s0
 800cbbc:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 800cbc0:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800cbc4:	dc06      	bgt.n	800cbd4 <__ieee754_powf+0x38>
 800cbc6:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800cbca:	dd0a      	ble.n	800cbe2 <__ieee754_powf+0x46>
 800cbcc:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800cbd0:	f000 8285 	beq.w	800d0de <__ieee754_powf+0x542>
 800cbd4:	ecbd 8b02 	vpop	{d8}
 800cbd8:	48d9      	ldr	r0, [pc, #868]	; (800cf40 <__ieee754_powf+0x3a4>)
 800cbda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cbde:	f000 bb91 	b.w	800d304 <nanf>
 800cbe2:	f1b8 0f00 	cmp.w	r8, #0
 800cbe6:	da1d      	bge.n	800cc24 <__ieee754_powf+0x88>
 800cbe8:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 800cbec:	da2c      	bge.n	800cc48 <__ieee754_powf+0xac>
 800cbee:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800cbf2:	db30      	blt.n	800cc56 <__ieee754_powf+0xba>
 800cbf4:	15fb      	asrs	r3, r7, #23
 800cbf6:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800cbfa:	fa47 f603 	asr.w	r6, r7, r3
 800cbfe:	fa06 f303 	lsl.w	r3, r6, r3
 800cc02:	42bb      	cmp	r3, r7
 800cc04:	d127      	bne.n	800cc56 <__ieee754_powf+0xba>
 800cc06:	f006 0601 	and.w	r6, r6, #1
 800cc0a:	f1c6 0602 	rsb	r6, r6, #2
 800cc0e:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800cc12:	d122      	bne.n	800cc5a <__ieee754_powf+0xbe>
 800cc14:	2d00      	cmp	r5, #0
 800cc16:	f280 8268 	bge.w	800d0ea <__ieee754_powf+0x54e>
 800cc1a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800cc1e:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800cc22:	e00d      	b.n	800cc40 <__ieee754_powf+0xa4>
 800cc24:	2600      	movs	r6, #0
 800cc26:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800cc2a:	d1f0      	bne.n	800cc0e <__ieee754_powf+0x72>
 800cc2c:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800cc30:	f000 8255 	beq.w	800d0de <__ieee754_powf+0x542>
 800cc34:	dd0a      	ble.n	800cc4c <__ieee754_powf+0xb0>
 800cc36:	2d00      	cmp	r5, #0
 800cc38:	f280 8254 	bge.w	800d0e4 <__ieee754_powf+0x548>
 800cc3c:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 800cf44 <__ieee754_powf+0x3a8>
 800cc40:	ecbd 8b02 	vpop	{d8}
 800cc44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc48:	2602      	movs	r6, #2
 800cc4a:	e7ec      	b.n	800cc26 <__ieee754_powf+0x8a>
 800cc4c:	2d00      	cmp	r5, #0
 800cc4e:	daf5      	bge.n	800cc3c <__ieee754_powf+0xa0>
 800cc50:	eeb1 0a68 	vneg.f32	s0, s17
 800cc54:	e7f4      	b.n	800cc40 <__ieee754_powf+0xa4>
 800cc56:	2600      	movs	r6, #0
 800cc58:	e7d9      	b.n	800cc0e <__ieee754_powf+0x72>
 800cc5a:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 800cc5e:	d102      	bne.n	800cc66 <__ieee754_powf+0xca>
 800cc60:	ee28 0a08 	vmul.f32	s0, s16, s16
 800cc64:	e7ec      	b.n	800cc40 <__ieee754_powf+0xa4>
 800cc66:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 800cc6a:	eeb0 0a48 	vmov.f32	s0, s16
 800cc6e:	d108      	bne.n	800cc82 <__ieee754_powf+0xe6>
 800cc70:	f1b8 0f00 	cmp.w	r8, #0
 800cc74:	db05      	blt.n	800cc82 <__ieee754_powf+0xe6>
 800cc76:	ecbd 8b02 	vpop	{d8}
 800cc7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cc7e:	f000 ba4d 	b.w	800d11c <__ieee754_sqrtf>
 800cc82:	f000 fb2d 	bl	800d2e0 <fabsf>
 800cc86:	b124      	cbz	r4, 800cc92 <__ieee754_powf+0xf6>
 800cc88:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 800cc8c:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800cc90:	d117      	bne.n	800ccc2 <__ieee754_powf+0x126>
 800cc92:	2d00      	cmp	r5, #0
 800cc94:	bfbc      	itt	lt
 800cc96:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800cc9a:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800cc9e:	f1b8 0f00 	cmp.w	r8, #0
 800cca2:	dacd      	bge.n	800cc40 <__ieee754_powf+0xa4>
 800cca4:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 800cca8:	ea54 0306 	orrs.w	r3, r4, r6
 800ccac:	d104      	bne.n	800ccb8 <__ieee754_powf+0x11c>
 800ccae:	ee70 7a40 	vsub.f32	s15, s0, s0
 800ccb2:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800ccb6:	e7c3      	b.n	800cc40 <__ieee754_powf+0xa4>
 800ccb8:	2e01      	cmp	r6, #1
 800ccba:	d1c1      	bne.n	800cc40 <__ieee754_powf+0xa4>
 800ccbc:	eeb1 0a40 	vneg.f32	s0, s0
 800ccc0:	e7be      	b.n	800cc40 <__ieee754_powf+0xa4>
 800ccc2:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 800ccc6:	3801      	subs	r0, #1
 800ccc8:	ea56 0300 	orrs.w	r3, r6, r0
 800cccc:	d104      	bne.n	800ccd8 <__ieee754_powf+0x13c>
 800ccce:	ee38 8a48 	vsub.f32	s16, s16, s16
 800ccd2:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800ccd6:	e7b3      	b.n	800cc40 <__ieee754_powf+0xa4>
 800ccd8:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 800ccdc:	dd6d      	ble.n	800cdba <__ieee754_powf+0x21e>
 800ccde:	4b9a      	ldr	r3, [pc, #616]	; (800cf48 <__ieee754_powf+0x3ac>)
 800cce0:	429c      	cmp	r4, r3
 800cce2:	dc06      	bgt.n	800ccf2 <__ieee754_powf+0x156>
 800cce4:	2d00      	cmp	r5, #0
 800cce6:	daa9      	bge.n	800cc3c <__ieee754_powf+0xa0>
 800cce8:	ed9f 0a98 	vldr	s0, [pc, #608]	; 800cf4c <__ieee754_powf+0x3b0>
 800ccec:	ee20 0a00 	vmul.f32	s0, s0, s0
 800ccf0:	e7a6      	b.n	800cc40 <__ieee754_powf+0xa4>
 800ccf2:	4b97      	ldr	r3, [pc, #604]	; (800cf50 <__ieee754_powf+0x3b4>)
 800ccf4:	429c      	cmp	r4, r3
 800ccf6:	dd02      	ble.n	800ccfe <__ieee754_powf+0x162>
 800ccf8:	2d00      	cmp	r5, #0
 800ccfa:	dcf5      	bgt.n	800cce8 <__ieee754_powf+0x14c>
 800ccfc:	e79e      	b.n	800cc3c <__ieee754_powf+0xa0>
 800ccfe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800cd02:	ee30 0a67 	vsub.f32	s0, s0, s15
 800cd06:	ed9f 7a93 	vldr	s14, [pc, #588]	; 800cf54 <__ieee754_powf+0x3b8>
 800cd0a:	eef1 6a40 	vneg.f32	s13, s0
 800cd0e:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800cd12:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800cd16:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800cd1a:	eee7 7a40 	vfms.f32	s15, s14, s0
 800cd1e:	ee60 0a00 	vmul.f32	s1, s0, s0
 800cd22:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 800cf58 <__ieee754_powf+0x3bc>
 800cd26:	ee67 0aa0 	vmul.f32	s1, s15, s1
 800cd2a:	eddf 7a8c 	vldr	s15, [pc, #560]	; 800cf5c <__ieee754_powf+0x3c0>
 800cd2e:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 800cd32:	eee0 7a07 	vfma.f32	s15, s0, s14
 800cd36:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800cf60 <__ieee754_powf+0x3c4>
 800cd3a:	eeb0 6a67 	vmov.f32	s12, s15
 800cd3e:	eea0 6a07 	vfma.f32	s12, s0, s14
 800cd42:	ee16 3a10 	vmov	r3, s12
 800cd46:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800cd4a:	f023 030f 	bic.w	r3, r3, #15
 800cd4e:	ee00 3a90 	vmov	s1, r3
 800cd52:	eee6 0a87 	vfma.f32	s1, s13, s14
 800cd56:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800cd5a:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 800cd5e:	f025 050f 	bic.w	r5, r5, #15
 800cd62:	ee07 5a10 	vmov	s14, r5
 800cd66:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800cd6a:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800cd6e:	ee07 3a90 	vmov	s15, r3
 800cd72:	eee7 0a27 	vfma.f32	s1, s14, s15
 800cd76:	3e01      	subs	r6, #1
 800cd78:	ea56 0200 	orrs.w	r2, r6, r0
 800cd7c:	ee07 5a10 	vmov	s14, r5
 800cd80:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cd84:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800cd88:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800cd8c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800cd90:	ee17 4a10 	vmov	r4, s14
 800cd94:	bf08      	it	eq
 800cd96:	eeb0 8a40 	vmoveq.f32	s16, s0
 800cd9a:	2c00      	cmp	r4, #0
 800cd9c:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800cda0:	f340 8184 	ble.w	800d0ac <__ieee754_powf+0x510>
 800cda4:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800cda8:	f340 80fc 	ble.w	800cfa4 <__ieee754_powf+0x408>
 800cdac:	eddf 7a67 	vldr	s15, [pc, #412]	; 800cf4c <__ieee754_powf+0x3b0>
 800cdb0:	ee28 0a27 	vmul.f32	s0, s16, s15
 800cdb4:	ee20 0a27 	vmul.f32	s0, s0, s15
 800cdb8:	e742      	b.n	800cc40 <__ieee754_powf+0xa4>
 800cdba:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 800cdbe:	bfbf      	itttt	lt
 800cdc0:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 800cf64 <__ieee754_powf+0x3c8>
 800cdc4:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800cdc8:	f06f 0217 	mvnlt.w	r2, #23
 800cdcc:	ee17 4a90 	vmovlt	r4, s15
 800cdd0:	ea4f 53e4 	mov.w	r3, r4, asr #23
 800cdd4:	bfa8      	it	ge
 800cdd6:	2200      	movge	r2, #0
 800cdd8:	3b7f      	subs	r3, #127	; 0x7f
 800cdda:	4413      	add	r3, r2
 800cddc:	4a62      	ldr	r2, [pc, #392]	; (800cf68 <__ieee754_powf+0x3cc>)
 800cdde:	f3c4 0416 	ubfx	r4, r4, #0, #23
 800cde2:	4294      	cmp	r4, r2
 800cde4:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 800cde8:	dd06      	ble.n	800cdf8 <__ieee754_powf+0x25c>
 800cdea:	4a60      	ldr	r2, [pc, #384]	; (800cf6c <__ieee754_powf+0x3d0>)
 800cdec:	4294      	cmp	r4, r2
 800cdee:	f340 80a5 	ble.w	800cf3c <__ieee754_powf+0x3a0>
 800cdf2:	3301      	adds	r3, #1
 800cdf4:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800cdf8:	2400      	movs	r4, #0
 800cdfa:	4a5d      	ldr	r2, [pc, #372]	; (800cf70 <__ieee754_powf+0x3d4>)
 800cdfc:	00a7      	lsls	r7, r4, #2
 800cdfe:	443a      	add	r2, r7
 800ce00:	ee07 1a90 	vmov	s15, r1
 800ce04:	ed92 7a00 	vldr	s14, [r2]
 800ce08:	4a5a      	ldr	r2, [pc, #360]	; (800cf74 <__ieee754_powf+0x3d8>)
 800ce0a:	ee37 6a27 	vadd.f32	s12, s14, s15
 800ce0e:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800ce12:	eec5 6a06 	vdiv.f32	s13, s10, s12
 800ce16:	1049      	asrs	r1, r1, #1
 800ce18:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800ce1c:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800ce20:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 800ce24:	ee77 5ac7 	vsub.f32	s11, s15, s14
 800ce28:	ee06 1a10 	vmov	s12, r1
 800ce2c:	ee65 4aa6 	vmul.f32	s9, s11, s13
 800ce30:	ee14 ca90 	vmov	ip, s9
 800ce34:	ea02 0c0c 	and.w	ip, r2, ip
 800ce38:	ee05 ca10 	vmov	s10, ip
 800ce3c:	eeb1 4a45 	vneg.f32	s8, s10
 800ce40:	eee4 5a06 	vfma.f32	s11, s8, s12
 800ce44:	ee36 6a47 	vsub.f32	s12, s12, s14
 800ce48:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800cf78 <__ieee754_powf+0x3dc>
 800ce4c:	ee37 6ac6 	vsub.f32	s12, s15, s12
 800ce50:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800ce54:	eee4 5a06 	vfma.f32	s11, s8, s12
 800ce58:	ee67 3aa7 	vmul.f32	s7, s15, s15
 800ce5c:	ee25 6aa6 	vmul.f32	s12, s11, s13
 800ce60:	eddf 5a46 	vldr	s11, [pc, #280]	; 800cf7c <__ieee754_powf+0x3e0>
 800ce64:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800ce68:	eddf 5a45 	vldr	s11, [pc, #276]	; 800cf80 <__ieee754_powf+0x3e4>
 800ce6c:	eee7 5a27 	vfma.f32	s11, s14, s15
 800ce70:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800cf54 <__ieee754_powf+0x3b8>
 800ce74:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800ce78:	eddf 5a42 	vldr	s11, [pc, #264]	; 800cf84 <__ieee754_powf+0x3e8>
 800ce7c:	eee7 5a27 	vfma.f32	s11, s14, s15
 800ce80:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800cf88 <__ieee754_powf+0x3ec>
 800ce84:	ee75 6a24 	vadd.f32	s13, s10, s9
 800ce88:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800ce8c:	ee66 6a86 	vmul.f32	s13, s13, s12
 800ce90:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 800ce94:	eef0 7a65 	vmov.f32	s15, s11
 800ce98:	eee3 6a87 	vfma.f32	s13, s7, s14
 800ce9c:	eee5 7a05 	vfma.f32	s15, s10, s10
 800cea0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cea4:	ee17 1a90 	vmov	r1, s15
 800cea8:	4011      	ands	r1, r2
 800ceaa:	ee07 1a90 	vmov	s15, r1
 800ceae:	ee37 7ae5 	vsub.f32	s14, s15, s11
 800ceb2:	eddf 5a36 	vldr	s11, [pc, #216]	; 800cf8c <__ieee754_powf+0x3f0>
 800ceb6:	eea4 7a05 	vfma.f32	s14, s8, s10
 800ceba:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800cebe:	ee27 7a24 	vmul.f32	s14, s14, s9
 800cec2:	eea7 7a86 	vfma.f32	s14, s15, s12
 800cec6:	eeb0 6a47 	vmov.f32	s12, s14
 800ceca:	eea5 6a27 	vfma.f32	s12, s10, s15
 800cece:	ee16 1a10 	vmov	r1, s12
 800ced2:	4011      	ands	r1, r2
 800ced4:	ee06 1a90 	vmov	s13, r1
 800ced8:	eee4 6a27 	vfma.f32	s13, s8, s15
 800cedc:	eddf 7a2c 	vldr	s15, [pc, #176]	; 800cf90 <__ieee754_powf+0x3f4>
 800cee0:	ee37 7a66 	vsub.f32	s14, s14, s13
 800cee4:	ee06 1a10 	vmov	s12, r1
 800cee8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ceec:	eddf 7a29 	vldr	s15, [pc, #164]	; 800cf94 <__ieee754_powf+0x3f8>
 800cef0:	4929      	ldr	r1, [pc, #164]	; (800cf98 <__ieee754_powf+0x3fc>)
 800cef2:	eea6 7a27 	vfma.f32	s14, s12, s15
 800cef6:	4439      	add	r1, r7
 800cef8:	edd1 7a00 	vldr	s15, [r1]
 800cefc:	ee37 7a27 	vadd.f32	s14, s14, s15
 800cf00:	ee07 3a90 	vmov	s15, r3
 800cf04:	eef0 0a47 	vmov.f32	s1, s14
 800cf08:	4b24      	ldr	r3, [pc, #144]	; (800cf9c <__ieee754_powf+0x400>)
 800cf0a:	eee6 0a25 	vfma.f32	s1, s12, s11
 800cf0e:	443b      	add	r3, r7
 800cf10:	ed93 5a00 	vldr	s10, [r3]
 800cf14:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800cf18:	ee70 0a85 	vadd.f32	s1, s1, s10
 800cf1c:	ee70 7aa6 	vadd.f32	s15, s1, s13
 800cf20:	ee17 3a90 	vmov	r3, s15
 800cf24:	4013      	ands	r3, r2
 800cf26:	ee07 3a90 	vmov	s15, r3
 800cf2a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800cf2e:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800cf32:	eee6 7a65 	vfms.f32	s15, s12, s11
 800cf36:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cf3a:	e70e      	b.n	800cd5a <__ieee754_powf+0x1be>
 800cf3c:	2401      	movs	r4, #1
 800cf3e:	e75c      	b.n	800cdfa <__ieee754_powf+0x25e>
 800cf40:	0800d9a1 	.word	0x0800d9a1
 800cf44:	00000000 	.word	0x00000000
 800cf48:	3f7ffff7 	.word	0x3f7ffff7
 800cf4c:	7149f2ca 	.word	0x7149f2ca
 800cf50:	3f800007 	.word	0x3f800007
 800cf54:	3eaaaaab 	.word	0x3eaaaaab
 800cf58:	36eca570 	.word	0x36eca570
 800cf5c:	3fb8aa3b 	.word	0x3fb8aa3b
 800cf60:	3fb8aa00 	.word	0x3fb8aa00
 800cf64:	4b800000 	.word	0x4b800000
 800cf68:	001cc471 	.word	0x001cc471
 800cf6c:	005db3d6 	.word	0x005db3d6
 800cf70:	0800dac4 	.word	0x0800dac4
 800cf74:	fffff000 	.word	0xfffff000
 800cf78:	3e6c3255 	.word	0x3e6c3255
 800cf7c:	3e53f142 	.word	0x3e53f142
 800cf80:	3e8ba305 	.word	0x3e8ba305
 800cf84:	3edb6db7 	.word	0x3edb6db7
 800cf88:	3f19999a 	.word	0x3f19999a
 800cf8c:	3f763800 	.word	0x3f763800
 800cf90:	3f76384f 	.word	0x3f76384f
 800cf94:	369dc3a0 	.word	0x369dc3a0
 800cf98:	0800dad4 	.word	0x0800dad4
 800cf9c:	0800dacc 	.word	0x0800dacc
 800cfa0:	3338aa3c 	.word	0x3338aa3c
 800cfa4:	f040 8092 	bne.w	800d0cc <__ieee754_powf+0x530>
 800cfa8:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800cfa0 <__ieee754_powf+0x404>
 800cfac:	ee37 7a67 	vsub.f32	s14, s14, s15
 800cfb0:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800cfb4:	eef4 6ac7 	vcmpe.f32	s13, s14
 800cfb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfbc:	f73f aef6 	bgt.w	800cdac <__ieee754_powf+0x210>
 800cfc0:	15db      	asrs	r3, r3, #23
 800cfc2:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800cfc6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800cfca:	4103      	asrs	r3, r0
 800cfcc:	4423      	add	r3, r4
 800cfce:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800cfd2:	4947      	ldr	r1, [pc, #284]	; (800d0f0 <__ieee754_powf+0x554>)
 800cfd4:	3a7f      	subs	r2, #127	; 0x7f
 800cfd6:	4111      	asrs	r1, r2
 800cfd8:	ea23 0101 	bic.w	r1, r3, r1
 800cfdc:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800cfe0:	ee07 1a10 	vmov	s14, r1
 800cfe4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800cfe8:	f1c2 0217 	rsb	r2, r2, #23
 800cfec:	4110      	asrs	r0, r2
 800cfee:	2c00      	cmp	r4, #0
 800cff0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cff4:	bfb8      	it	lt
 800cff6:	4240      	neglt	r0, r0
 800cff8:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800cffc:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d0f4 <__ieee754_powf+0x558>
 800d000:	ee17 3a10 	vmov	r3, s14
 800d004:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800d008:	f023 030f 	bic.w	r3, r3, #15
 800d00c:	ee07 3a10 	vmov	s14, r3
 800d010:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d014:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800d018:	eddf 7a37 	vldr	s15, [pc, #220]	; 800d0f8 <__ieee754_powf+0x55c>
 800d01c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d020:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800d024:	eddf 6a35 	vldr	s13, [pc, #212]	; 800d0fc <__ieee754_powf+0x560>
 800d028:	eeb0 0a67 	vmov.f32	s0, s15
 800d02c:	eea7 0a26 	vfma.f32	s0, s14, s13
 800d030:	eeb0 6a40 	vmov.f32	s12, s0
 800d034:	eea7 6a66 	vfms.f32	s12, s14, s13
 800d038:	ee20 7a00 	vmul.f32	s14, s0, s0
 800d03c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800d040:	eddf 6a2f 	vldr	s13, [pc, #188]	; 800d100 <__ieee754_powf+0x564>
 800d044:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800d104 <__ieee754_powf+0x568>
 800d048:	eea7 6a26 	vfma.f32	s12, s14, s13
 800d04c:	eddf 6a2e 	vldr	s13, [pc, #184]	; 800d108 <__ieee754_powf+0x56c>
 800d050:	eee6 6a07 	vfma.f32	s13, s12, s14
 800d054:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 800d10c <__ieee754_powf+0x570>
 800d058:	eea6 6a87 	vfma.f32	s12, s13, s14
 800d05c:	eddf 6a2c 	vldr	s13, [pc, #176]	; 800d110 <__ieee754_powf+0x574>
 800d060:	eee6 6a07 	vfma.f32	s13, s12, s14
 800d064:	eeb0 6a40 	vmov.f32	s12, s0
 800d068:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800d06c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800d070:	eeb0 7a46 	vmov.f32	s14, s12
 800d074:	ee77 6a66 	vsub.f32	s13, s14, s13
 800d078:	ee20 6a06 	vmul.f32	s12, s0, s12
 800d07c:	eee0 7a27 	vfma.f32	s15, s0, s15
 800d080:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800d084:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d088:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800d08c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d090:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800d094:	ee10 3a10 	vmov	r3, s0
 800d098:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800d09c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d0a0:	da1a      	bge.n	800d0d8 <__ieee754_powf+0x53c>
 800d0a2:	f000 f98f 	bl	800d3c4 <scalbnf>
 800d0a6:	ee20 0a08 	vmul.f32	s0, s0, s16
 800d0aa:	e5c9      	b.n	800cc40 <__ieee754_powf+0xa4>
 800d0ac:	4a19      	ldr	r2, [pc, #100]	; (800d114 <__ieee754_powf+0x578>)
 800d0ae:	4293      	cmp	r3, r2
 800d0b0:	dd02      	ble.n	800d0b8 <__ieee754_powf+0x51c>
 800d0b2:	eddf 7a19 	vldr	s15, [pc, #100]	; 800d118 <__ieee754_powf+0x57c>
 800d0b6:	e67b      	b.n	800cdb0 <__ieee754_powf+0x214>
 800d0b8:	d108      	bne.n	800d0cc <__ieee754_powf+0x530>
 800d0ba:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d0be:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800d0c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0c6:	f6ff af7b 	blt.w	800cfc0 <__ieee754_powf+0x424>
 800d0ca:	e7f2      	b.n	800d0b2 <__ieee754_powf+0x516>
 800d0cc:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800d0d0:	f73f af76 	bgt.w	800cfc0 <__ieee754_powf+0x424>
 800d0d4:	2000      	movs	r0, #0
 800d0d6:	e78f      	b.n	800cff8 <__ieee754_powf+0x45c>
 800d0d8:	ee00 3a10 	vmov	s0, r3
 800d0dc:	e7e3      	b.n	800d0a6 <__ieee754_powf+0x50a>
 800d0de:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d0e2:	e5ad      	b.n	800cc40 <__ieee754_powf+0xa4>
 800d0e4:	eeb0 0a68 	vmov.f32	s0, s17
 800d0e8:	e5aa      	b.n	800cc40 <__ieee754_powf+0xa4>
 800d0ea:	eeb0 0a48 	vmov.f32	s0, s16
 800d0ee:	e5a7      	b.n	800cc40 <__ieee754_powf+0xa4>
 800d0f0:	007fffff 	.word	0x007fffff
 800d0f4:	3f317218 	.word	0x3f317218
 800d0f8:	35bfbe8c 	.word	0x35bfbe8c
 800d0fc:	3f317200 	.word	0x3f317200
 800d100:	3331bb4c 	.word	0x3331bb4c
 800d104:	b5ddea0e 	.word	0xb5ddea0e
 800d108:	388ab355 	.word	0x388ab355
 800d10c:	bb360b61 	.word	0xbb360b61
 800d110:	3e2aaaab 	.word	0x3e2aaaab
 800d114:	43160000 	.word	0x43160000
 800d118:	0da24260 	.word	0x0da24260

0800d11c <__ieee754_sqrtf>:
 800d11c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800d120:	4770      	bx	lr

0800d122 <matherr>:
 800d122:	2000      	movs	r0, #0
 800d124:	4770      	bx	lr
	...

0800d128 <nan>:
 800d128:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d130 <nan+0x8>
 800d12c:	4770      	bx	lr
 800d12e:	bf00      	nop
 800d130:	00000000 	.word	0x00000000
 800d134:	7ff80000 	.word	0x7ff80000

0800d138 <atanf>:
 800d138:	b538      	push	{r3, r4, r5, lr}
 800d13a:	ee10 5a10 	vmov	r5, s0
 800d13e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800d142:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800d146:	eef0 7a40 	vmov.f32	s15, s0
 800d14a:	db10      	blt.n	800d16e <atanf+0x36>
 800d14c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800d150:	dd04      	ble.n	800d15c <atanf+0x24>
 800d152:	ee70 7a00 	vadd.f32	s15, s0, s0
 800d156:	eeb0 0a67 	vmov.f32	s0, s15
 800d15a:	bd38      	pop	{r3, r4, r5, pc}
 800d15c:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800d294 <atanf+0x15c>
 800d160:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800d298 <atanf+0x160>
 800d164:	2d00      	cmp	r5, #0
 800d166:	bfd8      	it	le
 800d168:	eef0 7a47 	vmovle.f32	s15, s14
 800d16c:	e7f3      	b.n	800d156 <atanf+0x1e>
 800d16e:	4b4b      	ldr	r3, [pc, #300]	; (800d29c <atanf+0x164>)
 800d170:	429c      	cmp	r4, r3
 800d172:	dc10      	bgt.n	800d196 <atanf+0x5e>
 800d174:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800d178:	da0a      	bge.n	800d190 <atanf+0x58>
 800d17a:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800d2a0 <atanf+0x168>
 800d17e:	ee30 7a07 	vadd.f32	s14, s0, s14
 800d182:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d186:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800d18a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d18e:	dce2      	bgt.n	800d156 <atanf+0x1e>
 800d190:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d194:	e013      	b.n	800d1be <atanf+0x86>
 800d196:	f000 f8a3 	bl	800d2e0 <fabsf>
 800d19a:	4b42      	ldr	r3, [pc, #264]	; (800d2a4 <atanf+0x16c>)
 800d19c:	429c      	cmp	r4, r3
 800d19e:	dc4f      	bgt.n	800d240 <atanf+0x108>
 800d1a0:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800d1a4:	429c      	cmp	r4, r3
 800d1a6:	dc41      	bgt.n	800d22c <atanf+0xf4>
 800d1a8:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800d1ac:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800d1b0:	eea0 7a27 	vfma.f32	s14, s0, s15
 800d1b4:	2300      	movs	r3, #0
 800d1b6:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d1ba:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800d1be:	1c5a      	adds	r2, r3, #1
 800d1c0:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800d1c4:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800d2a8 <atanf+0x170>
 800d1c8:	eddf 5a38 	vldr	s11, [pc, #224]	; 800d2ac <atanf+0x174>
 800d1cc:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800d2b0 <atanf+0x178>
 800d1d0:	ee66 6a06 	vmul.f32	s13, s12, s12
 800d1d4:	eee6 5a87 	vfma.f32	s11, s13, s14
 800d1d8:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800d2b4 <atanf+0x17c>
 800d1dc:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800d1e0:	eddf 5a35 	vldr	s11, [pc, #212]	; 800d2b8 <atanf+0x180>
 800d1e4:	eee7 5a26 	vfma.f32	s11, s14, s13
 800d1e8:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800d2bc <atanf+0x184>
 800d1ec:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800d1f0:	eddf 5a33 	vldr	s11, [pc, #204]	; 800d2c0 <atanf+0x188>
 800d1f4:	eee7 5a26 	vfma.f32	s11, s14, s13
 800d1f8:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800d2c4 <atanf+0x18c>
 800d1fc:	eea6 5a87 	vfma.f32	s10, s13, s14
 800d200:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800d2c8 <atanf+0x190>
 800d204:	eea5 7a26 	vfma.f32	s14, s10, s13
 800d208:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800d2cc <atanf+0x194>
 800d20c:	eea7 5a26 	vfma.f32	s10, s14, s13
 800d210:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800d2d0 <atanf+0x198>
 800d214:	eea5 7a26 	vfma.f32	s14, s10, s13
 800d218:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d21c:	eea5 7a86 	vfma.f32	s14, s11, s12
 800d220:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d224:	d121      	bne.n	800d26a <atanf+0x132>
 800d226:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d22a:	e794      	b.n	800d156 <atanf+0x1e>
 800d22c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d230:	ee30 7a67 	vsub.f32	s14, s0, s15
 800d234:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d238:	2301      	movs	r3, #1
 800d23a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800d23e:	e7be      	b.n	800d1be <atanf+0x86>
 800d240:	4b24      	ldr	r3, [pc, #144]	; (800d2d4 <atanf+0x19c>)
 800d242:	429c      	cmp	r4, r3
 800d244:	dc0b      	bgt.n	800d25e <atanf+0x126>
 800d246:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800d24a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d24e:	eea0 7a27 	vfma.f32	s14, s0, s15
 800d252:	2302      	movs	r3, #2
 800d254:	ee70 6a67 	vsub.f32	s13, s0, s15
 800d258:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d25c:	e7af      	b.n	800d1be <atanf+0x86>
 800d25e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800d262:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800d266:	2303      	movs	r3, #3
 800d268:	e7a9      	b.n	800d1be <atanf+0x86>
 800d26a:	4a1b      	ldr	r2, [pc, #108]	; (800d2d8 <atanf+0x1a0>)
 800d26c:	491b      	ldr	r1, [pc, #108]	; (800d2dc <atanf+0x1a4>)
 800d26e:	009b      	lsls	r3, r3, #2
 800d270:	441a      	add	r2, r3
 800d272:	440b      	add	r3, r1
 800d274:	edd3 6a00 	vldr	s13, [r3]
 800d278:	ee37 7a66 	vsub.f32	s14, s14, s13
 800d27c:	2d00      	cmp	r5, #0
 800d27e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d282:	ed92 7a00 	vldr	s14, [r2]
 800d286:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d28a:	bfb8      	it	lt
 800d28c:	eef1 7a67 	vneglt.f32	s15, s15
 800d290:	e761      	b.n	800d156 <atanf+0x1e>
 800d292:	bf00      	nop
 800d294:	bfc90fdb 	.word	0xbfc90fdb
 800d298:	3fc90fdb 	.word	0x3fc90fdb
 800d29c:	3edfffff 	.word	0x3edfffff
 800d2a0:	7149f2ca 	.word	0x7149f2ca
 800d2a4:	3f97ffff 	.word	0x3f97ffff
 800d2a8:	3c8569d7 	.word	0x3c8569d7
 800d2ac:	3d4bda59 	.word	0x3d4bda59
 800d2b0:	bd6ef16b 	.word	0xbd6ef16b
 800d2b4:	3d886b35 	.word	0x3d886b35
 800d2b8:	3dba2e6e 	.word	0x3dba2e6e
 800d2bc:	3e124925 	.word	0x3e124925
 800d2c0:	3eaaaaab 	.word	0x3eaaaaab
 800d2c4:	bd15a221 	.word	0xbd15a221
 800d2c8:	bd9d8795 	.word	0xbd9d8795
 800d2cc:	bde38e38 	.word	0xbde38e38
 800d2d0:	be4ccccd 	.word	0xbe4ccccd
 800d2d4:	401bffff 	.word	0x401bffff
 800d2d8:	0800dadc 	.word	0x0800dadc
 800d2dc:	0800daec 	.word	0x0800daec

0800d2e0 <fabsf>:
 800d2e0:	ee10 3a10 	vmov	r3, s0
 800d2e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d2e8:	ee00 3a10 	vmov	s0, r3
 800d2ec:	4770      	bx	lr

0800d2ee <finitef>:
 800d2ee:	ee10 3a10 	vmov	r3, s0
 800d2f2:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 800d2f6:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800d2fa:	bfac      	ite	ge
 800d2fc:	2000      	movge	r0, #0
 800d2fe:	2001      	movlt	r0, #1
 800d300:	4770      	bx	lr
	...

0800d304 <nanf>:
 800d304:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d30c <nanf+0x8>
 800d308:	4770      	bx	lr
 800d30a:	bf00      	nop
 800d30c:	7fc00000 	.word	0x7fc00000

0800d310 <rintf>:
 800d310:	b513      	push	{r0, r1, r4, lr}
 800d312:	ee10 1a10 	vmov	r1, s0
 800d316:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d31a:	0ddc      	lsrs	r4, r3, #23
 800d31c:	3c7f      	subs	r4, #127	; 0x7f
 800d31e:	2c16      	cmp	r4, #22
 800d320:	dc46      	bgt.n	800d3b0 <rintf+0xa0>
 800d322:	b32b      	cbz	r3, 800d370 <rintf+0x60>
 800d324:	2c00      	cmp	r4, #0
 800d326:	ee10 2a10 	vmov	r2, s0
 800d32a:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 800d32e:	da21      	bge.n	800d374 <rintf+0x64>
 800d330:	f3c1 0316 	ubfx	r3, r1, #0, #23
 800d334:	425b      	negs	r3, r3
 800d336:	4a21      	ldr	r2, [pc, #132]	; (800d3bc <rintf+0xac>)
 800d338:	0a5b      	lsrs	r3, r3, #9
 800d33a:	0d09      	lsrs	r1, r1, #20
 800d33c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d340:	0509      	lsls	r1, r1, #20
 800d342:	430b      	orrs	r3, r1
 800d344:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800d348:	ee07 3a90 	vmov	s15, r3
 800d34c:	edd2 6a00 	vldr	s13, [r2]
 800d350:	ee36 7aa7 	vadd.f32	s14, s13, s15
 800d354:	ed8d 7a01 	vstr	s14, [sp, #4]
 800d358:	eddd 7a01 	vldr	s15, [sp, #4]
 800d35c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d360:	ee17 3a90 	vmov	r3, s15
 800d364:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d368:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 800d36c:	ee00 3a10 	vmov	s0, r3
 800d370:	b002      	add	sp, #8
 800d372:	bd10      	pop	{r4, pc}
 800d374:	4b12      	ldr	r3, [pc, #72]	; (800d3c0 <rintf+0xb0>)
 800d376:	4123      	asrs	r3, r4
 800d378:	4219      	tst	r1, r3
 800d37a:	d0f9      	beq.n	800d370 <rintf+0x60>
 800d37c:	085b      	lsrs	r3, r3, #1
 800d37e:	4219      	tst	r1, r3
 800d380:	d006      	beq.n	800d390 <rintf+0x80>
 800d382:	ea21 0203 	bic.w	r2, r1, r3
 800d386:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800d38a:	fa43 f404 	asr.w	r4, r3, r4
 800d38e:	4322      	orrs	r2, r4
 800d390:	4b0a      	ldr	r3, [pc, #40]	; (800d3bc <rintf+0xac>)
 800d392:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d396:	ed90 7a00 	vldr	s14, [r0]
 800d39a:	ee07 2a90 	vmov	s15, r2
 800d39e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d3a2:	edcd 7a01 	vstr	s15, [sp, #4]
 800d3a6:	ed9d 0a01 	vldr	s0, [sp, #4]
 800d3aa:	ee30 0a47 	vsub.f32	s0, s0, s14
 800d3ae:	e7df      	b.n	800d370 <rintf+0x60>
 800d3b0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800d3b4:	d3dc      	bcc.n	800d370 <rintf+0x60>
 800d3b6:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d3ba:	e7d9      	b.n	800d370 <rintf+0x60>
 800d3bc:	0800dafc 	.word	0x0800dafc
 800d3c0:	007fffff 	.word	0x007fffff

0800d3c4 <scalbnf>:
 800d3c4:	b508      	push	{r3, lr}
 800d3c6:	ee10 2a10 	vmov	r2, s0
 800d3ca:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800d3ce:	ed2d 8b02 	vpush	{d8}
 800d3d2:	eef0 0a40 	vmov.f32	s1, s0
 800d3d6:	d004      	beq.n	800d3e2 <scalbnf+0x1e>
 800d3d8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800d3dc:	d306      	bcc.n	800d3ec <scalbnf+0x28>
 800d3de:	ee70 0a00 	vadd.f32	s1, s0, s0
 800d3e2:	ecbd 8b02 	vpop	{d8}
 800d3e6:	eeb0 0a60 	vmov.f32	s0, s1
 800d3ea:	bd08      	pop	{r3, pc}
 800d3ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d3f0:	d21c      	bcs.n	800d42c <scalbnf+0x68>
 800d3f2:	4b1f      	ldr	r3, [pc, #124]	; (800d470 <scalbnf+0xac>)
 800d3f4:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800d474 <scalbnf+0xb0>
 800d3f8:	4298      	cmp	r0, r3
 800d3fa:	ee60 0a27 	vmul.f32	s1, s0, s15
 800d3fe:	db10      	blt.n	800d422 <scalbnf+0x5e>
 800d400:	ee10 2a90 	vmov	r2, s1
 800d404:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 800d408:	3b19      	subs	r3, #25
 800d40a:	4403      	add	r3, r0
 800d40c:	2bfe      	cmp	r3, #254	; 0xfe
 800d40e:	dd0f      	ble.n	800d430 <scalbnf+0x6c>
 800d410:	ed9f 8a19 	vldr	s16, [pc, #100]	; 800d478 <scalbnf+0xb4>
 800d414:	eeb0 0a48 	vmov.f32	s0, s16
 800d418:	f000 f834 	bl	800d484 <copysignf>
 800d41c:	ee60 0a08 	vmul.f32	s1, s0, s16
 800d420:	e7df      	b.n	800d3e2 <scalbnf+0x1e>
 800d422:	eddf 7a16 	vldr	s15, [pc, #88]	; 800d47c <scalbnf+0xb8>
 800d426:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800d42a:	e7da      	b.n	800d3e2 <scalbnf+0x1e>
 800d42c:	0ddb      	lsrs	r3, r3, #23
 800d42e:	e7ec      	b.n	800d40a <scalbnf+0x46>
 800d430:	2b00      	cmp	r3, #0
 800d432:	dd06      	ble.n	800d442 <scalbnf+0x7e>
 800d434:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800d438:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800d43c:	ee00 3a90 	vmov	s1, r3
 800d440:	e7cf      	b.n	800d3e2 <scalbnf+0x1e>
 800d442:	f113 0f16 	cmn.w	r3, #22
 800d446:	da06      	bge.n	800d456 <scalbnf+0x92>
 800d448:	f24c 3350 	movw	r3, #50000	; 0xc350
 800d44c:	4298      	cmp	r0, r3
 800d44e:	dcdf      	bgt.n	800d410 <scalbnf+0x4c>
 800d450:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 800d47c <scalbnf+0xb8>
 800d454:	e7de      	b.n	800d414 <scalbnf+0x50>
 800d456:	3319      	adds	r3, #25
 800d458:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800d45c:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800d460:	eddf 7a07 	vldr	s15, [pc, #28]	; 800d480 <scalbnf+0xbc>
 800d464:	ee07 3a10 	vmov	s14, r3
 800d468:	ee67 0a27 	vmul.f32	s1, s14, s15
 800d46c:	e7b9      	b.n	800d3e2 <scalbnf+0x1e>
 800d46e:	bf00      	nop
 800d470:	ffff3cb0 	.word	0xffff3cb0
 800d474:	4c000000 	.word	0x4c000000
 800d478:	7149f2ca 	.word	0x7149f2ca
 800d47c:	0da24260 	.word	0x0da24260
 800d480:	33000000 	.word	0x33000000

0800d484 <copysignf>:
 800d484:	ee10 3a10 	vmov	r3, s0
 800d488:	ee10 2a90 	vmov	r2, s1
 800d48c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d490:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800d494:	4313      	orrs	r3, r2
 800d496:	ee00 3a10 	vmov	s0, r3
 800d49a:	4770      	bx	lr

0800d49c <_init>:
 800d49c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d49e:	bf00      	nop
 800d4a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d4a2:	bc08      	pop	{r3}
 800d4a4:	469e      	mov	lr, r3
 800d4a6:	4770      	bx	lr

0800d4a8 <_fini>:
 800d4a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4aa:	bf00      	nop
 800d4ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d4ae:	bc08      	pop	{r3}
 800d4b0:	469e      	mov	lr, r3
 800d4b2:	4770      	bx	lr
