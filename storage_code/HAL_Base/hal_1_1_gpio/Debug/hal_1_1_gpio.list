
hal_1_1_gpio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078f8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08007a80  08007a80  00017a80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a9c  08007a9c  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08007a9c  08007a9c  00017a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007aa4  08007aa4  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007aa4  08007aa4  00017aa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007aa8  08007aa8  00017aa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08007aac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007c8  20000090  08007b3c  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000858  08007b3c  00020858  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019ad0  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003a58  00000000  00000000  00039b90  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001158  00000000  00000000  0003d5e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fb0  00000000  00000000  0003e740  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000240cc  00000000  00000000  0003f6f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012a00  00000000  00000000  000637bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ca83d  00000000  00000000  000761bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001409f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047bc  00000000  00000000  00140a74  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007a68 	.word	0x08007a68

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08007a68 	.word	0x08007a68

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <MX_GPIO_Init>:
        * EXTI
     PC3   ------> I2S2_SD
     PB10   ------> I2S2_CK
*/
void MX_GPIO_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b08c      	sub	sp, #48	; 0x30
 80004cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ce:	f107 031c 	add.w	r3, r7, #28
 80004d2:	2200      	movs	r2, #0
 80004d4:	601a      	str	r2, [r3, #0]
 80004d6:	605a      	str	r2, [r3, #4]
 80004d8:	609a      	str	r2, [r3, #8]
 80004da:	60da      	str	r2, [r3, #12]
 80004dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004de:	2300      	movs	r3, #0
 80004e0:	61bb      	str	r3, [r7, #24]
 80004e2:	4b7b      	ldr	r3, [pc, #492]	; (80006d0 <MX_GPIO_Init+0x208>)
 80004e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e6:	4a7a      	ldr	r2, [pc, #488]	; (80006d0 <MX_GPIO_Init+0x208>)
 80004e8:	f043 0310 	orr.w	r3, r3, #16
 80004ec:	6313      	str	r3, [r2, #48]	; 0x30
 80004ee:	4b78      	ldr	r3, [pc, #480]	; (80006d0 <MX_GPIO_Init+0x208>)
 80004f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f2:	f003 0310 	and.w	r3, r3, #16
 80004f6:	61bb      	str	r3, [r7, #24]
 80004f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004fa:	2300      	movs	r3, #0
 80004fc:	617b      	str	r3, [r7, #20]
 80004fe:	4b74      	ldr	r3, [pc, #464]	; (80006d0 <MX_GPIO_Init+0x208>)
 8000500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000502:	4a73      	ldr	r2, [pc, #460]	; (80006d0 <MX_GPIO_Init+0x208>)
 8000504:	f043 0304 	orr.w	r3, r3, #4
 8000508:	6313      	str	r3, [r2, #48]	; 0x30
 800050a:	4b71      	ldr	r3, [pc, #452]	; (80006d0 <MX_GPIO_Init+0x208>)
 800050c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050e:	f003 0304 	and.w	r3, r3, #4
 8000512:	617b      	str	r3, [r7, #20]
 8000514:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000516:	2300      	movs	r3, #0
 8000518:	613b      	str	r3, [r7, #16]
 800051a:	4b6d      	ldr	r3, [pc, #436]	; (80006d0 <MX_GPIO_Init+0x208>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051e:	4a6c      	ldr	r2, [pc, #432]	; (80006d0 <MX_GPIO_Init+0x208>)
 8000520:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000524:	6313      	str	r3, [r2, #48]	; 0x30
 8000526:	4b6a      	ldr	r3, [pc, #424]	; (80006d0 <MX_GPIO_Init+0x208>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800052e:	613b      	str	r3, [r7, #16]
 8000530:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000532:	2300      	movs	r3, #0
 8000534:	60fb      	str	r3, [r7, #12]
 8000536:	4b66      	ldr	r3, [pc, #408]	; (80006d0 <MX_GPIO_Init+0x208>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053a:	4a65      	ldr	r2, [pc, #404]	; (80006d0 <MX_GPIO_Init+0x208>)
 800053c:	f043 0301 	orr.w	r3, r3, #1
 8000540:	6313      	str	r3, [r2, #48]	; 0x30
 8000542:	4b63      	ldr	r3, [pc, #396]	; (80006d0 <MX_GPIO_Init+0x208>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000546:	f003 0301 	and.w	r3, r3, #1
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800054e:	2300      	movs	r3, #0
 8000550:	60bb      	str	r3, [r7, #8]
 8000552:	4b5f      	ldr	r3, [pc, #380]	; (80006d0 <MX_GPIO_Init+0x208>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000556:	4a5e      	ldr	r2, [pc, #376]	; (80006d0 <MX_GPIO_Init+0x208>)
 8000558:	f043 0302 	orr.w	r3, r3, #2
 800055c:	6313      	str	r3, [r2, #48]	; 0x30
 800055e:	4b5c      	ldr	r3, [pc, #368]	; (80006d0 <MX_GPIO_Init+0x208>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000562:	f003 0302 	and.w	r3, r3, #2
 8000566:	60bb      	str	r3, [r7, #8]
 8000568:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800056a:	2300      	movs	r3, #0
 800056c:	607b      	str	r3, [r7, #4]
 800056e:	4b58      	ldr	r3, [pc, #352]	; (80006d0 <MX_GPIO_Init+0x208>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000572:	4a57      	ldr	r2, [pc, #348]	; (80006d0 <MX_GPIO_Init+0x208>)
 8000574:	f043 0308 	orr.w	r3, r3, #8
 8000578:	6313      	str	r3, [r2, #48]	; 0x30
 800057a:	4b55      	ldr	r3, [pc, #340]	; (80006d0 <MX_GPIO_Init+0x208>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057e:	f003 0308 	and.w	r3, r3, #8
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000586:	2200      	movs	r2, #0
 8000588:	2108      	movs	r1, #8
 800058a:	4852      	ldr	r0, [pc, #328]	; (80006d4 <MX_GPIO_Init+0x20c>)
 800058c:	f000 ff52 	bl	8001434 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000590:	2201      	movs	r2, #1
 8000592:	2101      	movs	r1, #1
 8000594:	4850      	ldr	r0, [pc, #320]	; (80006d8 <MX_GPIO_Init+0x210>)
 8000596:	f000 ff4d 	bl	8001434 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_5, GPIO_PIN_RESET);
 800059a:	2200      	movs	r2, #0
 800059c:	2121      	movs	r1, #33	; 0x21
 800059e:	484f      	ldr	r0, [pc, #316]	; (80006dc <MX_GPIO_Init+0x214>)
 80005a0:	f000 ff48 	bl	8001434 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
 80005a4:	2200      	movs	r2, #0
 80005a6:	f24f 0110 	movw	r1, #61456	; 0xf010
 80005aa:	484d      	ldr	r0, [pc, #308]	; (80006e0 <MX_GPIO_Init+0x218>)
 80005ac:	f000 ff42 	bl	8001434 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80005b0:	2308      	movs	r3, #8
 80005b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b4:	2301      	movs	r3, #1
 80005b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b8:	2300      	movs	r3, #0
 80005ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005bc:	2300      	movs	r3, #0
 80005be:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80005c0:	f107 031c 	add.w	r3, r7, #28
 80005c4:	4619      	mov	r1, r3
 80005c6:	4843      	ldr	r0, [pc, #268]	; (80006d4 <MX_GPIO_Init+0x20c>)
 80005c8:	f000 fd82 	bl	80010d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80005cc:	2301      	movs	r3, #1
 80005ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d0:	2301      	movs	r3, #1
 80005d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d4:	2300      	movs	r3, #0
 80005d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d8:	2300      	movs	r3, #0
 80005da:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80005dc:	f107 031c 	add.w	r3, r7, #28
 80005e0:	4619      	mov	r1, r3
 80005e2:	483d      	ldr	r0, [pc, #244]	; (80006d8 <MX_GPIO_Init+0x210>)
 80005e4:	f000 fd74 	bl	80010d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80005e8:	2308      	movs	r3, #8
 80005ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ec:	2302      	movs	r3, #2
 80005ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f0:	2300      	movs	r3, #0
 80005f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f4:	2300      	movs	r3, #0
 80005f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80005f8:	2305      	movs	r3, #5
 80005fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80005fc:	f107 031c 	add.w	r3, r7, #28
 8000600:	4619      	mov	r1, r3
 8000602:	4835      	ldr	r0, [pc, #212]	; (80006d8 <MX_GPIO_Init+0x210>)
 8000604:	f000 fd64 	bl	80010d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000608:	2301      	movs	r3, #1
 800060a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800060c:	4b35      	ldr	r3, [pc, #212]	; (80006e4 <MX_GPIO_Init+0x21c>)
 800060e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000610:	2300      	movs	r3, #0
 8000612:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000614:	f107 031c 	add.w	r3, r7, #28
 8000618:	4619      	mov	r1, r3
 800061a:	4833      	ldr	r0, [pc, #204]	; (80006e8 <MX_GPIO_Init+0x220>)
 800061c:	f000 fd58 	bl	80010d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5;
 8000620:	2321      	movs	r3, #33	; 0x21
 8000622:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000624:	2301      	movs	r3, #1
 8000626:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000628:	2300      	movs	r3, #0
 800062a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800062c:	2300      	movs	r3, #0
 800062e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000630:	f107 031c 	add.w	r3, r7, #28
 8000634:	4619      	mov	r1, r3
 8000636:	4829      	ldr	r0, [pc, #164]	; (80006dc <MX_GPIO_Init+0x214>)
 8000638:	f000 fd4a 	bl	80010d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800063c:	2304      	movs	r3, #4
 800063e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000640:	2300      	movs	r3, #0
 8000642:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000644:	2300      	movs	r3, #0
 8000646:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000648:	f107 031c 	add.w	r3, r7, #28
 800064c:	4619      	mov	r1, r3
 800064e:	4823      	ldr	r0, [pc, #140]	; (80006dc <MX_GPIO_Init+0x214>)
 8000650:	f000 fd3e 	bl	80010d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000654:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000658:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800065a:	2302      	movs	r3, #2
 800065c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065e:	2300      	movs	r3, #0
 8000660:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000662:	2300      	movs	r3, #0
 8000664:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000666:	2305      	movs	r3, #5
 8000668:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800066a:	f107 031c 	add.w	r3, r7, #28
 800066e:	4619      	mov	r1, r3
 8000670:	481a      	ldr	r0, [pc, #104]	; (80006dc <MX_GPIO_Init+0x214>)
 8000672:	f000 fd2d 	bl	80010d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11 
                           PDPin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8000676:	f44f 6372 	mov.w	r3, #3872	; 0xf20
 800067a:	61fb      	str	r3, [r7, #28]
                          |OTG_FS_OverCurrent_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800067c:	2300      	movs	r3, #0
 800067e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000680:	2300      	movs	r3, #0
 8000682:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000684:	f107 031c 	add.w	r3, r7, #28
 8000688:	4619      	mov	r1, r3
 800068a:	4815      	ldr	r0, [pc, #84]	; (80006e0 <MX_GPIO_Init+0x218>)
 800068c:	f000 fd20 	bl	80010d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 
                           PDPin */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
 8000690:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000694:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000696:	2301      	movs	r3, #1
 8000698:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069a:	2300      	movs	r3, #0
 800069c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069e:	2300      	movs	r3, #0
 80006a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006a2:	f107 031c 	add.w	r3, r7, #28
 80006a6:	4619      	mov	r1, r3
 80006a8:	480d      	ldr	r0, [pc, #52]	; (80006e0 <MX_GPIO_Init+0x218>)
 80006aa:	f000 fd11 	bl	80010d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80006ae:	2302      	movs	r3, #2
 80006b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80006b2:	4b0c      	ldr	r3, [pc, #48]	; (80006e4 <MX_GPIO_Init+0x21c>)
 80006b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b6:	2300      	movs	r3, #0
 80006b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80006ba:	f107 031c 	add.w	r3, r7, #28
 80006be:	4619      	mov	r1, r3
 80006c0:	4804      	ldr	r0, [pc, #16]	; (80006d4 <MX_GPIO_Init+0x20c>)
 80006c2:	f000 fd05 	bl	80010d0 <HAL_GPIO_Init>

}
 80006c6:	bf00      	nop
 80006c8:	3730      	adds	r7, #48	; 0x30
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40023800 	.word	0x40023800
 80006d4:	40021000 	.word	0x40021000
 80006d8:	40020800 	.word	0x40020800
 80006dc:	40020400 	.word	0x40020400
 80006e0:	40020c00 	.word	0x40020c00
 80006e4:	10120000 	.word	0x10120000
 80006e8:	40020000 	.word	0x40020000

080006ec <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80006f0:	4b12      	ldr	r3, [pc, #72]	; (800073c <MX_I2C1_Init+0x50>)
 80006f2:	4a13      	ldr	r2, [pc, #76]	; (8000740 <MX_I2C1_Init+0x54>)
 80006f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006f6:	4b11      	ldr	r3, [pc, #68]	; (800073c <MX_I2C1_Init+0x50>)
 80006f8:	4a12      	ldr	r2, [pc, #72]	; (8000744 <MX_I2C1_Init+0x58>)
 80006fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006fc:	4b0f      	ldr	r3, [pc, #60]	; (800073c <MX_I2C1_Init+0x50>)
 80006fe:	2200      	movs	r2, #0
 8000700:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000702:	4b0e      	ldr	r3, [pc, #56]	; (800073c <MX_I2C1_Init+0x50>)
 8000704:	2200      	movs	r2, #0
 8000706:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000708:	4b0c      	ldr	r3, [pc, #48]	; (800073c <MX_I2C1_Init+0x50>)
 800070a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800070e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000710:	4b0a      	ldr	r3, [pc, #40]	; (800073c <MX_I2C1_Init+0x50>)
 8000712:	2200      	movs	r2, #0
 8000714:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000716:	4b09      	ldr	r3, [pc, #36]	; (800073c <MX_I2C1_Init+0x50>)
 8000718:	2200      	movs	r2, #0
 800071a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800071c:	4b07      	ldr	r3, [pc, #28]	; (800073c <MX_I2C1_Init+0x50>)
 800071e:	2200      	movs	r2, #0
 8000720:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000722:	4b06      	ldr	r3, [pc, #24]	; (800073c <MX_I2C1_Init+0x50>)
 8000724:	2200      	movs	r2, #0
 8000726:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000728:	4804      	ldr	r0, [pc, #16]	; (800073c <MX_I2C1_Init+0x50>)
 800072a:	f002 fb8d 	bl	8002e48 <HAL_I2C_Init>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000734:	f000 f9d4 	bl	8000ae0 <Error_Handler>
  }

}
 8000738:	bf00      	nop
 800073a:	bd80      	pop	{r7, pc}
 800073c:	200000c0 	.word	0x200000c0
 8000740:	40005400 	.word	0x40005400
 8000744:	000186a0 	.word	0x000186a0

08000748 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b08a      	sub	sp, #40	; 0x28
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000750:	f107 0314 	add.w	r3, r7, #20
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
 800075e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a19      	ldr	r2, [pc, #100]	; (80007cc <HAL_I2C_MspInit+0x84>)
 8000766:	4293      	cmp	r3, r2
 8000768:	d12c      	bne.n	80007c4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	613b      	str	r3, [r7, #16]
 800076e:	4b18      	ldr	r3, [pc, #96]	; (80007d0 <HAL_I2C_MspInit+0x88>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4a17      	ldr	r2, [pc, #92]	; (80007d0 <HAL_I2C_MspInit+0x88>)
 8000774:	f043 0302 	orr.w	r3, r3, #2
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4b15      	ldr	r3, [pc, #84]	; (80007d0 <HAL_I2C_MspInit+0x88>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0302 	and.w	r3, r3, #2
 8000782:	613b      	str	r3, [r7, #16]
 8000784:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000786:	f44f 7310 	mov.w	r3, #576	; 0x240
 800078a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800078c:	2312      	movs	r3, #18
 800078e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000790:	2301      	movs	r3, #1
 8000792:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000794:	2300      	movs	r3, #0
 8000796:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000798:	2304      	movs	r3, #4
 800079a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800079c:	f107 0314 	add.w	r3, r7, #20
 80007a0:	4619      	mov	r1, r3
 80007a2:	480c      	ldr	r0, [pc, #48]	; (80007d4 <HAL_I2C_MspInit+0x8c>)
 80007a4:	f000 fc94 	bl	80010d0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007a8:	2300      	movs	r3, #0
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	4b08      	ldr	r3, [pc, #32]	; (80007d0 <HAL_I2C_MspInit+0x88>)
 80007ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b0:	4a07      	ldr	r2, [pc, #28]	; (80007d0 <HAL_I2C_MspInit+0x88>)
 80007b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007b6:	6413      	str	r3, [r2, #64]	; 0x40
 80007b8:	4b05      	ldr	r3, [pc, #20]	; (80007d0 <HAL_I2C_MspInit+0x88>)
 80007ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007c0:	60fb      	str	r3, [r7, #12]
 80007c2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80007c4:	bf00      	nop
 80007c6:	3728      	adds	r7, #40	; 0x28
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	40005400 	.word	0x40005400
 80007d0:	40023800 	.word	0x40023800
 80007d4:	40020400 	.word	0x40020400

080007d8 <MX_I2S3_Init>:

I2S_HandleTypeDef hi2s3;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0

  hi2s3.Instance = SPI3;
 80007dc:	4b13      	ldr	r3, [pc, #76]	; (800082c <MX_I2S3_Init+0x54>)
 80007de:	4a14      	ldr	r2, [pc, #80]	; (8000830 <MX_I2S3_Init+0x58>)
 80007e0:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80007e2:	4b12      	ldr	r3, [pc, #72]	; (800082c <MX_I2S3_Init+0x54>)
 80007e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007e8:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80007ea:	4b10      	ldr	r3, [pc, #64]	; (800082c <MX_I2S3_Init+0x54>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007f0:	4b0e      	ldr	r3, [pc, #56]	; (800082c <MX_I2S3_Init+0x54>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80007f6:	4b0d      	ldr	r3, [pc, #52]	; (800082c <MX_I2S3_Init+0x54>)
 80007f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007fc:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80007fe:	4b0b      	ldr	r3, [pc, #44]	; (800082c <MX_I2S3_Init+0x54>)
 8000800:	4a0c      	ldr	r2, [pc, #48]	; (8000834 <MX_I2S3_Init+0x5c>)
 8000802:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000804:	4b09      	ldr	r3, [pc, #36]	; (800082c <MX_I2S3_Init+0x54>)
 8000806:	2200      	movs	r2, #0
 8000808:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800080a:	4b08      	ldr	r3, [pc, #32]	; (800082c <MX_I2S3_Init+0x54>)
 800080c:	2200      	movs	r2, #0
 800080e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000810:	4b06      	ldr	r3, [pc, #24]	; (800082c <MX_I2S3_Init+0x54>)
 8000812:	2200      	movs	r2, #0
 8000814:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000816:	4805      	ldr	r0, [pc, #20]	; (800082c <MX_I2S3_Init+0x54>)
 8000818:	f002 fc4e 	bl	80030b8 <HAL_I2S_Init>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000822:	f000 f95d 	bl	8000ae0 <Error_Handler>
  }

}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	20000114 	.word	0x20000114
 8000830:	40003c00 	.word	0x40003c00
 8000834:	00017700 	.word	0x00017700

08000838 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b08a      	sub	sp, #40	; 0x28
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000840:	f107 0314 	add.w	r3, r7, #20
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	60da      	str	r2, [r3, #12]
 800084e:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI3)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a28      	ldr	r2, [pc, #160]	; (80008f8 <HAL_I2S_MspInit+0xc0>)
 8000856:	4293      	cmp	r3, r2
 8000858:	d14a      	bne.n	80008f0 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	613b      	str	r3, [r7, #16]
 800085e:	4b27      	ldr	r3, [pc, #156]	; (80008fc <HAL_I2S_MspInit+0xc4>)
 8000860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000862:	4a26      	ldr	r2, [pc, #152]	; (80008fc <HAL_I2S_MspInit+0xc4>)
 8000864:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000868:	6413      	str	r3, [r2, #64]	; 0x40
 800086a:	4b24      	ldr	r3, [pc, #144]	; (80008fc <HAL_I2S_MspInit+0xc4>)
 800086c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000872:	613b      	str	r3, [r7, #16]
 8000874:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	60fb      	str	r3, [r7, #12]
 800087a:	4b20      	ldr	r3, [pc, #128]	; (80008fc <HAL_I2S_MspInit+0xc4>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a1f      	ldr	r2, [pc, #124]	; (80008fc <HAL_I2S_MspInit+0xc4>)
 8000880:	f043 0301 	orr.w	r3, r3, #1
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b1d      	ldr	r3, [pc, #116]	; (80008fc <HAL_I2S_MspInit+0xc4>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	60bb      	str	r3, [r7, #8]
 8000896:	4b19      	ldr	r3, [pc, #100]	; (80008fc <HAL_I2S_MspInit+0xc4>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a18      	ldr	r2, [pc, #96]	; (80008fc <HAL_I2S_MspInit+0xc4>)
 800089c:	f043 0304 	orr.w	r3, r3, #4
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b16      	ldr	r3, [pc, #88]	; (80008fc <HAL_I2S_MspInit+0xc4>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0304 	and.w	r3, r3, #4
 80008aa:	60bb      	str	r3, [r7, #8]
 80008ac:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008ae:	2310      	movs	r3, #16
 80008b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b2:	2302      	movs	r3, #2
 80008b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ba:	2300      	movs	r3, #0
 80008bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008be:	2306      	movs	r3, #6
 80008c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80008c2:	f107 0314 	add.w	r3, r7, #20
 80008c6:	4619      	mov	r1, r3
 80008c8:	480d      	ldr	r0, [pc, #52]	; (8000900 <HAL_I2S_MspInit+0xc8>)
 80008ca:	f000 fc01 	bl	80010d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80008ce:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80008d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d4:	2302      	movs	r3, #2
 80008d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008dc:	2300      	movs	r3, #0
 80008de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008e0:	2306      	movs	r3, #6
 80008e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008e4:	f107 0314 	add.w	r3, r7, #20
 80008e8:	4619      	mov	r1, r3
 80008ea:	4806      	ldr	r0, [pc, #24]	; (8000904 <HAL_I2S_MspInit+0xcc>)
 80008ec:	f000 fbf0 	bl	80010d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80008f0:	bf00      	nop
 80008f2:	3728      	adds	r7, #40	; 0x28
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	40003c00 	.word	0x40003c00
 80008fc:	40023800 	.word	0x40023800
 8000900:	40020000 	.word	0x40020000
 8000904:	40020800 	.word	0x40020800

08000908 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800090c:	f000 fa3a 	bl	8000d84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000910:	f000 f864 	bl	80009dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000914:	f7ff fdd8 	bl	80004c8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000918:	f7ff fee8 	bl	80006ec <MX_I2C1_Init>
  MX_I2S3_Init();
 800091c:	f7ff ff5c 	bl	80007d8 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000920:	f000 f8e6 	bl	8000af0 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000924:	f006 fc9c 	bl	8007260 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000928:	2201      	movs	r2, #1
 800092a:	2101      	movs	r1, #1
 800092c:	4828      	ldr	r0, [pc, #160]	; (80009d0 <main+0xc8>)
 800092e:	f000 fd81 	bl	8001434 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000932:	2201      	movs	r2, #1
 8000934:	2120      	movs	r1, #32
 8000936:	4826      	ldr	r0, [pc, #152]	; (80009d0 <main+0xc8>)
 8000938:	f000 fd7c 	bl	8001434 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 800093c:	2201      	movs	r2, #1
 800093e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000942:	4824      	ldr	r0, [pc, #144]	; (80009d4 <main+0xcc>)
 8000944:	f000 fd76 	bl	8001434 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET) {
 8000948:	2101      	movs	r1, #1
 800094a:	4823      	ldr	r0, [pc, #140]	; (80009d8 <main+0xd0>)
 800094c:	f000 fd5a 	bl	8001404 <HAL_GPIO_ReadPin>
 8000950:	4603      	mov	r3, r0
 8000952:	2b01      	cmp	r3, #1
 8000954:	d106      	bne.n	8000964 <main+0x5c>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000956:	2201      	movs	r2, #1
 8000958:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800095c:	481d      	ldr	r0, [pc, #116]	; (80009d4 <main+0xcc>)
 800095e:	f000 fd69 	bl	8001434 <HAL_GPIO_WritePin>
 8000962:	e005      	b.n	8000970 <main+0x68>
	  }
	  else {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000964:	2200      	movs	r2, #0
 8000966:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800096a:	481a      	ldr	r0, [pc, #104]	; (80009d4 <main+0xcc>)
 800096c:	f000 fd62 	bl	8001434 <HAL_GPIO_WritePin>

	  }
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000970:	2201      	movs	r2, #1
 8000972:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000976:	4817      	ldr	r0, [pc, #92]	; (80009d4 <main+0xcc>)
 8000978:	f000 fd5c 	bl	8001434 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 800097c:	2201      	movs	r2, #1
 800097e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000982:	4814      	ldr	r0, [pc, #80]	; (80009d4 <main+0xcc>)
 8000984:	f000 fd56 	bl	8001434 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000988:	2201      	movs	r2, #1
 800098a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800098e:	4811      	ldr	r0, [pc, #68]	; (80009d4 <main+0xcc>)
 8000990:	f000 fd50 	bl	8001434 <HAL_GPIO_WritePin>

	HAL_Delay(1000);
 8000994:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000998:	f000 fa66 	bl	8000e68 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 800099c:	2200      	movs	r2, #0
 800099e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009a2:	480c      	ldr	r0, [pc, #48]	; (80009d4 <main+0xcc>)
 80009a4:	f000 fd46 	bl	8001434 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 80009a8:	2200      	movs	r2, #0
 80009aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009ae:	4809      	ldr	r0, [pc, #36]	; (80009d4 <main+0xcc>)
 80009b0:	f000 fd40 	bl	8001434 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80009b4:	2200      	movs	r2, #0
 80009b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009ba:	4806      	ldr	r0, [pc, #24]	; (80009d4 <main+0xcc>)
 80009bc:	f000 fd3a 	bl	8001434 <HAL_GPIO_WritePin>

    HAL_Delay(1000);
 80009c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009c4:	f000 fa50 	bl	8000e68 <HAL_Delay>

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80009c8:	f006 fc70 	bl	80072ac <MX_USB_HOST_Process>
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET) {
 80009cc:	e7bc      	b.n	8000948 <main+0x40>
 80009ce:	bf00      	nop
 80009d0:	40020400 	.word	0x40020400
 80009d4:	40020c00 	.word	0x40020c00
 80009d8:	40020000 	.word	0x40020000

080009dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b098      	sub	sp, #96	; 0x60
 80009e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009e6:	2230      	movs	r2, #48	; 0x30
 80009e8:	2100      	movs	r1, #0
 80009ea:	4618      	mov	r0, r3
 80009ec:	f006 ff7a 	bl	80078e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009f0:	f107 031c 	add.w	r3, r7, #28
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	605a      	str	r2, [r3, #4]
 80009fa:	609a      	str	r2, [r3, #8]
 80009fc:	60da      	str	r2, [r3, #12]
 80009fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a00:	f107 030c 	add.w	r3, r7, #12
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	605a      	str	r2, [r3, #4]
 8000a0a:	609a      	str	r2, [r3, #8]
 8000a0c:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60bb      	str	r3, [r7, #8]
 8000a12:	4b31      	ldr	r3, [pc, #196]	; (8000ad8 <SystemClock_Config+0xfc>)
 8000a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a16:	4a30      	ldr	r2, [pc, #192]	; (8000ad8 <SystemClock_Config+0xfc>)
 8000a18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a1e:	4b2e      	ldr	r3, [pc, #184]	; (8000ad8 <SystemClock_Config+0xfc>)
 8000a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a26:	60bb      	str	r3, [r7, #8]
 8000a28:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	607b      	str	r3, [r7, #4]
 8000a2e:	4b2b      	ldr	r3, [pc, #172]	; (8000adc <SystemClock_Config+0x100>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4a2a      	ldr	r2, [pc, #168]	; (8000adc <SystemClock_Config+0x100>)
 8000a34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a38:	6013      	str	r3, [r2, #0]
 8000a3a:	4b28      	ldr	r3, [pc, #160]	; (8000adc <SystemClock_Config+0x100>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a46:	2301      	movs	r3, #1
 8000a48:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a4e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a50:	2302      	movs	r3, #2
 8000a52:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a54:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a58:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a5a:	2308      	movs	r3, #8
 8000a5c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a5e:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a62:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a64:	2302      	movs	r3, #2
 8000a66:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a68:	2307      	movs	r3, #7
 8000a6a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a6c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a70:	4618      	mov	r0, r3
 8000a72:	f002 ffc1 	bl	80039f8 <HAL_RCC_OscConfig>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000a7c:	f000 f830 	bl	8000ae0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a80:	230f      	movs	r3, #15
 8000a82:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a84:	2302      	movs	r3, #2
 8000a86:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a8c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a90:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a96:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a98:	f107 031c 	add.w	r3, r7, #28
 8000a9c:	2105      	movs	r1, #5
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f003 fa1a 	bl	8003ed8 <HAL_RCC_ClockConfig>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000aaa:	f000 f819 	bl	8000ae0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000ab2:	23c0      	movs	r3, #192	; 0xc0
 8000ab4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000aba:	f107 030c 	add.w	r3, r7, #12
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f003 fbe8 	bl	8004294 <HAL_RCCEx_PeriphCLKConfig>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000aca:	f000 f809 	bl	8000ae0 <Error_Handler>
  }
}
 8000ace:	bf00      	nop
 8000ad0:	3760      	adds	r7, #96	; 0x60
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40023800 	.word	0x40023800
 8000adc:	40007000 	.word	0x40007000

08000ae0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ae4:	bf00      	nop
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
	...

08000af0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000af4:	4b17      	ldr	r3, [pc, #92]	; (8000b54 <MX_SPI1_Init+0x64>)
 8000af6:	4a18      	ldr	r2, [pc, #96]	; (8000b58 <MX_SPI1_Init+0x68>)
 8000af8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000afa:	4b16      	ldr	r3, [pc, #88]	; (8000b54 <MX_SPI1_Init+0x64>)
 8000afc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b00:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b02:	4b14      	ldr	r3, [pc, #80]	; (8000b54 <MX_SPI1_Init+0x64>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b08:	4b12      	ldr	r3, [pc, #72]	; (8000b54 <MX_SPI1_Init+0x64>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b0e:	4b11      	ldr	r3, [pc, #68]	; (8000b54 <MX_SPI1_Init+0x64>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b14:	4b0f      	ldr	r3, [pc, #60]	; (8000b54 <MX_SPI1_Init+0x64>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b1a:	4b0e      	ldr	r3, [pc, #56]	; (8000b54 <MX_SPI1_Init+0x64>)
 8000b1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b20:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b22:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <MX_SPI1_Init+0x64>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b28:	4b0a      	ldr	r3, [pc, #40]	; (8000b54 <MX_SPI1_Init+0x64>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b2e:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <MX_SPI1_Init+0x64>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b34:	4b07      	ldr	r3, [pc, #28]	; (8000b54 <MX_SPI1_Init+0x64>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b3a:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <MX_SPI1_Init+0x64>)
 8000b3c:	220a      	movs	r2, #10
 8000b3e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b40:	4804      	ldr	r0, [pc, #16]	; (8000b54 <MX_SPI1_Init+0x64>)
 8000b42:	f003 fce5 	bl	8004510 <HAL_SPI_Init>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b4c:	f7ff ffc8 	bl	8000ae0 <Error_Handler>
  }

}
 8000b50:	bf00      	nop
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	2000015c 	.word	0x2000015c
 8000b58:	40013000 	.word	0x40013000

08000b5c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08a      	sub	sp, #40	; 0x28
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b64:	f107 0314 	add.w	r3, r7, #20
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
 8000b70:	60da      	str	r2, [r3, #12]
 8000b72:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a19      	ldr	r2, [pc, #100]	; (8000be0 <HAL_SPI_MspInit+0x84>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d12b      	bne.n	8000bd6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	613b      	str	r3, [r7, #16]
 8000b82:	4b18      	ldr	r3, [pc, #96]	; (8000be4 <HAL_SPI_MspInit+0x88>)
 8000b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b86:	4a17      	ldr	r2, [pc, #92]	; (8000be4 <HAL_SPI_MspInit+0x88>)
 8000b88:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b8e:	4b15      	ldr	r3, [pc, #84]	; (8000be4 <HAL_SPI_MspInit+0x88>)
 8000b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b96:	613b      	str	r3, [r7, #16]
 8000b98:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	60fb      	str	r3, [r7, #12]
 8000b9e:	4b11      	ldr	r3, [pc, #68]	; (8000be4 <HAL_SPI_MspInit+0x88>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	4a10      	ldr	r2, [pc, #64]	; (8000be4 <HAL_SPI_MspInit+0x88>)
 8000ba4:	f043 0301 	orr.w	r3, r3, #1
 8000ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8000baa:	4b0e      	ldr	r3, [pc, #56]	; (8000be4 <HAL_SPI_MspInit+0x88>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	f003 0301 	and.w	r3, r3, #1
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000bb6:	23e0      	movs	r3, #224	; 0xe0
 8000bb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bc6:	2305      	movs	r3, #5
 8000bc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bca:	f107 0314 	add.w	r3, r7, #20
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4805      	ldr	r0, [pc, #20]	; (8000be8 <HAL_SPI_MspInit+0x8c>)
 8000bd2:	f000 fa7d 	bl	80010d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000bd6:	bf00      	nop
 8000bd8:	3728      	adds	r7, #40	; 0x28
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	40013000 	.word	0x40013000
 8000be4:	40023800 	.word	0x40023800
 8000be8:	40020000 	.word	0x40020000

08000bec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	607b      	str	r3, [r7, #4]
 8000bf6:	4b10      	ldr	r3, [pc, #64]	; (8000c38 <HAL_MspInit+0x4c>)
 8000bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfa:	4a0f      	ldr	r2, [pc, #60]	; (8000c38 <HAL_MspInit+0x4c>)
 8000bfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c00:	6453      	str	r3, [r2, #68]	; 0x44
 8000c02:	4b0d      	ldr	r3, [pc, #52]	; (8000c38 <HAL_MspInit+0x4c>)
 8000c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c0a:	607b      	str	r3, [r7, #4]
 8000c0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	603b      	str	r3, [r7, #0]
 8000c12:	4b09      	ldr	r3, [pc, #36]	; (8000c38 <HAL_MspInit+0x4c>)
 8000c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c16:	4a08      	ldr	r2, [pc, #32]	; (8000c38 <HAL_MspInit+0x4c>)
 8000c18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c1e:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <HAL_MspInit+0x4c>)
 8000c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c26:	603b      	str	r3, [r7, #0]
 8000c28:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c2a:	2007      	movs	r0, #7
 8000c2c:	f000 fa0e 	bl	800104c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c30:	bf00      	nop
 8000c32:	3708      	adds	r7, #8
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	40023800 	.word	0x40023800

08000c3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr

08000c4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c4e:	e7fe      	b.n	8000c4e <HardFault_Handler+0x4>

08000c50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c54:	e7fe      	b.n	8000c54 <MemManage_Handler+0x4>

08000c56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c56:	b480      	push	{r7}
 8000c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c5a:	e7fe      	b.n	8000c5a <BusFault_Handler+0x4>

08000c5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c60:	e7fe      	b.n	8000c60 <UsageFault_Handler+0x4>

08000c62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c62:	b480      	push	{r7}
 8000c64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr

08000c70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c74:	bf00      	nop
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr

08000c7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c82:	bf00      	nop
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr

08000c8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c90:	f000 f8ca 	bl	8000e28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c94:	bf00      	nop
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000c9c:	4802      	ldr	r0, [pc, #8]	; (8000ca8 <OTG_FS_IRQHandler+0x10>)
 8000c9e:	f000 fe71 	bl	8001984 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	20000590 	.word	0x20000590

08000cac <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000cb4:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <_sbrk+0x50>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d102      	bne.n	8000cc2 <_sbrk+0x16>
		heap_end = &end;
 8000cbc:	4b0f      	ldr	r3, [pc, #60]	; (8000cfc <_sbrk+0x50>)
 8000cbe:	4a10      	ldr	r2, [pc, #64]	; (8000d00 <_sbrk+0x54>)
 8000cc0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000cc2:	4b0e      	ldr	r3, [pc, #56]	; (8000cfc <_sbrk+0x50>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000cc8:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <_sbrk+0x50>)
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	4413      	add	r3, r2
 8000cd0:	466a      	mov	r2, sp
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d907      	bls.n	8000ce6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000cd6:	f006 fdcb 	bl	8007870 <__errno>
 8000cda:	4602      	mov	r2, r0
 8000cdc:	230c      	movs	r3, #12
 8000cde:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000ce0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ce4:	e006      	b.n	8000cf4 <_sbrk+0x48>
	}

	heap_end += incr;
 8000ce6:	4b05      	ldr	r3, [pc, #20]	; (8000cfc <_sbrk+0x50>)
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4413      	add	r3, r2
 8000cee:	4a03      	ldr	r2, [pc, #12]	; (8000cfc <_sbrk+0x50>)
 8000cf0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000cf2:	68fb      	ldr	r3, [r7, #12]
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3710      	adds	r7, #16
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	200000ac 	.word	0x200000ac
 8000d00:	20000858 	.word	0x20000858

08000d04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d08:	4b08      	ldr	r3, [pc, #32]	; (8000d2c <SystemInit+0x28>)
 8000d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d0e:	4a07      	ldr	r2, [pc, #28]	; (8000d2c <SystemInit+0x28>)
 8000d10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d18:	4b04      	ldr	r3, [pc, #16]	; (8000d2c <SystemInit+0x28>)
 8000d1a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d1e:	609a      	str	r2, [r3, #8]
#endif
}
 8000d20:	bf00      	nop
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	e000ed00 	.word	0xe000ed00

08000d30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d68 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000d34:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000d36:	e003      	b.n	8000d40 <LoopCopyDataInit>

08000d38 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000d38:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000d3a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000d3c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000d3e:	3104      	adds	r1, #4

08000d40 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000d40:	480b      	ldr	r0, [pc, #44]	; (8000d70 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000d42:	4b0c      	ldr	r3, [pc, #48]	; (8000d74 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000d44:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000d46:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000d48:	d3f6      	bcc.n	8000d38 <CopyDataInit>
  ldr  r2, =_sbss
 8000d4a:	4a0b      	ldr	r2, [pc, #44]	; (8000d78 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000d4c:	e002      	b.n	8000d54 <LoopFillZerobss>

08000d4e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000d4e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000d50:	f842 3b04 	str.w	r3, [r2], #4

08000d54 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000d54:	4b09      	ldr	r3, [pc, #36]	; (8000d7c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000d56:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000d58:	d3f9      	bcc.n	8000d4e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d5a:	f7ff ffd3 	bl	8000d04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d5e:	f006 fd8d 	bl	800787c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d62:	f7ff fdd1 	bl	8000908 <main>
  bx  lr    
 8000d66:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d68:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000d6c:	08007aac 	.word	0x08007aac
  ldr  r0, =_sdata
 8000d70:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000d74:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8000d78:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8000d7c:	20000858 	.word	0x20000858

08000d80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d80:	e7fe      	b.n	8000d80 <ADC_IRQHandler>
	...

08000d84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d88:	4b0e      	ldr	r3, [pc, #56]	; (8000dc4 <HAL_Init+0x40>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a0d      	ldr	r2, [pc, #52]	; (8000dc4 <HAL_Init+0x40>)
 8000d8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d94:	4b0b      	ldr	r3, [pc, #44]	; (8000dc4 <HAL_Init+0x40>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a0a      	ldr	r2, [pc, #40]	; (8000dc4 <HAL_Init+0x40>)
 8000d9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000da0:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <HAL_Init+0x40>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a07      	ldr	r2, [pc, #28]	; (8000dc4 <HAL_Init+0x40>)
 8000da6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000daa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dac:	2003      	movs	r0, #3
 8000dae:	f000 f94d 	bl	800104c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000db2:	2000      	movs	r0, #0
 8000db4:	f000 f808 	bl	8000dc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000db8:	f7ff ff18 	bl	8000bec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dbc:	2300      	movs	r3, #0
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	40023c00 	.word	0x40023c00

08000dc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dd0:	4b12      	ldr	r3, [pc, #72]	; (8000e1c <HAL_InitTick+0x54>)
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	4b12      	ldr	r3, [pc, #72]	; (8000e20 <HAL_InitTick+0x58>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	4619      	mov	r1, r3
 8000dda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dde:	fbb3 f3f1 	udiv	r3, r3, r1
 8000de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000de6:	4618      	mov	r0, r3
 8000de8:	f000 f965 	bl	80010b6 <HAL_SYSTICK_Config>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
 8000df4:	e00e      	b.n	8000e14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2b0f      	cmp	r3, #15
 8000dfa:	d80a      	bhi.n	8000e12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	6879      	ldr	r1, [r7, #4]
 8000e00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e04:	f000 f92d 	bl	8001062 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e08:	4a06      	ldr	r2, [pc, #24]	; (8000e24 <HAL_InitTick+0x5c>)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	e000      	b.n	8000e14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e12:	2301      	movs	r3, #1
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3708      	adds	r7, #8
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	20000000 	.word	0x20000000
 8000e20:	20000008 	.word	0x20000008
 8000e24:	20000004 	.word	0x20000004

08000e28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e2c:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <HAL_IncTick+0x20>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	461a      	mov	r2, r3
 8000e32:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <HAL_IncTick+0x24>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4413      	add	r3, r2
 8000e38:	4a04      	ldr	r2, [pc, #16]	; (8000e4c <HAL_IncTick+0x24>)
 8000e3a:	6013      	str	r3, [r2, #0]
}
 8000e3c:	bf00      	nop
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	20000008 	.word	0x20000008
 8000e4c:	200001b4 	.word	0x200001b4

08000e50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  return uwTick;
 8000e54:	4b03      	ldr	r3, [pc, #12]	; (8000e64 <HAL_GetTick+0x14>)
 8000e56:	681b      	ldr	r3, [r3, #0]
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	200001b4 	.word	0x200001b4

08000e68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e70:	f7ff ffee 	bl	8000e50 <HAL_GetTick>
 8000e74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e80:	d005      	beq.n	8000e8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e82:	4b09      	ldr	r3, [pc, #36]	; (8000ea8 <HAL_Delay+0x40>)
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	461a      	mov	r2, r3
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e8e:	bf00      	nop
 8000e90:	f7ff ffde 	bl	8000e50 <HAL_GetTick>
 8000e94:	4602      	mov	r2, r0
 8000e96:	68bb      	ldr	r3, [r7, #8]
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	68fa      	ldr	r2, [r7, #12]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	d8f7      	bhi.n	8000e90 <HAL_Delay+0x28>
  {
  }
}
 8000ea0:	bf00      	nop
 8000ea2:	3710      	adds	r7, #16
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	20000008 	.word	0x20000008

08000eac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	f003 0307 	and.w	r3, r3, #7
 8000eba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ebc:	4b0c      	ldr	r3, [pc, #48]	; (8000ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ec2:	68ba      	ldr	r2, [r7, #8]
 8000ec4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ec8:	4013      	ands	r3, r2
 8000eca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ed4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ed8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000edc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ede:	4a04      	ldr	r2, [pc, #16]	; (8000ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	60d3      	str	r3, [r2, #12]
}
 8000ee4:	bf00      	nop
 8000ee6:	3714      	adds	r7, #20
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	e000ed00 	.word	0xe000ed00

08000ef4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ef8:	4b04      	ldr	r3, [pc, #16]	; (8000f0c <__NVIC_GetPriorityGrouping+0x18>)
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	0a1b      	lsrs	r3, r3, #8
 8000efe:	f003 0307 	and.w	r3, r3, #7
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	e000ed00 	.word	0xe000ed00

08000f10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	db0b      	blt.n	8000f3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f22:	79fb      	ldrb	r3, [r7, #7]
 8000f24:	f003 021f 	and.w	r2, r3, #31
 8000f28:	4907      	ldr	r1, [pc, #28]	; (8000f48 <__NVIC_EnableIRQ+0x38>)
 8000f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2e:	095b      	lsrs	r3, r3, #5
 8000f30:	2001      	movs	r0, #1
 8000f32:	fa00 f202 	lsl.w	r2, r0, r2
 8000f36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f3a:	bf00      	nop
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	e000e100 	.word	0xe000e100

08000f4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	6039      	str	r1, [r7, #0]
 8000f56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	db0a      	blt.n	8000f76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	b2da      	uxtb	r2, r3
 8000f64:	490c      	ldr	r1, [pc, #48]	; (8000f98 <__NVIC_SetPriority+0x4c>)
 8000f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6a:	0112      	lsls	r2, r2, #4
 8000f6c:	b2d2      	uxtb	r2, r2
 8000f6e:	440b      	add	r3, r1
 8000f70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f74:	e00a      	b.n	8000f8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	b2da      	uxtb	r2, r3
 8000f7a:	4908      	ldr	r1, [pc, #32]	; (8000f9c <__NVIC_SetPriority+0x50>)
 8000f7c:	79fb      	ldrb	r3, [r7, #7]
 8000f7e:	f003 030f 	and.w	r3, r3, #15
 8000f82:	3b04      	subs	r3, #4
 8000f84:	0112      	lsls	r2, r2, #4
 8000f86:	b2d2      	uxtb	r2, r2
 8000f88:	440b      	add	r3, r1
 8000f8a:	761a      	strb	r2, [r3, #24]
}
 8000f8c:	bf00      	nop
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	e000e100 	.word	0xe000e100
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b089      	sub	sp, #36	; 0x24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	60f8      	str	r0, [r7, #12]
 8000fa8:	60b9      	str	r1, [r7, #8]
 8000faa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	f003 0307 	and.w	r3, r3, #7
 8000fb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	f1c3 0307 	rsb	r3, r3, #7
 8000fba:	2b04      	cmp	r3, #4
 8000fbc:	bf28      	it	cs
 8000fbe:	2304      	movcs	r3, #4
 8000fc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	3304      	adds	r3, #4
 8000fc6:	2b06      	cmp	r3, #6
 8000fc8:	d902      	bls.n	8000fd0 <NVIC_EncodePriority+0x30>
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	3b03      	subs	r3, #3
 8000fce:	e000      	b.n	8000fd2 <NVIC_EncodePriority+0x32>
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fd8:	69bb      	ldr	r3, [r7, #24]
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	43da      	mvns	r2, r3
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	401a      	ands	r2, r3
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fe8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff2:	43d9      	mvns	r1, r3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff8:	4313      	orrs	r3, r2
         );
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3724      	adds	r7, #36	; 0x24
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
	...

08001008 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	3b01      	subs	r3, #1
 8001014:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001018:	d301      	bcc.n	800101e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800101a:	2301      	movs	r3, #1
 800101c:	e00f      	b.n	800103e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800101e:	4a0a      	ldr	r2, [pc, #40]	; (8001048 <SysTick_Config+0x40>)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	3b01      	subs	r3, #1
 8001024:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001026:	210f      	movs	r1, #15
 8001028:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800102c:	f7ff ff8e 	bl	8000f4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001030:	4b05      	ldr	r3, [pc, #20]	; (8001048 <SysTick_Config+0x40>)
 8001032:	2200      	movs	r2, #0
 8001034:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001036:	4b04      	ldr	r3, [pc, #16]	; (8001048 <SysTick_Config+0x40>)
 8001038:	2207      	movs	r2, #7
 800103a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800103c:	2300      	movs	r3, #0
}
 800103e:	4618      	mov	r0, r3
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	e000e010 	.word	0xe000e010

0800104c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001054:	6878      	ldr	r0, [r7, #4]
 8001056:	f7ff ff29 	bl	8000eac <__NVIC_SetPriorityGrouping>
}
 800105a:	bf00      	nop
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}

08001062 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001062:	b580      	push	{r7, lr}
 8001064:	b086      	sub	sp, #24
 8001066:	af00      	add	r7, sp, #0
 8001068:	4603      	mov	r3, r0
 800106a:	60b9      	str	r1, [r7, #8]
 800106c:	607a      	str	r2, [r7, #4]
 800106e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001070:	2300      	movs	r3, #0
 8001072:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001074:	f7ff ff3e 	bl	8000ef4 <__NVIC_GetPriorityGrouping>
 8001078:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	68b9      	ldr	r1, [r7, #8]
 800107e:	6978      	ldr	r0, [r7, #20]
 8001080:	f7ff ff8e 	bl	8000fa0 <NVIC_EncodePriority>
 8001084:	4602      	mov	r2, r0
 8001086:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800108a:	4611      	mov	r1, r2
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff ff5d 	bl	8000f4c <__NVIC_SetPriority>
}
 8001092:	bf00      	nop
 8001094:	3718      	adds	r7, #24
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800109a:	b580      	push	{r7, lr}
 800109c:	b082      	sub	sp, #8
 800109e:	af00      	add	r7, sp, #0
 80010a0:	4603      	mov	r3, r0
 80010a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff ff31 	bl	8000f10 <__NVIC_EnableIRQ>
}
 80010ae:	bf00      	nop
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b082      	sub	sp, #8
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f7ff ffa2 	bl	8001008 <SysTick_Config>
 80010c4:	4603      	mov	r3, r0
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
	...

080010d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b089      	sub	sp, #36	; 0x24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010da:	2300      	movs	r3, #0
 80010dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010de:	2300      	movs	r3, #0
 80010e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010e2:	2300      	movs	r3, #0
 80010e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010e6:	2300      	movs	r3, #0
 80010e8:	61fb      	str	r3, [r7, #28]
 80010ea:	e16b      	b.n	80013c4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010ec:	2201      	movs	r2, #1
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	697a      	ldr	r2, [r7, #20]
 80010fc:	4013      	ands	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	429a      	cmp	r2, r3
 8001106:	f040 815a 	bne.w	80013be <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	2b01      	cmp	r3, #1
 8001110:	d00b      	beq.n	800112a <HAL_GPIO_Init+0x5a>
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	2b02      	cmp	r3, #2
 8001118:	d007      	beq.n	800112a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800111e:	2b11      	cmp	r3, #17
 8001120:	d003      	beq.n	800112a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	2b12      	cmp	r3, #18
 8001128:	d130      	bne.n	800118c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	2203      	movs	r2, #3
 8001136:	fa02 f303 	lsl.w	r3, r2, r3
 800113a:	43db      	mvns	r3, r3
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	4013      	ands	r3, r2
 8001140:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	68da      	ldr	r2, [r3, #12]
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	fa02 f303 	lsl.w	r3, r2, r3
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	4313      	orrs	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001160:	2201      	movs	r2, #1
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	43db      	mvns	r3, r3
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	4013      	ands	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	091b      	lsrs	r3, r3, #4
 8001176:	f003 0201 	and.w	r2, r3, #1
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	4313      	orrs	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	2203      	movs	r2, #3
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	43db      	mvns	r3, r3
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	4013      	ands	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	689a      	ldr	r2, [r3, #8]
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	2b02      	cmp	r3, #2
 80011c2:	d003      	beq.n	80011cc <HAL_GPIO_Init+0xfc>
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	2b12      	cmp	r3, #18
 80011ca:	d123      	bne.n	8001214 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	08da      	lsrs	r2, r3, #3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	3208      	adds	r2, #8
 80011d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	f003 0307 	and.w	r3, r3, #7
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	220f      	movs	r2, #15
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	43db      	mvns	r3, r3
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	4013      	ands	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	691a      	ldr	r2, [r3, #16]
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	f003 0307 	and.w	r3, r3, #7
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4313      	orrs	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	08da      	lsrs	r2, r3, #3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	3208      	adds	r2, #8
 800120e:	69b9      	ldr	r1, [r7, #24]
 8001210:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	2203      	movs	r2, #3
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	43db      	mvns	r3, r3
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	4013      	ands	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f003 0203 	and.w	r2, r3, #3
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4313      	orrs	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001250:	2b00      	cmp	r3, #0
 8001252:	f000 80b4 	beq.w	80013be <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	4b5f      	ldr	r3, [pc, #380]	; (80013d8 <HAL_GPIO_Init+0x308>)
 800125c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125e:	4a5e      	ldr	r2, [pc, #376]	; (80013d8 <HAL_GPIO_Init+0x308>)
 8001260:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001264:	6453      	str	r3, [r2, #68]	; 0x44
 8001266:	4b5c      	ldr	r3, [pc, #368]	; (80013d8 <HAL_GPIO_Init+0x308>)
 8001268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001272:	4a5a      	ldr	r2, [pc, #360]	; (80013dc <HAL_GPIO_Init+0x30c>)
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	089b      	lsrs	r3, r3, #2
 8001278:	3302      	adds	r3, #2
 800127a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800127e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	f003 0303 	and.w	r3, r3, #3
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	220f      	movs	r2, #15
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	43db      	mvns	r3, r3
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	4013      	ands	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a51      	ldr	r2, [pc, #324]	; (80013e0 <HAL_GPIO_Init+0x310>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d02b      	beq.n	80012f6 <HAL_GPIO_Init+0x226>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4a50      	ldr	r2, [pc, #320]	; (80013e4 <HAL_GPIO_Init+0x314>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d025      	beq.n	80012f2 <HAL_GPIO_Init+0x222>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4a4f      	ldr	r2, [pc, #316]	; (80013e8 <HAL_GPIO_Init+0x318>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d01f      	beq.n	80012ee <HAL_GPIO_Init+0x21e>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4a4e      	ldr	r2, [pc, #312]	; (80013ec <HAL_GPIO_Init+0x31c>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d019      	beq.n	80012ea <HAL_GPIO_Init+0x21a>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a4d      	ldr	r2, [pc, #308]	; (80013f0 <HAL_GPIO_Init+0x320>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d013      	beq.n	80012e6 <HAL_GPIO_Init+0x216>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a4c      	ldr	r2, [pc, #304]	; (80013f4 <HAL_GPIO_Init+0x324>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d00d      	beq.n	80012e2 <HAL_GPIO_Init+0x212>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a4b      	ldr	r2, [pc, #300]	; (80013f8 <HAL_GPIO_Init+0x328>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d007      	beq.n	80012de <HAL_GPIO_Init+0x20e>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a4a      	ldr	r2, [pc, #296]	; (80013fc <HAL_GPIO_Init+0x32c>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d101      	bne.n	80012da <HAL_GPIO_Init+0x20a>
 80012d6:	2307      	movs	r3, #7
 80012d8:	e00e      	b.n	80012f8 <HAL_GPIO_Init+0x228>
 80012da:	2308      	movs	r3, #8
 80012dc:	e00c      	b.n	80012f8 <HAL_GPIO_Init+0x228>
 80012de:	2306      	movs	r3, #6
 80012e0:	e00a      	b.n	80012f8 <HAL_GPIO_Init+0x228>
 80012e2:	2305      	movs	r3, #5
 80012e4:	e008      	b.n	80012f8 <HAL_GPIO_Init+0x228>
 80012e6:	2304      	movs	r3, #4
 80012e8:	e006      	b.n	80012f8 <HAL_GPIO_Init+0x228>
 80012ea:	2303      	movs	r3, #3
 80012ec:	e004      	b.n	80012f8 <HAL_GPIO_Init+0x228>
 80012ee:	2302      	movs	r3, #2
 80012f0:	e002      	b.n	80012f8 <HAL_GPIO_Init+0x228>
 80012f2:	2301      	movs	r3, #1
 80012f4:	e000      	b.n	80012f8 <HAL_GPIO_Init+0x228>
 80012f6:	2300      	movs	r3, #0
 80012f8:	69fa      	ldr	r2, [r7, #28]
 80012fa:	f002 0203 	and.w	r2, r2, #3
 80012fe:	0092      	lsls	r2, r2, #2
 8001300:	4093      	lsls	r3, r2
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	4313      	orrs	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001308:	4934      	ldr	r1, [pc, #208]	; (80013dc <HAL_GPIO_Init+0x30c>)
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	089b      	lsrs	r3, r3, #2
 800130e:	3302      	adds	r3, #2
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001316:	4b3a      	ldr	r3, [pc, #232]	; (8001400 <HAL_GPIO_Init+0x330>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	43db      	mvns	r3, r3
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	4013      	ands	r3, r2
 8001324:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d003      	beq.n	800133a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	4313      	orrs	r3, r2
 8001338:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800133a:	4a31      	ldr	r2, [pc, #196]	; (8001400 <HAL_GPIO_Init+0x330>)
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001340:	4b2f      	ldr	r3, [pc, #188]	; (8001400 <HAL_GPIO_Init+0x330>)
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	43db      	mvns	r3, r3
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	4013      	ands	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001358:	2b00      	cmp	r3, #0
 800135a:	d003      	beq.n	8001364 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	4313      	orrs	r3, r2
 8001362:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001364:	4a26      	ldr	r2, [pc, #152]	; (8001400 <HAL_GPIO_Init+0x330>)
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800136a:	4b25      	ldr	r3, [pc, #148]	; (8001400 <HAL_GPIO_Init+0x330>)
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	43db      	mvns	r3, r3
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	4013      	ands	r3, r2
 8001378:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d003      	beq.n	800138e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	4313      	orrs	r3, r2
 800138c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800138e:	4a1c      	ldr	r2, [pc, #112]	; (8001400 <HAL_GPIO_Init+0x330>)
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001394:	4b1a      	ldr	r3, [pc, #104]	; (8001400 <HAL_GPIO_Init+0x330>)
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	43db      	mvns	r3, r3
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	4013      	ands	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d003      	beq.n	80013b8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013b8:	4a11      	ldr	r2, [pc, #68]	; (8001400 <HAL_GPIO_Init+0x330>)
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	3301      	adds	r3, #1
 80013c2:	61fb      	str	r3, [r7, #28]
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	2b0f      	cmp	r3, #15
 80013c8:	f67f ae90 	bls.w	80010ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013cc:	bf00      	nop
 80013ce:	3724      	adds	r7, #36	; 0x24
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	40023800 	.word	0x40023800
 80013dc:	40013800 	.word	0x40013800
 80013e0:	40020000 	.word	0x40020000
 80013e4:	40020400 	.word	0x40020400
 80013e8:	40020800 	.word	0x40020800
 80013ec:	40020c00 	.word	0x40020c00
 80013f0:	40021000 	.word	0x40021000
 80013f4:	40021400 	.word	0x40021400
 80013f8:	40021800 	.word	0x40021800
 80013fc:	40021c00 	.word	0x40021c00
 8001400:	40013c00 	.word	0x40013c00

08001404 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001404:	b480      	push	{r7}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	460b      	mov	r3, r1
 800140e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	691a      	ldr	r2, [r3, #16]
 8001414:	887b      	ldrh	r3, [r7, #2]
 8001416:	4013      	ands	r3, r2
 8001418:	2b00      	cmp	r3, #0
 800141a:	d002      	beq.n	8001422 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800141c:	2301      	movs	r3, #1
 800141e:	73fb      	strb	r3, [r7, #15]
 8001420:	e001      	b.n	8001426 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001422:	2300      	movs	r3, #0
 8001424:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001426:	7bfb      	ldrb	r3, [r7, #15]
}
 8001428:	4618      	mov	r0, r3
 800142a:	3714      	adds	r7, #20
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr

08001434 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	460b      	mov	r3, r1
 800143e:	807b      	strh	r3, [r7, #2]
 8001440:	4613      	mov	r3, r2
 8001442:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001444:	787b      	ldrb	r3, [r7, #1]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d003      	beq.n	8001452 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800144a:	887a      	ldrh	r2, [r7, #2]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001450:	e003      	b.n	800145a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001452:	887b      	ldrh	r3, [r7, #2]
 8001454:	041a      	lsls	r2, r3, #16
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	619a      	str	r2, [r3, #24]
}
 800145a:	bf00      	nop
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr

08001466 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001466:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001468:	b08f      	sub	sp, #60	; 0x3c
 800146a:	af0a      	add	r7, sp, #40	; 0x28
 800146c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d101      	bne.n	8001478 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	e054      	b.n	8001522 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8001484:	b2db      	uxtb	r3, r3
 8001486:	2b00      	cmp	r3, #0
 8001488:	d106      	bne.n	8001498 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2200      	movs	r2, #0
 800148e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f005 ff42 	bl	800731c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2203      	movs	r2, #3
 800149c:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d102      	bne.n	80014b2 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2200      	movs	r2, #0
 80014b0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4618      	mov	r0, r3
 80014b8:	f003 f900 	bl	80046bc <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	603b      	str	r3, [r7, #0]
 80014c2:	687e      	ldr	r6, [r7, #4]
 80014c4:	466d      	mov	r5, sp
 80014c6:	f106 0410 	add.w	r4, r6, #16
 80014ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014d2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014d6:	e885 0003 	stmia.w	r5, {r0, r1}
 80014da:	1d33      	adds	r3, r6, #4
 80014dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014de:	6838      	ldr	r0, [r7, #0]
 80014e0:	f003 f87a 	bl	80045d8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2101      	movs	r1, #1
 80014ea:	4618      	mov	r0, r3
 80014ec:	f003 f8f7 	bl	80046de <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	603b      	str	r3, [r7, #0]
 80014f6:	687e      	ldr	r6, [r7, #4]
 80014f8:	466d      	mov	r5, sp
 80014fa:	f106 0410 	add.w	r4, r6, #16
 80014fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001500:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001502:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001504:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001506:	e894 0003 	ldmia.w	r4, {r0, r1}
 800150a:	e885 0003 	stmia.w	r5, {r0, r1}
 800150e:	1d33      	adds	r3, r6, #4
 8001510:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001512:	6838      	ldr	r0, [r7, #0]
 8001514:	f003 fa0a 	bl	800492c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2201      	movs	r2, #1
 800151c:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8001520:	2300      	movs	r3, #0
}
 8001522:	4618      	mov	r0, r3
 8001524:	3714      	adds	r7, #20
 8001526:	46bd      	mov	sp, r7
 8001528:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800152a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800152a:	b590      	push	{r4, r7, lr}
 800152c:	b089      	sub	sp, #36	; 0x24
 800152e:	af04      	add	r7, sp, #16
 8001530:	6078      	str	r0, [r7, #4]
 8001532:	4608      	mov	r0, r1
 8001534:	4611      	mov	r1, r2
 8001536:	461a      	mov	r2, r3
 8001538:	4603      	mov	r3, r0
 800153a:	70fb      	strb	r3, [r7, #3]
 800153c:	460b      	mov	r3, r1
 800153e:	70bb      	strb	r3, [r7, #2]
 8001540:	4613      	mov	r3, r2
 8001542:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800154a:	2b01      	cmp	r3, #1
 800154c:	d101      	bne.n	8001552 <HAL_HCD_HC_Init+0x28>
 800154e:	2302      	movs	r3, #2
 8001550:	e07f      	b.n	8001652 <HAL_HCD_HC_Init+0x128>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2201      	movs	r2, #1
 8001556:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 800155a:	78fa      	ldrb	r2, [r7, #3]
 800155c:	6879      	ldr	r1, [r7, #4]
 800155e:	4613      	mov	r3, r2
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	4413      	add	r3, r2
 8001564:	00db      	lsls	r3, r3, #3
 8001566:	440b      	add	r3, r1
 8001568:	333d      	adds	r3, #61	; 0x3d
 800156a:	2200      	movs	r2, #0
 800156c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800156e:	78fa      	ldrb	r2, [r7, #3]
 8001570:	6879      	ldr	r1, [r7, #4]
 8001572:	4613      	mov	r3, r2
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	4413      	add	r3, r2
 8001578:	00db      	lsls	r3, r3, #3
 800157a:	440b      	add	r3, r1
 800157c:	3338      	adds	r3, #56	; 0x38
 800157e:	787a      	ldrb	r2, [r7, #1]
 8001580:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001582:	78fa      	ldrb	r2, [r7, #3]
 8001584:	6879      	ldr	r1, [r7, #4]
 8001586:	4613      	mov	r3, r2
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	4413      	add	r3, r2
 800158c:	00db      	lsls	r3, r3, #3
 800158e:	440b      	add	r3, r1
 8001590:	3340      	adds	r3, #64	; 0x40
 8001592:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001594:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001596:	78fa      	ldrb	r2, [r7, #3]
 8001598:	6879      	ldr	r1, [r7, #4]
 800159a:	4613      	mov	r3, r2
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	4413      	add	r3, r2
 80015a0:	00db      	lsls	r3, r3, #3
 80015a2:	440b      	add	r3, r1
 80015a4:	3339      	adds	r3, #57	; 0x39
 80015a6:	78fa      	ldrb	r2, [r7, #3]
 80015a8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80015aa:	78fa      	ldrb	r2, [r7, #3]
 80015ac:	6879      	ldr	r1, [r7, #4]
 80015ae:	4613      	mov	r3, r2
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	4413      	add	r3, r2
 80015b4:	00db      	lsls	r3, r3, #3
 80015b6:	440b      	add	r3, r1
 80015b8:	333f      	adds	r3, #63	; 0x3f
 80015ba:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80015be:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80015c0:	78fa      	ldrb	r2, [r7, #3]
 80015c2:	78bb      	ldrb	r3, [r7, #2]
 80015c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80015c8:	b2d8      	uxtb	r0, r3
 80015ca:	6879      	ldr	r1, [r7, #4]
 80015cc:	4613      	mov	r3, r2
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	4413      	add	r3, r2
 80015d2:	00db      	lsls	r3, r3, #3
 80015d4:	440b      	add	r3, r1
 80015d6:	333a      	adds	r3, #58	; 0x3a
 80015d8:	4602      	mov	r2, r0
 80015da:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80015dc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	da0a      	bge.n	80015fa <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80015e4:	78fa      	ldrb	r2, [r7, #3]
 80015e6:	6879      	ldr	r1, [r7, #4]
 80015e8:	4613      	mov	r3, r2
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	4413      	add	r3, r2
 80015ee:	00db      	lsls	r3, r3, #3
 80015f0:	440b      	add	r3, r1
 80015f2:	333b      	adds	r3, #59	; 0x3b
 80015f4:	2201      	movs	r2, #1
 80015f6:	701a      	strb	r2, [r3, #0]
 80015f8:	e009      	b.n	800160e <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80015fa:	78fa      	ldrb	r2, [r7, #3]
 80015fc:	6879      	ldr	r1, [r7, #4]
 80015fe:	4613      	mov	r3, r2
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	4413      	add	r3, r2
 8001604:	00db      	lsls	r3, r3, #3
 8001606:	440b      	add	r3, r1
 8001608:	333b      	adds	r3, #59	; 0x3b
 800160a:	2200      	movs	r2, #0
 800160c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800160e:	78fa      	ldrb	r2, [r7, #3]
 8001610:	6879      	ldr	r1, [r7, #4]
 8001612:	4613      	mov	r3, r2
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	4413      	add	r3, r2
 8001618:	00db      	lsls	r3, r3, #3
 800161a:	440b      	add	r3, r1
 800161c:	333c      	adds	r3, #60	; 0x3c
 800161e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001622:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6818      	ldr	r0, [r3, #0]
 8001628:	787c      	ldrb	r4, [r7, #1]
 800162a:	78ba      	ldrb	r2, [r7, #2]
 800162c:	78f9      	ldrb	r1, [r7, #3]
 800162e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001630:	9302      	str	r3, [sp, #8]
 8001632:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001636:	9301      	str	r3, [sp, #4]
 8001638:	f897 3020 	ldrb.w	r3, [r7, #32]
 800163c:	9300      	str	r3, [sp, #0]
 800163e:	4623      	mov	r3, r4
 8001640:	f003 faf6 	bl	8004c30 <USB_HC_Init>
 8001644:	4603      	mov	r3, r0
 8001646:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2200      	movs	r2, #0
 800164c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001650:	7bfb      	ldrb	r3, [r7, #15]
}
 8001652:	4618      	mov	r0, r3
 8001654:	3714      	adds	r7, #20
 8001656:	46bd      	mov	sp, r7
 8001658:	bd90      	pop	{r4, r7, pc}

0800165a <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800165a:	b580      	push	{r7, lr}
 800165c:	b084      	sub	sp, #16
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
 8001662:	460b      	mov	r3, r1
 8001664:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001666:	2300      	movs	r3, #0
 8001668:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001670:	2b01      	cmp	r3, #1
 8001672:	d101      	bne.n	8001678 <HAL_HCD_HC_Halt+0x1e>
 8001674:	2302      	movs	r3, #2
 8001676:	e00f      	b.n	8001698 <HAL_HCD_HC_Halt+0x3e>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2201      	movs	r2, #1
 800167c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	78fa      	ldrb	r2, [r7, #3]
 8001686:	4611      	mov	r1, r2
 8001688:	4618      	mov	r0, r3
 800168a:	f003 fd30 	bl	80050ee <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001696:	7bfb      	ldrb	r3, [r7, #15]
}
 8001698:	4618      	mov	r0, r3
 800169a:	3710      	adds	r7, #16
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}

080016a0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	4608      	mov	r0, r1
 80016aa:	4611      	mov	r1, r2
 80016ac:	461a      	mov	r2, r3
 80016ae:	4603      	mov	r3, r0
 80016b0:	70fb      	strb	r3, [r7, #3]
 80016b2:	460b      	mov	r3, r1
 80016b4:	70bb      	strb	r3, [r7, #2]
 80016b6:	4613      	mov	r3, r2
 80016b8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80016ba:	78fa      	ldrb	r2, [r7, #3]
 80016bc:	6879      	ldr	r1, [r7, #4]
 80016be:	4613      	mov	r3, r2
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	4413      	add	r3, r2
 80016c4:	00db      	lsls	r3, r3, #3
 80016c6:	440b      	add	r3, r1
 80016c8:	333b      	adds	r3, #59	; 0x3b
 80016ca:	78ba      	ldrb	r2, [r7, #2]
 80016cc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80016ce:	78fa      	ldrb	r2, [r7, #3]
 80016d0:	6879      	ldr	r1, [r7, #4]
 80016d2:	4613      	mov	r3, r2
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	4413      	add	r3, r2
 80016d8:	00db      	lsls	r3, r3, #3
 80016da:	440b      	add	r3, r1
 80016dc:	333f      	adds	r3, #63	; 0x3f
 80016de:	787a      	ldrb	r2, [r7, #1]
 80016e0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80016e2:	7c3b      	ldrb	r3, [r7, #16]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d114      	bne.n	8001712 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80016e8:	78fa      	ldrb	r2, [r7, #3]
 80016ea:	6879      	ldr	r1, [r7, #4]
 80016ec:	4613      	mov	r3, r2
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	4413      	add	r3, r2
 80016f2:	00db      	lsls	r3, r3, #3
 80016f4:	440b      	add	r3, r1
 80016f6:	3342      	adds	r3, #66	; 0x42
 80016f8:	2203      	movs	r2, #3
 80016fa:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80016fc:	78fa      	ldrb	r2, [r7, #3]
 80016fe:	6879      	ldr	r1, [r7, #4]
 8001700:	4613      	mov	r3, r2
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	4413      	add	r3, r2
 8001706:	00db      	lsls	r3, r3, #3
 8001708:	440b      	add	r3, r1
 800170a:	333d      	adds	r3, #61	; 0x3d
 800170c:	7f3a      	ldrb	r2, [r7, #28]
 800170e:	701a      	strb	r2, [r3, #0]
 8001710:	e009      	b.n	8001726 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001712:	78fa      	ldrb	r2, [r7, #3]
 8001714:	6879      	ldr	r1, [r7, #4]
 8001716:	4613      	mov	r3, r2
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	4413      	add	r3, r2
 800171c:	00db      	lsls	r3, r3, #3
 800171e:	440b      	add	r3, r1
 8001720:	3342      	adds	r3, #66	; 0x42
 8001722:	2202      	movs	r2, #2
 8001724:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001726:	787b      	ldrb	r3, [r7, #1]
 8001728:	2b03      	cmp	r3, #3
 800172a:	f200 80d6 	bhi.w	80018da <HAL_HCD_HC_SubmitRequest+0x23a>
 800172e:	a201      	add	r2, pc, #4	; (adr r2, 8001734 <HAL_HCD_HC_SubmitRequest+0x94>)
 8001730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001734:	08001745 	.word	0x08001745
 8001738:	080018c5 	.word	0x080018c5
 800173c:	080017b1 	.word	0x080017b1
 8001740:	0800183b 	.word	0x0800183b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001744:	7c3b      	ldrb	r3, [r7, #16]
 8001746:	2b01      	cmp	r3, #1
 8001748:	f040 80c9 	bne.w	80018de <HAL_HCD_HC_SubmitRequest+0x23e>
 800174c:	78bb      	ldrb	r3, [r7, #2]
 800174e:	2b00      	cmp	r3, #0
 8001750:	f040 80c5 	bne.w	80018de <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8001754:	8b3b      	ldrh	r3, [r7, #24]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d109      	bne.n	800176e <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800175a:	78fa      	ldrb	r2, [r7, #3]
 800175c:	6879      	ldr	r1, [r7, #4]
 800175e:	4613      	mov	r3, r2
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	4413      	add	r3, r2
 8001764:	00db      	lsls	r3, r3, #3
 8001766:	440b      	add	r3, r1
 8001768:	3351      	adds	r3, #81	; 0x51
 800176a:	2201      	movs	r2, #1
 800176c:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800176e:	78fa      	ldrb	r2, [r7, #3]
 8001770:	6879      	ldr	r1, [r7, #4]
 8001772:	4613      	mov	r3, r2
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	4413      	add	r3, r2
 8001778:	00db      	lsls	r3, r3, #3
 800177a:	440b      	add	r3, r1
 800177c:	3351      	adds	r3, #81	; 0x51
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d10a      	bne.n	800179a <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001784:	78fa      	ldrb	r2, [r7, #3]
 8001786:	6879      	ldr	r1, [r7, #4]
 8001788:	4613      	mov	r3, r2
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	4413      	add	r3, r2
 800178e:	00db      	lsls	r3, r3, #3
 8001790:	440b      	add	r3, r1
 8001792:	3342      	adds	r3, #66	; 0x42
 8001794:	2200      	movs	r2, #0
 8001796:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001798:	e0a1      	b.n	80018de <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800179a:	78fa      	ldrb	r2, [r7, #3]
 800179c:	6879      	ldr	r1, [r7, #4]
 800179e:	4613      	mov	r3, r2
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	4413      	add	r3, r2
 80017a4:	00db      	lsls	r3, r3, #3
 80017a6:	440b      	add	r3, r1
 80017a8:	3342      	adds	r3, #66	; 0x42
 80017aa:	2202      	movs	r2, #2
 80017ac:	701a      	strb	r2, [r3, #0]
      break;
 80017ae:	e096      	b.n	80018de <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80017b0:	78bb      	ldrb	r3, [r7, #2]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d120      	bne.n	80017f8 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80017b6:	78fa      	ldrb	r2, [r7, #3]
 80017b8:	6879      	ldr	r1, [r7, #4]
 80017ba:	4613      	mov	r3, r2
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	4413      	add	r3, r2
 80017c0:	00db      	lsls	r3, r3, #3
 80017c2:	440b      	add	r3, r1
 80017c4:	3351      	adds	r3, #81	; 0x51
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d10a      	bne.n	80017e2 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017cc:	78fa      	ldrb	r2, [r7, #3]
 80017ce:	6879      	ldr	r1, [r7, #4]
 80017d0:	4613      	mov	r3, r2
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	4413      	add	r3, r2
 80017d6:	00db      	lsls	r3, r3, #3
 80017d8:	440b      	add	r3, r1
 80017da:	3342      	adds	r3, #66	; 0x42
 80017dc:	2200      	movs	r2, #0
 80017de:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80017e0:	e07e      	b.n	80018e0 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017e2:	78fa      	ldrb	r2, [r7, #3]
 80017e4:	6879      	ldr	r1, [r7, #4]
 80017e6:	4613      	mov	r3, r2
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	4413      	add	r3, r2
 80017ec:	00db      	lsls	r3, r3, #3
 80017ee:	440b      	add	r3, r1
 80017f0:	3342      	adds	r3, #66	; 0x42
 80017f2:	2202      	movs	r2, #2
 80017f4:	701a      	strb	r2, [r3, #0]
      break;
 80017f6:	e073      	b.n	80018e0 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80017f8:	78fa      	ldrb	r2, [r7, #3]
 80017fa:	6879      	ldr	r1, [r7, #4]
 80017fc:	4613      	mov	r3, r2
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	4413      	add	r3, r2
 8001802:	00db      	lsls	r3, r3, #3
 8001804:	440b      	add	r3, r1
 8001806:	3350      	adds	r3, #80	; 0x50
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d10a      	bne.n	8001824 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800180e:	78fa      	ldrb	r2, [r7, #3]
 8001810:	6879      	ldr	r1, [r7, #4]
 8001812:	4613      	mov	r3, r2
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	4413      	add	r3, r2
 8001818:	00db      	lsls	r3, r3, #3
 800181a:	440b      	add	r3, r1
 800181c:	3342      	adds	r3, #66	; 0x42
 800181e:	2200      	movs	r2, #0
 8001820:	701a      	strb	r2, [r3, #0]
      break;
 8001822:	e05d      	b.n	80018e0 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001824:	78fa      	ldrb	r2, [r7, #3]
 8001826:	6879      	ldr	r1, [r7, #4]
 8001828:	4613      	mov	r3, r2
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	4413      	add	r3, r2
 800182e:	00db      	lsls	r3, r3, #3
 8001830:	440b      	add	r3, r1
 8001832:	3342      	adds	r3, #66	; 0x42
 8001834:	2202      	movs	r2, #2
 8001836:	701a      	strb	r2, [r3, #0]
      break;
 8001838:	e052      	b.n	80018e0 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800183a:	78bb      	ldrb	r3, [r7, #2]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d120      	bne.n	8001882 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001840:	78fa      	ldrb	r2, [r7, #3]
 8001842:	6879      	ldr	r1, [r7, #4]
 8001844:	4613      	mov	r3, r2
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	4413      	add	r3, r2
 800184a:	00db      	lsls	r3, r3, #3
 800184c:	440b      	add	r3, r1
 800184e:	3351      	adds	r3, #81	; 0x51
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d10a      	bne.n	800186c <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001856:	78fa      	ldrb	r2, [r7, #3]
 8001858:	6879      	ldr	r1, [r7, #4]
 800185a:	4613      	mov	r3, r2
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	4413      	add	r3, r2
 8001860:	00db      	lsls	r3, r3, #3
 8001862:	440b      	add	r3, r1
 8001864:	3342      	adds	r3, #66	; 0x42
 8001866:	2200      	movs	r2, #0
 8001868:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800186a:	e039      	b.n	80018e0 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800186c:	78fa      	ldrb	r2, [r7, #3]
 800186e:	6879      	ldr	r1, [r7, #4]
 8001870:	4613      	mov	r3, r2
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	4413      	add	r3, r2
 8001876:	00db      	lsls	r3, r3, #3
 8001878:	440b      	add	r3, r1
 800187a:	3342      	adds	r3, #66	; 0x42
 800187c:	2202      	movs	r2, #2
 800187e:	701a      	strb	r2, [r3, #0]
      break;
 8001880:	e02e      	b.n	80018e0 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001882:	78fa      	ldrb	r2, [r7, #3]
 8001884:	6879      	ldr	r1, [r7, #4]
 8001886:	4613      	mov	r3, r2
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	4413      	add	r3, r2
 800188c:	00db      	lsls	r3, r3, #3
 800188e:	440b      	add	r3, r1
 8001890:	3350      	adds	r3, #80	; 0x50
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d10a      	bne.n	80018ae <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001898:	78fa      	ldrb	r2, [r7, #3]
 800189a:	6879      	ldr	r1, [r7, #4]
 800189c:	4613      	mov	r3, r2
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	4413      	add	r3, r2
 80018a2:	00db      	lsls	r3, r3, #3
 80018a4:	440b      	add	r3, r1
 80018a6:	3342      	adds	r3, #66	; 0x42
 80018a8:	2200      	movs	r2, #0
 80018aa:	701a      	strb	r2, [r3, #0]
      break;
 80018ac:	e018      	b.n	80018e0 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018ae:	78fa      	ldrb	r2, [r7, #3]
 80018b0:	6879      	ldr	r1, [r7, #4]
 80018b2:	4613      	mov	r3, r2
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	4413      	add	r3, r2
 80018b8:	00db      	lsls	r3, r3, #3
 80018ba:	440b      	add	r3, r1
 80018bc:	3342      	adds	r3, #66	; 0x42
 80018be:	2202      	movs	r2, #2
 80018c0:	701a      	strb	r2, [r3, #0]
      break;
 80018c2:	e00d      	b.n	80018e0 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018c4:	78fa      	ldrb	r2, [r7, #3]
 80018c6:	6879      	ldr	r1, [r7, #4]
 80018c8:	4613      	mov	r3, r2
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	4413      	add	r3, r2
 80018ce:	00db      	lsls	r3, r3, #3
 80018d0:	440b      	add	r3, r1
 80018d2:	3342      	adds	r3, #66	; 0x42
 80018d4:	2200      	movs	r2, #0
 80018d6:	701a      	strb	r2, [r3, #0]
      break;
 80018d8:	e002      	b.n	80018e0 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 80018da:	bf00      	nop
 80018dc:	e000      	b.n	80018e0 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 80018de:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80018e0:	78fa      	ldrb	r2, [r7, #3]
 80018e2:	6879      	ldr	r1, [r7, #4]
 80018e4:	4613      	mov	r3, r2
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	4413      	add	r3, r2
 80018ea:	00db      	lsls	r3, r3, #3
 80018ec:	440b      	add	r3, r1
 80018ee:	3344      	adds	r3, #68	; 0x44
 80018f0:	697a      	ldr	r2, [r7, #20]
 80018f2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80018f4:	78fa      	ldrb	r2, [r7, #3]
 80018f6:	8b39      	ldrh	r1, [r7, #24]
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	4613      	mov	r3, r2
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	4413      	add	r3, r2
 8001900:	00db      	lsls	r3, r3, #3
 8001902:	4403      	add	r3, r0
 8001904:	3348      	adds	r3, #72	; 0x48
 8001906:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001908:	78fa      	ldrb	r2, [r7, #3]
 800190a:	6879      	ldr	r1, [r7, #4]
 800190c:	4613      	mov	r3, r2
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	4413      	add	r3, r2
 8001912:	00db      	lsls	r3, r3, #3
 8001914:	440b      	add	r3, r1
 8001916:	335c      	adds	r3, #92	; 0x5c
 8001918:	2200      	movs	r2, #0
 800191a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800191c:	78fa      	ldrb	r2, [r7, #3]
 800191e:	6879      	ldr	r1, [r7, #4]
 8001920:	4613      	mov	r3, r2
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	4413      	add	r3, r2
 8001926:	00db      	lsls	r3, r3, #3
 8001928:	440b      	add	r3, r1
 800192a:	334c      	adds	r3, #76	; 0x4c
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001930:	78fa      	ldrb	r2, [r7, #3]
 8001932:	6879      	ldr	r1, [r7, #4]
 8001934:	4613      	mov	r3, r2
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	4413      	add	r3, r2
 800193a:	00db      	lsls	r3, r3, #3
 800193c:	440b      	add	r3, r1
 800193e:	3339      	adds	r3, #57	; 0x39
 8001940:	78fa      	ldrb	r2, [r7, #3]
 8001942:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001944:	78fa      	ldrb	r2, [r7, #3]
 8001946:	6879      	ldr	r1, [r7, #4]
 8001948:	4613      	mov	r3, r2
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	4413      	add	r3, r2
 800194e:	00db      	lsls	r3, r3, #3
 8001950:	440b      	add	r3, r1
 8001952:	335d      	adds	r3, #93	; 0x5d
 8001954:	2200      	movs	r2, #0
 8001956:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6818      	ldr	r0, [r3, #0]
 800195c:	78fa      	ldrb	r2, [r7, #3]
 800195e:	4613      	mov	r3, r2
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	4413      	add	r3, r2
 8001964:	00db      	lsls	r3, r3, #3
 8001966:	3338      	adds	r3, #56	; 0x38
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	18d1      	adds	r1, r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	691b      	ldr	r3, [r3, #16]
 8001970:	b2db      	uxtb	r3, r3
 8001972:	461a      	mov	r2, r3
 8001974:	f003 fa66 	bl	8004e44 <USB_HC_StartXfer>
 8001978:	4603      	mov	r3, r0
}
 800197a:	4618      	mov	r0, r3
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop

08001984 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b086      	sub	sp, #24
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4618      	mov	r0, r3
 800199c:	f002 ff83 	bl	80048a6 <USB_GetMode>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	f040 80ef 	bne.w	8001b86 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f002 ff67 	bl	8004880 <USB_ReadInterrupts>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	f000 80e5 	beq.w	8001b84 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4618      	mov	r0, r3
 80019c0:	f002 ff5e 	bl	8004880 <USB_ReadInterrupts>
 80019c4:	4603      	mov	r3, r0
 80019c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80019ce:	d104      	bne.n	80019da <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80019d8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4618      	mov	r0, r3
 80019e0:	f002 ff4e 	bl	8004880 <USB_ReadInterrupts>
 80019e4:	4603      	mov	r3, r0
 80019e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80019ee:	d104      	bne.n	80019fa <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80019f8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f002 ff3e 	bl	8004880 <USB_ReadInterrupts>
 8001a04:	4603      	mov	r3, r0
 8001a06:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a0a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001a0e:	d104      	bne.n	8001a1a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001a18:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f002 ff2e 	bl	8004880 <USB_ReadInterrupts>
 8001a24:	4603      	mov	r3, r0
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d103      	bne.n	8001a36 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2202      	movs	r2, #2
 8001a34:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f002 ff20 	bl	8004880 <USB_ReadInterrupts>
 8001a40:	4603      	mov	r3, r0
 8001a42:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a4a:	d115      	bne.n	8001a78 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001a54:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d108      	bne.n	8001a78 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f005 fcd6 	bl	8007418 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2101      	movs	r1, #1
 8001a72:	4618      	mov	r0, r3
 8001a74:	f003 f816 	bl	8004aa4 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f002 feff 	bl	8004880 <USB_ReadInterrupts>
 8001a82:	4603      	mov	r3, r0
 8001a84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a8c:	d102      	bne.n	8001a94 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f001 f966 	bl	8002d60 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f002 fef1 	bl	8004880 <USB_ReadInterrupts>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	f003 0308 	and.w	r3, r3, #8
 8001aa4:	2b08      	cmp	r3, #8
 8001aa6:	d106      	bne.n	8001ab6 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f005 fc99 	bl	80073e0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	2208      	movs	r2, #8
 8001ab4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f002 fee0 	bl	8004880 <USB_ReadInterrupts>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ac6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001aca:	d138      	bne.n	8001b3e <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f003 fafb 	bl	80050cc <USB_HC_ReadInterrupt>
 8001ad6:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001ad8:	2300      	movs	r3, #0
 8001ada:	617b      	str	r3, [r7, #20]
 8001adc:	e025      	b.n	8001b2a <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	f003 030f 	and.w	r3, r3, #15
 8001ae4:	68ba      	ldr	r2, [r7, #8]
 8001ae6:	fa22 f303 	lsr.w	r3, r2, r3
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d018      	beq.n	8001b24 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	015a      	lsls	r2, r3, #5
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	4413      	add	r3, r2
 8001afa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b08:	d106      	bne.n	8001b18 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	4619      	mov	r1, r3
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f000 f8cf 	bl	8001cb4 <HCD_HC_IN_IRQHandler>
 8001b16:	e005      	b.n	8001b24 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f000 fcfd 	bl	800251e <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	3301      	adds	r3, #1
 8001b28:	617b      	str	r3, [r7, #20]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	697a      	ldr	r2, [r7, #20]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d3d4      	bcc.n	8001ade <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f002 fe9c 	bl	8004880 <USB_ReadInterrupts>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	f003 0310 	and.w	r3, r3, #16
 8001b4e:	2b10      	cmp	r3, #16
 8001b50:	d101      	bne.n	8001b56 <HAL_HCD_IRQHandler+0x1d2>
 8001b52:	2301      	movs	r3, #1
 8001b54:	e000      	b.n	8001b58 <HAL_HCD_IRQHandler+0x1d4>
 8001b56:	2300      	movs	r3, #0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d014      	beq.n	8001b86 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	699a      	ldr	r2, [r3, #24]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f022 0210 	bic.w	r2, r2, #16
 8001b6a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f001 f84b 	bl	8002c08 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	699a      	ldr	r2, [r3, #24]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f042 0210 	orr.w	r2, r2, #16
 8001b80:	619a      	str	r2, [r3, #24]
 8001b82:	e000      	b.n	8001b86 <HAL_HCD_IRQHandler+0x202>
      return;
 8001b84:	bf00      	nop
    }
  }
}
 8001b86:	3718      	adds	r7, #24
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d101      	bne.n	8001ba2 <HAL_HCD_Start+0x16>
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	e013      	b.n	8001bca <HAL_HCD_Start+0x3e>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f002 fd73 	bl	800469a <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2101      	movs	r1, #1
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f002 ffd6 	bl	8004b6c <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b082      	sub	sp, #8
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d101      	bne.n	8001be8 <HAL_HCD_Stop+0x16>
 8001be4:	2302      	movs	r3, #2
 8001be6:	e00d      	b.n	8001c04 <HAL_HCD_Stop+0x32>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2201      	movs	r2, #1
 8001bec:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f003 fbb5 	bl	8005364 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8001c02:	2300      	movs	r3, #0
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3708      	adds	r7, #8
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f002 ff7d 	bl	8004b18 <USB_ResetPort>
 8001c1e:	4603      	mov	r3, r0
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3708      	adds	r7, #8
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	460b      	mov	r3, r1
 8001c32:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001c34:	78fa      	ldrb	r2, [r7, #3]
 8001c36:	6879      	ldr	r1, [r7, #4]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	4413      	add	r3, r2
 8001c3e:	00db      	lsls	r3, r3, #3
 8001c40:	440b      	add	r3, r1
 8001c42:	335c      	adds	r3, #92	; 0x5c
 8001c44:	781b      	ldrb	r3, [r3, #0]
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr

08001c52 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001c52:	b480      	push	{r7}
 8001c54:	b083      	sub	sp, #12
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001c5e:	78fa      	ldrb	r2, [r7, #3]
 8001c60:	6879      	ldr	r1, [r7, #4]
 8001c62:	4613      	mov	r3, r2
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	4413      	add	r3, r2
 8001c68:	00db      	lsls	r3, r3, #3
 8001c6a:	440b      	add	r3, r1
 8001c6c:	334c      	adds	r3, #76	; 0x4c
 8001c6e:	681b      	ldr	r3, [r3, #0]
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f002 ffbf 	bl	8004c0c <USB_GetCurrentFrame>
 8001c8e:	4603      	mov	r3, r0
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3708      	adds	r7, #8
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f002 ff9a 	bl	8004bde <USB_GetHostSpeed>
 8001caa:	4603      	mov	r3, r0
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3708      	adds	r7, #8
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b086      	sub	sp, #24
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001cca:	78fb      	ldrb	r3, [r7, #3]
 8001ccc:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	015a      	lsls	r2, r3, #5
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	f003 0304 	and.w	r3, r3, #4
 8001ce0:	2b04      	cmp	r3, #4
 8001ce2:	d119      	bne.n	8001d18 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	015a      	lsls	r2, r3, #5
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	4413      	add	r3, r2
 8001cec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	2304      	movs	r3, #4
 8001cf4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	015a      	lsls	r2, r3, #5
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	68fa      	ldr	r2, [r7, #12]
 8001d06:	0151      	lsls	r1, r2, #5
 8001d08:	693a      	ldr	r2, [r7, #16]
 8001d0a:	440a      	add	r2, r1
 8001d0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d10:	f043 0302 	orr.w	r3, r3, #2
 8001d14:	60d3      	str	r3, [r2, #12]
 8001d16:	e0ce      	b.n	8001eb6 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	015a      	lsls	r2, r3, #5
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	4413      	add	r3, r2
 8001d20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d2e:	d12c      	bne.n	8001d8a <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	015a      	lsls	r2, r3, #5
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	4413      	add	r3, r2
 8001d38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d42:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001d44:	6879      	ldr	r1, [r7, #4]
 8001d46:	68fa      	ldr	r2, [r7, #12]
 8001d48:	4613      	mov	r3, r2
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	4413      	add	r3, r2
 8001d4e:	00db      	lsls	r3, r3, #3
 8001d50:	440b      	add	r3, r1
 8001d52:	335d      	adds	r3, #93	; 0x5d
 8001d54:	2207      	movs	r2, #7
 8001d56:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	015a      	lsls	r2, r3, #5
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	4413      	add	r3, r2
 8001d60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	68fa      	ldr	r2, [r7, #12]
 8001d68:	0151      	lsls	r1, r2, #5
 8001d6a:	693a      	ldr	r2, [r7, #16]
 8001d6c:	440a      	add	r2, r1
 8001d6e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d72:	f043 0302 	orr.w	r3, r3, #2
 8001d76:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	68fa      	ldr	r2, [r7, #12]
 8001d7e:	b2d2      	uxtb	r2, r2
 8001d80:	4611      	mov	r1, r2
 8001d82:	4618      	mov	r0, r3
 8001d84:	f003 f9b3 	bl	80050ee <USB_HC_Halt>
 8001d88:	e095      	b.n	8001eb6 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	015a      	lsls	r2, r3, #5
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	4413      	add	r3, r2
 8001d92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	f003 0320 	and.w	r3, r3, #32
 8001d9c:	2b20      	cmp	r3, #32
 8001d9e:	d109      	bne.n	8001db4 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	015a      	lsls	r2, r3, #5
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	4413      	add	r3, r2
 8001da8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dac:	461a      	mov	r2, r3
 8001dae:	2320      	movs	r3, #32
 8001db0:	6093      	str	r3, [r2, #8]
 8001db2:	e080      	b.n	8001eb6 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	015a      	lsls	r2, r3, #5
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	4413      	add	r3, r2
 8001dbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	f003 0308 	and.w	r3, r3, #8
 8001dc6:	2b08      	cmp	r3, #8
 8001dc8:	d134      	bne.n	8001e34 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	015a      	lsls	r2, r3, #5
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	68fa      	ldr	r2, [r7, #12]
 8001dda:	0151      	lsls	r1, r2, #5
 8001ddc:	693a      	ldr	r2, [r7, #16]
 8001dde:	440a      	add	r2, r1
 8001de0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001de4:	f043 0302 	orr.w	r3, r3, #2
 8001de8:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001dea:	6879      	ldr	r1, [r7, #4]
 8001dec:	68fa      	ldr	r2, [r7, #12]
 8001dee:	4613      	mov	r3, r2
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	4413      	add	r3, r2
 8001df4:	00db      	lsls	r3, r3, #3
 8001df6:	440b      	add	r3, r1
 8001df8:	335d      	adds	r3, #93	; 0x5d
 8001dfa:	2205      	movs	r2, #5
 8001dfc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	015a      	lsls	r2, r3, #5
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	4413      	add	r3, r2
 8001e06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	2310      	movs	r3, #16
 8001e0e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	015a      	lsls	r2, r3, #5
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	4413      	add	r3, r2
 8001e18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	2308      	movs	r3, #8
 8001e20:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	68fa      	ldr	r2, [r7, #12]
 8001e28:	b2d2      	uxtb	r2, r2
 8001e2a:	4611      	mov	r1, r2
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f003 f95e 	bl	80050ee <USB_HC_Halt>
 8001e32:	e040      	b.n	8001eb6 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	015a      	lsls	r2, r3, #5
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e4a:	d134      	bne.n	8001eb6 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	015a      	lsls	r2, r3, #5
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	4413      	add	r3, r2
 8001e54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	68fa      	ldr	r2, [r7, #12]
 8001e5c:	0151      	lsls	r1, r2, #5
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	440a      	add	r2, r1
 8001e62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e66:	f043 0302 	orr.w	r3, r3, #2
 8001e6a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	68fa      	ldr	r2, [r7, #12]
 8001e72:	b2d2      	uxtb	r2, r2
 8001e74:	4611      	mov	r1, r2
 8001e76:	4618      	mov	r0, r3
 8001e78:	f003 f939 	bl	80050ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	015a      	lsls	r2, r3, #5
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	4413      	add	r3, r2
 8001e84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e88:	461a      	mov	r2, r3
 8001e8a:	2310      	movs	r3, #16
 8001e8c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001e8e:	6879      	ldr	r1, [r7, #4]
 8001e90:	68fa      	ldr	r2, [r7, #12]
 8001e92:	4613      	mov	r3, r2
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	4413      	add	r3, r2
 8001e98:	00db      	lsls	r3, r3, #3
 8001e9a:	440b      	add	r3, r1
 8001e9c:	335d      	adds	r3, #93	; 0x5d
 8001e9e:	2208      	movs	r2, #8
 8001ea0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	015a      	lsls	r2, r3, #5
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eae:	461a      	mov	r2, r3
 8001eb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001eb4:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	015a      	lsls	r2, r3, #5
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ec8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ecc:	d122      	bne.n	8001f14 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	015a      	lsls	r2, r3, #5
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	68fa      	ldr	r2, [r7, #12]
 8001ede:	0151      	lsls	r1, r2, #5
 8001ee0:	693a      	ldr	r2, [r7, #16]
 8001ee2:	440a      	add	r2, r1
 8001ee4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ee8:	f043 0302 	orr.w	r3, r3, #2
 8001eec:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	68fa      	ldr	r2, [r7, #12]
 8001ef4:	b2d2      	uxtb	r2, r2
 8001ef6:	4611      	mov	r1, r2
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f003 f8f8 	bl	80050ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	015a      	lsls	r2, r3, #5
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	4413      	add	r3, r2
 8001f06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f10:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001f12:	e300      	b.n	8002516 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	015a      	lsls	r2, r3, #5
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	f040 80fd 	bne.w	8002126 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	691b      	ldr	r3, [r3, #16]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d01b      	beq.n	8001f6c <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001f34:	6879      	ldr	r1, [r7, #4]
 8001f36:	68fa      	ldr	r2, [r7, #12]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	4413      	add	r3, r2
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	440b      	add	r3, r1
 8001f42:	3348      	adds	r3, #72	; 0x48
 8001f44:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	0159      	lsls	r1, r3, #5
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	440b      	add	r3, r1
 8001f4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f52:	691b      	ldr	r3, [r3, #16]
 8001f54:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001f58:	1ad1      	subs	r1, r2, r3
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	68fa      	ldr	r2, [r7, #12]
 8001f5e:	4613      	mov	r3, r2
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	4413      	add	r3, r2
 8001f64:	00db      	lsls	r3, r3, #3
 8001f66:	4403      	add	r3, r0
 8001f68:	334c      	adds	r3, #76	; 0x4c
 8001f6a:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001f6c:	6879      	ldr	r1, [r7, #4]
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	4613      	mov	r3, r2
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	4413      	add	r3, r2
 8001f76:	00db      	lsls	r3, r3, #3
 8001f78:	440b      	add	r3, r1
 8001f7a:	335d      	adds	r3, #93	; 0x5d
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001f80:	6879      	ldr	r1, [r7, #4]
 8001f82:	68fa      	ldr	r2, [r7, #12]
 8001f84:	4613      	mov	r3, r2
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	4413      	add	r3, r2
 8001f8a:	00db      	lsls	r3, r3, #3
 8001f8c:	440b      	add	r3, r1
 8001f8e:	3358      	adds	r3, #88	; 0x58
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	015a      	lsls	r2, r3, #5
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001fa6:	6879      	ldr	r1, [r7, #4]
 8001fa8:	68fa      	ldr	r2, [r7, #12]
 8001faa:	4613      	mov	r3, r2
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	4413      	add	r3, r2
 8001fb0:	00db      	lsls	r3, r3, #3
 8001fb2:	440b      	add	r3, r1
 8001fb4:	333f      	adds	r3, #63	; 0x3f
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d00a      	beq.n	8001fd2 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001fbc:	6879      	ldr	r1, [r7, #4]
 8001fbe:	68fa      	ldr	r2, [r7, #12]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	4413      	add	r3, r2
 8001fc6:	00db      	lsls	r3, r3, #3
 8001fc8:	440b      	add	r3, r1
 8001fca:	333f      	adds	r3, #63	; 0x3f
 8001fcc:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d121      	bne.n	8002016 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	015a      	lsls	r2, r3, #5
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	4413      	add	r3, r2
 8001fda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	68fa      	ldr	r2, [r7, #12]
 8001fe2:	0151      	lsls	r1, r2, #5
 8001fe4:	693a      	ldr	r2, [r7, #16]
 8001fe6:	440a      	add	r2, r1
 8001fe8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fec:	f043 0302 	orr.w	r3, r3, #2
 8001ff0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	68fa      	ldr	r2, [r7, #12]
 8001ff8:	b2d2      	uxtb	r2, r2
 8001ffa:	4611      	mov	r1, r2
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f003 f876 	bl	80050ee <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	015a      	lsls	r2, r3, #5
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	4413      	add	r3, r2
 800200a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800200e:	461a      	mov	r2, r3
 8002010:	2310      	movs	r3, #16
 8002012:	6093      	str	r3, [r2, #8]
 8002014:	e070      	b.n	80020f8 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002016:	6879      	ldr	r1, [r7, #4]
 8002018:	68fa      	ldr	r2, [r7, #12]
 800201a:	4613      	mov	r3, r2
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	4413      	add	r3, r2
 8002020:	00db      	lsls	r3, r3, #3
 8002022:	440b      	add	r3, r1
 8002024:	333f      	adds	r3, #63	; 0x3f
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	2b03      	cmp	r3, #3
 800202a:	d12a      	bne.n	8002082 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	015a      	lsls	r2, r3, #5
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	4413      	add	r3, r2
 8002034:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	68fa      	ldr	r2, [r7, #12]
 800203c:	0151      	lsls	r1, r2, #5
 800203e:	693a      	ldr	r2, [r7, #16]
 8002040:	440a      	add	r2, r1
 8002042:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002046:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800204a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800204c:	6879      	ldr	r1, [r7, #4]
 800204e:	68fa      	ldr	r2, [r7, #12]
 8002050:	4613      	mov	r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	4413      	add	r3, r2
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	440b      	add	r3, r1
 800205a:	335c      	adds	r3, #92	; 0x5c
 800205c:	2201      	movs	r2, #1
 800205e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	b2d8      	uxtb	r0, r3
 8002064:	6879      	ldr	r1, [r7, #4]
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	4613      	mov	r3, r2
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	4413      	add	r3, r2
 800206e:	00db      	lsls	r3, r3, #3
 8002070:	440b      	add	r3, r1
 8002072:	335c      	adds	r3, #92	; 0x5c
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	461a      	mov	r2, r3
 8002078:	4601      	mov	r1, r0
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f005 f9da 	bl	8007434 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002080:	e03a      	b.n	80020f8 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002082:	6879      	ldr	r1, [r7, #4]
 8002084:	68fa      	ldr	r2, [r7, #12]
 8002086:	4613      	mov	r3, r2
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	4413      	add	r3, r2
 800208c:	00db      	lsls	r3, r3, #3
 800208e:	440b      	add	r3, r1
 8002090:	333f      	adds	r3, #63	; 0x3f
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	2b01      	cmp	r3, #1
 8002096:	d12f      	bne.n	80020f8 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002098:	6879      	ldr	r1, [r7, #4]
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	4613      	mov	r3, r2
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	4413      	add	r3, r2
 80020a2:	00db      	lsls	r3, r3, #3
 80020a4:	440b      	add	r3, r1
 80020a6:	335c      	adds	r3, #92	; 0x5c
 80020a8:	2201      	movs	r2, #1
 80020aa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80020ac:	6879      	ldr	r1, [r7, #4]
 80020ae:	68fa      	ldr	r2, [r7, #12]
 80020b0:	4613      	mov	r3, r2
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	4413      	add	r3, r2
 80020b6:	00db      	lsls	r3, r3, #3
 80020b8:	440b      	add	r3, r1
 80020ba:	3350      	adds	r3, #80	; 0x50
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	f083 0301 	eor.w	r3, r3, #1
 80020c2:	b2d8      	uxtb	r0, r3
 80020c4:	6879      	ldr	r1, [r7, #4]
 80020c6:	68fa      	ldr	r2, [r7, #12]
 80020c8:	4613      	mov	r3, r2
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	4413      	add	r3, r2
 80020ce:	00db      	lsls	r3, r3, #3
 80020d0:	440b      	add	r3, r1
 80020d2:	3350      	adds	r3, #80	; 0x50
 80020d4:	4602      	mov	r2, r0
 80020d6:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	b2d8      	uxtb	r0, r3
 80020dc:	6879      	ldr	r1, [r7, #4]
 80020de:	68fa      	ldr	r2, [r7, #12]
 80020e0:	4613      	mov	r3, r2
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	4413      	add	r3, r2
 80020e6:	00db      	lsls	r3, r3, #3
 80020e8:	440b      	add	r3, r1
 80020ea:	335c      	adds	r3, #92	; 0x5c
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	461a      	mov	r2, r3
 80020f0:	4601      	mov	r1, r0
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f005 f99e 	bl	8007434 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 80020f8:	6879      	ldr	r1, [r7, #4]
 80020fa:	68fa      	ldr	r2, [r7, #12]
 80020fc:	4613      	mov	r3, r2
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	4413      	add	r3, r2
 8002102:	00db      	lsls	r3, r3, #3
 8002104:	440b      	add	r3, r1
 8002106:	3350      	adds	r3, #80	; 0x50
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	f083 0301 	eor.w	r3, r3, #1
 800210e:	b2d8      	uxtb	r0, r3
 8002110:	6879      	ldr	r1, [r7, #4]
 8002112:	68fa      	ldr	r2, [r7, #12]
 8002114:	4613      	mov	r3, r2
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	4413      	add	r3, r2
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	440b      	add	r3, r1
 800211e:	3350      	adds	r3, #80	; 0x50
 8002120:	4602      	mov	r2, r0
 8002122:	701a      	strb	r2, [r3, #0]
}
 8002124:	e1f7      	b.n	8002516 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	015a      	lsls	r2, r3, #5
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	4413      	add	r3, r2
 800212e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f003 0302 	and.w	r3, r3, #2
 8002138:	2b02      	cmp	r3, #2
 800213a:	f040 811a 	bne.w	8002372 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	015a      	lsls	r2, r3, #5
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	4413      	add	r3, r2
 8002146:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	68fa      	ldr	r2, [r7, #12]
 800214e:	0151      	lsls	r1, r2, #5
 8002150:	693a      	ldr	r2, [r7, #16]
 8002152:	440a      	add	r2, r1
 8002154:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002158:	f023 0302 	bic.w	r3, r3, #2
 800215c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800215e:	6879      	ldr	r1, [r7, #4]
 8002160:	68fa      	ldr	r2, [r7, #12]
 8002162:	4613      	mov	r3, r2
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	4413      	add	r3, r2
 8002168:	00db      	lsls	r3, r3, #3
 800216a:	440b      	add	r3, r1
 800216c:	335d      	adds	r3, #93	; 0x5d
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	2b01      	cmp	r3, #1
 8002172:	d10a      	bne.n	800218a <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002174:	6879      	ldr	r1, [r7, #4]
 8002176:	68fa      	ldr	r2, [r7, #12]
 8002178:	4613      	mov	r3, r2
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	4413      	add	r3, r2
 800217e:	00db      	lsls	r3, r3, #3
 8002180:	440b      	add	r3, r1
 8002182:	335c      	adds	r3, #92	; 0x5c
 8002184:	2201      	movs	r2, #1
 8002186:	701a      	strb	r2, [r3, #0]
 8002188:	e0d9      	b.n	800233e <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800218a:	6879      	ldr	r1, [r7, #4]
 800218c:	68fa      	ldr	r2, [r7, #12]
 800218e:	4613      	mov	r3, r2
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	4413      	add	r3, r2
 8002194:	00db      	lsls	r3, r3, #3
 8002196:	440b      	add	r3, r1
 8002198:	335d      	adds	r3, #93	; 0x5d
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	2b05      	cmp	r3, #5
 800219e:	d10a      	bne.n	80021b6 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80021a0:	6879      	ldr	r1, [r7, #4]
 80021a2:	68fa      	ldr	r2, [r7, #12]
 80021a4:	4613      	mov	r3, r2
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	4413      	add	r3, r2
 80021aa:	00db      	lsls	r3, r3, #3
 80021ac:	440b      	add	r3, r1
 80021ae:	335c      	adds	r3, #92	; 0x5c
 80021b0:	2205      	movs	r2, #5
 80021b2:	701a      	strb	r2, [r3, #0]
 80021b4:	e0c3      	b.n	800233e <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80021b6:	6879      	ldr	r1, [r7, #4]
 80021b8:	68fa      	ldr	r2, [r7, #12]
 80021ba:	4613      	mov	r3, r2
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	4413      	add	r3, r2
 80021c0:	00db      	lsls	r3, r3, #3
 80021c2:	440b      	add	r3, r1
 80021c4:	335d      	adds	r3, #93	; 0x5d
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	2b06      	cmp	r3, #6
 80021ca:	d00a      	beq.n	80021e2 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80021cc:	6879      	ldr	r1, [r7, #4]
 80021ce:	68fa      	ldr	r2, [r7, #12]
 80021d0:	4613      	mov	r3, r2
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	4413      	add	r3, r2
 80021d6:	00db      	lsls	r3, r3, #3
 80021d8:	440b      	add	r3, r1
 80021da:	335d      	adds	r3, #93	; 0x5d
 80021dc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80021de:	2b08      	cmp	r3, #8
 80021e0:	d156      	bne.n	8002290 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 80021e2:	6879      	ldr	r1, [r7, #4]
 80021e4:	68fa      	ldr	r2, [r7, #12]
 80021e6:	4613      	mov	r3, r2
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	4413      	add	r3, r2
 80021ec:	00db      	lsls	r3, r3, #3
 80021ee:	440b      	add	r3, r1
 80021f0:	3358      	adds	r3, #88	; 0x58
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	1c59      	adds	r1, r3, #1
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	68fa      	ldr	r2, [r7, #12]
 80021fa:	4613      	mov	r3, r2
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	4413      	add	r3, r2
 8002200:	00db      	lsls	r3, r3, #3
 8002202:	4403      	add	r3, r0
 8002204:	3358      	adds	r3, #88	; 0x58
 8002206:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002208:	6879      	ldr	r1, [r7, #4]
 800220a:	68fa      	ldr	r2, [r7, #12]
 800220c:	4613      	mov	r3, r2
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	4413      	add	r3, r2
 8002212:	00db      	lsls	r3, r3, #3
 8002214:	440b      	add	r3, r1
 8002216:	3358      	adds	r3, #88	; 0x58
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2b03      	cmp	r3, #3
 800221c:	d914      	bls.n	8002248 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800221e:	6879      	ldr	r1, [r7, #4]
 8002220:	68fa      	ldr	r2, [r7, #12]
 8002222:	4613      	mov	r3, r2
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	4413      	add	r3, r2
 8002228:	00db      	lsls	r3, r3, #3
 800222a:	440b      	add	r3, r1
 800222c:	3358      	adds	r3, #88	; 0x58
 800222e:	2200      	movs	r2, #0
 8002230:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002232:	6879      	ldr	r1, [r7, #4]
 8002234:	68fa      	ldr	r2, [r7, #12]
 8002236:	4613      	mov	r3, r2
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	4413      	add	r3, r2
 800223c:	00db      	lsls	r3, r3, #3
 800223e:	440b      	add	r3, r1
 8002240:	335c      	adds	r3, #92	; 0x5c
 8002242:	2204      	movs	r2, #4
 8002244:	701a      	strb	r2, [r3, #0]
 8002246:	e009      	b.n	800225c <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002248:	6879      	ldr	r1, [r7, #4]
 800224a:	68fa      	ldr	r2, [r7, #12]
 800224c:	4613      	mov	r3, r2
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	4413      	add	r3, r2
 8002252:	00db      	lsls	r3, r3, #3
 8002254:	440b      	add	r3, r1
 8002256:	335c      	adds	r3, #92	; 0x5c
 8002258:	2202      	movs	r2, #2
 800225a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	015a      	lsls	r2, r3, #5
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	4413      	add	r3, r2
 8002264:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002272:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800227a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	015a      	lsls	r2, r3, #5
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	4413      	add	r3, r2
 8002284:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002288:	461a      	mov	r2, r3
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	6013      	str	r3, [r2, #0]
 800228e:	e056      	b.n	800233e <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002290:	6879      	ldr	r1, [r7, #4]
 8002292:	68fa      	ldr	r2, [r7, #12]
 8002294:	4613      	mov	r3, r2
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	4413      	add	r3, r2
 800229a:	00db      	lsls	r3, r3, #3
 800229c:	440b      	add	r3, r1
 800229e:	335d      	adds	r3, #93	; 0x5d
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	2b03      	cmp	r3, #3
 80022a4:	d123      	bne.n	80022ee <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80022a6:	6879      	ldr	r1, [r7, #4]
 80022a8:	68fa      	ldr	r2, [r7, #12]
 80022aa:	4613      	mov	r3, r2
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	4413      	add	r3, r2
 80022b0:	00db      	lsls	r3, r3, #3
 80022b2:	440b      	add	r3, r1
 80022b4:	335c      	adds	r3, #92	; 0x5c
 80022b6:	2202      	movs	r2, #2
 80022b8:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	015a      	lsls	r2, r3, #5
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	4413      	add	r3, r2
 80022c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80022d0:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80022d8:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	015a      	lsls	r2, r3, #5
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	4413      	add	r3, r2
 80022e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022e6:	461a      	mov	r2, r3
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	6013      	str	r3, [r2, #0]
 80022ec:	e027      	b.n	800233e <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80022ee:	6879      	ldr	r1, [r7, #4]
 80022f0:	68fa      	ldr	r2, [r7, #12]
 80022f2:	4613      	mov	r3, r2
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	4413      	add	r3, r2
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	440b      	add	r3, r1
 80022fc:	335d      	adds	r3, #93	; 0x5d
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	2b07      	cmp	r3, #7
 8002302:	d11c      	bne.n	800233e <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8002304:	6879      	ldr	r1, [r7, #4]
 8002306:	68fa      	ldr	r2, [r7, #12]
 8002308:	4613      	mov	r3, r2
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	4413      	add	r3, r2
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	440b      	add	r3, r1
 8002312:	3358      	adds	r3, #88	; 0x58
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	1c59      	adds	r1, r3, #1
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	68fa      	ldr	r2, [r7, #12]
 800231c:	4613      	mov	r3, r2
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	4413      	add	r3, r2
 8002322:	00db      	lsls	r3, r3, #3
 8002324:	4403      	add	r3, r0
 8002326:	3358      	adds	r3, #88	; 0x58
 8002328:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800232a:	6879      	ldr	r1, [r7, #4]
 800232c:	68fa      	ldr	r2, [r7, #12]
 800232e:	4613      	mov	r3, r2
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	4413      	add	r3, r2
 8002334:	00db      	lsls	r3, r3, #3
 8002336:	440b      	add	r3, r1
 8002338:	335c      	adds	r3, #92	; 0x5c
 800233a:	2204      	movs	r2, #4
 800233c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	015a      	lsls	r2, r3, #5
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	4413      	add	r3, r2
 8002346:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800234a:	461a      	mov	r2, r3
 800234c:	2302      	movs	r3, #2
 800234e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	b2d8      	uxtb	r0, r3
 8002354:	6879      	ldr	r1, [r7, #4]
 8002356:	68fa      	ldr	r2, [r7, #12]
 8002358:	4613      	mov	r3, r2
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	4413      	add	r3, r2
 800235e:	00db      	lsls	r3, r3, #3
 8002360:	440b      	add	r3, r1
 8002362:	335c      	adds	r3, #92	; 0x5c
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	461a      	mov	r2, r3
 8002368:	4601      	mov	r1, r0
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f005 f862 	bl	8007434 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002370:	e0d1      	b.n	8002516 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	015a      	lsls	r2, r3, #5
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	4413      	add	r3, r2
 800237a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002384:	2b80      	cmp	r3, #128	; 0x80
 8002386:	d13e      	bne.n	8002406 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	015a      	lsls	r2, r3, #5
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	4413      	add	r3, r2
 8002390:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	68fa      	ldr	r2, [r7, #12]
 8002398:	0151      	lsls	r1, r2, #5
 800239a:	693a      	ldr	r2, [r7, #16]
 800239c:	440a      	add	r2, r1
 800239e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023a2:	f043 0302 	orr.w	r3, r3, #2
 80023a6:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80023a8:	6879      	ldr	r1, [r7, #4]
 80023aa:	68fa      	ldr	r2, [r7, #12]
 80023ac:	4613      	mov	r3, r2
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	4413      	add	r3, r2
 80023b2:	00db      	lsls	r3, r3, #3
 80023b4:	440b      	add	r3, r1
 80023b6:	3358      	adds	r3, #88	; 0x58
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	1c59      	adds	r1, r3, #1
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	68fa      	ldr	r2, [r7, #12]
 80023c0:	4613      	mov	r3, r2
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	4413      	add	r3, r2
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	4403      	add	r3, r0
 80023ca:	3358      	adds	r3, #88	; 0x58
 80023cc:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80023ce:	6879      	ldr	r1, [r7, #4]
 80023d0:	68fa      	ldr	r2, [r7, #12]
 80023d2:	4613      	mov	r3, r2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	4413      	add	r3, r2
 80023d8:	00db      	lsls	r3, r3, #3
 80023da:	440b      	add	r3, r1
 80023dc:	335d      	adds	r3, #93	; 0x5d
 80023de:	2206      	movs	r2, #6
 80023e0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	68fa      	ldr	r2, [r7, #12]
 80023e8:	b2d2      	uxtb	r2, r2
 80023ea:	4611      	mov	r1, r2
 80023ec:	4618      	mov	r0, r3
 80023ee:	f002 fe7e 	bl	80050ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	015a      	lsls	r2, r3, #5
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	4413      	add	r3, r2
 80023fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023fe:	461a      	mov	r2, r3
 8002400:	2380      	movs	r3, #128	; 0x80
 8002402:	6093      	str	r3, [r2, #8]
}
 8002404:	e087      	b.n	8002516 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	015a      	lsls	r2, r3, #5
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	4413      	add	r3, r2
 800240e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	f003 0310 	and.w	r3, r3, #16
 8002418:	2b10      	cmp	r3, #16
 800241a:	d17c      	bne.n	8002516 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800241c:	6879      	ldr	r1, [r7, #4]
 800241e:	68fa      	ldr	r2, [r7, #12]
 8002420:	4613      	mov	r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	4413      	add	r3, r2
 8002426:	00db      	lsls	r3, r3, #3
 8002428:	440b      	add	r3, r1
 800242a:	333f      	adds	r3, #63	; 0x3f
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	2b03      	cmp	r3, #3
 8002430:	d122      	bne.n	8002478 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002432:	6879      	ldr	r1, [r7, #4]
 8002434:	68fa      	ldr	r2, [r7, #12]
 8002436:	4613      	mov	r3, r2
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	4413      	add	r3, r2
 800243c:	00db      	lsls	r3, r3, #3
 800243e:	440b      	add	r3, r1
 8002440:	3358      	adds	r3, #88	; 0x58
 8002442:	2200      	movs	r2, #0
 8002444:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	015a      	lsls	r2, r3, #5
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	4413      	add	r3, r2
 800244e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	68fa      	ldr	r2, [r7, #12]
 8002456:	0151      	lsls	r1, r2, #5
 8002458:	693a      	ldr	r2, [r7, #16]
 800245a:	440a      	add	r2, r1
 800245c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002460:	f043 0302 	orr.w	r3, r3, #2
 8002464:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	68fa      	ldr	r2, [r7, #12]
 800246c:	b2d2      	uxtb	r2, r2
 800246e:	4611      	mov	r1, r2
 8002470:	4618      	mov	r0, r3
 8002472:	f002 fe3c 	bl	80050ee <USB_HC_Halt>
 8002476:	e045      	b.n	8002504 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002478:	6879      	ldr	r1, [r7, #4]
 800247a:	68fa      	ldr	r2, [r7, #12]
 800247c:	4613      	mov	r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	4413      	add	r3, r2
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	440b      	add	r3, r1
 8002486:	333f      	adds	r3, #63	; 0x3f
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d00a      	beq.n	80024a4 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800248e:	6879      	ldr	r1, [r7, #4]
 8002490:	68fa      	ldr	r2, [r7, #12]
 8002492:	4613      	mov	r3, r2
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	4413      	add	r3, r2
 8002498:	00db      	lsls	r3, r3, #3
 800249a:	440b      	add	r3, r1
 800249c:	333f      	adds	r3, #63	; 0x3f
 800249e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d12f      	bne.n	8002504 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80024a4:	6879      	ldr	r1, [r7, #4]
 80024a6:	68fa      	ldr	r2, [r7, #12]
 80024a8:	4613      	mov	r3, r2
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	4413      	add	r3, r2
 80024ae:	00db      	lsls	r3, r3, #3
 80024b0:	440b      	add	r3, r1
 80024b2:	3358      	adds	r3, #88	; 0x58
 80024b4:	2200      	movs	r2, #0
 80024b6:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	691b      	ldr	r3, [r3, #16]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d121      	bne.n	8002504 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 80024c0:	6879      	ldr	r1, [r7, #4]
 80024c2:	68fa      	ldr	r2, [r7, #12]
 80024c4:	4613      	mov	r3, r2
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	4413      	add	r3, r2
 80024ca:	00db      	lsls	r3, r3, #3
 80024cc:	440b      	add	r3, r1
 80024ce:	335d      	adds	r3, #93	; 0x5d
 80024d0:	2203      	movs	r2, #3
 80024d2:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	015a      	lsls	r2, r3, #5
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	4413      	add	r3, r2
 80024dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	68fa      	ldr	r2, [r7, #12]
 80024e4:	0151      	lsls	r1, r2, #5
 80024e6:	693a      	ldr	r2, [r7, #16]
 80024e8:	440a      	add	r2, r1
 80024ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024ee:	f043 0302 	orr.w	r3, r3, #2
 80024f2:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	68fa      	ldr	r2, [r7, #12]
 80024fa:	b2d2      	uxtb	r2, r2
 80024fc:	4611      	mov	r1, r2
 80024fe:	4618      	mov	r0, r3
 8002500:	f002 fdf5 	bl	80050ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	015a      	lsls	r2, r3, #5
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	4413      	add	r3, r2
 800250c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002510:	461a      	mov	r2, r3
 8002512:	2310      	movs	r3, #16
 8002514:	6093      	str	r3, [r2, #8]
}
 8002516:	bf00      	nop
 8002518:	3718      	adds	r7, #24
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800251e:	b580      	push	{r7, lr}
 8002520:	b086      	sub	sp, #24
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
 8002526:	460b      	mov	r3, r1
 8002528:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002534:	78fb      	ldrb	r3, [r7, #3]
 8002536:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	015a      	lsls	r2, r3, #5
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	4413      	add	r3, r2
 8002540:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	f003 0304 	and.w	r3, r3, #4
 800254a:	2b04      	cmp	r3, #4
 800254c:	d119      	bne.n	8002582 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	015a      	lsls	r2, r3, #5
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	4413      	add	r3, r2
 8002556:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800255a:	461a      	mov	r2, r3
 800255c:	2304      	movs	r3, #4
 800255e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	015a      	lsls	r2, r3, #5
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	4413      	add	r3, r2
 8002568:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	68fa      	ldr	r2, [r7, #12]
 8002570:	0151      	lsls	r1, r2, #5
 8002572:	693a      	ldr	r2, [r7, #16]
 8002574:	440a      	add	r2, r1
 8002576:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800257a:	f043 0302 	orr.w	r3, r3, #2
 800257e:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002580:	e33e      	b.n	8002c00 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	015a      	lsls	r2, r3, #5
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	4413      	add	r3, r2
 800258a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f003 0320 	and.w	r3, r3, #32
 8002594:	2b20      	cmp	r3, #32
 8002596:	d141      	bne.n	800261c <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	015a      	lsls	r2, r3, #5
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	4413      	add	r3, r2
 80025a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025a4:	461a      	mov	r2, r3
 80025a6:	2320      	movs	r3, #32
 80025a8:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80025aa:	6879      	ldr	r1, [r7, #4]
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	4613      	mov	r3, r2
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	4413      	add	r3, r2
 80025b4:	00db      	lsls	r3, r3, #3
 80025b6:	440b      	add	r3, r1
 80025b8:	333d      	adds	r3, #61	; 0x3d
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	f040 831f 	bne.w	8002c00 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 80025c2:	6879      	ldr	r1, [r7, #4]
 80025c4:	68fa      	ldr	r2, [r7, #12]
 80025c6:	4613      	mov	r3, r2
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	4413      	add	r3, r2
 80025cc:	00db      	lsls	r3, r3, #3
 80025ce:	440b      	add	r3, r1
 80025d0:	333d      	adds	r3, #61	; 0x3d
 80025d2:	2200      	movs	r2, #0
 80025d4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80025d6:	6879      	ldr	r1, [r7, #4]
 80025d8:	68fa      	ldr	r2, [r7, #12]
 80025da:	4613      	mov	r3, r2
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	4413      	add	r3, r2
 80025e0:	00db      	lsls	r3, r3, #3
 80025e2:	440b      	add	r3, r1
 80025e4:	335c      	adds	r3, #92	; 0x5c
 80025e6:	2202      	movs	r2, #2
 80025e8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	015a      	lsls	r2, r3, #5
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	4413      	add	r3, r2
 80025f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	68fa      	ldr	r2, [r7, #12]
 80025fa:	0151      	lsls	r1, r2, #5
 80025fc:	693a      	ldr	r2, [r7, #16]
 80025fe:	440a      	add	r2, r1
 8002600:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002604:	f043 0302 	orr.w	r3, r3, #2
 8002608:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	68fa      	ldr	r2, [r7, #12]
 8002610:	b2d2      	uxtb	r2, r2
 8002612:	4611      	mov	r1, r2
 8002614:	4618      	mov	r0, r3
 8002616:	f002 fd6a 	bl	80050ee <USB_HC_Halt>
}
 800261a:	e2f1      	b.n	8002c00 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	015a      	lsls	r2, r3, #5
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	4413      	add	r3, r2
 8002624:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800262e:	2b40      	cmp	r3, #64	; 0x40
 8002630:	d13f      	bne.n	80026b2 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8002632:	6879      	ldr	r1, [r7, #4]
 8002634:	68fa      	ldr	r2, [r7, #12]
 8002636:	4613      	mov	r3, r2
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	4413      	add	r3, r2
 800263c:	00db      	lsls	r3, r3, #3
 800263e:	440b      	add	r3, r1
 8002640:	335d      	adds	r3, #93	; 0x5d
 8002642:	2204      	movs	r2, #4
 8002644:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002646:	6879      	ldr	r1, [r7, #4]
 8002648:	68fa      	ldr	r2, [r7, #12]
 800264a:	4613      	mov	r3, r2
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	4413      	add	r3, r2
 8002650:	00db      	lsls	r3, r3, #3
 8002652:	440b      	add	r3, r1
 8002654:	333d      	adds	r3, #61	; 0x3d
 8002656:	2201      	movs	r2, #1
 8002658:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800265a:	6879      	ldr	r1, [r7, #4]
 800265c:	68fa      	ldr	r2, [r7, #12]
 800265e:	4613      	mov	r3, r2
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	4413      	add	r3, r2
 8002664:	00db      	lsls	r3, r3, #3
 8002666:	440b      	add	r3, r1
 8002668:	3358      	adds	r3, #88	; 0x58
 800266a:	2200      	movs	r2, #0
 800266c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	015a      	lsls	r2, r3, #5
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	4413      	add	r3, r2
 8002676:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	68fa      	ldr	r2, [r7, #12]
 800267e:	0151      	lsls	r1, r2, #5
 8002680:	693a      	ldr	r2, [r7, #16]
 8002682:	440a      	add	r2, r1
 8002684:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002688:	f043 0302 	orr.w	r3, r3, #2
 800268c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	68fa      	ldr	r2, [r7, #12]
 8002694:	b2d2      	uxtb	r2, r2
 8002696:	4611      	mov	r1, r2
 8002698:	4618      	mov	r0, r3
 800269a:	f002 fd28 	bl	80050ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	015a      	lsls	r2, r3, #5
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	4413      	add	r3, r2
 80026a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026aa:	461a      	mov	r2, r3
 80026ac:	2340      	movs	r3, #64	; 0x40
 80026ae:	6093      	str	r3, [r2, #8]
}
 80026b0:	e2a6      	b.n	8002c00 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	015a      	lsls	r2, r3, #5
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	4413      	add	r3, r2
 80026ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026c8:	d122      	bne.n	8002710 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	015a      	lsls	r2, r3, #5
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	4413      	add	r3, r2
 80026d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	68fa      	ldr	r2, [r7, #12]
 80026da:	0151      	lsls	r1, r2, #5
 80026dc:	693a      	ldr	r2, [r7, #16]
 80026de:	440a      	add	r2, r1
 80026e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026e4:	f043 0302 	orr.w	r3, r3, #2
 80026e8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	68fa      	ldr	r2, [r7, #12]
 80026f0:	b2d2      	uxtb	r2, r2
 80026f2:	4611      	mov	r1, r2
 80026f4:	4618      	mov	r0, r3
 80026f6:	f002 fcfa 	bl	80050ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	015a      	lsls	r2, r3, #5
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	4413      	add	r3, r2
 8002702:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002706:	461a      	mov	r2, r3
 8002708:	f44f 7300 	mov.w	r3, #512	; 0x200
 800270c:	6093      	str	r3, [r2, #8]
}
 800270e:	e277      	b.n	8002c00 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	015a      	lsls	r2, r3, #5
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	4413      	add	r3, r2
 8002718:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	2b01      	cmp	r3, #1
 8002724:	d135      	bne.n	8002792 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002726:	6879      	ldr	r1, [r7, #4]
 8002728:	68fa      	ldr	r2, [r7, #12]
 800272a:	4613      	mov	r3, r2
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	4413      	add	r3, r2
 8002730:	00db      	lsls	r3, r3, #3
 8002732:	440b      	add	r3, r1
 8002734:	3358      	adds	r3, #88	; 0x58
 8002736:	2200      	movs	r2, #0
 8002738:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	015a      	lsls	r2, r3, #5
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	4413      	add	r3, r2
 8002742:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	68fa      	ldr	r2, [r7, #12]
 800274a:	0151      	lsls	r1, r2, #5
 800274c:	693a      	ldr	r2, [r7, #16]
 800274e:	440a      	add	r2, r1
 8002750:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002754:	f043 0302 	orr.w	r3, r3, #2
 8002758:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	68fa      	ldr	r2, [r7, #12]
 8002760:	b2d2      	uxtb	r2, r2
 8002762:	4611      	mov	r1, r2
 8002764:	4618      	mov	r0, r3
 8002766:	f002 fcc2 	bl	80050ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	015a      	lsls	r2, r3, #5
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	4413      	add	r3, r2
 8002772:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002776:	461a      	mov	r2, r3
 8002778:	2301      	movs	r3, #1
 800277a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800277c:	6879      	ldr	r1, [r7, #4]
 800277e:	68fa      	ldr	r2, [r7, #12]
 8002780:	4613      	mov	r3, r2
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	4413      	add	r3, r2
 8002786:	00db      	lsls	r3, r3, #3
 8002788:	440b      	add	r3, r1
 800278a:	335d      	adds	r3, #93	; 0x5d
 800278c:	2201      	movs	r2, #1
 800278e:	701a      	strb	r2, [r3, #0]
}
 8002790:	e236      	b.n	8002c00 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	015a      	lsls	r2, r3, #5
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	4413      	add	r3, r2
 800279a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f003 0308 	and.w	r3, r3, #8
 80027a4:	2b08      	cmp	r3, #8
 80027a6:	d12b      	bne.n	8002800 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	015a      	lsls	r2, r3, #5
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	4413      	add	r3, r2
 80027b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027b4:	461a      	mov	r2, r3
 80027b6:	2308      	movs	r3, #8
 80027b8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	015a      	lsls	r2, r3, #5
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	4413      	add	r3, r2
 80027c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	68fa      	ldr	r2, [r7, #12]
 80027ca:	0151      	lsls	r1, r2, #5
 80027cc:	693a      	ldr	r2, [r7, #16]
 80027ce:	440a      	add	r2, r1
 80027d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027d4:	f043 0302 	orr.w	r3, r3, #2
 80027d8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	68fa      	ldr	r2, [r7, #12]
 80027e0:	b2d2      	uxtb	r2, r2
 80027e2:	4611      	mov	r1, r2
 80027e4:	4618      	mov	r0, r3
 80027e6:	f002 fc82 	bl	80050ee <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80027ea:	6879      	ldr	r1, [r7, #4]
 80027ec:	68fa      	ldr	r2, [r7, #12]
 80027ee:	4613      	mov	r3, r2
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	4413      	add	r3, r2
 80027f4:	00db      	lsls	r3, r3, #3
 80027f6:	440b      	add	r3, r1
 80027f8:	335d      	adds	r3, #93	; 0x5d
 80027fa:	2205      	movs	r2, #5
 80027fc:	701a      	strb	r2, [r3, #0]
}
 80027fe:	e1ff      	b.n	8002c00 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	015a      	lsls	r2, r3, #5
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	4413      	add	r3, r2
 8002808:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f003 0310 	and.w	r3, r3, #16
 8002812:	2b10      	cmp	r3, #16
 8002814:	d155      	bne.n	80028c2 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002816:	6879      	ldr	r1, [r7, #4]
 8002818:	68fa      	ldr	r2, [r7, #12]
 800281a:	4613      	mov	r3, r2
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	4413      	add	r3, r2
 8002820:	00db      	lsls	r3, r3, #3
 8002822:	440b      	add	r3, r1
 8002824:	3358      	adds	r3, #88	; 0x58
 8002826:	2200      	movs	r2, #0
 8002828:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800282a:	6879      	ldr	r1, [r7, #4]
 800282c:	68fa      	ldr	r2, [r7, #12]
 800282e:	4613      	mov	r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	4413      	add	r3, r2
 8002834:	00db      	lsls	r3, r3, #3
 8002836:	440b      	add	r3, r1
 8002838:	335d      	adds	r3, #93	; 0x5d
 800283a:	2203      	movs	r2, #3
 800283c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800283e:	6879      	ldr	r1, [r7, #4]
 8002840:	68fa      	ldr	r2, [r7, #12]
 8002842:	4613      	mov	r3, r2
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	4413      	add	r3, r2
 8002848:	00db      	lsls	r3, r3, #3
 800284a:	440b      	add	r3, r1
 800284c:	333d      	adds	r3, #61	; 0x3d
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d114      	bne.n	800287e <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8002854:	6879      	ldr	r1, [r7, #4]
 8002856:	68fa      	ldr	r2, [r7, #12]
 8002858:	4613      	mov	r3, r2
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	4413      	add	r3, r2
 800285e:	00db      	lsls	r3, r3, #3
 8002860:	440b      	add	r3, r1
 8002862:	333c      	adds	r3, #60	; 0x3c
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d109      	bne.n	800287e <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 800286a:	6879      	ldr	r1, [r7, #4]
 800286c:	68fa      	ldr	r2, [r7, #12]
 800286e:	4613      	mov	r3, r2
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	4413      	add	r3, r2
 8002874:	00db      	lsls	r3, r3, #3
 8002876:	440b      	add	r3, r1
 8002878:	333d      	adds	r3, #61	; 0x3d
 800287a:	2201      	movs	r2, #1
 800287c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	015a      	lsls	r2, r3, #5
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	4413      	add	r3, r2
 8002886:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	68fa      	ldr	r2, [r7, #12]
 800288e:	0151      	lsls	r1, r2, #5
 8002890:	693a      	ldr	r2, [r7, #16]
 8002892:	440a      	add	r2, r1
 8002894:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002898:	f043 0302 	orr.w	r3, r3, #2
 800289c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	68fa      	ldr	r2, [r7, #12]
 80028a4:	b2d2      	uxtb	r2, r2
 80028a6:	4611      	mov	r1, r2
 80028a8:	4618      	mov	r0, r3
 80028aa:	f002 fc20 	bl	80050ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	015a      	lsls	r2, r3, #5
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	4413      	add	r3, r2
 80028b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ba:	461a      	mov	r2, r3
 80028bc:	2310      	movs	r3, #16
 80028be:	6093      	str	r3, [r2, #8]
}
 80028c0:	e19e      	b.n	8002c00 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	015a      	lsls	r2, r3, #5
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	4413      	add	r3, r2
 80028ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028d4:	2b80      	cmp	r3, #128	; 0x80
 80028d6:	d12b      	bne.n	8002930 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	015a      	lsls	r2, r3, #5
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	4413      	add	r3, r2
 80028e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	0151      	lsls	r1, r2, #5
 80028ea:	693a      	ldr	r2, [r7, #16]
 80028ec:	440a      	add	r2, r1
 80028ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028f2:	f043 0302 	orr.w	r3, r3, #2
 80028f6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	68fa      	ldr	r2, [r7, #12]
 80028fe:	b2d2      	uxtb	r2, r2
 8002900:	4611      	mov	r1, r2
 8002902:	4618      	mov	r0, r3
 8002904:	f002 fbf3 	bl	80050ee <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002908:	6879      	ldr	r1, [r7, #4]
 800290a:	68fa      	ldr	r2, [r7, #12]
 800290c:	4613      	mov	r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	4413      	add	r3, r2
 8002912:	00db      	lsls	r3, r3, #3
 8002914:	440b      	add	r3, r1
 8002916:	335d      	adds	r3, #93	; 0x5d
 8002918:	2206      	movs	r2, #6
 800291a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	015a      	lsls	r2, r3, #5
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	4413      	add	r3, r2
 8002924:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002928:	461a      	mov	r2, r3
 800292a:	2380      	movs	r3, #128	; 0x80
 800292c:	6093      	str	r3, [r2, #8]
}
 800292e:	e167      	b.n	8002c00 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	015a      	lsls	r2, r3, #5
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	4413      	add	r3, r2
 8002938:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002942:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002946:	d135      	bne.n	80029b4 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	015a      	lsls	r2, r3, #5
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	4413      	add	r3, r2
 8002950:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	68fa      	ldr	r2, [r7, #12]
 8002958:	0151      	lsls	r1, r2, #5
 800295a:	693a      	ldr	r2, [r7, #16]
 800295c:	440a      	add	r2, r1
 800295e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002962:	f043 0302 	orr.w	r3, r3, #2
 8002966:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	68fa      	ldr	r2, [r7, #12]
 800296e:	b2d2      	uxtb	r2, r2
 8002970:	4611      	mov	r1, r2
 8002972:	4618      	mov	r0, r3
 8002974:	f002 fbbb 	bl	80050ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	015a      	lsls	r2, r3, #5
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	4413      	add	r3, r2
 8002980:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002984:	461a      	mov	r2, r3
 8002986:	2310      	movs	r3, #16
 8002988:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	015a      	lsls	r2, r3, #5
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	4413      	add	r3, r2
 8002992:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002996:	461a      	mov	r2, r3
 8002998:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800299c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800299e:	6879      	ldr	r1, [r7, #4]
 80029a0:	68fa      	ldr	r2, [r7, #12]
 80029a2:	4613      	mov	r3, r2
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	4413      	add	r3, r2
 80029a8:	00db      	lsls	r3, r3, #3
 80029aa:	440b      	add	r3, r1
 80029ac:	335d      	adds	r3, #93	; 0x5d
 80029ae:	2208      	movs	r2, #8
 80029b0:	701a      	strb	r2, [r3, #0]
}
 80029b2:	e125      	b.n	8002c00 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	015a      	lsls	r2, r3, #5
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	4413      	add	r3, r2
 80029bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	f040 811a 	bne.w	8002c00 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	015a      	lsls	r2, r3, #5
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	4413      	add	r3, r2
 80029d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	68fa      	ldr	r2, [r7, #12]
 80029dc:	0151      	lsls	r1, r2, #5
 80029de:	693a      	ldr	r2, [r7, #16]
 80029e0:	440a      	add	r2, r1
 80029e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029e6:	f023 0302 	bic.w	r3, r3, #2
 80029ea:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80029ec:	6879      	ldr	r1, [r7, #4]
 80029ee:	68fa      	ldr	r2, [r7, #12]
 80029f0:	4613      	mov	r3, r2
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	4413      	add	r3, r2
 80029f6:	00db      	lsls	r3, r3, #3
 80029f8:	440b      	add	r3, r1
 80029fa:	335d      	adds	r3, #93	; 0x5d
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d137      	bne.n	8002a72 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002a02:	6879      	ldr	r1, [r7, #4]
 8002a04:	68fa      	ldr	r2, [r7, #12]
 8002a06:	4613      	mov	r3, r2
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	4413      	add	r3, r2
 8002a0c:	00db      	lsls	r3, r3, #3
 8002a0e:	440b      	add	r3, r1
 8002a10:	335c      	adds	r3, #92	; 0x5c
 8002a12:	2201      	movs	r2, #1
 8002a14:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002a16:	6879      	ldr	r1, [r7, #4]
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	4413      	add	r3, r2
 8002a20:	00db      	lsls	r3, r3, #3
 8002a22:	440b      	add	r3, r1
 8002a24:	333f      	adds	r3, #63	; 0x3f
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d00b      	beq.n	8002a44 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002a2c:	6879      	ldr	r1, [r7, #4]
 8002a2e:	68fa      	ldr	r2, [r7, #12]
 8002a30:	4613      	mov	r3, r2
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	4413      	add	r3, r2
 8002a36:	00db      	lsls	r3, r3, #3
 8002a38:	440b      	add	r3, r1
 8002a3a:	333f      	adds	r3, #63	; 0x3f
 8002a3c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002a3e:	2b03      	cmp	r3, #3
 8002a40:	f040 80c5 	bne.w	8002bce <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8002a44:	6879      	ldr	r1, [r7, #4]
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	4613      	mov	r3, r2
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	4413      	add	r3, r2
 8002a4e:	00db      	lsls	r3, r3, #3
 8002a50:	440b      	add	r3, r1
 8002a52:	3351      	adds	r3, #81	; 0x51
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	f083 0301 	eor.w	r3, r3, #1
 8002a5a:	b2d8      	uxtb	r0, r3
 8002a5c:	6879      	ldr	r1, [r7, #4]
 8002a5e:	68fa      	ldr	r2, [r7, #12]
 8002a60:	4613      	mov	r3, r2
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	4413      	add	r3, r2
 8002a66:	00db      	lsls	r3, r3, #3
 8002a68:	440b      	add	r3, r1
 8002a6a:	3351      	adds	r3, #81	; 0x51
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	701a      	strb	r2, [r3, #0]
 8002a70:	e0ad      	b.n	8002bce <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002a72:	6879      	ldr	r1, [r7, #4]
 8002a74:	68fa      	ldr	r2, [r7, #12]
 8002a76:	4613      	mov	r3, r2
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	4413      	add	r3, r2
 8002a7c:	00db      	lsls	r3, r3, #3
 8002a7e:	440b      	add	r3, r1
 8002a80:	335d      	adds	r3, #93	; 0x5d
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	2b03      	cmp	r3, #3
 8002a86:	d10a      	bne.n	8002a9e <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a88:	6879      	ldr	r1, [r7, #4]
 8002a8a:	68fa      	ldr	r2, [r7, #12]
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	4413      	add	r3, r2
 8002a92:	00db      	lsls	r3, r3, #3
 8002a94:	440b      	add	r3, r1
 8002a96:	335c      	adds	r3, #92	; 0x5c
 8002a98:	2202      	movs	r2, #2
 8002a9a:	701a      	strb	r2, [r3, #0]
 8002a9c:	e097      	b.n	8002bce <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002a9e:	6879      	ldr	r1, [r7, #4]
 8002aa0:	68fa      	ldr	r2, [r7, #12]
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	4413      	add	r3, r2
 8002aa8:	00db      	lsls	r3, r3, #3
 8002aaa:	440b      	add	r3, r1
 8002aac:	335d      	adds	r3, #93	; 0x5d
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	2b04      	cmp	r3, #4
 8002ab2:	d10a      	bne.n	8002aca <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002ab4:	6879      	ldr	r1, [r7, #4]
 8002ab6:	68fa      	ldr	r2, [r7, #12]
 8002ab8:	4613      	mov	r3, r2
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	4413      	add	r3, r2
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	440b      	add	r3, r1
 8002ac2:	335c      	adds	r3, #92	; 0x5c
 8002ac4:	2202      	movs	r2, #2
 8002ac6:	701a      	strb	r2, [r3, #0]
 8002ac8:	e081      	b.n	8002bce <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002aca:	6879      	ldr	r1, [r7, #4]
 8002acc:	68fa      	ldr	r2, [r7, #12]
 8002ace:	4613      	mov	r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	4413      	add	r3, r2
 8002ad4:	00db      	lsls	r3, r3, #3
 8002ad6:	440b      	add	r3, r1
 8002ad8:	335d      	adds	r3, #93	; 0x5d
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	2b05      	cmp	r3, #5
 8002ade:	d10a      	bne.n	8002af6 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002ae0:	6879      	ldr	r1, [r7, #4]
 8002ae2:	68fa      	ldr	r2, [r7, #12]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	4413      	add	r3, r2
 8002aea:	00db      	lsls	r3, r3, #3
 8002aec:	440b      	add	r3, r1
 8002aee:	335c      	adds	r3, #92	; 0x5c
 8002af0:	2205      	movs	r2, #5
 8002af2:	701a      	strb	r2, [r3, #0]
 8002af4:	e06b      	b.n	8002bce <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002af6:	6879      	ldr	r1, [r7, #4]
 8002af8:	68fa      	ldr	r2, [r7, #12]
 8002afa:	4613      	mov	r3, r2
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	4413      	add	r3, r2
 8002b00:	00db      	lsls	r3, r3, #3
 8002b02:	440b      	add	r3, r1
 8002b04:	335d      	adds	r3, #93	; 0x5d
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	2b06      	cmp	r3, #6
 8002b0a:	d00a      	beq.n	8002b22 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002b0c:	6879      	ldr	r1, [r7, #4]
 8002b0e:	68fa      	ldr	r2, [r7, #12]
 8002b10:	4613      	mov	r3, r2
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	4413      	add	r3, r2
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	440b      	add	r3, r1
 8002b1a:	335d      	adds	r3, #93	; 0x5d
 8002b1c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002b1e:	2b08      	cmp	r3, #8
 8002b20:	d155      	bne.n	8002bce <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8002b22:	6879      	ldr	r1, [r7, #4]
 8002b24:	68fa      	ldr	r2, [r7, #12]
 8002b26:	4613      	mov	r3, r2
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	4413      	add	r3, r2
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	440b      	add	r3, r1
 8002b30:	3358      	adds	r3, #88	; 0x58
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	1c59      	adds	r1, r3, #1
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	68fa      	ldr	r2, [r7, #12]
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	4413      	add	r3, r2
 8002b40:	00db      	lsls	r3, r3, #3
 8002b42:	4403      	add	r3, r0
 8002b44:	3358      	adds	r3, #88	; 0x58
 8002b46:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002b48:	6879      	ldr	r1, [r7, #4]
 8002b4a:	68fa      	ldr	r2, [r7, #12]
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	4413      	add	r3, r2
 8002b52:	00db      	lsls	r3, r3, #3
 8002b54:	440b      	add	r3, r1
 8002b56:	3358      	adds	r3, #88	; 0x58
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2b03      	cmp	r3, #3
 8002b5c:	d914      	bls.n	8002b88 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002b5e:	6879      	ldr	r1, [r7, #4]
 8002b60:	68fa      	ldr	r2, [r7, #12]
 8002b62:	4613      	mov	r3, r2
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	4413      	add	r3, r2
 8002b68:	00db      	lsls	r3, r3, #3
 8002b6a:	440b      	add	r3, r1
 8002b6c:	3358      	adds	r3, #88	; 0x58
 8002b6e:	2200      	movs	r2, #0
 8002b70:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002b72:	6879      	ldr	r1, [r7, #4]
 8002b74:	68fa      	ldr	r2, [r7, #12]
 8002b76:	4613      	mov	r3, r2
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	4413      	add	r3, r2
 8002b7c:	00db      	lsls	r3, r3, #3
 8002b7e:	440b      	add	r3, r1
 8002b80:	335c      	adds	r3, #92	; 0x5c
 8002b82:	2204      	movs	r2, #4
 8002b84:	701a      	strb	r2, [r3, #0]
 8002b86:	e009      	b.n	8002b9c <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b88:	6879      	ldr	r1, [r7, #4]
 8002b8a:	68fa      	ldr	r2, [r7, #12]
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	4413      	add	r3, r2
 8002b92:	00db      	lsls	r3, r3, #3
 8002b94:	440b      	add	r3, r1
 8002b96:	335c      	adds	r3, #92	; 0x5c
 8002b98:	2202      	movs	r2, #2
 8002b9a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	015a      	lsls	r2, r3, #5
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002bb2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002bba:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	015a      	lsls	r2, r3, #5
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	4413      	add	r3, r2
 8002bc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bc8:	461a      	mov	r2, r3
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	015a      	lsls	r2, r3, #5
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	4413      	add	r3, r2
 8002bd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bda:	461a      	mov	r2, r3
 8002bdc:	2302      	movs	r3, #2
 8002bde:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	b2d8      	uxtb	r0, r3
 8002be4:	6879      	ldr	r1, [r7, #4]
 8002be6:	68fa      	ldr	r2, [r7, #12]
 8002be8:	4613      	mov	r3, r2
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	4413      	add	r3, r2
 8002bee:	00db      	lsls	r3, r3, #3
 8002bf0:	440b      	add	r3, r1
 8002bf2:	335c      	adds	r3, #92	; 0x5c
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	4601      	mov	r1, r0
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f004 fc1a 	bl	8007434 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002c00:	bf00      	nop
 8002c02:	3718      	adds	r7, #24
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b08a      	sub	sp, #40	; 0x28
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c18:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	6a1b      	ldr	r3, [r3, #32]
 8002c20:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	f003 030f 	and.w	r3, r3, #15
 8002c28:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	0c5b      	lsrs	r3, r3, #17
 8002c2e:	f003 030f 	and.w	r3, r3, #15
 8002c32:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	091b      	lsrs	r3, r3, #4
 8002c38:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c3c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d003      	beq.n	8002c4c <HCD_RXQLVL_IRQHandler+0x44>
 8002c44:	2b05      	cmp	r3, #5
 8002c46:	f000 8082 	beq.w	8002d4e <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002c4a:	e083      	b.n	8002d54 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d07f      	beq.n	8002d52 <HCD_RXQLVL_IRQHandler+0x14a>
 8002c52:	6879      	ldr	r1, [r7, #4]
 8002c54:	69ba      	ldr	r2, [r7, #24]
 8002c56:	4613      	mov	r3, r2
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	4413      	add	r3, r2
 8002c5c:	00db      	lsls	r3, r3, #3
 8002c5e:	440b      	add	r3, r1
 8002c60:	3344      	adds	r3, #68	; 0x44
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d074      	beq.n	8002d52 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6818      	ldr	r0, [r3, #0]
 8002c6c:	6879      	ldr	r1, [r7, #4]
 8002c6e:	69ba      	ldr	r2, [r7, #24]
 8002c70:	4613      	mov	r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	4413      	add	r3, r2
 8002c76:	00db      	lsls	r3, r3, #3
 8002c78:	440b      	add	r3, r1
 8002c7a:	3344      	adds	r3, #68	; 0x44
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	693a      	ldr	r2, [r7, #16]
 8002c80:	b292      	uxth	r2, r2
 8002c82:	4619      	mov	r1, r3
 8002c84:	f001 fdd3 	bl	800482e <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002c88:	6879      	ldr	r1, [r7, #4]
 8002c8a:	69ba      	ldr	r2, [r7, #24]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	4413      	add	r3, r2
 8002c92:	00db      	lsls	r3, r3, #3
 8002c94:	440b      	add	r3, r1
 8002c96:	3344      	adds	r3, #68	; 0x44
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	18d1      	adds	r1, r2, r3
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	69ba      	ldr	r2, [r7, #24]
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	4413      	add	r3, r2
 8002ca8:	00db      	lsls	r3, r3, #3
 8002caa:	4403      	add	r3, r0
 8002cac:	3344      	adds	r3, #68	; 0x44
 8002cae:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002cb0:	6879      	ldr	r1, [r7, #4]
 8002cb2:	69ba      	ldr	r2, [r7, #24]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	4413      	add	r3, r2
 8002cba:	00db      	lsls	r3, r3, #3
 8002cbc:	440b      	add	r3, r1
 8002cbe:	334c      	adds	r3, #76	; 0x4c
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	18d1      	adds	r1, r2, r3
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	69ba      	ldr	r2, [r7, #24]
 8002cca:	4613      	mov	r3, r2
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	4413      	add	r3, r2
 8002cd0:	00db      	lsls	r3, r3, #3
 8002cd2:	4403      	add	r3, r0
 8002cd4:	334c      	adds	r3, #76	; 0x4c
 8002cd6:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	015a      	lsls	r2, r3, #5
 8002cdc:	6a3b      	ldr	r3, [r7, #32]
 8002cde:	4413      	add	r3, r2
 8002ce0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ce4:	691a      	ldr	r2, [r3, #16]
 8002ce6:	4b1d      	ldr	r3, [pc, #116]	; (8002d5c <HCD_RXQLVL_IRQHandler+0x154>)
 8002ce8:	4013      	ands	r3, r2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d031      	beq.n	8002d52 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	015a      	lsls	r2, r3, #5
 8002cf2:	6a3b      	ldr	r3, [r7, #32]
 8002cf4:	4413      	add	r3, r2
 8002cf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d04:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d0c:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	015a      	lsls	r2, r3, #5
 8002d12:	6a3b      	ldr	r3, [r7, #32]
 8002d14:	4413      	add	r3, r2
 8002d16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002d20:	6879      	ldr	r1, [r7, #4]
 8002d22:	69ba      	ldr	r2, [r7, #24]
 8002d24:	4613      	mov	r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	4413      	add	r3, r2
 8002d2a:	00db      	lsls	r3, r3, #3
 8002d2c:	440b      	add	r3, r1
 8002d2e:	3350      	adds	r3, #80	; 0x50
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	f083 0301 	eor.w	r3, r3, #1
 8002d36:	b2d8      	uxtb	r0, r3
 8002d38:	6879      	ldr	r1, [r7, #4]
 8002d3a:	69ba      	ldr	r2, [r7, #24]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	4413      	add	r3, r2
 8002d42:	00db      	lsls	r3, r3, #3
 8002d44:	440b      	add	r3, r1
 8002d46:	3350      	adds	r3, #80	; 0x50
 8002d48:	4602      	mov	r2, r0
 8002d4a:	701a      	strb	r2, [r3, #0]
      break;
 8002d4c:	e001      	b.n	8002d52 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8002d4e:	bf00      	nop
 8002d50:	e000      	b.n	8002d54 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8002d52:	bf00      	nop
  }
}
 8002d54:	bf00      	nop
 8002d56:	3728      	adds	r7, #40	; 0x28
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	1ff80000 	.word	0x1ff80000

08002d60 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b086      	sub	sp, #24
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002d8c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	f003 0302 	and.w	r3, r3, #2
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d10b      	bne.n	8002db0 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f003 0301 	and.w	r3, r3, #1
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d102      	bne.n	8002da8 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f004 fb2a 	bl	80073fc <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	f043 0302 	orr.w	r3, r3, #2
 8002dae:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f003 0308 	and.w	r3, r3, #8
 8002db6:	2b08      	cmp	r3, #8
 8002db8:	d132      	bne.n	8002e20 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	f043 0308 	orr.w	r3, r3, #8
 8002dc0:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	f003 0304 	and.w	r3, r3, #4
 8002dc8:	2b04      	cmp	r3, #4
 8002dca:	d126      	bne.n	8002e1a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	699b      	ldr	r3, [r3, #24]
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d113      	bne.n	8002dfc <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002dda:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002dde:	d106      	bne.n	8002dee <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2102      	movs	r1, #2
 8002de6:	4618      	mov	r0, r3
 8002de8:	f001 fe5c 	bl	8004aa4 <USB_InitFSLSPClkSel>
 8002dec:	e011      	b.n	8002e12 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	2101      	movs	r1, #1
 8002df4:	4618      	mov	r0, r3
 8002df6:	f001 fe55 	bl	8004aa4 <USB_InitFSLSPClkSel>
 8002dfa:	e00a      	b.n	8002e12 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d106      	bne.n	8002e12 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002e10:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f004 fb1c 	bl	8007450 <HAL_HCD_PortEnabled_Callback>
 8002e18:	e002      	b.n	8002e20 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f004 fb26 	bl	800746c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f003 0320 	and.w	r3, r3, #32
 8002e26:	2b20      	cmp	r3, #32
 8002e28:	d103      	bne.n	8002e32 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	f043 0320 	orr.w	r3, r3, #32
 8002e30:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002e38:	461a      	mov	r2, r3
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	6013      	str	r3, [r2, #0]
}
 8002e3e:	bf00      	nop
 8002e40:	3718      	adds	r7, #24
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
	...

08002e48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d101      	bne.n	8002e5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e11f      	b.n	800309a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d106      	bne.n	8002e74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f7fd fc6a 	bl	8000748 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2224      	movs	r2, #36	; 0x24
 8002e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f022 0201 	bic.w	r2, r2, #1
 8002e8a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e9a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002eaa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002eac:	f001 f9de 	bl	800426c <HAL_RCC_GetPCLK1Freq>
 8002eb0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	4a7b      	ldr	r2, [pc, #492]	; (80030a4 <HAL_I2C_Init+0x25c>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d807      	bhi.n	8002ecc <HAL_I2C_Init+0x84>
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	4a7a      	ldr	r2, [pc, #488]	; (80030a8 <HAL_I2C_Init+0x260>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	bf94      	ite	ls
 8002ec4:	2301      	movls	r3, #1
 8002ec6:	2300      	movhi	r3, #0
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	e006      	b.n	8002eda <HAL_I2C_Init+0x92>
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	4a77      	ldr	r2, [pc, #476]	; (80030ac <HAL_I2C_Init+0x264>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	bf94      	ite	ls
 8002ed4:	2301      	movls	r3, #1
 8002ed6:	2300      	movhi	r3, #0
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d001      	beq.n	8002ee2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e0db      	b.n	800309a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	4a72      	ldr	r2, [pc, #456]	; (80030b0 <HAL_I2C_Init+0x268>)
 8002ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eea:	0c9b      	lsrs	r3, r3, #18
 8002eec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	68ba      	ldr	r2, [r7, #8]
 8002efe:	430a      	orrs	r2, r1
 8002f00:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	6a1b      	ldr	r3, [r3, #32]
 8002f08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	4a64      	ldr	r2, [pc, #400]	; (80030a4 <HAL_I2C_Init+0x25c>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d802      	bhi.n	8002f1c <HAL_I2C_Init+0xd4>
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	3301      	adds	r3, #1
 8002f1a:	e009      	b.n	8002f30 <HAL_I2C_Init+0xe8>
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f22:	fb02 f303 	mul.w	r3, r2, r3
 8002f26:	4a63      	ldr	r2, [pc, #396]	; (80030b4 <HAL_I2C_Init+0x26c>)
 8002f28:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2c:	099b      	lsrs	r3, r3, #6
 8002f2e:	3301      	adds	r3, #1
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	6812      	ldr	r2, [r2, #0]
 8002f34:	430b      	orrs	r3, r1
 8002f36:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	69db      	ldr	r3, [r3, #28]
 8002f3e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002f42:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	4956      	ldr	r1, [pc, #344]	; (80030a4 <HAL_I2C_Init+0x25c>)
 8002f4c:	428b      	cmp	r3, r1
 8002f4e:	d80d      	bhi.n	8002f6c <HAL_I2C_Init+0x124>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	1e59      	subs	r1, r3, #1
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	005b      	lsls	r3, r3, #1
 8002f5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f5e:	3301      	adds	r3, #1
 8002f60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f64:	2b04      	cmp	r3, #4
 8002f66:	bf38      	it	cc
 8002f68:	2304      	movcc	r3, #4
 8002f6a:	e04f      	b.n	800300c <HAL_I2C_Init+0x1c4>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d111      	bne.n	8002f98 <HAL_I2C_Init+0x150>
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	1e58      	subs	r0, r3, #1
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6859      	ldr	r1, [r3, #4]
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	005b      	lsls	r3, r3, #1
 8002f80:	440b      	add	r3, r1
 8002f82:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f86:	3301      	adds	r3, #1
 8002f88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	bf0c      	ite	eq
 8002f90:	2301      	moveq	r3, #1
 8002f92:	2300      	movne	r3, #0
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	e012      	b.n	8002fbe <HAL_I2C_Init+0x176>
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	1e58      	subs	r0, r3, #1
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6859      	ldr	r1, [r3, #4]
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	440b      	add	r3, r1
 8002fa6:	0099      	lsls	r1, r3, #2
 8002fa8:	440b      	add	r3, r1
 8002faa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fae:	3301      	adds	r3, #1
 8002fb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	bf0c      	ite	eq
 8002fb8:	2301      	moveq	r3, #1
 8002fba:	2300      	movne	r3, #0
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d001      	beq.n	8002fc6 <HAL_I2C_Init+0x17e>
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e022      	b.n	800300c <HAL_I2C_Init+0x1c4>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d10e      	bne.n	8002fec <HAL_I2C_Init+0x1a4>
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	1e58      	subs	r0, r3, #1
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6859      	ldr	r1, [r3, #4]
 8002fd6:	460b      	mov	r3, r1
 8002fd8:	005b      	lsls	r3, r3, #1
 8002fda:	440b      	add	r3, r1
 8002fdc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fe0:	3301      	adds	r3, #1
 8002fe2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fe6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fea:	e00f      	b.n	800300c <HAL_I2C_Init+0x1c4>
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	1e58      	subs	r0, r3, #1
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6859      	ldr	r1, [r3, #4]
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	440b      	add	r3, r1
 8002ffa:	0099      	lsls	r1, r3, #2
 8002ffc:	440b      	add	r3, r1
 8002ffe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003002:	3301      	adds	r3, #1
 8003004:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003008:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800300c:	6879      	ldr	r1, [r7, #4]
 800300e:	6809      	ldr	r1, [r1, #0]
 8003010:	4313      	orrs	r3, r2
 8003012:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	69da      	ldr	r2, [r3, #28]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a1b      	ldr	r3, [r3, #32]
 8003026:	431a      	orrs	r2, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	430a      	orrs	r2, r1
 800302e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800303a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	6911      	ldr	r1, [r2, #16]
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	68d2      	ldr	r2, [r2, #12]
 8003046:	4311      	orrs	r1, r2
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	6812      	ldr	r2, [r2, #0]
 800304c:	430b      	orrs	r3, r1
 800304e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	695a      	ldr	r2, [r3, #20]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	699b      	ldr	r3, [r3, #24]
 8003062:	431a      	orrs	r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	430a      	orrs	r2, r1
 800306a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f042 0201 	orr.w	r2, r2, #1
 800307a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2220      	movs	r2, #32
 8003086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003098:	2300      	movs	r3, #0
}
 800309a:	4618      	mov	r0, r3
 800309c:	3710      	adds	r7, #16
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	000186a0 	.word	0x000186a0
 80030a8:	001e847f 	.word	0x001e847f
 80030ac:	003d08ff 	.word	0x003d08ff
 80030b0:	431bde83 	.word	0x431bde83
 80030b4:	10624dd3 	.word	0x10624dd3

080030b8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b088      	sub	sp, #32
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d101      	bne.n	80030ca <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e128      	b.n	800331c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d109      	bne.n	80030ea <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a90      	ldr	r2, [pc, #576]	; (8003324 <HAL_I2S_Init+0x26c>)
 80030e2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f7fd fba7 	bl	8000838 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2202      	movs	r2, #2
 80030ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	69db      	ldr	r3, [r3, #28]
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	6812      	ldr	r2, [r2, #0]
 80030fc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003100:	f023 030f 	bic.w	r3, r3, #15
 8003104:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2202      	movs	r2, #2
 800310c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	695b      	ldr	r3, [r3, #20]
 8003112:	2b02      	cmp	r3, #2
 8003114:	d060      	beq.n	80031d8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d102      	bne.n	8003124 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800311e:	2310      	movs	r3, #16
 8003120:	617b      	str	r3, [r7, #20]
 8003122:	e001      	b.n	8003128 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003124:	2320      	movs	r3, #32
 8003126:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	2b20      	cmp	r3, #32
 800312e:	d802      	bhi.n	8003136 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	005b      	lsls	r3, r3, #1
 8003134:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003136:	2001      	movs	r0, #1
 8003138:	f001 f98e 	bl	8004458 <HAL_RCCEx_GetPeriphCLKFreq>
 800313c:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003146:	d125      	bne.n	8003194 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d010      	beq.n	8003172 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	68fa      	ldr	r2, [r7, #12]
 8003156:	fbb2 f2f3 	udiv	r2, r2, r3
 800315a:	4613      	mov	r3, r2
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	4413      	add	r3, r2
 8003160:	005b      	lsls	r3, r3, #1
 8003162:	461a      	mov	r2, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	695b      	ldr	r3, [r3, #20]
 8003168:	fbb2 f3f3 	udiv	r3, r2, r3
 800316c:	3305      	adds	r3, #5
 800316e:	613b      	str	r3, [r7, #16]
 8003170:	e01f      	b.n	80031b2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	00db      	lsls	r3, r3, #3
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	fbb2 f2f3 	udiv	r2, r2, r3
 800317c:	4613      	mov	r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	4413      	add	r3, r2
 8003182:	005b      	lsls	r3, r3, #1
 8003184:	461a      	mov	r2, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	fbb2 f3f3 	udiv	r3, r2, r3
 800318e:	3305      	adds	r3, #5
 8003190:	613b      	str	r3, [r7, #16]
 8003192:	e00e      	b.n	80031b2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003194:	68fa      	ldr	r2, [r7, #12]
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	fbb2 f2f3 	udiv	r2, r2, r3
 800319c:	4613      	mov	r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	4413      	add	r3, r2
 80031a2:	005b      	lsls	r3, r3, #1
 80031a4:	461a      	mov	r2, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	695b      	ldr	r3, [r3, #20]
 80031aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ae:	3305      	adds	r3, #5
 80031b0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	4a5c      	ldr	r2, [pc, #368]	; (8003328 <HAL_I2S_Init+0x270>)
 80031b6:	fba2 2303 	umull	r2, r3, r2, r3
 80031ba:	08db      	lsrs	r3, r3, #3
 80031bc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	f003 0301 	and.w	r3, r3, #1
 80031c4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80031c6:	693a      	ldr	r2, [r7, #16]
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	085b      	lsrs	r3, r3, #1
 80031ce:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80031d0:	69bb      	ldr	r3, [r7, #24]
 80031d2:	021b      	lsls	r3, r3, #8
 80031d4:	61bb      	str	r3, [r7, #24]
 80031d6:	e003      	b.n	80031e0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80031d8:	2302      	movs	r3, #2
 80031da:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80031dc:	2300      	movs	r3, #0
 80031de:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d902      	bls.n	80031ec <HAL_I2S_Init+0x134>
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	2bff      	cmp	r3, #255	; 0xff
 80031ea:	d907      	bls.n	80031fc <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031f0:	f043 0210 	orr.w	r2, r3, #16
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e08f      	b.n	800331c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	691a      	ldr	r2, [r3, #16]
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	ea42 0103 	orr.w	r1, r2, r3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	69fa      	ldr	r2, [r7, #28]
 800320c:	430a      	orrs	r2, r1
 800320e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	69db      	ldr	r3, [r3, #28]
 8003216:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800321a:	f023 030f 	bic.w	r3, r3, #15
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	6851      	ldr	r1, [r2, #4]
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	6892      	ldr	r2, [r2, #8]
 8003226:	4311      	orrs	r1, r2
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	68d2      	ldr	r2, [r2, #12]
 800322c:	4311      	orrs	r1, r2
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	6992      	ldr	r2, [r2, #24]
 8003232:	430a      	orrs	r2, r1
 8003234:	431a      	orrs	r2, r3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800323e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6a1b      	ldr	r3, [r3, #32]
 8003244:	2b01      	cmp	r3, #1
 8003246:	d161      	bne.n	800330c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	4a38      	ldr	r2, [pc, #224]	; (800332c <HAL_I2S_Init+0x274>)
 800324c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a37      	ldr	r2, [pc, #220]	; (8003330 <HAL_I2S_Init+0x278>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d101      	bne.n	800325c <HAL_I2S_Init+0x1a4>
 8003258:	4b36      	ldr	r3, [pc, #216]	; (8003334 <HAL_I2S_Init+0x27c>)
 800325a:	e001      	b.n	8003260 <HAL_I2S_Init+0x1a8>
 800325c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003260:	69db      	ldr	r3, [r3, #28]
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	6812      	ldr	r2, [r2, #0]
 8003266:	4932      	ldr	r1, [pc, #200]	; (8003330 <HAL_I2S_Init+0x278>)
 8003268:	428a      	cmp	r2, r1
 800326a:	d101      	bne.n	8003270 <HAL_I2S_Init+0x1b8>
 800326c:	4a31      	ldr	r2, [pc, #196]	; (8003334 <HAL_I2S_Init+0x27c>)
 800326e:	e001      	b.n	8003274 <HAL_I2S_Init+0x1bc>
 8003270:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003274:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003278:	f023 030f 	bic.w	r3, r3, #15
 800327c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a2b      	ldr	r2, [pc, #172]	; (8003330 <HAL_I2S_Init+0x278>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d101      	bne.n	800328c <HAL_I2S_Init+0x1d4>
 8003288:	4b2a      	ldr	r3, [pc, #168]	; (8003334 <HAL_I2S_Init+0x27c>)
 800328a:	e001      	b.n	8003290 <HAL_I2S_Init+0x1d8>
 800328c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003290:	2202      	movs	r2, #2
 8003292:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a25      	ldr	r2, [pc, #148]	; (8003330 <HAL_I2S_Init+0x278>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d101      	bne.n	80032a2 <HAL_I2S_Init+0x1ea>
 800329e:	4b25      	ldr	r3, [pc, #148]	; (8003334 <HAL_I2S_Init+0x27c>)
 80032a0:	e001      	b.n	80032a6 <HAL_I2S_Init+0x1ee>
 80032a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032a6:	69db      	ldr	r3, [r3, #28]
 80032a8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032b2:	d003      	beq.n	80032bc <HAL_I2S_Init+0x204>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d103      	bne.n	80032c4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80032bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032c0:	613b      	str	r3, [r7, #16]
 80032c2:	e001      	b.n	80032c8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80032c4:	2300      	movs	r3, #0
 80032c6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	b299      	uxth	r1, r3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	699b      	ldr	r3, [r3, #24]
 80032dc:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80032de:	4303      	orrs	r3, r0
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	430b      	orrs	r3, r1
 80032e4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80032e6:	4313      	orrs	r3, r2
 80032e8:	b29a      	uxth	r2, r3
 80032ea:	897b      	ldrh	r3, [r7, #10]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80032f4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a0d      	ldr	r2, [pc, #52]	; (8003330 <HAL_I2S_Init+0x278>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d101      	bne.n	8003304 <HAL_I2S_Init+0x24c>
 8003300:	4b0c      	ldr	r3, [pc, #48]	; (8003334 <HAL_I2S_Init+0x27c>)
 8003302:	e001      	b.n	8003308 <HAL_I2S_Init+0x250>
 8003304:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003308:	897a      	ldrh	r2, [r7, #10]
 800330a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2201      	movs	r2, #1
 8003316:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800331a:	2300      	movs	r3, #0
}
 800331c:	4618      	mov	r0, r3
 800331e:	3720      	adds	r7, #32
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}
 8003324:	0800342f 	.word	0x0800342f
 8003328:	cccccccd 	.word	0xcccccccd
 800332c:	08003545 	.word	0x08003545
 8003330:	40003800 	.word	0x40003800
 8003334:	40003400 	.word	0x40003400

08003338 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003340:	bf00      	nop
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003354:	bf00      	nop
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003368:	bf00      	nop
 800336a:	370c      	adds	r7, #12
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b082      	sub	sp, #8
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003380:	881a      	ldrh	r2, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338c:	1c9a      	adds	r2, r3, #2
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003396:	b29b      	uxth	r3, r3
 8003398:	3b01      	subs	r3, #1
 800339a:	b29a      	uxth	r2, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d10e      	bne.n	80033c8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	685a      	ldr	r2, [r3, #4]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80033b8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2201      	movs	r2, #1
 80033be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f7ff ffb8 	bl	8003338 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80033c8:	bf00      	nop
 80033ca:	3708      	adds	r7, #8
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	68da      	ldr	r2, [r3, #12]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e2:	b292      	uxth	r2, r2
 80033e4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ea:	1c9a      	adds	r2, r3, #2
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	3b01      	subs	r3, #1
 80033f8:	b29a      	uxth	r2, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003402:	b29b      	uxth	r3, r3
 8003404:	2b00      	cmp	r3, #0
 8003406:	d10e      	bne.n	8003426 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	685a      	ldr	r2, [r3, #4]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003416:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f7ff ff93 	bl	800334c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003426:	bf00      	nop
 8003428:	3708      	adds	r7, #8
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}

0800342e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800342e:	b580      	push	{r7, lr}
 8003430:	b086      	sub	sp, #24
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003444:	b2db      	uxtb	r3, r3
 8003446:	2b04      	cmp	r3, #4
 8003448:	d13a      	bne.n	80034c0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	f003 0301 	and.w	r3, r3, #1
 8003450:	2b01      	cmp	r3, #1
 8003452:	d109      	bne.n	8003468 <I2S_IRQHandler+0x3a>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800345e:	2b40      	cmp	r3, #64	; 0x40
 8003460:	d102      	bne.n	8003468 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f7ff ffb4 	bl	80033d0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800346e:	2b40      	cmp	r3, #64	; 0x40
 8003470:	d126      	bne.n	80034c0 <I2S_IRQHandler+0x92>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f003 0320 	and.w	r3, r3, #32
 800347c:	2b20      	cmp	r3, #32
 800347e:	d11f      	bne.n	80034c0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	685a      	ldr	r2, [r3, #4]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800348e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003490:	2300      	movs	r3, #0
 8003492:	613b      	str	r3, [r7, #16]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	613b      	str	r3, [r7, #16]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	613b      	str	r3, [r7, #16]
 80034a4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2201      	movs	r2, #1
 80034aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b2:	f043 0202 	orr.w	r2, r3, #2
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f7ff ff50 	bl	8003360 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	2b03      	cmp	r3, #3
 80034ca:	d136      	bne.n	800353a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	f003 0302 	and.w	r3, r3, #2
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d109      	bne.n	80034ea <I2S_IRQHandler+0xbc>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034e0:	2b80      	cmp	r3, #128	; 0x80
 80034e2:	d102      	bne.n	80034ea <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f7ff ff45 	bl	8003374 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	f003 0308 	and.w	r3, r3, #8
 80034f0:	2b08      	cmp	r3, #8
 80034f2:	d122      	bne.n	800353a <I2S_IRQHandler+0x10c>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f003 0320 	and.w	r3, r3, #32
 80034fe:	2b20      	cmp	r3, #32
 8003500:	d11b      	bne.n	800353a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	685a      	ldr	r2, [r3, #4]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003510:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003512:	2300      	movs	r3, #0
 8003514:	60fb      	str	r3, [r7, #12]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	60fb      	str	r3, [r7, #12]
 800351e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800352c:	f043 0204 	orr.w	r2, r3, #4
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f7ff ff13 	bl	8003360 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800353a:	bf00      	nop
 800353c:	3718      	adds	r7, #24
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
	...

08003544 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b088      	sub	sp, #32
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4aa2      	ldr	r2, [pc, #648]	; (80037e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d101      	bne.n	8003562 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800355e:	4ba2      	ldr	r3, [pc, #648]	; (80037e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003560:	e001      	b.n	8003566 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003562:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a9b      	ldr	r2, [pc, #620]	; (80037e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d101      	bne.n	8003580 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800357c:	4b9a      	ldr	r3, [pc, #616]	; (80037e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800357e:	e001      	b.n	8003584 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003580:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003590:	d004      	beq.n	800359c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	2b00      	cmp	r3, #0
 8003598:	f040 8099 	bne.w	80036ce <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	f003 0302 	and.w	r3, r3, #2
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	d107      	bne.n	80035b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d002      	beq.n	80035b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f000 f925 	bl	8003800 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	f003 0301 	and.w	r3, r3, #1
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d107      	bne.n	80035d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d002      	beq.n	80035d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 f9c8 	bl	8003960 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035d6:	2b40      	cmp	r3, #64	; 0x40
 80035d8:	d13a      	bne.n	8003650 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	f003 0320 	and.w	r3, r3, #32
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d035      	beq.n	8003650 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a7e      	ldr	r2, [pc, #504]	; (80037e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d101      	bne.n	80035f2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80035ee:	4b7e      	ldr	r3, [pc, #504]	; (80037e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80035f0:	e001      	b.n	80035f6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80035f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035f6:	685a      	ldr	r2, [r3, #4]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4979      	ldr	r1, [pc, #484]	; (80037e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80035fe:	428b      	cmp	r3, r1
 8003600:	d101      	bne.n	8003606 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003602:	4b79      	ldr	r3, [pc, #484]	; (80037e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003604:	e001      	b.n	800360a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003606:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800360a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800360e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	685a      	ldr	r2, [r3, #4]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800361e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003620:	2300      	movs	r3, #0
 8003622:	60fb      	str	r3, [r7, #12]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	60fb      	str	r3, [r7, #12]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	60fb      	str	r3, [r7, #12]
 8003634:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2201      	movs	r2, #1
 800363a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003642:	f043 0202 	orr.w	r2, r3, #2
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f7ff fe88 	bl	8003360 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	f003 0308 	and.w	r3, r3, #8
 8003656:	2b08      	cmp	r3, #8
 8003658:	f040 80be 	bne.w	80037d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	f003 0320 	and.w	r3, r3, #32
 8003662:	2b00      	cmp	r3, #0
 8003664:	f000 80b8 	beq.w	80037d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	685a      	ldr	r2, [r3, #4]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003676:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a59      	ldr	r2, [pc, #356]	; (80037e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d101      	bne.n	8003686 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003682:	4b59      	ldr	r3, [pc, #356]	; (80037e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003684:	e001      	b.n	800368a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003686:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800368a:	685a      	ldr	r2, [r3, #4]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4954      	ldr	r1, [pc, #336]	; (80037e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003692:	428b      	cmp	r3, r1
 8003694:	d101      	bne.n	800369a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003696:	4b54      	ldr	r3, [pc, #336]	; (80037e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003698:	e001      	b.n	800369e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800369a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800369e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80036a2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80036a4:	2300      	movs	r3, #0
 80036a6:	60bb      	str	r3, [r7, #8]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	60bb      	str	r3, [r7, #8]
 80036b0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2201      	movs	r2, #1
 80036b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036be:	f043 0204 	orr.w	r2, r3, #4
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f7ff fe4a 	bl	8003360 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80036cc:	e084      	b.n	80037d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	f003 0302 	and.w	r3, r3, #2
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	d107      	bne.n	80036e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d002      	beq.n	80036e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 f8be 	bl	8003864 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	f003 0301 	and.w	r3, r3, #1
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d107      	bne.n	8003702 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d002      	beq.n	8003702 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f000 f8fd 	bl	80038fc <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003708:	2b40      	cmp	r3, #64	; 0x40
 800370a:	d12f      	bne.n	800376c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	f003 0320 	and.w	r3, r3, #32
 8003712:	2b00      	cmp	r3, #0
 8003714:	d02a      	beq.n	800376c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	685a      	ldr	r2, [r3, #4]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003724:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a2e      	ldr	r2, [pc, #184]	; (80037e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d101      	bne.n	8003734 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003730:	4b2d      	ldr	r3, [pc, #180]	; (80037e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003732:	e001      	b.n	8003738 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003734:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003738:	685a      	ldr	r2, [r3, #4]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4929      	ldr	r1, [pc, #164]	; (80037e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003740:	428b      	cmp	r3, r1
 8003742:	d101      	bne.n	8003748 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003744:	4b28      	ldr	r3, [pc, #160]	; (80037e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003746:	e001      	b.n	800374c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003748:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800374c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003750:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2201      	movs	r2, #1
 8003756:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800375e:	f043 0202 	orr.w	r2, r3, #2
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f7ff fdfa 	bl	8003360 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	f003 0308 	and.w	r3, r3, #8
 8003772:	2b08      	cmp	r3, #8
 8003774:	d131      	bne.n	80037da <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	f003 0320 	and.w	r3, r3, #32
 800377c:	2b00      	cmp	r3, #0
 800377e:	d02c      	beq.n	80037da <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a17      	ldr	r2, [pc, #92]	; (80037e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d101      	bne.n	800378e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800378a:	4b17      	ldr	r3, [pc, #92]	; (80037e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800378c:	e001      	b.n	8003792 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800378e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003792:	685a      	ldr	r2, [r3, #4]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4912      	ldr	r1, [pc, #72]	; (80037e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800379a:	428b      	cmp	r3, r1
 800379c:	d101      	bne.n	80037a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 800379e:	4b12      	ldr	r3, [pc, #72]	; (80037e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80037a0:	e001      	b.n	80037a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80037a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037a6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037aa:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	685a      	ldr	r2, [r3, #4]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037ba:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c8:	f043 0204 	orr.w	r2, r3, #4
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f7ff fdc5 	bl	8003360 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037d6:	e000      	b.n	80037da <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80037d8:	bf00      	nop
}
 80037da:	bf00      	nop
 80037dc:	3720      	adds	r7, #32
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	40003800 	.word	0x40003800
 80037e8:	40003400 	.word	0x40003400

080037ec <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80037f4:	bf00      	nop
 80037f6:	370c      	adds	r7, #12
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380c:	1c99      	adds	r1, r3, #2
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	6251      	str	r1, [r2, #36]	; 0x24
 8003812:	881a      	ldrh	r2, [r3, #0]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800381e:	b29b      	uxth	r3, r3
 8003820:	3b01      	subs	r3, #1
 8003822:	b29a      	uxth	r2, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800382c:	b29b      	uxth	r3, r3
 800382e:	2b00      	cmp	r3, #0
 8003830:	d113      	bne.n	800385a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	685a      	ldr	r2, [r3, #4]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003840:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003846:	b29b      	uxth	r3, r3
 8003848:	2b00      	cmp	r3, #0
 800384a:	d106      	bne.n	800385a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f7ff ffc9 	bl	80037ec <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800385a:	bf00      	nop
 800385c:	3708      	adds	r7, #8
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
	...

08003864 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003870:	1c99      	adds	r1, r3, #2
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	6251      	str	r1, [r2, #36]	; 0x24
 8003876:	8819      	ldrh	r1, [r3, #0]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a1d      	ldr	r2, [pc, #116]	; (80038f4 <I2SEx_TxISR_I2SExt+0x90>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d101      	bne.n	8003886 <I2SEx_TxISR_I2SExt+0x22>
 8003882:	4b1d      	ldr	r3, [pc, #116]	; (80038f8 <I2SEx_TxISR_I2SExt+0x94>)
 8003884:	e001      	b.n	800388a <I2SEx_TxISR_I2SExt+0x26>
 8003886:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800388a:	460a      	mov	r2, r1
 800388c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003892:	b29b      	uxth	r3, r3
 8003894:	3b01      	subs	r3, #1
 8003896:	b29a      	uxth	r2, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d121      	bne.n	80038ea <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a12      	ldr	r2, [pc, #72]	; (80038f4 <I2SEx_TxISR_I2SExt+0x90>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d101      	bne.n	80038b4 <I2SEx_TxISR_I2SExt+0x50>
 80038b0:	4b11      	ldr	r3, [pc, #68]	; (80038f8 <I2SEx_TxISR_I2SExt+0x94>)
 80038b2:	e001      	b.n	80038b8 <I2SEx_TxISR_I2SExt+0x54>
 80038b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038b8:	685a      	ldr	r2, [r3, #4]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	490d      	ldr	r1, [pc, #52]	; (80038f4 <I2SEx_TxISR_I2SExt+0x90>)
 80038c0:	428b      	cmp	r3, r1
 80038c2:	d101      	bne.n	80038c8 <I2SEx_TxISR_I2SExt+0x64>
 80038c4:	4b0c      	ldr	r3, [pc, #48]	; (80038f8 <I2SEx_TxISR_I2SExt+0x94>)
 80038c6:	e001      	b.n	80038cc <I2SEx_TxISR_I2SExt+0x68>
 80038c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038cc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038d0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d106      	bne.n	80038ea <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f7ff ff81 	bl	80037ec <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80038ea:	bf00      	nop
 80038ec:	3708      	adds	r7, #8
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	40003800 	.word	0x40003800
 80038f8:	40003400 	.word	0x40003400

080038fc <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	68d8      	ldr	r0, [r3, #12]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800390e:	1c99      	adds	r1, r3, #2
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003914:	b282      	uxth	r2, r0
 8003916:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800391c:	b29b      	uxth	r3, r3
 800391e:	3b01      	subs	r3, #1
 8003920:	b29a      	uxth	r2, r3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800392a:	b29b      	uxth	r3, r3
 800392c:	2b00      	cmp	r3, #0
 800392e:	d113      	bne.n	8003958 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	685a      	ldr	r2, [r3, #4]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800393e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003944:	b29b      	uxth	r3, r3
 8003946:	2b00      	cmp	r3, #0
 8003948:	d106      	bne.n	8003958 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2201      	movs	r2, #1
 800394e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f7ff ff4a 	bl	80037ec <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003958:	bf00      	nop
 800395a:	3708      	adds	r7, #8
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a20      	ldr	r2, [pc, #128]	; (80039f0 <I2SEx_RxISR_I2SExt+0x90>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d101      	bne.n	8003976 <I2SEx_RxISR_I2SExt+0x16>
 8003972:	4b20      	ldr	r3, [pc, #128]	; (80039f4 <I2SEx_RxISR_I2SExt+0x94>)
 8003974:	e001      	b.n	800397a <I2SEx_RxISR_I2SExt+0x1a>
 8003976:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800397a:	68d8      	ldr	r0, [r3, #12]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003980:	1c99      	adds	r1, r3, #2
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003986:	b282      	uxth	r2, r0
 8003988:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800398e:	b29b      	uxth	r3, r3
 8003990:	3b01      	subs	r3, #1
 8003992:	b29a      	uxth	r2, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800399c:	b29b      	uxth	r3, r3
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d121      	bne.n	80039e6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a12      	ldr	r2, [pc, #72]	; (80039f0 <I2SEx_RxISR_I2SExt+0x90>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d101      	bne.n	80039b0 <I2SEx_RxISR_I2SExt+0x50>
 80039ac:	4b11      	ldr	r3, [pc, #68]	; (80039f4 <I2SEx_RxISR_I2SExt+0x94>)
 80039ae:	e001      	b.n	80039b4 <I2SEx_RxISR_I2SExt+0x54>
 80039b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039b4:	685a      	ldr	r2, [r3, #4]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	490d      	ldr	r1, [pc, #52]	; (80039f0 <I2SEx_RxISR_I2SExt+0x90>)
 80039bc:	428b      	cmp	r3, r1
 80039be:	d101      	bne.n	80039c4 <I2SEx_RxISR_I2SExt+0x64>
 80039c0:	4b0c      	ldr	r3, [pc, #48]	; (80039f4 <I2SEx_RxISR_I2SExt+0x94>)
 80039c2:	e001      	b.n	80039c8 <I2SEx_RxISR_I2SExt+0x68>
 80039c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039c8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039cc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d106      	bne.n	80039e6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f7ff ff03 	bl	80037ec <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80039e6:	bf00      	nop
 80039e8:	3708      	adds	r7, #8
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	40003800 	.word	0x40003800
 80039f4:	40003400 	.word	0x40003400

080039f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b086      	sub	sp, #24
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d101      	bne.n	8003a0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e25b      	b.n	8003ec2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0301 	and.w	r3, r3, #1
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d075      	beq.n	8003b02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a16:	4ba3      	ldr	r3, [pc, #652]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f003 030c 	and.w	r3, r3, #12
 8003a1e:	2b04      	cmp	r3, #4
 8003a20:	d00c      	beq.n	8003a3c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a22:	4ba0      	ldr	r3, [pc, #640]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a2a:	2b08      	cmp	r3, #8
 8003a2c:	d112      	bne.n	8003a54 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a2e:	4b9d      	ldr	r3, [pc, #628]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a3a:	d10b      	bne.n	8003a54 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a3c:	4b99      	ldr	r3, [pc, #612]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d05b      	beq.n	8003b00 <HAL_RCC_OscConfig+0x108>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d157      	bne.n	8003b00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e236      	b.n	8003ec2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a5c:	d106      	bne.n	8003a6c <HAL_RCC_OscConfig+0x74>
 8003a5e:	4b91      	ldr	r3, [pc, #580]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a90      	ldr	r2, [pc, #576]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003a64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a68:	6013      	str	r3, [r2, #0]
 8003a6a:	e01d      	b.n	8003aa8 <HAL_RCC_OscConfig+0xb0>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a74:	d10c      	bne.n	8003a90 <HAL_RCC_OscConfig+0x98>
 8003a76:	4b8b      	ldr	r3, [pc, #556]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a8a      	ldr	r2, [pc, #552]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003a7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a80:	6013      	str	r3, [r2, #0]
 8003a82:	4b88      	ldr	r3, [pc, #544]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a87      	ldr	r2, [pc, #540]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003a88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a8c:	6013      	str	r3, [r2, #0]
 8003a8e:	e00b      	b.n	8003aa8 <HAL_RCC_OscConfig+0xb0>
 8003a90:	4b84      	ldr	r3, [pc, #528]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a83      	ldr	r2, [pc, #524]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003a96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a9a:	6013      	str	r3, [r2, #0]
 8003a9c:	4b81      	ldr	r3, [pc, #516]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a80      	ldr	r2, [pc, #512]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003aa2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003aa6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d013      	beq.n	8003ad8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ab0:	f7fd f9ce 	bl	8000e50 <HAL_GetTick>
 8003ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ab6:	e008      	b.n	8003aca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ab8:	f7fd f9ca 	bl	8000e50 <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	2b64      	cmp	r3, #100	; 0x64
 8003ac4:	d901      	bls.n	8003aca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e1fb      	b.n	8003ec2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aca:	4b76      	ldr	r3, [pc, #472]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d0f0      	beq.n	8003ab8 <HAL_RCC_OscConfig+0xc0>
 8003ad6:	e014      	b.n	8003b02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ad8:	f7fd f9ba 	bl	8000e50 <HAL_GetTick>
 8003adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ade:	e008      	b.n	8003af2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ae0:	f7fd f9b6 	bl	8000e50 <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	2b64      	cmp	r3, #100	; 0x64
 8003aec:	d901      	bls.n	8003af2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e1e7      	b.n	8003ec2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003af2:	4b6c      	ldr	r3, [pc, #432]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d1f0      	bne.n	8003ae0 <HAL_RCC_OscConfig+0xe8>
 8003afe:	e000      	b.n	8003b02 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0302 	and.w	r3, r3, #2
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d063      	beq.n	8003bd6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b0e:	4b65      	ldr	r3, [pc, #404]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	f003 030c 	and.w	r3, r3, #12
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d00b      	beq.n	8003b32 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b1a:	4b62      	ldr	r3, [pc, #392]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b22:	2b08      	cmp	r3, #8
 8003b24:	d11c      	bne.n	8003b60 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b26:	4b5f      	ldr	r3, [pc, #380]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d116      	bne.n	8003b60 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b32:	4b5c      	ldr	r3, [pc, #368]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0302 	and.w	r3, r3, #2
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d005      	beq.n	8003b4a <HAL_RCC_OscConfig+0x152>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d001      	beq.n	8003b4a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e1bb      	b.n	8003ec2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b4a:	4b56      	ldr	r3, [pc, #344]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	00db      	lsls	r3, r3, #3
 8003b58:	4952      	ldr	r1, [pc, #328]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b5e:	e03a      	b.n	8003bd6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d020      	beq.n	8003baa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b68:	4b4f      	ldr	r3, [pc, #316]	; (8003ca8 <HAL_RCC_OscConfig+0x2b0>)
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b6e:	f7fd f96f 	bl	8000e50 <HAL_GetTick>
 8003b72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b74:	e008      	b.n	8003b88 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b76:	f7fd f96b 	bl	8000e50 <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d901      	bls.n	8003b88 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	e19c      	b.n	8003ec2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b88:	4b46      	ldr	r3, [pc, #280]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0302 	and.w	r3, r3, #2
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d0f0      	beq.n	8003b76 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b94:	4b43      	ldr	r3, [pc, #268]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	691b      	ldr	r3, [r3, #16]
 8003ba0:	00db      	lsls	r3, r3, #3
 8003ba2:	4940      	ldr	r1, [pc, #256]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	600b      	str	r3, [r1, #0]
 8003ba8:	e015      	b.n	8003bd6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003baa:	4b3f      	ldr	r3, [pc, #252]	; (8003ca8 <HAL_RCC_OscConfig+0x2b0>)
 8003bac:	2200      	movs	r2, #0
 8003bae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bb0:	f7fd f94e 	bl	8000e50 <HAL_GetTick>
 8003bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bb6:	e008      	b.n	8003bca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bb8:	f7fd f94a 	bl	8000e50 <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d901      	bls.n	8003bca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e17b      	b.n	8003ec2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bca:	4b36      	ldr	r3, [pc, #216]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0302 	and.w	r3, r3, #2
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d1f0      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0308 	and.w	r3, r3, #8
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d030      	beq.n	8003c44 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	695b      	ldr	r3, [r3, #20]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d016      	beq.n	8003c18 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bea:	4b30      	ldr	r3, [pc, #192]	; (8003cac <HAL_RCC_OscConfig+0x2b4>)
 8003bec:	2201      	movs	r2, #1
 8003bee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bf0:	f7fd f92e 	bl	8000e50 <HAL_GetTick>
 8003bf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bf6:	e008      	b.n	8003c0a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bf8:	f7fd f92a 	bl	8000e50 <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d901      	bls.n	8003c0a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e15b      	b.n	8003ec2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c0a:	4b26      	ldr	r3, [pc, #152]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003c0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c0e:	f003 0302 	and.w	r3, r3, #2
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d0f0      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x200>
 8003c16:	e015      	b.n	8003c44 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c18:	4b24      	ldr	r3, [pc, #144]	; (8003cac <HAL_RCC_OscConfig+0x2b4>)
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c1e:	f7fd f917 	bl	8000e50 <HAL_GetTick>
 8003c22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c24:	e008      	b.n	8003c38 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c26:	f7fd f913 	bl	8000e50 <HAL_GetTick>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	1ad3      	subs	r3, r2, r3
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d901      	bls.n	8003c38 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	e144      	b.n	8003ec2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c38:	4b1a      	ldr	r3, [pc, #104]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003c3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c3c:	f003 0302 	and.w	r3, r3, #2
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d1f0      	bne.n	8003c26 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0304 	and.w	r3, r3, #4
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	f000 80a0 	beq.w	8003d92 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c52:	2300      	movs	r3, #0
 8003c54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c56:	4b13      	ldr	r3, [pc, #76]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d10f      	bne.n	8003c82 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c62:	2300      	movs	r3, #0
 8003c64:	60bb      	str	r3, [r7, #8]
 8003c66:	4b0f      	ldr	r3, [pc, #60]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6a:	4a0e      	ldr	r2, [pc, #56]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003c6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c70:	6413      	str	r3, [r2, #64]	; 0x40
 8003c72:	4b0c      	ldr	r3, [pc, #48]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c7a:	60bb      	str	r3, [r7, #8]
 8003c7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c82:	4b0b      	ldr	r3, [pc, #44]	; (8003cb0 <HAL_RCC_OscConfig+0x2b8>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d121      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c8e:	4b08      	ldr	r3, [pc, #32]	; (8003cb0 <HAL_RCC_OscConfig+0x2b8>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a07      	ldr	r2, [pc, #28]	; (8003cb0 <HAL_RCC_OscConfig+0x2b8>)
 8003c94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c9a:	f7fd f8d9 	bl	8000e50 <HAL_GetTick>
 8003c9e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ca0:	e011      	b.n	8003cc6 <HAL_RCC_OscConfig+0x2ce>
 8003ca2:	bf00      	nop
 8003ca4:	40023800 	.word	0x40023800
 8003ca8:	42470000 	.word	0x42470000
 8003cac:	42470e80 	.word	0x42470e80
 8003cb0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cb4:	f7fd f8cc 	bl	8000e50 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e0fd      	b.n	8003ec2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cc6:	4b81      	ldr	r3, [pc, #516]	; (8003ecc <HAL_RCC_OscConfig+0x4d4>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d0f0      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d106      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x2f0>
 8003cda:	4b7d      	ldr	r3, [pc, #500]	; (8003ed0 <HAL_RCC_OscConfig+0x4d8>)
 8003cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cde:	4a7c      	ldr	r2, [pc, #496]	; (8003ed0 <HAL_RCC_OscConfig+0x4d8>)
 8003ce0:	f043 0301 	orr.w	r3, r3, #1
 8003ce4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ce6:	e01c      	b.n	8003d22 <HAL_RCC_OscConfig+0x32a>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	2b05      	cmp	r3, #5
 8003cee:	d10c      	bne.n	8003d0a <HAL_RCC_OscConfig+0x312>
 8003cf0:	4b77      	ldr	r3, [pc, #476]	; (8003ed0 <HAL_RCC_OscConfig+0x4d8>)
 8003cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf4:	4a76      	ldr	r2, [pc, #472]	; (8003ed0 <HAL_RCC_OscConfig+0x4d8>)
 8003cf6:	f043 0304 	orr.w	r3, r3, #4
 8003cfa:	6713      	str	r3, [r2, #112]	; 0x70
 8003cfc:	4b74      	ldr	r3, [pc, #464]	; (8003ed0 <HAL_RCC_OscConfig+0x4d8>)
 8003cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d00:	4a73      	ldr	r2, [pc, #460]	; (8003ed0 <HAL_RCC_OscConfig+0x4d8>)
 8003d02:	f043 0301 	orr.w	r3, r3, #1
 8003d06:	6713      	str	r3, [r2, #112]	; 0x70
 8003d08:	e00b      	b.n	8003d22 <HAL_RCC_OscConfig+0x32a>
 8003d0a:	4b71      	ldr	r3, [pc, #452]	; (8003ed0 <HAL_RCC_OscConfig+0x4d8>)
 8003d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d0e:	4a70      	ldr	r2, [pc, #448]	; (8003ed0 <HAL_RCC_OscConfig+0x4d8>)
 8003d10:	f023 0301 	bic.w	r3, r3, #1
 8003d14:	6713      	str	r3, [r2, #112]	; 0x70
 8003d16:	4b6e      	ldr	r3, [pc, #440]	; (8003ed0 <HAL_RCC_OscConfig+0x4d8>)
 8003d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d1a:	4a6d      	ldr	r2, [pc, #436]	; (8003ed0 <HAL_RCC_OscConfig+0x4d8>)
 8003d1c:	f023 0304 	bic.w	r3, r3, #4
 8003d20:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d015      	beq.n	8003d56 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d2a:	f7fd f891 	bl	8000e50 <HAL_GetTick>
 8003d2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d30:	e00a      	b.n	8003d48 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d32:	f7fd f88d 	bl	8000e50 <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d901      	bls.n	8003d48 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	e0bc      	b.n	8003ec2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d48:	4b61      	ldr	r3, [pc, #388]	; (8003ed0 <HAL_RCC_OscConfig+0x4d8>)
 8003d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d4c:	f003 0302 	and.w	r3, r3, #2
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d0ee      	beq.n	8003d32 <HAL_RCC_OscConfig+0x33a>
 8003d54:	e014      	b.n	8003d80 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d56:	f7fd f87b 	bl	8000e50 <HAL_GetTick>
 8003d5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d5c:	e00a      	b.n	8003d74 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d5e:	f7fd f877 	bl	8000e50 <HAL_GetTick>
 8003d62:	4602      	mov	r2, r0
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d901      	bls.n	8003d74 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	e0a6      	b.n	8003ec2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d74:	4b56      	ldr	r3, [pc, #344]	; (8003ed0 <HAL_RCC_OscConfig+0x4d8>)
 8003d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d78:	f003 0302 	and.w	r3, r3, #2
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d1ee      	bne.n	8003d5e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d80:	7dfb      	ldrb	r3, [r7, #23]
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d105      	bne.n	8003d92 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d86:	4b52      	ldr	r3, [pc, #328]	; (8003ed0 <HAL_RCC_OscConfig+0x4d8>)
 8003d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8a:	4a51      	ldr	r2, [pc, #324]	; (8003ed0 <HAL_RCC_OscConfig+0x4d8>)
 8003d8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d90:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	699b      	ldr	r3, [r3, #24]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	f000 8092 	beq.w	8003ec0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d9c:	4b4c      	ldr	r3, [pc, #304]	; (8003ed0 <HAL_RCC_OscConfig+0x4d8>)
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	f003 030c 	and.w	r3, r3, #12
 8003da4:	2b08      	cmp	r3, #8
 8003da6:	d05c      	beq.n	8003e62 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	699b      	ldr	r3, [r3, #24]
 8003dac:	2b02      	cmp	r3, #2
 8003dae:	d141      	bne.n	8003e34 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003db0:	4b48      	ldr	r3, [pc, #288]	; (8003ed4 <HAL_RCC_OscConfig+0x4dc>)
 8003db2:	2200      	movs	r2, #0
 8003db4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003db6:	f7fd f84b 	bl	8000e50 <HAL_GetTick>
 8003dba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dbc:	e008      	b.n	8003dd0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dbe:	f7fd f847 	bl	8000e50 <HAL_GetTick>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d901      	bls.n	8003dd0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003dcc:	2303      	movs	r3, #3
 8003dce:	e078      	b.n	8003ec2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dd0:	4b3f      	ldr	r3, [pc, #252]	; (8003ed0 <HAL_RCC_OscConfig+0x4d8>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d1f0      	bne.n	8003dbe <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	69da      	ldr	r2, [r3, #28]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6a1b      	ldr	r3, [r3, #32]
 8003de4:	431a      	orrs	r2, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dea:	019b      	lsls	r3, r3, #6
 8003dec:	431a      	orrs	r2, r3
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df2:	085b      	lsrs	r3, r3, #1
 8003df4:	3b01      	subs	r3, #1
 8003df6:	041b      	lsls	r3, r3, #16
 8003df8:	431a      	orrs	r2, r3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dfe:	061b      	lsls	r3, r3, #24
 8003e00:	4933      	ldr	r1, [pc, #204]	; (8003ed0 <HAL_RCC_OscConfig+0x4d8>)
 8003e02:	4313      	orrs	r3, r2
 8003e04:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e06:	4b33      	ldr	r3, [pc, #204]	; (8003ed4 <HAL_RCC_OscConfig+0x4dc>)
 8003e08:	2201      	movs	r2, #1
 8003e0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e0c:	f7fd f820 	bl	8000e50 <HAL_GetTick>
 8003e10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e12:	e008      	b.n	8003e26 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e14:	f7fd f81c 	bl	8000e50 <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	2b02      	cmp	r3, #2
 8003e20:	d901      	bls.n	8003e26 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e04d      	b.n	8003ec2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e26:	4b2a      	ldr	r3, [pc, #168]	; (8003ed0 <HAL_RCC_OscConfig+0x4d8>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d0f0      	beq.n	8003e14 <HAL_RCC_OscConfig+0x41c>
 8003e32:	e045      	b.n	8003ec0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e34:	4b27      	ldr	r3, [pc, #156]	; (8003ed4 <HAL_RCC_OscConfig+0x4dc>)
 8003e36:	2200      	movs	r2, #0
 8003e38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e3a:	f7fd f809 	bl	8000e50 <HAL_GetTick>
 8003e3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e40:	e008      	b.n	8003e54 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e42:	f7fd f805 	bl	8000e50 <HAL_GetTick>
 8003e46:	4602      	mov	r2, r0
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	d901      	bls.n	8003e54 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	e036      	b.n	8003ec2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e54:	4b1e      	ldr	r3, [pc, #120]	; (8003ed0 <HAL_RCC_OscConfig+0x4d8>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d1f0      	bne.n	8003e42 <HAL_RCC_OscConfig+0x44a>
 8003e60:	e02e      	b.n	8003ec0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	699b      	ldr	r3, [r3, #24]
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d101      	bne.n	8003e6e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e029      	b.n	8003ec2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e6e:	4b18      	ldr	r3, [pc, #96]	; (8003ed0 <HAL_RCC_OscConfig+0x4d8>)
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	69db      	ldr	r3, [r3, #28]
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d11c      	bne.n	8003ebc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d115      	bne.n	8003ebc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003e90:	68fa      	ldr	r2, [r7, #12]
 8003e92:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e96:	4013      	ands	r3, r2
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d10d      	bne.n	8003ebc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d106      	bne.n	8003ebc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d001      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e000      	b.n	8003ec2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3718      	adds	r7, #24
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	40007000 	.word	0x40007000
 8003ed0:	40023800 	.word	0x40023800
 8003ed4:	42470060 	.word	0x42470060

08003ed8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b084      	sub	sp, #16
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d101      	bne.n	8003eec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e0cc      	b.n	8004086 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003eec:	4b68      	ldr	r3, [pc, #416]	; (8004090 <HAL_RCC_ClockConfig+0x1b8>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 030f 	and.w	r3, r3, #15
 8003ef4:	683a      	ldr	r2, [r7, #0]
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d90c      	bls.n	8003f14 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003efa:	4b65      	ldr	r3, [pc, #404]	; (8004090 <HAL_RCC_ClockConfig+0x1b8>)
 8003efc:	683a      	ldr	r2, [r7, #0]
 8003efe:	b2d2      	uxtb	r2, r2
 8003f00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f02:	4b63      	ldr	r3, [pc, #396]	; (8004090 <HAL_RCC_ClockConfig+0x1b8>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 030f 	and.w	r3, r3, #15
 8003f0a:	683a      	ldr	r2, [r7, #0]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d001      	beq.n	8003f14 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e0b8      	b.n	8004086 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0302 	and.w	r3, r3, #2
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d020      	beq.n	8003f62 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0304 	and.w	r3, r3, #4
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d005      	beq.n	8003f38 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f2c:	4b59      	ldr	r3, [pc, #356]	; (8004094 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	4a58      	ldr	r2, [pc, #352]	; (8004094 <HAL_RCC_ClockConfig+0x1bc>)
 8003f32:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f36:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0308 	and.w	r3, r3, #8
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d005      	beq.n	8003f50 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f44:	4b53      	ldr	r3, [pc, #332]	; (8004094 <HAL_RCC_ClockConfig+0x1bc>)
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	4a52      	ldr	r2, [pc, #328]	; (8004094 <HAL_RCC_ClockConfig+0x1bc>)
 8003f4a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f4e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f50:	4b50      	ldr	r3, [pc, #320]	; (8004094 <HAL_RCC_ClockConfig+0x1bc>)
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	494d      	ldr	r1, [pc, #308]	; (8004094 <HAL_RCC_ClockConfig+0x1bc>)
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d044      	beq.n	8003ff8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d107      	bne.n	8003f86 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f76:	4b47      	ldr	r3, [pc, #284]	; (8004094 <HAL_RCC_ClockConfig+0x1bc>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d119      	bne.n	8003fb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e07f      	b.n	8004086 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	d003      	beq.n	8003f96 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f92:	2b03      	cmp	r3, #3
 8003f94:	d107      	bne.n	8003fa6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f96:	4b3f      	ldr	r3, [pc, #252]	; (8004094 <HAL_RCC_ClockConfig+0x1bc>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d109      	bne.n	8003fb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e06f      	b.n	8004086 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fa6:	4b3b      	ldr	r3, [pc, #236]	; (8004094 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0302 	and.w	r3, r3, #2
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d101      	bne.n	8003fb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e067      	b.n	8004086 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fb6:	4b37      	ldr	r3, [pc, #220]	; (8004094 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f023 0203 	bic.w	r2, r3, #3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	4934      	ldr	r1, [pc, #208]	; (8004094 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fc8:	f7fc ff42 	bl	8000e50 <HAL_GetTick>
 8003fcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fce:	e00a      	b.n	8003fe6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fd0:	f7fc ff3e 	bl	8000e50 <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d901      	bls.n	8003fe6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e04f      	b.n	8004086 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fe6:	4b2b      	ldr	r3, [pc, #172]	; (8004094 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	f003 020c 	and.w	r2, r3, #12
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d1eb      	bne.n	8003fd0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ff8:	4b25      	ldr	r3, [pc, #148]	; (8004090 <HAL_RCC_ClockConfig+0x1b8>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 030f 	and.w	r3, r3, #15
 8004000:	683a      	ldr	r2, [r7, #0]
 8004002:	429a      	cmp	r2, r3
 8004004:	d20c      	bcs.n	8004020 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004006:	4b22      	ldr	r3, [pc, #136]	; (8004090 <HAL_RCC_ClockConfig+0x1b8>)
 8004008:	683a      	ldr	r2, [r7, #0]
 800400a:	b2d2      	uxtb	r2, r2
 800400c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800400e:	4b20      	ldr	r3, [pc, #128]	; (8004090 <HAL_RCC_ClockConfig+0x1b8>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 030f 	and.w	r3, r3, #15
 8004016:	683a      	ldr	r2, [r7, #0]
 8004018:	429a      	cmp	r2, r3
 800401a:	d001      	beq.n	8004020 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e032      	b.n	8004086 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0304 	and.w	r3, r3, #4
 8004028:	2b00      	cmp	r3, #0
 800402a:	d008      	beq.n	800403e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800402c:	4b19      	ldr	r3, [pc, #100]	; (8004094 <HAL_RCC_ClockConfig+0x1bc>)
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	4916      	ldr	r1, [pc, #88]	; (8004094 <HAL_RCC_ClockConfig+0x1bc>)
 800403a:	4313      	orrs	r3, r2
 800403c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0308 	and.w	r3, r3, #8
 8004046:	2b00      	cmp	r3, #0
 8004048:	d009      	beq.n	800405e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800404a:	4b12      	ldr	r3, [pc, #72]	; (8004094 <HAL_RCC_ClockConfig+0x1bc>)
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	691b      	ldr	r3, [r3, #16]
 8004056:	00db      	lsls	r3, r3, #3
 8004058:	490e      	ldr	r1, [pc, #56]	; (8004094 <HAL_RCC_ClockConfig+0x1bc>)
 800405a:	4313      	orrs	r3, r2
 800405c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800405e:	f000 f821 	bl	80040a4 <HAL_RCC_GetSysClockFreq>
 8004062:	4601      	mov	r1, r0
 8004064:	4b0b      	ldr	r3, [pc, #44]	; (8004094 <HAL_RCC_ClockConfig+0x1bc>)
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	091b      	lsrs	r3, r3, #4
 800406a:	f003 030f 	and.w	r3, r3, #15
 800406e:	4a0a      	ldr	r2, [pc, #40]	; (8004098 <HAL_RCC_ClockConfig+0x1c0>)
 8004070:	5cd3      	ldrb	r3, [r2, r3]
 8004072:	fa21 f303 	lsr.w	r3, r1, r3
 8004076:	4a09      	ldr	r2, [pc, #36]	; (800409c <HAL_RCC_ClockConfig+0x1c4>)
 8004078:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800407a:	4b09      	ldr	r3, [pc, #36]	; (80040a0 <HAL_RCC_ClockConfig+0x1c8>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4618      	mov	r0, r3
 8004080:	f7fc fea2 	bl	8000dc8 <HAL_InitTick>

  return HAL_OK;
 8004084:	2300      	movs	r3, #0
}
 8004086:	4618      	mov	r0, r3
 8004088:	3710      	adds	r7, #16
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	40023c00 	.word	0x40023c00
 8004094:	40023800 	.word	0x40023800
 8004098:	08007a84 	.word	0x08007a84
 800409c:	20000000 	.word	0x20000000
 80040a0:	20000004 	.word	0x20000004

080040a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040a6:	b085      	sub	sp, #20
 80040a8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80040aa:	2300      	movs	r3, #0
 80040ac:	607b      	str	r3, [r7, #4]
 80040ae:	2300      	movs	r3, #0
 80040b0:	60fb      	str	r3, [r7, #12]
 80040b2:	2300      	movs	r3, #0
 80040b4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80040b6:	2300      	movs	r3, #0
 80040b8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040ba:	4b63      	ldr	r3, [pc, #396]	; (8004248 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	f003 030c 	and.w	r3, r3, #12
 80040c2:	2b04      	cmp	r3, #4
 80040c4:	d007      	beq.n	80040d6 <HAL_RCC_GetSysClockFreq+0x32>
 80040c6:	2b08      	cmp	r3, #8
 80040c8:	d008      	beq.n	80040dc <HAL_RCC_GetSysClockFreq+0x38>
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	f040 80b4 	bne.w	8004238 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040d0:	4b5e      	ldr	r3, [pc, #376]	; (800424c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80040d2:	60bb      	str	r3, [r7, #8]
       break;
 80040d4:	e0b3      	b.n	800423e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040d6:	4b5e      	ldr	r3, [pc, #376]	; (8004250 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80040d8:	60bb      	str	r3, [r7, #8]
      break;
 80040da:	e0b0      	b.n	800423e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040dc:	4b5a      	ldr	r3, [pc, #360]	; (8004248 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040e4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040e6:	4b58      	ldr	r3, [pc, #352]	; (8004248 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d04a      	beq.n	8004188 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040f2:	4b55      	ldr	r3, [pc, #340]	; (8004248 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	099b      	lsrs	r3, r3, #6
 80040f8:	f04f 0400 	mov.w	r4, #0
 80040fc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004100:	f04f 0200 	mov.w	r2, #0
 8004104:	ea03 0501 	and.w	r5, r3, r1
 8004108:	ea04 0602 	and.w	r6, r4, r2
 800410c:	4629      	mov	r1, r5
 800410e:	4632      	mov	r2, r6
 8004110:	f04f 0300 	mov.w	r3, #0
 8004114:	f04f 0400 	mov.w	r4, #0
 8004118:	0154      	lsls	r4, r2, #5
 800411a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800411e:	014b      	lsls	r3, r1, #5
 8004120:	4619      	mov	r1, r3
 8004122:	4622      	mov	r2, r4
 8004124:	1b49      	subs	r1, r1, r5
 8004126:	eb62 0206 	sbc.w	r2, r2, r6
 800412a:	f04f 0300 	mov.w	r3, #0
 800412e:	f04f 0400 	mov.w	r4, #0
 8004132:	0194      	lsls	r4, r2, #6
 8004134:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004138:	018b      	lsls	r3, r1, #6
 800413a:	1a5b      	subs	r3, r3, r1
 800413c:	eb64 0402 	sbc.w	r4, r4, r2
 8004140:	f04f 0100 	mov.w	r1, #0
 8004144:	f04f 0200 	mov.w	r2, #0
 8004148:	00e2      	lsls	r2, r4, #3
 800414a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800414e:	00d9      	lsls	r1, r3, #3
 8004150:	460b      	mov	r3, r1
 8004152:	4614      	mov	r4, r2
 8004154:	195b      	adds	r3, r3, r5
 8004156:	eb44 0406 	adc.w	r4, r4, r6
 800415a:	f04f 0100 	mov.w	r1, #0
 800415e:	f04f 0200 	mov.w	r2, #0
 8004162:	0262      	lsls	r2, r4, #9
 8004164:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004168:	0259      	lsls	r1, r3, #9
 800416a:	460b      	mov	r3, r1
 800416c:	4614      	mov	r4, r2
 800416e:	4618      	mov	r0, r3
 8004170:	4621      	mov	r1, r4
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f04f 0400 	mov.w	r4, #0
 8004178:	461a      	mov	r2, r3
 800417a:	4623      	mov	r3, r4
 800417c:	f7fc f824 	bl	80001c8 <__aeabi_uldivmod>
 8004180:	4603      	mov	r3, r0
 8004182:	460c      	mov	r4, r1
 8004184:	60fb      	str	r3, [r7, #12]
 8004186:	e049      	b.n	800421c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004188:	4b2f      	ldr	r3, [pc, #188]	; (8004248 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	099b      	lsrs	r3, r3, #6
 800418e:	f04f 0400 	mov.w	r4, #0
 8004192:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004196:	f04f 0200 	mov.w	r2, #0
 800419a:	ea03 0501 	and.w	r5, r3, r1
 800419e:	ea04 0602 	and.w	r6, r4, r2
 80041a2:	4629      	mov	r1, r5
 80041a4:	4632      	mov	r2, r6
 80041a6:	f04f 0300 	mov.w	r3, #0
 80041aa:	f04f 0400 	mov.w	r4, #0
 80041ae:	0154      	lsls	r4, r2, #5
 80041b0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80041b4:	014b      	lsls	r3, r1, #5
 80041b6:	4619      	mov	r1, r3
 80041b8:	4622      	mov	r2, r4
 80041ba:	1b49      	subs	r1, r1, r5
 80041bc:	eb62 0206 	sbc.w	r2, r2, r6
 80041c0:	f04f 0300 	mov.w	r3, #0
 80041c4:	f04f 0400 	mov.w	r4, #0
 80041c8:	0194      	lsls	r4, r2, #6
 80041ca:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80041ce:	018b      	lsls	r3, r1, #6
 80041d0:	1a5b      	subs	r3, r3, r1
 80041d2:	eb64 0402 	sbc.w	r4, r4, r2
 80041d6:	f04f 0100 	mov.w	r1, #0
 80041da:	f04f 0200 	mov.w	r2, #0
 80041de:	00e2      	lsls	r2, r4, #3
 80041e0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80041e4:	00d9      	lsls	r1, r3, #3
 80041e6:	460b      	mov	r3, r1
 80041e8:	4614      	mov	r4, r2
 80041ea:	195b      	adds	r3, r3, r5
 80041ec:	eb44 0406 	adc.w	r4, r4, r6
 80041f0:	f04f 0100 	mov.w	r1, #0
 80041f4:	f04f 0200 	mov.w	r2, #0
 80041f8:	02a2      	lsls	r2, r4, #10
 80041fa:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80041fe:	0299      	lsls	r1, r3, #10
 8004200:	460b      	mov	r3, r1
 8004202:	4614      	mov	r4, r2
 8004204:	4618      	mov	r0, r3
 8004206:	4621      	mov	r1, r4
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f04f 0400 	mov.w	r4, #0
 800420e:	461a      	mov	r2, r3
 8004210:	4623      	mov	r3, r4
 8004212:	f7fb ffd9 	bl	80001c8 <__aeabi_uldivmod>
 8004216:	4603      	mov	r3, r0
 8004218:	460c      	mov	r4, r1
 800421a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800421c:	4b0a      	ldr	r3, [pc, #40]	; (8004248 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	0c1b      	lsrs	r3, r3, #16
 8004222:	f003 0303 	and.w	r3, r3, #3
 8004226:	3301      	adds	r3, #1
 8004228:	005b      	lsls	r3, r3, #1
 800422a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800422c:	68fa      	ldr	r2, [r7, #12]
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	fbb2 f3f3 	udiv	r3, r2, r3
 8004234:	60bb      	str	r3, [r7, #8]
      break;
 8004236:	e002      	b.n	800423e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004238:	4b04      	ldr	r3, [pc, #16]	; (800424c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800423a:	60bb      	str	r3, [r7, #8]
      break;
 800423c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800423e:	68bb      	ldr	r3, [r7, #8]
}
 8004240:	4618      	mov	r0, r3
 8004242:	3714      	adds	r7, #20
 8004244:	46bd      	mov	sp, r7
 8004246:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004248:	40023800 	.word	0x40023800
 800424c:	00f42400 	.word	0x00f42400
 8004250:	007a1200 	.word	0x007a1200

08004254 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004254:	b480      	push	{r7}
 8004256:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004258:	4b03      	ldr	r3, [pc, #12]	; (8004268 <HAL_RCC_GetHCLKFreq+0x14>)
 800425a:	681b      	ldr	r3, [r3, #0]
}
 800425c:	4618      	mov	r0, r3
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop
 8004268:	20000000 	.word	0x20000000

0800426c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004270:	f7ff fff0 	bl	8004254 <HAL_RCC_GetHCLKFreq>
 8004274:	4601      	mov	r1, r0
 8004276:	4b05      	ldr	r3, [pc, #20]	; (800428c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	0a9b      	lsrs	r3, r3, #10
 800427c:	f003 0307 	and.w	r3, r3, #7
 8004280:	4a03      	ldr	r2, [pc, #12]	; (8004290 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004282:	5cd3      	ldrb	r3, [r2, r3]
 8004284:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004288:	4618      	mov	r0, r3
 800428a:	bd80      	pop	{r7, pc}
 800428c:	40023800 	.word	0x40023800
 8004290:	08007a94 	.word	0x08007a94

08004294 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b086      	sub	sp, #24
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800429c:	2300      	movs	r3, #0
 800429e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80042a0:	2300      	movs	r3, #0
 80042a2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0301 	and.w	r3, r3, #1
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d105      	bne.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d035      	beq.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80042bc:	4b62      	ldr	r3, [pc, #392]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80042be:	2200      	movs	r2, #0
 80042c0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80042c2:	f7fc fdc5 	bl	8000e50 <HAL_GetTick>
 80042c6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80042c8:	e008      	b.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80042ca:	f7fc fdc1 	bl	8000e50 <HAL_GetTick>
 80042ce:	4602      	mov	r2, r0
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d901      	bls.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042d8:	2303      	movs	r3, #3
 80042da:	e0b0      	b.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80042dc:	4b5b      	ldr	r3, [pc, #364]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d1f0      	bne.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	019a      	lsls	r2, r3, #6
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	071b      	lsls	r3, r3, #28
 80042f4:	4955      	ldr	r1, [pc, #340]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042f6:	4313      	orrs	r3, r2
 80042f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80042fc:	4b52      	ldr	r3, [pc, #328]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80042fe:	2201      	movs	r2, #1
 8004300:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004302:	f7fc fda5 	bl	8000e50 <HAL_GetTick>
 8004306:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004308:	e008      	b.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800430a:	f7fc fda1 	bl	8000e50 <HAL_GetTick>
 800430e:	4602      	mov	r2, r0
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	2b02      	cmp	r3, #2
 8004316:	d901      	bls.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	e090      	b.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800431c:	4b4b      	ldr	r3, [pc, #300]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004324:	2b00      	cmp	r3, #0
 8004326:	d0f0      	beq.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0302 	and.w	r3, r3, #2
 8004330:	2b00      	cmp	r3, #0
 8004332:	f000 8083 	beq.w	800443c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004336:	2300      	movs	r3, #0
 8004338:	60fb      	str	r3, [r7, #12]
 800433a:	4b44      	ldr	r3, [pc, #272]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800433c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433e:	4a43      	ldr	r2, [pc, #268]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004340:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004344:	6413      	str	r3, [r2, #64]	; 0x40
 8004346:	4b41      	ldr	r3, [pc, #260]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800434e:	60fb      	str	r3, [r7, #12]
 8004350:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004352:	4b3f      	ldr	r3, [pc, #252]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a3e      	ldr	r2, [pc, #248]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004358:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800435c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800435e:	f7fc fd77 	bl	8000e50 <HAL_GetTick>
 8004362:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004364:	e008      	b.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004366:	f7fc fd73 	bl	8000e50 <HAL_GetTick>
 800436a:	4602      	mov	r2, r0
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	2b02      	cmp	r3, #2
 8004372:	d901      	bls.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004374:	2303      	movs	r3, #3
 8004376:	e062      	b.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004378:	4b35      	ldr	r3, [pc, #212]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004380:	2b00      	cmp	r3, #0
 8004382:	d0f0      	beq.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004384:	4b31      	ldr	r3, [pc, #196]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004388:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800438c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d02f      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800439c:	693a      	ldr	r2, [r7, #16]
 800439e:	429a      	cmp	r2, r3
 80043a0:	d028      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80043a2:	4b2a      	ldr	r3, [pc, #168]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043aa:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80043ac:	4b29      	ldr	r3, [pc, #164]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80043ae:	2201      	movs	r2, #1
 80043b0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80043b2:	4b28      	ldr	r3, [pc, #160]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80043b4:	2200      	movs	r2, #0
 80043b6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80043b8:	4a24      	ldr	r2, [pc, #144]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80043be:	4b23      	ldr	r3, [pc, #140]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043c2:	f003 0301 	and.w	r3, r3, #1
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d114      	bne.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80043ca:	f7fc fd41 	bl	8000e50 <HAL_GetTick>
 80043ce:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043d0:	e00a      	b.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043d2:	f7fc fd3d 	bl	8000e50 <HAL_GetTick>
 80043d6:	4602      	mov	r2, r0
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d901      	bls.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80043e4:	2303      	movs	r3, #3
 80043e6:	e02a      	b.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043e8:	4b18      	ldr	r3, [pc, #96]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ec:	f003 0302 	and.w	r3, r3, #2
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d0ee      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004400:	d10d      	bne.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004402:	4b12      	ldr	r3, [pc, #72]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004412:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004416:	490d      	ldr	r1, [pc, #52]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004418:	4313      	orrs	r3, r2
 800441a:	608b      	str	r3, [r1, #8]
 800441c:	e005      	b.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800441e:	4b0b      	ldr	r3, [pc, #44]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	4a0a      	ldr	r2, [pc, #40]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004424:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004428:	6093      	str	r3, [r2, #8]
 800442a:	4b08      	ldr	r3, [pc, #32]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800442c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004436:	4905      	ldr	r1, [pc, #20]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004438:	4313      	orrs	r3, r2
 800443a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3718      	adds	r7, #24
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	42470068 	.word	0x42470068
 800444c:	40023800 	.word	0x40023800
 8004450:	40007000 	.word	0x40007000
 8004454:	42470e40 	.word	0x42470e40

08004458 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004458:	b480      	push	{r7}
 800445a:	b087      	sub	sp, #28
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004460:	2300      	movs	r3, #0
 8004462:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004464:	2300      	movs	r3, #0
 8004466:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004468:	2300      	movs	r3, #0
 800446a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800446c:	2300      	movs	r3, #0
 800446e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2b01      	cmp	r3, #1
 8004474:	d13d      	bne.n	80044f2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004476:	4b22      	ldr	r3, [pc, #136]	; (8004500 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800447e:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d004      	beq.n	8004490 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004486:	2b01      	cmp	r3, #1
 8004488:	d12f      	bne.n	80044ea <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800448a:	4b1e      	ldr	r3, [pc, #120]	; (8004504 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800448c:	617b      	str	r3, [r7, #20]
          break;
 800448e:	e02f      	b.n	80044f0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004490:	4b1b      	ldr	r3, [pc, #108]	; (8004500 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004498:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800449c:	d108      	bne.n	80044b0 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800449e:	4b18      	ldr	r3, [pc, #96]	; (8004500 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044a6:	4a18      	ldr	r2, [pc, #96]	; (8004508 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80044a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80044ac:	613b      	str	r3, [r7, #16]
 80044ae:	e007      	b.n	80044c0 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80044b0:	4b13      	ldr	r3, [pc, #76]	; (8004500 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044b8:	4a14      	ldr	r2, [pc, #80]	; (800450c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80044ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80044be:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80044c0:	4b0f      	ldr	r3, [pc, #60]	; (8004500 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80044c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044c6:	099b      	lsrs	r3, r3, #6
 80044c8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	fb02 f303 	mul.w	r3, r2, r3
 80044d2:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80044d4:	4b0a      	ldr	r3, [pc, #40]	; (8004500 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80044d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044da:	0f1b      	lsrs	r3, r3, #28
 80044dc:	f003 0307 	and.w	r3, r3, #7
 80044e0:	68ba      	ldr	r2, [r7, #8]
 80044e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80044e6:	617b      	str	r3, [r7, #20]
          break;
 80044e8:	e002      	b.n	80044f0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80044ea:	2300      	movs	r3, #0
 80044ec:	617b      	str	r3, [r7, #20]
          break;
 80044ee:	bf00      	nop
        }
      }
      break;
 80044f0:	bf00      	nop
    }
  }
  return frequency;
 80044f2:	697b      	ldr	r3, [r7, #20]
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	371c      	adds	r7, #28
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr
 8004500:	40023800 	.word	0x40023800
 8004504:	00bb8000 	.word	0x00bb8000
 8004508:	007a1200 	.word	0x007a1200
 800450c:	00f42400 	.word	0x00f42400

08004510 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b082      	sub	sp, #8
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d101      	bne.n	8004522 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e056      	b.n	80045d0 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800452e:	b2db      	uxtb	r3, r3
 8004530:	2b00      	cmp	r3, #0
 8004532:	d106      	bne.n	8004542 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f7fc fb0d 	bl	8000b5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2202      	movs	r2, #2
 8004546:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004558:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	685a      	ldr	r2, [r3, #4]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	431a      	orrs	r2, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	431a      	orrs	r2, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	431a      	orrs	r2, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	695b      	ldr	r3, [r3, #20]
 8004574:	431a      	orrs	r2, r3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	699b      	ldr	r3, [r3, #24]
 800457a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800457e:	431a      	orrs	r2, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	69db      	ldr	r3, [r3, #28]
 8004584:	431a      	orrs	r2, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6a1b      	ldr	r3, [r3, #32]
 800458a:	ea42 0103 	orr.w	r1, r2, r3
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	430a      	orrs	r2, r1
 8004598:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	699b      	ldr	r3, [r3, #24]
 800459e:	0c1b      	lsrs	r3, r3, #16
 80045a0:	f003 0104 	and.w	r1, r3, #4
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	430a      	orrs	r2, r1
 80045ae:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	69da      	ldr	r2, [r3, #28]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045be:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2201      	movs	r2, #1
 80045ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80045ce:	2300      	movs	r3, #0
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3708      	adds	r7, #8
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}

080045d8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80045d8:	b084      	sub	sp, #16
 80045da:	b580      	push	{r7, lr}
 80045dc:	b084      	sub	sp, #16
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
 80045e2:	f107 001c 	add.w	r0, r7, #28
 80045e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80045ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d122      	bne.n	8004636 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004604:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004618:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800461a:	2b01      	cmp	r3, #1
 800461c:	d105      	bne.n	800462a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f000 f94a 	bl	80048c4 <USB_CoreReset>
 8004630:	4603      	mov	r3, r0
 8004632:	73fb      	strb	r3, [r7, #15]
 8004634:	e01a      	b.n	800466c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 f93e 	bl	80048c4 <USB_CoreReset>
 8004648:	4603      	mov	r3, r0
 800464a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800464c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800464e:	2b00      	cmp	r3, #0
 8004650:	d106      	bne.n	8004660 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004656:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	639a      	str	r2, [r3, #56]	; 0x38
 800465e:	e005      	b.n	800466c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004664:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800466c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800466e:	2b01      	cmp	r3, #1
 8004670:	d10b      	bne.n	800468a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	f043 0206 	orr.w	r2, r3, #6
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	f043 0220 	orr.w	r2, r3, #32
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800468a:	7bfb      	ldrb	r3, [r7, #15]
}
 800468c:	4618      	mov	r0, r3
 800468e:	3710      	adds	r7, #16
 8004690:	46bd      	mov	sp, r7
 8004692:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004696:	b004      	add	sp, #16
 8004698:	4770      	bx	lr

0800469a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800469a:	b480      	push	{r7}
 800469c:	b083      	sub	sp, #12
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	f043 0201 	orr.w	r2, r3, #1
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80046ae:	2300      	movs	r3, #0
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	370c      	adds	r7, #12
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr

080046bc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80046bc:	b480      	push	{r7}
 80046be:	b083      	sub	sp, #12
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	f023 0201 	bic.w	r2, r3, #1
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	370c      	adds	r7, #12
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr

080046de <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80046de:	b580      	push	{r7, lr}
 80046e0:	b082      	sub	sp, #8
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6078      	str	r0, [r7, #4]
 80046e6:	460b      	mov	r3, r1
 80046e8:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80046f6:	78fb      	ldrb	r3, [r7, #3]
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d106      	bne.n	800470a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	60da      	str	r2, [r3, #12]
 8004708:	e00b      	b.n	8004722 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800470a:	78fb      	ldrb	r3, [r7, #3]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d106      	bne.n	800471e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	60da      	str	r2, [r3, #12]
 800471c:	e001      	b.n	8004722 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e003      	b.n	800472a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004722:	2032      	movs	r0, #50	; 0x32
 8004724:	f7fc fba0 	bl	8000e68 <HAL_Delay>

  return HAL_OK;
 8004728:	2300      	movs	r3, #0
}
 800472a:	4618      	mov	r0, r3
 800472c:	3708      	adds	r7, #8
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
	...

08004734 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004734:	b480      	push	{r7}
 8004736:	b085      	sub	sp, #20
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800473e:	2300      	movs	r3, #0
 8004740:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	019b      	lsls	r3, r3, #6
 8004746:	f043 0220 	orr.w	r2, r3, #32
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	3301      	adds	r3, #1
 8004752:	60fb      	str	r3, [r7, #12]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	4a09      	ldr	r2, [pc, #36]	; (800477c <USB_FlushTxFifo+0x48>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d901      	bls.n	8004760 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800475c:	2303      	movs	r3, #3
 800475e:	e006      	b.n	800476e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	691b      	ldr	r3, [r3, #16]
 8004764:	f003 0320 	and.w	r3, r3, #32
 8004768:	2b20      	cmp	r3, #32
 800476a:	d0f0      	beq.n	800474e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	3714      	adds	r7, #20
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop
 800477c:	00030d40 	.word	0x00030d40

08004780 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004780:	b480      	push	{r7}
 8004782:	b085      	sub	sp, #20
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004788:	2300      	movs	r3, #0
 800478a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2210      	movs	r2, #16
 8004790:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	3301      	adds	r3, #1
 8004796:	60fb      	str	r3, [r7, #12]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	4a09      	ldr	r2, [pc, #36]	; (80047c0 <USB_FlushRxFifo+0x40>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d901      	bls.n	80047a4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e006      	b.n	80047b2 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	691b      	ldr	r3, [r3, #16]
 80047a8:	f003 0310 	and.w	r3, r3, #16
 80047ac:	2b10      	cmp	r3, #16
 80047ae:	d0f0      	beq.n	8004792 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3714      	adds	r7, #20
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr
 80047be:	bf00      	nop
 80047c0:	00030d40 	.word	0x00030d40

080047c4 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b089      	sub	sp, #36	; 0x24
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	60b9      	str	r1, [r7, #8]
 80047ce:	4611      	mov	r1, r2
 80047d0:	461a      	mov	r2, r3
 80047d2:	460b      	mov	r3, r1
 80047d4:	71fb      	strb	r3, [r7, #7]
 80047d6:	4613      	mov	r3, r2
 80047d8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80047e2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d11a      	bne.n	8004820 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80047ea:	88bb      	ldrh	r3, [r7, #4]
 80047ec:	3303      	adds	r3, #3
 80047ee:	089b      	lsrs	r3, r3, #2
 80047f0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80047f2:	2300      	movs	r3, #0
 80047f4:	61bb      	str	r3, [r7, #24]
 80047f6:	e00f      	b.n	8004818 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80047f8:	79fb      	ldrb	r3, [r7, #7]
 80047fa:	031a      	lsls	r2, r3, #12
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	4413      	add	r3, r2
 8004800:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004804:	461a      	mov	r2, r3
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	3304      	adds	r3, #4
 8004810:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	3301      	adds	r3, #1
 8004816:	61bb      	str	r3, [r7, #24]
 8004818:	69ba      	ldr	r2, [r7, #24]
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	429a      	cmp	r2, r3
 800481e:	d3eb      	bcc.n	80047f8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004820:	2300      	movs	r3, #0
}
 8004822:	4618      	mov	r0, r3
 8004824:	3724      	adds	r7, #36	; 0x24
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr

0800482e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800482e:	b480      	push	{r7}
 8004830:	b089      	sub	sp, #36	; 0x24
 8004832:	af00      	add	r7, sp, #0
 8004834:	60f8      	str	r0, [r7, #12]
 8004836:	60b9      	str	r1, [r7, #8]
 8004838:	4613      	mov	r3, r2
 800483a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004844:	88fb      	ldrh	r3, [r7, #6]
 8004846:	3303      	adds	r3, #3
 8004848:	089b      	lsrs	r3, r3, #2
 800484a:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800484c:	2300      	movs	r3, #0
 800484e:	61bb      	str	r3, [r7, #24]
 8004850:	e00b      	b.n	800486a <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	601a      	str	r2, [r3, #0]
    pDest++;
 800485e:	69fb      	ldr	r3, [r7, #28]
 8004860:	3304      	adds	r3, #4
 8004862:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004864:	69bb      	ldr	r3, [r7, #24]
 8004866:	3301      	adds	r3, #1
 8004868:	61bb      	str	r3, [r7, #24]
 800486a:	69ba      	ldr	r2, [r7, #24]
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	429a      	cmp	r2, r3
 8004870:	d3ef      	bcc.n	8004852 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8004872:	69fb      	ldr	r3, [r7, #28]
}
 8004874:	4618      	mov	r0, r3
 8004876:	3724      	adds	r7, #36	; 0x24
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004880:	b480      	push	{r7}
 8004882:	b085      	sub	sp, #20
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	695b      	ldr	r3, [r3, #20]
 800488c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	699b      	ldr	r3, [r3, #24]
 8004892:	68fa      	ldr	r2, [r7, #12]
 8004894:	4013      	ands	r3, r2
 8004896:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004898:	68fb      	ldr	r3, [r7, #12]
}
 800489a:	4618      	mov	r0, r3
 800489c:	3714      	adds	r7, #20
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr

080048a6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80048a6:	b480      	push	{r7}
 80048a8:	b083      	sub	sp, #12
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	695b      	ldr	r3, [r3, #20]
 80048b2:	f003 0301 	and.w	r3, r3, #1
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	370c      	adds	r7, #12
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
	...

080048c4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b085      	sub	sp, #20
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80048cc:	2300      	movs	r3, #0
 80048ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	3301      	adds	r3, #1
 80048d4:	60fb      	str	r3, [r7, #12]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	4a13      	ldr	r2, [pc, #76]	; (8004928 <USB_CoreReset+0x64>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d901      	bls.n	80048e2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80048de:	2303      	movs	r3, #3
 80048e0:	e01b      	b.n	800491a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	691b      	ldr	r3, [r3, #16]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	daf2      	bge.n	80048d0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80048ea:	2300      	movs	r3, #0
 80048ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	f043 0201 	orr.w	r2, r3, #1
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	3301      	adds	r3, #1
 80048fe:	60fb      	str	r3, [r7, #12]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	4a09      	ldr	r2, [pc, #36]	; (8004928 <USB_CoreReset+0x64>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d901      	bls.n	800490c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004908:	2303      	movs	r3, #3
 800490a:	e006      	b.n	800491a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	691b      	ldr	r3, [r3, #16]
 8004910:	f003 0301 	and.w	r3, r3, #1
 8004914:	2b01      	cmp	r3, #1
 8004916:	d0f0      	beq.n	80048fa <USB_CoreReset+0x36>

  return HAL_OK;
 8004918:	2300      	movs	r3, #0
}
 800491a:	4618      	mov	r0, r3
 800491c:	3714      	adds	r7, #20
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr
 8004926:	bf00      	nop
 8004928:	00030d40 	.word	0x00030d40

0800492c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800492c:	b084      	sub	sp, #16
 800492e:	b580      	push	{r7, lr}
 8004930:	b084      	sub	sp, #16
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
 8004936:	f107 001c 	add.w	r0, r7, #28
 800493a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004948:	461a      	mov	r2, r3
 800494a:	2300      	movs	r3, #0
 800494c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004952:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800495e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800496a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800497a:	2b00      	cmp	r3, #0
 800497c:	d018      	beq.n	80049b0 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800497e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004980:	2b01      	cmp	r3, #1
 8004982:	d10a      	bne.n	800499a <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68ba      	ldr	r2, [r7, #8]
 800498e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004992:	f043 0304 	orr.w	r3, r3, #4
 8004996:	6013      	str	r3, [r2, #0]
 8004998:	e014      	b.n	80049c4 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	68ba      	ldr	r2, [r7, #8]
 80049a4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80049a8:	f023 0304 	bic.w	r3, r3, #4
 80049ac:	6013      	str	r3, [r2, #0]
 80049ae:	e009      	b.n	80049c4 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	68ba      	ldr	r2, [r7, #8]
 80049ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80049be:	f023 0304 	bic.w	r3, r3, #4
 80049c2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80049c4:	2110      	movs	r1, #16
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f7ff feb4 	bl	8004734 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f7ff fed7 	bl	8004780 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80049d2:	2300      	movs	r3, #0
 80049d4:	60fb      	str	r3, [r7, #12]
 80049d6:	e015      	b.n	8004a04 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	015a      	lsls	r2, r3, #5
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	4413      	add	r3, r2
 80049e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049e4:	461a      	mov	r2, r3
 80049e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80049ea:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	015a      	lsls	r2, r3, #5
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	4413      	add	r3, r2
 80049f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049f8:	461a      	mov	r2, r3
 80049fa:	2300      	movs	r3, #0
 80049fc:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	3301      	adds	r3, #1
 8004a02:	60fb      	str	r3, [r7, #12]
 8004a04:	6a3b      	ldr	r3, [r7, #32]
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d3e5      	bcc.n	80049d8 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8004a0c:	2101      	movs	r1, #1
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 f8ac 	bl	8004b6c <USB_DriveVbus>

  HAL_Delay(200U);
 8004a14:	20c8      	movs	r0, #200	; 0xc8
 8004a16:	f7fc fa27 	bl	8000e68 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004a26:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d00b      	beq.n	8004a4c <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a3a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	4a14      	ldr	r2, [pc, #80]	; (8004a90 <USB_HostInit+0x164>)
 8004a40:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a13      	ldr	r2, [pc, #76]	; (8004a94 <USB_HostInit+0x168>)
 8004a46:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004a4a:	e009      	b.n	8004a60 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2280      	movs	r2, #128	; 0x80
 8004a50:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a10      	ldr	r2, [pc, #64]	; (8004a98 <USB_HostInit+0x16c>)
 8004a56:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	4a10      	ldr	r2, [pc, #64]	; (8004a9c <USB_HostInit+0x170>)
 8004a5c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d105      	bne.n	8004a72 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	699b      	ldr	r3, [r3, #24]
 8004a6a:	f043 0210 	orr.w	r2, r3, #16
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	699a      	ldr	r2, [r3, #24]
 8004a76:	4b0a      	ldr	r3, [pc, #40]	; (8004aa0 <USB_HostInit+0x174>)
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8004a7e:	2300      	movs	r3, #0
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	3710      	adds	r7, #16
 8004a84:	46bd      	mov	sp, r7
 8004a86:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a8a:	b004      	add	sp, #16
 8004a8c:	4770      	bx	lr
 8004a8e:	bf00      	nop
 8004a90:	01000200 	.word	0x01000200
 8004a94:	00e00300 	.word	0x00e00300
 8004a98:	00600080 	.word	0x00600080
 8004a9c:	004000e0 	.word	0x004000e0
 8004aa0:	a3200008 	.word	0xa3200008

08004aa4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b085      	sub	sp, #20
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	460b      	mov	r3, r1
 8004aae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	68fa      	ldr	r2, [r7, #12]
 8004abe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004ac2:	f023 0303 	bic.w	r3, r3, #3
 8004ac6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	78fb      	ldrb	r3, [r7, #3]
 8004ad2:	f003 0303 	and.w	r3, r3, #3
 8004ad6:	68f9      	ldr	r1, [r7, #12]
 8004ad8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004adc:	4313      	orrs	r3, r2
 8004ade:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004ae0:	78fb      	ldrb	r3, [r7, #3]
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d107      	bne.n	8004af6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004aec:	461a      	mov	r2, r3
 8004aee:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004af2:	6053      	str	r3, [r2, #4]
 8004af4:	e009      	b.n	8004b0a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004af6:	78fb      	ldrb	r3, [r7, #3]
 8004af8:	2b02      	cmp	r3, #2
 8004afa:	d106      	bne.n	8004b0a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b02:	461a      	mov	r2, r3
 8004b04:	f241 7370 	movw	r3, #6000	; 0x1770
 8004b08:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004b0a:	2300      	movs	r3, #0
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3714      	adds	r7, #20
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr

08004b18 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b084      	sub	sp, #16
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004b24:	2300      	movs	r3, #0
 8004b26:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004b38:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	68fa      	ldr	r2, [r7, #12]
 8004b3e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004b42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b46:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004b48:	2064      	movs	r0, #100	; 0x64
 8004b4a:	f7fc f98d 	bl	8000e68 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	68fa      	ldr	r2, [r7, #12]
 8004b52:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004b56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b5a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004b5c:	200a      	movs	r0, #10
 8004b5e:	f7fc f983 	bl	8000e68 <HAL_Delay>

  return HAL_OK;
 8004b62:	2300      	movs	r3, #0
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3710      	adds	r7, #16
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}

08004b6c <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b085      	sub	sp, #20
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	460b      	mov	r3, r1
 8004b76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004b90:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d109      	bne.n	8004bb0 <USB_DriveVbus+0x44>
 8004b9c:	78fb      	ldrb	r3, [r7, #3]
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d106      	bne.n	8004bb0 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	68fa      	ldr	r2, [r7, #12]
 8004ba6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004baa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004bae:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004bb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bba:	d109      	bne.n	8004bd0 <USB_DriveVbus+0x64>
 8004bbc:	78fb      	ldrb	r3, [r7, #3]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d106      	bne.n	8004bd0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	68fa      	ldr	r2, [r7, #12]
 8004bc6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004bca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004bce:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004bd0:	2300      	movs	r3, #0
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3714      	adds	r7, #20
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr

08004bde <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004bde:	b480      	push	{r7}
 8004be0:	b085      	sub	sp, #20
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004bea:	2300      	movs	r3, #0
 8004bec:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	0c5b      	lsrs	r3, r3, #17
 8004bfc:	f003 0303 	and.w	r3, r3, #3
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3714      	adds	r7, #20
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr

08004c0c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b085      	sub	sp, #20
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	b29b      	uxth	r3, r3
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3714      	adds	r7, #20
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr
	...

08004c30 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b087      	sub	sp, #28
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	4608      	mov	r0, r1
 8004c3a:	4611      	mov	r1, r2
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	4603      	mov	r3, r0
 8004c40:	70fb      	strb	r3, [r7, #3]
 8004c42:	460b      	mov	r3, r1
 8004c44:	70bb      	strb	r3, [r7, #2]
 8004c46:	4613      	mov	r3, r2
 8004c48:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004c52:	78fb      	ldrb	r3, [r7, #3]
 8004c54:	015a      	lsls	r2, r3, #5
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	4413      	add	r3, r2
 8004c5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c5e:	461a      	mov	r2, r3
 8004c60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c64:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004c66:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004c6a:	2b03      	cmp	r3, #3
 8004c6c:	d87e      	bhi.n	8004d6c <USB_HC_Init+0x13c>
 8004c6e:	a201      	add	r2, pc, #4	; (adr r2, 8004c74 <USB_HC_Init+0x44>)
 8004c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c74:	08004c85 	.word	0x08004c85
 8004c78:	08004d2f 	.word	0x08004d2f
 8004c7c:	08004c85 	.word	0x08004c85
 8004c80:	08004cf1 	.word	0x08004cf1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004c84:	78fb      	ldrb	r3, [r7, #3]
 8004c86:	015a      	lsls	r2, r3, #5
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	4413      	add	r3, r2
 8004c8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c90:	461a      	mov	r2, r3
 8004c92:	f240 439d 	movw	r3, #1181	; 0x49d
 8004c96:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004c98:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	da10      	bge.n	8004cc2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004ca0:	78fb      	ldrb	r3, [r7, #3]
 8004ca2:	015a      	lsls	r2, r3, #5
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	4413      	add	r3, r2
 8004ca8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	78fa      	ldrb	r2, [r7, #3]
 8004cb0:	0151      	lsls	r1, r2, #5
 8004cb2:	68ba      	ldr	r2, [r7, #8]
 8004cb4:	440a      	add	r2, r1
 8004cb6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004cba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cbe:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8004cc0:	e057      	b.n	8004d72 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d051      	beq.n	8004d72 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8004cce:	78fb      	ldrb	r3, [r7, #3]
 8004cd0:	015a      	lsls	r2, r3, #5
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	4413      	add	r3, r2
 8004cd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	78fa      	ldrb	r2, [r7, #3]
 8004cde:	0151      	lsls	r1, r2, #5
 8004ce0:	68ba      	ldr	r2, [r7, #8]
 8004ce2:	440a      	add	r2, r1
 8004ce4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ce8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004cec:	60d3      	str	r3, [r2, #12]
      break;
 8004cee:	e040      	b.n	8004d72 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004cf0:	78fb      	ldrb	r3, [r7, #3]
 8004cf2:	015a      	lsls	r2, r3, #5
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	4413      	add	r3, r2
 8004cf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	f240 639d 	movw	r3, #1693	; 0x69d
 8004d02:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004d04:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	da34      	bge.n	8004d76 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004d0c:	78fb      	ldrb	r3, [r7, #3]
 8004d0e:	015a      	lsls	r2, r3, #5
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	4413      	add	r3, r2
 8004d14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	78fa      	ldrb	r2, [r7, #3]
 8004d1c:	0151      	lsls	r1, r2, #5
 8004d1e:	68ba      	ldr	r2, [r7, #8]
 8004d20:	440a      	add	r2, r1
 8004d22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d2a:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004d2c:	e023      	b.n	8004d76 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004d2e:	78fb      	ldrb	r3, [r7, #3]
 8004d30:	015a      	lsls	r2, r3, #5
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	4413      	add	r3, r2
 8004d36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	f240 2325 	movw	r3, #549	; 0x225
 8004d40:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004d42:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	da17      	bge.n	8004d7a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004d4a:	78fb      	ldrb	r3, [r7, #3]
 8004d4c:	015a      	lsls	r2, r3, #5
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	4413      	add	r3, r2
 8004d52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	78fa      	ldrb	r2, [r7, #3]
 8004d5a:	0151      	lsls	r1, r2, #5
 8004d5c:	68ba      	ldr	r2, [r7, #8]
 8004d5e:	440a      	add	r2, r1
 8004d60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d64:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004d68:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004d6a:	e006      	b.n	8004d7a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	75fb      	strb	r3, [r7, #23]
      break;
 8004d70:	e004      	b.n	8004d7c <USB_HC_Init+0x14c>
      break;
 8004d72:	bf00      	nop
 8004d74:	e002      	b.n	8004d7c <USB_HC_Init+0x14c>
      break;
 8004d76:	bf00      	nop
 8004d78:	e000      	b.n	8004d7c <USB_HC_Init+0x14c>
      break;
 8004d7a:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d82:	699a      	ldr	r2, [r3, #24]
 8004d84:	78fb      	ldrb	r3, [r7, #3]
 8004d86:	f003 030f 	and.w	r3, r3, #15
 8004d8a:	2101      	movs	r1, #1
 8004d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8004d90:	68b9      	ldr	r1, [r7, #8]
 8004d92:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004d96:	4313      	orrs	r3, r2
 8004d98:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	699b      	ldr	r3, [r3, #24]
 8004d9e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004da6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	da03      	bge.n	8004db6 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004dae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004db2:	613b      	str	r3, [r7, #16]
 8004db4:	e001      	b.n	8004dba <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8004db6:	2300      	movs	r3, #0
 8004db8:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8004dba:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d103      	bne.n	8004dca <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004dc2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004dc6:	60fb      	str	r3, [r7, #12]
 8004dc8:	e001      	b.n	8004dce <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004dce:	787b      	ldrb	r3, [r7, #1]
 8004dd0:	059b      	lsls	r3, r3, #22
 8004dd2:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004dd6:	78bb      	ldrb	r3, [r7, #2]
 8004dd8:	02db      	lsls	r3, r3, #11
 8004dda:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004dde:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004de0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004de4:	049b      	lsls	r3, r3, #18
 8004de6:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004dea:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004dec:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004dee:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004df2:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004df8:	78fb      	ldrb	r3, [r7, #3]
 8004dfa:	0159      	lsls	r1, r3, #5
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	440b      	add	r3, r1
 8004e00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e04:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004e0a:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8004e0c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004e10:	2b03      	cmp	r3, #3
 8004e12:	d10f      	bne.n	8004e34 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8004e14:	78fb      	ldrb	r3, [r7, #3]
 8004e16:	015a      	lsls	r2, r3, #5
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	4413      	add	r3, r2
 8004e1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	78fa      	ldrb	r2, [r7, #3]
 8004e24:	0151      	lsls	r1, r2, #5
 8004e26:	68ba      	ldr	r2, [r7, #8]
 8004e28:	440a      	add	r2, r1
 8004e2a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e2e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e32:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8004e34:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	371c      	adds	r7, #28
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr
 8004e42:	bf00      	nop

08004e44 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b08c      	sub	sp, #48	; 0x30
 8004e48:	af02      	add	r7, sp, #8
 8004e4a:	60f8      	str	r0, [r7, #12]
 8004e4c:	60b9      	str	r1, [r7, #8]
 8004e4e:	4613      	mov	r3, r2
 8004e50:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	785b      	ldrb	r3, [r3, #1]
 8004e5a:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8004e5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e60:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d028      	beq.n	8004ec0 <USB_HC_StartXfer+0x7c>
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	791b      	ldrb	r3, [r3, #4]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d124      	bne.n	8004ec0 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8004e76:	79fb      	ldrb	r3, [r7, #7]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d10b      	bne.n	8004e94 <USB_HC_StartXfer+0x50>
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	795b      	ldrb	r3, [r3, #5]
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d107      	bne.n	8004e94 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	785b      	ldrb	r3, [r3, #1]
 8004e88:	4619      	mov	r1, r3
 8004e8a:	68f8      	ldr	r0, [r7, #12]
 8004e8c:	f000 fa2e 	bl	80052ec <USB_DoPing>
      return HAL_OK;
 8004e90:	2300      	movs	r3, #0
 8004e92:	e112      	b.n	80050ba <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 8004e94:	79fb      	ldrb	r3, [r7, #7]
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d112      	bne.n	8004ec0 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8004e9a:	69fb      	ldr	r3, [r7, #28]
 8004e9c:	015a      	lsls	r2, r3, #5
 8004e9e:	6a3b      	ldr	r3, [r7, #32]
 8004ea0:	4413      	add	r3, r2
 8004ea2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	69fa      	ldr	r2, [r7, #28]
 8004eaa:	0151      	lsls	r1, r2, #5
 8004eac:	6a3a      	ldr	r2, [r7, #32]
 8004eae:	440a      	add	r2, r1
 8004eb0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004eb4:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8004eb8:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	691b      	ldr	r3, [r3, #16]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d018      	beq.n	8004efa <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	691b      	ldr	r3, [r3, #16]
 8004ecc:	68ba      	ldr	r2, [r7, #8]
 8004ece:	8912      	ldrh	r2, [r2, #8]
 8004ed0:	4413      	add	r3, r2
 8004ed2:	3b01      	subs	r3, #1
 8004ed4:	68ba      	ldr	r2, [r7, #8]
 8004ed6:	8912      	ldrh	r2, [r2, #8]
 8004ed8:	fbb3 f3f2 	udiv	r3, r3, r2
 8004edc:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8004ede:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004ee0:	8b7b      	ldrh	r3, [r7, #26]
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d90b      	bls.n	8004efe <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8004ee6:	8b7b      	ldrh	r3, [r7, #26]
 8004ee8:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8004eea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004eec:	68ba      	ldr	r2, [r7, #8]
 8004eee:	8912      	ldrh	r2, [r2, #8]
 8004ef0:	fb02 f203 	mul.w	r2, r2, r3
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	611a      	str	r2, [r3, #16]
 8004ef8:	e001      	b.n	8004efe <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8004efa:	2301      	movs	r3, #1
 8004efc:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	78db      	ldrb	r3, [r3, #3]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d006      	beq.n	8004f14 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8004f06:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004f08:	68ba      	ldr	r2, [r7, #8]
 8004f0a:	8912      	ldrh	r2, [r2, #8]
 8004f0c:	fb02 f203 	mul.w	r2, r2, r3
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	691b      	ldr	r3, [r3, #16]
 8004f18:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004f1c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004f1e:	04d9      	lsls	r1, r3, #19
 8004f20:	4b68      	ldr	r3, [pc, #416]	; (80050c4 <USB_HC_StartXfer+0x280>)
 8004f22:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004f24:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	7a9b      	ldrb	r3, [r3, #10]
 8004f2a:	075b      	lsls	r3, r3, #29
 8004f2c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004f30:	69f9      	ldr	r1, [r7, #28]
 8004f32:	0148      	lsls	r0, r1, #5
 8004f34:	6a39      	ldr	r1, [r7, #32]
 8004f36:	4401      	add	r1, r0
 8004f38:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004f3c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004f3e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8004f40:	79fb      	ldrb	r3, [r7, #7]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d009      	beq.n	8004f5a <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	68d9      	ldr	r1, [r3, #12]
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	015a      	lsls	r2, r3, #5
 8004f4e:	6a3b      	ldr	r3, [r7, #32]
 8004f50:	4413      	add	r3, r2
 8004f52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f56:	460a      	mov	r2, r1
 8004f58:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8004f5a:	6a3b      	ldr	r3, [r7, #32]
 8004f5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	f003 0301 	and.w	r3, r3, #1
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	bf0c      	ite	eq
 8004f6a:	2301      	moveq	r3, #1
 8004f6c:	2300      	movne	r3, #0
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8004f72:	69fb      	ldr	r3, [r7, #28]
 8004f74:	015a      	lsls	r2, r3, #5
 8004f76:	6a3b      	ldr	r3, [r7, #32]
 8004f78:	4413      	add	r3, r2
 8004f7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	69fa      	ldr	r2, [r7, #28]
 8004f82:	0151      	lsls	r1, r2, #5
 8004f84:	6a3a      	ldr	r2, [r7, #32]
 8004f86:	440a      	add	r2, r1
 8004f88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f8c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004f90:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	015a      	lsls	r2, r3, #5
 8004f96:	6a3b      	ldr	r3, [r7, #32]
 8004f98:	4413      	add	r3, r2
 8004f9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	7e7b      	ldrb	r3, [r7, #25]
 8004fa2:	075b      	lsls	r3, r3, #29
 8004fa4:	69f9      	ldr	r1, [r7, #28]
 8004fa6:	0148      	lsls	r0, r1, #5
 8004fa8:	6a39      	ldr	r1, [r7, #32]
 8004faa:	4401      	add	r1, r0
 8004fac:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004fb4:	69fb      	ldr	r3, [r7, #28]
 8004fb6:	015a      	lsls	r2, r3, #5
 8004fb8:	6a3b      	ldr	r3, [r7, #32]
 8004fba:	4413      	add	r3, r2
 8004fbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a41      	ldr	r2, [pc, #260]	; (80050c8 <USB_HC_StartXfer+0x284>)
 8004fc4:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004fc6:	4b40      	ldr	r3, [pc, #256]	; (80050c8 <USB_HC_StartXfer+0x284>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004fce:	4a3e      	ldr	r2, [pc, #248]	; (80050c8 <USB_HC_StartXfer+0x284>)
 8004fd0:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	78db      	ldrb	r3, [r3, #3]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d006      	beq.n	8004fe8 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8004fda:	4b3b      	ldr	r3, [pc, #236]	; (80050c8 <USB_HC_StartXfer+0x284>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fe2:	4a39      	ldr	r2, [pc, #228]	; (80050c8 <USB_HC_StartXfer+0x284>)
 8004fe4:	6013      	str	r3, [r2, #0]
 8004fe6:	e005      	b.n	8004ff4 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8004fe8:	4b37      	ldr	r3, [pc, #220]	; (80050c8 <USB_HC_StartXfer+0x284>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004ff0:	4a35      	ldr	r2, [pc, #212]	; (80050c8 <USB_HC_StartXfer+0x284>)
 8004ff2:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004ff4:	4b34      	ldr	r3, [pc, #208]	; (80050c8 <USB_HC_StartXfer+0x284>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004ffc:	4a32      	ldr	r2, [pc, #200]	; (80050c8 <USB_HC_StartXfer+0x284>)
 8004ffe:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005000:	69fb      	ldr	r3, [r7, #28]
 8005002:	015a      	lsls	r2, r3, #5
 8005004:	6a3b      	ldr	r3, [r7, #32]
 8005006:	4413      	add	r3, r2
 8005008:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800500c:	461a      	mov	r2, r3
 800500e:	4b2e      	ldr	r3, [pc, #184]	; (80050c8 <USB_HC_StartXfer+0x284>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8005014:	79fb      	ldrb	r3, [r7, #7]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d14e      	bne.n	80050b8 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	78db      	ldrb	r3, [r3, #3]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d14a      	bne.n	80050b8 <USB_HC_StartXfer+0x274>
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	691b      	ldr	r3, [r3, #16]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d046      	beq.n	80050b8 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	79db      	ldrb	r3, [r3, #7]
 800502e:	2b03      	cmp	r3, #3
 8005030:	d830      	bhi.n	8005094 <USB_HC_StartXfer+0x250>
 8005032:	a201      	add	r2, pc, #4	; (adr r2, 8005038 <USB_HC_StartXfer+0x1f4>)
 8005034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005038:	08005049 	.word	0x08005049
 800503c:	0800506d 	.word	0x0800506d
 8005040:	08005049 	.word	0x08005049
 8005044:	0800506d 	.word	0x0800506d
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	691b      	ldr	r3, [r3, #16]
 800504c:	3303      	adds	r3, #3
 800504e:	089b      	lsrs	r3, r3, #2
 8005050:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005052:	8afa      	ldrh	r2, [r7, #22]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005058:	b29b      	uxth	r3, r3
 800505a:	429a      	cmp	r2, r3
 800505c:	d91c      	bls.n	8005098 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	699b      	ldr	r3, [r3, #24]
 8005062:	f043 0220 	orr.w	r2, r3, #32
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	619a      	str	r2, [r3, #24]
          }
          break;
 800506a:	e015      	b.n	8005098 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	691b      	ldr	r3, [r3, #16]
 8005070:	3303      	adds	r3, #3
 8005072:	089b      	lsrs	r3, r3, #2
 8005074:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005076:	8afa      	ldrh	r2, [r7, #22]
 8005078:	6a3b      	ldr	r3, [r7, #32]
 800507a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800507e:	691b      	ldr	r3, [r3, #16]
 8005080:	b29b      	uxth	r3, r3
 8005082:	429a      	cmp	r2, r3
 8005084:	d90a      	bls.n	800509c <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	699b      	ldr	r3, [r3, #24]
 800508a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	619a      	str	r2, [r3, #24]
          }
          break;
 8005092:	e003      	b.n	800509c <USB_HC_StartXfer+0x258>

        default:
          break;
 8005094:	bf00      	nop
 8005096:	e002      	b.n	800509e <USB_HC_StartXfer+0x25a>
          break;
 8005098:	bf00      	nop
 800509a:	e000      	b.n	800509e <USB_HC_StartXfer+0x25a>
          break;
 800509c:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	68d9      	ldr	r1, [r3, #12]
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	785a      	ldrb	r2, [r3, #1]
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	691b      	ldr	r3, [r3, #16]
 80050aa:	b298      	uxth	r0, r3
 80050ac:	2300      	movs	r3, #0
 80050ae:	9300      	str	r3, [sp, #0]
 80050b0:	4603      	mov	r3, r0
 80050b2:	68f8      	ldr	r0, [r7, #12]
 80050b4:	f7ff fb86 	bl	80047c4 <USB_WritePacket>
    }
  }

  return HAL_OK;
 80050b8:	2300      	movs	r3, #0
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3728      	adds	r7, #40	; 0x28
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}
 80050c2:	bf00      	nop
 80050c4:	1ff80000 	.word	0x1ff80000
 80050c8:	200000b0 	.word	0x200000b0

080050cc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b085      	sub	sp, #20
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050de:	695b      	ldr	r3, [r3, #20]
 80050e0:	b29b      	uxth	r3, r3
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3714      	adds	r7, #20
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr

080050ee <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80050ee:	b480      	push	{r7}
 80050f0:	b087      	sub	sp, #28
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	6078      	str	r0, [r7, #4]
 80050f6:	460b      	mov	r3, r1
 80050f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 80050fe:	78fb      	ldrb	r3, [r7, #3]
 8005100:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005102:	2300      	movs	r3, #0
 8005104:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	015a      	lsls	r2, r3, #5
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	4413      	add	r3, r2
 800510e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	0c9b      	lsrs	r3, r3, #18
 8005116:	f003 0303 	and.w	r3, r3, #3
 800511a:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d002      	beq.n	8005128 <USB_HC_Halt+0x3a>
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	2b02      	cmp	r3, #2
 8005126:	d16c      	bne.n	8005202 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	015a      	lsls	r2, r3, #5
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	4413      	add	r3, r2
 8005130:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	0151      	lsls	r1, r2, #5
 800513a:	693a      	ldr	r2, [r7, #16]
 800513c:	440a      	add	r2, r1
 800513e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005142:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005146:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800514c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005150:	2b00      	cmp	r3, #0
 8005152:	d143      	bne.n	80051dc <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	015a      	lsls	r2, r3, #5
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	4413      	add	r3, r2
 800515c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	68fa      	ldr	r2, [r7, #12]
 8005164:	0151      	lsls	r1, r2, #5
 8005166:	693a      	ldr	r2, [r7, #16]
 8005168:	440a      	add	r2, r1
 800516a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800516e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005172:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	015a      	lsls	r2, r3, #5
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	4413      	add	r3, r2
 800517c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	68fa      	ldr	r2, [r7, #12]
 8005184:	0151      	lsls	r1, r2, #5
 8005186:	693a      	ldr	r2, [r7, #16]
 8005188:	440a      	add	r2, r1
 800518a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800518e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005192:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	015a      	lsls	r2, r3, #5
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	4413      	add	r3, r2
 800519c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	68fa      	ldr	r2, [r7, #12]
 80051a4:	0151      	lsls	r1, r2, #5
 80051a6:	693a      	ldr	r2, [r7, #16]
 80051a8:	440a      	add	r2, r1
 80051aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051ae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80051b2:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	3301      	adds	r3, #1
 80051b8:	617b      	str	r3, [r7, #20]
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80051c0:	d81d      	bhi.n	80051fe <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	015a      	lsls	r2, r3, #5
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	4413      	add	r3, r2
 80051ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051d8:	d0ec      	beq.n	80051b4 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80051da:	e080      	b.n	80052de <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	015a      	lsls	r2, r3, #5
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	4413      	add	r3, r2
 80051e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	68fa      	ldr	r2, [r7, #12]
 80051ec:	0151      	lsls	r1, r2, #5
 80051ee:	693a      	ldr	r2, [r7, #16]
 80051f0:	440a      	add	r2, r1
 80051f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80051fa:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80051fc:	e06f      	b.n	80052de <USB_HC_Halt+0x1f0>
          break;
 80051fe:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005200:	e06d      	b.n	80052de <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	015a      	lsls	r2, r3, #5
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	4413      	add	r3, r2
 800520a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	68fa      	ldr	r2, [r7, #12]
 8005212:	0151      	lsls	r1, r2, #5
 8005214:	693a      	ldr	r2, [r7, #16]
 8005216:	440a      	add	r2, r1
 8005218:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800521c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005220:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005228:	691b      	ldr	r3, [r3, #16]
 800522a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800522e:	2b00      	cmp	r3, #0
 8005230:	d143      	bne.n	80052ba <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	015a      	lsls	r2, r3, #5
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	4413      	add	r3, r2
 800523a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	68fa      	ldr	r2, [r7, #12]
 8005242:	0151      	lsls	r1, r2, #5
 8005244:	693a      	ldr	r2, [r7, #16]
 8005246:	440a      	add	r2, r1
 8005248:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800524c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005250:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	015a      	lsls	r2, r3, #5
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	4413      	add	r3, r2
 800525a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	68fa      	ldr	r2, [r7, #12]
 8005262:	0151      	lsls	r1, r2, #5
 8005264:	693a      	ldr	r2, [r7, #16]
 8005266:	440a      	add	r2, r1
 8005268:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800526c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005270:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	015a      	lsls	r2, r3, #5
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	4413      	add	r3, r2
 800527a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	68fa      	ldr	r2, [r7, #12]
 8005282:	0151      	lsls	r1, r2, #5
 8005284:	693a      	ldr	r2, [r7, #16]
 8005286:	440a      	add	r2, r1
 8005288:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800528c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005290:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	3301      	adds	r3, #1
 8005296:	617b      	str	r3, [r7, #20]
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800529e:	d81d      	bhi.n	80052dc <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	015a      	lsls	r2, r3, #5
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	4413      	add	r3, r2
 80052a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052b6:	d0ec      	beq.n	8005292 <USB_HC_Halt+0x1a4>
 80052b8:	e011      	b.n	80052de <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	015a      	lsls	r2, r3, #5
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	4413      	add	r3, r2
 80052c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	68fa      	ldr	r2, [r7, #12]
 80052ca:	0151      	lsls	r1, r2, #5
 80052cc:	693a      	ldr	r2, [r7, #16]
 80052ce:	440a      	add	r2, r1
 80052d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80052d8:	6013      	str	r3, [r2, #0]
 80052da:	e000      	b.n	80052de <USB_HC_Halt+0x1f0>
          break;
 80052dc:	bf00      	nop
    }
  }

  return HAL_OK;
 80052de:	2300      	movs	r3, #0
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	371c      	adds	r7, #28
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr

080052ec <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b087      	sub	sp, #28
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	460b      	mov	r3, r1
 80052f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80052fc:	78fb      	ldrb	r3, [r7, #3]
 80052fe:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005300:	2301      	movs	r3, #1
 8005302:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	04da      	lsls	r2, r3, #19
 8005308:	4b15      	ldr	r3, [pc, #84]	; (8005360 <USB_DoPing+0x74>)
 800530a:	4013      	ands	r3, r2
 800530c:	693a      	ldr	r2, [r7, #16]
 800530e:	0151      	lsls	r1, r2, #5
 8005310:	697a      	ldr	r2, [r7, #20]
 8005312:	440a      	add	r2, r1
 8005314:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005318:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800531c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	015a      	lsls	r2, r3, #5
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	4413      	add	r3, r2
 8005326:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005334:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800533c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	015a      	lsls	r2, r3, #5
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	4413      	add	r3, r2
 8005346:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800534a:	461a      	mov	r2, r3
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005350:	2300      	movs	r3, #0
}
 8005352:	4618      	mov	r0, r3
 8005354:	371c      	adds	r7, #28
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr
 800535e:	bf00      	nop
 8005360:	1ff80000 	.word	0x1ff80000

08005364 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b086      	sub	sp, #24
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005370:	2300      	movs	r3, #0
 8005372:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f7ff f9a1 	bl	80046bc <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800537a:	2110      	movs	r1, #16
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f7ff f9d9 	bl	8004734 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f7ff f9fc 	bl	8004780 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005388:	2300      	movs	r3, #0
 800538a:	613b      	str	r3, [r7, #16]
 800538c:	e01f      	b.n	80053ce <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	015a      	lsls	r2, r3, #5
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	4413      	add	r3, r2
 8005396:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053a4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80053ac:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80053b4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	015a      	lsls	r2, r3, #5
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	4413      	add	r3, r2
 80053be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053c2:	461a      	mov	r2, r3
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	3301      	adds	r3, #1
 80053cc:	613b      	str	r3, [r7, #16]
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	2b0f      	cmp	r3, #15
 80053d2:	d9dc      	bls.n	800538e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80053d4:	2300      	movs	r3, #0
 80053d6:	613b      	str	r3, [r7, #16]
 80053d8:	e034      	b.n	8005444 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	015a      	lsls	r2, r3, #5
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	4413      	add	r3, r2
 80053e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053f0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80053f8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005400:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	015a      	lsls	r2, r3, #5
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	4413      	add	r3, r2
 800540a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800540e:	461a      	mov	r2, r3
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	3301      	adds	r3, #1
 8005418:	617b      	str	r3, [r7, #20]
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005420:	d80c      	bhi.n	800543c <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	015a      	lsls	r2, r3, #5
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	4413      	add	r3, r2
 800542a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005434:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005438:	d0ec      	beq.n	8005414 <USB_StopHost+0xb0>
 800543a:	e000      	b.n	800543e <USB_StopHost+0xda>
        break;
 800543c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	3301      	adds	r3, #1
 8005442:	613b      	str	r3, [r7, #16]
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	2b0f      	cmp	r3, #15
 8005448:	d9c7      	bls.n	80053da <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005450:	461a      	mov	r2, r3
 8005452:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005456:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800545e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f7ff f91a 	bl	800469a <USB_EnableGlobalInt>

  return HAL_OK;
 8005466:	2300      	movs	r3, #0
}
 8005468:	4618      	mov	r0, r3
 800546a:	3718      	adds	r7, #24
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}

08005470 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005470:	b590      	push	{r4, r7, lr}
 8005472:	b089      	sub	sp, #36	; 0x24
 8005474:	af04      	add	r7, sp, #16
 8005476:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005478:	2301      	movs	r3, #1
 800547a:	2202      	movs	r2, #2
 800547c:	2102      	movs	r1, #2
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f000 fc68 	bl	8005d54 <USBH_FindInterface>
 8005484:	4603      	mov	r3, r0
 8005486:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005488:	7bfb      	ldrb	r3, [r7, #15]
 800548a:	2bff      	cmp	r3, #255	; 0xff
 800548c:	d002      	beq.n	8005494 <USBH_CDC_InterfaceInit+0x24>
 800548e:	7bfb      	ldrb	r3, [r7, #15]
 8005490:	2b01      	cmp	r3, #1
 8005492:	d901      	bls.n	8005498 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005494:	2302      	movs	r3, #2
 8005496:	e13d      	b.n	8005714 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005498:	7bfb      	ldrb	r3, [r7, #15]
 800549a:	4619      	mov	r1, r3
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f000 fc3d 	bl	8005d1c <USBH_SelectInterface>
 80054a2:	4603      	mov	r3, r0
 80054a4:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80054a6:	7bbb      	ldrb	r3, [r7, #14]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d001      	beq.n	80054b0 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80054ac:	2302      	movs	r3, #2
 80054ae:	e131      	b.n	8005714 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80054b6:	2050      	movs	r0, #80	; 0x50
 80054b8:	f002 fa04 	bl	80078c4 <malloc>
 80054bc:	4603      	mov	r3, r0
 80054be:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80054c6:	69db      	ldr	r3, [r3, #28]
 80054c8:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d101      	bne.n	80054d4 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80054d0:	2302      	movs	r3, #2
 80054d2:	e11f      	b.n	8005714 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80054d4:	2250      	movs	r2, #80	; 0x50
 80054d6:	2100      	movs	r1, #0
 80054d8:	68b8      	ldr	r0, [r7, #8]
 80054da:	f002 fa03 	bl	80078e4 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80054de:	7bfb      	ldrb	r3, [r7, #15]
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	211a      	movs	r1, #26
 80054e4:	fb01 f303 	mul.w	r3, r1, r3
 80054e8:	4413      	add	r3, r2
 80054ea:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	b25b      	sxtb	r3, r3
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	da15      	bge.n	8005522 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80054f6:	7bfb      	ldrb	r3, [r7, #15]
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	211a      	movs	r1, #26
 80054fc:	fb01 f303 	mul.w	r3, r1, r3
 8005500:	4413      	add	r3, r2
 8005502:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005506:	781a      	ldrb	r2, [r3, #0]
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800550c:	7bfb      	ldrb	r3, [r7, #15]
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	211a      	movs	r1, #26
 8005512:	fb01 f303 	mul.w	r3, r1, r3
 8005516:	4413      	add	r3, r2
 8005518:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800551c:	881a      	ldrh	r2, [r3, #0]
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	785b      	ldrb	r3, [r3, #1]
 8005526:	4619      	mov	r1, r3
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f001 fe36 	bl	800719a <USBH_AllocPipe>
 800552e:	4603      	mov	r3, r0
 8005530:	461a      	mov	r2, r3
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	7819      	ldrb	r1, [r3, #0]
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	7858      	ldrb	r0, [r3, #1]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800554a:	68ba      	ldr	r2, [r7, #8]
 800554c:	8952      	ldrh	r2, [r2, #10]
 800554e:	9202      	str	r2, [sp, #8]
 8005550:	2203      	movs	r2, #3
 8005552:	9201      	str	r2, [sp, #4]
 8005554:	9300      	str	r3, [sp, #0]
 8005556:	4623      	mov	r3, r4
 8005558:	4602      	mov	r2, r0
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f001 fdee 	bl	800713c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	2200      	movs	r2, #0
 8005566:	4619      	mov	r1, r3
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f002 f8fb 	bl	8007764 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800556e:	2300      	movs	r3, #0
 8005570:	2200      	movs	r2, #0
 8005572:	210a      	movs	r1, #10
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f000 fbed 	bl	8005d54 <USBH_FindInterface>
 800557a:	4603      	mov	r3, r0
 800557c:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800557e:	7bfb      	ldrb	r3, [r7, #15]
 8005580:	2bff      	cmp	r3, #255	; 0xff
 8005582:	d002      	beq.n	800558a <USBH_CDC_InterfaceInit+0x11a>
 8005584:	7bfb      	ldrb	r3, [r7, #15]
 8005586:	2b01      	cmp	r3, #1
 8005588:	d901      	bls.n	800558e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800558a:	2302      	movs	r3, #2
 800558c:	e0c2      	b.n	8005714 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800558e:	7bfb      	ldrb	r3, [r7, #15]
 8005590:	687a      	ldr	r2, [r7, #4]
 8005592:	211a      	movs	r1, #26
 8005594:	fb01 f303 	mul.w	r3, r1, r3
 8005598:	4413      	add	r3, r2
 800559a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	b25b      	sxtb	r3, r3
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	da16      	bge.n	80055d4 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80055a6:	7bfb      	ldrb	r3, [r7, #15]
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	211a      	movs	r1, #26
 80055ac:	fb01 f303 	mul.w	r3, r1, r3
 80055b0:	4413      	add	r3, r2
 80055b2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80055b6:	781a      	ldrb	r2, [r3, #0]
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80055bc:	7bfb      	ldrb	r3, [r7, #15]
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	211a      	movs	r1, #26
 80055c2:	fb01 f303 	mul.w	r3, r1, r3
 80055c6:	4413      	add	r3, r2
 80055c8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80055cc:	881a      	ldrh	r2, [r3, #0]
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	835a      	strh	r2, [r3, #26]
 80055d2:	e015      	b.n	8005600 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80055d4:	7bfb      	ldrb	r3, [r7, #15]
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	211a      	movs	r1, #26
 80055da:	fb01 f303 	mul.w	r3, r1, r3
 80055de:	4413      	add	r3, r2
 80055e0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80055e4:	781a      	ldrb	r2, [r3, #0]
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80055ea:	7bfb      	ldrb	r3, [r7, #15]
 80055ec:	687a      	ldr	r2, [r7, #4]
 80055ee:	211a      	movs	r1, #26
 80055f0:	fb01 f303 	mul.w	r3, r1, r3
 80055f4:	4413      	add	r3, r2
 80055f6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80055fa:	881a      	ldrh	r2, [r3, #0]
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8005600:	7bfb      	ldrb	r3, [r7, #15]
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	211a      	movs	r1, #26
 8005606:	fb01 f303 	mul.w	r3, r1, r3
 800560a:	4413      	add	r3, r2
 800560c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005610:	781b      	ldrb	r3, [r3, #0]
 8005612:	b25b      	sxtb	r3, r3
 8005614:	2b00      	cmp	r3, #0
 8005616:	da16      	bge.n	8005646 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005618:	7bfb      	ldrb	r3, [r7, #15]
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	211a      	movs	r1, #26
 800561e:	fb01 f303 	mul.w	r3, r1, r3
 8005622:	4413      	add	r3, r2
 8005624:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005628:	781a      	ldrb	r2, [r3, #0]
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800562e:	7bfb      	ldrb	r3, [r7, #15]
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	211a      	movs	r1, #26
 8005634:	fb01 f303 	mul.w	r3, r1, r3
 8005638:	4413      	add	r3, r2
 800563a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800563e:	881a      	ldrh	r2, [r3, #0]
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	835a      	strh	r2, [r3, #26]
 8005644:	e015      	b.n	8005672 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005646:	7bfb      	ldrb	r3, [r7, #15]
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	211a      	movs	r1, #26
 800564c:	fb01 f303 	mul.w	r3, r1, r3
 8005650:	4413      	add	r3, r2
 8005652:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005656:	781a      	ldrb	r2, [r3, #0]
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800565c:	7bfb      	ldrb	r3, [r7, #15]
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	211a      	movs	r1, #26
 8005662:	fb01 f303 	mul.w	r3, r1, r3
 8005666:	4413      	add	r3, r2
 8005668:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800566c:	881a      	ldrh	r2, [r3, #0]
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	7b9b      	ldrb	r3, [r3, #14]
 8005676:	4619      	mov	r1, r3
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f001 fd8e 	bl	800719a <USBH_AllocPipe>
 800567e:	4603      	mov	r3, r0
 8005680:	461a      	mov	r2, r3
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	7bdb      	ldrb	r3, [r3, #15]
 800568a:	4619      	mov	r1, r3
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f001 fd84 	bl	800719a <USBH_AllocPipe>
 8005692:	4603      	mov	r3, r0
 8005694:	461a      	mov	r2, r3
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	7b59      	ldrb	r1, [r3, #13]
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	7b98      	ldrb	r0, [r3, #14]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80056ae:	68ba      	ldr	r2, [r7, #8]
 80056b0:	8b12      	ldrh	r2, [r2, #24]
 80056b2:	9202      	str	r2, [sp, #8]
 80056b4:	2202      	movs	r2, #2
 80056b6:	9201      	str	r2, [sp, #4]
 80056b8:	9300      	str	r3, [sp, #0]
 80056ba:	4623      	mov	r3, r4
 80056bc:	4602      	mov	r2, r0
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f001 fd3c 	bl	800713c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	7b19      	ldrb	r1, [r3, #12]
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	7bd8      	ldrb	r0, [r3, #15]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80056d8:	68ba      	ldr	r2, [r7, #8]
 80056da:	8b52      	ldrh	r2, [r2, #26]
 80056dc:	9202      	str	r2, [sp, #8]
 80056de:	2202      	movs	r2, #2
 80056e0:	9201      	str	r2, [sp, #4]
 80056e2:	9300      	str	r3, [sp, #0]
 80056e4:	4623      	mov	r3, r4
 80056e6:	4602      	mov	r2, r0
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f001 fd27 	bl	800713c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	2200      	movs	r2, #0
 80056f2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	7b5b      	ldrb	r3, [r3, #13]
 80056fa:	2200      	movs	r2, #0
 80056fc:	4619      	mov	r1, r3
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f002 f830 	bl	8007764 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	7b1b      	ldrb	r3, [r3, #12]
 8005708:	2200      	movs	r2, #0
 800570a:	4619      	mov	r1, r3
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f002 f829 	bl	8007764 <USBH_LL_SetToggle>

  return USBH_OK;
 8005712:	2300      	movs	r3, #0
}
 8005714:	4618      	mov	r0, r3
 8005716:	3714      	adds	r7, #20
 8005718:	46bd      	mov	sp, r7
 800571a:	bd90      	pop	{r4, r7, pc}

0800571c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b084      	sub	sp, #16
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800572a:	69db      	ldr	r3, [r3, #28]
 800572c:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d00e      	beq.n	8005754 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	4619      	mov	r1, r3
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f001 fd1c 	bl	800717a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	4619      	mov	r1, r3
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f001 fd47 	bl	80071dc <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2200      	movs	r2, #0
 8005752:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	7b1b      	ldrb	r3, [r3, #12]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d00e      	beq.n	800577a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	7b1b      	ldrb	r3, [r3, #12]
 8005760:	4619      	mov	r1, r3
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f001 fd09 	bl	800717a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	7b1b      	ldrb	r3, [r3, #12]
 800576c:	4619      	mov	r1, r3
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f001 fd34 	bl	80071dc <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2200      	movs	r2, #0
 8005778:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	7b5b      	ldrb	r3, [r3, #13]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d00e      	beq.n	80057a0 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	7b5b      	ldrb	r3, [r3, #13]
 8005786:	4619      	mov	r1, r3
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f001 fcf6 	bl	800717a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	7b5b      	ldrb	r3, [r3, #13]
 8005792:	4619      	mov	r1, r3
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f001 fd21 	bl	80071dc <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2200      	movs	r2, #0
 800579e:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80057a6:	69db      	ldr	r3, [r3, #28]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d00b      	beq.n	80057c4 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80057b2:	69db      	ldr	r3, [r3, #28]
 80057b4:	4618      	mov	r0, r3
 80057b6:	f002 f88d 	bl	80078d4 <free>
    phost->pActiveClass->pData = 0U;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80057c0:	2200      	movs	r2, #0
 80057c2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80057c4:	2300      	movs	r3, #0
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3710      	adds	r7, #16
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}

080057ce <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80057ce:	b580      	push	{r7, lr}
 80057d0:	b084      	sub	sp, #16
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80057dc:	69db      	ldr	r3, [r3, #28]
 80057de:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	3340      	adds	r3, #64	; 0x40
 80057e4:	4619      	mov	r1, r3
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f000 f8b1 	bl	800594e <GetLineCoding>
 80057ec:	4603      	mov	r3, r0
 80057ee:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80057f0:	7afb      	ldrb	r3, [r7, #11]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d105      	bne.n	8005802 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80057fc:	2102      	movs	r1, #2
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8005802:	7afb      	ldrb	r3, [r7, #11]
}
 8005804:	4618      	mov	r0, r3
 8005806:	3710      	adds	r7, #16
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}

0800580c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b084      	sub	sp, #16
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005814:	2301      	movs	r3, #1
 8005816:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8005818:	2300      	movs	r3, #0
 800581a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005822:	69db      	ldr	r3, [r3, #28]
 8005824:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800582c:	2b04      	cmp	r3, #4
 800582e:	d877      	bhi.n	8005920 <USBH_CDC_Process+0x114>
 8005830:	a201      	add	r2, pc, #4	; (adr r2, 8005838 <USBH_CDC_Process+0x2c>)
 8005832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005836:	bf00      	nop
 8005838:	0800584d 	.word	0x0800584d
 800583c:	08005853 	.word	0x08005853
 8005840:	08005883 	.word	0x08005883
 8005844:	080058f7 	.word	0x080058f7
 8005848:	08005905 	.word	0x08005905
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800584c:	2300      	movs	r3, #0
 800584e:	73fb      	strb	r3, [r7, #15]
      break;
 8005850:	e06d      	b.n	800592e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005856:	4619      	mov	r1, r3
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f000 f897 	bl	800598c <SetLineCoding>
 800585e:	4603      	mov	r3, r0
 8005860:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005862:	7bbb      	ldrb	r3, [r7, #14]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d104      	bne.n	8005872 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	2202      	movs	r2, #2
 800586c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005870:	e058      	b.n	8005924 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8005872:	7bbb      	ldrb	r3, [r7, #14]
 8005874:	2b01      	cmp	r3, #1
 8005876:	d055      	beq.n	8005924 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	2204      	movs	r2, #4
 800587c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005880:	e050      	b.n	8005924 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	3340      	adds	r3, #64	; 0x40
 8005886:	4619      	mov	r1, r3
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f000 f860 	bl	800594e <GetLineCoding>
 800588e:	4603      	mov	r3, r0
 8005890:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005892:	7bbb      	ldrb	r3, [r7, #14]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d126      	bne.n	80058e6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	2200      	movs	r2, #0
 800589c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058aa:	791b      	ldrb	r3, [r3, #4]
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d13b      	bne.n	8005928 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058ba:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80058bc:	429a      	cmp	r2, r3
 80058be:	d133      	bne.n	8005928 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058ca:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d12b      	bne.n	8005928 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058d8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80058da:	429a      	cmp	r2, r3
 80058dc:	d124      	bne.n	8005928 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 f95a 	bl	8005b98 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80058e4:	e020      	b.n	8005928 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80058e6:	7bbb      	ldrb	r3, [r7, #14]
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d01d      	beq.n	8005928 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	2204      	movs	r2, #4
 80058f0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80058f4:	e018      	b.n	8005928 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f000 f867 	bl	80059ca <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f000 f8dc 	bl	8005aba <CDC_ProcessReception>
      break;
 8005902:	e014      	b.n	800592e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8005904:	2100      	movs	r1, #0
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f000 ffe5 	bl	80068d6 <USBH_ClrFeature>
 800590c:	4603      	mov	r3, r0
 800590e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005910:	7bbb      	ldrb	r3, [r7, #14]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d10a      	bne.n	800592c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	2200      	movs	r2, #0
 800591a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800591e:	e005      	b.n	800592c <USBH_CDC_Process+0x120>

    default:
      break;
 8005920:	bf00      	nop
 8005922:	e004      	b.n	800592e <USBH_CDC_Process+0x122>
      break;
 8005924:	bf00      	nop
 8005926:	e002      	b.n	800592e <USBH_CDC_Process+0x122>
      break;
 8005928:	bf00      	nop
 800592a:	e000      	b.n	800592e <USBH_CDC_Process+0x122>
      break;
 800592c:	bf00      	nop

  }

  return status;
 800592e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005930:	4618      	mov	r0, r3
 8005932:	3710      	adds	r7, #16
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}

08005938 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8005938:	b480      	push	{r7}
 800593a:	b083      	sub	sp, #12
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8005940:	2300      	movs	r3, #0
}
 8005942:	4618      	mov	r0, r3
 8005944:	370c      	adds	r7, #12
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr

0800594e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800594e:	b580      	push	{r7, lr}
 8005950:	b082      	sub	sp, #8
 8005952:	af00      	add	r7, sp, #0
 8005954:	6078      	str	r0, [r7, #4]
 8005956:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	22a1      	movs	r2, #161	; 0xa1
 800595c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2221      	movs	r2, #33	; 0x21
 8005962:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2207      	movs	r2, #7
 8005974:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	2207      	movs	r2, #7
 800597a:	4619      	mov	r1, r3
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f001 f98a 	bl	8006c96 <USBH_CtlReq>
 8005982:	4603      	mov	r3, r0
}
 8005984:	4618      	mov	r0, r3
 8005986:	3708      	adds	r7, #8
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}

0800598c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b082      	sub	sp, #8
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2221      	movs	r2, #33	; 0x21
 800599a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2220      	movs	r2, #32
 80059a0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2200      	movs	r2, #0
 80059ac:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2207      	movs	r2, #7
 80059b2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	2207      	movs	r2, #7
 80059b8:	4619      	mov	r1, r3
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f001 f96b 	bl	8006c96 <USBH_CtlReq>
 80059c0:	4603      	mov	r3, r0
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3708      	adds	r7, #8
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}

080059ca <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80059ca:	b580      	push	{r7, lr}
 80059cc:	b086      	sub	sp, #24
 80059ce:	af02      	add	r7, sp, #8
 80059d0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80059d8:	69db      	ldr	r3, [r3, #28]
 80059da:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80059dc:	2300      	movs	r3, #0
 80059de:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d002      	beq.n	80059f0 <CDC_ProcessTransmission+0x26>
 80059ea:	2b02      	cmp	r3, #2
 80059ec:	d025      	beq.n	8005a3a <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 80059ee:	e060      	b.n	8005ab2 <CDC_ProcessTransmission+0xe8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f4:	68fa      	ldr	r2, [r7, #12]
 80059f6:	8b12      	ldrh	r2, [r2, #24]
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d90c      	bls.n	8005a16 <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	69d9      	ldr	r1, [r3, #28]
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	8b1a      	ldrh	r2, [r3, #24]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	7b58      	ldrb	r0, [r3, #13]
 8005a08:	2301      	movs	r3, #1
 8005a0a:	9300      	str	r3, [sp, #0]
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f001 fb51 	bl	80070b6 <USBH_BulkSendData>
 8005a14:	e00c      	b.n	8005a30 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8005a1e:	b29a      	uxth	r2, r3
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	7b58      	ldrb	r0, [r3, #13]
 8005a24:	2301      	movs	r3, #1
 8005a26:	9300      	str	r3, [sp, #0]
 8005a28:	4603      	mov	r3, r0
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f001 fb43 	bl	80070b6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2202      	movs	r2, #2
 8005a34:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005a38:	e03b      	b.n	8005ab2 <CDC_ProcessTransmission+0xe8>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	7b5b      	ldrb	r3, [r3, #13]
 8005a3e:	4619      	mov	r1, r3
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f001 fe65 	bl	8007710 <USBH_LL_GetURBState>
 8005a46:	4603      	mov	r3, r0
 8005a48:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8005a4a:	7afb      	ldrb	r3, [r7, #11]
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d128      	bne.n	8005aa2 <CDC_ProcessTransmission+0xd8>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a54:	68fa      	ldr	r2, [r7, #12]
 8005a56:	8b12      	ldrh	r2, [r2, #24]
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d90e      	bls.n	8005a7a <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a60:	68fa      	ldr	r2, [r7, #12]
 8005a62:	8b12      	ldrh	r2, [r2, #24]
 8005a64:	1a9a      	subs	r2, r3, r2
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	69db      	ldr	r3, [r3, #28]
 8005a6e:	68fa      	ldr	r2, [r7, #12]
 8005a70:	8b12      	ldrh	r2, [r2, #24]
 8005a72:	441a      	add	r2, r3
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	61da      	str	r2, [r3, #28]
 8005a78:	e002      	b.n	8005a80 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d004      	beq.n	8005a92 <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005a90:	e00e      	b.n	8005ab0 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2200      	movs	r2, #0
 8005a96:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f000 f868 	bl	8005b70 <USBH_CDC_TransmitCallback>
      break;
 8005aa0:	e006      	b.n	8005ab0 <CDC_ProcessTransmission+0xe6>
        if (URB_Status == USBH_URB_NOTREADY)
 8005aa2:	7afb      	ldrb	r3, [r7, #11]
 8005aa4:	2b02      	cmp	r3, #2
 8005aa6:	d103      	bne.n	8005ab0 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005ab0:	bf00      	nop
  }
}
 8005ab2:	bf00      	nop
 8005ab4:	3710      	adds	r7, #16
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}

08005aba <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8005aba:	b580      	push	{r7, lr}
 8005abc:	b086      	sub	sp, #24
 8005abe:	af00      	add	r7, sp, #0
 8005ac0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005ac8:	69db      	ldr	r3, [r3, #28]
 8005aca:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005acc:	2300      	movs	r3, #0
 8005ace:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8005ad6:	2b03      	cmp	r3, #3
 8005ad8:	d002      	beq.n	8005ae0 <CDC_ProcessReception+0x26>
 8005ada:	2b04      	cmp	r3, #4
 8005adc:	d00e      	beq.n	8005afc <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8005ade:	e043      	b.n	8005b68 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	6a19      	ldr	r1, [r3, #32]
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	8b5a      	ldrh	r2, [r3, #26]
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	7b1b      	ldrb	r3, [r3, #12]
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f001 fb07 	bl	8007100 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	2204      	movs	r2, #4
 8005af6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005afa:	e035      	b.n	8005b68 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	7b1b      	ldrb	r3, [r3, #12]
 8005b00:	4619      	mov	r1, r3
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f001 fe04 	bl	8007710 <USBH_LL_GetURBState>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8005b0c:	7cfb      	ldrb	r3, [r7, #19]
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d129      	bne.n	8005b66 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	7b1b      	ldrb	r3, [r3, #12]
 8005b16:	4619      	mov	r1, r3
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f001 fd67 	bl	80075ec <USBH_LL_GetLastXferSize>
 8005b1e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b24:	68fa      	ldr	r2, [r7, #12]
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d016      	beq.n	8005b58 <CDC_ProcessReception+0x9e>
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	8b5b      	ldrh	r3, [r3, #26]
 8005b2e:	461a      	mov	r2, r3
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d910      	bls.n	8005b58 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	1ad2      	subs	r2, r2, r3
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	6a1a      	ldr	r2, [r3, #32]
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	441a      	add	r2, r3
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	2203      	movs	r2, #3
 8005b52:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005b56:	e006      	b.n	8005b66 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f000 f80f 	bl	8005b84 <USBH_CDC_ReceiveCallback>
      break;
 8005b66:	bf00      	nop
  }
}
 8005b68:	bf00      	nop
 8005b6a:	3718      	adds	r7, #24
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}

08005b70 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b083      	sub	sp, #12
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005b78:	bf00      	nop
 8005b7a:	370c      	adds	r7, #12
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr

08005b84 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b083      	sub	sp, #12
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005b8c:	bf00      	nop
 8005b8e:	370c      	adds	r7, #12
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr

08005b98 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b083      	sub	sp, #12
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005ba0:	bf00      	nop
 8005ba2:	370c      	adds	r7, #12
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr

08005bac <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b084      	sub	sp, #16
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	60f8      	str	r0, [r7, #12]
 8005bb4:	60b9      	str	r1, [r7, #8]
 8005bb6:	4613      	mov	r3, r2
 8005bb8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d101      	bne.n	8005bc4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8005bc0:	2302      	movs	r3, #2
 8005bc2:	e029      	b.n	8005c18 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	79fa      	ldrb	r2, [r7, #7]
 8005bc8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8005bdc:	68f8      	ldr	r0, [r7, #12]
 8005bde:	f000 f81f 	bl	8005c20 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2200      	movs	r2, #0
 8005be6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2200      	movs	r2, #0
 8005bee:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d003      	beq.n	8005c10 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	68ba      	ldr	r2, [r7, #8]
 8005c0c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8005c10:	68f8      	ldr	r0, [r7, #12]
 8005c12:	f001 fc39 	bl	8007488 <USBH_LL_Init>

  return USBH_OK;
 8005c16:	2300      	movs	r3, #0
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3710      	adds	r7, #16
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}

08005c20 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b085      	sub	sp, #20
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	60fb      	str	r3, [r7, #12]
 8005c30:	e009      	b.n	8005c46 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	33e0      	adds	r3, #224	; 0xe0
 8005c38:	009b      	lsls	r3, r3, #2
 8005c3a:	4413      	add	r3, r2
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	3301      	adds	r3, #1
 8005c44:	60fb      	str	r3, [r7, #12]
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2b0e      	cmp	r3, #14
 8005c4a:	d9f2      	bls.n	8005c32 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	60fb      	str	r3, [r7, #12]
 8005c50:	e009      	b.n	8005c66 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8005c52:	687a      	ldr	r2, [r7, #4]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	4413      	add	r3, r2
 8005c58:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	3301      	adds	r3, #1
 8005c64:	60fb      	str	r3, [r7, #12]
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c6c:	d3f1      	bcc.n	8005c52 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2200      	movs	r2, #0
 8005c72:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2200      	movs	r2, #0
 8005c84:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2240      	movs	r2, #64	; 0x40
 8005c92:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2200      	movs	r2, #0
 8005c98:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2200      	movs	r2, #0
 8005cae:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8005cba:	2300      	movs	r3, #0
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3714      	adds	r7, #20
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr

08005cc8 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b085      	sub	sp, #20
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d016      	beq.n	8005d0a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d10e      	bne.n	8005d04 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005cec:	1c59      	adds	r1, r3, #1
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8005cf4:	687a      	ldr	r2, [r7, #4]
 8005cf6:	33de      	adds	r3, #222	; 0xde
 8005cf8:	6839      	ldr	r1, [r7, #0]
 8005cfa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	73fb      	strb	r3, [r7, #15]
 8005d02:	e004      	b.n	8005d0e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8005d04:	2302      	movs	r3, #2
 8005d06:	73fb      	strb	r3, [r7, #15]
 8005d08:	e001      	b.n	8005d0e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8005d0a:	2302      	movs	r3, #2
 8005d0c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3714      	adds	r7, #20
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr

08005d1c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b085      	sub	sp, #20
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	460b      	mov	r3, r1
 8005d26:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8005d32:	78fa      	ldrb	r2, [r7, #3]
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d204      	bcs.n	8005d42 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	78fa      	ldrb	r2, [r7, #3]
 8005d3c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8005d40:	e001      	b.n	8005d46 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8005d42:	2302      	movs	r3, #2
 8005d44:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3714      	adds	r7, #20
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr

08005d54 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b087      	sub	sp, #28
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	4608      	mov	r0, r1
 8005d5e:	4611      	mov	r1, r2
 8005d60:	461a      	mov	r2, r3
 8005d62:	4603      	mov	r3, r0
 8005d64:	70fb      	strb	r3, [r7, #3]
 8005d66:	460b      	mov	r3, r1
 8005d68:	70bb      	strb	r3, [r7, #2]
 8005d6a:	4613      	mov	r3, r2
 8005d6c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8005d72:	2300      	movs	r3, #0
 8005d74:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8005d7c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005d7e:	e025      	b.n	8005dcc <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8005d80:	7dfb      	ldrb	r3, [r7, #23]
 8005d82:	221a      	movs	r2, #26
 8005d84:	fb02 f303 	mul.w	r3, r2, r3
 8005d88:	3308      	adds	r3, #8
 8005d8a:	68fa      	ldr	r2, [r7, #12]
 8005d8c:	4413      	add	r3, r2
 8005d8e:	3302      	adds	r3, #2
 8005d90:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	795b      	ldrb	r3, [r3, #5]
 8005d96:	78fa      	ldrb	r2, [r7, #3]
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	d002      	beq.n	8005da2 <USBH_FindInterface+0x4e>
 8005d9c:	78fb      	ldrb	r3, [r7, #3]
 8005d9e:	2bff      	cmp	r3, #255	; 0xff
 8005da0:	d111      	bne.n	8005dc6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005da6:	78ba      	ldrb	r2, [r7, #2]
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d002      	beq.n	8005db2 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005dac:	78bb      	ldrb	r3, [r7, #2]
 8005dae:	2bff      	cmp	r3, #255	; 0xff
 8005db0:	d109      	bne.n	8005dc6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005db6:	787a      	ldrb	r2, [r7, #1]
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d002      	beq.n	8005dc2 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005dbc:	787b      	ldrb	r3, [r7, #1]
 8005dbe:	2bff      	cmp	r3, #255	; 0xff
 8005dc0:	d101      	bne.n	8005dc6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8005dc2:	7dfb      	ldrb	r3, [r7, #23]
 8005dc4:	e006      	b.n	8005dd4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8005dc6:	7dfb      	ldrb	r3, [r7, #23]
 8005dc8:	3301      	adds	r3, #1
 8005dca:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005dcc:	7dfb      	ldrb	r3, [r7, #23]
 8005dce:	2b01      	cmp	r3, #1
 8005dd0:	d9d6      	bls.n	8005d80 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8005dd2:	23ff      	movs	r3, #255	; 0xff
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	371c      	adds	r7, #28
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr

08005de0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b082      	sub	sp, #8
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f001 fb89 	bl	8007500 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8005dee:	2101      	movs	r1, #1
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f001 fca0 	bl	8007736 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8005df6:	2300      	movs	r3, #0
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3708      	adds	r7, #8
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}

08005e00 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b088      	sub	sp, #32
 8005e04:	af04      	add	r7, sp, #16
 8005e06:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8005e08:	2302      	movs	r3, #2
 8005e0a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d102      	bne.n	8005e22 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2203      	movs	r2, #3
 8005e20:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	2b0b      	cmp	r3, #11
 8005e2a:	f200 81b3 	bhi.w	8006194 <USBH_Process+0x394>
 8005e2e:	a201      	add	r2, pc, #4	; (adr r2, 8005e34 <USBH_Process+0x34>)
 8005e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e34:	08005e65 	.word	0x08005e65
 8005e38:	08005e97 	.word	0x08005e97
 8005e3c:	08005eff 	.word	0x08005eff
 8005e40:	0800612f 	.word	0x0800612f
 8005e44:	08006195 	.word	0x08006195
 8005e48:	08005fa3 	.word	0x08005fa3
 8005e4c:	080060d5 	.word	0x080060d5
 8005e50:	08005fd9 	.word	0x08005fd9
 8005e54:	08005ff9 	.word	0x08005ff9
 8005e58:	08006019 	.word	0x08006019
 8005e5c:	08006047 	.word	0x08006047
 8005e60:	08006117 	.word	0x08006117
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8005e6a:	b2db      	uxtb	r3, r3
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	f000 8193 	beq.w	8006198 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2201      	movs	r2, #1
 8005e76:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8005e78:	20c8      	movs	r0, #200	; 0xc8
 8005e7a:	f001 fca6 	bl	80077ca <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f001 fb99 	bl	80075b6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2200      	movs	r2, #0
 8005e88:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8005e94:	e180      	b.n	8006198 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d107      	bne.n	8005eb0 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2202      	movs	r2, #2
 8005eac:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005eae:	e182      	b.n	80061b6 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005eb6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005eba:	d914      	bls.n	8005ee6 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005ec2:	3301      	adds	r3, #1
 8005ec4:	b2da      	uxtb	r2, r3
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005ed2:	2b03      	cmp	r3, #3
 8005ed4:	d903      	bls.n	8005ede <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	220d      	movs	r2, #13
 8005eda:	701a      	strb	r2, [r3, #0]
      break;
 8005edc:	e16b      	b.n	80061b6 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	701a      	strb	r2, [r3, #0]
      break;
 8005ee4:	e167      	b.n	80061b6 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005eec:	f103 020a 	add.w	r2, r3, #10
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8005ef6:	200a      	movs	r0, #10
 8005ef8:	f001 fc67 	bl	80077ca <USBH_Delay>
      break;
 8005efc:	e15b      	b.n	80061b6 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d005      	beq.n	8005f14 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005f0e:	2104      	movs	r1, #4
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8005f14:	2064      	movs	r0, #100	; 0x64
 8005f16:	f001 fc58 	bl	80077ca <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f001 fb26 	bl	800756c <USBH_LL_GetSpeed>
 8005f20:	4603      	mov	r3, r0
 8005f22:	461a      	mov	r2, r3
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2205      	movs	r2, #5
 8005f2e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8005f30:	2100      	movs	r1, #0
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f001 f931 	bl	800719a <USBH_AllocPipe>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8005f40:	2180      	movs	r1, #128	; 0x80
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f001 f929 	bl	800719a <USBH_AllocPipe>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	7919      	ldrb	r1, [r3, #4]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8005f60:	687a      	ldr	r2, [r7, #4]
 8005f62:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8005f64:	b292      	uxth	r2, r2
 8005f66:	9202      	str	r2, [sp, #8]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	9201      	str	r2, [sp, #4]
 8005f6c:	9300      	str	r3, [sp, #0]
 8005f6e:	4603      	mov	r3, r0
 8005f70:	2280      	movs	r2, #128	; 0x80
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f001 f8e2 	bl	800713c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	7959      	ldrb	r1, [r3, #5]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8005f88:	687a      	ldr	r2, [r7, #4]
 8005f8a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8005f8c:	b292      	uxth	r2, r2
 8005f8e:	9202      	str	r2, [sp, #8]
 8005f90:	2200      	movs	r2, #0
 8005f92:	9201      	str	r2, [sp, #4]
 8005f94:	9300      	str	r3, [sp, #0]
 8005f96:	4603      	mov	r3, r0
 8005f98:	2200      	movs	r2, #0
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f001 f8ce 	bl	800713c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005fa0:	e109      	b.n	80061b6 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 f90c 	bl	80061c0 <USBH_HandleEnum>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8005fac:	7bbb      	ldrb	r3, [r7, #14]
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	f040 80f3 	bne.w	800619c <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d103      	bne.n	8005fd0 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2208      	movs	r2, #8
 8005fcc:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8005fce:	e0e5      	b.n	800619c <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2207      	movs	r2, #7
 8005fd4:	701a      	strb	r2, [r3, #0]
      break;
 8005fd6:	e0e1      	b.n	800619c <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	f000 80de 	beq.w	80061a0 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005fea:	2101      	movs	r1, #1
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2208      	movs	r2, #8
 8005ff4:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8005ff6:	e0d3      	b.n	80061a0 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8005ffe:	b29b      	uxth	r3, r3
 8006000:	4619      	mov	r1, r3
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 fc20 	bl	8006848 <USBH_SetCfg>
 8006008:	4603      	mov	r3, r0
 800600a:	2b00      	cmp	r3, #0
 800600c:	f040 80ca 	bne.w	80061a4 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2209      	movs	r2, #9
 8006014:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006016:	e0c5      	b.n	80061a4 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800601e:	f003 0320 	and.w	r3, r3, #32
 8006022:	2b00      	cmp	r3, #0
 8006024:	d00b      	beq.n	800603e <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8006026:	2101      	movs	r1, #1
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f000 fc30 	bl	800688e <USBH_SetFeature>
 800602e:	4603      	mov	r3, r0
 8006030:	2b00      	cmp	r3, #0
 8006032:	f040 80b9 	bne.w	80061a8 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	220a      	movs	r2, #10
 800603a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800603c:	e0b4      	b.n	80061a8 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	220a      	movs	r2, #10
 8006042:	701a      	strb	r2, [r3, #0]
      break;
 8006044:	e0b0      	b.n	80061a8 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800604c:	2b00      	cmp	r3, #0
 800604e:	f000 80ad 	beq.w	80061ac <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2200      	movs	r2, #0
 8006056:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800605a:	2300      	movs	r3, #0
 800605c:	73fb      	strb	r3, [r7, #15]
 800605e:	e016      	b.n	800608e <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006060:	7bfa      	ldrb	r2, [r7, #15]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	32de      	adds	r2, #222	; 0xde
 8006066:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800606a:	791a      	ldrb	r2, [r3, #4]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006072:	429a      	cmp	r2, r3
 8006074:	d108      	bne.n	8006088 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006076:	7bfa      	ldrb	r2, [r7, #15]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	32de      	adds	r2, #222	; 0xde
 800607c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006086:	e005      	b.n	8006094 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006088:	7bfb      	ldrb	r3, [r7, #15]
 800608a:	3301      	adds	r3, #1
 800608c:	73fb      	strb	r3, [r7, #15]
 800608e:	7bfb      	ldrb	r3, [r7, #15]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d0e5      	beq.n	8006060 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800609a:	2b00      	cmp	r3, #0
 800609c:	d016      	beq.n	80060cc <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060a4:	689b      	ldr	r3, [r3, #8]
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	4798      	blx	r3
 80060aa:	4603      	mov	r3, r0
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d109      	bne.n	80060c4 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2206      	movs	r2, #6
 80060b4:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80060bc:	2103      	movs	r1, #3
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80060c2:	e073      	b.n	80061ac <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	220d      	movs	r2, #13
 80060c8:	701a      	strb	r2, [r3, #0]
      break;
 80060ca:	e06f      	b.n	80061ac <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	220d      	movs	r2, #13
 80060d0:	701a      	strb	r2, [r3, #0]
      break;
 80060d2:	e06b      	b.n	80061ac <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d017      	beq.n	800610e <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060e4:	691b      	ldr	r3, [r3, #16]
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	4798      	blx	r3
 80060ea:	4603      	mov	r3, r0
 80060ec:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80060ee:	7bbb      	ldrb	r3, [r7, #14]
 80060f0:	b2db      	uxtb	r3, r3
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d103      	bne.n	80060fe <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	220b      	movs	r2, #11
 80060fa:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80060fc:	e058      	b.n	80061b0 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 80060fe:	7bbb      	ldrb	r3, [r7, #14]
 8006100:	b2db      	uxtb	r3, r3
 8006102:	2b02      	cmp	r3, #2
 8006104:	d154      	bne.n	80061b0 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	220d      	movs	r2, #13
 800610a:	701a      	strb	r2, [r3, #0]
      break;
 800610c:	e050      	b.n	80061b0 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	220d      	movs	r2, #13
 8006112:	701a      	strb	r2, [r3, #0]
      break;
 8006114:	e04c      	b.n	80061b0 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800611c:	2b00      	cmp	r3, #0
 800611e:	d049      	beq.n	80061b4 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006126:	695b      	ldr	r3, [r3, #20]
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	4798      	blx	r3
      }
      break;
 800612c:	e042      	b.n	80061b4 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2200      	movs	r2, #0
 8006132:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f7ff fd72 	bl	8005c20 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006142:	2b00      	cmp	r3, #0
 8006144:	d009      	beq.n	800615a <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800614c:	68db      	ldr	r3, [r3, #12]
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2200      	movs	r2, #0
 8006156:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006160:	2b00      	cmp	r3, #0
 8006162:	d005      	beq.n	8006170 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800616a:	2105      	movs	r1, #5
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006176:	b2db      	uxtb	r3, r3
 8006178:	2b01      	cmp	r3, #1
 800617a:	d107      	bne.n	800618c <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2200      	movs	r2, #0
 8006180:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f7ff fe2b 	bl	8005de0 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800618a:	e014      	b.n	80061b6 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f001 f9b7 	bl	8007500 <USBH_LL_Start>
      break;
 8006192:	e010      	b.n	80061b6 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8006194:	bf00      	nop
 8006196:	e00e      	b.n	80061b6 <USBH_Process+0x3b6>
      break;
 8006198:	bf00      	nop
 800619a:	e00c      	b.n	80061b6 <USBH_Process+0x3b6>
      break;
 800619c:	bf00      	nop
 800619e:	e00a      	b.n	80061b6 <USBH_Process+0x3b6>
    break;
 80061a0:	bf00      	nop
 80061a2:	e008      	b.n	80061b6 <USBH_Process+0x3b6>
      break;
 80061a4:	bf00      	nop
 80061a6:	e006      	b.n	80061b6 <USBH_Process+0x3b6>
      break;
 80061a8:	bf00      	nop
 80061aa:	e004      	b.n	80061b6 <USBH_Process+0x3b6>
      break;
 80061ac:	bf00      	nop
 80061ae:	e002      	b.n	80061b6 <USBH_Process+0x3b6>
      break;
 80061b0:	bf00      	nop
 80061b2:	e000      	b.n	80061b6 <USBH_Process+0x3b6>
      break;
 80061b4:	bf00      	nop
  }
  return USBH_OK;
 80061b6:	2300      	movs	r3, #0
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3710      	adds	r7, #16
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}

080061c0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b088      	sub	sp, #32
 80061c4:	af04      	add	r7, sp, #16
 80061c6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80061c8:	2301      	movs	r3, #1
 80061ca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80061cc:	2301      	movs	r3, #1
 80061ce:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	785b      	ldrb	r3, [r3, #1]
 80061d4:	2b07      	cmp	r3, #7
 80061d6:	f200 81c1 	bhi.w	800655c <USBH_HandleEnum+0x39c>
 80061da:	a201      	add	r2, pc, #4	; (adr r2, 80061e0 <USBH_HandleEnum+0x20>)
 80061dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061e0:	08006201 	.word	0x08006201
 80061e4:	080062bf 	.word	0x080062bf
 80061e8:	08006329 	.word	0x08006329
 80061ec:	080063b7 	.word	0x080063b7
 80061f0:	08006421 	.word	0x08006421
 80061f4:	08006491 	.word	0x08006491
 80061f8:	080064d7 	.word	0x080064d7
 80061fc:	0800651d 	.word	0x0800651d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006200:	2108      	movs	r1, #8
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f000 fa50 	bl	80066a8 <USBH_Get_DevDesc>
 8006208:	4603      	mov	r3, r0
 800620a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800620c:	7bbb      	ldrb	r3, [r7, #14]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d130      	bne.n	8006274 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2201      	movs	r2, #1
 8006220:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	7919      	ldrb	r1, [r3, #4]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006232:	687a      	ldr	r2, [r7, #4]
 8006234:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006236:	b292      	uxth	r2, r2
 8006238:	9202      	str	r2, [sp, #8]
 800623a:	2200      	movs	r2, #0
 800623c:	9201      	str	r2, [sp, #4]
 800623e:	9300      	str	r3, [sp, #0]
 8006240:	4603      	mov	r3, r0
 8006242:	2280      	movs	r2, #128	; 0x80
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f000 ff79 	bl	800713c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	7959      	ldrb	r1, [r3, #5]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800625a:	687a      	ldr	r2, [r7, #4]
 800625c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800625e:	b292      	uxth	r2, r2
 8006260:	9202      	str	r2, [sp, #8]
 8006262:	2200      	movs	r2, #0
 8006264:	9201      	str	r2, [sp, #4]
 8006266:	9300      	str	r3, [sp, #0]
 8006268:	4603      	mov	r3, r0
 800626a:	2200      	movs	r2, #0
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f000 ff65 	bl	800713c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006272:	e175      	b.n	8006560 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006274:	7bbb      	ldrb	r3, [r7, #14]
 8006276:	2b03      	cmp	r3, #3
 8006278:	f040 8172 	bne.w	8006560 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006282:	3301      	adds	r3, #1
 8006284:	b2da      	uxtb	r2, r3
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006292:	2b03      	cmp	r3, #3
 8006294:	d903      	bls.n	800629e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	220d      	movs	r2, #13
 800629a:	701a      	strb	r2, [r3, #0]
      break;
 800629c:	e160      	b.n	8006560 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	795b      	ldrb	r3, [r3, #5]
 80062a2:	4619      	mov	r1, r3
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f000 ff99 	bl	80071dc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	791b      	ldrb	r3, [r3, #4]
 80062ae:	4619      	mov	r1, r3
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f000 ff93 	bl	80071dc <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2200      	movs	r2, #0
 80062ba:	701a      	strb	r2, [r3, #0]
      break;
 80062bc:	e150      	b.n	8006560 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80062be:	2112      	movs	r1, #18
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f000 f9f1 	bl	80066a8 <USBH_Get_DevDesc>
 80062c6:	4603      	mov	r3, r0
 80062c8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80062ca:	7bbb      	ldrb	r3, [r7, #14]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d103      	bne.n	80062d8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2202      	movs	r2, #2
 80062d4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80062d6:	e145      	b.n	8006564 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80062d8:	7bbb      	ldrb	r3, [r7, #14]
 80062da:	2b03      	cmp	r3, #3
 80062dc:	f040 8142 	bne.w	8006564 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80062e6:	3301      	adds	r3, #1
 80062e8:	b2da      	uxtb	r2, r3
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80062f6:	2b03      	cmp	r3, #3
 80062f8:	d903      	bls.n	8006302 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	220d      	movs	r2, #13
 80062fe:	701a      	strb	r2, [r3, #0]
      break;
 8006300:	e130      	b.n	8006564 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	795b      	ldrb	r3, [r3, #5]
 8006306:	4619      	mov	r1, r3
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f000 ff67 	bl	80071dc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	791b      	ldrb	r3, [r3, #4]
 8006312:	4619      	mov	r1, r3
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f000 ff61 	bl	80071dc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2200      	movs	r2, #0
 800631e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2200      	movs	r2, #0
 8006324:	701a      	strb	r2, [r3, #0]
      break;
 8006326:	e11d      	b.n	8006564 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006328:	2101      	movs	r1, #1
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f000 fa68 	bl	8006800 <USBH_SetAddress>
 8006330:	4603      	mov	r3, r0
 8006332:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006334:	7bbb      	ldrb	r3, [r7, #14]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d132      	bne.n	80063a0 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800633a:	2002      	movs	r0, #2
 800633c:	f001 fa45 	bl	80077ca <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2201      	movs	r2, #1
 8006344:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2203      	movs	r2, #3
 800634c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	7919      	ldrb	r1, [r3, #4]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800635e:	687a      	ldr	r2, [r7, #4]
 8006360:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006362:	b292      	uxth	r2, r2
 8006364:	9202      	str	r2, [sp, #8]
 8006366:	2200      	movs	r2, #0
 8006368:	9201      	str	r2, [sp, #4]
 800636a:	9300      	str	r3, [sp, #0]
 800636c:	4603      	mov	r3, r0
 800636e:	2280      	movs	r2, #128	; 0x80
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f000 fee3 	bl	800713c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	7959      	ldrb	r1, [r3, #5]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006386:	687a      	ldr	r2, [r7, #4]
 8006388:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800638a:	b292      	uxth	r2, r2
 800638c:	9202      	str	r2, [sp, #8]
 800638e:	2200      	movs	r2, #0
 8006390:	9201      	str	r2, [sp, #4]
 8006392:	9300      	str	r3, [sp, #0]
 8006394:	4603      	mov	r3, r0
 8006396:	2200      	movs	r2, #0
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f000 fecf 	bl	800713c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800639e:	e0e3      	b.n	8006568 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80063a0:	7bbb      	ldrb	r3, [r7, #14]
 80063a2:	2b03      	cmp	r3, #3
 80063a4:	f040 80e0 	bne.w	8006568 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	220d      	movs	r2, #13
 80063ac:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2200      	movs	r2, #0
 80063b2:	705a      	strb	r2, [r3, #1]
      break;
 80063b4:	e0d8      	b.n	8006568 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80063b6:	2109      	movs	r1, #9
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f000 f99d 	bl	80066f8 <USBH_Get_CfgDesc>
 80063be:	4603      	mov	r3, r0
 80063c0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80063c2:	7bbb      	ldrb	r3, [r7, #14]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d103      	bne.n	80063d0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2204      	movs	r2, #4
 80063cc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80063ce:	e0cd      	b.n	800656c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80063d0:	7bbb      	ldrb	r3, [r7, #14]
 80063d2:	2b03      	cmp	r3, #3
 80063d4:	f040 80ca 	bne.w	800656c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80063de:	3301      	adds	r3, #1
 80063e0:	b2da      	uxtb	r2, r3
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80063ee:	2b03      	cmp	r3, #3
 80063f0:	d903      	bls.n	80063fa <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	220d      	movs	r2, #13
 80063f6:	701a      	strb	r2, [r3, #0]
      break;
 80063f8:	e0b8      	b.n	800656c <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	795b      	ldrb	r3, [r3, #5]
 80063fe:	4619      	mov	r1, r3
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f000 feeb 	bl	80071dc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	791b      	ldrb	r3, [r3, #4]
 800640a:	4619      	mov	r1, r3
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f000 fee5 	bl	80071dc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2200      	movs	r2, #0
 8006416:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2200      	movs	r2, #0
 800641c:	701a      	strb	r2, [r3, #0]
      break;
 800641e:	e0a5      	b.n	800656c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8006426:	4619      	mov	r1, r3
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f000 f965 	bl	80066f8 <USBH_Get_CfgDesc>
 800642e:	4603      	mov	r3, r0
 8006430:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006432:	7bbb      	ldrb	r3, [r7, #14]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d103      	bne.n	8006440 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2205      	movs	r2, #5
 800643c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800643e:	e097      	b.n	8006570 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006440:	7bbb      	ldrb	r3, [r7, #14]
 8006442:	2b03      	cmp	r3, #3
 8006444:	f040 8094 	bne.w	8006570 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800644e:	3301      	adds	r3, #1
 8006450:	b2da      	uxtb	r2, r3
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800645e:	2b03      	cmp	r3, #3
 8006460:	d903      	bls.n	800646a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	220d      	movs	r2, #13
 8006466:	701a      	strb	r2, [r3, #0]
      break;
 8006468:	e082      	b.n	8006570 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	795b      	ldrb	r3, [r3, #5]
 800646e:	4619      	mov	r1, r3
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f000 feb3 	bl	80071dc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	791b      	ldrb	r3, [r3, #4]
 800647a:	4619      	mov	r1, r3
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f000 fead 	bl	80071dc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2200      	movs	r2, #0
 8006486:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2200      	movs	r2, #0
 800648c:	701a      	strb	r2, [r3, #0]
      break;
 800648e:	e06f      	b.n	8006570 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8006496:	2b00      	cmp	r3, #0
 8006498:	d019      	beq.n	80064ce <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80064a6:	23ff      	movs	r3, #255	; 0xff
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f000 f949 	bl	8006740 <USBH_Get_StringDesc>
 80064ae:	4603      	mov	r3, r0
 80064b0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80064b2:	7bbb      	ldrb	r3, [r7, #14]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d103      	bne.n	80064c0 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2206      	movs	r2, #6
 80064bc:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80064be:	e059      	b.n	8006574 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80064c0:	7bbb      	ldrb	r3, [r7, #14]
 80064c2:	2b03      	cmp	r3, #3
 80064c4:	d156      	bne.n	8006574 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2206      	movs	r2, #6
 80064ca:	705a      	strb	r2, [r3, #1]
      break;
 80064cc:	e052      	b.n	8006574 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2206      	movs	r2, #6
 80064d2:	705a      	strb	r2, [r3, #1]
      break;
 80064d4:	e04e      	b.n	8006574 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d019      	beq.n	8006514 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80064ec:	23ff      	movs	r3, #255	; 0xff
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 f926 	bl	8006740 <USBH_Get_StringDesc>
 80064f4:	4603      	mov	r3, r0
 80064f6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80064f8:	7bbb      	ldrb	r3, [r7, #14]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d103      	bne.n	8006506 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2207      	movs	r2, #7
 8006502:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006504:	e038      	b.n	8006578 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006506:	7bbb      	ldrb	r3, [r7, #14]
 8006508:	2b03      	cmp	r3, #3
 800650a:	d135      	bne.n	8006578 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2207      	movs	r2, #7
 8006510:	705a      	strb	r2, [r3, #1]
      break;
 8006512:	e031      	b.n	8006578 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2207      	movs	r2, #7
 8006518:	705a      	strb	r2, [r3, #1]
      break;
 800651a:	e02d      	b.n	8006578 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8006522:	2b00      	cmp	r3, #0
 8006524:	d017      	beq.n	8006556 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006532:	23ff      	movs	r3, #255	; 0xff
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f000 f903 	bl	8006740 <USBH_Get_StringDesc>
 800653a:	4603      	mov	r3, r0
 800653c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800653e:	7bbb      	ldrb	r3, [r7, #14]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d102      	bne.n	800654a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8006544:	2300      	movs	r3, #0
 8006546:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8006548:	e018      	b.n	800657c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800654a:	7bbb      	ldrb	r3, [r7, #14]
 800654c:	2b03      	cmp	r3, #3
 800654e:	d115      	bne.n	800657c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8006550:	2300      	movs	r3, #0
 8006552:	73fb      	strb	r3, [r7, #15]
      break;
 8006554:	e012      	b.n	800657c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8006556:	2300      	movs	r3, #0
 8006558:	73fb      	strb	r3, [r7, #15]
      break;
 800655a:	e00f      	b.n	800657c <USBH_HandleEnum+0x3bc>

    default:
      break;
 800655c:	bf00      	nop
 800655e:	e00e      	b.n	800657e <USBH_HandleEnum+0x3be>
      break;
 8006560:	bf00      	nop
 8006562:	e00c      	b.n	800657e <USBH_HandleEnum+0x3be>
      break;
 8006564:	bf00      	nop
 8006566:	e00a      	b.n	800657e <USBH_HandleEnum+0x3be>
      break;
 8006568:	bf00      	nop
 800656a:	e008      	b.n	800657e <USBH_HandleEnum+0x3be>
      break;
 800656c:	bf00      	nop
 800656e:	e006      	b.n	800657e <USBH_HandleEnum+0x3be>
      break;
 8006570:	bf00      	nop
 8006572:	e004      	b.n	800657e <USBH_HandleEnum+0x3be>
      break;
 8006574:	bf00      	nop
 8006576:	e002      	b.n	800657e <USBH_HandleEnum+0x3be>
      break;
 8006578:	bf00      	nop
 800657a:	e000      	b.n	800657e <USBH_HandleEnum+0x3be>
      break;
 800657c:	bf00      	nop
  }
  return Status;
 800657e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006580:	4618      	mov	r0, r3
 8006582:	3710      	adds	r7, #16
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}

08006588 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006588:	b480      	push	{r7}
 800658a:	b083      	sub	sp, #12
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	683a      	ldr	r2, [r7, #0]
 8006596:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800659a:	bf00      	nop
 800659c:	370c      	adds	r7, #12
 800659e:	46bd      	mov	sp, r7
 80065a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a4:	4770      	bx	lr

080065a6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80065a6:	b580      	push	{r7, lr}
 80065a8:	b082      	sub	sp, #8
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80065b4:	1c5a      	adds	r2, r3, #1
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f000 f804 	bl	80065ca <USBH_HandleSof>
}
 80065c2:	bf00      	nop
 80065c4:	3708      	adds	r7, #8
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}

080065ca <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80065ca:	b580      	push	{r7, lr}
 80065cc:	b082      	sub	sp, #8
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	781b      	ldrb	r3, [r3, #0]
 80065d6:	b2db      	uxtb	r3, r3
 80065d8:	2b0b      	cmp	r3, #11
 80065da:	d10a      	bne.n	80065f2 <USBH_HandleSof+0x28>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d005      	beq.n	80065f2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80065ec:	699b      	ldr	r3, [r3, #24]
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	4798      	blx	r3
  }
}
 80065f2:	bf00      	nop
 80065f4:	3708      	adds	r7, #8
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}

080065fa <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80065fa:	b480      	push	{r7}
 80065fc:	b083      	sub	sp, #12
 80065fe:	af00      	add	r7, sp, #0
 8006600:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2201      	movs	r2, #1
 8006606:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800660a:	bf00      	nop
}
 800660c:	370c      	adds	r7, #12
 800660e:	46bd      	mov	sp, r7
 8006610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006614:	4770      	bx	lr

08006616 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006616:	b480      	push	{r7}
 8006618:	b083      	sub	sp, #12
 800661a:	af00      	add	r7, sp, #0
 800661c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2200      	movs	r2, #0
 8006622:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8006626:	bf00      	nop
}
 8006628:	370c      	adds	r7, #12
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr

08006632 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006632:	b480      	push	{r7}
 8006634:	b083      	sub	sp, #12
 8006636:	af00      	add	r7, sp, #0
 8006638:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2201      	movs	r2, #1
 800663e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2200      	movs	r2, #0
 8006646:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2200      	movs	r2, #0
 800664e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8006652:	2300      	movs	r3, #0
}
 8006654:	4618      	mov	r0, r3
 8006656:	370c      	adds	r7, #12
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr

08006660 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b082      	sub	sp, #8
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2201      	movs	r2, #1
 800666c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2200      	movs	r2, #0
 8006674:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2200      	movs	r2, #0
 800667c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f000 ff58 	bl	8007536 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	791b      	ldrb	r3, [r3, #4]
 800668a:	4619      	mov	r1, r3
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f000 fda5 	bl	80071dc <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	795b      	ldrb	r3, [r3, #5]
 8006696:	4619      	mov	r1, r3
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f000 fd9f 	bl	80071dc <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800669e:	2300      	movs	r3, #0
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3708      	adds	r7, #8
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}

080066a8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b086      	sub	sp, #24
 80066ac:	af02      	add	r7, sp, #8
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	460b      	mov	r3, r1
 80066b2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80066ba:	78fb      	ldrb	r3, [r7, #3]
 80066bc:	b29b      	uxth	r3, r3
 80066be:	9300      	str	r3, [sp, #0]
 80066c0:	4613      	mov	r3, r2
 80066c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80066c6:	2100      	movs	r1, #0
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f000 f864 	bl	8006796 <USBH_GetDescriptor>
 80066ce:	4603      	mov	r3, r0
 80066d0:	73fb      	strb	r3, [r7, #15]
 80066d2:	7bfb      	ldrb	r3, [r7, #15]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d10a      	bne.n	80066ee <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f203 3026 	addw	r0, r3, #806	; 0x326
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80066e4:	78fa      	ldrb	r2, [r7, #3]
 80066e6:	b292      	uxth	r2, r2
 80066e8:	4619      	mov	r1, r3
 80066ea:	f000 f918 	bl	800691e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80066ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3710      	adds	r7, #16
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}

080066f8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b086      	sub	sp, #24
 80066fc:	af02      	add	r7, sp, #8
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	460b      	mov	r3, r1
 8006702:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	331c      	adds	r3, #28
 8006708:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800670a:	887b      	ldrh	r3, [r7, #2]
 800670c:	9300      	str	r3, [sp, #0]
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006714:	2100      	movs	r1, #0
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f000 f83d 	bl	8006796 <USBH_GetDescriptor>
 800671c:	4603      	mov	r3, r0
 800671e:	72fb      	strb	r3, [r7, #11]
 8006720:	7afb      	ldrb	r3, [r7, #11]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d107      	bne.n	8006736 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800672c:	887a      	ldrh	r2, [r7, #2]
 800672e:	68f9      	ldr	r1, [r7, #12]
 8006730:	4618      	mov	r0, r3
 8006732:	f000 f964 	bl	80069fe <USBH_ParseCfgDesc>
  }

  return status;
 8006736:	7afb      	ldrb	r3, [r7, #11]
}
 8006738:	4618      	mov	r0, r3
 800673a:	3710      	adds	r7, #16
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}

08006740 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b088      	sub	sp, #32
 8006744:	af02      	add	r7, sp, #8
 8006746:	60f8      	str	r0, [r7, #12]
 8006748:	607a      	str	r2, [r7, #4]
 800674a:	461a      	mov	r2, r3
 800674c:	460b      	mov	r3, r1
 800674e:	72fb      	strb	r3, [r7, #11]
 8006750:	4613      	mov	r3, r2
 8006752:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8006754:	7afb      	ldrb	r3, [r7, #11]
 8006756:	b29b      	uxth	r3, r3
 8006758:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800675c:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8006764:	893b      	ldrh	r3, [r7, #8]
 8006766:	9300      	str	r3, [sp, #0]
 8006768:	460b      	mov	r3, r1
 800676a:	2100      	movs	r1, #0
 800676c:	68f8      	ldr	r0, [r7, #12]
 800676e:	f000 f812 	bl	8006796 <USBH_GetDescriptor>
 8006772:	4603      	mov	r3, r0
 8006774:	75fb      	strb	r3, [r7, #23]
 8006776:	7dfb      	ldrb	r3, [r7, #23]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d107      	bne.n	800678c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006782:	893a      	ldrh	r2, [r7, #8]
 8006784:	6879      	ldr	r1, [r7, #4]
 8006786:	4618      	mov	r0, r3
 8006788:	f000 fa37 	bl	8006bfa <USBH_ParseStringDesc>
  }

  return status;
 800678c:	7dfb      	ldrb	r3, [r7, #23]
}
 800678e:	4618      	mov	r0, r3
 8006790:	3718      	adds	r7, #24
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}

08006796 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8006796:	b580      	push	{r7, lr}
 8006798:	b084      	sub	sp, #16
 800679a:	af00      	add	r7, sp, #0
 800679c:	60f8      	str	r0, [r7, #12]
 800679e:	607b      	str	r3, [r7, #4]
 80067a0:	460b      	mov	r3, r1
 80067a2:	72fb      	strb	r3, [r7, #11]
 80067a4:	4613      	mov	r3, r2
 80067a6:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	789b      	ldrb	r3, [r3, #2]
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d11c      	bne.n	80067ea <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80067b0:	7afb      	ldrb	r3, [r7, #11]
 80067b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80067b6:	b2da      	uxtb	r2, r3
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2206      	movs	r2, #6
 80067c0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	893a      	ldrh	r2, [r7, #8]
 80067c6:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80067c8:	893b      	ldrh	r3, [r7, #8]
 80067ca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80067ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067d2:	d104      	bne.n	80067de <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f240 4209 	movw	r2, #1033	; 0x409
 80067da:	829a      	strh	r2, [r3, #20]
 80067dc:	e002      	b.n	80067e4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2200      	movs	r2, #0
 80067e2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	8b3a      	ldrh	r2, [r7, #24]
 80067e8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80067ea:	8b3b      	ldrh	r3, [r7, #24]
 80067ec:	461a      	mov	r2, r3
 80067ee:	6879      	ldr	r1, [r7, #4]
 80067f0:	68f8      	ldr	r0, [r7, #12]
 80067f2:	f000 fa50 	bl	8006c96 <USBH_CtlReq>
 80067f6:	4603      	mov	r3, r0
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3710      	adds	r7, #16
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}

08006800 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b082      	sub	sp, #8
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	460b      	mov	r3, r1
 800680a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	789b      	ldrb	r3, [r3, #2]
 8006810:	2b01      	cmp	r3, #1
 8006812:	d10f      	bne.n	8006834 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2200      	movs	r2, #0
 8006818:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2205      	movs	r2, #5
 800681e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8006820:	78fb      	ldrb	r3, [r7, #3]
 8006822:	b29a      	uxth	r2, r3
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2200      	movs	r2, #0
 800682c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2200      	movs	r2, #0
 8006832:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006834:	2200      	movs	r2, #0
 8006836:	2100      	movs	r1, #0
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f000 fa2c 	bl	8006c96 <USBH_CtlReq>
 800683e:	4603      	mov	r3, r0
}
 8006840:	4618      	mov	r0, r3
 8006842:	3708      	adds	r7, #8
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}

08006848 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b082      	sub	sp, #8
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	460b      	mov	r3, r1
 8006852:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	789b      	ldrb	r3, [r3, #2]
 8006858:	2b01      	cmp	r3, #1
 800685a:	d10e      	bne.n	800687a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2209      	movs	r2, #9
 8006866:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	887a      	ldrh	r2, [r7, #2]
 800686c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2200      	movs	r2, #0
 8006872:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2200      	movs	r2, #0
 8006878:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800687a:	2200      	movs	r2, #0
 800687c:	2100      	movs	r1, #0
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f000 fa09 	bl	8006c96 <USBH_CtlReq>
 8006884:	4603      	mov	r3, r0
}
 8006886:	4618      	mov	r0, r3
 8006888:	3708      	adds	r7, #8
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}

0800688e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800688e:	b580      	push	{r7, lr}
 8006890:	b082      	sub	sp, #8
 8006892:	af00      	add	r7, sp, #0
 8006894:	6078      	str	r0, [r7, #4]
 8006896:	460b      	mov	r3, r1
 8006898:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	789b      	ldrb	r3, [r3, #2]
 800689e:	2b01      	cmp	r3, #1
 80068a0:	d10f      	bne.n	80068c2 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2200      	movs	r2, #0
 80068a6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2203      	movs	r2, #3
 80068ac:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80068ae:	78fb      	ldrb	r3, [r7, #3]
 80068b0:	b29a      	uxth	r2, r3
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2200      	movs	r2, #0
 80068ba:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2200      	movs	r2, #0
 80068c0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80068c2:	2200      	movs	r2, #0
 80068c4:	2100      	movs	r1, #0
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f000 f9e5 	bl	8006c96 <USBH_CtlReq>
 80068cc:	4603      	mov	r3, r0
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3708      	adds	r7, #8
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}

080068d6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80068d6:	b580      	push	{r7, lr}
 80068d8:	b082      	sub	sp, #8
 80068da:	af00      	add	r7, sp, #0
 80068dc:	6078      	str	r0, [r7, #4]
 80068de:	460b      	mov	r3, r1
 80068e0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	789b      	ldrb	r3, [r3, #2]
 80068e6:	2b01      	cmp	r3, #1
 80068e8:	d10f      	bne.n	800690a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2202      	movs	r2, #2
 80068ee:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2201      	movs	r2, #1
 80068f4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2200      	movs	r2, #0
 80068fa:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80068fc:	78fb      	ldrb	r3, [r7, #3]
 80068fe:	b29a      	uxth	r2, r3
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2200      	movs	r2, #0
 8006908:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800690a:	2200      	movs	r2, #0
 800690c:	2100      	movs	r1, #0
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 f9c1 	bl	8006c96 <USBH_CtlReq>
 8006914:	4603      	mov	r3, r0
}
 8006916:	4618      	mov	r0, r3
 8006918:	3708      	adds	r7, #8
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}

0800691e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800691e:	b480      	push	{r7}
 8006920:	b085      	sub	sp, #20
 8006922:	af00      	add	r7, sp, #0
 8006924:	60f8      	str	r0, [r7, #12]
 8006926:	60b9      	str	r1, [r7, #8]
 8006928:	4613      	mov	r3, r2
 800692a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	781a      	ldrb	r2, [r3, #0]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	785a      	ldrb	r2, [r3, #1]
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	3302      	adds	r3, #2
 8006940:	781b      	ldrb	r3, [r3, #0]
 8006942:	b29a      	uxth	r2, r3
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	3303      	adds	r3, #3
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	b29b      	uxth	r3, r3
 800694c:	021b      	lsls	r3, r3, #8
 800694e:	b29b      	uxth	r3, r3
 8006950:	4313      	orrs	r3, r2
 8006952:	b29a      	uxth	r2, r3
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	791a      	ldrb	r2, [r3, #4]
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	795a      	ldrb	r2, [r3, #5]
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	799a      	ldrb	r2, [r3, #6]
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	79da      	ldrb	r2, [r3, #7]
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8006978:	88fb      	ldrh	r3, [r7, #6]
 800697a:	2b08      	cmp	r3, #8
 800697c:	d939      	bls.n	80069f2 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	3308      	adds	r3, #8
 8006982:	781b      	ldrb	r3, [r3, #0]
 8006984:	b29a      	uxth	r2, r3
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	3309      	adds	r3, #9
 800698a:	781b      	ldrb	r3, [r3, #0]
 800698c:	b29b      	uxth	r3, r3
 800698e:	021b      	lsls	r3, r3, #8
 8006990:	b29b      	uxth	r3, r3
 8006992:	4313      	orrs	r3, r2
 8006994:	b29a      	uxth	r2, r3
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	330a      	adds	r3, #10
 800699e:	781b      	ldrb	r3, [r3, #0]
 80069a0:	b29a      	uxth	r2, r3
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	330b      	adds	r3, #11
 80069a6:	781b      	ldrb	r3, [r3, #0]
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	021b      	lsls	r3, r3, #8
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	4313      	orrs	r3, r2
 80069b0:	b29a      	uxth	r2, r3
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	330c      	adds	r3, #12
 80069ba:	781b      	ldrb	r3, [r3, #0]
 80069bc:	b29a      	uxth	r2, r3
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	330d      	adds	r3, #13
 80069c2:	781b      	ldrb	r3, [r3, #0]
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	021b      	lsls	r3, r3, #8
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	4313      	orrs	r3, r2
 80069cc:	b29a      	uxth	r2, r3
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	7b9a      	ldrb	r2, [r3, #14]
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	7bda      	ldrb	r2, [r3, #15]
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	7c1a      	ldrb	r2, [r3, #16]
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	7c5a      	ldrb	r2, [r3, #17]
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	745a      	strb	r2, [r3, #17]
  }
}
 80069f2:	bf00      	nop
 80069f4:	3714      	adds	r7, #20
 80069f6:	46bd      	mov	sp, r7
 80069f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fc:	4770      	bx	lr

080069fe <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 80069fe:	b580      	push	{r7, lr}
 8006a00:	b08a      	sub	sp, #40	; 0x28
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	60f8      	str	r0, [r7, #12]
 8006a06:	60b9      	str	r1, [r7, #8]
 8006a08:	4613      	mov	r3, r2
 8006a0a:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8006a10:	2300      	movs	r3, #0
 8006a12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8006a16:	2300      	movs	r3, #0
 8006a18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	781a      	ldrb	r2, [r3, #0]
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	785a      	ldrb	r2, [r3, #1]
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	3302      	adds	r3, #2
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	b29a      	uxth	r2, r3
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	3303      	adds	r3, #3
 8006a3c:	781b      	ldrb	r3, [r3, #0]
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	021b      	lsls	r3, r3, #8
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	4313      	orrs	r3, r2
 8006a46:	b29a      	uxth	r2, r3
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	791a      	ldrb	r2, [r3, #4]
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	795a      	ldrb	r2, [r3, #5]
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	799a      	ldrb	r2, [r3, #6]
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	79da      	ldrb	r2, [r3, #7]
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	7a1a      	ldrb	r2, [r3, #8]
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8006a74:	88fb      	ldrh	r3, [r7, #6]
 8006a76:	2b09      	cmp	r3, #9
 8006a78:	d95f      	bls.n	8006b3a <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8006a7a:	2309      	movs	r3, #9
 8006a7c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006a82:	e051      	b.n	8006b28 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006a84:	f107 0316 	add.w	r3, r7, #22
 8006a88:	4619      	mov	r1, r3
 8006a8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006a8c:	f000 f8e8 	bl	8006c60 <USBH_GetNextDesc>
 8006a90:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8006a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a94:	785b      	ldrb	r3, [r3, #1]
 8006a96:	2b04      	cmp	r3, #4
 8006a98:	d146      	bne.n	8006b28 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8006a9a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006a9e:	221a      	movs	r2, #26
 8006aa0:	fb02 f303 	mul.w	r3, r2, r3
 8006aa4:	3308      	adds	r3, #8
 8006aa6:	68fa      	ldr	r2, [r7, #12]
 8006aa8:	4413      	add	r3, r2
 8006aaa:	3302      	adds	r3, #2
 8006aac:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8006aae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006ab0:	69f8      	ldr	r0, [r7, #28]
 8006ab2:	f000 f846 	bl	8006b42 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8006abc:	2300      	movs	r3, #0
 8006abe:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006ac0:	e022      	b.n	8006b08 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006ac2:	f107 0316 	add.w	r3, r7, #22
 8006ac6:	4619      	mov	r1, r3
 8006ac8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006aca:	f000 f8c9 	bl	8006c60 <USBH_GetNextDesc>
 8006ace:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8006ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad2:	785b      	ldrb	r3, [r3, #1]
 8006ad4:	2b05      	cmp	r3, #5
 8006ad6:	d117      	bne.n	8006b08 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8006ad8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006adc:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8006ae0:	3201      	adds	r2, #1
 8006ae2:	00d2      	lsls	r2, r2, #3
 8006ae4:	211a      	movs	r1, #26
 8006ae6:	fb01 f303 	mul.w	r3, r1, r3
 8006aea:	4413      	add	r3, r2
 8006aec:	3308      	adds	r3, #8
 8006aee:	68fa      	ldr	r2, [r7, #12]
 8006af0:	4413      	add	r3, r2
 8006af2:	3304      	adds	r3, #4
 8006af4:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8006af6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006af8:	69b8      	ldr	r0, [r7, #24]
 8006afa:	f000 f851 	bl	8006ba0 <USBH_ParseEPDesc>
            ep_ix++;
 8006afe:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006b02:	3301      	adds	r3, #1
 8006b04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006b08:	69fb      	ldr	r3, [r7, #28]
 8006b0a:	791b      	ldrb	r3, [r3, #4]
 8006b0c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8006b10:	429a      	cmp	r2, r3
 8006b12:	d204      	bcs.n	8006b1e <USBH_ParseCfgDesc+0x120>
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	885a      	ldrh	r2, [r3, #2]
 8006b18:	8afb      	ldrh	r3, [r7, #22]
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	d8d1      	bhi.n	8006ac2 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8006b1e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006b22:	3301      	adds	r3, #1
 8006b24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006b28:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d804      	bhi.n	8006b3a <USBH_ParseCfgDesc+0x13c>
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	885a      	ldrh	r2, [r3, #2]
 8006b34:	8afb      	ldrh	r3, [r7, #22]
 8006b36:	429a      	cmp	r2, r3
 8006b38:	d8a4      	bhi.n	8006a84 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8006b3a:	bf00      	nop
 8006b3c:	3728      	adds	r7, #40	; 0x28
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}

08006b42 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8006b42:	b480      	push	{r7}
 8006b44:	b083      	sub	sp, #12
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	6078      	str	r0, [r7, #4]
 8006b4a:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	781a      	ldrb	r2, [r3, #0]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	785a      	ldrb	r2, [r3, #1]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	789a      	ldrb	r2, [r3, #2]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	78da      	ldrb	r2, [r3, #3]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	791a      	ldrb	r2, [r3, #4]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	795a      	ldrb	r2, [r3, #5]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	799a      	ldrb	r2, [r3, #6]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	79da      	ldrb	r2, [r3, #7]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	7a1a      	ldrb	r2, [r3, #8]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	721a      	strb	r2, [r3, #8]
}
 8006b94:	bf00      	nop
 8006b96:	370c      	adds	r7, #12
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr

08006ba0 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b083      	sub	sp, #12
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	781a      	ldrb	r2, [r3, #0]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	785a      	ldrb	r2, [r3, #1]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	789a      	ldrb	r2, [r3, #2]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	78da      	ldrb	r2, [r3, #3]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	3304      	adds	r3, #4
 8006bce:	781b      	ldrb	r3, [r3, #0]
 8006bd0:	b29a      	uxth	r2, r3
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	3305      	adds	r3, #5
 8006bd6:	781b      	ldrb	r3, [r3, #0]
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	021b      	lsls	r3, r3, #8
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	4313      	orrs	r3, r2
 8006be0:	b29a      	uxth	r2, r3
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	799a      	ldrb	r2, [r3, #6]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	719a      	strb	r2, [r3, #6]
}
 8006bee:	bf00      	nop
 8006bf0:	370c      	adds	r7, #12
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf8:	4770      	bx	lr

08006bfa <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8006bfa:	b480      	push	{r7}
 8006bfc:	b087      	sub	sp, #28
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	60f8      	str	r0, [r7, #12]
 8006c02:	60b9      	str	r1, [r7, #8]
 8006c04:	4613      	mov	r3, r2
 8006c06:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	3301      	adds	r3, #1
 8006c0c:	781b      	ldrb	r3, [r3, #0]
 8006c0e:	2b03      	cmp	r3, #3
 8006c10:	d120      	bne.n	8006c54 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	781b      	ldrb	r3, [r3, #0]
 8006c16:	1e9a      	subs	r2, r3, #2
 8006c18:	88fb      	ldrh	r3, [r7, #6]
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	bf28      	it	cs
 8006c1e:	4613      	movcs	r3, r2
 8006c20:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	3302      	adds	r3, #2
 8006c26:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8006c28:	2300      	movs	r3, #0
 8006c2a:	82fb      	strh	r3, [r7, #22]
 8006c2c:	e00b      	b.n	8006c46 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8006c2e:	8afb      	ldrh	r3, [r7, #22]
 8006c30:	68fa      	ldr	r2, [r7, #12]
 8006c32:	4413      	add	r3, r2
 8006c34:	781a      	ldrb	r2, [r3, #0]
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	701a      	strb	r2, [r3, #0]
      pdest++;
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	3301      	adds	r3, #1
 8006c3e:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8006c40:	8afb      	ldrh	r3, [r7, #22]
 8006c42:	3302      	adds	r3, #2
 8006c44:	82fb      	strh	r3, [r7, #22]
 8006c46:	8afa      	ldrh	r2, [r7, #22]
 8006c48:	8abb      	ldrh	r3, [r7, #20]
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	d3ef      	bcc.n	8006c2e <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	2200      	movs	r2, #0
 8006c52:	701a      	strb	r2, [r3, #0]
  }
}
 8006c54:	bf00      	nop
 8006c56:	371c      	adds	r7, #28
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5e:	4770      	bx	lr

08006c60 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b085      	sub	sp, #20
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	881a      	ldrh	r2, [r3, #0]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	4413      	add	r3, r2
 8006c76:	b29a      	uxth	r2, r3
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	781b      	ldrb	r3, [r3, #0]
 8006c80:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	4413      	add	r3, r2
 8006c86:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006c88:	68fb      	ldr	r3, [r7, #12]
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3714      	adds	r7, #20
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c94:	4770      	bx	lr

08006c96 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8006c96:	b580      	push	{r7, lr}
 8006c98:	b086      	sub	sp, #24
 8006c9a:	af00      	add	r7, sp, #0
 8006c9c:	60f8      	str	r0, [r7, #12]
 8006c9e:	60b9      	str	r1, [r7, #8]
 8006ca0:	4613      	mov	r3, r2
 8006ca2:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	789b      	ldrb	r3, [r3, #2]
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	d002      	beq.n	8006cb6 <USBH_CtlReq+0x20>
 8006cb0:	2b02      	cmp	r3, #2
 8006cb2:	d00f      	beq.n	8006cd4 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8006cb4:	e027      	b.n	8006d06 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	68ba      	ldr	r2, [r7, #8]
 8006cba:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	88fa      	ldrh	r2, [r7, #6]
 8006cc0:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2201      	movs	r2, #1
 8006cc6:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2202      	movs	r2, #2
 8006ccc:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	75fb      	strb	r3, [r7, #23]
      break;
 8006cd2:	e018      	b.n	8006d06 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8006cd4:	68f8      	ldr	r0, [r7, #12]
 8006cd6:	f000 f81b 	bl	8006d10 <USBH_HandleControl>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8006cde:	7dfb      	ldrb	r3, [r7, #23]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d002      	beq.n	8006cea <USBH_CtlReq+0x54>
 8006ce4:	7dfb      	ldrb	r3, [r7, #23]
 8006ce6:	2b03      	cmp	r3, #3
 8006ce8:	d106      	bne.n	8006cf8 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2201      	movs	r2, #1
 8006cee:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	761a      	strb	r2, [r3, #24]
      break;
 8006cf6:	e005      	b.n	8006d04 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8006cf8:	7dfb      	ldrb	r3, [r7, #23]
 8006cfa:	2b02      	cmp	r3, #2
 8006cfc:	d102      	bne.n	8006d04 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2201      	movs	r2, #1
 8006d02:	709a      	strb	r2, [r3, #2]
      break;
 8006d04:	bf00      	nop
  }
  return status;
 8006d06:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	3718      	adds	r7, #24
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}

08006d10 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b086      	sub	sp, #24
 8006d14:	af02      	add	r7, sp, #8
 8006d16:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8006d18:	2301      	movs	r3, #1
 8006d1a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	7e1b      	ldrb	r3, [r3, #24]
 8006d24:	3b01      	subs	r3, #1
 8006d26:	2b0a      	cmp	r3, #10
 8006d28:	f200 8158 	bhi.w	8006fdc <USBH_HandleControl+0x2cc>
 8006d2c:	a201      	add	r2, pc, #4	; (adr r2, 8006d34 <USBH_HandleControl+0x24>)
 8006d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d32:	bf00      	nop
 8006d34:	08006d61 	.word	0x08006d61
 8006d38:	08006d7b 	.word	0x08006d7b
 8006d3c:	08006de5 	.word	0x08006de5
 8006d40:	08006e0b 	.word	0x08006e0b
 8006d44:	08006e43 	.word	0x08006e43
 8006d48:	08006e6f 	.word	0x08006e6f
 8006d4c:	08006ec1 	.word	0x08006ec1
 8006d50:	08006ee3 	.word	0x08006ee3
 8006d54:	08006f1f 	.word	0x08006f1f
 8006d58:	08006f47 	.word	0x08006f47
 8006d5c:	08006f85 	.word	0x08006f85
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f103 0110 	add.w	r1, r3, #16
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	795b      	ldrb	r3, [r3, #5]
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f000 f945 	bl	8006ffc <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2202      	movs	r2, #2
 8006d76:	761a      	strb	r2, [r3, #24]
      break;
 8006d78:	e13b      	b.n	8006ff2 <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	795b      	ldrb	r3, [r3, #5]
 8006d7e:	4619      	mov	r1, r3
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f000 fcc5 	bl	8007710 <USBH_LL_GetURBState>
 8006d86:	4603      	mov	r3, r0
 8006d88:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8006d8a:	7bbb      	ldrb	r3, [r7, #14]
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	d11e      	bne.n	8006dce <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	7c1b      	ldrb	r3, [r3, #16]
 8006d94:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006d98:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	8adb      	ldrh	r3, [r3, #22]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d00a      	beq.n	8006db8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8006da2:	7b7b      	ldrb	r3, [r7, #13]
 8006da4:	2b80      	cmp	r3, #128	; 0x80
 8006da6:	d103      	bne.n	8006db0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2203      	movs	r2, #3
 8006dac:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006dae:	e117      	b.n	8006fe0 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2205      	movs	r2, #5
 8006db4:	761a      	strb	r2, [r3, #24]
      break;
 8006db6:	e113      	b.n	8006fe0 <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 8006db8:	7b7b      	ldrb	r3, [r7, #13]
 8006dba:	2b80      	cmp	r3, #128	; 0x80
 8006dbc:	d103      	bne.n	8006dc6 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2209      	movs	r2, #9
 8006dc2:	761a      	strb	r2, [r3, #24]
      break;
 8006dc4:	e10c      	b.n	8006fe0 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2207      	movs	r2, #7
 8006dca:	761a      	strb	r2, [r3, #24]
      break;
 8006dcc:	e108      	b.n	8006fe0 <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8006dce:	7bbb      	ldrb	r3, [r7, #14]
 8006dd0:	2b04      	cmp	r3, #4
 8006dd2:	d003      	beq.n	8006ddc <USBH_HandleControl+0xcc>
 8006dd4:	7bbb      	ldrb	r3, [r7, #14]
 8006dd6:	2b02      	cmp	r3, #2
 8006dd8:	f040 8102 	bne.w	8006fe0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	220b      	movs	r2, #11
 8006de0:	761a      	strb	r2, [r3, #24]
      break;
 8006de2:	e0fd      	b.n	8006fe0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006dea:	b29a      	uxth	r2, r3
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6899      	ldr	r1, [r3, #8]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	899a      	ldrh	r2, [r3, #12]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	791b      	ldrb	r3, [r3, #4]
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f000 f93c 	bl	800707a <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2204      	movs	r2, #4
 8006e06:	761a      	strb	r2, [r3, #24]
      break;
 8006e08:	e0f3      	b.n	8006ff2 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	791b      	ldrb	r3, [r3, #4]
 8006e0e:	4619      	mov	r1, r3
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f000 fc7d 	bl	8007710 <USBH_LL_GetURBState>
 8006e16:	4603      	mov	r3, r0
 8006e18:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8006e1a:	7bbb      	ldrb	r3, [r7, #14]
 8006e1c:	2b01      	cmp	r3, #1
 8006e1e:	d102      	bne.n	8006e26 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2209      	movs	r2, #9
 8006e24:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8006e26:	7bbb      	ldrb	r3, [r7, #14]
 8006e28:	2b05      	cmp	r3, #5
 8006e2a:	d102      	bne.n	8006e32 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8006e2c:	2303      	movs	r3, #3
 8006e2e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006e30:	e0d8      	b.n	8006fe4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8006e32:	7bbb      	ldrb	r3, [r7, #14]
 8006e34:	2b04      	cmp	r3, #4
 8006e36:	f040 80d5 	bne.w	8006fe4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	220b      	movs	r2, #11
 8006e3e:	761a      	strb	r2, [r3, #24]
      break;
 8006e40:	e0d0      	b.n	8006fe4 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6899      	ldr	r1, [r3, #8]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	899a      	ldrh	r2, [r3, #12]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	7958      	ldrb	r0, [r3, #5]
 8006e4e:	2301      	movs	r3, #1
 8006e50:	9300      	str	r3, [sp, #0]
 8006e52:	4603      	mov	r3, r0
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f000 f8eb 	bl	8007030 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006e60:	b29a      	uxth	r2, r3
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2206      	movs	r2, #6
 8006e6a:	761a      	strb	r2, [r3, #24]
      break;
 8006e6c:	e0c1      	b.n	8006ff2 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	795b      	ldrb	r3, [r3, #5]
 8006e72:	4619      	mov	r1, r3
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f000 fc4b 	bl	8007710 <USBH_LL_GetURBState>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8006e7e:	7bbb      	ldrb	r3, [r7, #14]
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	d103      	bne.n	8006e8c <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2207      	movs	r2, #7
 8006e88:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006e8a:	e0ad      	b.n	8006fe8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 8006e8c:	7bbb      	ldrb	r3, [r7, #14]
 8006e8e:	2b05      	cmp	r3, #5
 8006e90:	d105      	bne.n	8006e9e <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	220c      	movs	r2, #12
 8006e96:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8006e98:	2303      	movs	r3, #3
 8006e9a:	73fb      	strb	r3, [r7, #15]
      break;
 8006e9c:	e0a4      	b.n	8006fe8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006e9e:	7bbb      	ldrb	r3, [r7, #14]
 8006ea0:	2b02      	cmp	r3, #2
 8006ea2:	d103      	bne.n	8006eac <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2205      	movs	r2, #5
 8006ea8:	761a      	strb	r2, [r3, #24]
      break;
 8006eaa:	e09d      	b.n	8006fe8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 8006eac:	7bbb      	ldrb	r3, [r7, #14]
 8006eae:	2b04      	cmp	r3, #4
 8006eb0:	f040 809a 	bne.w	8006fe8 <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	220b      	movs	r2, #11
 8006eb8:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8006eba:	2302      	movs	r3, #2
 8006ebc:	73fb      	strb	r3, [r7, #15]
      break;
 8006ebe:	e093      	b.n	8006fe8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	791b      	ldrb	r3, [r3, #4]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	2100      	movs	r1, #0
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f000 f8d6 	bl	800707a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006ed4:	b29a      	uxth	r2, r3
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2208      	movs	r2, #8
 8006ede:	761a      	strb	r2, [r3, #24]

      break;
 8006ee0:	e087      	b.n	8006ff2 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	791b      	ldrb	r3, [r3, #4]
 8006ee6:	4619      	mov	r1, r3
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f000 fc11 	bl	8007710 <USBH_LL_GetURBState>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8006ef2:	7bbb      	ldrb	r3, [r7, #14]
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	d105      	bne.n	8006f04 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	220d      	movs	r2, #13
 8006efc:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8006efe:	2300      	movs	r3, #0
 8006f00:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006f02:	e073      	b.n	8006fec <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 8006f04:	7bbb      	ldrb	r3, [r7, #14]
 8006f06:	2b04      	cmp	r3, #4
 8006f08:	d103      	bne.n	8006f12 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	220b      	movs	r2, #11
 8006f0e:	761a      	strb	r2, [r3, #24]
      break;
 8006f10:	e06c      	b.n	8006fec <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 8006f12:	7bbb      	ldrb	r3, [r7, #14]
 8006f14:	2b05      	cmp	r3, #5
 8006f16:	d169      	bne.n	8006fec <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 8006f18:	2303      	movs	r3, #3
 8006f1a:	73fb      	strb	r3, [r7, #15]
      break;
 8006f1c:	e066      	b.n	8006fec <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	795a      	ldrb	r2, [r3, #5]
 8006f22:	2301      	movs	r3, #1
 8006f24:	9300      	str	r3, [sp, #0]
 8006f26:	4613      	mov	r3, r2
 8006f28:	2200      	movs	r2, #0
 8006f2a:	2100      	movs	r1, #0
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f000 f87f 	bl	8007030 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006f38:	b29a      	uxth	r2, r3
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	220a      	movs	r2, #10
 8006f42:	761a      	strb	r2, [r3, #24]
      break;
 8006f44:	e055      	b.n	8006ff2 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	795b      	ldrb	r3, [r3, #5]
 8006f4a:	4619      	mov	r1, r3
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f000 fbdf 	bl	8007710 <USBH_LL_GetURBState>
 8006f52:	4603      	mov	r3, r0
 8006f54:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8006f56:	7bbb      	ldrb	r3, [r7, #14]
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	d105      	bne.n	8006f68 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	220d      	movs	r2, #13
 8006f64:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006f66:	e043      	b.n	8006ff0 <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006f68:	7bbb      	ldrb	r3, [r7, #14]
 8006f6a:	2b02      	cmp	r3, #2
 8006f6c:	d103      	bne.n	8006f76 <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2209      	movs	r2, #9
 8006f72:	761a      	strb	r2, [r3, #24]
      break;
 8006f74:	e03c      	b.n	8006ff0 <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 8006f76:	7bbb      	ldrb	r3, [r7, #14]
 8006f78:	2b04      	cmp	r3, #4
 8006f7a:	d139      	bne.n	8006ff0 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	220b      	movs	r2, #11
 8006f80:	761a      	strb	r2, [r3, #24]
      break;
 8006f82:	e035      	b.n	8006ff0 <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	7e5b      	ldrb	r3, [r3, #25]
 8006f88:	3301      	adds	r3, #1
 8006f8a:	b2da      	uxtb	r2, r3
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	765a      	strb	r2, [r3, #25]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	7e5b      	ldrb	r3, [r3, #25]
 8006f94:	2b02      	cmp	r3, #2
 8006f96:	d806      	bhi.n	8006fa6 <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2201      	movs	r2, #1
 8006fa2:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8006fa4:	e025      	b.n	8006ff2 <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006fac:	2106      	movs	r1, #6
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	795b      	ldrb	r3, [r3, #5]
 8006fbc:	4619      	mov	r1, r3
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f000 f90c 	bl	80071dc <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	791b      	ldrb	r3, [r3, #4]
 8006fc8:	4619      	mov	r1, r3
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f000 f906 	bl	80071dc <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8006fd6:	2302      	movs	r3, #2
 8006fd8:	73fb      	strb	r3, [r7, #15]
      break;
 8006fda:	e00a      	b.n	8006ff2 <USBH_HandleControl+0x2e2>

    default:
      break;
 8006fdc:	bf00      	nop
 8006fde:	e008      	b.n	8006ff2 <USBH_HandleControl+0x2e2>
      break;
 8006fe0:	bf00      	nop
 8006fe2:	e006      	b.n	8006ff2 <USBH_HandleControl+0x2e2>
      break;
 8006fe4:	bf00      	nop
 8006fe6:	e004      	b.n	8006ff2 <USBH_HandleControl+0x2e2>
      break;
 8006fe8:	bf00      	nop
 8006fea:	e002      	b.n	8006ff2 <USBH_HandleControl+0x2e2>
      break;
 8006fec:	bf00      	nop
 8006fee:	e000      	b.n	8006ff2 <USBH_HandleControl+0x2e2>
      break;
 8006ff0:	bf00      	nop
  }

  return status;
 8006ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3710      	adds	r7, #16
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}

08006ffc <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b088      	sub	sp, #32
 8007000:	af04      	add	r7, sp, #16
 8007002:	60f8      	str	r0, [r7, #12]
 8007004:	60b9      	str	r1, [r7, #8]
 8007006:	4613      	mov	r3, r2
 8007008:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800700a:	79f9      	ldrb	r1, [r7, #7]
 800700c:	2300      	movs	r3, #0
 800700e:	9303      	str	r3, [sp, #12]
 8007010:	2308      	movs	r3, #8
 8007012:	9302      	str	r3, [sp, #8]
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	9301      	str	r3, [sp, #4]
 8007018:	2300      	movs	r3, #0
 800701a:	9300      	str	r3, [sp, #0]
 800701c:	2300      	movs	r3, #0
 800701e:	2200      	movs	r2, #0
 8007020:	68f8      	ldr	r0, [r7, #12]
 8007022:	f000 fb44 	bl	80076ae <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8007026:	2300      	movs	r3, #0
}
 8007028:	4618      	mov	r0, r3
 800702a:	3710      	adds	r7, #16
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}

08007030 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b088      	sub	sp, #32
 8007034:	af04      	add	r7, sp, #16
 8007036:	60f8      	str	r0, [r7, #12]
 8007038:	60b9      	str	r1, [r7, #8]
 800703a:	4611      	mov	r1, r2
 800703c:	461a      	mov	r2, r3
 800703e:	460b      	mov	r3, r1
 8007040:	80fb      	strh	r3, [r7, #6]
 8007042:	4613      	mov	r3, r2
 8007044:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800704c:	2b00      	cmp	r3, #0
 800704e:	d001      	beq.n	8007054 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007050:	2300      	movs	r3, #0
 8007052:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007054:	7979      	ldrb	r1, [r7, #5]
 8007056:	7e3b      	ldrb	r3, [r7, #24]
 8007058:	9303      	str	r3, [sp, #12]
 800705a:	88fb      	ldrh	r3, [r7, #6]
 800705c:	9302      	str	r3, [sp, #8]
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	9301      	str	r3, [sp, #4]
 8007062:	2301      	movs	r3, #1
 8007064:	9300      	str	r3, [sp, #0]
 8007066:	2300      	movs	r3, #0
 8007068:	2200      	movs	r2, #0
 800706a:	68f8      	ldr	r0, [r7, #12]
 800706c:	f000 fb1f 	bl	80076ae <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007070:	2300      	movs	r3, #0
}
 8007072:	4618      	mov	r0, r3
 8007074:	3710      	adds	r7, #16
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}

0800707a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800707a:	b580      	push	{r7, lr}
 800707c:	b088      	sub	sp, #32
 800707e:	af04      	add	r7, sp, #16
 8007080:	60f8      	str	r0, [r7, #12]
 8007082:	60b9      	str	r1, [r7, #8]
 8007084:	4611      	mov	r1, r2
 8007086:	461a      	mov	r2, r3
 8007088:	460b      	mov	r3, r1
 800708a:	80fb      	strh	r3, [r7, #6]
 800708c:	4613      	mov	r3, r2
 800708e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007090:	7979      	ldrb	r1, [r7, #5]
 8007092:	2300      	movs	r3, #0
 8007094:	9303      	str	r3, [sp, #12]
 8007096:	88fb      	ldrh	r3, [r7, #6]
 8007098:	9302      	str	r3, [sp, #8]
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	9301      	str	r3, [sp, #4]
 800709e:	2301      	movs	r3, #1
 80070a0:	9300      	str	r3, [sp, #0]
 80070a2:	2300      	movs	r3, #0
 80070a4:	2201      	movs	r2, #1
 80070a6:	68f8      	ldr	r0, [r7, #12]
 80070a8:	f000 fb01 	bl	80076ae <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80070ac:	2300      	movs	r3, #0

}
 80070ae:	4618      	mov	r0, r3
 80070b0:	3710      	adds	r7, #16
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}

080070b6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80070b6:	b580      	push	{r7, lr}
 80070b8:	b088      	sub	sp, #32
 80070ba:	af04      	add	r7, sp, #16
 80070bc:	60f8      	str	r0, [r7, #12]
 80070be:	60b9      	str	r1, [r7, #8]
 80070c0:	4611      	mov	r1, r2
 80070c2:	461a      	mov	r2, r3
 80070c4:	460b      	mov	r3, r1
 80070c6:	80fb      	strh	r3, [r7, #6]
 80070c8:	4613      	mov	r3, r2
 80070ca:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d001      	beq.n	80070da <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80070d6:	2300      	movs	r3, #0
 80070d8:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80070da:	7979      	ldrb	r1, [r7, #5]
 80070dc:	7e3b      	ldrb	r3, [r7, #24]
 80070de:	9303      	str	r3, [sp, #12]
 80070e0:	88fb      	ldrh	r3, [r7, #6]
 80070e2:	9302      	str	r3, [sp, #8]
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	9301      	str	r3, [sp, #4]
 80070e8:	2301      	movs	r3, #1
 80070ea:	9300      	str	r3, [sp, #0]
 80070ec:	2302      	movs	r3, #2
 80070ee:	2200      	movs	r2, #0
 80070f0:	68f8      	ldr	r0, [r7, #12]
 80070f2:	f000 fadc 	bl	80076ae <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80070f6:	2300      	movs	r3, #0
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3710      	adds	r7, #16
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}

08007100 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b088      	sub	sp, #32
 8007104:	af04      	add	r7, sp, #16
 8007106:	60f8      	str	r0, [r7, #12]
 8007108:	60b9      	str	r1, [r7, #8]
 800710a:	4611      	mov	r1, r2
 800710c:	461a      	mov	r2, r3
 800710e:	460b      	mov	r3, r1
 8007110:	80fb      	strh	r3, [r7, #6]
 8007112:	4613      	mov	r3, r2
 8007114:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007116:	7979      	ldrb	r1, [r7, #5]
 8007118:	2300      	movs	r3, #0
 800711a:	9303      	str	r3, [sp, #12]
 800711c:	88fb      	ldrh	r3, [r7, #6]
 800711e:	9302      	str	r3, [sp, #8]
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	9301      	str	r3, [sp, #4]
 8007124:	2301      	movs	r3, #1
 8007126:	9300      	str	r3, [sp, #0]
 8007128:	2302      	movs	r3, #2
 800712a:	2201      	movs	r2, #1
 800712c:	68f8      	ldr	r0, [r7, #12]
 800712e:	f000 fabe 	bl	80076ae <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007132:	2300      	movs	r3, #0
}
 8007134:	4618      	mov	r0, r3
 8007136:	3710      	adds	r7, #16
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}

0800713c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b086      	sub	sp, #24
 8007140:	af04      	add	r7, sp, #16
 8007142:	6078      	str	r0, [r7, #4]
 8007144:	4608      	mov	r0, r1
 8007146:	4611      	mov	r1, r2
 8007148:	461a      	mov	r2, r3
 800714a:	4603      	mov	r3, r0
 800714c:	70fb      	strb	r3, [r7, #3]
 800714e:	460b      	mov	r3, r1
 8007150:	70bb      	strb	r3, [r7, #2]
 8007152:	4613      	mov	r3, r2
 8007154:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007156:	7878      	ldrb	r0, [r7, #1]
 8007158:	78ba      	ldrb	r2, [r7, #2]
 800715a:	78f9      	ldrb	r1, [r7, #3]
 800715c:	8b3b      	ldrh	r3, [r7, #24]
 800715e:	9302      	str	r3, [sp, #8]
 8007160:	7d3b      	ldrb	r3, [r7, #20]
 8007162:	9301      	str	r3, [sp, #4]
 8007164:	7c3b      	ldrb	r3, [r7, #16]
 8007166:	9300      	str	r3, [sp, #0]
 8007168:	4603      	mov	r3, r0
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f000 fa51 	bl	8007612 <USBH_LL_OpenPipe>

  return USBH_OK;
 8007170:	2300      	movs	r3, #0
}
 8007172:	4618      	mov	r0, r3
 8007174:	3708      	adds	r7, #8
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}

0800717a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800717a:	b580      	push	{r7, lr}
 800717c:	b082      	sub	sp, #8
 800717e:	af00      	add	r7, sp, #0
 8007180:	6078      	str	r0, [r7, #4]
 8007182:	460b      	mov	r3, r1
 8007184:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8007186:	78fb      	ldrb	r3, [r7, #3]
 8007188:	4619      	mov	r1, r3
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f000 fa70 	bl	8007670 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007190:	2300      	movs	r3, #0
}
 8007192:	4618      	mov	r0, r3
 8007194:	3708      	adds	r7, #8
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}

0800719a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800719a:	b580      	push	{r7, lr}
 800719c:	b084      	sub	sp, #16
 800719e:	af00      	add	r7, sp, #0
 80071a0:	6078      	str	r0, [r7, #4]
 80071a2:	460b      	mov	r3, r1
 80071a4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f000 f836 	bl	8007218 <USBH_GetFreePipe>
 80071ac:	4603      	mov	r3, r0
 80071ae:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80071b0:	89fb      	ldrh	r3, [r7, #14]
 80071b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d00a      	beq.n	80071d0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 80071ba:	78fa      	ldrb	r2, [r7, #3]
 80071bc:	89fb      	ldrh	r3, [r7, #14]
 80071be:	f003 030f 	and.w	r3, r3, #15
 80071c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80071c6:	6879      	ldr	r1, [r7, #4]
 80071c8:	33e0      	adds	r3, #224	; 0xe0
 80071ca:	009b      	lsls	r3, r3, #2
 80071cc:	440b      	add	r3, r1
 80071ce:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80071d0:	89fb      	ldrh	r3, [r7, #14]
 80071d2:	b2db      	uxtb	r3, r3
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3710      	adds	r7, #16
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}

080071dc <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80071dc:	b480      	push	{r7}
 80071de:	b083      	sub	sp, #12
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	460b      	mov	r3, r1
 80071e6:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80071e8:	78fb      	ldrb	r3, [r7, #3]
 80071ea:	2b0a      	cmp	r3, #10
 80071ec:	d80d      	bhi.n	800720a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80071ee:	78fb      	ldrb	r3, [r7, #3]
 80071f0:	687a      	ldr	r2, [r7, #4]
 80071f2:	33e0      	adds	r3, #224	; 0xe0
 80071f4:	009b      	lsls	r3, r3, #2
 80071f6:	4413      	add	r3, r2
 80071f8:	685a      	ldr	r2, [r3, #4]
 80071fa:	78fb      	ldrb	r3, [r7, #3]
 80071fc:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007200:	6879      	ldr	r1, [r7, #4]
 8007202:	33e0      	adds	r3, #224	; 0xe0
 8007204:	009b      	lsls	r3, r3, #2
 8007206:	440b      	add	r3, r1
 8007208:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800720a:	2300      	movs	r3, #0
}
 800720c:	4618      	mov	r0, r3
 800720e:	370c      	adds	r7, #12
 8007210:	46bd      	mov	sp, r7
 8007212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007216:	4770      	bx	lr

08007218 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007218:	b480      	push	{r7}
 800721a:	b085      	sub	sp, #20
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007220:	2300      	movs	r3, #0
 8007222:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8007224:	2300      	movs	r3, #0
 8007226:	73fb      	strb	r3, [r7, #15]
 8007228:	e00f      	b.n	800724a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800722a:	7bfb      	ldrb	r3, [r7, #15]
 800722c:	687a      	ldr	r2, [r7, #4]
 800722e:	33e0      	adds	r3, #224	; 0xe0
 8007230:	009b      	lsls	r3, r3, #2
 8007232:	4413      	add	r3, r2
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800723a:	2b00      	cmp	r3, #0
 800723c:	d102      	bne.n	8007244 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800723e:	7bfb      	ldrb	r3, [r7, #15]
 8007240:	b29b      	uxth	r3, r3
 8007242:	e007      	b.n	8007254 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8007244:	7bfb      	ldrb	r3, [r7, #15]
 8007246:	3301      	adds	r3, #1
 8007248:	73fb      	strb	r3, [r7, #15]
 800724a:	7bfb      	ldrb	r3, [r7, #15]
 800724c:	2b0a      	cmp	r3, #10
 800724e:	d9ec      	bls.n	800722a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007250:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007254:	4618      	mov	r0, r3
 8007256:	3714      	adds	r7, #20
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr

08007260 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007264:	2201      	movs	r2, #1
 8007266:	490e      	ldr	r1, [pc, #56]	; (80072a0 <MX_USB_HOST_Init+0x40>)
 8007268:	480e      	ldr	r0, [pc, #56]	; (80072a4 <MX_USB_HOST_Init+0x44>)
 800726a:	f7fe fc9f 	bl	8005bac <USBH_Init>
 800726e:	4603      	mov	r3, r0
 8007270:	2b00      	cmp	r3, #0
 8007272:	d001      	beq.n	8007278 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007274:	f7f9 fc34 	bl	8000ae0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007278:	490b      	ldr	r1, [pc, #44]	; (80072a8 <MX_USB_HOST_Init+0x48>)
 800727a:	480a      	ldr	r0, [pc, #40]	; (80072a4 <MX_USB_HOST_Init+0x44>)
 800727c:	f7fe fd24 	bl	8005cc8 <USBH_RegisterClass>
 8007280:	4603      	mov	r3, r0
 8007282:	2b00      	cmp	r3, #0
 8007284:	d001      	beq.n	800728a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007286:	f7f9 fc2b 	bl	8000ae0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800728a:	4806      	ldr	r0, [pc, #24]	; (80072a4 <MX_USB_HOST_Init+0x44>)
 800728c:	f7fe fda8 	bl	8005de0 <USBH_Start>
 8007290:	4603      	mov	r3, r0
 8007292:	2b00      	cmp	r3, #0
 8007294:	d001      	beq.n	800729a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007296:	f7f9 fc23 	bl	8000ae0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800729a:	bf00      	nop
 800729c:	bd80      	pop	{r7, pc}
 800729e:	bf00      	nop
 80072a0:	080072c1 	.word	0x080072c1
 80072a4:	200001b8 	.word	0x200001b8
 80072a8:	2000000c 	.word	0x2000000c

080072ac <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80072b0:	4802      	ldr	r0, [pc, #8]	; (80072bc <MX_USB_HOST_Process+0x10>)
 80072b2:	f7fe fda5 	bl	8005e00 <USBH_Process>
}
 80072b6:	bf00      	nop
 80072b8:	bd80      	pop	{r7, pc}
 80072ba:	bf00      	nop
 80072bc:	200001b8 	.word	0x200001b8

080072c0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b083      	sub	sp, #12
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
 80072c8:	460b      	mov	r3, r1
 80072ca:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80072cc:	78fb      	ldrb	r3, [r7, #3]
 80072ce:	3b01      	subs	r3, #1
 80072d0:	2b04      	cmp	r3, #4
 80072d2:	d819      	bhi.n	8007308 <USBH_UserProcess+0x48>
 80072d4:	a201      	add	r2, pc, #4	; (adr r2, 80072dc <USBH_UserProcess+0x1c>)
 80072d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072da:	bf00      	nop
 80072dc:	08007309 	.word	0x08007309
 80072e0:	080072f9 	.word	0x080072f9
 80072e4:	08007309 	.word	0x08007309
 80072e8:	08007301 	.word	0x08007301
 80072ec:	080072f1 	.word	0x080072f1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80072f0:	4b09      	ldr	r3, [pc, #36]	; (8007318 <USBH_UserProcess+0x58>)
 80072f2:	2203      	movs	r2, #3
 80072f4:	701a      	strb	r2, [r3, #0]
  break;
 80072f6:	e008      	b.n	800730a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80072f8:	4b07      	ldr	r3, [pc, #28]	; (8007318 <USBH_UserProcess+0x58>)
 80072fa:	2202      	movs	r2, #2
 80072fc:	701a      	strb	r2, [r3, #0]
  break;
 80072fe:	e004      	b.n	800730a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007300:	4b05      	ldr	r3, [pc, #20]	; (8007318 <USBH_UserProcess+0x58>)
 8007302:	2201      	movs	r2, #1
 8007304:	701a      	strb	r2, [r3, #0]
  break;
 8007306:	e000      	b.n	800730a <USBH_UserProcess+0x4a>

  default:
  break;
 8007308:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800730a:	bf00      	nop
 800730c:	370c      	adds	r7, #12
 800730e:	46bd      	mov	sp, r7
 8007310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007314:	4770      	bx	lr
 8007316:	bf00      	nop
 8007318:	200000b4 	.word	0x200000b4

0800731c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b08a      	sub	sp, #40	; 0x28
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007324:	f107 0314 	add.w	r3, r7, #20
 8007328:	2200      	movs	r2, #0
 800732a:	601a      	str	r2, [r3, #0]
 800732c:	605a      	str	r2, [r3, #4]
 800732e:	609a      	str	r2, [r3, #8]
 8007330:	60da      	str	r2, [r3, #12]
 8007332:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800733c:	d147      	bne.n	80073ce <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800733e:	2300      	movs	r3, #0
 8007340:	613b      	str	r3, [r7, #16]
 8007342:	4b25      	ldr	r3, [pc, #148]	; (80073d8 <HAL_HCD_MspInit+0xbc>)
 8007344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007346:	4a24      	ldr	r2, [pc, #144]	; (80073d8 <HAL_HCD_MspInit+0xbc>)
 8007348:	f043 0301 	orr.w	r3, r3, #1
 800734c:	6313      	str	r3, [r2, #48]	; 0x30
 800734e:	4b22      	ldr	r3, [pc, #136]	; (80073d8 <HAL_HCD_MspInit+0xbc>)
 8007350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007352:	f003 0301 	and.w	r3, r3, #1
 8007356:	613b      	str	r3, [r7, #16]
 8007358:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800735a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800735e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007360:	2300      	movs	r3, #0
 8007362:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007364:	2300      	movs	r3, #0
 8007366:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007368:	f107 0314 	add.w	r3, r7, #20
 800736c:	4619      	mov	r1, r3
 800736e:	481b      	ldr	r0, [pc, #108]	; (80073dc <HAL_HCD_MspInit+0xc0>)
 8007370:	f7f9 feae 	bl	80010d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007374:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007378:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800737a:	2302      	movs	r3, #2
 800737c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800737e:	2300      	movs	r3, #0
 8007380:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007382:	2300      	movs	r3, #0
 8007384:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007386:	230a      	movs	r3, #10
 8007388:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800738a:	f107 0314 	add.w	r3, r7, #20
 800738e:	4619      	mov	r1, r3
 8007390:	4812      	ldr	r0, [pc, #72]	; (80073dc <HAL_HCD_MspInit+0xc0>)
 8007392:	f7f9 fe9d 	bl	80010d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007396:	4b10      	ldr	r3, [pc, #64]	; (80073d8 <HAL_HCD_MspInit+0xbc>)
 8007398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800739a:	4a0f      	ldr	r2, [pc, #60]	; (80073d8 <HAL_HCD_MspInit+0xbc>)
 800739c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073a0:	6353      	str	r3, [r2, #52]	; 0x34
 80073a2:	2300      	movs	r3, #0
 80073a4:	60fb      	str	r3, [r7, #12]
 80073a6:	4b0c      	ldr	r3, [pc, #48]	; (80073d8 <HAL_HCD_MspInit+0xbc>)
 80073a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073aa:	4a0b      	ldr	r2, [pc, #44]	; (80073d8 <HAL_HCD_MspInit+0xbc>)
 80073ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80073b0:	6453      	str	r3, [r2, #68]	; 0x44
 80073b2:	4b09      	ldr	r3, [pc, #36]	; (80073d8 <HAL_HCD_MspInit+0xbc>)
 80073b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073ba:	60fb      	str	r3, [r7, #12]
 80073bc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80073be:	2200      	movs	r2, #0
 80073c0:	2100      	movs	r1, #0
 80073c2:	2043      	movs	r0, #67	; 0x43
 80073c4:	f7f9 fe4d 	bl	8001062 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80073c8:	2043      	movs	r0, #67	; 0x43
 80073ca:	f7f9 fe66 	bl	800109a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80073ce:	bf00      	nop
 80073d0:	3728      	adds	r7, #40	; 0x28
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}
 80073d6:	bf00      	nop
 80073d8:	40023800 	.word	0x40023800
 80073dc:	40020000 	.word	0x40020000

080073e0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b082      	sub	sp, #8
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80073ee:	4618      	mov	r0, r3
 80073f0:	f7ff f8d9 	bl	80065a6 <USBH_LL_IncTimer>
}
 80073f4:	bf00      	nop
 80073f6:	3708      	adds	r7, #8
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}

080073fc <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b082      	sub	sp, #8
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800740a:	4618      	mov	r0, r3
 800740c:	f7ff f911 	bl	8006632 <USBH_LL_Connect>
}
 8007410:	bf00      	nop
 8007412:	3708      	adds	r7, #8
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}

08007418 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b082      	sub	sp, #8
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007426:	4618      	mov	r0, r3
 8007428:	f7ff f91a 	bl	8006660 <USBH_LL_Disconnect>
}
 800742c:	bf00      	nop
 800742e:	3708      	adds	r7, #8
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}

08007434 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007434:	b480      	push	{r7}
 8007436:	b083      	sub	sp, #12
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
 800743c:	460b      	mov	r3, r1
 800743e:	70fb      	strb	r3, [r7, #3]
 8007440:	4613      	mov	r3, r2
 8007442:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007444:	bf00      	nop
 8007446:	370c      	adds	r7, #12
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr

08007450 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b082      	sub	sp, #8
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800745e:	4618      	mov	r0, r3
 8007460:	f7ff f8cb 	bl	80065fa <USBH_LL_PortEnabled>
} 
 8007464:	bf00      	nop
 8007466:	3708      	adds	r7, #8
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}

0800746c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b082      	sub	sp, #8
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800747a:	4618      	mov	r0, r3
 800747c:	f7ff f8cb 	bl	8006616 <USBH_LL_PortDisabled>
} 
 8007480:	bf00      	nop
 8007482:	3708      	adds	r7, #8
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}

08007488 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b082      	sub	sp, #8
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007496:	2b01      	cmp	r3, #1
 8007498:	d12a      	bne.n	80074f0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800749a:	4a18      	ldr	r2, [pc, #96]	; (80074fc <USBH_LL_Init+0x74>)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	4a15      	ldr	r2, [pc, #84]	; (80074fc <USBH_LL_Init+0x74>)
 80074a6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80074aa:	4b14      	ldr	r3, [pc, #80]	; (80074fc <USBH_LL_Init+0x74>)
 80074ac:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80074b0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80074b2:	4b12      	ldr	r3, [pc, #72]	; (80074fc <USBH_LL_Init+0x74>)
 80074b4:	2208      	movs	r2, #8
 80074b6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80074b8:	4b10      	ldr	r3, [pc, #64]	; (80074fc <USBH_LL_Init+0x74>)
 80074ba:	2201      	movs	r2, #1
 80074bc:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80074be:	4b0f      	ldr	r3, [pc, #60]	; (80074fc <USBH_LL_Init+0x74>)
 80074c0:	2200      	movs	r2, #0
 80074c2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80074c4:	4b0d      	ldr	r3, [pc, #52]	; (80074fc <USBH_LL_Init+0x74>)
 80074c6:	2202      	movs	r2, #2
 80074c8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80074ca:	4b0c      	ldr	r3, [pc, #48]	; (80074fc <USBH_LL_Init+0x74>)
 80074cc:	2200      	movs	r2, #0
 80074ce:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80074d0:	480a      	ldr	r0, [pc, #40]	; (80074fc <USBH_LL_Init+0x74>)
 80074d2:	f7f9 ffc8 	bl	8001466 <HAL_HCD_Init>
 80074d6:	4603      	mov	r3, r0
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d001      	beq.n	80074e0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80074dc:	f7f9 fb00 	bl	8000ae0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80074e0:	4806      	ldr	r0, [pc, #24]	; (80074fc <USBH_LL_Init+0x74>)
 80074e2:	f7fa fbcb 	bl	8001c7c <HAL_HCD_GetCurrentFrame>
 80074e6:	4603      	mov	r3, r0
 80074e8:	4619      	mov	r1, r3
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f7ff f84c 	bl	8006588 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80074f0:	2300      	movs	r3, #0
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	3708      	adds	r7, #8
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}
 80074fa:	bf00      	nop
 80074fc:	20000590 	.word	0x20000590

08007500 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b084      	sub	sp, #16
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007508:	2300      	movs	r3, #0
 800750a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800750c:	2300      	movs	r3, #0
 800750e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007516:	4618      	mov	r0, r3
 8007518:	f7fa fb38 	bl	8001b8c <HAL_HCD_Start>
 800751c:	4603      	mov	r3, r0
 800751e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007520:	7bfb      	ldrb	r3, [r7, #15]
 8007522:	4618      	mov	r0, r3
 8007524:	f000 f95c 	bl	80077e0 <USBH_Get_USB_Status>
 8007528:	4603      	mov	r3, r0
 800752a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800752c:	7bbb      	ldrb	r3, [r7, #14]
}
 800752e:	4618      	mov	r0, r3
 8007530:	3710      	adds	r7, #16
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}

08007536 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8007536:	b580      	push	{r7, lr}
 8007538:	b084      	sub	sp, #16
 800753a:	af00      	add	r7, sp, #0
 800753c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800753e:	2300      	movs	r3, #0
 8007540:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007542:	2300      	movs	r3, #0
 8007544:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800754c:	4618      	mov	r0, r3
 800754e:	f7fa fb40 	bl	8001bd2 <HAL_HCD_Stop>
 8007552:	4603      	mov	r3, r0
 8007554:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007556:	7bfb      	ldrb	r3, [r7, #15]
 8007558:	4618      	mov	r0, r3
 800755a:	f000 f941 	bl	80077e0 <USBH_Get_USB_Status>
 800755e:	4603      	mov	r3, r0
 8007560:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8007562:	7bbb      	ldrb	r3, [r7, #14]
}
 8007564:	4618      	mov	r0, r3
 8007566:	3710      	adds	r7, #16
 8007568:	46bd      	mov	sp, r7
 800756a:	bd80      	pop	{r7, pc}

0800756c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b084      	sub	sp, #16
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8007574:	2301      	movs	r3, #1
 8007576:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800757e:	4618      	mov	r0, r3
 8007580:	f7fa fb8a 	bl	8001c98 <HAL_HCD_GetCurrentSpeed>
 8007584:	4603      	mov	r3, r0
 8007586:	2b01      	cmp	r3, #1
 8007588:	d007      	beq.n	800759a <USBH_LL_GetSpeed+0x2e>
 800758a:	2b01      	cmp	r3, #1
 800758c:	d302      	bcc.n	8007594 <USBH_LL_GetSpeed+0x28>
 800758e:	2b02      	cmp	r3, #2
 8007590:	d006      	beq.n	80075a0 <USBH_LL_GetSpeed+0x34>
 8007592:	e008      	b.n	80075a6 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8007594:	2300      	movs	r3, #0
 8007596:	73fb      	strb	r3, [r7, #15]
    break;
 8007598:	e008      	b.n	80075ac <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800759a:	2301      	movs	r3, #1
 800759c:	73fb      	strb	r3, [r7, #15]
    break;
 800759e:	e005      	b.n	80075ac <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 80075a0:	2302      	movs	r3, #2
 80075a2:	73fb      	strb	r3, [r7, #15]
    break;
 80075a4:	e002      	b.n	80075ac <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 80075a6:	2301      	movs	r3, #1
 80075a8:	73fb      	strb	r3, [r7, #15]
    break;
 80075aa:	bf00      	nop
  }
  return  speed;
 80075ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3710      	adds	r7, #16
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}

080075b6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80075b6:	b580      	push	{r7, lr}
 80075b8:	b084      	sub	sp, #16
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075be:	2300      	movs	r3, #0
 80075c0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80075c2:	2300      	movs	r3, #0
 80075c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80075cc:	4618      	mov	r0, r3
 80075ce:	f7fa fb1d 	bl	8001c0c <HAL_HCD_ResetPort>
 80075d2:	4603      	mov	r3, r0
 80075d4:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 80075d6:	7bfb      	ldrb	r3, [r7, #15]
 80075d8:	4618      	mov	r0, r3
 80075da:	f000 f901 	bl	80077e0 <USBH_Get_USB_Status>
 80075de:	4603      	mov	r3, r0
 80075e0:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80075e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	3710      	adds	r7, #16
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}

080075ec <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b082      	sub	sp, #8
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	460b      	mov	r3, r1
 80075f6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80075fe:	78fa      	ldrb	r2, [r7, #3]
 8007600:	4611      	mov	r1, r2
 8007602:	4618      	mov	r0, r3
 8007604:	f7fa fb25 	bl	8001c52 <HAL_HCD_HC_GetXferCount>
 8007608:	4603      	mov	r3, r0
}
 800760a:	4618      	mov	r0, r3
 800760c:	3708      	adds	r7, #8
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}

08007612 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007612:	b590      	push	{r4, r7, lr}
 8007614:	b089      	sub	sp, #36	; 0x24
 8007616:	af04      	add	r7, sp, #16
 8007618:	6078      	str	r0, [r7, #4]
 800761a:	4608      	mov	r0, r1
 800761c:	4611      	mov	r1, r2
 800761e:	461a      	mov	r2, r3
 8007620:	4603      	mov	r3, r0
 8007622:	70fb      	strb	r3, [r7, #3]
 8007624:	460b      	mov	r3, r1
 8007626:	70bb      	strb	r3, [r7, #2]
 8007628:	4613      	mov	r3, r2
 800762a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800762c:	2300      	movs	r3, #0
 800762e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007630:	2300      	movs	r3, #0
 8007632:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800763a:	787c      	ldrb	r4, [r7, #1]
 800763c:	78ba      	ldrb	r2, [r7, #2]
 800763e:	78f9      	ldrb	r1, [r7, #3]
 8007640:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007642:	9302      	str	r3, [sp, #8]
 8007644:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007648:	9301      	str	r3, [sp, #4]
 800764a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800764e:	9300      	str	r3, [sp, #0]
 8007650:	4623      	mov	r3, r4
 8007652:	f7f9 ff6a 	bl	800152a <HAL_HCD_HC_Init>
 8007656:	4603      	mov	r3, r0
 8007658:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800765a:	7bfb      	ldrb	r3, [r7, #15]
 800765c:	4618      	mov	r0, r3
 800765e:	f000 f8bf 	bl	80077e0 <USBH_Get_USB_Status>
 8007662:	4603      	mov	r3, r0
 8007664:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007666:	7bbb      	ldrb	r3, [r7, #14]
}
 8007668:	4618      	mov	r0, r3
 800766a:	3714      	adds	r7, #20
 800766c:	46bd      	mov	sp, r7
 800766e:	bd90      	pop	{r4, r7, pc}

08007670 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b084      	sub	sp, #16
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
 8007678:	460b      	mov	r3, r1
 800767a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800767c:	2300      	movs	r3, #0
 800767e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007680:	2300      	movs	r3, #0
 8007682:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800768a:	78fa      	ldrb	r2, [r7, #3]
 800768c:	4611      	mov	r1, r2
 800768e:	4618      	mov	r0, r3
 8007690:	f7f9 ffe3 	bl	800165a <HAL_HCD_HC_Halt>
 8007694:	4603      	mov	r3, r0
 8007696:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007698:	7bfb      	ldrb	r3, [r7, #15]
 800769a:	4618      	mov	r0, r3
 800769c:	f000 f8a0 	bl	80077e0 <USBH_Get_USB_Status>
 80076a0:	4603      	mov	r3, r0
 80076a2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80076a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	3710      	adds	r7, #16
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}

080076ae <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80076ae:	b590      	push	{r4, r7, lr}
 80076b0:	b089      	sub	sp, #36	; 0x24
 80076b2:	af04      	add	r7, sp, #16
 80076b4:	6078      	str	r0, [r7, #4]
 80076b6:	4608      	mov	r0, r1
 80076b8:	4611      	mov	r1, r2
 80076ba:	461a      	mov	r2, r3
 80076bc:	4603      	mov	r3, r0
 80076be:	70fb      	strb	r3, [r7, #3]
 80076c0:	460b      	mov	r3, r1
 80076c2:	70bb      	strb	r3, [r7, #2]
 80076c4:	4613      	mov	r3, r2
 80076c6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076c8:	2300      	movs	r3, #0
 80076ca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80076cc:	2300      	movs	r3, #0
 80076ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80076d6:	787c      	ldrb	r4, [r7, #1]
 80076d8:	78ba      	ldrb	r2, [r7, #2]
 80076da:	78f9      	ldrb	r1, [r7, #3]
 80076dc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80076e0:	9303      	str	r3, [sp, #12]
 80076e2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80076e4:	9302      	str	r3, [sp, #8]
 80076e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e8:	9301      	str	r3, [sp, #4]
 80076ea:	f897 3020 	ldrb.w	r3, [r7, #32]
 80076ee:	9300      	str	r3, [sp, #0]
 80076f0:	4623      	mov	r3, r4
 80076f2:	f7f9 ffd5 	bl	80016a0 <HAL_HCD_HC_SubmitRequest>
 80076f6:	4603      	mov	r3, r0
 80076f8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80076fa:	7bfb      	ldrb	r3, [r7, #15]
 80076fc:	4618      	mov	r0, r3
 80076fe:	f000 f86f 	bl	80077e0 <USBH_Get_USB_Status>
 8007702:	4603      	mov	r3, r0
 8007704:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007706:	7bbb      	ldrb	r3, [r7, #14]
}
 8007708:	4618      	mov	r0, r3
 800770a:	3714      	adds	r7, #20
 800770c:	46bd      	mov	sp, r7
 800770e:	bd90      	pop	{r4, r7, pc}

08007710 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b082      	sub	sp, #8
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	460b      	mov	r3, r1
 800771a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007722:	78fa      	ldrb	r2, [r7, #3]
 8007724:	4611      	mov	r1, r2
 8007726:	4618      	mov	r0, r3
 8007728:	f7fa fa7e 	bl	8001c28 <HAL_HCD_HC_GetURBState>
 800772c:	4603      	mov	r3, r0
}
 800772e:	4618      	mov	r0, r3
 8007730:	3708      	adds	r7, #8
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}

08007736 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8007736:	b580      	push	{r7, lr}
 8007738:	b082      	sub	sp, #8
 800773a:	af00      	add	r7, sp, #0
 800773c:	6078      	str	r0, [r7, #4]
 800773e:	460b      	mov	r3, r1
 8007740:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007748:	2b01      	cmp	r3, #1
 800774a:	d103      	bne.n	8007754 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800774c:	78fb      	ldrb	r3, [r7, #3]
 800774e:	4618      	mov	r0, r3
 8007750:	f000 f872 	bl	8007838 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8007754:	20c8      	movs	r0, #200	; 0xc8
 8007756:	f7f9 fb87 	bl	8000e68 <HAL_Delay>
  return USBH_OK;
 800775a:	2300      	movs	r3, #0
}
 800775c:	4618      	mov	r0, r3
 800775e:	3708      	adds	r7, #8
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}

08007764 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8007764:	b480      	push	{r7}
 8007766:	b085      	sub	sp, #20
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
 800776c:	460b      	mov	r3, r1
 800776e:	70fb      	strb	r3, [r7, #3]
 8007770:	4613      	mov	r3, r2
 8007772:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800777a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800777c:	78fa      	ldrb	r2, [r7, #3]
 800777e:	68f9      	ldr	r1, [r7, #12]
 8007780:	4613      	mov	r3, r2
 8007782:	009b      	lsls	r3, r3, #2
 8007784:	4413      	add	r3, r2
 8007786:	00db      	lsls	r3, r3, #3
 8007788:	440b      	add	r3, r1
 800778a:	333b      	adds	r3, #59	; 0x3b
 800778c:	781b      	ldrb	r3, [r3, #0]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d00a      	beq.n	80077a8 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8007792:	78fa      	ldrb	r2, [r7, #3]
 8007794:	68f9      	ldr	r1, [r7, #12]
 8007796:	4613      	mov	r3, r2
 8007798:	009b      	lsls	r3, r3, #2
 800779a:	4413      	add	r3, r2
 800779c:	00db      	lsls	r3, r3, #3
 800779e:	440b      	add	r3, r1
 80077a0:	3350      	adds	r3, #80	; 0x50
 80077a2:	78ba      	ldrb	r2, [r7, #2]
 80077a4:	701a      	strb	r2, [r3, #0]
 80077a6:	e009      	b.n	80077bc <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80077a8:	78fa      	ldrb	r2, [r7, #3]
 80077aa:	68f9      	ldr	r1, [r7, #12]
 80077ac:	4613      	mov	r3, r2
 80077ae:	009b      	lsls	r3, r3, #2
 80077b0:	4413      	add	r3, r2
 80077b2:	00db      	lsls	r3, r3, #3
 80077b4:	440b      	add	r3, r1
 80077b6:	3351      	adds	r3, #81	; 0x51
 80077b8:	78ba      	ldrb	r2, [r7, #2]
 80077ba:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80077bc:	2300      	movs	r3, #0
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3714      	adds	r7, #20
 80077c2:	46bd      	mov	sp, r7
 80077c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c8:	4770      	bx	lr

080077ca <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80077ca:	b580      	push	{r7, lr}
 80077cc:	b082      	sub	sp, #8
 80077ce:	af00      	add	r7, sp, #0
 80077d0:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f7f9 fb48 	bl	8000e68 <HAL_Delay>
}
 80077d8:	bf00      	nop
 80077da:	3708      	adds	r7, #8
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}

080077e0 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b085      	sub	sp, #20
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	4603      	mov	r3, r0
 80077e8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80077ea:	2300      	movs	r3, #0
 80077ec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80077ee:	79fb      	ldrb	r3, [r7, #7]
 80077f0:	2b03      	cmp	r3, #3
 80077f2:	d817      	bhi.n	8007824 <USBH_Get_USB_Status+0x44>
 80077f4:	a201      	add	r2, pc, #4	; (adr r2, 80077fc <USBH_Get_USB_Status+0x1c>)
 80077f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077fa:	bf00      	nop
 80077fc:	0800780d 	.word	0x0800780d
 8007800:	08007813 	.word	0x08007813
 8007804:	08007819 	.word	0x08007819
 8007808:	0800781f 	.word	0x0800781f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800780c:	2300      	movs	r3, #0
 800780e:	73fb      	strb	r3, [r7, #15]
    break;
 8007810:	e00b      	b.n	800782a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8007812:	2302      	movs	r3, #2
 8007814:	73fb      	strb	r3, [r7, #15]
    break;
 8007816:	e008      	b.n	800782a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007818:	2301      	movs	r3, #1
 800781a:	73fb      	strb	r3, [r7, #15]
    break;
 800781c:	e005      	b.n	800782a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800781e:	2302      	movs	r3, #2
 8007820:	73fb      	strb	r3, [r7, #15]
    break;
 8007822:	e002      	b.n	800782a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8007824:	2302      	movs	r3, #2
 8007826:	73fb      	strb	r3, [r7, #15]
    break;
 8007828:	bf00      	nop
  }
  return usb_status;
 800782a:	7bfb      	ldrb	r3, [r7, #15]
}
 800782c:	4618      	mov	r0, r3
 800782e:	3714      	adds	r7, #20
 8007830:	46bd      	mov	sp, r7
 8007832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007836:	4770      	bx	lr

08007838 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 8007838:	b580      	push	{r7, lr}
 800783a:	b084      	sub	sp, #16
 800783c:	af00      	add	r7, sp, #0
 800783e:	4603      	mov	r3, r0
 8007840:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 8007842:	79fb      	ldrb	r3, [r7, #7]
 8007844:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8007846:	79fb      	ldrb	r3, [r7, #7]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d102      	bne.n	8007852 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 800784c:	2301      	movs	r3, #1
 800784e:	73fb      	strb	r3, [r7, #15]
 8007850:	e001      	b.n	8007856 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8007852:	2300      	movs	r3, #0
 8007854:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8007856:	7bfb      	ldrb	r3, [r7, #15]
 8007858:	461a      	mov	r2, r3
 800785a:	2101      	movs	r1, #1
 800785c:	4803      	ldr	r0, [pc, #12]	; (800786c <MX_DriverVbusFS+0x34>)
 800785e:	f7f9 fde9 	bl	8001434 <HAL_GPIO_WritePin>
}
 8007862:	bf00      	nop
 8007864:	3710      	adds	r7, #16
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}
 800786a:	bf00      	nop
 800786c:	40020800 	.word	0x40020800

08007870 <__errno>:
 8007870:	4b01      	ldr	r3, [pc, #4]	; (8007878 <__errno+0x8>)
 8007872:	6818      	ldr	r0, [r3, #0]
 8007874:	4770      	bx	lr
 8007876:	bf00      	nop
 8007878:	2000002c 	.word	0x2000002c

0800787c <__libc_init_array>:
 800787c:	b570      	push	{r4, r5, r6, lr}
 800787e:	4e0d      	ldr	r6, [pc, #52]	; (80078b4 <__libc_init_array+0x38>)
 8007880:	4c0d      	ldr	r4, [pc, #52]	; (80078b8 <__libc_init_array+0x3c>)
 8007882:	1ba4      	subs	r4, r4, r6
 8007884:	10a4      	asrs	r4, r4, #2
 8007886:	2500      	movs	r5, #0
 8007888:	42a5      	cmp	r5, r4
 800788a:	d109      	bne.n	80078a0 <__libc_init_array+0x24>
 800788c:	4e0b      	ldr	r6, [pc, #44]	; (80078bc <__libc_init_array+0x40>)
 800788e:	4c0c      	ldr	r4, [pc, #48]	; (80078c0 <__libc_init_array+0x44>)
 8007890:	f000 f8ea 	bl	8007a68 <_init>
 8007894:	1ba4      	subs	r4, r4, r6
 8007896:	10a4      	asrs	r4, r4, #2
 8007898:	2500      	movs	r5, #0
 800789a:	42a5      	cmp	r5, r4
 800789c:	d105      	bne.n	80078aa <__libc_init_array+0x2e>
 800789e:	bd70      	pop	{r4, r5, r6, pc}
 80078a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80078a4:	4798      	blx	r3
 80078a6:	3501      	adds	r5, #1
 80078a8:	e7ee      	b.n	8007888 <__libc_init_array+0xc>
 80078aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80078ae:	4798      	blx	r3
 80078b0:	3501      	adds	r5, #1
 80078b2:	e7f2      	b.n	800789a <__libc_init_array+0x1e>
 80078b4:	08007aa4 	.word	0x08007aa4
 80078b8:	08007aa4 	.word	0x08007aa4
 80078bc:	08007aa4 	.word	0x08007aa4
 80078c0:	08007aa8 	.word	0x08007aa8

080078c4 <malloc>:
 80078c4:	4b02      	ldr	r3, [pc, #8]	; (80078d0 <malloc+0xc>)
 80078c6:	4601      	mov	r1, r0
 80078c8:	6818      	ldr	r0, [r3, #0]
 80078ca:	f000 b861 	b.w	8007990 <_malloc_r>
 80078ce:	bf00      	nop
 80078d0:	2000002c 	.word	0x2000002c

080078d4 <free>:
 80078d4:	4b02      	ldr	r3, [pc, #8]	; (80078e0 <free+0xc>)
 80078d6:	4601      	mov	r1, r0
 80078d8:	6818      	ldr	r0, [r3, #0]
 80078da:	f000 b80b 	b.w	80078f4 <_free_r>
 80078de:	bf00      	nop
 80078e0:	2000002c 	.word	0x2000002c

080078e4 <memset>:
 80078e4:	4402      	add	r2, r0
 80078e6:	4603      	mov	r3, r0
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d100      	bne.n	80078ee <memset+0xa>
 80078ec:	4770      	bx	lr
 80078ee:	f803 1b01 	strb.w	r1, [r3], #1
 80078f2:	e7f9      	b.n	80078e8 <memset+0x4>

080078f4 <_free_r>:
 80078f4:	b538      	push	{r3, r4, r5, lr}
 80078f6:	4605      	mov	r5, r0
 80078f8:	2900      	cmp	r1, #0
 80078fa:	d045      	beq.n	8007988 <_free_r+0x94>
 80078fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007900:	1f0c      	subs	r4, r1, #4
 8007902:	2b00      	cmp	r3, #0
 8007904:	bfb8      	it	lt
 8007906:	18e4      	addlt	r4, r4, r3
 8007908:	f000 f8ac 	bl	8007a64 <__malloc_lock>
 800790c:	4a1f      	ldr	r2, [pc, #124]	; (800798c <_free_r+0x98>)
 800790e:	6813      	ldr	r3, [r2, #0]
 8007910:	4610      	mov	r0, r2
 8007912:	b933      	cbnz	r3, 8007922 <_free_r+0x2e>
 8007914:	6063      	str	r3, [r4, #4]
 8007916:	6014      	str	r4, [r2, #0]
 8007918:	4628      	mov	r0, r5
 800791a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800791e:	f000 b8a2 	b.w	8007a66 <__malloc_unlock>
 8007922:	42a3      	cmp	r3, r4
 8007924:	d90c      	bls.n	8007940 <_free_r+0x4c>
 8007926:	6821      	ldr	r1, [r4, #0]
 8007928:	1862      	adds	r2, r4, r1
 800792a:	4293      	cmp	r3, r2
 800792c:	bf04      	itt	eq
 800792e:	681a      	ldreq	r2, [r3, #0]
 8007930:	685b      	ldreq	r3, [r3, #4]
 8007932:	6063      	str	r3, [r4, #4]
 8007934:	bf04      	itt	eq
 8007936:	1852      	addeq	r2, r2, r1
 8007938:	6022      	streq	r2, [r4, #0]
 800793a:	6004      	str	r4, [r0, #0]
 800793c:	e7ec      	b.n	8007918 <_free_r+0x24>
 800793e:	4613      	mov	r3, r2
 8007940:	685a      	ldr	r2, [r3, #4]
 8007942:	b10a      	cbz	r2, 8007948 <_free_r+0x54>
 8007944:	42a2      	cmp	r2, r4
 8007946:	d9fa      	bls.n	800793e <_free_r+0x4a>
 8007948:	6819      	ldr	r1, [r3, #0]
 800794a:	1858      	adds	r0, r3, r1
 800794c:	42a0      	cmp	r0, r4
 800794e:	d10b      	bne.n	8007968 <_free_r+0x74>
 8007950:	6820      	ldr	r0, [r4, #0]
 8007952:	4401      	add	r1, r0
 8007954:	1858      	adds	r0, r3, r1
 8007956:	4282      	cmp	r2, r0
 8007958:	6019      	str	r1, [r3, #0]
 800795a:	d1dd      	bne.n	8007918 <_free_r+0x24>
 800795c:	6810      	ldr	r0, [r2, #0]
 800795e:	6852      	ldr	r2, [r2, #4]
 8007960:	605a      	str	r2, [r3, #4]
 8007962:	4401      	add	r1, r0
 8007964:	6019      	str	r1, [r3, #0]
 8007966:	e7d7      	b.n	8007918 <_free_r+0x24>
 8007968:	d902      	bls.n	8007970 <_free_r+0x7c>
 800796a:	230c      	movs	r3, #12
 800796c:	602b      	str	r3, [r5, #0]
 800796e:	e7d3      	b.n	8007918 <_free_r+0x24>
 8007970:	6820      	ldr	r0, [r4, #0]
 8007972:	1821      	adds	r1, r4, r0
 8007974:	428a      	cmp	r2, r1
 8007976:	bf04      	itt	eq
 8007978:	6811      	ldreq	r1, [r2, #0]
 800797a:	6852      	ldreq	r2, [r2, #4]
 800797c:	6062      	str	r2, [r4, #4]
 800797e:	bf04      	itt	eq
 8007980:	1809      	addeq	r1, r1, r0
 8007982:	6021      	streq	r1, [r4, #0]
 8007984:	605c      	str	r4, [r3, #4]
 8007986:	e7c7      	b.n	8007918 <_free_r+0x24>
 8007988:	bd38      	pop	{r3, r4, r5, pc}
 800798a:	bf00      	nop
 800798c:	200000b8 	.word	0x200000b8

08007990 <_malloc_r>:
 8007990:	b570      	push	{r4, r5, r6, lr}
 8007992:	1ccd      	adds	r5, r1, #3
 8007994:	f025 0503 	bic.w	r5, r5, #3
 8007998:	3508      	adds	r5, #8
 800799a:	2d0c      	cmp	r5, #12
 800799c:	bf38      	it	cc
 800799e:	250c      	movcc	r5, #12
 80079a0:	2d00      	cmp	r5, #0
 80079a2:	4606      	mov	r6, r0
 80079a4:	db01      	blt.n	80079aa <_malloc_r+0x1a>
 80079a6:	42a9      	cmp	r1, r5
 80079a8:	d903      	bls.n	80079b2 <_malloc_r+0x22>
 80079aa:	230c      	movs	r3, #12
 80079ac:	6033      	str	r3, [r6, #0]
 80079ae:	2000      	movs	r0, #0
 80079b0:	bd70      	pop	{r4, r5, r6, pc}
 80079b2:	f000 f857 	bl	8007a64 <__malloc_lock>
 80079b6:	4a21      	ldr	r2, [pc, #132]	; (8007a3c <_malloc_r+0xac>)
 80079b8:	6814      	ldr	r4, [r2, #0]
 80079ba:	4621      	mov	r1, r4
 80079bc:	b991      	cbnz	r1, 80079e4 <_malloc_r+0x54>
 80079be:	4c20      	ldr	r4, [pc, #128]	; (8007a40 <_malloc_r+0xb0>)
 80079c0:	6823      	ldr	r3, [r4, #0]
 80079c2:	b91b      	cbnz	r3, 80079cc <_malloc_r+0x3c>
 80079c4:	4630      	mov	r0, r6
 80079c6:	f000 f83d 	bl	8007a44 <_sbrk_r>
 80079ca:	6020      	str	r0, [r4, #0]
 80079cc:	4629      	mov	r1, r5
 80079ce:	4630      	mov	r0, r6
 80079d0:	f000 f838 	bl	8007a44 <_sbrk_r>
 80079d4:	1c43      	adds	r3, r0, #1
 80079d6:	d124      	bne.n	8007a22 <_malloc_r+0x92>
 80079d8:	230c      	movs	r3, #12
 80079da:	6033      	str	r3, [r6, #0]
 80079dc:	4630      	mov	r0, r6
 80079de:	f000 f842 	bl	8007a66 <__malloc_unlock>
 80079e2:	e7e4      	b.n	80079ae <_malloc_r+0x1e>
 80079e4:	680b      	ldr	r3, [r1, #0]
 80079e6:	1b5b      	subs	r3, r3, r5
 80079e8:	d418      	bmi.n	8007a1c <_malloc_r+0x8c>
 80079ea:	2b0b      	cmp	r3, #11
 80079ec:	d90f      	bls.n	8007a0e <_malloc_r+0x7e>
 80079ee:	600b      	str	r3, [r1, #0]
 80079f0:	50cd      	str	r5, [r1, r3]
 80079f2:	18cc      	adds	r4, r1, r3
 80079f4:	4630      	mov	r0, r6
 80079f6:	f000 f836 	bl	8007a66 <__malloc_unlock>
 80079fa:	f104 000b 	add.w	r0, r4, #11
 80079fe:	1d23      	adds	r3, r4, #4
 8007a00:	f020 0007 	bic.w	r0, r0, #7
 8007a04:	1ac3      	subs	r3, r0, r3
 8007a06:	d0d3      	beq.n	80079b0 <_malloc_r+0x20>
 8007a08:	425a      	negs	r2, r3
 8007a0a:	50e2      	str	r2, [r4, r3]
 8007a0c:	e7d0      	b.n	80079b0 <_malloc_r+0x20>
 8007a0e:	428c      	cmp	r4, r1
 8007a10:	684b      	ldr	r3, [r1, #4]
 8007a12:	bf16      	itet	ne
 8007a14:	6063      	strne	r3, [r4, #4]
 8007a16:	6013      	streq	r3, [r2, #0]
 8007a18:	460c      	movne	r4, r1
 8007a1a:	e7eb      	b.n	80079f4 <_malloc_r+0x64>
 8007a1c:	460c      	mov	r4, r1
 8007a1e:	6849      	ldr	r1, [r1, #4]
 8007a20:	e7cc      	b.n	80079bc <_malloc_r+0x2c>
 8007a22:	1cc4      	adds	r4, r0, #3
 8007a24:	f024 0403 	bic.w	r4, r4, #3
 8007a28:	42a0      	cmp	r0, r4
 8007a2a:	d005      	beq.n	8007a38 <_malloc_r+0xa8>
 8007a2c:	1a21      	subs	r1, r4, r0
 8007a2e:	4630      	mov	r0, r6
 8007a30:	f000 f808 	bl	8007a44 <_sbrk_r>
 8007a34:	3001      	adds	r0, #1
 8007a36:	d0cf      	beq.n	80079d8 <_malloc_r+0x48>
 8007a38:	6025      	str	r5, [r4, #0]
 8007a3a:	e7db      	b.n	80079f4 <_malloc_r+0x64>
 8007a3c:	200000b8 	.word	0x200000b8
 8007a40:	200000bc 	.word	0x200000bc

08007a44 <_sbrk_r>:
 8007a44:	b538      	push	{r3, r4, r5, lr}
 8007a46:	4c06      	ldr	r4, [pc, #24]	; (8007a60 <_sbrk_r+0x1c>)
 8007a48:	2300      	movs	r3, #0
 8007a4a:	4605      	mov	r5, r0
 8007a4c:	4608      	mov	r0, r1
 8007a4e:	6023      	str	r3, [r4, #0]
 8007a50:	f7f9 f92c 	bl	8000cac <_sbrk>
 8007a54:	1c43      	adds	r3, r0, #1
 8007a56:	d102      	bne.n	8007a5e <_sbrk_r+0x1a>
 8007a58:	6823      	ldr	r3, [r4, #0]
 8007a5a:	b103      	cbz	r3, 8007a5e <_sbrk_r+0x1a>
 8007a5c:	602b      	str	r3, [r5, #0]
 8007a5e:	bd38      	pop	{r3, r4, r5, pc}
 8007a60:	20000854 	.word	0x20000854

08007a64 <__malloc_lock>:
 8007a64:	4770      	bx	lr

08007a66 <__malloc_unlock>:
 8007a66:	4770      	bx	lr

08007a68 <_init>:
 8007a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a6a:	bf00      	nop
 8007a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a6e:	bc08      	pop	{r3}
 8007a70:	469e      	mov	lr, r3
 8007a72:	4770      	bx	lr

08007a74 <_fini>:
 8007a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a76:	bf00      	nop
 8007a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a7a:	bc08      	pop	{r3}
 8007a7c:	469e      	mov	lr, r3
 8007a7e:	4770      	bx	lr
