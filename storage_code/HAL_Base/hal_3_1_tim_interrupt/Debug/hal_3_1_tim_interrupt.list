
hal_3_1_tim_interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f3c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080090c4  080090c4  000190c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080090e0  080090e0  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  080090e0  080090e0  000190e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080090e8  080090e8  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080090e8  080090e8  000190e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080090ec  080090ec  000190ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080090f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000854  20000090  08009180  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008e4  08009180  000208e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002193c  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000478f  00000000  00000000  000419fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001940  00000000  00000000  00046190  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001738  00000000  00000000  00047ad0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000264c9  00000000  00000000  00049208  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001821d  00000000  00000000  0006f6d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d48e1  00000000  00000000  000878ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015c1cf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006abc  00000000  00000000  0015c24c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080090ac 	.word	0x080090ac

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	080090ac 	.word	0x080090ac

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <MX_GPIO_Init>:
        * EXTI
     PC3   ------> I2S2_SD
     PB10   ------> I2S2_CK
*/
void MX_GPIO_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b08c      	sub	sp, #48	; 0x30
 80004cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ce:	f107 031c 	add.w	r3, r7, #28
 80004d2:	2200      	movs	r2, #0
 80004d4:	601a      	str	r2, [r3, #0]
 80004d6:	605a      	str	r2, [r3, #4]
 80004d8:	609a      	str	r2, [r3, #8]
 80004da:	60da      	str	r2, [r3, #12]
 80004dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004de:	2300      	movs	r3, #0
 80004e0:	61bb      	str	r3, [r7, #24]
 80004e2:	4b7c      	ldr	r3, [pc, #496]	; (80006d4 <MX_GPIO_Init+0x20c>)
 80004e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e6:	4a7b      	ldr	r2, [pc, #492]	; (80006d4 <MX_GPIO_Init+0x20c>)
 80004e8:	f043 0310 	orr.w	r3, r3, #16
 80004ec:	6313      	str	r3, [r2, #48]	; 0x30
 80004ee:	4b79      	ldr	r3, [pc, #484]	; (80006d4 <MX_GPIO_Init+0x20c>)
 80004f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f2:	f003 0310 	and.w	r3, r3, #16
 80004f6:	61bb      	str	r3, [r7, #24]
 80004f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004fa:	2300      	movs	r3, #0
 80004fc:	617b      	str	r3, [r7, #20]
 80004fe:	4b75      	ldr	r3, [pc, #468]	; (80006d4 <MX_GPIO_Init+0x20c>)
 8000500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000502:	4a74      	ldr	r2, [pc, #464]	; (80006d4 <MX_GPIO_Init+0x20c>)
 8000504:	f043 0304 	orr.w	r3, r3, #4
 8000508:	6313      	str	r3, [r2, #48]	; 0x30
 800050a:	4b72      	ldr	r3, [pc, #456]	; (80006d4 <MX_GPIO_Init+0x20c>)
 800050c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050e:	f003 0304 	and.w	r3, r3, #4
 8000512:	617b      	str	r3, [r7, #20]
 8000514:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000516:	2300      	movs	r3, #0
 8000518:	613b      	str	r3, [r7, #16]
 800051a:	4b6e      	ldr	r3, [pc, #440]	; (80006d4 <MX_GPIO_Init+0x20c>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051e:	4a6d      	ldr	r2, [pc, #436]	; (80006d4 <MX_GPIO_Init+0x20c>)
 8000520:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000524:	6313      	str	r3, [r2, #48]	; 0x30
 8000526:	4b6b      	ldr	r3, [pc, #428]	; (80006d4 <MX_GPIO_Init+0x20c>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800052e:	613b      	str	r3, [r7, #16]
 8000530:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000532:	2300      	movs	r3, #0
 8000534:	60fb      	str	r3, [r7, #12]
 8000536:	4b67      	ldr	r3, [pc, #412]	; (80006d4 <MX_GPIO_Init+0x20c>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053a:	4a66      	ldr	r2, [pc, #408]	; (80006d4 <MX_GPIO_Init+0x20c>)
 800053c:	f043 0301 	orr.w	r3, r3, #1
 8000540:	6313      	str	r3, [r2, #48]	; 0x30
 8000542:	4b64      	ldr	r3, [pc, #400]	; (80006d4 <MX_GPIO_Init+0x20c>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000546:	f003 0301 	and.w	r3, r3, #1
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800054e:	2300      	movs	r3, #0
 8000550:	60bb      	str	r3, [r7, #8]
 8000552:	4b60      	ldr	r3, [pc, #384]	; (80006d4 <MX_GPIO_Init+0x20c>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000556:	4a5f      	ldr	r2, [pc, #380]	; (80006d4 <MX_GPIO_Init+0x20c>)
 8000558:	f043 0302 	orr.w	r3, r3, #2
 800055c:	6313      	str	r3, [r2, #48]	; 0x30
 800055e:	4b5d      	ldr	r3, [pc, #372]	; (80006d4 <MX_GPIO_Init+0x20c>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000562:	f003 0302 	and.w	r3, r3, #2
 8000566:	60bb      	str	r3, [r7, #8]
 8000568:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800056a:	2300      	movs	r3, #0
 800056c:	607b      	str	r3, [r7, #4]
 800056e:	4b59      	ldr	r3, [pc, #356]	; (80006d4 <MX_GPIO_Init+0x20c>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000572:	4a58      	ldr	r2, [pc, #352]	; (80006d4 <MX_GPIO_Init+0x20c>)
 8000574:	f043 0308 	orr.w	r3, r3, #8
 8000578:	6313      	str	r3, [r2, #48]	; 0x30
 800057a:	4b56      	ldr	r3, [pc, #344]	; (80006d4 <MX_GPIO_Init+0x20c>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057e:	f003 0308 	and.w	r3, r3, #8
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|CS_I2C_SPI_Pin|GPIO_PIN_4|GPIO_PIN_5 
 8000586:	2200      	movs	r2, #0
 8000588:	f240 11fd 	movw	r1, #509	; 0x1fd
 800058c:	4852      	ldr	r0, [pc, #328]	; (80006d8 <MX_GPIO_Init+0x210>)
 800058e:	f001 f863 	bl	8001658 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_0, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000592:	2201      	movs	r2, #1
 8000594:	2101      	movs	r1, #1
 8000596:	4851      	ldr	r0, [pc, #324]	; (80006dc <MX_GPIO_Init+0x214>)
 8000598:	f001 f85e 	bl	8001658 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_5, GPIO_PIN_RESET);
 800059c:	2200      	movs	r2, #0
 800059e:	2121      	movs	r1, #33	; 0x21
 80005a0:	484f      	ldr	r0, [pc, #316]	; (80006e0 <MX_GPIO_Init+0x218>)
 80005a2:	f001 f859 	bl	8001658 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
 80005a6:	2200      	movs	r2, #0
 80005a8:	f24f 0110 	movw	r1, #61456	; 0xf010
 80005ac:	484d      	ldr	r0, [pc, #308]	; (80006e4 <MX_GPIO_Init+0x21c>)
 80005ae:	f001 f853 	bl	8001658 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PEPin PE4 PE5 
                           PE6 PE7 PE8 PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|CS_I2C_SPI_Pin|GPIO_PIN_4|GPIO_PIN_5 
 80005b2:	f240 13fd 	movw	r3, #509	; 0x1fd
 80005b6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b8:	2301      	movs	r3, #1
 80005ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005bc:	2300      	movs	r3, #0
 80005be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c0:	2300      	movs	r3, #0
 80005c2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005c4:	f107 031c 	add.w	r3, r7, #28
 80005c8:	4619      	mov	r1, r3
 80005ca:	4843      	ldr	r0, [pc, #268]	; (80006d8 <MX_GPIO_Init+0x210>)
 80005cc:	f000 feaa 	bl	8001324 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80005d0:	2301      	movs	r3, #1
 80005d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d4:	2301      	movs	r3, #1
 80005d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d8:	2300      	movs	r3, #0
 80005da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005dc:	2300      	movs	r3, #0
 80005de:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80005e0:	f107 031c 	add.w	r3, r7, #28
 80005e4:	4619      	mov	r1, r3
 80005e6:	483d      	ldr	r0, [pc, #244]	; (80006dc <MX_GPIO_Init+0x214>)
 80005e8:	f000 fe9c 	bl	8001324 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80005ec:	2308      	movs	r3, #8
 80005ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005f0:	2302      	movs	r3, #2
 80005f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f4:	2300      	movs	r3, #0
 80005f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f8:	2300      	movs	r3, #0
 80005fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80005fc:	2305      	movs	r3, #5
 80005fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000600:	f107 031c 	add.w	r3, r7, #28
 8000604:	4619      	mov	r1, r3
 8000606:	4835      	ldr	r0, [pc, #212]	; (80006dc <MX_GPIO_Init+0x214>)
 8000608:	f000 fe8c 	bl	8001324 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800060c:	2301      	movs	r3, #1
 800060e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000610:	4b35      	ldr	r3, [pc, #212]	; (80006e8 <MX_GPIO_Init+0x220>)
 8000612:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000614:	2300      	movs	r3, #0
 8000616:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000618:	f107 031c 	add.w	r3, r7, #28
 800061c:	4619      	mov	r1, r3
 800061e:	4833      	ldr	r0, [pc, #204]	; (80006ec <MX_GPIO_Init+0x224>)
 8000620:	f000 fe80 	bl	8001324 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5;
 8000624:	2321      	movs	r3, #33	; 0x21
 8000626:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000628:	2301      	movs	r3, #1
 800062a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062c:	2300      	movs	r3, #0
 800062e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000630:	2300      	movs	r3, #0
 8000632:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000634:	f107 031c 	add.w	r3, r7, #28
 8000638:	4619      	mov	r1, r3
 800063a:	4829      	ldr	r0, [pc, #164]	; (80006e0 <MX_GPIO_Init+0x218>)
 800063c:	f000 fe72 	bl	8001324 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000640:	2304      	movs	r3, #4
 8000642:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000644:	2300      	movs	r3, #0
 8000646:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000648:	2300      	movs	r3, #0
 800064a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800064c:	f107 031c 	add.w	r3, r7, #28
 8000650:	4619      	mov	r1, r3
 8000652:	4823      	ldr	r0, [pc, #140]	; (80006e0 <MX_GPIO_Init+0x218>)
 8000654:	f000 fe66 	bl	8001324 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000658:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800065c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800065e:	2302      	movs	r3, #2
 8000660:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000662:	2300      	movs	r3, #0
 8000664:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000666:	2300      	movs	r3, #0
 8000668:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800066a:	2305      	movs	r3, #5
 800066c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800066e:	f107 031c 	add.w	r3, r7, #28
 8000672:	4619      	mov	r1, r3
 8000674:	481a      	ldr	r0, [pc, #104]	; (80006e0 <MX_GPIO_Init+0x218>)
 8000676:	f000 fe55 	bl	8001324 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11 
                           PDPin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 800067a:	f44f 6372 	mov.w	r3, #3872	; 0xf20
 800067e:	61fb      	str	r3, [r7, #28]
                          |OTG_FS_OverCurrent_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000680:	2300      	movs	r3, #0
 8000682:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000684:	2300      	movs	r3, #0
 8000686:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000688:	f107 031c 	add.w	r3, r7, #28
 800068c:	4619      	mov	r1, r3
 800068e:	4815      	ldr	r0, [pc, #84]	; (80006e4 <MX_GPIO_Init+0x21c>)
 8000690:	f000 fe48 	bl	8001324 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 
                           PDPin */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
 8000694:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000698:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800069a:	2301      	movs	r3, #1
 800069c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069e:	2300      	movs	r3, #0
 80006a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a2:	2300      	movs	r3, #0
 80006a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006a6:	f107 031c 	add.w	r3, r7, #28
 80006aa:	4619      	mov	r1, r3
 80006ac:	480d      	ldr	r0, [pc, #52]	; (80006e4 <MX_GPIO_Init+0x21c>)
 80006ae:	f000 fe39 	bl	8001324 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80006b2:	2302      	movs	r3, #2
 80006b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80006b6:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <MX_GPIO_Init+0x220>)
 80006b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ba:	2300      	movs	r3, #0
 80006bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80006be:	f107 031c 	add.w	r3, r7, #28
 80006c2:	4619      	mov	r1, r3
 80006c4:	4804      	ldr	r0, [pc, #16]	; (80006d8 <MX_GPIO_Init+0x210>)
 80006c6:	f000 fe2d 	bl	8001324 <HAL_GPIO_Init>

}
 80006ca:	bf00      	nop
 80006cc:	3730      	adds	r7, #48	; 0x30
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40023800 	.word	0x40023800
 80006d8:	40021000 	.word	0x40021000
 80006dc:	40020800 	.word	0x40020800
 80006e0:	40020400 	.word	0x40020400
 80006e4:	40020c00 	.word	0x40020c00
 80006e8:	10120000 	.word	0x10120000
 80006ec:	40020000 	.word	0x40020000

080006f0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80006f4:	4b12      	ldr	r3, [pc, #72]	; (8000740 <MX_I2C1_Init+0x50>)
 80006f6:	4a13      	ldr	r2, [pc, #76]	; (8000744 <MX_I2C1_Init+0x54>)
 80006f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006fa:	4b11      	ldr	r3, [pc, #68]	; (8000740 <MX_I2C1_Init+0x50>)
 80006fc:	4a12      	ldr	r2, [pc, #72]	; (8000748 <MX_I2C1_Init+0x58>)
 80006fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000700:	4b0f      	ldr	r3, [pc, #60]	; (8000740 <MX_I2C1_Init+0x50>)
 8000702:	2200      	movs	r2, #0
 8000704:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000706:	4b0e      	ldr	r3, [pc, #56]	; (8000740 <MX_I2C1_Init+0x50>)
 8000708:	2200      	movs	r2, #0
 800070a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800070c:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <MX_I2C1_Init+0x50>)
 800070e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000712:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000714:	4b0a      	ldr	r3, [pc, #40]	; (8000740 <MX_I2C1_Init+0x50>)
 8000716:	2200      	movs	r2, #0
 8000718:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800071a:	4b09      	ldr	r3, [pc, #36]	; (8000740 <MX_I2C1_Init+0x50>)
 800071c:	2200      	movs	r2, #0
 800071e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000720:	4b07      	ldr	r3, [pc, #28]	; (8000740 <MX_I2C1_Init+0x50>)
 8000722:	2200      	movs	r2, #0
 8000724:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000726:	4b06      	ldr	r3, [pc, #24]	; (8000740 <MX_I2C1_Init+0x50>)
 8000728:	2200      	movs	r2, #0
 800072a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800072c:	4804      	ldr	r0, [pc, #16]	; (8000740 <MX_I2C1_Init+0x50>)
 800072e:	f002 fcb9 	bl	80030a4 <HAL_I2C_Init>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000738:	f000 f9fc 	bl	8000b34 <Error_Handler>
  }

}
 800073c:	bf00      	nop
 800073e:	bd80      	pop	{r7, pc}
 8000740:	200000c0 	.word	0x200000c0
 8000744:	40005400 	.word	0x40005400
 8000748:	000186a0 	.word	0x000186a0

0800074c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b08a      	sub	sp, #40	; 0x28
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000754:	f107 0314 	add.w	r3, r7, #20
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
 800075c:	605a      	str	r2, [r3, #4]
 800075e:	609a      	str	r2, [r3, #8]
 8000760:	60da      	str	r2, [r3, #12]
 8000762:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a19      	ldr	r2, [pc, #100]	; (80007d0 <HAL_I2C_MspInit+0x84>)
 800076a:	4293      	cmp	r3, r2
 800076c:	d12c      	bne.n	80007c8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	613b      	str	r3, [r7, #16]
 8000772:	4b18      	ldr	r3, [pc, #96]	; (80007d4 <HAL_I2C_MspInit+0x88>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a17      	ldr	r2, [pc, #92]	; (80007d4 <HAL_I2C_MspInit+0x88>)
 8000778:	f043 0302 	orr.w	r3, r3, #2
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b15      	ldr	r3, [pc, #84]	; (80007d4 <HAL_I2C_MspInit+0x88>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f003 0302 	and.w	r3, r3, #2
 8000786:	613b      	str	r3, [r7, #16]
 8000788:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800078a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800078e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000790:	2312      	movs	r3, #18
 8000792:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000794:	2301      	movs	r3, #1
 8000796:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000798:	2300      	movs	r3, #0
 800079a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800079c:	2304      	movs	r3, #4
 800079e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a0:	f107 0314 	add.w	r3, r7, #20
 80007a4:	4619      	mov	r1, r3
 80007a6:	480c      	ldr	r0, [pc, #48]	; (80007d8 <HAL_I2C_MspInit+0x8c>)
 80007a8:	f000 fdbc 	bl	8001324 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007ac:	2300      	movs	r3, #0
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	4b08      	ldr	r3, [pc, #32]	; (80007d4 <HAL_I2C_MspInit+0x88>)
 80007b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b4:	4a07      	ldr	r2, [pc, #28]	; (80007d4 <HAL_I2C_MspInit+0x88>)
 80007b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007ba:	6413      	str	r3, [r2, #64]	; 0x40
 80007bc:	4b05      	ldr	r3, [pc, #20]	; (80007d4 <HAL_I2C_MspInit+0x88>)
 80007be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007c4:	60fb      	str	r3, [r7, #12]
 80007c6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80007c8:	bf00      	nop
 80007ca:	3728      	adds	r7, #40	; 0x28
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	40005400 	.word	0x40005400
 80007d4:	40023800 	.word	0x40023800
 80007d8:	40020400 	.word	0x40020400

080007dc <MX_I2S3_Init>:

I2S_HandleTypeDef hi2s3;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0

  hi2s3.Instance = SPI3;
 80007e0:	4b13      	ldr	r3, [pc, #76]	; (8000830 <MX_I2S3_Init+0x54>)
 80007e2:	4a14      	ldr	r2, [pc, #80]	; (8000834 <MX_I2S3_Init+0x58>)
 80007e4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80007e6:	4b12      	ldr	r3, [pc, #72]	; (8000830 <MX_I2S3_Init+0x54>)
 80007e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007ec:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80007ee:	4b10      	ldr	r3, [pc, #64]	; (8000830 <MX_I2S3_Init+0x54>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007f4:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <MX_I2S3_Init+0x54>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80007fa:	4b0d      	ldr	r3, [pc, #52]	; (8000830 <MX_I2S3_Init+0x54>)
 80007fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000800:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000802:	4b0b      	ldr	r3, [pc, #44]	; (8000830 <MX_I2S3_Init+0x54>)
 8000804:	4a0c      	ldr	r2, [pc, #48]	; (8000838 <MX_I2S3_Init+0x5c>)
 8000806:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000808:	4b09      	ldr	r3, [pc, #36]	; (8000830 <MX_I2S3_Init+0x54>)
 800080a:	2200      	movs	r2, #0
 800080c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800080e:	4b08      	ldr	r3, [pc, #32]	; (8000830 <MX_I2S3_Init+0x54>)
 8000810:	2200      	movs	r2, #0
 8000812:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000814:	4b06      	ldr	r3, [pc, #24]	; (8000830 <MX_I2S3_Init+0x54>)
 8000816:	2200      	movs	r2, #0
 8000818:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800081a:	4805      	ldr	r0, [pc, #20]	; (8000830 <MX_I2S3_Init+0x54>)
 800081c:	f002 fd7a 	bl	8003314 <HAL_I2S_Init>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000826:	f000 f985 	bl	8000b34 <Error_Handler>
  }

}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	20000114 	.word	0x20000114
 8000834:	40003c00 	.word	0x40003c00
 8000838:	00017700 	.word	0x00017700

0800083c <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b08a      	sub	sp, #40	; 0x28
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000844:	f107 0314 	add.w	r3, r7, #20
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]
 800084e:	609a      	str	r2, [r3, #8]
 8000850:	60da      	str	r2, [r3, #12]
 8000852:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI3)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a28      	ldr	r2, [pc, #160]	; (80008fc <HAL_I2S_MspInit+0xc0>)
 800085a:	4293      	cmp	r3, r2
 800085c:	d14a      	bne.n	80008f4 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	613b      	str	r3, [r7, #16]
 8000862:	4b27      	ldr	r3, [pc, #156]	; (8000900 <HAL_I2S_MspInit+0xc4>)
 8000864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000866:	4a26      	ldr	r2, [pc, #152]	; (8000900 <HAL_I2S_MspInit+0xc4>)
 8000868:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800086c:	6413      	str	r3, [r2, #64]	; 0x40
 800086e:	4b24      	ldr	r3, [pc, #144]	; (8000900 <HAL_I2S_MspInit+0xc4>)
 8000870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000872:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000876:	613b      	str	r3, [r7, #16]
 8000878:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	60fb      	str	r3, [r7, #12]
 800087e:	4b20      	ldr	r3, [pc, #128]	; (8000900 <HAL_I2S_MspInit+0xc4>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a1f      	ldr	r2, [pc, #124]	; (8000900 <HAL_I2S_MspInit+0xc4>)
 8000884:	f043 0301 	orr.w	r3, r3, #1
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b1d      	ldr	r3, [pc, #116]	; (8000900 <HAL_I2S_MspInit+0xc4>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f003 0301 	and.w	r3, r3, #1
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	60bb      	str	r3, [r7, #8]
 800089a:	4b19      	ldr	r3, [pc, #100]	; (8000900 <HAL_I2S_MspInit+0xc4>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4a18      	ldr	r2, [pc, #96]	; (8000900 <HAL_I2S_MspInit+0xc4>)
 80008a0:	f043 0304 	orr.w	r3, r3, #4
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
 80008a6:	4b16      	ldr	r3, [pc, #88]	; (8000900 <HAL_I2S_MspInit+0xc4>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	f003 0304 	and.w	r3, r3, #4
 80008ae:	60bb      	str	r3, [r7, #8]
 80008b0:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008b2:	2310      	movs	r3, #16
 80008b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b6:	2302      	movs	r3, #2
 80008b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008be:	2300      	movs	r3, #0
 80008c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008c2:	2306      	movs	r3, #6
 80008c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80008c6:	f107 0314 	add.w	r3, r7, #20
 80008ca:	4619      	mov	r1, r3
 80008cc:	480d      	ldr	r0, [pc, #52]	; (8000904 <HAL_I2S_MspInit+0xc8>)
 80008ce:	f000 fd29 	bl	8001324 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80008d2:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80008d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d8:	2302      	movs	r3, #2
 80008da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e0:	2300      	movs	r3, #0
 80008e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008e4:	2306      	movs	r3, #6
 80008e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008e8:	f107 0314 	add.w	r3, r7, #20
 80008ec:	4619      	mov	r1, r3
 80008ee:	4806      	ldr	r0, [pc, #24]	; (8000908 <HAL_I2S_MspInit+0xcc>)
 80008f0:	f000 fd18 	bl	8001324 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80008f4:	bf00      	nop
 80008f6:	3728      	adds	r7, #40	; 0x28
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	40003c00 	.word	0x40003c00
 8000900:	40023800 	.word	0x40023800
 8000904:	40020000 	.word	0x40020000
 8000908:	40020800 	.word	0x40020800

0800090c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000912:	f000 fb3f 	bl	8000f94 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000916:	f000 f83b 	bl	8000990 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800091a:	f7ff fdd5 	bl	80004c8 <MX_GPIO_Init>
	MX_I2C1_Init();
 800091e:	f7ff fee7 	bl	80006f0 <MX_I2C1_Init>
	MX_I2S3_Init();
 8000922:	f7ff ff5b 	bl	80007dc <MX_I2S3_Init>
	MX_SPI1_Init();
 8000926:	f000 f90d 	bl	8000b44 <MX_SPI1_Init>
	MX_USB_HOST_Init();
 800092a:	f007 ffc3 	bl	80088b4 <MX_USB_HOST_Init>
	MX_USART2_UART_Init();
 800092e:	f000 fa95 	bl	8000e5c <MX_USART2_UART_Init>
	MX_TIM7_Init();
 8000932:	f000 fa3b 	bl	8000dac <MX_TIM7_Init>

	/* Initialize interrupts */
	MX_NVIC_Init();
 8000936:	f000 f8ad 	bl	8000a94 <MX_NVIC_Init>
	/* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800093a:	2201      	movs	r2, #1
 800093c:	2101      	movs	r1, #1
 800093e:	480e      	ldr	r0, [pc, #56]	; (8000978 <main+0x6c>)
 8000940:	f000 fe8a 	bl	8001658 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000944:	2201      	movs	r2, #1
 8000946:	2120      	movs	r1, #32
 8000948:	480b      	ldr	r0, [pc, #44]	; (8000978 <main+0x6c>)
 800094a:	f000 fe85 	bl	8001658 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 800094e:	2201      	movs	r2, #1
 8000950:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000954:	4809      	ldr	r0, [pc, #36]	; (800097c <main+0x70>)
 8000956:	f000 fe7f 	bl	8001658 <HAL_GPIO_WritePin>

	//UART2 RX Interrupt
	HAL_UART_Receive_IT(&huart2, &rx2_data, 10);
 800095a:	220a      	movs	r2, #10
 800095c:	4908      	ldr	r1, [pc, #32]	; (8000980 <main+0x74>)
 800095e:	4809      	ldr	r0, [pc, #36]	; (8000984 <main+0x78>)
 8000960:	f004 fb12 	bl	8004f88 <HAL_UART_Receive_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8000964:	4808      	ldr	r0, [pc, #32]	; (8000988 <main+0x7c>)
 8000966:	f003 ffa4 	bl	80048b2 <HAL_TIM_Base_Start_IT>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	uint8_t a = 'a';
 800096a:	2361      	movs	r3, #97	; 0x61
 800096c:	71fb      	strb	r3, [r7, #7]
	float f = 1.234;
 800096e:	4b07      	ldr	r3, [pc, #28]	; (800098c <main+0x80>)
 8000970:	603b      	str	r3, [r7, #0]

		//		if(HAL_UART_Receive(&huart2, &a, 1, 10) == HAL_OK) {
		//			HAL_UART_Transmit(&huart2, &a, 1, 10);
		//		}
		/* USER CODE END WHILE */
		MX_USB_HOST_Process();
 8000972:	f007 ffc5 	bl	8008900 <MX_USB_HOST_Process>
 8000976:	e7fc      	b.n	8000972 <main+0x66>
 8000978:	40020400 	.word	0x40020400
 800097c:	40020c00 	.word	0x40020c00
 8000980:	2000015c 	.word	0x2000015c
 8000984:	20000200 	.word	0x20000200
 8000988:	200001c0 	.word	0x200001c0
 800098c:	3f9df3b6 	.word	0x3f9df3b6

08000990 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b098      	sub	sp, #96	; 0x60
 8000994:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000996:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800099a:	2230      	movs	r2, #48	; 0x30
 800099c:	2100      	movs	r1, #0
 800099e:	4618      	mov	r0, r3
 80009a0:	f008 fac2 	bl	8008f28 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009a4:	f107 031c 	add.w	r3, r7, #28
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]
 80009b0:	60da      	str	r2, [r3, #12]
 80009b2:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009b4:	f107 030c 	add.w	r3, r7, #12
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	605a      	str	r2, [r3, #4]
 80009be:	609a      	str	r2, [r3, #8]
 80009c0:	60da      	str	r2, [r3, #12]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	60bb      	str	r3, [r7, #8]
 80009c6:	4b31      	ldr	r3, [pc, #196]	; (8000a8c <SystemClock_Config+0xfc>)
 80009c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ca:	4a30      	ldr	r2, [pc, #192]	; (8000a8c <SystemClock_Config+0xfc>)
 80009cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009d0:	6413      	str	r3, [r2, #64]	; 0x40
 80009d2:	4b2e      	ldr	r3, [pc, #184]	; (8000a8c <SystemClock_Config+0xfc>)
 80009d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009da:	60bb      	str	r3, [r7, #8]
 80009dc:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009de:	2300      	movs	r3, #0
 80009e0:	607b      	str	r3, [r7, #4]
 80009e2:	4b2b      	ldr	r3, [pc, #172]	; (8000a90 <SystemClock_Config+0x100>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4a2a      	ldr	r2, [pc, #168]	; (8000a90 <SystemClock_Config+0x100>)
 80009e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ec:	6013      	str	r3, [r2, #0]
 80009ee:	4b28      	ldr	r3, [pc, #160]	; (8000a90 <SystemClock_Config+0x100>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009f6:	607b      	str	r3, [r7, #4]
 80009f8:	687b      	ldr	r3, [r7, #4]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009fa:	2301      	movs	r3, #1
 80009fc:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a02:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a04:	2302      	movs	r3, #2
 8000a06:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a08:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a0c:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000a0e:	2308      	movs	r3, #8
 8000a10:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000a12:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a16:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a1c:	2307      	movs	r3, #7
 8000a1e:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a20:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a24:	4618      	mov	r0, r3
 8000a26:	f003 f915 	bl	8003c54 <HAL_RCC_OscConfig>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <SystemClock_Config+0xa4>
	{
		Error_Handler();
 8000a30:	f000 f880 	bl	8000b34 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a34:	230f      	movs	r3, #15
 8000a36:	61fb      	str	r3, [r7, #28]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a40:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a44:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a4a:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a4c:	f107 031c 	add.w	r3, r7, #28
 8000a50:	2105      	movs	r1, #5
 8000a52:	4618      	mov	r0, r3
 8000a54:	f003 fb6e 	bl	8004134 <HAL_RCC_ClockConfig>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <SystemClock_Config+0xd2>
	{
		Error_Handler();
 8000a5e:	f000 f869 	bl	8000b34 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000a62:	2301      	movs	r3, #1
 8000a64:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000a66:	23c0      	movs	r3, #192	; 0xc0
 8000a68:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	617b      	str	r3, [r7, #20]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a6e:	f107 030c 	add.w	r3, r7, #12
 8000a72:	4618      	mov	r0, r3
 8000a74:	f003 fd50 	bl	8004518 <HAL_RCCEx_PeriphCLKConfig>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <SystemClock_Config+0xf2>
	{
		Error_Handler();
 8000a7e:	f000 f859 	bl	8000b34 <Error_Handler>
	}
}
 8000a82:	bf00      	nop
 8000a84:	3760      	adds	r7, #96	; 0x60
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40023800 	.word	0x40023800
 8000a90:	40007000 	.word	0x40007000

08000a94 <MX_NVIC_Init>:
/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
	/* USART2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	2026      	movs	r0, #38	; 0x26
 8000a9e:	f000 fbe8 	bl	8001272 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000aa2:	2026      	movs	r0, #38	; 0x26
 8000aa4:	f000 fc01 	bl	80012aa <HAL_NVIC_EnableIRQ>
	/* OTG_FS_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	2100      	movs	r1, #0
 8000aac:	2043      	movs	r0, #67	; 0x43
 8000aae:	f000 fbe0 	bl	8001272 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8000ab2:	2043      	movs	r0, #67	; 0x43
 8000ab4:	f000 fbf9 	bl	80012aa <HAL_NVIC_EnableIRQ>
	/* TIM7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	2100      	movs	r1, #0
 8000abc:	2037      	movs	r0, #55	; 0x37
 8000abe:	f000 fbd8 	bl	8001272 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000ac2:	2037      	movs	r0, #55	; 0x37
 8000ac4:	f000 fbf1 	bl	80012aa <HAL_NVIC_EnableIRQ>
}
 8000ac8:	bf00      	nop
 8000aca:	bd80      	pop	{r7, pc}

08000acc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
	if (huart -> Instance == USART2) {
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a08      	ldr	r2, [pc, #32]	; (8000afc <HAL_UART_RxCpltCallback+0x30>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d10a      	bne.n	8000af4 <HAL_UART_RxCpltCallback+0x28>
		HAL_UART_Receive_IT(&huart2, &rx2_data, 10);
 8000ade:	220a      	movs	r2, #10
 8000ae0:	4907      	ldr	r1, [pc, #28]	; (8000b00 <HAL_UART_RxCpltCallback+0x34>)
 8000ae2:	4808      	ldr	r0, [pc, #32]	; (8000b04 <HAL_UART_RxCpltCallback+0x38>)
 8000ae4:	f004 fa50 	bl	8004f88 <HAL_UART_Receive_IT>
		HAL_UART_Transmit(&huart2, &rx2_data, 1, 10);
 8000ae8:	230a      	movs	r3, #10
 8000aea:	2201      	movs	r2, #1
 8000aec:	4904      	ldr	r1, [pc, #16]	; (8000b00 <HAL_UART_RxCpltCallback+0x34>)
 8000aee:	4805      	ldr	r0, [pc, #20]	; (8000b04 <HAL_UART_RxCpltCallback+0x38>)
 8000af0:	f004 f9b1 	bl	8004e56 <HAL_UART_Transmit>
	}
}
 8000af4:	bf00      	nop
 8000af6:	3708      	adds	r7, #8
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	40004400 	.word	0x40004400
 8000b00:	2000015c 	.word	0x2000015c
 8000b04:	20000200 	.word	0x20000200

08000b08 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
	if (htim -> Instance == TIM7) {
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a05      	ldr	r2, [pc, #20]	; (8000b2c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d104      	bne.n	8000b24 <HAL_TIM_PeriodElapsedCallback+0x1c>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000b1a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b1e:	4804      	ldr	r0, [pc, #16]	; (8000b30 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000b20:	f000 fdb3 	bl	800168a <HAL_GPIO_TogglePin>
	}
}
 8000b24:	bf00      	nop
 8000b26:	3708      	adds	r7, #8
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	40001400 	.word	0x40001400
 8000b30:	40020c00 	.word	0x40020c00

08000b34 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000b38:	bf00      	nop
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
	...

08000b44 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000b48:	4b17      	ldr	r3, [pc, #92]	; (8000ba8 <MX_SPI1_Init+0x64>)
 8000b4a:	4a18      	ldr	r2, [pc, #96]	; (8000bac <MX_SPI1_Init+0x68>)
 8000b4c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b4e:	4b16      	ldr	r3, [pc, #88]	; (8000ba8 <MX_SPI1_Init+0x64>)
 8000b50:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b54:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b56:	4b14      	ldr	r3, [pc, #80]	; (8000ba8 <MX_SPI1_Init+0x64>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b5c:	4b12      	ldr	r3, [pc, #72]	; (8000ba8 <MX_SPI1_Init+0x64>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b62:	4b11      	ldr	r3, [pc, #68]	; (8000ba8 <MX_SPI1_Init+0x64>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b68:	4b0f      	ldr	r3, [pc, #60]	; (8000ba8 <MX_SPI1_Init+0x64>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ba8 <MX_SPI1_Init+0x64>)
 8000b70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b74:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b76:	4b0c      	ldr	r3, [pc, #48]	; (8000ba8 <MX_SPI1_Init+0x64>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b7c:	4b0a      	ldr	r3, [pc, #40]	; (8000ba8 <MX_SPI1_Init+0x64>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b82:	4b09      	ldr	r3, [pc, #36]	; (8000ba8 <MX_SPI1_Init+0x64>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b88:	4b07      	ldr	r3, [pc, #28]	; (8000ba8 <MX_SPI1_Init+0x64>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b8e:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <MX_SPI1_Init+0x64>)
 8000b90:	220a      	movs	r2, #10
 8000b92:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b94:	4804      	ldr	r0, [pc, #16]	; (8000ba8 <MX_SPI1_Init+0x64>)
 8000b96:	f003 fdfd 	bl	8004794 <HAL_SPI_Init>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000ba0:	f7ff ffc8 	bl	8000b34 <Error_Handler>
  }

}
 8000ba4:	bf00      	nop
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	20000168 	.word	0x20000168
 8000bac:	40013000 	.word	0x40013000

08000bb0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08a      	sub	sp, #40	; 0x28
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb8:	f107 0314 	add.w	r3, r7, #20
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]
 8000bc6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a19      	ldr	r2, [pc, #100]	; (8000c34 <HAL_SPI_MspInit+0x84>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d12b      	bne.n	8000c2a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	613b      	str	r3, [r7, #16]
 8000bd6:	4b18      	ldr	r3, [pc, #96]	; (8000c38 <HAL_SPI_MspInit+0x88>)
 8000bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bda:	4a17      	ldr	r2, [pc, #92]	; (8000c38 <HAL_SPI_MspInit+0x88>)
 8000bdc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000be0:	6453      	str	r3, [r2, #68]	; 0x44
 8000be2:	4b15      	ldr	r3, [pc, #84]	; (8000c38 <HAL_SPI_MspInit+0x88>)
 8000be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000be6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bea:	613b      	str	r3, [r7, #16]
 8000bec:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	60fb      	str	r3, [r7, #12]
 8000bf2:	4b11      	ldr	r3, [pc, #68]	; (8000c38 <HAL_SPI_MspInit+0x88>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	4a10      	ldr	r2, [pc, #64]	; (8000c38 <HAL_SPI_MspInit+0x88>)
 8000bf8:	f043 0301 	orr.w	r3, r3, #1
 8000bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfe:	4b0e      	ldr	r3, [pc, #56]	; (8000c38 <HAL_SPI_MspInit+0x88>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	f003 0301 	and.w	r3, r3, #1
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c0a:	23e0      	movs	r3, #224	; 0xe0
 8000c0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c16:	2300      	movs	r3, #0
 8000c18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c1a:	2305      	movs	r3, #5
 8000c1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1e:	f107 0314 	add.w	r3, r7, #20
 8000c22:	4619      	mov	r1, r3
 8000c24:	4805      	ldr	r0, [pc, #20]	; (8000c3c <HAL_SPI_MspInit+0x8c>)
 8000c26:	f000 fb7d 	bl	8001324 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000c2a:	bf00      	nop
 8000c2c:	3728      	adds	r7, #40	; 0x28
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40013000 	.word	0x40013000
 8000c38:	40023800 	.word	0x40023800
 8000c3c:	40020000 	.word	0x40020000

08000c40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	607b      	str	r3, [r7, #4]
 8000c4a:	4b10      	ldr	r3, [pc, #64]	; (8000c8c <HAL_MspInit+0x4c>)
 8000c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4e:	4a0f      	ldr	r2, [pc, #60]	; (8000c8c <HAL_MspInit+0x4c>)
 8000c50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c54:	6453      	str	r3, [r2, #68]	; 0x44
 8000c56:	4b0d      	ldr	r3, [pc, #52]	; (8000c8c <HAL_MspInit+0x4c>)
 8000c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c5e:	607b      	str	r3, [r7, #4]
 8000c60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	603b      	str	r3, [r7, #0]
 8000c66:	4b09      	ldr	r3, [pc, #36]	; (8000c8c <HAL_MspInit+0x4c>)
 8000c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6a:	4a08      	ldr	r2, [pc, #32]	; (8000c8c <HAL_MspInit+0x4c>)
 8000c6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c70:	6413      	str	r3, [r2, #64]	; 0x40
 8000c72:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <HAL_MspInit+0x4c>)
 8000c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c7a:	603b      	str	r3, [r7, #0]
 8000c7c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c7e:	2007      	movs	r0, #7
 8000c80:	f000 faec 	bl	800125c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c84:	bf00      	nop
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	40023800 	.word	0x40023800

08000c90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr

08000c9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ca2:	e7fe      	b.n	8000ca2 <HardFault_Handler+0x4>

08000ca4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ca8:	e7fe      	b.n	8000ca8 <MemManage_Handler+0x4>

08000caa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cae:	e7fe      	b.n	8000cae <BusFault_Handler+0x4>

08000cb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cb4:	e7fe      	b.n	8000cb4 <UsageFault_Handler+0x4>

08000cb6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr

08000cc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cc8:	bf00      	nop
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr

08000cd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr

08000ce0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ce4:	f000 f9a8 	bl	8001038 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ce8:	bf00      	nop
 8000cea:	bd80      	pop	{r7, pc}

08000cec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000cf0:	4802      	ldr	r0, [pc, #8]	; (8000cfc <USART2_IRQHandler+0x10>)
 8000cf2:	f004 f99f 	bl	8005034 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	20000200 	.word	0x20000200

08000d00 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000d04:	4802      	ldr	r0, [pc, #8]	; (8000d10 <TIM7_IRQHandler+0x10>)
 8000d06:	f003 fdf8 	bl	80048fa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	200001c0 	.word	0x200001c0

08000d14 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000d18:	4802      	ldr	r0, [pc, #8]	; (8000d24 <OTG_FS_IRQHandler+0x10>)
 8000d1a:	f000 ff61 	bl	8001be0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	2000061c 	.word	0x2000061c

08000d28 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b084      	sub	sp, #16
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000d30:	4b11      	ldr	r3, [pc, #68]	; (8000d78 <_sbrk+0x50>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d102      	bne.n	8000d3e <_sbrk+0x16>
		heap_end = &end;
 8000d38:	4b0f      	ldr	r3, [pc, #60]	; (8000d78 <_sbrk+0x50>)
 8000d3a:	4a10      	ldr	r2, [pc, #64]	; (8000d7c <_sbrk+0x54>)
 8000d3c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000d3e:	4b0e      	ldr	r3, [pc, #56]	; (8000d78 <_sbrk+0x50>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000d44:	4b0c      	ldr	r3, [pc, #48]	; (8000d78 <_sbrk+0x50>)
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	466a      	mov	r2, sp
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d907      	bls.n	8000d62 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000d52:	f008 f8af 	bl	8008eb4 <__errno>
 8000d56:	4602      	mov	r2, r0
 8000d58:	230c      	movs	r3, #12
 8000d5a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000d5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d60:	e006      	b.n	8000d70 <_sbrk+0x48>
	}

	heap_end += incr;
 8000d62:	4b05      	ldr	r3, [pc, #20]	; (8000d78 <_sbrk+0x50>)
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4413      	add	r3, r2
 8000d6a:	4a03      	ldr	r2, [pc, #12]	; (8000d78 <_sbrk+0x50>)
 8000d6c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000d6e:	68fb      	ldr	r3, [r7, #12]
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3710      	adds	r7, #16
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	200000ac 	.word	0x200000ac
 8000d7c:	200008e8 	.word	0x200008e8

08000d80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d84:	4b08      	ldr	r3, [pc, #32]	; (8000da8 <SystemInit+0x28>)
 8000d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d8a:	4a07      	ldr	r2, [pc, #28]	; (8000da8 <SystemInit+0x28>)
 8000d8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d94:	4b04      	ldr	r3, [pc, #16]	; (8000da8 <SystemInit+0x28>)
 8000d96:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d9a:	609a      	str	r2, [r3, #8]
#endif
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000db2:	463b      	mov	r3, r7
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]

  htim7.Instance = TIM7;
 8000dba:	4b15      	ldr	r3, [pc, #84]	; (8000e10 <MX_TIM7_Init+0x64>)
 8000dbc:	4a15      	ldr	r2, [pc, #84]	; (8000e14 <MX_TIM7_Init+0x68>)
 8000dbe:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 9999;
 8000dc0:	4b13      	ldr	r3, [pc, #76]	; (8000e10 <MX_TIM7_Init+0x64>)
 8000dc2:	f242 720f 	movw	r2, #9999	; 0x270f
 8000dc6:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc8:	4b11      	ldr	r3, [pc, #68]	; (8000e10 <MX_TIM7_Init+0x64>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 8399;
 8000dce:	4b10      	ldr	r3, [pc, #64]	; (8000e10 <MX_TIM7_Init+0x64>)
 8000dd0:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000dd4:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dd6:	4b0e      	ldr	r3, [pc, #56]	; (8000e10 <MX_TIM7_Init+0x64>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000ddc:	480c      	ldr	r0, [pc, #48]	; (8000e10 <MX_TIM7_Init+0x64>)
 8000dde:	f003 fd3d 	bl	800485c <HAL_TIM_Base_Init>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000de8:	f7ff fea4 	bl	8000b34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dec:	2300      	movs	r3, #0
 8000dee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000df0:	2300      	movs	r3, #0
 8000df2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000df4:	463b      	mov	r3, r7
 8000df6:	4619      	mov	r1, r3
 8000df8:	4805      	ldr	r0, [pc, #20]	; (8000e10 <MX_TIM7_Init+0x64>)
 8000dfa:	f003 ff4f 	bl	8004c9c <HAL_TIMEx_MasterConfigSynchronization>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000e04:	f7ff fe96 	bl	8000b34 <Error_Handler>
  }

}
 8000e08:	bf00      	nop
 8000e0a:	3708      	adds	r7, #8
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	200001c0 	.word	0x200001c0
 8000e14:	40001400 	.word	0x40001400

08000e18 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b085      	sub	sp, #20
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a0b      	ldr	r2, [pc, #44]	; (8000e54 <HAL_TIM_Base_MspInit+0x3c>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d10d      	bne.n	8000e46 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60fb      	str	r3, [r7, #12]
 8000e2e:	4b0a      	ldr	r3, [pc, #40]	; (8000e58 <HAL_TIM_Base_MspInit+0x40>)
 8000e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e32:	4a09      	ldr	r2, [pc, #36]	; (8000e58 <HAL_TIM_Base_MspInit+0x40>)
 8000e34:	f043 0320 	orr.w	r3, r3, #32
 8000e38:	6413      	str	r3, [r2, #64]	; 0x40
 8000e3a:	4b07      	ldr	r3, [pc, #28]	; (8000e58 <HAL_TIM_Base_MspInit+0x40>)
 8000e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3e:	f003 0320 	and.w	r3, r3, #32
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8000e46:	bf00      	nop
 8000e48:	3714      	adds	r7, #20
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	40001400 	.word	0x40001400
 8000e58:	40023800 	.word	0x40023800

08000e5c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000e60:	4b11      	ldr	r3, [pc, #68]	; (8000ea8 <MX_USART2_UART_Init+0x4c>)
 8000e62:	4a12      	ldr	r2, [pc, #72]	; (8000eac <MX_USART2_UART_Init+0x50>)
 8000e64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e66:	4b10      	ldr	r3, [pc, #64]	; (8000ea8 <MX_USART2_UART_Init+0x4c>)
 8000e68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ea8 <MX_USART2_UART_Init+0x4c>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e74:	4b0c      	ldr	r3, [pc, #48]	; (8000ea8 <MX_USART2_UART_Init+0x4c>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ea8 <MX_USART2_UART_Init+0x4c>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e80:	4b09      	ldr	r3, [pc, #36]	; (8000ea8 <MX_USART2_UART_Init+0x4c>)
 8000e82:	220c      	movs	r2, #12
 8000e84:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e86:	4b08      	ldr	r3, [pc, #32]	; (8000ea8 <MX_USART2_UART_Init+0x4c>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e8c:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <MX_USART2_UART_Init+0x4c>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e92:	4805      	ldr	r0, [pc, #20]	; (8000ea8 <MX_USART2_UART_Init+0x4c>)
 8000e94:	f003 ff92 	bl	8004dbc <HAL_UART_Init>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e9e:	f7ff fe49 	bl	8000b34 <Error_Handler>
  }

}
 8000ea2:	bf00      	nop
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	20000200 	.word	0x20000200
 8000eac:	40004400 	.word	0x40004400

08000eb0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b08a      	sub	sp, #40	; 0x28
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb8:	f107 0314 	add.w	r3, r7, #20
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a19      	ldr	r2, [pc, #100]	; (8000f34 <HAL_UART_MspInit+0x84>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d12b      	bne.n	8000f2a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	613b      	str	r3, [r7, #16]
 8000ed6:	4b18      	ldr	r3, [pc, #96]	; (8000f38 <HAL_UART_MspInit+0x88>)
 8000ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eda:	4a17      	ldr	r2, [pc, #92]	; (8000f38 <HAL_UART_MspInit+0x88>)
 8000edc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ee0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ee2:	4b15      	ldr	r3, [pc, #84]	; (8000f38 <HAL_UART_MspInit+0x88>)
 8000ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eea:	613b      	str	r3, [r7, #16]
 8000eec:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60fb      	str	r3, [r7, #12]
 8000ef2:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <HAL_UART_MspInit+0x88>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	4a10      	ldr	r2, [pc, #64]	; (8000f38 <HAL_UART_MspInit+0x88>)
 8000ef8:	f043 0301 	orr.w	r3, r3, #1
 8000efc:	6313      	str	r3, [r2, #48]	; 0x30
 8000efe:	4b0e      	ldr	r3, [pc, #56]	; (8000f38 <HAL_UART_MspInit+0x88>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	f003 0301 	and.w	r3, r3, #1
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f0a:	230c      	movs	r3, #12
 8000f0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f12:	2300      	movs	r3, #0
 8000f14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f16:	2303      	movs	r3, #3
 8000f18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f1a:	2307      	movs	r3, #7
 8000f1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1e:	f107 0314 	add.w	r3, r7, #20
 8000f22:	4619      	mov	r1, r3
 8000f24:	4805      	ldr	r0, [pc, #20]	; (8000f3c <HAL_UART_MspInit+0x8c>)
 8000f26:	f000 f9fd 	bl	8001324 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000f2a:	bf00      	nop
 8000f2c:	3728      	adds	r7, #40	; 0x28
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	40004400 	.word	0x40004400
 8000f38:	40023800 	.word	0x40023800
 8000f3c:	40020000 	.word	0x40020000

08000f40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f78 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000f44:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000f46:	e003      	b.n	8000f50 <LoopCopyDataInit>

08000f48 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000f48:	4b0c      	ldr	r3, [pc, #48]	; (8000f7c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000f4a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000f4c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000f4e:	3104      	adds	r1, #4

08000f50 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000f50:	480b      	ldr	r0, [pc, #44]	; (8000f80 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000f52:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000f54:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000f56:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000f58:	d3f6      	bcc.n	8000f48 <CopyDataInit>
  ldr  r2, =_sbss
 8000f5a:	4a0b      	ldr	r2, [pc, #44]	; (8000f88 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000f5c:	e002      	b.n	8000f64 <LoopFillZerobss>

08000f5e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000f5e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000f60:	f842 3b04 	str.w	r3, [r2], #4

08000f64 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000f64:	4b09      	ldr	r3, [pc, #36]	; (8000f8c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000f66:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000f68:	d3f9      	bcc.n	8000f5e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f6a:	f7ff ff09 	bl	8000d80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f6e:	f007 ffa7 	bl	8008ec0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f72:	f7ff fccb 	bl	800090c <main>
  bx  lr    
 8000f76:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f78:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000f7c:	080090f0 	.word	0x080090f0
  ldr  r0, =_sdata
 8000f80:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000f84:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8000f88:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8000f8c:	200008e4 	.word	0x200008e4

08000f90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f90:	e7fe      	b.n	8000f90 <ADC_IRQHandler>
	...

08000f94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f98:	4b0e      	ldr	r3, [pc, #56]	; (8000fd4 <HAL_Init+0x40>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a0d      	ldr	r2, [pc, #52]	; (8000fd4 <HAL_Init+0x40>)
 8000f9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fa2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fa4:	4b0b      	ldr	r3, [pc, #44]	; (8000fd4 <HAL_Init+0x40>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a0a      	ldr	r2, [pc, #40]	; (8000fd4 <HAL_Init+0x40>)
 8000faa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fb0:	4b08      	ldr	r3, [pc, #32]	; (8000fd4 <HAL_Init+0x40>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a07      	ldr	r2, [pc, #28]	; (8000fd4 <HAL_Init+0x40>)
 8000fb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fbc:	2003      	movs	r0, #3
 8000fbe:	f000 f94d 	bl	800125c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fc2:	2000      	movs	r0, #0
 8000fc4:	f000 f808 	bl	8000fd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fc8:	f7ff fe3a 	bl	8000c40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fcc:	2300      	movs	r3, #0
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40023c00 	.word	0x40023c00

08000fd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fe0:	4b12      	ldr	r3, [pc, #72]	; (800102c <HAL_InitTick+0x54>)
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	4b12      	ldr	r3, [pc, #72]	; (8001030 <HAL_InitTick+0x58>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	4619      	mov	r1, r3
 8000fea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fee:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ff2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f000 f965 	bl	80012c6 <HAL_SYSTICK_Config>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	e00e      	b.n	8001024 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2b0f      	cmp	r3, #15
 800100a:	d80a      	bhi.n	8001022 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800100c:	2200      	movs	r2, #0
 800100e:	6879      	ldr	r1, [r7, #4]
 8001010:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001014:	f000 f92d 	bl	8001272 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001018:	4a06      	ldr	r2, [pc, #24]	; (8001034 <HAL_InitTick+0x5c>)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800101e:	2300      	movs	r3, #0
 8001020:	e000      	b.n	8001024 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
}
 8001024:	4618      	mov	r0, r3
 8001026:	3708      	adds	r7, #8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	20000000 	.word	0x20000000
 8001030:	20000008 	.word	0x20000008
 8001034:	20000004 	.word	0x20000004

08001038 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800103c:	4b06      	ldr	r3, [pc, #24]	; (8001058 <HAL_IncTick+0x20>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	461a      	mov	r2, r3
 8001042:	4b06      	ldr	r3, [pc, #24]	; (800105c <HAL_IncTick+0x24>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4413      	add	r3, r2
 8001048:	4a04      	ldr	r2, [pc, #16]	; (800105c <HAL_IncTick+0x24>)
 800104a:	6013      	str	r3, [r2, #0]
}
 800104c:	bf00      	nop
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	20000008 	.word	0x20000008
 800105c:	20000240 	.word	0x20000240

08001060 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  return uwTick;
 8001064:	4b03      	ldr	r3, [pc, #12]	; (8001074 <HAL_GetTick+0x14>)
 8001066:	681b      	ldr	r3, [r3, #0]
}
 8001068:	4618      	mov	r0, r3
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	20000240 	.word	0x20000240

08001078 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001080:	f7ff ffee 	bl	8001060 <HAL_GetTick>
 8001084:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001090:	d005      	beq.n	800109e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001092:	4b09      	ldr	r3, [pc, #36]	; (80010b8 <HAL_Delay+0x40>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	461a      	mov	r2, r3
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	4413      	add	r3, r2
 800109c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800109e:	bf00      	nop
 80010a0:	f7ff ffde 	bl	8001060 <HAL_GetTick>
 80010a4:	4602      	mov	r2, r0
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	68fa      	ldr	r2, [r7, #12]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	d8f7      	bhi.n	80010a0 <HAL_Delay+0x28>
  {
  }
}
 80010b0:	bf00      	nop
 80010b2:	3710      	adds	r7, #16
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	20000008 	.word	0x20000008

080010bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010bc:	b480      	push	{r7}
 80010be:	b085      	sub	sp, #20
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	f003 0307 	and.w	r3, r3, #7
 80010ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010cc:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <__NVIC_SetPriorityGrouping+0x44>)
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010d2:	68ba      	ldr	r2, [r7, #8]
 80010d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010d8:	4013      	ands	r3, r2
 80010da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ee:	4a04      	ldr	r2, [pc, #16]	; (8001100 <__NVIC_SetPriorityGrouping+0x44>)
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	60d3      	str	r3, [r2, #12]
}
 80010f4:	bf00      	nop
 80010f6:	3714      	adds	r7, #20
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr
 8001100:	e000ed00 	.word	0xe000ed00

08001104 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001108:	4b04      	ldr	r3, [pc, #16]	; (800111c <__NVIC_GetPriorityGrouping+0x18>)
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	0a1b      	lsrs	r3, r3, #8
 800110e:	f003 0307 	and.w	r3, r3, #7
}
 8001112:	4618      	mov	r0, r3
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	e000ed00 	.word	0xe000ed00

08001120 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800112a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112e:	2b00      	cmp	r3, #0
 8001130:	db0b      	blt.n	800114a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001132:	79fb      	ldrb	r3, [r7, #7]
 8001134:	f003 021f 	and.w	r2, r3, #31
 8001138:	4907      	ldr	r1, [pc, #28]	; (8001158 <__NVIC_EnableIRQ+0x38>)
 800113a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113e:	095b      	lsrs	r3, r3, #5
 8001140:	2001      	movs	r0, #1
 8001142:	fa00 f202 	lsl.w	r2, r0, r2
 8001146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800114a:	bf00      	nop
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	e000e100 	.word	0xe000e100

0800115c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	6039      	str	r1, [r7, #0]
 8001166:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116c:	2b00      	cmp	r3, #0
 800116e:	db0a      	blt.n	8001186 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	b2da      	uxtb	r2, r3
 8001174:	490c      	ldr	r1, [pc, #48]	; (80011a8 <__NVIC_SetPriority+0x4c>)
 8001176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117a:	0112      	lsls	r2, r2, #4
 800117c:	b2d2      	uxtb	r2, r2
 800117e:	440b      	add	r3, r1
 8001180:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001184:	e00a      	b.n	800119c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	b2da      	uxtb	r2, r3
 800118a:	4908      	ldr	r1, [pc, #32]	; (80011ac <__NVIC_SetPriority+0x50>)
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	f003 030f 	and.w	r3, r3, #15
 8001192:	3b04      	subs	r3, #4
 8001194:	0112      	lsls	r2, r2, #4
 8001196:	b2d2      	uxtb	r2, r2
 8001198:	440b      	add	r3, r1
 800119a:	761a      	strb	r2, [r3, #24]
}
 800119c:	bf00      	nop
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	e000e100 	.word	0xe000e100
 80011ac:	e000ed00 	.word	0xe000ed00

080011b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b089      	sub	sp, #36	; 0x24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	f003 0307 	and.w	r3, r3, #7
 80011c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	f1c3 0307 	rsb	r3, r3, #7
 80011ca:	2b04      	cmp	r3, #4
 80011cc:	bf28      	it	cs
 80011ce:	2304      	movcs	r3, #4
 80011d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	3304      	adds	r3, #4
 80011d6:	2b06      	cmp	r3, #6
 80011d8:	d902      	bls.n	80011e0 <NVIC_EncodePriority+0x30>
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	3b03      	subs	r3, #3
 80011de:	e000      	b.n	80011e2 <NVIC_EncodePriority+0x32>
 80011e0:	2300      	movs	r3, #0
 80011e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	43da      	mvns	r2, r3
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	401a      	ands	r2, r3
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001202:	43d9      	mvns	r1, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001208:	4313      	orrs	r3, r2
         );
}
 800120a:	4618      	mov	r0, r3
 800120c:	3724      	adds	r7, #36	; 0x24
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
	...

08001218 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	3b01      	subs	r3, #1
 8001224:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001228:	d301      	bcc.n	800122e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800122a:	2301      	movs	r3, #1
 800122c:	e00f      	b.n	800124e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800122e:	4a0a      	ldr	r2, [pc, #40]	; (8001258 <SysTick_Config+0x40>)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3b01      	subs	r3, #1
 8001234:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001236:	210f      	movs	r1, #15
 8001238:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800123c:	f7ff ff8e 	bl	800115c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001240:	4b05      	ldr	r3, [pc, #20]	; (8001258 <SysTick_Config+0x40>)
 8001242:	2200      	movs	r2, #0
 8001244:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001246:	4b04      	ldr	r3, [pc, #16]	; (8001258 <SysTick_Config+0x40>)
 8001248:	2207      	movs	r2, #7
 800124a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	e000e010 	.word	0xe000e010

0800125c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f7ff ff29 	bl	80010bc <__NVIC_SetPriorityGrouping>
}
 800126a:	bf00      	nop
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001272:	b580      	push	{r7, lr}
 8001274:	b086      	sub	sp, #24
 8001276:	af00      	add	r7, sp, #0
 8001278:	4603      	mov	r3, r0
 800127a:	60b9      	str	r1, [r7, #8]
 800127c:	607a      	str	r2, [r7, #4]
 800127e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001280:	2300      	movs	r3, #0
 8001282:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001284:	f7ff ff3e 	bl	8001104 <__NVIC_GetPriorityGrouping>
 8001288:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	68b9      	ldr	r1, [r7, #8]
 800128e:	6978      	ldr	r0, [r7, #20]
 8001290:	f7ff ff8e 	bl	80011b0 <NVIC_EncodePriority>
 8001294:	4602      	mov	r2, r0
 8001296:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800129a:	4611      	mov	r1, r2
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff ff5d 	bl	800115c <__NVIC_SetPriority>
}
 80012a2:	bf00      	nop
 80012a4:	3718      	adds	r7, #24
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b082      	sub	sp, #8
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	4603      	mov	r3, r0
 80012b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff ff31 	bl	8001120 <__NVIC_EnableIRQ>
}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b082      	sub	sp, #8
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f7ff ffa2 	bl	8001218 <SysTick_Config>
 80012d4:	4603      	mov	r3, r0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}

080012de <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012de:	b480      	push	{r7}
 80012e0:	b083      	sub	sp, #12
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	2b02      	cmp	r3, #2
 80012f0:	d004      	beq.n	80012fc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2280      	movs	r2, #128	; 0x80
 80012f6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80012f8:	2301      	movs	r3, #1
 80012fa:	e00c      	b.n	8001316 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2205      	movs	r2, #5
 8001300:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f022 0201 	bic.w	r2, r2, #1
 8001312:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001314:	2300      	movs	r3, #0
}
 8001316:	4618      	mov	r0, r3
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
	...

08001324 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001324:	b480      	push	{r7}
 8001326:	b089      	sub	sp, #36	; 0x24
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800132e:	2300      	movs	r3, #0
 8001330:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001332:	2300      	movs	r3, #0
 8001334:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001336:	2300      	movs	r3, #0
 8001338:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800133a:	2300      	movs	r3, #0
 800133c:	61fb      	str	r3, [r7, #28]
 800133e:	e16b      	b.n	8001618 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001340:	2201      	movs	r2, #1
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	697a      	ldr	r2, [r7, #20]
 8001350:	4013      	ands	r3, r2
 8001352:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001354:	693a      	ldr	r2, [r7, #16]
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	429a      	cmp	r2, r3
 800135a:	f040 815a 	bne.w	8001612 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	2b01      	cmp	r3, #1
 8001364:	d00b      	beq.n	800137e <HAL_GPIO_Init+0x5a>
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	2b02      	cmp	r3, #2
 800136c:	d007      	beq.n	800137e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001372:	2b11      	cmp	r3, #17
 8001374:	d003      	beq.n	800137e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	2b12      	cmp	r3, #18
 800137c:	d130      	bne.n	80013e0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	2203      	movs	r2, #3
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
 800138e:	43db      	mvns	r3, r3
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	4013      	ands	r3, r2
 8001394:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	68da      	ldr	r2, [r3, #12]
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	69ba      	ldr	r2, [r7, #24]
 80013ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013b4:	2201      	movs	r2, #1
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	43db      	mvns	r3, r3
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	4013      	ands	r3, r2
 80013c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	091b      	lsrs	r3, r3, #4
 80013ca:	f003 0201 	and.w	r2, r3, #1
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	2203      	movs	r2, #3
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	43db      	mvns	r3, r3
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	4013      	ands	r3, r2
 80013f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	689a      	ldr	r2, [r3, #8]
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	4313      	orrs	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	2b02      	cmp	r3, #2
 8001416:	d003      	beq.n	8001420 <HAL_GPIO_Init+0xfc>
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	2b12      	cmp	r3, #18
 800141e:	d123      	bne.n	8001468 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	08da      	lsrs	r2, r3, #3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	3208      	adds	r2, #8
 8001428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800142c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	f003 0307 	and.w	r3, r3, #7
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	220f      	movs	r2, #15
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	43db      	mvns	r3, r3
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	4013      	ands	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	691a      	ldr	r2, [r3, #16]
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	f003 0307 	and.w	r3, r3, #7
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	4313      	orrs	r3, r2
 8001458:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	08da      	lsrs	r2, r3, #3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	3208      	adds	r2, #8
 8001462:	69b9      	ldr	r1, [r7, #24]
 8001464:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	2203      	movs	r2, #3
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	43db      	mvns	r3, r3
 800147a:	69ba      	ldr	r2, [r7, #24]
 800147c:	4013      	ands	r3, r2
 800147e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f003 0203 	and.w	r2, r3, #3
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	fa02 f303 	lsl.w	r3, r2, r3
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	4313      	orrs	r3, r2
 8001494:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	f000 80b4 	beq.w	8001612 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	60fb      	str	r3, [r7, #12]
 80014ae:	4b5f      	ldr	r3, [pc, #380]	; (800162c <HAL_GPIO_Init+0x308>)
 80014b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b2:	4a5e      	ldr	r2, [pc, #376]	; (800162c <HAL_GPIO_Init+0x308>)
 80014b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014b8:	6453      	str	r3, [r2, #68]	; 0x44
 80014ba:	4b5c      	ldr	r3, [pc, #368]	; (800162c <HAL_GPIO_Init+0x308>)
 80014bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014c6:	4a5a      	ldr	r2, [pc, #360]	; (8001630 <HAL_GPIO_Init+0x30c>)
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	089b      	lsrs	r3, r3, #2
 80014cc:	3302      	adds	r3, #2
 80014ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	f003 0303 	and.w	r3, r3, #3
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	220f      	movs	r2, #15
 80014de:	fa02 f303 	lsl.w	r3, r2, r3
 80014e2:	43db      	mvns	r3, r3
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	4013      	ands	r3, r2
 80014e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4a51      	ldr	r2, [pc, #324]	; (8001634 <HAL_GPIO_Init+0x310>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d02b      	beq.n	800154a <HAL_GPIO_Init+0x226>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a50      	ldr	r2, [pc, #320]	; (8001638 <HAL_GPIO_Init+0x314>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d025      	beq.n	8001546 <HAL_GPIO_Init+0x222>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4a4f      	ldr	r2, [pc, #316]	; (800163c <HAL_GPIO_Init+0x318>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d01f      	beq.n	8001542 <HAL_GPIO_Init+0x21e>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4a4e      	ldr	r2, [pc, #312]	; (8001640 <HAL_GPIO_Init+0x31c>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d019      	beq.n	800153e <HAL_GPIO_Init+0x21a>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4a4d      	ldr	r2, [pc, #308]	; (8001644 <HAL_GPIO_Init+0x320>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d013      	beq.n	800153a <HAL_GPIO_Init+0x216>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a4c      	ldr	r2, [pc, #304]	; (8001648 <HAL_GPIO_Init+0x324>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d00d      	beq.n	8001536 <HAL_GPIO_Init+0x212>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4a4b      	ldr	r2, [pc, #300]	; (800164c <HAL_GPIO_Init+0x328>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d007      	beq.n	8001532 <HAL_GPIO_Init+0x20e>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4a4a      	ldr	r2, [pc, #296]	; (8001650 <HAL_GPIO_Init+0x32c>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d101      	bne.n	800152e <HAL_GPIO_Init+0x20a>
 800152a:	2307      	movs	r3, #7
 800152c:	e00e      	b.n	800154c <HAL_GPIO_Init+0x228>
 800152e:	2308      	movs	r3, #8
 8001530:	e00c      	b.n	800154c <HAL_GPIO_Init+0x228>
 8001532:	2306      	movs	r3, #6
 8001534:	e00a      	b.n	800154c <HAL_GPIO_Init+0x228>
 8001536:	2305      	movs	r3, #5
 8001538:	e008      	b.n	800154c <HAL_GPIO_Init+0x228>
 800153a:	2304      	movs	r3, #4
 800153c:	e006      	b.n	800154c <HAL_GPIO_Init+0x228>
 800153e:	2303      	movs	r3, #3
 8001540:	e004      	b.n	800154c <HAL_GPIO_Init+0x228>
 8001542:	2302      	movs	r3, #2
 8001544:	e002      	b.n	800154c <HAL_GPIO_Init+0x228>
 8001546:	2301      	movs	r3, #1
 8001548:	e000      	b.n	800154c <HAL_GPIO_Init+0x228>
 800154a:	2300      	movs	r3, #0
 800154c:	69fa      	ldr	r2, [r7, #28]
 800154e:	f002 0203 	and.w	r2, r2, #3
 8001552:	0092      	lsls	r2, r2, #2
 8001554:	4093      	lsls	r3, r2
 8001556:	69ba      	ldr	r2, [r7, #24]
 8001558:	4313      	orrs	r3, r2
 800155a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800155c:	4934      	ldr	r1, [pc, #208]	; (8001630 <HAL_GPIO_Init+0x30c>)
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	089b      	lsrs	r3, r3, #2
 8001562:	3302      	adds	r3, #2
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800156a:	4b3a      	ldr	r3, [pc, #232]	; (8001654 <HAL_GPIO_Init+0x330>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	43db      	mvns	r3, r3
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	4013      	ands	r3, r2
 8001578:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d003      	beq.n	800158e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001586:	69ba      	ldr	r2, [r7, #24]
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	4313      	orrs	r3, r2
 800158c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800158e:	4a31      	ldr	r2, [pc, #196]	; (8001654 <HAL_GPIO_Init+0x330>)
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001594:	4b2f      	ldr	r3, [pc, #188]	; (8001654 <HAL_GPIO_Init+0x330>)
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	43db      	mvns	r3, r3
 800159e:	69ba      	ldr	r2, [r7, #24]
 80015a0:	4013      	ands	r3, r2
 80015a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d003      	beq.n	80015b8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015b8:	4a26      	ldr	r2, [pc, #152]	; (8001654 <HAL_GPIO_Init+0x330>)
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015be:	4b25      	ldr	r3, [pc, #148]	; (8001654 <HAL_GPIO_Init+0x330>)
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	43db      	mvns	r3, r3
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	4013      	ands	r3, r2
 80015cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d003      	beq.n	80015e2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80015da:	69ba      	ldr	r2, [r7, #24]
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	4313      	orrs	r3, r2
 80015e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015e2:	4a1c      	ldr	r2, [pc, #112]	; (8001654 <HAL_GPIO_Init+0x330>)
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015e8:	4b1a      	ldr	r3, [pc, #104]	; (8001654 <HAL_GPIO_Init+0x330>)
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	43db      	mvns	r3, r3
 80015f2:	69ba      	ldr	r2, [r7, #24]
 80015f4:	4013      	ands	r3, r2
 80015f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001600:	2b00      	cmp	r3, #0
 8001602:	d003      	beq.n	800160c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	4313      	orrs	r3, r2
 800160a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800160c:	4a11      	ldr	r2, [pc, #68]	; (8001654 <HAL_GPIO_Init+0x330>)
 800160e:	69bb      	ldr	r3, [r7, #24]
 8001610:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	3301      	adds	r3, #1
 8001616:	61fb      	str	r3, [r7, #28]
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	2b0f      	cmp	r3, #15
 800161c:	f67f ae90 	bls.w	8001340 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001620:	bf00      	nop
 8001622:	3724      	adds	r7, #36	; 0x24
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr
 800162c:	40023800 	.word	0x40023800
 8001630:	40013800 	.word	0x40013800
 8001634:	40020000 	.word	0x40020000
 8001638:	40020400 	.word	0x40020400
 800163c:	40020800 	.word	0x40020800
 8001640:	40020c00 	.word	0x40020c00
 8001644:	40021000 	.word	0x40021000
 8001648:	40021400 	.word	0x40021400
 800164c:	40021800 	.word	0x40021800
 8001650:	40021c00 	.word	0x40021c00
 8001654:	40013c00 	.word	0x40013c00

08001658 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	460b      	mov	r3, r1
 8001662:	807b      	strh	r3, [r7, #2]
 8001664:	4613      	mov	r3, r2
 8001666:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001668:	787b      	ldrb	r3, [r7, #1]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d003      	beq.n	8001676 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800166e:	887a      	ldrh	r2, [r7, #2]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001674:	e003      	b.n	800167e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001676:	887b      	ldrh	r3, [r7, #2]
 8001678:	041a      	lsls	r2, r3, #16
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	619a      	str	r2, [r3, #24]
}
 800167e:	bf00      	nop
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr

0800168a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800168a:	b480      	push	{r7}
 800168c:	b083      	sub	sp, #12
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
 8001692:	460b      	mov	r3, r1
 8001694:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	695a      	ldr	r2, [r3, #20]
 800169a:	887b      	ldrh	r3, [r7, #2]
 800169c:	401a      	ands	r2, r3
 800169e:	887b      	ldrh	r3, [r7, #2]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d104      	bne.n	80016ae <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80016a4:	887b      	ldrh	r3, [r7, #2]
 80016a6:	041a      	lsls	r2, r3, #16
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80016ac:	e002      	b.n	80016b4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80016ae:	887a      	ldrh	r2, [r7, #2]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	619a      	str	r2, [r3, #24]
}
 80016b4:	bf00      	nop
 80016b6:	370c      	adds	r7, #12
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80016c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016c2:	b08f      	sub	sp, #60	; 0x3c
 80016c4:	af0a      	add	r7, sp, #40	; 0x28
 80016c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d101      	bne.n	80016d2 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e054      	b.n	800177c <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d106      	bne.n	80016f2 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2200      	movs	r2, #0
 80016e8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f007 f93f 	bl	8008970 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2203      	movs	r2, #3
 80016f6:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001702:	2b00      	cmp	r3, #0
 8001704:	d102      	bne.n	800170c <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2200      	movs	r2, #0
 800170a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4618      	mov	r0, r3
 8001712:	f004 fafd 	bl	8005d10 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	603b      	str	r3, [r7, #0]
 800171c:	687e      	ldr	r6, [r7, #4]
 800171e:	466d      	mov	r5, sp
 8001720:	f106 0410 	add.w	r4, r6, #16
 8001724:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001726:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001728:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800172a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800172c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001730:	e885 0003 	stmia.w	r5, {r0, r1}
 8001734:	1d33      	adds	r3, r6, #4
 8001736:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001738:	6838      	ldr	r0, [r7, #0]
 800173a:	f004 fa77 	bl	8005c2c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2101      	movs	r1, #1
 8001744:	4618      	mov	r0, r3
 8001746:	f004 faf4 	bl	8005d32 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	603b      	str	r3, [r7, #0]
 8001750:	687e      	ldr	r6, [r7, #4]
 8001752:	466d      	mov	r5, sp
 8001754:	f106 0410 	add.w	r4, r6, #16
 8001758:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800175a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800175c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800175e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001760:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001764:	e885 0003 	stmia.w	r5, {r0, r1}
 8001768:	1d33      	adds	r3, r6, #4
 800176a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800176c:	6838      	ldr	r0, [r7, #0]
 800176e:	f004 fc07 	bl	8005f80 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2201      	movs	r2, #1
 8001776:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 800177a:	2300      	movs	r3, #0
}
 800177c:	4618      	mov	r0, r3
 800177e:	3714      	adds	r7, #20
 8001780:	46bd      	mov	sp, r7
 8001782:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001784 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001784:	b590      	push	{r4, r7, lr}
 8001786:	b089      	sub	sp, #36	; 0x24
 8001788:	af04      	add	r7, sp, #16
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	4608      	mov	r0, r1
 800178e:	4611      	mov	r1, r2
 8001790:	461a      	mov	r2, r3
 8001792:	4603      	mov	r3, r0
 8001794:	70fb      	strb	r3, [r7, #3]
 8001796:	460b      	mov	r3, r1
 8001798:	70bb      	strb	r3, [r7, #2]
 800179a:	4613      	mov	r3, r2
 800179c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d101      	bne.n	80017ac <HAL_HCD_HC_Init+0x28>
 80017a8:	2302      	movs	r3, #2
 80017aa:	e07f      	b.n	80018ac <HAL_HCD_HC_Init+0x128>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2201      	movs	r2, #1
 80017b0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 80017b4:	78fa      	ldrb	r2, [r7, #3]
 80017b6:	6879      	ldr	r1, [r7, #4]
 80017b8:	4613      	mov	r3, r2
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	4413      	add	r3, r2
 80017be:	00db      	lsls	r3, r3, #3
 80017c0:	440b      	add	r3, r1
 80017c2:	333d      	adds	r3, #61	; 0x3d
 80017c4:	2200      	movs	r2, #0
 80017c6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80017c8:	78fa      	ldrb	r2, [r7, #3]
 80017ca:	6879      	ldr	r1, [r7, #4]
 80017cc:	4613      	mov	r3, r2
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	4413      	add	r3, r2
 80017d2:	00db      	lsls	r3, r3, #3
 80017d4:	440b      	add	r3, r1
 80017d6:	3338      	adds	r3, #56	; 0x38
 80017d8:	787a      	ldrb	r2, [r7, #1]
 80017da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80017dc:	78fa      	ldrb	r2, [r7, #3]
 80017de:	6879      	ldr	r1, [r7, #4]
 80017e0:	4613      	mov	r3, r2
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	4413      	add	r3, r2
 80017e6:	00db      	lsls	r3, r3, #3
 80017e8:	440b      	add	r3, r1
 80017ea:	3340      	adds	r3, #64	; 0x40
 80017ec:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80017ee:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80017f0:	78fa      	ldrb	r2, [r7, #3]
 80017f2:	6879      	ldr	r1, [r7, #4]
 80017f4:	4613      	mov	r3, r2
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	4413      	add	r3, r2
 80017fa:	00db      	lsls	r3, r3, #3
 80017fc:	440b      	add	r3, r1
 80017fe:	3339      	adds	r3, #57	; 0x39
 8001800:	78fa      	ldrb	r2, [r7, #3]
 8001802:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001804:	78fa      	ldrb	r2, [r7, #3]
 8001806:	6879      	ldr	r1, [r7, #4]
 8001808:	4613      	mov	r3, r2
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	4413      	add	r3, r2
 800180e:	00db      	lsls	r3, r3, #3
 8001810:	440b      	add	r3, r1
 8001812:	333f      	adds	r3, #63	; 0x3f
 8001814:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001818:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800181a:	78fa      	ldrb	r2, [r7, #3]
 800181c:	78bb      	ldrb	r3, [r7, #2]
 800181e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001822:	b2d8      	uxtb	r0, r3
 8001824:	6879      	ldr	r1, [r7, #4]
 8001826:	4613      	mov	r3, r2
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	4413      	add	r3, r2
 800182c:	00db      	lsls	r3, r3, #3
 800182e:	440b      	add	r3, r1
 8001830:	333a      	adds	r3, #58	; 0x3a
 8001832:	4602      	mov	r2, r0
 8001834:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001836:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800183a:	2b00      	cmp	r3, #0
 800183c:	da0a      	bge.n	8001854 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800183e:	78fa      	ldrb	r2, [r7, #3]
 8001840:	6879      	ldr	r1, [r7, #4]
 8001842:	4613      	mov	r3, r2
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	4413      	add	r3, r2
 8001848:	00db      	lsls	r3, r3, #3
 800184a:	440b      	add	r3, r1
 800184c:	333b      	adds	r3, #59	; 0x3b
 800184e:	2201      	movs	r2, #1
 8001850:	701a      	strb	r2, [r3, #0]
 8001852:	e009      	b.n	8001868 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001854:	78fa      	ldrb	r2, [r7, #3]
 8001856:	6879      	ldr	r1, [r7, #4]
 8001858:	4613      	mov	r3, r2
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	4413      	add	r3, r2
 800185e:	00db      	lsls	r3, r3, #3
 8001860:	440b      	add	r3, r1
 8001862:	333b      	adds	r3, #59	; 0x3b
 8001864:	2200      	movs	r2, #0
 8001866:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001868:	78fa      	ldrb	r2, [r7, #3]
 800186a:	6879      	ldr	r1, [r7, #4]
 800186c:	4613      	mov	r3, r2
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	4413      	add	r3, r2
 8001872:	00db      	lsls	r3, r3, #3
 8001874:	440b      	add	r3, r1
 8001876:	333c      	adds	r3, #60	; 0x3c
 8001878:	f897 2020 	ldrb.w	r2, [r7, #32]
 800187c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6818      	ldr	r0, [r3, #0]
 8001882:	787c      	ldrb	r4, [r7, #1]
 8001884:	78ba      	ldrb	r2, [r7, #2]
 8001886:	78f9      	ldrb	r1, [r7, #3]
 8001888:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800188a:	9302      	str	r3, [sp, #8]
 800188c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001890:	9301      	str	r3, [sp, #4]
 8001892:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001896:	9300      	str	r3, [sp, #0]
 8001898:	4623      	mov	r3, r4
 800189a:	f004 fcf3 	bl	8006284 <USB_HC_Init>
 800189e:	4603      	mov	r3, r0
 80018a0:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2200      	movs	r2, #0
 80018a6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80018aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3714      	adds	r7, #20
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd90      	pop	{r4, r7, pc}

080018b4 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	460b      	mov	r3, r1
 80018be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80018c0:	2300      	movs	r3, #0
 80018c2:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d101      	bne.n	80018d2 <HAL_HCD_HC_Halt+0x1e>
 80018ce:	2302      	movs	r3, #2
 80018d0:	e00f      	b.n	80018f2 <HAL_HCD_HC_Halt+0x3e>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2201      	movs	r2, #1
 80018d6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	78fa      	ldrb	r2, [r7, #3]
 80018e0:	4611      	mov	r1, r2
 80018e2:	4618      	mov	r0, r3
 80018e4:	f004 ff2d 	bl	8006742 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2200      	movs	r2, #0
 80018ec:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80018f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3710      	adds	r7, #16
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
	...

080018fc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	4608      	mov	r0, r1
 8001906:	4611      	mov	r1, r2
 8001908:	461a      	mov	r2, r3
 800190a:	4603      	mov	r3, r0
 800190c:	70fb      	strb	r3, [r7, #3]
 800190e:	460b      	mov	r3, r1
 8001910:	70bb      	strb	r3, [r7, #2]
 8001912:	4613      	mov	r3, r2
 8001914:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001916:	78fa      	ldrb	r2, [r7, #3]
 8001918:	6879      	ldr	r1, [r7, #4]
 800191a:	4613      	mov	r3, r2
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	4413      	add	r3, r2
 8001920:	00db      	lsls	r3, r3, #3
 8001922:	440b      	add	r3, r1
 8001924:	333b      	adds	r3, #59	; 0x3b
 8001926:	78ba      	ldrb	r2, [r7, #2]
 8001928:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800192a:	78fa      	ldrb	r2, [r7, #3]
 800192c:	6879      	ldr	r1, [r7, #4]
 800192e:	4613      	mov	r3, r2
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	4413      	add	r3, r2
 8001934:	00db      	lsls	r3, r3, #3
 8001936:	440b      	add	r3, r1
 8001938:	333f      	adds	r3, #63	; 0x3f
 800193a:	787a      	ldrb	r2, [r7, #1]
 800193c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800193e:	7c3b      	ldrb	r3, [r7, #16]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d114      	bne.n	800196e <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001944:	78fa      	ldrb	r2, [r7, #3]
 8001946:	6879      	ldr	r1, [r7, #4]
 8001948:	4613      	mov	r3, r2
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	4413      	add	r3, r2
 800194e:	00db      	lsls	r3, r3, #3
 8001950:	440b      	add	r3, r1
 8001952:	3342      	adds	r3, #66	; 0x42
 8001954:	2203      	movs	r2, #3
 8001956:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001958:	78fa      	ldrb	r2, [r7, #3]
 800195a:	6879      	ldr	r1, [r7, #4]
 800195c:	4613      	mov	r3, r2
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	4413      	add	r3, r2
 8001962:	00db      	lsls	r3, r3, #3
 8001964:	440b      	add	r3, r1
 8001966:	333d      	adds	r3, #61	; 0x3d
 8001968:	7f3a      	ldrb	r2, [r7, #28]
 800196a:	701a      	strb	r2, [r3, #0]
 800196c:	e009      	b.n	8001982 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800196e:	78fa      	ldrb	r2, [r7, #3]
 8001970:	6879      	ldr	r1, [r7, #4]
 8001972:	4613      	mov	r3, r2
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	4413      	add	r3, r2
 8001978:	00db      	lsls	r3, r3, #3
 800197a:	440b      	add	r3, r1
 800197c:	3342      	adds	r3, #66	; 0x42
 800197e:	2202      	movs	r2, #2
 8001980:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001982:	787b      	ldrb	r3, [r7, #1]
 8001984:	2b03      	cmp	r3, #3
 8001986:	f200 80d6 	bhi.w	8001b36 <HAL_HCD_HC_SubmitRequest+0x23a>
 800198a:	a201      	add	r2, pc, #4	; (adr r2, 8001990 <HAL_HCD_HC_SubmitRequest+0x94>)
 800198c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001990:	080019a1 	.word	0x080019a1
 8001994:	08001b21 	.word	0x08001b21
 8001998:	08001a0d 	.word	0x08001a0d
 800199c:	08001a97 	.word	0x08001a97
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80019a0:	7c3b      	ldrb	r3, [r7, #16]
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	f040 80c9 	bne.w	8001b3a <HAL_HCD_HC_SubmitRequest+0x23e>
 80019a8:	78bb      	ldrb	r3, [r7, #2]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	f040 80c5 	bne.w	8001b3a <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 80019b0:	8b3b      	ldrh	r3, [r7, #24]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d109      	bne.n	80019ca <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80019b6:	78fa      	ldrb	r2, [r7, #3]
 80019b8:	6879      	ldr	r1, [r7, #4]
 80019ba:	4613      	mov	r3, r2
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	4413      	add	r3, r2
 80019c0:	00db      	lsls	r3, r3, #3
 80019c2:	440b      	add	r3, r1
 80019c4:	3351      	adds	r3, #81	; 0x51
 80019c6:	2201      	movs	r2, #1
 80019c8:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80019ca:	78fa      	ldrb	r2, [r7, #3]
 80019cc:	6879      	ldr	r1, [r7, #4]
 80019ce:	4613      	mov	r3, r2
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	4413      	add	r3, r2
 80019d4:	00db      	lsls	r3, r3, #3
 80019d6:	440b      	add	r3, r1
 80019d8:	3351      	adds	r3, #81	; 0x51
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d10a      	bne.n	80019f6 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019e0:	78fa      	ldrb	r2, [r7, #3]
 80019e2:	6879      	ldr	r1, [r7, #4]
 80019e4:	4613      	mov	r3, r2
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	4413      	add	r3, r2
 80019ea:	00db      	lsls	r3, r3, #3
 80019ec:	440b      	add	r3, r1
 80019ee:	3342      	adds	r3, #66	; 0x42
 80019f0:	2200      	movs	r2, #0
 80019f2:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80019f4:	e0a1      	b.n	8001b3a <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019f6:	78fa      	ldrb	r2, [r7, #3]
 80019f8:	6879      	ldr	r1, [r7, #4]
 80019fa:	4613      	mov	r3, r2
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	4413      	add	r3, r2
 8001a00:	00db      	lsls	r3, r3, #3
 8001a02:	440b      	add	r3, r1
 8001a04:	3342      	adds	r3, #66	; 0x42
 8001a06:	2202      	movs	r2, #2
 8001a08:	701a      	strb	r2, [r3, #0]
      break;
 8001a0a:	e096      	b.n	8001b3a <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001a0c:	78bb      	ldrb	r3, [r7, #2]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d120      	bne.n	8001a54 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001a12:	78fa      	ldrb	r2, [r7, #3]
 8001a14:	6879      	ldr	r1, [r7, #4]
 8001a16:	4613      	mov	r3, r2
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	4413      	add	r3, r2
 8001a1c:	00db      	lsls	r3, r3, #3
 8001a1e:	440b      	add	r3, r1
 8001a20:	3351      	adds	r3, #81	; 0x51
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d10a      	bne.n	8001a3e <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a28:	78fa      	ldrb	r2, [r7, #3]
 8001a2a:	6879      	ldr	r1, [r7, #4]
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	4413      	add	r3, r2
 8001a32:	00db      	lsls	r3, r3, #3
 8001a34:	440b      	add	r3, r1
 8001a36:	3342      	adds	r3, #66	; 0x42
 8001a38:	2200      	movs	r2, #0
 8001a3a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001a3c:	e07e      	b.n	8001b3c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a3e:	78fa      	ldrb	r2, [r7, #3]
 8001a40:	6879      	ldr	r1, [r7, #4]
 8001a42:	4613      	mov	r3, r2
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	4413      	add	r3, r2
 8001a48:	00db      	lsls	r3, r3, #3
 8001a4a:	440b      	add	r3, r1
 8001a4c:	3342      	adds	r3, #66	; 0x42
 8001a4e:	2202      	movs	r2, #2
 8001a50:	701a      	strb	r2, [r3, #0]
      break;
 8001a52:	e073      	b.n	8001b3c <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001a54:	78fa      	ldrb	r2, [r7, #3]
 8001a56:	6879      	ldr	r1, [r7, #4]
 8001a58:	4613      	mov	r3, r2
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	4413      	add	r3, r2
 8001a5e:	00db      	lsls	r3, r3, #3
 8001a60:	440b      	add	r3, r1
 8001a62:	3350      	adds	r3, #80	; 0x50
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d10a      	bne.n	8001a80 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a6a:	78fa      	ldrb	r2, [r7, #3]
 8001a6c:	6879      	ldr	r1, [r7, #4]
 8001a6e:	4613      	mov	r3, r2
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	4413      	add	r3, r2
 8001a74:	00db      	lsls	r3, r3, #3
 8001a76:	440b      	add	r3, r1
 8001a78:	3342      	adds	r3, #66	; 0x42
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	701a      	strb	r2, [r3, #0]
      break;
 8001a7e:	e05d      	b.n	8001b3c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a80:	78fa      	ldrb	r2, [r7, #3]
 8001a82:	6879      	ldr	r1, [r7, #4]
 8001a84:	4613      	mov	r3, r2
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	4413      	add	r3, r2
 8001a8a:	00db      	lsls	r3, r3, #3
 8001a8c:	440b      	add	r3, r1
 8001a8e:	3342      	adds	r3, #66	; 0x42
 8001a90:	2202      	movs	r2, #2
 8001a92:	701a      	strb	r2, [r3, #0]
      break;
 8001a94:	e052      	b.n	8001b3c <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001a96:	78bb      	ldrb	r3, [r7, #2]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d120      	bne.n	8001ade <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001a9c:	78fa      	ldrb	r2, [r7, #3]
 8001a9e:	6879      	ldr	r1, [r7, #4]
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	4413      	add	r3, r2
 8001aa6:	00db      	lsls	r3, r3, #3
 8001aa8:	440b      	add	r3, r1
 8001aaa:	3351      	adds	r3, #81	; 0x51
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d10a      	bne.n	8001ac8 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ab2:	78fa      	ldrb	r2, [r7, #3]
 8001ab4:	6879      	ldr	r1, [r7, #4]
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	4413      	add	r3, r2
 8001abc:	00db      	lsls	r3, r3, #3
 8001abe:	440b      	add	r3, r1
 8001ac0:	3342      	adds	r3, #66	; 0x42
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001ac6:	e039      	b.n	8001b3c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ac8:	78fa      	ldrb	r2, [r7, #3]
 8001aca:	6879      	ldr	r1, [r7, #4]
 8001acc:	4613      	mov	r3, r2
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	4413      	add	r3, r2
 8001ad2:	00db      	lsls	r3, r3, #3
 8001ad4:	440b      	add	r3, r1
 8001ad6:	3342      	adds	r3, #66	; 0x42
 8001ad8:	2202      	movs	r2, #2
 8001ada:	701a      	strb	r2, [r3, #0]
      break;
 8001adc:	e02e      	b.n	8001b3c <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001ade:	78fa      	ldrb	r2, [r7, #3]
 8001ae0:	6879      	ldr	r1, [r7, #4]
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	4413      	add	r3, r2
 8001ae8:	00db      	lsls	r3, r3, #3
 8001aea:	440b      	add	r3, r1
 8001aec:	3350      	adds	r3, #80	; 0x50
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d10a      	bne.n	8001b0a <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001af4:	78fa      	ldrb	r2, [r7, #3]
 8001af6:	6879      	ldr	r1, [r7, #4]
 8001af8:	4613      	mov	r3, r2
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	4413      	add	r3, r2
 8001afe:	00db      	lsls	r3, r3, #3
 8001b00:	440b      	add	r3, r1
 8001b02:	3342      	adds	r3, #66	; 0x42
 8001b04:	2200      	movs	r2, #0
 8001b06:	701a      	strb	r2, [r3, #0]
      break;
 8001b08:	e018      	b.n	8001b3c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b0a:	78fa      	ldrb	r2, [r7, #3]
 8001b0c:	6879      	ldr	r1, [r7, #4]
 8001b0e:	4613      	mov	r3, r2
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	4413      	add	r3, r2
 8001b14:	00db      	lsls	r3, r3, #3
 8001b16:	440b      	add	r3, r1
 8001b18:	3342      	adds	r3, #66	; 0x42
 8001b1a:	2202      	movs	r2, #2
 8001b1c:	701a      	strb	r2, [r3, #0]
      break;
 8001b1e:	e00d      	b.n	8001b3c <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b20:	78fa      	ldrb	r2, [r7, #3]
 8001b22:	6879      	ldr	r1, [r7, #4]
 8001b24:	4613      	mov	r3, r2
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	4413      	add	r3, r2
 8001b2a:	00db      	lsls	r3, r3, #3
 8001b2c:	440b      	add	r3, r1
 8001b2e:	3342      	adds	r3, #66	; 0x42
 8001b30:	2200      	movs	r2, #0
 8001b32:	701a      	strb	r2, [r3, #0]
      break;
 8001b34:	e002      	b.n	8001b3c <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8001b36:	bf00      	nop
 8001b38:	e000      	b.n	8001b3c <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8001b3a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001b3c:	78fa      	ldrb	r2, [r7, #3]
 8001b3e:	6879      	ldr	r1, [r7, #4]
 8001b40:	4613      	mov	r3, r2
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	4413      	add	r3, r2
 8001b46:	00db      	lsls	r3, r3, #3
 8001b48:	440b      	add	r3, r1
 8001b4a:	3344      	adds	r3, #68	; 0x44
 8001b4c:	697a      	ldr	r2, [r7, #20]
 8001b4e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001b50:	78fa      	ldrb	r2, [r7, #3]
 8001b52:	8b39      	ldrh	r1, [r7, #24]
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	4613      	mov	r3, r2
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	4413      	add	r3, r2
 8001b5c:	00db      	lsls	r3, r3, #3
 8001b5e:	4403      	add	r3, r0
 8001b60:	3348      	adds	r3, #72	; 0x48
 8001b62:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001b64:	78fa      	ldrb	r2, [r7, #3]
 8001b66:	6879      	ldr	r1, [r7, #4]
 8001b68:	4613      	mov	r3, r2
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	4413      	add	r3, r2
 8001b6e:	00db      	lsls	r3, r3, #3
 8001b70:	440b      	add	r3, r1
 8001b72:	335c      	adds	r3, #92	; 0x5c
 8001b74:	2200      	movs	r2, #0
 8001b76:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001b78:	78fa      	ldrb	r2, [r7, #3]
 8001b7a:	6879      	ldr	r1, [r7, #4]
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	4413      	add	r3, r2
 8001b82:	00db      	lsls	r3, r3, #3
 8001b84:	440b      	add	r3, r1
 8001b86:	334c      	adds	r3, #76	; 0x4c
 8001b88:	2200      	movs	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001b8c:	78fa      	ldrb	r2, [r7, #3]
 8001b8e:	6879      	ldr	r1, [r7, #4]
 8001b90:	4613      	mov	r3, r2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	4413      	add	r3, r2
 8001b96:	00db      	lsls	r3, r3, #3
 8001b98:	440b      	add	r3, r1
 8001b9a:	3339      	adds	r3, #57	; 0x39
 8001b9c:	78fa      	ldrb	r2, [r7, #3]
 8001b9e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001ba0:	78fa      	ldrb	r2, [r7, #3]
 8001ba2:	6879      	ldr	r1, [r7, #4]
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	4413      	add	r3, r2
 8001baa:	00db      	lsls	r3, r3, #3
 8001bac:	440b      	add	r3, r1
 8001bae:	335d      	adds	r3, #93	; 0x5d
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6818      	ldr	r0, [r3, #0]
 8001bb8:	78fa      	ldrb	r2, [r7, #3]
 8001bba:	4613      	mov	r3, r2
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	4413      	add	r3, r2
 8001bc0:	00db      	lsls	r3, r3, #3
 8001bc2:	3338      	adds	r3, #56	; 0x38
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	18d1      	adds	r1, r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	691b      	ldr	r3, [r3, #16]
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	461a      	mov	r2, r3
 8001bd0:	f004 fc62 	bl	8006498 <USB_HC_StartXfer>
 8001bd4:	4603      	mov	r3, r0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop

08001be0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f004 f97f 	bl	8005efa <USB_GetMode>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	f040 80ef 	bne.w	8001de2 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f004 f963 	bl	8005ed4 <USB_ReadInterrupts>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	f000 80e5 	beq.w	8001de0 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f004 f95a 	bl	8005ed4 <USB_ReadInterrupts>
 8001c20:	4603      	mov	r3, r0
 8001c22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001c2a:	d104      	bne.n	8001c36 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001c34:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f004 f94a 	bl	8005ed4 <USB_ReadInterrupts>
 8001c40:	4603      	mov	r3, r0
 8001c42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c4a:	d104      	bne.n	8001c56 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001c54:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f004 f93a 	bl	8005ed4 <USB_ReadInterrupts>
 8001c60:	4603      	mov	r3, r0
 8001c62:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c66:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001c6a:	d104      	bne.n	8001c76 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001c74:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f004 f92a 	bl	8005ed4 <USB_ReadInterrupts>
 8001c80:	4603      	mov	r3, r0
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d103      	bne.n	8001c92 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	2202      	movs	r2, #2
 8001c90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f004 f91c 	bl	8005ed4 <USB_ReadInterrupts>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ca2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ca6:	d115      	bne.n	8001cd4 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001cb0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0301 	and.w	r3, r3, #1
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d108      	bne.n	8001cd4 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f006 feca 	bl	8008a5c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2101      	movs	r1, #1
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f004 fa12 	bl	80060f8 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f004 f8fb 	bl	8005ed4 <USB_ReadInterrupts>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ce4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ce8:	d102      	bne.n	8001cf0 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f001 f966 	bl	8002fbc <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f004 f8ed 	bl	8005ed4 <USB_ReadInterrupts>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	f003 0308 	and.w	r3, r3, #8
 8001d00:	2b08      	cmp	r3, #8
 8001d02:	d106      	bne.n	8001d12 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f006 fe8d 	bl	8008a24 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	2208      	movs	r2, #8
 8001d10:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f004 f8dc 	bl	8005ed4 <USB_ReadInterrupts>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d22:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001d26:	d138      	bne.n	8001d9a <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f004 fcf7 	bl	8006720 <USB_HC_ReadInterrupt>
 8001d32:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001d34:	2300      	movs	r3, #0
 8001d36:	617b      	str	r3, [r7, #20]
 8001d38:	e025      	b.n	8001d86 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	f003 030f 	and.w	r3, r3, #15
 8001d40:	68ba      	ldr	r2, [r7, #8]
 8001d42:	fa22 f303 	lsr.w	r3, r2, r3
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d018      	beq.n	8001d80 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	015a      	lsls	r2, r3, #5
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	4413      	add	r3, r2
 8001d56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d64:	d106      	bne.n	8001d74 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f000 f8cf 	bl	8001f10 <HCD_HC_IN_IRQHandler>
 8001d72:	e005      	b.n	8001d80 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	4619      	mov	r1, r3
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f000 fcfd 	bl	800277a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	3301      	adds	r3, #1
 8001d84:	617b      	str	r3, [r7, #20]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	697a      	ldr	r2, [r7, #20]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d3d4      	bcc.n	8001d3a <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d98:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f004 f898 	bl	8005ed4 <USB_ReadInterrupts>
 8001da4:	4603      	mov	r3, r0
 8001da6:	f003 0310 	and.w	r3, r3, #16
 8001daa:	2b10      	cmp	r3, #16
 8001dac:	d101      	bne.n	8001db2 <HAL_HCD_IRQHandler+0x1d2>
 8001dae:	2301      	movs	r3, #1
 8001db0:	e000      	b.n	8001db4 <HAL_HCD_IRQHandler+0x1d4>
 8001db2:	2300      	movs	r3, #0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d014      	beq.n	8001de2 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	699a      	ldr	r2, [r3, #24]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f022 0210 	bic.w	r2, r2, #16
 8001dc6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f001 f84b 	bl	8002e64 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	699a      	ldr	r2, [r3, #24]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f042 0210 	orr.w	r2, r2, #16
 8001ddc:	619a      	str	r2, [r3, #24]
 8001dde:	e000      	b.n	8001de2 <HAL_HCD_IRQHandler+0x202>
      return;
 8001de0:	bf00      	nop
    }
  }
}
 8001de2:	3718      	adds	r7, #24
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d101      	bne.n	8001dfe <HAL_HCD_Start+0x16>
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	e013      	b.n	8001e26 <HAL_HCD_Start+0x3e>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2201      	movs	r2, #1
 8001e02:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f003 ff6f 	bl	8005cee <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2101      	movs	r1, #1
 8001e16:	4618      	mov	r0, r3
 8001e18:	f004 f9d2 	bl	80061c0 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b082      	sub	sp, #8
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d101      	bne.n	8001e44 <HAL_HCD_Stop+0x16>
 8001e40:	2302      	movs	r3, #2
 8001e42:	e00d      	b.n	8001e60 <HAL_HCD_Stop+0x32>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2201      	movs	r2, #1
 8001e48:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f004 fdb1 	bl	80069b8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8001e5e:	2300      	movs	r3, #0
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3708      	adds	r7, #8
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4618      	mov	r0, r3
 8001e76:	f004 f979 	bl	800616c <USB_ResetPort>
 8001e7a:	4603      	mov	r3, r0
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3708      	adds	r7, #8
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001e90:	78fa      	ldrb	r2, [r7, #3]
 8001e92:	6879      	ldr	r1, [r7, #4]
 8001e94:	4613      	mov	r3, r2
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	4413      	add	r3, r2
 8001e9a:	00db      	lsls	r3, r3, #3
 8001e9c:	440b      	add	r3, r1
 8001e9e:	335c      	adds	r3, #92	; 0x5c
 8001ea0:	781b      	ldrb	r3, [r3, #0]
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	370c      	adds	r7, #12
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr

08001eae <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	b083      	sub	sp, #12
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001eba:	78fa      	ldrb	r2, [r7, #3]
 8001ebc:	6879      	ldr	r1, [r7, #4]
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	4413      	add	r3, r2
 8001ec4:	00db      	lsls	r3, r3, #3
 8001ec6:	440b      	add	r3, r1
 8001ec8:	334c      	adds	r3, #76	; 0x4c
 8001eca:	681b      	ldr	r3, [r3, #0]
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f004 f9bb 	bl	8006260 <USB_GetCurrentFrame>
 8001eea:	4603      	mov	r3, r0
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3708      	adds	r7, #8
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}

08001ef4 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f004 f996 	bl	8006232 <USB_GetHostSpeed>
 8001f06:	4603      	mov	r3, r0
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3708      	adds	r7, #8
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b086      	sub	sp, #24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	460b      	mov	r3, r1
 8001f1a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001f26:	78fb      	ldrb	r3, [r7, #3]
 8001f28:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	015a      	lsls	r2, r3, #5
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	4413      	add	r3, r2
 8001f32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	f003 0304 	and.w	r3, r3, #4
 8001f3c:	2b04      	cmp	r3, #4
 8001f3e:	d119      	bne.n	8001f74 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	015a      	lsls	r2, r3, #5
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	4413      	add	r3, r2
 8001f48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	2304      	movs	r3, #4
 8001f50:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	015a      	lsls	r2, r3, #5
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	4413      	add	r3, r2
 8001f5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	68fa      	ldr	r2, [r7, #12]
 8001f62:	0151      	lsls	r1, r2, #5
 8001f64:	693a      	ldr	r2, [r7, #16]
 8001f66:	440a      	add	r2, r1
 8001f68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f6c:	f043 0302 	orr.w	r3, r3, #2
 8001f70:	60d3      	str	r3, [r2, #12]
 8001f72:	e0ce      	b.n	8002112 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	015a      	lsls	r2, r3, #5
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f8a:	d12c      	bne.n	8001fe6 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	015a      	lsls	r2, r3, #5
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	4413      	add	r3, r2
 8001f94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f98:	461a      	mov	r2, r3
 8001f9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f9e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001fa0:	6879      	ldr	r1, [r7, #4]
 8001fa2:	68fa      	ldr	r2, [r7, #12]
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	4413      	add	r3, r2
 8001faa:	00db      	lsls	r3, r3, #3
 8001fac:	440b      	add	r3, r1
 8001fae:	335d      	adds	r3, #93	; 0x5d
 8001fb0:	2207      	movs	r2, #7
 8001fb2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	015a      	lsls	r2, r3, #5
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	4413      	add	r3, r2
 8001fbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	68fa      	ldr	r2, [r7, #12]
 8001fc4:	0151      	lsls	r1, r2, #5
 8001fc6:	693a      	ldr	r2, [r7, #16]
 8001fc8:	440a      	add	r2, r1
 8001fca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fce:	f043 0302 	orr.w	r3, r3, #2
 8001fd2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	68fa      	ldr	r2, [r7, #12]
 8001fda:	b2d2      	uxtb	r2, r2
 8001fdc:	4611      	mov	r1, r2
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f004 fbaf 	bl	8006742 <USB_HC_Halt>
 8001fe4:	e095      	b.n	8002112 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	015a      	lsls	r2, r3, #5
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	4413      	add	r3, r2
 8001fee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	f003 0320 	and.w	r3, r3, #32
 8001ff8:	2b20      	cmp	r3, #32
 8001ffa:	d109      	bne.n	8002010 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	015a      	lsls	r2, r3, #5
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	4413      	add	r3, r2
 8002004:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002008:	461a      	mov	r2, r3
 800200a:	2320      	movs	r3, #32
 800200c:	6093      	str	r3, [r2, #8]
 800200e:	e080      	b.n	8002112 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	015a      	lsls	r2, r3, #5
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	4413      	add	r3, r2
 8002018:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	f003 0308 	and.w	r3, r3, #8
 8002022:	2b08      	cmp	r3, #8
 8002024:	d134      	bne.n	8002090 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	015a      	lsls	r2, r3, #5
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	4413      	add	r3, r2
 800202e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	68fa      	ldr	r2, [r7, #12]
 8002036:	0151      	lsls	r1, r2, #5
 8002038:	693a      	ldr	r2, [r7, #16]
 800203a:	440a      	add	r2, r1
 800203c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002040:	f043 0302 	orr.w	r3, r3, #2
 8002044:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002046:	6879      	ldr	r1, [r7, #4]
 8002048:	68fa      	ldr	r2, [r7, #12]
 800204a:	4613      	mov	r3, r2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	4413      	add	r3, r2
 8002050:	00db      	lsls	r3, r3, #3
 8002052:	440b      	add	r3, r1
 8002054:	335d      	adds	r3, #93	; 0x5d
 8002056:	2205      	movs	r2, #5
 8002058:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	015a      	lsls	r2, r3, #5
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	4413      	add	r3, r2
 8002062:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002066:	461a      	mov	r2, r3
 8002068:	2310      	movs	r3, #16
 800206a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	015a      	lsls	r2, r3, #5
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	4413      	add	r3, r2
 8002074:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002078:	461a      	mov	r2, r3
 800207a:	2308      	movs	r3, #8
 800207c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	68fa      	ldr	r2, [r7, #12]
 8002084:	b2d2      	uxtb	r2, r2
 8002086:	4611      	mov	r1, r2
 8002088:	4618      	mov	r0, r3
 800208a:	f004 fb5a 	bl	8006742 <USB_HC_Halt>
 800208e:	e040      	b.n	8002112 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	015a      	lsls	r2, r3, #5
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	4413      	add	r3, r2
 8002098:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020a6:	d134      	bne.n	8002112 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	015a      	lsls	r2, r3, #5
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	4413      	add	r3, r2
 80020b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	68fa      	ldr	r2, [r7, #12]
 80020b8:	0151      	lsls	r1, r2, #5
 80020ba:	693a      	ldr	r2, [r7, #16]
 80020bc:	440a      	add	r2, r1
 80020be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020c2:	f043 0302 	orr.w	r3, r3, #2
 80020c6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	68fa      	ldr	r2, [r7, #12]
 80020ce:	b2d2      	uxtb	r2, r2
 80020d0:	4611      	mov	r1, r2
 80020d2:	4618      	mov	r0, r3
 80020d4:	f004 fb35 	bl	8006742 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	015a      	lsls	r2, r3, #5
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	4413      	add	r3, r2
 80020e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020e4:	461a      	mov	r2, r3
 80020e6:	2310      	movs	r3, #16
 80020e8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80020ea:	6879      	ldr	r1, [r7, #4]
 80020ec:	68fa      	ldr	r2, [r7, #12]
 80020ee:	4613      	mov	r3, r2
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	4413      	add	r3, r2
 80020f4:	00db      	lsls	r3, r3, #3
 80020f6:	440b      	add	r3, r1
 80020f8:	335d      	adds	r3, #93	; 0x5d
 80020fa:	2208      	movs	r2, #8
 80020fc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	015a      	lsls	r2, r3, #5
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	4413      	add	r3, r2
 8002106:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800210a:	461a      	mov	r2, r3
 800210c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002110:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	015a      	lsls	r2, r3, #5
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	4413      	add	r3, r2
 800211a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002124:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002128:	d122      	bne.n	8002170 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	015a      	lsls	r2, r3, #5
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	4413      	add	r3, r2
 8002132:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	68fa      	ldr	r2, [r7, #12]
 800213a:	0151      	lsls	r1, r2, #5
 800213c:	693a      	ldr	r2, [r7, #16]
 800213e:	440a      	add	r2, r1
 8002140:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002144:	f043 0302 	orr.w	r3, r3, #2
 8002148:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	68fa      	ldr	r2, [r7, #12]
 8002150:	b2d2      	uxtb	r2, r2
 8002152:	4611      	mov	r1, r2
 8002154:	4618      	mov	r0, r3
 8002156:	f004 faf4 	bl	8006742 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	015a      	lsls	r2, r3, #5
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	4413      	add	r3, r2
 8002162:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002166:	461a      	mov	r2, r3
 8002168:	f44f 7300 	mov.w	r3, #512	; 0x200
 800216c:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800216e:	e300      	b.n	8002772 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	015a      	lsls	r2, r3, #5
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	4413      	add	r3, r2
 8002178:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	2b01      	cmp	r3, #1
 8002184:	f040 80fd 	bne.w	8002382 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	691b      	ldr	r3, [r3, #16]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d01b      	beq.n	80021c8 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002190:	6879      	ldr	r1, [r7, #4]
 8002192:	68fa      	ldr	r2, [r7, #12]
 8002194:	4613      	mov	r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	4413      	add	r3, r2
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	440b      	add	r3, r1
 800219e:	3348      	adds	r3, #72	; 0x48
 80021a0:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	0159      	lsls	r1, r3, #5
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	440b      	add	r3, r1
 80021aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021ae:	691b      	ldr	r3, [r3, #16]
 80021b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80021b4:	1ad1      	subs	r1, r2, r3
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	68fa      	ldr	r2, [r7, #12]
 80021ba:	4613      	mov	r3, r2
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	4413      	add	r3, r2
 80021c0:	00db      	lsls	r3, r3, #3
 80021c2:	4403      	add	r3, r0
 80021c4:	334c      	adds	r3, #76	; 0x4c
 80021c6:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80021c8:	6879      	ldr	r1, [r7, #4]
 80021ca:	68fa      	ldr	r2, [r7, #12]
 80021cc:	4613      	mov	r3, r2
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	4413      	add	r3, r2
 80021d2:	00db      	lsls	r3, r3, #3
 80021d4:	440b      	add	r3, r1
 80021d6:	335d      	adds	r3, #93	; 0x5d
 80021d8:	2201      	movs	r2, #1
 80021da:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80021dc:	6879      	ldr	r1, [r7, #4]
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	4613      	mov	r3, r2
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	4413      	add	r3, r2
 80021e6:	00db      	lsls	r3, r3, #3
 80021e8:	440b      	add	r3, r1
 80021ea:	3358      	adds	r3, #88	; 0x58
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	015a      	lsls	r2, r3, #5
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	4413      	add	r3, r2
 80021f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021fc:	461a      	mov	r2, r3
 80021fe:	2301      	movs	r3, #1
 8002200:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002202:	6879      	ldr	r1, [r7, #4]
 8002204:	68fa      	ldr	r2, [r7, #12]
 8002206:	4613      	mov	r3, r2
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	4413      	add	r3, r2
 800220c:	00db      	lsls	r3, r3, #3
 800220e:	440b      	add	r3, r1
 8002210:	333f      	adds	r3, #63	; 0x3f
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d00a      	beq.n	800222e <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002218:	6879      	ldr	r1, [r7, #4]
 800221a:	68fa      	ldr	r2, [r7, #12]
 800221c:	4613      	mov	r3, r2
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	4413      	add	r3, r2
 8002222:	00db      	lsls	r3, r3, #3
 8002224:	440b      	add	r3, r1
 8002226:	333f      	adds	r3, #63	; 0x3f
 8002228:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800222a:	2b02      	cmp	r3, #2
 800222c:	d121      	bne.n	8002272 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	015a      	lsls	r2, r3, #5
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	4413      	add	r3, r2
 8002236:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	68fa      	ldr	r2, [r7, #12]
 800223e:	0151      	lsls	r1, r2, #5
 8002240:	693a      	ldr	r2, [r7, #16]
 8002242:	440a      	add	r2, r1
 8002244:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002248:	f043 0302 	orr.w	r3, r3, #2
 800224c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	68fa      	ldr	r2, [r7, #12]
 8002254:	b2d2      	uxtb	r2, r2
 8002256:	4611      	mov	r1, r2
 8002258:	4618      	mov	r0, r3
 800225a:	f004 fa72 	bl	8006742 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	015a      	lsls	r2, r3, #5
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	4413      	add	r3, r2
 8002266:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800226a:	461a      	mov	r2, r3
 800226c:	2310      	movs	r3, #16
 800226e:	6093      	str	r3, [r2, #8]
 8002270:	e070      	b.n	8002354 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002272:	6879      	ldr	r1, [r7, #4]
 8002274:	68fa      	ldr	r2, [r7, #12]
 8002276:	4613      	mov	r3, r2
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	4413      	add	r3, r2
 800227c:	00db      	lsls	r3, r3, #3
 800227e:	440b      	add	r3, r1
 8002280:	333f      	adds	r3, #63	; 0x3f
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	2b03      	cmp	r3, #3
 8002286:	d12a      	bne.n	80022de <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	015a      	lsls	r2, r3, #5
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	4413      	add	r3, r2
 8002290:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	68fa      	ldr	r2, [r7, #12]
 8002298:	0151      	lsls	r1, r2, #5
 800229a:	693a      	ldr	r2, [r7, #16]
 800229c:	440a      	add	r2, r1
 800229e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80022a6:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80022a8:	6879      	ldr	r1, [r7, #4]
 80022aa:	68fa      	ldr	r2, [r7, #12]
 80022ac:	4613      	mov	r3, r2
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	4413      	add	r3, r2
 80022b2:	00db      	lsls	r3, r3, #3
 80022b4:	440b      	add	r3, r1
 80022b6:	335c      	adds	r3, #92	; 0x5c
 80022b8:	2201      	movs	r2, #1
 80022ba:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	b2d8      	uxtb	r0, r3
 80022c0:	6879      	ldr	r1, [r7, #4]
 80022c2:	68fa      	ldr	r2, [r7, #12]
 80022c4:	4613      	mov	r3, r2
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	4413      	add	r3, r2
 80022ca:	00db      	lsls	r3, r3, #3
 80022cc:	440b      	add	r3, r1
 80022ce:	335c      	adds	r3, #92	; 0x5c
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	461a      	mov	r2, r3
 80022d4:	4601      	mov	r1, r0
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f006 fbce 	bl	8008a78 <HAL_HCD_HC_NotifyURBChange_Callback>
 80022dc:	e03a      	b.n	8002354 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80022de:	6879      	ldr	r1, [r7, #4]
 80022e0:	68fa      	ldr	r2, [r7, #12]
 80022e2:	4613      	mov	r3, r2
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	4413      	add	r3, r2
 80022e8:	00db      	lsls	r3, r3, #3
 80022ea:	440b      	add	r3, r1
 80022ec:	333f      	adds	r3, #63	; 0x3f
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d12f      	bne.n	8002354 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80022f4:	6879      	ldr	r1, [r7, #4]
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	4613      	mov	r3, r2
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	4413      	add	r3, r2
 80022fe:	00db      	lsls	r3, r3, #3
 8002300:	440b      	add	r3, r1
 8002302:	335c      	adds	r3, #92	; 0x5c
 8002304:	2201      	movs	r2, #1
 8002306:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002308:	6879      	ldr	r1, [r7, #4]
 800230a:	68fa      	ldr	r2, [r7, #12]
 800230c:	4613      	mov	r3, r2
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	4413      	add	r3, r2
 8002312:	00db      	lsls	r3, r3, #3
 8002314:	440b      	add	r3, r1
 8002316:	3350      	adds	r3, #80	; 0x50
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	f083 0301 	eor.w	r3, r3, #1
 800231e:	b2d8      	uxtb	r0, r3
 8002320:	6879      	ldr	r1, [r7, #4]
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	4613      	mov	r3, r2
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	4413      	add	r3, r2
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	440b      	add	r3, r1
 800232e:	3350      	adds	r3, #80	; 0x50
 8002330:	4602      	mov	r2, r0
 8002332:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	b2d8      	uxtb	r0, r3
 8002338:	6879      	ldr	r1, [r7, #4]
 800233a:	68fa      	ldr	r2, [r7, #12]
 800233c:	4613      	mov	r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	4413      	add	r3, r2
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	440b      	add	r3, r1
 8002346:	335c      	adds	r3, #92	; 0x5c
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	461a      	mov	r2, r3
 800234c:	4601      	mov	r1, r0
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f006 fb92 	bl	8008a78 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8002354:	6879      	ldr	r1, [r7, #4]
 8002356:	68fa      	ldr	r2, [r7, #12]
 8002358:	4613      	mov	r3, r2
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	4413      	add	r3, r2
 800235e:	00db      	lsls	r3, r3, #3
 8002360:	440b      	add	r3, r1
 8002362:	3350      	adds	r3, #80	; 0x50
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	f083 0301 	eor.w	r3, r3, #1
 800236a:	b2d8      	uxtb	r0, r3
 800236c:	6879      	ldr	r1, [r7, #4]
 800236e:	68fa      	ldr	r2, [r7, #12]
 8002370:	4613      	mov	r3, r2
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	4413      	add	r3, r2
 8002376:	00db      	lsls	r3, r3, #3
 8002378:	440b      	add	r3, r1
 800237a:	3350      	adds	r3, #80	; 0x50
 800237c:	4602      	mov	r2, r0
 800237e:	701a      	strb	r2, [r3, #0]
}
 8002380:	e1f7      	b.n	8002772 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	015a      	lsls	r2, r3, #5
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	4413      	add	r3, r2
 800238a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	f003 0302 	and.w	r3, r3, #2
 8002394:	2b02      	cmp	r3, #2
 8002396:	f040 811a 	bne.w	80025ce <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	015a      	lsls	r2, r3, #5
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	4413      	add	r3, r2
 80023a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	68fa      	ldr	r2, [r7, #12]
 80023aa:	0151      	lsls	r1, r2, #5
 80023ac:	693a      	ldr	r2, [r7, #16]
 80023ae:	440a      	add	r2, r1
 80023b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023b4:	f023 0302 	bic.w	r3, r3, #2
 80023b8:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80023ba:	6879      	ldr	r1, [r7, #4]
 80023bc:	68fa      	ldr	r2, [r7, #12]
 80023be:	4613      	mov	r3, r2
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	4413      	add	r3, r2
 80023c4:	00db      	lsls	r3, r3, #3
 80023c6:	440b      	add	r3, r1
 80023c8:	335d      	adds	r3, #93	; 0x5d
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d10a      	bne.n	80023e6 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80023d0:	6879      	ldr	r1, [r7, #4]
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	4613      	mov	r3, r2
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	4413      	add	r3, r2
 80023da:	00db      	lsls	r3, r3, #3
 80023dc:	440b      	add	r3, r1
 80023de:	335c      	adds	r3, #92	; 0x5c
 80023e0:	2201      	movs	r2, #1
 80023e2:	701a      	strb	r2, [r3, #0]
 80023e4:	e0d9      	b.n	800259a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80023e6:	6879      	ldr	r1, [r7, #4]
 80023e8:	68fa      	ldr	r2, [r7, #12]
 80023ea:	4613      	mov	r3, r2
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	4413      	add	r3, r2
 80023f0:	00db      	lsls	r3, r3, #3
 80023f2:	440b      	add	r3, r1
 80023f4:	335d      	adds	r3, #93	; 0x5d
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	2b05      	cmp	r3, #5
 80023fa:	d10a      	bne.n	8002412 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80023fc:	6879      	ldr	r1, [r7, #4]
 80023fe:	68fa      	ldr	r2, [r7, #12]
 8002400:	4613      	mov	r3, r2
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	4413      	add	r3, r2
 8002406:	00db      	lsls	r3, r3, #3
 8002408:	440b      	add	r3, r1
 800240a:	335c      	adds	r3, #92	; 0x5c
 800240c:	2205      	movs	r2, #5
 800240e:	701a      	strb	r2, [r3, #0]
 8002410:	e0c3      	b.n	800259a <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002412:	6879      	ldr	r1, [r7, #4]
 8002414:	68fa      	ldr	r2, [r7, #12]
 8002416:	4613      	mov	r3, r2
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	4413      	add	r3, r2
 800241c:	00db      	lsls	r3, r3, #3
 800241e:	440b      	add	r3, r1
 8002420:	335d      	adds	r3, #93	; 0x5d
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	2b06      	cmp	r3, #6
 8002426:	d00a      	beq.n	800243e <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002428:	6879      	ldr	r1, [r7, #4]
 800242a:	68fa      	ldr	r2, [r7, #12]
 800242c:	4613      	mov	r3, r2
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	4413      	add	r3, r2
 8002432:	00db      	lsls	r3, r3, #3
 8002434:	440b      	add	r3, r1
 8002436:	335d      	adds	r3, #93	; 0x5d
 8002438:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800243a:	2b08      	cmp	r3, #8
 800243c:	d156      	bne.n	80024ec <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 800243e:	6879      	ldr	r1, [r7, #4]
 8002440:	68fa      	ldr	r2, [r7, #12]
 8002442:	4613      	mov	r3, r2
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	4413      	add	r3, r2
 8002448:	00db      	lsls	r3, r3, #3
 800244a:	440b      	add	r3, r1
 800244c:	3358      	adds	r3, #88	; 0x58
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	1c59      	adds	r1, r3, #1
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	68fa      	ldr	r2, [r7, #12]
 8002456:	4613      	mov	r3, r2
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	4413      	add	r3, r2
 800245c:	00db      	lsls	r3, r3, #3
 800245e:	4403      	add	r3, r0
 8002460:	3358      	adds	r3, #88	; 0x58
 8002462:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002464:	6879      	ldr	r1, [r7, #4]
 8002466:	68fa      	ldr	r2, [r7, #12]
 8002468:	4613      	mov	r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	4413      	add	r3, r2
 800246e:	00db      	lsls	r3, r3, #3
 8002470:	440b      	add	r3, r1
 8002472:	3358      	adds	r3, #88	; 0x58
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2b03      	cmp	r3, #3
 8002478:	d914      	bls.n	80024a4 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800247a:	6879      	ldr	r1, [r7, #4]
 800247c:	68fa      	ldr	r2, [r7, #12]
 800247e:	4613      	mov	r3, r2
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	4413      	add	r3, r2
 8002484:	00db      	lsls	r3, r3, #3
 8002486:	440b      	add	r3, r1
 8002488:	3358      	adds	r3, #88	; 0x58
 800248a:	2200      	movs	r2, #0
 800248c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800248e:	6879      	ldr	r1, [r7, #4]
 8002490:	68fa      	ldr	r2, [r7, #12]
 8002492:	4613      	mov	r3, r2
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	4413      	add	r3, r2
 8002498:	00db      	lsls	r3, r3, #3
 800249a:	440b      	add	r3, r1
 800249c:	335c      	adds	r3, #92	; 0x5c
 800249e:	2204      	movs	r2, #4
 80024a0:	701a      	strb	r2, [r3, #0]
 80024a2:	e009      	b.n	80024b8 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80024a4:	6879      	ldr	r1, [r7, #4]
 80024a6:	68fa      	ldr	r2, [r7, #12]
 80024a8:	4613      	mov	r3, r2
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	4413      	add	r3, r2
 80024ae:	00db      	lsls	r3, r3, #3
 80024b0:	440b      	add	r3, r1
 80024b2:	335c      	adds	r3, #92	; 0x5c
 80024b4:	2202      	movs	r2, #2
 80024b6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	015a      	lsls	r2, r3, #5
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	4413      	add	r3, r2
 80024c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80024ce:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80024d6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	015a      	lsls	r2, r3, #5
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	4413      	add	r3, r2
 80024e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024e4:	461a      	mov	r2, r3
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	6013      	str	r3, [r2, #0]
 80024ea:	e056      	b.n	800259a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80024ec:	6879      	ldr	r1, [r7, #4]
 80024ee:	68fa      	ldr	r2, [r7, #12]
 80024f0:	4613      	mov	r3, r2
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	4413      	add	r3, r2
 80024f6:	00db      	lsls	r3, r3, #3
 80024f8:	440b      	add	r3, r1
 80024fa:	335d      	adds	r3, #93	; 0x5d
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	2b03      	cmp	r3, #3
 8002500:	d123      	bne.n	800254a <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002502:	6879      	ldr	r1, [r7, #4]
 8002504:	68fa      	ldr	r2, [r7, #12]
 8002506:	4613      	mov	r3, r2
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	4413      	add	r3, r2
 800250c:	00db      	lsls	r3, r3, #3
 800250e:	440b      	add	r3, r1
 8002510:	335c      	adds	r3, #92	; 0x5c
 8002512:	2202      	movs	r2, #2
 8002514:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	015a      	lsls	r2, r3, #5
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	4413      	add	r3, r2
 800251e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800252c:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002534:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	015a      	lsls	r2, r3, #5
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	4413      	add	r3, r2
 800253e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002542:	461a      	mov	r2, r3
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	6013      	str	r3, [r2, #0]
 8002548:	e027      	b.n	800259a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800254a:	6879      	ldr	r1, [r7, #4]
 800254c:	68fa      	ldr	r2, [r7, #12]
 800254e:	4613      	mov	r3, r2
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	4413      	add	r3, r2
 8002554:	00db      	lsls	r3, r3, #3
 8002556:	440b      	add	r3, r1
 8002558:	335d      	adds	r3, #93	; 0x5d
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	2b07      	cmp	r3, #7
 800255e:	d11c      	bne.n	800259a <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8002560:	6879      	ldr	r1, [r7, #4]
 8002562:	68fa      	ldr	r2, [r7, #12]
 8002564:	4613      	mov	r3, r2
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	4413      	add	r3, r2
 800256a:	00db      	lsls	r3, r3, #3
 800256c:	440b      	add	r3, r1
 800256e:	3358      	adds	r3, #88	; 0x58
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	1c59      	adds	r1, r3, #1
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	68fa      	ldr	r2, [r7, #12]
 8002578:	4613      	mov	r3, r2
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	4413      	add	r3, r2
 800257e:	00db      	lsls	r3, r3, #3
 8002580:	4403      	add	r3, r0
 8002582:	3358      	adds	r3, #88	; 0x58
 8002584:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002586:	6879      	ldr	r1, [r7, #4]
 8002588:	68fa      	ldr	r2, [r7, #12]
 800258a:	4613      	mov	r3, r2
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	4413      	add	r3, r2
 8002590:	00db      	lsls	r3, r3, #3
 8002592:	440b      	add	r3, r1
 8002594:	335c      	adds	r3, #92	; 0x5c
 8002596:	2204      	movs	r2, #4
 8002598:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	015a      	lsls	r2, r3, #5
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	4413      	add	r3, r2
 80025a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025a6:	461a      	mov	r2, r3
 80025a8:	2302      	movs	r3, #2
 80025aa:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	b2d8      	uxtb	r0, r3
 80025b0:	6879      	ldr	r1, [r7, #4]
 80025b2:	68fa      	ldr	r2, [r7, #12]
 80025b4:	4613      	mov	r3, r2
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	4413      	add	r3, r2
 80025ba:	00db      	lsls	r3, r3, #3
 80025bc:	440b      	add	r3, r1
 80025be:	335c      	adds	r3, #92	; 0x5c
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	461a      	mov	r2, r3
 80025c4:	4601      	mov	r1, r0
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f006 fa56 	bl	8008a78 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80025cc:	e0d1      	b.n	8002772 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	015a      	lsls	r2, r3, #5
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	4413      	add	r3, r2
 80025d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025e0:	2b80      	cmp	r3, #128	; 0x80
 80025e2:	d13e      	bne.n	8002662 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	015a      	lsls	r2, r3, #5
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	4413      	add	r3, r2
 80025ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	68fa      	ldr	r2, [r7, #12]
 80025f4:	0151      	lsls	r1, r2, #5
 80025f6:	693a      	ldr	r2, [r7, #16]
 80025f8:	440a      	add	r2, r1
 80025fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025fe:	f043 0302 	orr.w	r3, r3, #2
 8002602:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002604:	6879      	ldr	r1, [r7, #4]
 8002606:	68fa      	ldr	r2, [r7, #12]
 8002608:	4613      	mov	r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	4413      	add	r3, r2
 800260e:	00db      	lsls	r3, r3, #3
 8002610:	440b      	add	r3, r1
 8002612:	3358      	adds	r3, #88	; 0x58
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	1c59      	adds	r1, r3, #1
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	68fa      	ldr	r2, [r7, #12]
 800261c:	4613      	mov	r3, r2
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	4413      	add	r3, r2
 8002622:	00db      	lsls	r3, r3, #3
 8002624:	4403      	add	r3, r0
 8002626:	3358      	adds	r3, #88	; 0x58
 8002628:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800262a:	6879      	ldr	r1, [r7, #4]
 800262c:	68fa      	ldr	r2, [r7, #12]
 800262e:	4613      	mov	r3, r2
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	4413      	add	r3, r2
 8002634:	00db      	lsls	r3, r3, #3
 8002636:	440b      	add	r3, r1
 8002638:	335d      	adds	r3, #93	; 0x5d
 800263a:	2206      	movs	r2, #6
 800263c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	b2d2      	uxtb	r2, r2
 8002646:	4611      	mov	r1, r2
 8002648:	4618      	mov	r0, r3
 800264a:	f004 f87a 	bl	8006742 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	015a      	lsls	r2, r3, #5
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	4413      	add	r3, r2
 8002656:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800265a:	461a      	mov	r2, r3
 800265c:	2380      	movs	r3, #128	; 0x80
 800265e:	6093      	str	r3, [r2, #8]
}
 8002660:	e087      	b.n	8002772 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	015a      	lsls	r2, r3, #5
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	4413      	add	r3, r2
 800266a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	f003 0310 	and.w	r3, r3, #16
 8002674:	2b10      	cmp	r3, #16
 8002676:	d17c      	bne.n	8002772 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002678:	6879      	ldr	r1, [r7, #4]
 800267a:	68fa      	ldr	r2, [r7, #12]
 800267c:	4613      	mov	r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	4413      	add	r3, r2
 8002682:	00db      	lsls	r3, r3, #3
 8002684:	440b      	add	r3, r1
 8002686:	333f      	adds	r3, #63	; 0x3f
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	2b03      	cmp	r3, #3
 800268c:	d122      	bne.n	80026d4 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800268e:	6879      	ldr	r1, [r7, #4]
 8002690:	68fa      	ldr	r2, [r7, #12]
 8002692:	4613      	mov	r3, r2
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	4413      	add	r3, r2
 8002698:	00db      	lsls	r3, r3, #3
 800269a:	440b      	add	r3, r1
 800269c:	3358      	adds	r3, #88	; 0x58
 800269e:	2200      	movs	r2, #0
 80026a0:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	015a      	lsls	r2, r3, #5
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	4413      	add	r3, r2
 80026aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	68fa      	ldr	r2, [r7, #12]
 80026b2:	0151      	lsls	r1, r2, #5
 80026b4:	693a      	ldr	r2, [r7, #16]
 80026b6:	440a      	add	r2, r1
 80026b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026bc:	f043 0302 	orr.w	r3, r3, #2
 80026c0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	68fa      	ldr	r2, [r7, #12]
 80026c8:	b2d2      	uxtb	r2, r2
 80026ca:	4611      	mov	r1, r2
 80026cc:	4618      	mov	r0, r3
 80026ce:	f004 f838 	bl	8006742 <USB_HC_Halt>
 80026d2:	e045      	b.n	8002760 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80026d4:	6879      	ldr	r1, [r7, #4]
 80026d6:	68fa      	ldr	r2, [r7, #12]
 80026d8:	4613      	mov	r3, r2
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	4413      	add	r3, r2
 80026de:	00db      	lsls	r3, r3, #3
 80026e0:	440b      	add	r3, r1
 80026e2:	333f      	adds	r3, #63	; 0x3f
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d00a      	beq.n	8002700 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80026ea:	6879      	ldr	r1, [r7, #4]
 80026ec:	68fa      	ldr	r2, [r7, #12]
 80026ee:	4613      	mov	r3, r2
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	4413      	add	r3, r2
 80026f4:	00db      	lsls	r3, r3, #3
 80026f6:	440b      	add	r3, r1
 80026f8:	333f      	adds	r3, #63	; 0x3f
 80026fa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d12f      	bne.n	8002760 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002700:	6879      	ldr	r1, [r7, #4]
 8002702:	68fa      	ldr	r2, [r7, #12]
 8002704:	4613      	mov	r3, r2
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	4413      	add	r3, r2
 800270a:	00db      	lsls	r3, r3, #3
 800270c:	440b      	add	r3, r1
 800270e:	3358      	adds	r3, #88	; 0x58
 8002710:	2200      	movs	r2, #0
 8002712:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	691b      	ldr	r3, [r3, #16]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d121      	bne.n	8002760 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 800271c:	6879      	ldr	r1, [r7, #4]
 800271e:	68fa      	ldr	r2, [r7, #12]
 8002720:	4613      	mov	r3, r2
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	4413      	add	r3, r2
 8002726:	00db      	lsls	r3, r3, #3
 8002728:	440b      	add	r3, r1
 800272a:	335d      	adds	r3, #93	; 0x5d
 800272c:	2203      	movs	r2, #3
 800272e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	015a      	lsls	r2, r3, #5
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	4413      	add	r3, r2
 8002738:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	68fa      	ldr	r2, [r7, #12]
 8002740:	0151      	lsls	r1, r2, #5
 8002742:	693a      	ldr	r2, [r7, #16]
 8002744:	440a      	add	r2, r1
 8002746:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800274a:	f043 0302 	orr.w	r3, r3, #2
 800274e:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	68fa      	ldr	r2, [r7, #12]
 8002756:	b2d2      	uxtb	r2, r2
 8002758:	4611      	mov	r1, r2
 800275a:	4618      	mov	r0, r3
 800275c:	f003 fff1 	bl	8006742 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	015a      	lsls	r2, r3, #5
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	4413      	add	r3, r2
 8002768:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800276c:	461a      	mov	r2, r3
 800276e:	2310      	movs	r3, #16
 8002770:	6093      	str	r3, [r2, #8]
}
 8002772:	bf00      	nop
 8002774:	3718      	adds	r7, #24
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800277a:	b580      	push	{r7, lr}
 800277c:	b086      	sub	sp, #24
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
 8002782:	460b      	mov	r3, r1
 8002784:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002790:	78fb      	ldrb	r3, [r7, #3]
 8002792:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	015a      	lsls	r2, r3, #5
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	4413      	add	r3, r2
 800279c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	f003 0304 	and.w	r3, r3, #4
 80027a6:	2b04      	cmp	r3, #4
 80027a8:	d119      	bne.n	80027de <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	015a      	lsls	r2, r3, #5
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	4413      	add	r3, r2
 80027b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027b6:	461a      	mov	r2, r3
 80027b8:	2304      	movs	r3, #4
 80027ba:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	015a      	lsls	r2, r3, #5
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	4413      	add	r3, r2
 80027c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	68fa      	ldr	r2, [r7, #12]
 80027cc:	0151      	lsls	r1, r2, #5
 80027ce:	693a      	ldr	r2, [r7, #16]
 80027d0:	440a      	add	r2, r1
 80027d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027d6:	f043 0302 	orr.w	r3, r3, #2
 80027da:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80027dc:	e33e      	b.n	8002e5c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	015a      	lsls	r2, r3, #5
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	4413      	add	r3, r2
 80027e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	f003 0320 	and.w	r3, r3, #32
 80027f0:	2b20      	cmp	r3, #32
 80027f2:	d141      	bne.n	8002878 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	015a      	lsls	r2, r3, #5
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	4413      	add	r3, r2
 80027fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002800:	461a      	mov	r2, r3
 8002802:	2320      	movs	r3, #32
 8002804:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002806:	6879      	ldr	r1, [r7, #4]
 8002808:	68fa      	ldr	r2, [r7, #12]
 800280a:	4613      	mov	r3, r2
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	4413      	add	r3, r2
 8002810:	00db      	lsls	r3, r3, #3
 8002812:	440b      	add	r3, r1
 8002814:	333d      	adds	r3, #61	; 0x3d
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	2b01      	cmp	r3, #1
 800281a:	f040 831f 	bne.w	8002e5c <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 800281e:	6879      	ldr	r1, [r7, #4]
 8002820:	68fa      	ldr	r2, [r7, #12]
 8002822:	4613      	mov	r3, r2
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	4413      	add	r3, r2
 8002828:	00db      	lsls	r3, r3, #3
 800282a:	440b      	add	r3, r1
 800282c:	333d      	adds	r3, #61	; 0x3d
 800282e:	2200      	movs	r2, #0
 8002830:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002832:	6879      	ldr	r1, [r7, #4]
 8002834:	68fa      	ldr	r2, [r7, #12]
 8002836:	4613      	mov	r3, r2
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	4413      	add	r3, r2
 800283c:	00db      	lsls	r3, r3, #3
 800283e:	440b      	add	r3, r1
 8002840:	335c      	adds	r3, #92	; 0x5c
 8002842:	2202      	movs	r2, #2
 8002844:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	015a      	lsls	r2, r3, #5
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	4413      	add	r3, r2
 800284e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	68fa      	ldr	r2, [r7, #12]
 8002856:	0151      	lsls	r1, r2, #5
 8002858:	693a      	ldr	r2, [r7, #16]
 800285a:	440a      	add	r2, r1
 800285c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002860:	f043 0302 	orr.w	r3, r3, #2
 8002864:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	68fa      	ldr	r2, [r7, #12]
 800286c:	b2d2      	uxtb	r2, r2
 800286e:	4611      	mov	r1, r2
 8002870:	4618      	mov	r0, r3
 8002872:	f003 ff66 	bl	8006742 <USB_HC_Halt>
}
 8002876:	e2f1      	b.n	8002e5c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	015a      	lsls	r2, r3, #5
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	4413      	add	r3, r2
 8002880:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800288a:	2b40      	cmp	r3, #64	; 0x40
 800288c:	d13f      	bne.n	800290e <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 800288e:	6879      	ldr	r1, [r7, #4]
 8002890:	68fa      	ldr	r2, [r7, #12]
 8002892:	4613      	mov	r3, r2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	4413      	add	r3, r2
 8002898:	00db      	lsls	r3, r3, #3
 800289a:	440b      	add	r3, r1
 800289c:	335d      	adds	r3, #93	; 0x5d
 800289e:	2204      	movs	r2, #4
 80028a0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80028a2:	6879      	ldr	r1, [r7, #4]
 80028a4:	68fa      	ldr	r2, [r7, #12]
 80028a6:	4613      	mov	r3, r2
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	4413      	add	r3, r2
 80028ac:	00db      	lsls	r3, r3, #3
 80028ae:	440b      	add	r3, r1
 80028b0:	333d      	adds	r3, #61	; 0x3d
 80028b2:	2201      	movs	r2, #1
 80028b4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80028b6:	6879      	ldr	r1, [r7, #4]
 80028b8:	68fa      	ldr	r2, [r7, #12]
 80028ba:	4613      	mov	r3, r2
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	4413      	add	r3, r2
 80028c0:	00db      	lsls	r3, r3, #3
 80028c2:	440b      	add	r3, r1
 80028c4:	3358      	adds	r3, #88	; 0x58
 80028c6:	2200      	movs	r2, #0
 80028c8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	015a      	lsls	r2, r3, #5
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	4413      	add	r3, r2
 80028d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	68fa      	ldr	r2, [r7, #12]
 80028da:	0151      	lsls	r1, r2, #5
 80028dc:	693a      	ldr	r2, [r7, #16]
 80028de:	440a      	add	r2, r1
 80028e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028e4:	f043 0302 	orr.w	r3, r3, #2
 80028e8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	68fa      	ldr	r2, [r7, #12]
 80028f0:	b2d2      	uxtb	r2, r2
 80028f2:	4611      	mov	r1, r2
 80028f4:	4618      	mov	r0, r3
 80028f6:	f003 ff24 	bl	8006742 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	015a      	lsls	r2, r3, #5
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	4413      	add	r3, r2
 8002902:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002906:	461a      	mov	r2, r3
 8002908:	2340      	movs	r3, #64	; 0x40
 800290a:	6093      	str	r3, [r2, #8]
}
 800290c:	e2a6      	b.n	8002e5c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	015a      	lsls	r2, r3, #5
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	4413      	add	r3, r2
 8002916:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002920:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002924:	d122      	bne.n	800296c <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	015a      	lsls	r2, r3, #5
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	4413      	add	r3, r2
 800292e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	68fa      	ldr	r2, [r7, #12]
 8002936:	0151      	lsls	r1, r2, #5
 8002938:	693a      	ldr	r2, [r7, #16]
 800293a:	440a      	add	r2, r1
 800293c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002940:	f043 0302 	orr.w	r3, r3, #2
 8002944:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	68fa      	ldr	r2, [r7, #12]
 800294c:	b2d2      	uxtb	r2, r2
 800294e:	4611      	mov	r1, r2
 8002950:	4618      	mov	r0, r3
 8002952:	f003 fef6 	bl	8006742 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	015a      	lsls	r2, r3, #5
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	4413      	add	r3, r2
 800295e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002962:	461a      	mov	r2, r3
 8002964:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002968:	6093      	str	r3, [r2, #8]
}
 800296a:	e277      	b.n	8002e5c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	015a      	lsls	r2, r3, #5
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	4413      	add	r3, r2
 8002974:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f003 0301 	and.w	r3, r3, #1
 800297e:	2b01      	cmp	r3, #1
 8002980:	d135      	bne.n	80029ee <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002982:	6879      	ldr	r1, [r7, #4]
 8002984:	68fa      	ldr	r2, [r7, #12]
 8002986:	4613      	mov	r3, r2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	4413      	add	r3, r2
 800298c:	00db      	lsls	r3, r3, #3
 800298e:	440b      	add	r3, r1
 8002990:	3358      	adds	r3, #88	; 0x58
 8002992:	2200      	movs	r2, #0
 8002994:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	015a      	lsls	r2, r3, #5
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	4413      	add	r3, r2
 800299e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	68fa      	ldr	r2, [r7, #12]
 80029a6:	0151      	lsls	r1, r2, #5
 80029a8:	693a      	ldr	r2, [r7, #16]
 80029aa:	440a      	add	r2, r1
 80029ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029b0:	f043 0302 	orr.w	r3, r3, #2
 80029b4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	68fa      	ldr	r2, [r7, #12]
 80029bc:	b2d2      	uxtb	r2, r2
 80029be:	4611      	mov	r1, r2
 80029c0:	4618      	mov	r0, r3
 80029c2:	f003 febe 	bl	8006742 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	015a      	lsls	r2, r3, #5
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	4413      	add	r3, r2
 80029ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029d2:	461a      	mov	r2, r3
 80029d4:	2301      	movs	r3, #1
 80029d6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80029d8:	6879      	ldr	r1, [r7, #4]
 80029da:	68fa      	ldr	r2, [r7, #12]
 80029dc:	4613      	mov	r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	4413      	add	r3, r2
 80029e2:	00db      	lsls	r3, r3, #3
 80029e4:	440b      	add	r3, r1
 80029e6:	335d      	adds	r3, #93	; 0x5d
 80029e8:	2201      	movs	r2, #1
 80029ea:	701a      	strb	r2, [r3, #0]
}
 80029ec:	e236      	b.n	8002e5c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	015a      	lsls	r2, r3, #5
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	4413      	add	r3, r2
 80029f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f003 0308 	and.w	r3, r3, #8
 8002a00:	2b08      	cmp	r3, #8
 8002a02:	d12b      	bne.n	8002a5c <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	015a      	lsls	r2, r3, #5
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	4413      	add	r3, r2
 8002a0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a10:	461a      	mov	r2, r3
 8002a12:	2308      	movs	r3, #8
 8002a14:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	015a      	lsls	r2, r3, #5
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	4413      	add	r3, r2
 8002a1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	68fa      	ldr	r2, [r7, #12]
 8002a26:	0151      	lsls	r1, r2, #5
 8002a28:	693a      	ldr	r2, [r7, #16]
 8002a2a:	440a      	add	r2, r1
 8002a2c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a30:	f043 0302 	orr.w	r3, r3, #2
 8002a34:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	68fa      	ldr	r2, [r7, #12]
 8002a3c:	b2d2      	uxtb	r2, r2
 8002a3e:	4611      	mov	r1, r2
 8002a40:	4618      	mov	r0, r3
 8002a42:	f003 fe7e 	bl	8006742 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002a46:	6879      	ldr	r1, [r7, #4]
 8002a48:	68fa      	ldr	r2, [r7, #12]
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	4413      	add	r3, r2
 8002a50:	00db      	lsls	r3, r3, #3
 8002a52:	440b      	add	r3, r1
 8002a54:	335d      	adds	r3, #93	; 0x5d
 8002a56:	2205      	movs	r2, #5
 8002a58:	701a      	strb	r2, [r3, #0]
}
 8002a5a:	e1ff      	b.n	8002e5c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	015a      	lsls	r2, r3, #5
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	4413      	add	r3, r2
 8002a64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f003 0310 	and.w	r3, r3, #16
 8002a6e:	2b10      	cmp	r3, #16
 8002a70:	d155      	bne.n	8002b1e <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002a72:	6879      	ldr	r1, [r7, #4]
 8002a74:	68fa      	ldr	r2, [r7, #12]
 8002a76:	4613      	mov	r3, r2
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	4413      	add	r3, r2
 8002a7c:	00db      	lsls	r3, r3, #3
 8002a7e:	440b      	add	r3, r1
 8002a80:	3358      	adds	r3, #88	; 0x58
 8002a82:	2200      	movs	r2, #0
 8002a84:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002a86:	6879      	ldr	r1, [r7, #4]
 8002a88:	68fa      	ldr	r2, [r7, #12]
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	4413      	add	r3, r2
 8002a90:	00db      	lsls	r3, r3, #3
 8002a92:	440b      	add	r3, r1
 8002a94:	335d      	adds	r3, #93	; 0x5d
 8002a96:	2203      	movs	r2, #3
 8002a98:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002a9a:	6879      	ldr	r1, [r7, #4]
 8002a9c:	68fa      	ldr	r2, [r7, #12]
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	4413      	add	r3, r2
 8002aa4:	00db      	lsls	r3, r3, #3
 8002aa6:	440b      	add	r3, r1
 8002aa8:	333d      	adds	r3, #61	; 0x3d
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d114      	bne.n	8002ada <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8002ab0:	6879      	ldr	r1, [r7, #4]
 8002ab2:	68fa      	ldr	r2, [r7, #12]
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	4413      	add	r3, r2
 8002aba:	00db      	lsls	r3, r3, #3
 8002abc:	440b      	add	r3, r1
 8002abe:	333c      	adds	r3, #60	; 0x3c
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d109      	bne.n	8002ada <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8002ac6:	6879      	ldr	r1, [r7, #4]
 8002ac8:	68fa      	ldr	r2, [r7, #12]
 8002aca:	4613      	mov	r3, r2
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	4413      	add	r3, r2
 8002ad0:	00db      	lsls	r3, r3, #3
 8002ad2:	440b      	add	r3, r1
 8002ad4:	333d      	adds	r3, #61	; 0x3d
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	015a      	lsls	r2, r3, #5
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	4413      	add	r3, r2
 8002ae2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	68fa      	ldr	r2, [r7, #12]
 8002aea:	0151      	lsls	r1, r2, #5
 8002aec:	693a      	ldr	r2, [r7, #16]
 8002aee:	440a      	add	r2, r1
 8002af0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002af4:	f043 0302 	orr.w	r3, r3, #2
 8002af8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	68fa      	ldr	r2, [r7, #12]
 8002b00:	b2d2      	uxtb	r2, r2
 8002b02:	4611      	mov	r1, r2
 8002b04:	4618      	mov	r0, r3
 8002b06:	f003 fe1c 	bl	8006742 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	015a      	lsls	r2, r3, #5
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	4413      	add	r3, r2
 8002b12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b16:	461a      	mov	r2, r3
 8002b18:	2310      	movs	r3, #16
 8002b1a:	6093      	str	r3, [r2, #8]
}
 8002b1c:	e19e      	b.n	8002e5c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	015a      	lsls	r2, r3, #5
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	4413      	add	r3, r2
 8002b26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b30:	2b80      	cmp	r3, #128	; 0x80
 8002b32:	d12b      	bne.n	8002b8c <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	015a      	lsls	r2, r3, #5
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	68fa      	ldr	r2, [r7, #12]
 8002b44:	0151      	lsls	r1, r2, #5
 8002b46:	693a      	ldr	r2, [r7, #16]
 8002b48:	440a      	add	r2, r1
 8002b4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b4e:	f043 0302 	orr.w	r3, r3, #2
 8002b52:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	68fa      	ldr	r2, [r7, #12]
 8002b5a:	b2d2      	uxtb	r2, r2
 8002b5c:	4611      	mov	r1, r2
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f003 fdef 	bl	8006742 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002b64:	6879      	ldr	r1, [r7, #4]
 8002b66:	68fa      	ldr	r2, [r7, #12]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	4413      	add	r3, r2
 8002b6e:	00db      	lsls	r3, r3, #3
 8002b70:	440b      	add	r3, r1
 8002b72:	335d      	adds	r3, #93	; 0x5d
 8002b74:	2206      	movs	r2, #6
 8002b76:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	015a      	lsls	r2, r3, #5
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	4413      	add	r3, r2
 8002b80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b84:	461a      	mov	r2, r3
 8002b86:	2380      	movs	r3, #128	; 0x80
 8002b88:	6093      	str	r3, [r2, #8]
}
 8002b8a:	e167      	b.n	8002e5c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	015a      	lsls	r2, r3, #5
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	4413      	add	r3, r2
 8002b94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ba2:	d135      	bne.n	8002c10 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	015a      	lsls	r2, r3, #5
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	4413      	add	r3, r2
 8002bac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	68fa      	ldr	r2, [r7, #12]
 8002bb4:	0151      	lsls	r1, r2, #5
 8002bb6:	693a      	ldr	r2, [r7, #16]
 8002bb8:	440a      	add	r2, r1
 8002bba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002bbe:	f043 0302 	orr.w	r3, r3, #2
 8002bc2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	68fa      	ldr	r2, [r7, #12]
 8002bca:	b2d2      	uxtb	r2, r2
 8002bcc:	4611      	mov	r1, r2
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f003 fdb7 	bl	8006742 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	015a      	lsls	r2, r3, #5
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	4413      	add	r3, r2
 8002bdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002be0:	461a      	mov	r2, r3
 8002be2:	2310      	movs	r3, #16
 8002be4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	015a      	lsls	r2, r3, #5
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	4413      	add	r3, r2
 8002bee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bf8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002bfa:	6879      	ldr	r1, [r7, #4]
 8002bfc:	68fa      	ldr	r2, [r7, #12]
 8002bfe:	4613      	mov	r3, r2
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	4413      	add	r3, r2
 8002c04:	00db      	lsls	r3, r3, #3
 8002c06:	440b      	add	r3, r1
 8002c08:	335d      	adds	r3, #93	; 0x5d
 8002c0a:	2208      	movs	r2, #8
 8002c0c:	701a      	strb	r2, [r3, #0]
}
 8002c0e:	e125      	b.n	8002e5c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	015a      	lsls	r2, r3, #5
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	4413      	add	r3, r2
 8002c18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f003 0302 	and.w	r3, r3, #2
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	f040 811a 	bne.w	8002e5c <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	015a      	lsls	r2, r3, #5
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	4413      	add	r3, r2
 8002c30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	68fa      	ldr	r2, [r7, #12]
 8002c38:	0151      	lsls	r1, r2, #5
 8002c3a:	693a      	ldr	r2, [r7, #16]
 8002c3c:	440a      	add	r2, r1
 8002c3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c42:	f023 0302 	bic.w	r3, r3, #2
 8002c46:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002c48:	6879      	ldr	r1, [r7, #4]
 8002c4a:	68fa      	ldr	r2, [r7, #12]
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	4413      	add	r3, r2
 8002c52:	00db      	lsls	r3, r3, #3
 8002c54:	440b      	add	r3, r1
 8002c56:	335d      	adds	r3, #93	; 0x5d
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d137      	bne.n	8002cce <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002c5e:	6879      	ldr	r1, [r7, #4]
 8002c60:	68fa      	ldr	r2, [r7, #12]
 8002c62:	4613      	mov	r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	4413      	add	r3, r2
 8002c68:	00db      	lsls	r3, r3, #3
 8002c6a:	440b      	add	r3, r1
 8002c6c:	335c      	adds	r3, #92	; 0x5c
 8002c6e:	2201      	movs	r2, #1
 8002c70:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002c72:	6879      	ldr	r1, [r7, #4]
 8002c74:	68fa      	ldr	r2, [r7, #12]
 8002c76:	4613      	mov	r3, r2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	4413      	add	r3, r2
 8002c7c:	00db      	lsls	r3, r3, #3
 8002c7e:	440b      	add	r3, r1
 8002c80:	333f      	adds	r3, #63	; 0x3f
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d00b      	beq.n	8002ca0 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002c88:	6879      	ldr	r1, [r7, #4]
 8002c8a:	68fa      	ldr	r2, [r7, #12]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	4413      	add	r3, r2
 8002c92:	00db      	lsls	r3, r3, #3
 8002c94:	440b      	add	r3, r1
 8002c96:	333f      	adds	r3, #63	; 0x3f
 8002c98:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002c9a:	2b03      	cmp	r3, #3
 8002c9c:	f040 80c5 	bne.w	8002e2a <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8002ca0:	6879      	ldr	r1, [r7, #4]
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	4413      	add	r3, r2
 8002caa:	00db      	lsls	r3, r3, #3
 8002cac:	440b      	add	r3, r1
 8002cae:	3351      	adds	r3, #81	; 0x51
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	f083 0301 	eor.w	r3, r3, #1
 8002cb6:	b2d8      	uxtb	r0, r3
 8002cb8:	6879      	ldr	r1, [r7, #4]
 8002cba:	68fa      	ldr	r2, [r7, #12]
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	4413      	add	r3, r2
 8002cc2:	00db      	lsls	r3, r3, #3
 8002cc4:	440b      	add	r3, r1
 8002cc6:	3351      	adds	r3, #81	; 0x51
 8002cc8:	4602      	mov	r2, r0
 8002cca:	701a      	strb	r2, [r3, #0]
 8002ccc:	e0ad      	b.n	8002e2a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002cce:	6879      	ldr	r1, [r7, #4]
 8002cd0:	68fa      	ldr	r2, [r7, #12]
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	4413      	add	r3, r2
 8002cd8:	00db      	lsls	r3, r3, #3
 8002cda:	440b      	add	r3, r1
 8002cdc:	335d      	adds	r3, #93	; 0x5d
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	2b03      	cmp	r3, #3
 8002ce2:	d10a      	bne.n	8002cfa <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002ce4:	6879      	ldr	r1, [r7, #4]
 8002ce6:	68fa      	ldr	r2, [r7, #12]
 8002ce8:	4613      	mov	r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	4413      	add	r3, r2
 8002cee:	00db      	lsls	r3, r3, #3
 8002cf0:	440b      	add	r3, r1
 8002cf2:	335c      	adds	r3, #92	; 0x5c
 8002cf4:	2202      	movs	r2, #2
 8002cf6:	701a      	strb	r2, [r3, #0]
 8002cf8:	e097      	b.n	8002e2a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002cfa:	6879      	ldr	r1, [r7, #4]
 8002cfc:	68fa      	ldr	r2, [r7, #12]
 8002cfe:	4613      	mov	r3, r2
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	4413      	add	r3, r2
 8002d04:	00db      	lsls	r3, r3, #3
 8002d06:	440b      	add	r3, r1
 8002d08:	335d      	adds	r3, #93	; 0x5d
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	2b04      	cmp	r3, #4
 8002d0e:	d10a      	bne.n	8002d26 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002d10:	6879      	ldr	r1, [r7, #4]
 8002d12:	68fa      	ldr	r2, [r7, #12]
 8002d14:	4613      	mov	r3, r2
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	4413      	add	r3, r2
 8002d1a:	00db      	lsls	r3, r3, #3
 8002d1c:	440b      	add	r3, r1
 8002d1e:	335c      	adds	r3, #92	; 0x5c
 8002d20:	2202      	movs	r2, #2
 8002d22:	701a      	strb	r2, [r3, #0]
 8002d24:	e081      	b.n	8002e2a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002d26:	6879      	ldr	r1, [r7, #4]
 8002d28:	68fa      	ldr	r2, [r7, #12]
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	4413      	add	r3, r2
 8002d30:	00db      	lsls	r3, r3, #3
 8002d32:	440b      	add	r3, r1
 8002d34:	335d      	adds	r3, #93	; 0x5d
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	2b05      	cmp	r3, #5
 8002d3a:	d10a      	bne.n	8002d52 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002d3c:	6879      	ldr	r1, [r7, #4]
 8002d3e:	68fa      	ldr	r2, [r7, #12]
 8002d40:	4613      	mov	r3, r2
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	4413      	add	r3, r2
 8002d46:	00db      	lsls	r3, r3, #3
 8002d48:	440b      	add	r3, r1
 8002d4a:	335c      	adds	r3, #92	; 0x5c
 8002d4c:	2205      	movs	r2, #5
 8002d4e:	701a      	strb	r2, [r3, #0]
 8002d50:	e06b      	b.n	8002e2a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002d52:	6879      	ldr	r1, [r7, #4]
 8002d54:	68fa      	ldr	r2, [r7, #12]
 8002d56:	4613      	mov	r3, r2
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	4413      	add	r3, r2
 8002d5c:	00db      	lsls	r3, r3, #3
 8002d5e:	440b      	add	r3, r1
 8002d60:	335d      	adds	r3, #93	; 0x5d
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	2b06      	cmp	r3, #6
 8002d66:	d00a      	beq.n	8002d7e <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002d68:	6879      	ldr	r1, [r7, #4]
 8002d6a:	68fa      	ldr	r2, [r7, #12]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	4413      	add	r3, r2
 8002d72:	00db      	lsls	r3, r3, #3
 8002d74:	440b      	add	r3, r1
 8002d76:	335d      	adds	r3, #93	; 0x5d
 8002d78:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002d7a:	2b08      	cmp	r3, #8
 8002d7c:	d155      	bne.n	8002e2a <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8002d7e:	6879      	ldr	r1, [r7, #4]
 8002d80:	68fa      	ldr	r2, [r7, #12]
 8002d82:	4613      	mov	r3, r2
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	4413      	add	r3, r2
 8002d88:	00db      	lsls	r3, r3, #3
 8002d8a:	440b      	add	r3, r1
 8002d8c:	3358      	adds	r3, #88	; 0x58
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	1c59      	adds	r1, r3, #1
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	68fa      	ldr	r2, [r7, #12]
 8002d96:	4613      	mov	r3, r2
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	4413      	add	r3, r2
 8002d9c:	00db      	lsls	r3, r3, #3
 8002d9e:	4403      	add	r3, r0
 8002da0:	3358      	adds	r3, #88	; 0x58
 8002da2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002da4:	6879      	ldr	r1, [r7, #4]
 8002da6:	68fa      	ldr	r2, [r7, #12]
 8002da8:	4613      	mov	r3, r2
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	4413      	add	r3, r2
 8002dae:	00db      	lsls	r3, r3, #3
 8002db0:	440b      	add	r3, r1
 8002db2:	3358      	adds	r3, #88	; 0x58
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2b03      	cmp	r3, #3
 8002db8:	d914      	bls.n	8002de4 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002dba:	6879      	ldr	r1, [r7, #4]
 8002dbc:	68fa      	ldr	r2, [r7, #12]
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	4413      	add	r3, r2
 8002dc4:	00db      	lsls	r3, r3, #3
 8002dc6:	440b      	add	r3, r1
 8002dc8:	3358      	adds	r3, #88	; 0x58
 8002dca:	2200      	movs	r2, #0
 8002dcc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002dce:	6879      	ldr	r1, [r7, #4]
 8002dd0:	68fa      	ldr	r2, [r7, #12]
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	4413      	add	r3, r2
 8002dd8:	00db      	lsls	r3, r3, #3
 8002dda:	440b      	add	r3, r1
 8002ddc:	335c      	adds	r3, #92	; 0x5c
 8002dde:	2204      	movs	r2, #4
 8002de0:	701a      	strb	r2, [r3, #0]
 8002de2:	e009      	b.n	8002df8 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002de4:	6879      	ldr	r1, [r7, #4]
 8002de6:	68fa      	ldr	r2, [r7, #12]
 8002de8:	4613      	mov	r3, r2
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	4413      	add	r3, r2
 8002dee:	00db      	lsls	r3, r3, #3
 8002df0:	440b      	add	r3, r1
 8002df2:	335c      	adds	r3, #92	; 0x5c
 8002df4:	2202      	movs	r2, #2
 8002df6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	015a      	lsls	r2, r3, #5
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	4413      	add	r3, r2
 8002e00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e0e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e16:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	015a      	lsls	r2, r3, #5
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	4413      	add	r3, r2
 8002e20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e24:	461a      	mov	r2, r3
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	015a      	lsls	r2, r3, #5
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	4413      	add	r3, r2
 8002e32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e36:	461a      	mov	r2, r3
 8002e38:	2302      	movs	r3, #2
 8002e3a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	b2d8      	uxtb	r0, r3
 8002e40:	6879      	ldr	r1, [r7, #4]
 8002e42:	68fa      	ldr	r2, [r7, #12]
 8002e44:	4613      	mov	r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	4413      	add	r3, r2
 8002e4a:	00db      	lsls	r3, r3, #3
 8002e4c:	440b      	add	r3, r1
 8002e4e:	335c      	adds	r3, #92	; 0x5c
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	461a      	mov	r2, r3
 8002e54:	4601      	mov	r1, r0
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f005 fe0e 	bl	8008a78 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002e5c:	bf00      	nop
 8002e5e:	3718      	adds	r7, #24
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b08a      	sub	sp, #40	; 0x28
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e74:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	6a1b      	ldr	r3, [r3, #32]
 8002e7c:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	f003 030f 	and.w	r3, r3, #15
 8002e84:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	0c5b      	lsrs	r3, r3, #17
 8002e8a:	f003 030f 	and.w	r3, r3, #15
 8002e8e:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	091b      	lsrs	r3, r3, #4
 8002e94:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e98:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d003      	beq.n	8002ea8 <HCD_RXQLVL_IRQHandler+0x44>
 8002ea0:	2b05      	cmp	r3, #5
 8002ea2:	f000 8082 	beq.w	8002faa <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002ea6:	e083      	b.n	8002fb0 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d07f      	beq.n	8002fae <HCD_RXQLVL_IRQHandler+0x14a>
 8002eae:	6879      	ldr	r1, [r7, #4]
 8002eb0:	69ba      	ldr	r2, [r7, #24]
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	4413      	add	r3, r2
 8002eb8:	00db      	lsls	r3, r3, #3
 8002eba:	440b      	add	r3, r1
 8002ebc:	3344      	adds	r3, #68	; 0x44
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d074      	beq.n	8002fae <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6818      	ldr	r0, [r3, #0]
 8002ec8:	6879      	ldr	r1, [r7, #4]
 8002eca:	69ba      	ldr	r2, [r7, #24]
 8002ecc:	4613      	mov	r3, r2
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	4413      	add	r3, r2
 8002ed2:	00db      	lsls	r3, r3, #3
 8002ed4:	440b      	add	r3, r1
 8002ed6:	3344      	adds	r3, #68	; 0x44
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	693a      	ldr	r2, [r7, #16]
 8002edc:	b292      	uxth	r2, r2
 8002ede:	4619      	mov	r1, r3
 8002ee0:	f002 ffcf 	bl	8005e82 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002ee4:	6879      	ldr	r1, [r7, #4]
 8002ee6:	69ba      	ldr	r2, [r7, #24]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	4413      	add	r3, r2
 8002eee:	00db      	lsls	r3, r3, #3
 8002ef0:	440b      	add	r3, r1
 8002ef2:	3344      	adds	r3, #68	; 0x44
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	18d1      	adds	r1, r2, r3
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	69ba      	ldr	r2, [r7, #24]
 8002efe:	4613      	mov	r3, r2
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	4413      	add	r3, r2
 8002f04:	00db      	lsls	r3, r3, #3
 8002f06:	4403      	add	r3, r0
 8002f08:	3344      	adds	r3, #68	; 0x44
 8002f0a:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002f0c:	6879      	ldr	r1, [r7, #4]
 8002f0e:	69ba      	ldr	r2, [r7, #24]
 8002f10:	4613      	mov	r3, r2
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	4413      	add	r3, r2
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	440b      	add	r3, r1
 8002f1a:	334c      	adds	r3, #76	; 0x4c
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	18d1      	adds	r1, r2, r3
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	4613      	mov	r3, r2
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	4413      	add	r3, r2
 8002f2c:	00db      	lsls	r3, r3, #3
 8002f2e:	4403      	add	r3, r0
 8002f30:	334c      	adds	r3, #76	; 0x4c
 8002f32:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	015a      	lsls	r2, r3, #5
 8002f38:	6a3b      	ldr	r3, [r7, #32]
 8002f3a:	4413      	add	r3, r2
 8002f3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f40:	691a      	ldr	r2, [r3, #16]
 8002f42:	4b1d      	ldr	r3, [pc, #116]	; (8002fb8 <HCD_RXQLVL_IRQHandler+0x154>)
 8002f44:	4013      	ands	r3, r2
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d031      	beq.n	8002fae <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002f4a:	69bb      	ldr	r3, [r7, #24]
 8002f4c:	015a      	lsls	r2, r3, #5
 8002f4e:	6a3b      	ldr	r3, [r7, #32]
 8002f50:	4413      	add	r3, r2
 8002f52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f60:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f68:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	015a      	lsls	r2, r3, #5
 8002f6e:	6a3b      	ldr	r3, [r7, #32]
 8002f70:	4413      	add	r3, r2
 8002f72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f76:	461a      	mov	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002f7c:	6879      	ldr	r1, [r7, #4]
 8002f7e:	69ba      	ldr	r2, [r7, #24]
 8002f80:	4613      	mov	r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	4413      	add	r3, r2
 8002f86:	00db      	lsls	r3, r3, #3
 8002f88:	440b      	add	r3, r1
 8002f8a:	3350      	adds	r3, #80	; 0x50
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	f083 0301 	eor.w	r3, r3, #1
 8002f92:	b2d8      	uxtb	r0, r3
 8002f94:	6879      	ldr	r1, [r7, #4]
 8002f96:	69ba      	ldr	r2, [r7, #24]
 8002f98:	4613      	mov	r3, r2
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	4413      	add	r3, r2
 8002f9e:	00db      	lsls	r3, r3, #3
 8002fa0:	440b      	add	r3, r1
 8002fa2:	3350      	adds	r3, #80	; 0x50
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	701a      	strb	r2, [r3, #0]
      break;
 8002fa8:	e001      	b.n	8002fae <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8002faa:	bf00      	nop
 8002fac:	e000      	b.n	8002fb0 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8002fae:	bf00      	nop
  }
}
 8002fb0:	bf00      	nop
 8002fb2:	3728      	adds	r7, #40	; 0x28
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	1ff80000 	.word	0x1ff80000

08002fbc <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b086      	sub	sp, #24
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002fe8:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f003 0302 	and.w	r3, r3, #2
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d10b      	bne.n	800300c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f003 0301 	and.w	r3, r3, #1
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d102      	bne.n	8003004 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f005 fd1e 	bl	8008a40 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	f043 0302 	orr.w	r3, r3, #2
 800300a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f003 0308 	and.w	r3, r3, #8
 8003012:	2b08      	cmp	r3, #8
 8003014:	d132      	bne.n	800307c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	f043 0308 	orr.w	r3, r3, #8
 800301c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f003 0304 	and.w	r3, r3, #4
 8003024:	2b04      	cmp	r3, #4
 8003026:	d126      	bne.n	8003076 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	699b      	ldr	r3, [r3, #24]
 800302c:	2b02      	cmp	r3, #2
 800302e:	d113      	bne.n	8003058 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003036:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800303a:	d106      	bne.n	800304a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2102      	movs	r1, #2
 8003042:	4618      	mov	r0, r3
 8003044:	f003 f858 	bl	80060f8 <USB_InitFSLSPClkSel>
 8003048:	e011      	b.n	800306e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2101      	movs	r1, #1
 8003050:	4618      	mov	r0, r3
 8003052:	f003 f851 	bl	80060f8 <USB_InitFSLSPClkSel>
 8003056:	e00a      	b.n	800306e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	2b01      	cmp	r3, #1
 800305e:	d106      	bne.n	800306e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003066:	461a      	mov	r2, r3
 8003068:	f64e 2360 	movw	r3, #60000	; 0xea60
 800306c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f005 fd10 	bl	8008a94 <HAL_HCD_PortEnabled_Callback>
 8003074:	e002      	b.n	800307c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f005 fd1a 	bl	8008ab0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f003 0320 	and.w	r3, r3, #32
 8003082:	2b20      	cmp	r3, #32
 8003084:	d103      	bne.n	800308e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	f043 0320 	orr.w	r3, r3, #32
 800308c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003094:	461a      	mov	r2, r3
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	6013      	str	r3, [r2, #0]
}
 800309a:	bf00      	nop
 800309c:	3718      	adds	r7, #24
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
	...

080030a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d101      	bne.n	80030b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e11f      	b.n	80032f6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d106      	bne.n	80030d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f7fd fb3e 	bl	800074c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2224      	movs	r2, #36	; 0x24
 80030d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f022 0201 	bic.w	r2, r2, #1
 80030e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003106:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003108:	f001 f9de 	bl	80044c8 <HAL_RCC_GetPCLK1Freq>
 800310c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	4a7b      	ldr	r2, [pc, #492]	; (8003300 <HAL_I2C_Init+0x25c>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d807      	bhi.n	8003128 <HAL_I2C_Init+0x84>
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	4a7a      	ldr	r2, [pc, #488]	; (8003304 <HAL_I2C_Init+0x260>)
 800311c:	4293      	cmp	r3, r2
 800311e:	bf94      	ite	ls
 8003120:	2301      	movls	r3, #1
 8003122:	2300      	movhi	r3, #0
 8003124:	b2db      	uxtb	r3, r3
 8003126:	e006      	b.n	8003136 <HAL_I2C_Init+0x92>
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	4a77      	ldr	r2, [pc, #476]	; (8003308 <HAL_I2C_Init+0x264>)
 800312c:	4293      	cmp	r3, r2
 800312e:	bf94      	ite	ls
 8003130:	2301      	movls	r3, #1
 8003132:	2300      	movhi	r3, #0
 8003134:	b2db      	uxtb	r3, r3
 8003136:	2b00      	cmp	r3, #0
 8003138:	d001      	beq.n	800313e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e0db      	b.n	80032f6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	4a72      	ldr	r2, [pc, #456]	; (800330c <HAL_I2C_Init+0x268>)
 8003142:	fba2 2303 	umull	r2, r3, r2, r3
 8003146:	0c9b      	lsrs	r3, r3, #18
 8003148:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	68ba      	ldr	r2, [r7, #8]
 800315a:	430a      	orrs	r2, r1
 800315c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	6a1b      	ldr	r3, [r3, #32]
 8003164:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	4a64      	ldr	r2, [pc, #400]	; (8003300 <HAL_I2C_Init+0x25c>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d802      	bhi.n	8003178 <HAL_I2C_Init+0xd4>
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	3301      	adds	r3, #1
 8003176:	e009      	b.n	800318c <HAL_I2C_Init+0xe8>
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800317e:	fb02 f303 	mul.w	r3, r2, r3
 8003182:	4a63      	ldr	r2, [pc, #396]	; (8003310 <HAL_I2C_Init+0x26c>)
 8003184:	fba2 2303 	umull	r2, r3, r2, r3
 8003188:	099b      	lsrs	r3, r3, #6
 800318a:	3301      	adds	r3, #1
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	6812      	ldr	r2, [r2, #0]
 8003190:	430b      	orrs	r3, r1
 8003192:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	69db      	ldr	r3, [r3, #28]
 800319a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800319e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	4956      	ldr	r1, [pc, #344]	; (8003300 <HAL_I2C_Init+0x25c>)
 80031a8:	428b      	cmp	r3, r1
 80031aa:	d80d      	bhi.n	80031c8 <HAL_I2C_Init+0x124>
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	1e59      	subs	r1, r3, #1
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	005b      	lsls	r3, r3, #1
 80031b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80031ba:	3301      	adds	r3, #1
 80031bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031c0:	2b04      	cmp	r3, #4
 80031c2:	bf38      	it	cc
 80031c4:	2304      	movcc	r3, #4
 80031c6:	e04f      	b.n	8003268 <HAL_I2C_Init+0x1c4>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d111      	bne.n	80031f4 <HAL_I2C_Init+0x150>
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	1e58      	subs	r0, r3, #1
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6859      	ldr	r1, [r3, #4]
 80031d8:	460b      	mov	r3, r1
 80031da:	005b      	lsls	r3, r3, #1
 80031dc:	440b      	add	r3, r1
 80031de:	fbb0 f3f3 	udiv	r3, r0, r3
 80031e2:	3301      	adds	r3, #1
 80031e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	bf0c      	ite	eq
 80031ec:	2301      	moveq	r3, #1
 80031ee:	2300      	movne	r3, #0
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	e012      	b.n	800321a <HAL_I2C_Init+0x176>
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	1e58      	subs	r0, r3, #1
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6859      	ldr	r1, [r3, #4]
 80031fc:	460b      	mov	r3, r1
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	440b      	add	r3, r1
 8003202:	0099      	lsls	r1, r3, #2
 8003204:	440b      	add	r3, r1
 8003206:	fbb0 f3f3 	udiv	r3, r0, r3
 800320a:	3301      	adds	r3, #1
 800320c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003210:	2b00      	cmp	r3, #0
 8003212:	bf0c      	ite	eq
 8003214:	2301      	moveq	r3, #1
 8003216:	2300      	movne	r3, #0
 8003218:	b2db      	uxtb	r3, r3
 800321a:	2b00      	cmp	r3, #0
 800321c:	d001      	beq.n	8003222 <HAL_I2C_Init+0x17e>
 800321e:	2301      	movs	r3, #1
 8003220:	e022      	b.n	8003268 <HAL_I2C_Init+0x1c4>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d10e      	bne.n	8003248 <HAL_I2C_Init+0x1a4>
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	1e58      	subs	r0, r3, #1
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6859      	ldr	r1, [r3, #4]
 8003232:	460b      	mov	r3, r1
 8003234:	005b      	lsls	r3, r3, #1
 8003236:	440b      	add	r3, r1
 8003238:	fbb0 f3f3 	udiv	r3, r0, r3
 800323c:	3301      	adds	r3, #1
 800323e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003242:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003246:	e00f      	b.n	8003268 <HAL_I2C_Init+0x1c4>
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	1e58      	subs	r0, r3, #1
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6859      	ldr	r1, [r3, #4]
 8003250:	460b      	mov	r3, r1
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	440b      	add	r3, r1
 8003256:	0099      	lsls	r1, r3, #2
 8003258:	440b      	add	r3, r1
 800325a:	fbb0 f3f3 	udiv	r3, r0, r3
 800325e:	3301      	adds	r3, #1
 8003260:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003264:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003268:	6879      	ldr	r1, [r7, #4]
 800326a:	6809      	ldr	r1, [r1, #0]
 800326c:	4313      	orrs	r3, r2
 800326e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	69da      	ldr	r2, [r3, #28]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a1b      	ldr	r3, [r3, #32]
 8003282:	431a      	orrs	r2, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	430a      	orrs	r2, r1
 800328a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003296:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	6911      	ldr	r1, [r2, #16]
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	68d2      	ldr	r2, [r2, #12]
 80032a2:	4311      	orrs	r1, r2
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	6812      	ldr	r2, [r2, #0]
 80032a8:	430b      	orrs	r3, r1
 80032aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	695a      	ldr	r2, [r3, #20]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	699b      	ldr	r3, [r3, #24]
 80032be:	431a      	orrs	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	430a      	orrs	r2, r1
 80032c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f042 0201 	orr.w	r2, r2, #1
 80032d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2220      	movs	r2, #32
 80032e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3710      	adds	r7, #16
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	000186a0 	.word	0x000186a0
 8003304:	001e847f 	.word	0x001e847f
 8003308:	003d08ff 	.word	0x003d08ff
 800330c:	431bde83 	.word	0x431bde83
 8003310:	10624dd3 	.word	0x10624dd3

08003314 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b088      	sub	sp, #32
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d101      	bne.n	8003326 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e128      	b.n	8003578 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800332c:	b2db      	uxtb	r3, r3
 800332e:	2b00      	cmp	r3, #0
 8003330:	d109      	bne.n	8003346 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a90      	ldr	r2, [pc, #576]	; (8003580 <HAL_I2S_Init+0x26c>)
 800333e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f7fd fa7b 	bl	800083c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2202      	movs	r2, #2
 800334a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	69db      	ldr	r3, [r3, #28]
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	6812      	ldr	r2, [r2, #0]
 8003358:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800335c:	f023 030f 	bic.w	r3, r3, #15
 8003360:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2202      	movs	r2, #2
 8003368:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	695b      	ldr	r3, [r3, #20]
 800336e:	2b02      	cmp	r3, #2
 8003370:	d060      	beq.n	8003434 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d102      	bne.n	8003380 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800337a:	2310      	movs	r3, #16
 800337c:	617b      	str	r3, [r7, #20]
 800337e:	e001      	b.n	8003384 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003380:	2320      	movs	r3, #32
 8003382:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	2b20      	cmp	r3, #32
 800338a:	d802      	bhi.n	8003392 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	005b      	lsls	r3, r3, #1
 8003390:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003392:	2001      	movs	r0, #1
 8003394:	f001 f9a2 	bl	80046dc <HAL_RCCEx_GetPeriphCLKFreq>
 8003398:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033a2:	d125      	bne.n	80033f0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d010      	beq.n	80033ce <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	68fa      	ldr	r2, [r7, #12]
 80033b2:	fbb2 f2f3 	udiv	r2, r2, r3
 80033b6:	4613      	mov	r3, r2
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	4413      	add	r3, r2
 80033bc:	005b      	lsls	r3, r3, #1
 80033be:	461a      	mov	r2, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	695b      	ldr	r3, [r3, #20]
 80033c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033c8:	3305      	adds	r3, #5
 80033ca:	613b      	str	r3, [r7, #16]
 80033cc:	e01f      	b.n	800340e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	00db      	lsls	r3, r3, #3
 80033d2:	68fa      	ldr	r2, [r7, #12]
 80033d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80033d8:	4613      	mov	r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	4413      	add	r3, r2
 80033de:	005b      	lsls	r3, r3, #1
 80033e0:	461a      	mov	r2, r3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	695b      	ldr	r3, [r3, #20]
 80033e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ea:	3305      	adds	r3, #5
 80033ec:	613b      	str	r3, [r7, #16]
 80033ee:	e00e      	b.n	800340e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80033f0:	68fa      	ldr	r2, [r7, #12]
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80033f8:	4613      	mov	r3, r2
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	4413      	add	r3, r2
 80033fe:	005b      	lsls	r3, r3, #1
 8003400:	461a      	mov	r2, r3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	695b      	ldr	r3, [r3, #20]
 8003406:	fbb2 f3f3 	udiv	r3, r2, r3
 800340a:	3305      	adds	r3, #5
 800340c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	4a5c      	ldr	r2, [pc, #368]	; (8003584 <HAL_I2S_Init+0x270>)
 8003412:	fba2 2303 	umull	r2, r3, r2, r3
 8003416:	08db      	lsrs	r3, r3, #3
 8003418:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	f003 0301 	and.w	r3, r3, #1
 8003420:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003422:	693a      	ldr	r2, [r7, #16]
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	085b      	lsrs	r3, r3, #1
 800342a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	021b      	lsls	r3, r3, #8
 8003430:	61bb      	str	r3, [r7, #24]
 8003432:	e003      	b.n	800343c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003434:	2302      	movs	r3, #2
 8003436:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003438:	2300      	movs	r3, #0
 800343a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	2b01      	cmp	r3, #1
 8003440:	d902      	bls.n	8003448 <HAL_I2S_Init+0x134>
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	2bff      	cmp	r3, #255	; 0xff
 8003446:	d907      	bls.n	8003458 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800344c:	f043 0210 	orr.w	r2, r3, #16
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e08f      	b.n	8003578 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	691a      	ldr	r2, [r3, #16]
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	ea42 0103 	orr.w	r1, r2, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	69fa      	ldr	r2, [r7, #28]
 8003468:	430a      	orrs	r2, r1
 800346a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	69db      	ldr	r3, [r3, #28]
 8003472:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003476:	f023 030f 	bic.w	r3, r3, #15
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	6851      	ldr	r1, [r2, #4]
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	6892      	ldr	r2, [r2, #8]
 8003482:	4311      	orrs	r1, r2
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	68d2      	ldr	r2, [r2, #12]
 8003488:	4311      	orrs	r1, r2
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	6992      	ldr	r2, [r2, #24]
 800348e:	430a      	orrs	r2, r1
 8003490:	431a      	orrs	r2, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800349a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a1b      	ldr	r3, [r3, #32]
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d161      	bne.n	8003568 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4a38      	ldr	r2, [pc, #224]	; (8003588 <HAL_I2S_Init+0x274>)
 80034a8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a37      	ldr	r2, [pc, #220]	; (800358c <HAL_I2S_Init+0x278>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d101      	bne.n	80034b8 <HAL_I2S_Init+0x1a4>
 80034b4:	4b36      	ldr	r3, [pc, #216]	; (8003590 <HAL_I2S_Init+0x27c>)
 80034b6:	e001      	b.n	80034bc <HAL_I2S_Init+0x1a8>
 80034b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034bc:	69db      	ldr	r3, [r3, #28]
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	6812      	ldr	r2, [r2, #0]
 80034c2:	4932      	ldr	r1, [pc, #200]	; (800358c <HAL_I2S_Init+0x278>)
 80034c4:	428a      	cmp	r2, r1
 80034c6:	d101      	bne.n	80034cc <HAL_I2S_Init+0x1b8>
 80034c8:	4a31      	ldr	r2, [pc, #196]	; (8003590 <HAL_I2S_Init+0x27c>)
 80034ca:	e001      	b.n	80034d0 <HAL_I2S_Init+0x1bc>
 80034cc:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80034d0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80034d4:	f023 030f 	bic.w	r3, r3, #15
 80034d8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a2b      	ldr	r2, [pc, #172]	; (800358c <HAL_I2S_Init+0x278>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d101      	bne.n	80034e8 <HAL_I2S_Init+0x1d4>
 80034e4:	4b2a      	ldr	r3, [pc, #168]	; (8003590 <HAL_I2S_Init+0x27c>)
 80034e6:	e001      	b.n	80034ec <HAL_I2S_Init+0x1d8>
 80034e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034ec:	2202      	movs	r2, #2
 80034ee:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a25      	ldr	r2, [pc, #148]	; (800358c <HAL_I2S_Init+0x278>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d101      	bne.n	80034fe <HAL_I2S_Init+0x1ea>
 80034fa:	4b25      	ldr	r3, [pc, #148]	; (8003590 <HAL_I2S_Init+0x27c>)
 80034fc:	e001      	b.n	8003502 <HAL_I2S_Init+0x1ee>
 80034fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003502:	69db      	ldr	r3, [r3, #28]
 8003504:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800350e:	d003      	beq.n	8003518 <HAL_I2S_Init+0x204>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d103      	bne.n	8003520 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003518:	f44f 7380 	mov.w	r3, #256	; 0x100
 800351c:	613b      	str	r3, [r7, #16]
 800351e:	e001      	b.n	8003524 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003520:	2300      	movs	r3, #0
 8003522:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	b299      	uxth	r1, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	699b      	ldr	r3, [r3, #24]
 8003538:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800353a:	4303      	orrs	r3, r0
 800353c:	b29b      	uxth	r3, r3
 800353e:	430b      	orrs	r3, r1
 8003540:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003542:	4313      	orrs	r3, r2
 8003544:	b29a      	uxth	r2, r3
 8003546:	897b      	ldrh	r3, [r7, #10]
 8003548:	4313      	orrs	r3, r2
 800354a:	b29b      	uxth	r3, r3
 800354c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003550:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a0d      	ldr	r2, [pc, #52]	; (800358c <HAL_I2S_Init+0x278>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d101      	bne.n	8003560 <HAL_I2S_Init+0x24c>
 800355c:	4b0c      	ldr	r3, [pc, #48]	; (8003590 <HAL_I2S_Init+0x27c>)
 800355e:	e001      	b.n	8003564 <HAL_I2S_Init+0x250>
 8003560:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003564:	897a      	ldrh	r2, [r7, #10]
 8003566:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2201      	movs	r2, #1
 8003572:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003576:	2300      	movs	r3, #0
}
 8003578:	4618      	mov	r0, r3
 800357a:	3720      	adds	r7, #32
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}
 8003580:	0800368b 	.word	0x0800368b
 8003584:	cccccccd 	.word	0xcccccccd
 8003588:	080037a1 	.word	0x080037a1
 800358c:	40003800 	.word	0x40003800
 8003590:	40003400 	.word	0x40003400

08003594 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800359c:	bf00      	nop
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80035b0:	bf00      	nop
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr

080035bc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80035c4:	bf00      	nop
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035dc:	881a      	ldrh	r2, [r3, #0]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e8:	1c9a      	adds	r2, r3, #2
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	3b01      	subs	r3, #1
 80035f6:	b29a      	uxth	r2, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003600:	b29b      	uxth	r3, r3
 8003602:	2b00      	cmp	r3, #0
 8003604:	d10e      	bne.n	8003624 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	685a      	ldr	r2, [r3, #4]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003614:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2201      	movs	r2, #1
 800361a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f7ff ffb8 	bl	8003594 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003624:	bf00      	nop
 8003626:	3708      	adds	r7, #8
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}

0800362c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b082      	sub	sp, #8
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	68da      	ldr	r2, [r3, #12]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800363e:	b292      	uxth	r2, r2
 8003640:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003646:	1c9a      	adds	r2, r3, #2
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003650:	b29b      	uxth	r3, r3
 8003652:	3b01      	subs	r3, #1
 8003654:	b29a      	uxth	r2, r3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800365e:	b29b      	uxth	r3, r3
 8003660:	2b00      	cmp	r3, #0
 8003662:	d10e      	bne.n	8003682 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	685a      	ldr	r2, [r3, #4]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003672:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f7ff ff93 	bl	80035a8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003682:	bf00      	nop
 8003684:	3708      	adds	r7, #8
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}

0800368a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800368a:	b580      	push	{r7, lr}
 800368c:	b086      	sub	sp, #24
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	2b04      	cmp	r3, #4
 80036a4:	d13a      	bne.n	800371c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	f003 0301 	and.w	r3, r3, #1
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d109      	bne.n	80036c4 <I2S_IRQHandler+0x3a>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ba:	2b40      	cmp	r3, #64	; 0x40
 80036bc:	d102      	bne.n	80036c4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f7ff ffb4 	bl	800362c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ca:	2b40      	cmp	r3, #64	; 0x40
 80036cc:	d126      	bne.n	800371c <I2S_IRQHandler+0x92>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f003 0320 	and.w	r3, r3, #32
 80036d8:	2b20      	cmp	r3, #32
 80036da:	d11f      	bne.n	800371c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	685a      	ldr	r2, [r3, #4]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80036ea:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80036ec:	2300      	movs	r3, #0
 80036ee:	613b      	str	r3, [r7, #16]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	613b      	str	r3, [r7, #16]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	613b      	str	r3, [r7, #16]
 8003700:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2201      	movs	r2, #1
 8003706:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800370e:	f043 0202 	orr.w	r2, r3, #2
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f7ff ff50 	bl	80035bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003722:	b2db      	uxtb	r3, r3
 8003724:	2b03      	cmp	r3, #3
 8003726:	d136      	bne.n	8003796 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	2b02      	cmp	r3, #2
 8003730:	d109      	bne.n	8003746 <I2S_IRQHandler+0xbc>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800373c:	2b80      	cmp	r3, #128	; 0x80
 800373e:	d102      	bne.n	8003746 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f7ff ff45 	bl	80035d0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	f003 0308 	and.w	r3, r3, #8
 800374c:	2b08      	cmp	r3, #8
 800374e:	d122      	bne.n	8003796 <I2S_IRQHandler+0x10c>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f003 0320 	and.w	r3, r3, #32
 800375a:	2b20      	cmp	r3, #32
 800375c:	d11b      	bne.n	8003796 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	685a      	ldr	r2, [r3, #4]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800376c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800376e:	2300      	movs	r3, #0
 8003770:	60fb      	str	r3, [r7, #12]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	60fb      	str	r3, [r7, #12]
 800377a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003788:	f043 0204 	orr.w	r2, r3, #4
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f7ff ff13 	bl	80035bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003796:	bf00      	nop
 8003798:	3718      	adds	r7, #24
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
	...

080037a0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b088      	sub	sp, #32
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4aa2      	ldr	r2, [pc, #648]	; (8003a40 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d101      	bne.n	80037be <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80037ba:	4ba2      	ldr	r3, [pc, #648]	; (8003a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80037bc:	e001      	b.n	80037c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80037be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a9b      	ldr	r2, [pc, #620]	; (8003a40 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d101      	bne.n	80037dc <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80037d8:	4b9a      	ldr	r3, [pc, #616]	; (8003a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80037da:	e001      	b.n	80037e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80037dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037ec:	d004      	beq.n	80037f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	f040 8099 	bne.w	800392a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	f003 0302 	and.w	r3, r3, #2
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d107      	bne.n	8003812 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003808:	2b00      	cmp	r3, #0
 800380a:	d002      	beq.n	8003812 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f000 f925 	bl	8003a5c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	f003 0301 	and.w	r3, r3, #1
 8003818:	2b01      	cmp	r3, #1
 800381a:	d107      	bne.n	800382c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003822:	2b00      	cmp	r3, #0
 8003824:	d002      	beq.n	800382c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 f9c8 	bl	8003bbc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800382c:	69bb      	ldr	r3, [r7, #24]
 800382e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003832:	2b40      	cmp	r3, #64	; 0x40
 8003834:	d13a      	bne.n	80038ac <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	f003 0320 	and.w	r3, r3, #32
 800383c:	2b00      	cmp	r3, #0
 800383e:	d035      	beq.n	80038ac <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a7e      	ldr	r2, [pc, #504]	; (8003a40 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d101      	bne.n	800384e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800384a:	4b7e      	ldr	r3, [pc, #504]	; (8003a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800384c:	e001      	b.n	8003852 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800384e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003852:	685a      	ldr	r2, [r3, #4]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4979      	ldr	r1, [pc, #484]	; (8003a40 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800385a:	428b      	cmp	r3, r1
 800385c:	d101      	bne.n	8003862 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800385e:	4b79      	ldr	r3, [pc, #484]	; (8003a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003860:	e001      	b.n	8003866 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003862:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003866:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800386a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	685a      	ldr	r2, [r3, #4]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800387a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800387c:	2300      	movs	r3, #0
 800387e:	60fb      	str	r3, [r7, #12]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	60fb      	str	r3, [r7, #12]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	60fb      	str	r3, [r7, #12]
 8003890:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2201      	movs	r2, #1
 8003896:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800389e:	f043 0202 	orr.w	r2, r3, #2
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f7ff fe88 	bl	80035bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	f003 0308 	and.w	r3, r3, #8
 80038b2:	2b08      	cmp	r3, #8
 80038b4:	f040 80be 	bne.w	8003a34 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	f003 0320 	and.w	r3, r3, #32
 80038be:	2b00      	cmp	r3, #0
 80038c0:	f000 80b8 	beq.w	8003a34 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	685a      	ldr	r2, [r3, #4]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038d2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a59      	ldr	r2, [pc, #356]	; (8003a40 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d101      	bne.n	80038e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80038de:	4b59      	ldr	r3, [pc, #356]	; (8003a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80038e0:	e001      	b.n	80038e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80038e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038e6:	685a      	ldr	r2, [r3, #4]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4954      	ldr	r1, [pc, #336]	; (8003a40 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80038ee:	428b      	cmp	r3, r1
 80038f0:	d101      	bne.n	80038f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80038f2:	4b54      	ldr	r3, [pc, #336]	; (8003a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80038f4:	e001      	b.n	80038fa <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80038f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038fa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80038fe:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003900:	2300      	movs	r3, #0
 8003902:	60bb      	str	r3, [r7, #8]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	60bb      	str	r3, [r7, #8]
 800390c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2201      	movs	r2, #1
 8003912:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800391a:	f043 0204 	orr.w	r2, r3, #4
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f7ff fe4a 	bl	80035bc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003928:	e084      	b.n	8003a34 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800392a:	69bb      	ldr	r3, [r7, #24]
 800392c:	f003 0302 	and.w	r3, r3, #2
 8003930:	2b02      	cmp	r3, #2
 8003932:	d107      	bne.n	8003944 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800393a:	2b00      	cmp	r3, #0
 800393c:	d002      	beq.n	8003944 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 f8be 	bl	8003ac0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	2b01      	cmp	r3, #1
 800394c:	d107      	bne.n	800395e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003954:	2b00      	cmp	r3, #0
 8003956:	d002      	beq.n	800395e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f000 f8fd 	bl	8003b58 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003964:	2b40      	cmp	r3, #64	; 0x40
 8003966:	d12f      	bne.n	80039c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	f003 0320 	and.w	r3, r3, #32
 800396e:	2b00      	cmp	r3, #0
 8003970:	d02a      	beq.n	80039c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	685a      	ldr	r2, [r3, #4]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003980:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a2e      	ldr	r2, [pc, #184]	; (8003a40 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d101      	bne.n	8003990 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800398c:	4b2d      	ldr	r3, [pc, #180]	; (8003a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800398e:	e001      	b.n	8003994 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003990:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003994:	685a      	ldr	r2, [r3, #4]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4929      	ldr	r1, [pc, #164]	; (8003a40 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800399c:	428b      	cmp	r3, r1
 800399e:	d101      	bne.n	80039a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80039a0:	4b28      	ldr	r3, [pc, #160]	; (8003a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80039a2:	e001      	b.n	80039a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80039a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039a8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80039ac:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2201      	movs	r2, #1
 80039b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ba:	f043 0202 	orr.w	r2, r3, #2
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f7ff fdfa 	bl	80035bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80039c8:	69bb      	ldr	r3, [r7, #24]
 80039ca:	f003 0308 	and.w	r3, r3, #8
 80039ce:	2b08      	cmp	r3, #8
 80039d0:	d131      	bne.n	8003a36 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	f003 0320 	and.w	r3, r3, #32
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d02c      	beq.n	8003a36 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a17      	ldr	r2, [pc, #92]	; (8003a40 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d101      	bne.n	80039ea <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80039e6:	4b17      	ldr	r3, [pc, #92]	; (8003a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80039e8:	e001      	b.n	80039ee <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80039ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039ee:	685a      	ldr	r2, [r3, #4]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4912      	ldr	r1, [pc, #72]	; (8003a40 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80039f6:	428b      	cmp	r3, r1
 80039f8:	d101      	bne.n	80039fe <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80039fa:	4b12      	ldr	r3, [pc, #72]	; (8003a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80039fc:	e001      	b.n	8003a02 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80039fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a02:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a06:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	685a      	ldr	r2, [r3, #4]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a16:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a24:	f043 0204 	orr.w	r2, r3, #4
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f7ff fdc5 	bl	80035bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a32:	e000      	b.n	8003a36 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003a34:	bf00      	nop
}
 8003a36:	bf00      	nop
 8003a38:	3720      	adds	r7, #32
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	40003800 	.word	0x40003800
 8003a44:	40003400 	.word	0x40003400

08003a48 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003a50:	bf00      	nop
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b082      	sub	sp, #8
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a68:	1c99      	adds	r1, r3, #2
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	6251      	str	r1, [r2, #36]	; 0x24
 8003a6e:	881a      	ldrh	r2, [r3, #0]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	3b01      	subs	r3, #1
 8003a7e:	b29a      	uxth	r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d113      	bne.n	8003ab6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	685a      	ldr	r2, [r3, #4]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a9c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d106      	bne.n	8003ab6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f7ff ffc9 	bl	8003a48 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ab6:	bf00      	nop
 8003ab8:	3708      	adds	r7, #8
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
	...

08003ac0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b082      	sub	sp, #8
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003acc:	1c99      	adds	r1, r3, #2
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	6251      	str	r1, [r2, #36]	; 0x24
 8003ad2:	8819      	ldrh	r1, [r3, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a1d      	ldr	r2, [pc, #116]	; (8003b50 <I2SEx_TxISR_I2SExt+0x90>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d101      	bne.n	8003ae2 <I2SEx_TxISR_I2SExt+0x22>
 8003ade:	4b1d      	ldr	r3, [pc, #116]	; (8003b54 <I2SEx_TxISR_I2SExt+0x94>)
 8003ae0:	e001      	b.n	8003ae6 <I2SEx_TxISR_I2SExt+0x26>
 8003ae2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ae6:	460a      	mov	r2, r1
 8003ae8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	3b01      	subs	r3, #1
 8003af2:	b29a      	uxth	r2, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d121      	bne.n	8003b46 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a12      	ldr	r2, [pc, #72]	; (8003b50 <I2SEx_TxISR_I2SExt+0x90>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d101      	bne.n	8003b10 <I2SEx_TxISR_I2SExt+0x50>
 8003b0c:	4b11      	ldr	r3, [pc, #68]	; (8003b54 <I2SEx_TxISR_I2SExt+0x94>)
 8003b0e:	e001      	b.n	8003b14 <I2SEx_TxISR_I2SExt+0x54>
 8003b10:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b14:	685a      	ldr	r2, [r3, #4]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	490d      	ldr	r1, [pc, #52]	; (8003b50 <I2SEx_TxISR_I2SExt+0x90>)
 8003b1c:	428b      	cmp	r3, r1
 8003b1e:	d101      	bne.n	8003b24 <I2SEx_TxISR_I2SExt+0x64>
 8003b20:	4b0c      	ldr	r3, [pc, #48]	; (8003b54 <I2SEx_TxISR_I2SExt+0x94>)
 8003b22:	e001      	b.n	8003b28 <I2SEx_TxISR_I2SExt+0x68>
 8003b24:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b28:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b2c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d106      	bne.n	8003b46 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f7ff ff81 	bl	8003a48 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b46:	bf00      	nop
 8003b48:	3708      	adds	r7, #8
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	40003800 	.word	0x40003800
 8003b54:	40003400 	.word	0x40003400

08003b58 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	68d8      	ldr	r0, [r3, #12]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b6a:	1c99      	adds	r1, r3, #2
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003b70:	b282      	uxth	r2, r0
 8003b72:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	3b01      	subs	r3, #1
 8003b7c:	b29a      	uxth	r2, r3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d113      	bne.n	8003bb4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	685a      	ldr	r2, [r3, #4]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b9a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d106      	bne.n	8003bb4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2201      	movs	r2, #1
 8003baa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f7ff ff4a 	bl	8003a48 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003bb4:	bf00      	nop
 8003bb6:	3708      	adds	r7, #8
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a20      	ldr	r2, [pc, #128]	; (8003c4c <I2SEx_RxISR_I2SExt+0x90>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d101      	bne.n	8003bd2 <I2SEx_RxISR_I2SExt+0x16>
 8003bce:	4b20      	ldr	r3, [pc, #128]	; (8003c50 <I2SEx_RxISR_I2SExt+0x94>)
 8003bd0:	e001      	b.n	8003bd6 <I2SEx_RxISR_I2SExt+0x1a>
 8003bd2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bd6:	68d8      	ldr	r0, [r3, #12]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bdc:	1c99      	adds	r1, r3, #2
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003be2:	b282      	uxth	r2, r0
 8003be4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	3b01      	subs	r3, #1
 8003bee:	b29a      	uxth	r2, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d121      	bne.n	8003c42 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a12      	ldr	r2, [pc, #72]	; (8003c4c <I2SEx_RxISR_I2SExt+0x90>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d101      	bne.n	8003c0c <I2SEx_RxISR_I2SExt+0x50>
 8003c08:	4b11      	ldr	r3, [pc, #68]	; (8003c50 <I2SEx_RxISR_I2SExt+0x94>)
 8003c0a:	e001      	b.n	8003c10 <I2SEx_RxISR_I2SExt+0x54>
 8003c0c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c10:	685a      	ldr	r2, [r3, #4]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	490d      	ldr	r1, [pc, #52]	; (8003c4c <I2SEx_RxISR_I2SExt+0x90>)
 8003c18:	428b      	cmp	r3, r1
 8003c1a:	d101      	bne.n	8003c20 <I2SEx_RxISR_I2SExt+0x64>
 8003c1c:	4b0c      	ldr	r3, [pc, #48]	; (8003c50 <I2SEx_RxISR_I2SExt+0x94>)
 8003c1e:	e001      	b.n	8003c24 <I2SEx_RxISR_I2SExt+0x68>
 8003c20:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c24:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c28:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d106      	bne.n	8003c42 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f7ff ff03 	bl	8003a48 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c42:	bf00      	nop
 8003c44:	3708      	adds	r7, #8
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	40003800 	.word	0x40003800
 8003c50:	40003400 	.word	0x40003400

08003c54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b086      	sub	sp, #24
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d101      	bne.n	8003c66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e25b      	b.n	800411e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0301 	and.w	r3, r3, #1
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d075      	beq.n	8003d5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c72:	4ba3      	ldr	r3, [pc, #652]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	f003 030c 	and.w	r3, r3, #12
 8003c7a:	2b04      	cmp	r3, #4
 8003c7c:	d00c      	beq.n	8003c98 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c7e:	4ba0      	ldr	r3, [pc, #640]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c86:	2b08      	cmp	r3, #8
 8003c88:	d112      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c8a:	4b9d      	ldr	r3, [pc, #628]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c96:	d10b      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c98:	4b99      	ldr	r3, [pc, #612]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d05b      	beq.n	8003d5c <HAL_RCC_OscConfig+0x108>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d157      	bne.n	8003d5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e236      	b.n	800411e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cb8:	d106      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x74>
 8003cba:	4b91      	ldr	r3, [pc, #580]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a90      	ldr	r2, [pc, #576]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003cc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cc4:	6013      	str	r3, [r2, #0]
 8003cc6:	e01d      	b.n	8003d04 <HAL_RCC_OscConfig+0xb0>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cd0:	d10c      	bne.n	8003cec <HAL_RCC_OscConfig+0x98>
 8003cd2:	4b8b      	ldr	r3, [pc, #556]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a8a      	ldr	r2, [pc, #552]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003cd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cdc:	6013      	str	r3, [r2, #0]
 8003cde:	4b88      	ldr	r3, [pc, #544]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a87      	ldr	r2, [pc, #540]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003ce4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ce8:	6013      	str	r3, [r2, #0]
 8003cea:	e00b      	b.n	8003d04 <HAL_RCC_OscConfig+0xb0>
 8003cec:	4b84      	ldr	r3, [pc, #528]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a83      	ldr	r2, [pc, #524]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003cf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cf6:	6013      	str	r3, [r2, #0]
 8003cf8:	4b81      	ldr	r3, [pc, #516]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a80      	ldr	r2, [pc, #512]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003cfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d013      	beq.n	8003d34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d0c:	f7fd f9a8 	bl	8001060 <HAL_GetTick>
 8003d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d12:	e008      	b.n	8003d26 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d14:	f7fd f9a4 	bl	8001060 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	2b64      	cmp	r3, #100	; 0x64
 8003d20:	d901      	bls.n	8003d26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e1fb      	b.n	800411e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d26:	4b76      	ldr	r3, [pc, #472]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d0f0      	beq.n	8003d14 <HAL_RCC_OscConfig+0xc0>
 8003d32:	e014      	b.n	8003d5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d34:	f7fd f994 	bl	8001060 <HAL_GetTick>
 8003d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d3a:	e008      	b.n	8003d4e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d3c:	f7fd f990 	bl	8001060 <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	2b64      	cmp	r3, #100	; 0x64
 8003d48:	d901      	bls.n	8003d4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e1e7      	b.n	800411e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d4e:	4b6c      	ldr	r3, [pc, #432]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d1f0      	bne.n	8003d3c <HAL_RCC_OscConfig+0xe8>
 8003d5a:	e000      	b.n	8003d5e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0302 	and.w	r3, r3, #2
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d063      	beq.n	8003e32 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d6a:	4b65      	ldr	r3, [pc, #404]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	f003 030c 	and.w	r3, r3, #12
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d00b      	beq.n	8003d8e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d76:	4b62      	ldr	r3, [pc, #392]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d7e:	2b08      	cmp	r3, #8
 8003d80:	d11c      	bne.n	8003dbc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d82:	4b5f      	ldr	r3, [pc, #380]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d116      	bne.n	8003dbc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d8e:	4b5c      	ldr	r3, [pc, #368]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0302 	and.w	r3, r3, #2
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d005      	beq.n	8003da6 <HAL_RCC_OscConfig+0x152>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d001      	beq.n	8003da6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e1bb      	b.n	800411e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003da6:	4b56      	ldr	r3, [pc, #344]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	691b      	ldr	r3, [r3, #16]
 8003db2:	00db      	lsls	r3, r3, #3
 8003db4:	4952      	ldr	r1, [pc, #328]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003db6:	4313      	orrs	r3, r2
 8003db8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dba:	e03a      	b.n	8003e32 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d020      	beq.n	8003e06 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003dc4:	4b4f      	ldr	r3, [pc, #316]	; (8003f04 <HAL_RCC_OscConfig+0x2b0>)
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dca:	f7fd f949 	bl	8001060 <HAL_GetTick>
 8003dce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dd0:	e008      	b.n	8003de4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dd2:	f7fd f945 	bl	8001060 <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d901      	bls.n	8003de4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e19c      	b.n	800411e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003de4:	4b46      	ldr	r3, [pc, #280]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0302 	and.w	r3, r3, #2
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d0f0      	beq.n	8003dd2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003df0:	4b43      	ldr	r3, [pc, #268]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	691b      	ldr	r3, [r3, #16]
 8003dfc:	00db      	lsls	r3, r3, #3
 8003dfe:	4940      	ldr	r1, [pc, #256]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003e00:	4313      	orrs	r3, r2
 8003e02:	600b      	str	r3, [r1, #0]
 8003e04:	e015      	b.n	8003e32 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e06:	4b3f      	ldr	r3, [pc, #252]	; (8003f04 <HAL_RCC_OscConfig+0x2b0>)
 8003e08:	2200      	movs	r2, #0
 8003e0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e0c:	f7fd f928 	bl	8001060 <HAL_GetTick>
 8003e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e12:	e008      	b.n	8003e26 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e14:	f7fd f924 	bl	8001060 <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	2b02      	cmp	r3, #2
 8003e20:	d901      	bls.n	8003e26 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e17b      	b.n	800411e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e26:	4b36      	ldr	r3, [pc, #216]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0302 	and.w	r3, r3, #2
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d1f0      	bne.n	8003e14 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0308 	and.w	r3, r3, #8
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d030      	beq.n	8003ea0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	695b      	ldr	r3, [r3, #20]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d016      	beq.n	8003e74 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e46:	4b30      	ldr	r3, [pc, #192]	; (8003f08 <HAL_RCC_OscConfig+0x2b4>)
 8003e48:	2201      	movs	r2, #1
 8003e4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e4c:	f7fd f908 	bl	8001060 <HAL_GetTick>
 8003e50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e52:	e008      	b.n	8003e66 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e54:	f7fd f904 	bl	8001060 <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d901      	bls.n	8003e66 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e15b      	b.n	800411e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e66:	4b26      	ldr	r3, [pc, #152]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003e68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e6a:	f003 0302 	and.w	r3, r3, #2
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d0f0      	beq.n	8003e54 <HAL_RCC_OscConfig+0x200>
 8003e72:	e015      	b.n	8003ea0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e74:	4b24      	ldr	r3, [pc, #144]	; (8003f08 <HAL_RCC_OscConfig+0x2b4>)
 8003e76:	2200      	movs	r2, #0
 8003e78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e7a:	f7fd f8f1 	bl	8001060 <HAL_GetTick>
 8003e7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e80:	e008      	b.n	8003e94 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e82:	f7fd f8ed 	bl	8001060 <HAL_GetTick>
 8003e86:	4602      	mov	r2, r0
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	2b02      	cmp	r3, #2
 8003e8e:	d901      	bls.n	8003e94 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003e90:	2303      	movs	r3, #3
 8003e92:	e144      	b.n	800411e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e94:	4b1a      	ldr	r3, [pc, #104]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003e96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e98:	f003 0302 	and.w	r3, r3, #2
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d1f0      	bne.n	8003e82 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0304 	and.w	r3, r3, #4
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	f000 80a0 	beq.w	8003fee <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003eb2:	4b13      	ldr	r3, [pc, #76]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d10f      	bne.n	8003ede <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	60bb      	str	r3, [r7, #8]
 8003ec2:	4b0f      	ldr	r3, [pc, #60]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec6:	4a0e      	ldr	r2, [pc, #56]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003ec8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ecc:	6413      	str	r3, [r2, #64]	; 0x40
 8003ece:	4b0c      	ldr	r3, [pc, #48]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ed6:	60bb      	str	r3, [r7, #8]
 8003ed8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003eda:	2301      	movs	r3, #1
 8003edc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ede:	4b0b      	ldr	r3, [pc, #44]	; (8003f0c <HAL_RCC_OscConfig+0x2b8>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d121      	bne.n	8003f2e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003eea:	4b08      	ldr	r3, [pc, #32]	; (8003f0c <HAL_RCC_OscConfig+0x2b8>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a07      	ldr	r2, [pc, #28]	; (8003f0c <HAL_RCC_OscConfig+0x2b8>)
 8003ef0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ef4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ef6:	f7fd f8b3 	bl	8001060 <HAL_GetTick>
 8003efa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003efc:	e011      	b.n	8003f22 <HAL_RCC_OscConfig+0x2ce>
 8003efe:	bf00      	nop
 8003f00:	40023800 	.word	0x40023800
 8003f04:	42470000 	.word	0x42470000
 8003f08:	42470e80 	.word	0x42470e80
 8003f0c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f10:	f7fd f8a6 	bl	8001060 <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d901      	bls.n	8003f22 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e0fd      	b.n	800411e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f22:	4b81      	ldr	r3, [pc, #516]	; (8004128 <HAL_RCC_OscConfig+0x4d4>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d0f0      	beq.n	8003f10 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d106      	bne.n	8003f44 <HAL_RCC_OscConfig+0x2f0>
 8003f36:	4b7d      	ldr	r3, [pc, #500]	; (800412c <HAL_RCC_OscConfig+0x4d8>)
 8003f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f3a:	4a7c      	ldr	r2, [pc, #496]	; (800412c <HAL_RCC_OscConfig+0x4d8>)
 8003f3c:	f043 0301 	orr.w	r3, r3, #1
 8003f40:	6713      	str	r3, [r2, #112]	; 0x70
 8003f42:	e01c      	b.n	8003f7e <HAL_RCC_OscConfig+0x32a>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	2b05      	cmp	r3, #5
 8003f4a:	d10c      	bne.n	8003f66 <HAL_RCC_OscConfig+0x312>
 8003f4c:	4b77      	ldr	r3, [pc, #476]	; (800412c <HAL_RCC_OscConfig+0x4d8>)
 8003f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f50:	4a76      	ldr	r2, [pc, #472]	; (800412c <HAL_RCC_OscConfig+0x4d8>)
 8003f52:	f043 0304 	orr.w	r3, r3, #4
 8003f56:	6713      	str	r3, [r2, #112]	; 0x70
 8003f58:	4b74      	ldr	r3, [pc, #464]	; (800412c <HAL_RCC_OscConfig+0x4d8>)
 8003f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f5c:	4a73      	ldr	r2, [pc, #460]	; (800412c <HAL_RCC_OscConfig+0x4d8>)
 8003f5e:	f043 0301 	orr.w	r3, r3, #1
 8003f62:	6713      	str	r3, [r2, #112]	; 0x70
 8003f64:	e00b      	b.n	8003f7e <HAL_RCC_OscConfig+0x32a>
 8003f66:	4b71      	ldr	r3, [pc, #452]	; (800412c <HAL_RCC_OscConfig+0x4d8>)
 8003f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f6a:	4a70      	ldr	r2, [pc, #448]	; (800412c <HAL_RCC_OscConfig+0x4d8>)
 8003f6c:	f023 0301 	bic.w	r3, r3, #1
 8003f70:	6713      	str	r3, [r2, #112]	; 0x70
 8003f72:	4b6e      	ldr	r3, [pc, #440]	; (800412c <HAL_RCC_OscConfig+0x4d8>)
 8003f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f76:	4a6d      	ldr	r2, [pc, #436]	; (800412c <HAL_RCC_OscConfig+0x4d8>)
 8003f78:	f023 0304 	bic.w	r3, r3, #4
 8003f7c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d015      	beq.n	8003fb2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f86:	f7fd f86b 	bl	8001060 <HAL_GetTick>
 8003f8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f8c:	e00a      	b.n	8003fa4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f8e:	f7fd f867 	bl	8001060 <HAL_GetTick>
 8003f92:	4602      	mov	r2, r0
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d901      	bls.n	8003fa4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e0bc      	b.n	800411e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fa4:	4b61      	ldr	r3, [pc, #388]	; (800412c <HAL_RCC_OscConfig+0x4d8>)
 8003fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa8:	f003 0302 	and.w	r3, r3, #2
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d0ee      	beq.n	8003f8e <HAL_RCC_OscConfig+0x33a>
 8003fb0:	e014      	b.n	8003fdc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fb2:	f7fd f855 	bl	8001060 <HAL_GetTick>
 8003fb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fb8:	e00a      	b.n	8003fd0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fba:	f7fd f851 	bl	8001060 <HAL_GetTick>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d901      	bls.n	8003fd0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	e0a6      	b.n	800411e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fd0:	4b56      	ldr	r3, [pc, #344]	; (800412c <HAL_RCC_OscConfig+0x4d8>)
 8003fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd4:	f003 0302 	and.w	r3, r3, #2
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d1ee      	bne.n	8003fba <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003fdc:	7dfb      	ldrb	r3, [r7, #23]
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d105      	bne.n	8003fee <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fe2:	4b52      	ldr	r3, [pc, #328]	; (800412c <HAL_RCC_OscConfig+0x4d8>)
 8003fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe6:	4a51      	ldr	r2, [pc, #324]	; (800412c <HAL_RCC_OscConfig+0x4d8>)
 8003fe8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	f000 8092 	beq.w	800411c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ff8:	4b4c      	ldr	r3, [pc, #304]	; (800412c <HAL_RCC_OscConfig+0x4d8>)
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	f003 030c 	and.w	r3, r3, #12
 8004000:	2b08      	cmp	r3, #8
 8004002:	d05c      	beq.n	80040be <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	699b      	ldr	r3, [r3, #24]
 8004008:	2b02      	cmp	r3, #2
 800400a:	d141      	bne.n	8004090 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800400c:	4b48      	ldr	r3, [pc, #288]	; (8004130 <HAL_RCC_OscConfig+0x4dc>)
 800400e:	2200      	movs	r2, #0
 8004010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004012:	f7fd f825 	bl	8001060 <HAL_GetTick>
 8004016:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004018:	e008      	b.n	800402c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800401a:	f7fd f821 	bl	8001060 <HAL_GetTick>
 800401e:	4602      	mov	r2, r0
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	2b02      	cmp	r3, #2
 8004026:	d901      	bls.n	800402c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004028:	2303      	movs	r3, #3
 800402a:	e078      	b.n	800411e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800402c:	4b3f      	ldr	r3, [pc, #252]	; (800412c <HAL_RCC_OscConfig+0x4d8>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004034:	2b00      	cmp	r3, #0
 8004036:	d1f0      	bne.n	800401a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	69da      	ldr	r2, [r3, #28]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6a1b      	ldr	r3, [r3, #32]
 8004040:	431a      	orrs	r2, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004046:	019b      	lsls	r3, r3, #6
 8004048:	431a      	orrs	r2, r3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800404e:	085b      	lsrs	r3, r3, #1
 8004050:	3b01      	subs	r3, #1
 8004052:	041b      	lsls	r3, r3, #16
 8004054:	431a      	orrs	r2, r3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800405a:	061b      	lsls	r3, r3, #24
 800405c:	4933      	ldr	r1, [pc, #204]	; (800412c <HAL_RCC_OscConfig+0x4d8>)
 800405e:	4313      	orrs	r3, r2
 8004060:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004062:	4b33      	ldr	r3, [pc, #204]	; (8004130 <HAL_RCC_OscConfig+0x4dc>)
 8004064:	2201      	movs	r2, #1
 8004066:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004068:	f7fc fffa 	bl	8001060 <HAL_GetTick>
 800406c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800406e:	e008      	b.n	8004082 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004070:	f7fc fff6 	bl	8001060 <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	2b02      	cmp	r3, #2
 800407c:	d901      	bls.n	8004082 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e04d      	b.n	800411e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004082:	4b2a      	ldr	r3, [pc, #168]	; (800412c <HAL_RCC_OscConfig+0x4d8>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d0f0      	beq.n	8004070 <HAL_RCC_OscConfig+0x41c>
 800408e:	e045      	b.n	800411c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004090:	4b27      	ldr	r3, [pc, #156]	; (8004130 <HAL_RCC_OscConfig+0x4dc>)
 8004092:	2200      	movs	r2, #0
 8004094:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004096:	f7fc ffe3 	bl	8001060 <HAL_GetTick>
 800409a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800409c:	e008      	b.n	80040b0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800409e:	f7fc ffdf 	bl	8001060 <HAL_GetTick>
 80040a2:	4602      	mov	r2, r0
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	1ad3      	subs	r3, r2, r3
 80040a8:	2b02      	cmp	r3, #2
 80040aa:	d901      	bls.n	80040b0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80040ac:	2303      	movs	r3, #3
 80040ae:	e036      	b.n	800411e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040b0:	4b1e      	ldr	r3, [pc, #120]	; (800412c <HAL_RCC_OscConfig+0x4d8>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d1f0      	bne.n	800409e <HAL_RCC_OscConfig+0x44a>
 80040bc:	e02e      	b.n	800411c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	699b      	ldr	r3, [r3, #24]
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d101      	bne.n	80040ca <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e029      	b.n	800411e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80040ca:	4b18      	ldr	r3, [pc, #96]	; (800412c <HAL_RCC_OscConfig+0x4d8>)
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	69db      	ldr	r3, [r3, #28]
 80040da:	429a      	cmp	r2, r3
 80040dc:	d11c      	bne.n	8004118 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d115      	bne.n	8004118 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80040ec:	68fa      	ldr	r2, [r7, #12]
 80040ee:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80040f2:	4013      	ands	r3, r2
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d10d      	bne.n	8004118 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004106:	429a      	cmp	r2, r3
 8004108:	d106      	bne.n	8004118 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004114:	429a      	cmp	r2, r3
 8004116:	d001      	beq.n	800411c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e000      	b.n	800411e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800411c:	2300      	movs	r3, #0
}
 800411e:	4618      	mov	r0, r3
 8004120:	3718      	adds	r7, #24
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	40007000 	.word	0x40007000
 800412c:	40023800 	.word	0x40023800
 8004130:	42470060 	.word	0x42470060

08004134 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d101      	bne.n	8004148 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e0cc      	b.n	80042e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004148:	4b68      	ldr	r3, [pc, #416]	; (80042ec <HAL_RCC_ClockConfig+0x1b8>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 030f 	and.w	r3, r3, #15
 8004150:	683a      	ldr	r2, [r7, #0]
 8004152:	429a      	cmp	r2, r3
 8004154:	d90c      	bls.n	8004170 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004156:	4b65      	ldr	r3, [pc, #404]	; (80042ec <HAL_RCC_ClockConfig+0x1b8>)
 8004158:	683a      	ldr	r2, [r7, #0]
 800415a:	b2d2      	uxtb	r2, r2
 800415c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800415e:	4b63      	ldr	r3, [pc, #396]	; (80042ec <HAL_RCC_ClockConfig+0x1b8>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 030f 	and.w	r3, r3, #15
 8004166:	683a      	ldr	r2, [r7, #0]
 8004168:	429a      	cmp	r2, r3
 800416a:	d001      	beq.n	8004170 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e0b8      	b.n	80042e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0302 	and.w	r3, r3, #2
 8004178:	2b00      	cmp	r3, #0
 800417a:	d020      	beq.n	80041be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0304 	and.w	r3, r3, #4
 8004184:	2b00      	cmp	r3, #0
 8004186:	d005      	beq.n	8004194 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004188:	4b59      	ldr	r3, [pc, #356]	; (80042f0 <HAL_RCC_ClockConfig+0x1bc>)
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	4a58      	ldr	r2, [pc, #352]	; (80042f0 <HAL_RCC_ClockConfig+0x1bc>)
 800418e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004192:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0308 	and.w	r3, r3, #8
 800419c:	2b00      	cmp	r3, #0
 800419e:	d005      	beq.n	80041ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041a0:	4b53      	ldr	r3, [pc, #332]	; (80042f0 <HAL_RCC_ClockConfig+0x1bc>)
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	4a52      	ldr	r2, [pc, #328]	; (80042f0 <HAL_RCC_ClockConfig+0x1bc>)
 80041a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80041aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041ac:	4b50      	ldr	r3, [pc, #320]	; (80042f0 <HAL_RCC_ClockConfig+0x1bc>)
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	494d      	ldr	r1, [pc, #308]	; (80042f0 <HAL_RCC_ClockConfig+0x1bc>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0301 	and.w	r3, r3, #1
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d044      	beq.n	8004254 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d107      	bne.n	80041e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041d2:	4b47      	ldr	r3, [pc, #284]	; (80042f0 <HAL_RCC_ClockConfig+0x1bc>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d119      	bne.n	8004212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e07f      	b.n	80042e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d003      	beq.n	80041f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041ee:	2b03      	cmp	r3, #3
 80041f0:	d107      	bne.n	8004202 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041f2:	4b3f      	ldr	r3, [pc, #252]	; (80042f0 <HAL_RCC_ClockConfig+0x1bc>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d109      	bne.n	8004212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e06f      	b.n	80042e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004202:	4b3b      	ldr	r3, [pc, #236]	; (80042f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0302 	and.w	r3, r3, #2
 800420a:	2b00      	cmp	r3, #0
 800420c:	d101      	bne.n	8004212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e067      	b.n	80042e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004212:	4b37      	ldr	r3, [pc, #220]	; (80042f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	f023 0203 	bic.w	r2, r3, #3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	4934      	ldr	r1, [pc, #208]	; (80042f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004220:	4313      	orrs	r3, r2
 8004222:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004224:	f7fc ff1c 	bl	8001060 <HAL_GetTick>
 8004228:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800422a:	e00a      	b.n	8004242 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800422c:	f7fc ff18 	bl	8001060 <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	f241 3288 	movw	r2, #5000	; 0x1388
 800423a:	4293      	cmp	r3, r2
 800423c:	d901      	bls.n	8004242 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e04f      	b.n	80042e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004242:	4b2b      	ldr	r3, [pc, #172]	; (80042f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	f003 020c 	and.w	r2, r3, #12
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	429a      	cmp	r2, r3
 8004252:	d1eb      	bne.n	800422c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004254:	4b25      	ldr	r3, [pc, #148]	; (80042ec <HAL_RCC_ClockConfig+0x1b8>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 030f 	and.w	r3, r3, #15
 800425c:	683a      	ldr	r2, [r7, #0]
 800425e:	429a      	cmp	r2, r3
 8004260:	d20c      	bcs.n	800427c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004262:	4b22      	ldr	r3, [pc, #136]	; (80042ec <HAL_RCC_ClockConfig+0x1b8>)
 8004264:	683a      	ldr	r2, [r7, #0]
 8004266:	b2d2      	uxtb	r2, r2
 8004268:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800426a:	4b20      	ldr	r3, [pc, #128]	; (80042ec <HAL_RCC_ClockConfig+0x1b8>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 030f 	and.w	r3, r3, #15
 8004272:	683a      	ldr	r2, [r7, #0]
 8004274:	429a      	cmp	r2, r3
 8004276:	d001      	beq.n	800427c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	e032      	b.n	80042e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0304 	and.w	r3, r3, #4
 8004284:	2b00      	cmp	r3, #0
 8004286:	d008      	beq.n	800429a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004288:	4b19      	ldr	r3, [pc, #100]	; (80042f0 <HAL_RCC_ClockConfig+0x1bc>)
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	4916      	ldr	r1, [pc, #88]	; (80042f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004296:	4313      	orrs	r3, r2
 8004298:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0308 	and.w	r3, r3, #8
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d009      	beq.n	80042ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042a6:	4b12      	ldr	r3, [pc, #72]	; (80042f0 <HAL_RCC_ClockConfig+0x1bc>)
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	691b      	ldr	r3, [r3, #16]
 80042b2:	00db      	lsls	r3, r3, #3
 80042b4:	490e      	ldr	r1, [pc, #56]	; (80042f0 <HAL_RCC_ClockConfig+0x1bc>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80042ba:	f000 f821 	bl	8004300 <HAL_RCC_GetSysClockFreq>
 80042be:	4601      	mov	r1, r0
 80042c0:	4b0b      	ldr	r3, [pc, #44]	; (80042f0 <HAL_RCC_ClockConfig+0x1bc>)
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	091b      	lsrs	r3, r3, #4
 80042c6:	f003 030f 	and.w	r3, r3, #15
 80042ca:	4a0a      	ldr	r2, [pc, #40]	; (80042f4 <HAL_RCC_ClockConfig+0x1c0>)
 80042cc:	5cd3      	ldrb	r3, [r2, r3]
 80042ce:	fa21 f303 	lsr.w	r3, r1, r3
 80042d2:	4a09      	ldr	r2, [pc, #36]	; (80042f8 <HAL_RCC_ClockConfig+0x1c4>)
 80042d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80042d6:	4b09      	ldr	r3, [pc, #36]	; (80042fc <HAL_RCC_ClockConfig+0x1c8>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4618      	mov	r0, r3
 80042dc:	f7fc fe7c 	bl	8000fd8 <HAL_InitTick>

  return HAL_OK;
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3710      	adds	r7, #16
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	40023c00 	.word	0x40023c00
 80042f0:	40023800 	.word	0x40023800
 80042f4:	080090c8 	.word	0x080090c8
 80042f8:	20000000 	.word	0x20000000
 80042fc:	20000004 	.word	0x20000004

08004300 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004302:	b085      	sub	sp, #20
 8004304:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004306:	2300      	movs	r3, #0
 8004308:	607b      	str	r3, [r7, #4]
 800430a:	2300      	movs	r3, #0
 800430c:	60fb      	str	r3, [r7, #12]
 800430e:	2300      	movs	r3, #0
 8004310:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004312:	2300      	movs	r3, #0
 8004314:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004316:	4b63      	ldr	r3, [pc, #396]	; (80044a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	f003 030c 	and.w	r3, r3, #12
 800431e:	2b04      	cmp	r3, #4
 8004320:	d007      	beq.n	8004332 <HAL_RCC_GetSysClockFreq+0x32>
 8004322:	2b08      	cmp	r3, #8
 8004324:	d008      	beq.n	8004338 <HAL_RCC_GetSysClockFreq+0x38>
 8004326:	2b00      	cmp	r3, #0
 8004328:	f040 80b4 	bne.w	8004494 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800432c:	4b5e      	ldr	r3, [pc, #376]	; (80044a8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800432e:	60bb      	str	r3, [r7, #8]
       break;
 8004330:	e0b3      	b.n	800449a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004332:	4b5e      	ldr	r3, [pc, #376]	; (80044ac <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004334:	60bb      	str	r3, [r7, #8]
      break;
 8004336:	e0b0      	b.n	800449a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004338:	4b5a      	ldr	r3, [pc, #360]	; (80044a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004340:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004342:	4b58      	ldr	r3, [pc, #352]	; (80044a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d04a      	beq.n	80043e4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800434e:	4b55      	ldr	r3, [pc, #340]	; (80044a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	099b      	lsrs	r3, r3, #6
 8004354:	f04f 0400 	mov.w	r4, #0
 8004358:	f240 11ff 	movw	r1, #511	; 0x1ff
 800435c:	f04f 0200 	mov.w	r2, #0
 8004360:	ea03 0501 	and.w	r5, r3, r1
 8004364:	ea04 0602 	and.w	r6, r4, r2
 8004368:	4629      	mov	r1, r5
 800436a:	4632      	mov	r2, r6
 800436c:	f04f 0300 	mov.w	r3, #0
 8004370:	f04f 0400 	mov.w	r4, #0
 8004374:	0154      	lsls	r4, r2, #5
 8004376:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800437a:	014b      	lsls	r3, r1, #5
 800437c:	4619      	mov	r1, r3
 800437e:	4622      	mov	r2, r4
 8004380:	1b49      	subs	r1, r1, r5
 8004382:	eb62 0206 	sbc.w	r2, r2, r6
 8004386:	f04f 0300 	mov.w	r3, #0
 800438a:	f04f 0400 	mov.w	r4, #0
 800438e:	0194      	lsls	r4, r2, #6
 8004390:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004394:	018b      	lsls	r3, r1, #6
 8004396:	1a5b      	subs	r3, r3, r1
 8004398:	eb64 0402 	sbc.w	r4, r4, r2
 800439c:	f04f 0100 	mov.w	r1, #0
 80043a0:	f04f 0200 	mov.w	r2, #0
 80043a4:	00e2      	lsls	r2, r4, #3
 80043a6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80043aa:	00d9      	lsls	r1, r3, #3
 80043ac:	460b      	mov	r3, r1
 80043ae:	4614      	mov	r4, r2
 80043b0:	195b      	adds	r3, r3, r5
 80043b2:	eb44 0406 	adc.w	r4, r4, r6
 80043b6:	f04f 0100 	mov.w	r1, #0
 80043ba:	f04f 0200 	mov.w	r2, #0
 80043be:	0262      	lsls	r2, r4, #9
 80043c0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80043c4:	0259      	lsls	r1, r3, #9
 80043c6:	460b      	mov	r3, r1
 80043c8:	4614      	mov	r4, r2
 80043ca:	4618      	mov	r0, r3
 80043cc:	4621      	mov	r1, r4
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f04f 0400 	mov.w	r4, #0
 80043d4:	461a      	mov	r2, r3
 80043d6:	4623      	mov	r3, r4
 80043d8:	f7fb fef6 	bl	80001c8 <__aeabi_uldivmod>
 80043dc:	4603      	mov	r3, r0
 80043de:	460c      	mov	r4, r1
 80043e0:	60fb      	str	r3, [r7, #12]
 80043e2:	e049      	b.n	8004478 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043e4:	4b2f      	ldr	r3, [pc, #188]	; (80044a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	099b      	lsrs	r3, r3, #6
 80043ea:	f04f 0400 	mov.w	r4, #0
 80043ee:	f240 11ff 	movw	r1, #511	; 0x1ff
 80043f2:	f04f 0200 	mov.w	r2, #0
 80043f6:	ea03 0501 	and.w	r5, r3, r1
 80043fa:	ea04 0602 	and.w	r6, r4, r2
 80043fe:	4629      	mov	r1, r5
 8004400:	4632      	mov	r2, r6
 8004402:	f04f 0300 	mov.w	r3, #0
 8004406:	f04f 0400 	mov.w	r4, #0
 800440a:	0154      	lsls	r4, r2, #5
 800440c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004410:	014b      	lsls	r3, r1, #5
 8004412:	4619      	mov	r1, r3
 8004414:	4622      	mov	r2, r4
 8004416:	1b49      	subs	r1, r1, r5
 8004418:	eb62 0206 	sbc.w	r2, r2, r6
 800441c:	f04f 0300 	mov.w	r3, #0
 8004420:	f04f 0400 	mov.w	r4, #0
 8004424:	0194      	lsls	r4, r2, #6
 8004426:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800442a:	018b      	lsls	r3, r1, #6
 800442c:	1a5b      	subs	r3, r3, r1
 800442e:	eb64 0402 	sbc.w	r4, r4, r2
 8004432:	f04f 0100 	mov.w	r1, #0
 8004436:	f04f 0200 	mov.w	r2, #0
 800443a:	00e2      	lsls	r2, r4, #3
 800443c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004440:	00d9      	lsls	r1, r3, #3
 8004442:	460b      	mov	r3, r1
 8004444:	4614      	mov	r4, r2
 8004446:	195b      	adds	r3, r3, r5
 8004448:	eb44 0406 	adc.w	r4, r4, r6
 800444c:	f04f 0100 	mov.w	r1, #0
 8004450:	f04f 0200 	mov.w	r2, #0
 8004454:	02a2      	lsls	r2, r4, #10
 8004456:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800445a:	0299      	lsls	r1, r3, #10
 800445c:	460b      	mov	r3, r1
 800445e:	4614      	mov	r4, r2
 8004460:	4618      	mov	r0, r3
 8004462:	4621      	mov	r1, r4
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f04f 0400 	mov.w	r4, #0
 800446a:	461a      	mov	r2, r3
 800446c:	4623      	mov	r3, r4
 800446e:	f7fb feab 	bl	80001c8 <__aeabi_uldivmod>
 8004472:	4603      	mov	r3, r0
 8004474:	460c      	mov	r4, r1
 8004476:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004478:	4b0a      	ldr	r3, [pc, #40]	; (80044a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	0c1b      	lsrs	r3, r3, #16
 800447e:	f003 0303 	and.w	r3, r3, #3
 8004482:	3301      	adds	r3, #1
 8004484:	005b      	lsls	r3, r3, #1
 8004486:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004488:	68fa      	ldr	r2, [r7, #12]
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004490:	60bb      	str	r3, [r7, #8]
      break;
 8004492:	e002      	b.n	800449a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004494:	4b04      	ldr	r3, [pc, #16]	; (80044a8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004496:	60bb      	str	r3, [r7, #8]
      break;
 8004498:	bf00      	nop
    }
  }
  return sysclockfreq;
 800449a:	68bb      	ldr	r3, [r7, #8]
}
 800449c:	4618      	mov	r0, r3
 800449e:	3714      	adds	r7, #20
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044a4:	40023800 	.word	0x40023800
 80044a8:	00f42400 	.word	0x00f42400
 80044ac:	007a1200 	.word	0x007a1200

080044b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044b0:	b480      	push	{r7}
 80044b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044b4:	4b03      	ldr	r3, [pc, #12]	; (80044c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80044b6:	681b      	ldr	r3, [r3, #0]
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr
 80044c2:	bf00      	nop
 80044c4:	20000000 	.word	0x20000000

080044c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80044cc:	f7ff fff0 	bl	80044b0 <HAL_RCC_GetHCLKFreq>
 80044d0:	4601      	mov	r1, r0
 80044d2:	4b05      	ldr	r3, [pc, #20]	; (80044e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	0a9b      	lsrs	r3, r3, #10
 80044d8:	f003 0307 	and.w	r3, r3, #7
 80044dc:	4a03      	ldr	r2, [pc, #12]	; (80044ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80044de:	5cd3      	ldrb	r3, [r2, r3]
 80044e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	40023800 	.word	0x40023800
 80044ec:	080090d8 	.word	0x080090d8

080044f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80044f4:	f7ff ffdc 	bl	80044b0 <HAL_RCC_GetHCLKFreq>
 80044f8:	4601      	mov	r1, r0
 80044fa:	4b05      	ldr	r3, [pc, #20]	; (8004510 <HAL_RCC_GetPCLK2Freq+0x20>)
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	0b5b      	lsrs	r3, r3, #13
 8004500:	f003 0307 	and.w	r3, r3, #7
 8004504:	4a03      	ldr	r2, [pc, #12]	; (8004514 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004506:	5cd3      	ldrb	r3, [r2, r3]
 8004508:	fa21 f303 	lsr.w	r3, r1, r3
}
 800450c:	4618      	mov	r0, r3
 800450e:	bd80      	pop	{r7, pc}
 8004510:	40023800 	.word	0x40023800
 8004514:	080090d8 	.word	0x080090d8

08004518 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b086      	sub	sp, #24
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004520:	2300      	movs	r3, #0
 8004522:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004524:	2300      	movs	r3, #0
 8004526:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0301 	and.w	r3, r3, #1
 8004530:	2b00      	cmp	r3, #0
 8004532:	d105      	bne.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800453c:	2b00      	cmp	r3, #0
 800453e:	d035      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004540:	4b62      	ldr	r3, [pc, #392]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004542:	2200      	movs	r2, #0
 8004544:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004546:	f7fc fd8b 	bl	8001060 <HAL_GetTick>
 800454a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800454c:	e008      	b.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800454e:	f7fc fd87 	bl	8001060 <HAL_GetTick>
 8004552:	4602      	mov	r2, r0
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	1ad3      	subs	r3, r2, r3
 8004558:	2b02      	cmp	r3, #2
 800455a:	d901      	bls.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800455c:	2303      	movs	r3, #3
 800455e:	e0b0      	b.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004560:	4b5b      	ldr	r3, [pc, #364]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004568:	2b00      	cmp	r3, #0
 800456a:	d1f0      	bne.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	019a      	lsls	r2, r3, #6
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	071b      	lsls	r3, r3, #28
 8004578:	4955      	ldr	r1, [pc, #340]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800457a:	4313      	orrs	r3, r2
 800457c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004580:	4b52      	ldr	r3, [pc, #328]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004582:	2201      	movs	r2, #1
 8004584:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004586:	f7fc fd6b 	bl	8001060 <HAL_GetTick>
 800458a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800458c:	e008      	b.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800458e:	f7fc fd67 	bl	8001060 <HAL_GetTick>
 8004592:	4602      	mov	r2, r0
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	1ad3      	subs	r3, r2, r3
 8004598:	2b02      	cmp	r3, #2
 800459a:	d901      	bls.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800459c:	2303      	movs	r3, #3
 800459e:	e090      	b.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80045a0:	4b4b      	ldr	r3, [pc, #300]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d0f0      	beq.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0302 	and.w	r3, r3, #2
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	f000 8083 	beq.w	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80045ba:	2300      	movs	r3, #0
 80045bc:	60fb      	str	r3, [r7, #12]
 80045be:	4b44      	ldr	r3, [pc, #272]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c2:	4a43      	ldr	r2, [pc, #268]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045c8:	6413      	str	r3, [r2, #64]	; 0x40
 80045ca:	4b41      	ldr	r3, [pc, #260]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045d2:	60fb      	str	r3, [r7, #12]
 80045d4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80045d6:	4b3f      	ldr	r3, [pc, #252]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a3e      	ldr	r2, [pc, #248]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80045dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045e0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80045e2:	f7fc fd3d 	bl	8001060 <HAL_GetTick>
 80045e6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80045e8:	e008      	b.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80045ea:	f7fc fd39 	bl	8001060 <HAL_GetTick>
 80045ee:	4602      	mov	r2, r0
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	d901      	bls.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80045f8:	2303      	movs	r3, #3
 80045fa:	e062      	b.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80045fc:	4b35      	ldr	r3, [pc, #212]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004604:	2b00      	cmp	r3, #0
 8004606:	d0f0      	beq.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004608:	4b31      	ldr	r3, [pc, #196]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800460a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800460c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004610:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d02f      	beq.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004620:	693a      	ldr	r2, [r7, #16]
 8004622:	429a      	cmp	r2, r3
 8004624:	d028      	beq.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004626:	4b2a      	ldr	r3, [pc, #168]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800462a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800462e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004630:	4b29      	ldr	r3, [pc, #164]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004632:	2201      	movs	r2, #1
 8004634:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004636:	4b28      	ldr	r3, [pc, #160]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004638:	2200      	movs	r2, #0
 800463a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800463c:	4a24      	ldr	r2, [pc, #144]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004642:	4b23      	ldr	r3, [pc, #140]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004646:	f003 0301 	and.w	r3, r3, #1
 800464a:	2b01      	cmp	r3, #1
 800464c:	d114      	bne.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800464e:	f7fc fd07 	bl	8001060 <HAL_GetTick>
 8004652:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004654:	e00a      	b.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004656:	f7fc fd03 	bl	8001060 <HAL_GetTick>
 800465a:	4602      	mov	r2, r0
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	1ad3      	subs	r3, r2, r3
 8004660:	f241 3288 	movw	r2, #5000	; 0x1388
 8004664:	4293      	cmp	r3, r2
 8004666:	d901      	bls.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004668:	2303      	movs	r3, #3
 800466a:	e02a      	b.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800466c:	4b18      	ldr	r3, [pc, #96]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800466e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004670:	f003 0302 	and.w	r3, r3, #2
 8004674:	2b00      	cmp	r3, #0
 8004676:	d0ee      	beq.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004680:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004684:	d10d      	bne.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004686:	4b12      	ldr	r3, [pc, #72]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004696:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800469a:	490d      	ldr	r1, [pc, #52]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800469c:	4313      	orrs	r3, r2
 800469e:	608b      	str	r3, [r1, #8]
 80046a0:	e005      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x196>
 80046a2:	4b0b      	ldr	r3, [pc, #44]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	4a0a      	ldr	r2, [pc, #40]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046a8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80046ac:	6093      	str	r3, [r2, #8]
 80046ae:	4b08      	ldr	r3, [pc, #32]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	68db      	ldr	r3, [r3, #12]
 80046b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046ba:	4905      	ldr	r1, [pc, #20]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046bc:	4313      	orrs	r3, r2
 80046be:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80046c0:	2300      	movs	r3, #0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3718      	adds	r7, #24
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop
 80046cc:	42470068 	.word	0x42470068
 80046d0:	40023800 	.word	0x40023800
 80046d4:	40007000 	.word	0x40007000
 80046d8:	42470e40 	.word	0x42470e40

080046dc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80046dc:	b480      	push	{r7}
 80046de:	b087      	sub	sp, #28
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80046e4:	2300      	movs	r3, #0
 80046e6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80046e8:	2300      	movs	r3, #0
 80046ea:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80046ec:	2300      	movs	r3, #0
 80046ee:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80046f0:	2300      	movs	r3, #0
 80046f2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d13d      	bne.n	8004776 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80046fa:	4b22      	ldr	r3, [pc, #136]	; (8004784 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004702:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d004      	beq.n	8004714 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800470a:	2b01      	cmp	r3, #1
 800470c:	d12f      	bne.n	800476e <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800470e:	4b1e      	ldr	r3, [pc, #120]	; (8004788 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004710:	617b      	str	r3, [r7, #20]
          break;
 8004712:	e02f      	b.n	8004774 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004714:	4b1b      	ldr	r3, [pc, #108]	; (8004784 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800471c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004720:	d108      	bne.n	8004734 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004722:	4b18      	ldr	r3, [pc, #96]	; (8004784 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800472a:	4a18      	ldr	r2, [pc, #96]	; (800478c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800472c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004730:	613b      	str	r3, [r7, #16]
 8004732:	e007      	b.n	8004744 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004734:	4b13      	ldr	r3, [pc, #76]	; (8004784 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800473c:	4a14      	ldr	r2, [pc, #80]	; (8004790 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800473e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004742:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004744:	4b0f      	ldr	r3, [pc, #60]	; (8004784 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004746:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800474a:	099b      	lsrs	r3, r3, #6
 800474c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	fb02 f303 	mul.w	r3, r2, r3
 8004756:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004758:	4b0a      	ldr	r3, [pc, #40]	; (8004784 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800475a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800475e:	0f1b      	lsrs	r3, r3, #28
 8004760:	f003 0307 	and.w	r3, r3, #7
 8004764:	68ba      	ldr	r2, [r7, #8]
 8004766:	fbb2 f3f3 	udiv	r3, r2, r3
 800476a:	617b      	str	r3, [r7, #20]
          break;
 800476c:	e002      	b.n	8004774 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800476e:	2300      	movs	r3, #0
 8004770:	617b      	str	r3, [r7, #20]
          break;
 8004772:	bf00      	nop
        }
      }
      break;
 8004774:	bf00      	nop
    }
  }
  return frequency;
 8004776:	697b      	ldr	r3, [r7, #20]
}
 8004778:	4618      	mov	r0, r3
 800477a:	371c      	adds	r7, #28
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr
 8004784:	40023800 	.word	0x40023800
 8004788:	00bb8000 	.word	0x00bb8000
 800478c:	007a1200 	.word	0x007a1200
 8004790:	00f42400 	.word	0x00f42400

08004794 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b082      	sub	sp, #8
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d101      	bne.n	80047a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e056      	b.n	8004854 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d106      	bne.n	80047c6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f7fc f9f5 	bl	8000bb0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2202      	movs	r2, #2
 80047ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047dc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	685a      	ldr	r2, [r3, #4]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	431a      	orrs	r2, r3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	431a      	orrs	r2, r3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	691b      	ldr	r3, [r3, #16]
 80047f2:	431a      	orrs	r2, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	695b      	ldr	r3, [r3, #20]
 80047f8:	431a      	orrs	r2, r3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	699b      	ldr	r3, [r3, #24]
 80047fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004802:	431a      	orrs	r2, r3
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	69db      	ldr	r3, [r3, #28]
 8004808:	431a      	orrs	r2, r3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a1b      	ldr	r3, [r3, #32]
 800480e:	ea42 0103 	orr.w	r1, r2, r3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	430a      	orrs	r2, r1
 800481c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	699b      	ldr	r3, [r3, #24]
 8004822:	0c1b      	lsrs	r3, r3, #16
 8004824:	f003 0104 	and.w	r1, r3, #4
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	430a      	orrs	r2, r1
 8004832:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	69da      	ldr	r2, [r3, #28]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004842:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2200      	movs	r2, #0
 8004848:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2201      	movs	r2, #1
 800484e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004852:	2300      	movs	r3, #0
}
 8004854:	4618      	mov	r0, r3
 8004856:	3708      	adds	r7, #8
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}

0800485c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b082      	sub	sp, #8
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d101      	bne.n	800486e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e01d      	b.n	80048aa <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004874:	b2db      	uxtb	r3, r3
 8004876:	2b00      	cmp	r3, #0
 8004878:	d106      	bne.n	8004888 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f7fc fac8 	bl	8000e18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2202      	movs	r2, #2
 800488c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	3304      	adds	r3, #4
 8004898:	4619      	mov	r1, r3
 800489a:	4610      	mov	r0, r2
 800489c:	f000 f95e 	bl	8004b5c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2201      	movs	r2, #1
 80048a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048a8:	2300      	movs	r3, #0
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3708      	adds	r7, #8
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}

080048b2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80048b2:	b480      	push	{r7}
 80048b4:	b085      	sub	sp, #20
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	68da      	ldr	r2, [r3, #12]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f042 0201 	orr.w	r2, r2, #1
 80048c8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	f003 0307 	and.w	r3, r3, #7
 80048d4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2b06      	cmp	r3, #6
 80048da:	d007      	beq.n	80048ec <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f042 0201 	orr.w	r2, r2, #1
 80048ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048ec:	2300      	movs	r3, #0
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3714      	adds	r7, #20
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr

080048fa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048fa:	b580      	push	{r7, lr}
 80048fc:	b082      	sub	sp, #8
 80048fe:	af00      	add	r7, sp, #0
 8004900:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	691b      	ldr	r3, [r3, #16]
 8004908:	f003 0302 	and.w	r3, r3, #2
 800490c:	2b02      	cmp	r3, #2
 800490e:	d122      	bne.n	8004956 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	68db      	ldr	r3, [r3, #12]
 8004916:	f003 0302 	and.w	r3, r3, #2
 800491a:	2b02      	cmp	r3, #2
 800491c:	d11b      	bne.n	8004956 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f06f 0202 	mvn.w	r2, #2
 8004926:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	699b      	ldr	r3, [r3, #24]
 8004934:	f003 0303 	and.w	r3, r3, #3
 8004938:	2b00      	cmp	r3, #0
 800493a:	d003      	beq.n	8004944 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f000 f8ee 	bl	8004b1e <HAL_TIM_IC_CaptureCallback>
 8004942:	e005      	b.n	8004950 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f000 f8e0 	bl	8004b0a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 f8f1 	bl	8004b32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	691b      	ldr	r3, [r3, #16]
 800495c:	f003 0304 	and.w	r3, r3, #4
 8004960:	2b04      	cmp	r3, #4
 8004962:	d122      	bne.n	80049aa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	f003 0304 	and.w	r3, r3, #4
 800496e:	2b04      	cmp	r3, #4
 8004970:	d11b      	bne.n	80049aa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f06f 0204 	mvn.w	r2, #4
 800497a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2202      	movs	r2, #2
 8004980:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	699b      	ldr	r3, [r3, #24]
 8004988:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800498c:	2b00      	cmp	r3, #0
 800498e:	d003      	beq.n	8004998 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f000 f8c4 	bl	8004b1e <HAL_TIM_IC_CaptureCallback>
 8004996:	e005      	b.n	80049a4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f000 f8b6 	bl	8004b0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f000 f8c7 	bl	8004b32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	691b      	ldr	r3, [r3, #16]
 80049b0:	f003 0308 	and.w	r3, r3, #8
 80049b4:	2b08      	cmp	r3, #8
 80049b6:	d122      	bne.n	80049fe <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	f003 0308 	and.w	r3, r3, #8
 80049c2:	2b08      	cmp	r3, #8
 80049c4:	d11b      	bne.n	80049fe <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f06f 0208 	mvn.w	r2, #8
 80049ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2204      	movs	r2, #4
 80049d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	69db      	ldr	r3, [r3, #28]
 80049dc:	f003 0303 	and.w	r3, r3, #3
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d003      	beq.n	80049ec <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f000 f89a 	bl	8004b1e <HAL_TIM_IC_CaptureCallback>
 80049ea:	e005      	b.n	80049f8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f000 f88c 	bl	8004b0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f000 f89d 	bl	8004b32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	691b      	ldr	r3, [r3, #16]
 8004a04:	f003 0310 	and.w	r3, r3, #16
 8004a08:	2b10      	cmp	r3, #16
 8004a0a:	d122      	bne.n	8004a52 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	68db      	ldr	r3, [r3, #12]
 8004a12:	f003 0310 	and.w	r3, r3, #16
 8004a16:	2b10      	cmp	r3, #16
 8004a18:	d11b      	bne.n	8004a52 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f06f 0210 	mvn.w	r2, #16
 8004a22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2208      	movs	r2, #8
 8004a28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	69db      	ldr	r3, [r3, #28]
 8004a30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d003      	beq.n	8004a40 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f000 f870 	bl	8004b1e <HAL_TIM_IC_CaptureCallback>
 8004a3e:	e005      	b.n	8004a4c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f000 f862 	bl	8004b0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f000 f873 	bl	8004b32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	691b      	ldr	r3, [r3, #16]
 8004a58:	f003 0301 	and.w	r3, r3, #1
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d10e      	bne.n	8004a7e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	f003 0301 	and.w	r3, r3, #1
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d107      	bne.n	8004a7e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f06f 0201 	mvn.w	r2, #1
 8004a76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f7fc f845 	bl	8000b08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	691b      	ldr	r3, [r3, #16]
 8004a84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a88:	2b80      	cmp	r3, #128	; 0x80
 8004a8a:	d10e      	bne.n	8004aaa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a96:	2b80      	cmp	r3, #128	; 0x80
 8004a98:	d107      	bne.n	8004aaa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004aa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f000 f97f 	bl	8004da8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	691b      	ldr	r3, [r3, #16]
 8004ab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ab4:	2b40      	cmp	r3, #64	; 0x40
 8004ab6:	d10e      	bne.n	8004ad6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ac2:	2b40      	cmp	r3, #64	; 0x40
 8004ac4:	d107      	bne.n	8004ad6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ace:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f000 f838 	bl	8004b46 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	691b      	ldr	r3, [r3, #16]
 8004adc:	f003 0320 	and.w	r3, r3, #32
 8004ae0:	2b20      	cmp	r3, #32
 8004ae2:	d10e      	bne.n	8004b02 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	f003 0320 	and.w	r3, r3, #32
 8004aee:	2b20      	cmp	r3, #32
 8004af0:	d107      	bne.n	8004b02 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f06f 0220 	mvn.w	r2, #32
 8004afa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f000 f949 	bl	8004d94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b02:	bf00      	nop
 8004b04:	3708      	adds	r7, #8
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}

08004b0a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b0a:	b480      	push	{r7}
 8004b0c:	b083      	sub	sp, #12
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b12:	bf00      	nop
 8004b14:	370c      	adds	r7, #12
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr

08004b1e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b1e:	b480      	push	{r7}
 8004b20:	b083      	sub	sp, #12
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b26:	bf00      	nop
 8004b28:	370c      	adds	r7, #12
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr

08004b32 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b32:	b480      	push	{r7}
 8004b34:	b083      	sub	sp, #12
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b3a:	bf00      	nop
 8004b3c:	370c      	adds	r7, #12
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr

08004b46 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b46:	b480      	push	{r7}
 8004b48:	b083      	sub	sp, #12
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b4e:	bf00      	nop
 8004b50:	370c      	adds	r7, #12
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr
	...

08004b5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b085      	sub	sp, #20
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	4a40      	ldr	r2, [pc, #256]	; (8004c70 <TIM_Base_SetConfig+0x114>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d013      	beq.n	8004b9c <TIM_Base_SetConfig+0x40>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b7a:	d00f      	beq.n	8004b9c <TIM_Base_SetConfig+0x40>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	4a3d      	ldr	r2, [pc, #244]	; (8004c74 <TIM_Base_SetConfig+0x118>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d00b      	beq.n	8004b9c <TIM_Base_SetConfig+0x40>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	4a3c      	ldr	r2, [pc, #240]	; (8004c78 <TIM_Base_SetConfig+0x11c>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d007      	beq.n	8004b9c <TIM_Base_SetConfig+0x40>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	4a3b      	ldr	r2, [pc, #236]	; (8004c7c <TIM_Base_SetConfig+0x120>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d003      	beq.n	8004b9c <TIM_Base_SetConfig+0x40>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	4a3a      	ldr	r2, [pc, #232]	; (8004c80 <TIM_Base_SetConfig+0x124>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d108      	bne.n	8004bae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ba2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	68fa      	ldr	r2, [r7, #12]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	4a2f      	ldr	r2, [pc, #188]	; (8004c70 <TIM_Base_SetConfig+0x114>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d02b      	beq.n	8004c0e <TIM_Base_SetConfig+0xb2>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bbc:	d027      	beq.n	8004c0e <TIM_Base_SetConfig+0xb2>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4a2c      	ldr	r2, [pc, #176]	; (8004c74 <TIM_Base_SetConfig+0x118>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d023      	beq.n	8004c0e <TIM_Base_SetConfig+0xb2>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	4a2b      	ldr	r2, [pc, #172]	; (8004c78 <TIM_Base_SetConfig+0x11c>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d01f      	beq.n	8004c0e <TIM_Base_SetConfig+0xb2>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	4a2a      	ldr	r2, [pc, #168]	; (8004c7c <TIM_Base_SetConfig+0x120>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d01b      	beq.n	8004c0e <TIM_Base_SetConfig+0xb2>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4a29      	ldr	r2, [pc, #164]	; (8004c80 <TIM_Base_SetConfig+0x124>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d017      	beq.n	8004c0e <TIM_Base_SetConfig+0xb2>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4a28      	ldr	r2, [pc, #160]	; (8004c84 <TIM_Base_SetConfig+0x128>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d013      	beq.n	8004c0e <TIM_Base_SetConfig+0xb2>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4a27      	ldr	r2, [pc, #156]	; (8004c88 <TIM_Base_SetConfig+0x12c>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d00f      	beq.n	8004c0e <TIM_Base_SetConfig+0xb2>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4a26      	ldr	r2, [pc, #152]	; (8004c8c <TIM_Base_SetConfig+0x130>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d00b      	beq.n	8004c0e <TIM_Base_SetConfig+0xb2>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4a25      	ldr	r2, [pc, #148]	; (8004c90 <TIM_Base_SetConfig+0x134>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d007      	beq.n	8004c0e <TIM_Base_SetConfig+0xb2>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4a24      	ldr	r2, [pc, #144]	; (8004c94 <TIM_Base_SetConfig+0x138>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d003      	beq.n	8004c0e <TIM_Base_SetConfig+0xb2>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4a23      	ldr	r2, [pc, #140]	; (8004c98 <TIM_Base_SetConfig+0x13c>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d108      	bne.n	8004c20 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	68fa      	ldr	r2, [r7, #12]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	695b      	ldr	r3, [r3, #20]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	68fa      	ldr	r2, [r7, #12]
 8004c32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	689a      	ldr	r2, [r3, #8]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	4a0a      	ldr	r2, [pc, #40]	; (8004c70 <TIM_Base_SetConfig+0x114>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d003      	beq.n	8004c54 <TIM_Base_SetConfig+0xf8>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	4a0c      	ldr	r2, [pc, #48]	; (8004c80 <TIM_Base_SetConfig+0x124>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d103      	bne.n	8004c5c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	691a      	ldr	r2, [r3, #16]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	615a      	str	r2, [r3, #20]
}
 8004c62:	bf00      	nop
 8004c64:	3714      	adds	r7, #20
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr
 8004c6e:	bf00      	nop
 8004c70:	40010000 	.word	0x40010000
 8004c74:	40000400 	.word	0x40000400
 8004c78:	40000800 	.word	0x40000800
 8004c7c:	40000c00 	.word	0x40000c00
 8004c80:	40010400 	.word	0x40010400
 8004c84:	40014000 	.word	0x40014000
 8004c88:	40014400 	.word	0x40014400
 8004c8c:	40014800 	.word	0x40014800
 8004c90:	40001800 	.word	0x40001800
 8004c94:	40001c00 	.word	0x40001c00
 8004c98:	40002000 	.word	0x40002000

08004c9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b085      	sub	sp, #20
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d101      	bne.n	8004cb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004cb0:	2302      	movs	r3, #2
 8004cb2:	e05a      	b.n	8004d6a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2202      	movs	r2, #2
 8004cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	68fa      	ldr	r2, [r7, #12]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	68fa      	ldr	r2, [r7, #12]
 8004cec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a21      	ldr	r2, [pc, #132]	; (8004d78 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d022      	beq.n	8004d3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d00:	d01d      	beq.n	8004d3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a1d      	ldr	r2, [pc, #116]	; (8004d7c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d018      	beq.n	8004d3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a1b      	ldr	r2, [pc, #108]	; (8004d80 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d013      	beq.n	8004d3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a1a      	ldr	r2, [pc, #104]	; (8004d84 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d00e      	beq.n	8004d3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a18      	ldr	r2, [pc, #96]	; (8004d88 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d009      	beq.n	8004d3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a17      	ldr	r2, [pc, #92]	; (8004d8c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d004      	beq.n	8004d3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a15      	ldr	r2, [pc, #84]	; (8004d90 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d10c      	bne.n	8004d58 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	68ba      	ldr	r2, [r7, #8]
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	68ba      	ldr	r2, [r7, #8]
 8004d56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d68:	2300      	movs	r3, #0
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3714      	adds	r7, #20
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr
 8004d76:	bf00      	nop
 8004d78:	40010000 	.word	0x40010000
 8004d7c:	40000400 	.word	0x40000400
 8004d80:	40000800 	.word	0x40000800
 8004d84:	40000c00 	.word	0x40000c00
 8004d88:	40010400 	.word	0x40010400
 8004d8c:	40014000 	.word	0x40014000
 8004d90:	40001800 	.word	0x40001800

08004d94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b083      	sub	sp, #12
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d9c:	bf00      	nop
 8004d9e:	370c      	adds	r7, #12
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr

08004da8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b083      	sub	sp, #12
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004db0:	bf00      	nop
 8004db2:	370c      	adds	r7, #12
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr

08004dbc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b082      	sub	sp, #8
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d101      	bne.n	8004dce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e03f      	b.n	8004e4e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d106      	bne.n	8004de8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f7fc f864 	bl	8000eb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2224      	movs	r2, #36	; 0x24
 8004dec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	68da      	ldr	r2, [r3, #12]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004dfe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f000 fb97 	bl	8005534 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	691a      	ldr	r2, [r3, #16]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	695a      	ldr	r2, [r3, #20]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e24:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	68da      	ldr	r2, [r3, #12]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e34:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2220      	movs	r2, #32
 8004e40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2220      	movs	r2, #32
 8004e48:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004e4c:	2300      	movs	r3, #0
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3708      	adds	r7, #8
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}

08004e56 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e56:	b580      	push	{r7, lr}
 8004e58:	b088      	sub	sp, #32
 8004e5a:	af02      	add	r7, sp, #8
 8004e5c:	60f8      	str	r0, [r7, #12]
 8004e5e:	60b9      	str	r1, [r7, #8]
 8004e60:	603b      	str	r3, [r7, #0]
 8004e62:	4613      	mov	r3, r2
 8004e64:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004e66:	2300      	movs	r3, #0
 8004e68:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	2b20      	cmp	r3, #32
 8004e74:	f040 8083 	bne.w	8004f7e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d002      	beq.n	8004e84 <HAL_UART_Transmit+0x2e>
 8004e7e:	88fb      	ldrh	r3, [r7, #6]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d101      	bne.n	8004e88 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	e07b      	b.n	8004f80 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d101      	bne.n	8004e96 <HAL_UART_Transmit+0x40>
 8004e92:	2302      	movs	r3, #2
 8004e94:	e074      	b.n	8004f80 <HAL_UART_Transmit+0x12a>
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2201      	movs	r2, #1
 8004e9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2221      	movs	r2, #33	; 0x21
 8004ea8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004eac:	f7fc f8d8 	bl	8001060 <HAL_GetTick>
 8004eb0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	88fa      	ldrh	r2, [r7, #6]
 8004eb6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	88fa      	ldrh	r2, [r7, #6]
 8004ebc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004ec6:	e042      	b.n	8004f4e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	3b01      	subs	r3, #1
 8004ed0:	b29a      	uxth	r2, r3
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ede:	d122      	bne.n	8004f26 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	9300      	str	r3, [sp, #0]
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	2180      	movs	r1, #128	; 0x80
 8004eea:	68f8      	ldr	r0, [r7, #12]
 8004eec:	f000 f9b6 	bl	800525c <UART_WaitOnFlagUntilTimeout>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d001      	beq.n	8004efa <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	e042      	b.n	8004f80 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	881b      	ldrh	r3, [r3, #0]
 8004f02:	461a      	mov	r2, r3
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f0c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	691b      	ldr	r3, [r3, #16]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d103      	bne.n	8004f1e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	3302      	adds	r3, #2
 8004f1a:	60bb      	str	r3, [r7, #8]
 8004f1c:	e017      	b.n	8004f4e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	3301      	adds	r3, #1
 8004f22:	60bb      	str	r3, [r7, #8]
 8004f24:	e013      	b.n	8004f4e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	9300      	str	r3, [sp, #0]
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	2180      	movs	r1, #128	; 0x80
 8004f30:	68f8      	ldr	r0, [r7, #12]
 8004f32:	f000 f993 	bl	800525c <UART_WaitOnFlagUntilTimeout>
 8004f36:	4603      	mov	r3, r0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d001      	beq.n	8004f40 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	e01f      	b.n	8004f80 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	1c5a      	adds	r2, r3, #1
 8004f44:	60ba      	str	r2, [r7, #8]
 8004f46:	781a      	ldrb	r2, [r3, #0]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d1b7      	bne.n	8004ec8 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	9300      	str	r3, [sp, #0]
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	2140      	movs	r1, #64	; 0x40
 8004f62:	68f8      	ldr	r0, [r7, #12]
 8004f64:	f000 f97a 	bl	800525c <UART_WaitOnFlagUntilTimeout>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d001      	beq.n	8004f72 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8004f6e:	2303      	movs	r3, #3
 8004f70:	e006      	b.n	8004f80 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2220      	movs	r2, #32
 8004f76:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	e000      	b.n	8004f80 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004f7e:	2302      	movs	r3, #2
  }
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3718      	adds	r7, #24
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b085      	sub	sp, #20
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	60f8      	str	r0, [r7, #12]
 8004f90:	60b9      	str	r1, [r7, #8]
 8004f92:	4613      	mov	r3, r2
 8004f94:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	2b20      	cmp	r3, #32
 8004fa0:	d140      	bne.n	8005024 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d002      	beq.n	8004fae <HAL_UART_Receive_IT+0x26>
 8004fa8:	88fb      	ldrh	r3, [r7, #6]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d101      	bne.n	8004fb2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e039      	b.n	8005026 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d101      	bne.n	8004fc0 <HAL_UART_Receive_IT+0x38>
 8004fbc:	2302      	movs	r3, #2
 8004fbe:	e032      	b.n	8005026 <HAL_UART_Receive_IT+0x9e>
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	68ba      	ldr	r2, [r7, #8]
 8004fcc:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	88fa      	ldrh	r2, [r7, #6]
 8004fd2:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	88fa      	ldrh	r2, [r7, #6]
 8004fd8:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2222      	movs	r2, #34	; 0x22
 8004fe4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2200      	movs	r2, #0
 8004fec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	68da      	ldr	r2, [r3, #12]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ffe:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	695a      	ldr	r2, [r3, #20]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f042 0201 	orr.w	r2, r2, #1
 800500e:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	68da      	ldr	r2, [r3, #12]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f042 0220 	orr.w	r2, r2, #32
 800501e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005020:	2300      	movs	r3, #0
 8005022:	e000      	b.n	8005026 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005024:	2302      	movs	r3, #2
  }
}
 8005026:	4618      	mov	r0, r3
 8005028:	3714      	adds	r7, #20
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr
	...

08005034 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b088      	sub	sp, #32
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	695b      	ldr	r3, [r3, #20]
 8005052:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005054:	2300      	movs	r3, #0
 8005056:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005058:	2300      	movs	r3, #0
 800505a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	f003 030f 	and.w	r3, r3, #15
 8005062:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d10d      	bne.n	8005086 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800506a:	69fb      	ldr	r3, [r7, #28]
 800506c:	f003 0320 	and.w	r3, r3, #32
 8005070:	2b00      	cmp	r3, #0
 8005072:	d008      	beq.n	8005086 <HAL_UART_IRQHandler+0x52>
 8005074:	69bb      	ldr	r3, [r7, #24]
 8005076:	f003 0320 	and.w	r3, r3, #32
 800507a:	2b00      	cmp	r3, #0
 800507c:	d003      	beq.n	8005086 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f000 f9d6 	bl	8005430 <UART_Receive_IT>
      return;
 8005084:	e0d1      	b.n	800522a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	2b00      	cmp	r3, #0
 800508a:	f000 80b0 	beq.w	80051ee <HAL_UART_IRQHandler+0x1ba>
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	f003 0301 	and.w	r3, r3, #1
 8005094:	2b00      	cmp	r3, #0
 8005096:	d105      	bne.n	80050a4 <HAL_UART_IRQHandler+0x70>
 8005098:	69bb      	ldr	r3, [r7, #24]
 800509a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800509e:	2b00      	cmp	r3, #0
 80050a0:	f000 80a5 	beq.w	80051ee <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	f003 0301 	and.w	r3, r3, #1
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d00a      	beq.n	80050c4 <HAL_UART_IRQHandler+0x90>
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d005      	beq.n	80050c4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050bc:	f043 0201 	orr.w	r2, r3, #1
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	f003 0304 	and.w	r3, r3, #4
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d00a      	beq.n	80050e4 <HAL_UART_IRQHandler+0xb0>
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	f003 0301 	and.w	r3, r3, #1
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d005      	beq.n	80050e4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050dc:	f043 0202 	orr.w	r2, r3, #2
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80050e4:	69fb      	ldr	r3, [r7, #28]
 80050e6:	f003 0302 	and.w	r3, r3, #2
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d00a      	beq.n	8005104 <HAL_UART_IRQHandler+0xd0>
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	f003 0301 	and.w	r3, r3, #1
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d005      	beq.n	8005104 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050fc:	f043 0204 	orr.w	r2, r3, #4
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005104:	69fb      	ldr	r3, [r7, #28]
 8005106:	f003 0308 	and.w	r3, r3, #8
 800510a:	2b00      	cmp	r3, #0
 800510c:	d00f      	beq.n	800512e <HAL_UART_IRQHandler+0xfa>
 800510e:	69bb      	ldr	r3, [r7, #24]
 8005110:	f003 0320 	and.w	r3, r3, #32
 8005114:	2b00      	cmp	r3, #0
 8005116:	d104      	bne.n	8005122 <HAL_UART_IRQHandler+0xee>
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	f003 0301 	and.w	r3, r3, #1
 800511e:	2b00      	cmp	r3, #0
 8005120:	d005      	beq.n	800512e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005126:	f043 0208 	orr.w	r2, r3, #8
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005132:	2b00      	cmp	r3, #0
 8005134:	d078      	beq.n	8005228 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005136:	69fb      	ldr	r3, [r7, #28]
 8005138:	f003 0320 	and.w	r3, r3, #32
 800513c:	2b00      	cmp	r3, #0
 800513e:	d007      	beq.n	8005150 <HAL_UART_IRQHandler+0x11c>
 8005140:	69bb      	ldr	r3, [r7, #24]
 8005142:	f003 0320 	and.w	r3, r3, #32
 8005146:	2b00      	cmp	r3, #0
 8005148:	d002      	beq.n	8005150 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f000 f970 	bl	8005430 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	695b      	ldr	r3, [r3, #20]
 8005156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800515a:	2b40      	cmp	r3, #64	; 0x40
 800515c:	bf0c      	ite	eq
 800515e:	2301      	moveq	r3, #1
 8005160:	2300      	movne	r3, #0
 8005162:	b2db      	uxtb	r3, r3
 8005164:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800516a:	f003 0308 	and.w	r3, r3, #8
 800516e:	2b00      	cmp	r3, #0
 8005170:	d102      	bne.n	8005178 <HAL_UART_IRQHandler+0x144>
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d031      	beq.n	80051dc <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	f000 f8b9 	bl	80052f0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	695b      	ldr	r3, [r3, #20]
 8005184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005188:	2b40      	cmp	r3, #64	; 0x40
 800518a:	d123      	bne.n	80051d4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	695a      	ldr	r2, [r3, #20]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800519a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d013      	beq.n	80051cc <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051a8:	4a21      	ldr	r2, [pc, #132]	; (8005230 <HAL_UART_IRQHandler+0x1fc>)
 80051aa:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051b0:	4618      	mov	r0, r3
 80051b2:	f7fc f894 	bl	80012de <HAL_DMA_Abort_IT>
 80051b6:	4603      	mov	r3, r0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d016      	beq.n	80051ea <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80051c6:	4610      	mov	r0, r2
 80051c8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051ca:	e00e      	b.n	80051ea <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f000 f83b 	bl	8005248 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051d2:	e00a      	b.n	80051ea <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f000 f837 	bl	8005248 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051da:	e006      	b.n	80051ea <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f000 f833 	bl	8005248 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80051e8:	e01e      	b.n	8005228 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051ea:	bf00      	nop
    return;
 80051ec:	e01c      	b.n	8005228 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80051ee:	69fb      	ldr	r3, [r7, #28]
 80051f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d008      	beq.n	800520a <HAL_UART_IRQHandler+0x1d6>
 80051f8:	69bb      	ldr	r3, [r7, #24]
 80051fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d003      	beq.n	800520a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 f8a6 	bl	8005354 <UART_Transmit_IT>
    return;
 8005208:	e00f      	b.n	800522a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005210:	2b00      	cmp	r3, #0
 8005212:	d00a      	beq.n	800522a <HAL_UART_IRQHandler+0x1f6>
 8005214:	69bb      	ldr	r3, [r7, #24]
 8005216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800521a:	2b00      	cmp	r3, #0
 800521c:	d005      	beq.n	800522a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f000 f8ee 	bl	8005400 <UART_EndTransmit_IT>
    return;
 8005224:	bf00      	nop
 8005226:	e000      	b.n	800522a <HAL_UART_IRQHandler+0x1f6>
    return;
 8005228:	bf00      	nop
  }
}
 800522a:	3720      	adds	r7, #32
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}
 8005230:	0800532d 	.word	0x0800532d

08005234 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005234:	b480      	push	{r7}
 8005236:	b083      	sub	sp, #12
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800523c:	bf00      	nop
 800523e:	370c      	adds	r7, #12
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr

08005248 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005248:	b480      	push	{r7}
 800524a:	b083      	sub	sp, #12
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005250:	bf00      	nop
 8005252:	370c      	adds	r7, #12
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr

0800525c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b084      	sub	sp, #16
 8005260:	af00      	add	r7, sp, #0
 8005262:	60f8      	str	r0, [r7, #12]
 8005264:	60b9      	str	r1, [r7, #8]
 8005266:	603b      	str	r3, [r7, #0]
 8005268:	4613      	mov	r3, r2
 800526a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800526c:	e02c      	b.n	80052c8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800526e:	69bb      	ldr	r3, [r7, #24]
 8005270:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005274:	d028      	beq.n	80052c8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005276:	69bb      	ldr	r3, [r7, #24]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d007      	beq.n	800528c <UART_WaitOnFlagUntilTimeout+0x30>
 800527c:	f7fb fef0 	bl	8001060 <HAL_GetTick>
 8005280:	4602      	mov	r2, r0
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	69ba      	ldr	r2, [r7, #24]
 8005288:	429a      	cmp	r2, r3
 800528a:	d21d      	bcs.n	80052c8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	68da      	ldr	r2, [r3, #12]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800529a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	695a      	ldr	r2, [r3, #20]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f022 0201 	bic.w	r2, r2, #1
 80052aa:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2220      	movs	r2, #32
 80052b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2220      	movs	r2, #32
 80052b8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2200      	movs	r2, #0
 80052c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80052c4:	2303      	movs	r3, #3
 80052c6:	e00f      	b.n	80052e8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	4013      	ands	r3, r2
 80052d2:	68ba      	ldr	r2, [r7, #8]
 80052d4:	429a      	cmp	r2, r3
 80052d6:	bf0c      	ite	eq
 80052d8:	2301      	moveq	r3, #1
 80052da:	2300      	movne	r3, #0
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	461a      	mov	r2, r3
 80052e0:	79fb      	ldrb	r3, [r7, #7]
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d0c3      	beq.n	800526e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80052e6:	2300      	movs	r3, #0
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3710      	adds	r7, #16
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}

080052f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b083      	sub	sp, #12
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	68da      	ldr	r2, [r3, #12]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005306:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	695a      	ldr	r2, [r3, #20]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f022 0201 	bic.w	r2, r2, #1
 8005316:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2220      	movs	r2, #32
 800531c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005320:	bf00      	nop
 8005322:	370c      	adds	r7, #12
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr

0800532c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b084      	sub	sp, #16
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005338:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2200      	movs	r2, #0
 800533e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2200      	movs	r2, #0
 8005344:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005346:	68f8      	ldr	r0, [r7, #12]
 8005348:	f7ff ff7e 	bl	8005248 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800534c:	bf00      	nop
 800534e:	3710      	adds	r7, #16
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}

08005354 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005354:	b480      	push	{r7}
 8005356:	b085      	sub	sp, #20
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005362:	b2db      	uxtb	r3, r3
 8005364:	2b21      	cmp	r3, #33	; 0x21
 8005366:	d144      	bne.n	80053f2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005370:	d11a      	bne.n	80053a8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a1b      	ldr	r3, [r3, #32]
 8005376:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	881b      	ldrh	r3, [r3, #0]
 800537c:	461a      	mov	r2, r3
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005386:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	691b      	ldr	r3, [r3, #16]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d105      	bne.n	800539c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6a1b      	ldr	r3, [r3, #32]
 8005394:	1c9a      	adds	r2, r3, #2
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	621a      	str	r2, [r3, #32]
 800539a:	e00e      	b.n	80053ba <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6a1b      	ldr	r3, [r3, #32]
 80053a0:	1c5a      	adds	r2, r3, #1
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	621a      	str	r2, [r3, #32]
 80053a6:	e008      	b.n	80053ba <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6a1b      	ldr	r3, [r3, #32]
 80053ac:	1c59      	adds	r1, r3, #1
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	6211      	str	r1, [r2, #32]
 80053b2:	781a      	ldrb	r2, [r3, #0]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80053be:	b29b      	uxth	r3, r3
 80053c0:	3b01      	subs	r3, #1
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	4619      	mov	r1, r3
 80053c8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d10f      	bne.n	80053ee <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	68da      	ldr	r2, [r3, #12]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053dc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	68da      	ldr	r2, [r3, #12]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053ec:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80053ee:	2300      	movs	r3, #0
 80053f0:	e000      	b.n	80053f4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80053f2:	2302      	movs	r3, #2
  }
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3714      	adds	r7, #20
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr

08005400 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b082      	sub	sp, #8
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	68da      	ldr	r2, [r3, #12]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005416:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2220      	movs	r2, #32
 800541c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f7ff ff07 	bl	8005234 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005426:	2300      	movs	r3, #0
}
 8005428:	4618      	mov	r0, r3
 800542a:	3708      	adds	r7, #8
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}

08005430 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b084      	sub	sp, #16
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800543e:	b2db      	uxtb	r3, r3
 8005440:	2b22      	cmp	r3, #34	; 0x22
 8005442:	d171      	bne.n	8005528 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800544c:	d123      	bne.n	8005496 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005452:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	691b      	ldr	r3, [r3, #16]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d10e      	bne.n	800547a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	b29b      	uxth	r3, r3
 8005464:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005468:	b29a      	uxth	r2, r3
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005472:	1c9a      	adds	r2, r3, #2
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	629a      	str	r2, [r3, #40]	; 0x28
 8005478:	e029      	b.n	80054ce <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	b29b      	uxth	r3, r3
 8005482:	b2db      	uxtb	r3, r3
 8005484:	b29a      	uxth	r2, r3
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800548e:	1c5a      	adds	r2, r3, #1
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	629a      	str	r2, [r3, #40]	; 0x28
 8005494:	e01b      	b.n	80054ce <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	691b      	ldr	r3, [r3, #16]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d10a      	bne.n	80054b4 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	6858      	ldr	r0, [r3, #4]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054a8:	1c59      	adds	r1, r3, #1
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	6291      	str	r1, [r2, #40]	; 0x28
 80054ae:	b2c2      	uxtb	r2, r0
 80054b0:	701a      	strb	r2, [r3, #0]
 80054b2:	e00c      	b.n	80054ce <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	b2da      	uxtb	r2, r3
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054c0:	1c58      	adds	r0, r3, #1
 80054c2:	6879      	ldr	r1, [r7, #4]
 80054c4:	6288      	str	r0, [r1, #40]	; 0x28
 80054c6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80054ca:	b2d2      	uxtb	r2, r2
 80054cc:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	3b01      	subs	r3, #1
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	4619      	mov	r1, r3
 80054dc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d120      	bne.n	8005524 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	68da      	ldr	r2, [r3, #12]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f022 0220 	bic.w	r2, r2, #32
 80054f0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	68da      	ldr	r2, [r3, #12]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005500:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	695a      	ldr	r2, [r3, #20]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f022 0201 	bic.w	r2, r2, #1
 8005510:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2220      	movs	r2, #32
 8005516:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f7fb fad6 	bl	8000acc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005520:	2300      	movs	r3, #0
 8005522:	e002      	b.n	800552a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005524:	2300      	movs	r3, #0
 8005526:	e000      	b.n	800552a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005528:	2302      	movs	r3, #2
  }
}
 800552a:	4618      	mov	r0, r3
 800552c:	3710      	adds	r7, #16
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
	...

08005534 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005538:	b085      	sub	sp, #20
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	691b      	ldr	r3, [r3, #16]
 8005544:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	68da      	ldr	r2, [r3, #12]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	430a      	orrs	r2, r1
 8005552:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	689a      	ldr	r2, [r3, #8]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	691b      	ldr	r3, [r3, #16]
 800555c:	431a      	orrs	r2, r3
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	695b      	ldr	r3, [r3, #20]
 8005562:	431a      	orrs	r2, r3
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	69db      	ldr	r3, [r3, #28]
 8005568:	4313      	orrs	r3, r2
 800556a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	68db      	ldr	r3, [r3, #12]
 8005572:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005576:	f023 030c 	bic.w	r3, r3, #12
 800557a:	687a      	ldr	r2, [r7, #4]
 800557c:	6812      	ldr	r2, [r2, #0]
 800557e:	68f9      	ldr	r1, [r7, #12]
 8005580:	430b      	orrs	r3, r1
 8005582:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	695b      	ldr	r3, [r3, #20]
 800558a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	699a      	ldr	r2, [r3, #24]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	430a      	orrs	r2, r1
 8005598:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	69db      	ldr	r3, [r3, #28]
 800559e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055a2:	f040 818b 	bne.w	80058bc <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4ac1      	ldr	r2, [pc, #772]	; (80058b0 <UART_SetConfig+0x37c>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d005      	beq.n	80055bc <UART_SetConfig+0x88>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4abf      	ldr	r2, [pc, #764]	; (80058b4 <UART_SetConfig+0x380>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	f040 80bd 	bne.w	8005736 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80055bc:	f7fe ff98 	bl	80044f0 <HAL_RCC_GetPCLK2Freq>
 80055c0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	461d      	mov	r5, r3
 80055c6:	f04f 0600 	mov.w	r6, #0
 80055ca:	46a8      	mov	r8, r5
 80055cc:	46b1      	mov	r9, r6
 80055ce:	eb18 0308 	adds.w	r3, r8, r8
 80055d2:	eb49 0409 	adc.w	r4, r9, r9
 80055d6:	4698      	mov	r8, r3
 80055d8:	46a1      	mov	r9, r4
 80055da:	eb18 0805 	adds.w	r8, r8, r5
 80055de:	eb49 0906 	adc.w	r9, r9, r6
 80055e2:	f04f 0100 	mov.w	r1, #0
 80055e6:	f04f 0200 	mov.w	r2, #0
 80055ea:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80055ee:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80055f2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80055f6:	4688      	mov	r8, r1
 80055f8:	4691      	mov	r9, r2
 80055fa:	eb18 0005 	adds.w	r0, r8, r5
 80055fe:	eb49 0106 	adc.w	r1, r9, r6
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	461d      	mov	r5, r3
 8005608:	f04f 0600 	mov.w	r6, #0
 800560c:	196b      	adds	r3, r5, r5
 800560e:	eb46 0406 	adc.w	r4, r6, r6
 8005612:	461a      	mov	r2, r3
 8005614:	4623      	mov	r3, r4
 8005616:	f7fa fdd7 	bl	80001c8 <__aeabi_uldivmod>
 800561a:	4603      	mov	r3, r0
 800561c:	460c      	mov	r4, r1
 800561e:	461a      	mov	r2, r3
 8005620:	4ba5      	ldr	r3, [pc, #660]	; (80058b8 <UART_SetConfig+0x384>)
 8005622:	fba3 2302 	umull	r2, r3, r3, r2
 8005626:	095b      	lsrs	r3, r3, #5
 8005628:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	461d      	mov	r5, r3
 8005630:	f04f 0600 	mov.w	r6, #0
 8005634:	46a9      	mov	r9, r5
 8005636:	46b2      	mov	sl, r6
 8005638:	eb19 0309 	adds.w	r3, r9, r9
 800563c:	eb4a 040a 	adc.w	r4, sl, sl
 8005640:	4699      	mov	r9, r3
 8005642:	46a2      	mov	sl, r4
 8005644:	eb19 0905 	adds.w	r9, r9, r5
 8005648:	eb4a 0a06 	adc.w	sl, sl, r6
 800564c:	f04f 0100 	mov.w	r1, #0
 8005650:	f04f 0200 	mov.w	r2, #0
 8005654:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005658:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800565c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005660:	4689      	mov	r9, r1
 8005662:	4692      	mov	sl, r2
 8005664:	eb19 0005 	adds.w	r0, r9, r5
 8005668:	eb4a 0106 	adc.w	r1, sl, r6
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	461d      	mov	r5, r3
 8005672:	f04f 0600 	mov.w	r6, #0
 8005676:	196b      	adds	r3, r5, r5
 8005678:	eb46 0406 	adc.w	r4, r6, r6
 800567c:	461a      	mov	r2, r3
 800567e:	4623      	mov	r3, r4
 8005680:	f7fa fda2 	bl	80001c8 <__aeabi_uldivmod>
 8005684:	4603      	mov	r3, r0
 8005686:	460c      	mov	r4, r1
 8005688:	461a      	mov	r2, r3
 800568a:	4b8b      	ldr	r3, [pc, #556]	; (80058b8 <UART_SetConfig+0x384>)
 800568c:	fba3 1302 	umull	r1, r3, r3, r2
 8005690:	095b      	lsrs	r3, r3, #5
 8005692:	2164      	movs	r1, #100	; 0x64
 8005694:	fb01 f303 	mul.w	r3, r1, r3
 8005698:	1ad3      	subs	r3, r2, r3
 800569a:	00db      	lsls	r3, r3, #3
 800569c:	3332      	adds	r3, #50	; 0x32
 800569e:	4a86      	ldr	r2, [pc, #536]	; (80058b8 <UART_SetConfig+0x384>)
 80056a0:	fba2 2303 	umull	r2, r3, r2, r3
 80056a4:	095b      	lsrs	r3, r3, #5
 80056a6:	005b      	lsls	r3, r3, #1
 80056a8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80056ac:	4498      	add	r8, r3
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	461d      	mov	r5, r3
 80056b2:	f04f 0600 	mov.w	r6, #0
 80056b6:	46a9      	mov	r9, r5
 80056b8:	46b2      	mov	sl, r6
 80056ba:	eb19 0309 	adds.w	r3, r9, r9
 80056be:	eb4a 040a 	adc.w	r4, sl, sl
 80056c2:	4699      	mov	r9, r3
 80056c4:	46a2      	mov	sl, r4
 80056c6:	eb19 0905 	adds.w	r9, r9, r5
 80056ca:	eb4a 0a06 	adc.w	sl, sl, r6
 80056ce:	f04f 0100 	mov.w	r1, #0
 80056d2:	f04f 0200 	mov.w	r2, #0
 80056d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80056da:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80056de:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80056e2:	4689      	mov	r9, r1
 80056e4:	4692      	mov	sl, r2
 80056e6:	eb19 0005 	adds.w	r0, r9, r5
 80056ea:	eb4a 0106 	adc.w	r1, sl, r6
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	461d      	mov	r5, r3
 80056f4:	f04f 0600 	mov.w	r6, #0
 80056f8:	196b      	adds	r3, r5, r5
 80056fa:	eb46 0406 	adc.w	r4, r6, r6
 80056fe:	461a      	mov	r2, r3
 8005700:	4623      	mov	r3, r4
 8005702:	f7fa fd61 	bl	80001c8 <__aeabi_uldivmod>
 8005706:	4603      	mov	r3, r0
 8005708:	460c      	mov	r4, r1
 800570a:	461a      	mov	r2, r3
 800570c:	4b6a      	ldr	r3, [pc, #424]	; (80058b8 <UART_SetConfig+0x384>)
 800570e:	fba3 1302 	umull	r1, r3, r3, r2
 8005712:	095b      	lsrs	r3, r3, #5
 8005714:	2164      	movs	r1, #100	; 0x64
 8005716:	fb01 f303 	mul.w	r3, r1, r3
 800571a:	1ad3      	subs	r3, r2, r3
 800571c:	00db      	lsls	r3, r3, #3
 800571e:	3332      	adds	r3, #50	; 0x32
 8005720:	4a65      	ldr	r2, [pc, #404]	; (80058b8 <UART_SetConfig+0x384>)
 8005722:	fba2 2303 	umull	r2, r3, r2, r3
 8005726:	095b      	lsrs	r3, r3, #5
 8005728:	f003 0207 	and.w	r2, r3, #7
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4442      	add	r2, r8
 8005732:	609a      	str	r2, [r3, #8]
 8005734:	e26f      	b.n	8005c16 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005736:	f7fe fec7 	bl	80044c8 <HAL_RCC_GetPCLK1Freq>
 800573a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	461d      	mov	r5, r3
 8005740:	f04f 0600 	mov.w	r6, #0
 8005744:	46a8      	mov	r8, r5
 8005746:	46b1      	mov	r9, r6
 8005748:	eb18 0308 	adds.w	r3, r8, r8
 800574c:	eb49 0409 	adc.w	r4, r9, r9
 8005750:	4698      	mov	r8, r3
 8005752:	46a1      	mov	r9, r4
 8005754:	eb18 0805 	adds.w	r8, r8, r5
 8005758:	eb49 0906 	adc.w	r9, r9, r6
 800575c:	f04f 0100 	mov.w	r1, #0
 8005760:	f04f 0200 	mov.w	r2, #0
 8005764:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005768:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800576c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005770:	4688      	mov	r8, r1
 8005772:	4691      	mov	r9, r2
 8005774:	eb18 0005 	adds.w	r0, r8, r5
 8005778:	eb49 0106 	adc.w	r1, r9, r6
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	461d      	mov	r5, r3
 8005782:	f04f 0600 	mov.w	r6, #0
 8005786:	196b      	adds	r3, r5, r5
 8005788:	eb46 0406 	adc.w	r4, r6, r6
 800578c:	461a      	mov	r2, r3
 800578e:	4623      	mov	r3, r4
 8005790:	f7fa fd1a 	bl	80001c8 <__aeabi_uldivmod>
 8005794:	4603      	mov	r3, r0
 8005796:	460c      	mov	r4, r1
 8005798:	461a      	mov	r2, r3
 800579a:	4b47      	ldr	r3, [pc, #284]	; (80058b8 <UART_SetConfig+0x384>)
 800579c:	fba3 2302 	umull	r2, r3, r3, r2
 80057a0:	095b      	lsrs	r3, r3, #5
 80057a2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	461d      	mov	r5, r3
 80057aa:	f04f 0600 	mov.w	r6, #0
 80057ae:	46a9      	mov	r9, r5
 80057b0:	46b2      	mov	sl, r6
 80057b2:	eb19 0309 	adds.w	r3, r9, r9
 80057b6:	eb4a 040a 	adc.w	r4, sl, sl
 80057ba:	4699      	mov	r9, r3
 80057bc:	46a2      	mov	sl, r4
 80057be:	eb19 0905 	adds.w	r9, r9, r5
 80057c2:	eb4a 0a06 	adc.w	sl, sl, r6
 80057c6:	f04f 0100 	mov.w	r1, #0
 80057ca:	f04f 0200 	mov.w	r2, #0
 80057ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80057d2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80057d6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80057da:	4689      	mov	r9, r1
 80057dc:	4692      	mov	sl, r2
 80057de:	eb19 0005 	adds.w	r0, r9, r5
 80057e2:	eb4a 0106 	adc.w	r1, sl, r6
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	461d      	mov	r5, r3
 80057ec:	f04f 0600 	mov.w	r6, #0
 80057f0:	196b      	adds	r3, r5, r5
 80057f2:	eb46 0406 	adc.w	r4, r6, r6
 80057f6:	461a      	mov	r2, r3
 80057f8:	4623      	mov	r3, r4
 80057fa:	f7fa fce5 	bl	80001c8 <__aeabi_uldivmod>
 80057fe:	4603      	mov	r3, r0
 8005800:	460c      	mov	r4, r1
 8005802:	461a      	mov	r2, r3
 8005804:	4b2c      	ldr	r3, [pc, #176]	; (80058b8 <UART_SetConfig+0x384>)
 8005806:	fba3 1302 	umull	r1, r3, r3, r2
 800580a:	095b      	lsrs	r3, r3, #5
 800580c:	2164      	movs	r1, #100	; 0x64
 800580e:	fb01 f303 	mul.w	r3, r1, r3
 8005812:	1ad3      	subs	r3, r2, r3
 8005814:	00db      	lsls	r3, r3, #3
 8005816:	3332      	adds	r3, #50	; 0x32
 8005818:	4a27      	ldr	r2, [pc, #156]	; (80058b8 <UART_SetConfig+0x384>)
 800581a:	fba2 2303 	umull	r2, r3, r2, r3
 800581e:	095b      	lsrs	r3, r3, #5
 8005820:	005b      	lsls	r3, r3, #1
 8005822:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005826:	4498      	add	r8, r3
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	461d      	mov	r5, r3
 800582c:	f04f 0600 	mov.w	r6, #0
 8005830:	46a9      	mov	r9, r5
 8005832:	46b2      	mov	sl, r6
 8005834:	eb19 0309 	adds.w	r3, r9, r9
 8005838:	eb4a 040a 	adc.w	r4, sl, sl
 800583c:	4699      	mov	r9, r3
 800583e:	46a2      	mov	sl, r4
 8005840:	eb19 0905 	adds.w	r9, r9, r5
 8005844:	eb4a 0a06 	adc.w	sl, sl, r6
 8005848:	f04f 0100 	mov.w	r1, #0
 800584c:	f04f 0200 	mov.w	r2, #0
 8005850:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005854:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005858:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800585c:	4689      	mov	r9, r1
 800585e:	4692      	mov	sl, r2
 8005860:	eb19 0005 	adds.w	r0, r9, r5
 8005864:	eb4a 0106 	adc.w	r1, sl, r6
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	461d      	mov	r5, r3
 800586e:	f04f 0600 	mov.w	r6, #0
 8005872:	196b      	adds	r3, r5, r5
 8005874:	eb46 0406 	adc.w	r4, r6, r6
 8005878:	461a      	mov	r2, r3
 800587a:	4623      	mov	r3, r4
 800587c:	f7fa fca4 	bl	80001c8 <__aeabi_uldivmod>
 8005880:	4603      	mov	r3, r0
 8005882:	460c      	mov	r4, r1
 8005884:	461a      	mov	r2, r3
 8005886:	4b0c      	ldr	r3, [pc, #48]	; (80058b8 <UART_SetConfig+0x384>)
 8005888:	fba3 1302 	umull	r1, r3, r3, r2
 800588c:	095b      	lsrs	r3, r3, #5
 800588e:	2164      	movs	r1, #100	; 0x64
 8005890:	fb01 f303 	mul.w	r3, r1, r3
 8005894:	1ad3      	subs	r3, r2, r3
 8005896:	00db      	lsls	r3, r3, #3
 8005898:	3332      	adds	r3, #50	; 0x32
 800589a:	4a07      	ldr	r2, [pc, #28]	; (80058b8 <UART_SetConfig+0x384>)
 800589c:	fba2 2303 	umull	r2, r3, r2, r3
 80058a0:	095b      	lsrs	r3, r3, #5
 80058a2:	f003 0207 	and.w	r2, r3, #7
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4442      	add	r2, r8
 80058ac:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80058ae:	e1b2      	b.n	8005c16 <UART_SetConfig+0x6e2>
 80058b0:	40011000 	.word	0x40011000
 80058b4:	40011400 	.word	0x40011400
 80058b8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4ad7      	ldr	r2, [pc, #860]	; (8005c20 <UART_SetConfig+0x6ec>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d005      	beq.n	80058d2 <UART_SetConfig+0x39e>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4ad6      	ldr	r2, [pc, #856]	; (8005c24 <UART_SetConfig+0x6f0>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	f040 80d1 	bne.w	8005a74 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80058d2:	f7fe fe0d 	bl	80044f0 <HAL_RCC_GetPCLK2Freq>
 80058d6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	469a      	mov	sl, r3
 80058dc:	f04f 0b00 	mov.w	fp, #0
 80058e0:	46d0      	mov	r8, sl
 80058e2:	46d9      	mov	r9, fp
 80058e4:	eb18 0308 	adds.w	r3, r8, r8
 80058e8:	eb49 0409 	adc.w	r4, r9, r9
 80058ec:	4698      	mov	r8, r3
 80058ee:	46a1      	mov	r9, r4
 80058f0:	eb18 080a 	adds.w	r8, r8, sl
 80058f4:	eb49 090b 	adc.w	r9, r9, fp
 80058f8:	f04f 0100 	mov.w	r1, #0
 80058fc:	f04f 0200 	mov.w	r2, #0
 8005900:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005904:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005908:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800590c:	4688      	mov	r8, r1
 800590e:	4691      	mov	r9, r2
 8005910:	eb1a 0508 	adds.w	r5, sl, r8
 8005914:	eb4b 0609 	adc.w	r6, fp, r9
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	4619      	mov	r1, r3
 800591e:	f04f 0200 	mov.w	r2, #0
 8005922:	f04f 0300 	mov.w	r3, #0
 8005926:	f04f 0400 	mov.w	r4, #0
 800592a:	0094      	lsls	r4, r2, #2
 800592c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005930:	008b      	lsls	r3, r1, #2
 8005932:	461a      	mov	r2, r3
 8005934:	4623      	mov	r3, r4
 8005936:	4628      	mov	r0, r5
 8005938:	4631      	mov	r1, r6
 800593a:	f7fa fc45 	bl	80001c8 <__aeabi_uldivmod>
 800593e:	4603      	mov	r3, r0
 8005940:	460c      	mov	r4, r1
 8005942:	461a      	mov	r2, r3
 8005944:	4bb8      	ldr	r3, [pc, #736]	; (8005c28 <UART_SetConfig+0x6f4>)
 8005946:	fba3 2302 	umull	r2, r3, r3, r2
 800594a:	095b      	lsrs	r3, r3, #5
 800594c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	469b      	mov	fp, r3
 8005954:	f04f 0c00 	mov.w	ip, #0
 8005958:	46d9      	mov	r9, fp
 800595a:	46e2      	mov	sl, ip
 800595c:	eb19 0309 	adds.w	r3, r9, r9
 8005960:	eb4a 040a 	adc.w	r4, sl, sl
 8005964:	4699      	mov	r9, r3
 8005966:	46a2      	mov	sl, r4
 8005968:	eb19 090b 	adds.w	r9, r9, fp
 800596c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005970:	f04f 0100 	mov.w	r1, #0
 8005974:	f04f 0200 	mov.w	r2, #0
 8005978:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800597c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005980:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005984:	4689      	mov	r9, r1
 8005986:	4692      	mov	sl, r2
 8005988:	eb1b 0509 	adds.w	r5, fp, r9
 800598c:	eb4c 060a 	adc.w	r6, ip, sl
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	4619      	mov	r1, r3
 8005996:	f04f 0200 	mov.w	r2, #0
 800599a:	f04f 0300 	mov.w	r3, #0
 800599e:	f04f 0400 	mov.w	r4, #0
 80059a2:	0094      	lsls	r4, r2, #2
 80059a4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80059a8:	008b      	lsls	r3, r1, #2
 80059aa:	461a      	mov	r2, r3
 80059ac:	4623      	mov	r3, r4
 80059ae:	4628      	mov	r0, r5
 80059b0:	4631      	mov	r1, r6
 80059b2:	f7fa fc09 	bl	80001c8 <__aeabi_uldivmod>
 80059b6:	4603      	mov	r3, r0
 80059b8:	460c      	mov	r4, r1
 80059ba:	461a      	mov	r2, r3
 80059bc:	4b9a      	ldr	r3, [pc, #616]	; (8005c28 <UART_SetConfig+0x6f4>)
 80059be:	fba3 1302 	umull	r1, r3, r3, r2
 80059c2:	095b      	lsrs	r3, r3, #5
 80059c4:	2164      	movs	r1, #100	; 0x64
 80059c6:	fb01 f303 	mul.w	r3, r1, r3
 80059ca:	1ad3      	subs	r3, r2, r3
 80059cc:	011b      	lsls	r3, r3, #4
 80059ce:	3332      	adds	r3, #50	; 0x32
 80059d0:	4a95      	ldr	r2, [pc, #596]	; (8005c28 <UART_SetConfig+0x6f4>)
 80059d2:	fba2 2303 	umull	r2, r3, r2, r3
 80059d6:	095b      	lsrs	r3, r3, #5
 80059d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059dc:	4498      	add	r8, r3
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	469b      	mov	fp, r3
 80059e2:	f04f 0c00 	mov.w	ip, #0
 80059e6:	46d9      	mov	r9, fp
 80059e8:	46e2      	mov	sl, ip
 80059ea:	eb19 0309 	adds.w	r3, r9, r9
 80059ee:	eb4a 040a 	adc.w	r4, sl, sl
 80059f2:	4699      	mov	r9, r3
 80059f4:	46a2      	mov	sl, r4
 80059f6:	eb19 090b 	adds.w	r9, r9, fp
 80059fa:	eb4a 0a0c 	adc.w	sl, sl, ip
 80059fe:	f04f 0100 	mov.w	r1, #0
 8005a02:	f04f 0200 	mov.w	r2, #0
 8005a06:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a0a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005a0e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005a12:	4689      	mov	r9, r1
 8005a14:	4692      	mov	sl, r2
 8005a16:	eb1b 0509 	adds.w	r5, fp, r9
 8005a1a:	eb4c 060a 	adc.w	r6, ip, sl
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	4619      	mov	r1, r3
 8005a24:	f04f 0200 	mov.w	r2, #0
 8005a28:	f04f 0300 	mov.w	r3, #0
 8005a2c:	f04f 0400 	mov.w	r4, #0
 8005a30:	0094      	lsls	r4, r2, #2
 8005a32:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005a36:	008b      	lsls	r3, r1, #2
 8005a38:	461a      	mov	r2, r3
 8005a3a:	4623      	mov	r3, r4
 8005a3c:	4628      	mov	r0, r5
 8005a3e:	4631      	mov	r1, r6
 8005a40:	f7fa fbc2 	bl	80001c8 <__aeabi_uldivmod>
 8005a44:	4603      	mov	r3, r0
 8005a46:	460c      	mov	r4, r1
 8005a48:	461a      	mov	r2, r3
 8005a4a:	4b77      	ldr	r3, [pc, #476]	; (8005c28 <UART_SetConfig+0x6f4>)
 8005a4c:	fba3 1302 	umull	r1, r3, r3, r2
 8005a50:	095b      	lsrs	r3, r3, #5
 8005a52:	2164      	movs	r1, #100	; 0x64
 8005a54:	fb01 f303 	mul.w	r3, r1, r3
 8005a58:	1ad3      	subs	r3, r2, r3
 8005a5a:	011b      	lsls	r3, r3, #4
 8005a5c:	3332      	adds	r3, #50	; 0x32
 8005a5e:	4a72      	ldr	r2, [pc, #456]	; (8005c28 <UART_SetConfig+0x6f4>)
 8005a60:	fba2 2303 	umull	r2, r3, r2, r3
 8005a64:	095b      	lsrs	r3, r3, #5
 8005a66:	f003 020f 	and.w	r2, r3, #15
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4442      	add	r2, r8
 8005a70:	609a      	str	r2, [r3, #8]
 8005a72:	e0d0      	b.n	8005c16 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005a74:	f7fe fd28 	bl	80044c8 <HAL_RCC_GetPCLK1Freq>
 8005a78:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	469a      	mov	sl, r3
 8005a7e:	f04f 0b00 	mov.w	fp, #0
 8005a82:	46d0      	mov	r8, sl
 8005a84:	46d9      	mov	r9, fp
 8005a86:	eb18 0308 	adds.w	r3, r8, r8
 8005a8a:	eb49 0409 	adc.w	r4, r9, r9
 8005a8e:	4698      	mov	r8, r3
 8005a90:	46a1      	mov	r9, r4
 8005a92:	eb18 080a 	adds.w	r8, r8, sl
 8005a96:	eb49 090b 	adc.w	r9, r9, fp
 8005a9a:	f04f 0100 	mov.w	r1, #0
 8005a9e:	f04f 0200 	mov.w	r2, #0
 8005aa2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005aa6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005aaa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005aae:	4688      	mov	r8, r1
 8005ab0:	4691      	mov	r9, r2
 8005ab2:	eb1a 0508 	adds.w	r5, sl, r8
 8005ab6:	eb4b 0609 	adc.w	r6, fp, r9
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	4619      	mov	r1, r3
 8005ac0:	f04f 0200 	mov.w	r2, #0
 8005ac4:	f04f 0300 	mov.w	r3, #0
 8005ac8:	f04f 0400 	mov.w	r4, #0
 8005acc:	0094      	lsls	r4, r2, #2
 8005ace:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005ad2:	008b      	lsls	r3, r1, #2
 8005ad4:	461a      	mov	r2, r3
 8005ad6:	4623      	mov	r3, r4
 8005ad8:	4628      	mov	r0, r5
 8005ada:	4631      	mov	r1, r6
 8005adc:	f7fa fb74 	bl	80001c8 <__aeabi_uldivmod>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	460c      	mov	r4, r1
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	4b50      	ldr	r3, [pc, #320]	; (8005c28 <UART_SetConfig+0x6f4>)
 8005ae8:	fba3 2302 	umull	r2, r3, r3, r2
 8005aec:	095b      	lsrs	r3, r3, #5
 8005aee:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	469b      	mov	fp, r3
 8005af6:	f04f 0c00 	mov.w	ip, #0
 8005afa:	46d9      	mov	r9, fp
 8005afc:	46e2      	mov	sl, ip
 8005afe:	eb19 0309 	adds.w	r3, r9, r9
 8005b02:	eb4a 040a 	adc.w	r4, sl, sl
 8005b06:	4699      	mov	r9, r3
 8005b08:	46a2      	mov	sl, r4
 8005b0a:	eb19 090b 	adds.w	r9, r9, fp
 8005b0e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005b12:	f04f 0100 	mov.w	r1, #0
 8005b16:	f04f 0200 	mov.w	r2, #0
 8005b1a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b1e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005b22:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005b26:	4689      	mov	r9, r1
 8005b28:	4692      	mov	sl, r2
 8005b2a:	eb1b 0509 	adds.w	r5, fp, r9
 8005b2e:	eb4c 060a 	adc.w	r6, ip, sl
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	4619      	mov	r1, r3
 8005b38:	f04f 0200 	mov.w	r2, #0
 8005b3c:	f04f 0300 	mov.w	r3, #0
 8005b40:	f04f 0400 	mov.w	r4, #0
 8005b44:	0094      	lsls	r4, r2, #2
 8005b46:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005b4a:	008b      	lsls	r3, r1, #2
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	4623      	mov	r3, r4
 8005b50:	4628      	mov	r0, r5
 8005b52:	4631      	mov	r1, r6
 8005b54:	f7fa fb38 	bl	80001c8 <__aeabi_uldivmod>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	460c      	mov	r4, r1
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	4b32      	ldr	r3, [pc, #200]	; (8005c28 <UART_SetConfig+0x6f4>)
 8005b60:	fba3 1302 	umull	r1, r3, r3, r2
 8005b64:	095b      	lsrs	r3, r3, #5
 8005b66:	2164      	movs	r1, #100	; 0x64
 8005b68:	fb01 f303 	mul.w	r3, r1, r3
 8005b6c:	1ad3      	subs	r3, r2, r3
 8005b6e:	011b      	lsls	r3, r3, #4
 8005b70:	3332      	adds	r3, #50	; 0x32
 8005b72:	4a2d      	ldr	r2, [pc, #180]	; (8005c28 <UART_SetConfig+0x6f4>)
 8005b74:	fba2 2303 	umull	r2, r3, r2, r3
 8005b78:	095b      	lsrs	r3, r3, #5
 8005b7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b7e:	4498      	add	r8, r3
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	469b      	mov	fp, r3
 8005b84:	f04f 0c00 	mov.w	ip, #0
 8005b88:	46d9      	mov	r9, fp
 8005b8a:	46e2      	mov	sl, ip
 8005b8c:	eb19 0309 	adds.w	r3, r9, r9
 8005b90:	eb4a 040a 	adc.w	r4, sl, sl
 8005b94:	4699      	mov	r9, r3
 8005b96:	46a2      	mov	sl, r4
 8005b98:	eb19 090b 	adds.w	r9, r9, fp
 8005b9c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005ba0:	f04f 0100 	mov.w	r1, #0
 8005ba4:	f04f 0200 	mov.w	r2, #0
 8005ba8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005bac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005bb0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005bb4:	4689      	mov	r9, r1
 8005bb6:	4692      	mov	sl, r2
 8005bb8:	eb1b 0509 	adds.w	r5, fp, r9
 8005bbc:	eb4c 060a 	adc.w	r6, ip, sl
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	4619      	mov	r1, r3
 8005bc6:	f04f 0200 	mov.w	r2, #0
 8005bca:	f04f 0300 	mov.w	r3, #0
 8005bce:	f04f 0400 	mov.w	r4, #0
 8005bd2:	0094      	lsls	r4, r2, #2
 8005bd4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005bd8:	008b      	lsls	r3, r1, #2
 8005bda:	461a      	mov	r2, r3
 8005bdc:	4623      	mov	r3, r4
 8005bde:	4628      	mov	r0, r5
 8005be0:	4631      	mov	r1, r6
 8005be2:	f7fa faf1 	bl	80001c8 <__aeabi_uldivmod>
 8005be6:	4603      	mov	r3, r0
 8005be8:	460c      	mov	r4, r1
 8005bea:	461a      	mov	r2, r3
 8005bec:	4b0e      	ldr	r3, [pc, #56]	; (8005c28 <UART_SetConfig+0x6f4>)
 8005bee:	fba3 1302 	umull	r1, r3, r3, r2
 8005bf2:	095b      	lsrs	r3, r3, #5
 8005bf4:	2164      	movs	r1, #100	; 0x64
 8005bf6:	fb01 f303 	mul.w	r3, r1, r3
 8005bfa:	1ad3      	subs	r3, r2, r3
 8005bfc:	011b      	lsls	r3, r3, #4
 8005bfe:	3332      	adds	r3, #50	; 0x32
 8005c00:	4a09      	ldr	r2, [pc, #36]	; (8005c28 <UART_SetConfig+0x6f4>)
 8005c02:	fba2 2303 	umull	r2, r3, r2, r3
 8005c06:	095b      	lsrs	r3, r3, #5
 8005c08:	f003 020f 	and.w	r2, r3, #15
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4442      	add	r2, r8
 8005c12:	609a      	str	r2, [r3, #8]
}
 8005c14:	e7ff      	b.n	8005c16 <UART_SetConfig+0x6e2>
 8005c16:	bf00      	nop
 8005c18:	3714      	adds	r7, #20
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c20:	40011000 	.word	0x40011000
 8005c24:	40011400 	.word	0x40011400
 8005c28:	51eb851f 	.word	0x51eb851f

08005c2c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005c2c:	b084      	sub	sp, #16
 8005c2e:	b580      	push	{r7, lr}
 8005c30:	b084      	sub	sp, #16
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	6078      	str	r0, [r7, #4]
 8005c36:	f107 001c 	add.w	r0, r7, #28
 8005c3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d122      	bne.n	8005c8a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c48:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	68db      	ldr	r3, [r3, #12]
 8005c54:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005c58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	68db      	ldr	r3, [r3, #12]
 8005c64:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005c6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c6e:	2b01      	cmp	r3, #1
 8005c70:	d105      	bne.n	8005c7e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	68db      	ldr	r3, [r3, #12]
 8005c76:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f000 f94a 	bl	8005f18 <USB_CoreReset>
 8005c84:	4603      	mov	r3, r0
 8005c86:	73fb      	strb	r3, [r7, #15]
 8005c88:	e01a      	b.n	8005cc0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	68db      	ldr	r3, [r3, #12]
 8005c8e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f000 f93e 	bl	8005f18 <USB_CoreReset>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005ca0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d106      	bne.n	8005cb4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005caa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	639a      	str	r2, [r3, #56]	; 0x38
 8005cb2:	e005      	b.n	8005cc0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d10b      	bne.n	8005cde <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	f043 0206 	orr.w	r2, r3, #6
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	f043 0220 	orr.w	r2, r3, #32
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3710      	adds	r7, #16
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005cea:	b004      	add	sp, #16
 8005cec:	4770      	bx	lr

08005cee <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005cee:	b480      	push	{r7}
 8005cf0:	b083      	sub	sp, #12
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	f043 0201 	orr.w	r2, r3, #1
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005d02:	2300      	movs	r3, #0
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	370c      	adds	r7, #12
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr

08005d10 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b083      	sub	sp, #12
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	f023 0201 	bic.w	r2, r3, #1
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005d24:	2300      	movs	r3, #0
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	370c      	adds	r7, #12
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr

08005d32 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005d32:	b580      	push	{r7, lr}
 8005d34:	b082      	sub	sp, #8
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	6078      	str	r0, [r7, #4]
 8005d3a:	460b      	mov	r3, r1
 8005d3c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	68db      	ldr	r3, [r3, #12]
 8005d42:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005d4a:	78fb      	ldrb	r3, [r7, #3]
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d106      	bne.n	8005d5e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	68db      	ldr	r3, [r3, #12]
 8005d54:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	60da      	str	r2, [r3, #12]
 8005d5c:	e00b      	b.n	8005d76 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005d5e:	78fb      	ldrb	r3, [r7, #3]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d106      	bne.n	8005d72 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	60da      	str	r2, [r3, #12]
 8005d70:	e001      	b.n	8005d76 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005d72:	2301      	movs	r3, #1
 8005d74:	e003      	b.n	8005d7e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005d76:	2032      	movs	r0, #50	; 0x32
 8005d78:	f7fb f97e 	bl	8001078 <HAL_Delay>

  return HAL_OK;
 8005d7c:	2300      	movs	r3, #0
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3708      	adds	r7, #8
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}
	...

08005d88 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b085      	sub	sp, #20
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005d92:	2300      	movs	r3, #0
 8005d94:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	019b      	lsls	r3, r3, #6
 8005d9a:	f043 0220 	orr.w	r2, r3, #32
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	3301      	adds	r3, #1
 8005da6:	60fb      	str	r3, [r7, #12]
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	4a09      	ldr	r2, [pc, #36]	; (8005dd0 <USB_FlushTxFifo+0x48>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d901      	bls.n	8005db4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005db0:	2303      	movs	r3, #3
 8005db2:	e006      	b.n	8005dc2 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	691b      	ldr	r3, [r3, #16]
 8005db8:	f003 0320 	and.w	r3, r3, #32
 8005dbc:	2b20      	cmp	r3, #32
 8005dbe:	d0f0      	beq.n	8005da2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005dc0:	2300      	movs	r3, #0
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3714      	adds	r7, #20
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr
 8005dce:	bf00      	nop
 8005dd0:	00030d40 	.word	0x00030d40

08005dd4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b085      	sub	sp, #20
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2210      	movs	r2, #16
 8005de4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	3301      	adds	r3, #1
 8005dea:	60fb      	str	r3, [r7, #12]
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	4a09      	ldr	r2, [pc, #36]	; (8005e14 <USB_FlushRxFifo+0x40>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d901      	bls.n	8005df8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005df4:	2303      	movs	r3, #3
 8005df6:	e006      	b.n	8005e06 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	691b      	ldr	r3, [r3, #16]
 8005dfc:	f003 0310 	and.w	r3, r3, #16
 8005e00:	2b10      	cmp	r3, #16
 8005e02:	d0f0      	beq.n	8005de6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005e04:	2300      	movs	r3, #0
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3714      	adds	r7, #20
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e10:	4770      	bx	lr
 8005e12:	bf00      	nop
 8005e14:	00030d40 	.word	0x00030d40

08005e18 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b089      	sub	sp, #36	; 0x24
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	60f8      	str	r0, [r7, #12]
 8005e20:	60b9      	str	r1, [r7, #8]
 8005e22:	4611      	mov	r1, r2
 8005e24:	461a      	mov	r2, r3
 8005e26:	460b      	mov	r3, r1
 8005e28:	71fb      	strb	r3, [r7, #7]
 8005e2a:	4613      	mov	r3, r2
 8005e2c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005e36:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d11a      	bne.n	8005e74 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005e3e:	88bb      	ldrh	r3, [r7, #4]
 8005e40:	3303      	adds	r3, #3
 8005e42:	089b      	lsrs	r3, r3, #2
 8005e44:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005e46:	2300      	movs	r3, #0
 8005e48:	61bb      	str	r3, [r7, #24]
 8005e4a:	e00f      	b.n	8005e6c <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005e4c:	79fb      	ldrb	r3, [r7, #7]
 8005e4e:	031a      	lsls	r2, r3, #12
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	4413      	add	r3, r2
 8005e54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e58:	461a      	mov	r2, r3
 8005e5a:	69fb      	ldr	r3, [r7, #28]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005e60:	69fb      	ldr	r3, [r7, #28]
 8005e62:	3304      	adds	r3, #4
 8005e64:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005e66:	69bb      	ldr	r3, [r7, #24]
 8005e68:	3301      	adds	r3, #1
 8005e6a:	61bb      	str	r3, [r7, #24]
 8005e6c:	69ba      	ldr	r2, [r7, #24]
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d3eb      	bcc.n	8005e4c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005e74:	2300      	movs	r3, #0
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3724      	adds	r7, #36	; 0x24
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr

08005e82 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005e82:	b480      	push	{r7}
 8005e84:	b089      	sub	sp, #36	; 0x24
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	60f8      	str	r0, [r7, #12]
 8005e8a:	60b9      	str	r1, [r7, #8]
 8005e8c:	4613      	mov	r3, r2
 8005e8e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005e98:	88fb      	ldrh	r3, [r7, #6]
 8005e9a:	3303      	adds	r3, #3
 8005e9c:	089b      	lsrs	r3, r3, #2
 8005e9e:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	61bb      	str	r3, [r7, #24]
 8005ea4:	e00b      	b.n	8005ebe <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	69fb      	ldr	r3, [r7, #28]
 8005eb0:	601a      	str	r2, [r3, #0]
    pDest++;
 8005eb2:	69fb      	ldr	r3, [r7, #28]
 8005eb4:	3304      	adds	r3, #4
 8005eb6:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005eb8:	69bb      	ldr	r3, [r7, #24]
 8005eba:	3301      	adds	r3, #1
 8005ebc:	61bb      	str	r3, [r7, #24]
 8005ebe:	69ba      	ldr	r2, [r7, #24]
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d3ef      	bcc.n	8005ea6 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005ec6:	69fb      	ldr	r3, [r7, #28]
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3724      	adds	r7, #36	; 0x24
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr

08005ed4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b085      	sub	sp, #20
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	695b      	ldr	r3, [r3, #20]
 8005ee0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	699b      	ldr	r3, [r3, #24]
 8005ee6:	68fa      	ldr	r2, [r7, #12]
 8005ee8:	4013      	ands	r3, r2
 8005eea:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005eec:	68fb      	ldr	r3, [r7, #12]
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3714      	adds	r7, #20
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef8:	4770      	bx	lr

08005efa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005efa:	b480      	push	{r7}
 8005efc:	b083      	sub	sp, #12
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	695b      	ldr	r3, [r3, #20]
 8005f06:	f003 0301 	and.w	r3, r3, #1
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	370c      	adds	r7, #12
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr
	...

08005f18 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b085      	sub	sp, #20
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005f20:	2300      	movs	r3, #0
 8005f22:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	3301      	adds	r3, #1
 8005f28:	60fb      	str	r3, [r7, #12]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	4a13      	ldr	r2, [pc, #76]	; (8005f7c <USB_CoreReset+0x64>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d901      	bls.n	8005f36 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005f32:	2303      	movs	r3, #3
 8005f34:	e01b      	b.n	8005f6e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	691b      	ldr	r3, [r3, #16]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	daf2      	bge.n	8005f24 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	691b      	ldr	r3, [r3, #16]
 8005f46:	f043 0201 	orr.w	r2, r3, #1
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	3301      	adds	r3, #1
 8005f52:	60fb      	str	r3, [r7, #12]
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	4a09      	ldr	r2, [pc, #36]	; (8005f7c <USB_CoreReset+0x64>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d901      	bls.n	8005f60 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005f5c:	2303      	movs	r3, #3
 8005f5e:	e006      	b.n	8005f6e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	691b      	ldr	r3, [r3, #16]
 8005f64:	f003 0301 	and.w	r3, r3, #1
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d0f0      	beq.n	8005f4e <USB_CoreReset+0x36>

  return HAL_OK;
 8005f6c:	2300      	movs	r3, #0
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3714      	adds	r7, #20
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr
 8005f7a:	bf00      	nop
 8005f7c:	00030d40 	.word	0x00030d40

08005f80 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005f80:	b084      	sub	sp, #16
 8005f82:	b580      	push	{r7, lr}
 8005f84:	b084      	sub	sp, #16
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	6078      	str	r0, [r7, #4]
 8005f8a:	f107 001c 	add.w	r0, r7, #28
 8005f8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fa6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fb2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fbe:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d018      	beq.n	8006004 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d10a      	bne.n	8005fee <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	68ba      	ldr	r2, [r7, #8]
 8005fe2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005fe6:	f043 0304 	orr.w	r3, r3, #4
 8005fea:	6013      	str	r3, [r2, #0]
 8005fec:	e014      	b.n	8006018 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	68ba      	ldr	r2, [r7, #8]
 8005ff8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005ffc:	f023 0304 	bic.w	r3, r3, #4
 8006000:	6013      	str	r3, [r2, #0]
 8006002:	e009      	b.n	8006018 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	68ba      	ldr	r2, [r7, #8]
 800600e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006012:	f023 0304 	bic.w	r3, r3, #4
 8006016:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8006018:	2110      	movs	r1, #16
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f7ff feb4 	bl	8005d88 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f7ff fed7 	bl	8005dd4 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006026:	2300      	movs	r3, #0
 8006028:	60fb      	str	r3, [r7, #12]
 800602a:	e015      	b.n	8006058 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	015a      	lsls	r2, r3, #5
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	4413      	add	r3, r2
 8006034:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006038:	461a      	mov	r2, r3
 800603a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800603e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	015a      	lsls	r2, r3, #5
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	4413      	add	r3, r2
 8006048:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800604c:	461a      	mov	r2, r3
 800604e:	2300      	movs	r3, #0
 8006050:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	3301      	adds	r3, #1
 8006056:	60fb      	str	r3, [r7, #12]
 8006058:	6a3b      	ldr	r3, [r7, #32]
 800605a:	68fa      	ldr	r2, [r7, #12]
 800605c:	429a      	cmp	r2, r3
 800605e:	d3e5      	bcc.n	800602c <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8006060:	2101      	movs	r1, #1
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f000 f8ac 	bl	80061c0 <USB_DriveVbus>

  HAL_Delay(200U);
 8006068:	20c8      	movs	r0, #200	; 0xc8
 800606a:	f7fb f805 	bl	8001078 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2200      	movs	r2, #0
 8006072:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800607a:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006084:	2b00      	cmp	r3, #0
 8006086:	d00b      	beq.n	80060a0 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800608e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	4a14      	ldr	r2, [pc, #80]	; (80060e4 <USB_HostInit+0x164>)
 8006094:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	4a13      	ldr	r2, [pc, #76]	; (80060e8 <USB_HostInit+0x168>)
 800609a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800609e:	e009      	b.n	80060b4 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2280      	movs	r2, #128	; 0x80
 80060a4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	4a10      	ldr	r2, [pc, #64]	; (80060ec <USB_HostInit+0x16c>)
 80060aa:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	4a10      	ldr	r2, [pc, #64]	; (80060f0 <USB_HostInit+0x170>)
 80060b0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80060b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d105      	bne.n	80060c6 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	699b      	ldr	r3, [r3, #24]
 80060be:	f043 0210 	orr.w	r2, r3, #16
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	699a      	ldr	r2, [r3, #24]
 80060ca:	4b0a      	ldr	r3, [pc, #40]	; (80060f4 <USB_HostInit+0x174>)
 80060cc:	4313      	orrs	r3, r2
 80060ce:	687a      	ldr	r2, [r7, #4]
 80060d0:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80060d2:	2300      	movs	r3, #0
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3710      	adds	r7, #16
 80060d8:	46bd      	mov	sp, r7
 80060da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80060de:	b004      	add	sp, #16
 80060e0:	4770      	bx	lr
 80060e2:	bf00      	nop
 80060e4:	01000200 	.word	0x01000200
 80060e8:	00e00300 	.word	0x00e00300
 80060ec:	00600080 	.word	0x00600080
 80060f0:	004000e0 	.word	0x004000e0
 80060f4:	a3200008 	.word	0xa3200008

080060f8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b085      	sub	sp, #20
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	460b      	mov	r3, r1
 8006102:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	68fa      	ldr	r2, [r7, #12]
 8006112:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006116:	f023 0303 	bic.w	r3, r3, #3
 800611a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	78fb      	ldrb	r3, [r7, #3]
 8006126:	f003 0303 	and.w	r3, r3, #3
 800612a:	68f9      	ldr	r1, [r7, #12]
 800612c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006130:	4313      	orrs	r3, r2
 8006132:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006134:	78fb      	ldrb	r3, [r7, #3]
 8006136:	2b01      	cmp	r3, #1
 8006138:	d107      	bne.n	800614a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006140:	461a      	mov	r2, r3
 8006142:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006146:	6053      	str	r3, [r2, #4]
 8006148:	e009      	b.n	800615e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800614a:	78fb      	ldrb	r3, [r7, #3]
 800614c:	2b02      	cmp	r3, #2
 800614e:	d106      	bne.n	800615e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006156:	461a      	mov	r2, r3
 8006158:	f241 7370 	movw	r3, #6000	; 0x1770
 800615c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800615e:	2300      	movs	r3, #0
}
 8006160:	4618      	mov	r0, r3
 8006162:	3714      	adds	r7, #20
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr

0800616c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b084      	sub	sp, #16
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006178:	2300      	movs	r3, #0
 800617a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800618c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	68fa      	ldr	r2, [r7, #12]
 8006192:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006196:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800619a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800619c:	2064      	movs	r0, #100	; 0x64
 800619e:	f7fa ff6b 	bl	8001078 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	68fa      	ldr	r2, [r7, #12]
 80061a6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80061aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061ae:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80061b0:	200a      	movs	r0, #10
 80061b2:	f7fa ff61 	bl	8001078 <HAL_Delay>

  return HAL_OK;
 80061b6:	2300      	movs	r3, #0
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3710      	adds	r7, #16
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}

080061c0 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b085      	sub	sp, #20
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	460b      	mov	r3, r1
 80061ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80061d0:	2300      	movs	r3, #0
 80061d2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80061e4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d109      	bne.n	8006204 <USB_DriveVbus+0x44>
 80061f0:	78fb      	ldrb	r3, [r7, #3]
 80061f2:	2b01      	cmp	r3, #1
 80061f4:	d106      	bne.n	8006204 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	68fa      	ldr	r2, [r7, #12]
 80061fa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80061fe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006202:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800620a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800620e:	d109      	bne.n	8006224 <USB_DriveVbus+0x64>
 8006210:	78fb      	ldrb	r3, [r7, #3]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d106      	bne.n	8006224 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	68fa      	ldr	r2, [r7, #12]
 800621a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800621e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006222:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006224:	2300      	movs	r3, #0
}
 8006226:	4618      	mov	r0, r3
 8006228:	3714      	adds	r7, #20
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr

08006232 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006232:	b480      	push	{r7}
 8006234:	b085      	sub	sp, #20
 8006236:	af00      	add	r7, sp, #0
 8006238:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800623e:	2300      	movs	r3, #0
 8006240:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	0c5b      	lsrs	r3, r3, #17
 8006250:	f003 0303 	and.w	r3, r3, #3
}
 8006254:	4618      	mov	r0, r3
 8006256:	3714      	adds	r7, #20
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr

08006260 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006260:	b480      	push	{r7}
 8006262:	b085      	sub	sp, #20
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	b29b      	uxth	r3, r3
}
 8006276:	4618      	mov	r0, r3
 8006278:	3714      	adds	r7, #20
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr
	...

08006284 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8006284:	b480      	push	{r7}
 8006286:	b087      	sub	sp, #28
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	4608      	mov	r0, r1
 800628e:	4611      	mov	r1, r2
 8006290:	461a      	mov	r2, r3
 8006292:	4603      	mov	r3, r0
 8006294:	70fb      	strb	r3, [r7, #3]
 8006296:	460b      	mov	r3, r1
 8006298:	70bb      	strb	r3, [r7, #2]
 800629a:	4613      	mov	r3, r2
 800629c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800629e:	2300      	movs	r3, #0
 80062a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80062a6:	78fb      	ldrb	r3, [r7, #3]
 80062a8:	015a      	lsls	r2, r3, #5
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	4413      	add	r3, r2
 80062ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062b2:	461a      	mov	r2, r3
 80062b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80062b8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80062ba:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80062be:	2b03      	cmp	r3, #3
 80062c0:	d87e      	bhi.n	80063c0 <USB_HC_Init+0x13c>
 80062c2:	a201      	add	r2, pc, #4	; (adr r2, 80062c8 <USB_HC_Init+0x44>)
 80062c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062c8:	080062d9 	.word	0x080062d9
 80062cc:	08006383 	.word	0x08006383
 80062d0:	080062d9 	.word	0x080062d9
 80062d4:	08006345 	.word	0x08006345
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80062d8:	78fb      	ldrb	r3, [r7, #3]
 80062da:	015a      	lsls	r2, r3, #5
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	4413      	add	r3, r2
 80062e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062e4:	461a      	mov	r2, r3
 80062e6:	f240 439d 	movw	r3, #1181	; 0x49d
 80062ea:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80062ec:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	da10      	bge.n	8006316 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80062f4:	78fb      	ldrb	r3, [r7, #3]
 80062f6:	015a      	lsls	r2, r3, #5
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	4413      	add	r3, r2
 80062fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006300:	68db      	ldr	r3, [r3, #12]
 8006302:	78fa      	ldrb	r2, [r7, #3]
 8006304:	0151      	lsls	r1, r2, #5
 8006306:	68ba      	ldr	r2, [r7, #8]
 8006308:	440a      	add	r2, r1
 800630a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800630e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006312:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8006314:	e057      	b.n	80063c6 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800631a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800631e:	2b00      	cmp	r3, #0
 8006320:	d051      	beq.n	80063c6 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8006322:	78fb      	ldrb	r3, [r7, #3]
 8006324:	015a      	lsls	r2, r3, #5
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	4413      	add	r3, r2
 800632a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800632e:	68db      	ldr	r3, [r3, #12]
 8006330:	78fa      	ldrb	r2, [r7, #3]
 8006332:	0151      	lsls	r1, r2, #5
 8006334:	68ba      	ldr	r2, [r7, #8]
 8006336:	440a      	add	r2, r1
 8006338:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800633c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006340:	60d3      	str	r3, [r2, #12]
      break;
 8006342:	e040      	b.n	80063c6 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006344:	78fb      	ldrb	r3, [r7, #3]
 8006346:	015a      	lsls	r2, r3, #5
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	4413      	add	r3, r2
 800634c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006350:	461a      	mov	r2, r3
 8006352:	f240 639d 	movw	r3, #1693	; 0x69d
 8006356:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006358:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800635c:	2b00      	cmp	r3, #0
 800635e:	da34      	bge.n	80063ca <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006360:	78fb      	ldrb	r3, [r7, #3]
 8006362:	015a      	lsls	r2, r3, #5
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	4413      	add	r3, r2
 8006368:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800636c:	68db      	ldr	r3, [r3, #12]
 800636e:	78fa      	ldrb	r2, [r7, #3]
 8006370:	0151      	lsls	r1, r2, #5
 8006372:	68ba      	ldr	r2, [r7, #8]
 8006374:	440a      	add	r2, r1
 8006376:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800637a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800637e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006380:	e023      	b.n	80063ca <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006382:	78fb      	ldrb	r3, [r7, #3]
 8006384:	015a      	lsls	r2, r3, #5
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	4413      	add	r3, r2
 800638a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800638e:	461a      	mov	r2, r3
 8006390:	f240 2325 	movw	r3, #549	; 0x225
 8006394:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006396:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800639a:	2b00      	cmp	r3, #0
 800639c:	da17      	bge.n	80063ce <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800639e:	78fb      	ldrb	r3, [r7, #3]
 80063a0:	015a      	lsls	r2, r3, #5
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	4413      	add	r3, r2
 80063a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063aa:	68db      	ldr	r3, [r3, #12]
 80063ac:	78fa      	ldrb	r2, [r7, #3]
 80063ae:	0151      	lsls	r1, r2, #5
 80063b0:	68ba      	ldr	r2, [r7, #8]
 80063b2:	440a      	add	r2, r1
 80063b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063b8:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80063bc:	60d3      	str	r3, [r2, #12]
      }
      break;
 80063be:	e006      	b.n	80063ce <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80063c0:	2301      	movs	r3, #1
 80063c2:	75fb      	strb	r3, [r7, #23]
      break;
 80063c4:	e004      	b.n	80063d0 <USB_HC_Init+0x14c>
      break;
 80063c6:	bf00      	nop
 80063c8:	e002      	b.n	80063d0 <USB_HC_Init+0x14c>
      break;
 80063ca:	bf00      	nop
 80063cc:	e000      	b.n	80063d0 <USB_HC_Init+0x14c>
      break;
 80063ce:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063d6:	699a      	ldr	r2, [r3, #24]
 80063d8:	78fb      	ldrb	r3, [r7, #3]
 80063da:	f003 030f 	and.w	r3, r3, #15
 80063de:	2101      	movs	r1, #1
 80063e0:	fa01 f303 	lsl.w	r3, r1, r3
 80063e4:	68b9      	ldr	r1, [r7, #8]
 80063e6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80063ea:	4313      	orrs	r3, r2
 80063ec:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	699b      	ldr	r3, [r3, #24]
 80063f2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80063fa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	da03      	bge.n	800640a <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006402:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006406:	613b      	str	r3, [r7, #16]
 8006408:	e001      	b.n	800640e <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800640a:	2300      	movs	r3, #0
 800640c:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800640e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006412:	2b02      	cmp	r3, #2
 8006414:	d103      	bne.n	800641e <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006416:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800641a:	60fb      	str	r3, [r7, #12]
 800641c:	e001      	b.n	8006422 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800641e:	2300      	movs	r3, #0
 8006420:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006422:	787b      	ldrb	r3, [r7, #1]
 8006424:	059b      	lsls	r3, r3, #22
 8006426:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800642a:	78bb      	ldrb	r3, [r7, #2]
 800642c:	02db      	lsls	r3, r3, #11
 800642e:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006432:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006434:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006438:	049b      	lsls	r3, r3, #18
 800643a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800643e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006440:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006442:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006446:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800644c:	78fb      	ldrb	r3, [r7, #3]
 800644e:	0159      	lsls	r1, r3, #5
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	440b      	add	r3, r1
 8006454:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006458:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800645e:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8006460:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006464:	2b03      	cmp	r3, #3
 8006466:	d10f      	bne.n	8006488 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8006468:	78fb      	ldrb	r3, [r7, #3]
 800646a:	015a      	lsls	r2, r3, #5
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	4413      	add	r3, r2
 8006470:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	78fa      	ldrb	r2, [r7, #3]
 8006478:	0151      	lsls	r1, r2, #5
 800647a:	68ba      	ldr	r2, [r7, #8]
 800647c:	440a      	add	r2, r1
 800647e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006482:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006486:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006488:	7dfb      	ldrb	r3, [r7, #23]
}
 800648a:	4618      	mov	r0, r3
 800648c:	371c      	adds	r7, #28
 800648e:	46bd      	mov	sp, r7
 8006490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006494:	4770      	bx	lr
 8006496:	bf00      	nop

08006498 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b08c      	sub	sp, #48	; 0x30
 800649c:	af02      	add	r7, sp, #8
 800649e:	60f8      	str	r0, [r7, #12]
 80064a0:	60b9      	str	r1, [r7, #8]
 80064a2:	4613      	mov	r3, r2
 80064a4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	785b      	ldrb	r3, [r3, #1]
 80064ae:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80064b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80064b4:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d028      	beq.n	8006514 <USB_HC_StartXfer+0x7c>
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	791b      	ldrb	r3, [r3, #4]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d124      	bne.n	8006514 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 80064ca:	79fb      	ldrb	r3, [r7, #7]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d10b      	bne.n	80064e8 <USB_HC_StartXfer+0x50>
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	795b      	ldrb	r3, [r3, #5]
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d107      	bne.n	80064e8 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	785b      	ldrb	r3, [r3, #1]
 80064dc:	4619      	mov	r1, r3
 80064de:	68f8      	ldr	r0, [r7, #12]
 80064e0:	f000 fa2e 	bl	8006940 <USB_DoPing>
      return HAL_OK;
 80064e4:	2300      	movs	r3, #0
 80064e6:	e112      	b.n	800670e <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 80064e8:	79fb      	ldrb	r3, [r7, #7]
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d112      	bne.n	8006514 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80064ee:	69fb      	ldr	r3, [r7, #28]
 80064f0:	015a      	lsls	r2, r3, #5
 80064f2:	6a3b      	ldr	r3, [r7, #32]
 80064f4:	4413      	add	r3, r2
 80064f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064fa:	68db      	ldr	r3, [r3, #12]
 80064fc:	69fa      	ldr	r2, [r7, #28]
 80064fe:	0151      	lsls	r1, r2, #5
 8006500:	6a3a      	ldr	r2, [r7, #32]
 8006502:	440a      	add	r2, r1
 8006504:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006508:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800650c:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	2200      	movs	r2, #0
 8006512:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	691b      	ldr	r3, [r3, #16]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d018      	beq.n	800654e <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	691b      	ldr	r3, [r3, #16]
 8006520:	68ba      	ldr	r2, [r7, #8]
 8006522:	8912      	ldrh	r2, [r2, #8]
 8006524:	4413      	add	r3, r2
 8006526:	3b01      	subs	r3, #1
 8006528:	68ba      	ldr	r2, [r7, #8]
 800652a:	8912      	ldrh	r2, [r2, #8]
 800652c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006530:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006532:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006534:	8b7b      	ldrh	r3, [r7, #26]
 8006536:	429a      	cmp	r2, r3
 8006538:	d90b      	bls.n	8006552 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800653a:	8b7b      	ldrh	r3, [r7, #26]
 800653c:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800653e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006540:	68ba      	ldr	r2, [r7, #8]
 8006542:	8912      	ldrh	r2, [r2, #8]
 8006544:	fb02 f203 	mul.w	r2, r2, r3
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	611a      	str	r2, [r3, #16]
 800654c:	e001      	b.n	8006552 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800654e:	2301      	movs	r3, #1
 8006550:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	78db      	ldrb	r3, [r3, #3]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d006      	beq.n	8006568 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800655a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800655c:	68ba      	ldr	r2, [r7, #8]
 800655e:	8912      	ldrh	r2, [r2, #8]
 8006560:	fb02 f203 	mul.w	r2, r2, r3
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	691b      	ldr	r3, [r3, #16]
 800656c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006570:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006572:	04d9      	lsls	r1, r3, #19
 8006574:	4b68      	ldr	r3, [pc, #416]	; (8006718 <USB_HC_StartXfer+0x280>)
 8006576:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006578:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	7a9b      	ldrb	r3, [r3, #10]
 800657e:	075b      	lsls	r3, r3, #29
 8006580:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006584:	69f9      	ldr	r1, [r7, #28]
 8006586:	0148      	lsls	r0, r1, #5
 8006588:	6a39      	ldr	r1, [r7, #32]
 800658a:	4401      	add	r1, r0
 800658c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006590:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006592:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006594:	79fb      	ldrb	r3, [r7, #7]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d009      	beq.n	80065ae <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	68d9      	ldr	r1, [r3, #12]
 800659e:	69fb      	ldr	r3, [r7, #28]
 80065a0:	015a      	lsls	r2, r3, #5
 80065a2:	6a3b      	ldr	r3, [r7, #32]
 80065a4:	4413      	add	r3, r2
 80065a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065aa:	460a      	mov	r2, r1
 80065ac:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80065ae:	6a3b      	ldr	r3, [r7, #32]
 80065b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	f003 0301 	and.w	r3, r3, #1
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	bf0c      	ite	eq
 80065be:	2301      	moveq	r3, #1
 80065c0:	2300      	movne	r3, #0
 80065c2:	b2db      	uxtb	r3, r3
 80065c4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80065c6:	69fb      	ldr	r3, [r7, #28]
 80065c8:	015a      	lsls	r2, r3, #5
 80065ca:	6a3b      	ldr	r3, [r7, #32]
 80065cc:	4413      	add	r3, r2
 80065ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	69fa      	ldr	r2, [r7, #28]
 80065d6:	0151      	lsls	r1, r2, #5
 80065d8:	6a3a      	ldr	r2, [r7, #32]
 80065da:	440a      	add	r2, r1
 80065dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065e0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80065e4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80065e6:	69fb      	ldr	r3, [r7, #28]
 80065e8:	015a      	lsls	r2, r3, #5
 80065ea:	6a3b      	ldr	r3, [r7, #32]
 80065ec:	4413      	add	r3, r2
 80065ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	7e7b      	ldrb	r3, [r7, #25]
 80065f6:	075b      	lsls	r3, r3, #29
 80065f8:	69f9      	ldr	r1, [r7, #28]
 80065fa:	0148      	lsls	r0, r1, #5
 80065fc:	6a39      	ldr	r1, [r7, #32]
 80065fe:	4401      	add	r1, r0
 8006600:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006604:	4313      	orrs	r3, r2
 8006606:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006608:	69fb      	ldr	r3, [r7, #28]
 800660a:	015a      	lsls	r2, r3, #5
 800660c:	6a3b      	ldr	r3, [r7, #32]
 800660e:	4413      	add	r3, r2
 8006610:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a41      	ldr	r2, [pc, #260]	; (800671c <USB_HC_StartXfer+0x284>)
 8006618:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800661a:	4b40      	ldr	r3, [pc, #256]	; (800671c <USB_HC_StartXfer+0x284>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006622:	4a3e      	ldr	r2, [pc, #248]	; (800671c <USB_HC_StartXfer+0x284>)
 8006624:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	78db      	ldrb	r3, [r3, #3]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d006      	beq.n	800663c <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800662e:	4b3b      	ldr	r3, [pc, #236]	; (800671c <USB_HC_StartXfer+0x284>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006636:	4a39      	ldr	r2, [pc, #228]	; (800671c <USB_HC_StartXfer+0x284>)
 8006638:	6013      	str	r3, [r2, #0]
 800663a:	e005      	b.n	8006648 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800663c:	4b37      	ldr	r3, [pc, #220]	; (800671c <USB_HC_StartXfer+0x284>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006644:	4a35      	ldr	r2, [pc, #212]	; (800671c <USB_HC_StartXfer+0x284>)
 8006646:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006648:	4b34      	ldr	r3, [pc, #208]	; (800671c <USB_HC_StartXfer+0x284>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006650:	4a32      	ldr	r2, [pc, #200]	; (800671c <USB_HC_StartXfer+0x284>)
 8006652:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006654:	69fb      	ldr	r3, [r7, #28]
 8006656:	015a      	lsls	r2, r3, #5
 8006658:	6a3b      	ldr	r3, [r7, #32]
 800665a:	4413      	add	r3, r2
 800665c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006660:	461a      	mov	r2, r3
 8006662:	4b2e      	ldr	r3, [pc, #184]	; (800671c <USB_HC_StartXfer+0x284>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8006668:	79fb      	ldrb	r3, [r7, #7]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d14e      	bne.n	800670c <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	78db      	ldrb	r3, [r3, #3]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d14a      	bne.n	800670c <USB_HC_StartXfer+0x274>
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	691b      	ldr	r3, [r3, #16]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d046      	beq.n	800670c <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	79db      	ldrb	r3, [r3, #7]
 8006682:	2b03      	cmp	r3, #3
 8006684:	d830      	bhi.n	80066e8 <USB_HC_StartXfer+0x250>
 8006686:	a201      	add	r2, pc, #4	; (adr r2, 800668c <USB_HC_StartXfer+0x1f4>)
 8006688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800668c:	0800669d 	.word	0x0800669d
 8006690:	080066c1 	.word	0x080066c1
 8006694:	0800669d 	.word	0x0800669d
 8006698:	080066c1 	.word	0x080066c1
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	691b      	ldr	r3, [r3, #16]
 80066a0:	3303      	adds	r3, #3
 80066a2:	089b      	lsrs	r3, r3, #2
 80066a4:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80066a6:	8afa      	ldrh	r2, [r7, #22]
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	429a      	cmp	r2, r3
 80066b0:	d91c      	bls.n	80066ec <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	699b      	ldr	r3, [r3, #24]
 80066b6:	f043 0220 	orr.w	r2, r3, #32
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	619a      	str	r2, [r3, #24]
          }
          break;
 80066be:	e015      	b.n	80066ec <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	691b      	ldr	r3, [r3, #16]
 80066c4:	3303      	adds	r3, #3
 80066c6:	089b      	lsrs	r3, r3, #2
 80066c8:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80066ca:	8afa      	ldrh	r2, [r7, #22]
 80066cc:	6a3b      	ldr	r3, [r7, #32]
 80066ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066d2:	691b      	ldr	r3, [r3, #16]
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d90a      	bls.n	80066f0 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	699b      	ldr	r3, [r3, #24]
 80066de:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	619a      	str	r2, [r3, #24]
          }
          break;
 80066e6:	e003      	b.n	80066f0 <USB_HC_StartXfer+0x258>

        default:
          break;
 80066e8:	bf00      	nop
 80066ea:	e002      	b.n	80066f2 <USB_HC_StartXfer+0x25a>
          break;
 80066ec:	bf00      	nop
 80066ee:	e000      	b.n	80066f2 <USB_HC_StartXfer+0x25a>
          break;
 80066f0:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	68d9      	ldr	r1, [r3, #12]
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	785a      	ldrb	r2, [r3, #1]
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	691b      	ldr	r3, [r3, #16]
 80066fe:	b298      	uxth	r0, r3
 8006700:	2300      	movs	r3, #0
 8006702:	9300      	str	r3, [sp, #0]
 8006704:	4603      	mov	r3, r0
 8006706:	68f8      	ldr	r0, [r7, #12]
 8006708:	f7ff fb86 	bl	8005e18 <USB_WritePacket>
    }
  }

  return HAL_OK;
 800670c:	2300      	movs	r3, #0
}
 800670e:	4618      	mov	r0, r3
 8006710:	3728      	adds	r7, #40	; 0x28
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}
 8006716:	bf00      	nop
 8006718:	1ff80000 	.word	0x1ff80000
 800671c:	200000b0 	.word	0x200000b0

08006720 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006720:	b480      	push	{r7}
 8006722:	b085      	sub	sp, #20
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006732:	695b      	ldr	r3, [r3, #20]
 8006734:	b29b      	uxth	r3, r3
}
 8006736:	4618      	mov	r0, r3
 8006738:	3714      	adds	r7, #20
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr

08006742 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006742:	b480      	push	{r7}
 8006744:	b087      	sub	sp, #28
 8006746:	af00      	add	r7, sp, #0
 8006748:	6078      	str	r0, [r7, #4]
 800674a:	460b      	mov	r3, r1
 800674c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8006752:	78fb      	ldrb	r3, [r7, #3]
 8006754:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006756:	2300      	movs	r3, #0
 8006758:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	015a      	lsls	r2, r3, #5
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	4413      	add	r3, r2
 8006762:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	0c9b      	lsrs	r3, r3, #18
 800676a:	f003 0303 	and.w	r3, r3, #3
 800676e:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d002      	beq.n	800677c <USB_HC_Halt+0x3a>
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	2b02      	cmp	r3, #2
 800677a:	d16c      	bne.n	8006856 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	015a      	lsls	r2, r3, #5
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	4413      	add	r3, r2
 8006784:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	68fa      	ldr	r2, [r7, #12]
 800678c:	0151      	lsls	r1, r2, #5
 800678e:	693a      	ldr	r2, [r7, #16]
 8006790:	440a      	add	r2, r1
 8006792:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006796:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800679a:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d143      	bne.n	8006830 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	015a      	lsls	r2, r3, #5
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	4413      	add	r3, r2
 80067b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	68fa      	ldr	r2, [r7, #12]
 80067b8:	0151      	lsls	r1, r2, #5
 80067ba:	693a      	ldr	r2, [r7, #16]
 80067bc:	440a      	add	r2, r1
 80067be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067c2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80067c6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	015a      	lsls	r2, r3, #5
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	4413      	add	r3, r2
 80067d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	68fa      	ldr	r2, [r7, #12]
 80067d8:	0151      	lsls	r1, r2, #5
 80067da:	693a      	ldr	r2, [r7, #16]
 80067dc:	440a      	add	r2, r1
 80067de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80067e6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	015a      	lsls	r2, r3, #5
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	4413      	add	r3, r2
 80067f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	68fa      	ldr	r2, [r7, #12]
 80067f8:	0151      	lsls	r1, r2, #5
 80067fa:	693a      	ldr	r2, [r7, #16]
 80067fc:	440a      	add	r2, r1
 80067fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006802:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006806:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	3301      	adds	r3, #1
 800680c:	617b      	str	r3, [r7, #20]
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006814:	d81d      	bhi.n	8006852 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	015a      	lsls	r2, r3, #5
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	4413      	add	r3, r2
 800681e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006828:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800682c:	d0ec      	beq.n	8006808 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800682e:	e080      	b.n	8006932 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	015a      	lsls	r2, r3, #5
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	4413      	add	r3, r2
 8006838:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	68fa      	ldr	r2, [r7, #12]
 8006840:	0151      	lsls	r1, r2, #5
 8006842:	693a      	ldr	r2, [r7, #16]
 8006844:	440a      	add	r2, r1
 8006846:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800684a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800684e:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006850:	e06f      	b.n	8006932 <USB_HC_Halt+0x1f0>
          break;
 8006852:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006854:	e06d      	b.n	8006932 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	015a      	lsls	r2, r3, #5
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	4413      	add	r3, r2
 800685e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	68fa      	ldr	r2, [r7, #12]
 8006866:	0151      	lsls	r1, r2, #5
 8006868:	693a      	ldr	r2, [r7, #16]
 800686a:	440a      	add	r2, r1
 800686c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006870:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006874:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800687c:	691b      	ldr	r3, [r3, #16]
 800687e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006882:	2b00      	cmp	r3, #0
 8006884:	d143      	bne.n	800690e <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	015a      	lsls	r2, r3, #5
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	4413      	add	r3, r2
 800688e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	68fa      	ldr	r2, [r7, #12]
 8006896:	0151      	lsls	r1, r2, #5
 8006898:	693a      	ldr	r2, [r7, #16]
 800689a:	440a      	add	r2, r1
 800689c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80068a4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	015a      	lsls	r2, r3, #5
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	4413      	add	r3, r2
 80068ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	68fa      	ldr	r2, [r7, #12]
 80068b6:	0151      	lsls	r1, r2, #5
 80068b8:	693a      	ldr	r2, [r7, #16]
 80068ba:	440a      	add	r2, r1
 80068bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80068c4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	015a      	lsls	r2, r3, #5
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	4413      	add	r3, r2
 80068ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	68fa      	ldr	r2, [r7, #12]
 80068d6:	0151      	lsls	r1, r2, #5
 80068d8:	693a      	ldr	r2, [r7, #16]
 80068da:	440a      	add	r2, r1
 80068dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068e0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80068e4:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	3301      	adds	r3, #1
 80068ea:	617b      	str	r3, [r7, #20]
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80068f2:	d81d      	bhi.n	8006930 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	015a      	lsls	r2, r3, #5
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	4413      	add	r3, r2
 80068fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006906:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800690a:	d0ec      	beq.n	80068e6 <USB_HC_Halt+0x1a4>
 800690c:	e011      	b.n	8006932 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	015a      	lsls	r2, r3, #5
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	4413      	add	r3, r2
 8006916:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	68fa      	ldr	r2, [r7, #12]
 800691e:	0151      	lsls	r1, r2, #5
 8006920:	693a      	ldr	r2, [r7, #16]
 8006922:	440a      	add	r2, r1
 8006924:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006928:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800692c:	6013      	str	r3, [r2, #0]
 800692e:	e000      	b.n	8006932 <USB_HC_Halt+0x1f0>
          break;
 8006930:	bf00      	nop
    }
  }

  return HAL_OK;
 8006932:	2300      	movs	r3, #0
}
 8006934:	4618      	mov	r0, r3
 8006936:	371c      	adds	r7, #28
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr

08006940 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006940:	b480      	push	{r7}
 8006942:	b087      	sub	sp, #28
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	460b      	mov	r3, r1
 800694a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006950:	78fb      	ldrb	r3, [r7, #3]
 8006952:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006954:	2301      	movs	r3, #1
 8006956:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	04da      	lsls	r2, r3, #19
 800695c:	4b15      	ldr	r3, [pc, #84]	; (80069b4 <USB_DoPing+0x74>)
 800695e:	4013      	ands	r3, r2
 8006960:	693a      	ldr	r2, [r7, #16]
 8006962:	0151      	lsls	r1, r2, #5
 8006964:	697a      	ldr	r2, [r7, #20]
 8006966:	440a      	add	r2, r1
 8006968:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800696c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006970:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	015a      	lsls	r2, r3, #5
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	4413      	add	r3, r2
 800697a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006988:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006990:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	015a      	lsls	r2, r3, #5
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	4413      	add	r3, r2
 800699a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800699e:	461a      	mov	r2, r3
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80069a4:	2300      	movs	r3, #0
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	371c      	adds	r7, #28
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr
 80069b2:	bf00      	nop
 80069b4:	1ff80000 	.word	0x1ff80000

080069b8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b086      	sub	sp, #24
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80069c4:	2300      	movs	r3, #0
 80069c6:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f7ff f9a1 	bl	8005d10 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80069ce:	2110      	movs	r1, #16
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f7ff f9d9 	bl	8005d88 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f7ff f9fc 	bl	8005dd4 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80069dc:	2300      	movs	r3, #0
 80069de:	613b      	str	r3, [r7, #16]
 80069e0:	e01f      	b.n	8006a22 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	015a      	lsls	r2, r3, #5
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	4413      	add	r3, r2
 80069ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80069f8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006a00:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006a08:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	015a      	lsls	r2, r3, #5
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	4413      	add	r3, r2
 8006a12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a16:	461a      	mov	r2, r3
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	3301      	adds	r3, #1
 8006a20:	613b      	str	r3, [r7, #16]
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	2b0f      	cmp	r3, #15
 8006a26:	d9dc      	bls.n	80069e2 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006a28:	2300      	movs	r3, #0
 8006a2a:	613b      	str	r3, [r7, #16]
 8006a2c:	e034      	b.n	8006a98 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	015a      	lsls	r2, r3, #5
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	4413      	add	r3, r2
 8006a36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a44:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006a4c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006a54:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	015a      	lsls	r2, r3, #5
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	4413      	add	r3, r2
 8006a5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a62:	461a      	mov	r2, r3
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	3301      	adds	r3, #1
 8006a6c:	617b      	str	r3, [r7, #20]
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a74:	d80c      	bhi.n	8006a90 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	015a      	lsls	r2, r3, #5
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	4413      	add	r3, r2
 8006a7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a8c:	d0ec      	beq.n	8006a68 <USB_StopHost+0xb0>
 8006a8e:	e000      	b.n	8006a92 <USB_StopHost+0xda>
        break;
 8006a90:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	3301      	adds	r3, #1
 8006a96:	613b      	str	r3, [r7, #16]
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	2b0f      	cmp	r3, #15
 8006a9c:	d9c7      	bls.n	8006a2e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006aa4:	461a      	mov	r2, r3
 8006aa6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006aaa:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006ab2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f7ff f91a 	bl	8005cee <USB_EnableGlobalInt>

  return HAL_OK;
 8006aba:	2300      	movs	r3, #0
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3718      	adds	r7, #24
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}

08006ac4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006ac4:	b590      	push	{r4, r7, lr}
 8006ac6:	b089      	sub	sp, #36	; 0x24
 8006ac8:	af04      	add	r7, sp, #16
 8006aca:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006acc:	2301      	movs	r3, #1
 8006ace:	2202      	movs	r2, #2
 8006ad0:	2102      	movs	r1, #2
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f000 fc68 	bl	80073a8 <USBH_FindInterface>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006adc:	7bfb      	ldrb	r3, [r7, #15]
 8006ade:	2bff      	cmp	r3, #255	; 0xff
 8006ae0:	d002      	beq.n	8006ae8 <USBH_CDC_InterfaceInit+0x24>
 8006ae2:	7bfb      	ldrb	r3, [r7, #15]
 8006ae4:	2b01      	cmp	r3, #1
 8006ae6:	d901      	bls.n	8006aec <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006ae8:	2302      	movs	r3, #2
 8006aea:	e13d      	b.n	8006d68 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006aec:	7bfb      	ldrb	r3, [r7, #15]
 8006aee:	4619      	mov	r1, r3
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f000 fc3d 	bl	8007370 <USBH_SelectInterface>
 8006af6:	4603      	mov	r3, r0
 8006af8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006afa:	7bbb      	ldrb	r3, [r7, #14]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d001      	beq.n	8006b04 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006b00:	2302      	movs	r3, #2
 8006b02:	e131      	b.n	8006d68 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006b0a:	2050      	movs	r0, #80	; 0x50
 8006b0c:	f002 f9fc 	bl	8008f08 <malloc>
 8006b10:	4603      	mov	r3, r0
 8006b12:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b1a:	69db      	ldr	r3, [r3, #28]
 8006b1c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d101      	bne.n	8006b28 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006b24:	2302      	movs	r3, #2
 8006b26:	e11f      	b.n	8006d68 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006b28:	2250      	movs	r2, #80	; 0x50
 8006b2a:	2100      	movs	r1, #0
 8006b2c:	68b8      	ldr	r0, [r7, #8]
 8006b2e:	f002 f9fb 	bl	8008f28 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006b32:	7bfb      	ldrb	r3, [r7, #15]
 8006b34:	687a      	ldr	r2, [r7, #4]
 8006b36:	211a      	movs	r1, #26
 8006b38:	fb01 f303 	mul.w	r3, r1, r3
 8006b3c:	4413      	add	r3, r2
 8006b3e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006b42:	781b      	ldrb	r3, [r3, #0]
 8006b44:	b25b      	sxtb	r3, r3
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	da15      	bge.n	8006b76 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006b4a:	7bfb      	ldrb	r3, [r7, #15]
 8006b4c:	687a      	ldr	r2, [r7, #4]
 8006b4e:	211a      	movs	r1, #26
 8006b50:	fb01 f303 	mul.w	r3, r1, r3
 8006b54:	4413      	add	r3, r2
 8006b56:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006b5a:	781a      	ldrb	r2, [r3, #0]
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006b60:	7bfb      	ldrb	r3, [r7, #15]
 8006b62:	687a      	ldr	r2, [r7, #4]
 8006b64:	211a      	movs	r1, #26
 8006b66:	fb01 f303 	mul.w	r3, r1, r3
 8006b6a:	4413      	add	r3, r2
 8006b6c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006b70:	881a      	ldrh	r2, [r3, #0]
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	785b      	ldrb	r3, [r3, #1]
 8006b7a:	4619      	mov	r1, r3
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f001 fe36 	bl	80087ee <USBH_AllocPipe>
 8006b82:	4603      	mov	r3, r0
 8006b84:	461a      	mov	r2, r3
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	7819      	ldrb	r1, [r3, #0]
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	7858      	ldrb	r0, [r3, #1]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006b9e:	68ba      	ldr	r2, [r7, #8]
 8006ba0:	8952      	ldrh	r2, [r2, #10]
 8006ba2:	9202      	str	r2, [sp, #8]
 8006ba4:	2203      	movs	r2, #3
 8006ba6:	9201      	str	r2, [sp, #4]
 8006ba8:	9300      	str	r3, [sp, #0]
 8006baa:	4623      	mov	r3, r4
 8006bac:	4602      	mov	r2, r0
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f001 fdee 	bl	8008790 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	781b      	ldrb	r3, [r3, #0]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	4619      	mov	r1, r3
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f002 f8f3 	bl	8008da8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	210a      	movs	r1, #10
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f000 fbed 	bl	80073a8 <USBH_FindInterface>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006bd2:	7bfb      	ldrb	r3, [r7, #15]
 8006bd4:	2bff      	cmp	r3, #255	; 0xff
 8006bd6:	d002      	beq.n	8006bde <USBH_CDC_InterfaceInit+0x11a>
 8006bd8:	7bfb      	ldrb	r3, [r7, #15]
 8006bda:	2b01      	cmp	r3, #1
 8006bdc:	d901      	bls.n	8006be2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006bde:	2302      	movs	r3, #2
 8006be0:	e0c2      	b.n	8006d68 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006be2:	7bfb      	ldrb	r3, [r7, #15]
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	211a      	movs	r1, #26
 8006be8:	fb01 f303 	mul.w	r3, r1, r3
 8006bec:	4413      	add	r3, r2
 8006bee:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006bf2:	781b      	ldrb	r3, [r3, #0]
 8006bf4:	b25b      	sxtb	r3, r3
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	da16      	bge.n	8006c28 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006bfa:	7bfb      	ldrb	r3, [r7, #15]
 8006bfc:	687a      	ldr	r2, [r7, #4]
 8006bfe:	211a      	movs	r1, #26
 8006c00:	fb01 f303 	mul.w	r3, r1, r3
 8006c04:	4413      	add	r3, r2
 8006c06:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006c0a:	781a      	ldrb	r2, [r3, #0]
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006c10:	7bfb      	ldrb	r3, [r7, #15]
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	211a      	movs	r1, #26
 8006c16:	fb01 f303 	mul.w	r3, r1, r3
 8006c1a:	4413      	add	r3, r2
 8006c1c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006c20:	881a      	ldrh	r2, [r3, #0]
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	835a      	strh	r2, [r3, #26]
 8006c26:	e015      	b.n	8006c54 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006c28:	7bfb      	ldrb	r3, [r7, #15]
 8006c2a:	687a      	ldr	r2, [r7, #4]
 8006c2c:	211a      	movs	r1, #26
 8006c2e:	fb01 f303 	mul.w	r3, r1, r3
 8006c32:	4413      	add	r3, r2
 8006c34:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006c38:	781a      	ldrb	r2, [r3, #0]
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006c3e:	7bfb      	ldrb	r3, [r7, #15]
 8006c40:	687a      	ldr	r2, [r7, #4]
 8006c42:	211a      	movs	r1, #26
 8006c44:	fb01 f303 	mul.w	r3, r1, r3
 8006c48:	4413      	add	r3, r2
 8006c4a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006c4e:	881a      	ldrh	r2, [r3, #0]
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8006c54:	7bfb      	ldrb	r3, [r7, #15]
 8006c56:	687a      	ldr	r2, [r7, #4]
 8006c58:	211a      	movs	r1, #26
 8006c5a:	fb01 f303 	mul.w	r3, r1, r3
 8006c5e:	4413      	add	r3, r2
 8006c60:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006c64:	781b      	ldrb	r3, [r3, #0]
 8006c66:	b25b      	sxtb	r3, r3
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	da16      	bge.n	8006c9a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006c6c:	7bfb      	ldrb	r3, [r7, #15]
 8006c6e:	687a      	ldr	r2, [r7, #4]
 8006c70:	211a      	movs	r1, #26
 8006c72:	fb01 f303 	mul.w	r3, r1, r3
 8006c76:	4413      	add	r3, r2
 8006c78:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006c7c:	781a      	ldrb	r2, [r3, #0]
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006c82:	7bfb      	ldrb	r3, [r7, #15]
 8006c84:	687a      	ldr	r2, [r7, #4]
 8006c86:	211a      	movs	r1, #26
 8006c88:	fb01 f303 	mul.w	r3, r1, r3
 8006c8c:	4413      	add	r3, r2
 8006c8e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006c92:	881a      	ldrh	r2, [r3, #0]
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	835a      	strh	r2, [r3, #26]
 8006c98:	e015      	b.n	8006cc6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006c9a:	7bfb      	ldrb	r3, [r7, #15]
 8006c9c:	687a      	ldr	r2, [r7, #4]
 8006c9e:	211a      	movs	r1, #26
 8006ca0:	fb01 f303 	mul.w	r3, r1, r3
 8006ca4:	4413      	add	r3, r2
 8006ca6:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006caa:	781a      	ldrb	r2, [r3, #0]
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006cb0:	7bfb      	ldrb	r3, [r7, #15]
 8006cb2:	687a      	ldr	r2, [r7, #4]
 8006cb4:	211a      	movs	r1, #26
 8006cb6:	fb01 f303 	mul.w	r3, r1, r3
 8006cba:	4413      	add	r3, r2
 8006cbc:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006cc0:	881a      	ldrh	r2, [r3, #0]
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	7b9b      	ldrb	r3, [r3, #14]
 8006cca:	4619      	mov	r1, r3
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f001 fd8e 	bl	80087ee <USBH_AllocPipe>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	461a      	mov	r2, r3
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	7bdb      	ldrb	r3, [r3, #15]
 8006cde:	4619      	mov	r1, r3
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f001 fd84 	bl	80087ee <USBH_AllocPipe>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	461a      	mov	r2, r3
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	7b59      	ldrb	r1, [r3, #13]
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	7b98      	ldrb	r0, [r3, #14]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006d02:	68ba      	ldr	r2, [r7, #8]
 8006d04:	8b12      	ldrh	r2, [r2, #24]
 8006d06:	9202      	str	r2, [sp, #8]
 8006d08:	2202      	movs	r2, #2
 8006d0a:	9201      	str	r2, [sp, #4]
 8006d0c:	9300      	str	r3, [sp, #0]
 8006d0e:	4623      	mov	r3, r4
 8006d10:	4602      	mov	r2, r0
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f001 fd3c 	bl	8008790 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	7b19      	ldrb	r1, [r3, #12]
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	7bd8      	ldrb	r0, [r3, #15]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006d2c:	68ba      	ldr	r2, [r7, #8]
 8006d2e:	8b52      	ldrh	r2, [r2, #26]
 8006d30:	9202      	str	r2, [sp, #8]
 8006d32:	2202      	movs	r2, #2
 8006d34:	9201      	str	r2, [sp, #4]
 8006d36:	9300      	str	r3, [sp, #0]
 8006d38:	4623      	mov	r3, r4
 8006d3a:	4602      	mov	r2, r0
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f001 fd27 	bl	8008790 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	2200      	movs	r2, #0
 8006d46:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	7b5b      	ldrb	r3, [r3, #13]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	4619      	mov	r1, r3
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f002 f828 	bl	8008da8 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	7b1b      	ldrb	r3, [r3, #12]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	4619      	mov	r1, r3
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f002 f821 	bl	8008da8 <USBH_LL_SetToggle>

  return USBH_OK;
 8006d66:	2300      	movs	r3, #0
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3714      	adds	r7, #20
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd90      	pop	{r4, r7, pc}

08006d70 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b084      	sub	sp, #16
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d7e:	69db      	ldr	r3, [r3, #28]
 8006d80:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	781b      	ldrb	r3, [r3, #0]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d00e      	beq.n	8006da8 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	781b      	ldrb	r3, [r3, #0]
 8006d8e:	4619      	mov	r1, r3
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f001 fd1c 	bl	80087ce <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	781b      	ldrb	r3, [r3, #0]
 8006d9a:	4619      	mov	r1, r3
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f001 fd47 	bl	8008830 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2200      	movs	r2, #0
 8006da6:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	7b1b      	ldrb	r3, [r3, #12]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d00e      	beq.n	8006dce <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	7b1b      	ldrb	r3, [r3, #12]
 8006db4:	4619      	mov	r1, r3
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f001 fd09 	bl	80087ce <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	7b1b      	ldrb	r3, [r3, #12]
 8006dc0:	4619      	mov	r1, r3
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f001 fd34 	bl	8008830 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	7b5b      	ldrb	r3, [r3, #13]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d00e      	beq.n	8006df4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	7b5b      	ldrb	r3, [r3, #13]
 8006dda:	4619      	mov	r1, r3
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f001 fcf6 	bl	80087ce <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	7b5b      	ldrb	r3, [r3, #13]
 8006de6:	4619      	mov	r1, r3
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f001 fd21 	bl	8008830 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	2200      	movs	r2, #0
 8006df2:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006dfa:	69db      	ldr	r3, [r3, #28]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d00b      	beq.n	8006e18 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e06:	69db      	ldr	r3, [r3, #28]
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f002 f885 	bl	8008f18 <free>
    phost->pActiveClass->pData = 0U;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e14:	2200      	movs	r2, #0
 8006e16:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006e18:	2300      	movs	r3, #0
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3710      	adds	r7, #16
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}

08006e22 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006e22:	b580      	push	{r7, lr}
 8006e24:	b084      	sub	sp, #16
 8006e26:	af00      	add	r7, sp, #0
 8006e28:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e30:	69db      	ldr	r3, [r3, #28]
 8006e32:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	3340      	adds	r3, #64	; 0x40
 8006e38:	4619      	mov	r1, r3
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f000 f8b1 	bl	8006fa2 <GetLineCoding>
 8006e40:	4603      	mov	r3, r0
 8006e42:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006e44:	7afb      	ldrb	r3, [r7, #11]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d105      	bne.n	8006e56 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006e50:	2102      	movs	r1, #2
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006e56:	7afb      	ldrb	r3, [r7, #11]
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3710      	adds	r7, #16
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}

08006e60 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b084      	sub	sp, #16
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e76:	69db      	ldr	r3, [r3, #28]
 8006e78:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006e80:	2b04      	cmp	r3, #4
 8006e82:	d877      	bhi.n	8006f74 <USBH_CDC_Process+0x114>
 8006e84:	a201      	add	r2, pc, #4	; (adr r2, 8006e8c <USBH_CDC_Process+0x2c>)
 8006e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e8a:	bf00      	nop
 8006e8c:	08006ea1 	.word	0x08006ea1
 8006e90:	08006ea7 	.word	0x08006ea7
 8006e94:	08006ed7 	.word	0x08006ed7
 8006e98:	08006f4b 	.word	0x08006f4b
 8006e9c:	08006f59 	.word	0x08006f59
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	73fb      	strb	r3, [r7, #15]
      break;
 8006ea4:	e06d      	b.n	8006f82 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006eaa:	4619      	mov	r1, r3
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f000 f897 	bl	8006fe0 <SetLineCoding>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006eb6:	7bbb      	ldrb	r3, [r7, #14]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d104      	bne.n	8006ec6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	2202      	movs	r2, #2
 8006ec0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006ec4:	e058      	b.n	8006f78 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006ec6:	7bbb      	ldrb	r3, [r7, #14]
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d055      	beq.n	8006f78 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	2204      	movs	r2, #4
 8006ed0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006ed4:	e050      	b.n	8006f78 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	3340      	adds	r3, #64	; 0x40
 8006eda:	4619      	mov	r1, r3
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f000 f860 	bl	8006fa2 <GetLineCoding>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006ee6:	7bbb      	ldrb	r3, [r7, #14]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d126      	bne.n	8006f3a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006efe:	791b      	ldrb	r3, [r3, #4]
 8006f00:	429a      	cmp	r2, r3
 8006f02:	d13b      	bne.n	8006f7c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f0e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006f10:	429a      	cmp	r2, r3
 8006f12:	d133      	bne.n	8006f7c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f1e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006f20:	429a      	cmp	r2, r3
 8006f22:	d12b      	bne.n	8006f7c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f2c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	d124      	bne.n	8006f7c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f000 f95a 	bl	80071ec <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006f38:	e020      	b.n	8006f7c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006f3a:	7bbb      	ldrb	r3, [r7, #14]
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	d01d      	beq.n	8006f7c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	2204      	movs	r2, #4
 8006f44:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006f48:	e018      	b.n	8006f7c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 f867 	bl	800701e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f000 f8dc 	bl	800710e <CDC_ProcessReception>
      break;
 8006f56:	e014      	b.n	8006f82 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006f58:	2100      	movs	r1, #0
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f000 ffe5 	bl	8007f2a <USBH_ClrFeature>
 8006f60:	4603      	mov	r3, r0
 8006f62:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006f64:	7bbb      	ldrb	r3, [r7, #14]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d10a      	bne.n	8006f80 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006f72:	e005      	b.n	8006f80 <USBH_CDC_Process+0x120>

    default:
      break;
 8006f74:	bf00      	nop
 8006f76:	e004      	b.n	8006f82 <USBH_CDC_Process+0x122>
      break;
 8006f78:	bf00      	nop
 8006f7a:	e002      	b.n	8006f82 <USBH_CDC_Process+0x122>
      break;
 8006f7c:	bf00      	nop
 8006f7e:	e000      	b.n	8006f82 <USBH_CDC_Process+0x122>
      break;
 8006f80:	bf00      	nop

  }

  return status;
 8006f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3710      	adds	r7, #16
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}

08006f8c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b083      	sub	sp, #12
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006f94:	2300      	movs	r3, #0
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	370c      	adds	r7, #12
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa0:	4770      	bx	lr

08006fa2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006fa2:	b580      	push	{r7, lr}
 8006fa4:	b082      	sub	sp, #8
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	6078      	str	r0, [r7, #4]
 8006faa:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	22a1      	movs	r2, #161	; 0xa1
 8006fb0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2221      	movs	r2, #33	; 0x21
 8006fb6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2207      	movs	r2, #7
 8006fc8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	2207      	movs	r2, #7
 8006fce:	4619      	mov	r1, r3
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f001 f98a 	bl	80082ea <USBH_CtlReq>
 8006fd6:	4603      	mov	r3, r0
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3708      	adds	r7, #8
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}

08006fe0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b082      	sub	sp, #8
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2221      	movs	r2, #33	; 0x21
 8006fee:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2220      	movs	r2, #32
 8006ff4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2200      	movs	r2, #0
 8007000:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2207      	movs	r2, #7
 8007006:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	2207      	movs	r2, #7
 800700c:	4619      	mov	r1, r3
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f001 f96b 	bl	80082ea <USBH_CtlReq>
 8007014:	4603      	mov	r3, r0
}
 8007016:	4618      	mov	r0, r3
 8007018:	3708      	adds	r7, #8
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}

0800701e <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800701e:	b580      	push	{r7, lr}
 8007020:	b086      	sub	sp, #24
 8007022:	af02      	add	r7, sp, #8
 8007024:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800702c:	69db      	ldr	r3, [r3, #28]
 800702e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007030:	2300      	movs	r3, #0
 8007032:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800703a:	2b01      	cmp	r3, #1
 800703c:	d002      	beq.n	8007044 <CDC_ProcessTransmission+0x26>
 800703e:	2b02      	cmp	r3, #2
 8007040:	d025      	beq.n	800708e <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 8007042:	e060      	b.n	8007106 <CDC_ProcessTransmission+0xe8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007048:	68fa      	ldr	r2, [r7, #12]
 800704a:	8b12      	ldrh	r2, [r2, #24]
 800704c:	4293      	cmp	r3, r2
 800704e:	d90c      	bls.n	800706a <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	69d9      	ldr	r1, [r3, #28]
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	8b1a      	ldrh	r2, [r3, #24]
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	7b58      	ldrb	r0, [r3, #13]
 800705c:	2301      	movs	r3, #1
 800705e:	9300      	str	r3, [sp, #0]
 8007060:	4603      	mov	r3, r0
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f001 fb51 	bl	800870a <USBH_BulkSendData>
 8007068:	e00c      	b.n	8007084 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8007072:	b29a      	uxth	r2, r3
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	7b58      	ldrb	r0, [r3, #13]
 8007078:	2301      	movs	r3, #1
 800707a:	9300      	str	r3, [sp, #0]
 800707c:	4603      	mov	r3, r0
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f001 fb43 	bl	800870a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2202      	movs	r2, #2
 8007088:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800708c:	e03b      	b.n	8007106 <CDC_ProcessTransmission+0xe8>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	7b5b      	ldrb	r3, [r3, #13]
 8007092:	4619      	mov	r1, r3
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f001 fe5d 	bl	8008d54 <USBH_LL_GetURBState>
 800709a:	4603      	mov	r3, r0
 800709c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800709e:	7afb      	ldrb	r3, [r7, #11]
 80070a0:	2b01      	cmp	r3, #1
 80070a2:	d128      	bne.n	80070f6 <CDC_ProcessTransmission+0xd8>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a8:	68fa      	ldr	r2, [r7, #12]
 80070aa:	8b12      	ldrh	r2, [r2, #24]
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d90e      	bls.n	80070ce <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b4:	68fa      	ldr	r2, [r7, #12]
 80070b6:	8b12      	ldrh	r2, [r2, #24]
 80070b8:	1a9a      	subs	r2, r3, r2
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	69db      	ldr	r3, [r3, #28]
 80070c2:	68fa      	ldr	r2, [r7, #12]
 80070c4:	8b12      	ldrh	r2, [r2, #24]
 80070c6:	441a      	add	r2, r3
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	61da      	str	r2, [r3, #28]
 80070cc:	e002      	b.n	80070d4 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2200      	movs	r2, #0
 80070d2:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d004      	beq.n	80070e6 <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2201      	movs	r2, #1
 80070e0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80070e4:	e00e      	b.n	8007104 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2200      	movs	r2, #0
 80070ea:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f000 f868 	bl	80071c4 <USBH_CDC_TransmitCallback>
      break;
 80070f4:	e006      	b.n	8007104 <CDC_ProcessTransmission+0xe6>
        if (URB_Status == USBH_URB_NOTREADY)
 80070f6:	7afb      	ldrb	r3, [r7, #11]
 80070f8:	2b02      	cmp	r3, #2
 80070fa:	d103      	bne.n	8007104 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2201      	movs	r2, #1
 8007100:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007104:	bf00      	nop
  }
}
 8007106:	bf00      	nop
 8007108:	3710      	adds	r7, #16
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}

0800710e <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800710e:	b580      	push	{r7, lr}
 8007110:	b086      	sub	sp, #24
 8007112:	af00      	add	r7, sp, #0
 8007114:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800711c:	69db      	ldr	r3, [r3, #28]
 800711e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007120:	2300      	movs	r3, #0
 8007122:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800712a:	2b03      	cmp	r3, #3
 800712c:	d002      	beq.n	8007134 <CDC_ProcessReception+0x26>
 800712e:	2b04      	cmp	r3, #4
 8007130:	d00e      	beq.n	8007150 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007132:	e043      	b.n	80071bc <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	6a19      	ldr	r1, [r3, #32]
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	8b5a      	ldrh	r2, [r3, #26]
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	7b1b      	ldrb	r3, [r3, #12]
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f001 fb07 	bl	8008754 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	2204      	movs	r2, #4
 800714a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800714e:	e035      	b.n	80071bc <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	7b1b      	ldrb	r3, [r3, #12]
 8007154:	4619      	mov	r1, r3
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f001 fdfc 	bl	8008d54 <USBH_LL_GetURBState>
 800715c:	4603      	mov	r3, r0
 800715e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007160:	7cfb      	ldrb	r3, [r7, #19]
 8007162:	2b01      	cmp	r3, #1
 8007164:	d129      	bne.n	80071ba <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	7b1b      	ldrb	r3, [r3, #12]
 800716a:	4619      	mov	r1, r3
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f001 fd5f 	bl	8008c30 <USBH_LL_GetLastXferSize>
 8007172:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007178:	68fa      	ldr	r2, [r7, #12]
 800717a:	429a      	cmp	r2, r3
 800717c:	d016      	beq.n	80071ac <CDC_ProcessReception+0x9e>
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	8b5b      	ldrh	r3, [r3, #26]
 8007182:	461a      	mov	r2, r3
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	4293      	cmp	r3, r2
 8007188:	d910      	bls.n	80071ac <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	1ad2      	subs	r2, r2, r3
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	6a1a      	ldr	r2, [r3, #32]
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	441a      	add	r2, r3
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	2203      	movs	r2, #3
 80071a6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80071aa:	e006      	b.n	80071ba <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	2200      	movs	r2, #0
 80071b0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f000 f80f 	bl	80071d8 <USBH_CDC_ReceiveCallback>
      break;
 80071ba:	bf00      	nop
  }
}
 80071bc:	bf00      	nop
 80071be:	3718      	adds	r7, #24
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}

080071c4 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b083      	sub	sp, #12
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80071cc:	bf00      	nop
 80071ce:	370c      	adds	r7, #12
 80071d0:	46bd      	mov	sp, r7
 80071d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d6:	4770      	bx	lr

080071d8 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80071d8:	b480      	push	{r7}
 80071da:	b083      	sub	sp, #12
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80071e0:	bf00      	nop
 80071e2:	370c      	adds	r7, #12
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr

080071ec <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b083      	sub	sp, #12
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80071f4:	bf00      	nop
 80071f6:	370c      	adds	r7, #12
 80071f8:	46bd      	mov	sp, r7
 80071fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fe:	4770      	bx	lr

08007200 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b084      	sub	sp, #16
 8007204:	af00      	add	r7, sp, #0
 8007206:	60f8      	str	r0, [r7, #12]
 8007208:	60b9      	str	r1, [r7, #8]
 800720a:	4613      	mov	r3, r2
 800720c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d101      	bne.n	8007218 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007214:	2302      	movs	r3, #2
 8007216:	e029      	b.n	800726c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	79fa      	ldrb	r2, [r7, #7]
 800721c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	2200      	movs	r2, #0
 8007224:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2200      	movs	r2, #0
 800722c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8007230:	68f8      	ldr	r0, [r7, #12]
 8007232:	f000 f81f 	bl	8007274 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	2200      	movs	r2, #0
 800723a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2200      	movs	r2, #0
 8007242:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2200      	movs	r2, #0
 800724a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2200      	movs	r2, #0
 8007252:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d003      	beq.n	8007264 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	68ba      	ldr	r2, [r7, #8]
 8007260:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8007264:	68f8      	ldr	r0, [r7, #12]
 8007266:	f001 fc31 	bl	8008acc <USBH_LL_Init>

  return USBH_OK;
 800726a:	2300      	movs	r3, #0
}
 800726c:	4618      	mov	r0, r3
 800726e:	3710      	adds	r7, #16
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}

08007274 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007274:	b480      	push	{r7}
 8007276:	b085      	sub	sp, #20
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800727c:	2300      	movs	r3, #0
 800727e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007280:	2300      	movs	r3, #0
 8007282:	60fb      	str	r3, [r7, #12]
 8007284:	e009      	b.n	800729a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007286:	687a      	ldr	r2, [r7, #4]
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	33e0      	adds	r3, #224	; 0xe0
 800728c:	009b      	lsls	r3, r3, #2
 800728e:	4413      	add	r3, r2
 8007290:	2200      	movs	r2, #0
 8007292:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	3301      	adds	r3, #1
 8007298:	60fb      	str	r3, [r7, #12]
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	2b0e      	cmp	r3, #14
 800729e:	d9f2      	bls.n	8007286 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80072a0:	2300      	movs	r3, #0
 80072a2:	60fb      	str	r3, [r7, #12]
 80072a4:	e009      	b.n	80072ba <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80072a6:	687a      	ldr	r2, [r7, #4]
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	4413      	add	r3, r2
 80072ac:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80072b0:	2200      	movs	r2, #0
 80072b2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	3301      	adds	r3, #1
 80072b8:	60fb      	str	r3, [r7, #12]
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072c0:	d3f1      	bcc.n	80072a6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2200      	movs	r2, #0
 80072c6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2200      	movs	r2, #0
 80072cc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2201      	movs	r2, #1
 80072d2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2200      	movs	r2, #0
 80072d8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2201      	movs	r2, #1
 80072e0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2240      	movs	r2, #64	; 0x40
 80072e6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2200      	movs	r2, #0
 80072ec:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2200      	movs	r2, #0
 80072f2:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2201      	movs	r2, #1
 80072fa:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2200      	movs	r2, #0
 8007302:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2200      	movs	r2, #0
 800730a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800730e:	2300      	movs	r3, #0
}
 8007310:	4618      	mov	r0, r3
 8007312:	3714      	adds	r7, #20
 8007314:	46bd      	mov	sp, r7
 8007316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731a:	4770      	bx	lr

0800731c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800731c:	b480      	push	{r7}
 800731e:	b085      	sub	sp, #20
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
 8007324:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007326:	2300      	movs	r3, #0
 8007328:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d016      	beq.n	800735e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007336:	2b00      	cmp	r3, #0
 8007338:	d10e      	bne.n	8007358 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007340:	1c59      	adds	r1, r3, #1
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007348:	687a      	ldr	r2, [r7, #4]
 800734a:	33de      	adds	r3, #222	; 0xde
 800734c:	6839      	ldr	r1, [r7, #0]
 800734e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007352:	2300      	movs	r3, #0
 8007354:	73fb      	strb	r3, [r7, #15]
 8007356:	e004      	b.n	8007362 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007358:	2302      	movs	r3, #2
 800735a:	73fb      	strb	r3, [r7, #15]
 800735c:	e001      	b.n	8007362 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800735e:	2302      	movs	r3, #2
 8007360:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007362:	7bfb      	ldrb	r3, [r7, #15]
}
 8007364:	4618      	mov	r0, r3
 8007366:	3714      	adds	r7, #20
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr

08007370 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007370:	b480      	push	{r7}
 8007372:	b085      	sub	sp, #20
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
 8007378:	460b      	mov	r3, r1
 800737a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800737c:	2300      	movs	r3, #0
 800737e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007386:	78fa      	ldrb	r2, [r7, #3]
 8007388:	429a      	cmp	r2, r3
 800738a:	d204      	bcs.n	8007396 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	78fa      	ldrb	r2, [r7, #3]
 8007390:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007394:	e001      	b.n	800739a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007396:	2302      	movs	r3, #2
 8007398:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800739a:	7bfb      	ldrb	r3, [r7, #15]
}
 800739c:	4618      	mov	r0, r3
 800739e:	3714      	adds	r7, #20
 80073a0:	46bd      	mov	sp, r7
 80073a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a6:	4770      	bx	lr

080073a8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b087      	sub	sp, #28
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	4608      	mov	r0, r1
 80073b2:	4611      	mov	r1, r2
 80073b4:	461a      	mov	r2, r3
 80073b6:	4603      	mov	r3, r0
 80073b8:	70fb      	strb	r3, [r7, #3]
 80073ba:	460b      	mov	r3, r1
 80073bc:	70bb      	strb	r3, [r7, #2]
 80073be:	4613      	mov	r3, r2
 80073c0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80073c2:	2300      	movs	r3, #0
 80073c4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 80073c6:	2300      	movs	r3, #0
 80073c8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80073d0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80073d2:	e025      	b.n	8007420 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80073d4:	7dfb      	ldrb	r3, [r7, #23]
 80073d6:	221a      	movs	r2, #26
 80073d8:	fb02 f303 	mul.w	r3, r2, r3
 80073dc:	3308      	adds	r3, #8
 80073de:	68fa      	ldr	r2, [r7, #12]
 80073e0:	4413      	add	r3, r2
 80073e2:	3302      	adds	r3, #2
 80073e4:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	795b      	ldrb	r3, [r3, #5]
 80073ea:	78fa      	ldrb	r2, [r7, #3]
 80073ec:	429a      	cmp	r2, r3
 80073ee:	d002      	beq.n	80073f6 <USBH_FindInterface+0x4e>
 80073f0:	78fb      	ldrb	r3, [r7, #3]
 80073f2:	2bff      	cmp	r3, #255	; 0xff
 80073f4:	d111      	bne.n	800741a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80073fa:	78ba      	ldrb	r2, [r7, #2]
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d002      	beq.n	8007406 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007400:	78bb      	ldrb	r3, [r7, #2]
 8007402:	2bff      	cmp	r3, #255	; 0xff
 8007404:	d109      	bne.n	800741a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800740a:	787a      	ldrb	r2, [r7, #1]
 800740c:	429a      	cmp	r2, r3
 800740e:	d002      	beq.n	8007416 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007410:	787b      	ldrb	r3, [r7, #1]
 8007412:	2bff      	cmp	r3, #255	; 0xff
 8007414:	d101      	bne.n	800741a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007416:	7dfb      	ldrb	r3, [r7, #23]
 8007418:	e006      	b.n	8007428 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800741a:	7dfb      	ldrb	r3, [r7, #23]
 800741c:	3301      	adds	r3, #1
 800741e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007420:	7dfb      	ldrb	r3, [r7, #23]
 8007422:	2b01      	cmp	r3, #1
 8007424:	d9d6      	bls.n	80073d4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007426:	23ff      	movs	r3, #255	; 0xff
}
 8007428:	4618      	mov	r0, r3
 800742a:	371c      	adds	r7, #28
 800742c:	46bd      	mov	sp, r7
 800742e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007432:	4770      	bx	lr

08007434 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b082      	sub	sp, #8
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f001 fb81 	bl	8008b44 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8007442:	2101      	movs	r1, #1
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f001 fc98 	bl	8008d7a <USBH_LL_DriverVBUS>

  return USBH_OK;
 800744a:	2300      	movs	r3, #0
}
 800744c:	4618      	mov	r0, r3
 800744e:	3708      	adds	r7, #8
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}

08007454 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b088      	sub	sp, #32
 8007458:	af04      	add	r7, sp, #16
 800745a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800745c:	2302      	movs	r3, #2
 800745e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007460:	2300      	movs	r3, #0
 8007462:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800746a:	b2db      	uxtb	r3, r3
 800746c:	2b01      	cmp	r3, #1
 800746e:	d102      	bne.n	8007476 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2203      	movs	r2, #3
 8007474:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	781b      	ldrb	r3, [r3, #0]
 800747a:	b2db      	uxtb	r3, r3
 800747c:	2b0b      	cmp	r3, #11
 800747e:	f200 81b3 	bhi.w	80077e8 <USBH_Process+0x394>
 8007482:	a201      	add	r2, pc, #4	; (adr r2, 8007488 <USBH_Process+0x34>)
 8007484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007488:	080074b9 	.word	0x080074b9
 800748c:	080074eb 	.word	0x080074eb
 8007490:	08007553 	.word	0x08007553
 8007494:	08007783 	.word	0x08007783
 8007498:	080077e9 	.word	0x080077e9
 800749c:	080075f7 	.word	0x080075f7
 80074a0:	08007729 	.word	0x08007729
 80074a4:	0800762d 	.word	0x0800762d
 80074a8:	0800764d 	.word	0x0800764d
 80074ac:	0800766d 	.word	0x0800766d
 80074b0:	0800769b 	.word	0x0800769b
 80074b4:	0800776b 	.word	0x0800776b
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80074be:	b2db      	uxtb	r3, r3
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	f000 8193 	beq.w	80077ec <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2201      	movs	r2, #1
 80074ca:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80074cc:	20c8      	movs	r0, #200	; 0xc8
 80074ce:	f001 fc9e 	bl	8008e0e <USBH_Delay>
        USBH_LL_ResetPort(phost);
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f001 fb91 	bl	8008bfa <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2200      	movs	r2, #0
 80074dc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2200      	movs	r2, #0
 80074e4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80074e8:	e180      	b.n	80077ec <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80074f0:	2b01      	cmp	r3, #1
 80074f2:	d107      	bne.n	8007504 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2200      	movs	r2, #0
 80074f8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2202      	movs	r2, #2
 8007500:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007502:	e182      	b.n	800780a <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800750a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800750e:	d914      	bls.n	800753a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007516:	3301      	adds	r3, #1
 8007518:	b2da      	uxtb	r2, r3
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007526:	2b03      	cmp	r3, #3
 8007528:	d903      	bls.n	8007532 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	220d      	movs	r2, #13
 800752e:	701a      	strb	r2, [r3, #0]
      break;
 8007530:	e16b      	b.n	800780a <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2200      	movs	r2, #0
 8007536:	701a      	strb	r2, [r3, #0]
      break;
 8007538:	e167      	b.n	800780a <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007540:	f103 020a 	add.w	r2, r3, #10
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800754a:	200a      	movs	r0, #10
 800754c:	f001 fc5f 	bl	8008e0e <USBH_Delay>
      break;
 8007550:	e15b      	b.n	800780a <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007558:	2b00      	cmp	r3, #0
 800755a:	d005      	beq.n	8007568 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007562:	2104      	movs	r1, #4
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007568:	2064      	movs	r0, #100	; 0x64
 800756a:	f001 fc50 	bl	8008e0e <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f001 fb1e 	bl	8008bb0 <USBH_LL_GetSpeed>
 8007574:	4603      	mov	r3, r0
 8007576:	461a      	mov	r2, r3
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2205      	movs	r2, #5
 8007582:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007584:	2100      	movs	r1, #0
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f001 f931 	bl	80087ee <USBH_AllocPipe>
 800758c:	4603      	mov	r3, r0
 800758e:	461a      	mov	r2, r3
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007594:	2180      	movs	r1, #128	; 0x80
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f001 f929 	bl	80087ee <USBH_AllocPipe>
 800759c:	4603      	mov	r3, r0
 800759e:	461a      	mov	r2, r3
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	7919      	ldrb	r1, [r3, #4]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80075b4:	687a      	ldr	r2, [r7, #4]
 80075b6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80075b8:	b292      	uxth	r2, r2
 80075ba:	9202      	str	r2, [sp, #8]
 80075bc:	2200      	movs	r2, #0
 80075be:	9201      	str	r2, [sp, #4]
 80075c0:	9300      	str	r3, [sp, #0]
 80075c2:	4603      	mov	r3, r0
 80075c4:	2280      	movs	r2, #128	; 0x80
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f001 f8e2 	bl	8008790 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	7959      	ldrb	r1, [r3, #5]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80075dc:	687a      	ldr	r2, [r7, #4]
 80075de:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80075e0:	b292      	uxth	r2, r2
 80075e2:	9202      	str	r2, [sp, #8]
 80075e4:	2200      	movs	r2, #0
 80075e6:	9201      	str	r2, [sp, #4]
 80075e8:	9300      	str	r3, [sp, #0]
 80075ea:	4603      	mov	r3, r0
 80075ec:	2200      	movs	r2, #0
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f001 f8ce 	bl	8008790 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80075f4:	e109      	b.n	800780a <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f000 f90c 	bl	8007814 <USBH_HandleEnum>
 80075fc:	4603      	mov	r3, r0
 80075fe:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007600:	7bbb      	ldrb	r3, [r7, #14]
 8007602:	b2db      	uxtb	r3, r3
 8007604:	2b00      	cmp	r3, #0
 8007606:	f040 80f3 	bne.w	80077f0 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2200      	movs	r2, #0
 800760e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007618:	2b01      	cmp	r3, #1
 800761a:	d103      	bne.n	8007624 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2208      	movs	r2, #8
 8007620:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007622:	e0e5      	b.n	80077f0 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2207      	movs	r2, #7
 8007628:	701a      	strb	r2, [r3, #0]
      break;
 800762a:	e0e1      	b.n	80077f0 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007632:	2b00      	cmp	r3, #0
 8007634:	f000 80de 	beq.w	80077f4 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800763e:	2101      	movs	r1, #1
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2208      	movs	r2, #8
 8007648:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800764a:	e0d3      	b.n	80077f4 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007652:	b29b      	uxth	r3, r3
 8007654:	4619      	mov	r1, r3
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f000 fc20 	bl	8007e9c <USBH_SetCfg>
 800765c:	4603      	mov	r3, r0
 800765e:	2b00      	cmp	r3, #0
 8007660:	f040 80ca 	bne.w	80077f8 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2209      	movs	r2, #9
 8007668:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800766a:	e0c5      	b.n	80077f8 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007672:	f003 0320 	and.w	r3, r3, #32
 8007676:	2b00      	cmp	r3, #0
 8007678:	d00b      	beq.n	8007692 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800767a:	2101      	movs	r1, #1
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f000 fc30 	bl	8007ee2 <USBH_SetFeature>
 8007682:	4603      	mov	r3, r0
 8007684:	2b00      	cmp	r3, #0
 8007686:	f040 80b9 	bne.w	80077fc <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	220a      	movs	r2, #10
 800768e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007690:	e0b4      	b.n	80077fc <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	220a      	movs	r2, #10
 8007696:	701a      	strb	r2, [r3, #0]
      break;
 8007698:	e0b0      	b.n	80077fc <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	f000 80ad 	beq.w	8007800 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2200      	movs	r2, #0
 80076aa:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80076ae:	2300      	movs	r3, #0
 80076b0:	73fb      	strb	r3, [r7, #15]
 80076b2:	e016      	b.n	80076e2 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80076b4:	7bfa      	ldrb	r2, [r7, #15]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	32de      	adds	r2, #222	; 0xde
 80076ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076be:	791a      	ldrb	r2, [r3, #4]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80076c6:	429a      	cmp	r2, r3
 80076c8:	d108      	bne.n	80076dc <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 80076ca:	7bfa      	ldrb	r2, [r7, #15]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	32de      	adds	r2, #222	; 0xde
 80076d0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80076da:	e005      	b.n	80076e8 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80076dc:	7bfb      	ldrb	r3, [r7, #15]
 80076de:	3301      	adds	r3, #1
 80076e0:	73fb      	strb	r3, [r7, #15]
 80076e2:	7bfb      	ldrb	r3, [r7, #15]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d0e5      	beq.n	80076b4 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d016      	beq.n	8007720 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80076f8:	689b      	ldr	r3, [r3, #8]
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	4798      	blx	r3
 80076fe:	4603      	mov	r3, r0
 8007700:	2b00      	cmp	r3, #0
 8007702:	d109      	bne.n	8007718 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2206      	movs	r2, #6
 8007708:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007710:	2103      	movs	r1, #3
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007716:	e073      	b.n	8007800 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	220d      	movs	r2, #13
 800771c:	701a      	strb	r2, [r3, #0]
      break;
 800771e:	e06f      	b.n	8007800 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	220d      	movs	r2, #13
 8007724:	701a      	strb	r2, [r3, #0]
      break;
 8007726:	e06b      	b.n	8007800 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800772e:	2b00      	cmp	r3, #0
 8007730:	d017      	beq.n	8007762 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007738:	691b      	ldr	r3, [r3, #16]
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	4798      	blx	r3
 800773e:	4603      	mov	r3, r0
 8007740:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007742:	7bbb      	ldrb	r3, [r7, #14]
 8007744:	b2db      	uxtb	r3, r3
 8007746:	2b00      	cmp	r3, #0
 8007748:	d103      	bne.n	8007752 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	220b      	movs	r2, #11
 800774e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007750:	e058      	b.n	8007804 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8007752:	7bbb      	ldrb	r3, [r7, #14]
 8007754:	b2db      	uxtb	r3, r3
 8007756:	2b02      	cmp	r3, #2
 8007758:	d154      	bne.n	8007804 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	220d      	movs	r2, #13
 800775e:	701a      	strb	r2, [r3, #0]
      break;
 8007760:	e050      	b.n	8007804 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	220d      	movs	r2, #13
 8007766:	701a      	strb	r2, [r3, #0]
      break;
 8007768:	e04c      	b.n	8007804 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007770:	2b00      	cmp	r3, #0
 8007772:	d049      	beq.n	8007808 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800777a:	695b      	ldr	r3, [r3, #20]
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	4798      	blx	r3
      }
      break;
 8007780:	e042      	b.n	8007808 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2200      	movs	r2, #0
 8007786:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f7ff fd72 	bl	8007274 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007796:	2b00      	cmp	r3, #0
 8007798:	d009      	beq.n	80077ae <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80077a0:	68db      	ldr	r3, [r3, #12]
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2200      	movs	r2, #0
 80077aa:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d005      	beq.n	80077c4 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80077be:	2105      	movs	r1, #5
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80077ca:	b2db      	uxtb	r3, r3
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	d107      	bne.n	80077e0 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2200      	movs	r2, #0
 80077d4:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f7ff fe2b 	bl	8007434 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80077de:	e014      	b.n	800780a <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f001 f9af 	bl	8008b44 <USBH_LL_Start>
      break;
 80077e6:	e010      	b.n	800780a <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 80077e8:	bf00      	nop
 80077ea:	e00e      	b.n	800780a <USBH_Process+0x3b6>
      break;
 80077ec:	bf00      	nop
 80077ee:	e00c      	b.n	800780a <USBH_Process+0x3b6>
      break;
 80077f0:	bf00      	nop
 80077f2:	e00a      	b.n	800780a <USBH_Process+0x3b6>
    break;
 80077f4:	bf00      	nop
 80077f6:	e008      	b.n	800780a <USBH_Process+0x3b6>
      break;
 80077f8:	bf00      	nop
 80077fa:	e006      	b.n	800780a <USBH_Process+0x3b6>
      break;
 80077fc:	bf00      	nop
 80077fe:	e004      	b.n	800780a <USBH_Process+0x3b6>
      break;
 8007800:	bf00      	nop
 8007802:	e002      	b.n	800780a <USBH_Process+0x3b6>
      break;
 8007804:	bf00      	nop
 8007806:	e000      	b.n	800780a <USBH_Process+0x3b6>
      break;
 8007808:	bf00      	nop
  }
  return USBH_OK;
 800780a:	2300      	movs	r3, #0
}
 800780c:	4618      	mov	r0, r3
 800780e:	3710      	adds	r7, #16
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}

08007814 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b088      	sub	sp, #32
 8007818:	af04      	add	r7, sp, #16
 800781a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800781c:	2301      	movs	r3, #1
 800781e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007820:	2301      	movs	r3, #1
 8007822:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	785b      	ldrb	r3, [r3, #1]
 8007828:	2b07      	cmp	r3, #7
 800782a:	f200 81c1 	bhi.w	8007bb0 <USBH_HandleEnum+0x39c>
 800782e:	a201      	add	r2, pc, #4	; (adr r2, 8007834 <USBH_HandleEnum+0x20>)
 8007830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007834:	08007855 	.word	0x08007855
 8007838:	08007913 	.word	0x08007913
 800783c:	0800797d 	.word	0x0800797d
 8007840:	08007a0b 	.word	0x08007a0b
 8007844:	08007a75 	.word	0x08007a75
 8007848:	08007ae5 	.word	0x08007ae5
 800784c:	08007b2b 	.word	0x08007b2b
 8007850:	08007b71 	.word	0x08007b71
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007854:	2108      	movs	r1, #8
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f000 fa50 	bl	8007cfc <USBH_Get_DevDesc>
 800785c:	4603      	mov	r3, r0
 800785e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007860:	7bbb      	ldrb	r3, [r7, #14]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d130      	bne.n	80078c8 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2201      	movs	r2, #1
 8007874:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	7919      	ldrb	r1, [r3, #4]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007886:	687a      	ldr	r2, [r7, #4]
 8007888:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800788a:	b292      	uxth	r2, r2
 800788c:	9202      	str	r2, [sp, #8]
 800788e:	2200      	movs	r2, #0
 8007890:	9201      	str	r2, [sp, #4]
 8007892:	9300      	str	r3, [sp, #0]
 8007894:	4603      	mov	r3, r0
 8007896:	2280      	movs	r2, #128	; 0x80
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 ff79 	bl	8008790 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	7959      	ldrb	r1, [r3, #5]
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80078ae:	687a      	ldr	r2, [r7, #4]
 80078b0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80078b2:	b292      	uxth	r2, r2
 80078b4:	9202      	str	r2, [sp, #8]
 80078b6:	2200      	movs	r2, #0
 80078b8:	9201      	str	r2, [sp, #4]
 80078ba:	9300      	str	r3, [sp, #0]
 80078bc:	4603      	mov	r3, r0
 80078be:	2200      	movs	r2, #0
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f000 ff65 	bl	8008790 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80078c6:	e175      	b.n	8007bb4 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80078c8:	7bbb      	ldrb	r3, [r7, #14]
 80078ca:	2b03      	cmp	r3, #3
 80078cc:	f040 8172 	bne.w	8007bb4 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80078d6:	3301      	adds	r3, #1
 80078d8:	b2da      	uxtb	r2, r3
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80078e6:	2b03      	cmp	r3, #3
 80078e8:	d903      	bls.n	80078f2 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	220d      	movs	r2, #13
 80078ee:	701a      	strb	r2, [r3, #0]
      break;
 80078f0:	e160      	b.n	8007bb4 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	795b      	ldrb	r3, [r3, #5]
 80078f6:	4619      	mov	r1, r3
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f000 ff99 	bl	8008830 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	791b      	ldrb	r3, [r3, #4]
 8007902:	4619      	mov	r1, r3
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f000 ff93 	bl	8008830 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2200      	movs	r2, #0
 800790e:	701a      	strb	r2, [r3, #0]
      break;
 8007910:	e150      	b.n	8007bb4 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007912:	2112      	movs	r1, #18
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f000 f9f1 	bl	8007cfc <USBH_Get_DevDesc>
 800791a:	4603      	mov	r3, r0
 800791c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800791e:	7bbb      	ldrb	r3, [r7, #14]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d103      	bne.n	800792c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2202      	movs	r2, #2
 8007928:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800792a:	e145      	b.n	8007bb8 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800792c:	7bbb      	ldrb	r3, [r7, #14]
 800792e:	2b03      	cmp	r3, #3
 8007930:	f040 8142 	bne.w	8007bb8 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800793a:	3301      	adds	r3, #1
 800793c:	b2da      	uxtb	r2, r3
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800794a:	2b03      	cmp	r3, #3
 800794c:	d903      	bls.n	8007956 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	220d      	movs	r2, #13
 8007952:	701a      	strb	r2, [r3, #0]
      break;
 8007954:	e130      	b.n	8007bb8 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	795b      	ldrb	r3, [r3, #5]
 800795a:	4619      	mov	r1, r3
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f000 ff67 	bl	8008830 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	791b      	ldrb	r3, [r3, #4]
 8007966:	4619      	mov	r1, r3
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f000 ff61 	bl	8008830 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2200      	movs	r2, #0
 8007972:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2200      	movs	r2, #0
 8007978:	701a      	strb	r2, [r3, #0]
      break;
 800797a:	e11d      	b.n	8007bb8 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800797c:	2101      	movs	r1, #1
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f000 fa68 	bl	8007e54 <USBH_SetAddress>
 8007984:	4603      	mov	r3, r0
 8007986:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007988:	7bbb      	ldrb	r3, [r7, #14]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d132      	bne.n	80079f4 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800798e:	2002      	movs	r0, #2
 8007990:	f001 fa3d 	bl	8008e0e <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2201      	movs	r2, #1
 8007998:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2203      	movs	r2, #3
 80079a0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	7919      	ldrb	r1, [r3, #4]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80079b2:	687a      	ldr	r2, [r7, #4]
 80079b4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80079b6:	b292      	uxth	r2, r2
 80079b8:	9202      	str	r2, [sp, #8]
 80079ba:	2200      	movs	r2, #0
 80079bc:	9201      	str	r2, [sp, #4]
 80079be:	9300      	str	r3, [sp, #0]
 80079c0:	4603      	mov	r3, r0
 80079c2:	2280      	movs	r2, #128	; 0x80
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f000 fee3 	bl	8008790 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	7959      	ldrb	r1, [r3, #5]
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80079da:	687a      	ldr	r2, [r7, #4]
 80079dc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80079de:	b292      	uxth	r2, r2
 80079e0:	9202      	str	r2, [sp, #8]
 80079e2:	2200      	movs	r2, #0
 80079e4:	9201      	str	r2, [sp, #4]
 80079e6:	9300      	str	r3, [sp, #0]
 80079e8:	4603      	mov	r3, r0
 80079ea:	2200      	movs	r2, #0
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f000 fecf 	bl	8008790 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80079f2:	e0e3      	b.n	8007bbc <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80079f4:	7bbb      	ldrb	r3, [r7, #14]
 80079f6:	2b03      	cmp	r3, #3
 80079f8:	f040 80e0 	bne.w	8007bbc <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	220d      	movs	r2, #13
 8007a00:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2200      	movs	r2, #0
 8007a06:	705a      	strb	r2, [r3, #1]
      break;
 8007a08:	e0d8      	b.n	8007bbc <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007a0a:	2109      	movs	r1, #9
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f000 f99d 	bl	8007d4c <USBH_Get_CfgDesc>
 8007a12:	4603      	mov	r3, r0
 8007a14:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007a16:	7bbb      	ldrb	r3, [r7, #14]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d103      	bne.n	8007a24 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2204      	movs	r2, #4
 8007a20:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007a22:	e0cd      	b.n	8007bc0 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a24:	7bbb      	ldrb	r3, [r7, #14]
 8007a26:	2b03      	cmp	r3, #3
 8007a28:	f040 80ca 	bne.w	8007bc0 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007a32:	3301      	adds	r3, #1
 8007a34:	b2da      	uxtb	r2, r3
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007a42:	2b03      	cmp	r3, #3
 8007a44:	d903      	bls.n	8007a4e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	220d      	movs	r2, #13
 8007a4a:	701a      	strb	r2, [r3, #0]
      break;
 8007a4c:	e0b8      	b.n	8007bc0 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	795b      	ldrb	r3, [r3, #5]
 8007a52:	4619      	mov	r1, r3
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f000 feeb 	bl	8008830 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	791b      	ldrb	r3, [r3, #4]
 8007a5e:	4619      	mov	r1, r3
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f000 fee5 	bl	8008830 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	701a      	strb	r2, [r3, #0]
      break;
 8007a72:	e0a5      	b.n	8007bc0 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007a7a:	4619      	mov	r1, r3
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f000 f965 	bl	8007d4c <USBH_Get_CfgDesc>
 8007a82:	4603      	mov	r3, r0
 8007a84:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007a86:	7bbb      	ldrb	r3, [r7, #14]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d103      	bne.n	8007a94 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2205      	movs	r2, #5
 8007a90:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007a92:	e097      	b.n	8007bc4 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a94:	7bbb      	ldrb	r3, [r7, #14]
 8007a96:	2b03      	cmp	r3, #3
 8007a98:	f040 8094 	bne.w	8007bc4 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007aa2:	3301      	adds	r3, #1
 8007aa4:	b2da      	uxtb	r2, r3
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007ab2:	2b03      	cmp	r3, #3
 8007ab4:	d903      	bls.n	8007abe <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	220d      	movs	r2, #13
 8007aba:	701a      	strb	r2, [r3, #0]
      break;
 8007abc:	e082      	b.n	8007bc4 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	795b      	ldrb	r3, [r3, #5]
 8007ac2:	4619      	mov	r1, r3
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f000 feb3 	bl	8008830 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	791b      	ldrb	r3, [r3, #4]
 8007ace:	4619      	mov	r1, r3
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f000 fead 	bl	8008830 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2200      	movs	r2, #0
 8007ae0:	701a      	strb	r2, [r3, #0]
      break;
 8007ae2:	e06f      	b.n	8007bc4 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d019      	beq.n	8007b22 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007afa:	23ff      	movs	r3, #255	; 0xff
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f000 f949 	bl	8007d94 <USBH_Get_StringDesc>
 8007b02:	4603      	mov	r3, r0
 8007b04:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007b06:	7bbb      	ldrb	r3, [r7, #14]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d103      	bne.n	8007b14 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2206      	movs	r2, #6
 8007b10:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007b12:	e059      	b.n	8007bc8 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b14:	7bbb      	ldrb	r3, [r7, #14]
 8007b16:	2b03      	cmp	r3, #3
 8007b18:	d156      	bne.n	8007bc8 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2206      	movs	r2, #6
 8007b1e:	705a      	strb	r2, [r3, #1]
      break;
 8007b20:	e052      	b.n	8007bc8 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2206      	movs	r2, #6
 8007b26:	705a      	strb	r2, [r3, #1]
      break;
 8007b28:	e04e      	b.n	8007bc8 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d019      	beq.n	8007b68 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007b40:	23ff      	movs	r3, #255	; 0xff
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f000 f926 	bl	8007d94 <USBH_Get_StringDesc>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007b4c:	7bbb      	ldrb	r3, [r7, #14]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d103      	bne.n	8007b5a <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2207      	movs	r2, #7
 8007b56:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007b58:	e038      	b.n	8007bcc <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b5a:	7bbb      	ldrb	r3, [r7, #14]
 8007b5c:	2b03      	cmp	r3, #3
 8007b5e:	d135      	bne.n	8007bcc <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2207      	movs	r2, #7
 8007b64:	705a      	strb	r2, [r3, #1]
      break;
 8007b66:	e031      	b.n	8007bcc <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2207      	movs	r2, #7
 8007b6c:	705a      	strb	r2, [r3, #1]
      break;
 8007b6e:	e02d      	b.n	8007bcc <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d017      	beq.n	8007baa <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007b86:	23ff      	movs	r3, #255	; 0xff
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f000 f903 	bl	8007d94 <USBH_Get_StringDesc>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007b92:	7bbb      	ldrb	r3, [r7, #14]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d102      	bne.n	8007b9e <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007b98:	2300      	movs	r3, #0
 8007b9a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007b9c:	e018      	b.n	8007bd0 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b9e:	7bbb      	ldrb	r3, [r7, #14]
 8007ba0:	2b03      	cmp	r3, #3
 8007ba2:	d115      	bne.n	8007bd0 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	73fb      	strb	r3, [r7, #15]
      break;
 8007ba8:	e012      	b.n	8007bd0 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007baa:	2300      	movs	r3, #0
 8007bac:	73fb      	strb	r3, [r7, #15]
      break;
 8007bae:	e00f      	b.n	8007bd0 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007bb0:	bf00      	nop
 8007bb2:	e00e      	b.n	8007bd2 <USBH_HandleEnum+0x3be>
      break;
 8007bb4:	bf00      	nop
 8007bb6:	e00c      	b.n	8007bd2 <USBH_HandleEnum+0x3be>
      break;
 8007bb8:	bf00      	nop
 8007bba:	e00a      	b.n	8007bd2 <USBH_HandleEnum+0x3be>
      break;
 8007bbc:	bf00      	nop
 8007bbe:	e008      	b.n	8007bd2 <USBH_HandleEnum+0x3be>
      break;
 8007bc0:	bf00      	nop
 8007bc2:	e006      	b.n	8007bd2 <USBH_HandleEnum+0x3be>
      break;
 8007bc4:	bf00      	nop
 8007bc6:	e004      	b.n	8007bd2 <USBH_HandleEnum+0x3be>
      break;
 8007bc8:	bf00      	nop
 8007bca:	e002      	b.n	8007bd2 <USBH_HandleEnum+0x3be>
      break;
 8007bcc:	bf00      	nop
 8007bce:	e000      	b.n	8007bd2 <USBH_HandleEnum+0x3be>
      break;
 8007bd0:	bf00      	nop
  }
  return Status;
 8007bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	3710      	adds	r7, #16
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}

08007bdc <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b083      	sub	sp, #12
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
 8007be4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	683a      	ldr	r2, [r7, #0]
 8007bea:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007bee:	bf00      	nop
 8007bf0:	370c      	adds	r7, #12
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf8:	4770      	bx	lr

08007bfa <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007bfa:	b580      	push	{r7, lr}
 8007bfc:	b082      	sub	sp, #8
 8007bfe:	af00      	add	r7, sp, #0
 8007c00:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007c08:	1c5a      	adds	r2, r3, #1
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f000 f804 	bl	8007c1e <USBH_HandleSof>
}
 8007c16:	bf00      	nop
 8007c18:	3708      	adds	r7, #8
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}

08007c1e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007c1e:	b580      	push	{r7, lr}
 8007c20:	b082      	sub	sp, #8
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	781b      	ldrb	r3, [r3, #0]
 8007c2a:	b2db      	uxtb	r3, r3
 8007c2c:	2b0b      	cmp	r3, #11
 8007c2e:	d10a      	bne.n	8007c46 <USBH_HandleSof+0x28>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d005      	beq.n	8007c46 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c40:	699b      	ldr	r3, [r3, #24]
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	4798      	blx	r3
  }
}
 8007c46:	bf00      	nop
 8007c48:	3708      	adds	r7, #8
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}

08007c4e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007c4e:	b480      	push	{r7}
 8007c50:	b083      	sub	sp, #12
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2201      	movs	r2, #1
 8007c5a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8007c5e:	bf00      	nop
}
 8007c60:	370c      	adds	r7, #12
 8007c62:	46bd      	mov	sp, r7
 8007c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c68:	4770      	bx	lr

08007c6a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007c6a:	b480      	push	{r7}
 8007c6c:	b083      	sub	sp, #12
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2200      	movs	r2, #0
 8007c76:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007c7a:	bf00      	nop
}
 8007c7c:	370c      	adds	r7, #12
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c84:	4770      	bx	lr

08007c86 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007c86:	b480      	push	{r7}
 8007c88:	b083      	sub	sp, #12
 8007c8a:	af00      	add	r7, sp, #0
 8007c8c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2201      	movs	r2, #1
 8007c92:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007ca6:	2300      	movs	r3, #0
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	370c      	adds	r7, #12
 8007cac:	46bd      	mov	sp, r7
 8007cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb2:	4770      	bx	lr

08007cb4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b082      	sub	sp, #8
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2201      	movs	r2, #1
 8007cc0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f000 ff50 	bl	8008b7a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	791b      	ldrb	r3, [r3, #4]
 8007cde:	4619      	mov	r1, r3
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f000 fda5 	bl	8008830 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	795b      	ldrb	r3, [r3, #5]
 8007cea:	4619      	mov	r1, r3
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f000 fd9f 	bl	8008830 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007cf2:	2300      	movs	r3, #0
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	3708      	adds	r7, #8
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}

08007cfc <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b086      	sub	sp, #24
 8007d00:	af02      	add	r7, sp, #8
 8007d02:	6078      	str	r0, [r7, #4]
 8007d04:	460b      	mov	r3, r1
 8007d06:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007d0e:	78fb      	ldrb	r3, [r7, #3]
 8007d10:	b29b      	uxth	r3, r3
 8007d12:	9300      	str	r3, [sp, #0]
 8007d14:	4613      	mov	r3, r2
 8007d16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007d1a:	2100      	movs	r1, #0
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f000 f864 	bl	8007dea <USBH_GetDescriptor>
 8007d22:	4603      	mov	r3, r0
 8007d24:	73fb      	strb	r3, [r7, #15]
 8007d26:	7bfb      	ldrb	r3, [r7, #15]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d10a      	bne.n	8007d42 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007d38:	78fa      	ldrb	r2, [r7, #3]
 8007d3a:	b292      	uxth	r2, r2
 8007d3c:	4619      	mov	r1, r3
 8007d3e:	f000 f918 	bl	8007f72 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007d42:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	3710      	adds	r7, #16
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}

08007d4c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b086      	sub	sp, #24
 8007d50:	af02      	add	r7, sp, #8
 8007d52:	6078      	str	r0, [r7, #4]
 8007d54:	460b      	mov	r3, r1
 8007d56:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	331c      	adds	r3, #28
 8007d5c:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007d5e:	887b      	ldrh	r3, [r7, #2]
 8007d60:	9300      	str	r3, [sp, #0]
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d68:	2100      	movs	r1, #0
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f000 f83d 	bl	8007dea <USBH_GetDescriptor>
 8007d70:	4603      	mov	r3, r0
 8007d72:	72fb      	strb	r3, [r7, #11]
 8007d74:	7afb      	ldrb	r3, [r7, #11]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d107      	bne.n	8007d8a <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007d80:	887a      	ldrh	r2, [r7, #2]
 8007d82:	68f9      	ldr	r1, [r7, #12]
 8007d84:	4618      	mov	r0, r3
 8007d86:	f000 f964 	bl	8008052 <USBH_ParseCfgDesc>
  }

  return status;
 8007d8a:	7afb      	ldrb	r3, [r7, #11]
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3710      	adds	r7, #16
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}

08007d94 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b088      	sub	sp, #32
 8007d98:	af02      	add	r7, sp, #8
 8007d9a:	60f8      	str	r0, [r7, #12]
 8007d9c:	607a      	str	r2, [r7, #4]
 8007d9e:	461a      	mov	r2, r3
 8007da0:	460b      	mov	r3, r1
 8007da2:	72fb      	strb	r3, [r7, #11]
 8007da4:	4613      	mov	r3, r2
 8007da6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8007da8:	7afb      	ldrb	r3, [r7, #11]
 8007daa:	b29b      	uxth	r3, r3
 8007dac:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007db0:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007db8:	893b      	ldrh	r3, [r7, #8]
 8007dba:	9300      	str	r3, [sp, #0]
 8007dbc:	460b      	mov	r3, r1
 8007dbe:	2100      	movs	r1, #0
 8007dc0:	68f8      	ldr	r0, [r7, #12]
 8007dc2:	f000 f812 	bl	8007dea <USBH_GetDescriptor>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	75fb      	strb	r3, [r7, #23]
 8007dca:	7dfb      	ldrb	r3, [r7, #23]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d107      	bne.n	8007de0 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007dd6:	893a      	ldrh	r2, [r7, #8]
 8007dd8:	6879      	ldr	r1, [r7, #4]
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f000 fa37 	bl	800824e <USBH_ParseStringDesc>
  }

  return status;
 8007de0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	3718      	adds	r7, #24
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}

08007dea <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007dea:	b580      	push	{r7, lr}
 8007dec:	b084      	sub	sp, #16
 8007dee:	af00      	add	r7, sp, #0
 8007df0:	60f8      	str	r0, [r7, #12]
 8007df2:	607b      	str	r3, [r7, #4]
 8007df4:	460b      	mov	r3, r1
 8007df6:	72fb      	strb	r3, [r7, #11]
 8007df8:	4613      	mov	r3, r2
 8007dfa:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	789b      	ldrb	r3, [r3, #2]
 8007e00:	2b01      	cmp	r3, #1
 8007e02:	d11c      	bne.n	8007e3e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007e04:	7afb      	ldrb	r3, [r7, #11]
 8007e06:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007e0a:	b2da      	uxtb	r2, r3
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	2206      	movs	r2, #6
 8007e14:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	893a      	ldrh	r2, [r7, #8]
 8007e1a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007e1c:	893b      	ldrh	r3, [r7, #8]
 8007e1e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007e22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e26:	d104      	bne.n	8007e32 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	f240 4209 	movw	r2, #1033	; 0x409
 8007e2e:	829a      	strh	r2, [r3, #20]
 8007e30:	e002      	b.n	8007e38 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	2200      	movs	r2, #0
 8007e36:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	8b3a      	ldrh	r2, [r7, #24]
 8007e3c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007e3e:	8b3b      	ldrh	r3, [r7, #24]
 8007e40:	461a      	mov	r2, r3
 8007e42:	6879      	ldr	r1, [r7, #4]
 8007e44:	68f8      	ldr	r0, [r7, #12]
 8007e46:	f000 fa50 	bl	80082ea <USBH_CtlReq>
 8007e4a:	4603      	mov	r3, r0
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	3710      	adds	r7, #16
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}

08007e54 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b082      	sub	sp, #8
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
 8007e5c:	460b      	mov	r3, r1
 8007e5e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	789b      	ldrb	r3, [r3, #2]
 8007e64:	2b01      	cmp	r3, #1
 8007e66:	d10f      	bne.n	8007e88 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2205      	movs	r2, #5
 8007e72:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007e74:	78fb      	ldrb	r3, [r7, #3]
 8007e76:	b29a      	uxth	r2, r3
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2200      	movs	r2, #0
 8007e86:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007e88:	2200      	movs	r2, #0
 8007e8a:	2100      	movs	r1, #0
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f000 fa2c 	bl	80082ea <USBH_CtlReq>
 8007e92:	4603      	mov	r3, r0
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3708      	adds	r7, #8
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}

08007e9c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b082      	sub	sp, #8
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
 8007ea4:	460b      	mov	r3, r1
 8007ea6:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	789b      	ldrb	r3, [r3, #2]
 8007eac:	2b01      	cmp	r3, #1
 8007eae:	d10e      	bne.n	8007ece <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2209      	movs	r2, #9
 8007eba:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	887a      	ldrh	r2, [r7, #2]
 8007ec0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2200      	movs	r2, #0
 8007ecc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007ece:	2200      	movs	r2, #0
 8007ed0:	2100      	movs	r1, #0
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f000 fa09 	bl	80082ea <USBH_CtlReq>
 8007ed8:	4603      	mov	r3, r0
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	3708      	adds	r7, #8
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}

08007ee2 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007ee2:	b580      	push	{r7, lr}
 8007ee4:	b082      	sub	sp, #8
 8007ee6:	af00      	add	r7, sp, #0
 8007ee8:	6078      	str	r0, [r7, #4]
 8007eea:	460b      	mov	r3, r1
 8007eec:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	789b      	ldrb	r3, [r3, #2]
 8007ef2:	2b01      	cmp	r3, #1
 8007ef4:	d10f      	bne.n	8007f16 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2203      	movs	r2, #3
 8007f00:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007f02:	78fb      	ldrb	r3, [r7, #3]
 8007f04:	b29a      	uxth	r2, r3
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2200      	movs	r2, #0
 8007f14:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007f16:	2200      	movs	r2, #0
 8007f18:	2100      	movs	r1, #0
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f000 f9e5 	bl	80082ea <USBH_CtlReq>
 8007f20:	4603      	mov	r3, r0
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	3708      	adds	r7, #8
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}

08007f2a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007f2a:	b580      	push	{r7, lr}
 8007f2c:	b082      	sub	sp, #8
 8007f2e:	af00      	add	r7, sp, #0
 8007f30:	6078      	str	r0, [r7, #4]
 8007f32:	460b      	mov	r3, r1
 8007f34:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	789b      	ldrb	r3, [r3, #2]
 8007f3a:	2b01      	cmp	r3, #1
 8007f3c:	d10f      	bne.n	8007f5e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2202      	movs	r2, #2
 8007f42:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2201      	movs	r2, #1
 8007f48:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007f50:	78fb      	ldrb	r3, [r7, #3]
 8007f52:	b29a      	uxth	r2, r3
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8007f5e:	2200      	movs	r2, #0
 8007f60:	2100      	movs	r1, #0
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f000 f9c1 	bl	80082ea <USBH_CtlReq>
 8007f68:	4603      	mov	r3, r0
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	3708      	adds	r7, #8
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}

08007f72 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007f72:	b480      	push	{r7}
 8007f74:	b085      	sub	sp, #20
 8007f76:	af00      	add	r7, sp, #0
 8007f78:	60f8      	str	r0, [r7, #12]
 8007f7a:	60b9      	str	r1, [r7, #8]
 8007f7c:	4613      	mov	r3, r2
 8007f7e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	781a      	ldrb	r2, [r3, #0]
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	785a      	ldrb	r2, [r3, #1]
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	3302      	adds	r3, #2
 8007f94:	781b      	ldrb	r3, [r3, #0]
 8007f96:	b29a      	uxth	r2, r3
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	3303      	adds	r3, #3
 8007f9c:	781b      	ldrb	r3, [r3, #0]
 8007f9e:	b29b      	uxth	r3, r3
 8007fa0:	021b      	lsls	r3, r3, #8
 8007fa2:	b29b      	uxth	r3, r3
 8007fa4:	4313      	orrs	r3, r2
 8007fa6:	b29a      	uxth	r2, r3
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	791a      	ldrb	r2, [r3, #4]
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	795a      	ldrb	r2, [r3, #5]
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	799a      	ldrb	r2, [r3, #6]
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	79da      	ldrb	r2, [r3, #7]
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8007fcc:	88fb      	ldrh	r3, [r7, #6]
 8007fce:	2b08      	cmp	r3, #8
 8007fd0:	d939      	bls.n	8008046 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	3308      	adds	r3, #8
 8007fd6:	781b      	ldrb	r3, [r3, #0]
 8007fd8:	b29a      	uxth	r2, r3
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	3309      	adds	r3, #9
 8007fde:	781b      	ldrb	r3, [r3, #0]
 8007fe0:	b29b      	uxth	r3, r3
 8007fe2:	021b      	lsls	r3, r3, #8
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	b29a      	uxth	r2, r3
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	330a      	adds	r3, #10
 8007ff2:	781b      	ldrb	r3, [r3, #0]
 8007ff4:	b29a      	uxth	r2, r3
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	330b      	adds	r3, #11
 8007ffa:	781b      	ldrb	r3, [r3, #0]
 8007ffc:	b29b      	uxth	r3, r3
 8007ffe:	021b      	lsls	r3, r3, #8
 8008000:	b29b      	uxth	r3, r3
 8008002:	4313      	orrs	r3, r2
 8008004:	b29a      	uxth	r2, r3
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	330c      	adds	r3, #12
 800800e:	781b      	ldrb	r3, [r3, #0]
 8008010:	b29a      	uxth	r2, r3
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	330d      	adds	r3, #13
 8008016:	781b      	ldrb	r3, [r3, #0]
 8008018:	b29b      	uxth	r3, r3
 800801a:	021b      	lsls	r3, r3, #8
 800801c:	b29b      	uxth	r3, r3
 800801e:	4313      	orrs	r3, r2
 8008020:	b29a      	uxth	r2, r3
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	7b9a      	ldrb	r2, [r3, #14]
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	7bda      	ldrb	r2, [r3, #15]
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	7c1a      	ldrb	r2, [r3, #16]
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	7c5a      	ldrb	r2, [r3, #17]
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	745a      	strb	r2, [r3, #17]
  }
}
 8008046:	bf00      	nop
 8008048:	3714      	adds	r7, #20
 800804a:	46bd      	mov	sp, r7
 800804c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008050:	4770      	bx	lr

08008052 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8008052:	b580      	push	{r7, lr}
 8008054:	b08a      	sub	sp, #40	; 0x28
 8008056:	af00      	add	r7, sp, #0
 8008058:	60f8      	str	r0, [r7, #12]
 800805a:	60b9      	str	r1, [r7, #8]
 800805c:	4613      	mov	r3, r2
 800805e:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008064:	2300      	movs	r3, #0
 8008066:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800806a:	2300      	movs	r3, #0
 800806c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	781a      	ldrb	r2, [r3, #0]
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	785a      	ldrb	r2, [r3, #1]
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	3302      	adds	r3, #2
 8008088:	781b      	ldrb	r3, [r3, #0]
 800808a:	b29a      	uxth	r2, r3
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	3303      	adds	r3, #3
 8008090:	781b      	ldrb	r3, [r3, #0]
 8008092:	b29b      	uxth	r3, r3
 8008094:	021b      	lsls	r3, r3, #8
 8008096:	b29b      	uxth	r3, r3
 8008098:	4313      	orrs	r3, r2
 800809a:	b29a      	uxth	r2, r3
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	791a      	ldrb	r2, [r3, #4]
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	795a      	ldrb	r2, [r3, #5]
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	799a      	ldrb	r2, [r3, #6]
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	79da      	ldrb	r2, [r3, #7]
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	7a1a      	ldrb	r2, [r3, #8]
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80080c8:	88fb      	ldrh	r3, [r7, #6]
 80080ca:	2b09      	cmp	r3, #9
 80080cc:	d95f      	bls.n	800818e <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 80080ce:	2309      	movs	r3, #9
 80080d0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 80080d2:	2300      	movs	r3, #0
 80080d4:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80080d6:	e051      	b.n	800817c <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80080d8:	f107 0316 	add.w	r3, r7, #22
 80080dc:	4619      	mov	r1, r3
 80080de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80080e0:	f000 f8e8 	bl	80082b4 <USBH_GetNextDesc>
 80080e4:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 80080e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e8:	785b      	ldrb	r3, [r3, #1]
 80080ea:	2b04      	cmp	r3, #4
 80080ec:	d146      	bne.n	800817c <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 80080ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80080f2:	221a      	movs	r2, #26
 80080f4:	fb02 f303 	mul.w	r3, r2, r3
 80080f8:	3308      	adds	r3, #8
 80080fa:	68fa      	ldr	r2, [r7, #12]
 80080fc:	4413      	add	r3, r2
 80080fe:	3302      	adds	r3, #2
 8008100:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008102:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008104:	69f8      	ldr	r0, [r7, #28]
 8008106:	f000 f846 	bl	8008196 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800810a:	2300      	movs	r3, #0
 800810c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8008110:	2300      	movs	r3, #0
 8008112:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008114:	e022      	b.n	800815c <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008116:	f107 0316 	add.w	r3, r7, #22
 800811a:	4619      	mov	r1, r3
 800811c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800811e:	f000 f8c9 	bl	80082b4 <USBH_GetNextDesc>
 8008122:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8008124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008126:	785b      	ldrb	r3, [r3, #1]
 8008128:	2b05      	cmp	r3, #5
 800812a:	d117      	bne.n	800815c <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800812c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008130:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008134:	3201      	adds	r2, #1
 8008136:	00d2      	lsls	r2, r2, #3
 8008138:	211a      	movs	r1, #26
 800813a:	fb01 f303 	mul.w	r3, r1, r3
 800813e:	4413      	add	r3, r2
 8008140:	3308      	adds	r3, #8
 8008142:	68fa      	ldr	r2, [r7, #12]
 8008144:	4413      	add	r3, r2
 8008146:	3304      	adds	r3, #4
 8008148:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800814a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800814c:	69b8      	ldr	r0, [r7, #24]
 800814e:	f000 f851 	bl	80081f4 <USBH_ParseEPDesc>
            ep_ix++;
 8008152:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008156:	3301      	adds	r3, #1
 8008158:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800815c:	69fb      	ldr	r3, [r7, #28]
 800815e:	791b      	ldrb	r3, [r3, #4]
 8008160:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008164:	429a      	cmp	r2, r3
 8008166:	d204      	bcs.n	8008172 <USBH_ParseCfgDesc+0x120>
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	885a      	ldrh	r2, [r3, #2]
 800816c:	8afb      	ldrh	r3, [r7, #22]
 800816e:	429a      	cmp	r2, r3
 8008170:	d8d1      	bhi.n	8008116 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8008172:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008176:	3301      	adds	r3, #1
 8008178:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800817c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008180:	2b01      	cmp	r3, #1
 8008182:	d804      	bhi.n	800818e <USBH_ParseCfgDesc+0x13c>
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	885a      	ldrh	r2, [r3, #2]
 8008188:	8afb      	ldrh	r3, [r7, #22]
 800818a:	429a      	cmp	r2, r3
 800818c:	d8a4      	bhi.n	80080d8 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800818e:	bf00      	nop
 8008190:	3728      	adds	r7, #40	; 0x28
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}

08008196 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008196:	b480      	push	{r7}
 8008198:	b083      	sub	sp, #12
 800819a:	af00      	add	r7, sp, #0
 800819c:	6078      	str	r0, [r7, #4]
 800819e:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	781a      	ldrb	r2, [r3, #0]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	785a      	ldrb	r2, [r3, #1]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	789a      	ldrb	r2, [r3, #2]
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	78da      	ldrb	r2, [r3, #3]
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	791a      	ldrb	r2, [r3, #4]
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	795a      	ldrb	r2, [r3, #5]
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	799a      	ldrb	r2, [r3, #6]
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	79da      	ldrb	r2, [r3, #7]
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	7a1a      	ldrb	r2, [r3, #8]
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	721a      	strb	r2, [r3, #8]
}
 80081e8:	bf00      	nop
 80081ea:	370c      	adds	r7, #12
 80081ec:	46bd      	mov	sp, r7
 80081ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f2:	4770      	bx	lr

080081f4 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b083      	sub	sp, #12
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
 80081fc:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	781a      	ldrb	r2, [r3, #0]
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	785a      	ldrb	r2, [r3, #1]
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	789a      	ldrb	r2, [r3, #2]
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	78da      	ldrb	r2, [r3, #3]
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	3304      	adds	r3, #4
 8008222:	781b      	ldrb	r3, [r3, #0]
 8008224:	b29a      	uxth	r2, r3
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	3305      	adds	r3, #5
 800822a:	781b      	ldrb	r3, [r3, #0]
 800822c:	b29b      	uxth	r3, r3
 800822e:	021b      	lsls	r3, r3, #8
 8008230:	b29b      	uxth	r3, r3
 8008232:	4313      	orrs	r3, r2
 8008234:	b29a      	uxth	r2, r3
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	799a      	ldrb	r2, [r3, #6]
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	719a      	strb	r2, [r3, #6]
}
 8008242:	bf00      	nop
 8008244:	370c      	adds	r7, #12
 8008246:	46bd      	mov	sp, r7
 8008248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824c:	4770      	bx	lr

0800824e <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800824e:	b480      	push	{r7}
 8008250:	b087      	sub	sp, #28
 8008252:	af00      	add	r7, sp, #0
 8008254:	60f8      	str	r0, [r7, #12]
 8008256:	60b9      	str	r1, [r7, #8]
 8008258:	4613      	mov	r3, r2
 800825a:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	3301      	adds	r3, #1
 8008260:	781b      	ldrb	r3, [r3, #0]
 8008262:	2b03      	cmp	r3, #3
 8008264:	d120      	bne.n	80082a8 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	781b      	ldrb	r3, [r3, #0]
 800826a:	1e9a      	subs	r2, r3, #2
 800826c:	88fb      	ldrh	r3, [r7, #6]
 800826e:	4293      	cmp	r3, r2
 8008270:	bf28      	it	cs
 8008272:	4613      	movcs	r3, r2
 8008274:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	3302      	adds	r3, #2
 800827a:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800827c:	2300      	movs	r3, #0
 800827e:	82fb      	strh	r3, [r7, #22]
 8008280:	e00b      	b.n	800829a <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008282:	8afb      	ldrh	r3, [r7, #22]
 8008284:	68fa      	ldr	r2, [r7, #12]
 8008286:	4413      	add	r3, r2
 8008288:	781a      	ldrb	r2, [r3, #0]
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	701a      	strb	r2, [r3, #0]
      pdest++;
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	3301      	adds	r3, #1
 8008292:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008294:	8afb      	ldrh	r3, [r7, #22]
 8008296:	3302      	adds	r3, #2
 8008298:	82fb      	strh	r3, [r7, #22]
 800829a:	8afa      	ldrh	r2, [r7, #22]
 800829c:	8abb      	ldrh	r3, [r7, #20]
 800829e:	429a      	cmp	r2, r3
 80082a0:	d3ef      	bcc.n	8008282 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	2200      	movs	r2, #0
 80082a6:	701a      	strb	r2, [r3, #0]
  }
}
 80082a8:	bf00      	nop
 80082aa:	371c      	adds	r7, #28
 80082ac:	46bd      	mov	sp, r7
 80082ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b2:	4770      	bx	lr

080082b4 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80082b4:	b480      	push	{r7}
 80082b6:	b085      	sub	sp, #20
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
 80082bc:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	881a      	ldrh	r2, [r3, #0]
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	781b      	ldrb	r3, [r3, #0]
 80082c6:	b29b      	uxth	r3, r3
 80082c8:	4413      	add	r3, r2
 80082ca:	b29a      	uxth	r2, r3
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	781b      	ldrb	r3, [r3, #0]
 80082d4:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	4413      	add	r3, r2
 80082da:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80082dc:	68fb      	ldr	r3, [r7, #12]
}
 80082de:	4618      	mov	r0, r3
 80082e0:	3714      	adds	r7, #20
 80082e2:	46bd      	mov	sp, r7
 80082e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e8:	4770      	bx	lr

080082ea <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80082ea:	b580      	push	{r7, lr}
 80082ec:	b086      	sub	sp, #24
 80082ee:	af00      	add	r7, sp, #0
 80082f0:	60f8      	str	r0, [r7, #12]
 80082f2:	60b9      	str	r1, [r7, #8]
 80082f4:	4613      	mov	r3, r2
 80082f6:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80082f8:	2301      	movs	r3, #1
 80082fa:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	789b      	ldrb	r3, [r3, #2]
 8008300:	2b01      	cmp	r3, #1
 8008302:	d002      	beq.n	800830a <USBH_CtlReq+0x20>
 8008304:	2b02      	cmp	r3, #2
 8008306:	d00f      	beq.n	8008328 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008308:	e027      	b.n	800835a <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	68ba      	ldr	r2, [r7, #8]
 800830e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	88fa      	ldrh	r2, [r7, #6]
 8008314:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	2201      	movs	r2, #1
 800831a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	2202      	movs	r2, #2
 8008320:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008322:	2301      	movs	r3, #1
 8008324:	75fb      	strb	r3, [r7, #23]
      break;
 8008326:	e018      	b.n	800835a <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008328:	68f8      	ldr	r0, [r7, #12]
 800832a:	f000 f81b 	bl	8008364 <USBH_HandleControl>
 800832e:	4603      	mov	r3, r0
 8008330:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008332:	7dfb      	ldrb	r3, [r7, #23]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d002      	beq.n	800833e <USBH_CtlReq+0x54>
 8008338:	7dfb      	ldrb	r3, [r7, #23]
 800833a:	2b03      	cmp	r3, #3
 800833c:	d106      	bne.n	800834c <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	2201      	movs	r2, #1
 8008342:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	2200      	movs	r2, #0
 8008348:	761a      	strb	r2, [r3, #24]
      break;
 800834a:	e005      	b.n	8008358 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800834c:	7dfb      	ldrb	r3, [r7, #23]
 800834e:	2b02      	cmp	r3, #2
 8008350:	d102      	bne.n	8008358 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	2201      	movs	r2, #1
 8008356:	709a      	strb	r2, [r3, #2]
      break;
 8008358:	bf00      	nop
  }
  return status;
 800835a:	7dfb      	ldrb	r3, [r7, #23]
}
 800835c:	4618      	mov	r0, r3
 800835e:	3718      	adds	r7, #24
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}

08008364 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b086      	sub	sp, #24
 8008368:	af02      	add	r7, sp, #8
 800836a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800836c:	2301      	movs	r3, #1
 800836e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008370:	2300      	movs	r3, #0
 8008372:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	7e1b      	ldrb	r3, [r3, #24]
 8008378:	3b01      	subs	r3, #1
 800837a:	2b0a      	cmp	r3, #10
 800837c:	f200 8158 	bhi.w	8008630 <USBH_HandleControl+0x2cc>
 8008380:	a201      	add	r2, pc, #4	; (adr r2, 8008388 <USBH_HandleControl+0x24>)
 8008382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008386:	bf00      	nop
 8008388:	080083b5 	.word	0x080083b5
 800838c:	080083cf 	.word	0x080083cf
 8008390:	08008439 	.word	0x08008439
 8008394:	0800845f 	.word	0x0800845f
 8008398:	08008497 	.word	0x08008497
 800839c:	080084c3 	.word	0x080084c3
 80083a0:	08008515 	.word	0x08008515
 80083a4:	08008537 	.word	0x08008537
 80083a8:	08008573 	.word	0x08008573
 80083ac:	0800859b 	.word	0x0800859b
 80083b0:	080085d9 	.word	0x080085d9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f103 0110 	add.w	r1, r3, #16
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	795b      	ldrb	r3, [r3, #5]
 80083be:	461a      	mov	r2, r3
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f000 f945 	bl	8008650 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2202      	movs	r2, #2
 80083ca:	761a      	strb	r2, [r3, #24]
      break;
 80083cc:	e13b      	b.n	8008646 <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	795b      	ldrb	r3, [r3, #5]
 80083d2:	4619      	mov	r1, r3
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f000 fcbd 	bl	8008d54 <USBH_LL_GetURBState>
 80083da:	4603      	mov	r3, r0
 80083dc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80083de:	7bbb      	ldrb	r3, [r7, #14]
 80083e0:	2b01      	cmp	r3, #1
 80083e2:	d11e      	bne.n	8008422 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	7c1b      	ldrb	r3, [r3, #16]
 80083e8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80083ec:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	8adb      	ldrh	r3, [r3, #22]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d00a      	beq.n	800840c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80083f6:	7b7b      	ldrb	r3, [r7, #13]
 80083f8:	2b80      	cmp	r3, #128	; 0x80
 80083fa:	d103      	bne.n	8008404 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2203      	movs	r2, #3
 8008400:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008402:	e117      	b.n	8008634 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2205      	movs	r2, #5
 8008408:	761a      	strb	r2, [r3, #24]
      break;
 800840a:	e113      	b.n	8008634 <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 800840c:	7b7b      	ldrb	r3, [r7, #13]
 800840e:	2b80      	cmp	r3, #128	; 0x80
 8008410:	d103      	bne.n	800841a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2209      	movs	r2, #9
 8008416:	761a      	strb	r2, [r3, #24]
      break;
 8008418:	e10c      	b.n	8008634 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2207      	movs	r2, #7
 800841e:	761a      	strb	r2, [r3, #24]
      break;
 8008420:	e108      	b.n	8008634 <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008422:	7bbb      	ldrb	r3, [r7, #14]
 8008424:	2b04      	cmp	r3, #4
 8008426:	d003      	beq.n	8008430 <USBH_HandleControl+0xcc>
 8008428:	7bbb      	ldrb	r3, [r7, #14]
 800842a:	2b02      	cmp	r3, #2
 800842c:	f040 8102 	bne.w	8008634 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	220b      	movs	r2, #11
 8008434:	761a      	strb	r2, [r3, #24]
      break;
 8008436:	e0fd      	b.n	8008634 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800843e:	b29a      	uxth	r2, r3
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6899      	ldr	r1, [r3, #8]
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	899a      	ldrh	r2, [r3, #12]
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	791b      	ldrb	r3, [r3, #4]
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f000 f93c 	bl	80086ce <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2204      	movs	r2, #4
 800845a:	761a      	strb	r2, [r3, #24]
      break;
 800845c:	e0f3      	b.n	8008646 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	791b      	ldrb	r3, [r3, #4]
 8008462:	4619      	mov	r1, r3
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f000 fc75 	bl	8008d54 <USBH_LL_GetURBState>
 800846a:	4603      	mov	r3, r0
 800846c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800846e:	7bbb      	ldrb	r3, [r7, #14]
 8008470:	2b01      	cmp	r3, #1
 8008472:	d102      	bne.n	800847a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2209      	movs	r2, #9
 8008478:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800847a:	7bbb      	ldrb	r3, [r7, #14]
 800847c:	2b05      	cmp	r3, #5
 800847e:	d102      	bne.n	8008486 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008480:	2303      	movs	r3, #3
 8008482:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008484:	e0d8      	b.n	8008638 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008486:	7bbb      	ldrb	r3, [r7, #14]
 8008488:	2b04      	cmp	r3, #4
 800848a:	f040 80d5 	bne.w	8008638 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	220b      	movs	r2, #11
 8008492:	761a      	strb	r2, [r3, #24]
      break;
 8008494:	e0d0      	b.n	8008638 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6899      	ldr	r1, [r3, #8]
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	899a      	ldrh	r2, [r3, #12]
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	7958      	ldrb	r0, [r3, #5]
 80084a2:	2301      	movs	r3, #1
 80084a4:	9300      	str	r3, [sp, #0]
 80084a6:	4603      	mov	r3, r0
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f000 f8eb 	bl	8008684 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80084b4:	b29a      	uxth	r2, r3
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2206      	movs	r2, #6
 80084be:	761a      	strb	r2, [r3, #24]
      break;
 80084c0:	e0c1      	b.n	8008646 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	795b      	ldrb	r3, [r3, #5]
 80084c6:	4619      	mov	r1, r3
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f000 fc43 	bl	8008d54 <USBH_LL_GetURBState>
 80084ce:	4603      	mov	r3, r0
 80084d0:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80084d2:	7bbb      	ldrb	r3, [r7, #14]
 80084d4:	2b01      	cmp	r3, #1
 80084d6:	d103      	bne.n	80084e0 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2207      	movs	r2, #7
 80084dc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80084de:	e0ad      	b.n	800863c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 80084e0:	7bbb      	ldrb	r3, [r7, #14]
 80084e2:	2b05      	cmp	r3, #5
 80084e4:	d105      	bne.n	80084f2 <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	220c      	movs	r2, #12
 80084ea:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80084ec:	2303      	movs	r3, #3
 80084ee:	73fb      	strb	r3, [r7, #15]
      break;
 80084f0:	e0a4      	b.n	800863c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 80084f2:	7bbb      	ldrb	r3, [r7, #14]
 80084f4:	2b02      	cmp	r3, #2
 80084f6:	d103      	bne.n	8008500 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2205      	movs	r2, #5
 80084fc:	761a      	strb	r2, [r3, #24]
      break;
 80084fe:	e09d      	b.n	800863c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 8008500:	7bbb      	ldrb	r3, [r7, #14]
 8008502:	2b04      	cmp	r3, #4
 8008504:	f040 809a 	bne.w	800863c <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	220b      	movs	r2, #11
 800850c:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800850e:	2302      	movs	r3, #2
 8008510:	73fb      	strb	r3, [r7, #15]
      break;
 8008512:	e093      	b.n	800863c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	791b      	ldrb	r3, [r3, #4]
 8008518:	2200      	movs	r2, #0
 800851a:	2100      	movs	r1, #0
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f000 f8d6 	bl	80086ce <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008528:	b29a      	uxth	r2, r3
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2208      	movs	r2, #8
 8008532:	761a      	strb	r2, [r3, #24]

      break;
 8008534:	e087      	b.n	8008646 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	791b      	ldrb	r3, [r3, #4]
 800853a:	4619      	mov	r1, r3
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f000 fc09 	bl	8008d54 <USBH_LL_GetURBState>
 8008542:	4603      	mov	r3, r0
 8008544:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008546:	7bbb      	ldrb	r3, [r7, #14]
 8008548:	2b01      	cmp	r3, #1
 800854a:	d105      	bne.n	8008558 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	220d      	movs	r2, #13
 8008550:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008552:	2300      	movs	r3, #0
 8008554:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008556:	e073      	b.n	8008640 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 8008558:	7bbb      	ldrb	r3, [r7, #14]
 800855a:	2b04      	cmp	r3, #4
 800855c:	d103      	bne.n	8008566 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	220b      	movs	r2, #11
 8008562:	761a      	strb	r2, [r3, #24]
      break;
 8008564:	e06c      	b.n	8008640 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 8008566:	7bbb      	ldrb	r3, [r7, #14]
 8008568:	2b05      	cmp	r3, #5
 800856a:	d169      	bne.n	8008640 <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 800856c:	2303      	movs	r3, #3
 800856e:	73fb      	strb	r3, [r7, #15]
      break;
 8008570:	e066      	b.n	8008640 <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	795a      	ldrb	r2, [r3, #5]
 8008576:	2301      	movs	r3, #1
 8008578:	9300      	str	r3, [sp, #0]
 800857a:	4613      	mov	r3, r2
 800857c:	2200      	movs	r2, #0
 800857e:	2100      	movs	r1, #0
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	f000 f87f 	bl	8008684 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800858c:	b29a      	uxth	r2, r3
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	220a      	movs	r2, #10
 8008596:	761a      	strb	r2, [r3, #24]
      break;
 8008598:	e055      	b.n	8008646 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	795b      	ldrb	r3, [r3, #5]
 800859e:	4619      	mov	r1, r3
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f000 fbd7 	bl	8008d54 <USBH_LL_GetURBState>
 80085a6:	4603      	mov	r3, r0
 80085a8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80085aa:	7bbb      	ldrb	r3, [r7, #14]
 80085ac:	2b01      	cmp	r3, #1
 80085ae:	d105      	bne.n	80085bc <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 80085b0:	2300      	movs	r3, #0
 80085b2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	220d      	movs	r2, #13
 80085b8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80085ba:	e043      	b.n	8008644 <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 80085bc:	7bbb      	ldrb	r3, [r7, #14]
 80085be:	2b02      	cmp	r3, #2
 80085c0:	d103      	bne.n	80085ca <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2209      	movs	r2, #9
 80085c6:	761a      	strb	r2, [r3, #24]
      break;
 80085c8:	e03c      	b.n	8008644 <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 80085ca:	7bbb      	ldrb	r3, [r7, #14]
 80085cc:	2b04      	cmp	r3, #4
 80085ce:	d139      	bne.n	8008644 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	220b      	movs	r2, #11
 80085d4:	761a      	strb	r2, [r3, #24]
      break;
 80085d6:	e035      	b.n	8008644 <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	7e5b      	ldrb	r3, [r3, #25]
 80085dc:	3301      	adds	r3, #1
 80085de:	b2da      	uxtb	r2, r3
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	765a      	strb	r2, [r3, #25]
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	7e5b      	ldrb	r3, [r3, #25]
 80085e8:	2b02      	cmp	r3, #2
 80085ea:	d806      	bhi.n	80085fa <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2201      	movs	r2, #1
 80085f0:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2201      	movs	r2, #1
 80085f6:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80085f8:	e025      	b.n	8008646 <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008600:	2106      	movs	r1, #6
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2200      	movs	r2, #0
 800860a:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	795b      	ldrb	r3, [r3, #5]
 8008610:	4619      	mov	r1, r3
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f000 f90c 	bl	8008830 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	791b      	ldrb	r3, [r3, #4]
 800861c:	4619      	mov	r1, r3
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f000 f906 	bl	8008830 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2200      	movs	r2, #0
 8008628:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800862a:	2302      	movs	r3, #2
 800862c:	73fb      	strb	r3, [r7, #15]
      break;
 800862e:	e00a      	b.n	8008646 <USBH_HandleControl+0x2e2>

    default:
      break;
 8008630:	bf00      	nop
 8008632:	e008      	b.n	8008646 <USBH_HandleControl+0x2e2>
      break;
 8008634:	bf00      	nop
 8008636:	e006      	b.n	8008646 <USBH_HandleControl+0x2e2>
      break;
 8008638:	bf00      	nop
 800863a:	e004      	b.n	8008646 <USBH_HandleControl+0x2e2>
      break;
 800863c:	bf00      	nop
 800863e:	e002      	b.n	8008646 <USBH_HandleControl+0x2e2>
      break;
 8008640:	bf00      	nop
 8008642:	e000      	b.n	8008646 <USBH_HandleControl+0x2e2>
      break;
 8008644:	bf00      	nop
  }

  return status;
 8008646:	7bfb      	ldrb	r3, [r7, #15]
}
 8008648:	4618      	mov	r0, r3
 800864a:	3710      	adds	r7, #16
 800864c:	46bd      	mov	sp, r7
 800864e:	bd80      	pop	{r7, pc}

08008650 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b088      	sub	sp, #32
 8008654:	af04      	add	r7, sp, #16
 8008656:	60f8      	str	r0, [r7, #12]
 8008658:	60b9      	str	r1, [r7, #8]
 800865a:	4613      	mov	r3, r2
 800865c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800865e:	79f9      	ldrb	r1, [r7, #7]
 8008660:	2300      	movs	r3, #0
 8008662:	9303      	str	r3, [sp, #12]
 8008664:	2308      	movs	r3, #8
 8008666:	9302      	str	r3, [sp, #8]
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	9301      	str	r3, [sp, #4]
 800866c:	2300      	movs	r3, #0
 800866e:	9300      	str	r3, [sp, #0]
 8008670:	2300      	movs	r3, #0
 8008672:	2200      	movs	r2, #0
 8008674:	68f8      	ldr	r0, [r7, #12]
 8008676:	f000 fb3c 	bl	8008cf2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800867a:	2300      	movs	r3, #0
}
 800867c:	4618      	mov	r0, r3
 800867e:	3710      	adds	r7, #16
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}

08008684 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b088      	sub	sp, #32
 8008688:	af04      	add	r7, sp, #16
 800868a:	60f8      	str	r0, [r7, #12]
 800868c:	60b9      	str	r1, [r7, #8]
 800868e:	4611      	mov	r1, r2
 8008690:	461a      	mov	r2, r3
 8008692:	460b      	mov	r3, r1
 8008694:	80fb      	strh	r3, [r7, #6]
 8008696:	4613      	mov	r3, r2
 8008698:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d001      	beq.n	80086a8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80086a4:	2300      	movs	r3, #0
 80086a6:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80086a8:	7979      	ldrb	r1, [r7, #5]
 80086aa:	7e3b      	ldrb	r3, [r7, #24]
 80086ac:	9303      	str	r3, [sp, #12]
 80086ae:	88fb      	ldrh	r3, [r7, #6]
 80086b0:	9302      	str	r3, [sp, #8]
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	9301      	str	r3, [sp, #4]
 80086b6:	2301      	movs	r3, #1
 80086b8:	9300      	str	r3, [sp, #0]
 80086ba:	2300      	movs	r3, #0
 80086bc:	2200      	movs	r2, #0
 80086be:	68f8      	ldr	r0, [r7, #12]
 80086c0:	f000 fb17 	bl	8008cf2 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80086c4:	2300      	movs	r3, #0
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	3710      	adds	r7, #16
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}

080086ce <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80086ce:	b580      	push	{r7, lr}
 80086d0:	b088      	sub	sp, #32
 80086d2:	af04      	add	r7, sp, #16
 80086d4:	60f8      	str	r0, [r7, #12]
 80086d6:	60b9      	str	r1, [r7, #8]
 80086d8:	4611      	mov	r1, r2
 80086da:	461a      	mov	r2, r3
 80086dc:	460b      	mov	r3, r1
 80086de:	80fb      	strh	r3, [r7, #6]
 80086e0:	4613      	mov	r3, r2
 80086e2:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80086e4:	7979      	ldrb	r1, [r7, #5]
 80086e6:	2300      	movs	r3, #0
 80086e8:	9303      	str	r3, [sp, #12]
 80086ea:	88fb      	ldrh	r3, [r7, #6]
 80086ec:	9302      	str	r3, [sp, #8]
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	9301      	str	r3, [sp, #4]
 80086f2:	2301      	movs	r3, #1
 80086f4:	9300      	str	r3, [sp, #0]
 80086f6:	2300      	movs	r3, #0
 80086f8:	2201      	movs	r2, #1
 80086fa:	68f8      	ldr	r0, [r7, #12]
 80086fc:	f000 faf9 	bl	8008cf2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008700:	2300      	movs	r3, #0

}
 8008702:	4618      	mov	r0, r3
 8008704:	3710      	adds	r7, #16
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}

0800870a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800870a:	b580      	push	{r7, lr}
 800870c:	b088      	sub	sp, #32
 800870e:	af04      	add	r7, sp, #16
 8008710:	60f8      	str	r0, [r7, #12]
 8008712:	60b9      	str	r1, [r7, #8]
 8008714:	4611      	mov	r1, r2
 8008716:	461a      	mov	r2, r3
 8008718:	460b      	mov	r3, r1
 800871a:	80fb      	strh	r3, [r7, #6]
 800871c:	4613      	mov	r3, r2
 800871e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008726:	2b00      	cmp	r3, #0
 8008728:	d001      	beq.n	800872e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800872a:	2300      	movs	r3, #0
 800872c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800872e:	7979      	ldrb	r1, [r7, #5]
 8008730:	7e3b      	ldrb	r3, [r7, #24]
 8008732:	9303      	str	r3, [sp, #12]
 8008734:	88fb      	ldrh	r3, [r7, #6]
 8008736:	9302      	str	r3, [sp, #8]
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	9301      	str	r3, [sp, #4]
 800873c:	2301      	movs	r3, #1
 800873e:	9300      	str	r3, [sp, #0]
 8008740:	2302      	movs	r3, #2
 8008742:	2200      	movs	r2, #0
 8008744:	68f8      	ldr	r0, [r7, #12]
 8008746:	f000 fad4 	bl	8008cf2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800874a:	2300      	movs	r3, #0
}
 800874c:	4618      	mov	r0, r3
 800874e:	3710      	adds	r7, #16
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}

08008754 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b088      	sub	sp, #32
 8008758:	af04      	add	r7, sp, #16
 800875a:	60f8      	str	r0, [r7, #12]
 800875c:	60b9      	str	r1, [r7, #8]
 800875e:	4611      	mov	r1, r2
 8008760:	461a      	mov	r2, r3
 8008762:	460b      	mov	r3, r1
 8008764:	80fb      	strh	r3, [r7, #6]
 8008766:	4613      	mov	r3, r2
 8008768:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800876a:	7979      	ldrb	r1, [r7, #5]
 800876c:	2300      	movs	r3, #0
 800876e:	9303      	str	r3, [sp, #12]
 8008770:	88fb      	ldrh	r3, [r7, #6]
 8008772:	9302      	str	r3, [sp, #8]
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	9301      	str	r3, [sp, #4]
 8008778:	2301      	movs	r3, #1
 800877a:	9300      	str	r3, [sp, #0]
 800877c:	2302      	movs	r3, #2
 800877e:	2201      	movs	r2, #1
 8008780:	68f8      	ldr	r0, [r7, #12]
 8008782:	f000 fab6 	bl	8008cf2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008786:	2300      	movs	r3, #0
}
 8008788:	4618      	mov	r0, r3
 800878a:	3710      	adds	r7, #16
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}

08008790 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b086      	sub	sp, #24
 8008794:	af04      	add	r7, sp, #16
 8008796:	6078      	str	r0, [r7, #4]
 8008798:	4608      	mov	r0, r1
 800879a:	4611      	mov	r1, r2
 800879c:	461a      	mov	r2, r3
 800879e:	4603      	mov	r3, r0
 80087a0:	70fb      	strb	r3, [r7, #3]
 80087a2:	460b      	mov	r3, r1
 80087a4:	70bb      	strb	r3, [r7, #2]
 80087a6:	4613      	mov	r3, r2
 80087a8:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80087aa:	7878      	ldrb	r0, [r7, #1]
 80087ac:	78ba      	ldrb	r2, [r7, #2]
 80087ae:	78f9      	ldrb	r1, [r7, #3]
 80087b0:	8b3b      	ldrh	r3, [r7, #24]
 80087b2:	9302      	str	r3, [sp, #8]
 80087b4:	7d3b      	ldrb	r3, [r7, #20]
 80087b6:	9301      	str	r3, [sp, #4]
 80087b8:	7c3b      	ldrb	r3, [r7, #16]
 80087ba:	9300      	str	r3, [sp, #0]
 80087bc:	4603      	mov	r3, r0
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f000 fa49 	bl	8008c56 <USBH_LL_OpenPipe>

  return USBH_OK;
 80087c4:	2300      	movs	r3, #0
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3708      	adds	r7, #8
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}

080087ce <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80087ce:	b580      	push	{r7, lr}
 80087d0:	b082      	sub	sp, #8
 80087d2:	af00      	add	r7, sp, #0
 80087d4:	6078      	str	r0, [r7, #4]
 80087d6:	460b      	mov	r3, r1
 80087d8:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 80087da:	78fb      	ldrb	r3, [r7, #3]
 80087dc:	4619      	mov	r1, r3
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f000 fa68 	bl	8008cb4 <USBH_LL_ClosePipe>

  return USBH_OK;
 80087e4:	2300      	movs	r3, #0
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3708      	adds	r7, #8
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}

080087ee <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80087ee:	b580      	push	{r7, lr}
 80087f0:	b084      	sub	sp, #16
 80087f2:	af00      	add	r7, sp, #0
 80087f4:	6078      	str	r0, [r7, #4]
 80087f6:	460b      	mov	r3, r1
 80087f8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f000 f836 	bl	800886c <USBH_GetFreePipe>
 8008800:	4603      	mov	r3, r0
 8008802:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008804:	89fb      	ldrh	r3, [r7, #14]
 8008806:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800880a:	4293      	cmp	r3, r2
 800880c:	d00a      	beq.n	8008824 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800880e:	78fa      	ldrb	r2, [r7, #3]
 8008810:	89fb      	ldrh	r3, [r7, #14]
 8008812:	f003 030f 	and.w	r3, r3, #15
 8008816:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800881a:	6879      	ldr	r1, [r7, #4]
 800881c:	33e0      	adds	r3, #224	; 0xe0
 800881e:	009b      	lsls	r3, r3, #2
 8008820:	440b      	add	r3, r1
 8008822:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008824:	89fb      	ldrh	r3, [r7, #14]
 8008826:	b2db      	uxtb	r3, r3
}
 8008828:	4618      	mov	r0, r3
 800882a:	3710      	adds	r7, #16
 800882c:	46bd      	mov	sp, r7
 800882e:	bd80      	pop	{r7, pc}

08008830 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008830:	b480      	push	{r7}
 8008832:	b083      	sub	sp, #12
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
 8008838:	460b      	mov	r3, r1
 800883a:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800883c:	78fb      	ldrb	r3, [r7, #3]
 800883e:	2b0a      	cmp	r3, #10
 8008840:	d80d      	bhi.n	800885e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008842:	78fb      	ldrb	r3, [r7, #3]
 8008844:	687a      	ldr	r2, [r7, #4]
 8008846:	33e0      	adds	r3, #224	; 0xe0
 8008848:	009b      	lsls	r3, r3, #2
 800884a:	4413      	add	r3, r2
 800884c:	685a      	ldr	r2, [r3, #4]
 800884e:	78fb      	ldrb	r3, [r7, #3]
 8008850:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008854:	6879      	ldr	r1, [r7, #4]
 8008856:	33e0      	adds	r3, #224	; 0xe0
 8008858:	009b      	lsls	r3, r3, #2
 800885a:	440b      	add	r3, r1
 800885c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800885e:	2300      	movs	r3, #0
}
 8008860:	4618      	mov	r0, r3
 8008862:	370c      	adds	r7, #12
 8008864:	46bd      	mov	sp, r7
 8008866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886a:	4770      	bx	lr

0800886c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800886c:	b480      	push	{r7}
 800886e:	b085      	sub	sp, #20
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008874:	2300      	movs	r3, #0
 8008876:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8008878:	2300      	movs	r3, #0
 800887a:	73fb      	strb	r3, [r7, #15]
 800887c:	e00f      	b.n	800889e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800887e:	7bfb      	ldrb	r3, [r7, #15]
 8008880:	687a      	ldr	r2, [r7, #4]
 8008882:	33e0      	adds	r3, #224	; 0xe0
 8008884:	009b      	lsls	r3, r3, #2
 8008886:	4413      	add	r3, r2
 8008888:	685b      	ldr	r3, [r3, #4]
 800888a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800888e:	2b00      	cmp	r3, #0
 8008890:	d102      	bne.n	8008898 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008892:	7bfb      	ldrb	r3, [r7, #15]
 8008894:	b29b      	uxth	r3, r3
 8008896:	e007      	b.n	80088a8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8008898:	7bfb      	ldrb	r3, [r7, #15]
 800889a:	3301      	adds	r3, #1
 800889c:	73fb      	strb	r3, [r7, #15]
 800889e:	7bfb      	ldrb	r3, [r7, #15]
 80088a0:	2b0a      	cmp	r3, #10
 80088a2:	d9ec      	bls.n	800887e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80088a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80088a8:	4618      	mov	r0, r3
 80088aa:	3714      	adds	r7, #20
 80088ac:	46bd      	mov	sp, r7
 80088ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b2:	4770      	bx	lr

080088b4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80088b8:	2201      	movs	r2, #1
 80088ba:	490e      	ldr	r1, [pc, #56]	; (80088f4 <MX_USB_HOST_Init+0x40>)
 80088bc:	480e      	ldr	r0, [pc, #56]	; (80088f8 <MX_USB_HOST_Init+0x44>)
 80088be:	f7fe fc9f 	bl	8007200 <USBH_Init>
 80088c2:	4603      	mov	r3, r0
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d001      	beq.n	80088cc <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80088c8:	f7f8 f934 	bl	8000b34 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80088cc:	490b      	ldr	r1, [pc, #44]	; (80088fc <MX_USB_HOST_Init+0x48>)
 80088ce:	480a      	ldr	r0, [pc, #40]	; (80088f8 <MX_USB_HOST_Init+0x44>)
 80088d0:	f7fe fd24 	bl	800731c <USBH_RegisterClass>
 80088d4:	4603      	mov	r3, r0
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d001      	beq.n	80088de <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80088da:	f7f8 f92b 	bl	8000b34 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80088de:	4806      	ldr	r0, [pc, #24]	; (80088f8 <MX_USB_HOST_Init+0x44>)
 80088e0:	f7fe fda8 	bl	8007434 <USBH_Start>
 80088e4:	4603      	mov	r3, r0
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d001      	beq.n	80088ee <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80088ea:	f7f8 f923 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80088ee:	bf00      	nop
 80088f0:	bd80      	pop	{r7, pc}
 80088f2:	bf00      	nop
 80088f4:	08008915 	.word	0x08008915
 80088f8:	20000244 	.word	0x20000244
 80088fc:	2000000c 	.word	0x2000000c

08008900 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008904:	4802      	ldr	r0, [pc, #8]	; (8008910 <MX_USB_HOST_Process+0x10>)
 8008906:	f7fe fda5 	bl	8007454 <USBH_Process>
}
 800890a:	bf00      	nop
 800890c:	bd80      	pop	{r7, pc}
 800890e:	bf00      	nop
 8008910:	20000244 	.word	0x20000244

08008914 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008914:	b480      	push	{r7}
 8008916:	b083      	sub	sp, #12
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
 800891c:	460b      	mov	r3, r1
 800891e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008920:	78fb      	ldrb	r3, [r7, #3]
 8008922:	3b01      	subs	r3, #1
 8008924:	2b04      	cmp	r3, #4
 8008926:	d819      	bhi.n	800895c <USBH_UserProcess+0x48>
 8008928:	a201      	add	r2, pc, #4	; (adr r2, 8008930 <USBH_UserProcess+0x1c>)
 800892a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800892e:	bf00      	nop
 8008930:	0800895d 	.word	0x0800895d
 8008934:	0800894d 	.word	0x0800894d
 8008938:	0800895d 	.word	0x0800895d
 800893c:	08008955 	.word	0x08008955
 8008940:	08008945 	.word	0x08008945
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008944:	4b09      	ldr	r3, [pc, #36]	; (800896c <USBH_UserProcess+0x58>)
 8008946:	2203      	movs	r2, #3
 8008948:	701a      	strb	r2, [r3, #0]
  break;
 800894a:	e008      	b.n	800895e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800894c:	4b07      	ldr	r3, [pc, #28]	; (800896c <USBH_UserProcess+0x58>)
 800894e:	2202      	movs	r2, #2
 8008950:	701a      	strb	r2, [r3, #0]
  break;
 8008952:	e004      	b.n	800895e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008954:	4b05      	ldr	r3, [pc, #20]	; (800896c <USBH_UserProcess+0x58>)
 8008956:	2201      	movs	r2, #1
 8008958:	701a      	strb	r2, [r3, #0]
  break;
 800895a:	e000      	b.n	800895e <USBH_UserProcess+0x4a>

  default:
  break;
 800895c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800895e:	bf00      	nop
 8008960:	370c      	adds	r7, #12
 8008962:	46bd      	mov	sp, r7
 8008964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008968:	4770      	bx	lr
 800896a:	bf00      	nop
 800896c:	200000b4 	.word	0x200000b4

08008970 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b08a      	sub	sp, #40	; 0x28
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008978:	f107 0314 	add.w	r3, r7, #20
 800897c:	2200      	movs	r2, #0
 800897e:	601a      	str	r2, [r3, #0]
 8008980:	605a      	str	r2, [r3, #4]
 8008982:	609a      	str	r2, [r3, #8]
 8008984:	60da      	str	r2, [r3, #12]
 8008986:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008990:	d13f      	bne.n	8008a12 <HAL_HCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008992:	2300      	movs	r3, #0
 8008994:	613b      	str	r3, [r7, #16]
 8008996:	4b21      	ldr	r3, [pc, #132]	; (8008a1c <HAL_HCD_MspInit+0xac>)
 8008998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800899a:	4a20      	ldr	r2, [pc, #128]	; (8008a1c <HAL_HCD_MspInit+0xac>)
 800899c:	f043 0301 	orr.w	r3, r3, #1
 80089a0:	6313      	str	r3, [r2, #48]	; 0x30
 80089a2:	4b1e      	ldr	r3, [pc, #120]	; (8008a1c <HAL_HCD_MspInit+0xac>)
 80089a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089a6:	f003 0301 	and.w	r3, r3, #1
 80089aa:	613b      	str	r3, [r7, #16]
 80089ac:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80089ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80089b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80089b4:	2300      	movs	r3, #0
 80089b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089b8:	2300      	movs	r3, #0
 80089ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80089bc:	f107 0314 	add.w	r3, r7, #20
 80089c0:	4619      	mov	r1, r3
 80089c2:	4817      	ldr	r0, [pc, #92]	; (8008a20 <HAL_HCD_MspInit+0xb0>)
 80089c4:	f7f8 fcae 	bl	8001324 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80089c8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80089cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80089ce:	2302      	movs	r3, #2
 80089d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089d2:	2300      	movs	r3, #0
 80089d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80089d6:	2300      	movs	r3, #0
 80089d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80089da:	230a      	movs	r3, #10
 80089dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80089de:	f107 0314 	add.w	r3, r7, #20
 80089e2:	4619      	mov	r1, r3
 80089e4:	480e      	ldr	r0, [pc, #56]	; (8008a20 <HAL_HCD_MspInit+0xb0>)
 80089e6:	f7f8 fc9d 	bl	8001324 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80089ea:	4b0c      	ldr	r3, [pc, #48]	; (8008a1c <HAL_HCD_MspInit+0xac>)
 80089ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089ee:	4a0b      	ldr	r2, [pc, #44]	; (8008a1c <HAL_HCD_MspInit+0xac>)
 80089f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089f4:	6353      	str	r3, [r2, #52]	; 0x34
 80089f6:	2300      	movs	r3, #0
 80089f8:	60fb      	str	r3, [r7, #12]
 80089fa:	4b08      	ldr	r3, [pc, #32]	; (8008a1c <HAL_HCD_MspInit+0xac>)
 80089fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089fe:	4a07      	ldr	r2, [pc, #28]	; (8008a1c <HAL_HCD_MspInit+0xac>)
 8008a00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008a04:	6453      	str	r3, [r2, #68]	; 0x44
 8008a06:	4b05      	ldr	r3, [pc, #20]	; (8008a1c <HAL_HCD_MspInit+0xac>)
 8008a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a0e:	60fb      	str	r3, [r7, #12]
 8008a10:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral interrupt init */
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008a12:	bf00      	nop
 8008a14:	3728      	adds	r7, #40	; 0x28
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}
 8008a1a:	bf00      	nop
 8008a1c:	40023800 	.word	0x40023800
 8008a20:	40020000 	.word	0x40020000

08008a24 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b082      	sub	sp, #8
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a32:	4618      	mov	r0, r3
 8008a34:	f7ff f8e1 	bl	8007bfa <USBH_LL_IncTimer>
}
 8008a38:	bf00      	nop
 8008a3a:	3708      	adds	r7, #8
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}

08008a40 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b082      	sub	sp, #8
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f7ff f919 	bl	8007c86 <USBH_LL_Connect>
}
 8008a54:	bf00      	nop
 8008a56:	3708      	adds	r7, #8
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}

08008a5c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b082      	sub	sp, #8
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	f7ff f922 	bl	8007cb4 <USBH_LL_Disconnect>
}
 8008a70:	bf00      	nop
 8008a72:	3708      	adds	r7, #8
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}

08008a78 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b083      	sub	sp, #12
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
 8008a80:	460b      	mov	r3, r1
 8008a82:	70fb      	strb	r3, [r7, #3]
 8008a84:	4613      	mov	r3, r2
 8008a86:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008a88:	bf00      	nop
 8008a8a:	370c      	adds	r7, #12
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a92:	4770      	bx	lr

08008a94 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b082      	sub	sp, #8
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	f7ff f8d3 	bl	8007c4e <USBH_LL_PortEnabled>
} 
 8008aa8:	bf00      	nop
 8008aaa:	3708      	adds	r7, #8
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}

08008ab0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b082      	sub	sp, #8
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f7ff f8d3 	bl	8007c6a <USBH_LL_PortDisabled>
} 
 8008ac4:	bf00      	nop
 8008ac6:	3708      	adds	r7, #8
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}

08008acc <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b082      	sub	sp, #8
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008ada:	2b01      	cmp	r3, #1
 8008adc:	d12a      	bne.n	8008b34 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008ade:	4a18      	ldr	r2, [pc, #96]	; (8008b40 <USBH_LL_Init+0x74>)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	4a15      	ldr	r2, [pc, #84]	; (8008b40 <USBH_LL_Init+0x74>)
 8008aea:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008aee:	4b14      	ldr	r3, [pc, #80]	; (8008b40 <USBH_LL_Init+0x74>)
 8008af0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008af4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008af6:	4b12      	ldr	r3, [pc, #72]	; (8008b40 <USBH_LL_Init+0x74>)
 8008af8:	2208      	movs	r2, #8
 8008afa:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008afc:	4b10      	ldr	r3, [pc, #64]	; (8008b40 <USBH_LL_Init+0x74>)
 8008afe:	2201      	movs	r2, #1
 8008b00:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008b02:	4b0f      	ldr	r3, [pc, #60]	; (8008b40 <USBH_LL_Init+0x74>)
 8008b04:	2200      	movs	r2, #0
 8008b06:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008b08:	4b0d      	ldr	r3, [pc, #52]	; (8008b40 <USBH_LL_Init+0x74>)
 8008b0a:	2202      	movs	r2, #2
 8008b0c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008b0e:	4b0c      	ldr	r3, [pc, #48]	; (8008b40 <USBH_LL_Init+0x74>)
 8008b10:	2200      	movs	r2, #0
 8008b12:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008b14:	480a      	ldr	r0, [pc, #40]	; (8008b40 <USBH_LL_Init+0x74>)
 8008b16:	f7f8 fdd3 	bl	80016c0 <HAL_HCD_Init>
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d001      	beq.n	8008b24 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008b20:	f7f8 f808 	bl	8000b34 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008b24:	4806      	ldr	r0, [pc, #24]	; (8008b40 <USBH_LL_Init+0x74>)
 8008b26:	f7f9 f9d7 	bl	8001ed8 <HAL_HCD_GetCurrentFrame>
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	4619      	mov	r1, r3
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f7ff f854 	bl	8007bdc <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008b34:	2300      	movs	r3, #0
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	3708      	adds	r7, #8
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}
 8008b3e:	bf00      	nop
 8008b40:	2000061c 	.word	0x2000061c

08008b44 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b084      	sub	sp, #16
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008b50:	2300      	movs	r3, #0
 8008b52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f7f9 f944 	bl	8001de8 <HAL_HCD_Start>
 8008b60:	4603      	mov	r3, r0
 8008b62:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008b64:	7bfb      	ldrb	r3, [r7, #15]
 8008b66:	4618      	mov	r0, r3
 8008b68:	f000 f95c 	bl	8008e24 <USBH_Get_USB_Status>
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008b70:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	3710      	adds	r7, #16
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}

08008b7a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008b7a:	b580      	push	{r7, lr}
 8008b7c:	b084      	sub	sp, #16
 8008b7e:	af00      	add	r7, sp, #0
 8008b80:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b82:	2300      	movs	r3, #0
 8008b84:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008b86:	2300      	movs	r3, #0
 8008b88:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008b90:	4618      	mov	r0, r3
 8008b92:	f7f9 f94c 	bl	8001e2e <HAL_HCD_Stop>
 8008b96:	4603      	mov	r3, r0
 8008b98:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008b9a:	7bfb      	ldrb	r3, [r7, #15]
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f000 f941 	bl	8008e24 <USBH_Get_USB_Status>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8008ba6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	3710      	adds	r7, #16
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}

08008bb0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b084      	sub	sp, #16
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008bb8:	2301      	movs	r3, #1
 8008bba:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f7f9 f996 	bl	8001ef4 <HAL_HCD_GetCurrentSpeed>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	2b01      	cmp	r3, #1
 8008bcc:	d007      	beq.n	8008bde <USBH_LL_GetSpeed+0x2e>
 8008bce:	2b01      	cmp	r3, #1
 8008bd0:	d302      	bcc.n	8008bd8 <USBH_LL_GetSpeed+0x28>
 8008bd2:	2b02      	cmp	r3, #2
 8008bd4:	d006      	beq.n	8008be4 <USBH_LL_GetSpeed+0x34>
 8008bd6:	e008      	b.n	8008bea <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008bd8:	2300      	movs	r3, #0
 8008bda:	73fb      	strb	r3, [r7, #15]
    break;
 8008bdc:	e008      	b.n	8008bf0 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008bde:	2301      	movs	r3, #1
 8008be0:	73fb      	strb	r3, [r7, #15]
    break;
 8008be2:	e005      	b.n	8008bf0 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008be4:	2302      	movs	r3, #2
 8008be6:	73fb      	strb	r3, [r7, #15]
    break;
 8008be8:	e002      	b.n	8008bf0 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8008bea:	2301      	movs	r3, #1
 8008bec:	73fb      	strb	r3, [r7, #15]
    break;
 8008bee:	bf00      	nop
  }
  return  speed;
 8008bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3710      	adds	r7, #16
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}

08008bfa <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008bfa:	b580      	push	{r7, lr}
 8008bfc:	b084      	sub	sp, #16
 8008bfe:	af00      	add	r7, sp, #0
 8008c00:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c02:	2300      	movs	r3, #0
 8008c04:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008c06:	2300      	movs	r3, #0
 8008c08:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008c10:	4618      	mov	r0, r3
 8008c12:	f7f9 f929 	bl	8001e68 <HAL_HCD_ResetPort>
 8008c16:	4603      	mov	r3, r0
 8008c18:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 8008c1a:	7bfb      	ldrb	r3, [r7, #15]
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	f000 f901 	bl	8008e24 <USBH_Get_USB_Status>
 8008c22:	4603      	mov	r3, r0
 8008c24:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008c26:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	3710      	adds	r7, #16
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bd80      	pop	{r7, pc}

08008c30 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b082      	sub	sp, #8
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
 8008c38:	460b      	mov	r3, r1
 8008c3a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008c42:	78fa      	ldrb	r2, [r7, #3]
 8008c44:	4611      	mov	r1, r2
 8008c46:	4618      	mov	r0, r3
 8008c48:	f7f9 f931 	bl	8001eae <HAL_HCD_HC_GetXferCount>
 8008c4c:	4603      	mov	r3, r0
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3708      	adds	r7, #8
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}

08008c56 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008c56:	b590      	push	{r4, r7, lr}
 8008c58:	b089      	sub	sp, #36	; 0x24
 8008c5a:	af04      	add	r7, sp, #16
 8008c5c:	6078      	str	r0, [r7, #4]
 8008c5e:	4608      	mov	r0, r1
 8008c60:	4611      	mov	r1, r2
 8008c62:	461a      	mov	r2, r3
 8008c64:	4603      	mov	r3, r0
 8008c66:	70fb      	strb	r3, [r7, #3]
 8008c68:	460b      	mov	r3, r1
 8008c6a:	70bb      	strb	r3, [r7, #2]
 8008c6c:	4613      	mov	r3, r2
 8008c6e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c70:	2300      	movs	r3, #0
 8008c72:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008c74:	2300      	movs	r3, #0
 8008c76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008c7e:	787c      	ldrb	r4, [r7, #1]
 8008c80:	78ba      	ldrb	r2, [r7, #2]
 8008c82:	78f9      	ldrb	r1, [r7, #3]
 8008c84:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008c86:	9302      	str	r3, [sp, #8]
 8008c88:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008c8c:	9301      	str	r3, [sp, #4]
 8008c8e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008c92:	9300      	str	r3, [sp, #0]
 8008c94:	4623      	mov	r3, r4
 8008c96:	f7f8 fd75 	bl	8001784 <HAL_HCD_HC_Init>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008c9e:	7bfb      	ldrb	r3, [r7, #15]
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	f000 f8bf 	bl	8008e24 <USBH_Get_USB_Status>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008caa:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	3714      	adds	r7, #20
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd90      	pop	{r4, r7, pc}

08008cb4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b084      	sub	sp, #16
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
 8008cbc:	460b      	mov	r3, r1
 8008cbe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008cce:	78fa      	ldrb	r2, [r7, #3]
 8008cd0:	4611      	mov	r1, r2
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f7f8 fdee 	bl	80018b4 <HAL_HCD_HC_Halt>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008cdc:	7bfb      	ldrb	r3, [r7, #15]
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f000 f8a0 	bl	8008e24 <USBH_Get_USB_Status>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008ce8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cea:	4618      	mov	r0, r3
 8008cec:	3710      	adds	r7, #16
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bd80      	pop	{r7, pc}

08008cf2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008cf2:	b590      	push	{r4, r7, lr}
 8008cf4:	b089      	sub	sp, #36	; 0x24
 8008cf6:	af04      	add	r7, sp, #16
 8008cf8:	6078      	str	r0, [r7, #4]
 8008cfa:	4608      	mov	r0, r1
 8008cfc:	4611      	mov	r1, r2
 8008cfe:	461a      	mov	r2, r3
 8008d00:	4603      	mov	r3, r0
 8008d02:	70fb      	strb	r3, [r7, #3]
 8008d04:	460b      	mov	r3, r1
 8008d06:	70bb      	strb	r3, [r7, #2]
 8008d08:	4613      	mov	r3, r2
 8008d0a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008d10:	2300      	movs	r3, #0
 8008d12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008d1a:	787c      	ldrb	r4, [r7, #1]
 8008d1c:	78ba      	ldrb	r2, [r7, #2]
 8008d1e:	78f9      	ldrb	r1, [r7, #3]
 8008d20:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008d24:	9303      	str	r3, [sp, #12]
 8008d26:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008d28:	9302      	str	r3, [sp, #8]
 8008d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d2c:	9301      	str	r3, [sp, #4]
 8008d2e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008d32:	9300      	str	r3, [sp, #0]
 8008d34:	4623      	mov	r3, r4
 8008d36:	f7f8 fde1 	bl	80018fc <HAL_HCD_HC_SubmitRequest>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008d3e:	7bfb      	ldrb	r3, [r7, #15]
 8008d40:	4618      	mov	r0, r3
 8008d42:	f000 f86f 	bl	8008e24 <USBH_Get_USB_Status>
 8008d46:	4603      	mov	r3, r0
 8008d48:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008d4a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	3714      	adds	r7, #20
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd90      	pop	{r4, r7, pc}

08008d54 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b082      	sub	sp, #8
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
 8008d5c:	460b      	mov	r3, r1
 8008d5e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008d66:	78fa      	ldrb	r2, [r7, #3]
 8008d68:	4611      	mov	r1, r2
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f7f9 f88a 	bl	8001e84 <HAL_HCD_HC_GetURBState>
 8008d70:	4603      	mov	r3, r0
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	3708      	adds	r7, #8
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd80      	pop	{r7, pc}

08008d7a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008d7a:	b580      	push	{r7, lr}
 8008d7c:	b082      	sub	sp, #8
 8008d7e:	af00      	add	r7, sp, #0
 8008d80:	6078      	str	r0, [r7, #4]
 8008d82:	460b      	mov	r3, r1
 8008d84:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008d8c:	2b01      	cmp	r3, #1
 8008d8e:	d103      	bne.n	8008d98 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008d90:	78fb      	ldrb	r3, [r7, #3]
 8008d92:	4618      	mov	r0, r3
 8008d94:	f000 f872 	bl	8008e7c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008d98:	20c8      	movs	r0, #200	; 0xc8
 8008d9a:	f7f8 f96d 	bl	8001078 <HAL_Delay>
  return USBH_OK;
 8008d9e:	2300      	movs	r3, #0
}
 8008da0:	4618      	mov	r0, r3
 8008da2:	3708      	adds	r7, #8
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}

08008da8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008da8:	b480      	push	{r7}
 8008daa:	b085      	sub	sp, #20
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
 8008db0:	460b      	mov	r3, r1
 8008db2:	70fb      	strb	r3, [r7, #3]
 8008db4:	4613      	mov	r3, r2
 8008db6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008dbe:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008dc0:	78fa      	ldrb	r2, [r7, #3]
 8008dc2:	68f9      	ldr	r1, [r7, #12]
 8008dc4:	4613      	mov	r3, r2
 8008dc6:	009b      	lsls	r3, r3, #2
 8008dc8:	4413      	add	r3, r2
 8008dca:	00db      	lsls	r3, r3, #3
 8008dcc:	440b      	add	r3, r1
 8008dce:	333b      	adds	r3, #59	; 0x3b
 8008dd0:	781b      	ldrb	r3, [r3, #0]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d00a      	beq.n	8008dec <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008dd6:	78fa      	ldrb	r2, [r7, #3]
 8008dd8:	68f9      	ldr	r1, [r7, #12]
 8008dda:	4613      	mov	r3, r2
 8008ddc:	009b      	lsls	r3, r3, #2
 8008dde:	4413      	add	r3, r2
 8008de0:	00db      	lsls	r3, r3, #3
 8008de2:	440b      	add	r3, r1
 8008de4:	3350      	adds	r3, #80	; 0x50
 8008de6:	78ba      	ldrb	r2, [r7, #2]
 8008de8:	701a      	strb	r2, [r3, #0]
 8008dea:	e009      	b.n	8008e00 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008dec:	78fa      	ldrb	r2, [r7, #3]
 8008dee:	68f9      	ldr	r1, [r7, #12]
 8008df0:	4613      	mov	r3, r2
 8008df2:	009b      	lsls	r3, r3, #2
 8008df4:	4413      	add	r3, r2
 8008df6:	00db      	lsls	r3, r3, #3
 8008df8:	440b      	add	r3, r1
 8008dfa:	3351      	adds	r3, #81	; 0x51
 8008dfc:	78ba      	ldrb	r2, [r7, #2]
 8008dfe:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008e00:	2300      	movs	r3, #0
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	3714      	adds	r7, #20
 8008e06:	46bd      	mov	sp, r7
 8008e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0c:	4770      	bx	lr

08008e0e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008e0e:	b580      	push	{r7, lr}
 8008e10:	b082      	sub	sp, #8
 8008e12:	af00      	add	r7, sp, #0
 8008e14:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f7f8 f92e 	bl	8001078 <HAL_Delay>
}
 8008e1c:	bf00      	nop
 8008e1e:	3708      	adds	r7, #8
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bd80      	pop	{r7, pc}

08008e24 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008e24:	b480      	push	{r7}
 8008e26:	b085      	sub	sp, #20
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008e32:	79fb      	ldrb	r3, [r7, #7]
 8008e34:	2b03      	cmp	r3, #3
 8008e36:	d817      	bhi.n	8008e68 <USBH_Get_USB_Status+0x44>
 8008e38:	a201      	add	r2, pc, #4	; (adr r2, 8008e40 <USBH_Get_USB_Status+0x1c>)
 8008e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e3e:	bf00      	nop
 8008e40:	08008e51 	.word	0x08008e51
 8008e44:	08008e57 	.word	0x08008e57
 8008e48:	08008e5d 	.word	0x08008e5d
 8008e4c:	08008e63 	.word	0x08008e63
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008e50:	2300      	movs	r3, #0
 8008e52:	73fb      	strb	r3, [r7, #15]
    break;
 8008e54:	e00b      	b.n	8008e6e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008e56:	2302      	movs	r3, #2
 8008e58:	73fb      	strb	r3, [r7, #15]
    break;
 8008e5a:	e008      	b.n	8008e6e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008e5c:	2301      	movs	r3, #1
 8008e5e:	73fb      	strb	r3, [r7, #15]
    break;
 8008e60:	e005      	b.n	8008e6e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008e62:	2302      	movs	r3, #2
 8008e64:	73fb      	strb	r3, [r7, #15]
    break;
 8008e66:	e002      	b.n	8008e6e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008e68:	2302      	movs	r3, #2
 8008e6a:	73fb      	strb	r3, [r7, #15]
    break;
 8008e6c:	bf00      	nop
  }
  return usb_status;
 8008e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e70:	4618      	mov	r0, r3
 8008e72:	3714      	adds	r7, #20
 8008e74:	46bd      	mov	sp, r7
 8008e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7a:	4770      	bx	lr

08008e7c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b084      	sub	sp, #16
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	4603      	mov	r3, r0
 8008e84:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 8008e86:	79fb      	ldrb	r3, [r7, #7]
 8008e88:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008e8a:	79fb      	ldrb	r3, [r7, #7]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d102      	bne.n	8008e96 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 8008e90:	2301      	movs	r3, #1
 8008e92:	73fb      	strb	r3, [r7, #15]
 8008e94:	e001      	b.n	8008e9a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8008e96:	2300      	movs	r3, #0
 8008e98:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008e9a:	7bfb      	ldrb	r3, [r7, #15]
 8008e9c:	461a      	mov	r2, r3
 8008e9e:	2101      	movs	r1, #1
 8008ea0:	4803      	ldr	r0, [pc, #12]	; (8008eb0 <MX_DriverVbusFS+0x34>)
 8008ea2:	f7f8 fbd9 	bl	8001658 <HAL_GPIO_WritePin>
}
 8008ea6:	bf00      	nop
 8008ea8:	3710      	adds	r7, #16
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}
 8008eae:	bf00      	nop
 8008eb0:	40020800 	.word	0x40020800

08008eb4 <__errno>:
 8008eb4:	4b01      	ldr	r3, [pc, #4]	; (8008ebc <__errno+0x8>)
 8008eb6:	6818      	ldr	r0, [r3, #0]
 8008eb8:	4770      	bx	lr
 8008eba:	bf00      	nop
 8008ebc:	2000002c 	.word	0x2000002c

08008ec0 <__libc_init_array>:
 8008ec0:	b570      	push	{r4, r5, r6, lr}
 8008ec2:	4e0d      	ldr	r6, [pc, #52]	; (8008ef8 <__libc_init_array+0x38>)
 8008ec4:	4c0d      	ldr	r4, [pc, #52]	; (8008efc <__libc_init_array+0x3c>)
 8008ec6:	1ba4      	subs	r4, r4, r6
 8008ec8:	10a4      	asrs	r4, r4, #2
 8008eca:	2500      	movs	r5, #0
 8008ecc:	42a5      	cmp	r5, r4
 8008ece:	d109      	bne.n	8008ee4 <__libc_init_array+0x24>
 8008ed0:	4e0b      	ldr	r6, [pc, #44]	; (8008f00 <__libc_init_array+0x40>)
 8008ed2:	4c0c      	ldr	r4, [pc, #48]	; (8008f04 <__libc_init_array+0x44>)
 8008ed4:	f000 f8ea 	bl	80090ac <_init>
 8008ed8:	1ba4      	subs	r4, r4, r6
 8008eda:	10a4      	asrs	r4, r4, #2
 8008edc:	2500      	movs	r5, #0
 8008ede:	42a5      	cmp	r5, r4
 8008ee0:	d105      	bne.n	8008eee <__libc_init_array+0x2e>
 8008ee2:	bd70      	pop	{r4, r5, r6, pc}
 8008ee4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008ee8:	4798      	blx	r3
 8008eea:	3501      	adds	r5, #1
 8008eec:	e7ee      	b.n	8008ecc <__libc_init_array+0xc>
 8008eee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008ef2:	4798      	blx	r3
 8008ef4:	3501      	adds	r5, #1
 8008ef6:	e7f2      	b.n	8008ede <__libc_init_array+0x1e>
 8008ef8:	080090e8 	.word	0x080090e8
 8008efc:	080090e8 	.word	0x080090e8
 8008f00:	080090e8 	.word	0x080090e8
 8008f04:	080090ec 	.word	0x080090ec

08008f08 <malloc>:
 8008f08:	4b02      	ldr	r3, [pc, #8]	; (8008f14 <malloc+0xc>)
 8008f0a:	4601      	mov	r1, r0
 8008f0c:	6818      	ldr	r0, [r3, #0]
 8008f0e:	f000 b861 	b.w	8008fd4 <_malloc_r>
 8008f12:	bf00      	nop
 8008f14:	2000002c 	.word	0x2000002c

08008f18 <free>:
 8008f18:	4b02      	ldr	r3, [pc, #8]	; (8008f24 <free+0xc>)
 8008f1a:	4601      	mov	r1, r0
 8008f1c:	6818      	ldr	r0, [r3, #0]
 8008f1e:	f000 b80b 	b.w	8008f38 <_free_r>
 8008f22:	bf00      	nop
 8008f24:	2000002c 	.word	0x2000002c

08008f28 <memset>:
 8008f28:	4402      	add	r2, r0
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	d100      	bne.n	8008f32 <memset+0xa>
 8008f30:	4770      	bx	lr
 8008f32:	f803 1b01 	strb.w	r1, [r3], #1
 8008f36:	e7f9      	b.n	8008f2c <memset+0x4>

08008f38 <_free_r>:
 8008f38:	b538      	push	{r3, r4, r5, lr}
 8008f3a:	4605      	mov	r5, r0
 8008f3c:	2900      	cmp	r1, #0
 8008f3e:	d045      	beq.n	8008fcc <_free_r+0x94>
 8008f40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f44:	1f0c      	subs	r4, r1, #4
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	bfb8      	it	lt
 8008f4a:	18e4      	addlt	r4, r4, r3
 8008f4c:	f000 f8ac 	bl	80090a8 <__malloc_lock>
 8008f50:	4a1f      	ldr	r2, [pc, #124]	; (8008fd0 <_free_r+0x98>)
 8008f52:	6813      	ldr	r3, [r2, #0]
 8008f54:	4610      	mov	r0, r2
 8008f56:	b933      	cbnz	r3, 8008f66 <_free_r+0x2e>
 8008f58:	6063      	str	r3, [r4, #4]
 8008f5a:	6014      	str	r4, [r2, #0]
 8008f5c:	4628      	mov	r0, r5
 8008f5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f62:	f000 b8a2 	b.w	80090aa <__malloc_unlock>
 8008f66:	42a3      	cmp	r3, r4
 8008f68:	d90c      	bls.n	8008f84 <_free_r+0x4c>
 8008f6a:	6821      	ldr	r1, [r4, #0]
 8008f6c:	1862      	adds	r2, r4, r1
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	bf04      	itt	eq
 8008f72:	681a      	ldreq	r2, [r3, #0]
 8008f74:	685b      	ldreq	r3, [r3, #4]
 8008f76:	6063      	str	r3, [r4, #4]
 8008f78:	bf04      	itt	eq
 8008f7a:	1852      	addeq	r2, r2, r1
 8008f7c:	6022      	streq	r2, [r4, #0]
 8008f7e:	6004      	str	r4, [r0, #0]
 8008f80:	e7ec      	b.n	8008f5c <_free_r+0x24>
 8008f82:	4613      	mov	r3, r2
 8008f84:	685a      	ldr	r2, [r3, #4]
 8008f86:	b10a      	cbz	r2, 8008f8c <_free_r+0x54>
 8008f88:	42a2      	cmp	r2, r4
 8008f8a:	d9fa      	bls.n	8008f82 <_free_r+0x4a>
 8008f8c:	6819      	ldr	r1, [r3, #0]
 8008f8e:	1858      	adds	r0, r3, r1
 8008f90:	42a0      	cmp	r0, r4
 8008f92:	d10b      	bne.n	8008fac <_free_r+0x74>
 8008f94:	6820      	ldr	r0, [r4, #0]
 8008f96:	4401      	add	r1, r0
 8008f98:	1858      	adds	r0, r3, r1
 8008f9a:	4282      	cmp	r2, r0
 8008f9c:	6019      	str	r1, [r3, #0]
 8008f9e:	d1dd      	bne.n	8008f5c <_free_r+0x24>
 8008fa0:	6810      	ldr	r0, [r2, #0]
 8008fa2:	6852      	ldr	r2, [r2, #4]
 8008fa4:	605a      	str	r2, [r3, #4]
 8008fa6:	4401      	add	r1, r0
 8008fa8:	6019      	str	r1, [r3, #0]
 8008faa:	e7d7      	b.n	8008f5c <_free_r+0x24>
 8008fac:	d902      	bls.n	8008fb4 <_free_r+0x7c>
 8008fae:	230c      	movs	r3, #12
 8008fb0:	602b      	str	r3, [r5, #0]
 8008fb2:	e7d3      	b.n	8008f5c <_free_r+0x24>
 8008fb4:	6820      	ldr	r0, [r4, #0]
 8008fb6:	1821      	adds	r1, r4, r0
 8008fb8:	428a      	cmp	r2, r1
 8008fba:	bf04      	itt	eq
 8008fbc:	6811      	ldreq	r1, [r2, #0]
 8008fbe:	6852      	ldreq	r2, [r2, #4]
 8008fc0:	6062      	str	r2, [r4, #4]
 8008fc2:	bf04      	itt	eq
 8008fc4:	1809      	addeq	r1, r1, r0
 8008fc6:	6021      	streq	r1, [r4, #0]
 8008fc8:	605c      	str	r4, [r3, #4]
 8008fca:	e7c7      	b.n	8008f5c <_free_r+0x24>
 8008fcc:	bd38      	pop	{r3, r4, r5, pc}
 8008fce:	bf00      	nop
 8008fd0:	200000b8 	.word	0x200000b8

08008fd4 <_malloc_r>:
 8008fd4:	b570      	push	{r4, r5, r6, lr}
 8008fd6:	1ccd      	adds	r5, r1, #3
 8008fd8:	f025 0503 	bic.w	r5, r5, #3
 8008fdc:	3508      	adds	r5, #8
 8008fde:	2d0c      	cmp	r5, #12
 8008fe0:	bf38      	it	cc
 8008fe2:	250c      	movcc	r5, #12
 8008fe4:	2d00      	cmp	r5, #0
 8008fe6:	4606      	mov	r6, r0
 8008fe8:	db01      	blt.n	8008fee <_malloc_r+0x1a>
 8008fea:	42a9      	cmp	r1, r5
 8008fec:	d903      	bls.n	8008ff6 <_malloc_r+0x22>
 8008fee:	230c      	movs	r3, #12
 8008ff0:	6033      	str	r3, [r6, #0]
 8008ff2:	2000      	movs	r0, #0
 8008ff4:	bd70      	pop	{r4, r5, r6, pc}
 8008ff6:	f000 f857 	bl	80090a8 <__malloc_lock>
 8008ffa:	4a21      	ldr	r2, [pc, #132]	; (8009080 <_malloc_r+0xac>)
 8008ffc:	6814      	ldr	r4, [r2, #0]
 8008ffe:	4621      	mov	r1, r4
 8009000:	b991      	cbnz	r1, 8009028 <_malloc_r+0x54>
 8009002:	4c20      	ldr	r4, [pc, #128]	; (8009084 <_malloc_r+0xb0>)
 8009004:	6823      	ldr	r3, [r4, #0]
 8009006:	b91b      	cbnz	r3, 8009010 <_malloc_r+0x3c>
 8009008:	4630      	mov	r0, r6
 800900a:	f000 f83d 	bl	8009088 <_sbrk_r>
 800900e:	6020      	str	r0, [r4, #0]
 8009010:	4629      	mov	r1, r5
 8009012:	4630      	mov	r0, r6
 8009014:	f000 f838 	bl	8009088 <_sbrk_r>
 8009018:	1c43      	adds	r3, r0, #1
 800901a:	d124      	bne.n	8009066 <_malloc_r+0x92>
 800901c:	230c      	movs	r3, #12
 800901e:	6033      	str	r3, [r6, #0]
 8009020:	4630      	mov	r0, r6
 8009022:	f000 f842 	bl	80090aa <__malloc_unlock>
 8009026:	e7e4      	b.n	8008ff2 <_malloc_r+0x1e>
 8009028:	680b      	ldr	r3, [r1, #0]
 800902a:	1b5b      	subs	r3, r3, r5
 800902c:	d418      	bmi.n	8009060 <_malloc_r+0x8c>
 800902e:	2b0b      	cmp	r3, #11
 8009030:	d90f      	bls.n	8009052 <_malloc_r+0x7e>
 8009032:	600b      	str	r3, [r1, #0]
 8009034:	50cd      	str	r5, [r1, r3]
 8009036:	18cc      	adds	r4, r1, r3
 8009038:	4630      	mov	r0, r6
 800903a:	f000 f836 	bl	80090aa <__malloc_unlock>
 800903e:	f104 000b 	add.w	r0, r4, #11
 8009042:	1d23      	adds	r3, r4, #4
 8009044:	f020 0007 	bic.w	r0, r0, #7
 8009048:	1ac3      	subs	r3, r0, r3
 800904a:	d0d3      	beq.n	8008ff4 <_malloc_r+0x20>
 800904c:	425a      	negs	r2, r3
 800904e:	50e2      	str	r2, [r4, r3]
 8009050:	e7d0      	b.n	8008ff4 <_malloc_r+0x20>
 8009052:	428c      	cmp	r4, r1
 8009054:	684b      	ldr	r3, [r1, #4]
 8009056:	bf16      	itet	ne
 8009058:	6063      	strne	r3, [r4, #4]
 800905a:	6013      	streq	r3, [r2, #0]
 800905c:	460c      	movne	r4, r1
 800905e:	e7eb      	b.n	8009038 <_malloc_r+0x64>
 8009060:	460c      	mov	r4, r1
 8009062:	6849      	ldr	r1, [r1, #4]
 8009064:	e7cc      	b.n	8009000 <_malloc_r+0x2c>
 8009066:	1cc4      	adds	r4, r0, #3
 8009068:	f024 0403 	bic.w	r4, r4, #3
 800906c:	42a0      	cmp	r0, r4
 800906e:	d005      	beq.n	800907c <_malloc_r+0xa8>
 8009070:	1a21      	subs	r1, r4, r0
 8009072:	4630      	mov	r0, r6
 8009074:	f000 f808 	bl	8009088 <_sbrk_r>
 8009078:	3001      	adds	r0, #1
 800907a:	d0cf      	beq.n	800901c <_malloc_r+0x48>
 800907c:	6025      	str	r5, [r4, #0]
 800907e:	e7db      	b.n	8009038 <_malloc_r+0x64>
 8009080:	200000b8 	.word	0x200000b8
 8009084:	200000bc 	.word	0x200000bc

08009088 <_sbrk_r>:
 8009088:	b538      	push	{r3, r4, r5, lr}
 800908a:	4c06      	ldr	r4, [pc, #24]	; (80090a4 <_sbrk_r+0x1c>)
 800908c:	2300      	movs	r3, #0
 800908e:	4605      	mov	r5, r0
 8009090:	4608      	mov	r0, r1
 8009092:	6023      	str	r3, [r4, #0]
 8009094:	f7f7 fe48 	bl	8000d28 <_sbrk>
 8009098:	1c43      	adds	r3, r0, #1
 800909a:	d102      	bne.n	80090a2 <_sbrk_r+0x1a>
 800909c:	6823      	ldr	r3, [r4, #0]
 800909e:	b103      	cbz	r3, 80090a2 <_sbrk_r+0x1a>
 80090a0:	602b      	str	r3, [r5, #0]
 80090a2:	bd38      	pop	{r3, r4, r5, pc}
 80090a4:	200008e0 	.word	0x200008e0

080090a8 <__malloc_lock>:
 80090a8:	4770      	bx	lr

080090aa <__malloc_unlock>:
 80090aa:	4770      	bx	lr

080090ac <_init>:
 80090ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090ae:	bf00      	nop
 80090b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090b2:	bc08      	pop	{r3}
 80090b4:	469e      	mov	lr, r3
 80090b6:	4770      	bx	lr

080090b8 <_fini>:
 80090b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090ba:	bf00      	nop
 80090bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090be:	bc08      	pop	{r3}
 80090c0:	469e      	mov	lr, r3
 80090c2:	4770      	bx	lr
