
hal_2_1_uart_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008420  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080085a8  080085a8  000185a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080085c4  080085c4  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  080085c4  080085c4  000185c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080085cc  080085cc  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080085cc  080085cc  000185cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080085d0  080085d0  000185d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080085d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000808  20000090  08008664  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000898  08008664  00020898  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b869  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003e42  00000000  00000000  0003b929  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001358  00000000  00000000  0003f770  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001190  00000000  00000000  00040ac8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000248ab  00000000  00000000  00041c58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001419f  00000000  00000000  00066503  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ccc2a  00000000  00000000  0007a6a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001472cc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005078  00000000  00000000  00147348  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008590 	.word	0x08008590

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08008590 	.word	0x08008590

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <MX_GPIO_Init>:
        * EXTI
     PC3   ------> I2S2_SD
     PB10   ------> I2S2_CK
*/
void MX_GPIO_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b08c      	sub	sp, #48	; 0x30
 80004cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ce:	f107 031c 	add.w	r3, r7, #28
 80004d2:	2200      	movs	r2, #0
 80004d4:	601a      	str	r2, [r3, #0]
 80004d6:	605a      	str	r2, [r3, #4]
 80004d8:	609a      	str	r2, [r3, #8]
 80004da:	60da      	str	r2, [r3, #12]
 80004dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004de:	2300      	movs	r3, #0
 80004e0:	61bb      	str	r3, [r7, #24]
 80004e2:	4b7b      	ldr	r3, [pc, #492]	; (80006d0 <MX_GPIO_Init+0x208>)
 80004e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e6:	4a7a      	ldr	r2, [pc, #488]	; (80006d0 <MX_GPIO_Init+0x208>)
 80004e8:	f043 0310 	orr.w	r3, r3, #16
 80004ec:	6313      	str	r3, [r2, #48]	; 0x30
 80004ee:	4b78      	ldr	r3, [pc, #480]	; (80006d0 <MX_GPIO_Init+0x208>)
 80004f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f2:	f003 0310 	and.w	r3, r3, #16
 80004f6:	61bb      	str	r3, [r7, #24]
 80004f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004fa:	2300      	movs	r3, #0
 80004fc:	617b      	str	r3, [r7, #20]
 80004fe:	4b74      	ldr	r3, [pc, #464]	; (80006d0 <MX_GPIO_Init+0x208>)
 8000500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000502:	4a73      	ldr	r2, [pc, #460]	; (80006d0 <MX_GPIO_Init+0x208>)
 8000504:	f043 0304 	orr.w	r3, r3, #4
 8000508:	6313      	str	r3, [r2, #48]	; 0x30
 800050a:	4b71      	ldr	r3, [pc, #452]	; (80006d0 <MX_GPIO_Init+0x208>)
 800050c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050e:	f003 0304 	and.w	r3, r3, #4
 8000512:	617b      	str	r3, [r7, #20]
 8000514:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000516:	2300      	movs	r3, #0
 8000518:	613b      	str	r3, [r7, #16]
 800051a:	4b6d      	ldr	r3, [pc, #436]	; (80006d0 <MX_GPIO_Init+0x208>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051e:	4a6c      	ldr	r2, [pc, #432]	; (80006d0 <MX_GPIO_Init+0x208>)
 8000520:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000524:	6313      	str	r3, [r2, #48]	; 0x30
 8000526:	4b6a      	ldr	r3, [pc, #424]	; (80006d0 <MX_GPIO_Init+0x208>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800052e:	613b      	str	r3, [r7, #16]
 8000530:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000532:	2300      	movs	r3, #0
 8000534:	60fb      	str	r3, [r7, #12]
 8000536:	4b66      	ldr	r3, [pc, #408]	; (80006d0 <MX_GPIO_Init+0x208>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053a:	4a65      	ldr	r2, [pc, #404]	; (80006d0 <MX_GPIO_Init+0x208>)
 800053c:	f043 0301 	orr.w	r3, r3, #1
 8000540:	6313      	str	r3, [r2, #48]	; 0x30
 8000542:	4b63      	ldr	r3, [pc, #396]	; (80006d0 <MX_GPIO_Init+0x208>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000546:	f003 0301 	and.w	r3, r3, #1
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800054e:	2300      	movs	r3, #0
 8000550:	60bb      	str	r3, [r7, #8]
 8000552:	4b5f      	ldr	r3, [pc, #380]	; (80006d0 <MX_GPIO_Init+0x208>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000556:	4a5e      	ldr	r2, [pc, #376]	; (80006d0 <MX_GPIO_Init+0x208>)
 8000558:	f043 0302 	orr.w	r3, r3, #2
 800055c:	6313      	str	r3, [r2, #48]	; 0x30
 800055e:	4b5c      	ldr	r3, [pc, #368]	; (80006d0 <MX_GPIO_Init+0x208>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000562:	f003 0302 	and.w	r3, r3, #2
 8000566:	60bb      	str	r3, [r7, #8]
 8000568:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800056a:	2300      	movs	r3, #0
 800056c:	607b      	str	r3, [r7, #4]
 800056e:	4b58      	ldr	r3, [pc, #352]	; (80006d0 <MX_GPIO_Init+0x208>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000572:	4a57      	ldr	r2, [pc, #348]	; (80006d0 <MX_GPIO_Init+0x208>)
 8000574:	f043 0308 	orr.w	r3, r3, #8
 8000578:	6313      	str	r3, [r2, #48]	; 0x30
 800057a:	4b55      	ldr	r3, [pc, #340]	; (80006d0 <MX_GPIO_Init+0x208>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057e:	f003 0308 	and.w	r3, r3, #8
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000586:	2200      	movs	r2, #0
 8000588:	2108      	movs	r1, #8
 800058a:	4852      	ldr	r0, [pc, #328]	; (80006d4 <MX_GPIO_Init+0x20c>)
 800058c:	f000 ff80 	bl	8001490 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000590:	2201      	movs	r2, #1
 8000592:	2101      	movs	r1, #1
 8000594:	4850      	ldr	r0, [pc, #320]	; (80006d8 <MX_GPIO_Init+0x210>)
 8000596:	f000 ff7b 	bl	8001490 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_5, GPIO_PIN_RESET);
 800059a:	2200      	movs	r2, #0
 800059c:	2121      	movs	r1, #33	; 0x21
 800059e:	484f      	ldr	r0, [pc, #316]	; (80006dc <MX_GPIO_Init+0x214>)
 80005a0:	f000 ff76 	bl	8001490 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
 80005a4:	2200      	movs	r2, #0
 80005a6:	f24f 0110 	movw	r1, #61456	; 0xf010
 80005aa:	484d      	ldr	r0, [pc, #308]	; (80006e0 <MX_GPIO_Init+0x218>)
 80005ac:	f000 ff70 	bl	8001490 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80005b0:	2308      	movs	r3, #8
 80005b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b4:	2301      	movs	r3, #1
 80005b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b8:	2300      	movs	r3, #0
 80005ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005bc:	2300      	movs	r3, #0
 80005be:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80005c0:	f107 031c 	add.w	r3, r7, #28
 80005c4:	4619      	mov	r1, r3
 80005c6:	4843      	ldr	r0, [pc, #268]	; (80006d4 <MX_GPIO_Init+0x20c>)
 80005c8:	f000 fdc8 	bl	800115c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80005cc:	2301      	movs	r3, #1
 80005ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d0:	2301      	movs	r3, #1
 80005d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d4:	2300      	movs	r3, #0
 80005d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d8:	2300      	movs	r3, #0
 80005da:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80005dc:	f107 031c 	add.w	r3, r7, #28
 80005e0:	4619      	mov	r1, r3
 80005e2:	483d      	ldr	r0, [pc, #244]	; (80006d8 <MX_GPIO_Init+0x210>)
 80005e4:	f000 fdba 	bl	800115c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80005e8:	2308      	movs	r3, #8
 80005ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ec:	2302      	movs	r3, #2
 80005ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f0:	2300      	movs	r3, #0
 80005f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f4:	2300      	movs	r3, #0
 80005f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80005f8:	2305      	movs	r3, #5
 80005fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80005fc:	f107 031c 	add.w	r3, r7, #28
 8000600:	4619      	mov	r1, r3
 8000602:	4835      	ldr	r0, [pc, #212]	; (80006d8 <MX_GPIO_Init+0x210>)
 8000604:	f000 fdaa 	bl	800115c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000608:	2301      	movs	r3, #1
 800060a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800060c:	4b35      	ldr	r3, [pc, #212]	; (80006e4 <MX_GPIO_Init+0x21c>)
 800060e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000610:	2300      	movs	r3, #0
 8000612:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000614:	f107 031c 	add.w	r3, r7, #28
 8000618:	4619      	mov	r1, r3
 800061a:	4833      	ldr	r0, [pc, #204]	; (80006e8 <MX_GPIO_Init+0x220>)
 800061c:	f000 fd9e 	bl	800115c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5;
 8000620:	2321      	movs	r3, #33	; 0x21
 8000622:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000624:	2301      	movs	r3, #1
 8000626:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000628:	2300      	movs	r3, #0
 800062a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800062c:	2300      	movs	r3, #0
 800062e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000630:	f107 031c 	add.w	r3, r7, #28
 8000634:	4619      	mov	r1, r3
 8000636:	4829      	ldr	r0, [pc, #164]	; (80006dc <MX_GPIO_Init+0x214>)
 8000638:	f000 fd90 	bl	800115c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800063c:	2304      	movs	r3, #4
 800063e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000640:	2300      	movs	r3, #0
 8000642:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000644:	2300      	movs	r3, #0
 8000646:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000648:	f107 031c 	add.w	r3, r7, #28
 800064c:	4619      	mov	r1, r3
 800064e:	4823      	ldr	r0, [pc, #140]	; (80006dc <MX_GPIO_Init+0x214>)
 8000650:	f000 fd84 	bl	800115c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000654:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000658:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800065a:	2302      	movs	r3, #2
 800065c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065e:	2300      	movs	r3, #0
 8000660:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000662:	2300      	movs	r3, #0
 8000664:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000666:	2305      	movs	r3, #5
 8000668:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800066a:	f107 031c 	add.w	r3, r7, #28
 800066e:	4619      	mov	r1, r3
 8000670:	481a      	ldr	r0, [pc, #104]	; (80006dc <MX_GPIO_Init+0x214>)
 8000672:	f000 fd73 	bl	800115c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11 
                           PDPin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8000676:	f44f 6372 	mov.w	r3, #3872	; 0xf20
 800067a:	61fb      	str	r3, [r7, #28]
                          |OTG_FS_OverCurrent_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800067c:	2300      	movs	r3, #0
 800067e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000680:	2300      	movs	r3, #0
 8000682:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000684:	f107 031c 	add.w	r3, r7, #28
 8000688:	4619      	mov	r1, r3
 800068a:	4815      	ldr	r0, [pc, #84]	; (80006e0 <MX_GPIO_Init+0x218>)
 800068c:	f000 fd66 	bl	800115c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 
                           PDPin */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
 8000690:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000694:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000696:	2301      	movs	r3, #1
 8000698:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069a:	2300      	movs	r3, #0
 800069c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069e:	2300      	movs	r3, #0
 80006a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006a2:	f107 031c 	add.w	r3, r7, #28
 80006a6:	4619      	mov	r1, r3
 80006a8:	480d      	ldr	r0, [pc, #52]	; (80006e0 <MX_GPIO_Init+0x218>)
 80006aa:	f000 fd57 	bl	800115c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80006ae:	2302      	movs	r3, #2
 80006b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80006b2:	4b0c      	ldr	r3, [pc, #48]	; (80006e4 <MX_GPIO_Init+0x21c>)
 80006b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b6:	2300      	movs	r3, #0
 80006b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80006ba:	f107 031c 	add.w	r3, r7, #28
 80006be:	4619      	mov	r1, r3
 80006c0:	4804      	ldr	r0, [pc, #16]	; (80006d4 <MX_GPIO_Init+0x20c>)
 80006c2:	f000 fd4b 	bl	800115c <HAL_GPIO_Init>

}
 80006c6:	bf00      	nop
 80006c8:	3730      	adds	r7, #48	; 0x30
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40023800 	.word	0x40023800
 80006d4:	40021000 	.word	0x40021000
 80006d8:	40020800 	.word	0x40020800
 80006dc:	40020400 	.word	0x40020400
 80006e0:	40020c00 	.word	0x40020c00
 80006e4:	10120000 	.word	0x10120000
 80006e8:	40020000 	.word	0x40020000

080006ec <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80006f0:	4b12      	ldr	r3, [pc, #72]	; (800073c <MX_I2C1_Init+0x50>)
 80006f2:	4a13      	ldr	r2, [pc, #76]	; (8000740 <MX_I2C1_Init+0x54>)
 80006f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006f6:	4b11      	ldr	r3, [pc, #68]	; (800073c <MX_I2C1_Init+0x50>)
 80006f8:	4a12      	ldr	r2, [pc, #72]	; (8000744 <MX_I2C1_Init+0x58>)
 80006fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006fc:	4b0f      	ldr	r3, [pc, #60]	; (800073c <MX_I2C1_Init+0x50>)
 80006fe:	2200      	movs	r2, #0
 8000700:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000702:	4b0e      	ldr	r3, [pc, #56]	; (800073c <MX_I2C1_Init+0x50>)
 8000704:	2200      	movs	r2, #0
 8000706:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000708:	4b0c      	ldr	r3, [pc, #48]	; (800073c <MX_I2C1_Init+0x50>)
 800070a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800070e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000710:	4b0a      	ldr	r3, [pc, #40]	; (800073c <MX_I2C1_Init+0x50>)
 8000712:	2200      	movs	r2, #0
 8000714:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000716:	4b09      	ldr	r3, [pc, #36]	; (800073c <MX_I2C1_Init+0x50>)
 8000718:	2200      	movs	r2, #0
 800071a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800071c:	4b07      	ldr	r3, [pc, #28]	; (800073c <MX_I2C1_Init+0x50>)
 800071e:	2200      	movs	r2, #0
 8000720:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000722:	4b06      	ldr	r3, [pc, #24]	; (800073c <MX_I2C1_Init+0x50>)
 8000724:	2200      	movs	r2, #0
 8000726:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000728:	4804      	ldr	r0, [pc, #16]	; (800073c <MX_I2C1_Init+0x50>)
 800072a:	f002 fbbb 	bl	8002ea4 <HAL_I2C_Init>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000734:	f000 f9a8 	bl	8000a88 <Error_Handler>
  }

}
 8000738:	bf00      	nop
 800073a:	bd80      	pop	{r7, pc}
 800073c:	200000c0 	.word	0x200000c0
 8000740:	40005400 	.word	0x40005400
 8000744:	000186a0 	.word	0x000186a0

08000748 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b08a      	sub	sp, #40	; 0x28
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000750:	f107 0314 	add.w	r3, r7, #20
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
 800075e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a19      	ldr	r2, [pc, #100]	; (80007cc <HAL_I2C_MspInit+0x84>)
 8000766:	4293      	cmp	r3, r2
 8000768:	d12c      	bne.n	80007c4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	613b      	str	r3, [r7, #16]
 800076e:	4b18      	ldr	r3, [pc, #96]	; (80007d0 <HAL_I2C_MspInit+0x88>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4a17      	ldr	r2, [pc, #92]	; (80007d0 <HAL_I2C_MspInit+0x88>)
 8000774:	f043 0302 	orr.w	r3, r3, #2
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4b15      	ldr	r3, [pc, #84]	; (80007d0 <HAL_I2C_MspInit+0x88>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0302 	and.w	r3, r3, #2
 8000782:	613b      	str	r3, [r7, #16]
 8000784:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000786:	f44f 7310 	mov.w	r3, #576	; 0x240
 800078a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800078c:	2312      	movs	r3, #18
 800078e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000790:	2301      	movs	r3, #1
 8000792:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000794:	2300      	movs	r3, #0
 8000796:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000798:	2304      	movs	r3, #4
 800079a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800079c:	f107 0314 	add.w	r3, r7, #20
 80007a0:	4619      	mov	r1, r3
 80007a2:	480c      	ldr	r0, [pc, #48]	; (80007d4 <HAL_I2C_MspInit+0x8c>)
 80007a4:	f000 fcda 	bl	800115c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007a8:	2300      	movs	r3, #0
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	4b08      	ldr	r3, [pc, #32]	; (80007d0 <HAL_I2C_MspInit+0x88>)
 80007ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b0:	4a07      	ldr	r2, [pc, #28]	; (80007d0 <HAL_I2C_MspInit+0x88>)
 80007b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007b6:	6413      	str	r3, [r2, #64]	; 0x40
 80007b8:	4b05      	ldr	r3, [pc, #20]	; (80007d0 <HAL_I2C_MspInit+0x88>)
 80007ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007c0:	60fb      	str	r3, [r7, #12]
 80007c2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80007c4:	bf00      	nop
 80007c6:	3728      	adds	r7, #40	; 0x28
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	40005400 	.word	0x40005400
 80007d0:	40023800 	.word	0x40023800
 80007d4:	40020400 	.word	0x40020400

080007d8 <MX_I2S3_Init>:

I2S_HandleTypeDef hi2s3;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0

  hi2s3.Instance = SPI3;
 80007dc:	4b13      	ldr	r3, [pc, #76]	; (800082c <MX_I2S3_Init+0x54>)
 80007de:	4a14      	ldr	r2, [pc, #80]	; (8000830 <MX_I2S3_Init+0x58>)
 80007e0:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80007e2:	4b12      	ldr	r3, [pc, #72]	; (800082c <MX_I2S3_Init+0x54>)
 80007e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007e8:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80007ea:	4b10      	ldr	r3, [pc, #64]	; (800082c <MX_I2S3_Init+0x54>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007f0:	4b0e      	ldr	r3, [pc, #56]	; (800082c <MX_I2S3_Init+0x54>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80007f6:	4b0d      	ldr	r3, [pc, #52]	; (800082c <MX_I2S3_Init+0x54>)
 80007f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007fc:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80007fe:	4b0b      	ldr	r3, [pc, #44]	; (800082c <MX_I2S3_Init+0x54>)
 8000800:	4a0c      	ldr	r2, [pc, #48]	; (8000834 <MX_I2S3_Init+0x5c>)
 8000802:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000804:	4b09      	ldr	r3, [pc, #36]	; (800082c <MX_I2S3_Init+0x54>)
 8000806:	2200      	movs	r2, #0
 8000808:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800080a:	4b08      	ldr	r3, [pc, #32]	; (800082c <MX_I2S3_Init+0x54>)
 800080c:	2200      	movs	r2, #0
 800080e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000810:	4b06      	ldr	r3, [pc, #24]	; (800082c <MX_I2S3_Init+0x54>)
 8000812:	2200      	movs	r2, #0
 8000814:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000816:	4805      	ldr	r0, [pc, #20]	; (800082c <MX_I2S3_Init+0x54>)
 8000818:	f002 fc7c 	bl	8003114 <HAL_I2S_Init>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000822:	f000 f931 	bl	8000a88 <Error_Handler>
  }

}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	20000114 	.word	0x20000114
 8000830:	40003c00 	.word	0x40003c00
 8000834:	00017700 	.word	0x00017700

08000838 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b08a      	sub	sp, #40	; 0x28
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000840:	f107 0314 	add.w	r3, r7, #20
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	60da      	str	r2, [r3, #12]
 800084e:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI3)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a28      	ldr	r2, [pc, #160]	; (80008f8 <HAL_I2S_MspInit+0xc0>)
 8000856:	4293      	cmp	r3, r2
 8000858:	d14a      	bne.n	80008f0 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	613b      	str	r3, [r7, #16]
 800085e:	4b27      	ldr	r3, [pc, #156]	; (80008fc <HAL_I2S_MspInit+0xc4>)
 8000860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000862:	4a26      	ldr	r2, [pc, #152]	; (80008fc <HAL_I2S_MspInit+0xc4>)
 8000864:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000868:	6413      	str	r3, [r2, #64]	; 0x40
 800086a:	4b24      	ldr	r3, [pc, #144]	; (80008fc <HAL_I2S_MspInit+0xc4>)
 800086c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000872:	613b      	str	r3, [r7, #16]
 8000874:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	60fb      	str	r3, [r7, #12]
 800087a:	4b20      	ldr	r3, [pc, #128]	; (80008fc <HAL_I2S_MspInit+0xc4>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a1f      	ldr	r2, [pc, #124]	; (80008fc <HAL_I2S_MspInit+0xc4>)
 8000880:	f043 0301 	orr.w	r3, r3, #1
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b1d      	ldr	r3, [pc, #116]	; (80008fc <HAL_I2S_MspInit+0xc4>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	60bb      	str	r3, [r7, #8]
 8000896:	4b19      	ldr	r3, [pc, #100]	; (80008fc <HAL_I2S_MspInit+0xc4>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a18      	ldr	r2, [pc, #96]	; (80008fc <HAL_I2S_MspInit+0xc4>)
 800089c:	f043 0304 	orr.w	r3, r3, #4
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b16      	ldr	r3, [pc, #88]	; (80008fc <HAL_I2S_MspInit+0xc4>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0304 	and.w	r3, r3, #4
 80008aa:	60bb      	str	r3, [r7, #8]
 80008ac:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008ae:	2310      	movs	r3, #16
 80008b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b2:	2302      	movs	r3, #2
 80008b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ba:	2300      	movs	r3, #0
 80008bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008be:	2306      	movs	r3, #6
 80008c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80008c2:	f107 0314 	add.w	r3, r7, #20
 80008c6:	4619      	mov	r1, r3
 80008c8:	480d      	ldr	r0, [pc, #52]	; (8000900 <HAL_I2S_MspInit+0xc8>)
 80008ca:	f000 fc47 	bl	800115c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80008ce:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80008d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d4:	2302      	movs	r3, #2
 80008d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008dc:	2300      	movs	r3, #0
 80008de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008e0:	2306      	movs	r3, #6
 80008e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008e4:	f107 0314 	add.w	r3, r7, #20
 80008e8:	4619      	mov	r1, r3
 80008ea:	4806      	ldr	r0, [pc, #24]	; (8000904 <HAL_I2S_MspInit+0xcc>)
 80008ec:	f000 fc36 	bl	800115c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80008f0:	bf00      	nop
 80008f2:	3728      	adds	r7, #40	; 0x28
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	40003c00 	.word	0x40003c00
 80008fc:	40023800 	.word	0x40023800
 8000900:	40020000 	.word	0x40020000
 8000904:	40020800 	.word	0x40020800

08000908 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800090e:	f000 fa7f 	bl	8000e10 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000912:	f000 f837 	bl	8000984 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000916:	f7ff fdd7 	bl	80004c8 <MX_GPIO_Init>
	MX_I2C1_Init();
 800091a:	f7ff fee7 	bl	80006ec <MX_I2C1_Init>
	MX_I2S3_Init();
 800091e:	f7ff ff5b 	bl	80007d8 <MX_I2S3_Init>
	MX_SPI1_Init();
 8000922:	f000 f8b9 	bl	8000a98 <MX_SPI1_Init>
	MX_USB_HOST_Init();
 8000926:	f007 fa2f 	bl	8007d88 <MX_USB_HOST_Init>
	MX_USART2_UART_Init();
 800092a:	f000 f9d5 	bl	8000cd8 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800092e:	2201      	movs	r2, #1
 8000930:	2101      	movs	r1, #1
 8000932:	4811      	ldr	r0, [pc, #68]	; (8000978 <main+0x70>)
 8000934:	f000 fdac 	bl	8001490 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000938:	2201      	movs	r2, #1
 800093a:	2120      	movs	r1, #32
 800093c:	480e      	ldr	r0, [pc, #56]	; (8000978 <main+0x70>)
 800093e:	f000 fda7 	bl	8001490 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000942:	2201      	movs	r2, #1
 8000944:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000948:	480c      	ldr	r0, [pc, #48]	; (800097c <main+0x74>)
 800094a:	f000 fda1 	bl	8001490 <HAL_GPIO_WritePin>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	uint8_t a = 'a';
 800094e:	2361      	movs	r3, #97	; 0x61
 8000950:	71fb      	strb	r3, [r7, #7]
		//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
		//
		//		HAL_Delay(1000);


		if(HAL_UART_Receive(&huart2, &a, 2, 10) == HAL_OK) {
 8000952:	1df9      	adds	r1, r7, #7
 8000954:	230a      	movs	r3, #10
 8000956:	2202      	movs	r2, #2
 8000958:	4809      	ldr	r0, [pc, #36]	; (8000980 <main+0x78>)
 800095a:	f003 ff65 	bl	8004828 <HAL_UART_Receive>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d105      	bne.n	8000970 <main+0x68>
			HAL_UART_Transmit(&huart2, &a, 2, 10);
 8000964:	1df9      	adds	r1, r7, #7
 8000966:	230a      	movs	r3, #10
 8000968:	2202      	movs	r2, #2
 800096a:	4805      	ldr	r0, [pc, #20]	; (8000980 <main+0x78>)
 800096c:	f003 fec3 	bl	80046f6 <HAL_UART_Transmit>
		}
		/* USER CODE END WHILE */
		MX_USB_HOST_Process();
 8000970:	f007 fa30 	bl	8007dd4 <MX_USB_HOST_Process>
		if(HAL_UART_Receive(&huart2, &a, 2, 10) == HAL_OK) {
 8000974:	e7ed      	b.n	8000952 <main+0x4a>
 8000976:	bf00      	nop
 8000978:	40020400 	.word	0x40020400
 800097c:	40020c00 	.word	0x40020c00
 8000980:	200001b4 	.word	0x200001b4

08000984 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b098      	sub	sp, #96	; 0x60
 8000988:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800098a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800098e:	2230      	movs	r2, #48	; 0x30
 8000990:	2100      	movs	r1, #0
 8000992:	4618      	mov	r0, r3
 8000994:	f007 fd3a 	bl	800840c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000998:	f107 031c 	add.w	r3, r7, #28
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	605a      	str	r2, [r3, #4]
 80009a2:	609a      	str	r2, [r3, #8]
 80009a4:	60da      	str	r2, [r3, #12]
 80009a6:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009a8:	f107 030c 	add.w	r3, r7, #12
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	605a      	str	r2, [r3, #4]
 80009b2:	609a      	str	r2, [r3, #8]
 80009b4:	60da      	str	r2, [r3, #12]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	60bb      	str	r3, [r7, #8]
 80009ba:	4b31      	ldr	r3, [pc, #196]	; (8000a80 <SystemClock_Config+0xfc>)
 80009bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009be:	4a30      	ldr	r2, [pc, #192]	; (8000a80 <SystemClock_Config+0xfc>)
 80009c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009c4:	6413      	str	r3, [r2, #64]	; 0x40
 80009c6:	4b2e      	ldr	r3, [pc, #184]	; (8000a80 <SystemClock_Config+0xfc>)
 80009c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ce:	60bb      	str	r3, [r7, #8]
 80009d0:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009d2:	2300      	movs	r3, #0
 80009d4:	607b      	str	r3, [r7, #4]
 80009d6:	4b2b      	ldr	r3, [pc, #172]	; (8000a84 <SystemClock_Config+0x100>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	4a2a      	ldr	r2, [pc, #168]	; (8000a84 <SystemClock_Config+0x100>)
 80009dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009e0:	6013      	str	r3, [r2, #0]
 80009e2:	4b28      	ldr	r3, [pc, #160]	; (8000a84 <SystemClock_Config+0x100>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ea:	607b      	str	r3, [r7, #4]
 80009ec:	687b      	ldr	r3, [r7, #4]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009ee:	2301      	movs	r3, #1
 80009f0:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009f6:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009f8:	2302      	movs	r3, #2
 80009fa:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009fc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a00:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000a02:	2308      	movs	r3, #8
 8000a04:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000a06:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a0a:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a10:	2307      	movs	r3, #7
 8000a12:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a14:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f003 f81b 	bl	8003a54 <HAL_RCC_OscConfig>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <SystemClock_Config+0xa4>
	{
		Error_Handler();
 8000a24:	f000 f830 	bl	8000a88 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a28:	230f      	movs	r3, #15
 8000a2a:	61fb      	str	r3, [r7, #28]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a30:	2300      	movs	r3, #0
 8000a32:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a34:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a38:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a3e:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a40:	f107 031c 	add.w	r3, r7, #28
 8000a44:	2105      	movs	r1, #5
 8000a46:	4618      	mov	r0, r3
 8000a48:	f003 fa74 	bl	8003f34 <HAL_RCC_ClockConfig>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <SystemClock_Config+0xd2>
	{
		Error_Handler();
 8000a52:	f000 f819 	bl	8000a88 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000a56:	2301      	movs	r3, #1
 8000a58:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000a5a:	23c0      	movs	r3, #192	; 0xc0
 8000a5c:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	617b      	str	r3, [r7, #20]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a62:	f107 030c 	add.w	r3, r7, #12
 8000a66:	4618      	mov	r0, r3
 8000a68:	f003 fc56 	bl	8004318 <HAL_RCCEx_PeriphCLKConfig>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <SystemClock_Config+0xf2>
	{
		Error_Handler();
 8000a72:	f000 f809 	bl	8000a88 <Error_Handler>
	}
}
 8000a76:	bf00      	nop
 8000a78:	3760      	adds	r7, #96	; 0x60
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40023800 	.word	0x40023800
 8000a84:	40007000 	.word	0x40007000

08000a88 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000a8c:	bf00      	nop
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
	...

08000a98 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000a9c:	4b17      	ldr	r3, [pc, #92]	; (8000afc <MX_SPI1_Init+0x64>)
 8000a9e:	4a18      	ldr	r2, [pc, #96]	; (8000b00 <MX_SPI1_Init+0x68>)
 8000aa0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000aa2:	4b16      	ldr	r3, [pc, #88]	; (8000afc <MX_SPI1_Init+0x64>)
 8000aa4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000aa8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000aaa:	4b14      	ldr	r3, [pc, #80]	; (8000afc <MX_SPI1_Init+0x64>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ab0:	4b12      	ldr	r3, [pc, #72]	; (8000afc <MX_SPI1_Init+0x64>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ab6:	4b11      	ldr	r3, [pc, #68]	; (8000afc <MX_SPI1_Init+0x64>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000abc:	4b0f      	ldr	r3, [pc, #60]	; (8000afc <MX_SPI1_Init+0x64>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	; (8000afc <MX_SPI1_Init+0x64>)
 8000ac4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ac8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000aca:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <MX_SPI1_Init+0x64>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ad0:	4b0a      	ldr	r3, [pc, #40]	; (8000afc <MX_SPI1_Init+0x64>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ad6:	4b09      	ldr	r3, [pc, #36]	; (8000afc <MX_SPI1_Init+0x64>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000adc:	4b07      	ldr	r3, [pc, #28]	; (8000afc <MX_SPI1_Init+0x64>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000ae2:	4b06      	ldr	r3, [pc, #24]	; (8000afc <MX_SPI1_Init+0x64>)
 8000ae4:	220a      	movs	r2, #10
 8000ae6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ae8:	4804      	ldr	r0, [pc, #16]	; (8000afc <MX_SPI1_Init+0x64>)
 8000aea:	f003 fd53 	bl	8004594 <HAL_SPI_Init>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000af4:	f7ff ffc8 	bl	8000a88 <Error_Handler>
  }

}
 8000af8:	bf00      	nop
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	2000015c 	.word	0x2000015c
 8000b00:	40013000 	.word	0x40013000

08000b04 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08a      	sub	sp, #40	; 0x28
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a19      	ldr	r2, [pc, #100]	; (8000b88 <HAL_SPI_MspInit+0x84>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d12b      	bne.n	8000b7e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	613b      	str	r3, [r7, #16]
 8000b2a:	4b18      	ldr	r3, [pc, #96]	; (8000b8c <HAL_SPI_MspInit+0x88>)
 8000b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b2e:	4a17      	ldr	r2, [pc, #92]	; (8000b8c <HAL_SPI_MspInit+0x88>)
 8000b30:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b34:	6453      	str	r3, [r2, #68]	; 0x44
 8000b36:	4b15      	ldr	r3, [pc, #84]	; (8000b8c <HAL_SPI_MspInit+0x88>)
 8000b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b3e:	613b      	str	r3, [r7, #16]
 8000b40:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	60fb      	str	r3, [r7, #12]
 8000b46:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <HAL_SPI_MspInit+0x88>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	4a10      	ldr	r2, [pc, #64]	; (8000b8c <HAL_SPI_MspInit+0x88>)
 8000b4c:	f043 0301 	orr.w	r3, r3, #1
 8000b50:	6313      	str	r3, [r2, #48]	; 0x30
 8000b52:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <HAL_SPI_MspInit+0x88>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	f003 0301 	and.w	r3, r3, #1
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000b5e:	23e0      	movs	r3, #224	; 0xe0
 8000b60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b62:	2302      	movs	r3, #2
 8000b64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b6e:	2305      	movs	r3, #5
 8000b70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b72:	f107 0314 	add.w	r3, r7, #20
 8000b76:	4619      	mov	r1, r3
 8000b78:	4805      	ldr	r0, [pc, #20]	; (8000b90 <HAL_SPI_MspInit+0x8c>)
 8000b7a:	f000 faef 	bl	800115c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000b7e:	bf00      	nop
 8000b80:	3728      	adds	r7, #40	; 0x28
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40013000 	.word	0x40013000
 8000b8c:	40023800 	.word	0x40023800
 8000b90:	40020000 	.word	0x40020000

08000b94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	607b      	str	r3, [r7, #4]
 8000b9e:	4b10      	ldr	r3, [pc, #64]	; (8000be0 <HAL_MspInit+0x4c>)
 8000ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ba2:	4a0f      	ldr	r2, [pc, #60]	; (8000be0 <HAL_MspInit+0x4c>)
 8000ba4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ba8:	6453      	str	r3, [r2, #68]	; 0x44
 8000baa:	4b0d      	ldr	r3, [pc, #52]	; (8000be0 <HAL_MspInit+0x4c>)
 8000bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bb2:	607b      	str	r3, [r7, #4]
 8000bb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	603b      	str	r3, [r7, #0]
 8000bba:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <HAL_MspInit+0x4c>)
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbe:	4a08      	ldr	r2, [pc, #32]	; (8000be0 <HAL_MspInit+0x4c>)
 8000bc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bc6:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <HAL_MspInit+0x4c>)
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bce:	603b      	str	r3, [r7, #0]
 8000bd0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000bd2:	2007      	movs	r0, #7
 8000bd4:	f000 fa80 	bl	80010d8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bd8:	bf00      	nop
 8000bda:	3708      	adds	r7, #8
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	40023800 	.word	0x40023800

08000be4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr

08000bf2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bf6:	e7fe      	b.n	8000bf6 <HardFault_Handler+0x4>

08000bf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bfc:	e7fe      	b.n	8000bfc <MemManage_Handler+0x4>

08000bfe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c02:	e7fe      	b.n	8000c02 <BusFault_Handler+0x4>

08000c04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <UsageFault_Handler+0x4>

08000c0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr

08000c18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr

08000c26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr

08000c34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c38:	f000 f93c 	bl	8000eb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c3c:	bf00      	nop
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000c44:	4802      	ldr	r0, [pc, #8]	; (8000c50 <OTG_FS_IRQHandler+0x10>)
 8000c46:	f000 fecb 	bl	80019e0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	200005d0 	.word	0x200005d0

08000c54 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000c5c:	4b11      	ldr	r3, [pc, #68]	; (8000ca4 <_sbrk+0x50>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d102      	bne.n	8000c6a <_sbrk+0x16>
		heap_end = &end;
 8000c64:	4b0f      	ldr	r3, [pc, #60]	; (8000ca4 <_sbrk+0x50>)
 8000c66:	4a10      	ldr	r2, [pc, #64]	; (8000ca8 <_sbrk+0x54>)
 8000c68:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000c6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ca4 <_sbrk+0x50>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000c70:	4b0c      	ldr	r3, [pc, #48]	; (8000ca4 <_sbrk+0x50>)
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	4413      	add	r3, r2
 8000c78:	466a      	mov	r2, sp
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d907      	bls.n	8000c8e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000c7e:	f007 fb8b 	bl	8008398 <__errno>
 8000c82:	4602      	mov	r2, r0
 8000c84:	230c      	movs	r3, #12
 8000c86:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000c88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c8c:	e006      	b.n	8000c9c <_sbrk+0x48>
	}

	heap_end += incr;
 8000c8e:	4b05      	ldr	r3, [pc, #20]	; (8000ca4 <_sbrk+0x50>)
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4413      	add	r3, r2
 8000c96:	4a03      	ldr	r2, [pc, #12]	; (8000ca4 <_sbrk+0x50>)
 8000c98:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000c9a:	68fb      	ldr	r3, [r7, #12]
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3710      	adds	r7, #16
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	200000ac 	.word	0x200000ac
 8000ca8:	20000898 	.word	0x20000898

08000cac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cb0:	4b08      	ldr	r3, [pc, #32]	; (8000cd4 <SystemInit+0x28>)
 8000cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cb6:	4a07      	ldr	r2, [pc, #28]	; (8000cd4 <SystemInit+0x28>)
 8000cb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000cc0:	4b04      	ldr	r3, [pc, #16]	; (8000cd4 <SystemInit+0x28>)
 8000cc2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cc6:	609a      	str	r2, [r3, #8]
#endif
}
 8000cc8:	bf00      	nop
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	e000ed00 	.word	0xe000ed00

08000cd8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000cdc:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <MX_USART2_UART_Init+0x4c>)
 8000cde:	4a12      	ldr	r2, [pc, #72]	; (8000d28 <MX_USART2_UART_Init+0x50>)
 8000ce0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ce2:	4b10      	ldr	r3, [pc, #64]	; (8000d24 <MX_USART2_UART_Init+0x4c>)
 8000ce4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ce8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cea:	4b0e      	ldr	r3, [pc, #56]	; (8000d24 <MX_USART2_UART_Init+0x4c>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cf0:	4b0c      	ldr	r3, [pc, #48]	; (8000d24 <MX_USART2_UART_Init+0x4c>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cf6:	4b0b      	ldr	r3, [pc, #44]	; (8000d24 <MX_USART2_UART_Init+0x4c>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cfc:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <MX_USART2_UART_Init+0x4c>)
 8000cfe:	220c      	movs	r2, #12
 8000d00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d02:	4b08      	ldr	r3, [pc, #32]	; (8000d24 <MX_USART2_UART_Init+0x4c>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d08:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <MX_USART2_UART_Init+0x4c>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d0e:	4805      	ldr	r0, [pc, #20]	; (8000d24 <MX_USART2_UART_Init+0x4c>)
 8000d10:	f003 fca4 	bl	800465c <HAL_UART_Init>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d1a:	f7ff feb5 	bl	8000a88 <Error_Handler>
  }

}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	200001b4 	.word	0x200001b4
 8000d28:	40004400 	.word	0x40004400

08000d2c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b08a      	sub	sp, #40	; 0x28
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d34:	f107 0314 	add.w	r3, r7, #20
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	60da      	str	r2, [r3, #12]
 8000d42:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a19      	ldr	r2, [pc, #100]	; (8000db0 <HAL_UART_MspInit+0x84>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d12b      	bne.n	8000da6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	613b      	str	r3, [r7, #16]
 8000d52:	4b18      	ldr	r3, [pc, #96]	; (8000db4 <HAL_UART_MspInit+0x88>)
 8000d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d56:	4a17      	ldr	r2, [pc, #92]	; (8000db4 <HAL_UART_MspInit+0x88>)
 8000d58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d5e:	4b15      	ldr	r3, [pc, #84]	; (8000db4 <HAL_UART_MspInit+0x88>)
 8000d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d66:	613b      	str	r3, [r7, #16]
 8000d68:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	60fb      	str	r3, [r7, #12]
 8000d6e:	4b11      	ldr	r3, [pc, #68]	; (8000db4 <HAL_UART_MspInit+0x88>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	4a10      	ldr	r2, [pc, #64]	; (8000db4 <HAL_UART_MspInit+0x88>)
 8000d74:	f043 0301 	orr.w	r3, r3, #1
 8000d78:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7a:	4b0e      	ldr	r3, [pc, #56]	; (8000db4 <HAL_UART_MspInit+0x88>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	f003 0301 	and.w	r3, r3, #1
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d86:	230c      	movs	r3, #12
 8000d88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d92:	2303      	movs	r3, #3
 8000d94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d96:	2307      	movs	r3, #7
 8000d98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d9a:	f107 0314 	add.w	r3, r7, #20
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4805      	ldr	r0, [pc, #20]	; (8000db8 <HAL_UART_MspInit+0x8c>)
 8000da2:	f000 f9db 	bl	800115c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000da6:	bf00      	nop
 8000da8:	3728      	adds	r7, #40	; 0x28
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40004400 	.word	0x40004400
 8000db4:	40023800 	.word	0x40023800
 8000db8:	40020000 	.word	0x40020000

08000dbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000dbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000df4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000dc0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000dc2:	e003      	b.n	8000dcc <LoopCopyDataInit>

08000dc4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000dc4:	4b0c      	ldr	r3, [pc, #48]	; (8000df8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000dc6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000dc8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000dca:	3104      	adds	r1, #4

08000dcc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000dcc:	480b      	ldr	r0, [pc, #44]	; (8000dfc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000dce:	4b0c      	ldr	r3, [pc, #48]	; (8000e00 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000dd0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000dd2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000dd4:	d3f6      	bcc.n	8000dc4 <CopyDataInit>
  ldr  r2, =_sbss
 8000dd6:	4a0b      	ldr	r2, [pc, #44]	; (8000e04 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000dd8:	e002      	b.n	8000de0 <LoopFillZerobss>

08000dda <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000dda:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ddc:	f842 3b04 	str.w	r3, [r2], #4

08000de0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000de0:	4b09      	ldr	r3, [pc, #36]	; (8000e08 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000de2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000de4:	d3f9      	bcc.n	8000dda <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000de6:	f7ff ff61 	bl	8000cac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dea:	f007 fadb 	bl	80083a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dee:	f7ff fd8b 	bl	8000908 <main>
  bx  lr    
 8000df2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000df4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000df8:	080085d4 	.word	0x080085d4
  ldr  r0, =_sdata
 8000dfc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e00:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8000e04:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8000e08:	20000898 	.word	0x20000898

08000e0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e0c:	e7fe      	b.n	8000e0c <ADC_IRQHandler>
	...

08000e10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e14:	4b0e      	ldr	r3, [pc, #56]	; (8000e50 <HAL_Init+0x40>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a0d      	ldr	r2, [pc, #52]	; (8000e50 <HAL_Init+0x40>)
 8000e1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e20:	4b0b      	ldr	r3, [pc, #44]	; (8000e50 <HAL_Init+0x40>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a0a      	ldr	r2, [pc, #40]	; (8000e50 <HAL_Init+0x40>)
 8000e26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e2c:	4b08      	ldr	r3, [pc, #32]	; (8000e50 <HAL_Init+0x40>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a07      	ldr	r2, [pc, #28]	; (8000e50 <HAL_Init+0x40>)
 8000e32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e38:	2003      	movs	r0, #3
 8000e3a:	f000 f94d 	bl	80010d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e3e:	2000      	movs	r0, #0
 8000e40:	f000 f808 	bl	8000e54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e44:	f7ff fea6 	bl	8000b94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e48:	2300      	movs	r3, #0
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	40023c00 	.word	0x40023c00

08000e54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e5c:	4b12      	ldr	r3, [pc, #72]	; (8000ea8 <HAL_InitTick+0x54>)
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	4b12      	ldr	r3, [pc, #72]	; (8000eac <HAL_InitTick+0x58>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	4619      	mov	r1, r3
 8000e66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e72:	4618      	mov	r0, r3
 8000e74:	f000 f965 	bl	8001142 <HAL_SYSTICK_Config>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e00e      	b.n	8000ea0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2b0f      	cmp	r3, #15
 8000e86:	d80a      	bhi.n	8000e9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e88:	2200      	movs	r2, #0
 8000e8a:	6879      	ldr	r1, [r7, #4]
 8000e8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e90:	f000 f92d 	bl	80010ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e94:	4a06      	ldr	r2, [pc, #24]	; (8000eb0 <HAL_InitTick+0x5c>)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	e000      	b.n	8000ea0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e9e:	2301      	movs	r3, #1
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	20000000 	.word	0x20000000
 8000eac:	20000008 	.word	0x20000008
 8000eb0:	20000004 	.word	0x20000004

08000eb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eb8:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <HAL_IncTick+0x20>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <HAL_IncTick+0x24>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4413      	add	r3, r2
 8000ec4:	4a04      	ldr	r2, [pc, #16]	; (8000ed8 <HAL_IncTick+0x24>)
 8000ec6:	6013      	str	r3, [r2, #0]
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	20000008 	.word	0x20000008
 8000ed8:	200001f4 	.word	0x200001f4

08000edc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  return uwTick;
 8000ee0:	4b03      	ldr	r3, [pc, #12]	; (8000ef0 <HAL_GetTick+0x14>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	200001f4 	.word	0x200001f4

08000ef4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000efc:	f7ff ffee 	bl	8000edc <HAL_GetTick>
 8000f00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f0c:	d005      	beq.n	8000f1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f0e:	4b09      	ldr	r3, [pc, #36]	; (8000f34 <HAL_Delay+0x40>)
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	461a      	mov	r2, r3
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	4413      	add	r3, r2
 8000f18:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f1a:	bf00      	nop
 8000f1c:	f7ff ffde 	bl	8000edc <HAL_GetTick>
 8000f20:	4602      	mov	r2, r0
 8000f22:	68bb      	ldr	r3, [r7, #8]
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	68fa      	ldr	r2, [r7, #12]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d8f7      	bhi.n	8000f1c <HAL_Delay+0x28>
  {
  }
}
 8000f2c:	bf00      	nop
 8000f2e:	3710      	adds	r7, #16
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	20000008 	.word	0x20000008

08000f38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	f003 0307 	and.w	r3, r3, #7
 8000f46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f48:	4b0c      	ldr	r3, [pc, #48]	; (8000f7c <__NVIC_SetPriorityGrouping+0x44>)
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f4e:	68ba      	ldr	r2, [r7, #8]
 8000f50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f54:	4013      	ands	r3, r2
 8000f56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f6a:	4a04      	ldr	r2, [pc, #16]	; (8000f7c <__NVIC_SetPriorityGrouping+0x44>)
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	60d3      	str	r3, [r2, #12]
}
 8000f70:	bf00      	nop
 8000f72:	3714      	adds	r7, #20
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	e000ed00 	.word	0xe000ed00

08000f80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f84:	4b04      	ldr	r3, [pc, #16]	; (8000f98 <__NVIC_GetPriorityGrouping+0x18>)
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	0a1b      	lsrs	r3, r3, #8
 8000f8a:	f003 0307 	and.w	r3, r3, #7
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	e000ed00 	.word	0xe000ed00

08000f9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	db0b      	blt.n	8000fc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fae:	79fb      	ldrb	r3, [r7, #7]
 8000fb0:	f003 021f 	and.w	r2, r3, #31
 8000fb4:	4907      	ldr	r1, [pc, #28]	; (8000fd4 <__NVIC_EnableIRQ+0x38>)
 8000fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fba:	095b      	lsrs	r3, r3, #5
 8000fbc:	2001      	movs	r0, #1
 8000fbe:	fa00 f202 	lsl.w	r2, r0, r2
 8000fc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fc6:	bf00      	nop
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	e000e100 	.word	0xe000e100

08000fd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	6039      	str	r1, [r7, #0]
 8000fe2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	db0a      	blt.n	8001002 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	b2da      	uxtb	r2, r3
 8000ff0:	490c      	ldr	r1, [pc, #48]	; (8001024 <__NVIC_SetPriority+0x4c>)
 8000ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff6:	0112      	lsls	r2, r2, #4
 8000ff8:	b2d2      	uxtb	r2, r2
 8000ffa:	440b      	add	r3, r1
 8000ffc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001000:	e00a      	b.n	8001018 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	b2da      	uxtb	r2, r3
 8001006:	4908      	ldr	r1, [pc, #32]	; (8001028 <__NVIC_SetPriority+0x50>)
 8001008:	79fb      	ldrb	r3, [r7, #7]
 800100a:	f003 030f 	and.w	r3, r3, #15
 800100e:	3b04      	subs	r3, #4
 8001010:	0112      	lsls	r2, r2, #4
 8001012:	b2d2      	uxtb	r2, r2
 8001014:	440b      	add	r3, r1
 8001016:	761a      	strb	r2, [r3, #24]
}
 8001018:	bf00      	nop
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	e000e100 	.word	0xe000e100
 8001028:	e000ed00 	.word	0xe000ed00

0800102c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800102c:	b480      	push	{r7}
 800102e:	b089      	sub	sp, #36	; 0x24
 8001030:	af00      	add	r7, sp, #0
 8001032:	60f8      	str	r0, [r7, #12]
 8001034:	60b9      	str	r1, [r7, #8]
 8001036:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	f003 0307 	and.w	r3, r3, #7
 800103e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	f1c3 0307 	rsb	r3, r3, #7
 8001046:	2b04      	cmp	r3, #4
 8001048:	bf28      	it	cs
 800104a:	2304      	movcs	r3, #4
 800104c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	3304      	adds	r3, #4
 8001052:	2b06      	cmp	r3, #6
 8001054:	d902      	bls.n	800105c <NVIC_EncodePriority+0x30>
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	3b03      	subs	r3, #3
 800105a:	e000      	b.n	800105e <NVIC_EncodePriority+0x32>
 800105c:	2300      	movs	r3, #0
 800105e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001060:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001064:	69bb      	ldr	r3, [r7, #24]
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	43da      	mvns	r2, r3
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	401a      	ands	r2, r3
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001074:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	fa01 f303 	lsl.w	r3, r1, r3
 800107e:	43d9      	mvns	r1, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001084:	4313      	orrs	r3, r2
         );
}
 8001086:	4618      	mov	r0, r3
 8001088:	3724      	adds	r7, #36	; 0x24
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
	...

08001094 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	3b01      	subs	r3, #1
 80010a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010a4:	d301      	bcc.n	80010aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010a6:	2301      	movs	r3, #1
 80010a8:	e00f      	b.n	80010ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010aa:	4a0a      	ldr	r2, [pc, #40]	; (80010d4 <SysTick_Config+0x40>)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	3b01      	subs	r3, #1
 80010b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010b2:	210f      	movs	r1, #15
 80010b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010b8:	f7ff ff8e 	bl	8000fd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010bc:	4b05      	ldr	r3, [pc, #20]	; (80010d4 <SysTick_Config+0x40>)
 80010be:	2200      	movs	r2, #0
 80010c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010c2:	4b04      	ldr	r3, [pc, #16]	; (80010d4 <SysTick_Config+0x40>)
 80010c4:	2207      	movs	r2, #7
 80010c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010c8:	2300      	movs	r3, #0
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	e000e010 	.word	0xe000e010

080010d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f7ff ff29 	bl	8000f38 <__NVIC_SetPriorityGrouping>
}
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b086      	sub	sp, #24
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	4603      	mov	r3, r0
 80010f6:	60b9      	str	r1, [r7, #8]
 80010f8:	607a      	str	r2, [r7, #4]
 80010fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010fc:	2300      	movs	r3, #0
 80010fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001100:	f7ff ff3e 	bl	8000f80 <__NVIC_GetPriorityGrouping>
 8001104:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001106:	687a      	ldr	r2, [r7, #4]
 8001108:	68b9      	ldr	r1, [r7, #8]
 800110a:	6978      	ldr	r0, [r7, #20]
 800110c:	f7ff ff8e 	bl	800102c <NVIC_EncodePriority>
 8001110:	4602      	mov	r2, r0
 8001112:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001116:	4611      	mov	r1, r2
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff ff5d 	bl	8000fd8 <__NVIC_SetPriority>
}
 800111e:	bf00      	nop
 8001120:	3718      	adds	r7, #24
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	b082      	sub	sp, #8
 800112a:	af00      	add	r7, sp, #0
 800112c:	4603      	mov	r3, r0
 800112e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001130:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff ff31 	bl	8000f9c <__NVIC_EnableIRQ>
}
 800113a:	bf00      	nop
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}

08001142 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001142:	b580      	push	{r7, lr}
 8001144:	b082      	sub	sp, #8
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f7ff ffa2 	bl	8001094 <SysTick_Config>
 8001150:	4603      	mov	r3, r0
}
 8001152:	4618      	mov	r0, r3
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
	...

0800115c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800115c:	b480      	push	{r7}
 800115e:	b089      	sub	sp, #36	; 0x24
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001166:	2300      	movs	r3, #0
 8001168:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800116a:	2300      	movs	r3, #0
 800116c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800116e:	2300      	movs	r3, #0
 8001170:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001172:	2300      	movs	r3, #0
 8001174:	61fb      	str	r3, [r7, #28]
 8001176:	e16b      	b.n	8001450 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001178:	2201      	movs	r2, #1
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	697a      	ldr	r2, [r7, #20]
 8001188:	4013      	ands	r3, r2
 800118a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	429a      	cmp	r2, r3
 8001192:	f040 815a 	bne.w	800144a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	2b01      	cmp	r3, #1
 800119c:	d00b      	beq.n	80011b6 <HAL_GPIO_Init+0x5a>
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	d007      	beq.n	80011b6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011aa:	2b11      	cmp	r3, #17
 80011ac:	d003      	beq.n	80011b6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	2b12      	cmp	r3, #18
 80011b4:	d130      	bne.n	8001218 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	2203      	movs	r2, #3
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	43db      	mvns	r3, r3
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	4013      	ands	r3, r2
 80011cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	68da      	ldr	r2, [r3, #12]
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	005b      	lsls	r3, r3, #1
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	4313      	orrs	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011ec:	2201      	movs	r2, #1
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	43db      	mvns	r3, r3
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	4013      	ands	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	091b      	lsrs	r3, r3, #4
 8001202:	f003 0201 	and.w	r2, r3, #1
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	4313      	orrs	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	2203      	movs	r2, #3
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	43db      	mvns	r3, r3
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	4013      	ands	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	689a      	ldr	r2, [r3, #8]
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4313      	orrs	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	2b02      	cmp	r3, #2
 800124e:	d003      	beq.n	8001258 <HAL_GPIO_Init+0xfc>
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	2b12      	cmp	r3, #18
 8001256:	d123      	bne.n	80012a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	08da      	lsrs	r2, r3, #3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	3208      	adds	r2, #8
 8001260:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001264:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	f003 0307 	and.w	r3, r3, #7
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	220f      	movs	r2, #15
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	43db      	mvns	r3, r3
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	4013      	ands	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	691a      	ldr	r2, [r3, #16]
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	f003 0307 	and.w	r3, r3, #7
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	4313      	orrs	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	08da      	lsrs	r2, r3, #3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	3208      	adds	r2, #8
 800129a:	69b9      	ldr	r1, [r7, #24]
 800129c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	2203      	movs	r2, #3
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	43db      	mvns	r3, r3
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	4013      	ands	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f003 0203 	and.w	r2, r3, #3
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012dc:	2b00      	cmp	r3, #0
 80012de:	f000 80b4 	beq.w	800144a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	60fb      	str	r3, [r7, #12]
 80012e6:	4b5f      	ldr	r3, [pc, #380]	; (8001464 <HAL_GPIO_Init+0x308>)
 80012e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ea:	4a5e      	ldr	r2, [pc, #376]	; (8001464 <HAL_GPIO_Init+0x308>)
 80012ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012f0:	6453      	str	r3, [r2, #68]	; 0x44
 80012f2:	4b5c      	ldr	r3, [pc, #368]	; (8001464 <HAL_GPIO_Init+0x308>)
 80012f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012fa:	60fb      	str	r3, [r7, #12]
 80012fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012fe:	4a5a      	ldr	r2, [pc, #360]	; (8001468 <HAL_GPIO_Init+0x30c>)
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	089b      	lsrs	r3, r3, #2
 8001304:	3302      	adds	r3, #2
 8001306:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800130a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	f003 0303 	and.w	r3, r3, #3
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	220f      	movs	r2, #15
 8001316:	fa02 f303 	lsl.w	r3, r2, r3
 800131a:	43db      	mvns	r3, r3
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	4013      	ands	r3, r2
 8001320:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a51      	ldr	r2, [pc, #324]	; (800146c <HAL_GPIO_Init+0x310>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d02b      	beq.n	8001382 <HAL_GPIO_Init+0x226>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a50      	ldr	r2, [pc, #320]	; (8001470 <HAL_GPIO_Init+0x314>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d025      	beq.n	800137e <HAL_GPIO_Init+0x222>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a4f      	ldr	r2, [pc, #316]	; (8001474 <HAL_GPIO_Init+0x318>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d01f      	beq.n	800137a <HAL_GPIO_Init+0x21e>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a4e      	ldr	r2, [pc, #312]	; (8001478 <HAL_GPIO_Init+0x31c>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d019      	beq.n	8001376 <HAL_GPIO_Init+0x21a>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a4d      	ldr	r2, [pc, #308]	; (800147c <HAL_GPIO_Init+0x320>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d013      	beq.n	8001372 <HAL_GPIO_Init+0x216>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a4c      	ldr	r2, [pc, #304]	; (8001480 <HAL_GPIO_Init+0x324>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d00d      	beq.n	800136e <HAL_GPIO_Init+0x212>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a4b      	ldr	r2, [pc, #300]	; (8001484 <HAL_GPIO_Init+0x328>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d007      	beq.n	800136a <HAL_GPIO_Init+0x20e>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a4a      	ldr	r2, [pc, #296]	; (8001488 <HAL_GPIO_Init+0x32c>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d101      	bne.n	8001366 <HAL_GPIO_Init+0x20a>
 8001362:	2307      	movs	r3, #7
 8001364:	e00e      	b.n	8001384 <HAL_GPIO_Init+0x228>
 8001366:	2308      	movs	r3, #8
 8001368:	e00c      	b.n	8001384 <HAL_GPIO_Init+0x228>
 800136a:	2306      	movs	r3, #6
 800136c:	e00a      	b.n	8001384 <HAL_GPIO_Init+0x228>
 800136e:	2305      	movs	r3, #5
 8001370:	e008      	b.n	8001384 <HAL_GPIO_Init+0x228>
 8001372:	2304      	movs	r3, #4
 8001374:	e006      	b.n	8001384 <HAL_GPIO_Init+0x228>
 8001376:	2303      	movs	r3, #3
 8001378:	e004      	b.n	8001384 <HAL_GPIO_Init+0x228>
 800137a:	2302      	movs	r3, #2
 800137c:	e002      	b.n	8001384 <HAL_GPIO_Init+0x228>
 800137e:	2301      	movs	r3, #1
 8001380:	e000      	b.n	8001384 <HAL_GPIO_Init+0x228>
 8001382:	2300      	movs	r3, #0
 8001384:	69fa      	ldr	r2, [r7, #28]
 8001386:	f002 0203 	and.w	r2, r2, #3
 800138a:	0092      	lsls	r2, r2, #2
 800138c:	4093      	lsls	r3, r2
 800138e:	69ba      	ldr	r2, [r7, #24]
 8001390:	4313      	orrs	r3, r2
 8001392:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001394:	4934      	ldr	r1, [pc, #208]	; (8001468 <HAL_GPIO_Init+0x30c>)
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	089b      	lsrs	r3, r3, #2
 800139a:	3302      	adds	r3, #2
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013a2:	4b3a      	ldr	r3, [pc, #232]	; (800148c <HAL_GPIO_Init+0x330>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	43db      	mvns	r3, r3
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	4013      	ands	r3, r2
 80013b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d003      	beq.n	80013c6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013c6:	4a31      	ldr	r2, [pc, #196]	; (800148c <HAL_GPIO_Init+0x330>)
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80013cc:	4b2f      	ldr	r3, [pc, #188]	; (800148c <HAL_GPIO_Init+0x330>)
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	43db      	mvns	r3, r3
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	4013      	ands	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d003      	beq.n	80013f0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013f0:	4a26      	ldr	r2, [pc, #152]	; (800148c <HAL_GPIO_Init+0x330>)
 80013f2:	69bb      	ldr	r3, [r7, #24]
 80013f4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013f6:	4b25      	ldr	r3, [pc, #148]	; (800148c <HAL_GPIO_Init+0x330>)
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	43db      	mvns	r3, r3
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	4013      	ands	r3, r2
 8001404:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d003      	beq.n	800141a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	4313      	orrs	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800141a:	4a1c      	ldr	r2, [pc, #112]	; (800148c <HAL_GPIO_Init+0x330>)
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001420:	4b1a      	ldr	r3, [pc, #104]	; (800148c <HAL_GPIO_Init+0x330>)
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	43db      	mvns	r3, r3
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	4013      	ands	r3, r2
 800142e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001438:	2b00      	cmp	r3, #0
 800143a:	d003      	beq.n	8001444 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	4313      	orrs	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001444:	4a11      	ldr	r2, [pc, #68]	; (800148c <HAL_GPIO_Init+0x330>)
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	3301      	adds	r3, #1
 800144e:	61fb      	str	r3, [r7, #28]
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	2b0f      	cmp	r3, #15
 8001454:	f67f ae90 	bls.w	8001178 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001458:	bf00      	nop
 800145a:	3724      	adds	r7, #36	; 0x24
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	40023800 	.word	0x40023800
 8001468:	40013800 	.word	0x40013800
 800146c:	40020000 	.word	0x40020000
 8001470:	40020400 	.word	0x40020400
 8001474:	40020800 	.word	0x40020800
 8001478:	40020c00 	.word	0x40020c00
 800147c:	40021000 	.word	0x40021000
 8001480:	40021400 	.word	0x40021400
 8001484:	40021800 	.word	0x40021800
 8001488:	40021c00 	.word	0x40021c00
 800148c:	40013c00 	.word	0x40013c00

08001490 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	460b      	mov	r3, r1
 800149a:	807b      	strh	r3, [r7, #2]
 800149c:	4613      	mov	r3, r2
 800149e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014a0:	787b      	ldrb	r3, [r7, #1]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d003      	beq.n	80014ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014a6:	887a      	ldrh	r2, [r7, #2]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014ac:	e003      	b.n	80014b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014ae:	887b      	ldrh	r3, [r7, #2]
 80014b0:	041a      	lsls	r2, r3, #16
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	619a      	str	r2, [r3, #24]
}
 80014b6:	bf00      	nop
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr

080014c2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80014c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014c4:	b08f      	sub	sp, #60	; 0x3c
 80014c6:	af0a      	add	r7, sp, #40	; 0x28
 80014c8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d101      	bne.n	80014d4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	e054      	b.n	800157e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d106      	bne.n	80014f4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2200      	movs	r2, #0
 80014ea:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f006 fca8 	bl	8007e44 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2203      	movs	r2, #3
 80014f8:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001504:	2b00      	cmp	r3, #0
 8001506:	d102      	bne.n	800150e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2200      	movs	r2, #0
 800150c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4618      	mov	r0, r3
 8001514:	f003 fe66 	bl	80051e4 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	603b      	str	r3, [r7, #0]
 800151e:	687e      	ldr	r6, [r7, #4]
 8001520:	466d      	mov	r5, sp
 8001522:	f106 0410 	add.w	r4, r6, #16
 8001526:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001528:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800152a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800152c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800152e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001532:	e885 0003 	stmia.w	r5, {r0, r1}
 8001536:	1d33      	adds	r3, r6, #4
 8001538:	cb0e      	ldmia	r3, {r1, r2, r3}
 800153a:	6838      	ldr	r0, [r7, #0]
 800153c:	f003 fde0 	bl	8005100 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2101      	movs	r1, #1
 8001546:	4618      	mov	r0, r3
 8001548:	f003 fe5d 	bl	8005206 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	603b      	str	r3, [r7, #0]
 8001552:	687e      	ldr	r6, [r7, #4]
 8001554:	466d      	mov	r5, sp
 8001556:	f106 0410 	add.w	r4, r6, #16
 800155a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800155c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800155e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001560:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001562:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001566:	e885 0003 	stmia.w	r5, {r0, r1}
 800156a:	1d33      	adds	r3, r6, #4
 800156c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800156e:	6838      	ldr	r0, [r7, #0]
 8001570:	f003 ff70 	bl	8005454 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2201      	movs	r2, #1
 8001578:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	3714      	adds	r7, #20
 8001582:	46bd      	mov	sp, r7
 8001584:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001586 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001586:	b590      	push	{r4, r7, lr}
 8001588:	b089      	sub	sp, #36	; 0x24
 800158a:	af04      	add	r7, sp, #16
 800158c:	6078      	str	r0, [r7, #4]
 800158e:	4608      	mov	r0, r1
 8001590:	4611      	mov	r1, r2
 8001592:	461a      	mov	r2, r3
 8001594:	4603      	mov	r3, r0
 8001596:	70fb      	strb	r3, [r7, #3]
 8001598:	460b      	mov	r3, r1
 800159a:	70bb      	strb	r3, [r7, #2]
 800159c:	4613      	mov	r3, r2
 800159e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d101      	bne.n	80015ae <HAL_HCD_HC_Init+0x28>
 80015aa:	2302      	movs	r3, #2
 80015ac:	e07f      	b.n	80016ae <HAL_HCD_HC_Init+0x128>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2201      	movs	r2, #1
 80015b2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 80015b6:	78fa      	ldrb	r2, [r7, #3]
 80015b8:	6879      	ldr	r1, [r7, #4]
 80015ba:	4613      	mov	r3, r2
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	4413      	add	r3, r2
 80015c0:	00db      	lsls	r3, r3, #3
 80015c2:	440b      	add	r3, r1
 80015c4:	333d      	adds	r3, #61	; 0x3d
 80015c6:	2200      	movs	r2, #0
 80015c8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80015ca:	78fa      	ldrb	r2, [r7, #3]
 80015cc:	6879      	ldr	r1, [r7, #4]
 80015ce:	4613      	mov	r3, r2
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	4413      	add	r3, r2
 80015d4:	00db      	lsls	r3, r3, #3
 80015d6:	440b      	add	r3, r1
 80015d8:	3338      	adds	r3, #56	; 0x38
 80015da:	787a      	ldrb	r2, [r7, #1]
 80015dc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80015de:	78fa      	ldrb	r2, [r7, #3]
 80015e0:	6879      	ldr	r1, [r7, #4]
 80015e2:	4613      	mov	r3, r2
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	4413      	add	r3, r2
 80015e8:	00db      	lsls	r3, r3, #3
 80015ea:	440b      	add	r3, r1
 80015ec:	3340      	adds	r3, #64	; 0x40
 80015ee:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80015f0:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80015f2:	78fa      	ldrb	r2, [r7, #3]
 80015f4:	6879      	ldr	r1, [r7, #4]
 80015f6:	4613      	mov	r3, r2
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	4413      	add	r3, r2
 80015fc:	00db      	lsls	r3, r3, #3
 80015fe:	440b      	add	r3, r1
 8001600:	3339      	adds	r3, #57	; 0x39
 8001602:	78fa      	ldrb	r2, [r7, #3]
 8001604:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001606:	78fa      	ldrb	r2, [r7, #3]
 8001608:	6879      	ldr	r1, [r7, #4]
 800160a:	4613      	mov	r3, r2
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	4413      	add	r3, r2
 8001610:	00db      	lsls	r3, r3, #3
 8001612:	440b      	add	r3, r1
 8001614:	333f      	adds	r3, #63	; 0x3f
 8001616:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800161a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800161c:	78fa      	ldrb	r2, [r7, #3]
 800161e:	78bb      	ldrb	r3, [r7, #2]
 8001620:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001624:	b2d8      	uxtb	r0, r3
 8001626:	6879      	ldr	r1, [r7, #4]
 8001628:	4613      	mov	r3, r2
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	4413      	add	r3, r2
 800162e:	00db      	lsls	r3, r3, #3
 8001630:	440b      	add	r3, r1
 8001632:	333a      	adds	r3, #58	; 0x3a
 8001634:	4602      	mov	r2, r0
 8001636:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001638:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800163c:	2b00      	cmp	r3, #0
 800163e:	da0a      	bge.n	8001656 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001640:	78fa      	ldrb	r2, [r7, #3]
 8001642:	6879      	ldr	r1, [r7, #4]
 8001644:	4613      	mov	r3, r2
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	4413      	add	r3, r2
 800164a:	00db      	lsls	r3, r3, #3
 800164c:	440b      	add	r3, r1
 800164e:	333b      	adds	r3, #59	; 0x3b
 8001650:	2201      	movs	r2, #1
 8001652:	701a      	strb	r2, [r3, #0]
 8001654:	e009      	b.n	800166a <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001656:	78fa      	ldrb	r2, [r7, #3]
 8001658:	6879      	ldr	r1, [r7, #4]
 800165a:	4613      	mov	r3, r2
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	4413      	add	r3, r2
 8001660:	00db      	lsls	r3, r3, #3
 8001662:	440b      	add	r3, r1
 8001664:	333b      	adds	r3, #59	; 0x3b
 8001666:	2200      	movs	r2, #0
 8001668:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800166a:	78fa      	ldrb	r2, [r7, #3]
 800166c:	6879      	ldr	r1, [r7, #4]
 800166e:	4613      	mov	r3, r2
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	4413      	add	r3, r2
 8001674:	00db      	lsls	r3, r3, #3
 8001676:	440b      	add	r3, r1
 8001678:	333c      	adds	r3, #60	; 0x3c
 800167a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800167e:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6818      	ldr	r0, [r3, #0]
 8001684:	787c      	ldrb	r4, [r7, #1]
 8001686:	78ba      	ldrb	r2, [r7, #2]
 8001688:	78f9      	ldrb	r1, [r7, #3]
 800168a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800168c:	9302      	str	r3, [sp, #8]
 800168e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001692:	9301      	str	r3, [sp, #4]
 8001694:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001698:	9300      	str	r3, [sp, #0]
 800169a:	4623      	mov	r3, r4
 800169c:	f004 f85c 	bl	8005758 <USB_HC_Init>
 80016a0:	4603      	mov	r3, r0
 80016a2:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2200      	movs	r2, #0
 80016a8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80016ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3714      	adds	r7, #20
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd90      	pop	{r4, r7, pc}

080016b6 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b084      	sub	sp, #16
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
 80016be:	460b      	mov	r3, r1
 80016c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80016c2:	2300      	movs	r3, #0
 80016c4:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d101      	bne.n	80016d4 <HAL_HCD_HC_Halt+0x1e>
 80016d0:	2302      	movs	r3, #2
 80016d2:	e00f      	b.n	80016f4 <HAL_HCD_HC_Halt+0x3e>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2201      	movs	r2, #1
 80016d8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	78fa      	ldrb	r2, [r7, #3]
 80016e2:	4611      	mov	r1, r2
 80016e4:	4618      	mov	r0, r3
 80016e6:	f004 fa96 	bl	8005c16 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2200      	movs	r2, #0
 80016ee:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80016f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3710      	adds	r7, #16
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}

080016fc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	4608      	mov	r0, r1
 8001706:	4611      	mov	r1, r2
 8001708:	461a      	mov	r2, r3
 800170a:	4603      	mov	r3, r0
 800170c:	70fb      	strb	r3, [r7, #3]
 800170e:	460b      	mov	r3, r1
 8001710:	70bb      	strb	r3, [r7, #2]
 8001712:	4613      	mov	r3, r2
 8001714:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001716:	78fa      	ldrb	r2, [r7, #3]
 8001718:	6879      	ldr	r1, [r7, #4]
 800171a:	4613      	mov	r3, r2
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	4413      	add	r3, r2
 8001720:	00db      	lsls	r3, r3, #3
 8001722:	440b      	add	r3, r1
 8001724:	333b      	adds	r3, #59	; 0x3b
 8001726:	78ba      	ldrb	r2, [r7, #2]
 8001728:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800172a:	78fa      	ldrb	r2, [r7, #3]
 800172c:	6879      	ldr	r1, [r7, #4]
 800172e:	4613      	mov	r3, r2
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	4413      	add	r3, r2
 8001734:	00db      	lsls	r3, r3, #3
 8001736:	440b      	add	r3, r1
 8001738:	333f      	adds	r3, #63	; 0x3f
 800173a:	787a      	ldrb	r2, [r7, #1]
 800173c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800173e:	7c3b      	ldrb	r3, [r7, #16]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d114      	bne.n	800176e <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001744:	78fa      	ldrb	r2, [r7, #3]
 8001746:	6879      	ldr	r1, [r7, #4]
 8001748:	4613      	mov	r3, r2
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	4413      	add	r3, r2
 800174e:	00db      	lsls	r3, r3, #3
 8001750:	440b      	add	r3, r1
 8001752:	3342      	adds	r3, #66	; 0x42
 8001754:	2203      	movs	r2, #3
 8001756:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001758:	78fa      	ldrb	r2, [r7, #3]
 800175a:	6879      	ldr	r1, [r7, #4]
 800175c:	4613      	mov	r3, r2
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	4413      	add	r3, r2
 8001762:	00db      	lsls	r3, r3, #3
 8001764:	440b      	add	r3, r1
 8001766:	333d      	adds	r3, #61	; 0x3d
 8001768:	7f3a      	ldrb	r2, [r7, #28]
 800176a:	701a      	strb	r2, [r3, #0]
 800176c:	e009      	b.n	8001782 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800176e:	78fa      	ldrb	r2, [r7, #3]
 8001770:	6879      	ldr	r1, [r7, #4]
 8001772:	4613      	mov	r3, r2
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	4413      	add	r3, r2
 8001778:	00db      	lsls	r3, r3, #3
 800177a:	440b      	add	r3, r1
 800177c:	3342      	adds	r3, #66	; 0x42
 800177e:	2202      	movs	r2, #2
 8001780:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001782:	787b      	ldrb	r3, [r7, #1]
 8001784:	2b03      	cmp	r3, #3
 8001786:	f200 80d6 	bhi.w	8001936 <HAL_HCD_HC_SubmitRequest+0x23a>
 800178a:	a201      	add	r2, pc, #4	; (adr r2, 8001790 <HAL_HCD_HC_SubmitRequest+0x94>)
 800178c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001790:	080017a1 	.word	0x080017a1
 8001794:	08001921 	.word	0x08001921
 8001798:	0800180d 	.word	0x0800180d
 800179c:	08001897 	.word	0x08001897
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80017a0:	7c3b      	ldrb	r3, [r7, #16]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	f040 80c9 	bne.w	800193a <HAL_HCD_HC_SubmitRequest+0x23e>
 80017a8:	78bb      	ldrb	r3, [r7, #2]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	f040 80c5 	bne.w	800193a <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 80017b0:	8b3b      	ldrh	r3, [r7, #24]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d109      	bne.n	80017ca <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80017b6:	78fa      	ldrb	r2, [r7, #3]
 80017b8:	6879      	ldr	r1, [r7, #4]
 80017ba:	4613      	mov	r3, r2
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	4413      	add	r3, r2
 80017c0:	00db      	lsls	r3, r3, #3
 80017c2:	440b      	add	r3, r1
 80017c4:	3351      	adds	r3, #81	; 0x51
 80017c6:	2201      	movs	r2, #1
 80017c8:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80017ca:	78fa      	ldrb	r2, [r7, #3]
 80017cc:	6879      	ldr	r1, [r7, #4]
 80017ce:	4613      	mov	r3, r2
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	4413      	add	r3, r2
 80017d4:	00db      	lsls	r3, r3, #3
 80017d6:	440b      	add	r3, r1
 80017d8:	3351      	adds	r3, #81	; 0x51
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d10a      	bne.n	80017f6 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017e0:	78fa      	ldrb	r2, [r7, #3]
 80017e2:	6879      	ldr	r1, [r7, #4]
 80017e4:	4613      	mov	r3, r2
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	4413      	add	r3, r2
 80017ea:	00db      	lsls	r3, r3, #3
 80017ec:	440b      	add	r3, r1
 80017ee:	3342      	adds	r3, #66	; 0x42
 80017f0:	2200      	movs	r2, #0
 80017f2:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80017f4:	e0a1      	b.n	800193a <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017f6:	78fa      	ldrb	r2, [r7, #3]
 80017f8:	6879      	ldr	r1, [r7, #4]
 80017fa:	4613      	mov	r3, r2
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	4413      	add	r3, r2
 8001800:	00db      	lsls	r3, r3, #3
 8001802:	440b      	add	r3, r1
 8001804:	3342      	adds	r3, #66	; 0x42
 8001806:	2202      	movs	r2, #2
 8001808:	701a      	strb	r2, [r3, #0]
      break;
 800180a:	e096      	b.n	800193a <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800180c:	78bb      	ldrb	r3, [r7, #2]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d120      	bne.n	8001854 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001812:	78fa      	ldrb	r2, [r7, #3]
 8001814:	6879      	ldr	r1, [r7, #4]
 8001816:	4613      	mov	r3, r2
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	4413      	add	r3, r2
 800181c:	00db      	lsls	r3, r3, #3
 800181e:	440b      	add	r3, r1
 8001820:	3351      	adds	r3, #81	; 0x51
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d10a      	bne.n	800183e <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001828:	78fa      	ldrb	r2, [r7, #3]
 800182a:	6879      	ldr	r1, [r7, #4]
 800182c:	4613      	mov	r3, r2
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	4413      	add	r3, r2
 8001832:	00db      	lsls	r3, r3, #3
 8001834:	440b      	add	r3, r1
 8001836:	3342      	adds	r3, #66	; 0x42
 8001838:	2200      	movs	r2, #0
 800183a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800183c:	e07e      	b.n	800193c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800183e:	78fa      	ldrb	r2, [r7, #3]
 8001840:	6879      	ldr	r1, [r7, #4]
 8001842:	4613      	mov	r3, r2
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	4413      	add	r3, r2
 8001848:	00db      	lsls	r3, r3, #3
 800184a:	440b      	add	r3, r1
 800184c:	3342      	adds	r3, #66	; 0x42
 800184e:	2202      	movs	r2, #2
 8001850:	701a      	strb	r2, [r3, #0]
      break;
 8001852:	e073      	b.n	800193c <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001854:	78fa      	ldrb	r2, [r7, #3]
 8001856:	6879      	ldr	r1, [r7, #4]
 8001858:	4613      	mov	r3, r2
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	4413      	add	r3, r2
 800185e:	00db      	lsls	r3, r3, #3
 8001860:	440b      	add	r3, r1
 8001862:	3350      	adds	r3, #80	; 0x50
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d10a      	bne.n	8001880 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800186a:	78fa      	ldrb	r2, [r7, #3]
 800186c:	6879      	ldr	r1, [r7, #4]
 800186e:	4613      	mov	r3, r2
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	4413      	add	r3, r2
 8001874:	00db      	lsls	r3, r3, #3
 8001876:	440b      	add	r3, r1
 8001878:	3342      	adds	r3, #66	; 0x42
 800187a:	2200      	movs	r2, #0
 800187c:	701a      	strb	r2, [r3, #0]
      break;
 800187e:	e05d      	b.n	800193c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001880:	78fa      	ldrb	r2, [r7, #3]
 8001882:	6879      	ldr	r1, [r7, #4]
 8001884:	4613      	mov	r3, r2
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	4413      	add	r3, r2
 800188a:	00db      	lsls	r3, r3, #3
 800188c:	440b      	add	r3, r1
 800188e:	3342      	adds	r3, #66	; 0x42
 8001890:	2202      	movs	r2, #2
 8001892:	701a      	strb	r2, [r3, #0]
      break;
 8001894:	e052      	b.n	800193c <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001896:	78bb      	ldrb	r3, [r7, #2]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d120      	bne.n	80018de <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800189c:	78fa      	ldrb	r2, [r7, #3]
 800189e:	6879      	ldr	r1, [r7, #4]
 80018a0:	4613      	mov	r3, r2
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	4413      	add	r3, r2
 80018a6:	00db      	lsls	r3, r3, #3
 80018a8:	440b      	add	r3, r1
 80018aa:	3351      	adds	r3, #81	; 0x51
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d10a      	bne.n	80018c8 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018b2:	78fa      	ldrb	r2, [r7, #3]
 80018b4:	6879      	ldr	r1, [r7, #4]
 80018b6:	4613      	mov	r3, r2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	4413      	add	r3, r2
 80018bc:	00db      	lsls	r3, r3, #3
 80018be:	440b      	add	r3, r1
 80018c0:	3342      	adds	r3, #66	; 0x42
 80018c2:	2200      	movs	r2, #0
 80018c4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80018c6:	e039      	b.n	800193c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018c8:	78fa      	ldrb	r2, [r7, #3]
 80018ca:	6879      	ldr	r1, [r7, #4]
 80018cc:	4613      	mov	r3, r2
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	4413      	add	r3, r2
 80018d2:	00db      	lsls	r3, r3, #3
 80018d4:	440b      	add	r3, r1
 80018d6:	3342      	adds	r3, #66	; 0x42
 80018d8:	2202      	movs	r2, #2
 80018da:	701a      	strb	r2, [r3, #0]
      break;
 80018dc:	e02e      	b.n	800193c <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80018de:	78fa      	ldrb	r2, [r7, #3]
 80018e0:	6879      	ldr	r1, [r7, #4]
 80018e2:	4613      	mov	r3, r2
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	4413      	add	r3, r2
 80018e8:	00db      	lsls	r3, r3, #3
 80018ea:	440b      	add	r3, r1
 80018ec:	3350      	adds	r3, #80	; 0x50
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d10a      	bne.n	800190a <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018f4:	78fa      	ldrb	r2, [r7, #3]
 80018f6:	6879      	ldr	r1, [r7, #4]
 80018f8:	4613      	mov	r3, r2
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	4413      	add	r3, r2
 80018fe:	00db      	lsls	r3, r3, #3
 8001900:	440b      	add	r3, r1
 8001902:	3342      	adds	r3, #66	; 0x42
 8001904:	2200      	movs	r2, #0
 8001906:	701a      	strb	r2, [r3, #0]
      break;
 8001908:	e018      	b.n	800193c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800190a:	78fa      	ldrb	r2, [r7, #3]
 800190c:	6879      	ldr	r1, [r7, #4]
 800190e:	4613      	mov	r3, r2
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	4413      	add	r3, r2
 8001914:	00db      	lsls	r3, r3, #3
 8001916:	440b      	add	r3, r1
 8001918:	3342      	adds	r3, #66	; 0x42
 800191a:	2202      	movs	r2, #2
 800191c:	701a      	strb	r2, [r3, #0]
      break;
 800191e:	e00d      	b.n	800193c <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001920:	78fa      	ldrb	r2, [r7, #3]
 8001922:	6879      	ldr	r1, [r7, #4]
 8001924:	4613      	mov	r3, r2
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	4413      	add	r3, r2
 800192a:	00db      	lsls	r3, r3, #3
 800192c:	440b      	add	r3, r1
 800192e:	3342      	adds	r3, #66	; 0x42
 8001930:	2200      	movs	r2, #0
 8001932:	701a      	strb	r2, [r3, #0]
      break;
 8001934:	e002      	b.n	800193c <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8001936:	bf00      	nop
 8001938:	e000      	b.n	800193c <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 800193a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800193c:	78fa      	ldrb	r2, [r7, #3]
 800193e:	6879      	ldr	r1, [r7, #4]
 8001940:	4613      	mov	r3, r2
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	4413      	add	r3, r2
 8001946:	00db      	lsls	r3, r3, #3
 8001948:	440b      	add	r3, r1
 800194a:	3344      	adds	r3, #68	; 0x44
 800194c:	697a      	ldr	r2, [r7, #20]
 800194e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001950:	78fa      	ldrb	r2, [r7, #3]
 8001952:	8b39      	ldrh	r1, [r7, #24]
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	4613      	mov	r3, r2
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	4413      	add	r3, r2
 800195c:	00db      	lsls	r3, r3, #3
 800195e:	4403      	add	r3, r0
 8001960:	3348      	adds	r3, #72	; 0x48
 8001962:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001964:	78fa      	ldrb	r2, [r7, #3]
 8001966:	6879      	ldr	r1, [r7, #4]
 8001968:	4613      	mov	r3, r2
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	4413      	add	r3, r2
 800196e:	00db      	lsls	r3, r3, #3
 8001970:	440b      	add	r3, r1
 8001972:	335c      	adds	r3, #92	; 0x5c
 8001974:	2200      	movs	r2, #0
 8001976:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001978:	78fa      	ldrb	r2, [r7, #3]
 800197a:	6879      	ldr	r1, [r7, #4]
 800197c:	4613      	mov	r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	4413      	add	r3, r2
 8001982:	00db      	lsls	r3, r3, #3
 8001984:	440b      	add	r3, r1
 8001986:	334c      	adds	r3, #76	; 0x4c
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800198c:	78fa      	ldrb	r2, [r7, #3]
 800198e:	6879      	ldr	r1, [r7, #4]
 8001990:	4613      	mov	r3, r2
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	4413      	add	r3, r2
 8001996:	00db      	lsls	r3, r3, #3
 8001998:	440b      	add	r3, r1
 800199a:	3339      	adds	r3, #57	; 0x39
 800199c:	78fa      	ldrb	r2, [r7, #3]
 800199e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80019a0:	78fa      	ldrb	r2, [r7, #3]
 80019a2:	6879      	ldr	r1, [r7, #4]
 80019a4:	4613      	mov	r3, r2
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	4413      	add	r3, r2
 80019aa:	00db      	lsls	r3, r3, #3
 80019ac:	440b      	add	r3, r1
 80019ae:	335d      	adds	r3, #93	; 0x5d
 80019b0:	2200      	movs	r2, #0
 80019b2:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6818      	ldr	r0, [r3, #0]
 80019b8:	78fa      	ldrb	r2, [r7, #3]
 80019ba:	4613      	mov	r3, r2
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	4413      	add	r3, r2
 80019c0:	00db      	lsls	r3, r3, #3
 80019c2:	3338      	adds	r3, #56	; 0x38
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	18d1      	adds	r1, r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	691b      	ldr	r3, [r3, #16]
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	461a      	mov	r2, r3
 80019d0:	f003 ffcc 	bl	800596c <USB_HC_StartXfer>
 80019d4:	4603      	mov	r3, r0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop

080019e0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b086      	sub	sp, #24
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f003 fce9 	bl	80053ce <USB_GetMode>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	f040 80ef 	bne.w	8001be2 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f003 fccd 	bl	80053a8 <USB_ReadInterrupts>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	f000 80e5 	beq.w	8001be0 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f003 fcc4 	bl	80053a8 <USB_ReadInterrupts>
 8001a20:	4603      	mov	r3, r0
 8001a22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001a2a:	d104      	bne.n	8001a36 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001a34:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f003 fcb4 	bl	80053a8 <USB_ReadInterrupts>
 8001a40:	4603      	mov	r3, r0
 8001a42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a4a:	d104      	bne.n	8001a56 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001a54:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f003 fca4 	bl	80053a8 <USB_ReadInterrupts>
 8001a60:	4603      	mov	r3, r0
 8001a62:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a66:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001a6a:	d104      	bne.n	8001a76 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001a74:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f003 fc94 	bl	80053a8 <USB_ReadInterrupts>
 8001a80:	4603      	mov	r3, r0
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d103      	bne.n	8001a92 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2202      	movs	r2, #2
 8001a90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f003 fc86 	bl	80053a8 <USB_ReadInterrupts>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001aa2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001aa6:	d115      	bne.n	8001ad4 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001ab0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0301 	and.w	r3, r3, #1
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d108      	bne.n	8001ad4 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f006 fa3c 	bl	8007f40 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2101      	movs	r1, #1
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f003 fd7c 	bl	80055cc <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f003 fc65 	bl	80053a8 <USB_ReadInterrupts>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ae4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ae8:	d102      	bne.n	8001af0 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f001 f966 	bl	8002dbc <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f003 fc57 	bl	80053a8 <USB_ReadInterrupts>
 8001afa:	4603      	mov	r3, r0
 8001afc:	f003 0308 	and.w	r3, r3, #8
 8001b00:	2b08      	cmp	r3, #8
 8001b02:	d106      	bne.n	8001b12 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f006 f9ff 	bl	8007f08 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	2208      	movs	r2, #8
 8001b10:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f003 fc46 	bl	80053a8 <USB_ReadInterrupts>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b22:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001b26:	d138      	bne.n	8001b9a <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f004 f861 	bl	8005bf4 <USB_HC_ReadInterrupt>
 8001b32:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001b34:	2300      	movs	r3, #0
 8001b36:	617b      	str	r3, [r7, #20]
 8001b38:	e025      	b.n	8001b86 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	f003 030f 	and.w	r3, r3, #15
 8001b40:	68ba      	ldr	r2, [r7, #8]
 8001b42:	fa22 f303 	lsr.w	r3, r2, r3
 8001b46:	f003 0301 	and.w	r3, r3, #1
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d018      	beq.n	8001b80 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	015a      	lsls	r2, r3, #5
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	4413      	add	r3, r2
 8001b56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b64:	d106      	bne.n	8001b74 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f000 f8cf 	bl	8001d10 <HCD_HC_IN_IRQHandler>
 8001b72:	e005      	b.n	8001b80 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	4619      	mov	r1, r3
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f000 fcfd 	bl	800257a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	3301      	adds	r3, #1
 8001b84:	617b      	str	r3, [r7, #20]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	697a      	ldr	r2, [r7, #20]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d3d4      	bcc.n	8001b3a <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b98:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f003 fc02 	bl	80053a8 <USB_ReadInterrupts>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	f003 0310 	and.w	r3, r3, #16
 8001baa:	2b10      	cmp	r3, #16
 8001bac:	d101      	bne.n	8001bb2 <HAL_HCD_IRQHandler+0x1d2>
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e000      	b.n	8001bb4 <HAL_HCD_IRQHandler+0x1d4>
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d014      	beq.n	8001be2 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	699a      	ldr	r2, [r3, #24]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f022 0210 	bic.w	r2, r2, #16
 8001bc6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f001 f84b 	bl	8002c64 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	699a      	ldr	r2, [r3, #24]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f042 0210 	orr.w	r2, r2, #16
 8001bdc:	619a      	str	r2, [r3, #24]
 8001bde:	e000      	b.n	8001be2 <HAL_HCD_IRQHandler+0x202>
      return;
 8001be0:	bf00      	nop
    }
  }
}
 8001be2:	3718      	adds	r7, #24
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d101      	bne.n	8001bfe <HAL_HCD_Start+0x16>
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	e013      	b.n	8001c26 <HAL_HCD_Start+0x3e>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2201      	movs	r2, #1
 8001c02:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f003 fad9 	bl	80051c2 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2101      	movs	r1, #1
 8001c16:	4618      	mov	r0, r3
 8001c18:	f003 fd3c 	bl	8005694 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b082      	sub	sp, #8
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d101      	bne.n	8001c44 <HAL_HCD_Stop+0x16>
 8001c40:	2302      	movs	r3, #2
 8001c42:	e00d      	b.n	8001c60 <HAL_HCD_Stop+0x32>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2201      	movs	r2, #1
 8001c48:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f004 f91b 	bl	8005e8c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8001c5e:	2300      	movs	r3, #0
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3708      	adds	r7, #8
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4618      	mov	r0, r3
 8001c76:	f003 fce3 	bl	8005640 <USB_ResetPort>
 8001c7a:	4603      	mov	r3, r0
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3708      	adds	r7, #8
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001c90:	78fa      	ldrb	r2, [r7, #3]
 8001c92:	6879      	ldr	r1, [r7, #4]
 8001c94:	4613      	mov	r3, r2
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	4413      	add	r3, r2
 8001c9a:	00db      	lsls	r3, r3, #3
 8001c9c:	440b      	add	r3, r1
 8001c9e:	335c      	adds	r3, #92	; 0x5c
 8001ca0:	781b      	ldrb	r3, [r3, #0]
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr

08001cae <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	b083      	sub	sp, #12
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001cba:	78fa      	ldrb	r2, [r7, #3]
 8001cbc:	6879      	ldr	r1, [r7, #4]
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	4413      	add	r3, r2
 8001cc4:	00db      	lsls	r3, r3, #3
 8001cc6:	440b      	add	r3, r1
 8001cc8:	334c      	adds	r3, #76	; 0x4c
 8001cca:	681b      	ldr	r3, [r3, #0]
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f003 fd25 	bl	8005734 <USB_GetCurrentFrame>
 8001cea:	4603      	mov	r3, r0
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3708      	adds	r7, #8
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f003 fd00 	bl	8005706 <USB_GetHostSpeed>
 8001d06:	4603      	mov	r3, r0
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3708      	adds	r7, #8
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b086      	sub	sp, #24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	460b      	mov	r3, r1
 8001d1a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001d26:	78fb      	ldrb	r3, [r7, #3]
 8001d28:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	015a      	lsls	r2, r3, #5
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	4413      	add	r3, r2
 8001d32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	f003 0304 	and.w	r3, r3, #4
 8001d3c:	2b04      	cmp	r3, #4
 8001d3e:	d119      	bne.n	8001d74 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	015a      	lsls	r2, r3, #5
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	4413      	add	r3, r2
 8001d48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	2304      	movs	r3, #4
 8001d50:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	015a      	lsls	r2, r3, #5
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	4413      	add	r3, r2
 8001d5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	68fa      	ldr	r2, [r7, #12]
 8001d62:	0151      	lsls	r1, r2, #5
 8001d64:	693a      	ldr	r2, [r7, #16]
 8001d66:	440a      	add	r2, r1
 8001d68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d6c:	f043 0302 	orr.w	r3, r3, #2
 8001d70:	60d3      	str	r3, [r2, #12]
 8001d72:	e0ce      	b.n	8001f12 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	015a      	lsls	r2, r3, #5
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d8a:	d12c      	bne.n	8001de6 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	015a      	lsls	r2, r3, #5
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	4413      	add	r3, r2
 8001d94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d98:	461a      	mov	r2, r3
 8001d9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d9e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001da0:	6879      	ldr	r1, [r7, #4]
 8001da2:	68fa      	ldr	r2, [r7, #12]
 8001da4:	4613      	mov	r3, r2
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	4413      	add	r3, r2
 8001daa:	00db      	lsls	r3, r3, #3
 8001dac:	440b      	add	r3, r1
 8001dae:	335d      	adds	r3, #93	; 0x5d
 8001db0:	2207      	movs	r2, #7
 8001db2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	015a      	lsls	r2, r3, #5
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	4413      	add	r3, r2
 8001dbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dc0:	68db      	ldr	r3, [r3, #12]
 8001dc2:	68fa      	ldr	r2, [r7, #12]
 8001dc4:	0151      	lsls	r1, r2, #5
 8001dc6:	693a      	ldr	r2, [r7, #16]
 8001dc8:	440a      	add	r2, r1
 8001dca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001dce:	f043 0302 	orr.w	r3, r3, #2
 8001dd2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	68fa      	ldr	r2, [r7, #12]
 8001dda:	b2d2      	uxtb	r2, r2
 8001ddc:	4611      	mov	r1, r2
 8001dde:	4618      	mov	r0, r3
 8001de0:	f003 ff19 	bl	8005c16 <USB_HC_Halt>
 8001de4:	e095      	b.n	8001f12 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	015a      	lsls	r2, r3, #5
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	4413      	add	r3, r2
 8001dee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	f003 0320 	and.w	r3, r3, #32
 8001df8:	2b20      	cmp	r3, #32
 8001dfa:	d109      	bne.n	8001e10 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	015a      	lsls	r2, r3, #5
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	4413      	add	r3, r2
 8001e04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e08:	461a      	mov	r2, r3
 8001e0a:	2320      	movs	r3, #32
 8001e0c:	6093      	str	r3, [r2, #8]
 8001e0e:	e080      	b.n	8001f12 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	015a      	lsls	r2, r3, #5
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	4413      	add	r3, r2
 8001e18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	f003 0308 	and.w	r3, r3, #8
 8001e22:	2b08      	cmp	r3, #8
 8001e24:	d134      	bne.n	8001e90 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	015a      	lsls	r2, r3, #5
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	4413      	add	r3, r2
 8001e2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	68fa      	ldr	r2, [r7, #12]
 8001e36:	0151      	lsls	r1, r2, #5
 8001e38:	693a      	ldr	r2, [r7, #16]
 8001e3a:	440a      	add	r2, r1
 8001e3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e40:	f043 0302 	orr.w	r3, r3, #2
 8001e44:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001e46:	6879      	ldr	r1, [r7, #4]
 8001e48:	68fa      	ldr	r2, [r7, #12]
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	4413      	add	r3, r2
 8001e50:	00db      	lsls	r3, r3, #3
 8001e52:	440b      	add	r3, r1
 8001e54:	335d      	adds	r3, #93	; 0x5d
 8001e56:	2205      	movs	r2, #5
 8001e58:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	015a      	lsls	r2, r3, #5
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	4413      	add	r3, r2
 8001e62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e66:	461a      	mov	r2, r3
 8001e68:	2310      	movs	r3, #16
 8001e6a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	015a      	lsls	r2, r3, #5
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	4413      	add	r3, r2
 8001e74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e78:	461a      	mov	r2, r3
 8001e7a:	2308      	movs	r3, #8
 8001e7c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	68fa      	ldr	r2, [r7, #12]
 8001e84:	b2d2      	uxtb	r2, r2
 8001e86:	4611      	mov	r1, r2
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f003 fec4 	bl	8005c16 <USB_HC_Halt>
 8001e8e:	e040      	b.n	8001f12 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	015a      	lsls	r2, r3, #5
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	4413      	add	r3, r2
 8001e98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ea2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ea6:	d134      	bne.n	8001f12 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	015a      	lsls	r2, r3, #5
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	4413      	add	r3, r2
 8001eb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eb4:	68db      	ldr	r3, [r3, #12]
 8001eb6:	68fa      	ldr	r2, [r7, #12]
 8001eb8:	0151      	lsls	r1, r2, #5
 8001eba:	693a      	ldr	r2, [r7, #16]
 8001ebc:	440a      	add	r2, r1
 8001ebe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ec2:	f043 0302 	orr.w	r3, r3, #2
 8001ec6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	68fa      	ldr	r2, [r7, #12]
 8001ece:	b2d2      	uxtb	r2, r2
 8001ed0:	4611      	mov	r1, r2
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f003 fe9f 	bl	8005c16 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	015a      	lsls	r2, r3, #5
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	4413      	add	r3, r2
 8001ee0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	2310      	movs	r3, #16
 8001ee8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001eea:	6879      	ldr	r1, [r7, #4]
 8001eec:	68fa      	ldr	r2, [r7, #12]
 8001eee:	4613      	mov	r3, r2
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	4413      	add	r3, r2
 8001ef4:	00db      	lsls	r3, r3, #3
 8001ef6:	440b      	add	r3, r1
 8001ef8:	335d      	adds	r3, #93	; 0x5d
 8001efa:	2208      	movs	r2, #8
 8001efc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	015a      	lsls	r2, r3, #5
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	4413      	add	r3, r2
 8001f06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f10:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	015a      	lsls	r2, r3, #5
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	4413      	add	r3, r2
 8001f1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f28:	d122      	bne.n	8001f70 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	015a      	lsls	r2, r3, #5
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	4413      	add	r3, r2
 8001f32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	68fa      	ldr	r2, [r7, #12]
 8001f3a:	0151      	lsls	r1, r2, #5
 8001f3c:	693a      	ldr	r2, [r7, #16]
 8001f3e:	440a      	add	r2, r1
 8001f40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f44:	f043 0302 	orr.w	r3, r3, #2
 8001f48:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	68fa      	ldr	r2, [r7, #12]
 8001f50:	b2d2      	uxtb	r2, r2
 8001f52:	4611      	mov	r1, r2
 8001f54:	4618      	mov	r0, r3
 8001f56:	f003 fe5e 	bl	8005c16 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	015a      	lsls	r2, r3, #5
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	4413      	add	r3, r2
 8001f62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f66:	461a      	mov	r2, r3
 8001f68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f6c:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001f6e:	e300      	b.n	8002572 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	015a      	lsls	r2, r3, #5
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	4413      	add	r3, r2
 8001f78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	f040 80fd 	bne.w	8002182 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	691b      	ldr	r3, [r3, #16]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d01b      	beq.n	8001fc8 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001f90:	6879      	ldr	r1, [r7, #4]
 8001f92:	68fa      	ldr	r2, [r7, #12]
 8001f94:	4613      	mov	r3, r2
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	4413      	add	r3, r2
 8001f9a:	00db      	lsls	r3, r3, #3
 8001f9c:	440b      	add	r3, r1
 8001f9e:	3348      	adds	r3, #72	; 0x48
 8001fa0:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	0159      	lsls	r1, r3, #5
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	440b      	add	r3, r1
 8001faa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fae:	691b      	ldr	r3, [r3, #16]
 8001fb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001fb4:	1ad1      	subs	r1, r2, r3
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	68fa      	ldr	r2, [r7, #12]
 8001fba:	4613      	mov	r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	4413      	add	r3, r2
 8001fc0:	00db      	lsls	r3, r3, #3
 8001fc2:	4403      	add	r3, r0
 8001fc4:	334c      	adds	r3, #76	; 0x4c
 8001fc6:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001fc8:	6879      	ldr	r1, [r7, #4]
 8001fca:	68fa      	ldr	r2, [r7, #12]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	4413      	add	r3, r2
 8001fd2:	00db      	lsls	r3, r3, #3
 8001fd4:	440b      	add	r3, r1
 8001fd6:	335d      	adds	r3, #93	; 0x5d
 8001fd8:	2201      	movs	r2, #1
 8001fda:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001fdc:	6879      	ldr	r1, [r7, #4]
 8001fde:	68fa      	ldr	r2, [r7, #12]
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	4413      	add	r3, r2
 8001fe6:	00db      	lsls	r3, r3, #3
 8001fe8:	440b      	add	r3, r1
 8001fea:	3358      	adds	r3, #88	; 0x58
 8001fec:	2200      	movs	r2, #0
 8001fee:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	015a      	lsls	r2, r3, #5
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	2301      	movs	r3, #1
 8002000:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002002:	6879      	ldr	r1, [r7, #4]
 8002004:	68fa      	ldr	r2, [r7, #12]
 8002006:	4613      	mov	r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	4413      	add	r3, r2
 800200c:	00db      	lsls	r3, r3, #3
 800200e:	440b      	add	r3, r1
 8002010:	333f      	adds	r3, #63	; 0x3f
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d00a      	beq.n	800202e <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002018:	6879      	ldr	r1, [r7, #4]
 800201a:	68fa      	ldr	r2, [r7, #12]
 800201c:	4613      	mov	r3, r2
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	4413      	add	r3, r2
 8002022:	00db      	lsls	r3, r3, #3
 8002024:	440b      	add	r3, r1
 8002026:	333f      	adds	r3, #63	; 0x3f
 8002028:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800202a:	2b02      	cmp	r3, #2
 800202c:	d121      	bne.n	8002072 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	015a      	lsls	r2, r3, #5
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	4413      	add	r3, r2
 8002036:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	68fa      	ldr	r2, [r7, #12]
 800203e:	0151      	lsls	r1, r2, #5
 8002040:	693a      	ldr	r2, [r7, #16]
 8002042:	440a      	add	r2, r1
 8002044:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002048:	f043 0302 	orr.w	r3, r3, #2
 800204c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	68fa      	ldr	r2, [r7, #12]
 8002054:	b2d2      	uxtb	r2, r2
 8002056:	4611      	mov	r1, r2
 8002058:	4618      	mov	r0, r3
 800205a:	f003 fddc 	bl	8005c16 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	015a      	lsls	r2, r3, #5
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	4413      	add	r3, r2
 8002066:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800206a:	461a      	mov	r2, r3
 800206c:	2310      	movs	r3, #16
 800206e:	6093      	str	r3, [r2, #8]
 8002070:	e070      	b.n	8002154 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002072:	6879      	ldr	r1, [r7, #4]
 8002074:	68fa      	ldr	r2, [r7, #12]
 8002076:	4613      	mov	r3, r2
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	4413      	add	r3, r2
 800207c:	00db      	lsls	r3, r3, #3
 800207e:	440b      	add	r3, r1
 8002080:	333f      	adds	r3, #63	; 0x3f
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	2b03      	cmp	r3, #3
 8002086:	d12a      	bne.n	80020de <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	015a      	lsls	r2, r3, #5
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	4413      	add	r3, r2
 8002090:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	68fa      	ldr	r2, [r7, #12]
 8002098:	0151      	lsls	r1, r2, #5
 800209a:	693a      	ldr	r2, [r7, #16]
 800209c:	440a      	add	r2, r1
 800209e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80020a6:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80020a8:	6879      	ldr	r1, [r7, #4]
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	4613      	mov	r3, r2
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	4413      	add	r3, r2
 80020b2:	00db      	lsls	r3, r3, #3
 80020b4:	440b      	add	r3, r1
 80020b6:	335c      	adds	r3, #92	; 0x5c
 80020b8:	2201      	movs	r2, #1
 80020ba:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	b2d8      	uxtb	r0, r3
 80020c0:	6879      	ldr	r1, [r7, #4]
 80020c2:	68fa      	ldr	r2, [r7, #12]
 80020c4:	4613      	mov	r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	4413      	add	r3, r2
 80020ca:	00db      	lsls	r3, r3, #3
 80020cc:	440b      	add	r3, r1
 80020ce:	335c      	adds	r3, #92	; 0x5c
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	461a      	mov	r2, r3
 80020d4:	4601      	mov	r1, r0
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f005 ff40 	bl	8007f5c <HAL_HCD_HC_NotifyURBChange_Callback>
 80020dc:	e03a      	b.n	8002154 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80020de:	6879      	ldr	r1, [r7, #4]
 80020e0:	68fa      	ldr	r2, [r7, #12]
 80020e2:	4613      	mov	r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	4413      	add	r3, r2
 80020e8:	00db      	lsls	r3, r3, #3
 80020ea:	440b      	add	r3, r1
 80020ec:	333f      	adds	r3, #63	; 0x3f
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d12f      	bne.n	8002154 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80020f4:	6879      	ldr	r1, [r7, #4]
 80020f6:	68fa      	ldr	r2, [r7, #12]
 80020f8:	4613      	mov	r3, r2
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	4413      	add	r3, r2
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	440b      	add	r3, r1
 8002102:	335c      	adds	r3, #92	; 0x5c
 8002104:	2201      	movs	r2, #1
 8002106:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002108:	6879      	ldr	r1, [r7, #4]
 800210a:	68fa      	ldr	r2, [r7, #12]
 800210c:	4613      	mov	r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	4413      	add	r3, r2
 8002112:	00db      	lsls	r3, r3, #3
 8002114:	440b      	add	r3, r1
 8002116:	3350      	adds	r3, #80	; 0x50
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	f083 0301 	eor.w	r3, r3, #1
 800211e:	b2d8      	uxtb	r0, r3
 8002120:	6879      	ldr	r1, [r7, #4]
 8002122:	68fa      	ldr	r2, [r7, #12]
 8002124:	4613      	mov	r3, r2
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	4413      	add	r3, r2
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	440b      	add	r3, r1
 800212e:	3350      	adds	r3, #80	; 0x50
 8002130:	4602      	mov	r2, r0
 8002132:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	b2d8      	uxtb	r0, r3
 8002138:	6879      	ldr	r1, [r7, #4]
 800213a:	68fa      	ldr	r2, [r7, #12]
 800213c:	4613      	mov	r3, r2
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	4413      	add	r3, r2
 8002142:	00db      	lsls	r3, r3, #3
 8002144:	440b      	add	r3, r1
 8002146:	335c      	adds	r3, #92	; 0x5c
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	461a      	mov	r2, r3
 800214c:	4601      	mov	r1, r0
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f005 ff04 	bl	8007f5c <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8002154:	6879      	ldr	r1, [r7, #4]
 8002156:	68fa      	ldr	r2, [r7, #12]
 8002158:	4613      	mov	r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	4413      	add	r3, r2
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	440b      	add	r3, r1
 8002162:	3350      	adds	r3, #80	; 0x50
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	f083 0301 	eor.w	r3, r3, #1
 800216a:	b2d8      	uxtb	r0, r3
 800216c:	6879      	ldr	r1, [r7, #4]
 800216e:	68fa      	ldr	r2, [r7, #12]
 8002170:	4613      	mov	r3, r2
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	4413      	add	r3, r2
 8002176:	00db      	lsls	r3, r3, #3
 8002178:	440b      	add	r3, r1
 800217a:	3350      	adds	r3, #80	; 0x50
 800217c:	4602      	mov	r2, r0
 800217e:	701a      	strb	r2, [r3, #0]
}
 8002180:	e1f7      	b.n	8002572 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	015a      	lsls	r2, r3, #5
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	4413      	add	r3, r2
 800218a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f003 0302 	and.w	r3, r3, #2
 8002194:	2b02      	cmp	r3, #2
 8002196:	f040 811a 	bne.w	80023ce <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	015a      	lsls	r2, r3, #5
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	4413      	add	r3, r2
 80021a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	68fa      	ldr	r2, [r7, #12]
 80021aa:	0151      	lsls	r1, r2, #5
 80021ac:	693a      	ldr	r2, [r7, #16]
 80021ae:	440a      	add	r2, r1
 80021b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021b4:	f023 0302 	bic.w	r3, r3, #2
 80021b8:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80021ba:	6879      	ldr	r1, [r7, #4]
 80021bc:	68fa      	ldr	r2, [r7, #12]
 80021be:	4613      	mov	r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	4413      	add	r3, r2
 80021c4:	00db      	lsls	r3, r3, #3
 80021c6:	440b      	add	r3, r1
 80021c8:	335d      	adds	r3, #93	; 0x5d
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d10a      	bne.n	80021e6 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80021d0:	6879      	ldr	r1, [r7, #4]
 80021d2:	68fa      	ldr	r2, [r7, #12]
 80021d4:	4613      	mov	r3, r2
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	4413      	add	r3, r2
 80021da:	00db      	lsls	r3, r3, #3
 80021dc:	440b      	add	r3, r1
 80021de:	335c      	adds	r3, #92	; 0x5c
 80021e0:	2201      	movs	r2, #1
 80021e2:	701a      	strb	r2, [r3, #0]
 80021e4:	e0d9      	b.n	800239a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80021e6:	6879      	ldr	r1, [r7, #4]
 80021e8:	68fa      	ldr	r2, [r7, #12]
 80021ea:	4613      	mov	r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	4413      	add	r3, r2
 80021f0:	00db      	lsls	r3, r3, #3
 80021f2:	440b      	add	r3, r1
 80021f4:	335d      	adds	r3, #93	; 0x5d
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	2b05      	cmp	r3, #5
 80021fa:	d10a      	bne.n	8002212 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80021fc:	6879      	ldr	r1, [r7, #4]
 80021fe:	68fa      	ldr	r2, [r7, #12]
 8002200:	4613      	mov	r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	4413      	add	r3, r2
 8002206:	00db      	lsls	r3, r3, #3
 8002208:	440b      	add	r3, r1
 800220a:	335c      	adds	r3, #92	; 0x5c
 800220c:	2205      	movs	r2, #5
 800220e:	701a      	strb	r2, [r3, #0]
 8002210:	e0c3      	b.n	800239a <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002212:	6879      	ldr	r1, [r7, #4]
 8002214:	68fa      	ldr	r2, [r7, #12]
 8002216:	4613      	mov	r3, r2
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	4413      	add	r3, r2
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	440b      	add	r3, r1
 8002220:	335d      	adds	r3, #93	; 0x5d
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	2b06      	cmp	r3, #6
 8002226:	d00a      	beq.n	800223e <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002228:	6879      	ldr	r1, [r7, #4]
 800222a:	68fa      	ldr	r2, [r7, #12]
 800222c:	4613      	mov	r3, r2
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	4413      	add	r3, r2
 8002232:	00db      	lsls	r3, r3, #3
 8002234:	440b      	add	r3, r1
 8002236:	335d      	adds	r3, #93	; 0x5d
 8002238:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800223a:	2b08      	cmp	r3, #8
 800223c:	d156      	bne.n	80022ec <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 800223e:	6879      	ldr	r1, [r7, #4]
 8002240:	68fa      	ldr	r2, [r7, #12]
 8002242:	4613      	mov	r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	4413      	add	r3, r2
 8002248:	00db      	lsls	r3, r3, #3
 800224a:	440b      	add	r3, r1
 800224c:	3358      	adds	r3, #88	; 0x58
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	1c59      	adds	r1, r3, #1
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	68fa      	ldr	r2, [r7, #12]
 8002256:	4613      	mov	r3, r2
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	4413      	add	r3, r2
 800225c:	00db      	lsls	r3, r3, #3
 800225e:	4403      	add	r3, r0
 8002260:	3358      	adds	r3, #88	; 0x58
 8002262:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002264:	6879      	ldr	r1, [r7, #4]
 8002266:	68fa      	ldr	r2, [r7, #12]
 8002268:	4613      	mov	r3, r2
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	4413      	add	r3, r2
 800226e:	00db      	lsls	r3, r3, #3
 8002270:	440b      	add	r3, r1
 8002272:	3358      	adds	r3, #88	; 0x58
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	2b03      	cmp	r3, #3
 8002278:	d914      	bls.n	80022a4 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800227a:	6879      	ldr	r1, [r7, #4]
 800227c:	68fa      	ldr	r2, [r7, #12]
 800227e:	4613      	mov	r3, r2
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	4413      	add	r3, r2
 8002284:	00db      	lsls	r3, r3, #3
 8002286:	440b      	add	r3, r1
 8002288:	3358      	adds	r3, #88	; 0x58
 800228a:	2200      	movs	r2, #0
 800228c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800228e:	6879      	ldr	r1, [r7, #4]
 8002290:	68fa      	ldr	r2, [r7, #12]
 8002292:	4613      	mov	r3, r2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	4413      	add	r3, r2
 8002298:	00db      	lsls	r3, r3, #3
 800229a:	440b      	add	r3, r1
 800229c:	335c      	adds	r3, #92	; 0x5c
 800229e:	2204      	movs	r2, #4
 80022a0:	701a      	strb	r2, [r3, #0]
 80022a2:	e009      	b.n	80022b8 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80022a4:	6879      	ldr	r1, [r7, #4]
 80022a6:	68fa      	ldr	r2, [r7, #12]
 80022a8:	4613      	mov	r3, r2
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	4413      	add	r3, r2
 80022ae:	00db      	lsls	r3, r3, #3
 80022b0:	440b      	add	r3, r1
 80022b2:	335c      	adds	r3, #92	; 0x5c
 80022b4:	2202      	movs	r2, #2
 80022b6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	015a      	lsls	r2, r3, #5
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	4413      	add	r3, r2
 80022c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80022ce:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80022d6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	015a      	lsls	r2, r3, #5
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	4413      	add	r3, r2
 80022e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022e4:	461a      	mov	r2, r3
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	6013      	str	r3, [r2, #0]
 80022ea:	e056      	b.n	800239a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80022ec:	6879      	ldr	r1, [r7, #4]
 80022ee:	68fa      	ldr	r2, [r7, #12]
 80022f0:	4613      	mov	r3, r2
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	4413      	add	r3, r2
 80022f6:	00db      	lsls	r3, r3, #3
 80022f8:	440b      	add	r3, r1
 80022fa:	335d      	adds	r3, #93	; 0x5d
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	2b03      	cmp	r3, #3
 8002300:	d123      	bne.n	800234a <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002302:	6879      	ldr	r1, [r7, #4]
 8002304:	68fa      	ldr	r2, [r7, #12]
 8002306:	4613      	mov	r3, r2
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	4413      	add	r3, r2
 800230c:	00db      	lsls	r3, r3, #3
 800230e:	440b      	add	r3, r1
 8002310:	335c      	adds	r3, #92	; 0x5c
 8002312:	2202      	movs	r2, #2
 8002314:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	015a      	lsls	r2, r3, #5
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	4413      	add	r3, r2
 800231e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800232c:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002334:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	015a      	lsls	r2, r3, #5
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	4413      	add	r3, r2
 800233e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002342:	461a      	mov	r2, r3
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	6013      	str	r3, [r2, #0]
 8002348:	e027      	b.n	800239a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800234a:	6879      	ldr	r1, [r7, #4]
 800234c:	68fa      	ldr	r2, [r7, #12]
 800234e:	4613      	mov	r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	4413      	add	r3, r2
 8002354:	00db      	lsls	r3, r3, #3
 8002356:	440b      	add	r3, r1
 8002358:	335d      	adds	r3, #93	; 0x5d
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	2b07      	cmp	r3, #7
 800235e:	d11c      	bne.n	800239a <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8002360:	6879      	ldr	r1, [r7, #4]
 8002362:	68fa      	ldr	r2, [r7, #12]
 8002364:	4613      	mov	r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	4413      	add	r3, r2
 800236a:	00db      	lsls	r3, r3, #3
 800236c:	440b      	add	r3, r1
 800236e:	3358      	adds	r3, #88	; 0x58
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	1c59      	adds	r1, r3, #1
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	68fa      	ldr	r2, [r7, #12]
 8002378:	4613      	mov	r3, r2
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	4413      	add	r3, r2
 800237e:	00db      	lsls	r3, r3, #3
 8002380:	4403      	add	r3, r0
 8002382:	3358      	adds	r3, #88	; 0x58
 8002384:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002386:	6879      	ldr	r1, [r7, #4]
 8002388:	68fa      	ldr	r2, [r7, #12]
 800238a:	4613      	mov	r3, r2
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	4413      	add	r3, r2
 8002390:	00db      	lsls	r3, r3, #3
 8002392:	440b      	add	r3, r1
 8002394:	335c      	adds	r3, #92	; 0x5c
 8002396:	2204      	movs	r2, #4
 8002398:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	015a      	lsls	r2, r3, #5
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	4413      	add	r3, r2
 80023a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023a6:	461a      	mov	r2, r3
 80023a8:	2302      	movs	r3, #2
 80023aa:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	b2d8      	uxtb	r0, r3
 80023b0:	6879      	ldr	r1, [r7, #4]
 80023b2:	68fa      	ldr	r2, [r7, #12]
 80023b4:	4613      	mov	r3, r2
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	4413      	add	r3, r2
 80023ba:	00db      	lsls	r3, r3, #3
 80023bc:	440b      	add	r3, r1
 80023be:	335c      	adds	r3, #92	; 0x5c
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	461a      	mov	r2, r3
 80023c4:	4601      	mov	r1, r0
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f005 fdc8 	bl	8007f5c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80023cc:	e0d1      	b.n	8002572 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	015a      	lsls	r2, r3, #5
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	4413      	add	r3, r2
 80023d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023e0:	2b80      	cmp	r3, #128	; 0x80
 80023e2:	d13e      	bne.n	8002462 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	015a      	lsls	r2, r3, #5
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	4413      	add	r3, r2
 80023ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	0151      	lsls	r1, r2, #5
 80023f6:	693a      	ldr	r2, [r7, #16]
 80023f8:	440a      	add	r2, r1
 80023fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023fe:	f043 0302 	orr.w	r3, r3, #2
 8002402:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002404:	6879      	ldr	r1, [r7, #4]
 8002406:	68fa      	ldr	r2, [r7, #12]
 8002408:	4613      	mov	r3, r2
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	4413      	add	r3, r2
 800240e:	00db      	lsls	r3, r3, #3
 8002410:	440b      	add	r3, r1
 8002412:	3358      	adds	r3, #88	; 0x58
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	1c59      	adds	r1, r3, #1
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	68fa      	ldr	r2, [r7, #12]
 800241c:	4613      	mov	r3, r2
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	4413      	add	r3, r2
 8002422:	00db      	lsls	r3, r3, #3
 8002424:	4403      	add	r3, r0
 8002426:	3358      	adds	r3, #88	; 0x58
 8002428:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800242a:	6879      	ldr	r1, [r7, #4]
 800242c:	68fa      	ldr	r2, [r7, #12]
 800242e:	4613      	mov	r3, r2
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	4413      	add	r3, r2
 8002434:	00db      	lsls	r3, r3, #3
 8002436:	440b      	add	r3, r1
 8002438:	335d      	adds	r3, #93	; 0x5d
 800243a:	2206      	movs	r2, #6
 800243c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	68fa      	ldr	r2, [r7, #12]
 8002444:	b2d2      	uxtb	r2, r2
 8002446:	4611      	mov	r1, r2
 8002448:	4618      	mov	r0, r3
 800244a:	f003 fbe4 	bl	8005c16 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	015a      	lsls	r2, r3, #5
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	4413      	add	r3, r2
 8002456:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800245a:	461a      	mov	r2, r3
 800245c:	2380      	movs	r3, #128	; 0x80
 800245e:	6093      	str	r3, [r2, #8]
}
 8002460:	e087      	b.n	8002572 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	015a      	lsls	r2, r3, #5
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	4413      	add	r3, r2
 800246a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f003 0310 	and.w	r3, r3, #16
 8002474:	2b10      	cmp	r3, #16
 8002476:	d17c      	bne.n	8002572 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002478:	6879      	ldr	r1, [r7, #4]
 800247a:	68fa      	ldr	r2, [r7, #12]
 800247c:	4613      	mov	r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	4413      	add	r3, r2
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	440b      	add	r3, r1
 8002486:	333f      	adds	r3, #63	; 0x3f
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	2b03      	cmp	r3, #3
 800248c:	d122      	bne.n	80024d4 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800248e:	6879      	ldr	r1, [r7, #4]
 8002490:	68fa      	ldr	r2, [r7, #12]
 8002492:	4613      	mov	r3, r2
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	4413      	add	r3, r2
 8002498:	00db      	lsls	r3, r3, #3
 800249a:	440b      	add	r3, r1
 800249c:	3358      	adds	r3, #88	; 0x58
 800249e:	2200      	movs	r2, #0
 80024a0:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	015a      	lsls	r2, r3, #5
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	4413      	add	r3, r2
 80024aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	68fa      	ldr	r2, [r7, #12]
 80024b2:	0151      	lsls	r1, r2, #5
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	440a      	add	r2, r1
 80024b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024bc:	f043 0302 	orr.w	r3, r3, #2
 80024c0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	68fa      	ldr	r2, [r7, #12]
 80024c8:	b2d2      	uxtb	r2, r2
 80024ca:	4611      	mov	r1, r2
 80024cc:	4618      	mov	r0, r3
 80024ce:	f003 fba2 	bl	8005c16 <USB_HC_Halt>
 80024d2:	e045      	b.n	8002560 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80024d4:	6879      	ldr	r1, [r7, #4]
 80024d6:	68fa      	ldr	r2, [r7, #12]
 80024d8:	4613      	mov	r3, r2
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	4413      	add	r3, r2
 80024de:	00db      	lsls	r3, r3, #3
 80024e0:	440b      	add	r3, r1
 80024e2:	333f      	adds	r3, #63	; 0x3f
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d00a      	beq.n	8002500 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80024ea:	6879      	ldr	r1, [r7, #4]
 80024ec:	68fa      	ldr	r2, [r7, #12]
 80024ee:	4613      	mov	r3, r2
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	4413      	add	r3, r2
 80024f4:	00db      	lsls	r3, r3, #3
 80024f6:	440b      	add	r3, r1
 80024f8:	333f      	adds	r3, #63	; 0x3f
 80024fa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d12f      	bne.n	8002560 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002500:	6879      	ldr	r1, [r7, #4]
 8002502:	68fa      	ldr	r2, [r7, #12]
 8002504:	4613      	mov	r3, r2
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	4413      	add	r3, r2
 800250a:	00db      	lsls	r3, r3, #3
 800250c:	440b      	add	r3, r1
 800250e:	3358      	adds	r3, #88	; 0x58
 8002510:	2200      	movs	r2, #0
 8002512:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	691b      	ldr	r3, [r3, #16]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d121      	bne.n	8002560 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 800251c:	6879      	ldr	r1, [r7, #4]
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	4613      	mov	r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	4413      	add	r3, r2
 8002526:	00db      	lsls	r3, r3, #3
 8002528:	440b      	add	r3, r1
 800252a:	335d      	adds	r3, #93	; 0x5d
 800252c:	2203      	movs	r2, #3
 800252e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	015a      	lsls	r2, r3, #5
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	4413      	add	r3, r2
 8002538:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	68fa      	ldr	r2, [r7, #12]
 8002540:	0151      	lsls	r1, r2, #5
 8002542:	693a      	ldr	r2, [r7, #16]
 8002544:	440a      	add	r2, r1
 8002546:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800254a:	f043 0302 	orr.w	r3, r3, #2
 800254e:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	68fa      	ldr	r2, [r7, #12]
 8002556:	b2d2      	uxtb	r2, r2
 8002558:	4611      	mov	r1, r2
 800255a:	4618      	mov	r0, r3
 800255c:	f003 fb5b 	bl	8005c16 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	015a      	lsls	r2, r3, #5
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	4413      	add	r3, r2
 8002568:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800256c:	461a      	mov	r2, r3
 800256e:	2310      	movs	r3, #16
 8002570:	6093      	str	r3, [r2, #8]
}
 8002572:	bf00      	nop
 8002574:	3718      	adds	r7, #24
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}

0800257a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800257a:	b580      	push	{r7, lr}
 800257c:	b086      	sub	sp, #24
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
 8002582:	460b      	mov	r3, r1
 8002584:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002590:	78fb      	ldrb	r3, [r7, #3]
 8002592:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	015a      	lsls	r2, r3, #5
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	4413      	add	r3, r2
 800259c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f003 0304 	and.w	r3, r3, #4
 80025a6:	2b04      	cmp	r3, #4
 80025a8:	d119      	bne.n	80025de <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	015a      	lsls	r2, r3, #5
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	4413      	add	r3, r2
 80025b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025b6:	461a      	mov	r2, r3
 80025b8:	2304      	movs	r3, #4
 80025ba:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	015a      	lsls	r2, r3, #5
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	4413      	add	r3, r2
 80025c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	68fa      	ldr	r2, [r7, #12]
 80025cc:	0151      	lsls	r1, r2, #5
 80025ce:	693a      	ldr	r2, [r7, #16]
 80025d0:	440a      	add	r2, r1
 80025d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025d6:	f043 0302 	orr.w	r3, r3, #2
 80025da:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80025dc:	e33e      	b.n	8002c5c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	015a      	lsls	r2, r3, #5
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	4413      	add	r3, r2
 80025e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	f003 0320 	and.w	r3, r3, #32
 80025f0:	2b20      	cmp	r3, #32
 80025f2:	d141      	bne.n	8002678 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	015a      	lsls	r2, r3, #5
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	4413      	add	r3, r2
 80025fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002600:	461a      	mov	r2, r3
 8002602:	2320      	movs	r3, #32
 8002604:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002606:	6879      	ldr	r1, [r7, #4]
 8002608:	68fa      	ldr	r2, [r7, #12]
 800260a:	4613      	mov	r3, r2
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	4413      	add	r3, r2
 8002610:	00db      	lsls	r3, r3, #3
 8002612:	440b      	add	r3, r1
 8002614:	333d      	adds	r3, #61	; 0x3d
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	2b01      	cmp	r3, #1
 800261a:	f040 831f 	bne.w	8002c5c <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 800261e:	6879      	ldr	r1, [r7, #4]
 8002620:	68fa      	ldr	r2, [r7, #12]
 8002622:	4613      	mov	r3, r2
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	4413      	add	r3, r2
 8002628:	00db      	lsls	r3, r3, #3
 800262a:	440b      	add	r3, r1
 800262c:	333d      	adds	r3, #61	; 0x3d
 800262e:	2200      	movs	r2, #0
 8002630:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002632:	6879      	ldr	r1, [r7, #4]
 8002634:	68fa      	ldr	r2, [r7, #12]
 8002636:	4613      	mov	r3, r2
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	4413      	add	r3, r2
 800263c:	00db      	lsls	r3, r3, #3
 800263e:	440b      	add	r3, r1
 8002640:	335c      	adds	r3, #92	; 0x5c
 8002642:	2202      	movs	r2, #2
 8002644:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	015a      	lsls	r2, r3, #5
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	4413      	add	r3, r2
 800264e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	68fa      	ldr	r2, [r7, #12]
 8002656:	0151      	lsls	r1, r2, #5
 8002658:	693a      	ldr	r2, [r7, #16]
 800265a:	440a      	add	r2, r1
 800265c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002660:	f043 0302 	orr.w	r3, r3, #2
 8002664:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68fa      	ldr	r2, [r7, #12]
 800266c:	b2d2      	uxtb	r2, r2
 800266e:	4611      	mov	r1, r2
 8002670:	4618      	mov	r0, r3
 8002672:	f003 fad0 	bl	8005c16 <USB_HC_Halt>
}
 8002676:	e2f1      	b.n	8002c5c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	015a      	lsls	r2, r3, #5
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	4413      	add	r3, r2
 8002680:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800268a:	2b40      	cmp	r3, #64	; 0x40
 800268c:	d13f      	bne.n	800270e <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 800268e:	6879      	ldr	r1, [r7, #4]
 8002690:	68fa      	ldr	r2, [r7, #12]
 8002692:	4613      	mov	r3, r2
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	4413      	add	r3, r2
 8002698:	00db      	lsls	r3, r3, #3
 800269a:	440b      	add	r3, r1
 800269c:	335d      	adds	r3, #93	; 0x5d
 800269e:	2204      	movs	r2, #4
 80026a0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80026a2:	6879      	ldr	r1, [r7, #4]
 80026a4:	68fa      	ldr	r2, [r7, #12]
 80026a6:	4613      	mov	r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	4413      	add	r3, r2
 80026ac:	00db      	lsls	r3, r3, #3
 80026ae:	440b      	add	r3, r1
 80026b0:	333d      	adds	r3, #61	; 0x3d
 80026b2:	2201      	movs	r2, #1
 80026b4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80026b6:	6879      	ldr	r1, [r7, #4]
 80026b8:	68fa      	ldr	r2, [r7, #12]
 80026ba:	4613      	mov	r3, r2
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	4413      	add	r3, r2
 80026c0:	00db      	lsls	r3, r3, #3
 80026c2:	440b      	add	r3, r1
 80026c4:	3358      	adds	r3, #88	; 0x58
 80026c6:	2200      	movs	r2, #0
 80026c8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	015a      	lsls	r2, r3, #5
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	4413      	add	r3, r2
 80026d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	68fa      	ldr	r2, [r7, #12]
 80026da:	0151      	lsls	r1, r2, #5
 80026dc:	693a      	ldr	r2, [r7, #16]
 80026de:	440a      	add	r2, r1
 80026e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026e4:	f043 0302 	orr.w	r3, r3, #2
 80026e8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	68fa      	ldr	r2, [r7, #12]
 80026f0:	b2d2      	uxtb	r2, r2
 80026f2:	4611      	mov	r1, r2
 80026f4:	4618      	mov	r0, r3
 80026f6:	f003 fa8e 	bl	8005c16 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	015a      	lsls	r2, r3, #5
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	4413      	add	r3, r2
 8002702:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002706:	461a      	mov	r2, r3
 8002708:	2340      	movs	r3, #64	; 0x40
 800270a:	6093      	str	r3, [r2, #8]
}
 800270c:	e2a6      	b.n	8002c5c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	015a      	lsls	r2, r3, #5
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	4413      	add	r3, r2
 8002716:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002720:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002724:	d122      	bne.n	800276c <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	015a      	lsls	r2, r3, #5
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	4413      	add	r3, r2
 800272e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	68fa      	ldr	r2, [r7, #12]
 8002736:	0151      	lsls	r1, r2, #5
 8002738:	693a      	ldr	r2, [r7, #16]
 800273a:	440a      	add	r2, r1
 800273c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002740:	f043 0302 	orr.w	r3, r3, #2
 8002744:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	68fa      	ldr	r2, [r7, #12]
 800274c:	b2d2      	uxtb	r2, r2
 800274e:	4611      	mov	r1, r2
 8002750:	4618      	mov	r0, r3
 8002752:	f003 fa60 	bl	8005c16 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	015a      	lsls	r2, r3, #5
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	4413      	add	r3, r2
 800275e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002762:	461a      	mov	r2, r3
 8002764:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002768:	6093      	str	r3, [r2, #8]
}
 800276a:	e277      	b.n	8002c5c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	015a      	lsls	r2, r3, #5
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	4413      	add	r3, r2
 8002774:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	2b01      	cmp	r3, #1
 8002780:	d135      	bne.n	80027ee <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002782:	6879      	ldr	r1, [r7, #4]
 8002784:	68fa      	ldr	r2, [r7, #12]
 8002786:	4613      	mov	r3, r2
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	4413      	add	r3, r2
 800278c:	00db      	lsls	r3, r3, #3
 800278e:	440b      	add	r3, r1
 8002790:	3358      	adds	r3, #88	; 0x58
 8002792:	2200      	movs	r2, #0
 8002794:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	015a      	lsls	r2, r3, #5
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	4413      	add	r3, r2
 800279e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	68fa      	ldr	r2, [r7, #12]
 80027a6:	0151      	lsls	r1, r2, #5
 80027a8:	693a      	ldr	r2, [r7, #16]
 80027aa:	440a      	add	r2, r1
 80027ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027b0:	f043 0302 	orr.w	r3, r3, #2
 80027b4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	68fa      	ldr	r2, [r7, #12]
 80027bc:	b2d2      	uxtb	r2, r2
 80027be:	4611      	mov	r1, r2
 80027c0:	4618      	mov	r0, r3
 80027c2:	f003 fa28 	bl	8005c16 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	015a      	lsls	r2, r3, #5
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	4413      	add	r3, r2
 80027ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027d2:	461a      	mov	r2, r3
 80027d4:	2301      	movs	r3, #1
 80027d6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80027d8:	6879      	ldr	r1, [r7, #4]
 80027da:	68fa      	ldr	r2, [r7, #12]
 80027dc:	4613      	mov	r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	4413      	add	r3, r2
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	440b      	add	r3, r1
 80027e6:	335d      	adds	r3, #93	; 0x5d
 80027e8:	2201      	movs	r2, #1
 80027ea:	701a      	strb	r2, [r3, #0]
}
 80027ec:	e236      	b.n	8002c5c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	015a      	lsls	r2, r3, #5
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	4413      	add	r3, r2
 80027f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	f003 0308 	and.w	r3, r3, #8
 8002800:	2b08      	cmp	r3, #8
 8002802:	d12b      	bne.n	800285c <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	015a      	lsls	r2, r3, #5
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	4413      	add	r3, r2
 800280c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002810:	461a      	mov	r2, r3
 8002812:	2308      	movs	r3, #8
 8002814:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	015a      	lsls	r2, r3, #5
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	4413      	add	r3, r2
 800281e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	68fa      	ldr	r2, [r7, #12]
 8002826:	0151      	lsls	r1, r2, #5
 8002828:	693a      	ldr	r2, [r7, #16]
 800282a:	440a      	add	r2, r1
 800282c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002830:	f043 0302 	orr.w	r3, r3, #2
 8002834:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	68fa      	ldr	r2, [r7, #12]
 800283c:	b2d2      	uxtb	r2, r2
 800283e:	4611      	mov	r1, r2
 8002840:	4618      	mov	r0, r3
 8002842:	f003 f9e8 	bl	8005c16 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002846:	6879      	ldr	r1, [r7, #4]
 8002848:	68fa      	ldr	r2, [r7, #12]
 800284a:	4613      	mov	r3, r2
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	4413      	add	r3, r2
 8002850:	00db      	lsls	r3, r3, #3
 8002852:	440b      	add	r3, r1
 8002854:	335d      	adds	r3, #93	; 0x5d
 8002856:	2205      	movs	r2, #5
 8002858:	701a      	strb	r2, [r3, #0]
}
 800285a:	e1ff      	b.n	8002c5c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	015a      	lsls	r2, r3, #5
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	4413      	add	r3, r2
 8002864:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f003 0310 	and.w	r3, r3, #16
 800286e:	2b10      	cmp	r3, #16
 8002870:	d155      	bne.n	800291e <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002872:	6879      	ldr	r1, [r7, #4]
 8002874:	68fa      	ldr	r2, [r7, #12]
 8002876:	4613      	mov	r3, r2
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	4413      	add	r3, r2
 800287c:	00db      	lsls	r3, r3, #3
 800287e:	440b      	add	r3, r1
 8002880:	3358      	adds	r3, #88	; 0x58
 8002882:	2200      	movs	r2, #0
 8002884:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002886:	6879      	ldr	r1, [r7, #4]
 8002888:	68fa      	ldr	r2, [r7, #12]
 800288a:	4613      	mov	r3, r2
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	4413      	add	r3, r2
 8002890:	00db      	lsls	r3, r3, #3
 8002892:	440b      	add	r3, r1
 8002894:	335d      	adds	r3, #93	; 0x5d
 8002896:	2203      	movs	r2, #3
 8002898:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800289a:	6879      	ldr	r1, [r7, #4]
 800289c:	68fa      	ldr	r2, [r7, #12]
 800289e:	4613      	mov	r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	4413      	add	r3, r2
 80028a4:	00db      	lsls	r3, r3, #3
 80028a6:	440b      	add	r3, r1
 80028a8:	333d      	adds	r3, #61	; 0x3d
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d114      	bne.n	80028da <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80028b0:	6879      	ldr	r1, [r7, #4]
 80028b2:	68fa      	ldr	r2, [r7, #12]
 80028b4:	4613      	mov	r3, r2
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	4413      	add	r3, r2
 80028ba:	00db      	lsls	r3, r3, #3
 80028bc:	440b      	add	r3, r1
 80028be:	333c      	adds	r3, #60	; 0x3c
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d109      	bne.n	80028da <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 80028c6:	6879      	ldr	r1, [r7, #4]
 80028c8:	68fa      	ldr	r2, [r7, #12]
 80028ca:	4613      	mov	r3, r2
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	4413      	add	r3, r2
 80028d0:	00db      	lsls	r3, r3, #3
 80028d2:	440b      	add	r3, r1
 80028d4:	333d      	adds	r3, #61	; 0x3d
 80028d6:	2201      	movs	r2, #1
 80028d8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	015a      	lsls	r2, r3, #5
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	4413      	add	r3, r2
 80028e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	68fa      	ldr	r2, [r7, #12]
 80028ea:	0151      	lsls	r1, r2, #5
 80028ec:	693a      	ldr	r2, [r7, #16]
 80028ee:	440a      	add	r2, r1
 80028f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028f4:	f043 0302 	orr.w	r3, r3, #2
 80028f8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	68fa      	ldr	r2, [r7, #12]
 8002900:	b2d2      	uxtb	r2, r2
 8002902:	4611      	mov	r1, r2
 8002904:	4618      	mov	r0, r3
 8002906:	f003 f986 	bl	8005c16 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	015a      	lsls	r2, r3, #5
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	4413      	add	r3, r2
 8002912:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002916:	461a      	mov	r2, r3
 8002918:	2310      	movs	r3, #16
 800291a:	6093      	str	r3, [r2, #8]
}
 800291c:	e19e      	b.n	8002c5c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	015a      	lsls	r2, r3, #5
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	4413      	add	r3, r2
 8002926:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002930:	2b80      	cmp	r3, #128	; 0x80
 8002932:	d12b      	bne.n	800298c <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	015a      	lsls	r2, r3, #5
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	4413      	add	r3, r2
 800293c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	68fa      	ldr	r2, [r7, #12]
 8002944:	0151      	lsls	r1, r2, #5
 8002946:	693a      	ldr	r2, [r7, #16]
 8002948:	440a      	add	r2, r1
 800294a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800294e:	f043 0302 	orr.w	r3, r3, #2
 8002952:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	68fa      	ldr	r2, [r7, #12]
 800295a:	b2d2      	uxtb	r2, r2
 800295c:	4611      	mov	r1, r2
 800295e:	4618      	mov	r0, r3
 8002960:	f003 f959 	bl	8005c16 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002964:	6879      	ldr	r1, [r7, #4]
 8002966:	68fa      	ldr	r2, [r7, #12]
 8002968:	4613      	mov	r3, r2
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	4413      	add	r3, r2
 800296e:	00db      	lsls	r3, r3, #3
 8002970:	440b      	add	r3, r1
 8002972:	335d      	adds	r3, #93	; 0x5d
 8002974:	2206      	movs	r2, #6
 8002976:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	015a      	lsls	r2, r3, #5
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	4413      	add	r3, r2
 8002980:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002984:	461a      	mov	r2, r3
 8002986:	2380      	movs	r3, #128	; 0x80
 8002988:	6093      	str	r3, [r2, #8]
}
 800298a:	e167      	b.n	8002c5c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	015a      	lsls	r2, r3, #5
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	4413      	add	r3, r2
 8002994:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800299e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029a2:	d135      	bne.n	8002a10 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	015a      	lsls	r2, r3, #5
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	4413      	add	r3, r2
 80029ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	0151      	lsls	r1, r2, #5
 80029b6:	693a      	ldr	r2, [r7, #16]
 80029b8:	440a      	add	r2, r1
 80029ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029be:	f043 0302 	orr.w	r3, r3, #2
 80029c2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	68fa      	ldr	r2, [r7, #12]
 80029ca:	b2d2      	uxtb	r2, r2
 80029cc:	4611      	mov	r1, r2
 80029ce:	4618      	mov	r0, r3
 80029d0:	f003 f921 	bl	8005c16 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	015a      	lsls	r2, r3, #5
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	4413      	add	r3, r2
 80029dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029e0:	461a      	mov	r2, r3
 80029e2:	2310      	movs	r3, #16
 80029e4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	015a      	lsls	r2, r3, #5
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	4413      	add	r3, r2
 80029ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029f2:	461a      	mov	r2, r3
 80029f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029f8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80029fa:	6879      	ldr	r1, [r7, #4]
 80029fc:	68fa      	ldr	r2, [r7, #12]
 80029fe:	4613      	mov	r3, r2
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	4413      	add	r3, r2
 8002a04:	00db      	lsls	r3, r3, #3
 8002a06:	440b      	add	r3, r1
 8002a08:	335d      	adds	r3, #93	; 0x5d
 8002a0a:	2208      	movs	r2, #8
 8002a0c:	701a      	strb	r2, [r3, #0]
}
 8002a0e:	e125      	b.n	8002c5c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	015a      	lsls	r2, r3, #5
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	4413      	add	r3, r2
 8002a18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	f040 811a 	bne.w	8002c5c <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	015a      	lsls	r2, r3, #5
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	4413      	add	r3, r2
 8002a30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	68fa      	ldr	r2, [r7, #12]
 8002a38:	0151      	lsls	r1, r2, #5
 8002a3a:	693a      	ldr	r2, [r7, #16]
 8002a3c:	440a      	add	r2, r1
 8002a3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a42:	f023 0302 	bic.w	r3, r3, #2
 8002a46:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002a48:	6879      	ldr	r1, [r7, #4]
 8002a4a:	68fa      	ldr	r2, [r7, #12]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	4413      	add	r3, r2
 8002a52:	00db      	lsls	r3, r3, #3
 8002a54:	440b      	add	r3, r1
 8002a56:	335d      	adds	r3, #93	; 0x5d
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d137      	bne.n	8002ace <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002a5e:	6879      	ldr	r1, [r7, #4]
 8002a60:	68fa      	ldr	r2, [r7, #12]
 8002a62:	4613      	mov	r3, r2
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	4413      	add	r3, r2
 8002a68:	00db      	lsls	r3, r3, #3
 8002a6a:	440b      	add	r3, r1
 8002a6c:	335c      	adds	r3, #92	; 0x5c
 8002a6e:	2201      	movs	r2, #1
 8002a70:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002a72:	6879      	ldr	r1, [r7, #4]
 8002a74:	68fa      	ldr	r2, [r7, #12]
 8002a76:	4613      	mov	r3, r2
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	4413      	add	r3, r2
 8002a7c:	00db      	lsls	r3, r3, #3
 8002a7e:	440b      	add	r3, r1
 8002a80:	333f      	adds	r3, #63	; 0x3f
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d00b      	beq.n	8002aa0 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002a88:	6879      	ldr	r1, [r7, #4]
 8002a8a:	68fa      	ldr	r2, [r7, #12]
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	4413      	add	r3, r2
 8002a92:	00db      	lsls	r3, r3, #3
 8002a94:	440b      	add	r3, r1
 8002a96:	333f      	adds	r3, #63	; 0x3f
 8002a98:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002a9a:	2b03      	cmp	r3, #3
 8002a9c:	f040 80c5 	bne.w	8002c2a <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8002aa0:	6879      	ldr	r1, [r7, #4]
 8002aa2:	68fa      	ldr	r2, [r7, #12]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	4413      	add	r3, r2
 8002aaa:	00db      	lsls	r3, r3, #3
 8002aac:	440b      	add	r3, r1
 8002aae:	3351      	adds	r3, #81	; 0x51
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	f083 0301 	eor.w	r3, r3, #1
 8002ab6:	b2d8      	uxtb	r0, r3
 8002ab8:	6879      	ldr	r1, [r7, #4]
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	4613      	mov	r3, r2
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	4413      	add	r3, r2
 8002ac2:	00db      	lsls	r3, r3, #3
 8002ac4:	440b      	add	r3, r1
 8002ac6:	3351      	adds	r3, #81	; 0x51
 8002ac8:	4602      	mov	r2, r0
 8002aca:	701a      	strb	r2, [r3, #0]
 8002acc:	e0ad      	b.n	8002c2a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002ace:	6879      	ldr	r1, [r7, #4]
 8002ad0:	68fa      	ldr	r2, [r7, #12]
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	4413      	add	r3, r2
 8002ad8:	00db      	lsls	r3, r3, #3
 8002ada:	440b      	add	r3, r1
 8002adc:	335d      	adds	r3, #93	; 0x5d
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	2b03      	cmp	r3, #3
 8002ae2:	d10a      	bne.n	8002afa <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002ae4:	6879      	ldr	r1, [r7, #4]
 8002ae6:	68fa      	ldr	r2, [r7, #12]
 8002ae8:	4613      	mov	r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	4413      	add	r3, r2
 8002aee:	00db      	lsls	r3, r3, #3
 8002af0:	440b      	add	r3, r1
 8002af2:	335c      	adds	r3, #92	; 0x5c
 8002af4:	2202      	movs	r2, #2
 8002af6:	701a      	strb	r2, [r3, #0]
 8002af8:	e097      	b.n	8002c2a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002afa:	6879      	ldr	r1, [r7, #4]
 8002afc:	68fa      	ldr	r2, [r7, #12]
 8002afe:	4613      	mov	r3, r2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	4413      	add	r3, r2
 8002b04:	00db      	lsls	r3, r3, #3
 8002b06:	440b      	add	r3, r1
 8002b08:	335d      	adds	r3, #93	; 0x5d
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	2b04      	cmp	r3, #4
 8002b0e:	d10a      	bne.n	8002b26 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002b10:	6879      	ldr	r1, [r7, #4]
 8002b12:	68fa      	ldr	r2, [r7, #12]
 8002b14:	4613      	mov	r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	4413      	add	r3, r2
 8002b1a:	00db      	lsls	r3, r3, #3
 8002b1c:	440b      	add	r3, r1
 8002b1e:	335c      	adds	r3, #92	; 0x5c
 8002b20:	2202      	movs	r2, #2
 8002b22:	701a      	strb	r2, [r3, #0]
 8002b24:	e081      	b.n	8002c2a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002b26:	6879      	ldr	r1, [r7, #4]
 8002b28:	68fa      	ldr	r2, [r7, #12]
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	4413      	add	r3, r2
 8002b30:	00db      	lsls	r3, r3, #3
 8002b32:	440b      	add	r3, r1
 8002b34:	335d      	adds	r3, #93	; 0x5d
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	2b05      	cmp	r3, #5
 8002b3a:	d10a      	bne.n	8002b52 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002b3c:	6879      	ldr	r1, [r7, #4]
 8002b3e:	68fa      	ldr	r2, [r7, #12]
 8002b40:	4613      	mov	r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	4413      	add	r3, r2
 8002b46:	00db      	lsls	r3, r3, #3
 8002b48:	440b      	add	r3, r1
 8002b4a:	335c      	adds	r3, #92	; 0x5c
 8002b4c:	2205      	movs	r2, #5
 8002b4e:	701a      	strb	r2, [r3, #0]
 8002b50:	e06b      	b.n	8002c2a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002b52:	6879      	ldr	r1, [r7, #4]
 8002b54:	68fa      	ldr	r2, [r7, #12]
 8002b56:	4613      	mov	r3, r2
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	4413      	add	r3, r2
 8002b5c:	00db      	lsls	r3, r3, #3
 8002b5e:	440b      	add	r3, r1
 8002b60:	335d      	adds	r3, #93	; 0x5d
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	2b06      	cmp	r3, #6
 8002b66:	d00a      	beq.n	8002b7e <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002b68:	6879      	ldr	r1, [r7, #4]
 8002b6a:	68fa      	ldr	r2, [r7, #12]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	4413      	add	r3, r2
 8002b72:	00db      	lsls	r3, r3, #3
 8002b74:	440b      	add	r3, r1
 8002b76:	335d      	adds	r3, #93	; 0x5d
 8002b78:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002b7a:	2b08      	cmp	r3, #8
 8002b7c:	d155      	bne.n	8002c2a <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8002b7e:	6879      	ldr	r1, [r7, #4]
 8002b80:	68fa      	ldr	r2, [r7, #12]
 8002b82:	4613      	mov	r3, r2
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	4413      	add	r3, r2
 8002b88:	00db      	lsls	r3, r3, #3
 8002b8a:	440b      	add	r3, r1
 8002b8c:	3358      	adds	r3, #88	; 0x58
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	1c59      	adds	r1, r3, #1
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	68fa      	ldr	r2, [r7, #12]
 8002b96:	4613      	mov	r3, r2
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	4413      	add	r3, r2
 8002b9c:	00db      	lsls	r3, r3, #3
 8002b9e:	4403      	add	r3, r0
 8002ba0:	3358      	adds	r3, #88	; 0x58
 8002ba2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002ba4:	6879      	ldr	r1, [r7, #4]
 8002ba6:	68fa      	ldr	r2, [r7, #12]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	4413      	add	r3, r2
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	440b      	add	r3, r1
 8002bb2:	3358      	adds	r3, #88	; 0x58
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2b03      	cmp	r3, #3
 8002bb8:	d914      	bls.n	8002be4 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002bba:	6879      	ldr	r1, [r7, #4]
 8002bbc:	68fa      	ldr	r2, [r7, #12]
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	4413      	add	r3, r2
 8002bc4:	00db      	lsls	r3, r3, #3
 8002bc6:	440b      	add	r3, r1
 8002bc8:	3358      	adds	r3, #88	; 0x58
 8002bca:	2200      	movs	r2, #0
 8002bcc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002bce:	6879      	ldr	r1, [r7, #4]
 8002bd0:	68fa      	ldr	r2, [r7, #12]
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	4413      	add	r3, r2
 8002bd8:	00db      	lsls	r3, r3, #3
 8002bda:	440b      	add	r3, r1
 8002bdc:	335c      	adds	r3, #92	; 0x5c
 8002bde:	2204      	movs	r2, #4
 8002be0:	701a      	strb	r2, [r3, #0]
 8002be2:	e009      	b.n	8002bf8 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002be4:	6879      	ldr	r1, [r7, #4]
 8002be6:	68fa      	ldr	r2, [r7, #12]
 8002be8:	4613      	mov	r3, r2
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	4413      	add	r3, r2
 8002bee:	00db      	lsls	r3, r3, #3
 8002bf0:	440b      	add	r3, r1
 8002bf2:	335c      	adds	r3, #92	; 0x5c
 8002bf4:	2202      	movs	r2, #2
 8002bf6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	015a      	lsls	r2, r3, #5
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	4413      	add	r3, r2
 8002c00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c0e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c16:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	015a      	lsls	r2, r3, #5
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	4413      	add	r3, r2
 8002c20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c24:	461a      	mov	r2, r3
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	015a      	lsls	r2, r3, #5
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	4413      	add	r3, r2
 8002c32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c36:	461a      	mov	r2, r3
 8002c38:	2302      	movs	r3, #2
 8002c3a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	b2d8      	uxtb	r0, r3
 8002c40:	6879      	ldr	r1, [r7, #4]
 8002c42:	68fa      	ldr	r2, [r7, #12]
 8002c44:	4613      	mov	r3, r2
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	4413      	add	r3, r2
 8002c4a:	00db      	lsls	r3, r3, #3
 8002c4c:	440b      	add	r3, r1
 8002c4e:	335c      	adds	r3, #92	; 0x5c
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	461a      	mov	r2, r3
 8002c54:	4601      	mov	r1, r0
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f005 f980 	bl	8007f5c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002c5c:	bf00      	nop
 8002c5e:	3718      	adds	r7, #24
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b08a      	sub	sp, #40	; 0x28
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c74:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	6a1b      	ldr	r3, [r3, #32]
 8002c7c:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	f003 030f 	and.w	r3, r3, #15
 8002c84:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	0c5b      	lsrs	r3, r3, #17
 8002c8a:	f003 030f 	and.w	r3, r3, #15
 8002c8e:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	091b      	lsrs	r3, r3, #4
 8002c94:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c98:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d003      	beq.n	8002ca8 <HCD_RXQLVL_IRQHandler+0x44>
 8002ca0:	2b05      	cmp	r3, #5
 8002ca2:	f000 8082 	beq.w	8002daa <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002ca6:	e083      	b.n	8002db0 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d07f      	beq.n	8002dae <HCD_RXQLVL_IRQHandler+0x14a>
 8002cae:	6879      	ldr	r1, [r7, #4]
 8002cb0:	69ba      	ldr	r2, [r7, #24]
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	4413      	add	r3, r2
 8002cb8:	00db      	lsls	r3, r3, #3
 8002cba:	440b      	add	r3, r1
 8002cbc:	3344      	adds	r3, #68	; 0x44
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d074      	beq.n	8002dae <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6818      	ldr	r0, [r3, #0]
 8002cc8:	6879      	ldr	r1, [r7, #4]
 8002cca:	69ba      	ldr	r2, [r7, #24]
 8002ccc:	4613      	mov	r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	4413      	add	r3, r2
 8002cd2:	00db      	lsls	r3, r3, #3
 8002cd4:	440b      	add	r3, r1
 8002cd6:	3344      	adds	r3, #68	; 0x44
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	693a      	ldr	r2, [r7, #16]
 8002cdc:	b292      	uxth	r2, r2
 8002cde:	4619      	mov	r1, r3
 8002ce0:	f002 fb39 	bl	8005356 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002ce4:	6879      	ldr	r1, [r7, #4]
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	4613      	mov	r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	4413      	add	r3, r2
 8002cee:	00db      	lsls	r3, r3, #3
 8002cf0:	440b      	add	r3, r1
 8002cf2:	3344      	adds	r3, #68	; 0x44
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	18d1      	adds	r1, r2, r3
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	69ba      	ldr	r2, [r7, #24]
 8002cfe:	4613      	mov	r3, r2
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	4413      	add	r3, r2
 8002d04:	00db      	lsls	r3, r3, #3
 8002d06:	4403      	add	r3, r0
 8002d08:	3344      	adds	r3, #68	; 0x44
 8002d0a:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002d0c:	6879      	ldr	r1, [r7, #4]
 8002d0e:	69ba      	ldr	r2, [r7, #24]
 8002d10:	4613      	mov	r3, r2
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	4413      	add	r3, r2
 8002d16:	00db      	lsls	r3, r3, #3
 8002d18:	440b      	add	r3, r1
 8002d1a:	334c      	adds	r3, #76	; 0x4c
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	18d1      	adds	r1, r2, r3
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	69ba      	ldr	r2, [r7, #24]
 8002d26:	4613      	mov	r3, r2
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	4413      	add	r3, r2
 8002d2c:	00db      	lsls	r3, r3, #3
 8002d2e:	4403      	add	r3, r0
 8002d30:	334c      	adds	r3, #76	; 0x4c
 8002d32:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	015a      	lsls	r2, r3, #5
 8002d38:	6a3b      	ldr	r3, [r7, #32]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d40:	691a      	ldr	r2, [r3, #16]
 8002d42:	4b1d      	ldr	r3, [pc, #116]	; (8002db8 <HCD_RXQLVL_IRQHandler+0x154>)
 8002d44:	4013      	ands	r3, r2
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d031      	beq.n	8002dae <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	015a      	lsls	r2, r3, #5
 8002d4e:	6a3b      	ldr	r3, [r7, #32]
 8002d50:	4413      	add	r3, r2
 8002d52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d60:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d68:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	015a      	lsls	r2, r3, #5
 8002d6e:	6a3b      	ldr	r3, [r7, #32]
 8002d70:	4413      	add	r3, r2
 8002d72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d76:	461a      	mov	r2, r3
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002d7c:	6879      	ldr	r1, [r7, #4]
 8002d7e:	69ba      	ldr	r2, [r7, #24]
 8002d80:	4613      	mov	r3, r2
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	4413      	add	r3, r2
 8002d86:	00db      	lsls	r3, r3, #3
 8002d88:	440b      	add	r3, r1
 8002d8a:	3350      	adds	r3, #80	; 0x50
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	f083 0301 	eor.w	r3, r3, #1
 8002d92:	b2d8      	uxtb	r0, r3
 8002d94:	6879      	ldr	r1, [r7, #4]
 8002d96:	69ba      	ldr	r2, [r7, #24]
 8002d98:	4613      	mov	r3, r2
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	4413      	add	r3, r2
 8002d9e:	00db      	lsls	r3, r3, #3
 8002da0:	440b      	add	r3, r1
 8002da2:	3350      	adds	r3, #80	; 0x50
 8002da4:	4602      	mov	r2, r0
 8002da6:	701a      	strb	r2, [r3, #0]
      break;
 8002da8:	e001      	b.n	8002dae <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8002daa:	bf00      	nop
 8002dac:	e000      	b.n	8002db0 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8002dae:	bf00      	nop
  }
}
 8002db0:	bf00      	nop
 8002db2:	3728      	adds	r7, #40	; 0x28
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	1ff80000 	.word	0x1ff80000

08002dbc <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b086      	sub	sp, #24
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002de8:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	f003 0302 	and.w	r3, r3, #2
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d10b      	bne.n	8002e0c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f003 0301 	and.w	r3, r3, #1
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d102      	bne.n	8002e04 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f005 f890 	bl	8007f24 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	f043 0302 	orr.w	r3, r3, #2
 8002e0a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f003 0308 	and.w	r3, r3, #8
 8002e12:	2b08      	cmp	r3, #8
 8002e14:	d132      	bne.n	8002e7c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	f043 0308 	orr.w	r3, r3, #8
 8002e1c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	f003 0304 	and.w	r3, r3, #4
 8002e24:	2b04      	cmp	r3, #4
 8002e26:	d126      	bne.n	8002e76 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d113      	bne.n	8002e58 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002e36:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e3a:	d106      	bne.n	8002e4a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2102      	movs	r1, #2
 8002e42:	4618      	mov	r0, r3
 8002e44:	f002 fbc2 	bl	80055cc <USB_InitFSLSPClkSel>
 8002e48:	e011      	b.n	8002e6e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2101      	movs	r1, #1
 8002e50:	4618      	mov	r0, r3
 8002e52:	f002 fbbb 	bl	80055cc <USB_InitFSLSPClkSel>
 8002e56:	e00a      	b.n	8002e6e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d106      	bne.n	8002e6e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e66:	461a      	mov	r2, r3
 8002e68:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002e6c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f005 f882 	bl	8007f78 <HAL_HCD_PortEnabled_Callback>
 8002e74:	e002      	b.n	8002e7c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f005 f88c 	bl	8007f94 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f003 0320 	and.w	r3, r3, #32
 8002e82:	2b20      	cmp	r3, #32
 8002e84:	d103      	bne.n	8002e8e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	f043 0320 	orr.w	r3, r3, #32
 8002e8c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002e94:	461a      	mov	r2, r3
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	6013      	str	r3, [r2, #0]
}
 8002e9a:	bf00      	nop
 8002e9c:	3718      	adds	r7, #24
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
	...

08002ea4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d101      	bne.n	8002eb6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e11f      	b.n	80030f6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d106      	bne.n	8002ed0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f7fd fc3c 	bl	8000748 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2224      	movs	r2, #36	; 0x24
 8002ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f022 0201 	bic.w	r2, r2, #1
 8002ee6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ef6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f06:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f08:	f001 f9de 	bl	80042c8 <HAL_RCC_GetPCLK1Freq>
 8002f0c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	4a7b      	ldr	r2, [pc, #492]	; (8003100 <HAL_I2C_Init+0x25c>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d807      	bhi.n	8002f28 <HAL_I2C_Init+0x84>
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	4a7a      	ldr	r2, [pc, #488]	; (8003104 <HAL_I2C_Init+0x260>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	bf94      	ite	ls
 8002f20:	2301      	movls	r3, #1
 8002f22:	2300      	movhi	r3, #0
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	e006      	b.n	8002f36 <HAL_I2C_Init+0x92>
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	4a77      	ldr	r2, [pc, #476]	; (8003108 <HAL_I2C_Init+0x264>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	bf94      	ite	ls
 8002f30:	2301      	movls	r3, #1
 8002f32:	2300      	movhi	r3, #0
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d001      	beq.n	8002f3e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e0db      	b.n	80030f6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	4a72      	ldr	r2, [pc, #456]	; (800310c <HAL_I2C_Init+0x268>)
 8002f42:	fba2 2303 	umull	r2, r3, r2, r3
 8002f46:	0c9b      	lsrs	r3, r3, #18
 8002f48:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	68ba      	ldr	r2, [r7, #8]
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	6a1b      	ldr	r3, [r3, #32]
 8002f64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	4a64      	ldr	r2, [pc, #400]	; (8003100 <HAL_I2C_Init+0x25c>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d802      	bhi.n	8002f78 <HAL_I2C_Init+0xd4>
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	3301      	adds	r3, #1
 8002f76:	e009      	b.n	8002f8c <HAL_I2C_Init+0xe8>
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f7e:	fb02 f303 	mul.w	r3, r2, r3
 8002f82:	4a63      	ldr	r2, [pc, #396]	; (8003110 <HAL_I2C_Init+0x26c>)
 8002f84:	fba2 2303 	umull	r2, r3, r2, r3
 8002f88:	099b      	lsrs	r3, r3, #6
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	6812      	ldr	r2, [r2, #0]
 8002f90:	430b      	orrs	r3, r1
 8002f92:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	69db      	ldr	r3, [r3, #28]
 8002f9a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002f9e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	4956      	ldr	r1, [pc, #344]	; (8003100 <HAL_I2C_Init+0x25c>)
 8002fa8:	428b      	cmp	r3, r1
 8002faa:	d80d      	bhi.n	8002fc8 <HAL_I2C_Init+0x124>
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	1e59      	subs	r1, r3, #1
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	005b      	lsls	r3, r3, #1
 8002fb6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fba:	3301      	adds	r3, #1
 8002fbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fc0:	2b04      	cmp	r3, #4
 8002fc2:	bf38      	it	cc
 8002fc4:	2304      	movcc	r3, #4
 8002fc6:	e04f      	b.n	8003068 <HAL_I2C_Init+0x1c4>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d111      	bne.n	8002ff4 <HAL_I2C_Init+0x150>
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	1e58      	subs	r0, r3, #1
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6859      	ldr	r1, [r3, #4]
 8002fd8:	460b      	mov	r3, r1
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	440b      	add	r3, r1
 8002fde:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	bf0c      	ite	eq
 8002fec:	2301      	moveq	r3, #1
 8002fee:	2300      	movne	r3, #0
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	e012      	b.n	800301a <HAL_I2C_Init+0x176>
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	1e58      	subs	r0, r3, #1
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6859      	ldr	r1, [r3, #4]
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	440b      	add	r3, r1
 8003002:	0099      	lsls	r1, r3, #2
 8003004:	440b      	add	r3, r1
 8003006:	fbb0 f3f3 	udiv	r3, r0, r3
 800300a:	3301      	adds	r3, #1
 800300c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003010:	2b00      	cmp	r3, #0
 8003012:	bf0c      	ite	eq
 8003014:	2301      	moveq	r3, #1
 8003016:	2300      	movne	r3, #0
 8003018:	b2db      	uxtb	r3, r3
 800301a:	2b00      	cmp	r3, #0
 800301c:	d001      	beq.n	8003022 <HAL_I2C_Init+0x17e>
 800301e:	2301      	movs	r3, #1
 8003020:	e022      	b.n	8003068 <HAL_I2C_Init+0x1c4>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d10e      	bne.n	8003048 <HAL_I2C_Init+0x1a4>
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	1e58      	subs	r0, r3, #1
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6859      	ldr	r1, [r3, #4]
 8003032:	460b      	mov	r3, r1
 8003034:	005b      	lsls	r3, r3, #1
 8003036:	440b      	add	r3, r1
 8003038:	fbb0 f3f3 	udiv	r3, r0, r3
 800303c:	3301      	adds	r3, #1
 800303e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003042:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003046:	e00f      	b.n	8003068 <HAL_I2C_Init+0x1c4>
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	1e58      	subs	r0, r3, #1
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6859      	ldr	r1, [r3, #4]
 8003050:	460b      	mov	r3, r1
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	440b      	add	r3, r1
 8003056:	0099      	lsls	r1, r3, #2
 8003058:	440b      	add	r3, r1
 800305a:	fbb0 f3f3 	udiv	r3, r0, r3
 800305e:	3301      	adds	r3, #1
 8003060:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003064:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003068:	6879      	ldr	r1, [r7, #4]
 800306a:	6809      	ldr	r1, [r1, #0]
 800306c:	4313      	orrs	r3, r2
 800306e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	69da      	ldr	r2, [r3, #28]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a1b      	ldr	r3, [r3, #32]
 8003082:	431a      	orrs	r2, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	430a      	orrs	r2, r1
 800308a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003096:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	6911      	ldr	r1, [r2, #16]
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	68d2      	ldr	r2, [r2, #12]
 80030a2:	4311      	orrs	r1, r2
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	6812      	ldr	r2, [r2, #0]
 80030a8:	430b      	orrs	r3, r1
 80030aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	695a      	ldr	r2, [r3, #20]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	699b      	ldr	r3, [r3, #24]
 80030be:	431a      	orrs	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	430a      	orrs	r2, r1
 80030c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f042 0201 	orr.w	r2, r2, #1
 80030d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2220      	movs	r2, #32
 80030e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3710      	adds	r7, #16
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	000186a0 	.word	0x000186a0
 8003104:	001e847f 	.word	0x001e847f
 8003108:	003d08ff 	.word	0x003d08ff
 800310c:	431bde83 	.word	0x431bde83
 8003110:	10624dd3 	.word	0x10624dd3

08003114 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b088      	sub	sp, #32
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d101      	bne.n	8003126 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e128      	b.n	8003378 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800312c:	b2db      	uxtb	r3, r3
 800312e:	2b00      	cmp	r3, #0
 8003130:	d109      	bne.n	8003146 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a90      	ldr	r2, [pc, #576]	; (8003380 <HAL_I2S_Init+0x26c>)
 800313e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f7fd fb79 	bl	8000838 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2202      	movs	r2, #2
 800314a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	69db      	ldr	r3, [r3, #28]
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	6812      	ldr	r2, [r2, #0]
 8003158:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800315c:	f023 030f 	bic.w	r3, r3, #15
 8003160:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2202      	movs	r2, #2
 8003168:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	695b      	ldr	r3, [r3, #20]
 800316e:	2b02      	cmp	r3, #2
 8003170:	d060      	beq.n	8003234 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d102      	bne.n	8003180 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800317a:	2310      	movs	r3, #16
 800317c:	617b      	str	r3, [r7, #20]
 800317e:	e001      	b.n	8003184 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003180:	2320      	movs	r3, #32
 8003182:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	2b20      	cmp	r3, #32
 800318a:	d802      	bhi.n	8003192 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	005b      	lsls	r3, r3, #1
 8003190:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003192:	2001      	movs	r0, #1
 8003194:	f001 f9a2 	bl	80044dc <HAL_RCCEx_GetPeriphCLKFreq>
 8003198:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	691b      	ldr	r3, [r3, #16]
 800319e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031a2:	d125      	bne.n	80031f0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d010      	beq.n	80031ce <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	68fa      	ldr	r2, [r7, #12]
 80031b2:	fbb2 f2f3 	udiv	r2, r2, r3
 80031b6:	4613      	mov	r3, r2
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	4413      	add	r3, r2
 80031bc:	005b      	lsls	r3, r3, #1
 80031be:	461a      	mov	r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	695b      	ldr	r3, [r3, #20]
 80031c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031c8:	3305      	adds	r3, #5
 80031ca:	613b      	str	r3, [r7, #16]
 80031cc:	e01f      	b.n	800320e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	00db      	lsls	r3, r3, #3
 80031d2:	68fa      	ldr	r2, [r7, #12]
 80031d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80031d8:	4613      	mov	r3, r2
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	4413      	add	r3, r2
 80031de:	005b      	lsls	r3, r3, #1
 80031e0:	461a      	mov	r2, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ea:	3305      	adds	r3, #5
 80031ec:	613b      	str	r3, [r7, #16]
 80031ee:	e00e      	b.n	800320e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80031f0:	68fa      	ldr	r2, [r7, #12]
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80031f8:	4613      	mov	r3, r2
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	4413      	add	r3, r2
 80031fe:	005b      	lsls	r3, r3, #1
 8003200:	461a      	mov	r2, r3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	695b      	ldr	r3, [r3, #20]
 8003206:	fbb2 f3f3 	udiv	r3, r2, r3
 800320a:	3305      	adds	r3, #5
 800320c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	4a5c      	ldr	r2, [pc, #368]	; (8003384 <HAL_I2S_Init+0x270>)
 8003212:	fba2 2303 	umull	r2, r3, r2, r3
 8003216:	08db      	lsrs	r3, r3, #3
 8003218:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	f003 0301 	and.w	r3, r3, #1
 8003220:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003222:	693a      	ldr	r2, [r7, #16]
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	085b      	lsrs	r3, r3, #1
 800322a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	021b      	lsls	r3, r3, #8
 8003230:	61bb      	str	r3, [r7, #24]
 8003232:	e003      	b.n	800323c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003234:	2302      	movs	r3, #2
 8003236:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003238:	2300      	movs	r3, #0
 800323a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	2b01      	cmp	r3, #1
 8003240:	d902      	bls.n	8003248 <HAL_I2S_Init+0x134>
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	2bff      	cmp	r3, #255	; 0xff
 8003246:	d907      	bls.n	8003258 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800324c:	f043 0210 	orr.w	r2, r3, #16
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e08f      	b.n	8003378 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	691a      	ldr	r2, [r3, #16]
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	ea42 0103 	orr.w	r1, r2, r3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	69fa      	ldr	r2, [r7, #28]
 8003268:	430a      	orrs	r2, r1
 800326a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	69db      	ldr	r3, [r3, #28]
 8003272:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003276:	f023 030f 	bic.w	r3, r3, #15
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	6851      	ldr	r1, [r2, #4]
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	6892      	ldr	r2, [r2, #8]
 8003282:	4311      	orrs	r1, r2
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	68d2      	ldr	r2, [r2, #12]
 8003288:	4311      	orrs	r1, r2
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	6992      	ldr	r2, [r2, #24]
 800328e:	430a      	orrs	r2, r1
 8003290:	431a      	orrs	r2, r3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800329a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a1b      	ldr	r3, [r3, #32]
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d161      	bne.n	8003368 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a38      	ldr	r2, [pc, #224]	; (8003388 <HAL_I2S_Init+0x274>)
 80032a8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a37      	ldr	r2, [pc, #220]	; (800338c <HAL_I2S_Init+0x278>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d101      	bne.n	80032b8 <HAL_I2S_Init+0x1a4>
 80032b4:	4b36      	ldr	r3, [pc, #216]	; (8003390 <HAL_I2S_Init+0x27c>)
 80032b6:	e001      	b.n	80032bc <HAL_I2S_Init+0x1a8>
 80032b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032bc:	69db      	ldr	r3, [r3, #28]
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	6812      	ldr	r2, [r2, #0]
 80032c2:	4932      	ldr	r1, [pc, #200]	; (800338c <HAL_I2S_Init+0x278>)
 80032c4:	428a      	cmp	r2, r1
 80032c6:	d101      	bne.n	80032cc <HAL_I2S_Init+0x1b8>
 80032c8:	4a31      	ldr	r2, [pc, #196]	; (8003390 <HAL_I2S_Init+0x27c>)
 80032ca:	e001      	b.n	80032d0 <HAL_I2S_Init+0x1bc>
 80032cc:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80032d0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80032d4:	f023 030f 	bic.w	r3, r3, #15
 80032d8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a2b      	ldr	r2, [pc, #172]	; (800338c <HAL_I2S_Init+0x278>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d101      	bne.n	80032e8 <HAL_I2S_Init+0x1d4>
 80032e4:	4b2a      	ldr	r3, [pc, #168]	; (8003390 <HAL_I2S_Init+0x27c>)
 80032e6:	e001      	b.n	80032ec <HAL_I2S_Init+0x1d8>
 80032e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032ec:	2202      	movs	r2, #2
 80032ee:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a25      	ldr	r2, [pc, #148]	; (800338c <HAL_I2S_Init+0x278>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d101      	bne.n	80032fe <HAL_I2S_Init+0x1ea>
 80032fa:	4b25      	ldr	r3, [pc, #148]	; (8003390 <HAL_I2S_Init+0x27c>)
 80032fc:	e001      	b.n	8003302 <HAL_I2S_Init+0x1ee>
 80032fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003302:	69db      	ldr	r3, [r3, #28]
 8003304:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800330e:	d003      	beq.n	8003318 <HAL_I2S_Init+0x204>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d103      	bne.n	8003320 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003318:	f44f 7380 	mov.w	r3, #256	; 0x100
 800331c:	613b      	str	r3, [r7, #16]
 800331e:	e001      	b.n	8003324 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003320:	2300      	movs	r3, #0
 8003322:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	b299      	uxth	r1, r3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	699b      	ldr	r3, [r3, #24]
 8003338:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800333a:	4303      	orrs	r3, r0
 800333c:	b29b      	uxth	r3, r3
 800333e:	430b      	orrs	r3, r1
 8003340:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003342:	4313      	orrs	r3, r2
 8003344:	b29a      	uxth	r2, r3
 8003346:	897b      	ldrh	r3, [r7, #10]
 8003348:	4313      	orrs	r3, r2
 800334a:	b29b      	uxth	r3, r3
 800334c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003350:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a0d      	ldr	r2, [pc, #52]	; (800338c <HAL_I2S_Init+0x278>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d101      	bne.n	8003360 <HAL_I2S_Init+0x24c>
 800335c:	4b0c      	ldr	r3, [pc, #48]	; (8003390 <HAL_I2S_Init+0x27c>)
 800335e:	e001      	b.n	8003364 <HAL_I2S_Init+0x250>
 8003360:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003364:	897a      	ldrh	r2, [r7, #10]
 8003366:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2201      	movs	r2, #1
 8003372:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003376:	2300      	movs	r3, #0
}
 8003378:	4618      	mov	r0, r3
 800337a:	3720      	adds	r7, #32
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	0800348b 	.word	0x0800348b
 8003384:	cccccccd 	.word	0xcccccccd
 8003388:	080035a1 	.word	0x080035a1
 800338c:	40003800 	.word	0x40003800
 8003390:	40003400 	.word	0x40003400

08003394 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800339c:	bf00      	nop
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80033b0:	bf00      	nop
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr

080033bc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80033c4:	bf00      	nop
 80033c6:	370c      	adds	r7, #12
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr

080033d0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033dc:	881a      	ldrh	r2, [r3, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e8:	1c9a      	adds	r2, r3, #2
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	3b01      	subs	r3, #1
 80033f6:	b29a      	uxth	r2, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003400:	b29b      	uxth	r3, r3
 8003402:	2b00      	cmp	r3, #0
 8003404:	d10e      	bne.n	8003424 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	685a      	ldr	r2, [r3, #4]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003414:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2201      	movs	r2, #1
 800341a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f7ff ffb8 	bl	8003394 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003424:	bf00      	nop
 8003426:	3708      	adds	r7, #8
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	68da      	ldr	r2, [r3, #12]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800343e:	b292      	uxth	r2, r2
 8003440:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003446:	1c9a      	adds	r2, r3, #2
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003450:	b29b      	uxth	r3, r3
 8003452:	3b01      	subs	r3, #1
 8003454:	b29a      	uxth	r2, r3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800345e:	b29b      	uxth	r3, r3
 8003460:	2b00      	cmp	r3, #0
 8003462:	d10e      	bne.n	8003482 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	685a      	ldr	r2, [r3, #4]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003472:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f7ff ff93 	bl	80033a8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003482:	bf00      	nop
 8003484:	3708      	adds	r7, #8
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}

0800348a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800348a:	b580      	push	{r7, lr}
 800348c:	b086      	sub	sp, #24
 800348e:	af00      	add	r7, sp, #0
 8003490:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	2b04      	cmp	r3, #4
 80034a4:	d13a      	bne.n	800351c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	f003 0301 	and.w	r3, r3, #1
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d109      	bne.n	80034c4 <I2S_IRQHandler+0x3a>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ba:	2b40      	cmp	r3, #64	; 0x40
 80034bc:	d102      	bne.n	80034c4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f7ff ffb4 	bl	800342c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ca:	2b40      	cmp	r3, #64	; 0x40
 80034cc:	d126      	bne.n	800351c <I2S_IRQHandler+0x92>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f003 0320 	and.w	r3, r3, #32
 80034d8:	2b20      	cmp	r3, #32
 80034da:	d11f      	bne.n	800351c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	685a      	ldr	r2, [r3, #4]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80034ea:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80034ec:	2300      	movs	r3, #0
 80034ee:	613b      	str	r3, [r7, #16]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	613b      	str	r3, [r7, #16]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	613b      	str	r3, [r7, #16]
 8003500:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2201      	movs	r2, #1
 8003506:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800350e:	f043 0202 	orr.w	r2, r3, #2
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f7ff ff50 	bl	80033bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003522:	b2db      	uxtb	r3, r3
 8003524:	2b03      	cmp	r3, #3
 8003526:	d136      	bne.n	8003596 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	f003 0302 	and.w	r3, r3, #2
 800352e:	2b02      	cmp	r3, #2
 8003530:	d109      	bne.n	8003546 <I2S_IRQHandler+0xbc>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800353c:	2b80      	cmp	r3, #128	; 0x80
 800353e:	d102      	bne.n	8003546 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f7ff ff45 	bl	80033d0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	f003 0308 	and.w	r3, r3, #8
 800354c:	2b08      	cmp	r3, #8
 800354e:	d122      	bne.n	8003596 <I2S_IRQHandler+0x10c>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f003 0320 	and.w	r3, r3, #32
 800355a:	2b20      	cmp	r3, #32
 800355c:	d11b      	bne.n	8003596 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	685a      	ldr	r2, [r3, #4]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800356c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800356e:	2300      	movs	r3, #0
 8003570:	60fb      	str	r3, [r7, #12]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	60fb      	str	r3, [r7, #12]
 800357a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003588:	f043 0204 	orr.w	r2, r3, #4
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f7ff ff13 	bl	80033bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003596:	bf00      	nop
 8003598:	3718      	adds	r7, #24
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
	...

080035a0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b088      	sub	sp, #32
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4aa2      	ldr	r2, [pc, #648]	; (8003840 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d101      	bne.n	80035be <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80035ba:	4ba2      	ldr	r3, [pc, #648]	; (8003844 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80035bc:	e001      	b.n	80035c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80035be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a9b      	ldr	r2, [pc, #620]	; (8003840 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d101      	bne.n	80035dc <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80035d8:	4b9a      	ldr	r3, [pc, #616]	; (8003844 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80035da:	e001      	b.n	80035e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80035dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035ec:	d004      	beq.n	80035f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	f040 8099 	bne.w	800372a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	f003 0302 	and.w	r3, r3, #2
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d107      	bne.n	8003612 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003608:	2b00      	cmp	r3, #0
 800360a:	d002      	beq.n	8003612 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f000 f925 	bl	800385c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003612:	69bb      	ldr	r3, [r7, #24]
 8003614:	f003 0301 	and.w	r3, r3, #1
 8003618:	2b01      	cmp	r3, #1
 800361a:	d107      	bne.n	800362c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003622:	2b00      	cmp	r3, #0
 8003624:	d002      	beq.n	800362c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 f9c8 	bl	80039bc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003632:	2b40      	cmp	r3, #64	; 0x40
 8003634:	d13a      	bne.n	80036ac <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	f003 0320 	and.w	r3, r3, #32
 800363c:	2b00      	cmp	r3, #0
 800363e:	d035      	beq.n	80036ac <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a7e      	ldr	r2, [pc, #504]	; (8003840 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d101      	bne.n	800364e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800364a:	4b7e      	ldr	r3, [pc, #504]	; (8003844 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800364c:	e001      	b.n	8003652 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800364e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003652:	685a      	ldr	r2, [r3, #4]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4979      	ldr	r1, [pc, #484]	; (8003840 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800365a:	428b      	cmp	r3, r1
 800365c:	d101      	bne.n	8003662 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800365e:	4b79      	ldr	r3, [pc, #484]	; (8003844 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003660:	e001      	b.n	8003666 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003662:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003666:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800366a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	685a      	ldr	r2, [r3, #4]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800367a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800367c:	2300      	movs	r3, #0
 800367e:	60fb      	str	r3, [r7, #12]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	60fb      	str	r3, [r7, #12]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	60fb      	str	r3, [r7, #12]
 8003690:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2201      	movs	r2, #1
 8003696:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800369e:	f043 0202 	orr.w	r2, r3, #2
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f7ff fe88 	bl	80033bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	f003 0308 	and.w	r3, r3, #8
 80036b2:	2b08      	cmp	r3, #8
 80036b4:	f040 80be 	bne.w	8003834 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	f003 0320 	and.w	r3, r3, #32
 80036be:	2b00      	cmp	r3, #0
 80036c0:	f000 80b8 	beq.w	8003834 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	685a      	ldr	r2, [r3, #4]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036d2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a59      	ldr	r2, [pc, #356]	; (8003840 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d101      	bne.n	80036e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80036de:	4b59      	ldr	r3, [pc, #356]	; (8003844 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80036e0:	e001      	b.n	80036e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80036e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036e6:	685a      	ldr	r2, [r3, #4]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4954      	ldr	r1, [pc, #336]	; (8003840 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80036ee:	428b      	cmp	r3, r1
 80036f0:	d101      	bne.n	80036f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80036f2:	4b54      	ldr	r3, [pc, #336]	; (8003844 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80036f4:	e001      	b.n	80036fa <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80036f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036fa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80036fe:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003700:	2300      	movs	r3, #0
 8003702:	60bb      	str	r3, [r7, #8]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	60bb      	str	r3, [r7, #8]
 800370c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2201      	movs	r2, #1
 8003712:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800371a:	f043 0204 	orr.w	r2, r3, #4
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f7ff fe4a 	bl	80033bc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003728:	e084      	b.n	8003834 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	f003 0302 	and.w	r3, r3, #2
 8003730:	2b02      	cmp	r3, #2
 8003732:	d107      	bne.n	8003744 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800373a:	2b00      	cmp	r3, #0
 800373c:	d002      	beq.n	8003744 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 f8be 	bl	80038c0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	f003 0301 	and.w	r3, r3, #1
 800374a:	2b01      	cmp	r3, #1
 800374c:	d107      	bne.n	800375e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003754:	2b00      	cmp	r3, #0
 8003756:	d002      	beq.n	800375e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f000 f8fd 	bl	8003958 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003764:	2b40      	cmp	r3, #64	; 0x40
 8003766:	d12f      	bne.n	80037c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	f003 0320 	and.w	r3, r3, #32
 800376e:	2b00      	cmp	r3, #0
 8003770:	d02a      	beq.n	80037c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	685a      	ldr	r2, [r3, #4]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003780:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a2e      	ldr	r2, [pc, #184]	; (8003840 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d101      	bne.n	8003790 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800378c:	4b2d      	ldr	r3, [pc, #180]	; (8003844 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800378e:	e001      	b.n	8003794 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003790:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003794:	685a      	ldr	r2, [r3, #4]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4929      	ldr	r1, [pc, #164]	; (8003840 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800379c:	428b      	cmp	r3, r1
 800379e:	d101      	bne.n	80037a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80037a0:	4b28      	ldr	r3, [pc, #160]	; (8003844 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80037a2:	e001      	b.n	80037a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80037a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037a8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037ac:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2201      	movs	r2, #1
 80037b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ba:	f043 0202 	orr.w	r2, r3, #2
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f7ff fdfa 	bl	80033bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80037c8:	69bb      	ldr	r3, [r7, #24]
 80037ca:	f003 0308 	and.w	r3, r3, #8
 80037ce:	2b08      	cmp	r3, #8
 80037d0:	d131      	bne.n	8003836 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	f003 0320 	and.w	r3, r3, #32
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d02c      	beq.n	8003836 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a17      	ldr	r2, [pc, #92]	; (8003840 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d101      	bne.n	80037ea <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80037e6:	4b17      	ldr	r3, [pc, #92]	; (8003844 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80037e8:	e001      	b.n	80037ee <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80037ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037ee:	685a      	ldr	r2, [r3, #4]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4912      	ldr	r1, [pc, #72]	; (8003840 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80037f6:	428b      	cmp	r3, r1
 80037f8:	d101      	bne.n	80037fe <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80037fa:	4b12      	ldr	r3, [pc, #72]	; (8003844 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80037fc:	e001      	b.n	8003802 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80037fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003802:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003806:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	685a      	ldr	r2, [r3, #4]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003816:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003824:	f043 0204 	orr.w	r2, r3, #4
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f7ff fdc5 	bl	80033bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003832:	e000      	b.n	8003836 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003834:	bf00      	nop
}
 8003836:	bf00      	nop
 8003838:	3720      	adds	r7, #32
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	40003800 	.word	0x40003800
 8003844:	40003400 	.word	0x40003400

08003848 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003850:	bf00      	nop
 8003852:	370c      	adds	r7, #12
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003868:	1c99      	adds	r1, r3, #2
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	6251      	str	r1, [r2, #36]	; 0x24
 800386e:	881a      	ldrh	r2, [r3, #0]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800387a:	b29b      	uxth	r3, r3
 800387c:	3b01      	subs	r3, #1
 800387e:	b29a      	uxth	r2, r3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003888:	b29b      	uxth	r3, r3
 800388a:	2b00      	cmp	r3, #0
 800388c:	d113      	bne.n	80038b6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	685a      	ldr	r2, [r3, #4]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800389c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d106      	bne.n	80038b6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f7ff ffc9 	bl	8003848 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80038b6:	bf00      	nop
 80038b8:	3708      	adds	r7, #8
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
	...

080038c0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b082      	sub	sp, #8
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038cc:	1c99      	adds	r1, r3, #2
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	6251      	str	r1, [r2, #36]	; 0x24
 80038d2:	8819      	ldrh	r1, [r3, #0]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a1d      	ldr	r2, [pc, #116]	; (8003950 <I2SEx_TxISR_I2SExt+0x90>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d101      	bne.n	80038e2 <I2SEx_TxISR_I2SExt+0x22>
 80038de:	4b1d      	ldr	r3, [pc, #116]	; (8003954 <I2SEx_TxISR_I2SExt+0x94>)
 80038e0:	e001      	b.n	80038e6 <I2SEx_TxISR_I2SExt+0x26>
 80038e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038e6:	460a      	mov	r2, r1
 80038e8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	3b01      	subs	r3, #1
 80038f2:	b29a      	uxth	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d121      	bne.n	8003946 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a12      	ldr	r2, [pc, #72]	; (8003950 <I2SEx_TxISR_I2SExt+0x90>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d101      	bne.n	8003910 <I2SEx_TxISR_I2SExt+0x50>
 800390c:	4b11      	ldr	r3, [pc, #68]	; (8003954 <I2SEx_TxISR_I2SExt+0x94>)
 800390e:	e001      	b.n	8003914 <I2SEx_TxISR_I2SExt+0x54>
 8003910:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003914:	685a      	ldr	r2, [r3, #4]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	490d      	ldr	r1, [pc, #52]	; (8003950 <I2SEx_TxISR_I2SExt+0x90>)
 800391c:	428b      	cmp	r3, r1
 800391e:	d101      	bne.n	8003924 <I2SEx_TxISR_I2SExt+0x64>
 8003920:	4b0c      	ldr	r3, [pc, #48]	; (8003954 <I2SEx_TxISR_I2SExt+0x94>)
 8003922:	e001      	b.n	8003928 <I2SEx_TxISR_I2SExt+0x68>
 8003924:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003928:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800392c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003932:	b29b      	uxth	r3, r3
 8003934:	2b00      	cmp	r3, #0
 8003936:	d106      	bne.n	8003946 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f7ff ff81 	bl	8003848 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003946:	bf00      	nop
 8003948:	3708      	adds	r7, #8
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	40003800 	.word	0x40003800
 8003954:	40003400 	.word	0x40003400

08003958 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	68d8      	ldr	r0, [r3, #12]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396a:	1c99      	adds	r1, r3, #2
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003970:	b282      	uxth	r2, r0
 8003972:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003978:	b29b      	uxth	r3, r3
 800397a:	3b01      	subs	r3, #1
 800397c:	b29a      	uxth	r2, r3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003986:	b29b      	uxth	r3, r3
 8003988:	2b00      	cmp	r3, #0
 800398a:	d113      	bne.n	80039b4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	685a      	ldr	r2, [r3, #4]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800399a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d106      	bne.n	80039b4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2201      	movs	r2, #1
 80039aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f7ff ff4a 	bl	8003848 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80039b4:	bf00      	nop
 80039b6:	3708      	adds	r7, #8
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a20      	ldr	r2, [pc, #128]	; (8003a4c <I2SEx_RxISR_I2SExt+0x90>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d101      	bne.n	80039d2 <I2SEx_RxISR_I2SExt+0x16>
 80039ce:	4b20      	ldr	r3, [pc, #128]	; (8003a50 <I2SEx_RxISR_I2SExt+0x94>)
 80039d0:	e001      	b.n	80039d6 <I2SEx_RxISR_I2SExt+0x1a>
 80039d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039d6:	68d8      	ldr	r0, [r3, #12]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039dc:	1c99      	adds	r1, r3, #2
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	62d1      	str	r1, [r2, #44]	; 0x2c
 80039e2:	b282      	uxth	r2, r0
 80039e4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	3b01      	subs	r3, #1
 80039ee:	b29a      	uxth	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d121      	bne.n	8003a42 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a12      	ldr	r2, [pc, #72]	; (8003a4c <I2SEx_RxISR_I2SExt+0x90>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d101      	bne.n	8003a0c <I2SEx_RxISR_I2SExt+0x50>
 8003a08:	4b11      	ldr	r3, [pc, #68]	; (8003a50 <I2SEx_RxISR_I2SExt+0x94>)
 8003a0a:	e001      	b.n	8003a10 <I2SEx_RxISR_I2SExt+0x54>
 8003a0c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a10:	685a      	ldr	r2, [r3, #4]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	490d      	ldr	r1, [pc, #52]	; (8003a4c <I2SEx_RxISR_I2SExt+0x90>)
 8003a18:	428b      	cmp	r3, r1
 8003a1a:	d101      	bne.n	8003a20 <I2SEx_RxISR_I2SExt+0x64>
 8003a1c:	4b0c      	ldr	r3, [pc, #48]	; (8003a50 <I2SEx_RxISR_I2SExt+0x94>)
 8003a1e:	e001      	b.n	8003a24 <I2SEx_RxISR_I2SExt+0x68>
 8003a20:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a24:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a28:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d106      	bne.n	8003a42 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f7ff ff03 	bl	8003848 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a42:	bf00      	nop
 8003a44:	3708      	adds	r7, #8
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	40003800 	.word	0x40003800
 8003a50:	40003400 	.word	0x40003400

08003a54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b086      	sub	sp, #24
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d101      	bne.n	8003a66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e25b      	b.n	8003f1e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0301 	and.w	r3, r3, #1
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d075      	beq.n	8003b5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a72:	4ba3      	ldr	r3, [pc, #652]	; (8003d00 <HAL_RCC_OscConfig+0x2ac>)
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	f003 030c 	and.w	r3, r3, #12
 8003a7a:	2b04      	cmp	r3, #4
 8003a7c:	d00c      	beq.n	8003a98 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a7e:	4ba0      	ldr	r3, [pc, #640]	; (8003d00 <HAL_RCC_OscConfig+0x2ac>)
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a86:	2b08      	cmp	r3, #8
 8003a88:	d112      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a8a:	4b9d      	ldr	r3, [pc, #628]	; (8003d00 <HAL_RCC_OscConfig+0x2ac>)
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a96:	d10b      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a98:	4b99      	ldr	r3, [pc, #612]	; (8003d00 <HAL_RCC_OscConfig+0x2ac>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d05b      	beq.n	8003b5c <HAL_RCC_OscConfig+0x108>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d157      	bne.n	8003b5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e236      	b.n	8003f1e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ab8:	d106      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x74>
 8003aba:	4b91      	ldr	r3, [pc, #580]	; (8003d00 <HAL_RCC_OscConfig+0x2ac>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a90      	ldr	r2, [pc, #576]	; (8003d00 <HAL_RCC_OscConfig+0x2ac>)
 8003ac0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ac4:	6013      	str	r3, [r2, #0]
 8003ac6:	e01d      	b.n	8003b04 <HAL_RCC_OscConfig+0xb0>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ad0:	d10c      	bne.n	8003aec <HAL_RCC_OscConfig+0x98>
 8003ad2:	4b8b      	ldr	r3, [pc, #556]	; (8003d00 <HAL_RCC_OscConfig+0x2ac>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a8a      	ldr	r2, [pc, #552]	; (8003d00 <HAL_RCC_OscConfig+0x2ac>)
 8003ad8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003adc:	6013      	str	r3, [r2, #0]
 8003ade:	4b88      	ldr	r3, [pc, #544]	; (8003d00 <HAL_RCC_OscConfig+0x2ac>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a87      	ldr	r2, [pc, #540]	; (8003d00 <HAL_RCC_OscConfig+0x2ac>)
 8003ae4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ae8:	6013      	str	r3, [r2, #0]
 8003aea:	e00b      	b.n	8003b04 <HAL_RCC_OscConfig+0xb0>
 8003aec:	4b84      	ldr	r3, [pc, #528]	; (8003d00 <HAL_RCC_OscConfig+0x2ac>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a83      	ldr	r2, [pc, #524]	; (8003d00 <HAL_RCC_OscConfig+0x2ac>)
 8003af2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003af6:	6013      	str	r3, [r2, #0]
 8003af8:	4b81      	ldr	r3, [pc, #516]	; (8003d00 <HAL_RCC_OscConfig+0x2ac>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a80      	ldr	r2, [pc, #512]	; (8003d00 <HAL_RCC_OscConfig+0x2ac>)
 8003afe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d013      	beq.n	8003b34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b0c:	f7fd f9e6 	bl	8000edc <HAL_GetTick>
 8003b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b12:	e008      	b.n	8003b26 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b14:	f7fd f9e2 	bl	8000edc <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	2b64      	cmp	r3, #100	; 0x64
 8003b20:	d901      	bls.n	8003b26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e1fb      	b.n	8003f1e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b26:	4b76      	ldr	r3, [pc, #472]	; (8003d00 <HAL_RCC_OscConfig+0x2ac>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d0f0      	beq.n	8003b14 <HAL_RCC_OscConfig+0xc0>
 8003b32:	e014      	b.n	8003b5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b34:	f7fd f9d2 	bl	8000edc <HAL_GetTick>
 8003b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b3a:	e008      	b.n	8003b4e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b3c:	f7fd f9ce 	bl	8000edc <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	2b64      	cmp	r3, #100	; 0x64
 8003b48:	d901      	bls.n	8003b4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e1e7      	b.n	8003f1e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b4e:	4b6c      	ldr	r3, [pc, #432]	; (8003d00 <HAL_RCC_OscConfig+0x2ac>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d1f0      	bne.n	8003b3c <HAL_RCC_OscConfig+0xe8>
 8003b5a:	e000      	b.n	8003b5e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0302 	and.w	r3, r3, #2
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d063      	beq.n	8003c32 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b6a:	4b65      	ldr	r3, [pc, #404]	; (8003d00 <HAL_RCC_OscConfig+0x2ac>)
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	f003 030c 	and.w	r3, r3, #12
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d00b      	beq.n	8003b8e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b76:	4b62      	ldr	r3, [pc, #392]	; (8003d00 <HAL_RCC_OscConfig+0x2ac>)
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b7e:	2b08      	cmp	r3, #8
 8003b80:	d11c      	bne.n	8003bbc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b82:	4b5f      	ldr	r3, [pc, #380]	; (8003d00 <HAL_RCC_OscConfig+0x2ac>)
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d116      	bne.n	8003bbc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b8e:	4b5c      	ldr	r3, [pc, #368]	; (8003d00 <HAL_RCC_OscConfig+0x2ac>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0302 	and.w	r3, r3, #2
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d005      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x152>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d001      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e1bb      	b.n	8003f1e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ba6:	4b56      	ldr	r3, [pc, #344]	; (8003d00 <HAL_RCC_OscConfig+0x2ac>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	00db      	lsls	r3, r3, #3
 8003bb4:	4952      	ldr	r1, [pc, #328]	; (8003d00 <HAL_RCC_OscConfig+0x2ac>)
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bba:	e03a      	b.n	8003c32 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d020      	beq.n	8003c06 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bc4:	4b4f      	ldr	r3, [pc, #316]	; (8003d04 <HAL_RCC_OscConfig+0x2b0>)
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bca:	f7fd f987 	bl	8000edc <HAL_GetTick>
 8003bce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bd0:	e008      	b.n	8003be4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bd2:	f7fd f983 	bl	8000edc <HAL_GetTick>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	2b02      	cmp	r3, #2
 8003bde:	d901      	bls.n	8003be4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003be0:	2303      	movs	r3, #3
 8003be2:	e19c      	b.n	8003f1e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003be4:	4b46      	ldr	r3, [pc, #280]	; (8003d00 <HAL_RCC_OscConfig+0x2ac>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0302 	and.w	r3, r3, #2
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d0f0      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bf0:	4b43      	ldr	r3, [pc, #268]	; (8003d00 <HAL_RCC_OscConfig+0x2ac>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	691b      	ldr	r3, [r3, #16]
 8003bfc:	00db      	lsls	r3, r3, #3
 8003bfe:	4940      	ldr	r1, [pc, #256]	; (8003d00 <HAL_RCC_OscConfig+0x2ac>)
 8003c00:	4313      	orrs	r3, r2
 8003c02:	600b      	str	r3, [r1, #0]
 8003c04:	e015      	b.n	8003c32 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c06:	4b3f      	ldr	r3, [pc, #252]	; (8003d04 <HAL_RCC_OscConfig+0x2b0>)
 8003c08:	2200      	movs	r2, #0
 8003c0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c0c:	f7fd f966 	bl	8000edc <HAL_GetTick>
 8003c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c12:	e008      	b.n	8003c26 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c14:	f7fd f962 	bl	8000edc <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	d901      	bls.n	8003c26 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e17b      	b.n	8003f1e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c26:	4b36      	ldr	r3, [pc, #216]	; (8003d00 <HAL_RCC_OscConfig+0x2ac>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0302 	and.w	r3, r3, #2
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d1f0      	bne.n	8003c14 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0308 	and.w	r3, r3, #8
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d030      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	695b      	ldr	r3, [r3, #20]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d016      	beq.n	8003c74 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c46:	4b30      	ldr	r3, [pc, #192]	; (8003d08 <HAL_RCC_OscConfig+0x2b4>)
 8003c48:	2201      	movs	r2, #1
 8003c4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c4c:	f7fd f946 	bl	8000edc <HAL_GetTick>
 8003c50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c52:	e008      	b.n	8003c66 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c54:	f7fd f942 	bl	8000edc <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	2b02      	cmp	r3, #2
 8003c60:	d901      	bls.n	8003c66 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e15b      	b.n	8003f1e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c66:	4b26      	ldr	r3, [pc, #152]	; (8003d00 <HAL_RCC_OscConfig+0x2ac>)
 8003c68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c6a:	f003 0302 	and.w	r3, r3, #2
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d0f0      	beq.n	8003c54 <HAL_RCC_OscConfig+0x200>
 8003c72:	e015      	b.n	8003ca0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c74:	4b24      	ldr	r3, [pc, #144]	; (8003d08 <HAL_RCC_OscConfig+0x2b4>)
 8003c76:	2200      	movs	r2, #0
 8003c78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c7a:	f7fd f92f 	bl	8000edc <HAL_GetTick>
 8003c7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c80:	e008      	b.n	8003c94 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c82:	f7fd f92b 	bl	8000edc <HAL_GetTick>
 8003c86:	4602      	mov	r2, r0
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	d901      	bls.n	8003c94 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003c90:	2303      	movs	r3, #3
 8003c92:	e144      	b.n	8003f1e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c94:	4b1a      	ldr	r3, [pc, #104]	; (8003d00 <HAL_RCC_OscConfig+0x2ac>)
 8003c96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c98:	f003 0302 	and.w	r3, r3, #2
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d1f0      	bne.n	8003c82 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0304 	and.w	r3, r3, #4
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	f000 80a0 	beq.w	8003dee <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cb2:	4b13      	ldr	r3, [pc, #76]	; (8003d00 <HAL_RCC_OscConfig+0x2ac>)
 8003cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d10f      	bne.n	8003cde <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	60bb      	str	r3, [r7, #8]
 8003cc2:	4b0f      	ldr	r3, [pc, #60]	; (8003d00 <HAL_RCC_OscConfig+0x2ac>)
 8003cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc6:	4a0e      	ldr	r2, [pc, #56]	; (8003d00 <HAL_RCC_OscConfig+0x2ac>)
 8003cc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ccc:	6413      	str	r3, [r2, #64]	; 0x40
 8003cce:	4b0c      	ldr	r3, [pc, #48]	; (8003d00 <HAL_RCC_OscConfig+0x2ac>)
 8003cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cd6:	60bb      	str	r3, [r7, #8]
 8003cd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cde:	4b0b      	ldr	r3, [pc, #44]	; (8003d0c <HAL_RCC_OscConfig+0x2b8>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d121      	bne.n	8003d2e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cea:	4b08      	ldr	r3, [pc, #32]	; (8003d0c <HAL_RCC_OscConfig+0x2b8>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a07      	ldr	r2, [pc, #28]	; (8003d0c <HAL_RCC_OscConfig+0x2b8>)
 8003cf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cf4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cf6:	f7fd f8f1 	bl	8000edc <HAL_GetTick>
 8003cfa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cfc:	e011      	b.n	8003d22 <HAL_RCC_OscConfig+0x2ce>
 8003cfe:	bf00      	nop
 8003d00:	40023800 	.word	0x40023800
 8003d04:	42470000 	.word	0x42470000
 8003d08:	42470e80 	.word	0x42470e80
 8003d0c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d10:	f7fd f8e4 	bl	8000edc <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d901      	bls.n	8003d22 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e0fd      	b.n	8003f1e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d22:	4b81      	ldr	r3, [pc, #516]	; (8003f28 <HAL_RCC_OscConfig+0x4d4>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d0f0      	beq.n	8003d10 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d106      	bne.n	8003d44 <HAL_RCC_OscConfig+0x2f0>
 8003d36:	4b7d      	ldr	r3, [pc, #500]	; (8003f2c <HAL_RCC_OscConfig+0x4d8>)
 8003d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d3a:	4a7c      	ldr	r2, [pc, #496]	; (8003f2c <HAL_RCC_OscConfig+0x4d8>)
 8003d3c:	f043 0301 	orr.w	r3, r3, #1
 8003d40:	6713      	str	r3, [r2, #112]	; 0x70
 8003d42:	e01c      	b.n	8003d7e <HAL_RCC_OscConfig+0x32a>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	2b05      	cmp	r3, #5
 8003d4a:	d10c      	bne.n	8003d66 <HAL_RCC_OscConfig+0x312>
 8003d4c:	4b77      	ldr	r3, [pc, #476]	; (8003f2c <HAL_RCC_OscConfig+0x4d8>)
 8003d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d50:	4a76      	ldr	r2, [pc, #472]	; (8003f2c <HAL_RCC_OscConfig+0x4d8>)
 8003d52:	f043 0304 	orr.w	r3, r3, #4
 8003d56:	6713      	str	r3, [r2, #112]	; 0x70
 8003d58:	4b74      	ldr	r3, [pc, #464]	; (8003f2c <HAL_RCC_OscConfig+0x4d8>)
 8003d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d5c:	4a73      	ldr	r2, [pc, #460]	; (8003f2c <HAL_RCC_OscConfig+0x4d8>)
 8003d5e:	f043 0301 	orr.w	r3, r3, #1
 8003d62:	6713      	str	r3, [r2, #112]	; 0x70
 8003d64:	e00b      	b.n	8003d7e <HAL_RCC_OscConfig+0x32a>
 8003d66:	4b71      	ldr	r3, [pc, #452]	; (8003f2c <HAL_RCC_OscConfig+0x4d8>)
 8003d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d6a:	4a70      	ldr	r2, [pc, #448]	; (8003f2c <HAL_RCC_OscConfig+0x4d8>)
 8003d6c:	f023 0301 	bic.w	r3, r3, #1
 8003d70:	6713      	str	r3, [r2, #112]	; 0x70
 8003d72:	4b6e      	ldr	r3, [pc, #440]	; (8003f2c <HAL_RCC_OscConfig+0x4d8>)
 8003d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d76:	4a6d      	ldr	r2, [pc, #436]	; (8003f2c <HAL_RCC_OscConfig+0x4d8>)
 8003d78:	f023 0304 	bic.w	r3, r3, #4
 8003d7c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d015      	beq.n	8003db2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d86:	f7fd f8a9 	bl	8000edc <HAL_GetTick>
 8003d8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d8c:	e00a      	b.n	8003da4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d8e:	f7fd f8a5 	bl	8000edc <HAL_GetTick>
 8003d92:	4602      	mov	r2, r0
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d901      	bls.n	8003da4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003da0:	2303      	movs	r3, #3
 8003da2:	e0bc      	b.n	8003f1e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003da4:	4b61      	ldr	r3, [pc, #388]	; (8003f2c <HAL_RCC_OscConfig+0x4d8>)
 8003da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003da8:	f003 0302 	and.w	r3, r3, #2
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d0ee      	beq.n	8003d8e <HAL_RCC_OscConfig+0x33a>
 8003db0:	e014      	b.n	8003ddc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003db2:	f7fd f893 	bl	8000edc <HAL_GetTick>
 8003db6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003db8:	e00a      	b.n	8003dd0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dba:	f7fd f88f 	bl	8000edc <HAL_GetTick>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d901      	bls.n	8003dd0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003dcc:	2303      	movs	r3, #3
 8003dce:	e0a6      	b.n	8003f1e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dd0:	4b56      	ldr	r3, [pc, #344]	; (8003f2c <HAL_RCC_OscConfig+0x4d8>)
 8003dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd4:	f003 0302 	and.w	r3, r3, #2
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d1ee      	bne.n	8003dba <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ddc:	7dfb      	ldrb	r3, [r7, #23]
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d105      	bne.n	8003dee <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003de2:	4b52      	ldr	r3, [pc, #328]	; (8003f2c <HAL_RCC_OscConfig+0x4d8>)
 8003de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de6:	4a51      	ldr	r2, [pc, #324]	; (8003f2c <HAL_RCC_OscConfig+0x4d8>)
 8003de8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	699b      	ldr	r3, [r3, #24]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	f000 8092 	beq.w	8003f1c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003df8:	4b4c      	ldr	r3, [pc, #304]	; (8003f2c <HAL_RCC_OscConfig+0x4d8>)
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	f003 030c 	and.w	r3, r3, #12
 8003e00:	2b08      	cmp	r3, #8
 8003e02:	d05c      	beq.n	8003ebe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	699b      	ldr	r3, [r3, #24]
 8003e08:	2b02      	cmp	r3, #2
 8003e0a:	d141      	bne.n	8003e90 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e0c:	4b48      	ldr	r3, [pc, #288]	; (8003f30 <HAL_RCC_OscConfig+0x4dc>)
 8003e0e:	2200      	movs	r2, #0
 8003e10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e12:	f7fd f863 	bl	8000edc <HAL_GetTick>
 8003e16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e18:	e008      	b.n	8003e2c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e1a:	f7fd f85f 	bl	8000edc <HAL_GetTick>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d901      	bls.n	8003e2c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003e28:	2303      	movs	r3, #3
 8003e2a:	e078      	b.n	8003f1e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e2c:	4b3f      	ldr	r3, [pc, #252]	; (8003f2c <HAL_RCC_OscConfig+0x4d8>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d1f0      	bne.n	8003e1a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	69da      	ldr	r2, [r3, #28]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a1b      	ldr	r3, [r3, #32]
 8003e40:	431a      	orrs	r2, r3
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e46:	019b      	lsls	r3, r3, #6
 8003e48:	431a      	orrs	r2, r3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e4e:	085b      	lsrs	r3, r3, #1
 8003e50:	3b01      	subs	r3, #1
 8003e52:	041b      	lsls	r3, r3, #16
 8003e54:	431a      	orrs	r2, r3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e5a:	061b      	lsls	r3, r3, #24
 8003e5c:	4933      	ldr	r1, [pc, #204]	; (8003f2c <HAL_RCC_OscConfig+0x4d8>)
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e62:	4b33      	ldr	r3, [pc, #204]	; (8003f30 <HAL_RCC_OscConfig+0x4dc>)
 8003e64:	2201      	movs	r2, #1
 8003e66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e68:	f7fd f838 	bl	8000edc <HAL_GetTick>
 8003e6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e6e:	e008      	b.n	8003e82 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e70:	f7fd f834 	bl	8000edc <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	d901      	bls.n	8003e82 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e04d      	b.n	8003f1e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e82:	4b2a      	ldr	r3, [pc, #168]	; (8003f2c <HAL_RCC_OscConfig+0x4d8>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d0f0      	beq.n	8003e70 <HAL_RCC_OscConfig+0x41c>
 8003e8e:	e045      	b.n	8003f1c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e90:	4b27      	ldr	r3, [pc, #156]	; (8003f30 <HAL_RCC_OscConfig+0x4dc>)
 8003e92:	2200      	movs	r2, #0
 8003e94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e96:	f7fd f821 	bl	8000edc <HAL_GetTick>
 8003e9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e9c:	e008      	b.n	8003eb0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e9e:	f7fd f81d 	bl	8000edc <HAL_GetTick>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	d901      	bls.n	8003eb0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	e036      	b.n	8003f1e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eb0:	4b1e      	ldr	r3, [pc, #120]	; (8003f2c <HAL_RCC_OscConfig+0x4d8>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d1f0      	bne.n	8003e9e <HAL_RCC_OscConfig+0x44a>
 8003ebc:	e02e      	b.n	8003f1c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	699b      	ldr	r3, [r3, #24]
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d101      	bne.n	8003eca <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e029      	b.n	8003f1e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003eca:	4b18      	ldr	r3, [pc, #96]	; (8003f2c <HAL_RCC_OscConfig+0x4d8>)
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	69db      	ldr	r3, [r3, #28]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d11c      	bne.n	8003f18 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d115      	bne.n	8003f18 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003eec:	68fa      	ldr	r2, [r7, #12]
 8003eee:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d10d      	bne.n	8003f18 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d106      	bne.n	8003f18 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d001      	beq.n	8003f1c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e000      	b.n	8003f1e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003f1c:	2300      	movs	r3, #0
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3718      	adds	r7, #24
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	40007000 	.word	0x40007000
 8003f2c:	40023800 	.word	0x40023800
 8003f30:	42470060 	.word	0x42470060

08003f34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d101      	bne.n	8003f48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e0cc      	b.n	80040e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f48:	4b68      	ldr	r3, [pc, #416]	; (80040ec <HAL_RCC_ClockConfig+0x1b8>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 030f 	and.w	r3, r3, #15
 8003f50:	683a      	ldr	r2, [r7, #0]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d90c      	bls.n	8003f70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f56:	4b65      	ldr	r3, [pc, #404]	; (80040ec <HAL_RCC_ClockConfig+0x1b8>)
 8003f58:	683a      	ldr	r2, [r7, #0]
 8003f5a:	b2d2      	uxtb	r2, r2
 8003f5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f5e:	4b63      	ldr	r3, [pc, #396]	; (80040ec <HAL_RCC_ClockConfig+0x1b8>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 030f 	and.w	r3, r3, #15
 8003f66:	683a      	ldr	r2, [r7, #0]
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d001      	beq.n	8003f70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e0b8      	b.n	80040e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0302 	and.w	r3, r3, #2
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d020      	beq.n	8003fbe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0304 	and.w	r3, r3, #4
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d005      	beq.n	8003f94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f88:	4b59      	ldr	r3, [pc, #356]	; (80040f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	4a58      	ldr	r2, [pc, #352]	; (80040f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f8e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f92:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0308 	and.w	r3, r3, #8
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d005      	beq.n	8003fac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fa0:	4b53      	ldr	r3, [pc, #332]	; (80040f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	4a52      	ldr	r2, [pc, #328]	; (80040f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003faa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fac:	4b50      	ldr	r3, [pc, #320]	; (80040f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	494d      	ldr	r1, [pc, #308]	; (80040f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0301 	and.w	r3, r3, #1
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d044      	beq.n	8004054 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d107      	bne.n	8003fe2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fd2:	4b47      	ldr	r3, [pc, #284]	; (80040f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d119      	bne.n	8004012 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e07f      	b.n	80040e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d003      	beq.n	8003ff2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fee:	2b03      	cmp	r3, #3
 8003ff0:	d107      	bne.n	8004002 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ff2:	4b3f      	ldr	r3, [pc, #252]	; (80040f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d109      	bne.n	8004012 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e06f      	b.n	80040e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004002:	4b3b      	ldr	r3, [pc, #236]	; (80040f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0302 	and.w	r3, r3, #2
 800400a:	2b00      	cmp	r3, #0
 800400c:	d101      	bne.n	8004012 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e067      	b.n	80040e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004012:	4b37      	ldr	r3, [pc, #220]	; (80040f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f023 0203 	bic.w	r2, r3, #3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	4934      	ldr	r1, [pc, #208]	; (80040f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004020:	4313      	orrs	r3, r2
 8004022:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004024:	f7fc ff5a 	bl	8000edc <HAL_GetTick>
 8004028:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800402a:	e00a      	b.n	8004042 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800402c:	f7fc ff56 	bl	8000edc <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	f241 3288 	movw	r2, #5000	; 0x1388
 800403a:	4293      	cmp	r3, r2
 800403c:	d901      	bls.n	8004042 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e04f      	b.n	80040e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004042:	4b2b      	ldr	r3, [pc, #172]	; (80040f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	f003 020c 	and.w	r2, r3, #12
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	429a      	cmp	r2, r3
 8004052:	d1eb      	bne.n	800402c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004054:	4b25      	ldr	r3, [pc, #148]	; (80040ec <HAL_RCC_ClockConfig+0x1b8>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 030f 	and.w	r3, r3, #15
 800405c:	683a      	ldr	r2, [r7, #0]
 800405e:	429a      	cmp	r2, r3
 8004060:	d20c      	bcs.n	800407c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004062:	4b22      	ldr	r3, [pc, #136]	; (80040ec <HAL_RCC_ClockConfig+0x1b8>)
 8004064:	683a      	ldr	r2, [r7, #0]
 8004066:	b2d2      	uxtb	r2, r2
 8004068:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800406a:	4b20      	ldr	r3, [pc, #128]	; (80040ec <HAL_RCC_ClockConfig+0x1b8>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 030f 	and.w	r3, r3, #15
 8004072:	683a      	ldr	r2, [r7, #0]
 8004074:	429a      	cmp	r2, r3
 8004076:	d001      	beq.n	800407c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e032      	b.n	80040e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 0304 	and.w	r3, r3, #4
 8004084:	2b00      	cmp	r3, #0
 8004086:	d008      	beq.n	800409a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004088:	4b19      	ldr	r3, [pc, #100]	; (80040f0 <HAL_RCC_ClockConfig+0x1bc>)
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	4916      	ldr	r1, [pc, #88]	; (80040f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004096:	4313      	orrs	r3, r2
 8004098:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0308 	and.w	r3, r3, #8
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d009      	beq.n	80040ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040a6:	4b12      	ldr	r3, [pc, #72]	; (80040f0 <HAL_RCC_ClockConfig+0x1bc>)
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	691b      	ldr	r3, [r3, #16]
 80040b2:	00db      	lsls	r3, r3, #3
 80040b4:	490e      	ldr	r1, [pc, #56]	; (80040f0 <HAL_RCC_ClockConfig+0x1bc>)
 80040b6:	4313      	orrs	r3, r2
 80040b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80040ba:	f000 f821 	bl	8004100 <HAL_RCC_GetSysClockFreq>
 80040be:	4601      	mov	r1, r0
 80040c0:	4b0b      	ldr	r3, [pc, #44]	; (80040f0 <HAL_RCC_ClockConfig+0x1bc>)
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	091b      	lsrs	r3, r3, #4
 80040c6:	f003 030f 	and.w	r3, r3, #15
 80040ca:	4a0a      	ldr	r2, [pc, #40]	; (80040f4 <HAL_RCC_ClockConfig+0x1c0>)
 80040cc:	5cd3      	ldrb	r3, [r2, r3]
 80040ce:	fa21 f303 	lsr.w	r3, r1, r3
 80040d2:	4a09      	ldr	r2, [pc, #36]	; (80040f8 <HAL_RCC_ClockConfig+0x1c4>)
 80040d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80040d6:	4b09      	ldr	r3, [pc, #36]	; (80040fc <HAL_RCC_ClockConfig+0x1c8>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4618      	mov	r0, r3
 80040dc:	f7fc feba 	bl	8000e54 <HAL_InitTick>

  return HAL_OK;
 80040e0:	2300      	movs	r3, #0
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3710      	adds	r7, #16
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	40023c00 	.word	0x40023c00
 80040f0:	40023800 	.word	0x40023800
 80040f4:	080085ac 	.word	0x080085ac
 80040f8:	20000000 	.word	0x20000000
 80040fc:	20000004 	.word	0x20000004

08004100 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004100:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004102:	b085      	sub	sp, #20
 8004104:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004106:	2300      	movs	r3, #0
 8004108:	607b      	str	r3, [r7, #4]
 800410a:	2300      	movs	r3, #0
 800410c:	60fb      	str	r3, [r7, #12]
 800410e:	2300      	movs	r3, #0
 8004110:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004112:	2300      	movs	r3, #0
 8004114:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004116:	4b63      	ldr	r3, [pc, #396]	; (80042a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	f003 030c 	and.w	r3, r3, #12
 800411e:	2b04      	cmp	r3, #4
 8004120:	d007      	beq.n	8004132 <HAL_RCC_GetSysClockFreq+0x32>
 8004122:	2b08      	cmp	r3, #8
 8004124:	d008      	beq.n	8004138 <HAL_RCC_GetSysClockFreq+0x38>
 8004126:	2b00      	cmp	r3, #0
 8004128:	f040 80b4 	bne.w	8004294 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800412c:	4b5e      	ldr	r3, [pc, #376]	; (80042a8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800412e:	60bb      	str	r3, [r7, #8]
       break;
 8004130:	e0b3      	b.n	800429a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004132:	4b5e      	ldr	r3, [pc, #376]	; (80042ac <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004134:	60bb      	str	r3, [r7, #8]
      break;
 8004136:	e0b0      	b.n	800429a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004138:	4b5a      	ldr	r3, [pc, #360]	; (80042a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004140:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004142:	4b58      	ldr	r3, [pc, #352]	; (80042a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d04a      	beq.n	80041e4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800414e:	4b55      	ldr	r3, [pc, #340]	; (80042a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	099b      	lsrs	r3, r3, #6
 8004154:	f04f 0400 	mov.w	r4, #0
 8004158:	f240 11ff 	movw	r1, #511	; 0x1ff
 800415c:	f04f 0200 	mov.w	r2, #0
 8004160:	ea03 0501 	and.w	r5, r3, r1
 8004164:	ea04 0602 	and.w	r6, r4, r2
 8004168:	4629      	mov	r1, r5
 800416a:	4632      	mov	r2, r6
 800416c:	f04f 0300 	mov.w	r3, #0
 8004170:	f04f 0400 	mov.w	r4, #0
 8004174:	0154      	lsls	r4, r2, #5
 8004176:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800417a:	014b      	lsls	r3, r1, #5
 800417c:	4619      	mov	r1, r3
 800417e:	4622      	mov	r2, r4
 8004180:	1b49      	subs	r1, r1, r5
 8004182:	eb62 0206 	sbc.w	r2, r2, r6
 8004186:	f04f 0300 	mov.w	r3, #0
 800418a:	f04f 0400 	mov.w	r4, #0
 800418e:	0194      	lsls	r4, r2, #6
 8004190:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004194:	018b      	lsls	r3, r1, #6
 8004196:	1a5b      	subs	r3, r3, r1
 8004198:	eb64 0402 	sbc.w	r4, r4, r2
 800419c:	f04f 0100 	mov.w	r1, #0
 80041a0:	f04f 0200 	mov.w	r2, #0
 80041a4:	00e2      	lsls	r2, r4, #3
 80041a6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80041aa:	00d9      	lsls	r1, r3, #3
 80041ac:	460b      	mov	r3, r1
 80041ae:	4614      	mov	r4, r2
 80041b0:	195b      	adds	r3, r3, r5
 80041b2:	eb44 0406 	adc.w	r4, r4, r6
 80041b6:	f04f 0100 	mov.w	r1, #0
 80041ba:	f04f 0200 	mov.w	r2, #0
 80041be:	0262      	lsls	r2, r4, #9
 80041c0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80041c4:	0259      	lsls	r1, r3, #9
 80041c6:	460b      	mov	r3, r1
 80041c8:	4614      	mov	r4, r2
 80041ca:	4618      	mov	r0, r3
 80041cc:	4621      	mov	r1, r4
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f04f 0400 	mov.w	r4, #0
 80041d4:	461a      	mov	r2, r3
 80041d6:	4623      	mov	r3, r4
 80041d8:	f7fb fff6 	bl	80001c8 <__aeabi_uldivmod>
 80041dc:	4603      	mov	r3, r0
 80041de:	460c      	mov	r4, r1
 80041e0:	60fb      	str	r3, [r7, #12]
 80041e2:	e049      	b.n	8004278 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041e4:	4b2f      	ldr	r3, [pc, #188]	; (80042a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	099b      	lsrs	r3, r3, #6
 80041ea:	f04f 0400 	mov.w	r4, #0
 80041ee:	f240 11ff 	movw	r1, #511	; 0x1ff
 80041f2:	f04f 0200 	mov.w	r2, #0
 80041f6:	ea03 0501 	and.w	r5, r3, r1
 80041fa:	ea04 0602 	and.w	r6, r4, r2
 80041fe:	4629      	mov	r1, r5
 8004200:	4632      	mov	r2, r6
 8004202:	f04f 0300 	mov.w	r3, #0
 8004206:	f04f 0400 	mov.w	r4, #0
 800420a:	0154      	lsls	r4, r2, #5
 800420c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004210:	014b      	lsls	r3, r1, #5
 8004212:	4619      	mov	r1, r3
 8004214:	4622      	mov	r2, r4
 8004216:	1b49      	subs	r1, r1, r5
 8004218:	eb62 0206 	sbc.w	r2, r2, r6
 800421c:	f04f 0300 	mov.w	r3, #0
 8004220:	f04f 0400 	mov.w	r4, #0
 8004224:	0194      	lsls	r4, r2, #6
 8004226:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800422a:	018b      	lsls	r3, r1, #6
 800422c:	1a5b      	subs	r3, r3, r1
 800422e:	eb64 0402 	sbc.w	r4, r4, r2
 8004232:	f04f 0100 	mov.w	r1, #0
 8004236:	f04f 0200 	mov.w	r2, #0
 800423a:	00e2      	lsls	r2, r4, #3
 800423c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004240:	00d9      	lsls	r1, r3, #3
 8004242:	460b      	mov	r3, r1
 8004244:	4614      	mov	r4, r2
 8004246:	195b      	adds	r3, r3, r5
 8004248:	eb44 0406 	adc.w	r4, r4, r6
 800424c:	f04f 0100 	mov.w	r1, #0
 8004250:	f04f 0200 	mov.w	r2, #0
 8004254:	02a2      	lsls	r2, r4, #10
 8004256:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800425a:	0299      	lsls	r1, r3, #10
 800425c:	460b      	mov	r3, r1
 800425e:	4614      	mov	r4, r2
 8004260:	4618      	mov	r0, r3
 8004262:	4621      	mov	r1, r4
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f04f 0400 	mov.w	r4, #0
 800426a:	461a      	mov	r2, r3
 800426c:	4623      	mov	r3, r4
 800426e:	f7fb ffab 	bl	80001c8 <__aeabi_uldivmod>
 8004272:	4603      	mov	r3, r0
 8004274:	460c      	mov	r4, r1
 8004276:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004278:	4b0a      	ldr	r3, [pc, #40]	; (80042a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	0c1b      	lsrs	r3, r3, #16
 800427e:	f003 0303 	and.w	r3, r3, #3
 8004282:	3301      	adds	r3, #1
 8004284:	005b      	lsls	r3, r3, #1
 8004286:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004288:	68fa      	ldr	r2, [r7, #12]
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004290:	60bb      	str	r3, [r7, #8]
      break;
 8004292:	e002      	b.n	800429a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004294:	4b04      	ldr	r3, [pc, #16]	; (80042a8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004296:	60bb      	str	r3, [r7, #8]
      break;
 8004298:	bf00      	nop
    }
  }
  return sysclockfreq;
 800429a:	68bb      	ldr	r3, [r7, #8]
}
 800429c:	4618      	mov	r0, r3
 800429e:	3714      	adds	r7, #20
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042a4:	40023800 	.word	0x40023800
 80042a8:	00f42400 	.word	0x00f42400
 80042ac:	007a1200 	.word	0x007a1200

080042b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042b0:	b480      	push	{r7}
 80042b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042b4:	4b03      	ldr	r3, [pc, #12]	; (80042c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80042b6:	681b      	ldr	r3, [r3, #0]
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr
 80042c2:	bf00      	nop
 80042c4:	20000000 	.word	0x20000000

080042c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80042cc:	f7ff fff0 	bl	80042b0 <HAL_RCC_GetHCLKFreq>
 80042d0:	4601      	mov	r1, r0
 80042d2:	4b05      	ldr	r3, [pc, #20]	; (80042e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	0a9b      	lsrs	r3, r3, #10
 80042d8:	f003 0307 	and.w	r3, r3, #7
 80042dc:	4a03      	ldr	r2, [pc, #12]	; (80042ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80042de:	5cd3      	ldrb	r3, [r2, r3]
 80042e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	bd80      	pop	{r7, pc}
 80042e8:	40023800 	.word	0x40023800
 80042ec:	080085bc 	.word	0x080085bc

080042f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80042f4:	f7ff ffdc 	bl	80042b0 <HAL_RCC_GetHCLKFreq>
 80042f8:	4601      	mov	r1, r0
 80042fa:	4b05      	ldr	r3, [pc, #20]	; (8004310 <HAL_RCC_GetPCLK2Freq+0x20>)
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	0b5b      	lsrs	r3, r3, #13
 8004300:	f003 0307 	and.w	r3, r3, #7
 8004304:	4a03      	ldr	r2, [pc, #12]	; (8004314 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004306:	5cd3      	ldrb	r3, [r2, r3]
 8004308:	fa21 f303 	lsr.w	r3, r1, r3
}
 800430c:	4618      	mov	r0, r3
 800430e:	bd80      	pop	{r7, pc}
 8004310:	40023800 	.word	0x40023800
 8004314:	080085bc 	.word	0x080085bc

08004318 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b086      	sub	sp, #24
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004320:	2300      	movs	r3, #0
 8004322:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004324:	2300      	movs	r3, #0
 8004326:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0301 	and.w	r3, r3, #1
 8004330:	2b00      	cmp	r3, #0
 8004332:	d105      	bne.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800433c:	2b00      	cmp	r3, #0
 800433e:	d035      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004340:	4b62      	ldr	r3, [pc, #392]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004342:	2200      	movs	r2, #0
 8004344:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004346:	f7fc fdc9 	bl	8000edc <HAL_GetTick>
 800434a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800434c:	e008      	b.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800434e:	f7fc fdc5 	bl	8000edc <HAL_GetTick>
 8004352:	4602      	mov	r2, r0
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	2b02      	cmp	r3, #2
 800435a:	d901      	bls.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	e0b0      	b.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004360:	4b5b      	ldr	r3, [pc, #364]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004368:	2b00      	cmp	r3, #0
 800436a:	d1f0      	bne.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	019a      	lsls	r2, r3, #6
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	071b      	lsls	r3, r3, #28
 8004378:	4955      	ldr	r1, [pc, #340]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800437a:	4313      	orrs	r3, r2
 800437c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004380:	4b52      	ldr	r3, [pc, #328]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004382:	2201      	movs	r2, #1
 8004384:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004386:	f7fc fda9 	bl	8000edc <HAL_GetTick>
 800438a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800438c:	e008      	b.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800438e:	f7fc fda5 	bl	8000edc <HAL_GetTick>
 8004392:	4602      	mov	r2, r0
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	1ad3      	subs	r3, r2, r3
 8004398:	2b02      	cmp	r3, #2
 800439a:	d901      	bls.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800439c:	2303      	movs	r3, #3
 800439e:	e090      	b.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043a0:	4b4b      	ldr	r3, [pc, #300]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d0f0      	beq.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 0302 	and.w	r3, r3, #2
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	f000 8083 	beq.w	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80043ba:	2300      	movs	r3, #0
 80043bc:	60fb      	str	r3, [r7, #12]
 80043be:	4b44      	ldr	r3, [pc, #272]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c2:	4a43      	ldr	r2, [pc, #268]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043c8:	6413      	str	r3, [r2, #64]	; 0x40
 80043ca:	4b41      	ldr	r3, [pc, #260]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043d2:	60fb      	str	r3, [r7, #12]
 80043d4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80043d6:	4b3f      	ldr	r3, [pc, #252]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a3e      	ldr	r2, [pc, #248]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043e0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80043e2:	f7fc fd7b 	bl	8000edc <HAL_GetTick>
 80043e6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80043e8:	e008      	b.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80043ea:	f7fc fd77 	bl	8000edc <HAL_GetTick>
 80043ee:	4602      	mov	r2, r0
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	1ad3      	subs	r3, r2, r3
 80043f4:	2b02      	cmp	r3, #2
 80043f6:	d901      	bls.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80043f8:	2303      	movs	r3, #3
 80043fa:	e062      	b.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80043fc:	4b35      	ldr	r3, [pc, #212]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004404:	2b00      	cmp	r3, #0
 8004406:	d0f0      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004408:	4b31      	ldr	r3, [pc, #196]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800440a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800440c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004410:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d02f      	beq.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004420:	693a      	ldr	r2, [r7, #16]
 8004422:	429a      	cmp	r2, r3
 8004424:	d028      	beq.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004426:	4b2a      	ldr	r3, [pc, #168]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800442a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800442e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004430:	4b29      	ldr	r3, [pc, #164]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004432:	2201      	movs	r2, #1
 8004434:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004436:	4b28      	ldr	r3, [pc, #160]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004438:	2200      	movs	r2, #0
 800443a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800443c:	4a24      	ldr	r2, [pc, #144]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004442:	4b23      	ldr	r3, [pc, #140]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004446:	f003 0301 	and.w	r3, r3, #1
 800444a:	2b01      	cmp	r3, #1
 800444c:	d114      	bne.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800444e:	f7fc fd45 	bl	8000edc <HAL_GetTick>
 8004452:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004454:	e00a      	b.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004456:	f7fc fd41 	bl	8000edc <HAL_GetTick>
 800445a:	4602      	mov	r2, r0
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	f241 3288 	movw	r2, #5000	; 0x1388
 8004464:	4293      	cmp	r3, r2
 8004466:	d901      	bls.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004468:	2303      	movs	r3, #3
 800446a:	e02a      	b.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800446c:	4b18      	ldr	r3, [pc, #96]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800446e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004470:	f003 0302 	and.w	r3, r3, #2
 8004474:	2b00      	cmp	r3, #0
 8004476:	d0ee      	beq.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004480:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004484:	d10d      	bne.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004486:	4b12      	ldr	r3, [pc, #72]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004496:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800449a:	490d      	ldr	r1, [pc, #52]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800449c:	4313      	orrs	r3, r2
 800449e:	608b      	str	r3, [r1, #8]
 80044a0:	e005      	b.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x196>
 80044a2:	4b0b      	ldr	r3, [pc, #44]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	4a0a      	ldr	r2, [pc, #40]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044a8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80044ac:	6093      	str	r3, [r2, #8]
 80044ae:	4b08      	ldr	r3, [pc, #32]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044ba:	4905      	ldr	r1, [pc, #20]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044bc:	4313      	orrs	r3, r2
 80044be:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3718      	adds	r7, #24
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	bf00      	nop
 80044cc:	42470068 	.word	0x42470068
 80044d0:	40023800 	.word	0x40023800
 80044d4:	40007000 	.word	0x40007000
 80044d8:	42470e40 	.word	0x42470e40

080044dc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80044dc:	b480      	push	{r7}
 80044de:	b087      	sub	sp, #28
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80044e4:	2300      	movs	r3, #0
 80044e6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80044e8:	2300      	movs	r3, #0
 80044ea:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80044ec:	2300      	movs	r3, #0
 80044ee:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80044f0:	2300      	movs	r3, #0
 80044f2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d13d      	bne.n	8004576 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80044fa:	4b22      	ldr	r3, [pc, #136]	; (8004584 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004502:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d004      	beq.n	8004514 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800450a:	2b01      	cmp	r3, #1
 800450c:	d12f      	bne.n	800456e <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800450e:	4b1e      	ldr	r3, [pc, #120]	; (8004588 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004510:	617b      	str	r3, [r7, #20]
          break;
 8004512:	e02f      	b.n	8004574 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004514:	4b1b      	ldr	r3, [pc, #108]	; (8004584 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800451c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004520:	d108      	bne.n	8004534 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004522:	4b18      	ldr	r3, [pc, #96]	; (8004584 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800452a:	4a18      	ldr	r2, [pc, #96]	; (800458c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800452c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004530:	613b      	str	r3, [r7, #16]
 8004532:	e007      	b.n	8004544 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004534:	4b13      	ldr	r3, [pc, #76]	; (8004584 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800453c:	4a14      	ldr	r2, [pc, #80]	; (8004590 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800453e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004542:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004544:	4b0f      	ldr	r3, [pc, #60]	; (8004584 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004546:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800454a:	099b      	lsrs	r3, r3, #6
 800454c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	fb02 f303 	mul.w	r3, r2, r3
 8004556:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004558:	4b0a      	ldr	r3, [pc, #40]	; (8004584 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800455a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800455e:	0f1b      	lsrs	r3, r3, #28
 8004560:	f003 0307 	and.w	r3, r3, #7
 8004564:	68ba      	ldr	r2, [r7, #8]
 8004566:	fbb2 f3f3 	udiv	r3, r2, r3
 800456a:	617b      	str	r3, [r7, #20]
          break;
 800456c:	e002      	b.n	8004574 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800456e:	2300      	movs	r3, #0
 8004570:	617b      	str	r3, [r7, #20]
          break;
 8004572:	bf00      	nop
        }
      }
      break;
 8004574:	bf00      	nop
    }
  }
  return frequency;
 8004576:	697b      	ldr	r3, [r7, #20]
}
 8004578:	4618      	mov	r0, r3
 800457a:	371c      	adds	r7, #28
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr
 8004584:	40023800 	.word	0x40023800
 8004588:	00bb8000 	.word	0x00bb8000
 800458c:	007a1200 	.word	0x007a1200
 8004590:	00f42400 	.word	0x00f42400

08004594 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b082      	sub	sp, #8
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d101      	bne.n	80045a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e056      	b.n	8004654 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d106      	bne.n	80045c6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f7fc fa9f 	bl	8000b04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2202      	movs	r2, #2
 80045ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045dc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	685a      	ldr	r2, [r3, #4]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	431a      	orrs	r2, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	431a      	orrs	r2, r3
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	691b      	ldr	r3, [r3, #16]
 80045f2:	431a      	orrs	r2, r3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	695b      	ldr	r3, [r3, #20]
 80045f8:	431a      	orrs	r2, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	699b      	ldr	r3, [r3, #24]
 80045fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004602:	431a      	orrs	r2, r3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	69db      	ldr	r3, [r3, #28]
 8004608:	431a      	orrs	r2, r3
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6a1b      	ldr	r3, [r3, #32]
 800460e:	ea42 0103 	orr.w	r1, r2, r3
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	430a      	orrs	r2, r1
 800461c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	699b      	ldr	r3, [r3, #24]
 8004622:	0c1b      	lsrs	r3, r3, #16
 8004624:	f003 0104 	and.w	r1, r3, #4
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	430a      	orrs	r2, r1
 8004632:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	69da      	ldr	r2, [r3, #28]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004642:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2201      	movs	r2, #1
 800464e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004652:	2300      	movs	r3, #0
}
 8004654:	4618      	mov	r0, r3
 8004656:	3708      	adds	r7, #8
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}

0800465c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b082      	sub	sp, #8
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d101      	bne.n	800466e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e03f      	b.n	80046ee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004674:	b2db      	uxtb	r3, r3
 8004676:	2b00      	cmp	r3, #0
 8004678:	d106      	bne.n	8004688 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f7fc fb52 	bl	8000d2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2224      	movs	r2, #36	; 0x24
 800468c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	68da      	ldr	r2, [r3, #12]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800469e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f000 f9b1 	bl	8004a08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	691a      	ldr	r2, [r3, #16]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	695a      	ldr	r2, [r3, #20]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80046c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	68da      	ldr	r2, [r3, #12]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2220      	movs	r2, #32
 80046e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2220      	movs	r2, #32
 80046e8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80046ec:	2300      	movs	r3, #0
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3708      	adds	r7, #8
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}

080046f6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046f6:	b580      	push	{r7, lr}
 80046f8:	b088      	sub	sp, #32
 80046fa:	af02      	add	r7, sp, #8
 80046fc:	60f8      	str	r0, [r7, #12]
 80046fe:	60b9      	str	r1, [r7, #8]
 8004700:	603b      	str	r3, [r7, #0]
 8004702:	4613      	mov	r3, r2
 8004704:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004706:	2300      	movs	r3, #0
 8004708:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004710:	b2db      	uxtb	r3, r3
 8004712:	2b20      	cmp	r3, #32
 8004714:	f040 8083 	bne.w	800481e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d002      	beq.n	8004724 <HAL_UART_Transmit+0x2e>
 800471e:	88fb      	ldrh	r3, [r7, #6]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d101      	bne.n	8004728 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e07b      	b.n	8004820 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800472e:	2b01      	cmp	r3, #1
 8004730:	d101      	bne.n	8004736 <HAL_UART_Transmit+0x40>
 8004732:	2302      	movs	r3, #2
 8004734:	e074      	b.n	8004820 <HAL_UART_Transmit+0x12a>
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2201      	movs	r2, #1
 800473a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2200      	movs	r2, #0
 8004742:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2221      	movs	r2, #33	; 0x21
 8004748:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800474c:	f7fc fbc6 	bl	8000edc <HAL_GetTick>
 8004750:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	88fa      	ldrh	r2, [r7, #6]
 8004756:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	88fa      	ldrh	r2, [r7, #6]
 800475c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2200      	movs	r2, #0
 8004762:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004766:	e042      	b.n	80047ee <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800476c:	b29b      	uxth	r3, r3
 800476e:	3b01      	subs	r3, #1
 8004770:	b29a      	uxth	r2, r3
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800477e:	d122      	bne.n	80047c6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	9300      	str	r3, [sp, #0]
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	2200      	movs	r2, #0
 8004788:	2180      	movs	r1, #128	; 0x80
 800478a:	68f8      	ldr	r0, [r7, #12]
 800478c:	f000 f8f2 	bl	8004974 <UART_WaitOnFlagUntilTimeout>
 8004790:	4603      	mov	r3, r0
 8004792:	2b00      	cmp	r3, #0
 8004794:	d001      	beq.n	800479a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	e042      	b.n	8004820 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	881b      	ldrh	r3, [r3, #0]
 80047a2:	461a      	mov	r2, r3
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047ac:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d103      	bne.n	80047be <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	3302      	adds	r3, #2
 80047ba:	60bb      	str	r3, [r7, #8]
 80047bc:	e017      	b.n	80047ee <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	3301      	adds	r3, #1
 80047c2:	60bb      	str	r3, [r7, #8]
 80047c4:	e013      	b.n	80047ee <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	9300      	str	r3, [sp, #0]
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	2200      	movs	r2, #0
 80047ce:	2180      	movs	r1, #128	; 0x80
 80047d0:	68f8      	ldr	r0, [r7, #12]
 80047d2:	f000 f8cf 	bl	8004974 <UART_WaitOnFlagUntilTimeout>
 80047d6:	4603      	mov	r3, r0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d001      	beq.n	80047e0 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80047dc:	2303      	movs	r3, #3
 80047de:	e01f      	b.n	8004820 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	1c5a      	adds	r2, r3, #1
 80047e4:	60ba      	str	r2, [r7, #8]
 80047e6:	781a      	ldrb	r2, [r3, #0]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d1b7      	bne.n	8004768 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	9300      	str	r3, [sp, #0]
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	2200      	movs	r2, #0
 8004800:	2140      	movs	r1, #64	; 0x40
 8004802:	68f8      	ldr	r0, [r7, #12]
 8004804:	f000 f8b6 	bl	8004974 <UART_WaitOnFlagUntilTimeout>
 8004808:	4603      	mov	r3, r0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d001      	beq.n	8004812 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800480e:	2303      	movs	r3, #3
 8004810:	e006      	b.n	8004820 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2220      	movs	r2, #32
 8004816:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800481a:	2300      	movs	r3, #0
 800481c:	e000      	b.n	8004820 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800481e:	2302      	movs	r3, #2
  }
}
 8004820:	4618      	mov	r0, r3
 8004822:	3718      	adds	r7, #24
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}

08004828 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b088      	sub	sp, #32
 800482c:	af02      	add	r7, sp, #8
 800482e:	60f8      	str	r0, [r7, #12]
 8004830:	60b9      	str	r1, [r7, #8]
 8004832:	603b      	str	r3, [r7, #0]
 8004834:	4613      	mov	r3, r2
 8004836:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004838:	2300      	movs	r3, #0
 800483a:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004842:	b2db      	uxtb	r3, r3
 8004844:	2b20      	cmp	r3, #32
 8004846:	f040 8090 	bne.w	800496a <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d002      	beq.n	8004856 <HAL_UART_Receive+0x2e>
 8004850:	88fb      	ldrh	r3, [r7, #6]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d101      	bne.n	800485a <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e088      	b.n	800496c <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004860:	2b01      	cmp	r3, #1
 8004862:	d101      	bne.n	8004868 <HAL_UART_Receive+0x40>
 8004864:	2302      	movs	r3, #2
 8004866:	e081      	b.n	800496c <HAL_UART_Receive+0x144>
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2200      	movs	r2, #0
 8004874:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2222      	movs	r2, #34	; 0x22
 800487a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800487e:	f7fc fb2d 	bl	8000edc <HAL_GetTick>
 8004882:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	88fa      	ldrh	r2, [r7, #6]
 8004888:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	88fa      	ldrh	r2, [r7, #6]
 800488e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2200      	movs	r2, #0
 8004894:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004898:	e05c      	b.n	8004954 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800489e:	b29b      	uxth	r3, r3
 80048a0:	3b01      	subs	r3, #1
 80048a2:	b29a      	uxth	r2, r3
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048b0:	d12b      	bne.n	800490a <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	9300      	str	r3, [sp, #0]
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	2200      	movs	r2, #0
 80048ba:	2120      	movs	r1, #32
 80048bc:	68f8      	ldr	r0, [r7, #12]
 80048be:	f000 f859 	bl	8004974 <UART_WaitOnFlagUntilTimeout>
 80048c2:	4603      	mov	r3, r0
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d001      	beq.n	80048cc <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	e04f      	b.n	800496c <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	691b      	ldr	r3, [r3, #16]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d10c      	bne.n	80048f2 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	b29b      	uxth	r3, r3
 80048e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048e4:	b29a      	uxth	r2, r3
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	3302      	adds	r3, #2
 80048ee:	60bb      	str	r3, [r7, #8]
 80048f0:	e030      	b.n	8004954 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	b29a      	uxth	r2, r3
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	3301      	adds	r3, #1
 8004906:	60bb      	str	r3, [r7, #8]
 8004908:	e024      	b.n	8004954 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	9300      	str	r3, [sp, #0]
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	2200      	movs	r2, #0
 8004912:	2120      	movs	r1, #32
 8004914:	68f8      	ldr	r0, [r7, #12]
 8004916:	f000 f82d 	bl	8004974 <UART_WaitOnFlagUntilTimeout>
 800491a:	4603      	mov	r3, r0
 800491c:	2b00      	cmp	r3, #0
 800491e:	d001      	beq.n	8004924 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8004920:	2303      	movs	r3, #3
 8004922:	e023      	b.n	800496c <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	691b      	ldr	r3, [r3, #16]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d108      	bne.n	800493e <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	6859      	ldr	r1, [r3, #4]
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	1c5a      	adds	r2, r3, #1
 8004936:	60ba      	str	r2, [r7, #8]
 8004938:	b2ca      	uxtb	r2, r1
 800493a:	701a      	strb	r2, [r3, #0]
 800493c:	e00a      	b.n	8004954 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	b2da      	uxtb	r2, r3
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	1c59      	adds	r1, r3, #1
 800494a:	60b9      	str	r1, [r7, #8]
 800494c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004950:	b2d2      	uxtb	r2, r2
 8004952:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004958:	b29b      	uxth	r3, r3
 800495a:	2b00      	cmp	r3, #0
 800495c:	d19d      	bne.n	800489a <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2220      	movs	r2, #32
 8004962:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8004966:	2300      	movs	r3, #0
 8004968:	e000      	b.n	800496c <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 800496a:	2302      	movs	r3, #2
  }
}
 800496c:	4618      	mov	r0, r3
 800496e:	3718      	adds	r7, #24
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	60b9      	str	r1, [r7, #8]
 800497e:	603b      	str	r3, [r7, #0]
 8004980:	4613      	mov	r3, r2
 8004982:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004984:	e02c      	b.n	80049e0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800498c:	d028      	beq.n	80049e0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800498e:	69bb      	ldr	r3, [r7, #24]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d007      	beq.n	80049a4 <UART_WaitOnFlagUntilTimeout+0x30>
 8004994:	f7fc faa2 	bl	8000edc <HAL_GetTick>
 8004998:	4602      	mov	r2, r0
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	69ba      	ldr	r2, [r7, #24]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d21d      	bcs.n	80049e0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	68da      	ldr	r2, [r3, #12]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80049b2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	695a      	ldr	r2, [r3, #20]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f022 0201 	bic.w	r2, r2, #1
 80049c2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2220      	movs	r2, #32
 80049c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2220      	movs	r2, #32
 80049d0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2200      	movs	r2, #0
 80049d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80049dc:	2303      	movs	r3, #3
 80049de:	e00f      	b.n	8004a00 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	4013      	ands	r3, r2
 80049ea:	68ba      	ldr	r2, [r7, #8]
 80049ec:	429a      	cmp	r2, r3
 80049ee:	bf0c      	ite	eq
 80049f0:	2301      	moveq	r3, #1
 80049f2:	2300      	movne	r3, #0
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	461a      	mov	r2, r3
 80049f8:	79fb      	ldrb	r3, [r7, #7]
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d0c3      	beq.n	8004986 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80049fe:	2300      	movs	r3, #0
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3710      	adds	r7, #16
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a0c:	b085      	sub	sp, #20
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	691b      	ldr	r3, [r3, #16]
 8004a18:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	68da      	ldr	r2, [r3, #12]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	430a      	orrs	r2, r1
 8004a26:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	689a      	ldr	r2, [r3, #8]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	691b      	ldr	r3, [r3, #16]
 8004a30:	431a      	orrs	r2, r3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	695b      	ldr	r3, [r3, #20]
 8004a36:	431a      	orrs	r2, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	69db      	ldr	r3, [r3, #28]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004a4a:	f023 030c 	bic.w	r3, r3, #12
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	6812      	ldr	r2, [r2, #0]
 8004a52:	68f9      	ldr	r1, [r7, #12]
 8004a54:	430b      	orrs	r3, r1
 8004a56:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	695b      	ldr	r3, [r3, #20]
 8004a5e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	699a      	ldr	r2, [r3, #24]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	430a      	orrs	r2, r1
 8004a6c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	69db      	ldr	r3, [r3, #28]
 8004a72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a76:	f040 818b 	bne.w	8004d90 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4ac1      	ldr	r2, [pc, #772]	; (8004d84 <UART_SetConfig+0x37c>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d005      	beq.n	8004a90 <UART_SetConfig+0x88>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4abf      	ldr	r2, [pc, #764]	; (8004d88 <UART_SetConfig+0x380>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	f040 80bd 	bne.w	8004c0a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a90:	f7ff fc2e 	bl	80042f0 <HAL_RCC_GetPCLK2Freq>
 8004a94:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	461d      	mov	r5, r3
 8004a9a:	f04f 0600 	mov.w	r6, #0
 8004a9e:	46a8      	mov	r8, r5
 8004aa0:	46b1      	mov	r9, r6
 8004aa2:	eb18 0308 	adds.w	r3, r8, r8
 8004aa6:	eb49 0409 	adc.w	r4, r9, r9
 8004aaa:	4698      	mov	r8, r3
 8004aac:	46a1      	mov	r9, r4
 8004aae:	eb18 0805 	adds.w	r8, r8, r5
 8004ab2:	eb49 0906 	adc.w	r9, r9, r6
 8004ab6:	f04f 0100 	mov.w	r1, #0
 8004aba:	f04f 0200 	mov.w	r2, #0
 8004abe:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004ac2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004ac6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004aca:	4688      	mov	r8, r1
 8004acc:	4691      	mov	r9, r2
 8004ace:	eb18 0005 	adds.w	r0, r8, r5
 8004ad2:	eb49 0106 	adc.w	r1, r9, r6
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	461d      	mov	r5, r3
 8004adc:	f04f 0600 	mov.w	r6, #0
 8004ae0:	196b      	adds	r3, r5, r5
 8004ae2:	eb46 0406 	adc.w	r4, r6, r6
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	4623      	mov	r3, r4
 8004aea:	f7fb fb6d 	bl	80001c8 <__aeabi_uldivmod>
 8004aee:	4603      	mov	r3, r0
 8004af0:	460c      	mov	r4, r1
 8004af2:	461a      	mov	r2, r3
 8004af4:	4ba5      	ldr	r3, [pc, #660]	; (8004d8c <UART_SetConfig+0x384>)
 8004af6:	fba3 2302 	umull	r2, r3, r3, r2
 8004afa:	095b      	lsrs	r3, r3, #5
 8004afc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	461d      	mov	r5, r3
 8004b04:	f04f 0600 	mov.w	r6, #0
 8004b08:	46a9      	mov	r9, r5
 8004b0a:	46b2      	mov	sl, r6
 8004b0c:	eb19 0309 	adds.w	r3, r9, r9
 8004b10:	eb4a 040a 	adc.w	r4, sl, sl
 8004b14:	4699      	mov	r9, r3
 8004b16:	46a2      	mov	sl, r4
 8004b18:	eb19 0905 	adds.w	r9, r9, r5
 8004b1c:	eb4a 0a06 	adc.w	sl, sl, r6
 8004b20:	f04f 0100 	mov.w	r1, #0
 8004b24:	f04f 0200 	mov.w	r2, #0
 8004b28:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b2c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004b30:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004b34:	4689      	mov	r9, r1
 8004b36:	4692      	mov	sl, r2
 8004b38:	eb19 0005 	adds.w	r0, r9, r5
 8004b3c:	eb4a 0106 	adc.w	r1, sl, r6
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	461d      	mov	r5, r3
 8004b46:	f04f 0600 	mov.w	r6, #0
 8004b4a:	196b      	adds	r3, r5, r5
 8004b4c:	eb46 0406 	adc.w	r4, r6, r6
 8004b50:	461a      	mov	r2, r3
 8004b52:	4623      	mov	r3, r4
 8004b54:	f7fb fb38 	bl	80001c8 <__aeabi_uldivmod>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	460c      	mov	r4, r1
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	4b8b      	ldr	r3, [pc, #556]	; (8004d8c <UART_SetConfig+0x384>)
 8004b60:	fba3 1302 	umull	r1, r3, r3, r2
 8004b64:	095b      	lsrs	r3, r3, #5
 8004b66:	2164      	movs	r1, #100	; 0x64
 8004b68:	fb01 f303 	mul.w	r3, r1, r3
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	00db      	lsls	r3, r3, #3
 8004b70:	3332      	adds	r3, #50	; 0x32
 8004b72:	4a86      	ldr	r2, [pc, #536]	; (8004d8c <UART_SetConfig+0x384>)
 8004b74:	fba2 2303 	umull	r2, r3, r2, r3
 8004b78:	095b      	lsrs	r3, r3, #5
 8004b7a:	005b      	lsls	r3, r3, #1
 8004b7c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004b80:	4498      	add	r8, r3
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	461d      	mov	r5, r3
 8004b86:	f04f 0600 	mov.w	r6, #0
 8004b8a:	46a9      	mov	r9, r5
 8004b8c:	46b2      	mov	sl, r6
 8004b8e:	eb19 0309 	adds.w	r3, r9, r9
 8004b92:	eb4a 040a 	adc.w	r4, sl, sl
 8004b96:	4699      	mov	r9, r3
 8004b98:	46a2      	mov	sl, r4
 8004b9a:	eb19 0905 	adds.w	r9, r9, r5
 8004b9e:	eb4a 0a06 	adc.w	sl, sl, r6
 8004ba2:	f04f 0100 	mov.w	r1, #0
 8004ba6:	f04f 0200 	mov.w	r2, #0
 8004baa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004bae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004bb2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004bb6:	4689      	mov	r9, r1
 8004bb8:	4692      	mov	sl, r2
 8004bba:	eb19 0005 	adds.w	r0, r9, r5
 8004bbe:	eb4a 0106 	adc.w	r1, sl, r6
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	461d      	mov	r5, r3
 8004bc8:	f04f 0600 	mov.w	r6, #0
 8004bcc:	196b      	adds	r3, r5, r5
 8004bce:	eb46 0406 	adc.w	r4, r6, r6
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	4623      	mov	r3, r4
 8004bd6:	f7fb faf7 	bl	80001c8 <__aeabi_uldivmod>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	460c      	mov	r4, r1
 8004bde:	461a      	mov	r2, r3
 8004be0:	4b6a      	ldr	r3, [pc, #424]	; (8004d8c <UART_SetConfig+0x384>)
 8004be2:	fba3 1302 	umull	r1, r3, r3, r2
 8004be6:	095b      	lsrs	r3, r3, #5
 8004be8:	2164      	movs	r1, #100	; 0x64
 8004bea:	fb01 f303 	mul.w	r3, r1, r3
 8004bee:	1ad3      	subs	r3, r2, r3
 8004bf0:	00db      	lsls	r3, r3, #3
 8004bf2:	3332      	adds	r3, #50	; 0x32
 8004bf4:	4a65      	ldr	r2, [pc, #404]	; (8004d8c <UART_SetConfig+0x384>)
 8004bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8004bfa:	095b      	lsrs	r3, r3, #5
 8004bfc:	f003 0207 	and.w	r2, r3, #7
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4442      	add	r2, r8
 8004c06:	609a      	str	r2, [r3, #8]
 8004c08:	e26f      	b.n	80050ea <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c0a:	f7ff fb5d 	bl	80042c8 <HAL_RCC_GetPCLK1Freq>
 8004c0e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	461d      	mov	r5, r3
 8004c14:	f04f 0600 	mov.w	r6, #0
 8004c18:	46a8      	mov	r8, r5
 8004c1a:	46b1      	mov	r9, r6
 8004c1c:	eb18 0308 	adds.w	r3, r8, r8
 8004c20:	eb49 0409 	adc.w	r4, r9, r9
 8004c24:	4698      	mov	r8, r3
 8004c26:	46a1      	mov	r9, r4
 8004c28:	eb18 0805 	adds.w	r8, r8, r5
 8004c2c:	eb49 0906 	adc.w	r9, r9, r6
 8004c30:	f04f 0100 	mov.w	r1, #0
 8004c34:	f04f 0200 	mov.w	r2, #0
 8004c38:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004c3c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004c40:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004c44:	4688      	mov	r8, r1
 8004c46:	4691      	mov	r9, r2
 8004c48:	eb18 0005 	adds.w	r0, r8, r5
 8004c4c:	eb49 0106 	adc.w	r1, r9, r6
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	461d      	mov	r5, r3
 8004c56:	f04f 0600 	mov.w	r6, #0
 8004c5a:	196b      	adds	r3, r5, r5
 8004c5c:	eb46 0406 	adc.w	r4, r6, r6
 8004c60:	461a      	mov	r2, r3
 8004c62:	4623      	mov	r3, r4
 8004c64:	f7fb fab0 	bl	80001c8 <__aeabi_uldivmod>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	460c      	mov	r4, r1
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	4b47      	ldr	r3, [pc, #284]	; (8004d8c <UART_SetConfig+0x384>)
 8004c70:	fba3 2302 	umull	r2, r3, r3, r2
 8004c74:	095b      	lsrs	r3, r3, #5
 8004c76:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	461d      	mov	r5, r3
 8004c7e:	f04f 0600 	mov.w	r6, #0
 8004c82:	46a9      	mov	r9, r5
 8004c84:	46b2      	mov	sl, r6
 8004c86:	eb19 0309 	adds.w	r3, r9, r9
 8004c8a:	eb4a 040a 	adc.w	r4, sl, sl
 8004c8e:	4699      	mov	r9, r3
 8004c90:	46a2      	mov	sl, r4
 8004c92:	eb19 0905 	adds.w	r9, r9, r5
 8004c96:	eb4a 0a06 	adc.w	sl, sl, r6
 8004c9a:	f04f 0100 	mov.w	r1, #0
 8004c9e:	f04f 0200 	mov.w	r2, #0
 8004ca2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ca6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004caa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004cae:	4689      	mov	r9, r1
 8004cb0:	4692      	mov	sl, r2
 8004cb2:	eb19 0005 	adds.w	r0, r9, r5
 8004cb6:	eb4a 0106 	adc.w	r1, sl, r6
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	461d      	mov	r5, r3
 8004cc0:	f04f 0600 	mov.w	r6, #0
 8004cc4:	196b      	adds	r3, r5, r5
 8004cc6:	eb46 0406 	adc.w	r4, r6, r6
 8004cca:	461a      	mov	r2, r3
 8004ccc:	4623      	mov	r3, r4
 8004cce:	f7fb fa7b 	bl	80001c8 <__aeabi_uldivmod>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	460c      	mov	r4, r1
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	4b2c      	ldr	r3, [pc, #176]	; (8004d8c <UART_SetConfig+0x384>)
 8004cda:	fba3 1302 	umull	r1, r3, r3, r2
 8004cde:	095b      	lsrs	r3, r3, #5
 8004ce0:	2164      	movs	r1, #100	; 0x64
 8004ce2:	fb01 f303 	mul.w	r3, r1, r3
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	00db      	lsls	r3, r3, #3
 8004cea:	3332      	adds	r3, #50	; 0x32
 8004cec:	4a27      	ldr	r2, [pc, #156]	; (8004d8c <UART_SetConfig+0x384>)
 8004cee:	fba2 2303 	umull	r2, r3, r2, r3
 8004cf2:	095b      	lsrs	r3, r3, #5
 8004cf4:	005b      	lsls	r3, r3, #1
 8004cf6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004cfa:	4498      	add	r8, r3
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	461d      	mov	r5, r3
 8004d00:	f04f 0600 	mov.w	r6, #0
 8004d04:	46a9      	mov	r9, r5
 8004d06:	46b2      	mov	sl, r6
 8004d08:	eb19 0309 	adds.w	r3, r9, r9
 8004d0c:	eb4a 040a 	adc.w	r4, sl, sl
 8004d10:	4699      	mov	r9, r3
 8004d12:	46a2      	mov	sl, r4
 8004d14:	eb19 0905 	adds.w	r9, r9, r5
 8004d18:	eb4a 0a06 	adc.w	sl, sl, r6
 8004d1c:	f04f 0100 	mov.w	r1, #0
 8004d20:	f04f 0200 	mov.w	r2, #0
 8004d24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d28:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004d2c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004d30:	4689      	mov	r9, r1
 8004d32:	4692      	mov	sl, r2
 8004d34:	eb19 0005 	adds.w	r0, r9, r5
 8004d38:	eb4a 0106 	adc.w	r1, sl, r6
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	461d      	mov	r5, r3
 8004d42:	f04f 0600 	mov.w	r6, #0
 8004d46:	196b      	adds	r3, r5, r5
 8004d48:	eb46 0406 	adc.w	r4, r6, r6
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	4623      	mov	r3, r4
 8004d50:	f7fb fa3a 	bl	80001c8 <__aeabi_uldivmod>
 8004d54:	4603      	mov	r3, r0
 8004d56:	460c      	mov	r4, r1
 8004d58:	461a      	mov	r2, r3
 8004d5a:	4b0c      	ldr	r3, [pc, #48]	; (8004d8c <UART_SetConfig+0x384>)
 8004d5c:	fba3 1302 	umull	r1, r3, r3, r2
 8004d60:	095b      	lsrs	r3, r3, #5
 8004d62:	2164      	movs	r1, #100	; 0x64
 8004d64:	fb01 f303 	mul.w	r3, r1, r3
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	00db      	lsls	r3, r3, #3
 8004d6c:	3332      	adds	r3, #50	; 0x32
 8004d6e:	4a07      	ldr	r2, [pc, #28]	; (8004d8c <UART_SetConfig+0x384>)
 8004d70:	fba2 2303 	umull	r2, r3, r2, r3
 8004d74:	095b      	lsrs	r3, r3, #5
 8004d76:	f003 0207 	and.w	r2, r3, #7
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4442      	add	r2, r8
 8004d80:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004d82:	e1b2      	b.n	80050ea <UART_SetConfig+0x6e2>
 8004d84:	40011000 	.word	0x40011000
 8004d88:	40011400 	.word	0x40011400
 8004d8c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4ad7      	ldr	r2, [pc, #860]	; (80050f4 <UART_SetConfig+0x6ec>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d005      	beq.n	8004da6 <UART_SetConfig+0x39e>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4ad6      	ldr	r2, [pc, #856]	; (80050f8 <UART_SetConfig+0x6f0>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	f040 80d1 	bne.w	8004f48 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004da6:	f7ff faa3 	bl	80042f0 <HAL_RCC_GetPCLK2Freq>
 8004daa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	469a      	mov	sl, r3
 8004db0:	f04f 0b00 	mov.w	fp, #0
 8004db4:	46d0      	mov	r8, sl
 8004db6:	46d9      	mov	r9, fp
 8004db8:	eb18 0308 	adds.w	r3, r8, r8
 8004dbc:	eb49 0409 	adc.w	r4, r9, r9
 8004dc0:	4698      	mov	r8, r3
 8004dc2:	46a1      	mov	r9, r4
 8004dc4:	eb18 080a 	adds.w	r8, r8, sl
 8004dc8:	eb49 090b 	adc.w	r9, r9, fp
 8004dcc:	f04f 0100 	mov.w	r1, #0
 8004dd0:	f04f 0200 	mov.w	r2, #0
 8004dd4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004dd8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004ddc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004de0:	4688      	mov	r8, r1
 8004de2:	4691      	mov	r9, r2
 8004de4:	eb1a 0508 	adds.w	r5, sl, r8
 8004de8:	eb4b 0609 	adc.w	r6, fp, r9
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	4619      	mov	r1, r3
 8004df2:	f04f 0200 	mov.w	r2, #0
 8004df6:	f04f 0300 	mov.w	r3, #0
 8004dfa:	f04f 0400 	mov.w	r4, #0
 8004dfe:	0094      	lsls	r4, r2, #2
 8004e00:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004e04:	008b      	lsls	r3, r1, #2
 8004e06:	461a      	mov	r2, r3
 8004e08:	4623      	mov	r3, r4
 8004e0a:	4628      	mov	r0, r5
 8004e0c:	4631      	mov	r1, r6
 8004e0e:	f7fb f9db 	bl	80001c8 <__aeabi_uldivmod>
 8004e12:	4603      	mov	r3, r0
 8004e14:	460c      	mov	r4, r1
 8004e16:	461a      	mov	r2, r3
 8004e18:	4bb8      	ldr	r3, [pc, #736]	; (80050fc <UART_SetConfig+0x6f4>)
 8004e1a:	fba3 2302 	umull	r2, r3, r3, r2
 8004e1e:	095b      	lsrs	r3, r3, #5
 8004e20:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	469b      	mov	fp, r3
 8004e28:	f04f 0c00 	mov.w	ip, #0
 8004e2c:	46d9      	mov	r9, fp
 8004e2e:	46e2      	mov	sl, ip
 8004e30:	eb19 0309 	adds.w	r3, r9, r9
 8004e34:	eb4a 040a 	adc.w	r4, sl, sl
 8004e38:	4699      	mov	r9, r3
 8004e3a:	46a2      	mov	sl, r4
 8004e3c:	eb19 090b 	adds.w	r9, r9, fp
 8004e40:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004e44:	f04f 0100 	mov.w	r1, #0
 8004e48:	f04f 0200 	mov.w	r2, #0
 8004e4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e50:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004e54:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004e58:	4689      	mov	r9, r1
 8004e5a:	4692      	mov	sl, r2
 8004e5c:	eb1b 0509 	adds.w	r5, fp, r9
 8004e60:	eb4c 060a 	adc.w	r6, ip, sl
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	4619      	mov	r1, r3
 8004e6a:	f04f 0200 	mov.w	r2, #0
 8004e6e:	f04f 0300 	mov.w	r3, #0
 8004e72:	f04f 0400 	mov.w	r4, #0
 8004e76:	0094      	lsls	r4, r2, #2
 8004e78:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004e7c:	008b      	lsls	r3, r1, #2
 8004e7e:	461a      	mov	r2, r3
 8004e80:	4623      	mov	r3, r4
 8004e82:	4628      	mov	r0, r5
 8004e84:	4631      	mov	r1, r6
 8004e86:	f7fb f99f 	bl	80001c8 <__aeabi_uldivmod>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	460c      	mov	r4, r1
 8004e8e:	461a      	mov	r2, r3
 8004e90:	4b9a      	ldr	r3, [pc, #616]	; (80050fc <UART_SetConfig+0x6f4>)
 8004e92:	fba3 1302 	umull	r1, r3, r3, r2
 8004e96:	095b      	lsrs	r3, r3, #5
 8004e98:	2164      	movs	r1, #100	; 0x64
 8004e9a:	fb01 f303 	mul.w	r3, r1, r3
 8004e9e:	1ad3      	subs	r3, r2, r3
 8004ea0:	011b      	lsls	r3, r3, #4
 8004ea2:	3332      	adds	r3, #50	; 0x32
 8004ea4:	4a95      	ldr	r2, [pc, #596]	; (80050fc <UART_SetConfig+0x6f4>)
 8004ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eaa:	095b      	lsrs	r3, r3, #5
 8004eac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004eb0:	4498      	add	r8, r3
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	469b      	mov	fp, r3
 8004eb6:	f04f 0c00 	mov.w	ip, #0
 8004eba:	46d9      	mov	r9, fp
 8004ebc:	46e2      	mov	sl, ip
 8004ebe:	eb19 0309 	adds.w	r3, r9, r9
 8004ec2:	eb4a 040a 	adc.w	r4, sl, sl
 8004ec6:	4699      	mov	r9, r3
 8004ec8:	46a2      	mov	sl, r4
 8004eca:	eb19 090b 	adds.w	r9, r9, fp
 8004ece:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004ed2:	f04f 0100 	mov.w	r1, #0
 8004ed6:	f04f 0200 	mov.w	r2, #0
 8004eda:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ede:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004ee2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004ee6:	4689      	mov	r9, r1
 8004ee8:	4692      	mov	sl, r2
 8004eea:	eb1b 0509 	adds.w	r5, fp, r9
 8004eee:	eb4c 060a 	adc.w	r6, ip, sl
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	4619      	mov	r1, r3
 8004ef8:	f04f 0200 	mov.w	r2, #0
 8004efc:	f04f 0300 	mov.w	r3, #0
 8004f00:	f04f 0400 	mov.w	r4, #0
 8004f04:	0094      	lsls	r4, r2, #2
 8004f06:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004f0a:	008b      	lsls	r3, r1, #2
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	4623      	mov	r3, r4
 8004f10:	4628      	mov	r0, r5
 8004f12:	4631      	mov	r1, r6
 8004f14:	f7fb f958 	bl	80001c8 <__aeabi_uldivmod>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	460c      	mov	r4, r1
 8004f1c:	461a      	mov	r2, r3
 8004f1e:	4b77      	ldr	r3, [pc, #476]	; (80050fc <UART_SetConfig+0x6f4>)
 8004f20:	fba3 1302 	umull	r1, r3, r3, r2
 8004f24:	095b      	lsrs	r3, r3, #5
 8004f26:	2164      	movs	r1, #100	; 0x64
 8004f28:	fb01 f303 	mul.w	r3, r1, r3
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	011b      	lsls	r3, r3, #4
 8004f30:	3332      	adds	r3, #50	; 0x32
 8004f32:	4a72      	ldr	r2, [pc, #456]	; (80050fc <UART_SetConfig+0x6f4>)
 8004f34:	fba2 2303 	umull	r2, r3, r2, r3
 8004f38:	095b      	lsrs	r3, r3, #5
 8004f3a:	f003 020f 	and.w	r2, r3, #15
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4442      	add	r2, r8
 8004f44:	609a      	str	r2, [r3, #8]
 8004f46:	e0d0      	b.n	80050ea <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004f48:	f7ff f9be 	bl	80042c8 <HAL_RCC_GetPCLK1Freq>
 8004f4c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	469a      	mov	sl, r3
 8004f52:	f04f 0b00 	mov.w	fp, #0
 8004f56:	46d0      	mov	r8, sl
 8004f58:	46d9      	mov	r9, fp
 8004f5a:	eb18 0308 	adds.w	r3, r8, r8
 8004f5e:	eb49 0409 	adc.w	r4, r9, r9
 8004f62:	4698      	mov	r8, r3
 8004f64:	46a1      	mov	r9, r4
 8004f66:	eb18 080a 	adds.w	r8, r8, sl
 8004f6a:	eb49 090b 	adc.w	r9, r9, fp
 8004f6e:	f04f 0100 	mov.w	r1, #0
 8004f72:	f04f 0200 	mov.w	r2, #0
 8004f76:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004f7a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004f7e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004f82:	4688      	mov	r8, r1
 8004f84:	4691      	mov	r9, r2
 8004f86:	eb1a 0508 	adds.w	r5, sl, r8
 8004f8a:	eb4b 0609 	adc.w	r6, fp, r9
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	4619      	mov	r1, r3
 8004f94:	f04f 0200 	mov.w	r2, #0
 8004f98:	f04f 0300 	mov.w	r3, #0
 8004f9c:	f04f 0400 	mov.w	r4, #0
 8004fa0:	0094      	lsls	r4, r2, #2
 8004fa2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004fa6:	008b      	lsls	r3, r1, #2
 8004fa8:	461a      	mov	r2, r3
 8004faa:	4623      	mov	r3, r4
 8004fac:	4628      	mov	r0, r5
 8004fae:	4631      	mov	r1, r6
 8004fb0:	f7fb f90a 	bl	80001c8 <__aeabi_uldivmod>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	460c      	mov	r4, r1
 8004fb8:	461a      	mov	r2, r3
 8004fba:	4b50      	ldr	r3, [pc, #320]	; (80050fc <UART_SetConfig+0x6f4>)
 8004fbc:	fba3 2302 	umull	r2, r3, r3, r2
 8004fc0:	095b      	lsrs	r3, r3, #5
 8004fc2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	469b      	mov	fp, r3
 8004fca:	f04f 0c00 	mov.w	ip, #0
 8004fce:	46d9      	mov	r9, fp
 8004fd0:	46e2      	mov	sl, ip
 8004fd2:	eb19 0309 	adds.w	r3, r9, r9
 8004fd6:	eb4a 040a 	adc.w	r4, sl, sl
 8004fda:	4699      	mov	r9, r3
 8004fdc:	46a2      	mov	sl, r4
 8004fde:	eb19 090b 	adds.w	r9, r9, fp
 8004fe2:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004fe6:	f04f 0100 	mov.w	r1, #0
 8004fea:	f04f 0200 	mov.w	r2, #0
 8004fee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ff2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004ff6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004ffa:	4689      	mov	r9, r1
 8004ffc:	4692      	mov	sl, r2
 8004ffe:	eb1b 0509 	adds.w	r5, fp, r9
 8005002:	eb4c 060a 	adc.w	r6, ip, sl
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	4619      	mov	r1, r3
 800500c:	f04f 0200 	mov.w	r2, #0
 8005010:	f04f 0300 	mov.w	r3, #0
 8005014:	f04f 0400 	mov.w	r4, #0
 8005018:	0094      	lsls	r4, r2, #2
 800501a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800501e:	008b      	lsls	r3, r1, #2
 8005020:	461a      	mov	r2, r3
 8005022:	4623      	mov	r3, r4
 8005024:	4628      	mov	r0, r5
 8005026:	4631      	mov	r1, r6
 8005028:	f7fb f8ce 	bl	80001c8 <__aeabi_uldivmod>
 800502c:	4603      	mov	r3, r0
 800502e:	460c      	mov	r4, r1
 8005030:	461a      	mov	r2, r3
 8005032:	4b32      	ldr	r3, [pc, #200]	; (80050fc <UART_SetConfig+0x6f4>)
 8005034:	fba3 1302 	umull	r1, r3, r3, r2
 8005038:	095b      	lsrs	r3, r3, #5
 800503a:	2164      	movs	r1, #100	; 0x64
 800503c:	fb01 f303 	mul.w	r3, r1, r3
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	011b      	lsls	r3, r3, #4
 8005044:	3332      	adds	r3, #50	; 0x32
 8005046:	4a2d      	ldr	r2, [pc, #180]	; (80050fc <UART_SetConfig+0x6f4>)
 8005048:	fba2 2303 	umull	r2, r3, r2, r3
 800504c:	095b      	lsrs	r3, r3, #5
 800504e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005052:	4498      	add	r8, r3
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	469b      	mov	fp, r3
 8005058:	f04f 0c00 	mov.w	ip, #0
 800505c:	46d9      	mov	r9, fp
 800505e:	46e2      	mov	sl, ip
 8005060:	eb19 0309 	adds.w	r3, r9, r9
 8005064:	eb4a 040a 	adc.w	r4, sl, sl
 8005068:	4699      	mov	r9, r3
 800506a:	46a2      	mov	sl, r4
 800506c:	eb19 090b 	adds.w	r9, r9, fp
 8005070:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005074:	f04f 0100 	mov.w	r1, #0
 8005078:	f04f 0200 	mov.w	r2, #0
 800507c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005080:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005084:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005088:	4689      	mov	r9, r1
 800508a:	4692      	mov	sl, r2
 800508c:	eb1b 0509 	adds.w	r5, fp, r9
 8005090:	eb4c 060a 	adc.w	r6, ip, sl
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	4619      	mov	r1, r3
 800509a:	f04f 0200 	mov.w	r2, #0
 800509e:	f04f 0300 	mov.w	r3, #0
 80050a2:	f04f 0400 	mov.w	r4, #0
 80050a6:	0094      	lsls	r4, r2, #2
 80050a8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80050ac:	008b      	lsls	r3, r1, #2
 80050ae:	461a      	mov	r2, r3
 80050b0:	4623      	mov	r3, r4
 80050b2:	4628      	mov	r0, r5
 80050b4:	4631      	mov	r1, r6
 80050b6:	f7fb f887 	bl	80001c8 <__aeabi_uldivmod>
 80050ba:	4603      	mov	r3, r0
 80050bc:	460c      	mov	r4, r1
 80050be:	461a      	mov	r2, r3
 80050c0:	4b0e      	ldr	r3, [pc, #56]	; (80050fc <UART_SetConfig+0x6f4>)
 80050c2:	fba3 1302 	umull	r1, r3, r3, r2
 80050c6:	095b      	lsrs	r3, r3, #5
 80050c8:	2164      	movs	r1, #100	; 0x64
 80050ca:	fb01 f303 	mul.w	r3, r1, r3
 80050ce:	1ad3      	subs	r3, r2, r3
 80050d0:	011b      	lsls	r3, r3, #4
 80050d2:	3332      	adds	r3, #50	; 0x32
 80050d4:	4a09      	ldr	r2, [pc, #36]	; (80050fc <UART_SetConfig+0x6f4>)
 80050d6:	fba2 2303 	umull	r2, r3, r2, r3
 80050da:	095b      	lsrs	r3, r3, #5
 80050dc:	f003 020f 	and.w	r2, r3, #15
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4442      	add	r2, r8
 80050e6:	609a      	str	r2, [r3, #8]
}
 80050e8:	e7ff      	b.n	80050ea <UART_SetConfig+0x6e2>
 80050ea:	bf00      	nop
 80050ec:	3714      	adds	r7, #20
 80050ee:	46bd      	mov	sp, r7
 80050f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050f4:	40011000 	.word	0x40011000
 80050f8:	40011400 	.word	0x40011400
 80050fc:	51eb851f 	.word	0x51eb851f

08005100 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005100:	b084      	sub	sp, #16
 8005102:	b580      	push	{r7, lr}
 8005104:	b084      	sub	sp, #16
 8005106:	af00      	add	r7, sp, #0
 8005108:	6078      	str	r0, [r7, #4]
 800510a:	f107 001c 	add.w	r0, r7, #28
 800510e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005114:	2b01      	cmp	r3, #1
 8005116:	d122      	bne.n	800515e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800511c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800512c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005140:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005142:	2b01      	cmp	r3, #1
 8005144:	d105      	bne.n	8005152 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	68db      	ldr	r3, [r3, #12]
 800514a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 f94a 	bl	80053ec <USB_CoreReset>
 8005158:	4603      	mov	r3, r0
 800515a:	73fb      	strb	r3, [r7, #15]
 800515c:	e01a      	b.n	8005194 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f000 f93e 	bl	80053ec <USB_CoreReset>
 8005170:	4603      	mov	r3, r0
 8005172:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005174:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005176:	2b00      	cmp	r3, #0
 8005178:	d106      	bne.n	8005188 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800517e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	639a      	str	r2, [r3, #56]	; 0x38
 8005186:	e005      	b.n	8005194 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800518c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005196:	2b01      	cmp	r3, #1
 8005198:	d10b      	bne.n	80051b2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	f043 0206 	orr.w	r2, r3, #6
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	f043 0220 	orr.w	r2, r3, #32
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80051b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3710      	adds	r7, #16
 80051b8:	46bd      	mov	sp, r7
 80051ba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80051be:	b004      	add	sp, #16
 80051c0:	4770      	bx	lr

080051c2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80051c2:	b480      	push	{r7}
 80051c4:	b083      	sub	sp, #12
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	f043 0201 	orr.w	r2, r3, #1
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80051d6:	2300      	movs	r3, #0
}
 80051d8:	4618      	mov	r0, r3
 80051da:	370c      	adds	r7, #12
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr

080051e4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	f023 0201 	bic.w	r2, r3, #1
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80051f8:	2300      	movs	r3, #0
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	370c      	adds	r7, #12
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr

08005206 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005206:	b580      	push	{r7, lr}
 8005208:	b082      	sub	sp, #8
 800520a:	af00      	add	r7, sp, #0
 800520c:	6078      	str	r0, [r7, #4]
 800520e:	460b      	mov	r3, r1
 8005210:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800521e:	78fb      	ldrb	r3, [r7, #3]
 8005220:	2b01      	cmp	r3, #1
 8005222:	d106      	bne.n	8005232 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	60da      	str	r2, [r3, #12]
 8005230:	e00b      	b.n	800524a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005232:	78fb      	ldrb	r3, [r7, #3]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d106      	bne.n	8005246 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	60da      	str	r2, [r3, #12]
 8005244:	e001      	b.n	800524a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e003      	b.n	8005252 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800524a:	2032      	movs	r0, #50	; 0x32
 800524c:	f7fb fe52 	bl	8000ef4 <HAL_Delay>

  return HAL_OK;
 8005250:	2300      	movs	r3, #0
}
 8005252:	4618      	mov	r0, r3
 8005254:	3708      	adds	r7, #8
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
	...

0800525c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800525c:	b480      	push	{r7}
 800525e:	b085      	sub	sp, #20
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005266:	2300      	movs	r3, #0
 8005268:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	019b      	lsls	r3, r3, #6
 800526e:	f043 0220 	orr.w	r2, r3, #32
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	3301      	adds	r3, #1
 800527a:	60fb      	str	r3, [r7, #12]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	4a09      	ldr	r2, [pc, #36]	; (80052a4 <USB_FlushTxFifo+0x48>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d901      	bls.n	8005288 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005284:	2303      	movs	r3, #3
 8005286:	e006      	b.n	8005296 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	691b      	ldr	r3, [r3, #16]
 800528c:	f003 0320 	and.w	r3, r3, #32
 8005290:	2b20      	cmp	r3, #32
 8005292:	d0f0      	beq.n	8005276 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005294:	2300      	movs	r3, #0
}
 8005296:	4618      	mov	r0, r3
 8005298:	3714      	adds	r7, #20
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr
 80052a2:	bf00      	nop
 80052a4:	00030d40 	.word	0x00030d40

080052a8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b085      	sub	sp, #20
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80052b0:	2300      	movs	r3, #0
 80052b2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2210      	movs	r2, #16
 80052b8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	3301      	adds	r3, #1
 80052be:	60fb      	str	r3, [r7, #12]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	4a09      	ldr	r2, [pc, #36]	; (80052e8 <USB_FlushRxFifo+0x40>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d901      	bls.n	80052cc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80052c8:	2303      	movs	r3, #3
 80052ca:	e006      	b.n	80052da <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	691b      	ldr	r3, [r3, #16]
 80052d0:	f003 0310 	and.w	r3, r3, #16
 80052d4:	2b10      	cmp	r3, #16
 80052d6:	d0f0      	beq.n	80052ba <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80052d8:	2300      	movs	r3, #0
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3714      	adds	r7, #20
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr
 80052e6:	bf00      	nop
 80052e8:	00030d40 	.word	0x00030d40

080052ec <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b089      	sub	sp, #36	; 0x24
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	60f8      	str	r0, [r7, #12]
 80052f4:	60b9      	str	r1, [r7, #8]
 80052f6:	4611      	mov	r1, r2
 80052f8:	461a      	mov	r2, r3
 80052fa:	460b      	mov	r3, r1
 80052fc:	71fb      	strb	r3, [r7, #7]
 80052fe:	4613      	mov	r3, r2
 8005300:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800530a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800530e:	2b00      	cmp	r3, #0
 8005310:	d11a      	bne.n	8005348 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005312:	88bb      	ldrh	r3, [r7, #4]
 8005314:	3303      	adds	r3, #3
 8005316:	089b      	lsrs	r3, r3, #2
 8005318:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800531a:	2300      	movs	r3, #0
 800531c:	61bb      	str	r3, [r7, #24]
 800531e:	e00f      	b.n	8005340 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005320:	79fb      	ldrb	r3, [r7, #7]
 8005322:	031a      	lsls	r2, r3, #12
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	4413      	add	r3, r2
 8005328:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800532c:	461a      	mov	r2, r3
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005334:	69fb      	ldr	r3, [r7, #28]
 8005336:	3304      	adds	r3, #4
 8005338:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800533a:	69bb      	ldr	r3, [r7, #24]
 800533c:	3301      	adds	r3, #1
 800533e:	61bb      	str	r3, [r7, #24]
 8005340:	69ba      	ldr	r2, [r7, #24]
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	429a      	cmp	r2, r3
 8005346:	d3eb      	bcc.n	8005320 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005348:	2300      	movs	r3, #0
}
 800534a:	4618      	mov	r0, r3
 800534c:	3724      	adds	r7, #36	; 0x24
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr

08005356 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005356:	b480      	push	{r7}
 8005358:	b089      	sub	sp, #36	; 0x24
 800535a:	af00      	add	r7, sp, #0
 800535c:	60f8      	str	r0, [r7, #12]
 800535e:	60b9      	str	r1, [r7, #8]
 8005360:	4613      	mov	r3, r2
 8005362:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800536c:	88fb      	ldrh	r3, [r7, #6]
 800536e:	3303      	adds	r3, #3
 8005370:	089b      	lsrs	r3, r3, #2
 8005372:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005374:	2300      	movs	r3, #0
 8005376:	61bb      	str	r3, [r7, #24]
 8005378:	e00b      	b.n	8005392 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	69fb      	ldr	r3, [r7, #28]
 8005384:	601a      	str	r2, [r3, #0]
    pDest++;
 8005386:	69fb      	ldr	r3, [r7, #28]
 8005388:	3304      	adds	r3, #4
 800538a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800538c:	69bb      	ldr	r3, [r7, #24]
 800538e:	3301      	adds	r3, #1
 8005390:	61bb      	str	r3, [r7, #24]
 8005392:	69ba      	ldr	r2, [r7, #24]
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	429a      	cmp	r2, r3
 8005398:	d3ef      	bcc.n	800537a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800539a:	69fb      	ldr	r3, [r7, #28]
}
 800539c:	4618      	mov	r0, r3
 800539e:	3724      	adds	r7, #36	; 0x24
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr

080053a8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b085      	sub	sp, #20
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	695b      	ldr	r3, [r3, #20]
 80053b4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	699b      	ldr	r3, [r3, #24]
 80053ba:	68fa      	ldr	r2, [r7, #12]
 80053bc:	4013      	ands	r3, r2
 80053be:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80053c0:	68fb      	ldr	r3, [r7, #12]
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3714      	adds	r7, #20
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr

080053ce <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80053ce:	b480      	push	{r7}
 80053d0:	b083      	sub	sp, #12
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	695b      	ldr	r3, [r3, #20]
 80053da:	f003 0301 	and.w	r3, r3, #1
}
 80053de:	4618      	mov	r0, r3
 80053e0:	370c      	adds	r7, #12
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr
	...

080053ec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b085      	sub	sp, #20
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80053f4:	2300      	movs	r3, #0
 80053f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	3301      	adds	r3, #1
 80053fc:	60fb      	str	r3, [r7, #12]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	4a13      	ldr	r2, [pc, #76]	; (8005450 <USB_CoreReset+0x64>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d901      	bls.n	800540a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005406:	2303      	movs	r3, #3
 8005408:	e01b      	b.n	8005442 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	2b00      	cmp	r3, #0
 8005410:	daf2      	bge.n	80053f8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005412:	2300      	movs	r3, #0
 8005414:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	691b      	ldr	r3, [r3, #16]
 800541a:	f043 0201 	orr.w	r2, r3, #1
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	3301      	adds	r3, #1
 8005426:	60fb      	str	r3, [r7, #12]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	4a09      	ldr	r2, [pc, #36]	; (8005450 <USB_CoreReset+0x64>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d901      	bls.n	8005434 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005430:	2303      	movs	r3, #3
 8005432:	e006      	b.n	8005442 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	691b      	ldr	r3, [r3, #16]
 8005438:	f003 0301 	and.w	r3, r3, #1
 800543c:	2b01      	cmp	r3, #1
 800543e:	d0f0      	beq.n	8005422 <USB_CoreReset+0x36>

  return HAL_OK;
 8005440:	2300      	movs	r3, #0
}
 8005442:	4618      	mov	r0, r3
 8005444:	3714      	adds	r7, #20
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr
 800544e:	bf00      	nop
 8005450:	00030d40 	.word	0x00030d40

08005454 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005454:	b084      	sub	sp, #16
 8005456:	b580      	push	{r7, lr}
 8005458:	b084      	sub	sp, #16
 800545a:	af00      	add	r7, sp, #0
 800545c:	6078      	str	r0, [r7, #4]
 800545e:	f107 001c 	add.w	r0, r7, #28
 8005462:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005470:	461a      	mov	r2, r3
 8005472:	2300      	movs	r3, #0
 8005474:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800547a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005486:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005492:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800549e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d018      	beq.n	80054d8 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80054a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d10a      	bne.n	80054c2 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	68ba      	ldr	r2, [r7, #8]
 80054b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80054ba:	f043 0304 	orr.w	r3, r3, #4
 80054be:	6013      	str	r3, [r2, #0]
 80054c0:	e014      	b.n	80054ec <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	68ba      	ldr	r2, [r7, #8]
 80054cc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80054d0:	f023 0304 	bic.w	r3, r3, #4
 80054d4:	6013      	str	r3, [r2, #0]
 80054d6:	e009      	b.n	80054ec <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	68ba      	ldr	r2, [r7, #8]
 80054e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80054e6:	f023 0304 	bic.w	r3, r3, #4
 80054ea:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80054ec:	2110      	movs	r1, #16
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f7ff feb4 	bl	800525c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f7ff fed7 	bl	80052a8 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80054fa:	2300      	movs	r3, #0
 80054fc:	60fb      	str	r3, [r7, #12]
 80054fe:	e015      	b.n	800552c <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	015a      	lsls	r2, r3, #5
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	4413      	add	r3, r2
 8005508:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800550c:	461a      	mov	r2, r3
 800550e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005512:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	015a      	lsls	r2, r3, #5
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	4413      	add	r3, r2
 800551c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005520:	461a      	mov	r2, r3
 8005522:	2300      	movs	r3, #0
 8005524:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	3301      	adds	r3, #1
 800552a:	60fb      	str	r3, [r7, #12]
 800552c:	6a3b      	ldr	r3, [r7, #32]
 800552e:	68fa      	ldr	r2, [r7, #12]
 8005530:	429a      	cmp	r2, r3
 8005532:	d3e5      	bcc.n	8005500 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8005534:	2101      	movs	r1, #1
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f000 f8ac 	bl	8005694 <USB_DriveVbus>

  HAL_Delay(200U);
 800553c:	20c8      	movs	r0, #200	; 0xc8
 800553e:	f7fb fcd9 	bl	8000ef4 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800554e:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005558:	2b00      	cmp	r3, #0
 800555a:	d00b      	beq.n	8005574 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005562:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	4a14      	ldr	r2, [pc, #80]	; (80055b8 <USB_HostInit+0x164>)
 8005568:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a13      	ldr	r2, [pc, #76]	; (80055bc <USB_HostInit+0x168>)
 800556e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005572:	e009      	b.n	8005588 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2280      	movs	r2, #128	; 0x80
 8005578:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a10      	ldr	r2, [pc, #64]	; (80055c0 <USB_HostInit+0x16c>)
 800557e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	4a10      	ldr	r2, [pc, #64]	; (80055c4 <USB_HostInit+0x170>)
 8005584:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800558a:	2b00      	cmp	r3, #0
 800558c:	d105      	bne.n	800559a <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	699b      	ldr	r3, [r3, #24]
 8005592:	f043 0210 	orr.w	r2, r3, #16
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	699a      	ldr	r2, [r3, #24]
 800559e:	4b0a      	ldr	r3, [pc, #40]	; (80055c8 <USB_HostInit+0x174>)
 80055a0:	4313      	orrs	r3, r2
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80055a6:	2300      	movs	r3, #0
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3710      	adds	r7, #16
 80055ac:	46bd      	mov	sp, r7
 80055ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80055b2:	b004      	add	sp, #16
 80055b4:	4770      	bx	lr
 80055b6:	bf00      	nop
 80055b8:	01000200 	.word	0x01000200
 80055bc:	00e00300 	.word	0x00e00300
 80055c0:	00600080 	.word	0x00600080
 80055c4:	004000e0 	.word	0x004000e0
 80055c8:	a3200008 	.word	0xa3200008

080055cc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b085      	sub	sp, #20
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	460b      	mov	r3, r1
 80055d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	68fa      	ldr	r2, [r7, #12]
 80055e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80055ea:	f023 0303 	bic.w	r3, r3, #3
 80055ee:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	78fb      	ldrb	r3, [r7, #3]
 80055fa:	f003 0303 	and.w	r3, r3, #3
 80055fe:	68f9      	ldr	r1, [r7, #12]
 8005600:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005604:	4313      	orrs	r3, r2
 8005606:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005608:	78fb      	ldrb	r3, [r7, #3]
 800560a:	2b01      	cmp	r3, #1
 800560c:	d107      	bne.n	800561e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005614:	461a      	mov	r2, r3
 8005616:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800561a:	6053      	str	r3, [r2, #4]
 800561c:	e009      	b.n	8005632 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800561e:	78fb      	ldrb	r3, [r7, #3]
 8005620:	2b02      	cmp	r3, #2
 8005622:	d106      	bne.n	8005632 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800562a:	461a      	mov	r2, r3
 800562c:	f241 7370 	movw	r3, #6000	; 0x1770
 8005630:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005632:	2300      	movs	r3, #0
}
 8005634:	4618      	mov	r0, r3
 8005636:	3714      	adds	r7, #20
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr

08005640 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b084      	sub	sp, #16
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800564c:	2300      	movs	r3, #0
 800564e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005660:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	68fa      	ldr	r2, [r7, #12]
 8005666:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800566a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800566e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005670:	2064      	movs	r0, #100	; 0x64
 8005672:	f7fb fc3f 	bl	8000ef4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	68fa      	ldr	r2, [r7, #12]
 800567a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800567e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005682:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005684:	200a      	movs	r0, #10
 8005686:	f7fb fc35 	bl	8000ef4 <HAL_Delay>

  return HAL_OK;
 800568a:	2300      	movs	r3, #0
}
 800568c:	4618      	mov	r0, r3
 800568e:	3710      	adds	r7, #16
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}

08005694 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005694:	b480      	push	{r7}
 8005696:	b085      	sub	sp, #20
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	460b      	mov	r3, r1
 800569e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80056a4:	2300      	movs	r3, #0
 80056a6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80056b8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d109      	bne.n	80056d8 <USB_DriveVbus+0x44>
 80056c4:	78fb      	ldrb	r3, [r7, #3]
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d106      	bne.n	80056d8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	68fa      	ldr	r2, [r7, #12]
 80056ce:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80056d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80056d6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80056de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056e2:	d109      	bne.n	80056f8 <USB_DriveVbus+0x64>
 80056e4:	78fb      	ldrb	r3, [r7, #3]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d106      	bne.n	80056f8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	68fa      	ldr	r2, [r7, #12]
 80056ee:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80056f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80056f6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80056f8:	2300      	movs	r3, #0
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3714      	adds	r7, #20
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr

08005706 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005706:	b480      	push	{r7}
 8005708:	b085      	sub	sp, #20
 800570a:	af00      	add	r7, sp, #0
 800570c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005712:	2300      	movs	r3, #0
 8005714:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	0c5b      	lsrs	r3, r3, #17
 8005724:	f003 0303 	and.w	r3, r3, #3
}
 8005728:	4618      	mov	r0, r3
 800572a:	3714      	adds	r7, #20
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr

08005734 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005734:	b480      	push	{r7}
 8005736:	b085      	sub	sp, #20
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	b29b      	uxth	r3, r3
}
 800574a:	4618      	mov	r0, r3
 800574c:	3714      	adds	r7, #20
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr
	...

08005758 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8005758:	b480      	push	{r7}
 800575a:	b087      	sub	sp, #28
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	4608      	mov	r0, r1
 8005762:	4611      	mov	r1, r2
 8005764:	461a      	mov	r2, r3
 8005766:	4603      	mov	r3, r0
 8005768:	70fb      	strb	r3, [r7, #3]
 800576a:	460b      	mov	r3, r1
 800576c:	70bb      	strb	r3, [r7, #2]
 800576e:	4613      	mov	r3, r2
 8005770:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005772:	2300      	movs	r3, #0
 8005774:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800577a:	78fb      	ldrb	r3, [r7, #3]
 800577c:	015a      	lsls	r2, r3, #5
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	4413      	add	r3, r2
 8005782:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005786:	461a      	mov	r2, r3
 8005788:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800578c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800578e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005792:	2b03      	cmp	r3, #3
 8005794:	d87e      	bhi.n	8005894 <USB_HC_Init+0x13c>
 8005796:	a201      	add	r2, pc, #4	; (adr r2, 800579c <USB_HC_Init+0x44>)
 8005798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800579c:	080057ad 	.word	0x080057ad
 80057a0:	08005857 	.word	0x08005857
 80057a4:	080057ad 	.word	0x080057ad
 80057a8:	08005819 	.word	0x08005819
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80057ac:	78fb      	ldrb	r3, [r7, #3]
 80057ae:	015a      	lsls	r2, r3, #5
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	4413      	add	r3, r2
 80057b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057b8:	461a      	mov	r2, r3
 80057ba:	f240 439d 	movw	r3, #1181	; 0x49d
 80057be:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80057c0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	da10      	bge.n	80057ea <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80057c8:	78fb      	ldrb	r3, [r7, #3]
 80057ca:	015a      	lsls	r2, r3, #5
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	4413      	add	r3, r2
 80057d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057d4:	68db      	ldr	r3, [r3, #12]
 80057d6:	78fa      	ldrb	r2, [r7, #3]
 80057d8:	0151      	lsls	r1, r2, #5
 80057da:	68ba      	ldr	r2, [r7, #8]
 80057dc:	440a      	add	r2, r1
 80057de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057e6:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 80057e8:	e057      	b.n	800589a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d051      	beq.n	800589a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80057f6:	78fb      	ldrb	r3, [r7, #3]
 80057f8:	015a      	lsls	r2, r3, #5
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	4413      	add	r3, r2
 80057fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	78fa      	ldrb	r2, [r7, #3]
 8005806:	0151      	lsls	r1, r2, #5
 8005808:	68ba      	ldr	r2, [r7, #8]
 800580a:	440a      	add	r2, r1
 800580c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005810:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005814:	60d3      	str	r3, [r2, #12]
      break;
 8005816:	e040      	b.n	800589a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005818:	78fb      	ldrb	r3, [r7, #3]
 800581a:	015a      	lsls	r2, r3, #5
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	4413      	add	r3, r2
 8005820:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005824:	461a      	mov	r2, r3
 8005826:	f240 639d 	movw	r3, #1693	; 0x69d
 800582a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800582c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005830:	2b00      	cmp	r3, #0
 8005832:	da34      	bge.n	800589e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005834:	78fb      	ldrb	r3, [r7, #3]
 8005836:	015a      	lsls	r2, r3, #5
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	4413      	add	r3, r2
 800583c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	78fa      	ldrb	r2, [r7, #3]
 8005844:	0151      	lsls	r1, r2, #5
 8005846:	68ba      	ldr	r2, [r7, #8]
 8005848:	440a      	add	r2, r1
 800584a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800584e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005852:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005854:	e023      	b.n	800589e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005856:	78fb      	ldrb	r3, [r7, #3]
 8005858:	015a      	lsls	r2, r3, #5
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	4413      	add	r3, r2
 800585e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005862:	461a      	mov	r2, r3
 8005864:	f240 2325 	movw	r3, #549	; 0x225
 8005868:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800586a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800586e:	2b00      	cmp	r3, #0
 8005870:	da17      	bge.n	80058a2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005872:	78fb      	ldrb	r3, [r7, #3]
 8005874:	015a      	lsls	r2, r3, #5
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	4413      	add	r3, r2
 800587a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800587e:	68db      	ldr	r3, [r3, #12]
 8005880:	78fa      	ldrb	r2, [r7, #3]
 8005882:	0151      	lsls	r1, r2, #5
 8005884:	68ba      	ldr	r2, [r7, #8]
 8005886:	440a      	add	r2, r1
 8005888:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800588c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005890:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005892:	e006      	b.n	80058a2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	75fb      	strb	r3, [r7, #23]
      break;
 8005898:	e004      	b.n	80058a4 <USB_HC_Init+0x14c>
      break;
 800589a:	bf00      	nop
 800589c:	e002      	b.n	80058a4 <USB_HC_Init+0x14c>
      break;
 800589e:	bf00      	nop
 80058a0:	e000      	b.n	80058a4 <USB_HC_Init+0x14c>
      break;
 80058a2:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058aa:	699a      	ldr	r2, [r3, #24]
 80058ac:	78fb      	ldrb	r3, [r7, #3]
 80058ae:	f003 030f 	and.w	r3, r3, #15
 80058b2:	2101      	movs	r1, #1
 80058b4:	fa01 f303 	lsl.w	r3, r1, r3
 80058b8:	68b9      	ldr	r1, [r7, #8]
 80058ba:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80058be:	4313      	orrs	r3, r2
 80058c0:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	699b      	ldr	r3, [r3, #24]
 80058c6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80058ce:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	da03      	bge.n	80058de <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80058d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058da:	613b      	str	r3, [r7, #16]
 80058dc:	e001      	b.n	80058e2 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80058de:	2300      	movs	r3, #0
 80058e0:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 80058e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80058e6:	2b02      	cmp	r3, #2
 80058e8:	d103      	bne.n	80058f2 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80058ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80058ee:	60fb      	str	r3, [r7, #12]
 80058f0:	e001      	b.n	80058f6 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80058f2:	2300      	movs	r3, #0
 80058f4:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80058f6:	787b      	ldrb	r3, [r7, #1]
 80058f8:	059b      	lsls	r3, r3, #22
 80058fa:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80058fe:	78bb      	ldrb	r3, [r7, #2]
 8005900:	02db      	lsls	r3, r3, #11
 8005902:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005906:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005908:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800590c:	049b      	lsls	r3, r3, #18
 800590e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005912:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005914:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005916:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800591a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005920:	78fb      	ldrb	r3, [r7, #3]
 8005922:	0159      	lsls	r1, r3, #5
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	440b      	add	r3, r1
 8005928:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800592c:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005932:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8005934:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005938:	2b03      	cmp	r3, #3
 800593a:	d10f      	bne.n	800595c <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800593c:	78fb      	ldrb	r3, [r7, #3]
 800593e:	015a      	lsls	r2, r3, #5
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	4413      	add	r3, r2
 8005944:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	78fa      	ldrb	r2, [r7, #3]
 800594c:	0151      	lsls	r1, r2, #5
 800594e:	68ba      	ldr	r2, [r7, #8]
 8005950:	440a      	add	r2, r1
 8005952:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005956:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800595a:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800595c:	7dfb      	ldrb	r3, [r7, #23]
}
 800595e:	4618      	mov	r0, r3
 8005960:	371c      	adds	r7, #28
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr
 800596a:	bf00      	nop

0800596c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b08c      	sub	sp, #48	; 0x30
 8005970:	af02      	add	r7, sp, #8
 8005972:	60f8      	str	r0, [r7, #12]
 8005974:	60b9      	str	r1, [r7, #8]
 8005976:	4613      	mov	r3, r2
 8005978:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	785b      	ldrb	r3, [r3, #1]
 8005982:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005984:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005988:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800598e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005992:	2b00      	cmp	r3, #0
 8005994:	d028      	beq.n	80059e8 <USB_HC_StartXfer+0x7c>
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	791b      	ldrb	r3, [r3, #4]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d124      	bne.n	80059e8 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 800599e:	79fb      	ldrb	r3, [r7, #7]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d10b      	bne.n	80059bc <USB_HC_StartXfer+0x50>
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	795b      	ldrb	r3, [r3, #5]
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d107      	bne.n	80059bc <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	785b      	ldrb	r3, [r3, #1]
 80059b0:	4619      	mov	r1, r3
 80059b2:	68f8      	ldr	r0, [r7, #12]
 80059b4:	f000 fa2e 	bl	8005e14 <USB_DoPing>
      return HAL_OK;
 80059b8:	2300      	movs	r3, #0
 80059ba:	e112      	b.n	8005be2 <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 80059bc:	79fb      	ldrb	r3, [r7, #7]
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d112      	bne.n	80059e8 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80059c2:	69fb      	ldr	r3, [r7, #28]
 80059c4:	015a      	lsls	r2, r3, #5
 80059c6:	6a3b      	ldr	r3, [r7, #32]
 80059c8:	4413      	add	r3, r2
 80059ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059ce:	68db      	ldr	r3, [r3, #12]
 80059d0:	69fa      	ldr	r2, [r7, #28]
 80059d2:	0151      	lsls	r1, r2, #5
 80059d4:	6a3a      	ldr	r2, [r7, #32]
 80059d6:	440a      	add	r2, r1
 80059d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059dc:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80059e0:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	2200      	movs	r2, #0
 80059e6:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	691b      	ldr	r3, [r3, #16]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d018      	beq.n	8005a22 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	691b      	ldr	r3, [r3, #16]
 80059f4:	68ba      	ldr	r2, [r7, #8]
 80059f6:	8912      	ldrh	r2, [r2, #8]
 80059f8:	4413      	add	r3, r2
 80059fa:	3b01      	subs	r3, #1
 80059fc:	68ba      	ldr	r2, [r7, #8]
 80059fe:	8912      	ldrh	r2, [r2, #8]
 8005a00:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a04:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005a06:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005a08:	8b7b      	ldrh	r3, [r7, #26]
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d90b      	bls.n	8005a26 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8005a0e:	8b7b      	ldrh	r3, [r7, #26]
 8005a10:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8005a12:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005a14:	68ba      	ldr	r2, [r7, #8]
 8005a16:	8912      	ldrh	r2, [r2, #8]
 8005a18:	fb02 f203 	mul.w	r2, r2, r3
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	611a      	str	r2, [r3, #16]
 8005a20:	e001      	b.n	8005a26 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8005a22:	2301      	movs	r3, #1
 8005a24:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	78db      	ldrb	r3, [r3, #3]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d006      	beq.n	8005a3c <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8005a2e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005a30:	68ba      	ldr	r2, [r7, #8]
 8005a32:	8912      	ldrh	r2, [r2, #8]
 8005a34:	fb02 f203 	mul.w	r2, r2, r3
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	691b      	ldr	r3, [r3, #16]
 8005a40:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005a44:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005a46:	04d9      	lsls	r1, r3, #19
 8005a48:	4b68      	ldr	r3, [pc, #416]	; (8005bec <USB_HC_StartXfer+0x280>)
 8005a4a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005a4c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	7a9b      	ldrb	r3, [r3, #10]
 8005a52:	075b      	lsls	r3, r3, #29
 8005a54:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005a58:	69f9      	ldr	r1, [r7, #28]
 8005a5a:	0148      	lsls	r0, r1, #5
 8005a5c:	6a39      	ldr	r1, [r7, #32]
 8005a5e:	4401      	add	r1, r0
 8005a60:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005a64:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005a66:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005a68:	79fb      	ldrb	r3, [r7, #7]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d009      	beq.n	8005a82 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	68d9      	ldr	r1, [r3, #12]
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	015a      	lsls	r2, r3, #5
 8005a76:	6a3b      	ldr	r3, [r7, #32]
 8005a78:	4413      	add	r3, r2
 8005a7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a7e:	460a      	mov	r2, r1
 8005a80:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005a82:	6a3b      	ldr	r3, [r7, #32]
 8005a84:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	f003 0301 	and.w	r3, r3, #1
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	bf0c      	ite	eq
 8005a92:	2301      	moveq	r3, #1
 8005a94:	2300      	movne	r3, #0
 8005a96:	b2db      	uxtb	r3, r3
 8005a98:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	015a      	lsls	r2, r3, #5
 8005a9e:	6a3b      	ldr	r3, [r7, #32]
 8005aa0:	4413      	add	r3, r2
 8005aa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	69fa      	ldr	r2, [r7, #28]
 8005aaa:	0151      	lsls	r1, r2, #5
 8005aac:	6a3a      	ldr	r2, [r7, #32]
 8005aae:	440a      	add	r2, r1
 8005ab0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ab4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005ab8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005aba:	69fb      	ldr	r3, [r7, #28]
 8005abc:	015a      	lsls	r2, r3, #5
 8005abe:	6a3b      	ldr	r3, [r7, #32]
 8005ac0:	4413      	add	r3, r2
 8005ac2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	7e7b      	ldrb	r3, [r7, #25]
 8005aca:	075b      	lsls	r3, r3, #29
 8005acc:	69f9      	ldr	r1, [r7, #28]
 8005ace:	0148      	lsls	r0, r1, #5
 8005ad0:	6a39      	ldr	r1, [r7, #32]
 8005ad2:	4401      	add	r1, r0
 8005ad4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005adc:	69fb      	ldr	r3, [r7, #28]
 8005ade:	015a      	lsls	r2, r3, #5
 8005ae0:	6a3b      	ldr	r3, [r7, #32]
 8005ae2:	4413      	add	r3, r2
 8005ae4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a41      	ldr	r2, [pc, #260]	; (8005bf0 <USB_HC_StartXfer+0x284>)
 8005aec:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005aee:	4b40      	ldr	r3, [pc, #256]	; (8005bf0 <USB_HC_StartXfer+0x284>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005af6:	4a3e      	ldr	r2, [pc, #248]	; (8005bf0 <USB_HC_StartXfer+0x284>)
 8005af8:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	78db      	ldrb	r3, [r3, #3]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d006      	beq.n	8005b10 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005b02:	4b3b      	ldr	r3, [pc, #236]	; (8005bf0 <USB_HC_StartXfer+0x284>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b0a:	4a39      	ldr	r2, [pc, #228]	; (8005bf0 <USB_HC_StartXfer+0x284>)
 8005b0c:	6013      	str	r3, [r2, #0]
 8005b0e:	e005      	b.n	8005b1c <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005b10:	4b37      	ldr	r3, [pc, #220]	; (8005bf0 <USB_HC_StartXfer+0x284>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005b18:	4a35      	ldr	r2, [pc, #212]	; (8005bf0 <USB_HC_StartXfer+0x284>)
 8005b1a:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005b1c:	4b34      	ldr	r3, [pc, #208]	; (8005bf0 <USB_HC_StartXfer+0x284>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b24:	4a32      	ldr	r2, [pc, #200]	; (8005bf0 <USB_HC_StartXfer+0x284>)
 8005b26:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005b28:	69fb      	ldr	r3, [r7, #28]
 8005b2a:	015a      	lsls	r2, r3, #5
 8005b2c:	6a3b      	ldr	r3, [r7, #32]
 8005b2e:	4413      	add	r3, r2
 8005b30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b34:	461a      	mov	r2, r3
 8005b36:	4b2e      	ldr	r3, [pc, #184]	; (8005bf0 <USB_HC_StartXfer+0x284>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8005b3c:	79fb      	ldrb	r3, [r7, #7]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d14e      	bne.n	8005be0 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	78db      	ldrb	r3, [r3, #3]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d14a      	bne.n	8005be0 <USB_HC_StartXfer+0x274>
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	691b      	ldr	r3, [r3, #16]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d046      	beq.n	8005be0 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	79db      	ldrb	r3, [r3, #7]
 8005b56:	2b03      	cmp	r3, #3
 8005b58:	d830      	bhi.n	8005bbc <USB_HC_StartXfer+0x250>
 8005b5a:	a201      	add	r2, pc, #4	; (adr r2, 8005b60 <USB_HC_StartXfer+0x1f4>)
 8005b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b60:	08005b71 	.word	0x08005b71
 8005b64:	08005b95 	.word	0x08005b95
 8005b68:	08005b71 	.word	0x08005b71
 8005b6c:	08005b95 	.word	0x08005b95
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	691b      	ldr	r3, [r3, #16]
 8005b74:	3303      	adds	r3, #3
 8005b76:	089b      	lsrs	r3, r3, #2
 8005b78:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005b7a:	8afa      	ldrh	r2, [r7, #22]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d91c      	bls.n	8005bc0 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	699b      	ldr	r3, [r3, #24]
 8005b8a:	f043 0220 	orr.w	r2, r3, #32
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	619a      	str	r2, [r3, #24]
          }
          break;
 8005b92:	e015      	b.n	8005bc0 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	691b      	ldr	r3, [r3, #16]
 8005b98:	3303      	adds	r3, #3
 8005b9a:	089b      	lsrs	r3, r3, #2
 8005b9c:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005b9e:	8afa      	ldrh	r2, [r7, #22]
 8005ba0:	6a3b      	ldr	r3, [r7, #32]
 8005ba2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ba6:	691b      	ldr	r3, [r3, #16]
 8005ba8:	b29b      	uxth	r3, r3
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d90a      	bls.n	8005bc4 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	699b      	ldr	r3, [r3, #24]
 8005bb2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	619a      	str	r2, [r3, #24]
          }
          break;
 8005bba:	e003      	b.n	8005bc4 <USB_HC_StartXfer+0x258>

        default:
          break;
 8005bbc:	bf00      	nop
 8005bbe:	e002      	b.n	8005bc6 <USB_HC_StartXfer+0x25a>
          break;
 8005bc0:	bf00      	nop
 8005bc2:	e000      	b.n	8005bc6 <USB_HC_StartXfer+0x25a>
          break;
 8005bc4:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	68d9      	ldr	r1, [r3, #12]
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	785a      	ldrb	r2, [r3, #1]
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	691b      	ldr	r3, [r3, #16]
 8005bd2:	b298      	uxth	r0, r3
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	9300      	str	r3, [sp, #0]
 8005bd8:	4603      	mov	r3, r0
 8005bda:	68f8      	ldr	r0, [r7, #12]
 8005bdc:	f7ff fb86 	bl	80052ec <USB_WritePacket>
    }
  }

  return HAL_OK;
 8005be0:	2300      	movs	r3, #0
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3728      	adds	r7, #40	; 0x28
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}
 8005bea:	bf00      	nop
 8005bec:	1ff80000 	.word	0x1ff80000
 8005bf0:	200000b0 	.word	0x200000b0

08005bf4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b085      	sub	sp, #20
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c06:	695b      	ldr	r3, [r3, #20]
 8005c08:	b29b      	uxth	r3, r3
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3714      	adds	r7, #20
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c14:	4770      	bx	lr

08005c16 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005c16:	b480      	push	{r7}
 8005c18:	b087      	sub	sp, #28
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	6078      	str	r0, [r7, #4]
 8005c1e:	460b      	mov	r3, r1
 8005c20:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8005c26:	78fb      	ldrb	r3, [r7, #3]
 8005c28:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	015a      	lsls	r2, r3, #5
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	4413      	add	r3, r2
 8005c36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	0c9b      	lsrs	r3, r3, #18
 8005c3e:	f003 0303 	and.w	r3, r3, #3
 8005c42:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d002      	beq.n	8005c50 <USB_HC_Halt+0x3a>
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	2b02      	cmp	r3, #2
 8005c4e:	d16c      	bne.n	8005d2a <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	015a      	lsls	r2, r3, #5
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	4413      	add	r3, r2
 8005c58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	68fa      	ldr	r2, [r7, #12]
 8005c60:	0151      	lsls	r1, r2, #5
 8005c62:	693a      	ldr	r2, [r7, #16]
 8005c64:	440a      	add	r2, r1
 8005c66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c6a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c6e:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c74:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d143      	bne.n	8005d04 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	015a      	lsls	r2, r3, #5
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	4413      	add	r3, r2
 8005c84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	68fa      	ldr	r2, [r7, #12]
 8005c8c:	0151      	lsls	r1, r2, #5
 8005c8e:	693a      	ldr	r2, [r7, #16]
 8005c90:	440a      	add	r2, r1
 8005c92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c96:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005c9a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	015a      	lsls	r2, r3, #5
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	4413      	add	r3, r2
 8005ca4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	68fa      	ldr	r2, [r7, #12]
 8005cac:	0151      	lsls	r1, r2, #5
 8005cae:	693a      	ldr	r2, [r7, #16]
 8005cb0:	440a      	add	r2, r1
 8005cb2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cb6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005cba:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	015a      	lsls	r2, r3, #5
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	4413      	add	r3, r2
 8005cc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	68fa      	ldr	r2, [r7, #12]
 8005ccc:	0151      	lsls	r1, r2, #5
 8005cce:	693a      	ldr	r2, [r7, #16]
 8005cd0:	440a      	add	r2, r1
 8005cd2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cd6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005cda:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	3301      	adds	r3, #1
 8005ce0:	617b      	str	r3, [r7, #20]
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ce8:	d81d      	bhi.n	8005d26 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	015a      	lsls	r2, r3, #5
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	4413      	add	r3, r2
 8005cf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005cfc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d00:	d0ec      	beq.n	8005cdc <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005d02:	e080      	b.n	8005e06 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	015a      	lsls	r2, r3, #5
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	4413      	add	r3, r2
 8005d0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	68fa      	ldr	r2, [r7, #12]
 8005d14:	0151      	lsls	r1, r2, #5
 8005d16:	693a      	ldr	r2, [r7, #16]
 8005d18:	440a      	add	r2, r1
 8005d1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d22:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005d24:	e06f      	b.n	8005e06 <USB_HC_Halt+0x1f0>
          break;
 8005d26:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005d28:	e06d      	b.n	8005e06 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	015a      	lsls	r2, r3, #5
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	4413      	add	r3, r2
 8005d32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	68fa      	ldr	r2, [r7, #12]
 8005d3a:	0151      	lsls	r1, r2, #5
 8005d3c:	693a      	ldr	r2, [r7, #16]
 8005d3e:	440a      	add	r2, r1
 8005d40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d44:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d48:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d50:	691b      	ldr	r3, [r3, #16]
 8005d52:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d143      	bne.n	8005de2 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	015a      	lsls	r2, r3, #5
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	4413      	add	r3, r2
 8005d62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	68fa      	ldr	r2, [r7, #12]
 8005d6a:	0151      	lsls	r1, r2, #5
 8005d6c:	693a      	ldr	r2, [r7, #16]
 8005d6e:	440a      	add	r2, r1
 8005d70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d78:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	015a      	lsls	r2, r3, #5
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	4413      	add	r3, r2
 8005d82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	68fa      	ldr	r2, [r7, #12]
 8005d8a:	0151      	lsls	r1, r2, #5
 8005d8c:	693a      	ldr	r2, [r7, #16]
 8005d8e:	440a      	add	r2, r1
 8005d90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d94:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d98:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	015a      	lsls	r2, r3, #5
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	4413      	add	r3, r2
 8005da2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	68fa      	ldr	r2, [r7, #12]
 8005daa:	0151      	lsls	r1, r2, #5
 8005dac:	693a      	ldr	r2, [r7, #16]
 8005dae:	440a      	add	r2, r1
 8005db0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005db4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005db8:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	3301      	adds	r3, #1
 8005dbe:	617b      	str	r3, [r7, #20]
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005dc6:	d81d      	bhi.n	8005e04 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	015a      	lsls	r2, r3, #5
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	4413      	add	r3, r2
 8005dd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005dde:	d0ec      	beq.n	8005dba <USB_HC_Halt+0x1a4>
 8005de0:	e011      	b.n	8005e06 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	015a      	lsls	r2, r3, #5
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	4413      	add	r3, r2
 8005dea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	68fa      	ldr	r2, [r7, #12]
 8005df2:	0151      	lsls	r1, r2, #5
 8005df4:	693a      	ldr	r2, [r7, #16]
 8005df6:	440a      	add	r2, r1
 8005df8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005dfc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e00:	6013      	str	r3, [r2, #0]
 8005e02:	e000      	b.n	8005e06 <USB_HC_Halt+0x1f0>
          break;
 8005e04:	bf00      	nop
    }
  }

  return HAL_OK;
 8005e06:	2300      	movs	r3, #0
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	371c      	adds	r7, #28
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr

08005e14 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b087      	sub	sp, #28
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	460b      	mov	r3, r1
 8005e1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005e24:	78fb      	ldrb	r3, [r7, #3]
 8005e26:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	04da      	lsls	r2, r3, #19
 8005e30:	4b15      	ldr	r3, [pc, #84]	; (8005e88 <USB_DoPing+0x74>)
 8005e32:	4013      	ands	r3, r2
 8005e34:	693a      	ldr	r2, [r7, #16]
 8005e36:	0151      	lsls	r1, r2, #5
 8005e38:	697a      	ldr	r2, [r7, #20]
 8005e3a:	440a      	add	r2, r1
 8005e3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e40:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e44:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	015a      	lsls	r2, r3, #5
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	4413      	add	r3, r2
 8005e4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005e5c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e64:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	015a      	lsls	r2, r3, #5
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	4413      	add	r3, r2
 8005e6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e72:	461a      	mov	r2, r3
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005e78:	2300      	movs	r3, #0
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	371c      	adds	r7, #28
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr
 8005e86:	bf00      	nop
 8005e88:	1ff80000 	.word	0x1ff80000

08005e8c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b086      	sub	sp, #24
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f7ff f9a1 	bl	80051e4 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8005ea2:	2110      	movs	r1, #16
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f7ff f9d9 	bl	800525c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f7ff f9fc 	bl	80052a8 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	613b      	str	r3, [r7, #16]
 8005eb4:	e01f      	b.n	8005ef6 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	015a      	lsls	r2, r3, #5
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	4413      	add	r3, r2
 8005ebe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ecc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ed4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005edc:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	015a      	lsls	r2, r3, #5
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	4413      	add	r3, r2
 8005ee6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eea:	461a      	mov	r2, r3
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	613b      	str	r3, [r7, #16]
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	2b0f      	cmp	r3, #15
 8005efa:	d9dc      	bls.n	8005eb6 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005efc:	2300      	movs	r3, #0
 8005efe:	613b      	str	r3, [r7, #16]
 8005f00:	e034      	b.n	8005f6c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	015a      	lsls	r2, r3, #5
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	4413      	add	r3, r2
 8005f0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f18:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f20:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005f28:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	015a      	lsls	r2, r3, #5
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	4413      	add	r3, r2
 8005f32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f36:	461a      	mov	r2, r3
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	3301      	adds	r3, #1
 8005f40:	617b      	str	r3, [r7, #20]
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f48:	d80c      	bhi.n	8005f64 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	015a      	lsls	r2, r3, #5
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	4413      	add	r3, r2
 8005f52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f60:	d0ec      	beq.n	8005f3c <USB_StopHost+0xb0>
 8005f62:	e000      	b.n	8005f66 <USB_StopHost+0xda>
        break;
 8005f64:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	3301      	adds	r3, #1
 8005f6a:	613b      	str	r3, [r7, #16]
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	2b0f      	cmp	r3, #15
 8005f70:	d9c7      	bls.n	8005f02 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f78:	461a      	mov	r2, r3
 8005f7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f7e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f86:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f7ff f91a 	bl	80051c2 <USB_EnableGlobalInt>

  return HAL_OK;
 8005f8e:	2300      	movs	r3, #0
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3718      	adds	r7, #24
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}

08005f98 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005f98:	b590      	push	{r4, r7, lr}
 8005f9a:	b089      	sub	sp, #36	; 0x24
 8005f9c:	af04      	add	r7, sp, #16
 8005f9e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	2202      	movs	r2, #2
 8005fa4:	2102      	movs	r1, #2
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f000 fc68 	bl	800687c <USBH_FindInterface>
 8005fac:	4603      	mov	r3, r0
 8005fae:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005fb0:	7bfb      	ldrb	r3, [r7, #15]
 8005fb2:	2bff      	cmp	r3, #255	; 0xff
 8005fb4:	d002      	beq.n	8005fbc <USBH_CDC_InterfaceInit+0x24>
 8005fb6:	7bfb      	ldrb	r3, [r7, #15]
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d901      	bls.n	8005fc0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005fbc:	2302      	movs	r3, #2
 8005fbe:	e13d      	b.n	800623c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005fc0:	7bfb      	ldrb	r3, [r7, #15]
 8005fc2:	4619      	mov	r1, r3
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f000 fc3d 	bl	8006844 <USBH_SelectInterface>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005fce:	7bbb      	ldrb	r3, [r7, #14]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d001      	beq.n	8005fd8 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005fd4:	2302      	movs	r3, #2
 8005fd6:	e131      	b.n	800623c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005fde:	2050      	movs	r0, #80	; 0x50
 8005fe0:	f002 fa04 	bl	80083ec <malloc>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005fee:	69db      	ldr	r3, [r3, #28]
 8005ff0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d101      	bne.n	8005ffc <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8005ff8:	2302      	movs	r3, #2
 8005ffa:	e11f      	b.n	800623c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8005ffc:	2250      	movs	r2, #80	; 0x50
 8005ffe:	2100      	movs	r1, #0
 8006000:	68b8      	ldr	r0, [r7, #8]
 8006002:	f002 fa03 	bl	800840c <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006006:	7bfb      	ldrb	r3, [r7, #15]
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	211a      	movs	r1, #26
 800600c:	fb01 f303 	mul.w	r3, r1, r3
 8006010:	4413      	add	r3, r2
 8006012:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	b25b      	sxtb	r3, r3
 800601a:	2b00      	cmp	r3, #0
 800601c:	da15      	bge.n	800604a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800601e:	7bfb      	ldrb	r3, [r7, #15]
 8006020:	687a      	ldr	r2, [r7, #4]
 8006022:	211a      	movs	r1, #26
 8006024:	fb01 f303 	mul.w	r3, r1, r3
 8006028:	4413      	add	r3, r2
 800602a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800602e:	781a      	ldrb	r2, [r3, #0]
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006034:	7bfb      	ldrb	r3, [r7, #15]
 8006036:	687a      	ldr	r2, [r7, #4]
 8006038:	211a      	movs	r1, #26
 800603a:	fb01 f303 	mul.w	r3, r1, r3
 800603e:	4413      	add	r3, r2
 8006040:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006044:	881a      	ldrh	r2, [r3, #0]
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	785b      	ldrb	r3, [r3, #1]
 800604e:	4619      	mov	r1, r3
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f001 fe36 	bl	8007cc2 <USBH_AllocPipe>
 8006056:	4603      	mov	r3, r0
 8006058:	461a      	mov	r2, r3
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	7819      	ldrb	r1, [r3, #0]
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	7858      	ldrb	r0, [r3, #1]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006072:	68ba      	ldr	r2, [r7, #8]
 8006074:	8952      	ldrh	r2, [r2, #10]
 8006076:	9202      	str	r2, [sp, #8]
 8006078:	2203      	movs	r2, #3
 800607a:	9201      	str	r2, [sp, #4]
 800607c:	9300      	str	r3, [sp, #0]
 800607e:	4623      	mov	r3, r4
 8006080:	4602      	mov	r2, r0
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f001 fdee 	bl	8007c64 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	781b      	ldrb	r3, [r3, #0]
 800608c:	2200      	movs	r2, #0
 800608e:	4619      	mov	r1, r3
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f002 f8fb 	bl	800828c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006096:	2300      	movs	r3, #0
 8006098:	2200      	movs	r2, #0
 800609a:	210a      	movs	r1, #10
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f000 fbed 	bl	800687c <USBH_FindInterface>
 80060a2:	4603      	mov	r3, r0
 80060a4:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80060a6:	7bfb      	ldrb	r3, [r7, #15]
 80060a8:	2bff      	cmp	r3, #255	; 0xff
 80060aa:	d002      	beq.n	80060b2 <USBH_CDC_InterfaceInit+0x11a>
 80060ac:	7bfb      	ldrb	r3, [r7, #15]
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d901      	bls.n	80060b6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80060b2:	2302      	movs	r3, #2
 80060b4:	e0c2      	b.n	800623c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80060b6:	7bfb      	ldrb	r3, [r7, #15]
 80060b8:	687a      	ldr	r2, [r7, #4]
 80060ba:	211a      	movs	r1, #26
 80060bc:	fb01 f303 	mul.w	r3, r1, r3
 80060c0:	4413      	add	r3, r2
 80060c2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	b25b      	sxtb	r3, r3
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	da16      	bge.n	80060fc <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80060ce:	7bfb      	ldrb	r3, [r7, #15]
 80060d0:	687a      	ldr	r2, [r7, #4]
 80060d2:	211a      	movs	r1, #26
 80060d4:	fb01 f303 	mul.w	r3, r1, r3
 80060d8:	4413      	add	r3, r2
 80060da:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80060de:	781a      	ldrb	r2, [r3, #0]
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80060e4:	7bfb      	ldrb	r3, [r7, #15]
 80060e6:	687a      	ldr	r2, [r7, #4]
 80060e8:	211a      	movs	r1, #26
 80060ea:	fb01 f303 	mul.w	r3, r1, r3
 80060ee:	4413      	add	r3, r2
 80060f0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80060f4:	881a      	ldrh	r2, [r3, #0]
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	835a      	strh	r2, [r3, #26]
 80060fa:	e015      	b.n	8006128 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80060fc:	7bfb      	ldrb	r3, [r7, #15]
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	211a      	movs	r1, #26
 8006102:	fb01 f303 	mul.w	r3, r1, r3
 8006106:	4413      	add	r3, r2
 8006108:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800610c:	781a      	ldrb	r2, [r3, #0]
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006112:	7bfb      	ldrb	r3, [r7, #15]
 8006114:	687a      	ldr	r2, [r7, #4]
 8006116:	211a      	movs	r1, #26
 8006118:	fb01 f303 	mul.w	r3, r1, r3
 800611c:	4413      	add	r3, r2
 800611e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006122:	881a      	ldrh	r2, [r3, #0]
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8006128:	7bfb      	ldrb	r3, [r7, #15]
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	211a      	movs	r1, #26
 800612e:	fb01 f303 	mul.w	r3, r1, r3
 8006132:	4413      	add	r3, r2
 8006134:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006138:	781b      	ldrb	r3, [r3, #0]
 800613a:	b25b      	sxtb	r3, r3
 800613c:	2b00      	cmp	r3, #0
 800613e:	da16      	bge.n	800616e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006140:	7bfb      	ldrb	r3, [r7, #15]
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	211a      	movs	r1, #26
 8006146:	fb01 f303 	mul.w	r3, r1, r3
 800614a:	4413      	add	r3, r2
 800614c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006150:	781a      	ldrb	r2, [r3, #0]
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006156:	7bfb      	ldrb	r3, [r7, #15]
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	211a      	movs	r1, #26
 800615c:	fb01 f303 	mul.w	r3, r1, r3
 8006160:	4413      	add	r3, r2
 8006162:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006166:	881a      	ldrh	r2, [r3, #0]
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	835a      	strh	r2, [r3, #26]
 800616c:	e015      	b.n	800619a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800616e:	7bfb      	ldrb	r3, [r7, #15]
 8006170:	687a      	ldr	r2, [r7, #4]
 8006172:	211a      	movs	r1, #26
 8006174:	fb01 f303 	mul.w	r3, r1, r3
 8006178:	4413      	add	r3, r2
 800617a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800617e:	781a      	ldrb	r2, [r3, #0]
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006184:	7bfb      	ldrb	r3, [r7, #15]
 8006186:	687a      	ldr	r2, [r7, #4]
 8006188:	211a      	movs	r1, #26
 800618a:	fb01 f303 	mul.w	r3, r1, r3
 800618e:	4413      	add	r3, r2
 8006190:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006194:	881a      	ldrh	r2, [r3, #0]
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	7b9b      	ldrb	r3, [r3, #14]
 800619e:	4619      	mov	r1, r3
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f001 fd8e 	bl	8007cc2 <USBH_AllocPipe>
 80061a6:	4603      	mov	r3, r0
 80061a8:	461a      	mov	r2, r3
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	7bdb      	ldrb	r3, [r3, #15]
 80061b2:	4619      	mov	r1, r3
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f001 fd84 	bl	8007cc2 <USBH_AllocPipe>
 80061ba:	4603      	mov	r3, r0
 80061bc:	461a      	mov	r2, r3
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	7b59      	ldrb	r1, [r3, #13]
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	7b98      	ldrb	r0, [r3, #14]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80061d6:	68ba      	ldr	r2, [r7, #8]
 80061d8:	8b12      	ldrh	r2, [r2, #24]
 80061da:	9202      	str	r2, [sp, #8]
 80061dc:	2202      	movs	r2, #2
 80061de:	9201      	str	r2, [sp, #4]
 80061e0:	9300      	str	r3, [sp, #0]
 80061e2:	4623      	mov	r3, r4
 80061e4:	4602      	mov	r2, r0
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f001 fd3c 	bl	8007c64 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	7b19      	ldrb	r1, [r3, #12]
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	7bd8      	ldrb	r0, [r3, #15]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006200:	68ba      	ldr	r2, [r7, #8]
 8006202:	8b52      	ldrh	r2, [r2, #26]
 8006204:	9202      	str	r2, [sp, #8]
 8006206:	2202      	movs	r2, #2
 8006208:	9201      	str	r2, [sp, #4]
 800620a:	9300      	str	r3, [sp, #0]
 800620c:	4623      	mov	r3, r4
 800620e:	4602      	mov	r2, r0
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f001 fd27 	bl	8007c64 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	2200      	movs	r2, #0
 800621a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	7b5b      	ldrb	r3, [r3, #13]
 8006222:	2200      	movs	r2, #0
 8006224:	4619      	mov	r1, r3
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f002 f830 	bl	800828c <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	7b1b      	ldrb	r3, [r3, #12]
 8006230:	2200      	movs	r2, #0
 8006232:	4619      	mov	r1, r3
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f002 f829 	bl	800828c <USBH_LL_SetToggle>

  return USBH_OK;
 800623a:	2300      	movs	r3, #0
}
 800623c:	4618      	mov	r0, r3
 800623e:	3714      	adds	r7, #20
 8006240:	46bd      	mov	sp, r7
 8006242:	bd90      	pop	{r4, r7, pc}

08006244 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b084      	sub	sp, #16
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006252:	69db      	ldr	r3, [r3, #28]
 8006254:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	781b      	ldrb	r3, [r3, #0]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d00e      	beq.n	800627c <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	4619      	mov	r1, r3
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f001 fd1c 	bl	8007ca2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	781b      	ldrb	r3, [r3, #0]
 800626e:	4619      	mov	r1, r3
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f001 fd47 	bl	8007d04 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2200      	movs	r2, #0
 800627a:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	7b1b      	ldrb	r3, [r3, #12]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d00e      	beq.n	80062a2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	7b1b      	ldrb	r3, [r3, #12]
 8006288:	4619      	mov	r1, r3
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f001 fd09 	bl	8007ca2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	7b1b      	ldrb	r3, [r3, #12]
 8006294:	4619      	mov	r1, r3
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f001 fd34 	bl	8007d04 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2200      	movs	r2, #0
 80062a0:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	7b5b      	ldrb	r3, [r3, #13]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d00e      	beq.n	80062c8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	7b5b      	ldrb	r3, [r3, #13]
 80062ae:	4619      	mov	r1, r3
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f001 fcf6 	bl	8007ca2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	7b5b      	ldrb	r3, [r3, #13]
 80062ba:	4619      	mov	r1, r3
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f001 fd21 	bl	8007d04 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2200      	movs	r2, #0
 80062c6:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80062ce:	69db      	ldr	r3, [r3, #28]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d00b      	beq.n	80062ec <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80062da:	69db      	ldr	r3, [r3, #28]
 80062dc:	4618      	mov	r0, r3
 80062de:	f002 f88d 	bl	80083fc <free>
    phost->pActiveClass->pData = 0U;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80062e8:	2200      	movs	r2, #0
 80062ea:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80062ec:	2300      	movs	r3, #0
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3710      	adds	r7, #16
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}

080062f6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80062f6:	b580      	push	{r7, lr}
 80062f8:	b084      	sub	sp, #16
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006304:	69db      	ldr	r3, [r3, #28]
 8006306:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	3340      	adds	r3, #64	; 0x40
 800630c:	4619      	mov	r1, r3
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f000 f8b1 	bl	8006476 <GetLineCoding>
 8006314:	4603      	mov	r3, r0
 8006316:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006318:	7afb      	ldrb	r3, [r7, #11]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d105      	bne.n	800632a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006324:	2102      	movs	r1, #2
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800632a:	7afb      	ldrb	r3, [r7, #11]
}
 800632c:	4618      	mov	r0, r3
 800632e:	3710      	adds	r7, #16
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}

08006334 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b084      	sub	sp, #16
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800633c:	2301      	movs	r3, #1
 800633e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006340:	2300      	movs	r3, #0
 8006342:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800634a:	69db      	ldr	r3, [r3, #28]
 800634c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006354:	2b04      	cmp	r3, #4
 8006356:	d877      	bhi.n	8006448 <USBH_CDC_Process+0x114>
 8006358:	a201      	add	r2, pc, #4	; (adr r2, 8006360 <USBH_CDC_Process+0x2c>)
 800635a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800635e:	bf00      	nop
 8006360:	08006375 	.word	0x08006375
 8006364:	0800637b 	.word	0x0800637b
 8006368:	080063ab 	.word	0x080063ab
 800636c:	0800641f 	.word	0x0800641f
 8006370:	0800642d 	.word	0x0800642d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006374:	2300      	movs	r3, #0
 8006376:	73fb      	strb	r3, [r7, #15]
      break;
 8006378:	e06d      	b.n	8006456 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800637e:	4619      	mov	r1, r3
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f000 f897 	bl	80064b4 <SetLineCoding>
 8006386:	4603      	mov	r3, r0
 8006388:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800638a:	7bbb      	ldrb	r3, [r7, #14]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d104      	bne.n	800639a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	2202      	movs	r2, #2
 8006394:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006398:	e058      	b.n	800644c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800639a:	7bbb      	ldrb	r3, [r7, #14]
 800639c:	2b01      	cmp	r3, #1
 800639e:	d055      	beq.n	800644c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	2204      	movs	r2, #4
 80063a4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80063a8:	e050      	b.n	800644c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	3340      	adds	r3, #64	; 0x40
 80063ae:	4619      	mov	r1, r3
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f000 f860 	bl	8006476 <GetLineCoding>
 80063b6:	4603      	mov	r3, r0
 80063b8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80063ba:	7bbb      	ldrb	r3, [r7, #14]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d126      	bne.n	800640e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	2200      	movs	r2, #0
 80063c4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063d2:	791b      	ldrb	r3, [r3, #4]
 80063d4:	429a      	cmp	r2, r3
 80063d6:	d13b      	bne.n	8006450 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063e2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80063e4:	429a      	cmp	r2, r3
 80063e6:	d133      	bne.n	8006450 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063f2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d12b      	bne.n	8006450 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006400:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006402:	429a      	cmp	r2, r3
 8006404:	d124      	bne.n	8006450 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f000 f95a 	bl	80066c0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800640c:	e020      	b.n	8006450 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800640e:	7bbb      	ldrb	r3, [r7, #14]
 8006410:	2b01      	cmp	r3, #1
 8006412:	d01d      	beq.n	8006450 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	2204      	movs	r2, #4
 8006418:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800641c:	e018      	b.n	8006450 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 f867 	bl	80064f2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f000 f8dc 	bl	80065e2 <CDC_ProcessReception>
      break;
 800642a:	e014      	b.n	8006456 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800642c:	2100      	movs	r1, #0
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f000 ffe5 	bl	80073fe <USBH_ClrFeature>
 8006434:	4603      	mov	r3, r0
 8006436:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006438:	7bbb      	ldrb	r3, [r7, #14]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d10a      	bne.n	8006454 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	2200      	movs	r2, #0
 8006442:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006446:	e005      	b.n	8006454 <USBH_CDC_Process+0x120>

    default:
      break;
 8006448:	bf00      	nop
 800644a:	e004      	b.n	8006456 <USBH_CDC_Process+0x122>
      break;
 800644c:	bf00      	nop
 800644e:	e002      	b.n	8006456 <USBH_CDC_Process+0x122>
      break;
 8006450:	bf00      	nop
 8006452:	e000      	b.n	8006456 <USBH_CDC_Process+0x122>
      break;
 8006454:	bf00      	nop

  }

  return status;
 8006456:	7bfb      	ldrb	r3, [r7, #15]
}
 8006458:	4618      	mov	r0, r3
 800645a:	3710      	adds	r7, #16
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}

08006460 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006460:	b480      	push	{r7}
 8006462:	b083      	sub	sp, #12
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006468:	2300      	movs	r3, #0
}
 800646a:	4618      	mov	r0, r3
 800646c:	370c      	adds	r7, #12
 800646e:	46bd      	mov	sp, r7
 8006470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006474:	4770      	bx	lr

08006476 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006476:	b580      	push	{r7, lr}
 8006478:	b082      	sub	sp, #8
 800647a:	af00      	add	r7, sp, #0
 800647c:	6078      	str	r0, [r7, #4]
 800647e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	22a1      	movs	r2, #161	; 0xa1
 8006484:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2221      	movs	r2, #33	; 0x21
 800648a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2200      	movs	r2, #0
 8006490:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2200      	movs	r2, #0
 8006496:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2207      	movs	r2, #7
 800649c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	2207      	movs	r2, #7
 80064a2:	4619      	mov	r1, r3
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f001 f98a 	bl	80077be <USBH_CtlReq>
 80064aa:	4603      	mov	r3, r0
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3708      	adds	r7, #8
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}

080064b4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b082      	sub	sp, #8
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2221      	movs	r2, #33	; 0x21
 80064c2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2220      	movs	r2, #32
 80064c8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2200      	movs	r2, #0
 80064ce:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2200      	movs	r2, #0
 80064d4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2207      	movs	r2, #7
 80064da:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	2207      	movs	r2, #7
 80064e0:	4619      	mov	r1, r3
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f001 f96b 	bl	80077be <USBH_CtlReq>
 80064e8:	4603      	mov	r3, r0
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3708      	adds	r7, #8
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}

080064f2 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80064f2:	b580      	push	{r7, lr}
 80064f4:	b086      	sub	sp, #24
 80064f6:	af02      	add	r7, sp, #8
 80064f8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006500:	69db      	ldr	r3, [r3, #28]
 8006502:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006504:	2300      	movs	r3, #0
 8006506:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800650e:	2b01      	cmp	r3, #1
 8006510:	d002      	beq.n	8006518 <CDC_ProcessTransmission+0x26>
 8006512:	2b02      	cmp	r3, #2
 8006514:	d025      	beq.n	8006562 <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 8006516:	e060      	b.n	80065da <CDC_ProcessTransmission+0xe8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800651c:	68fa      	ldr	r2, [r7, #12]
 800651e:	8b12      	ldrh	r2, [r2, #24]
 8006520:	4293      	cmp	r3, r2
 8006522:	d90c      	bls.n	800653e <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	69d9      	ldr	r1, [r3, #28]
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	8b1a      	ldrh	r2, [r3, #24]
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	7b58      	ldrb	r0, [r3, #13]
 8006530:	2301      	movs	r3, #1
 8006532:	9300      	str	r3, [sp, #0]
 8006534:	4603      	mov	r3, r0
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f001 fb51 	bl	8007bde <USBH_BulkSendData>
 800653c:	e00c      	b.n	8006558 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8006546:	b29a      	uxth	r2, r3
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	7b58      	ldrb	r0, [r3, #13]
 800654c:	2301      	movs	r3, #1
 800654e:	9300      	str	r3, [sp, #0]
 8006550:	4603      	mov	r3, r0
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f001 fb43 	bl	8007bde <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2202      	movs	r2, #2
 800655c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006560:	e03b      	b.n	80065da <CDC_ProcessTransmission+0xe8>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	7b5b      	ldrb	r3, [r3, #13]
 8006566:	4619      	mov	r1, r3
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f001 fe65 	bl	8008238 <USBH_LL_GetURBState>
 800656e:	4603      	mov	r3, r0
 8006570:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006572:	7afb      	ldrb	r3, [r7, #11]
 8006574:	2b01      	cmp	r3, #1
 8006576:	d128      	bne.n	80065ca <CDC_ProcessTransmission+0xd8>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800657c:	68fa      	ldr	r2, [r7, #12]
 800657e:	8b12      	ldrh	r2, [r2, #24]
 8006580:	4293      	cmp	r3, r2
 8006582:	d90e      	bls.n	80065a2 <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006588:	68fa      	ldr	r2, [r7, #12]
 800658a:	8b12      	ldrh	r2, [r2, #24]
 800658c:	1a9a      	subs	r2, r3, r2
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	69db      	ldr	r3, [r3, #28]
 8006596:	68fa      	ldr	r2, [r7, #12]
 8006598:	8b12      	ldrh	r2, [r2, #24]
 800659a:	441a      	add	r2, r3
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	61da      	str	r2, [r3, #28]
 80065a0:	e002      	b.n	80065a8 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2200      	movs	r2, #0
 80065a6:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d004      	beq.n	80065ba <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2201      	movs	r2, #1
 80065b4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80065b8:	e00e      	b.n	80065d8 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2200      	movs	r2, #0
 80065be:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f000 f868 	bl	8006698 <USBH_CDC_TransmitCallback>
      break;
 80065c8:	e006      	b.n	80065d8 <CDC_ProcessTransmission+0xe6>
        if (URB_Status == USBH_URB_NOTREADY)
 80065ca:	7afb      	ldrb	r3, [r7, #11]
 80065cc:	2b02      	cmp	r3, #2
 80065ce:	d103      	bne.n	80065d8 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2201      	movs	r2, #1
 80065d4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80065d8:	bf00      	nop
  }
}
 80065da:	bf00      	nop
 80065dc:	3710      	adds	r7, #16
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}

080065e2 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80065e2:	b580      	push	{r7, lr}
 80065e4:	b086      	sub	sp, #24
 80065e6:	af00      	add	r7, sp, #0
 80065e8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80065f0:	69db      	ldr	r3, [r3, #28]
 80065f2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80065f4:	2300      	movs	r3, #0
 80065f6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80065fe:	2b03      	cmp	r3, #3
 8006600:	d002      	beq.n	8006608 <CDC_ProcessReception+0x26>
 8006602:	2b04      	cmp	r3, #4
 8006604:	d00e      	beq.n	8006624 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006606:	e043      	b.n	8006690 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	6a19      	ldr	r1, [r3, #32]
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	8b5a      	ldrh	r2, [r3, #26]
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	7b1b      	ldrb	r3, [r3, #12]
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f001 fb07 	bl	8007c28 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	2204      	movs	r2, #4
 800661e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006622:	e035      	b.n	8006690 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	7b1b      	ldrb	r3, [r3, #12]
 8006628:	4619      	mov	r1, r3
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f001 fe04 	bl	8008238 <USBH_LL_GetURBState>
 8006630:	4603      	mov	r3, r0
 8006632:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006634:	7cfb      	ldrb	r3, [r7, #19]
 8006636:	2b01      	cmp	r3, #1
 8006638:	d129      	bne.n	800668e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	7b1b      	ldrb	r3, [r3, #12]
 800663e:	4619      	mov	r1, r3
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f001 fd67 	bl	8008114 <USBH_LL_GetLastXferSize>
 8006646:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800664c:	68fa      	ldr	r2, [r7, #12]
 800664e:	429a      	cmp	r2, r3
 8006650:	d016      	beq.n	8006680 <CDC_ProcessReception+0x9e>
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	8b5b      	ldrh	r3, [r3, #26]
 8006656:	461a      	mov	r2, r3
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	4293      	cmp	r3, r2
 800665c:	d910      	bls.n	8006680 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	1ad2      	subs	r2, r2, r3
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	6a1a      	ldr	r2, [r3, #32]
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	441a      	add	r2, r3
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	2203      	movs	r2, #3
 800667a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800667e:	e006      	b.n	800668e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	2200      	movs	r2, #0
 8006684:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f000 f80f 	bl	80066ac <USBH_CDC_ReceiveCallback>
      break;
 800668e:	bf00      	nop
  }
}
 8006690:	bf00      	nop
 8006692:	3718      	adds	r7, #24
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}

08006698 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006698:	b480      	push	{r7}
 800669a:	b083      	sub	sp, #12
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80066a0:	bf00      	nop
 80066a2:	370c      	adds	r7, #12
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr

080066ac <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b083      	sub	sp, #12
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80066b4:	bf00      	nop
 80066b6:	370c      	adds	r7, #12
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr

080066c0 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b083      	sub	sp, #12
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80066c8:	bf00      	nop
 80066ca:	370c      	adds	r7, #12
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr

080066d4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b084      	sub	sp, #16
 80066d8:	af00      	add	r7, sp, #0
 80066da:	60f8      	str	r0, [r7, #12]
 80066dc:	60b9      	str	r1, [r7, #8]
 80066de:	4613      	mov	r3, r2
 80066e0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d101      	bne.n	80066ec <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80066e8:	2302      	movs	r3, #2
 80066ea:	e029      	b.n	8006740 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	79fa      	ldrb	r2, [r7, #7]
 80066f0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2200      	movs	r2, #0
 80066f8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2200      	movs	r2, #0
 8006700:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8006704:	68f8      	ldr	r0, [r7, #12]
 8006706:	f000 f81f 	bl	8006748 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2200      	movs	r2, #0
 800670e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2200      	movs	r2, #0
 8006716:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2200      	movs	r2, #0
 800671e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2200      	movs	r2, #0
 8006726:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d003      	beq.n	8006738 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	68ba      	ldr	r2, [r7, #8]
 8006734:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8006738:	68f8      	ldr	r0, [r7, #12]
 800673a:	f001 fc39 	bl	8007fb0 <USBH_LL_Init>

  return USBH_OK;
 800673e:	2300      	movs	r3, #0
}
 8006740:	4618      	mov	r0, r3
 8006742:	3710      	adds	r7, #16
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}

08006748 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006748:	b480      	push	{r7}
 800674a:	b085      	sub	sp, #20
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006750:	2300      	movs	r3, #0
 8006752:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006754:	2300      	movs	r3, #0
 8006756:	60fb      	str	r3, [r7, #12]
 8006758:	e009      	b.n	800676e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800675a:	687a      	ldr	r2, [r7, #4]
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	33e0      	adds	r3, #224	; 0xe0
 8006760:	009b      	lsls	r3, r3, #2
 8006762:	4413      	add	r3, r2
 8006764:	2200      	movs	r2, #0
 8006766:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	3301      	adds	r3, #1
 800676c:	60fb      	str	r3, [r7, #12]
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2b0e      	cmp	r3, #14
 8006772:	d9f2      	bls.n	800675a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006774:	2300      	movs	r3, #0
 8006776:	60fb      	str	r3, [r7, #12]
 8006778:	e009      	b.n	800678e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800677a:	687a      	ldr	r2, [r7, #4]
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	4413      	add	r3, r2
 8006780:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006784:	2200      	movs	r2, #0
 8006786:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	3301      	adds	r3, #1
 800678c:	60fb      	str	r3, [r7, #12]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006794:	d3f1      	bcc.n	800677a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2200      	movs	r2, #0
 800679a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2200      	movs	r2, #0
 80067a0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2201      	movs	r2, #1
 80067a6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2200      	movs	r2, #0
 80067ac:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2201      	movs	r2, #1
 80067b4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2240      	movs	r2, #64	; 0x40
 80067ba:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2200      	movs	r2, #0
 80067c6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2201      	movs	r2, #1
 80067ce:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2200      	movs	r2, #0
 80067d6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2200      	movs	r2, #0
 80067de:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80067e2:	2300      	movs	r3, #0
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3714      	adds	r7, #20
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr

080067f0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b085      	sub	sp, #20
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80067fa:	2300      	movs	r3, #0
 80067fc:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d016      	beq.n	8006832 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800680a:	2b00      	cmp	r3, #0
 800680c:	d10e      	bne.n	800682c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006814:	1c59      	adds	r1, r3, #1
 8006816:	687a      	ldr	r2, [r7, #4]
 8006818:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800681c:	687a      	ldr	r2, [r7, #4]
 800681e:	33de      	adds	r3, #222	; 0xde
 8006820:	6839      	ldr	r1, [r7, #0]
 8006822:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006826:	2300      	movs	r3, #0
 8006828:	73fb      	strb	r3, [r7, #15]
 800682a:	e004      	b.n	8006836 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800682c:	2302      	movs	r3, #2
 800682e:	73fb      	strb	r3, [r7, #15]
 8006830:	e001      	b.n	8006836 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006832:	2302      	movs	r3, #2
 8006834:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006836:	7bfb      	ldrb	r3, [r7, #15]
}
 8006838:	4618      	mov	r0, r3
 800683a:	3714      	adds	r7, #20
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr

08006844 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006844:	b480      	push	{r7}
 8006846:	b085      	sub	sp, #20
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	460b      	mov	r3, r1
 800684e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006850:	2300      	movs	r3, #0
 8006852:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800685a:	78fa      	ldrb	r2, [r7, #3]
 800685c:	429a      	cmp	r2, r3
 800685e:	d204      	bcs.n	800686a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	78fa      	ldrb	r2, [r7, #3]
 8006864:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006868:	e001      	b.n	800686e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800686a:	2302      	movs	r3, #2
 800686c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800686e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006870:	4618      	mov	r0, r3
 8006872:	3714      	adds	r7, #20
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr

0800687c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800687c:	b480      	push	{r7}
 800687e:	b087      	sub	sp, #28
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	4608      	mov	r0, r1
 8006886:	4611      	mov	r1, r2
 8006888:	461a      	mov	r2, r3
 800688a:	4603      	mov	r3, r0
 800688c:	70fb      	strb	r3, [r7, #3]
 800688e:	460b      	mov	r3, r1
 8006890:	70bb      	strb	r3, [r7, #2]
 8006892:	4613      	mov	r3, r2
 8006894:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006896:	2300      	movs	r3, #0
 8006898:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800689a:	2300      	movs	r3, #0
 800689c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80068a4:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80068a6:	e025      	b.n	80068f4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80068a8:	7dfb      	ldrb	r3, [r7, #23]
 80068aa:	221a      	movs	r2, #26
 80068ac:	fb02 f303 	mul.w	r3, r2, r3
 80068b0:	3308      	adds	r3, #8
 80068b2:	68fa      	ldr	r2, [r7, #12]
 80068b4:	4413      	add	r3, r2
 80068b6:	3302      	adds	r3, #2
 80068b8:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	795b      	ldrb	r3, [r3, #5]
 80068be:	78fa      	ldrb	r2, [r7, #3]
 80068c0:	429a      	cmp	r2, r3
 80068c2:	d002      	beq.n	80068ca <USBH_FindInterface+0x4e>
 80068c4:	78fb      	ldrb	r3, [r7, #3]
 80068c6:	2bff      	cmp	r3, #255	; 0xff
 80068c8:	d111      	bne.n	80068ee <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80068ce:	78ba      	ldrb	r2, [r7, #2]
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d002      	beq.n	80068da <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80068d4:	78bb      	ldrb	r3, [r7, #2]
 80068d6:	2bff      	cmp	r3, #255	; 0xff
 80068d8:	d109      	bne.n	80068ee <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80068de:	787a      	ldrb	r2, [r7, #1]
 80068e0:	429a      	cmp	r2, r3
 80068e2:	d002      	beq.n	80068ea <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80068e4:	787b      	ldrb	r3, [r7, #1]
 80068e6:	2bff      	cmp	r3, #255	; 0xff
 80068e8:	d101      	bne.n	80068ee <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80068ea:	7dfb      	ldrb	r3, [r7, #23]
 80068ec:	e006      	b.n	80068fc <USBH_FindInterface+0x80>
    }
    if_ix++;
 80068ee:	7dfb      	ldrb	r3, [r7, #23]
 80068f0:	3301      	adds	r3, #1
 80068f2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80068f4:	7dfb      	ldrb	r3, [r7, #23]
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	d9d6      	bls.n	80068a8 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80068fa:	23ff      	movs	r3, #255	; 0xff
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	371c      	adds	r7, #28
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr

08006908 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b082      	sub	sp, #8
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f001 fb89 	bl	8008028 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8006916:	2101      	movs	r1, #1
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f001 fca0 	bl	800825e <USBH_LL_DriverVBUS>

  return USBH_OK;
 800691e:	2300      	movs	r3, #0
}
 8006920:	4618      	mov	r0, r3
 8006922:	3708      	adds	r7, #8
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}

08006928 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b088      	sub	sp, #32
 800692c:	af04      	add	r7, sp, #16
 800692e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006930:	2302      	movs	r3, #2
 8006932:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006934:	2300      	movs	r3, #0
 8006936:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800693e:	b2db      	uxtb	r3, r3
 8006940:	2b01      	cmp	r3, #1
 8006942:	d102      	bne.n	800694a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2203      	movs	r2, #3
 8006948:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	781b      	ldrb	r3, [r3, #0]
 800694e:	b2db      	uxtb	r3, r3
 8006950:	2b0b      	cmp	r3, #11
 8006952:	f200 81b3 	bhi.w	8006cbc <USBH_Process+0x394>
 8006956:	a201      	add	r2, pc, #4	; (adr r2, 800695c <USBH_Process+0x34>)
 8006958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800695c:	0800698d 	.word	0x0800698d
 8006960:	080069bf 	.word	0x080069bf
 8006964:	08006a27 	.word	0x08006a27
 8006968:	08006c57 	.word	0x08006c57
 800696c:	08006cbd 	.word	0x08006cbd
 8006970:	08006acb 	.word	0x08006acb
 8006974:	08006bfd 	.word	0x08006bfd
 8006978:	08006b01 	.word	0x08006b01
 800697c:	08006b21 	.word	0x08006b21
 8006980:	08006b41 	.word	0x08006b41
 8006984:	08006b6f 	.word	0x08006b6f
 8006988:	08006c3f 	.word	0x08006c3f
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006992:	b2db      	uxtb	r3, r3
 8006994:	2b00      	cmp	r3, #0
 8006996:	f000 8193 	beq.w	8006cc0 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2201      	movs	r2, #1
 800699e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80069a0:	20c8      	movs	r0, #200	; 0xc8
 80069a2:	f001 fca6 	bl	80082f2 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f001 fb99 	bl	80080de <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2200      	movs	r2, #0
 80069b0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2200      	movs	r2, #0
 80069b8:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80069bc:	e180      	b.n	8006cc0 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d107      	bne.n	80069d8 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2200      	movs	r2, #0
 80069cc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2202      	movs	r2, #2
 80069d4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80069d6:	e182      	b.n	8006cde <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80069de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80069e2:	d914      	bls.n	8006a0e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80069ea:	3301      	adds	r3, #1
 80069ec:	b2da      	uxtb	r2, r3
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80069fa:	2b03      	cmp	r3, #3
 80069fc:	d903      	bls.n	8006a06 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	220d      	movs	r2, #13
 8006a02:	701a      	strb	r2, [r3, #0]
      break;
 8006a04:	e16b      	b.n	8006cde <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	701a      	strb	r2, [r3, #0]
      break;
 8006a0c:	e167      	b.n	8006cde <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006a14:	f103 020a 	add.w	r2, r3, #10
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8006a1e:	200a      	movs	r0, #10
 8006a20:	f001 fc67 	bl	80082f2 <USBH_Delay>
      break;
 8006a24:	e15b      	b.n	8006cde <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d005      	beq.n	8006a3c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006a36:	2104      	movs	r1, #4
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006a3c:	2064      	movs	r0, #100	; 0x64
 8006a3e:	f001 fc58 	bl	80082f2 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f001 fb26 	bl	8008094 <USBH_LL_GetSpeed>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	461a      	mov	r2, r3
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2205      	movs	r2, #5
 8006a56:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006a58:	2100      	movs	r1, #0
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f001 f931 	bl	8007cc2 <USBH_AllocPipe>
 8006a60:	4603      	mov	r3, r0
 8006a62:	461a      	mov	r2, r3
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006a68:	2180      	movs	r1, #128	; 0x80
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f001 f929 	bl	8007cc2 <USBH_AllocPipe>
 8006a70:	4603      	mov	r3, r0
 8006a72:	461a      	mov	r2, r3
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	7919      	ldrb	r1, [r3, #4]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006a88:	687a      	ldr	r2, [r7, #4]
 8006a8a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006a8c:	b292      	uxth	r2, r2
 8006a8e:	9202      	str	r2, [sp, #8]
 8006a90:	2200      	movs	r2, #0
 8006a92:	9201      	str	r2, [sp, #4]
 8006a94:	9300      	str	r3, [sp, #0]
 8006a96:	4603      	mov	r3, r0
 8006a98:	2280      	movs	r2, #128	; 0x80
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f001 f8e2 	bl	8007c64 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	7959      	ldrb	r1, [r3, #5]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006ab0:	687a      	ldr	r2, [r7, #4]
 8006ab2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006ab4:	b292      	uxth	r2, r2
 8006ab6:	9202      	str	r2, [sp, #8]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	9201      	str	r2, [sp, #4]
 8006abc:	9300      	str	r3, [sp, #0]
 8006abe:	4603      	mov	r3, r0
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f001 f8ce 	bl	8007c64 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006ac8:	e109      	b.n	8006cde <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f000 f90c 	bl	8006ce8 <USBH_HandleEnum>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006ad4:	7bbb      	ldrb	r3, [r7, #14]
 8006ad6:	b2db      	uxtb	r3, r3
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	f040 80f3 	bne.w	8006cc4 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d103      	bne.n	8006af8 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2208      	movs	r2, #8
 8006af4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006af6:	e0e5      	b.n	8006cc4 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2207      	movs	r2, #7
 8006afc:	701a      	strb	r2, [r3, #0]
      break;
 8006afe:	e0e1      	b.n	8006cc4 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	f000 80de 	beq.w	8006cc8 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006b12:	2101      	movs	r1, #1
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2208      	movs	r2, #8
 8006b1c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006b1e:	e0d3      	b.n	8006cc8 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	4619      	mov	r1, r3
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f000 fc20 	bl	8007370 <USBH_SetCfg>
 8006b30:	4603      	mov	r3, r0
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	f040 80ca 	bne.w	8006ccc <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2209      	movs	r2, #9
 8006b3c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006b3e:	e0c5      	b.n	8006ccc <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8006b46:	f003 0320 	and.w	r3, r3, #32
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d00b      	beq.n	8006b66 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8006b4e:	2101      	movs	r1, #1
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f000 fc30 	bl	80073b6 <USBH_SetFeature>
 8006b56:	4603      	mov	r3, r0
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	f040 80b9 	bne.w	8006cd0 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	220a      	movs	r2, #10
 8006b62:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006b64:	e0b4      	b.n	8006cd0 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	220a      	movs	r2, #10
 8006b6a:	701a      	strb	r2, [r3, #0]
      break;
 8006b6c:	e0b0      	b.n	8006cd0 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	f000 80ad 	beq.w	8006cd4 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006b82:	2300      	movs	r3, #0
 8006b84:	73fb      	strb	r3, [r7, #15]
 8006b86:	e016      	b.n	8006bb6 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006b88:	7bfa      	ldrb	r2, [r7, #15]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	32de      	adds	r2, #222	; 0xde
 8006b8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b92:	791a      	ldrb	r2, [r3, #4]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006b9a:	429a      	cmp	r2, r3
 8006b9c:	d108      	bne.n	8006bb0 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006b9e:	7bfa      	ldrb	r2, [r7, #15]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	32de      	adds	r2, #222	; 0xde
 8006ba4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006bae:	e005      	b.n	8006bbc <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006bb0:	7bfb      	ldrb	r3, [r7, #15]
 8006bb2:	3301      	adds	r3, #1
 8006bb4:	73fb      	strb	r3, [r7, #15]
 8006bb6:	7bfb      	ldrb	r3, [r7, #15]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d0e5      	beq.n	8006b88 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d016      	beq.n	8006bf4 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006bcc:	689b      	ldr	r3, [r3, #8]
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	4798      	blx	r3
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d109      	bne.n	8006bec <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2206      	movs	r2, #6
 8006bdc:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006be4:	2103      	movs	r1, #3
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006bea:	e073      	b.n	8006cd4 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	220d      	movs	r2, #13
 8006bf0:	701a      	strb	r2, [r3, #0]
      break;
 8006bf2:	e06f      	b.n	8006cd4 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	220d      	movs	r2, #13
 8006bf8:	701a      	strb	r2, [r3, #0]
      break;
 8006bfa:	e06b      	b.n	8006cd4 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d017      	beq.n	8006c36 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c0c:	691b      	ldr	r3, [r3, #16]
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	4798      	blx	r3
 8006c12:	4603      	mov	r3, r0
 8006c14:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006c16:	7bbb      	ldrb	r3, [r7, #14]
 8006c18:	b2db      	uxtb	r3, r3
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d103      	bne.n	8006c26 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	220b      	movs	r2, #11
 8006c22:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006c24:	e058      	b.n	8006cd8 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8006c26:	7bbb      	ldrb	r3, [r7, #14]
 8006c28:	b2db      	uxtb	r3, r3
 8006c2a:	2b02      	cmp	r3, #2
 8006c2c:	d154      	bne.n	8006cd8 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	220d      	movs	r2, #13
 8006c32:	701a      	strb	r2, [r3, #0]
      break;
 8006c34:	e050      	b.n	8006cd8 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	220d      	movs	r2, #13
 8006c3a:	701a      	strb	r2, [r3, #0]
      break;
 8006c3c:	e04c      	b.n	8006cd8 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d049      	beq.n	8006cdc <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c4e:	695b      	ldr	r3, [r3, #20]
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	4798      	blx	r3
      }
      break;
 8006c54:	e042      	b.n	8006cdc <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f7ff fd72 	bl	8006748 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d009      	beq.n	8006c82 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c74:	68db      	ldr	r3, [r3, #12]
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d005      	beq.n	8006c98 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006c92:	2105      	movs	r1, #5
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006c9e:	b2db      	uxtb	r3, r3
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	d107      	bne.n	8006cb4 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f7ff fe2b 	bl	8006908 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006cb2:	e014      	b.n	8006cde <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f001 f9b7 	bl	8008028 <USBH_LL_Start>
      break;
 8006cba:	e010      	b.n	8006cde <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8006cbc:	bf00      	nop
 8006cbe:	e00e      	b.n	8006cde <USBH_Process+0x3b6>
      break;
 8006cc0:	bf00      	nop
 8006cc2:	e00c      	b.n	8006cde <USBH_Process+0x3b6>
      break;
 8006cc4:	bf00      	nop
 8006cc6:	e00a      	b.n	8006cde <USBH_Process+0x3b6>
    break;
 8006cc8:	bf00      	nop
 8006cca:	e008      	b.n	8006cde <USBH_Process+0x3b6>
      break;
 8006ccc:	bf00      	nop
 8006cce:	e006      	b.n	8006cde <USBH_Process+0x3b6>
      break;
 8006cd0:	bf00      	nop
 8006cd2:	e004      	b.n	8006cde <USBH_Process+0x3b6>
      break;
 8006cd4:	bf00      	nop
 8006cd6:	e002      	b.n	8006cde <USBH_Process+0x3b6>
      break;
 8006cd8:	bf00      	nop
 8006cda:	e000      	b.n	8006cde <USBH_Process+0x3b6>
      break;
 8006cdc:	bf00      	nop
  }
  return USBH_OK;
 8006cde:	2300      	movs	r3, #0
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3710      	adds	r7, #16
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}

08006ce8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b088      	sub	sp, #32
 8006cec:	af04      	add	r7, sp, #16
 8006cee:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	785b      	ldrb	r3, [r3, #1]
 8006cfc:	2b07      	cmp	r3, #7
 8006cfe:	f200 81c1 	bhi.w	8007084 <USBH_HandleEnum+0x39c>
 8006d02:	a201      	add	r2, pc, #4	; (adr r2, 8006d08 <USBH_HandleEnum+0x20>)
 8006d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d08:	08006d29 	.word	0x08006d29
 8006d0c:	08006de7 	.word	0x08006de7
 8006d10:	08006e51 	.word	0x08006e51
 8006d14:	08006edf 	.word	0x08006edf
 8006d18:	08006f49 	.word	0x08006f49
 8006d1c:	08006fb9 	.word	0x08006fb9
 8006d20:	08006fff 	.word	0x08006fff
 8006d24:	08007045 	.word	0x08007045
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006d28:	2108      	movs	r1, #8
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f000 fa50 	bl	80071d0 <USBH_Get_DevDesc>
 8006d30:	4603      	mov	r3, r0
 8006d32:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006d34:	7bbb      	ldrb	r3, [r7, #14]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d130      	bne.n	8006d9c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2201      	movs	r2, #1
 8006d48:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	7919      	ldrb	r1, [r3, #4]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006d5a:	687a      	ldr	r2, [r7, #4]
 8006d5c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006d5e:	b292      	uxth	r2, r2
 8006d60:	9202      	str	r2, [sp, #8]
 8006d62:	2200      	movs	r2, #0
 8006d64:	9201      	str	r2, [sp, #4]
 8006d66:	9300      	str	r3, [sp, #0]
 8006d68:	4603      	mov	r3, r0
 8006d6a:	2280      	movs	r2, #128	; 0x80
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f000 ff79 	bl	8007c64 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	7959      	ldrb	r1, [r3, #5]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006d82:	687a      	ldr	r2, [r7, #4]
 8006d84:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006d86:	b292      	uxth	r2, r2
 8006d88:	9202      	str	r2, [sp, #8]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	9201      	str	r2, [sp, #4]
 8006d8e:	9300      	str	r3, [sp, #0]
 8006d90:	4603      	mov	r3, r0
 8006d92:	2200      	movs	r2, #0
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f000 ff65 	bl	8007c64 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006d9a:	e175      	b.n	8007088 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006d9c:	7bbb      	ldrb	r3, [r7, #14]
 8006d9e:	2b03      	cmp	r3, #3
 8006da0:	f040 8172 	bne.w	8007088 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006daa:	3301      	adds	r3, #1
 8006dac:	b2da      	uxtb	r2, r3
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006dba:	2b03      	cmp	r3, #3
 8006dbc:	d903      	bls.n	8006dc6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	220d      	movs	r2, #13
 8006dc2:	701a      	strb	r2, [r3, #0]
      break;
 8006dc4:	e160      	b.n	8007088 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	795b      	ldrb	r3, [r3, #5]
 8006dca:	4619      	mov	r1, r3
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f000 ff99 	bl	8007d04 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	791b      	ldrb	r3, [r3, #4]
 8006dd6:	4619      	mov	r1, r3
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f000 ff93 	bl	8007d04 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2200      	movs	r2, #0
 8006de2:	701a      	strb	r2, [r3, #0]
      break;
 8006de4:	e150      	b.n	8007088 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8006de6:	2112      	movs	r1, #18
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f000 f9f1 	bl	80071d0 <USBH_Get_DevDesc>
 8006dee:	4603      	mov	r3, r0
 8006df0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006df2:	7bbb      	ldrb	r3, [r7, #14]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d103      	bne.n	8006e00 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2202      	movs	r2, #2
 8006dfc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006dfe:	e145      	b.n	800708c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006e00:	7bbb      	ldrb	r3, [r7, #14]
 8006e02:	2b03      	cmp	r3, #3
 8006e04:	f040 8142 	bne.w	800708c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006e0e:	3301      	adds	r3, #1
 8006e10:	b2da      	uxtb	r2, r3
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006e1e:	2b03      	cmp	r3, #3
 8006e20:	d903      	bls.n	8006e2a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	220d      	movs	r2, #13
 8006e26:	701a      	strb	r2, [r3, #0]
      break;
 8006e28:	e130      	b.n	800708c <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	795b      	ldrb	r3, [r3, #5]
 8006e2e:	4619      	mov	r1, r3
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f000 ff67 	bl	8007d04 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	791b      	ldrb	r3, [r3, #4]
 8006e3a:	4619      	mov	r1, r3
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f000 ff61 	bl	8007d04 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2200      	movs	r2, #0
 8006e46:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	701a      	strb	r2, [r3, #0]
      break;
 8006e4e:	e11d      	b.n	800708c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006e50:	2101      	movs	r1, #1
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f000 fa68 	bl	8007328 <USBH_SetAddress>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006e5c:	7bbb      	ldrb	r3, [r7, #14]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d132      	bne.n	8006ec8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8006e62:	2002      	movs	r0, #2
 8006e64:	f001 fa45 	bl	80082f2 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2203      	movs	r2, #3
 8006e74:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	7919      	ldrb	r1, [r3, #4]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006e86:	687a      	ldr	r2, [r7, #4]
 8006e88:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006e8a:	b292      	uxth	r2, r2
 8006e8c:	9202      	str	r2, [sp, #8]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	9201      	str	r2, [sp, #4]
 8006e92:	9300      	str	r3, [sp, #0]
 8006e94:	4603      	mov	r3, r0
 8006e96:	2280      	movs	r2, #128	; 0x80
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f000 fee3 	bl	8007c64 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	7959      	ldrb	r1, [r3, #5]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006eae:	687a      	ldr	r2, [r7, #4]
 8006eb0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006eb2:	b292      	uxth	r2, r2
 8006eb4:	9202      	str	r2, [sp, #8]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	9201      	str	r2, [sp, #4]
 8006eba:	9300      	str	r3, [sp, #0]
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f000 fecf 	bl	8007c64 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006ec6:	e0e3      	b.n	8007090 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006ec8:	7bbb      	ldrb	r3, [r7, #14]
 8006eca:	2b03      	cmp	r3, #3
 8006ecc:	f040 80e0 	bne.w	8007090 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	220d      	movs	r2, #13
 8006ed4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	705a      	strb	r2, [r3, #1]
      break;
 8006edc:	e0d8      	b.n	8007090 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006ede:	2109      	movs	r1, #9
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f000 f99d 	bl	8007220 <USBH_Get_CfgDesc>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006eea:	7bbb      	ldrb	r3, [r7, #14]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d103      	bne.n	8006ef8 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2204      	movs	r2, #4
 8006ef4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006ef6:	e0cd      	b.n	8007094 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006ef8:	7bbb      	ldrb	r3, [r7, #14]
 8006efa:	2b03      	cmp	r3, #3
 8006efc:	f040 80ca 	bne.w	8007094 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006f06:	3301      	adds	r3, #1
 8006f08:	b2da      	uxtb	r2, r3
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006f16:	2b03      	cmp	r3, #3
 8006f18:	d903      	bls.n	8006f22 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	220d      	movs	r2, #13
 8006f1e:	701a      	strb	r2, [r3, #0]
      break;
 8006f20:	e0b8      	b.n	8007094 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	795b      	ldrb	r3, [r3, #5]
 8006f26:	4619      	mov	r1, r3
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f000 feeb 	bl	8007d04 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	791b      	ldrb	r3, [r3, #4]
 8006f32:	4619      	mov	r1, r3
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f000 fee5 	bl	8007d04 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2200      	movs	r2, #0
 8006f44:	701a      	strb	r2, [r3, #0]
      break;
 8006f46:	e0a5      	b.n	8007094 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8006f4e:	4619      	mov	r1, r3
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f000 f965 	bl	8007220 <USBH_Get_CfgDesc>
 8006f56:	4603      	mov	r3, r0
 8006f58:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006f5a:	7bbb      	ldrb	r3, [r7, #14]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d103      	bne.n	8006f68 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2205      	movs	r2, #5
 8006f64:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006f66:	e097      	b.n	8007098 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006f68:	7bbb      	ldrb	r3, [r7, #14]
 8006f6a:	2b03      	cmp	r3, #3
 8006f6c:	f040 8094 	bne.w	8007098 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006f76:	3301      	adds	r3, #1
 8006f78:	b2da      	uxtb	r2, r3
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006f86:	2b03      	cmp	r3, #3
 8006f88:	d903      	bls.n	8006f92 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	220d      	movs	r2, #13
 8006f8e:	701a      	strb	r2, [r3, #0]
      break;
 8006f90:	e082      	b.n	8007098 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	795b      	ldrb	r3, [r3, #5]
 8006f96:	4619      	mov	r1, r3
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f000 feb3 	bl	8007d04 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	791b      	ldrb	r3, [r3, #4]
 8006fa2:	4619      	mov	r1, r3
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f000 fead 	bl	8007d04 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2200      	movs	r2, #0
 8006fae:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	701a      	strb	r2, [r3, #0]
      break;
 8006fb6:	e06f      	b.n	8007098 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d019      	beq.n	8006ff6 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006fce:	23ff      	movs	r3, #255	; 0xff
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f000 f949 	bl	8007268 <USBH_Get_StringDesc>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006fda:	7bbb      	ldrb	r3, [r7, #14]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d103      	bne.n	8006fe8 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2206      	movs	r2, #6
 8006fe4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006fe6:	e059      	b.n	800709c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006fe8:	7bbb      	ldrb	r3, [r7, #14]
 8006fea:	2b03      	cmp	r3, #3
 8006fec:	d156      	bne.n	800709c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2206      	movs	r2, #6
 8006ff2:	705a      	strb	r2, [r3, #1]
      break;
 8006ff4:	e052      	b.n	800709c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2206      	movs	r2, #6
 8006ffa:	705a      	strb	r2, [r3, #1]
      break;
 8006ffc:	e04e      	b.n	800709c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007004:	2b00      	cmp	r3, #0
 8007006:	d019      	beq.n	800703c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007014:	23ff      	movs	r3, #255	; 0xff
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f000 f926 	bl	8007268 <USBH_Get_StringDesc>
 800701c:	4603      	mov	r3, r0
 800701e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007020:	7bbb      	ldrb	r3, [r7, #14]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d103      	bne.n	800702e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2207      	movs	r2, #7
 800702a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800702c:	e038      	b.n	80070a0 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800702e:	7bbb      	ldrb	r3, [r7, #14]
 8007030:	2b03      	cmp	r3, #3
 8007032:	d135      	bne.n	80070a0 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2207      	movs	r2, #7
 8007038:	705a      	strb	r2, [r3, #1]
      break;
 800703a:	e031      	b.n	80070a0 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2207      	movs	r2, #7
 8007040:	705a      	strb	r2, [r3, #1]
      break;
 8007042:	e02d      	b.n	80070a0 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800704a:	2b00      	cmp	r3, #0
 800704c:	d017      	beq.n	800707e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800705a:	23ff      	movs	r3, #255	; 0xff
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f000 f903 	bl	8007268 <USBH_Get_StringDesc>
 8007062:	4603      	mov	r3, r0
 8007064:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007066:	7bbb      	ldrb	r3, [r7, #14]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d102      	bne.n	8007072 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800706c:	2300      	movs	r3, #0
 800706e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007070:	e018      	b.n	80070a4 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007072:	7bbb      	ldrb	r3, [r7, #14]
 8007074:	2b03      	cmp	r3, #3
 8007076:	d115      	bne.n	80070a4 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007078:	2300      	movs	r3, #0
 800707a:	73fb      	strb	r3, [r7, #15]
      break;
 800707c:	e012      	b.n	80070a4 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800707e:	2300      	movs	r3, #0
 8007080:	73fb      	strb	r3, [r7, #15]
      break;
 8007082:	e00f      	b.n	80070a4 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007084:	bf00      	nop
 8007086:	e00e      	b.n	80070a6 <USBH_HandleEnum+0x3be>
      break;
 8007088:	bf00      	nop
 800708a:	e00c      	b.n	80070a6 <USBH_HandleEnum+0x3be>
      break;
 800708c:	bf00      	nop
 800708e:	e00a      	b.n	80070a6 <USBH_HandleEnum+0x3be>
      break;
 8007090:	bf00      	nop
 8007092:	e008      	b.n	80070a6 <USBH_HandleEnum+0x3be>
      break;
 8007094:	bf00      	nop
 8007096:	e006      	b.n	80070a6 <USBH_HandleEnum+0x3be>
      break;
 8007098:	bf00      	nop
 800709a:	e004      	b.n	80070a6 <USBH_HandleEnum+0x3be>
      break;
 800709c:	bf00      	nop
 800709e:	e002      	b.n	80070a6 <USBH_HandleEnum+0x3be>
      break;
 80070a0:	bf00      	nop
 80070a2:	e000      	b.n	80070a6 <USBH_HandleEnum+0x3be>
      break;
 80070a4:	bf00      	nop
  }
  return Status;
 80070a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	3710      	adds	r7, #16
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd80      	pop	{r7, pc}

080070b0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b083      	sub	sp, #12
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
 80070b8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	683a      	ldr	r2, [r7, #0]
 80070be:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80070c2:	bf00      	nop
 80070c4:	370c      	adds	r7, #12
 80070c6:	46bd      	mov	sp, r7
 80070c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070cc:	4770      	bx	lr

080070ce <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80070ce:	b580      	push	{r7, lr}
 80070d0:	b082      	sub	sp, #8
 80070d2:	af00      	add	r7, sp, #0
 80070d4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80070dc:	1c5a      	adds	r2, r3, #1
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f000 f804 	bl	80070f2 <USBH_HandleSof>
}
 80070ea:	bf00      	nop
 80070ec:	3708      	adds	r7, #8
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}

080070f2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80070f2:	b580      	push	{r7, lr}
 80070f4:	b082      	sub	sp, #8
 80070f6:	af00      	add	r7, sp, #0
 80070f8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	781b      	ldrb	r3, [r3, #0]
 80070fe:	b2db      	uxtb	r3, r3
 8007100:	2b0b      	cmp	r3, #11
 8007102:	d10a      	bne.n	800711a <USBH_HandleSof+0x28>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800710a:	2b00      	cmp	r3, #0
 800710c:	d005      	beq.n	800711a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007114:	699b      	ldr	r3, [r3, #24]
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	4798      	blx	r3
  }
}
 800711a:	bf00      	nop
 800711c:	3708      	adds	r7, #8
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}

08007122 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007122:	b480      	push	{r7}
 8007124:	b083      	sub	sp, #12
 8007126:	af00      	add	r7, sp, #0
 8007128:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2201      	movs	r2, #1
 800712e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8007132:	bf00      	nop
}
 8007134:	370c      	adds	r7, #12
 8007136:	46bd      	mov	sp, r7
 8007138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713c:	4770      	bx	lr

0800713e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800713e:	b480      	push	{r7}
 8007140:	b083      	sub	sp, #12
 8007142:	af00      	add	r7, sp, #0
 8007144:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2200      	movs	r2, #0
 800714a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800714e:	bf00      	nop
}
 8007150:	370c      	adds	r7, #12
 8007152:	46bd      	mov	sp, r7
 8007154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007158:	4770      	bx	lr

0800715a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800715a:	b480      	push	{r7}
 800715c:	b083      	sub	sp, #12
 800715e:	af00      	add	r7, sp, #0
 8007160:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2201      	movs	r2, #1
 8007166:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2200      	movs	r2, #0
 800716e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2200      	movs	r2, #0
 8007176:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800717a:	2300      	movs	r3, #0
}
 800717c:	4618      	mov	r0, r3
 800717e:	370c      	adds	r7, #12
 8007180:	46bd      	mov	sp, r7
 8007182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007186:	4770      	bx	lr

08007188 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b082      	sub	sp, #8
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2201      	movs	r2, #1
 8007194:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2200      	movs	r2, #0
 800719c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2200      	movs	r2, #0
 80071a4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f000 ff58 	bl	800805e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	791b      	ldrb	r3, [r3, #4]
 80071b2:	4619      	mov	r1, r3
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f000 fda5 	bl	8007d04 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	795b      	ldrb	r3, [r3, #5]
 80071be:	4619      	mov	r1, r3
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f000 fd9f 	bl	8007d04 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80071c6:	2300      	movs	r3, #0
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	3708      	adds	r7, #8
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}

080071d0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b086      	sub	sp, #24
 80071d4:	af02      	add	r7, sp, #8
 80071d6:	6078      	str	r0, [r7, #4]
 80071d8:	460b      	mov	r3, r1
 80071da:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80071e2:	78fb      	ldrb	r3, [r7, #3]
 80071e4:	b29b      	uxth	r3, r3
 80071e6:	9300      	str	r3, [sp, #0]
 80071e8:	4613      	mov	r3, r2
 80071ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80071ee:	2100      	movs	r1, #0
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f000 f864 	bl	80072be <USBH_GetDescriptor>
 80071f6:	4603      	mov	r3, r0
 80071f8:	73fb      	strb	r3, [r7, #15]
 80071fa:	7bfb      	ldrb	r3, [r7, #15]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d10a      	bne.n	8007216 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800720c:	78fa      	ldrb	r2, [r7, #3]
 800720e:	b292      	uxth	r2, r2
 8007210:	4619      	mov	r1, r3
 8007212:	f000 f918 	bl	8007446 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007216:	7bfb      	ldrb	r3, [r7, #15]
}
 8007218:	4618      	mov	r0, r3
 800721a:	3710      	adds	r7, #16
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}

08007220 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007220:	b580      	push	{r7, lr}
 8007222:	b086      	sub	sp, #24
 8007224:	af02      	add	r7, sp, #8
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	460b      	mov	r3, r1
 800722a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	331c      	adds	r3, #28
 8007230:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007232:	887b      	ldrh	r3, [r7, #2]
 8007234:	9300      	str	r3, [sp, #0]
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	f44f 7200 	mov.w	r2, #512	; 0x200
 800723c:	2100      	movs	r1, #0
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f000 f83d 	bl	80072be <USBH_GetDescriptor>
 8007244:	4603      	mov	r3, r0
 8007246:	72fb      	strb	r3, [r7, #11]
 8007248:	7afb      	ldrb	r3, [r7, #11]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d107      	bne.n	800725e <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007254:	887a      	ldrh	r2, [r7, #2]
 8007256:	68f9      	ldr	r1, [r7, #12]
 8007258:	4618      	mov	r0, r3
 800725a:	f000 f964 	bl	8007526 <USBH_ParseCfgDesc>
  }

  return status;
 800725e:	7afb      	ldrb	r3, [r7, #11]
}
 8007260:	4618      	mov	r0, r3
 8007262:	3710      	adds	r7, #16
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}

08007268 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b088      	sub	sp, #32
 800726c:	af02      	add	r7, sp, #8
 800726e:	60f8      	str	r0, [r7, #12]
 8007270:	607a      	str	r2, [r7, #4]
 8007272:	461a      	mov	r2, r3
 8007274:	460b      	mov	r3, r1
 8007276:	72fb      	strb	r3, [r7, #11]
 8007278:	4613      	mov	r3, r2
 800727a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800727c:	7afb      	ldrb	r3, [r7, #11]
 800727e:	b29b      	uxth	r3, r3
 8007280:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007284:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800728c:	893b      	ldrh	r3, [r7, #8]
 800728e:	9300      	str	r3, [sp, #0]
 8007290:	460b      	mov	r3, r1
 8007292:	2100      	movs	r1, #0
 8007294:	68f8      	ldr	r0, [r7, #12]
 8007296:	f000 f812 	bl	80072be <USBH_GetDescriptor>
 800729a:	4603      	mov	r3, r0
 800729c:	75fb      	strb	r3, [r7, #23]
 800729e:	7dfb      	ldrb	r3, [r7, #23]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d107      	bne.n	80072b4 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80072aa:	893a      	ldrh	r2, [r7, #8]
 80072ac:	6879      	ldr	r1, [r7, #4]
 80072ae:	4618      	mov	r0, r3
 80072b0:	f000 fa37 	bl	8007722 <USBH_ParseStringDesc>
  }

  return status;
 80072b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	3718      	adds	r7, #24
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}

080072be <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80072be:	b580      	push	{r7, lr}
 80072c0:	b084      	sub	sp, #16
 80072c2:	af00      	add	r7, sp, #0
 80072c4:	60f8      	str	r0, [r7, #12]
 80072c6:	607b      	str	r3, [r7, #4]
 80072c8:	460b      	mov	r3, r1
 80072ca:	72fb      	strb	r3, [r7, #11]
 80072cc:	4613      	mov	r3, r2
 80072ce:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	789b      	ldrb	r3, [r3, #2]
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	d11c      	bne.n	8007312 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80072d8:	7afb      	ldrb	r3, [r7, #11]
 80072da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80072de:	b2da      	uxtb	r2, r3
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2206      	movs	r2, #6
 80072e8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	893a      	ldrh	r2, [r7, #8]
 80072ee:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80072f0:	893b      	ldrh	r3, [r7, #8]
 80072f2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80072f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072fa:	d104      	bne.n	8007306 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	f240 4209 	movw	r2, #1033	; 0x409
 8007302:	829a      	strh	r2, [r3, #20]
 8007304:	e002      	b.n	800730c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2200      	movs	r2, #0
 800730a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	8b3a      	ldrh	r2, [r7, #24]
 8007310:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007312:	8b3b      	ldrh	r3, [r7, #24]
 8007314:	461a      	mov	r2, r3
 8007316:	6879      	ldr	r1, [r7, #4]
 8007318:	68f8      	ldr	r0, [r7, #12]
 800731a:	f000 fa50 	bl	80077be <USBH_CtlReq>
 800731e:	4603      	mov	r3, r0
}
 8007320:	4618      	mov	r0, r3
 8007322:	3710      	adds	r7, #16
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}

08007328 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b082      	sub	sp, #8
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
 8007330:	460b      	mov	r3, r1
 8007332:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	789b      	ldrb	r3, [r3, #2]
 8007338:	2b01      	cmp	r3, #1
 800733a:	d10f      	bne.n	800735c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2200      	movs	r2, #0
 8007340:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2205      	movs	r2, #5
 8007346:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007348:	78fb      	ldrb	r3, [r7, #3]
 800734a:	b29a      	uxth	r2, r3
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2200      	movs	r2, #0
 8007354:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2200      	movs	r2, #0
 800735a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800735c:	2200      	movs	r2, #0
 800735e:	2100      	movs	r1, #0
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f000 fa2c 	bl	80077be <USBH_CtlReq>
 8007366:	4603      	mov	r3, r0
}
 8007368:	4618      	mov	r0, r3
 800736a:	3708      	adds	r7, #8
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}

08007370 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b082      	sub	sp, #8
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
 8007378:	460b      	mov	r3, r1
 800737a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	789b      	ldrb	r3, [r3, #2]
 8007380:	2b01      	cmp	r3, #1
 8007382:	d10e      	bne.n	80073a2 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2200      	movs	r2, #0
 8007388:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2209      	movs	r2, #9
 800738e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	887a      	ldrh	r2, [r7, #2]
 8007394:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2200      	movs	r2, #0
 800739a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2200      	movs	r2, #0
 80073a0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80073a2:	2200      	movs	r2, #0
 80073a4:	2100      	movs	r1, #0
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f000 fa09 	bl	80077be <USBH_CtlReq>
 80073ac:	4603      	mov	r3, r0
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3708      	adds	r7, #8
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}

080073b6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80073b6:	b580      	push	{r7, lr}
 80073b8:	b082      	sub	sp, #8
 80073ba:	af00      	add	r7, sp, #0
 80073bc:	6078      	str	r0, [r7, #4]
 80073be:	460b      	mov	r3, r1
 80073c0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	789b      	ldrb	r3, [r3, #2]
 80073c6:	2b01      	cmp	r3, #1
 80073c8:	d10f      	bne.n	80073ea <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2200      	movs	r2, #0
 80073ce:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2203      	movs	r2, #3
 80073d4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80073d6:	78fb      	ldrb	r3, [r7, #3]
 80073d8:	b29a      	uxth	r2, r3
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2200      	movs	r2, #0
 80073e2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2200      	movs	r2, #0
 80073e8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80073ea:	2200      	movs	r2, #0
 80073ec:	2100      	movs	r1, #0
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f000 f9e5 	bl	80077be <USBH_CtlReq>
 80073f4:	4603      	mov	r3, r0
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	3708      	adds	r7, #8
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}

080073fe <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80073fe:	b580      	push	{r7, lr}
 8007400:	b082      	sub	sp, #8
 8007402:	af00      	add	r7, sp, #0
 8007404:	6078      	str	r0, [r7, #4]
 8007406:	460b      	mov	r3, r1
 8007408:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	789b      	ldrb	r3, [r3, #2]
 800740e:	2b01      	cmp	r3, #1
 8007410:	d10f      	bne.n	8007432 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2202      	movs	r2, #2
 8007416:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2201      	movs	r2, #1
 800741c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2200      	movs	r2, #0
 8007422:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007424:	78fb      	ldrb	r3, [r7, #3]
 8007426:	b29a      	uxth	r2, r3
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2200      	movs	r2, #0
 8007430:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8007432:	2200      	movs	r2, #0
 8007434:	2100      	movs	r1, #0
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f000 f9c1 	bl	80077be <USBH_CtlReq>
 800743c:	4603      	mov	r3, r0
}
 800743e:	4618      	mov	r0, r3
 8007440:	3708      	adds	r7, #8
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}

08007446 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007446:	b480      	push	{r7}
 8007448:	b085      	sub	sp, #20
 800744a:	af00      	add	r7, sp, #0
 800744c:	60f8      	str	r0, [r7, #12]
 800744e:	60b9      	str	r1, [r7, #8]
 8007450:	4613      	mov	r3, r2
 8007452:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	781a      	ldrb	r2, [r3, #0]
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	785a      	ldrb	r2, [r3, #1]
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	3302      	adds	r3, #2
 8007468:	781b      	ldrb	r3, [r3, #0]
 800746a:	b29a      	uxth	r2, r3
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	3303      	adds	r3, #3
 8007470:	781b      	ldrb	r3, [r3, #0]
 8007472:	b29b      	uxth	r3, r3
 8007474:	021b      	lsls	r3, r3, #8
 8007476:	b29b      	uxth	r3, r3
 8007478:	4313      	orrs	r3, r2
 800747a:	b29a      	uxth	r2, r3
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	791a      	ldrb	r2, [r3, #4]
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	795a      	ldrb	r2, [r3, #5]
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	799a      	ldrb	r2, [r3, #6]
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	79da      	ldrb	r2, [r3, #7]
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 80074a0:	88fb      	ldrh	r3, [r7, #6]
 80074a2:	2b08      	cmp	r3, #8
 80074a4:	d939      	bls.n	800751a <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	3308      	adds	r3, #8
 80074aa:	781b      	ldrb	r3, [r3, #0]
 80074ac:	b29a      	uxth	r2, r3
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	3309      	adds	r3, #9
 80074b2:	781b      	ldrb	r3, [r3, #0]
 80074b4:	b29b      	uxth	r3, r3
 80074b6:	021b      	lsls	r3, r3, #8
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	4313      	orrs	r3, r2
 80074bc:	b29a      	uxth	r2, r3
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	330a      	adds	r3, #10
 80074c6:	781b      	ldrb	r3, [r3, #0]
 80074c8:	b29a      	uxth	r2, r3
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	330b      	adds	r3, #11
 80074ce:	781b      	ldrb	r3, [r3, #0]
 80074d0:	b29b      	uxth	r3, r3
 80074d2:	021b      	lsls	r3, r3, #8
 80074d4:	b29b      	uxth	r3, r3
 80074d6:	4313      	orrs	r3, r2
 80074d8:	b29a      	uxth	r2, r3
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	330c      	adds	r3, #12
 80074e2:	781b      	ldrb	r3, [r3, #0]
 80074e4:	b29a      	uxth	r2, r3
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	330d      	adds	r3, #13
 80074ea:	781b      	ldrb	r3, [r3, #0]
 80074ec:	b29b      	uxth	r3, r3
 80074ee:	021b      	lsls	r3, r3, #8
 80074f0:	b29b      	uxth	r3, r3
 80074f2:	4313      	orrs	r3, r2
 80074f4:	b29a      	uxth	r2, r3
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	7b9a      	ldrb	r2, [r3, #14]
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	7bda      	ldrb	r2, [r3, #15]
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	7c1a      	ldrb	r2, [r3, #16]
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	7c5a      	ldrb	r2, [r3, #17]
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	745a      	strb	r2, [r3, #17]
  }
}
 800751a:	bf00      	nop
 800751c:	3714      	adds	r7, #20
 800751e:	46bd      	mov	sp, r7
 8007520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007524:	4770      	bx	lr

08007526 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8007526:	b580      	push	{r7, lr}
 8007528:	b08a      	sub	sp, #40	; 0x28
 800752a:	af00      	add	r7, sp, #0
 800752c:	60f8      	str	r0, [r7, #12]
 800752e:	60b9      	str	r1, [r7, #8]
 8007530:	4613      	mov	r3, r2
 8007532:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007538:	2300      	movs	r3, #0
 800753a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800753e:	2300      	movs	r3, #0
 8007540:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	781a      	ldrb	r2, [r3, #0]
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	785a      	ldrb	r2, [r3, #1]
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	3302      	adds	r3, #2
 800755c:	781b      	ldrb	r3, [r3, #0]
 800755e:	b29a      	uxth	r2, r3
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	3303      	adds	r3, #3
 8007564:	781b      	ldrb	r3, [r3, #0]
 8007566:	b29b      	uxth	r3, r3
 8007568:	021b      	lsls	r3, r3, #8
 800756a:	b29b      	uxth	r3, r3
 800756c:	4313      	orrs	r3, r2
 800756e:	b29a      	uxth	r2, r3
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	791a      	ldrb	r2, [r3, #4]
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	795a      	ldrb	r2, [r3, #5]
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	799a      	ldrb	r2, [r3, #6]
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	79da      	ldrb	r2, [r3, #7]
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	7a1a      	ldrb	r2, [r3, #8]
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800759c:	88fb      	ldrh	r3, [r7, #6]
 800759e:	2b09      	cmp	r3, #9
 80075a0:	d95f      	bls.n	8007662 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 80075a2:	2309      	movs	r3, #9
 80075a4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 80075a6:	2300      	movs	r3, #0
 80075a8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80075aa:	e051      	b.n	8007650 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80075ac:	f107 0316 	add.w	r3, r7, #22
 80075b0:	4619      	mov	r1, r3
 80075b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80075b4:	f000 f8e8 	bl	8007788 <USBH_GetNextDesc>
 80075b8:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 80075ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075bc:	785b      	ldrb	r3, [r3, #1]
 80075be:	2b04      	cmp	r3, #4
 80075c0:	d146      	bne.n	8007650 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 80075c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80075c6:	221a      	movs	r2, #26
 80075c8:	fb02 f303 	mul.w	r3, r2, r3
 80075cc:	3308      	adds	r3, #8
 80075ce:	68fa      	ldr	r2, [r7, #12]
 80075d0:	4413      	add	r3, r2
 80075d2:	3302      	adds	r3, #2
 80075d4:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80075d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80075d8:	69f8      	ldr	r0, [r7, #28]
 80075da:	f000 f846 	bl	800766a <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80075de:	2300      	movs	r3, #0
 80075e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 80075e4:	2300      	movs	r3, #0
 80075e6:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80075e8:	e022      	b.n	8007630 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80075ea:	f107 0316 	add.w	r3, r7, #22
 80075ee:	4619      	mov	r1, r3
 80075f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80075f2:	f000 f8c9 	bl	8007788 <USBH_GetNextDesc>
 80075f6:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 80075f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075fa:	785b      	ldrb	r3, [r3, #1]
 80075fc:	2b05      	cmp	r3, #5
 80075fe:	d117      	bne.n	8007630 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007600:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007604:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007608:	3201      	adds	r2, #1
 800760a:	00d2      	lsls	r2, r2, #3
 800760c:	211a      	movs	r1, #26
 800760e:	fb01 f303 	mul.w	r3, r1, r3
 8007612:	4413      	add	r3, r2
 8007614:	3308      	adds	r3, #8
 8007616:	68fa      	ldr	r2, [r7, #12]
 8007618:	4413      	add	r3, r2
 800761a:	3304      	adds	r3, #4
 800761c:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800761e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007620:	69b8      	ldr	r0, [r7, #24]
 8007622:	f000 f851 	bl	80076c8 <USBH_ParseEPDesc>
            ep_ix++;
 8007626:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800762a:	3301      	adds	r3, #1
 800762c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007630:	69fb      	ldr	r3, [r7, #28]
 8007632:	791b      	ldrb	r3, [r3, #4]
 8007634:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007638:	429a      	cmp	r2, r3
 800763a:	d204      	bcs.n	8007646 <USBH_ParseCfgDesc+0x120>
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	885a      	ldrh	r2, [r3, #2]
 8007640:	8afb      	ldrh	r3, [r7, #22]
 8007642:	429a      	cmp	r2, r3
 8007644:	d8d1      	bhi.n	80075ea <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8007646:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800764a:	3301      	adds	r3, #1
 800764c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007650:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007654:	2b01      	cmp	r3, #1
 8007656:	d804      	bhi.n	8007662 <USBH_ParseCfgDesc+0x13c>
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	885a      	ldrh	r2, [r3, #2]
 800765c:	8afb      	ldrh	r3, [r7, #22]
 800765e:	429a      	cmp	r2, r3
 8007660:	d8a4      	bhi.n	80075ac <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8007662:	bf00      	nop
 8007664:	3728      	adds	r7, #40	; 0x28
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}

0800766a <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800766a:	b480      	push	{r7}
 800766c:	b083      	sub	sp, #12
 800766e:	af00      	add	r7, sp, #0
 8007670:	6078      	str	r0, [r7, #4]
 8007672:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	781a      	ldrb	r2, [r3, #0]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	785a      	ldrb	r2, [r3, #1]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	789a      	ldrb	r2, [r3, #2]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	78da      	ldrb	r2, [r3, #3]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	791a      	ldrb	r2, [r3, #4]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	795a      	ldrb	r2, [r3, #5]
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	799a      	ldrb	r2, [r3, #6]
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	79da      	ldrb	r2, [r3, #7]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	7a1a      	ldrb	r2, [r3, #8]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	721a      	strb	r2, [r3, #8]
}
 80076bc:	bf00      	nop
 80076be:	370c      	adds	r7, #12
 80076c0:	46bd      	mov	sp, r7
 80076c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c6:	4770      	bx	lr

080076c8 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b083      	sub	sp, #12
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	781a      	ldrb	r2, [r3, #0]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	785a      	ldrb	r2, [r3, #1]
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	789a      	ldrb	r2, [r3, #2]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	78da      	ldrb	r2, [r3, #3]
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	3304      	adds	r3, #4
 80076f6:	781b      	ldrb	r3, [r3, #0]
 80076f8:	b29a      	uxth	r2, r3
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	3305      	adds	r3, #5
 80076fe:	781b      	ldrb	r3, [r3, #0]
 8007700:	b29b      	uxth	r3, r3
 8007702:	021b      	lsls	r3, r3, #8
 8007704:	b29b      	uxth	r3, r3
 8007706:	4313      	orrs	r3, r2
 8007708:	b29a      	uxth	r2, r3
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	799a      	ldrb	r2, [r3, #6]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	719a      	strb	r2, [r3, #6]
}
 8007716:	bf00      	nop
 8007718:	370c      	adds	r7, #12
 800771a:	46bd      	mov	sp, r7
 800771c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007720:	4770      	bx	lr

08007722 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007722:	b480      	push	{r7}
 8007724:	b087      	sub	sp, #28
 8007726:	af00      	add	r7, sp, #0
 8007728:	60f8      	str	r0, [r7, #12]
 800772a:	60b9      	str	r1, [r7, #8]
 800772c:	4613      	mov	r3, r2
 800772e:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	3301      	adds	r3, #1
 8007734:	781b      	ldrb	r3, [r3, #0]
 8007736:	2b03      	cmp	r3, #3
 8007738:	d120      	bne.n	800777c <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	781b      	ldrb	r3, [r3, #0]
 800773e:	1e9a      	subs	r2, r3, #2
 8007740:	88fb      	ldrh	r3, [r7, #6]
 8007742:	4293      	cmp	r3, r2
 8007744:	bf28      	it	cs
 8007746:	4613      	movcs	r3, r2
 8007748:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	3302      	adds	r3, #2
 800774e:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007750:	2300      	movs	r3, #0
 8007752:	82fb      	strh	r3, [r7, #22]
 8007754:	e00b      	b.n	800776e <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007756:	8afb      	ldrh	r3, [r7, #22]
 8007758:	68fa      	ldr	r2, [r7, #12]
 800775a:	4413      	add	r3, r2
 800775c:	781a      	ldrb	r2, [r3, #0]
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	3301      	adds	r3, #1
 8007766:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007768:	8afb      	ldrh	r3, [r7, #22]
 800776a:	3302      	adds	r3, #2
 800776c:	82fb      	strh	r3, [r7, #22]
 800776e:	8afa      	ldrh	r2, [r7, #22]
 8007770:	8abb      	ldrh	r3, [r7, #20]
 8007772:	429a      	cmp	r2, r3
 8007774:	d3ef      	bcc.n	8007756 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	2200      	movs	r2, #0
 800777a:	701a      	strb	r2, [r3, #0]
  }
}
 800777c:	bf00      	nop
 800777e:	371c      	adds	r7, #28
 8007780:	46bd      	mov	sp, r7
 8007782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007786:	4770      	bx	lr

08007788 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007788:	b480      	push	{r7}
 800778a:	b085      	sub	sp, #20
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
 8007790:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	881a      	ldrh	r2, [r3, #0]
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	781b      	ldrb	r3, [r3, #0]
 800779a:	b29b      	uxth	r3, r3
 800779c:	4413      	add	r3, r2
 800779e:	b29a      	uxth	r2, r3
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	781b      	ldrb	r3, [r3, #0]
 80077a8:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	4413      	add	r3, r2
 80077ae:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80077b0:	68fb      	ldr	r3, [r7, #12]
}
 80077b2:	4618      	mov	r0, r3
 80077b4:	3714      	adds	r7, #20
 80077b6:	46bd      	mov	sp, r7
 80077b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077bc:	4770      	bx	lr

080077be <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80077be:	b580      	push	{r7, lr}
 80077c0:	b086      	sub	sp, #24
 80077c2:	af00      	add	r7, sp, #0
 80077c4:	60f8      	str	r0, [r7, #12]
 80077c6:	60b9      	str	r1, [r7, #8]
 80077c8:	4613      	mov	r3, r2
 80077ca:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80077cc:	2301      	movs	r3, #1
 80077ce:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	789b      	ldrb	r3, [r3, #2]
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	d002      	beq.n	80077de <USBH_CtlReq+0x20>
 80077d8:	2b02      	cmp	r3, #2
 80077da:	d00f      	beq.n	80077fc <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80077dc:	e027      	b.n	800782e <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	68ba      	ldr	r2, [r7, #8]
 80077e2:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	88fa      	ldrh	r2, [r7, #6]
 80077e8:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	2201      	movs	r2, #1
 80077ee:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2202      	movs	r2, #2
 80077f4:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80077f6:	2301      	movs	r3, #1
 80077f8:	75fb      	strb	r3, [r7, #23]
      break;
 80077fa:	e018      	b.n	800782e <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80077fc:	68f8      	ldr	r0, [r7, #12]
 80077fe:	f000 f81b 	bl	8007838 <USBH_HandleControl>
 8007802:	4603      	mov	r3, r0
 8007804:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007806:	7dfb      	ldrb	r3, [r7, #23]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d002      	beq.n	8007812 <USBH_CtlReq+0x54>
 800780c:	7dfb      	ldrb	r3, [r7, #23]
 800780e:	2b03      	cmp	r3, #3
 8007810:	d106      	bne.n	8007820 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2201      	movs	r2, #1
 8007816:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2200      	movs	r2, #0
 800781c:	761a      	strb	r2, [r3, #24]
      break;
 800781e:	e005      	b.n	800782c <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007820:	7dfb      	ldrb	r3, [r7, #23]
 8007822:	2b02      	cmp	r3, #2
 8007824:	d102      	bne.n	800782c <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	2201      	movs	r2, #1
 800782a:	709a      	strb	r2, [r3, #2]
      break;
 800782c:	bf00      	nop
  }
  return status;
 800782e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007830:	4618      	mov	r0, r3
 8007832:	3718      	adds	r7, #24
 8007834:	46bd      	mov	sp, r7
 8007836:	bd80      	pop	{r7, pc}

08007838 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b086      	sub	sp, #24
 800783c:	af02      	add	r7, sp, #8
 800783e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007840:	2301      	movs	r3, #1
 8007842:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007844:	2300      	movs	r3, #0
 8007846:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	7e1b      	ldrb	r3, [r3, #24]
 800784c:	3b01      	subs	r3, #1
 800784e:	2b0a      	cmp	r3, #10
 8007850:	f200 8158 	bhi.w	8007b04 <USBH_HandleControl+0x2cc>
 8007854:	a201      	add	r2, pc, #4	; (adr r2, 800785c <USBH_HandleControl+0x24>)
 8007856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800785a:	bf00      	nop
 800785c:	08007889 	.word	0x08007889
 8007860:	080078a3 	.word	0x080078a3
 8007864:	0800790d 	.word	0x0800790d
 8007868:	08007933 	.word	0x08007933
 800786c:	0800796b 	.word	0x0800796b
 8007870:	08007997 	.word	0x08007997
 8007874:	080079e9 	.word	0x080079e9
 8007878:	08007a0b 	.word	0x08007a0b
 800787c:	08007a47 	.word	0x08007a47
 8007880:	08007a6f 	.word	0x08007a6f
 8007884:	08007aad 	.word	0x08007aad
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f103 0110 	add.w	r1, r3, #16
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	795b      	ldrb	r3, [r3, #5]
 8007892:	461a      	mov	r2, r3
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f000 f945 	bl	8007b24 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2202      	movs	r2, #2
 800789e:	761a      	strb	r2, [r3, #24]
      break;
 80078a0:	e13b      	b.n	8007b1a <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	795b      	ldrb	r3, [r3, #5]
 80078a6:	4619      	mov	r1, r3
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f000 fcc5 	bl	8008238 <USBH_LL_GetURBState>
 80078ae:	4603      	mov	r3, r0
 80078b0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80078b2:	7bbb      	ldrb	r3, [r7, #14]
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	d11e      	bne.n	80078f6 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	7c1b      	ldrb	r3, [r3, #16]
 80078bc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80078c0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	8adb      	ldrh	r3, [r3, #22]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d00a      	beq.n	80078e0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80078ca:	7b7b      	ldrb	r3, [r7, #13]
 80078cc:	2b80      	cmp	r3, #128	; 0x80
 80078ce:	d103      	bne.n	80078d8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2203      	movs	r2, #3
 80078d4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80078d6:	e117      	b.n	8007b08 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2205      	movs	r2, #5
 80078dc:	761a      	strb	r2, [r3, #24]
      break;
 80078de:	e113      	b.n	8007b08 <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 80078e0:	7b7b      	ldrb	r3, [r7, #13]
 80078e2:	2b80      	cmp	r3, #128	; 0x80
 80078e4:	d103      	bne.n	80078ee <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2209      	movs	r2, #9
 80078ea:	761a      	strb	r2, [r3, #24]
      break;
 80078ec:	e10c      	b.n	8007b08 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2207      	movs	r2, #7
 80078f2:	761a      	strb	r2, [r3, #24]
      break;
 80078f4:	e108      	b.n	8007b08 <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80078f6:	7bbb      	ldrb	r3, [r7, #14]
 80078f8:	2b04      	cmp	r3, #4
 80078fa:	d003      	beq.n	8007904 <USBH_HandleControl+0xcc>
 80078fc:	7bbb      	ldrb	r3, [r7, #14]
 80078fe:	2b02      	cmp	r3, #2
 8007900:	f040 8102 	bne.w	8007b08 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	220b      	movs	r2, #11
 8007908:	761a      	strb	r2, [r3, #24]
      break;
 800790a:	e0fd      	b.n	8007b08 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007912:	b29a      	uxth	r2, r3
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6899      	ldr	r1, [r3, #8]
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	899a      	ldrh	r2, [r3, #12]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	791b      	ldrb	r3, [r3, #4]
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f000 f93c 	bl	8007ba2 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2204      	movs	r2, #4
 800792e:	761a      	strb	r2, [r3, #24]
      break;
 8007930:	e0f3      	b.n	8007b1a <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	791b      	ldrb	r3, [r3, #4]
 8007936:	4619      	mov	r1, r3
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f000 fc7d 	bl	8008238 <USBH_LL_GetURBState>
 800793e:	4603      	mov	r3, r0
 8007940:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007942:	7bbb      	ldrb	r3, [r7, #14]
 8007944:	2b01      	cmp	r3, #1
 8007946:	d102      	bne.n	800794e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2209      	movs	r2, #9
 800794c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800794e:	7bbb      	ldrb	r3, [r7, #14]
 8007950:	2b05      	cmp	r3, #5
 8007952:	d102      	bne.n	800795a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007954:	2303      	movs	r3, #3
 8007956:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007958:	e0d8      	b.n	8007b0c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800795a:	7bbb      	ldrb	r3, [r7, #14]
 800795c:	2b04      	cmp	r3, #4
 800795e:	f040 80d5 	bne.w	8007b0c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	220b      	movs	r2, #11
 8007966:	761a      	strb	r2, [r3, #24]
      break;
 8007968:	e0d0      	b.n	8007b0c <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6899      	ldr	r1, [r3, #8]
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	899a      	ldrh	r2, [r3, #12]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	7958      	ldrb	r0, [r3, #5]
 8007976:	2301      	movs	r3, #1
 8007978:	9300      	str	r3, [sp, #0]
 800797a:	4603      	mov	r3, r0
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f000 f8eb 	bl	8007b58 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007988:	b29a      	uxth	r2, r3
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2206      	movs	r2, #6
 8007992:	761a      	strb	r2, [r3, #24]
      break;
 8007994:	e0c1      	b.n	8007b1a <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	795b      	ldrb	r3, [r3, #5]
 800799a:	4619      	mov	r1, r3
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f000 fc4b 	bl	8008238 <USBH_LL_GetURBState>
 80079a2:	4603      	mov	r3, r0
 80079a4:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80079a6:	7bbb      	ldrb	r3, [r7, #14]
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	d103      	bne.n	80079b4 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2207      	movs	r2, #7
 80079b0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80079b2:	e0ad      	b.n	8007b10 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 80079b4:	7bbb      	ldrb	r3, [r7, #14]
 80079b6:	2b05      	cmp	r3, #5
 80079b8:	d105      	bne.n	80079c6 <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	220c      	movs	r2, #12
 80079be:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80079c0:	2303      	movs	r3, #3
 80079c2:	73fb      	strb	r3, [r7, #15]
      break;
 80079c4:	e0a4      	b.n	8007b10 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 80079c6:	7bbb      	ldrb	r3, [r7, #14]
 80079c8:	2b02      	cmp	r3, #2
 80079ca:	d103      	bne.n	80079d4 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2205      	movs	r2, #5
 80079d0:	761a      	strb	r2, [r3, #24]
      break;
 80079d2:	e09d      	b.n	8007b10 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 80079d4:	7bbb      	ldrb	r3, [r7, #14]
 80079d6:	2b04      	cmp	r3, #4
 80079d8:	f040 809a 	bne.w	8007b10 <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	220b      	movs	r2, #11
 80079e0:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80079e2:	2302      	movs	r3, #2
 80079e4:	73fb      	strb	r3, [r7, #15]
      break;
 80079e6:	e093      	b.n	8007b10 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	791b      	ldrb	r3, [r3, #4]
 80079ec:	2200      	movs	r2, #0
 80079ee:	2100      	movs	r1, #0
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f000 f8d6 	bl	8007ba2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80079fc:	b29a      	uxth	r2, r3
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2208      	movs	r2, #8
 8007a06:	761a      	strb	r2, [r3, #24]

      break;
 8007a08:	e087      	b.n	8007b1a <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	791b      	ldrb	r3, [r3, #4]
 8007a0e:	4619      	mov	r1, r3
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f000 fc11 	bl	8008238 <USBH_LL_GetURBState>
 8007a16:	4603      	mov	r3, r0
 8007a18:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007a1a:	7bbb      	ldrb	r3, [r7, #14]
 8007a1c:	2b01      	cmp	r3, #1
 8007a1e:	d105      	bne.n	8007a2c <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	220d      	movs	r2, #13
 8007a24:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007a26:	2300      	movs	r3, #0
 8007a28:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007a2a:	e073      	b.n	8007b14 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 8007a2c:	7bbb      	ldrb	r3, [r7, #14]
 8007a2e:	2b04      	cmp	r3, #4
 8007a30:	d103      	bne.n	8007a3a <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	220b      	movs	r2, #11
 8007a36:	761a      	strb	r2, [r3, #24]
      break;
 8007a38:	e06c      	b.n	8007b14 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 8007a3a:	7bbb      	ldrb	r3, [r7, #14]
 8007a3c:	2b05      	cmp	r3, #5
 8007a3e:	d169      	bne.n	8007b14 <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 8007a40:	2303      	movs	r3, #3
 8007a42:	73fb      	strb	r3, [r7, #15]
      break;
 8007a44:	e066      	b.n	8007b14 <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	795a      	ldrb	r2, [r3, #5]
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	9300      	str	r3, [sp, #0]
 8007a4e:	4613      	mov	r3, r2
 8007a50:	2200      	movs	r2, #0
 8007a52:	2100      	movs	r1, #0
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f000 f87f 	bl	8007b58 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007a60:	b29a      	uxth	r2, r3
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	220a      	movs	r2, #10
 8007a6a:	761a      	strb	r2, [r3, #24]
      break;
 8007a6c:	e055      	b.n	8007b1a <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	795b      	ldrb	r3, [r3, #5]
 8007a72:	4619      	mov	r1, r3
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f000 fbdf 	bl	8008238 <USBH_LL_GetURBState>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007a7e:	7bbb      	ldrb	r3, [r7, #14]
 8007a80:	2b01      	cmp	r3, #1
 8007a82:	d105      	bne.n	8007a90 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 8007a84:	2300      	movs	r3, #0
 8007a86:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	220d      	movs	r2, #13
 8007a8c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007a8e:	e043      	b.n	8007b18 <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007a90:	7bbb      	ldrb	r3, [r7, #14]
 8007a92:	2b02      	cmp	r3, #2
 8007a94:	d103      	bne.n	8007a9e <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2209      	movs	r2, #9
 8007a9a:	761a      	strb	r2, [r3, #24]
      break;
 8007a9c:	e03c      	b.n	8007b18 <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 8007a9e:	7bbb      	ldrb	r3, [r7, #14]
 8007aa0:	2b04      	cmp	r3, #4
 8007aa2:	d139      	bne.n	8007b18 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	220b      	movs	r2, #11
 8007aa8:	761a      	strb	r2, [r3, #24]
      break;
 8007aaa:	e035      	b.n	8007b18 <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	7e5b      	ldrb	r3, [r3, #25]
 8007ab0:	3301      	adds	r3, #1
 8007ab2:	b2da      	uxtb	r2, r3
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	765a      	strb	r2, [r3, #25]
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	7e5b      	ldrb	r3, [r3, #25]
 8007abc:	2b02      	cmp	r3, #2
 8007abe:	d806      	bhi.n	8007ace <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2201      	movs	r2, #1
 8007aca:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007acc:	e025      	b.n	8007b1a <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007ad4:	2106      	movs	r1, #6
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2200      	movs	r2, #0
 8007ade:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	795b      	ldrb	r3, [r3, #5]
 8007ae4:	4619      	mov	r1, r3
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 f90c 	bl	8007d04 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	791b      	ldrb	r3, [r3, #4]
 8007af0:	4619      	mov	r1, r3
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f000 f906 	bl	8007d04 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2200      	movs	r2, #0
 8007afc:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007afe:	2302      	movs	r3, #2
 8007b00:	73fb      	strb	r3, [r7, #15]
      break;
 8007b02:	e00a      	b.n	8007b1a <USBH_HandleControl+0x2e2>

    default:
      break;
 8007b04:	bf00      	nop
 8007b06:	e008      	b.n	8007b1a <USBH_HandleControl+0x2e2>
      break;
 8007b08:	bf00      	nop
 8007b0a:	e006      	b.n	8007b1a <USBH_HandleControl+0x2e2>
      break;
 8007b0c:	bf00      	nop
 8007b0e:	e004      	b.n	8007b1a <USBH_HandleControl+0x2e2>
      break;
 8007b10:	bf00      	nop
 8007b12:	e002      	b.n	8007b1a <USBH_HandleControl+0x2e2>
      break;
 8007b14:	bf00      	nop
 8007b16:	e000      	b.n	8007b1a <USBH_HandleControl+0x2e2>
      break;
 8007b18:	bf00      	nop
  }

  return status;
 8007b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3710      	adds	r7, #16
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}

08007b24 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b088      	sub	sp, #32
 8007b28:	af04      	add	r7, sp, #16
 8007b2a:	60f8      	str	r0, [r7, #12]
 8007b2c:	60b9      	str	r1, [r7, #8]
 8007b2e:	4613      	mov	r3, r2
 8007b30:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007b32:	79f9      	ldrb	r1, [r7, #7]
 8007b34:	2300      	movs	r3, #0
 8007b36:	9303      	str	r3, [sp, #12]
 8007b38:	2308      	movs	r3, #8
 8007b3a:	9302      	str	r3, [sp, #8]
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	9301      	str	r3, [sp, #4]
 8007b40:	2300      	movs	r3, #0
 8007b42:	9300      	str	r3, [sp, #0]
 8007b44:	2300      	movs	r3, #0
 8007b46:	2200      	movs	r2, #0
 8007b48:	68f8      	ldr	r0, [r7, #12]
 8007b4a:	f000 fb44 	bl	80081d6 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8007b4e:	2300      	movs	r3, #0
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	3710      	adds	r7, #16
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}

08007b58 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b088      	sub	sp, #32
 8007b5c:	af04      	add	r7, sp, #16
 8007b5e:	60f8      	str	r0, [r7, #12]
 8007b60:	60b9      	str	r1, [r7, #8]
 8007b62:	4611      	mov	r1, r2
 8007b64:	461a      	mov	r2, r3
 8007b66:	460b      	mov	r3, r1
 8007b68:	80fb      	strh	r3, [r7, #6]
 8007b6a:	4613      	mov	r3, r2
 8007b6c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d001      	beq.n	8007b7c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007b78:	2300      	movs	r3, #0
 8007b7a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007b7c:	7979      	ldrb	r1, [r7, #5]
 8007b7e:	7e3b      	ldrb	r3, [r7, #24]
 8007b80:	9303      	str	r3, [sp, #12]
 8007b82:	88fb      	ldrh	r3, [r7, #6]
 8007b84:	9302      	str	r3, [sp, #8]
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	9301      	str	r3, [sp, #4]
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	9300      	str	r3, [sp, #0]
 8007b8e:	2300      	movs	r3, #0
 8007b90:	2200      	movs	r2, #0
 8007b92:	68f8      	ldr	r0, [r7, #12]
 8007b94:	f000 fb1f 	bl	80081d6 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007b98:	2300      	movs	r3, #0
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	3710      	adds	r7, #16
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}

08007ba2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007ba2:	b580      	push	{r7, lr}
 8007ba4:	b088      	sub	sp, #32
 8007ba6:	af04      	add	r7, sp, #16
 8007ba8:	60f8      	str	r0, [r7, #12]
 8007baa:	60b9      	str	r1, [r7, #8]
 8007bac:	4611      	mov	r1, r2
 8007bae:	461a      	mov	r2, r3
 8007bb0:	460b      	mov	r3, r1
 8007bb2:	80fb      	strh	r3, [r7, #6]
 8007bb4:	4613      	mov	r3, r2
 8007bb6:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007bb8:	7979      	ldrb	r1, [r7, #5]
 8007bba:	2300      	movs	r3, #0
 8007bbc:	9303      	str	r3, [sp, #12]
 8007bbe:	88fb      	ldrh	r3, [r7, #6]
 8007bc0:	9302      	str	r3, [sp, #8]
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	9301      	str	r3, [sp, #4]
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	9300      	str	r3, [sp, #0]
 8007bca:	2300      	movs	r3, #0
 8007bcc:	2201      	movs	r2, #1
 8007bce:	68f8      	ldr	r0, [r7, #12]
 8007bd0:	f000 fb01 	bl	80081d6 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007bd4:	2300      	movs	r3, #0

}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3710      	adds	r7, #16
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}

08007bde <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007bde:	b580      	push	{r7, lr}
 8007be0:	b088      	sub	sp, #32
 8007be2:	af04      	add	r7, sp, #16
 8007be4:	60f8      	str	r0, [r7, #12]
 8007be6:	60b9      	str	r1, [r7, #8]
 8007be8:	4611      	mov	r1, r2
 8007bea:	461a      	mov	r2, r3
 8007bec:	460b      	mov	r3, r1
 8007bee:	80fb      	strh	r3, [r7, #6]
 8007bf0:	4613      	mov	r3, r2
 8007bf2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d001      	beq.n	8007c02 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007c02:	7979      	ldrb	r1, [r7, #5]
 8007c04:	7e3b      	ldrb	r3, [r7, #24]
 8007c06:	9303      	str	r3, [sp, #12]
 8007c08:	88fb      	ldrh	r3, [r7, #6]
 8007c0a:	9302      	str	r3, [sp, #8]
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	9301      	str	r3, [sp, #4]
 8007c10:	2301      	movs	r3, #1
 8007c12:	9300      	str	r3, [sp, #0]
 8007c14:	2302      	movs	r3, #2
 8007c16:	2200      	movs	r2, #0
 8007c18:	68f8      	ldr	r0, [r7, #12]
 8007c1a:	f000 fadc 	bl	80081d6 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007c1e:	2300      	movs	r3, #0
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	3710      	adds	r7, #16
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}

08007c28 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b088      	sub	sp, #32
 8007c2c:	af04      	add	r7, sp, #16
 8007c2e:	60f8      	str	r0, [r7, #12]
 8007c30:	60b9      	str	r1, [r7, #8]
 8007c32:	4611      	mov	r1, r2
 8007c34:	461a      	mov	r2, r3
 8007c36:	460b      	mov	r3, r1
 8007c38:	80fb      	strh	r3, [r7, #6]
 8007c3a:	4613      	mov	r3, r2
 8007c3c:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007c3e:	7979      	ldrb	r1, [r7, #5]
 8007c40:	2300      	movs	r3, #0
 8007c42:	9303      	str	r3, [sp, #12]
 8007c44:	88fb      	ldrh	r3, [r7, #6]
 8007c46:	9302      	str	r3, [sp, #8]
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	9301      	str	r3, [sp, #4]
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	9300      	str	r3, [sp, #0]
 8007c50:	2302      	movs	r3, #2
 8007c52:	2201      	movs	r2, #1
 8007c54:	68f8      	ldr	r0, [r7, #12]
 8007c56:	f000 fabe 	bl	80081d6 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007c5a:	2300      	movs	r3, #0
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	3710      	adds	r7, #16
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}

08007c64 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b086      	sub	sp, #24
 8007c68:	af04      	add	r7, sp, #16
 8007c6a:	6078      	str	r0, [r7, #4]
 8007c6c:	4608      	mov	r0, r1
 8007c6e:	4611      	mov	r1, r2
 8007c70:	461a      	mov	r2, r3
 8007c72:	4603      	mov	r3, r0
 8007c74:	70fb      	strb	r3, [r7, #3]
 8007c76:	460b      	mov	r3, r1
 8007c78:	70bb      	strb	r3, [r7, #2]
 8007c7a:	4613      	mov	r3, r2
 8007c7c:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007c7e:	7878      	ldrb	r0, [r7, #1]
 8007c80:	78ba      	ldrb	r2, [r7, #2]
 8007c82:	78f9      	ldrb	r1, [r7, #3]
 8007c84:	8b3b      	ldrh	r3, [r7, #24]
 8007c86:	9302      	str	r3, [sp, #8]
 8007c88:	7d3b      	ldrb	r3, [r7, #20]
 8007c8a:	9301      	str	r3, [sp, #4]
 8007c8c:	7c3b      	ldrb	r3, [r7, #16]
 8007c8e:	9300      	str	r3, [sp, #0]
 8007c90:	4603      	mov	r3, r0
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f000 fa51 	bl	800813a <USBH_LL_OpenPipe>

  return USBH_OK;
 8007c98:	2300      	movs	r3, #0
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3708      	adds	r7, #8
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}

08007ca2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007ca2:	b580      	push	{r7, lr}
 8007ca4:	b082      	sub	sp, #8
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	6078      	str	r0, [r7, #4]
 8007caa:	460b      	mov	r3, r1
 8007cac:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8007cae:	78fb      	ldrb	r3, [r7, #3]
 8007cb0:	4619      	mov	r1, r3
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f000 fa70 	bl	8008198 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007cb8:	2300      	movs	r3, #0
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	3708      	adds	r7, #8
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}

08007cc2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007cc2:	b580      	push	{r7, lr}
 8007cc4:	b084      	sub	sp, #16
 8007cc6:	af00      	add	r7, sp, #0
 8007cc8:	6078      	str	r0, [r7, #4]
 8007cca:	460b      	mov	r3, r1
 8007ccc:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f000 f836 	bl	8007d40 <USBH_GetFreePipe>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007cd8:	89fb      	ldrh	r3, [r7, #14]
 8007cda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d00a      	beq.n	8007cf8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8007ce2:	78fa      	ldrb	r2, [r7, #3]
 8007ce4:	89fb      	ldrh	r3, [r7, #14]
 8007ce6:	f003 030f 	and.w	r3, r3, #15
 8007cea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007cee:	6879      	ldr	r1, [r7, #4]
 8007cf0:	33e0      	adds	r3, #224	; 0xe0
 8007cf2:	009b      	lsls	r3, r3, #2
 8007cf4:	440b      	add	r3, r1
 8007cf6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007cf8:	89fb      	ldrh	r3, [r7, #14]
 8007cfa:	b2db      	uxtb	r3, r3
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	3710      	adds	r7, #16
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}

08007d04 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007d04:	b480      	push	{r7}
 8007d06:	b083      	sub	sp, #12
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
 8007d0c:	460b      	mov	r3, r1
 8007d0e:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8007d10:	78fb      	ldrb	r3, [r7, #3]
 8007d12:	2b0a      	cmp	r3, #10
 8007d14:	d80d      	bhi.n	8007d32 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007d16:	78fb      	ldrb	r3, [r7, #3]
 8007d18:	687a      	ldr	r2, [r7, #4]
 8007d1a:	33e0      	adds	r3, #224	; 0xe0
 8007d1c:	009b      	lsls	r3, r3, #2
 8007d1e:	4413      	add	r3, r2
 8007d20:	685a      	ldr	r2, [r3, #4]
 8007d22:	78fb      	ldrb	r3, [r7, #3]
 8007d24:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007d28:	6879      	ldr	r1, [r7, #4]
 8007d2a:	33e0      	adds	r3, #224	; 0xe0
 8007d2c:	009b      	lsls	r3, r3, #2
 8007d2e:	440b      	add	r3, r1
 8007d30:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007d32:	2300      	movs	r3, #0
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	370c      	adds	r7, #12
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3e:	4770      	bx	lr

08007d40 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007d40:	b480      	push	{r7}
 8007d42:	b085      	sub	sp, #20
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007d48:	2300      	movs	r3, #0
 8007d4a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	73fb      	strb	r3, [r7, #15]
 8007d50:	e00f      	b.n	8007d72 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007d52:	7bfb      	ldrb	r3, [r7, #15]
 8007d54:	687a      	ldr	r2, [r7, #4]
 8007d56:	33e0      	adds	r3, #224	; 0xe0
 8007d58:	009b      	lsls	r3, r3, #2
 8007d5a:	4413      	add	r3, r2
 8007d5c:	685b      	ldr	r3, [r3, #4]
 8007d5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d102      	bne.n	8007d6c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007d66:	7bfb      	ldrb	r3, [r7, #15]
 8007d68:	b29b      	uxth	r3, r3
 8007d6a:	e007      	b.n	8007d7c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8007d6c:	7bfb      	ldrb	r3, [r7, #15]
 8007d6e:	3301      	adds	r3, #1
 8007d70:	73fb      	strb	r3, [r7, #15]
 8007d72:	7bfb      	ldrb	r3, [r7, #15]
 8007d74:	2b0a      	cmp	r3, #10
 8007d76:	d9ec      	bls.n	8007d52 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007d78:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3714      	adds	r7, #20
 8007d80:	46bd      	mov	sp, r7
 8007d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d86:	4770      	bx	lr

08007d88 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	490e      	ldr	r1, [pc, #56]	; (8007dc8 <MX_USB_HOST_Init+0x40>)
 8007d90:	480e      	ldr	r0, [pc, #56]	; (8007dcc <MX_USB_HOST_Init+0x44>)
 8007d92:	f7fe fc9f 	bl	80066d4 <USBH_Init>
 8007d96:	4603      	mov	r3, r0
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d001      	beq.n	8007da0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007d9c:	f7f8 fe74 	bl	8000a88 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007da0:	490b      	ldr	r1, [pc, #44]	; (8007dd0 <MX_USB_HOST_Init+0x48>)
 8007da2:	480a      	ldr	r0, [pc, #40]	; (8007dcc <MX_USB_HOST_Init+0x44>)
 8007da4:	f7fe fd24 	bl	80067f0 <USBH_RegisterClass>
 8007da8:	4603      	mov	r3, r0
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d001      	beq.n	8007db2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007dae:	f7f8 fe6b 	bl	8000a88 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007db2:	4806      	ldr	r0, [pc, #24]	; (8007dcc <MX_USB_HOST_Init+0x44>)
 8007db4:	f7fe fda8 	bl	8006908 <USBH_Start>
 8007db8:	4603      	mov	r3, r0
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d001      	beq.n	8007dc2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007dbe:	f7f8 fe63 	bl	8000a88 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007dc2:	bf00      	nop
 8007dc4:	bd80      	pop	{r7, pc}
 8007dc6:	bf00      	nop
 8007dc8:	08007de9 	.word	0x08007de9
 8007dcc:	200001f8 	.word	0x200001f8
 8007dd0:	2000000c 	.word	0x2000000c

08007dd4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007dd8:	4802      	ldr	r0, [pc, #8]	; (8007de4 <MX_USB_HOST_Process+0x10>)
 8007dda:	f7fe fda5 	bl	8006928 <USBH_Process>
}
 8007dde:	bf00      	nop
 8007de0:	bd80      	pop	{r7, pc}
 8007de2:	bf00      	nop
 8007de4:	200001f8 	.word	0x200001f8

08007de8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b083      	sub	sp, #12
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
 8007df0:	460b      	mov	r3, r1
 8007df2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007df4:	78fb      	ldrb	r3, [r7, #3]
 8007df6:	3b01      	subs	r3, #1
 8007df8:	2b04      	cmp	r3, #4
 8007dfa:	d819      	bhi.n	8007e30 <USBH_UserProcess+0x48>
 8007dfc:	a201      	add	r2, pc, #4	; (adr r2, 8007e04 <USBH_UserProcess+0x1c>)
 8007dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e02:	bf00      	nop
 8007e04:	08007e31 	.word	0x08007e31
 8007e08:	08007e21 	.word	0x08007e21
 8007e0c:	08007e31 	.word	0x08007e31
 8007e10:	08007e29 	.word	0x08007e29
 8007e14:	08007e19 	.word	0x08007e19
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007e18:	4b09      	ldr	r3, [pc, #36]	; (8007e40 <USBH_UserProcess+0x58>)
 8007e1a:	2203      	movs	r2, #3
 8007e1c:	701a      	strb	r2, [r3, #0]
  break;
 8007e1e:	e008      	b.n	8007e32 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007e20:	4b07      	ldr	r3, [pc, #28]	; (8007e40 <USBH_UserProcess+0x58>)
 8007e22:	2202      	movs	r2, #2
 8007e24:	701a      	strb	r2, [r3, #0]
  break;
 8007e26:	e004      	b.n	8007e32 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007e28:	4b05      	ldr	r3, [pc, #20]	; (8007e40 <USBH_UserProcess+0x58>)
 8007e2a:	2201      	movs	r2, #1
 8007e2c:	701a      	strb	r2, [r3, #0]
  break;
 8007e2e:	e000      	b.n	8007e32 <USBH_UserProcess+0x4a>

  default:
  break;
 8007e30:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007e32:	bf00      	nop
 8007e34:	370c      	adds	r7, #12
 8007e36:	46bd      	mov	sp, r7
 8007e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3c:	4770      	bx	lr
 8007e3e:	bf00      	nop
 8007e40:	200000b4 	.word	0x200000b4

08007e44 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b08a      	sub	sp, #40	; 0x28
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e4c:	f107 0314 	add.w	r3, r7, #20
 8007e50:	2200      	movs	r2, #0
 8007e52:	601a      	str	r2, [r3, #0]
 8007e54:	605a      	str	r2, [r3, #4]
 8007e56:	609a      	str	r2, [r3, #8]
 8007e58:	60da      	str	r2, [r3, #12]
 8007e5a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007e64:	d147      	bne.n	8007ef6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007e66:	2300      	movs	r3, #0
 8007e68:	613b      	str	r3, [r7, #16]
 8007e6a:	4b25      	ldr	r3, [pc, #148]	; (8007f00 <HAL_HCD_MspInit+0xbc>)
 8007e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e6e:	4a24      	ldr	r2, [pc, #144]	; (8007f00 <HAL_HCD_MspInit+0xbc>)
 8007e70:	f043 0301 	orr.w	r3, r3, #1
 8007e74:	6313      	str	r3, [r2, #48]	; 0x30
 8007e76:	4b22      	ldr	r3, [pc, #136]	; (8007f00 <HAL_HCD_MspInit+0xbc>)
 8007e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e7a:	f003 0301 	and.w	r3, r3, #1
 8007e7e:	613b      	str	r3, [r7, #16]
 8007e80:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007e82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007e88:	2300      	movs	r3, #0
 8007e8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007e90:	f107 0314 	add.w	r3, r7, #20
 8007e94:	4619      	mov	r1, r3
 8007e96:	481b      	ldr	r0, [pc, #108]	; (8007f04 <HAL_HCD_MspInit+0xc0>)
 8007e98:	f7f9 f960 	bl	800115c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007e9c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007ea0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ea2:	2302      	movs	r3, #2
 8007ea4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007eae:	230a      	movs	r3, #10
 8007eb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007eb2:	f107 0314 	add.w	r3, r7, #20
 8007eb6:	4619      	mov	r1, r3
 8007eb8:	4812      	ldr	r0, [pc, #72]	; (8007f04 <HAL_HCD_MspInit+0xc0>)
 8007eba:	f7f9 f94f 	bl	800115c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007ebe:	4b10      	ldr	r3, [pc, #64]	; (8007f00 <HAL_HCD_MspInit+0xbc>)
 8007ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ec2:	4a0f      	ldr	r2, [pc, #60]	; (8007f00 <HAL_HCD_MspInit+0xbc>)
 8007ec4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ec8:	6353      	str	r3, [r2, #52]	; 0x34
 8007eca:	2300      	movs	r3, #0
 8007ecc:	60fb      	str	r3, [r7, #12]
 8007ece:	4b0c      	ldr	r3, [pc, #48]	; (8007f00 <HAL_HCD_MspInit+0xbc>)
 8007ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ed2:	4a0b      	ldr	r2, [pc, #44]	; (8007f00 <HAL_HCD_MspInit+0xbc>)
 8007ed4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007ed8:	6453      	str	r3, [r2, #68]	; 0x44
 8007eda:	4b09      	ldr	r3, [pc, #36]	; (8007f00 <HAL_HCD_MspInit+0xbc>)
 8007edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ede:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ee2:	60fb      	str	r3, [r7, #12]
 8007ee4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	2100      	movs	r1, #0
 8007eea:	2043      	movs	r0, #67	; 0x43
 8007eec:	f7f9 f8ff 	bl	80010ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007ef0:	2043      	movs	r0, #67	; 0x43
 8007ef2:	f7f9 f918 	bl	8001126 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007ef6:	bf00      	nop
 8007ef8:	3728      	adds	r7, #40	; 0x28
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}
 8007efe:	bf00      	nop
 8007f00:	40023800 	.word	0x40023800
 8007f04:	40020000 	.word	0x40020000

08007f08 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b082      	sub	sp, #8
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f16:	4618      	mov	r0, r3
 8007f18:	f7ff f8d9 	bl	80070ce <USBH_LL_IncTimer>
}
 8007f1c:	bf00      	nop
 8007f1e:	3708      	adds	r7, #8
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}

08007f24 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b082      	sub	sp, #8
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f32:	4618      	mov	r0, r3
 8007f34:	f7ff f911 	bl	800715a <USBH_LL_Connect>
}
 8007f38:	bf00      	nop
 8007f3a:	3708      	adds	r7, #8
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}

08007f40 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b082      	sub	sp, #8
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f7ff f91a 	bl	8007188 <USBH_LL_Disconnect>
}
 8007f54:	bf00      	nop
 8007f56:	3708      	adds	r7, #8
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}

08007f5c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b083      	sub	sp, #12
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
 8007f64:	460b      	mov	r3, r1
 8007f66:	70fb      	strb	r3, [r7, #3]
 8007f68:	4613      	mov	r3, r2
 8007f6a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007f6c:	bf00      	nop
 8007f6e:	370c      	adds	r7, #12
 8007f70:	46bd      	mov	sp, r7
 8007f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f76:	4770      	bx	lr

08007f78 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b082      	sub	sp, #8
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f86:	4618      	mov	r0, r3
 8007f88:	f7ff f8cb 	bl	8007122 <USBH_LL_PortEnabled>
} 
 8007f8c:	bf00      	nop
 8007f8e:	3708      	adds	r7, #8
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}

08007f94 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b082      	sub	sp, #8
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f7ff f8cb 	bl	800713e <USBH_LL_PortDisabled>
} 
 8007fa8:	bf00      	nop
 8007faa:	3708      	adds	r7, #8
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}

08007fb0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b082      	sub	sp, #8
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007fbe:	2b01      	cmp	r3, #1
 8007fc0:	d12a      	bne.n	8008018 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8007fc2:	4a18      	ldr	r2, [pc, #96]	; (8008024 <USBH_LL_Init+0x74>)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	4a15      	ldr	r2, [pc, #84]	; (8008024 <USBH_LL_Init+0x74>)
 8007fce:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007fd2:	4b14      	ldr	r3, [pc, #80]	; (8008024 <USBH_LL_Init+0x74>)
 8007fd4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007fd8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8007fda:	4b12      	ldr	r3, [pc, #72]	; (8008024 <USBH_LL_Init+0x74>)
 8007fdc:	2208      	movs	r2, #8
 8007fde:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007fe0:	4b10      	ldr	r3, [pc, #64]	; (8008024 <USBH_LL_Init+0x74>)
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007fe6:	4b0f      	ldr	r3, [pc, #60]	; (8008024 <USBH_LL_Init+0x74>)
 8007fe8:	2200      	movs	r2, #0
 8007fea:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007fec:	4b0d      	ldr	r3, [pc, #52]	; (8008024 <USBH_LL_Init+0x74>)
 8007fee:	2202      	movs	r2, #2
 8007ff0:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007ff2:	4b0c      	ldr	r3, [pc, #48]	; (8008024 <USBH_LL_Init+0x74>)
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007ff8:	480a      	ldr	r0, [pc, #40]	; (8008024 <USBH_LL_Init+0x74>)
 8007ffa:	f7f9 fa62 	bl	80014c2 <HAL_HCD_Init>
 8007ffe:	4603      	mov	r3, r0
 8008000:	2b00      	cmp	r3, #0
 8008002:	d001      	beq.n	8008008 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008004:	f7f8 fd40 	bl	8000a88 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008008:	4806      	ldr	r0, [pc, #24]	; (8008024 <USBH_LL_Init+0x74>)
 800800a:	f7f9 fe65 	bl	8001cd8 <HAL_HCD_GetCurrentFrame>
 800800e:	4603      	mov	r3, r0
 8008010:	4619      	mov	r1, r3
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f7ff f84c 	bl	80070b0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008018:	2300      	movs	r3, #0
}
 800801a:	4618      	mov	r0, r3
 800801c:	3708      	adds	r7, #8
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}
 8008022:	bf00      	nop
 8008024:	200005d0 	.word	0x200005d0

08008028 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b084      	sub	sp, #16
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008030:	2300      	movs	r3, #0
 8008032:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008034:	2300      	movs	r3, #0
 8008036:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800803e:	4618      	mov	r0, r3
 8008040:	f7f9 fdd2 	bl	8001be8 <HAL_HCD_Start>
 8008044:	4603      	mov	r3, r0
 8008046:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008048:	7bfb      	ldrb	r3, [r7, #15]
 800804a:	4618      	mov	r0, r3
 800804c:	f000 f95c 	bl	8008308 <USBH_Get_USB_Status>
 8008050:	4603      	mov	r3, r0
 8008052:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008054:	7bbb      	ldrb	r3, [r7, #14]
}
 8008056:	4618      	mov	r0, r3
 8008058:	3710      	adds	r7, #16
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}

0800805e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800805e:	b580      	push	{r7, lr}
 8008060:	b084      	sub	sp, #16
 8008062:	af00      	add	r7, sp, #0
 8008064:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008066:	2300      	movs	r3, #0
 8008068:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800806a:	2300      	movs	r3, #0
 800806c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008074:	4618      	mov	r0, r3
 8008076:	f7f9 fdda 	bl	8001c2e <HAL_HCD_Stop>
 800807a:	4603      	mov	r3, r0
 800807c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800807e:	7bfb      	ldrb	r3, [r7, #15]
 8008080:	4618      	mov	r0, r3
 8008082:	f000 f941 	bl	8008308 <USBH_Get_USB_Status>
 8008086:	4603      	mov	r3, r0
 8008088:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 800808a:	7bbb      	ldrb	r3, [r7, #14]
}
 800808c:	4618      	mov	r0, r3
 800808e:	3710      	adds	r7, #16
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}

08008094 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b084      	sub	sp, #16
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800809c:	2301      	movs	r3, #1
 800809e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80080a6:	4618      	mov	r0, r3
 80080a8:	f7f9 fe24 	bl	8001cf4 <HAL_HCD_GetCurrentSpeed>
 80080ac:	4603      	mov	r3, r0
 80080ae:	2b01      	cmp	r3, #1
 80080b0:	d007      	beq.n	80080c2 <USBH_LL_GetSpeed+0x2e>
 80080b2:	2b01      	cmp	r3, #1
 80080b4:	d302      	bcc.n	80080bc <USBH_LL_GetSpeed+0x28>
 80080b6:	2b02      	cmp	r3, #2
 80080b8:	d006      	beq.n	80080c8 <USBH_LL_GetSpeed+0x34>
 80080ba:	e008      	b.n	80080ce <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80080bc:	2300      	movs	r3, #0
 80080be:	73fb      	strb	r3, [r7, #15]
    break;
 80080c0:	e008      	b.n	80080d4 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 80080c2:	2301      	movs	r3, #1
 80080c4:	73fb      	strb	r3, [r7, #15]
    break;
 80080c6:	e005      	b.n	80080d4 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 80080c8:	2302      	movs	r3, #2
 80080ca:	73fb      	strb	r3, [r7, #15]
    break;
 80080cc:	e002      	b.n	80080d4 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 80080ce:	2301      	movs	r3, #1
 80080d0:	73fb      	strb	r3, [r7, #15]
    break;
 80080d2:	bf00      	nop
  }
  return  speed;
 80080d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3710      	adds	r7, #16
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}

080080de <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80080de:	b580      	push	{r7, lr}
 80080e0:	b084      	sub	sp, #16
 80080e2:	af00      	add	r7, sp, #0
 80080e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080e6:	2300      	movs	r3, #0
 80080e8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80080ea:	2300      	movs	r3, #0
 80080ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80080f4:	4618      	mov	r0, r3
 80080f6:	f7f9 fdb7 	bl	8001c68 <HAL_HCD_ResetPort>
 80080fa:	4603      	mov	r3, r0
 80080fc:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 80080fe:	7bfb      	ldrb	r3, [r7, #15]
 8008100:	4618      	mov	r0, r3
 8008102:	f000 f901 	bl	8008308 <USBH_Get_USB_Status>
 8008106:	4603      	mov	r3, r0
 8008108:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800810a:	7bbb      	ldrb	r3, [r7, #14]
}
 800810c:	4618      	mov	r0, r3
 800810e:	3710      	adds	r7, #16
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}

08008114 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b082      	sub	sp, #8
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
 800811c:	460b      	mov	r3, r1
 800811e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008126:	78fa      	ldrb	r2, [r7, #3]
 8008128:	4611      	mov	r1, r2
 800812a:	4618      	mov	r0, r3
 800812c:	f7f9 fdbf 	bl	8001cae <HAL_HCD_HC_GetXferCount>
 8008130:	4603      	mov	r3, r0
}
 8008132:	4618      	mov	r0, r3
 8008134:	3708      	adds	r7, #8
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}

0800813a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800813a:	b590      	push	{r4, r7, lr}
 800813c:	b089      	sub	sp, #36	; 0x24
 800813e:	af04      	add	r7, sp, #16
 8008140:	6078      	str	r0, [r7, #4]
 8008142:	4608      	mov	r0, r1
 8008144:	4611      	mov	r1, r2
 8008146:	461a      	mov	r2, r3
 8008148:	4603      	mov	r3, r0
 800814a:	70fb      	strb	r3, [r7, #3]
 800814c:	460b      	mov	r3, r1
 800814e:	70bb      	strb	r3, [r7, #2]
 8008150:	4613      	mov	r3, r2
 8008152:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008154:	2300      	movs	r3, #0
 8008156:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008158:	2300      	movs	r3, #0
 800815a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008162:	787c      	ldrb	r4, [r7, #1]
 8008164:	78ba      	ldrb	r2, [r7, #2]
 8008166:	78f9      	ldrb	r1, [r7, #3]
 8008168:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800816a:	9302      	str	r3, [sp, #8]
 800816c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008170:	9301      	str	r3, [sp, #4]
 8008172:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008176:	9300      	str	r3, [sp, #0]
 8008178:	4623      	mov	r3, r4
 800817a:	f7f9 fa04 	bl	8001586 <HAL_HCD_HC_Init>
 800817e:	4603      	mov	r3, r0
 8008180:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008182:	7bfb      	ldrb	r3, [r7, #15]
 8008184:	4618      	mov	r0, r3
 8008186:	f000 f8bf 	bl	8008308 <USBH_Get_USB_Status>
 800818a:	4603      	mov	r3, r0
 800818c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800818e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008190:	4618      	mov	r0, r3
 8008192:	3714      	adds	r7, #20
 8008194:	46bd      	mov	sp, r7
 8008196:	bd90      	pop	{r4, r7, pc}

08008198 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b084      	sub	sp, #16
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
 80081a0:	460b      	mov	r3, r1
 80081a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081a4:	2300      	movs	r3, #0
 80081a6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80081a8:	2300      	movs	r3, #0
 80081aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80081b2:	78fa      	ldrb	r2, [r7, #3]
 80081b4:	4611      	mov	r1, r2
 80081b6:	4618      	mov	r0, r3
 80081b8:	f7f9 fa7d 	bl	80016b6 <HAL_HCD_HC_Halt>
 80081bc:	4603      	mov	r3, r0
 80081be:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80081c0:	7bfb      	ldrb	r3, [r7, #15]
 80081c2:	4618      	mov	r0, r3
 80081c4:	f000 f8a0 	bl	8008308 <USBH_Get_USB_Status>
 80081c8:	4603      	mov	r3, r0
 80081ca:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80081cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	3710      	adds	r7, #16
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}

080081d6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80081d6:	b590      	push	{r4, r7, lr}
 80081d8:	b089      	sub	sp, #36	; 0x24
 80081da:	af04      	add	r7, sp, #16
 80081dc:	6078      	str	r0, [r7, #4]
 80081de:	4608      	mov	r0, r1
 80081e0:	4611      	mov	r1, r2
 80081e2:	461a      	mov	r2, r3
 80081e4:	4603      	mov	r3, r0
 80081e6:	70fb      	strb	r3, [r7, #3]
 80081e8:	460b      	mov	r3, r1
 80081ea:	70bb      	strb	r3, [r7, #2]
 80081ec:	4613      	mov	r3, r2
 80081ee:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081f0:	2300      	movs	r3, #0
 80081f2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80081f4:	2300      	movs	r3, #0
 80081f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80081fe:	787c      	ldrb	r4, [r7, #1]
 8008200:	78ba      	ldrb	r2, [r7, #2]
 8008202:	78f9      	ldrb	r1, [r7, #3]
 8008204:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008208:	9303      	str	r3, [sp, #12]
 800820a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800820c:	9302      	str	r3, [sp, #8]
 800820e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008210:	9301      	str	r3, [sp, #4]
 8008212:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008216:	9300      	str	r3, [sp, #0]
 8008218:	4623      	mov	r3, r4
 800821a:	f7f9 fa6f 	bl	80016fc <HAL_HCD_HC_SubmitRequest>
 800821e:	4603      	mov	r3, r0
 8008220:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008222:	7bfb      	ldrb	r3, [r7, #15]
 8008224:	4618      	mov	r0, r3
 8008226:	f000 f86f 	bl	8008308 <USBH_Get_USB_Status>
 800822a:	4603      	mov	r3, r0
 800822c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800822e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008230:	4618      	mov	r0, r3
 8008232:	3714      	adds	r7, #20
 8008234:	46bd      	mov	sp, r7
 8008236:	bd90      	pop	{r4, r7, pc}

08008238 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b082      	sub	sp, #8
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
 8008240:	460b      	mov	r3, r1
 8008242:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800824a:	78fa      	ldrb	r2, [r7, #3]
 800824c:	4611      	mov	r1, r2
 800824e:	4618      	mov	r0, r3
 8008250:	f7f9 fd18 	bl	8001c84 <HAL_HCD_HC_GetURBState>
 8008254:	4603      	mov	r3, r0
}
 8008256:	4618      	mov	r0, r3
 8008258:	3708      	adds	r7, #8
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}

0800825e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800825e:	b580      	push	{r7, lr}
 8008260:	b082      	sub	sp, #8
 8008262:	af00      	add	r7, sp, #0
 8008264:	6078      	str	r0, [r7, #4]
 8008266:	460b      	mov	r3, r1
 8008268:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008270:	2b01      	cmp	r3, #1
 8008272:	d103      	bne.n	800827c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008274:	78fb      	ldrb	r3, [r7, #3]
 8008276:	4618      	mov	r0, r3
 8008278:	f000 f872 	bl	8008360 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800827c:	20c8      	movs	r0, #200	; 0xc8
 800827e:	f7f8 fe39 	bl	8000ef4 <HAL_Delay>
  return USBH_OK;
 8008282:	2300      	movs	r3, #0
}
 8008284:	4618      	mov	r0, r3
 8008286:	3708      	adds	r7, #8
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}

0800828c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800828c:	b480      	push	{r7}
 800828e:	b085      	sub	sp, #20
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
 8008294:	460b      	mov	r3, r1
 8008296:	70fb      	strb	r3, [r7, #3]
 8008298:	4613      	mov	r3, r2
 800829a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80082a2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80082a4:	78fa      	ldrb	r2, [r7, #3]
 80082a6:	68f9      	ldr	r1, [r7, #12]
 80082a8:	4613      	mov	r3, r2
 80082aa:	009b      	lsls	r3, r3, #2
 80082ac:	4413      	add	r3, r2
 80082ae:	00db      	lsls	r3, r3, #3
 80082b0:	440b      	add	r3, r1
 80082b2:	333b      	adds	r3, #59	; 0x3b
 80082b4:	781b      	ldrb	r3, [r3, #0]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d00a      	beq.n	80082d0 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80082ba:	78fa      	ldrb	r2, [r7, #3]
 80082bc:	68f9      	ldr	r1, [r7, #12]
 80082be:	4613      	mov	r3, r2
 80082c0:	009b      	lsls	r3, r3, #2
 80082c2:	4413      	add	r3, r2
 80082c4:	00db      	lsls	r3, r3, #3
 80082c6:	440b      	add	r3, r1
 80082c8:	3350      	adds	r3, #80	; 0x50
 80082ca:	78ba      	ldrb	r2, [r7, #2]
 80082cc:	701a      	strb	r2, [r3, #0]
 80082ce:	e009      	b.n	80082e4 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80082d0:	78fa      	ldrb	r2, [r7, #3]
 80082d2:	68f9      	ldr	r1, [r7, #12]
 80082d4:	4613      	mov	r3, r2
 80082d6:	009b      	lsls	r3, r3, #2
 80082d8:	4413      	add	r3, r2
 80082da:	00db      	lsls	r3, r3, #3
 80082dc:	440b      	add	r3, r1
 80082de:	3351      	adds	r3, #81	; 0x51
 80082e0:	78ba      	ldrb	r2, [r7, #2]
 80082e2:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80082e4:	2300      	movs	r3, #0
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	3714      	adds	r7, #20
 80082ea:	46bd      	mov	sp, r7
 80082ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f0:	4770      	bx	lr

080082f2 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80082f2:	b580      	push	{r7, lr}
 80082f4:	b082      	sub	sp, #8
 80082f6:	af00      	add	r7, sp, #0
 80082f8:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f7f8 fdfa 	bl	8000ef4 <HAL_Delay>
}
 8008300:	bf00      	nop
 8008302:	3708      	adds	r7, #8
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}

08008308 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008308:	b480      	push	{r7}
 800830a:	b085      	sub	sp, #20
 800830c:	af00      	add	r7, sp, #0
 800830e:	4603      	mov	r3, r0
 8008310:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008312:	2300      	movs	r3, #0
 8008314:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008316:	79fb      	ldrb	r3, [r7, #7]
 8008318:	2b03      	cmp	r3, #3
 800831a:	d817      	bhi.n	800834c <USBH_Get_USB_Status+0x44>
 800831c:	a201      	add	r2, pc, #4	; (adr r2, 8008324 <USBH_Get_USB_Status+0x1c>)
 800831e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008322:	bf00      	nop
 8008324:	08008335 	.word	0x08008335
 8008328:	0800833b 	.word	0x0800833b
 800832c:	08008341 	.word	0x08008341
 8008330:	08008347 	.word	0x08008347
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008334:	2300      	movs	r3, #0
 8008336:	73fb      	strb	r3, [r7, #15]
    break;
 8008338:	e00b      	b.n	8008352 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800833a:	2302      	movs	r3, #2
 800833c:	73fb      	strb	r3, [r7, #15]
    break;
 800833e:	e008      	b.n	8008352 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008340:	2301      	movs	r3, #1
 8008342:	73fb      	strb	r3, [r7, #15]
    break;
 8008344:	e005      	b.n	8008352 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008346:	2302      	movs	r3, #2
 8008348:	73fb      	strb	r3, [r7, #15]
    break;
 800834a:	e002      	b.n	8008352 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800834c:	2302      	movs	r3, #2
 800834e:	73fb      	strb	r3, [r7, #15]
    break;
 8008350:	bf00      	nop
  }
  return usb_status;
 8008352:	7bfb      	ldrb	r3, [r7, #15]
}
 8008354:	4618      	mov	r0, r3
 8008356:	3714      	adds	r7, #20
 8008358:	46bd      	mov	sp, r7
 800835a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835e:	4770      	bx	lr

08008360 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 8008360:	b580      	push	{r7, lr}
 8008362:	b084      	sub	sp, #16
 8008364:	af00      	add	r7, sp, #0
 8008366:	4603      	mov	r3, r0
 8008368:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 800836a:	79fb      	ldrb	r3, [r7, #7]
 800836c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800836e:	79fb      	ldrb	r3, [r7, #7]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d102      	bne.n	800837a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 8008374:	2301      	movs	r3, #1
 8008376:	73fb      	strb	r3, [r7, #15]
 8008378:	e001      	b.n	800837e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800837a:	2300      	movs	r3, #0
 800837c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800837e:	7bfb      	ldrb	r3, [r7, #15]
 8008380:	461a      	mov	r2, r3
 8008382:	2101      	movs	r1, #1
 8008384:	4803      	ldr	r0, [pc, #12]	; (8008394 <MX_DriverVbusFS+0x34>)
 8008386:	f7f9 f883 	bl	8001490 <HAL_GPIO_WritePin>
}
 800838a:	bf00      	nop
 800838c:	3710      	adds	r7, #16
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}
 8008392:	bf00      	nop
 8008394:	40020800 	.word	0x40020800

08008398 <__errno>:
 8008398:	4b01      	ldr	r3, [pc, #4]	; (80083a0 <__errno+0x8>)
 800839a:	6818      	ldr	r0, [r3, #0]
 800839c:	4770      	bx	lr
 800839e:	bf00      	nop
 80083a0:	2000002c 	.word	0x2000002c

080083a4 <__libc_init_array>:
 80083a4:	b570      	push	{r4, r5, r6, lr}
 80083a6:	4e0d      	ldr	r6, [pc, #52]	; (80083dc <__libc_init_array+0x38>)
 80083a8:	4c0d      	ldr	r4, [pc, #52]	; (80083e0 <__libc_init_array+0x3c>)
 80083aa:	1ba4      	subs	r4, r4, r6
 80083ac:	10a4      	asrs	r4, r4, #2
 80083ae:	2500      	movs	r5, #0
 80083b0:	42a5      	cmp	r5, r4
 80083b2:	d109      	bne.n	80083c8 <__libc_init_array+0x24>
 80083b4:	4e0b      	ldr	r6, [pc, #44]	; (80083e4 <__libc_init_array+0x40>)
 80083b6:	4c0c      	ldr	r4, [pc, #48]	; (80083e8 <__libc_init_array+0x44>)
 80083b8:	f000 f8ea 	bl	8008590 <_init>
 80083bc:	1ba4      	subs	r4, r4, r6
 80083be:	10a4      	asrs	r4, r4, #2
 80083c0:	2500      	movs	r5, #0
 80083c2:	42a5      	cmp	r5, r4
 80083c4:	d105      	bne.n	80083d2 <__libc_init_array+0x2e>
 80083c6:	bd70      	pop	{r4, r5, r6, pc}
 80083c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80083cc:	4798      	blx	r3
 80083ce:	3501      	adds	r5, #1
 80083d0:	e7ee      	b.n	80083b0 <__libc_init_array+0xc>
 80083d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80083d6:	4798      	blx	r3
 80083d8:	3501      	adds	r5, #1
 80083da:	e7f2      	b.n	80083c2 <__libc_init_array+0x1e>
 80083dc:	080085cc 	.word	0x080085cc
 80083e0:	080085cc 	.word	0x080085cc
 80083e4:	080085cc 	.word	0x080085cc
 80083e8:	080085d0 	.word	0x080085d0

080083ec <malloc>:
 80083ec:	4b02      	ldr	r3, [pc, #8]	; (80083f8 <malloc+0xc>)
 80083ee:	4601      	mov	r1, r0
 80083f0:	6818      	ldr	r0, [r3, #0]
 80083f2:	f000 b861 	b.w	80084b8 <_malloc_r>
 80083f6:	bf00      	nop
 80083f8:	2000002c 	.word	0x2000002c

080083fc <free>:
 80083fc:	4b02      	ldr	r3, [pc, #8]	; (8008408 <free+0xc>)
 80083fe:	4601      	mov	r1, r0
 8008400:	6818      	ldr	r0, [r3, #0]
 8008402:	f000 b80b 	b.w	800841c <_free_r>
 8008406:	bf00      	nop
 8008408:	2000002c 	.word	0x2000002c

0800840c <memset>:
 800840c:	4402      	add	r2, r0
 800840e:	4603      	mov	r3, r0
 8008410:	4293      	cmp	r3, r2
 8008412:	d100      	bne.n	8008416 <memset+0xa>
 8008414:	4770      	bx	lr
 8008416:	f803 1b01 	strb.w	r1, [r3], #1
 800841a:	e7f9      	b.n	8008410 <memset+0x4>

0800841c <_free_r>:
 800841c:	b538      	push	{r3, r4, r5, lr}
 800841e:	4605      	mov	r5, r0
 8008420:	2900      	cmp	r1, #0
 8008422:	d045      	beq.n	80084b0 <_free_r+0x94>
 8008424:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008428:	1f0c      	subs	r4, r1, #4
 800842a:	2b00      	cmp	r3, #0
 800842c:	bfb8      	it	lt
 800842e:	18e4      	addlt	r4, r4, r3
 8008430:	f000 f8ac 	bl	800858c <__malloc_lock>
 8008434:	4a1f      	ldr	r2, [pc, #124]	; (80084b4 <_free_r+0x98>)
 8008436:	6813      	ldr	r3, [r2, #0]
 8008438:	4610      	mov	r0, r2
 800843a:	b933      	cbnz	r3, 800844a <_free_r+0x2e>
 800843c:	6063      	str	r3, [r4, #4]
 800843e:	6014      	str	r4, [r2, #0]
 8008440:	4628      	mov	r0, r5
 8008442:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008446:	f000 b8a2 	b.w	800858e <__malloc_unlock>
 800844a:	42a3      	cmp	r3, r4
 800844c:	d90c      	bls.n	8008468 <_free_r+0x4c>
 800844e:	6821      	ldr	r1, [r4, #0]
 8008450:	1862      	adds	r2, r4, r1
 8008452:	4293      	cmp	r3, r2
 8008454:	bf04      	itt	eq
 8008456:	681a      	ldreq	r2, [r3, #0]
 8008458:	685b      	ldreq	r3, [r3, #4]
 800845a:	6063      	str	r3, [r4, #4]
 800845c:	bf04      	itt	eq
 800845e:	1852      	addeq	r2, r2, r1
 8008460:	6022      	streq	r2, [r4, #0]
 8008462:	6004      	str	r4, [r0, #0]
 8008464:	e7ec      	b.n	8008440 <_free_r+0x24>
 8008466:	4613      	mov	r3, r2
 8008468:	685a      	ldr	r2, [r3, #4]
 800846a:	b10a      	cbz	r2, 8008470 <_free_r+0x54>
 800846c:	42a2      	cmp	r2, r4
 800846e:	d9fa      	bls.n	8008466 <_free_r+0x4a>
 8008470:	6819      	ldr	r1, [r3, #0]
 8008472:	1858      	adds	r0, r3, r1
 8008474:	42a0      	cmp	r0, r4
 8008476:	d10b      	bne.n	8008490 <_free_r+0x74>
 8008478:	6820      	ldr	r0, [r4, #0]
 800847a:	4401      	add	r1, r0
 800847c:	1858      	adds	r0, r3, r1
 800847e:	4282      	cmp	r2, r0
 8008480:	6019      	str	r1, [r3, #0]
 8008482:	d1dd      	bne.n	8008440 <_free_r+0x24>
 8008484:	6810      	ldr	r0, [r2, #0]
 8008486:	6852      	ldr	r2, [r2, #4]
 8008488:	605a      	str	r2, [r3, #4]
 800848a:	4401      	add	r1, r0
 800848c:	6019      	str	r1, [r3, #0]
 800848e:	e7d7      	b.n	8008440 <_free_r+0x24>
 8008490:	d902      	bls.n	8008498 <_free_r+0x7c>
 8008492:	230c      	movs	r3, #12
 8008494:	602b      	str	r3, [r5, #0]
 8008496:	e7d3      	b.n	8008440 <_free_r+0x24>
 8008498:	6820      	ldr	r0, [r4, #0]
 800849a:	1821      	adds	r1, r4, r0
 800849c:	428a      	cmp	r2, r1
 800849e:	bf04      	itt	eq
 80084a0:	6811      	ldreq	r1, [r2, #0]
 80084a2:	6852      	ldreq	r2, [r2, #4]
 80084a4:	6062      	str	r2, [r4, #4]
 80084a6:	bf04      	itt	eq
 80084a8:	1809      	addeq	r1, r1, r0
 80084aa:	6021      	streq	r1, [r4, #0]
 80084ac:	605c      	str	r4, [r3, #4]
 80084ae:	e7c7      	b.n	8008440 <_free_r+0x24>
 80084b0:	bd38      	pop	{r3, r4, r5, pc}
 80084b2:	bf00      	nop
 80084b4:	200000b8 	.word	0x200000b8

080084b8 <_malloc_r>:
 80084b8:	b570      	push	{r4, r5, r6, lr}
 80084ba:	1ccd      	adds	r5, r1, #3
 80084bc:	f025 0503 	bic.w	r5, r5, #3
 80084c0:	3508      	adds	r5, #8
 80084c2:	2d0c      	cmp	r5, #12
 80084c4:	bf38      	it	cc
 80084c6:	250c      	movcc	r5, #12
 80084c8:	2d00      	cmp	r5, #0
 80084ca:	4606      	mov	r6, r0
 80084cc:	db01      	blt.n	80084d2 <_malloc_r+0x1a>
 80084ce:	42a9      	cmp	r1, r5
 80084d0:	d903      	bls.n	80084da <_malloc_r+0x22>
 80084d2:	230c      	movs	r3, #12
 80084d4:	6033      	str	r3, [r6, #0]
 80084d6:	2000      	movs	r0, #0
 80084d8:	bd70      	pop	{r4, r5, r6, pc}
 80084da:	f000 f857 	bl	800858c <__malloc_lock>
 80084de:	4a21      	ldr	r2, [pc, #132]	; (8008564 <_malloc_r+0xac>)
 80084e0:	6814      	ldr	r4, [r2, #0]
 80084e2:	4621      	mov	r1, r4
 80084e4:	b991      	cbnz	r1, 800850c <_malloc_r+0x54>
 80084e6:	4c20      	ldr	r4, [pc, #128]	; (8008568 <_malloc_r+0xb0>)
 80084e8:	6823      	ldr	r3, [r4, #0]
 80084ea:	b91b      	cbnz	r3, 80084f4 <_malloc_r+0x3c>
 80084ec:	4630      	mov	r0, r6
 80084ee:	f000 f83d 	bl	800856c <_sbrk_r>
 80084f2:	6020      	str	r0, [r4, #0]
 80084f4:	4629      	mov	r1, r5
 80084f6:	4630      	mov	r0, r6
 80084f8:	f000 f838 	bl	800856c <_sbrk_r>
 80084fc:	1c43      	adds	r3, r0, #1
 80084fe:	d124      	bne.n	800854a <_malloc_r+0x92>
 8008500:	230c      	movs	r3, #12
 8008502:	6033      	str	r3, [r6, #0]
 8008504:	4630      	mov	r0, r6
 8008506:	f000 f842 	bl	800858e <__malloc_unlock>
 800850a:	e7e4      	b.n	80084d6 <_malloc_r+0x1e>
 800850c:	680b      	ldr	r3, [r1, #0]
 800850e:	1b5b      	subs	r3, r3, r5
 8008510:	d418      	bmi.n	8008544 <_malloc_r+0x8c>
 8008512:	2b0b      	cmp	r3, #11
 8008514:	d90f      	bls.n	8008536 <_malloc_r+0x7e>
 8008516:	600b      	str	r3, [r1, #0]
 8008518:	50cd      	str	r5, [r1, r3]
 800851a:	18cc      	adds	r4, r1, r3
 800851c:	4630      	mov	r0, r6
 800851e:	f000 f836 	bl	800858e <__malloc_unlock>
 8008522:	f104 000b 	add.w	r0, r4, #11
 8008526:	1d23      	adds	r3, r4, #4
 8008528:	f020 0007 	bic.w	r0, r0, #7
 800852c:	1ac3      	subs	r3, r0, r3
 800852e:	d0d3      	beq.n	80084d8 <_malloc_r+0x20>
 8008530:	425a      	negs	r2, r3
 8008532:	50e2      	str	r2, [r4, r3]
 8008534:	e7d0      	b.n	80084d8 <_malloc_r+0x20>
 8008536:	428c      	cmp	r4, r1
 8008538:	684b      	ldr	r3, [r1, #4]
 800853a:	bf16      	itet	ne
 800853c:	6063      	strne	r3, [r4, #4]
 800853e:	6013      	streq	r3, [r2, #0]
 8008540:	460c      	movne	r4, r1
 8008542:	e7eb      	b.n	800851c <_malloc_r+0x64>
 8008544:	460c      	mov	r4, r1
 8008546:	6849      	ldr	r1, [r1, #4]
 8008548:	e7cc      	b.n	80084e4 <_malloc_r+0x2c>
 800854a:	1cc4      	adds	r4, r0, #3
 800854c:	f024 0403 	bic.w	r4, r4, #3
 8008550:	42a0      	cmp	r0, r4
 8008552:	d005      	beq.n	8008560 <_malloc_r+0xa8>
 8008554:	1a21      	subs	r1, r4, r0
 8008556:	4630      	mov	r0, r6
 8008558:	f000 f808 	bl	800856c <_sbrk_r>
 800855c:	3001      	adds	r0, #1
 800855e:	d0cf      	beq.n	8008500 <_malloc_r+0x48>
 8008560:	6025      	str	r5, [r4, #0]
 8008562:	e7db      	b.n	800851c <_malloc_r+0x64>
 8008564:	200000b8 	.word	0x200000b8
 8008568:	200000bc 	.word	0x200000bc

0800856c <_sbrk_r>:
 800856c:	b538      	push	{r3, r4, r5, lr}
 800856e:	4c06      	ldr	r4, [pc, #24]	; (8008588 <_sbrk_r+0x1c>)
 8008570:	2300      	movs	r3, #0
 8008572:	4605      	mov	r5, r0
 8008574:	4608      	mov	r0, r1
 8008576:	6023      	str	r3, [r4, #0]
 8008578:	f7f8 fb6c 	bl	8000c54 <_sbrk>
 800857c:	1c43      	adds	r3, r0, #1
 800857e:	d102      	bne.n	8008586 <_sbrk_r+0x1a>
 8008580:	6823      	ldr	r3, [r4, #0]
 8008582:	b103      	cbz	r3, 8008586 <_sbrk_r+0x1a>
 8008584:	602b      	str	r3, [r5, #0]
 8008586:	bd38      	pop	{r3, r4, r5, pc}
 8008588:	20000894 	.word	0x20000894

0800858c <__malloc_lock>:
 800858c:	4770      	bx	lr

0800858e <__malloc_unlock>:
 800858e:	4770      	bx	lr

08008590 <_init>:
 8008590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008592:	bf00      	nop
 8008594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008596:	bc08      	pop	{r3}
 8008598:	469e      	mov	lr, r3
 800859a:	4770      	bx	lr

0800859c <_fini>:
 800859c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800859e:	bf00      	nop
 80085a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085a2:	bc08      	pop	{r3}
 80085a4:	469e      	mov	lr, r3
 80085a6:	4770      	bx	lr
