
hal_2_3_uart_interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000966c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  080097fc  080097fc  000197fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080098bc  080098bc  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  080098bc  080098bc  000198bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080098c4  080098c4  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080098c4  080098c4  000198c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080098c8  080098c8  000198c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080098cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000080c  20000090  0800995c  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000089c  0800995c  0002089c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e1bf  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000043cd  00000000  00000000  0003e27f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014b0  00000000  00000000  00042650  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012c8  00000000  00000000  00043b00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026012  00000000  00000000  00044dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000154c2  00000000  00000000  0006adda  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cdbb4  00000000  00000000  0008029c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014de50  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ba0  00000000  00000000  0014decc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080097e4 	.word	0x080097e4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	080097e4 	.word	0x080097e4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <MX_GPIO_Init>:
        * EXTI
     PC3   ------> I2S2_SD
     PB10   ------> I2S2_CK
*/
void MX_GPIO_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b08c      	sub	sp, #48	; 0x30
 8000574:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000576:	f107 031c 	add.w	r3, r7, #28
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
 800057e:	605a      	str	r2, [r3, #4]
 8000580:	609a      	str	r2, [r3, #8]
 8000582:	60da      	str	r2, [r3, #12]
 8000584:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000586:	2300      	movs	r3, #0
 8000588:	61bb      	str	r3, [r7, #24]
 800058a:	4b7b      	ldr	r3, [pc, #492]	; (8000778 <MX_GPIO_Init+0x208>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058e:	4a7a      	ldr	r2, [pc, #488]	; (8000778 <MX_GPIO_Init+0x208>)
 8000590:	f043 0310 	orr.w	r3, r3, #16
 8000594:	6313      	str	r3, [r2, #48]	; 0x30
 8000596:	4b78      	ldr	r3, [pc, #480]	; (8000778 <MX_GPIO_Init+0x208>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059a:	f003 0310 	and.w	r3, r3, #16
 800059e:	61bb      	str	r3, [r7, #24]
 80005a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005a2:	2300      	movs	r3, #0
 80005a4:	617b      	str	r3, [r7, #20]
 80005a6:	4b74      	ldr	r3, [pc, #464]	; (8000778 <MX_GPIO_Init+0x208>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005aa:	4a73      	ldr	r2, [pc, #460]	; (8000778 <MX_GPIO_Init+0x208>)
 80005ac:	f043 0304 	orr.w	r3, r3, #4
 80005b0:	6313      	str	r3, [r2, #48]	; 0x30
 80005b2:	4b71      	ldr	r3, [pc, #452]	; (8000778 <MX_GPIO_Init+0x208>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	f003 0304 	and.w	r3, r3, #4
 80005ba:	617b      	str	r3, [r7, #20]
 80005bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005be:	2300      	movs	r3, #0
 80005c0:	613b      	str	r3, [r7, #16]
 80005c2:	4b6d      	ldr	r3, [pc, #436]	; (8000778 <MX_GPIO_Init+0x208>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c6:	4a6c      	ldr	r2, [pc, #432]	; (8000778 <MX_GPIO_Init+0x208>)
 80005c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005cc:	6313      	str	r3, [r2, #48]	; 0x30
 80005ce:	4b6a      	ldr	r3, [pc, #424]	; (8000778 <MX_GPIO_Init+0x208>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005d6:	613b      	str	r3, [r7, #16]
 80005d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005da:	2300      	movs	r3, #0
 80005dc:	60fb      	str	r3, [r7, #12]
 80005de:	4b66      	ldr	r3, [pc, #408]	; (8000778 <MX_GPIO_Init+0x208>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e2:	4a65      	ldr	r2, [pc, #404]	; (8000778 <MX_GPIO_Init+0x208>)
 80005e4:	f043 0301 	orr.w	r3, r3, #1
 80005e8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ea:	4b63      	ldr	r3, [pc, #396]	; (8000778 <MX_GPIO_Init+0x208>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	f003 0301 	and.w	r3, r3, #1
 80005f2:	60fb      	str	r3, [r7, #12]
 80005f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f6:	2300      	movs	r3, #0
 80005f8:	60bb      	str	r3, [r7, #8]
 80005fa:	4b5f      	ldr	r3, [pc, #380]	; (8000778 <MX_GPIO_Init+0x208>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	4a5e      	ldr	r2, [pc, #376]	; (8000778 <MX_GPIO_Init+0x208>)
 8000600:	f043 0302 	orr.w	r3, r3, #2
 8000604:	6313      	str	r3, [r2, #48]	; 0x30
 8000606:	4b5c      	ldr	r3, [pc, #368]	; (8000778 <MX_GPIO_Init+0x208>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	f003 0302 	and.w	r3, r3, #2
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000612:	2300      	movs	r3, #0
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	4b58      	ldr	r3, [pc, #352]	; (8000778 <MX_GPIO_Init+0x208>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	4a57      	ldr	r2, [pc, #348]	; (8000778 <MX_GPIO_Init+0x208>)
 800061c:	f043 0308 	orr.w	r3, r3, #8
 8000620:	6313      	str	r3, [r2, #48]	; 0x30
 8000622:	4b55      	ldr	r3, [pc, #340]	; (8000778 <MX_GPIO_Init+0x208>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	f003 0308 	and.w	r3, r3, #8
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800062e:	2200      	movs	r2, #0
 8000630:	2108      	movs	r1, #8
 8000632:	4852      	ldr	r0, [pc, #328]	; (800077c <MX_GPIO_Init+0x20c>)
 8000634:	f001 f84e 	bl	80016d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000638:	2201      	movs	r2, #1
 800063a:	2101      	movs	r1, #1
 800063c:	4850      	ldr	r0, [pc, #320]	; (8000780 <MX_GPIO_Init+0x210>)
 800063e:	f001 f849 	bl	80016d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_5, GPIO_PIN_RESET);
 8000642:	2200      	movs	r2, #0
 8000644:	2121      	movs	r1, #33	; 0x21
 8000646:	484f      	ldr	r0, [pc, #316]	; (8000784 <MX_GPIO_Init+0x214>)
 8000648:	f001 f844 	bl	80016d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
 800064c:	2200      	movs	r2, #0
 800064e:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000652:	484d      	ldr	r0, [pc, #308]	; (8000788 <MX_GPIO_Init+0x218>)
 8000654:	f001 f83e 	bl	80016d4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000658:	2308      	movs	r3, #8
 800065a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800065c:	2301      	movs	r3, #1
 800065e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000660:	2300      	movs	r3, #0
 8000662:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000664:	2300      	movs	r3, #0
 8000666:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000668:	f107 031c 	add.w	r3, r7, #28
 800066c:	4619      	mov	r1, r3
 800066e:	4843      	ldr	r0, [pc, #268]	; (800077c <MX_GPIO_Init+0x20c>)
 8000670:	f000 fe96 	bl	80013a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000674:	2301      	movs	r3, #1
 8000676:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000678:	2301      	movs	r3, #1
 800067a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067c:	2300      	movs	r3, #0
 800067e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000680:	2300      	movs	r3, #0
 8000682:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000684:	f107 031c 	add.w	r3, r7, #28
 8000688:	4619      	mov	r1, r3
 800068a:	483d      	ldr	r0, [pc, #244]	; (8000780 <MX_GPIO_Init+0x210>)
 800068c:	f000 fe88 	bl	80013a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000690:	2308      	movs	r3, #8
 8000692:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000694:	2302      	movs	r3, #2
 8000696:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000698:	2300      	movs	r3, #0
 800069a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069c:	2300      	movs	r3, #0
 800069e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80006a0:	2305      	movs	r3, #5
 80006a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80006a4:	f107 031c 	add.w	r3, r7, #28
 80006a8:	4619      	mov	r1, r3
 80006aa:	4835      	ldr	r0, [pc, #212]	; (8000780 <MX_GPIO_Init+0x210>)
 80006ac:	f000 fe78 	bl	80013a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006b0:	2301      	movs	r3, #1
 80006b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80006b4:	4b35      	ldr	r3, [pc, #212]	; (800078c <MX_GPIO_Init+0x21c>)
 80006b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b8:	2300      	movs	r3, #0
 80006ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006bc:	f107 031c 	add.w	r3, r7, #28
 80006c0:	4619      	mov	r1, r3
 80006c2:	4833      	ldr	r0, [pc, #204]	; (8000790 <MX_GPIO_Init+0x220>)
 80006c4:	f000 fe6c 	bl	80013a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5;
 80006c8:	2321      	movs	r3, #33	; 0x21
 80006ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006cc:	2301      	movs	r3, #1
 80006ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d0:	2300      	movs	r3, #0
 80006d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d4:	2300      	movs	r3, #0
 80006d6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006d8:	f107 031c 	add.w	r3, r7, #28
 80006dc:	4619      	mov	r1, r3
 80006de:	4829      	ldr	r0, [pc, #164]	; (8000784 <MX_GPIO_Init+0x214>)
 80006e0:	f000 fe5e 	bl	80013a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80006e4:	2304      	movs	r3, #4
 80006e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006e8:	2300      	movs	r3, #0
 80006ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ec:	2300      	movs	r3, #0
 80006ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80006f0:	f107 031c 	add.w	r3, r7, #28
 80006f4:	4619      	mov	r1, r3
 80006f6:	4823      	ldr	r0, [pc, #140]	; (8000784 <MX_GPIO_Init+0x214>)
 80006f8:	f000 fe52 	bl	80013a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80006fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000700:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000702:	2302      	movs	r3, #2
 8000704:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000706:	2300      	movs	r3, #0
 8000708:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800070a:	2300      	movs	r3, #0
 800070c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800070e:	2305      	movs	r3, #5
 8000710:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000712:	f107 031c 	add.w	r3, r7, #28
 8000716:	4619      	mov	r1, r3
 8000718:	481a      	ldr	r0, [pc, #104]	; (8000784 <MX_GPIO_Init+0x214>)
 800071a:	f000 fe41 	bl	80013a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11 
                           PDPin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 800071e:	f44f 6372 	mov.w	r3, #3872	; 0xf20
 8000722:	61fb      	str	r3, [r7, #28]
                          |OTG_FS_OverCurrent_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000724:	2300      	movs	r3, #0
 8000726:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000728:	2300      	movs	r3, #0
 800072a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800072c:	f107 031c 	add.w	r3, r7, #28
 8000730:	4619      	mov	r1, r3
 8000732:	4815      	ldr	r0, [pc, #84]	; (8000788 <MX_GPIO_Init+0x218>)
 8000734:	f000 fe34 	bl	80013a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 
                           PDPin */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
 8000738:	f24f 0310 	movw	r3, #61456	; 0xf010
 800073c:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073e:	2301      	movs	r3, #1
 8000740:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	2300      	movs	r3, #0
 8000744:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000746:	2300      	movs	r3, #0
 8000748:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800074a:	f107 031c 	add.w	r3, r7, #28
 800074e:	4619      	mov	r1, r3
 8000750:	480d      	ldr	r0, [pc, #52]	; (8000788 <MX_GPIO_Init+0x218>)
 8000752:	f000 fe25 	bl	80013a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000756:	2302      	movs	r3, #2
 8000758:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800075a:	4b0c      	ldr	r3, [pc, #48]	; (800078c <MX_GPIO_Init+0x21c>)
 800075c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075e:	2300      	movs	r3, #0
 8000760:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000762:	f107 031c 	add.w	r3, r7, #28
 8000766:	4619      	mov	r1, r3
 8000768:	4804      	ldr	r0, [pc, #16]	; (800077c <MX_GPIO_Init+0x20c>)
 800076a:	f000 fe19 	bl	80013a0 <HAL_GPIO_Init>

}
 800076e:	bf00      	nop
 8000770:	3730      	adds	r7, #48	; 0x30
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	40023800 	.word	0x40023800
 800077c:	40021000 	.word	0x40021000
 8000780:	40020800 	.word	0x40020800
 8000784:	40020400 	.word	0x40020400
 8000788:	40020c00 	.word	0x40020c00
 800078c:	10120000 	.word	0x10120000
 8000790:	40020000 	.word	0x40020000

08000794 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000798:	4b12      	ldr	r3, [pc, #72]	; (80007e4 <MX_I2C1_Init+0x50>)
 800079a:	4a13      	ldr	r2, [pc, #76]	; (80007e8 <MX_I2C1_Init+0x54>)
 800079c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800079e:	4b11      	ldr	r3, [pc, #68]	; (80007e4 <MX_I2C1_Init+0x50>)
 80007a0:	4a12      	ldr	r2, [pc, #72]	; (80007ec <MX_I2C1_Init+0x58>)
 80007a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007a4:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <MX_I2C1_Init+0x50>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007aa:	4b0e      	ldr	r3, [pc, #56]	; (80007e4 <MX_I2C1_Init+0x50>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007b0:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <MX_I2C1_Init+0x50>)
 80007b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007b8:	4b0a      	ldr	r3, [pc, #40]	; (80007e4 <MX_I2C1_Init+0x50>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007be:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <MX_I2C1_Init+0x50>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007c4:	4b07      	ldr	r3, [pc, #28]	; (80007e4 <MX_I2C1_Init+0x50>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007ca:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <MX_I2C1_Init+0x50>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007d0:	4804      	ldr	r0, [pc, #16]	; (80007e4 <MX_I2C1_Init+0x50>)
 80007d2:	f002 fc89 	bl	80030e8 <HAL_I2C_Init>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007dc:	f000 f9f8 	bl	8000bd0 <Error_Handler>
  }

}
 80007e0:	bf00      	nop
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	200000c0 	.word	0x200000c0
 80007e8:	40005400 	.word	0x40005400
 80007ec:	000186a0 	.word	0x000186a0

080007f0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08a      	sub	sp, #40	; 0x28
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f8:	f107 0314 	add.w	r3, r7, #20
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	605a      	str	r2, [r3, #4]
 8000802:	609a      	str	r2, [r3, #8]
 8000804:	60da      	str	r2, [r3, #12]
 8000806:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a19      	ldr	r2, [pc, #100]	; (8000874 <HAL_I2C_MspInit+0x84>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d12c      	bne.n	800086c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	613b      	str	r3, [r7, #16]
 8000816:	4b18      	ldr	r3, [pc, #96]	; (8000878 <HAL_I2C_MspInit+0x88>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a17      	ldr	r2, [pc, #92]	; (8000878 <HAL_I2C_MspInit+0x88>)
 800081c:	f043 0302 	orr.w	r3, r3, #2
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b15      	ldr	r3, [pc, #84]	; (8000878 <HAL_I2C_MspInit+0x88>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0302 	and.w	r3, r3, #2
 800082a:	613b      	str	r3, [r7, #16]
 800082c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800082e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000832:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000834:	2312      	movs	r3, #18
 8000836:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000838:	2301      	movs	r3, #1
 800083a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083c:	2300      	movs	r3, #0
 800083e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000840:	2304      	movs	r3, #4
 8000842:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000844:	f107 0314 	add.w	r3, r7, #20
 8000848:	4619      	mov	r1, r3
 800084a:	480c      	ldr	r0, [pc, #48]	; (800087c <HAL_I2C_MspInit+0x8c>)
 800084c:	f000 fda8 	bl	80013a0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000850:	2300      	movs	r3, #0
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	4b08      	ldr	r3, [pc, #32]	; (8000878 <HAL_I2C_MspInit+0x88>)
 8000856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000858:	4a07      	ldr	r2, [pc, #28]	; (8000878 <HAL_I2C_MspInit+0x88>)
 800085a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800085e:	6413      	str	r3, [r2, #64]	; 0x40
 8000860:	4b05      	ldr	r3, [pc, #20]	; (8000878 <HAL_I2C_MspInit+0x88>)
 8000862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000864:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000868:	60fb      	str	r3, [r7, #12]
 800086a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800086c:	bf00      	nop
 800086e:	3728      	adds	r7, #40	; 0x28
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	40005400 	.word	0x40005400
 8000878:	40023800 	.word	0x40023800
 800087c:	40020400 	.word	0x40020400

08000880 <MX_I2S3_Init>:

I2S_HandleTypeDef hi2s3;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0

  hi2s3.Instance = SPI3;
 8000884:	4b13      	ldr	r3, [pc, #76]	; (80008d4 <MX_I2S3_Init+0x54>)
 8000886:	4a14      	ldr	r2, [pc, #80]	; (80008d8 <MX_I2S3_Init+0x58>)
 8000888:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800088a:	4b12      	ldr	r3, [pc, #72]	; (80008d4 <MX_I2S3_Init+0x54>)
 800088c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000890:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000892:	4b10      	ldr	r3, [pc, #64]	; (80008d4 <MX_I2S3_Init+0x54>)
 8000894:	2200      	movs	r2, #0
 8000896:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000898:	4b0e      	ldr	r3, [pc, #56]	; (80008d4 <MX_I2S3_Init+0x54>)
 800089a:	2200      	movs	r2, #0
 800089c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800089e:	4b0d      	ldr	r3, [pc, #52]	; (80008d4 <MX_I2S3_Init+0x54>)
 80008a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008a4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80008a6:	4b0b      	ldr	r3, [pc, #44]	; (80008d4 <MX_I2S3_Init+0x54>)
 80008a8:	4a0c      	ldr	r2, [pc, #48]	; (80008dc <MX_I2S3_Init+0x5c>)
 80008aa:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80008ac:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <MX_I2S3_Init+0x54>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80008b2:	4b08      	ldr	r3, [pc, #32]	; (80008d4 <MX_I2S3_Init+0x54>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80008b8:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <MX_I2S3_Init+0x54>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80008be:	4805      	ldr	r0, [pc, #20]	; (80008d4 <MX_I2S3_Init+0x54>)
 80008c0:	f002 fd4a 	bl	8003358 <HAL_I2S_Init>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80008ca:	f000 f981 	bl	8000bd0 <Error_Handler>
  }

}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	20000114 	.word	0x20000114
 80008d8:	40003c00 	.word	0x40003c00
 80008dc:	00017700 	.word	0x00017700

080008e0 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b08a      	sub	sp, #40	; 0x28
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e8:	f107 0314 	add.w	r3, r7, #20
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]
 80008f4:	60da      	str	r2, [r3, #12]
 80008f6:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI3)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a28      	ldr	r2, [pc, #160]	; (80009a0 <HAL_I2S_MspInit+0xc0>)
 80008fe:	4293      	cmp	r3, r2
 8000900:	d14a      	bne.n	8000998 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	613b      	str	r3, [r7, #16]
 8000906:	4b27      	ldr	r3, [pc, #156]	; (80009a4 <HAL_I2S_MspInit+0xc4>)
 8000908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090a:	4a26      	ldr	r2, [pc, #152]	; (80009a4 <HAL_I2S_MspInit+0xc4>)
 800090c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000910:	6413      	str	r3, [r2, #64]	; 0x40
 8000912:	4b24      	ldr	r3, [pc, #144]	; (80009a4 <HAL_I2S_MspInit+0xc4>)
 8000914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000916:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800091a:	613b      	str	r3, [r7, #16]
 800091c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	60fb      	str	r3, [r7, #12]
 8000922:	4b20      	ldr	r3, [pc, #128]	; (80009a4 <HAL_I2S_MspInit+0xc4>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	4a1f      	ldr	r2, [pc, #124]	; (80009a4 <HAL_I2S_MspInit+0xc4>)
 8000928:	f043 0301 	orr.w	r3, r3, #1
 800092c:	6313      	str	r3, [r2, #48]	; 0x30
 800092e:	4b1d      	ldr	r3, [pc, #116]	; (80009a4 <HAL_I2S_MspInit+0xc4>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	f003 0301 	and.w	r3, r3, #1
 8000936:	60fb      	str	r3, [r7, #12]
 8000938:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	60bb      	str	r3, [r7, #8]
 800093e:	4b19      	ldr	r3, [pc, #100]	; (80009a4 <HAL_I2S_MspInit+0xc4>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	4a18      	ldr	r2, [pc, #96]	; (80009a4 <HAL_I2S_MspInit+0xc4>)
 8000944:	f043 0304 	orr.w	r3, r3, #4
 8000948:	6313      	str	r3, [r2, #48]	; 0x30
 800094a:	4b16      	ldr	r3, [pc, #88]	; (80009a4 <HAL_I2S_MspInit+0xc4>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	f003 0304 	and.w	r3, r3, #4
 8000952:	60bb      	str	r3, [r7, #8]
 8000954:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000956:	2310      	movs	r3, #16
 8000958:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095a:	2302      	movs	r3, #2
 800095c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000962:	2300      	movs	r3, #0
 8000964:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000966:	2306      	movs	r3, #6
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800096a:	f107 0314 	add.w	r3, r7, #20
 800096e:	4619      	mov	r1, r3
 8000970:	480d      	ldr	r0, [pc, #52]	; (80009a8 <HAL_I2S_MspInit+0xc8>)
 8000972:	f000 fd15 	bl	80013a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000976:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800097a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097c:	2302      	movs	r3, #2
 800097e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000984:	2300      	movs	r3, #0
 8000986:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000988:	2306      	movs	r3, #6
 800098a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800098c:	f107 0314 	add.w	r3, r7, #20
 8000990:	4619      	mov	r1, r3
 8000992:	4806      	ldr	r0, [pc, #24]	; (80009ac <HAL_I2S_MspInit+0xcc>)
 8000994:	f000 fd04 	bl	80013a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000998:	bf00      	nop
 800099a:	3728      	adds	r7, #40	; 0x28
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	40003c00 	.word	0x40003c00
 80009a4:	40023800 	.word	0x40023800
 80009a8:	40020000 	.word	0x40020000
 80009ac:	40020800 	.word	0x40020800

080009b0 <_write>:
static void MX_NVIC_Init(void);
void MX_USB_HOST_Process(void);

/* USER CODE BEGIN PFP */

int _write(int file, char *p, int len) {
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	60f8      	str	r0, [r7, #12]
 80009b8:	60b9      	str	r1, [r7, #8]
 80009ba:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, p, len, 10);
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	b29a      	uxth	r2, r3
 80009c0:	230a      	movs	r3, #10
 80009c2:	68b9      	ldr	r1, [r7, #8]
 80009c4:	4803      	ldr	r0, [pc, #12]	; (80009d4 <_write+0x24>)
 80009c6:	f003 ffb8 	bl	800493a <HAL_UART_Transmit>
	return len;
 80009ca:	687b      	ldr	r3, [r7, #4]
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	3710      	adds	r7, #16
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	200001b8 	.word	0x200001b8

080009d8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80009de:	f000 fb17 	bl	8001010 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80009e2:	f000 f841 	bl	8000a68 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80009e6:	f7ff fdc3 	bl	8000570 <MX_GPIO_Init>
	MX_I2C1_Init();
 80009ea:	f7ff fed3 	bl	8000794 <MX_I2C1_Init>
	MX_I2S3_Init();
 80009ee:	f7ff ff47 	bl	8000880 <MX_I2S3_Init>
	MX_SPI1_Init();
 80009f2:	f000 f8f5 	bl	8000be0 <MX_SPI1_Init>
	MX_USB_HOST_Init();
 80009f6:	f007 fccf 	bl	8008398 <MX_USB_HOST_Init>
	MX_USART2_UART_Init();
 80009fa:	f000 fa6d 	bl	8000ed8 <MX_USART2_UART_Init>

	/* Initialize interrupts */
	MX_NVIC_Init();
 80009fe:	f000 f8b5 	bl	8000b6c <MX_NVIC_Init>
	/* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000a02:	2201      	movs	r2, #1
 8000a04:	2101      	movs	r1, #1
 8000a06:	4812      	ldr	r0, [pc, #72]	; (8000a50 <main+0x78>)
 8000a08:	f000 fe64 	bl	80016d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	2120      	movs	r1, #32
 8000a10:	480f      	ldr	r0, [pc, #60]	; (8000a50 <main+0x78>)
 8000a12:	f000 fe5f 	bl	80016d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000a16:	2201      	movs	r2, #1
 8000a18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a1c:	480d      	ldr	r0, [pc, #52]	; (8000a54 <main+0x7c>)
 8000a1e:	f000 fe59 	bl	80016d4 <HAL_GPIO_WritePin>

	//UART2 RX Interrupt
	HAL_UART_Receive_IT(&huart2, &rx2_data, 1);
 8000a22:	2201      	movs	r2, #1
 8000a24:	490c      	ldr	r1, [pc, #48]	; (8000a58 <main+0x80>)
 8000a26:	480d      	ldr	r0, [pc, #52]	; (8000a5c <main+0x84>)
 8000a28:	f004 f820 	bl	8004a6c <HAL_UART_Receive_IT>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	uint8_t a = 'a';
 8000a2c:	2361      	movs	r3, #97	; 0x61
 8000a2e:	71fb      	strb	r3, [r7, #7]
	float f = 1.234;
 8000a30:	4b0b      	ldr	r3, [pc, #44]	; (8000a60 <main+0x88>)
 8000a32:	603b      	str	r3, [r7, #0]
	while (1)
	{
		printf("Hello %d\n", a++);
 8000a34:	79fb      	ldrb	r3, [r7, #7]
 8000a36:	1c5a      	adds	r2, r3, #1
 8000a38:	71fa      	strb	r2, [r7, #7]
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4809      	ldr	r0, [pc, #36]	; (8000a64 <main+0x8c>)
 8000a3e:	f008 f895 	bl	8008b6c <iprintf>
		HAL_Delay(1000);
 8000a42:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a46:	f000 fb55 	bl	80010f4 <HAL_Delay>

		//		if(HAL_UART_Receive(&huart2, &a, 1, 10) == HAL_OK) {
		//			HAL_UART_Transmit(&huart2, &a, 1, 10);
		//		}
		/* USER CODE END WHILE */
		MX_USB_HOST_Process();
 8000a4a:	f007 fccb 	bl	80083e4 <MX_USB_HOST_Process>
		printf("Hello %d\n", a++);
 8000a4e:	e7f1      	b.n	8000a34 <main+0x5c>
 8000a50:	40020400 	.word	0x40020400
 8000a54:	40020c00 	.word	0x40020c00
 8000a58:	2000015c 	.word	0x2000015c
 8000a5c:	200001b8 	.word	0x200001b8
 8000a60:	3f9df3b6 	.word	0x3f9df3b6
 8000a64:	080097fc 	.word	0x080097fc

08000a68 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b098      	sub	sp, #96	; 0x60
 8000a6c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a6e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a72:	2230      	movs	r2, #48	; 0x30
 8000a74:	2100      	movs	r1, #0
 8000a76:	4618      	mov	r0, r3
 8000a78:	f007 ffc8 	bl	8008a0c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a7c:	f107 031c 	add.w	r3, r7, #28
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]
 8000a8a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a8c:	f107 030c 	add.w	r3, r7, #12
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]
 8000a98:	60da      	str	r2, [r3, #12]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	60bb      	str	r3, [r7, #8]
 8000a9e:	4b31      	ldr	r3, [pc, #196]	; (8000b64 <SystemClock_Config+0xfc>)
 8000aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa2:	4a30      	ldr	r2, [pc, #192]	; (8000b64 <SystemClock_Config+0xfc>)
 8000aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aaa:	4b2e      	ldr	r3, [pc, #184]	; (8000b64 <SystemClock_Config+0xfc>)
 8000aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ab2:	60bb      	str	r3, [r7, #8]
 8000ab4:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	607b      	str	r3, [r7, #4]
 8000aba:	4b2b      	ldr	r3, [pc, #172]	; (8000b68 <SystemClock_Config+0x100>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4a2a      	ldr	r2, [pc, #168]	; (8000b68 <SystemClock_Config+0x100>)
 8000ac0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ac4:	6013      	str	r3, [r2, #0]
 8000ac6:	4b28      	ldr	r3, [pc, #160]	; (8000b68 <SystemClock_Config+0x100>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ace:	607b      	str	r3, [r7, #4]
 8000ad0:	687b      	ldr	r3, [r7, #4]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ad6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ada:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000adc:	2302      	movs	r3, #2
 8000ade:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ae0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ae4:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000ae6:	2308      	movs	r3, #8
 8000ae8:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000aea:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000aee:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000af0:	2302      	movs	r3, #2
 8000af2:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000af4:	2307      	movs	r3, #7
 8000af6:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000af8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000afc:	4618      	mov	r0, r3
 8000afe:	f003 f8cb 	bl	8003c98 <HAL_RCC_OscConfig>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <SystemClock_Config+0xa4>
	{
		Error_Handler();
 8000b08:	f000 f862 	bl	8000bd0 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b0c:	230f      	movs	r3, #15
 8000b0e:	61fb      	str	r3, [r7, #28]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b10:	2302      	movs	r3, #2
 8000b12:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b14:	2300      	movs	r3, #0
 8000b16:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b18:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b1c:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b22:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b24:	f107 031c 	add.w	r3, r7, #28
 8000b28:	2105      	movs	r1, #5
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f003 fb24 	bl	8004178 <HAL_RCC_ClockConfig>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <SystemClock_Config+0xd2>
	{
		Error_Handler();
 8000b36:	f000 f84b 	bl	8000bd0 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000b3e:	23c0      	movs	r3, #192	; 0xc0
 8000b40:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000b42:	2302      	movs	r3, #2
 8000b44:	617b      	str	r3, [r7, #20]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b46:	f107 030c 	add.w	r3, r7, #12
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f003 fd06 	bl	800455c <HAL_RCCEx_PeriphCLKConfig>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <SystemClock_Config+0xf2>
	{
		Error_Handler();
 8000b56:	f000 f83b 	bl	8000bd0 <Error_Handler>
	}
}
 8000b5a:	bf00      	nop
 8000b5c:	3760      	adds	r7, #96	; 0x60
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40023800 	.word	0x40023800
 8000b68:	40007000 	.word	0x40007000

08000b6c <MX_NVIC_Init>:
/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
	/* USART2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b70:	2200      	movs	r2, #0
 8000b72:	2100      	movs	r1, #0
 8000b74:	2026      	movs	r0, #38	; 0x26
 8000b76:	f000 fbba 	bl	80012ee <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b7a:	2026      	movs	r0, #38	; 0x26
 8000b7c:	f000 fbd3 	bl	8001326 <HAL_NVIC_EnableIRQ>
	/* OTG_FS_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8000b80:	2200      	movs	r2, #0
 8000b82:	2100      	movs	r1, #0
 8000b84:	2043      	movs	r0, #67	; 0x43
 8000b86:	f000 fbb2 	bl	80012ee <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8000b8a:	2043      	movs	r0, #67	; 0x43
 8000b8c:	f000 fbcb 	bl	8001326 <HAL_NVIC_EnableIRQ>
}
 8000b90:	bf00      	nop
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
	if (huart -> Instance == USART2) {
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a08      	ldr	r2, [pc, #32]	; (8000bc4 <HAL_UART_RxCpltCallback+0x30>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d10a      	bne.n	8000bbc <HAL_UART_RxCpltCallback+0x28>
		HAL_UART_Receive_IT(&huart2, &rx2_data, 1);
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	4907      	ldr	r1, [pc, #28]	; (8000bc8 <HAL_UART_RxCpltCallback+0x34>)
 8000baa:	4808      	ldr	r0, [pc, #32]	; (8000bcc <HAL_UART_RxCpltCallback+0x38>)
 8000bac:	f003 ff5e 	bl	8004a6c <HAL_UART_Receive_IT>
		HAL_UART_Transmit(&huart2, &rx2_data, 1, 10);
 8000bb0:	230a      	movs	r3, #10
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	4904      	ldr	r1, [pc, #16]	; (8000bc8 <HAL_UART_RxCpltCallback+0x34>)
 8000bb6:	4805      	ldr	r0, [pc, #20]	; (8000bcc <HAL_UART_RxCpltCallback+0x38>)
 8000bb8:	f003 febf 	bl	800493a <HAL_UART_Transmit>
	}
}
 8000bbc:	bf00      	nop
 8000bbe:	3708      	adds	r7, #8
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	40004400 	.word	0x40004400
 8000bc8:	2000015c 	.word	0x2000015c
 8000bcc:	200001b8 	.word	0x200001b8

08000bd0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000bd4:	bf00      	nop
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
	...

08000be0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000be4:	4b17      	ldr	r3, [pc, #92]	; (8000c44 <MX_SPI1_Init+0x64>)
 8000be6:	4a18      	ldr	r2, [pc, #96]	; (8000c48 <MX_SPI1_Init+0x68>)
 8000be8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bea:	4b16      	ldr	r3, [pc, #88]	; (8000c44 <MX_SPI1_Init+0x64>)
 8000bec:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000bf0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000bf2:	4b14      	ldr	r3, [pc, #80]	; (8000c44 <MX_SPI1_Init+0x64>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bf8:	4b12      	ldr	r3, [pc, #72]	; (8000c44 <MX_SPI1_Init+0x64>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bfe:	4b11      	ldr	r3, [pc, #68]	; (8000c44 <MX_SPI1_Init+0x64>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c04:	4b0f      	ldr	r3, [pc, #60]	; (8000c44 <MX_SPI1_Init+0x64>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c0a:	4b0e      	ldr	r3, [pc, #56]	; (8000c44 <MX_SPI1_Init+0x64>)
 8000c0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c10:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c12:	4b0c      	ldr	r3, [pc, #48]	; (8000c44 <MX_SPI1_Init+0x64>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c18:	4b0a      	ldr	r3, [pc, #40]	; (8000c44 <MX_SPI1_Init+0x64>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c1e:	4b09      	ldr	r3, [pc, #36]	; (8000c44 <MX_SPI1_Init+0x64>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c24:	4b07      	ldr	r3, [pc, #28]	; (8000c44 <MX_SPI1_Init+0x64>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000c2a:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <MX_SPI1_Init+0x64>)
 8000c2c:	220a      	movs	r2, #10
 8000c2e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c30:	4804      	ldr	r0, [pc, #16]	; (8000c44 <MX_SPI1_Init+0x64>)
 8000c32:	f003 fdd1 	bl	80047d8 <HAL_SPI_Init>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000c3c:	f7ff ffc8 	bl	8000bd0 <Error_Handler>
  }

}
 8000c40:	bf00      	nop
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	20000160 	.word	0x20000160
 8000c48:	40013000 	.word	0x40013000

08000c4c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b08a      	sub	sp, #40	; 0x28
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c54:	f107 0314 	add.w	r3, r7, #20
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
 8000c62:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a19      	ldr	r2, [pc, #100]	; (8000cd0 <HAL_SPI_MspInit+0x84>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d12b      	bne.n	8000cc6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	613b      	str	r3, [r7, #16]
 8000c72:	4b18      	ldr	r3, [pc, #96]	; (8000cd4 <HAL_SPI_MspInit+0x88>)
 8000c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c76:	4a17      	ldr	r2, [pc, #92]	; (8000cd4 <HAL_SPI_MspInit+0x88>)
 8000c78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c7e:	4b15      	ldr	r3, [pc, #84]	; (8000cd4 <HAL_SPI_MspInit+0x88>)
 8000c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c86:	613b      	str	r3, [r7, #16]
 8000c88:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	60fb      	str	r3, [r7, #12]
 8000c8e:	4b11      	ldr	r3, [pc, #68]	; (8000cd4 <HAL_SPI_MspInit+0x88>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	4a10      	ldr	r2, [pc, #64]	; (8000cd4 <HAL_SPI_MspInit+0x88>)
 8000c94:	f043 0301 	orr.w	r3, r3, #1
 8000c98:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9a:	4b0e      	ldr	r3, [pc, #56]	; (8000cd4 <HAL_SPI_MspInit+0x88>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	f003 0301 	and.w	r3, r3, #1
 8000ca2:	60fb      	str	r3, [r7, #12]
 8000ca4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000ca6:	23e0      	movs	r3, #224	; 0xe0
 8000ca8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000caa:	2302      	movs	r3, #2
 8000cac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cb6:	2305      	movs	r3, #5
 8000cb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cba:	f107 0314 	add.w	r3, r7, #20
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4805      	ldr	r0, [pc, #20]	; (8000cd8 <HAL_SPI_MspInit+0x8c>)
 8000cc2:	f000 fb6d 	bl	80013a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000cc6:	bf00      	nop
 8000cc8:	3728      	adds	r7, #40	; 0x28
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40013000 	.word	0x40013000
 8000cd4:	40023800 	.word	0x40023800
 8000cd8:	40020000 	.word	0x40020000

08000cdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	607b      	str	r3, [r7, #4]
 8000ce6:	4b10      	ldr	r3, [pc, #64]	; (8000d28 <HAL_MspInit+0x4c>)
 8000ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cea:	4a0f      	ldr	r2, [pc, #60]	; (8000d28 <HAL_MspInit+0x4c>)
 8000cec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cf0:	6453      	str	r3, [r2, #68]	; 0x44
 8000cf2:	4b0d      	ldr	r3, [pc, #52]	; (8000d28 <HAL_MspInit+0x4c>)
 8000cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cfa:	607b      	str	r3, [r7, #4]
 8000cfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	603b      	str	r3, [r7, #0]
 8000d02:	4b09      	ldr	r3, [pc, #36]	; (8000d28 <HAL_MspInit+0x4c>)
 8000d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d06:	4a08      	ldr	r2, [pc, #32]	; (8000d28 <HAL_MspInit+0x4c>)
 8000d08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d0e:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <HAL_MspInit+0x4c>)
 8000d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d16:	603b      	str	r3, [r7, #0]
 8000d18:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d1a:	2007      	movs	r0, #7
 8000d1c:	f000 fadc 	bl	80012d8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d20:	bf00      	nop
 8000d22:	3708      	adds	r7, #8
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	40023800 	.word	0x40023800

08000d2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr

08000d3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d3e:	e7fe      	b.n	8000d3e <HardFault_Handler+0x4>

08000d40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d44:	e7fe      	b.n	8000d44 <MemManage_Handler+0x4>

08000d46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d4a:	e7fe      	b.n	8000d4a <BusFault_Handler+0x4>

08000d4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d50:	e7fe      	b.n	8000d50 <UsageFault_Handler+0x4>

08000d52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d56:	bf00      	nop
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr

08000d60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d64:	bf00      	nop
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr

08000d6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d72:	bf00      	nop
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr

08000d7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d80:	f000 f998 	bl	80010b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d84:	bf00      	nop
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d8c:	4802      	ldr	r0, [pc, #8]	; (8000d98 <USART2_IRQHandler+0x10>)
 8000d8e:	f003 fec3 	bl	8004b18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	200001b8 	.word	0x200001b8

08000d9c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000da0:	4802      	ldr	r0, [pc, #8]	; (8000dac <OTG_FS_IRQHandler+0x10>)
 8000da2:	f000 ff3f 	bl	8001c24 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	200005d4 	.word	0x200005d4

08000db0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b086      	sub	sp, #24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	60f8      	str	r0, [r7, #12]
 8000db8:	60b9      	str	r1, [r7, #8]
 8000dba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	617b      	str	r3, [r7, #20]
 8000dc0:	e00a      	b.n	8000dd8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000dc2:	f3af 8000 	nop.w
 8000dc6:	4601      	mov	r1, r0
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	1c5a      	adds	r2, r3, #1
 8000dcc:	60ba      	str	r2, [r7, #8]
 8000dce:	b2ca      	uxtb	r2, r1
 8000dd0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	617b      	str	r3, [r7, #20]
 8000dd8:	697a      	ldr	r2, [r7, #20]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	dbf0      	blt.n	8000dc2 <_read+0x12>
	}

return len;
 8000de0:	687b      	ldr	r3, [r7, #4]
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3718      	adds	r7, #24
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}

08000dea <_close>:
	}
	return len;
}

int _close(int file)
{
 8000dea:	b480      	push	{r7}
 8000dec:	b083      	sub	sp, #12
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	6078      	str	r0, [r7, #4]
	return -1;
 8000df2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	370c      	adds	r7, #12
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr

08000e02 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e02:	b480      	push	{r7}
 8000e04:	b083      	sub	sp, #12
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	6078      	str	r0, [r7, #4]
 8000e0a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e12:	605a      	str	r2, [r3, #4]
	return 0;
 8000e14:	2300      	movs	r3, #0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	370c      	adds	r7, #12
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr

08000e22 <_isatty>:

int _isatty(int file)
{
 8000e22:	b480      	push	{r7}
 8000e24:	b083      	sub	sp, #12
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	6078      	str	r0, [r7, #4]
	return 1;
 8000e2a:	2301      	movs	r3, #1
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr

08000e38 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b085      	sub	sp, #20
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	60f8      	str	r0, [r7, #12]
 8000e40:	60b9      	str	r1, [r7, #8]
 8000e42:	607a      	str	r2, [r7, #4]
	return 0;
 8000e44:	2300      	movs	r3, #0
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3714      	adds	r7, #20
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
	...

08000e54 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000e5c:	4b11      	ldr	r3, [pc, #68]	; (8000ea4 <_sbrk+0x50>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d102      	bne.n	8000e6a <_sbrk+0x16>
		heap_end = &end;
 8000e64:	4b0f      	ldr	r3, [pc, #60]	; (8000ea4 <_sbrk+0x50>)
 8000e66:	4a10      	ldr	r2, [pc, #64]	; (8000ea8 <_sbrk+0x54>)
 8000e68:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000e6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ea4 <_sbrk+0x50>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000e70:	4b0c      	ldr	r3, [pc, #48]	; (8000ea4 <_sbrk+0x50>)
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	4413      	add	r3, r2
 8000e78:	466a      	mov	r2, sp
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d907      	bls.n	8000e8e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000e7e:	f007 fd8b 	bl	8008998 <__errno>
 8000e82:	4602      	mov	r2, r0
 8000e84:	230c      	movs	r3, #12
 8000e86:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000e88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e8c:	e006      	b.n	8000e9c <_sbrk+0x48>
	}

	heap_end += incr;
 8000e8e:	4b05      	ldr	r3, [pc, #20]	; (8000ea4 <_sbrk+0x50>)
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4413      	add	r3, r2
 8000e96:	4a03      	ldr	r2, [pc, #12]	; (8000ea4 <_sbrk+0x50>)
 8000e98:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000e9a:	68fb      	ldr	r3, [r7, #12]
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3710      	adds	r7, #16
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	200000ac 	.word	0x200000ac
 8000ea8:	200008a0 	.word	0x200008a0

08000eac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000eb0:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <SystemInit+0x28>)
 8000eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eb6:	4a07      	ldr	r2, [pc, #28]	; (8000ed4 <SystemInit+0x28>)
 8000eb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ebc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ec0:	4b04      	ldr	r3, [pc, #16]	; (8000ed4 <SystemInit+0x28>)
 8000ec2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ec6:	609a      	str	r2, [r3, #8]
#endif
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	e000ed00 	.word	0xe000ed00

08000ed8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000edc:	4b11      	ldr	r3, [pc, #68]	; (8000f24 <MX_USART2_UART_Init+0x4c>)
 8000ede:	4a12      	ldr	r2, [pc, #72]	; (8000f28 <MX_USART2_UART_Init+0x50>)
 8000ee0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ee2:	4b10      	ldr	r3, [pc, #64]	; (8000f24 <MX_USART2_UART_Init+0x4c>)
 8000ee4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ee8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000eea:	4b0e      	ldr	r3, [pc, #56]	; (8000f24 <MX_USART2_UART_Init+0x4c>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ef0:	4b0c      	ldr	r3, [pc, #48]	; (8000f24 <MX_USART2_UART_Init+0x4c>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ef6:	4b0b      	ldr	r3, [pc, #44]	; (8000f24 <MX_USART2_UART_Init+0x4c>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000efc:	4b09      	ldr	r3, [pc, #36]	; (8000f24 <MX_USART2_UART_Init+0x4c>)
 8000efe:	220c      	movs	r2, #12
 8000f00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f02:	4b08      	ldr	r3, [pc, #32]	; (8000f24 <MX_USART2_UART_Init+0x4c>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f08:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <MX_USART2_UART_Init+0x4c>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f0e:	4805      	ldr	r0, [pc, #20]	; (8000f24 <MX_USART2_UART_Init+0x4c>)
 8000f10:	f003 fcc6 	bl	80048a0 <HAL_UART_Init>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f1a:	f7ff fe59 	bl	8000bd0 <Error_Handler>
  }

}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	200001b8 	.word	0x200001b8
 8000f28:	40004400 	.word	0x40004400

08000f2c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b08a      	sub	sp, #40	; 0x28
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f34:	f107 0314 	add.w	r3, r7, #20
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	605a      	str	r2, [r3, #4]
 8000f3e:	609a      	str	r2, [r3, #8]
 8000f40:	60da      	str	r2, [r3, #12]
 8000f42:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a19      	ldr	r2, [pc, #100]	; (8000fb0 <HAL_UART_MspInit+0x84>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d12b      	bne.n	8000fa6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	613b      	str	r3, [r7, #16]
 8000f52:	4b18      	ldr	r3, [pc, #96]	; (8000fb4 <HAL_UART_MspInit+0x88>)
 8000f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f56:	4a17      	ldr	r2, [pc, #92]	; (8000fb4 <HAL_UART_MspInit+0x88>)
 8000f58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f5e:	4b15      	ldr	r3, [pc, #84]	; (8000fb4 <HAL_UART_MspInit+0x88>)
 8000f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f66:	613b      	str	r3, [r7, #16]
 8000f68:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60fb      	str	r3, [r7, #12]
 8000f6e:	4b11      	ldr	r3, [pc, #68]	; (8000fb4 <HAL_UART_MspInit+0x88>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	4a10      	ldr	r2, [pc, #64]	; (8000fb4 <HAL_UART_MspInit+0x88>)
 8000f74:	f043 0301 	orr.w	r3, r3, #1
 8000f78:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7a:	4b0e      	ldr	r3, [pc, #56]	; (8000fb4 <HAL_UART_MspInit+0x88>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	f003 0301 	and.w	r3, r3, #1
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f86:	230c      	movs	r3, #12
 8000f88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f92:	2303      	movs	r3, #3
 8000f94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f96:	2307      	movs	r3, #7
 8000f98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f9a:	f107 0314 	add.w	r3, r7, #20
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4805      	ldr	r0, [pc, #20]	; (8000fb8 <HAL_UART_MspInit+0x8c>)
 8000fa2:	f000 f9fd 	bl	80013a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000fa6:	bf00      	nop
 8000fa8:	3728      	adds	r7, #40	; 0x28
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	40004400 	.word	0x40004400
 8000fb4:	40023800 	.word	0x40023800
 8000fb8:	40020000 	.word	0x40020000

08000fbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000fbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ff4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000fc0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000fc2:	e003      	b.n	8000fcc <LoopCopyDataInit>

08000fc4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000fc4:	4b0c      	ldr	r3, [pc, #48]	; (8000ff8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000fc6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000fc8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000fca:	3104      	adds	r1, #4

08000fcc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000fcc:	480b      	ldr	r0, [pc, #44]	; (8000ffc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000fce:	4b0c      	ldr	r3, [pc, #48]	; (8001000 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000fd0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000fd2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000fd4:	d3f6      	bcc.n	8000fc4 <CopyDataInit>
  ldr  r2, =_sbss
 8000fd6:	4a0b      	ldr	r2, [pc, #44]	; (8001004 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000fd8:	e002      	b.n	8000fe0 <LoopFillZerobss>

08000fda <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000fda:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000fdc:	f842 3b04 	str.w	r3, [r2], #4

08000fe0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000fe0:	4b09      	ldr	r3, [pc, #36]	; (8001008 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000fe2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000fe4:	d3f9      	bcc.n	8000fda <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000fe6:	f7ff ff61 	bl	8000eac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fea:	f007 fcdb 	bl	80089a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fee:	f7ff fcf3 	bl	80009d8 <main>
  bx  lr    
 8000ff2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ff4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000ff8:	080098cc 	.word	0x080098cc
  ldr  r0, =_sdata
 8000ffc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001000:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8001004:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8001008:	2000089c 	.word	0x2000089c

0800100c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800100c:	e7fe      	b.n	800100c <ADC_IRQHandler>
	...

08001010 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001014:	4b0e      	ldr	r3, [pc, #56]	; (8001050 <HAL_Init+0x40>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a0d      	ldr	r2, [pc, #52]	; (8001050 <HAL_Init+0x40>)
 800101a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800101e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001020:	4b0b      	ldr	r3, [pc, #44]	; (8001050 <HAL_Init+0x40>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a0a      	ldr	r2, [pc, #40]	; (8001050 <HAL_Init+0x40>)
 8001026:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800102a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800102c:	4b08      	ldr	r3, [pc, #32]	; (8001050 <HAL_Init+0x40>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a07      	ldr	r2, [pc, #28]	; (8001050 <HAL_Init+0x40>)
 8001032:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001036:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001038:	2003      	movs	r0, #3
 800103a:	f000 f94d 	bl	80012d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800103e:	2000      	movs	r0, #0
 8001040:	f000 f808 	bl	8001054 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001044:	f7ff fe4a 	bl	8000cdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001048:	2300      	movs	r3, #0
}
 800104a:	4618      	mov	r0, r3
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40023c00 	.word	0x40023c00

08001054 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800105c:	4b12      	ldr	r3, [pc, #72]	; (80010a8 <HAL_InitTick+0x54>)
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	4b12      	ldr	r3, [pc, #72]	; (80010ac <HAL_InitTick+0x58>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	4619      	mov	r1, r3
 8001066:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800106a:	fbb3 f3f1 	udiv	r3, r3, r1
 800106e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001072:	4618      	mov	r0, r3
 8001074:	f000 f965 	bl	8001342 <HAL_SYSTICK_Config>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	e00e      	b.n	80010a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2b0f      	cmp	r3, #15
 8001086:	d80a      	bhi.n	800109e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001088:	2200      	movs	r2, #0
 800108a:	6879      	ldr	r1, [r7, #4]
 800108c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001090:	f000 f92d 	bl	80012ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001094:	4a06      	ldr	r2, [pc, #24]	; (80010b0 <HAL_InitTick+0x5c>)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800109a:	2300      	movs	r3, #0
 800109c:	e000      	b.n	80010a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3708      	adds	r7, #8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	20000000 	.word	0x20000000
 80010ac:	20000008 	.word	0x20000008
 80010b0:	20000004 	.word	0x20000004

080010b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010b8:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <HAL_IncTick+0x20>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	461a      	mov	r2, r3
 80010be:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <HAL_IncTick+0x24>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4413      	add	r3, r2
 80010c4:	4a04      	ldr	r2, [pc, #16]	; (80010d8 <HAL_IncTick+0x24>)
 80010c6:	6013      	str	r3, [r2, #0]
}
 80010c8:	bf00      	nop
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	20000008 	.word	0x20000008
 80010d8:	200001f8 	.word	0x200001f8

080010dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  return uwTick;
 80010e0:	4b03      	ldr	r3, [pc, #12]	; (80010f0 <HAL_GetTick+0x14>)
 80010e2:	681b      	ldr	r3, [r3, #0]
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	200001f8 	.word	0x200001f8

080010f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010fc:	f7ff ffee 	bl	80010dc <HAL_GetTick>
 8001100:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800110c:	d005      	beq.n	800111a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800110e:	4b09      	ldr	r3, [pc, #36]	; (8001134 <HAL_Delay+0x40>)
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	461a      	mov	r2, r3
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	4413      	add	r3, r2
 8001118:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800111a:	bf00      	nop
 800111c:	f7ff ffde 	bl	80010dc <HAL_GetTick>
 8001120:	4602      	mov	r2, r0
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	68fa      	ldr	r2, [r7, #12]
 8001128:	429a      	cmp	r2, r3
 800112a:	d8f7      	bhi.n	800111c <HAL_Delay+0x28>
  {
  }
}
 800112c:	bf00      	nop
 800112e:	3710      	adds	r7, #16
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	20000008 	.word	0x20000008

08001138 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001138:	b480      	push	{r7}
 800113a:	b085      	sub	sp, #20
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f003 0307 	and.w	r3, r3, #7
 8001146:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001148:	4b0c      	ldr	r3, [pc, #48]	; (800117c <__NVIC_SetPriorityGrouping+0x44>)
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800114e:	68ba      	ldr	r2, [r7, #8]
 8001150:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001154:	4013      	ands	r3, r2
 8001156:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001160:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001164:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001168:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800116a:	4a04      	ldr	r2, [pc, #16]	; (800117c <__NVIC_SetPriorityGrouping+0x44>)
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	60d3      	str	r3, [r2, #12]
}
 8001170:	bf00      	nop
 8001172:	3714      	adds	r7, #20
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	e000ed00 	.word	0xe000ed00

08001180 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001184:	4b04      	ldr	r3, [pc, #16]	; (8001198 <__NVIC_GetPriorityGrouping+0x18>)
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	0a1b      	lsrs	r3, r3, #8
 800118a:	f003 0307 	and.w	r3, r3, #7
}
 800118e:	4618      	mov	r0, r3
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	e000ed00 	.word	0xe000ed00

0800119c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	db0b      	blt.n	80011c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ae:	79fb      	ldrb	r3, [r7, #7]
 80011b0:	f003 021f 	and.w	r2, r3, #31
 80011b4:	4907      	ldr	r1, [pc, #28]	; (80011d4 <__NVIC_EnableIRQ+0x38>)
 80011b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ba:	095b      	lsrs	r3, r3, #5
 80011bc:	2001      	movs	r0, #1
 80011be:	fa00 f202 	lsl.w	r2, r0, r2
 80011c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011c6:	bf00      	nop
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	e000e100 	.word	0xe000e100

080011d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	6039      	str	r1, [r7, #0]
 80011e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	db0a      	blt.n	8001202 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	b2da      	uxtb	r2, r3
 80011f0:	490c      	ldr	r1, [pc, #48]	; (8001224 <__NVIC_SetPriority+0x4c>)
 80011f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f6:	0112      	lsls	r2, r2, #4
 80011f8:	b2d2      	uxtb	r2, r2
 80011fa:	440b      	add	r3, r1
 80011fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001200:	e00a      	b.n	8001218 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	b2da      	uxtb	r2, r3
 8001206:	4908      	ldr	r1, [pc, #32]	; (8001228 <__NVIC_SetPriority+0x50>)
 8001208:	79fb      	ldrb	r3, [r7, #7]
 800120a:	f003 030f 	and.w	r3, r3, #15
 800120e:	3b04      	subs	r3, #4
 8001210:	0112      	lsls	r2, r2, #4
 8001212:	b2d2      	uxtb	r2, r2
 8001214:	440b      	add	r3, r1
 8001216:	761a      	strb	r2, [r3, #24]
}
 8001218:	bf00      	nop
 800121a:	370c      	adds	r7, #12
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	e000e100 	.word	0xe000e100
 8001228:	e000ed00 	.word	0xe000ed00

0800122c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800122c:	b480      	push	{r7}
 800122e:	b089      	sub	sp, #36	; 0x24
 8001230:	af00      	add	r7, sp, #0
 8001232:	60f8      	str	r0, [r7, #12]
 8001234:	60b9      	str	r1, [r7, #8]
 8001236:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	f003 0307 	and.w	r3, r3, #7
 800123e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	f1c3 0307 	rsb	r3, r3, #7
 8001246:	2b04      	cmp	r3, #4
 8001248:	bf28      	it	cs
 800124a:	2304      	movcs	r3, #4
 800124c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	3304      	adds	r3, #4
 8001252:	2b06      	cmp	r3, #6
 8001254:	d902      	bls.n	800125c <NVIC_EncodePriority+0x30>
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	3b03      	subs	r3, #3
 800125a:	e000      	b.n	800125e <NVIC_EncodePriority+0x32>
 800125c:	2300      	movs	r3, #0
 800125e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001260:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	43da      	mvns	r2, r3
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	401a      	ands	r2, r3
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001274:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	fa01 f303 	lsl.w	r3, r1, r3
 800127e:	43d9      	mvns	r1, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001284:	4313      	orrs	r3, r2
         );
}
 8001286:	4618      	mov	r0, r3
 8001288:	3724      	adds	r7, #36	; 0x24
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
	...

08001294 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	3b01      	subs	r3, #1
 80012a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012a4:	d301      	bcc.n	80012aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012a6:	2301      	movs	r3, #1
 80012a8:	e00f      	b.n	80012ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012aa:	4a0a      	ldr	r2, [pc, #40]	; (80012d4 <SysTick_Config+0x40>)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	3b01      	subs	r3, #1
 80012b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012b2:	210f      	movs	r1, #15
 80012b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012b8:	f7ff ff8e 	bl	80011d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012bc:	4b05      	ldr	r3, [pc, #20]	; (80012d4 <SysTick_Config+0x40>)
 80012be:	2200      	movs	r2, #0
 80012c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012c2:	4b04      	ldr	r3, [pc, #16]	; (80012d4 <SysTick_Config+0x40>)
 80012c4:	2207      	movs	r2, #7
 80012c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012c8:	2300      	movs	r3, #0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	e000e010 	.word	0xe000e010

080012d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f7ff ff29 	bl	8001138 <__NVIC_SetPriorityGrouping>
}
 80012e6:	bf00      	nop
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b086      	sub	sp, #24
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	4603      	mov	r3, r0
 80012f6:	60b9      	str	r1, [r7, #8]
 80012f8:	607a      	str	r2, [r7, #4]
 80012fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012fc:	2300      	movs	r3, #0
 80012fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001300:	f7ff ff3e 	bl	8001180 <__NVIC_GetPriorityGrouping>
 8001304:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	68b9      	ldr	r1, [r7, #8]
 800130a:	6978      	ldr	r0, [r7, #20]
 800130c:	f7ff ff8e 	bl	800122c <NVIC_EncodePriority>
 8001310:	4602      	mov	r2, r0
 8001312:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001316:	4611      	mov	r1, r2
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff ff5d 	bl	80011d8 <__NVIC_SetPriority>
}
 800131e:	bf00      	nop
 8001320:	3718      	adds	r7, #24
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	b082      	sub	sp, #8
 800132a:	af00      	add	r7, sp, #0
 800132c:	4603      	mov	r3, r0
 800132e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff ff31 	bl	800119c <__NVIC_EnableIRQ>
}
 800133a:	bf00      	nop
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b082      	sub	sp, #8
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f7ff ffa2 	bl	8001294 <SysTick_Config>
 8001350:	4603      	mov	r3, r0
}
 8001352:	4618      	mov	r0, r3
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800135a:	b480      	push	{r7}
 800135c:	b083      	sub	sp, #12
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001368:	b2db      	uxtb	r3, r3
 800136a:	2b02      	cmp	r3, #2
 800136c:	d004      	beq.n	8001378 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2280      	movs	r2, #128	; 0x80
 8001372:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001374:	2301      	movs	r3, #1
 8001376:	e00c      	b.n	8001392 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2205      	movs	r2, #5
 800137c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f022 0201 	bic.w	r2, r2, #1
 800138e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001390:	2300      	movs	r3, #0
}
 8001392:	4618      	mov	r0, r3
 8001394:	370c      	adds	r7, #12
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
	...

080013a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b089      	sub	sp, #36	; 0x24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013aa:	2300      	movs	r3, #0
 80013ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013ae:	2300      	movs	r3, #0
 80013b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013b2:	2300      	movs	r3, #0
 80013b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013b6:	2300      	movs	r3, #0
 80013b8:	61fb      	str	r3, [r7, #28]
 80013ba:	e16b      	b.n	8001694 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013bc:	2201      	movs	r2, #1
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	697a      	ldr	r2, [r7, #20]
 80013cc:	4013      	ands	r3, r2
 80013ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013d0:	693a      	ldr	r2, [r7, #16]
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	f040 815a 	bne.w	800168e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d00b      	beq.n	80013fa <HAL_GPIO_Init+0x5a>
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d007      	beq.n	80013fa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013ee:	2b11      	cmp	r3, #17
 80013f0:	d003      	beq.n	80013fa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	2b12      	cmp	r3, #18
 80013f8:	d130      	bne.n	800145c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	2203      	movs	r2, #3
 8001406:	fa02 f303 	lsl.w	r3, r2, r3
 800140a:	43db      	mvns	r3, r3
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	4013      	ands	r3, r2
 8001410:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	68da      	ldr	r2, [r3, #12]
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	fa02 f303 	lsl.w	r3, r2, r3
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	4313      	orrs	r3, r2
 8001422:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001430:	2201      	movs	r2, #1
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	43db      	mvns	r3, r3
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	4013      	ands	r3, r2
 800143e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	091b      	lsrs	r3, r3, #4
 8001446:	f003 0201 	and.w	r2, r3, #1
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	4313      	orrs	r3, r2
 8001454:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	2203      	movs	r2, #3
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	43db      	mvns	r3, r3
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	4013      	ands	r3, r2
 8001472:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	689a      	ldr	r2, [r3, #8]
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	4313      	orrs	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	2b02      	cmp	r3, #2
 8001492:	d003      	beq.n	800149c <HAL_GPIO_Init+0xfc>
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	2b12      	cmp	r3, #18
 800149a:	d123      	bne.n	80014e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	08da      	lsrs	r2, r3, #3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	3208      	adds	r2, #8
 80014a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	f003 0307 	and.w	r3, r3, #7
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	220f      	movs	r2, #15
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	43db      	mvns	r3, r3
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	4013      	ands	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	691a      	ldr	r2, [r3, #16]
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	f003 0307 	and.w	r3, r3, #7
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	08da      	lsrs	r2, r3, #3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	3208      	adds	r2, #8
 80014de:	69b9      	ldr	r1, [r7, #24]
 80014e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	2203      	movs	r2, #3
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	43db      	mvns	r3, r3
 80014f6:	69ba      	ldr	r2, [r7, #24]
 80014f8:	4013      	ands	r3, r2
 80014fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f003 0203 	and.w	r2, r3, #3
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	4313      	orrs	r3, r2
 8001510:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001520:	2b00      	cmp	r3, #0
 8001522:	f000 80b4 	beq.w	800168e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	60fb      	str	r3, [r7, #12]
 800152a:	4b5f      	ldr	r3, [pc, #380]	; (80016a8 <HAL_GPIO_Init+0x308>)
 800152c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152e:	4a5e      	ldr	r2, [pc, #376]	; (80016a8 <HAL_GPIO_Init+0x308>)
 8001530:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001534:	6453      	str	r3, [r2, #68]	; 0x44
 8001536:	4b5c      	ldr	r3, [pc, #368]	; (80016a8 <HAL_GPIO_Init+0x308>)
 8001538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001542:	4a5a      	ldr	r2, [pc, #360]	; (80016ac <HAL_GPIO_Init+0x30c>)
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	089b      	lsrs	r3, r3, #2
 8001548:	3302      	adds	r3, #2
 800154a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800154e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	f003 0303 	and.w	r3, r3, #3
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	220f      	movs	r2, #15
 800155a:	fa02 f303 	lsl.w	r3, r2, r3
 800155e:	43db      	mvns	r3, r3
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	4013      	ands	r3, r2
 8001564:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a51      	ldr	r2, [pc, #324]	; (80016b0 <HAL_GPIO_Init+0x310>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d02b      	beq.n	80015c6 <HAL_GPIO_Init+0x226>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a50      	ldr	r2, [pc, #320]	; (80016b4 <HAL_GPIO_Init+0x314>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d025      	beq.n	80015c2 <HAL_GPIO_Init+0x222>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a4f      	ldr	r2, [pc, #316]	; (80016b8 <HAL_GPIO_Init+0x318>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d01f      	beq.n	80015be <HAL_GPIO_Init+0x21e>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a4e      	ldr	r2, [pc, #312]	; (80016bc <HAL_GPIO_Init+0x31c>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d019      	beq.n	80015ba <HAL_GPIO_Init+0x21a>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a4d      	ldr	r2, [pc, #308]	; (80016c0 <HAL_GPIO_Init+0x320>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d013      	beq.n	80015b6 <HAL_GPIO_Init+0x216>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a4c      	ldr	r2, [pc, #304]	; (80016c4 <HAL_GPIO_Init+0x324>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d00d      	beq.n	80015b2 <HAL_GPIO_Init+0x212>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a4b      	ldr	r2, [pc, #300]	; (80016c8 <HAL_GPIO_Init+0x328>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d007      	beq.n	80015ae <HAL_GPIO_Init+0x20e>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4a4a      	ldr	r2, [pc, #296]	; (80016cc <HAL_GPIO_Init+0x32c>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d101      	bne.n	80015aa <HAL_GPIO_Init+0x20a>
 80015a6:	2307      	movs	r3, #7
 80015a8:	e00e      	b.n	80015c8 <HAL_GPIO_Init+0x228>
 80015aa:	2308      	movs	r3, #8
 80015ac:	e00c      	b.n	80015c8 <HAL_GPIO_Init+0x228>
 80015ae:	2306      	movs	r3, #6
 80015b0:	e00a      	b.n	80015c8 <HAL_GPIO_Init+0x228>
 80015b2:	2305      	movs	r3, #5
 80015b4:	e008      	b.n	80015c8 <HAL_GPIO_Init+0x228>
 80015b6:	2304      	movs	r3, #4
 80015b8:	e006      	b.n	80015c8 <HAL_GPIO_Init+0x228>
 80015ba:	2303      	movs	r3, #3
 80015bc:	e004      	b.n	80015c8 <HAL_GPIO_Init+0x228>
 80015be:	2302      	movs	r3, #2
 80015c0:	e002      	b.n	80015c8 <HAL_GPIO_Init+0x228>
 80015c2:	2301      	movs	r3, #1
 80015c4:	e000      	b.n	80015c8 <HAL_GPIO_Init+0x228>
 80015c6:	2300      	movs	r3, #0
 80015c8:	69fa      	ldr	r2, [r7, #28]
 80015ca:	f002 0203 	and.w	r2, r2, #3
 80015ce:	0092      	lsls	r2, r2, #2
 80015d0:	4093      	lsls	r3, r2
 80015d2:	69ba      	ldr	r2, [r7, #24]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015d8:	4934      	ldr	r1, [pc, #208]	; (80016ac <HAL_GPIO_Init+0x30c>)
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	089b      	lsrs	r3, r3, #2
 80015de:	3302      	adds	r3, #2
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015e6:	4b3a      	ldr	r3, [pc, #232]	; (80016d0 <HAL_GPIO_Init+0x330>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	43db      	mvns	r3, r3
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	4013      	ands	r3, r2
 80015f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d003      	beq.n	800160a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001602:	69ba      	ldr	r2, [r7, #24]
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	4313      	orrs	r3, r2
 8001608:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800160a:	4a31      	ldr	r2, [pc, #196]	; (80016d0 <HAL_GPIO_Init+0x330>)
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001610:	4b2f      	ldr	r3, [pc, #188]	; (80016d0 <HAL_GPIO_Init+0x330>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	43db      	mvns	r3, r3
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	4013      	ands	r3, r2
 800161e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001628:	2b00      	cmp	r3, #0
 800162a:	d003      	beq.n	8001634 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	4313      	orrs	r3, r2
 8001632:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001634:	4a26      	ldr	r2, [pc, #152]	; (80016d0 <HAL_GPIO_Init+0x330>)
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800163a:	4b25      	ldr	r3, [pc, #148]	; (80016d0 <HAL_GPIO_Init+0x330>)
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	43db      	mvns	r3, r3
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	4013      	ands	r3, r2
 8001648:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d003      	beq.n	800165e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	4313      	orrs	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800165e:	4a1c      	ldr	r2, [pc, #112]	; (80016d0 <HAL_GPIO_Init+0x330>)
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001664:	4b1a      	ldr	r3, [pc, #104]	; (80016d0 <HAL_GPIO_Init+0x330>)
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	43db      	mvns	r3, r3
 800166e:	69ba      	ldr	r2, [r7, #24]
 8001670:	4013      	ands	r3, r2
 8001672:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d003      	beq.n	8001688 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	4313      	orrs	r3, r2
 8001686:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001688:	4a11      	ldr	r2, [pc, #68]	; (80016d0 <HAL_GPIO_Init+0x330>)
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	3301      	adds	r3, #1
 8001692:	61fb      	str	r3, [r7, #28]
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	2b0f      	cmp	r3, #15
 8001698:	f67f ae90 	bls.w	80013bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800169c:	bf00      	nop
 800169e:	3724      	adds	r7, #36	; 0x24
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr
 80016a8:	40023800 	.word	0x40023800
 80016ac:	40013800 	.word	0x40013800
 80016b0:	40020000 	.word	0x40020000
 80016b4:	40020400 	.word	0x40020400
 80016b8:	40020800 	.word	0x40020800
 80016bc:	40020c00 	.word	0x40020c00
 80016c0:	40021000 	.word	0x40021000
 80016c4:	40021400 	.word	0x40021400
 80016c8:	40021800 	.word	0x40021800
 80016cc:	40021c00 	.word	0x40021c00
 80016d0:	40013c00 	.word	0x40013c00

080016d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	460b      	mov	r3, r1
 80016de:	807b      	strh	r3, [r7, #2]
 80016e0:	4613      	mov	r3, r2
 80016e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016e4:	787b      	ldrb	r3, [r7, #1]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d003      	beq.n	80016f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016ea:	887a      	ldrh	r2, [r7, #2]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016f0:	e003      	b.n	80016fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016f2:	887b      	ldrh	r3, [r7, #2]
 80016f4:	041a      	lsls	r2, r3, #16
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	619a      	str	r2, [r3, #24]
}
 80016fa:	bf00      	nop
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr

08001706 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001706:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001708:	b08f      	sub	sp, #60	; 0x3c
 800170a:	af0a      	add	r7, sp, #40	; 0x28
 800170c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d101      	bne.n	8001718 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e054      	b.n	80017c2 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8001724:	b2db      	uxtb	r3, r3
 8001726:	2b00      	cmp	r3, #0
 8001728:	d106      	bne.n	8001738 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2200      	movs	r2, #0
 800172e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f006 fe8e 	bl	8008454 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2203      	movs	r2, #3
 800173c:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001748:	2b00      	cmp	r3, #0
 800174a:	d102      	bne.n	8001752 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2200      	movs	r2, #0
 8001750:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4618      	mov	r0, r3
 8001758:	f004 f84c 	bl	80057f4 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	603b      	str	r3, [r7, #0]
 8001762:	687e      	ldr	r6, [r7, #4]
 8001764:	466d      	mov	r5, sp
 8001766:	f106 0410 	add.w	r4, r6, #16
 800176a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800176c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800176e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001770:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001772:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001776:	e885 0003 	stmia.w	r5, {r0, r1}
 800177a:	1d33      	adds	r3, r6, #4
 800177c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800177e:	6838      	ldr	r0, [r7, #0]
 8001780:	f003 ffc6 	bl	8005710 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2101      	movs	r1, #1
 800178a:	4618      	mov	r0, r3
 800178c:	f004 f843 	bl	8005816 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	603b      	str	r3, [r7, #0]
 8001796:	687e      	ldr	r6, [r7, #4]
 8001798:	466d      	mov	r5, sp
 800179a:	f106 0410 	add.w	r4, r6, #16
 800179e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80017aa:	e885 0003 	stmia.w	r5, {r0, r1}
 80017ae:	1d33      	adds	r3, r6, #4
 80017b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017b2:	6838      	ldr	r0, [r7, #0]
 80017b4:	f004 f956 	bl	8005a64 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2201      	movs	r2, #1
 80017bc:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3714      	adds	r7, #20
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080017ca <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80017ca:	b590      	push	{r4, r7, lr}
 80017cc:	b089      	sub	sp, #36	; 0x24
 80017ce:	af04      	add	r7, sp, #16
 80017d0:	6078      	str	r0, [r7, #4]
 80017d2:	4608      	mov	r0, r1
 80017d4:	4611      	mov	r1, r2
 80017d6:	461a      	mov	r2, r3
 80017d8:	4603      	mov	r3, r0
 80017da:	70fb      	strb	r3, [r7, #3]
 80017dc:	460b      	mov	r3, r1
 80017de:	70bb      	strb	r3, [r7, #2]
 80017e0:	4613      	mov	r3, r2
 80017e2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d101      	bne.n	80017f2 <HAL_HCD_HC_Init+0x28>
 80017ee:	2302      	movs	r3, #2
 80017f0:	e07f      	b.n	80018f2 <HAL_HCD_HC_Init+0x128>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2201      	movs	r2, #1
 80017f6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 80017fa:	78fa      	ldrb	r2, [r7, #3]
 80017fc:	6879      	ldr	r1, [r7, #4]
 80017fe:	4613      	mov	r3, r2
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	4413      	add	r3, r2
 8001804:	00db      	lsls	r3, r3, #3
 8001806:	440b      	add	r3, r1
 8001808:	333d      	adds	r3, #61	; 0x3d
 800180a:	2200      	movs	r2, #0
 800180c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800180e:	78fa      	ldrb	r2, [r7, #3]
 8001810:	6879      	ldr	r1, [r7, #4]
 8001812:	4613      	mov	r3, r2
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	4413      	add	r3, r2
 8001818:	00db      	lsls	r3, r3, #3
 800181a:	440b      	add	r3, r1
 800181c:	3338      	adds	r3, #56	; 0x38
 800181e:	787a      	ldrb	r2, [r7, #1]
 8001820:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001822:	78fa      	ldrb	r2, [r7, #3]
 8001824:	6879      	ldr	r1, [r7, #4]
 8001826:	4613      	mov	r3, r2
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	4413      	add	r3, r2
 800182c:	00db      	lsls	r3, r3, #3
 800182e:	440b      	add	r3, r1
 8001830:	3340      	adds	r3, #64	; 0x40
 8001832:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001834:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001836:	78fa      	ldrb	r2, [r7, #3]
 8001838:	6879      	ldr	r1, [r7, #4]
 800183a:	4613      	mov	r3, r2
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	4413      	add	r3, r2
 8001840:	00db      	lsls	r3, r3, #3
 8001842:	440b      	add	r3, r1
 8001844:	3339      	adds	r3, #57	; 0x39
 8001846:	78fa      	ldrb	r2, [r7, #3]
 8001848:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800184a:	78fa      	ldrb	r2, [r7, #3]
 800184c:	6879      	ldr	r1, [r7, #4]
 800184e:	4613      	mov	r3, r2
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	4413      	add	r3, r2
 8001854:	00db      	lsls	r3, r3, #3
 8001856:	440b      	add	r3, r1
 8001858:	333f      	adds	r3, #63	; 0x3f
 800185a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800185e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001860:	78fa      	ldrb	r2, [r7, #3]
 8001862:	78bb      	ldrb	r3, [r7, #2]
 8001864:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001868:	b2d8      	uxtb	r0, r3
 800186a:	6879      	ldr	r1, [r7, #4]
 800186c:	4613      	mov	r3, r2
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	4413      	add	r3, r2
 8001872:	00db      	lsls	r3, r3, #3
 8001874:	440b      	add	r3, r1
 8001876:	333a      	adds	r3, #58	; 0x3a
 8001878:	4602      	mov	r2, r0
 800187a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800187c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001880:	2b00      	cmp	r3, #0
 8001882:	da0a      	bge.n	800189a <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001884:	78fa      	ldrb	r2, [r7, #3]
 8001886:	6879      	ldr	r1, [r7, #4]
 8001888:	4613      	mov	r3, r2
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	4413      	add	r3, r2
 800188e:	00db      	lsls	r3, r3, #3
 8001890:	440b      	add	r3, r1
 8001892:	333b      	adds	r3, #59	; 0x3b
 8001894:	2201      	movs	r2, #1
 8001896:	701a      	strb	r2, [r3, #0]
 8001898:	e009      	b.n	80018ae <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800189a:	78fa      	ldrb	r2, [r7, #3]
 800189c:	6879      	ldr	r1, [r7, #4]
 800189e:	4613      	mov	r3, r2
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	4413      	add	r3, r2
 80018a4:	00db      	lsls	r3, r3, #3
 80018a6:	440b      	add	r3, r1
 80018a8:	333b      	adds	r3, #59	; 0x3b
 80018aa:	2200      	movs	r2, #0
 80018ac:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80018ae:	78fa      	ldrb	r2, [r7, #3]
 80018b0:	6879      	ldr	r1, [r7, #4]
 80018b2:	4613      	mov	r3, r2
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	4413      	add	r3, r2
 80018b8:	00db      	lsls	r3, r3, #3
 80018ba:	440b      	add	r3, r1
 80018bc:	333c      	adds	r3, #60	; 0x3c
 80018be:	f897 2020 	ldrb.w	r2, [r7, #32]
 80018c2:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6818      	ldr	r0, [r3, #0]
 80018c8:	787c      	ldrb	r4, [r7, #1]
 80018ca:	78ba      	ldrb	r2, [r7, #2]
 80018cc:	78f9      	ldrb	r1, [r7, #3]
 80018ce:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80018d0:	9302      	str	r3, [sp, #8]
 80018d2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80018d6:	9301      	str	r3, [sp, #4]
 80018d8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80018dc:	9300      	str	r3, [sp, #0]
 80018de:	4623      	mov	r3, r4
 80018e0:	f004 fa42 	bl	8005d68 <USB_HC_Init>
 80018e4:	4603      	mov	r3, r0
 80018e6:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2200      	movs	r2, #0
 80018ec:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80018f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3714      	adds	r7, #20
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd90      	pop	{r4, r7, pc}

080018fa <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b084      	sub	sp, #16
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
 8001902:	460b      	mov	r3, r1
 8001904:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001906:	2300      	movs	r3, #0
 8001908:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001910:	2b01      	cmp	r3, #1
 8001912:	d101      	bne.n	8001918 <HAL_HCD_HC_Halt+0x1e>
 8001914:	2302      	movs	r3, #2
 8001916:	e00f      	b.n	8001938 <HAL_HCD_HC_Halt+0x3e>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2201      	movs	r2, #1
 800191c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	78fa      	ldrb	r2, [r7, #3]
 8001926:	4611      	mov	r1, r2
 8001928:	4618      	mov	r0, r3
 800192a:	f004 fc7c 	bl	8006226 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2200      	movs	r2, #0
 8001932:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001936:	7bfb      	ldrb	r3, [r7, #15]
}
 8001938:	4618      	mov	r0, r3
 800193a:	3710      	adds	r7, #16
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}

08001940 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	4608      	mov	r0, r1
 800194a:	4611      	mov	r1, r2
 800194c:	461a      	mov	r2, r3
 800194e:	4603      	mov	r3, r0
 8001950:	70fb      	strb	r3, [r7, #3]
 8001952:	460b      	mov	r3, r1
 8001954:	70bb      	strb	r3, [r7, #2]
 8001956:	4613      	mov	r3, r2
 8001958:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800195a:	78fa      	ldrb	r2, [r7, #3]
 800195c:	6879      	ldr	r1, [r7, #4]
 800195e:	4613      	mov	r3, r2
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	4413      	add	r3, r2
 8001964:	00db      	lsls	r3, r3, #3
 8001966:	440b      	add	r3, r1
 8001968:	333b      	adds	r3, #59	; 0x3b
 800196a:	78ba      	ldrb	r2, [r7, #2]
 800196c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800196e:	78fa      	ldrb	r2, [r7, #3]
 8001970:	6879      	ldr	r1, [r7, #4]
 8001972:	4613      	mov	r3, r2
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	4413      	add	r3, r2
 8001978:	00db      	lsls	r3, r3, #3
 800197a:	440b      	add	r3, r1
 800197c:	333f      	adds	r3, #63	; 0x3f
 800197e:	787a      	ldrb	r2, [r7, #1]
 8001980:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001982:	7c3b      	ldrb	r3, [r7, #16]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d114      	bne.n	80019b2 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001988:	78fa      	ldrb	r2, [r7, #3]
 800198a:	6879      	ldr	r1, [r7, #4]
 800198c:	4613      	mov	r3, r2
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	4413      	add	r3, r2
 8001992:	00db      	lsls	r3, r3, #3
 8001994:	440b      	add	r3, r1
 8001996:	3342      	adds	r3, #66	; 0x42
 8001998:	2203      	movs	r2, #3
 800199a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800199c:	78fa      	ldrb	r2, [r7, #3]
 800199e:	6879      	ldr	r1, [r7, #4]
 80019a0:	4613      	mov	r3, r2
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	4413      	add	r3, r2
 80019a6:	00db      	lsls	r3, r3, #3
 80019a8:	440b      	add	r3, r1
 80019aa:	333d      	adds	r3, #61	; 0x3d
 80019ac:	7f3a      	ldrb	r2, [r7, #28]
 80019ae:	701a      	strb	r2, [r3, #0]
 80019b0:	e009      	b.n	80019c6 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019b2:	78fa      	ldrb	r2, [r7, #3]
 80019b4:	6879      	ldr	r1, [r7, #4]
 80019b6:	4613      	mov	r3, r2
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	4413      	add	r3, r2
 80019bc:	00db      	lsls	r3, r3, #3
 80019be:	440b      	add	r3, r1
 80019c0:	3342      	adds	r3, #66	; 0x42
 80019c2:	2202      	movs	r2, #2
 80019c4:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80019c6:	787b      	ldrb	r3, [r7, #1]
 80019c8:	2b03      	cmp	r3, #3
 80019ca:	f200 80d6 	bhi.w	8001b7a <HAL_HCD_HC_SubmitRequest+0x23a>
 80019ce:	a201      	add	r2, pc, #4	; (adr r2, 80019d4 <HAL_HCD_HC_SubmitRequest+0x94>)
 80019d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019d4:	080019e5 	.word	0x080019e5
 80019d8:	08001b65 	.word	0x08001b65
 80019dc:	08001a51 	.word	0x08001a51
 80019e0:	08001adb 	.word	0x08001adb
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80019e4:	7c3b      	ldrb	r3, [r7, #16]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	f040 80c9 	bne.w	8001b7e <HAL_HCD_HC_SubmitRequest+0x23e>
 80019ec:	78bb      	ldrb	r3, [r7, #2]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	f040 80c5 	bne.w	8001b7e <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 80019f4:	8b3b      	ldrh	r3, [r7, #24]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d109      	bne.n	8001a0e <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80019fa:	78fa      	ldrb	r2, [r7, #3]
 80019fc:	6879      	ldr	r1, [r7, #4]
 80019fe:	4613      	mov	r3, r2
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	4413      	add	r3, r2
 8001a04:	00db      	lsls	r3, r3, #3
 8001a06:	440b      	add	r3, r1
 8001a08:	3351      	adds	r3, #81	; 0x51
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001a0e:	78fa      	ldrb	r2, [r7, #3]
 8001a10:	6879      	ldr	r1, [r7, #4]
 8001a12:	4613      	mov	r3, r2
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	4413      	add	r3, r2
 8001a18:	00db      	lsls	r3, r3, #3
 8001a1a:	440b      	add	r3, r1
 8001a1c:	3351      	adds	r3, #81	; 0x51
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d10a      	bne.n	8001a3a <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a24:	78fa      	ldrb	r2, [r7, #3]
 8001a26:	6879      	ldr	r1, [r7, #4]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	4413      	add	r3, r2
 8001a2e:	00db      	lsls	r3, r3, #3
 8001a30:	440b      	add	r3, r1
 8001a32:	3342      	adds	r3, #66	; 0x42
 8001a34:	2200      	movs	r2, #0
 8001a36:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001a38:	e0a1      	b.n	8001b7e <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a3a:	78fa      	ldrb	r2, [r7, #3]
 8001a3c:	6879      	ldr	r1, [r7, #4]
 8001a3e:	4613      	mov	r3, r2
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	4413      	add	r3, r2
 8001a44:	00db      	lsls	r3, r3, #3
 8001a46:	440b      	add	r3, r1
 8001a48:	3342      	adds	r3, #66	; 0x42
 8001a4a:	2202      	movs	r2, #2
 8001a4c:	701a      	strb	r2, [r3, #0]
      break;
 8001a4e:	e096      	b.n	8001b7e <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001a50:	78bb      	ldrb	r3, [r7, #2]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d120      	bne.n	8001a98 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001a56:	78fa      	ldrb	r2, [r7, #3]
 8001a58:	6879      	ldr	r1, [r7, #4]
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	4413      	add	r3, r2
 8001a60:	00db      	lsls	r3, r3, #3
 8001a62:	440b      	add	r3, r1
 8001a64:	3351      	adds	r3, #81	; 0x51
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d10a      	bne.n	8001a82 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a6c:	78fa      	ldrb	r2, [r7, #3]
 8001a6e:	6879      	ldr	r1, [r7, #4]
 8001a70:	4613      	mov	r3, r2
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	4413      	add	r3, r2
 8001a76:	00db      	lsls	r3, r3, #3
 8001a78:	440b      	add	r3, r1
 8001a7a:	3342      	adds	r3, #66	; 0x42
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001a80:	e07e      	b.n	8001b80 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a82:	78fa      	ldrb	r2, [r7, #3]
 8001a84:	6879      	ldr	r1, [r7, #4]
 8001a86:	4613      	mov	r3, r2
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	4413      	add	r3, r2
 8001a8c:	00db      	lsls	r3, r3, #3
 8001a8e:	440b      	add	r3, r1
 8001a90:	3342      	adds	r3, #66	; 0x42
 8001a92:	2202      	movs	r2, #2
 8001a94:	701a      	strb	r2, [r3, #0]
      break;
 8001a96:	e073      	b.n	8001b80 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001a98:	78fa      	ldrb	r2, [r7, #3]
 8001a9a:	6879      	ldr	r1, [r7, #4]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	4413      	add	r3, r2
 8001aa2:	00db      	lsls	r3, r3, #3
 8001aa4:	440b      	add	r3, r1
 8001aa6:	3350      	adds	r3, #80	; 0x50
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d10a      	bne.n	8001ac4 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001aae:	78fa      	ldrb	r2, [r7, #3]
 8001ab0:	6879      	ldr	r1, [r7, #4]
 8001ab2:	4613      	mov	r3, r2
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	4413      	add	r3, r2
 8001ab8:	00db      	lsls	r3, r3, #3
 8001aba:	440b      	add	r3, r1
 8001abc:	3342      	adds	r3, #66	; 0x42
 8001abe:	2200      	movs	r2, #0
 8001ac0:	701a      	strb	r2, [r3, #0]
      break;
 8001ac2:	e05d      	b.n	8001b80 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ac4:	78fa      	ldrb	r2, [r7, #3]
 8001ac6:	6879      	ldr	r1, [r7, #4]
 8001ac8:	4613      	mov	r3, r2
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	4413      	add	r3, r2
 8001ace:	00db      	lsls	r3, r3, #3
 8001ad0:	440b      	add	r3, r1
 8001ad2:	3342      	adds	r3, #66	; 0x42
 8001ad4:	2202      	movs	r2, #2
 8001ad6:	701a      	strb	r2, [r3, #0]
      break;
 8001ad8:	e052      	b.n	8001b80 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001ada:	78bb      	ldrb	r3, [r7, #2]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d120      	bne.n	8001b22 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001ae0:	78fa      	ldrb	r2, [r7, #3]
 8001ae2:	6879      	ldr	r1, [r7, #4]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	4413      	add	r3, r2
 8001aea:	00db      	lsls	r3, r3, #3
 8001aec:	440b      	add	r3, r1
 8001aee:	3351      	adds	r3, #81	; 0x51
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d10a      	bne.n	8001b0c <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001af6:	78fa      	ldrb	r2, [r7, #3]
 8001af8:	6879      	ldr	r1, [r7, #4]
 8001afa:	4613      	mov	r3, r2
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	4413      	add	r3, r2
 8001b00:	00db      	lsls	r3, r3, #3
 8001b02:	440b      	add	r3, r1
 8001b04:	3342      	adds	r3, #66	; 0x42
 8001b06:	2200      	movs	r2, #0
 8001b08:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001b0a:	e039      	b.n	8001b80 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b0c:	78fa      	ldrb	r2, [r7, #3]
 8001b0e:	6879      	ldr	r1, [r7, #4]
 8001b10:	4613      	mov	r3, r2
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	4413      	add	r3, r2
 8001b16:	00db      	lsls	r3, r3, #3
 8001b18:	440b      	add	r3, r1
 8001b1a:	3342      	adds	r3, #66	; 0x42
 8001b1c:	2202      	movs	r2, #2
 8001b1e:	701a      	strb	r2, [r3, #0]
      break;
 8001b20:	e02e      	b.n	8001b80 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001b22:	78fa      	ldrb	r2, [r7, #3]
 8001b24:	6879      	ldr	r1, [r7, #4]
 8001b26:	4613      	mov	r3, r2
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	4413      	add	r3, r2
 8001b2c:	00db      	lsls	r3, r3, #3
 8001b2e:	440b      	add	r3, r1
 8001b30:	3350      	adds	r3, #80	; 0x50
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d10a      	bne.n	8001b4e <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b38:	78fa      	ldrb	r2, [r7, #3]
 8001b3a:	6879      	ldr	r1, [r7, #4]
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	4413      	add	r3, r2
 8001b42:	00db      	lsls	r3, r3, #3
 8001b44:	440b      	add	r3, r1
 8001b46:	3342      	adds	r3, #66	; 0x42
 8001b48:	2200      	movs	r2, #0
 8001b4a:	701a      	strb	r2, [r3, #0]
      break;
 8001b4c:	e018      	b.n	8001b80 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b4e:	78fa      	ldrb	r2, [r7, #3]
 8001b50:	6879      	ldr	r1, [r7, #4]
 8001b52:	4613      	mov	r3, r2
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	4413      	add	r3, r2
 8001b58:	00db      	lsls	r3, r3, #3
 8001b5a:	440b      	add	r3, r1
 8001b5c:	3342      	adds	r3, #66	; 0x42
 8001b5e:	2202      	movs	r2, #2
 8001b60:	701a      	strb	r2, [r3, #0]
      break;
 8001b62:	e00d      	b.n	8001b80 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b64:	78fa      	ldrb	r2, [r7, #3]
 8001b66:	6879      	ldr	r1, [r7, #4]
 8001b68:	4613      	mov	r3, r2
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	4413      	add	r3, r2
 8001b6e:	00db      	lsls	r3, r3, #3
 8001b70:	440b      	add	r3, r1
 8001b72:	3342      	adds	r3, #66	; 0x42
 8001b74:	2200      	movs	r2, #0
 8001b76:	701a      	strb	r2, [r3, #0]
      break;
 8001b78:	e002      	b.n	8001b80 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8001b7a:	bf00      	nop
 8001b7c:	e000      	b.n	8001b80 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8001b7e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001b80:	78fa      	ldrb	r2, [r7, #3]
 8001b82:	6879      	ldr	r1, [r7, #4]
 8001b84:	4613      	mov	r3, r2
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	4413      	add	r3, r2
 8001b8a:	00db      	lsls	r3, r3, #3
 8001b8c:	440b      	add	r3, r1
 8001b8e:	3344      	adds	r3, #68	; 0x44
 8001b90:	697a      	ldr	r2, [r7, #20]
 8001b92:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001b94:	78fa      	ldrb	r2, [r7, #3]
 8001b96:	8b39      	ldrh	r1, [r7, #24]
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	4613      	mov	r3, r2
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	4413      	add	r3, r2
 8001ba0:	00db      	lsls	r3, r3, #3
 8001ba2:	4403      	add	r3, r0
 8001ba4:	3348      	adds	r3, #72	; 0x48
 8001ba6:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001ba8:	78fa      	ldrb	r2, [r7, #3]
 8001baa:	6879      	ldr	r1, [r7, #4]
 8001bac:	4613      	mov	r3, r2
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	4413      	add	r3, r2
 8001bb2:	00db      	lsls	r3, r3, #3
 8001bb4:	440b      	add	r3, r1
 8001bb6:	335c      	adds	r3, #92	; 0x5c
 8001bb8:	2200      	movs	r2, #0
 8001bba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001bbc:	78fa      	ldrb	r2, [r7, #3]
 8001bbe:	6879      	ldr	r1, [r7, #4]
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	4413      	add	r3, r2
 8001bc6:	00db      	lsls	r3, r3, #3
 8001bc8:	440b      	add	r3, r1
 8001bca:	334c      	adds	r3, #76	; 0x4c
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001bd0:	78fa      	ldrb	r2, [r7, #3]
 8001bd2:	6879      	ldr	r1, [r7, #4]
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	4413      	add	r3, r2
 8001bda:	00db      	lsls	r3, r3, #3
 8001bdc:	440b      	add	r3, r1
 8001bde:	3339      	adds	r3, #57	; 0x39
 8001be0:	78fa      	ldrb	r2, [r7, #3]
 8001be2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001be4:	78fa      	ldrb	r2, [r7, #3]
 8001be6:	6879      	ldr	r1, [r7, #4]
 8001be8:	4613      	mov	r3, r2
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	4413      	add	r3, r2
 8001bee:	00db      	lsls	r3, r3, #3
 8001bf0:	440b      	add	r3, r1
 8001bf2:	335d      	adds	r3, #93	; 0x5d
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6818      	ldr	r0, [r3, #0]
 8001bfc:	78fa      	ldrb	r2, [r7, #3]
 8001bfe:	4613      	mov	r3, r2
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	4413      	add	r3, r2
 8001c04:	00db      	lsls	r3, r3, #3
 8001c06:	3338      	adds	r3, #56	; 0x38
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	18d1      	adds	r1, r2, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	691b      	ldr	r3, [r3, #16]
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	461a      	mov	r2, r3
 8001c14:	f004 f9b2 	bl	8005f7c <USB_HC_StartXfer>
 8001c18:	4603      	mov	r3, r0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop

08001c24 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b086      	sub	sp, #24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f003 fecf 	bl	80059de <USB_GetMode>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	f040 80ef 	bne.w	8001e26 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f003 feb3 	bl	80059b8 <USB_ReadInterrupts>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	f000 80e5 	beq.w	8001e24 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f003 feaa 	bl	80059b8 <USB_ReadInterrupts>
 8001c64:	4603      	mov	r3, r0
 8001c66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c6a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001c6e:	d104      	bne.n	8001c7a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001c78:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f003 fe9a 	bl	80059b8 <USB_ReadInterrupts>
 8001c84:	4603      	mov	r3, r0
 8001c86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c8e:	d104      	bne.n	8001c9a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001c98:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f003 fe8a 	bl	80059b8 <USB_ReadInterrupts>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001caa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001cae:	d104      	bne.n	8001cba <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001cb8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f003 fe7a 	bl	80059b8 <USB_ReadInterrupts>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d103      	bne.n	8001cd6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2202      	movs	r2, #2
 8001cd4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f003 fe6c 	bl	80059b8 <USB_ReadInterrupts>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ce6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001cea:	d115      	bne.n	8001d18 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001cf4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0301 	and.w	r3, r3, #1
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d108      	bne.n	8001d18 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f006 fc1a 	bl	8008540 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2101      	movs	r1, #1
 8001d12:	4618      	mov	r0, r3
 8001d14:	f003 ff62 	bl	8005bdc <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f003 fe4b 	bl	80059b8 <USB_ReadInterrupts>
 8001d22:	4603      	mov	r3, r0
 8001d24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d2c:	d102      	bne.n	8001d34 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f001 f966 	bl	8003000 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f003 fe3d 	bl	80059b8 <USB_ReadInterrupts>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	f003 0308 	and.w	r3, r3, #8
 8001d44:	2b08      	cmp	r3, #8
 8001d46:	d106      	bne.n	8001d56 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f006 fbdd 	bl	8008508 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	2208      	movs	r2, #8
 8001d54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f003 fe2c 	bl	80059b8 <USB_ReadInterrupts>
 8001d60:	4603      	mov	r3, r0
 8001d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001d6a:	d138      	bne.n	8001dde <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f004 fa47 	bl	8006204 <USB_HC_ReadInterrupt>
 8001d76:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001d78:	2300      	movs	r3, #0
 8001d7a:	617b      	str	r3, [r7, #20]
 8001d7c:	e025      	b.n	8001dca <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	f003 030f 	and.w	r3, r3, #15
 8001d84:	68ba      	ldr	r2, [r7, #8]
 8001d86:	fa22 f303 	lsr.w	r3, r2, r3
 8001d8a:	f003 0301 	and.w	r3, r3, #1
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d018      	beq.n	8001dc4 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	015a      	lsls	r2, r3, #5
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	4413      	add	r3, r2
 8001d9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001da4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001da8:	d106      	bne.n	8001db8 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	4619      	mov	r1, r3
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f000 f8cf 	bl	8001f54 <HCD_HC_IN_IRQHandler>
 8001db6:	e005      	b.n	8001dc4 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f000 fcfd 	bl	80027be <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	617b      	str	r3, [r7, #20]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	697a      	ldr	r2, [r7, #20]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d3d4      	bcc.n	8001d7e <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ddc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f003 fde8 	bl	80059b8 <USB_ReadInterrupts>
 8001de8:	4603      	mov	r3, r0
 8001dea:	f003 0310 	and.w	r3, r3, #16
 8001dee:	2b10      	cmp	r3, #16
 8001df0:	d101      	bne.n	8001df6 <HAL_HCD_IRQHandler+0x1d2>
 8001df2:	2301      	movs	r3, #1
 8001df4:	e000      	b.n	8001df8 <HAL_HCD_IRQHandler+0x1d4>
 8001df6:	2300      	movs	r3, #0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d014      	beq.n	8001e26 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	699a      	ldr	r2, [r3, #24]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f022 0210 	bic.w	r2, r2, #16
 8001e0a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f001 f84b 	bl	8002ea8 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	699a      	ldr	r2, [r3, #24]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f042 0210 	orr.w	r2, r2, #16
 8001e20:	619a      	str	r2, [r3, #24]
 8001e22:	e000      	b.n	8001e26 <HAL_HCD_IRQHandler+0x202>
      return;
 8001e24:	bf00      	nop
    }
  }
}
 8001e26:	3718      	adds	r7, #24
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d101      	bne.n	8001e42 <HAL_HCD_Start+0x16>
 8001e3e:	2302      	movs	r3, #2
 8001e40:	e013      	b.n	8001e6a <HAL_HCD_Start+0x3e>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2201      	movs	r2, #1
 8001e46:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f003 fcbf 	bl	80057d2 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2101      	movs	r1, #1
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f003 ff22 	bl	8005ca4 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b082      	sub	sp, #8
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d101      	bne.n	8001e88 <HAL_HCD_Stop+0x16>
 8001e84:	2302      	movs	r3, #2
 8001e86:	e00d      	b.n	8001ea4 <HAL_HCD_Stop+0x32>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f004 fb01 	bl	800649c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8001ea2:	2300      	movs	r3, #0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3708      	adds	r7, #8
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f003 fec9 	bl	8005c50 <USB_ResetPort>
 8001ebe:	4603      	mov	r3, r0
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3708      	adds	r7, #8
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001ed4:	78fa      	ldrb	r2, [r7, #3]
 8001ed6:	6879      	ldr	r1, [r7, #4]
 8001ed8:	4613      	mov	r3, r2
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	4413      	add	r3, r2
 8001ede:	00db      	lsls	r3, r3, #3
 8001ee0:	440b      	add	r3, r1
 8001ee2:	335c      	adds	r3, #92	; 0x5c
 8001ee4:	781b      	ldrb	r3, [r3, #0]
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr

08001ef2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	b083      	sub	sp, #12
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
 8001efa:	460b      	mov	r3, r1
 8001efc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001efe:	78fa      	ldrb	r2, [r7, #3]
 8001f00:	6879      	ldr	r1, [r7, #4]
 8001f02:	4613      	mov	r3, r2
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	4413      	add	r3, r2
 8001f08:	00db      	lsls	r3, r3, #3
 8001f0a:	440b      	add	r3, r1
 8001f0c:	334c      	adds	r3, #76	; 0x4c
 8001f0e:	681b      	ldr	r3, [r3, #0]
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f003 ff0b 	bl	8005d44 <USB_GetCurrentFrame>
 8001f2e:	4603      	mov	r3, r0
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3708      	adds	r7, #8
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f003 fee6 	bl	8005d16 <USB_GetHostSpeed>
 8001f4a:	4603      	mov	r3, r0
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3708      	adds	r7, #8
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b086      	sub	sp, #24
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001f6a:	78fb      	ldrb	r3, [r7, #3]
 8001f6c:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	015a      	lsls	r2, r3, #5
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	4413      	add	r3, r2
 8001f76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	f003 0304 	and.w	r3, r3, #4
 8001f80:	2b04      	cmp	r3, #4
 8001f82:	d119      	bne.n	8001fb8 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	015a      	lsls	r2, r3, #5
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f90:	461a      	mov	r2, r3
 8001f92:	2304      	movs	r3, #4
 8001f94:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	015a      	lsls	r2, r3, #5
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	68fa      	ldr	r2, [r7, #12]
 8001fa6:	0151      	lsls	r1, r2, #5
 8001fa8:	693a      	ldr	r2, [r7, #16]
 8001faa:	440a      	add	r2, r1
 8001fac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fb0:	f043 0302 	orr.w	r3, r3, #2
 8001fb4:	60d3      	str	r3, [r2, #12]
 8001fb6:	e0ce      	b.n	8002156 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	015a      	lsls	r2, r3, #5
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fce:	d12c      	bne.n	800202a <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	015a      	lsls	r2, r3, #5
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fdc:	461a      	mov	r2, r3
 8001fde:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fe2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001fe4:	6879      	ldr	r1, [r7, #4]
 8001fe6:	68fa      	ldr	r2, [r7, #12]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	4413      	add	r3, r2
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	440b      	add	r3, r1
 8001ff2:	335d      	adds	r3, #93	; 0x5d
 8001ff4:	2207      	movs	r2, #7
 8001ff6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	015a      	lsls	r2, r3, #5
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	4413      	add	r3, r2
 8002000:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	68fa      	ldr	r2, [r7, #12]
 8002008:	0151      	lsls	r1, r2, #5
 800200a:	693a      	ldr	r2, [r7, #16]
 800200c:	440a      	add	r2, r1
 800200e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002012:	f043 0302 	orr.w	r3, r3, #2
 8002016:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	68fa      	ldr	r2, [r7, #12]
 800201e:	b2d2      	uxtb	r2, r2
 8002020:	4611      	mov	r1, r2
 8002022:	4618      	mov	r0, r3
 8002024:	f004 f8ff 	bl	8006226 <USB_HC_Halt>
 8002028:	e095      	b.n	8002156 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	015a      	lsls	r2, r3, #5
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	4413      	add	r3, r2
 8002032:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	f003 0320 	and.w	r3, r3, #32
 800203c:	2b20      	cmp	r3, #32
 800203e:	d109      	bne.n	8002054 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	015a      	lsls	r2, r3, #5
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	4413      	add	r3, r2
 8002048:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800204c:	461a      	mov	r2, r3
 800204e:	2320      	movs	r3, #32
 8002050:	6093      	str	r3, [r2, #8]
 8002052:	e080      	b.n	8002156 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	015a      	lsls	r2, r3, #5
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	4413      	add	r3, r2
 800205c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	f003 0308 	and.w	r3, r3, #8
 8002066:	2b08      	cmp	r3, #8
 8002068:	d134      	bne.n	80020d4 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	015a      	lsls	r2, r3, #5
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	4413      	add	r3, r2
 8002072:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	68fa      	ldr	r2, [r7, #12]
 800207a:	0151      	lsls	r1, r2, #5
 800207c:	693a      	ldr	r2, [r7, #16]
 800207e:	440a      	add	r2, r1
 8002080:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002084:	f043 0302 	orr.w	r3, r3, #2
 8002088:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800208a:	6879      	ldr	r1, [r7, #4]
 800208c:	68fa      	ldr	r2, [r7, #12]
 800208e:	4613      	mov	r3, r2
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	4413      	add	r3, r2
 8002094:	00db      	lsls	r3, r3, #3
 8002096:	440b      	add	r3, r1
 8002098:	335d      	adds	r3, #93	; 0x5d
 800209a:	2205      	movs	r2, #5
 800209c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	015a      	lsls	r2, r3, #5
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	4413      	add	r3, r2
 80020a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020aa:	461a      	mov	r2, r3
 80020ac:	2310      	movs	r3, #16
 80020ae:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	015a      	lsls	r2, r3, #5
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	4413      	add	r3, r2
 80020b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020bc:	461a      	mov	r2, r3
 80020be:	2308      	movs	r3, #8
 80020c0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	68fa      	ldr	r2, [r7, #12]
 80020c8:	b2d2      	uxtb	r2, r2
 80020ca:	4611      	mov	r1, r2
 80020cc:	4618      	mov	r0, r3
 80020ce:	f004 f8aa 	bl	8006226 <USB_HC_Halt>
 80020d2:	e040      	b.n	8002156 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	015a      	lsls	r2, r3, #5
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	4413      	add	r3, r2
 80020dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020ea:	d134      	bne.n	8002156 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	015a      	lsls	r2, r3, #5
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	4413      	add	r3, r2
 80020f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	68fa      	ldr	r2, [r7, #12]
 80020fc:	0151      	lsls	r1, r2, #5
 80020fe:	693a      	ldr	r2, [r7, #16]
 8002100:	440a      	add	r2, r1
 8002102:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002106:	f043 0302 	orr.w	r3, r3, #2
 800210a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	68fa      	ldr	r2, [r7, #12]
 8002112:	b2d2      	uxtb	r2, r2
 8002114:	4611      	mov	r1, r2
 8002116:	4618      	mov	r0, r3
 8002118:	f004 f885 	bl	8006226 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	015a      	lsls	r2, r3, #5
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	4413      	add	r3, r2
 8002124:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002128:	461a      	mov	r2, r3
 800212a:	2310      	movs	r3, #16
 800212c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800212e:	6879      	ldr	r1, [r7, #4]
 8002130:	68fa      	ldr	r2, [r7, #12]
 8002132:	4613      	mov	r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	4413      	add	r3, r2
 8002138:	00db      	lsls	r3, r3, #3
 800213a:	440b      	add	r3, r1
 800213c:	335d      	adds	r3, #93	; 0x5d
 800213e:	2208      	movs	r2, #8
 8002140:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	015a      	lsls	r2, r3, #5
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	4413      	add	r3, r2
 800214a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800214e:	461a      	mov	r2, r3
 8002150:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002154:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	015a      	lsls	r2, r3, #5
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	4413      	add	r3, r2
 800215e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002168:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800216c:	d122      	bne.n	80021b4 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	015a      	lsls	r2, r3, #5
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	4413      	add	r3, r2
 8002176:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	68fa      	ldr	r2, [r7, #12]
 800217e:	0151      	lsls	r1, r2, #5
 8002180:	693a      	ldr	r2, [r7, #16]
 8002182:	440a      	add	r2, r1
 8002184:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002188:	f043 0302 	orr.w	r3, r3, #2
 800218c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	68fa      	ldr	r2, [r7, #12]
 8002194:	b2d2      	uxtb	r2, r2
 8002196:	4611      	mov	r1, r2
 8002198:	4618      	mov	r0, r3
 800219a:	f004 f844 	bl	8006226 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	015a      	lsls	r2, r3, #5
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	4413      	add	r3, r2
 80021a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021aa:	461a      	mov	r2, r3
 80021ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021b0:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80021b2:	e300      	b.n	80027b6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	015a      	lsls	r2, r3, #5
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	4413      	add	r3, r2
 80021bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	f040 80fd 	bne.w	80023c6 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	691b      	ldr	r3, [r3, #16]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d01b      	beq.n	800220c <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80021d4:	6879      	ldr	r1, [r7, #4]
 80021d6:	68fa      	ldr	r2, [r7, #12]
 80021d8:	4613      	mov	r3, r2
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	4413      	add	r3, r2
 80021de:	00db      	lsls	r3, r3, #3
 80021e0:	440b      	add	r3, r1
 80021e2:	3348      	adds	r3, #72	; 0x48
 80021e4:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	0159      	lsls	r1, r3, #5
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	440b      	add	r3, r1
 80021ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021f2:	691b      	ldr	r3, [r3, #16]
 80021f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80021f8:	1ad1      	subs	r1, r2, r3
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	68fa      	ldr	r2, [r7, #12]
 80021fe:	4613      	mov	r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	4413      	add	r3, r2
 8002204:	00db      	lsls	r3, r3, #3
 8002206:	4403      	add	r3, r0
 8002208:	334c      	adds	r3, #76	; 0x4c
 800220a:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800220c:	6879      	ldr	r1, [r7, #4]
 800220e:	68fa      	ldr	r2, [r7, #12]
 8002210:	4613      	mov	r3, r2
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	4413      	add	r3, r2
 8002216:	00db      	lsls	r3, r3, #3
 8002218:	440b      	add	r3, r1
 800221a:	335d      	adds	r3, #93	; 0x5d
 800221c:	2201      	movs	r2, #1
 800221e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002220:	6879      	ldr	r1, [r7, #4]
 8002222:	68fa      	ldr	r2, [r7, #12]
 8002224:	4613      	mov	r3, r2
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	4413      	add	r3, r2
 800222a:	00db      	lsls	r3, r3, #3
 800222c:	440b      	add	r3, r1
 800222e:	3358      	adds	r3, #88	; 0x58
 8002230:	2200      	movs	r2, #0
 8002232:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	015a      	lsls	r2, r3, #5
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	4413      	add	r3, r2
 800223c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002240:	461a      	mov	r2, r3
 8002242:	2301      	movs	r3, #1
 8002244:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002246:	6879      	ldr	r1, [r7, #4]
 8002248:	68fa      	ldr	r2, [r7, #12]
 800224a:	4613      	mov	r3, r2
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	4413      	add	r3, r2
 8002250:	00db      	lsls	r3, r3, #3
 8002252:	440b      	add	r3, r1
 8002254:	333f      	adds	r3, #63	; 0x3f
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d00a      	beq.n	8002272 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800225c:	6879      	ldr	r1, [r7, #4]
 800225e:	68fa      	ldr	r2, [r7, #12]
 8002260:	4613      	mov	r3, r2
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	4413      	add	r3, r2
 8002266:	00db      	lsls	r3, r3, #3
 8002268:	440b      	add	r3, r1
 800226a:	333f      	adds	r3, #63	; 0x3f
 800226c:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800226e:	2b02      	cmp	r3, #2
 8002270:	d121      	bne.n	80022b6 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	015a      	lsls	r2, r3, #5
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	4413      	add	r3, r2
 800227a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	68fa      	ldr	r2, [r7, #12]
 8002282:	0151      	lsls	r1, r2, #5
 8002284:	693a      	ldr	r2, [r7, #16]
 8002286:	440a      	add	r2, r1
 8002288:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800228c:	f043 0302 	orr.w	r3, r3, #2
 8002290:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	68fa      	ldr	r2, [r7, #12]
 8002298:	b2d2      	uxtb	r2, r2
 800229a:	4611      	mov	r1, r2
 800229c:	4618      	mov	r0, r3
 800229e:	f003 ffc2 	bl	8006226 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	015a      	lsls	r2, r3, #5
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	4413      	add	r3, r2
 80022aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ae:	461a      	mov	r2, r3
 80022b0:	2310      	movs	r3, #16
 80022b2:	6093      	str	r3, [r2, #8]
 80022b4:	e070      	b.n	8002398 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80022b6:	6879      	ldr	r1, [r7, #4]
 80022b8:	68fa      	ldr	r2, [r7, #12]
 80022ba:	4613      	mov	r3, r2
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	4413      	add	r3, r2
 80022c0:	00db      	lsls	r3, r3, #3
 80022c2:	440b      	add	r3, r1
 80022c4:	333f      	adds	r3, #63	; 0x3f
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	2b03      	cmp	r3, #3
 80022ca:	d12a      	bne.n	8002322 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	015a      	lsls	r2, r3, #5
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	4413      	add	r3, r2
 80022d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	68fa      	ldr	r2, [r7, #12]
 80022dc:	0151      	lsls	r1, r2, #5
 80022de:	693a      	ldr	r2, [r7, #16]
 80022e0:	440a      	add	r2, r1
 80022e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022e6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80022ea:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80022ec:	6879      	ldr	r1, [r7, #4]
 80022ee:	68fa      	ldr	r2, [r7, #12]
 80022f0:	4613      	mov	r3, r2
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	4413      	add	r3, r2
 80022f6:	00db      	lsls	r3, r3, #3
 80022f8:	440b      	add	r3, r1
 80022fa:	335c      	adds	r3, #92	; 0x5c
 80022fc:	2201      	movs	r2, #1
 80022fe:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	b2d8      	uxtb	r0, r3
 8002304:	6879      	ldr	r1, [r7, #4]
 8002306:	68fa      	ldr	r2, [r7, #12]
 8002308:	4613      	mov	r3, r2
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	4413      	add	r3, r2
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	440b      	add	r3, r1
 8002312:	335c      	adds	r3, #92	; 0x5c
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	461a      	mov	r2, r3
 8002318:	4601      	mov	r1, r0
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f006 f91e 	bl	800855c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002320:	e03a      	b.n	8002398 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002322:	6879      	ldr	r1, [r7, #4]
 8002324:	68fa      	ldr	r2, [r7, #12]
 8002326:	4613      	mov	r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	4413      	add	r3, r2
 800232c:	00db      	lsls	r3, r3, #3
 800232e:	440b      	add	r3, r1
 8002330:	333f      	adds	r3, #63	; 0x3f
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	2b01      	cmp	r3, #1
 8002336:	d12f      	bne.n	8002398 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002338:	6879      	ldr	r1, [r7, #4]
 800233a:	68fa      	ldr	r2, [r7, #12]
 800233c:	4613      	mov	r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	4413      	add	r3, r2
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	440b      	add	r3, r1
 8002346:	335c      	adds	r3, #92	; 0x5c
 8002348:	2201      	movs	r2, #1
 800234a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800234c:	6879      	ldr	r1, [r7, #4]
 800234e:	68fa      	ldr	r2, [r7, #12]
 8002350:	4613      	mov	r3, r2
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	4413      	add	r3, r2
 8002356:	00db      	lsls	r3, r3, #3
 8002358:	440b      	add	r3, r1
 800235a:	3350      	adds	r3, #80	; 0x50
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	f083 0301 	eor.w	r3, r3, #1
 8002362:	b2d8      	uxtb	r0, r3
 8002364:	6879      	ldr	r1, [r7, #4]
 8002366:	68fa      	ldr	r2, [r7, #12]
 8002368:	4613      	mov	r3, r2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	4413      	add	r3, r2
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	440b      	add	r3, r1
 8002372:	3350      	adds	r3, #80	; 0x50
 8002374:	4602      	mov	r2, r0
 8002376:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	b2d8      	uxtb	r0, r3
 800237c:	6879      	ldr	r1, [r7, #4]
 800237e:	68fa      	ldr	r2, [r7, #12]
 8002380:	4613      	mov	r3, r2
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	4413      	add	r3, r2
 8002386:	00db      	lsls	r3, r3, #3
 8002388:	440b      	add	r3, r1
 800238a:	335c      	adds	r3, #92	; 0x5c
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	461a      	mov	r2, r3
 8002390:	4601      	mov	r1, r0
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f006 f8e2 	bl	800855c <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8002398:	6879      	ldr	r1, [r7, #4]
 800239a:	68fa      	ldr	r2, [r7, #12]
 800239c:	4613      	mov	r3, r2
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	4413      	add	r3, r2
 80023a2:	00db      	lsls	r3, r3, #3
 80023a4:	440b      	add	r3, r1
 80023a6:	3350      	adds	r3, #80	; 0x50
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	f083 0301 	eor.w	r3, r3, #1
 80023ae:	b2d8      	uxtb	r0, r3
 80023b0:	6879      	ldr	r1, [r7, #4]
 80023b2:	68fa      	ldr	r2, [r7, #12]
 80023b4:	4613      	mov	r3, r2
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	4413      	add	r3, r2
 80023ba:	00db      	lsls	r3, r3, #3
 80023bc:	440b      	add	r3, r1
 80023be:	3350      	adds	r3, #80	; 0x50
 80023c0:	4602      	mov	r2, r0
 80023c2:	701a      	strb	r2, [r3, #0]
}
 80023c4:	e1f7      	b.n	80027b6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	015a      	lsls	r2, r3, #5
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	4413      	add	r3, r2
 80023ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f003 0302 	and.w	r3, r3, #2
 80023d8:	2b02      	cmp	r3, #2
 80023da:	f040 811a 	bne.w	8002612 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	015a      	lsls	r2, r3, #5
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	4413      	add	r3, r2
 80023e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	68fa      	ldr	r2, [r7, #12]
 80023ee:	0151      	lsls	r1, r2, #5
 80023f0:	693a      	ldr	r2, [r7, #16]
 80023f2:	440a      	add	r2, r1
 80023f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023f8:	f023 0302 	bic.w	r3, r3, #2
 80023fc:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80023fe:	6879      	ldr	r1, [r7, #4]
 8002400:	68fa      	ldr	r2, [r7, #12]
 8002402:	4613      	mov	r3, r2
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	4413      	add	r3, r2
 8002408:	00db      	lsls	r3, r3, #3
 800240a:	440b      	add	r3, r1
 800240c:	335d      	adds	r3, #93	; 0x5d
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	2b01      	cmp	r3, #1
 8002412:	d10a      	bne.n	800242a <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002414:	6879      	ldr	r1, [r7, #4]
 8002416:	68fa      	ldr	r2, [r7, #12]
 8002418:	4613      	mov	r3, r2
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	4413      	add	r3, r2
 800241e:	00db      	lsls	r3, r3, #3
 8002420:	440b      	add	r3, r1
 8002422:	335c      	adds	r3, #92	; 0x5c
 8002424:	2201      	movs	r2, #1
 8002426:	701a      	strb	r2, [r3, #0]
 8002428:	e0d9      	b.n	80025de <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800242a:	6879      	ldr	r1, [r7, #4]
 800242c:	68fa      	ldr	r2, [r7, #12]
 800242e:	4613      	mov	r3, r2
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	4413      	add	r3, r2
 8002434:	00db      	lsls	r3, r3, #3
 8002436:	440b      	add	r3, r1
 8002438:	335d      	adds	r3, #93	; 0x5d
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	2b05      	cmp	r3, #5
 800243e:	d10a      	bne.n	8002456 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002440:	6879      	ldr	r1, [r7, #4]
 8002442:	68fa      	ldr	r2, [r7, #12]
 8002444:	4613      	mov	r3, r2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	4413      	add	r3, r2
 800244a:	00db      	lsls	r3, r3, #3
 800244c:	440b      	add	r3, r1
 800244e:	335c      	adds	r3, #92	; 0x5c
 8002450:	2205      	movs	r2, #5
 8002452:	701a      	strb	r2, [r3, #0]
 8002454:	e0c3      	b.n	80025de <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002456:	6879      	ldr	r1, [r7, #4]
 8002458:	68fa      	ldr	r2, [r7, #12]
 800245a:	4613      	mov	r3, r2
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	4413      	add	r3, r2
 8002460:	00db      	lsls	r3, r3, #3
 8002462:	440b      	add	r3, r1
 8002464:	335d      	adds	r3, #93	; 0x5d
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	2b06      	cmp	r3, #6
 800246a:	d00a      	beq.n	8002482 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800246c:	6879      	ldr	r1, [r7, #4]
 800246e:	68fa      	ldr	r2, [r7, #12]
 8002470:	4613      	mov	r3, r2
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	4413      	add	r3, r2
 8002476:	00db      	lsls	r3, r3, #3
 8002478:	440b      	add	r3, r1
 800247a:	335d      	adds	r3, #93	; 0x5d
 800247c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800247e:	2b08      	cmp	r3, #8
 8002480:	d156      	bne.n	8002530 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8002482:	6879      	ldr	r1, [r7, #4]
 8002484:	68fa      	ldr	r2, [r7, #12]
 8002486:	4613      	mov	r3, r2
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	4413      	add	r3, r2
 800248c:	00db      	lsls	r3, r3, #3
 800248e:	440b      	add	r3, r1
 8002490:	3358      	adds	r3, #88	; 0x58
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	1c59      	adds	r1, r3, #1
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	68fa      	ldr	r2, [r7, #12]
 800249a:	4613      	mov	r3, r2
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	4413      	add	r3, r2
 80024a0:	00db      	lsls	r3, r3, #3
 80024a2:	4403      	add	r3, r0
 80024a4:	3358      	adds	r3, #88	; 0x58
 80024a6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80024a8:	6879      	ldr	r1, [r7, #4]
 80024aa:	68fa      	ldr	r2, [r7, #12]
 80024ac:	4613      	mov	r3, r2
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	4413      	add	r3, r2
 80024b2:	00db      	lsls	r3, r3, #3
 80024b4:	440b      	add	r3, r1
 80024b6:	3358      	adds	r3, #88	; 0x58
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2b03      	cmp	r3, #3
 80024bc:	d914      	bls.n	80024e8 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80024be:	6879      	ldr	r1, [r7, #4]
 80024c0:	68fa      	ldr	r2, [r7, #12]
 80024c2:	4613      	mov	r3, r2
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	4413      	add	r3, r2
 80024c8:	00db      	lsls	r3, r3, #3
 80024ca:	440b      	add	r3, r1
 80024cc:	3358      	adds	r3, #88	; 0x58
 80024ce:	2200      	movs	r2, #0
 80024d0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80024d2:	6879      	ldr	r1, [r7, #4]
 80024d4:	68fa      	ldr	r2, [r7, #12]
 80024d6:	4613      	mov	r3, r2
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	4413      	add	r3, r2
 80024dc:	00db      	lsls	r3, r3, #3
 80024de:	440b      	add	r3, r1
 80024e0:	335c      	adds	r3, #92	; 0x5c
 80024e2:	2204      	movs	r2, #4
 80024e4:	701a      	strb	r2, [r3, #0]
 80024e6:	e009      	b.n	80024fc <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80024e8:	6879      	ldr	r1, [r7, #4]
 80024ea:	68fa      	ldr	r2, [r7, #12]
 80024ec:	4613      	mov	r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	4413      	add	r3, r2
 80024f2:	00db      	lsls	r3, r3, #3
 80024f4:	440b      	add	r3, r1
 80024f6:	335c      	adds	r3, #92	; 0x5c
 80024f8:	2202      	movs	r2, #2
 80024fa:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	015a      	lsls	r2, r3, #5
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	4413      	add	r3, r2
 8002504:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002512:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800251a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	015a      	lsls	r2, r3, #5
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	4413      	add	r3, r2
 8002524:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002528:	461a      	mov	r2, r3
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	6013      	str	r3, [r2, #0]
 800252e:	e056      	b.n	80025de <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002530:	6879      	ldr	r1, [r7, #4]
 8002532:	68fa      	ldr	r2, [r7, #12]
 8002534:	4613      	mov	r3, r2
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	4413      	add	r3, r2
 800253a:	00db      	lsls	r3, r3, #3
 800253c:	440b      	add	r3, r1
 800253e:	335d      	adds	r3, #93	; 0x5d
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	2b03      	cmp	r3, #3
 8002544:	d123      	bne.n	800258e <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002546:	6879      	ldr	r1, [r7, #4]
 8002548:	68fa      	ldr	r2, [r7, #12]
 800254a:	4613      	mov	r3, r2
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	4413      	add	r3, r2
 8002550:	00db      	lsls	r3, r3, #3
 8002552:	440b      	add	r3, r1
 8002554:	335c      	adds	r3, #92	; 0x5c
 8002556:	2202      	movs	r2, #2
 8002558:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	015a      	lsls	r2, r3, #5
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	4413      	add	r3, r2
 8002562:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002570:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002578:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	015a      	lsls	r2, r3, #5
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	4413      	add	r3, r2
 8002582:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002586:	461a      	mov	r2, r3
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	6013      	str	r3, [r2, #0]
 800258c:	e027      	b.n	80025de <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800258e:	6879      	ldr	r1, [r7, #4]
 8002590:	68fa      	ldr	r2, [r7, #12]
 8002592:	4613      	mov	r3, r2
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	4413      	add	r3, r2
 8002598:	00db      	lsls	r3, r3, #3
 800259a:	440b      	add	r3, r1
 800259c:	335d      	adds	r3, #93	; 0x5d
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	2b07      	cmp	r3, #7
 80025a2:	d11c      	bne.n	80025de <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 80025a4:	6879      	ldr	r1, [r7, #4]
 80025a6:	68fa      	ldr	r2, [r7, #12]
 80025a8:	4613      	mov	r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	4413      	add	r3, r2
 80025ae:	00db      	lsls	r3, r3, #3
 80025b0:	440b      	add	r3, r1
 80025b2:	3358      	adds	r3, #88	; 0x58
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	1c59      	adds	r1, r3, #1
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	68fa      	ldr	r2, [r7, #12]
 80025bc:	4613      	mov	r3, r2
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	4413      	add	r3, r2
 80025c2:	00db      	lsls	r3, r3, #3
 80025c4:	4403      	add	r3, r0
 80025c6:	3358      	adds	r3, #88	; 0x58
 80025c8:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80025ca:	6879      	ldr	r1, [r7, #4]
 80025cc:	68fa      	ldr	r2, [r7, #12]
 80025ce:	4613      	mov	r3, r2
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	4413      	add	r3, r2
 80025d4:	00db      	lsls	r3, r3, #3
 80025d6:	440b      	add	r3, r1
 80025d8:	335c      	adds	r3, #92	; 0x5c
 80025da:	2204      	movs	r2, #4
 80025dc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	015a      	lsls	r2, r3, #5
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	4413      	add	r3, r2
 80025e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ea:	461a      	mov	r2, r3
 80025ec:	2302      	movs	r3, #2
 80025ee:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	b2d8      	uxtb	r0, r3
 80025f4:	6879      	ldr	r1, [r7, #4]
 80025f6:	68fa      	ldr	r2, [r7, #12]
 80025f8:	4613      	mov	r3, r2
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	4413      	add	r3, r2
 80025fe:	00db      	lsls	r3, r3, #3
 8002600:	440b      	add	r3, r1
 8002602:	335c      	adds	r3, #92	; 0x5c
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	461a      	mov	r2, r3
 8002608:	4601      	mov	r1, r0
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f005 ffa6 	bl	800855c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002610:	e0d1      	b.n	80027b6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	015a      	lsls	r2, r3, #5
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	4413      	add	r3, r2
 800261a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002624:	2b80      	cmp	r3, #128	; 0x80
 8002626:	d13e      	bne.n	80026a6 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	015a      	lsls	r2, r3, #5
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	4413      	add	r3, r2
 8002630:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	68fa      	ldr	r2, [r7, #12]
 8002638:	0151      	lsls	r1, r2, #5
 800263a:	693a      	ldr	r2, [r7, #16]
 800263c:	440a      	add	r2, r1
 800263e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002642:	f043 0302 	orr.w	r3, r3, #2
 8002646:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002648:	6879      	ldr	r1, [r7, #4]
 800264a:	68fa      	ldr	r2, [r7, #12]
 800264c:	4613      	mov	r3, r2
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	4413      	add	r3, r2
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	440b      	add	r3, r1
 8002656:	3358      	adds	r3, #88	; 0x58
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	1c59      	adds	r1, r3, #1
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	68fa      	ldr	r2, [r7, #12]
 8002660:	4613      	mov	r3, r2
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	4413      	add	r3, r2
 8002666:	00db      	lsls	r3, r3, #3
 8002668:	4403      	add	r3, r0
 800266a:	3358      	adds	r3, #88	; 0x58
 800266c:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800266e:	6879      	ldr	r1, [r7, #4]
 8002670:	68fa      	ldr	r2, [r7, #12]
 8002672:	4613      	mov	r3, r2
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	4413      	add	r3, r2
 8002678:	00db      	lsls	r3, r3, #3
 800267a:	440b      	add	r3, r1
 800267c:	335d      	adds	r3, #93	; 0x5d
 800267e:	2206      	movs	r2, #6
 8002680:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	68fa      	ldr	r2, [r7, #12]
 8002688:	b2d2      	uxtb	r2, r2
 800268a:	4611      	mov	r1, r2
 800268c:	4618      	mov	r0, r3
 800268e:	f003 fdca 	bl	8006226 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	015a      	lsls	r2, r3, #5
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	4413      	add	r3, r2
 800269a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800269e:	461a      	mov	r2, r3
 80026a0:	2380      	movs	r3, #128	; 0x80
 80026a2:	6093      	str	r3, [r2, #8]
}
 80026a4:	e087      	b.n	80027b6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	015a      	lsls	r2, r3, #5
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	4413      	add	r3, r2
 80026ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	f003 0310 	and.w	r3, r3, #16
 80026b8:	2b10      	cmp	r3, #16
 80026ba:	d17c      	bne.n	80027b6 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80026bc:	6879      	ldr	r1, [r7, #4]
 80026be:	68fa      	ldr	r2, [r7, #12]
 80026c0:	4613      	mov	r3, r2
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	4413      	add	r3, r2
 80026c6:	00db      	lsls	r3, r3, #3
 80026c8:	440b      	add	r3, r1
 80026ca:	333f      	adds	r3, #63	; 0x3f
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	2b03      	cmp	r3, #3
 80026d0:	d122      	bne.n	8002718 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80026d2:	6879      	ldr	r1, [r7, #4]
 80026d4:	68fa      	ldr	r2, [r7, #12]
 80026d6:	4613      	mov	r3, r2
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	4413      	add	r3, r2
 80026dc:	00db      	lsls	r3, r3, #3
 80026de:	440b      	add	r3, r1
 80026e0:	3358      	adds	r3, #88	; 0x58
 80026e2:	2200      	movs	r2, #0
 80026e4:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	015a      	lsls	r2, r3, #5
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	4413      	add	r3, r2
 80026ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	68fa      	ldr	r2, [r7, #12]
 80026f6:	0151      	lsls	r1, r2, #5
 80026f8:	693a      	ldr	r2, [r7, #16]
 80026fa:	440a      	add	r2, r1
 80026fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002700:	f043 0302 	orr.w	r3, r3, #2
 8002704:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	68fa      	ldr	r2, [r7, #12]
 800270c:	b2d2      	uxtb	r2, r2
 800270e:	4611      	mov	r1, r2
 8002710:	4618      	mov	r0, r3
 8002712:	f003 fd88 	bl	8006226 <USB_HC_Halt>
 8002716:	e045      	b.n	80027a4 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002718:	6879      	ldr	r1, [r7, #4]
 800271a:	68fa      	ldr	r2, [r7, #12]
 800271c:	4613      	mov	r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	4413      	add	r3, r2
 8002722:	00db      	lsls	r3, r3, #3
 8002724:	440b      	add	r3, r1
 8002726:	333f      	adds	r3, #63	; 0x3f
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d00a      	beq.n	8002744 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800272e:	6879      	ldr	r1, [r7, #4]
 8002730:	68fa      	ldr	r2, [r7, #12]
 8002732:	4613      	mov	r3, r2
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	4413      	add	r3, r2
 8002738:	00db      	lsls	r3, r3, #3
 800273a:	440b      	add	r3, r1
 800273c:	333f      	adds	r3, #63	; 0x3f
 800273e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002740:	2b02      	cmp	r3, #2
 8002742:	d12f      	bne.n	80027a4 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002744:	6879      	ldr	r1, [r7, #4]
 8002746:	68fa      	ldr	r2, [r7, #12]
 8002748:	4613      	mov	r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	4413      	add	r3, r2
 800274e:	00db      	lsls	r3, r3, #3
 8002750:	440b      	add	r3, r1
 8002752:	3358      	adds	r3, #88	; 0x58
 8002754:	2200      	movs	r2, #0
 8002756:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	691b      	ldr	r3, [r3, #16]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d121      	bne.n	80027a4 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8002760:	6879      	ldr	r1, [r7, #4]
 8002762:	68fa      	ldr	r2, [r7, #12]
 8002764:	4613      	mov	r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	4413      	add	r3, r2
 800276a:	00db      	lsls	r3, r3, #3
 800276c:	440b      	add	r3, r1
 800276e:	335d      	adds	r3, #93	; 0x5d
 8002770:	2203      	movs	r2, #3
 8002772:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	015a      	lsls	r2, r3, #5
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	4413      	add	r3, r2
 800277c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	68fa      	ldr	r2, [r7, #12]
 8002784:	0151      	lsls	r1, r2, #5
 8002786:	693a      	ldr	r2, [r7, #16]
 8002788:	440a      	add	r2, r1
 800278a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800278e:	f043 0302 	orr.w	r3, r3, #2
 8002792:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	68fa      	ldr	r2, [r7, #12]
 800279a:	b2d2      	uxtb	r2, r2
 800279c:	4611      	mov	r1, r2
 800279e:	4618      	mov	r0, r3
 80027a0:	f003 fd41 	bl	8006226 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	015a      	lsls	r2, r3, #5
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	4413      	add	r3, r2
 80027ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027b0:	461a      	mov	r2, r3
 80027b2:	2310      	movs	r3, #16
 80027b4:	6093      	str	r3, [r2, #8]
}
 80027b6:	bf00      	nop
 80027b8:	3718      	adds	r7, #24
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80027be:	b580      	push	{r7, lr}
 80027c0:	b086      	sub	sp, #24
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
 80027c6:	460b      	mov	r3, r1
 80027c8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80027d4:	78fb      	ldrb	r3, [r7, #3]
 80027d6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	015a      	lsls	r2, r3, #5
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	4413      	add	r3, r2
 80027e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	f003 0304 	and.w	r3, r3, #4
 80027ea:	2b04      	cmp	r3, #4
 80027ec:	d119      	bne.n	8002822 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	015a      	lsls	r2, r3, #5
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	4413      	add	r3, r2
 80027f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027fa:	461a      	mov	r2, r3
 80027fc:	2304      	movs	r3, #4
 80027fe:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	015a      	lsls	r2, r3, #5
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	4413      	add	r3, r2
 8002808:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	68fa      	ldr	r2, [r7, #12]
 8002810:	0151      	lsls	r1, r2, #5
 8002812:	693a      	ldr	r2, [r7, #16]
 8002814:	440a      	add	r2, r1
 8002816:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800281a:	f043 0302 	orr.w	r3, r3, #2
 800281e:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002820:	e33e      	b.n	8002ea0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	015a      	lsls	r2, r3, #5
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	4413      	add	r3, r2
 800282a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	f003 0320 	and.w	r3, r3, #32
 8002834:	2b20      	cmp	r3, #32
 8002836:	d141      	bne.n	80028bc <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	015a      	lsls	r2, r3, #5
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	4413      	add	r3, r2
 8002840:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002844:	461a      	mov	r2, r3
 8002846:	2320      	movs	r3, #32
 8002848:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800284a:	6879      	ldr	r1, [r7, #4]
 800284c:	68fa      	ldr	r2, [r7, #12]
 800284e:	4613      	mov	r3, r2
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	4413      	add	r3, r2
 8002854:	00db      	lsls	r3, r3, #3
 8002856:	440b      	add	r3, r1
 8002858:	333d      	adds	r3, #61	; 0x3d
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	2b01      	cmp	r3, #1
 800285e:	f040 831f 	bne.w	8002ea0 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8002862:	6879      	ldr	r1, [r7, #4]
 8002864:	68fa      	ldr	r2, [r7, #12]
 8002866:	4613      	mov	r3, r2
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	4413      	add	r3, r2
 800286c:	00db      	lsls	r3, r3, #3
 800286e:	440b      	add	r3, r1
 8002870:	333d      	adds	r3, #61	; 0x3d
 8002872:	2200      	movs	r2, #0
 8002874:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002876:	6879      	ldr	r1, [r7, #4]
 8002878:	68fa      	ldr	r2, [r7, #12]
 800287a:	4613      	mov	r3, r2
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	4413      	add	r3, r2
 8002880:	00db      	lsls	r3, r3, #3
 8002882:	440b      	add	r3, r1
 8002884:	335c      	adds	r3, #92	; 0x5c
 8002886:	2202      	movs	r2, #2
 8002888:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	015a      	lsls	r2, r3, #5
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	4413      	add	r3, r2
 8002892:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	68fa      	ldr	r2, [r7, #12]
 800289a:	0151      	lsls	r1, r2, #5
 800289c:	693a      	ldr	r2, [r7, #16]
 800289e:	440a      	add	r2, r1
 80028a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028a4:	f043 0302 	orr.w	r3, r3, #2
 80028a8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	68fa      	ldr	r2, [r7, #12]
 80028b0:	b2d2      	uxtb	r2, r2
 80028b2:	4611      	mov	r1, r2
 80028b4:	4618      	mov	r0, r3
 80028b6:	f003 fcb6 	bl	8006226 <USB_HC_Halt>
}
 80028ba:	e2f1      	b.n	8002ea0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	015a      	lsls	r2, r3, #5
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	4413      	add	r3, r2
 80028c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ce:	2b40      	cmp	r3, #64	; 0x40
 80028d0:	d13f      	bne.n	8002952 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80028d2:	6879      	ldr	r1, [r7, #4]
 80028d4:	68fa      	ldr	r2, [r7, #12]
 80028d6:	4613      	mov	r3, r2
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	4413      	add	r3, r2
 80028dc:	00db      	lsls	r3, r3, #3
 80028de:	440b      	add	r3, r1
 80028e0:	335d      	adds	r3, #93	; 0x5d
 80028e2:	2204      	movs	r2, #4
 80028e4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80028e6:	6879      	ldr	r1, [r7, #4]
 80028e8:	68fa      	ldr	r2, [r7, #12]
 80028ea:	4613      	mov	r3, r2
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	4413      	add	r3, r2
 80028f0:	00db      	lsls	r3, r3, #3
 80028f2:	440b      	add	r3, r1
 80028f4:	333d      	adds	r3, #61	; 0x3d
 80028f6:	2201      	movs	r2, #1
 80028f8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80028fa:	6879      	ldr	r1, [r7, #4]
 80028fc:	68fa      	ldr	r2, [r7, #12]
 80028fe:	4613      	mov	r3, r2
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	4413      	add	r3, r2
 8002904:	00db      	lsls	r3, r3, #3
 8002906:	440b      	add	r3, r1
 8002908:	3358      	adds	r3, #88	; 0x58
 800290a:	2200      	movs	r2, #0
 800290c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	015a      	lsls	r2, r3, #5
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	4413      	add	r3, r2
 8002916:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	68fa      	ldr	r2, [r7, #12]
 800291e:	0151      	lsls	r1, r2, #5
 8002920:	693a      	ldr	r2, [r7, #16]
 8002922:	440a      	add	r2, r1
 8002924:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002928:	f043 0302 	orr.w	r3, r3, #2
 800292c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	68fa      	ldr	r2, [r7, #12]
 8002934:	b2d2      	uxtb	r2, r2
 8002936:	4611      	mov	r1, r2
 8002938:	4618      	mov	r0, r3
 800293a:	f003 fc74 	bl	8006226 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	015a      	lsls	r2, r3, #5
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	4413      	add	r3, r2
 8002946:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800294a:	461a      	mov	r2, r3
 800294c:	2340      	movs	r3, #64	; 0x40
 800294e:	6093      	str	r3, [r2, #8]
}
 8002950:	e2a6      	b.n	8002ea0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	015a      	lsls	r2, r3, #5
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	4413      	add	r3, r2
 800295a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002964:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002968:	d122      	bne.n	80029b0 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	015a      	lsls	r2, r3, #5
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	4413      	add	r3, r2
 8002972:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	68fa      	ldr	r2, [r7, #12]
 800297a:	0151      	lsls	r1, r2, #5
 800297c:	693a      	ldr	r2, [r7, #16]
 800297e:	440a      	add	r2, r1
 8002980:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002984:	f043 0302 	orr.w	r3, r3, #2
 8002988:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	68fa      	ldr	r2, [r7, #12]
 8002990:	b2d2      	uxtb	r2, r2
 8002992:	4611      	mov	r1, r2
 8002994:	4618      	mov	r0, r3
 8002996:	f003 fc46 	bl	8006226 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	015a      	lsls	r2, r3, #5
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	4413      	add	r3, r2
 80029a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029a6:	461a      	mov	r2, r3
 80029a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029ac:	6093      	str	r3, [r2, #8]
}
 80029ae:	e277      	b.n	8002ea0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	015a      	lsls	r2, r3, #5
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	4413      	add	r3, r2
 80029b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d135      	bne.n	8002a32 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80029c6:	6879      	ldr	r1, [r7, #4]
 80029c8:	68fa      	ldr	r2, [r7, #12]
 80029ca:	4613      	mov	r3, r2
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	4413      	add	r3, r2
 80029d0:	00db      	lsls	r3, r3, #3
 80029d2:	440b      	add	r3, r1
 80029d4:	3358      	adds	r3, #88	; 0x58
 80029d6:	2200      	movs	r2, #0
 80029d8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	015a      	lsls	r2, r3, #5
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	4413      	add	r3, r2
 80029e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	68fa      	ldr	r2, [r7, #12]
 80029ea:	0151      	lsls	r1, r2, #5
 80029ec:	693a      	ldr	r2, [r7, #16]
 80029ee:	440a      	add	r2, r1
 80029f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029f4:	f043 0302 	orr.w	r3, r3, #2
 80029f8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	68fa      	ldr	r2, [r7, #12]
 8002a00:	b2d2      	uxtb	r2, r2
 8002a02:	4611      	mov	r1, r2
 8002a04:	4618      	mov	r0, r3
 8002a06:	f003 fc0e 	bl	8006226 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	015a      	lsls	r2, r3, #5
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	4413      	add	r3, r2
 8002a12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a16:	461a      	mov	r2, r3
 8002a18:	2301      	movs	r3, #1
 8002a1a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002a1c:	6879      	ldr	r1, [r7, #4]
 8002a1e:	68fa      	ldr	r2, [r7, #12]
 8002a20:	4613      	mov	r3, r2
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	4413      	add	r3, r2
 8002a26:	00db      	lsls	r3, r3, #3
 8002a28:	440b      	add	r3, r1
 8002a2a:	335d      	adds	r3, #93	; 0x5d
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	701a      	strb	r2, [r3, #0]
}
 8002a30:	e236      	b.n	8002ea0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	015a      	lsls	r2, r3, #5
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	4413      	add	r3, r2
 8002a3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f003 0308 	and.w	r3, r3, #8
 8002a44:	2b08      	cmp	r3, #8
 8002a46:	d12b      	bne.n	8002aa0 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	015a      	lsls	r2, r3, #5
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	4413      	add	r3, r2
 8002a50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a54:	461a      	mov	r2, r3
 8002a56:	2308      	movs	r3, #8
 8002a58:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	015a      	lsls	r2, r3, #5
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	4413      	add	r3, r2
 8002a62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	68fa      	ldr	r2, [r7, #12]
 8002a6a:	0151      	lsls	r1, r2, #5
 8002a6c:	693a      	ldr	r2, [r7, #16]
 8002a6e:	440a      	add	r2, r1
 8002a70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a74:	f043 0302 	orr.w	r3, r3, #2
 8002a78:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	68fa      	ldr	r2, [r7, #12]
 8002a80:	b2d2      	uxtb	r2, r2
 8002a82:	4611      	mov	r1, r2
 8002a84:	4618      	mov	r0, r3
 8002a86:	f003 fbce 	bl	8006226 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002a8a:	6879      	ldr	r1, [r7, #4]
 8002a8c:	68fa      	ldr	r2, [r7, #12]
 8002a8e:	4613      	mov	r3, r2
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	4413      	add	r3, r2
 8002a94:	00db      	lsls	r3, r3, #3
 8002a96:	440b      	add	r3, r1
 8002a98:	335d      	adds	r3, #93	; 0x5d
 8002a9a:	2205      	movs	r2, #5
 8002a9c:	701a      	strb	r2, [r3, #0]
}
 8002a9e:	e1ff      	b.n	8002ea0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	015a      	lsls	r2, r3, #5
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	4413      	add	r3, r2
 8002aa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f003 0310 	and.w	r3, r3, #16
 8002ab2:	2b10      	cmp	r3, #16
 8002ab4:	d155      	bne.n	8002b62 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002ab6:	6879      	ldr	r1, [r7, #4]
 8002ab8:	68fa      	ldr	r2, [r7, #12]
 8002aba:	4613      	mov	r3, r2
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	4413      	add	r3, r2
 8002ac0:	00db      	lsls	r3, r3, #3
 8002ac2:	440b      	add	r3, r1
 8002ac4:	3358      	adds	r3, #88	; 0x58
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002aca:	6879      	ldr	r1, [r7, #4]
 8002acc:	68fa      	ldr	r2, [r7, #12]
 8002ace:	4613      	mov	r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	4413      	add	r3, r2
 8002ad4:	00db      	lsls	r3, r3, #3
 8002ad6:	440b      	add	r3, r1
 8002ad8:	335d      	adds	r3, #93	; 0x5d
 8002ada:	2203      	movs	r2, #3
 8002adc:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002ade:	6879      	ldr	r1, [r7, #4]
 8002ae0:	68fa      	ldr	r2, [r7, #12]
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	4413      	add	r3, r2
 8002ae8:	00db      	lsls	r3, r3, #3
 8002aea:	440b      	add	r3, r1
 8002aec:	333d      	adds	r3, #61	; 0x3d
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d114      	bne.n	8002b1e <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8002af4:	6879      	ldr	r1, [r7, #4]
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	4613      	mov	r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	4413      	add	r3, r2
 8002afe:	00db      	lsls	r3, r3, #3
 8002b00:	440b      	add	r3, r1
 8002b02:	333c      	adds	r3, #60	; 0x3c
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d109      	bne.n	8002b1e <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8002b0a:	6879      	ldr	r1, [r7, #4]
 8002b0c:	68fa      	ldr	r2, [r7, #12]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	4413      	add	r3, r2
 8002b14:	00db      	lsls	r3, r3, #3
 8002b16:	440b      	add	r3, r1
 8002b18:	333d      	adds	r3, #61	; 0x3d
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	015a      	lsls	r2, r3, #5
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	4413      	add	r3, r2
 8002b26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	68fa      	ldr	r2, [r7, #12]
 8002b2e:	0151      	lsls	r1, r2, #5
 8002b30:	693a      	ldr	r2, [r7, #16]
 8002b32:	440a      	add	r2, r1
 8002b34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b38:	f043 0302 	orr.w	r3, r3, #2
 8002b3c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	68fa      	ldr	r2, [r7, #12]
 8002b44:	b2d2      	uxtb	r2, r2
 8002b46:	4611      	mov	r1, r2
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f003 fb6c 	bl	8006226 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	015a      	lsls	r2, r3, #5
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	4413      	add	r3, r2
 8002b56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	2310      	movs	r3, #16
 8002b5e:	6093      	str	r3, [r2, #8]
}
 8002b60:	e19e      	b.n	8002ea0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	015a      	lsls	r2, r3, #5
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	4413      	add	r3, r2
 8002b6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b74:	2b80      	cmp	r3, #128	; 0x80
 8002b76:	d12b      	bne.n	8002bd0 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	015a      	lsls	r2, r3, #5
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	4413      	add	r3, r2
 8002b80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	68fa      	ldr	r2, [r7, #12]
 8002b88:	0151      	lsls	r1, r2, #5
 8002b8a:	693a      	ldr	r2, [r7, #16]
 8002b8c:	440a      	add	r2, r1
 8002b8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b92:	f043 0302 	orr.w	r3, r3, #2
 8002b96:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	68fa      	ldr	r2, [r7, #12]
 8002b9e:	b2d2      	uxtb	r2, r2
 8002ba0:	4611      	mov	r1, r2
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f003 fb3f 	bl	8006226 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002ba8:	6879      	ldr	r1, [r7, #4]
 8002baa:	68fa      	ldr	r2, [r7, #12]
 8002bac:	4613      	mov	r3, r2
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	4413      	add	r3, r2
 8002bb2:	00db      	lsls	r3, r3, #3
 8002bb4:	440b      	add	r3, r1
 8002bb6:	335d      	adds	r3, #93	; 0x5d
 8002bb8:	2206      	movs	r2, #6
 8002bba:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	015a      	lsls	r2, r3, #5
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	4413      	add	r3, r2
 8002bc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bc8:	461a      	mov	r2, r3
 8002bca:	2380      	movs	r3, #128	; 0x80
 8002bcc:	6093      	str	r3, [r2, #8]
}
 8002bce:	e167      	b.n	8002ea0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	015a      	lsls	r2, r3, #5
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	4413      	add	r3, r2
 8002bd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002be2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002be6:	d135      	bne.n	8002c54 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	015a      	lsls	r2, r3, #5
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	4413      	add	r3, r2
 8002bf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	0151      	lsls	r1, r2, #5
 8002bfa:	693a      	ldr	r2, [r7, #16]
 8002bfc:	440a      	add	r2, r1
 8002bfe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c02:	f043 0302 	orr.w	r3, r3, #2
 8002c06:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	68fa      	ldr	r2, [r7, #12]
 8002c0e:	b2d2      	uxtb	r2, r2
 8002c10:	4611      	mov	r1, r2
 8002c12:	4618      	mov	r0, r3
 8002c14:	f003 fb07 	bl	8006226 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	015a      	lsls	r2, r3, #5
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	4413      	add	r3, r2
 8002c20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c24:	461a      	mov	r2, r3
 8002c26:	2310      	movs	r3, #16
 8002c28:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	015a      	lsls	r2, r3, #5
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	4413      	add	r3, r2
 8002c32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c36:	461a      	mov	r2, r3
 8002c38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c3c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002c3e:	6879      	ldr	r1, [r7, #4]
 8002c40:	68fa      	ldr	r2, [r7, #12]
 8002c42:	4613      	mov	r3, r2
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	4413      	add	r3, r2
 8002c48:	00db      	lsls	r3, r3, #3
 8002c4a:	440b      	add	r3, r1
 8002c4c:	335d      	adds	r3, #93	; 0x5d
 8002c4e:	2208      	movs	r2, #8
 8002c50:	701a      	strb	r2, [r3, #0]
}
 8002c52:	e125      	b.n	8002ea0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	015a      	lsls	r2, r3, #5
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	f040 811a 	bne.w	8002ea0 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	015a      	lsls	r2, r3, #5
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	4413      	add	r3, r2
 8002c74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	68fa      	ldr	r2, [r7, #12]
 8002c7c:	0151      	lsls	r1, r2, #5
 8002c7e:	693a      	ldr	r2, [r7, #16]
 8002c80:	440a      	add	r2, r1
 8002c82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c86:	f023 0302 	bic.w	r3, r3, #2
 8002c8a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002c8c:	6879      	ldr	r1, [r7, #4]
 8002c8e:	68fa      	ldr	r2, [r7, #12]
 8002c90:	4613      	mov	r3, r2
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	4413      	add	r3, r2
 8002c96:	00db      	lsls	r3, r3, #3
 8002c98:	440b      	add	r3, r1
 8002c9a:	335d      	adds	r3, #93	; 0x5d
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d137      	bne.n	8002d12 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002ca2:	6879      	ldr	r1, [r7, #4]
 8002ca4:	68fa      	ldr	r2, [r7, #12]
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	4413      	add	r3, r2
 8002cac:	00db      	lsls	r3, r3, #3
 8002cae:	440b      	add	r3, r1
 8002cb0:	335c      	adds	r3, #92	; 0x5c
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002cb6:	6879      	ldr	r1, [r7, #4]
 8002cb8:	68fa      	ldr	r2, [r7, #12]
 8002cba:	4613      	mov	r3, r2
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	4413      	add	r3, r2
 8002cc0:	00db      	lsls	r3, r3, #3
 8002cc2:	440b      	add	r3, r1
 8002cc4:	333f      	adds	r3, #63	; 0x3f
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d00b      	beq.n	8002ce4 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002ccc:	6879      	ldr	r1, [r7, #4]
 8002cce:	68fa      	ldr	r2, [r7, #12]
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	4413      	add	r3, r2
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	440b      	add	r3, r1
 8002cda:	333f      	adds	r3, #63	; 0x3f
 8002cdc:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002cde:	2b03      	cmp	r3, #3
 8002ce0:	f040 80c5 	bne.w	8002e6e <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8002ce4:	6879      	ldr	r1, [r7, #4]
 8002ce6:	68fa      	ldr	r2, [r7, #12]
 8002ce8:	4613      	mov	r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	4413      	add	r3, r2
 8002cee:	00db      	lsls	r3, r3, #3
 8002cf0:	440b      	add	r3, r1
 8002cf2:	3351      	adds	r3, #81	; 0x51
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	f083 0301 	eor.w	r3, r3, #1
 8002cfa:	b2d8      	uxtb	r0, r3
 8002cfc:	6879      	ldr	r1, [r7, #4]
 8002cfe:	68fa      	ldr	r2, [r7, #12]
 8002d00:	4613      	mov	r3, r2
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	4413      	add	r3, r2
 8002d06:	00db      	lsls	r3, r3, #3
 8002d08:	440b      	add	r3, r1
 8002d0a:	3351      	adds	r3, #81	; 0x51
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	701a      	strb	r2, [r3, #0]
 8002d10:	e0ad      	b.n	8002e6e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002d12:	6879      	ldr	r1, [r7, #4]
 8002d14:	68fa      	ldr	r2, [r7, #12]
 8002d16:	4613      	mov	r3, r2
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	4413      	add	r3, r2
 8002d1c:	00db      	lsls	r3, r3, #3
 8002d1e:	440b      	add	r3, r1
 8002d20:	335d      	adds	r3, #93	; 0x5d
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	2b03      	cmp	r3, #3
 8002d26:	d10a      	bne.n	8002d3e <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002d28:	6879      	ldr	r1, [r7, #4]
 8002d2a:	68fa      	ldr	r2, [r7, #12]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	4413      	add	r3, r2
 8002d32:	00db      	lsls	r3, r3, #3
 8002d34:	440b      	add	r3, r1
 8002d36:	335c      	adds	r3, #92	; 0x5c
 8002d38:	2202      	movs	r2, #2
 8002d3a:	701a      	strb	r2, [r3, #0]
 8002d3c:	e097      	b.n	8002e6e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002d3e:	6879      	ldr	r1, [r7, #4]
 8002d40:	68fa      	ldr	r2, [r7, #12]
 8002d42:	4613      	mov	r3, r2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	4413      	add	r3, r2
 8002d48:	00db      	lsls	r3, r3, #3
 8002d4a:	440b      	add	r3, r1
 8002d4c:	335d      	adds	r3, #93	; 0x5d
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	2b04      	cmp	r3, #4
 8002d52:	d10a      	bne.n	8002d6a <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002d54:	6879      	ldr	r1, [r7, #4]
 8002d56:	68fa      	ldr	r2, [r7, #12]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	4413      	add	r3, r2
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	440b      	add	r3, r1
 8002d62:	335c      	adds	r3, #92	; 0x5c
 8002d64:	2202      	movs	r2, #2
 8002d66:	701a      	strb	r2, [r3, #0]
 8002d68:	e081      	b.n	8002e6e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002d6a:	6879      	ldr	r1, [r7, #4]
 8002d6c:	68fa      	ldr	r2, [r7, #12]
 8002d6e:	4613      	mov	r3, r2
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	4413      	add	r3, r2
 8002d74:	00db      	lsls	r3, r3, #3
 8002d76:	440b      	add	r3, r1
 8002d78:	335d      	adds	r3, #93	; 0x5d
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	2b05      	cmp	r3, #5
 8002d7e:	d10a      	bne.n	8002d96 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002d80:	6879      	ldr	r1, [r7, #4]
 8002d82:	68fa      	ldr	r2, [r7, #12]
 8002d84:	4613      	mov	r3, r2
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	4413      	add	r3, r2
 8002d8a:	00db      	lsls	r3, r3, #3
 8002d8c:	440b      	add	r3, r1
 8002d8e:	335c      	adds	r3, #92	; 0x5c
 8002d90:	2205      	movs	r2, #5
 8002d92:	701a      	strb	r2, [r3, #0]
 8002d94:	e06b      	b.n	8002e6e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002d96:	6879      	ldr	r1, [r7, #4]
 8002d98:	68fa      	ldr	r2, [r7, #12]
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	4413      	add	r3, r2
 8002da0:	00db      	lsls	r3, r3, #3
 8002da2:	440b      	add	r3, r1
 8002da4:	335d      	adds	r3, #93	; 0x5d
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	2b06      	cmp	r3, #6
 8002daa:	d00a      	beq.n	8002dc2 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002dac:	6879      	ldr	r1, [r7, #4]
 8002dae:	68fa      	ldr	r2, [r7, #12]
 8002db0:	4613      	mov	r3, r2
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	4413      	add	r3, r2
 8002db6:	00db      	lsls	r3, r3, #3
 8002db8:	440b      	add	r3, r1
 8002dba:	335d      	adds	r3, #93	; 0x5d
 8002dbc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002dbe:	2b08      	cmp	r3, #8
 8002dc0:	d155      	bne.n	8002e6e <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8002dc2:	6879      	ldr	r1, [r7, #4]
 8002dc4:	68fa      	ldr	r2, [r7, #12]
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	4413      	add	r3, r2
 8002dcc:	00db      	lsls	r3, r3, #3
 8002dce:	440b      	add	r3, r1
 8002dd0:	3358      	adds	r3, #88	; 0x58
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	1c59      	adds	r1, r3, #1
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	68fa      	ldr	r2, [r7, #12]
 8002dda:	4613      	mov	r3, r2
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	4413      	add	r3, r2
 8002de0:	00db      	lsls	r3, r3, #3
 8002de2:	4403      	add	r3, r0
 8002de4:	3358      	adds	r3, #88	; 0x58
 8002de6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002de8:	6879      	ldr	r1, [r7, #4]
 8002dea:	68fa      	ldr	r2, [r7, #12]
 8002dec:	4613      	mov	r3, r2
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	4413      	add	r3, r2
 8002df2:	00db      	lsls	r3, r3, #3
 8002df4:	440b      	add	r3, r1
 8002df6:	3358      	adds	r3, #88	; 0x58
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	2b03      	cmp	r3, #3
 8002dfc:	d914      	bls.n	8002e28 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002dfe:	6879      	ldr	r1, [r7, #4]
 8002e00:	68fa      	ldr	r2, [r7, #12]
 8002e02:	4613      	mov	r3, r2
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	4413      	add	r3, r2
 8002e08:	00db      	lsls	r3, r3, #3
 8002e0a:	440b      	add	r3, r1
 8002e0c:	3358      	adds	r3, #88	; 0x58
 8002e0e:	2200      	movs	r2, #0
 8002e10:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002e12:	6879      	ldr	r1, [r7, #4]
 8002e14:	68fa      	ldr	r2, [r7, #12]
 8002e16:	4613      	mov	r3, r2
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	4413      	add	r3, r2
 8002e1c:	00db      	lsls	r3, r3, #3
 8002e1e:	440b      	add	r3, r1
 8002e20:	335c      	adds	r3, #92	; 0x5c
 8002e22:	2204      	movs	r2, #4
 8002e24:	701a      	strb	r2, [r3, #0]
 8002e26:	e009      	b.n	8002e3c <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002e28:	6879      	ldr	r1, [r7, #4]
 8002e2a:	68fa      	ldr	r2, [r7, #12]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	4413      	add	r3, r2
 8002e32:	00db      	lsls	r3, r3, #3
 8002e34:	440b      	add	r3, r1
 8002e36:	335c      	adds	r3, #92	; 0x5c
 8002e38:	2202      	movs	r2, #2
 8002e3a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	015a      	lsls	r2, r3, #5
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	4413      	add	r3, r2
 8002e44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e52:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e5a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	015a      	lsls	r2, r3, #5
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	4413      	add	r3, r2
 8002e64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e68:	461a      	mov	r2, r3
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	015a      	lsls	r2, r3, #5
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	4413      	add	r3, r2
 8002e76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	b2d8      	uxtb	r0, r3
 8002e84:	6879      	ldr	r1, [r7, #4]
 8002e86:	68fa      	ldr	r2, [r7, #12]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	4413      	add	r3, r2
 8002e8e:	00db      	lsls	r3, r3, #3
 8002e90:	440b      	add	r3, r1
 8002e92:	335c      	adds	r3, #92	; 0x5c
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	461a      	mov	r2, r3
 8002e98:	4601      	mov	r1, r0
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f005 fb5e 	bl	800855c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002ea0:	bf00      	nop
 8002ea2:	3718      	adds	r7, #24
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b08a      	sub	sp, #40	; 0x28
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb8:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	6a1b      	ldr	r3, [r3, #32]
 8002ec0:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	f003 030f 	and.w	r3, r3, #15
 8002ec8:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	0c5b      	lsrs	r3, r3, #17
 8002ece:	f003 030f 	and.w	r3, r3, #15
 8002ed2:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	091b      	lsrs	r3, r3, #4
 8002ed8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002edc:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d003      	beq.n	8002eec <HCD_RXQLVL_IRQHandler+0x44>
 8002ee4:	2b05      	cmp	r3, #5
 8002ee6:	f000 8082 	beq.w	8002fee <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002eea:	e083      	b.n	8002ff4 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d07f      	beq.n	8002ff2 <HCD_RXQLVL_IRQHandler+0x14a>
 8002ef2:	6879      	ldr	r1, [r7, #4]
 8002ef4:	69ba      	ldr	r2, [r7, #24]
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	4413      	add	r3, r2
 8002efc:	00db      	lsls	r3, r3, #3
 8002efe:	440b      	add	r3, r1
 8002f00:	3344      	adds	r3, #68	; 0x44
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d074      	beq.n	8002ff2 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6818      	ldr	r0, [r3, #0]
 8002f0c:	6879      	ldr	r1, [r7, #4]
 8002f0e:	69ba      	ldr	r2, [r7, #24]
 8002f10:	4613      	mov	r3, r2
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	4413      	add	r3, r2
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	440b      	add	r3, r1
 8002f1a:	3344      	adds	r3, #68	; 0x44
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	693a      	ldr	r2, [r7, #16]
 8002f20:	b292      	uxth	r2, r2
 8002f22:	4619      	mov	r1, r3
 8002f24:	f002 fd1f 	bl	8005966 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002f28:	6879      	ldr	r1, [r7, #4]
 8002f2a:	69ba      	ldr	r2, [r7, #24]
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	4413      	add	r3, r2
 8002f32:	00db      	lsls	r3, r3, #3
 8002f34:	440b      	add	r3, r1
 8002f36:	3344      	adds	r3, #68	; 0x44
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	18d1      	adds	r1, r2, r3
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	69ba      	ldr	r2, [r7, #24]
 8002f42:	4613      	mov	r3, r2
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	4413      	add	r3, r2
 8002f48:	00db      	lsls	r3, r3, #3
 8002f4a:	4403      	add	r3, r0
 8002f4c:	3344      	adds	r3, #68	; 0x44
 8002f4e:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002f50:	6879      	ldr	r1, [r7, #4]
 8002f52:	69ba      	ldr	r2, [r7, #24]
 8002f54:	4613      	mov	r3, r2
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	4413      	add	r3, r2
 8002f5a:	00db      	lsls	r3, r3, #3
 8002f5c:	440b      	add	r3, r1
 8002f5e:	334c      	adds	r3, #76	; 0x4c
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	18d1      	adds	r1, r2, r3
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	69ba      	ldr	r2, [r7, #24]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	4413      	add	r3, r2
 8002f70:	00db      	lsls	r3, r3, #3
 8002f72:	4403      	add	r3, r0
 8002f74:	334c      	adds	r3, #76	; 0x4c
 8002f76:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	015a      	lsls	r2, r3, #5
 8002f7c:	6a3b      	ldr	r3, [r7, #32]
 8002f7e:	4413      	add	r3, r2
 8002f80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f84:	691a      	ldr	r2, [r3, #16]
 8002f86:	4b1d      	ldr	r3, [pc, #116]	; (8002ffc <HCD_RXQLVL_IRQHandler+0x154>)
 8002f88:	4013      	ands	r3, r2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d031      	beq.n	8002ff2 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	015a      	lsls	r2, r3, #5
 8002f92:	6a3b      	ldr	r3, [r7, #32]
 8002f94:	4413      	add	r3, r2
 8002f96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002fa4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002fac:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	015a      	lsls	r2, r3, #5
 8002fb2:	6a3b      	ldr	r3, [r7, #32]
 8002fb4:	4413      	add	r3, r2
 8002fb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fba:	461a      	mov	r2, r3
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002fc0:	6879      	ldr	r1, [r7, #4]
 8002fc2:	69ba      	ldr	r2, [r7, #24]
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	4413      	add	r3, r2
 8002fca:	00db      	lsls	r3, r3, #3
 8002fcc:	440b      	add	r3, r1
 8002fce:	3350      	adds	r3, #80	; 0x50
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	f083 0301 	eor.w	r3, r3, #1
 8002fd6:	b2d8      	uxtb	r0, r3
 8002fd8:	6879      	ldr	r1, [r7, #4]
 8002fda:	69ba      	ldr	r2, [r7, #24]
 8002fdc:	4613      	mov	r3, r2
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	4413      	add	r3, r2
 8002fe2:	00db      	lsls	r3, r3, #3
 8002fe4:	440b      	add	r3, r1
 8002fe6:	3350      	adds	r3, #80	; 0x50
 8002fe8:	4602      	mov	r2, r0
 8002fea:	701a      	strb	r2, [r3, #0]
      break;
 8002fec:	e001      	b.n	8002ff2 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8002fee:	bf00      	nop
 8002ff0:	e000      	b.n	8002ff4 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8002ff2:	bf00      	nop
  }
}
 8002ff4:	bf00      	nop
 8002ff6:	3728      	adds	r7, #40	; 0x28
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	1ff80000 	.word	0x1ff80000

08003000 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b086      	sub	sp, #24
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800302c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f003 0302 	and.w	r3, r3, #2
 8003034:	2b02      	cmp	r3, #2
 8003036:	d10b      	bne.n	8003050 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f003 0301 	and.w	r3, r3, #1
 800303e:	2b01      	cmp	r3, #1
 8003040:	d102      	bne.n	8003048 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f005 fa6e 	bl	8008524 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	f043 0302 	orr.w	r3, r3, #2
 800304e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f003 0308 	and.w	r3, r3, #8
 8003056:	2b08      	cmp	r3, #8
 8003058:	d132      	bne.n	80030c0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	f043 0308 	orr.w	r3, r3, #8
 8003060:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f003 0304 	and.w	r3, r3, #4
 8003068:	2b04      	cmp	r3, #4
 800306a:	d126      	bne.n	80030ba <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	699b      	ldr	r3, [r3, #24]
 8003070:	2b02      	cmp	r3, #2
 8003072:	d113      	bne.n	800309c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800307a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800307e:	d106      	bne.n	800308e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2102      	movs	r1, #2
 8003086:	4618      	mov	r0, r3
 8003088:	f002 fda8 	bl	8005bdc <USB_InitFSLSPClkSel>
 800308c:	e011      	b.n	80030b2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2101      	movs	r1, #1
 8003094:	4618      	mov	r0, r3
 8003096:	f002 fda1 	bl	8005bdc <USB_InitFSLSPClkSel>
 800309a:	e00a      	b.n	80030b2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d106      	bne.n	80030b2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80030aa:	461a      	mov	r2, r3
 80030ac:	f64e 2360 	movw	r3, #60000	; 0xea60
 80030b0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f005 fa60 	bl	8008578 <HAL_HCD_PortEnabled_Callback>
 80030b8:	e002      	b.n	80030c0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f005 fa6a 	bl	8008594 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f003 0320 	and.w	r3, r3, #32
 80030c6:	2b20      	cmp	r3, #32
 80030c8:	d103      	bne.n	80030d2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	f043 0320 	orr.w	r3, r3, #32
 80030d0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80030d8:	461a      	mov	r2, r3
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	6013      	str	r3, [r2, #0]
}
 80030de:	bf00      	nop
 80030e0:	3718      	adds	r7, #24
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
	...

080030e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d101      	bne.n	80030fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e11f      	b.n	800333a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003100:	b2db      	uxtb	r3, r3
 8003102:	2b00      	cmp	r3, #0
 8003104:	d106      	bne.n	8003114 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f7fd fb6e 	bl	80007f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2224      	movs	r2, #36	; 0x24
 8003118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f022 0201 	bic.w	r2, r2, #1
 800312a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800313a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800314a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800314c:	f001 f9de 	bl	800450c <HAL_RCC_GetPCLK1Freq>
 8003150:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	4a7b      	ldr	r2, [pc, #492]	; (8003344 <HAL_I2C_Init+0x25c>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d807      	bhi.n	800316c <HAL_I2C_Init+0x84>
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	4a7a      	ldr	r2, [pc, #488]	; (8003348 <HAL_I2C_Init+0x260>)
 8003160:	4293      	cmp	r3, r2
 8003162:	bf94      	ite	ls
 8003164:	2301      	movls	r3, #1
 8003166:	2300      	movhi	r3, #0
 8003168:	b2db      	uxtb	r3, r3
 800316a:	e006      	b.n	800317a <HAL_I2C_Init+0x92>
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	4a77      	ldr	r2, [pc, #476]	; (800334c <HAL_I2C_Init+0x264>)
 8003170:	4293      	cmp	r3, r2
 8003172:	bf94      	ite	ls
 8003174:	2301      	movls	r3, #1
 8003176:	2300      	movhi	r3, #0
 8003178:	b2db      	uxtb	r3, r3
 800317a:	2b00      	cmp	r3, #0
 800317c:	d001      	beq.n	8003182 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e0db      	b.n	800333a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	4a72      	ldr	r2, [pc, #456]	; (8003350 <HAL_I2C_Init+0x268>)
 8003186:	fba2 2303 	umull	r2, r3, r2, r3
 800318a:	0c9b      	lsrs	r3, r3, #18
 800318c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	68ba      	ldr	r2, [r7, #8]
 800319e:	430a      	orrs	r2, r1
 80031a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	6a1b      	ldr	r3, [r3, #32]
 80031a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	4a64      	ldr	r2, [pc, #400]	; (8003344 <HAL_I2C_Init+0x25c>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d802      	bhi.n	80031bc <HAL_I2C_Init+0xd4>
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	3301      	adds	r3, #1
 80031ba:	e009      	b.n	80031d0 <HAL_I2C_Init+0xe8>
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80031c2:	fb02 f303 	mul.w	r3, r2, r3
 80031c6:	4a63      	ldr	r2, [pc, #396]	; (8003354 <HAL_I2C_Init+0x26c>)
 80031c8:	fba2 2303 	umull	r2, r3, r2, r3
 80031cc:	099b      	lsrs	r3, r3, #6
 80031ce:	3301      	adds	r3, #1
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	6812      	ldr	r2, [r2, #0]
 80031d4:	430b      	orrs	r3, r1
 80031d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	69db      	ldr	r3, [r3, #28]
 80031de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80031e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	4956      	ldr	r1, [pc, #344]	; (8003344 <HAL_I2C_Init+0x25c>)
 80031ec:	428b      	cmp	r3, r1
 80031ee:	d80d      	bhi.n	800320c <HAL_I2C_Init+0x124>
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	1e59      	subs	r1, r3, #1
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	005b      	lsls	r3, r3, #1
 80031fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80031fe:	3301      	adds	r3, #1
 8003200:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003204:	2b04      	cmp	r3, #4
 8003206:	bf38      	it	cc
 8003208:	2304      	movcc	r3, #4
 800320a:	e04f      	b.n	80032ac <HAL_I2C_Init+0x1c4>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d111      	bne.n	8003238 <HAL_I2C_Init+0x150>
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	1e58      	subs	r0, r3, #1
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6859      	ldr	r1, [r3, #4]
 800321c:	460b      	mov	r3, r1
 800321e:	005b      	lsls	r3, r3, #1
 8003220:	440b      	add	r3, r1
 8003222:	fbb0 f3f3 	udiv	r3, r0, r3
 8003226:	3301      	adds	r3, #1
 8003228:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800322c:	2b00      	cmp	r3, #0
 800322e:	bf0c      	ite	eq
 8003230:	2301      	moveq	r3, #1
 8003232:	2300      	movne	r3, #0
 8003234:	b2db      	uxtb	r3, r3
 8003236:	e012      	b.n	800325e <HAL_I2C_Init+0x176>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	1e58      	subs	r0, r3, #1
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6859      	ldr	r1, [r3, #4]
 8003240:	460b      	mov	r3, r1
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	440b      	add	r3, r1
 8003246:	0099      	lsls	r1, r3, #2
 8003248:	440b      	add	r3, r1
 800324a:	fbb0 f3f3 	udiv	r3, r0, r3
 800324e:	3301      	adds	r3, #1
 8003250:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003254:	2b00      	cmp	r3, #0
 8003256:	bf0c      	ite	eq
 8003258:	2301      	moveq	r3, #1
 800325a:	2300      	movne	r3, #0
 800325c:	b2db      	uxtb	r3, r3
 800325e:	2b00      	cmp	r3, #0
 8003260:	d001      	beq.n	8003266 <HAL_I2C_Init+0x17e>
 8003262:	2301      	movs	r3, #1
 8003264:	e022      	b.n	80032ac <HAL_I2C_Init+0x1c4>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d10e      	bne.n	800328c <HAL_I2C_Init+0x1a4>
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	1e58      	subs	r0, r3, #1
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6859      	ldr	r1, [r3, #4]
 8003276:	460b      	mov	r3, r1
 8003278:	005b      	lsls	r3, r3, #1
 800327a:	440b      	add	r3, r1
 800327c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003280:	3301      	adds	r3, #1
 8003282:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003286:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800328a:	e00f      	b.n	80032ac <HAL_I2C_Init+0x1c4>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	1e58      	subs	r0, r3, #1
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6859      	ldr	r1, [r3, #4]
 8003294:	460b      	mov	r3, r1
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	440b      	add	r3, r1
 800329a:	0099      	lsls	r1, r3, #2
 800329c:	440b      	add	r3, r1
 800329e:	fbb0 f3f3 	udiv	r3, r0, r3
 80032a2:	3301      	adds	r3, #1
 80032a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032ac:	6879      	ldr	r1, [r7, #4]
 80032ae:	6809      	ldr	r1, [r1, #0]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	69da      	ldr	r2, [r3, #28]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a1b      	ldr	r3, [r3, #32]
 80032c6:	431a      	orrs	r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	430a      	orrs	r2, r1
 80032ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80032da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	6911      	ldr	r1, [r2, #16]
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	68d2      	ldr	r2, [r2, #12]
 80032e6:	4311      	orrs	r1, r2
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	6812      	ldr	r2, [r2, #0]
 80032ec:	430b      	orrs	r3, r1
 80032ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	695a      	ldr	r2, [r3, #20]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	699b      	ldr	r3, [r3, #24]
 8003302:	431a      	orrs	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	430a      	orrs	r2, r1
 800330a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f042 0201 	orr.w	r2, r2, #1
 800331a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2220      	movs	r2, #32
 8003326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3710      	adds	r7, #16
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	000186a0 	.word	0x000186a0
 8003348:	001e847f 	.word	0x001e847f
 800334c:	003d08ff 	.word	0x003d08ff
 8003350:	431bde83 	.word	0x431bde83
 8003354:	10624dd3 	.word	0x10624dd3

08003358 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b088      	sub	sp, #32
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d101      	bne.n	800336a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e128      	b.n	80035bc <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003370:	b2db      	uxtb	r3, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d109      	bne.n	800338a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a90      	ldr	r2, [pc, #576]	; (80035c4 <HAL_I2S_Init+0x26c>)
 8003382:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f7fd faab 	bl	80008e0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2202      	movs	r2, #2
 800338e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	69db      	ldr	r3, [r3, #28]
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	6812      	ldr	r2, [r2, #0]
 800339c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80033a0:	f023 030f 	bic.w	r3, r3, #15
 80033a4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2202      	movs	r2, #2
 80033ac:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	695b      	ldr	r3, [r3, #20]
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d060      	beq.n	8003478 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d102      	bne.n	80033c4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80033be:	2310      	movs	r3, #16
 80033c0:	617b      	str	r3, [r7, #20]
 80033c2:	e001      	b.n	80033c8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80033c4:	2320      	movs	r3, #32
 80033c6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	2b20      	cmp	r3, #32
 80033ce:	d802      	bhi.n	80033d6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	005b      	lsls	r3, r3, #1
 80033d4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80033d6:	2001      	movs	r0, #1
 80033d8:	f001 f9a2 	bl	8004720 <HAL_RCCEx_GetPeriphCLKFreq>
 80033dc:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	691b      	ldr	r3, [r3, #16]
 80033e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033e6:	d125      	bne.n	8003434 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d010      	beq.n	8003412 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	68fa      	ldr	r2, [r7, #12]
 80033f6:	fbb2 f2f3 	udiv	r2, r2, r3
 80033fa:	4613      	mov	r3, r2
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	4413      	add	r3, r2
 8003400:	005b      	lsls	r3, r3, #1
 8003402:	461a      	mov	r2, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	695b      	ldr	r3, [r3, #20]
 8003408:	fbb2 f3f3 	udiv	r3, r2, r3
 800340c:	3305      	adds	r3, #5
 800340e:	613b      	str	r3, [r7, #16]
 8003410:	e01f      	b.n	8003452 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	00db      	lsls	r3, r3, #3
 8003416:	68fa      	ldr	r2, [r7, #12]
 8003418:	fbb2 f2f3 	udiv	r2, r2, r3
 800341c:	4613      	mov	r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	4413      	add	r3, r2
 8003422:	005b      	lsls	r3, r3, #1
 8003424:	461a      	mov	r2, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	695b      	ldr	r3, [r3, #20]
 800342a:	fbb2 f3f3 	udiv	r3, r2, r3
 800342e:	3305      	adds	r3, #5
 8003430:	613b      	str	r3, [r7, #16]
 8003432:	e00e      	b.n	8003452 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003434:	68fa      	ldr	r2, [r7, #12]
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	fbb2 f2f3 	udiv	r2, r2, r3
 800343c:	4613      	mov	r3, r2
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	4413      	add	r3, r2
 8003442:	005b      	lsls	r3, r3, #1
 8003444:	461a      	mov	r2, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	695b      	ldr	r3, [r3, #20]
 800344a:	fbb2 f3f3 	udiv	r3, r2, r3
 800344e:	3305      	adds	r3, #5
 8003450:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	4a5c      	ldr	r2, [pc, #368]	; (80035c8 <HAL_I2S_Init+0x270>)
 8003456:	fba2 2303 	umull	r2, r3, r2, r3
 800345a:	08db      	lsrs	r3, r3, #3
 800345c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	f003 0301 	and.w	r3, r3, #1
 8003464:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003466:	693a      	ldr	r2, [r7, #16]
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	085b      	lsrs	r3, r3, #1
 800346e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	021b      	lsls	r3, r3, #8
 8003474:	61bb      	str	r3, [r7, #24]
 8003476:	e003      	b.n	8003480 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003478:	2302      	movs	r3, #2
 800347a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800347c:	2300      	movs	r3, #0
 800347e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	2b01      	cmp	r3, #1
 8003484:	d902      	bls.n	800348c <HAL_I2S_Init+0x134>
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	2bff      	cmp	r3, #255	; 0xff
 800348a:	d907      	bls.n	800349c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003490:	f043 0210 	orr.w	r2, r3, #16
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e08f      	b.n	80035bc <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	691a      	ldr	r2, [r3, #16]
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	ea42 0103 	orr.w	r1, r2, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	69fa      	ldr	r2, [r7, #28]
 80034ac:	430a      	orrs	r2, r1
 80034ae:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	69db      	ldr	r3, [r3, #28]
 80034b6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80034ba:	f023 030f 	bic.w	r3, r3, #15
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	6851      	ldr	r1, [r2, #4]
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	6892      	ldr	r2, [r2, #8]
 80034c6:	4311      	orrs	r1, r2
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	68d2      	ldr	r2, [r2, #12]
 80034cc:	4311      	orrs	r1, r2
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	6992      	ldr	r2, [r2, #24]
 80034d2:	430a      	orrs	r2, r1
 80034d4:	431a      	orrs	r2, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034de:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a1b      	ldr	r3, [r3, #32]
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d161      	bne.n	80035ac <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	4a38      	ldr	r2, [pc, #224]	; (80035cc <HAL_I2S_Init+0x274>)
 80034ec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a37      	ldr	r2, [pc, #220]	; (80035d0 <HAL_I2S_Init+0x278>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d101      	bne.n	80034fc <HAL_I2S_Init+0x1a4>
 80034f8:	4b36      	ldr	r3, [pc, #216]	; (80035d4 <HAL_I2S_Init+0x27c>)
 80034fa:	e001      	b.n	8003500 <HAL_I2S_Init+0x1a8>
 80034fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003500:	69db      	ldr	r3, [r3, #28]
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	6812      	ldr	r2, [r2, #0]
 8003506:	4932      	ldr	r1, [pc, #200]	; (80035d0 <HAL_I2S_Init+0x278>)
 8003508:	428a      	cmp	r2, r1
 800350a:	d101      	bne.n	8003510 <HAL_I2S_Init+0x1b8>
 800350c:	4a31      	ldr	r2, [pc, #196]	; (80035d4 <HAL_I2S_Init+0x27c>)
 800350e:	e001      	b.n	8003514 <HAL_I2S_Init+0x1bc>
 8003510:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003514:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003518:	f023 030f 	bic.w	r3, r3, #15
 800351c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a2b      	ldr	r2, [pc, #172]	; (80035d0 <HAL_I2S_Init+0x278>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d101      	bne.n	800352c <HAL_I2S_Init+0x1d4>
 8003528:	4b2a      	ldr	r3, [pc, #168]	; (80035d4 <HAL_I2S_Init+0x27c>)
 800352a:	e001      	b.n	8003530 <HAL_I2S_Init+0x1d8>
 800352c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003530:	2202      	movs	r2, #2
 8003532:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a25      	ldr	r2, [pc, #148]	; (80035d0 <HAL_I2S_Init+0x278>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d101      	bne.n	8003542 <HAL_I2S_Init+0x1ea>
 800353e:	4b25      	ldr	r3, [pc, #148]	; (80035d4 <HAL_I2S_Init+0x27c>)
 8003540:	e001      	b.n	8003546 <HAL_I2S_Init+0x1ee>
 8003542:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003546:	69db      	ldr	r3, [r3, #28]
 8003548:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003552:	d003      	beq.n	800355c <HAL_I2S_Init+0x204>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d103      	bne.n	8003564 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800355c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003560:	613b      	str	r3, [r7, #16]
 8003562:	e001      	b.n	8003568 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003564:	2300      	movs	r3, #0
 8003566:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	b299      	uxth	r1, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	699b      	ldr	r3, [r3, #24]
 800357c:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800357e:	4303      	orrs	r3, r0
 8003580:	b29b      	uxth	r3, r3
 8003582:	430b      	orrs	r3, r1
 8003584:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003586:	4313      	orrs	r3, r2
 8003588:	b29a      	uxth	r2, r3
 800358a:	897b      	ldrh	r3, [r7, #10]
 800358c:	4313      	orrs	r3, r2
 800358e:	b29b      	uxth	r3, r3
 8003590:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003594:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a0d      	ldr	r2, [pc, #52]	; (80035d0 <HAL_I2S_Init+0x278>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d101      	bne.n	80035a4 <HAL_I2S_Init+0x24c>
 80035a0:	4b0c      	ldr	r3, [pc, #48]	; (80035d4 <HAL_I2S_Init+0x27c>)
 80035a2:	e001      	b.n	80035a8 <HAL_I2S_Init+0x250>
 80035a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035a8:	897a      	ldrh	r2, [r7, #10]
 80035aa:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2201      	movs	r2, #1
 80035b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80035ba:	2300      	movs	r3, #0
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3720      	adds	r7, #32
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	080036cf 	.word	0x080036cf
 80035c8:	cccccccd 	.word	0xcccccccd
 80035cc:	080037e5 	.word	0x080037e5
 80035d0:	40003800 	.word	0x40003800
 80035d4:	40003400 	.word	0x40003400

080035d8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80035e0:	bf00      	nop
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80035f4:	bf00      	nop
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003620:	881a      	ldrh	r2, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362c:	1c9a      	adds	r2, r3, #2
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003636:	b29b      	uxth	r3, r3
 8003638:	3b01      	subs	r3, #1
 800363a:	b29a      	uxth	r2, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003644:	b29b      	uxth	r3, r3
 8003646:	2b00      	cmp	r3, #0
 8003648:	d10e      	bne.n	8003668 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	685a      	ldr	r2, [r3, #4]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003658:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2201      	movs	r2, #1
 800365e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f7ff ffb8 	bl	80035d8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003668:	bf00      	nop
 800366a:	3708      	adds	r7, #8
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}

08003670 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	68da      	ldr	r2, [r3, #12]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003682:	b292      	uxth	r2, r2
 8003684:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800368a:	1c9a      	adds	r2, r3, #2
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003694:	b29b      	uxth	r3, r3
 8003696:	3b01      	subs	r3, #1
 8003698:	b29a      	uxth	r2, r3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d10e      	bne.n	80036c6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	685a      	ldr	r2, [r3, #4]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80036b6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f7ff ff93 	bl	80035ec <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80036c6:	bf00      	nop
 80036c8:	3708      	adds	r7, #8
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}

080036ce <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80036ce:	b580      	push	{r7, lr}
 80036d0:	b086      	sub	sp, #24
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b04      	cmp	r3, #4
 80036e8:	d13a      	bne.n	8003760 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	f003 0301 	and.w	r3, r3, #1
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d109      	bne.n	8003708 <I2S_IRQHandler+0x3a>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036fe:	2b40      	cmp	r3, #64	; 0x40
 8003700:	d102      	bne.n	8003708 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f7ff ffb4 	bl	8003670 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800370e:	2b40      	cmp	r3, #64	; 0x40
 8003710:	d126      	bne.n	8003760 <I2S_IRQHandler+0x92>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f003 0320 	and.w	r3, r3, #32
 800371c:	2b20      	cmp	r3, #32
 800371e:	d11f      	bne.n	8003760 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	685a      	ldr	r2, [r3, #4]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800372e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003730:	2300      	movs	r3, #0
 8003732:	613b      	str	r3, [r7, #16]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	613b      	str	r3, [r7, #16]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	613b      	str	r3, [r7, #16]
 8003744:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2201      	movs	r2, #1
 800374a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003752:	f043 0202 	orr.w	r2, r3, #2
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f7ff ff50 	bl	8003600 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003766:	b2db      	uxtb	r3, r3
 8003768:	2b03      	cmp	r3, #3
 800376a:	d136      	bne.n	80037da <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	f003 0302 	and.w	r3, r3, #2
 8003772:	2b02      	cmp	r3, #2
 8003774:	d109      	bne.n	800378a <I2S_IRQHandler+0xbc>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003780:	2b80      	cmp	r3, #128	; 0x80
 8003782:	d102      	bne.n	800378a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f7ff ff45 	bl	8003614 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	f003 0308 	and.w	r3, r3, #8
 8003790:	2b08      	cmp	r3, #8
 8003792:	d122      	bne.n	80037da <I2S_IRQHandler+0x10c>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f003 0320 	and.w	r3, r3, #32
 800379e:	2b20      	cmp	r3, #32
 80037a0:	d11b      	bne.n	80037da <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	685a      	ldr	r2, [r3, #4]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037b0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80037b2:	2300      	movs	r3, #0
 80037b4:	60fb      	str	r3, [r7, #12]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	60fb      	str	r3, [r7, #12]
 80037be:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037cc:	f043 0204 	orr.w	r2, r3, #4
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f7ff ff13 	bl	8003600 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037da:	bf00      	nop
 80037dc:	3718      	adds	r7, #24
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
	...

080037e4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b088      	sub	sp, #32
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4aa2      	ldr	r2, [pc, #648]	; (8003a84 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d101      	bne.n	8003802 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80037fe:	4ba2      	ldr	r3, [pc, #648]	; (8003a88 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003800:	e001      	b.n	8003806 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003802:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a9b      	ldr	r2, [pc, #620]	; (8003a84 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d101      	bne.n	8003820 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800381c:	4b9a      	ldr	r3, [pc, #616]	; (8003a88 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800381e:	e001      	b.n	8003824 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003820:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003830:	d004      	beq.n	800383c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	2b00      	cmp	r3, #0
 8003838:	f040 8099 	bne.w	800396e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	f003 0302 	and.w	r3, r3, #2
 8003842:	2b02      	cmp	r3, #2
 8003844:	d107      	bne.n	8003856 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800384c:	2b00      	cmp	r3, #0
 800384e:	d002      	beq.n	8003856 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f000 f925 	bl	8003aa0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	f003 0301 	and.w	r3, r3, #1
 800385c:	2b01      	cmp	r3, #1
 800385e:	d107      	bne.n	8003870 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003866:	2b00      	cmp	r3, #0
 8003868:	d002      	beq.n	8003870 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 f9c8 	bl	8003c00 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003876:	2b40      	cmp	r3, #64	; 0x40
 8003878:	d13a      	bne.n	80038f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	f003 0320 	and.w	r3, r3, #32
 8003880:	2b00      	cmp	r3, #0
 8003882:	d035      	beq.n	80038f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a7e      	ldr	r2, [pc, #504]	; (8003a84 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d101      	bne.n	8003892 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800388e:	4b7e      	ldr	r3, [pc, #504]	; (8003a88 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003890:	e001      	b.n	8003896 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003892:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003896:	685a      	ldr	r2, [r3, #4]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4979      	ldr	r1, [pc, #484]	; (8003a84 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800389e:	428b      	cmp	r3, r1
 80038a0:	d101      	bne.n	80038a6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80038a2:	4b79      	ldr	r3, [pc, #484]	; (8003a88 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80038a4:	e001      	b.n	80038aa <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80038a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038aa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80038ae:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	685a      	ldr	r2, [r3, #4]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038be:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80038c0:	2300      	movs	r3, #0
 80038c2:	60fb      	str	r3, [r7, #12]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	60fb      	str	r3, [r7, #12]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	60fb      	str	r3, [r7, #12]
 80038d4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2201      	movs	r2, #1
 80038da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e2:	f043 0202 	orr.w	r2, r3, #2
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f7ff fe88 	bl	8003600 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	f003 0308 	and.w	r3, r3, #8
 80038f6:	2b08      	cmp	r3, #8
 80038f8:	f040 80be 	bne.w	8003a78 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	f003 0320 	and.w	r3, r3, #32
 8003902:	2b00      	cmp	r3, #0
 8003904:	f000 80b8 	beq.w	8003a78 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	685a      	ldr	r2, [r3, #4]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003916:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a59      	ldr	r2, [pc, #356]	; (8003a84 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d101      	bne.n	8003926 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003922:	4b59      	ldr	r3, [pc, #356]	; (8003a88 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003924:	e001      	b.n	800392a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003926:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800392a:	685a      	ldr	r2, [r3, #4]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4954      	ldr	r1, [pc, #336]	; (8003a84 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003932:	428b      	cmp	r3, r1
 8003934:	d101      	bne.n	800393a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003936:	4b54      	ldr	r3, [pc, #336]	; (8003a88 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003938:	e001      	b.n	800393e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800393a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800393e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003942:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003944:	2300      	movs	r3, #0
 8003946:	60bb      	str	r3, [r7, #8]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	60bb      	str	r3, [r7, #8]
 8003950:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2201      	movs	r2, #1
 8003956:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800395e:	f043 0204 	orr.w	r2, r3, #4
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f7ff fe4a 	bl	8003600 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800396c:	e084      	b.n	8003a78 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	f003 0302 	and.w	r3, r3, #2
 8003974:	2b02      	cmp	r3, #2
 8003976:	d107      	bne.n	8003988 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800397e:	2b00      	cmp	r3, #0
 8003980:	d002      	beq.n	8003988 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f000 f8be 	bl	8003b04 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	f003 0301 	and.w	r3, r3, #1
 800398e:	2b01      	cmp	r3, #1
 8003990:	d107      	bne.n	80039a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003998:	2b00      	cmp	r3, #0
 800399a:	d002      	beq.n	80039a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f000 f8fd 	bl	8003b9c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039a8:	2b40      	cmp	r3, #64	; 0x40
 80039aa:	d12f      	bne.n	8003a0c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	f003 0320 	and.w	r3, r3, #32
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d02a      	beq.n	8003a0c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	685a      	ldr	r2, [r3, #4]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039c4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a2e      	ldr	r2, [pc, #184]	; (8003a84 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d101      	bne.n	80039d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80039d0:	4b2d      	ldr	r3, [pc, #180]	; (8003a88 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80039d2:	e001      	b.n	80039d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80039d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039d8:	685a      	ldr	r2, [r3, #4]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4929      	ldr	r1, [pc, #164]	; (8003a84 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80039e0:	428b      	cmp	r3, r1
 80039e2:	d101      	bne.n	80039e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80039e4:	4b28      	ldr	r3, [pc, #160]	; (8003a88 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80039e6:	e001      	b.n	80039ec <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80039e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039ec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80039f0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2201      	movs	r2, #1
 80039f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039fe:	f043 0202 	orr.w	r2, r3, #2
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f7ff fdfa 	bl	8003600 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	f003 0308 	and.w	r3, r3, #8
 8003a12:	2b08      	cmp	r3, #8
 8003a14:	d131      	bne.n	8003a7a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	f003 0320 	and.w	r3, r3, #32
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d02c      	beq.n	8003a7a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a17      	ldr	r2, [pc, #92]	; (8003a84 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d101      	bne.n	8003a2e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003a2a:	4b17      	ldr	r3, [pc, #92]	; (8003a88 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003a2c:	e001      	b.n	8003a32 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003a2e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a32:	685a      	ldr	r2, [r3, #4]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4912      	ldr	r1, [pc, #72]	; (8003a84 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003a3a:	428b      	cmp	r3, r1
 8003a3c:	d101      	bne.n	8003a42 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8003a3e:	4b12      	ldr	r3, [pc, #72]	; (8003a88 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003a40:	e001      	b.n	8003a46 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8003a42:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a46:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a4a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	685a      	ldr	r2, [r3, #4]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a5a:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a68:	f043 0204 	orr.w	r2, r3, #4
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f7ff fdc5 	bl	8003600 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a76:	e000      	b.n	8003a7a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003a78:	bf00      	nop
}
 8003a7a:	bf00      	nop
 8003a7c:	3720      	adds	r7, #32
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	40003800 	.word	0x40003800
 8003a88:	40003400 	.word	0x40003400

08003a8c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003a94:	bf00      	nop
 8003a96:	370c      	adds	r7, #12
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr

08003aa0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b082      	sub	sp, #8
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aac:	1c99      	adds	r1, r3, #2
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	6251      	str	r1, [r2, #36]	; 0x24
 8003ab2:	881a      	ldrh	r2, [r3, #0]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	3b01      	subs	r3, #1
 8003ac2:	b29a      	uxth	r2, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d113      	bne.n	8003afa <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	685a      	ldr	r2, [r3, #4]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ae0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d106      	bne.n	8003afa <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f7ff ffc9 	bl	8003a8c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003afa:	bf00      	nop
 8003afc:	3708      	adds	r7, #8
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
	...

08003b04 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b10:	1c99      	adds	r1, r3, #2
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	6251      	str	r1, [r2, #36]	; 0x24
 8003b16:	8819      	ldrh	r1, [r3, #0]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a1d      	ldr	r2, [pc, #116]	; (8003b94 <I2SEx_TxISR_I2SExt+0x90>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d101      	bne.n	8003b26 <I2SEx_TxISR_I2SExt+0x22>
 8003b22:	4b1d      	ldr	r3, [pc, #116]	; (8003b98 <I2SEx_TxISR_I2SExt+0x94>)
 8003b24:	e001      	b.n	8003b2a <I2SEx_TxISR_I2SExt+0x26>
 8003b26:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b2a:	460a      	mov	r2, r1
 8003b2c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	3b01      	subs	r3, #1
 8003b36:	b29a      	uxth	r2, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d121      	bne.n	8003b8a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a12      	ldr	r2, [pc, #72]	; (8003b94 <I2SEx_TxISR_I2SExt+0x90>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d101      	bne.n	8003b54 <I2SEx_TxISR_I2SExt+0x50>
 8003b50:	4b11      	ldr	r3, [pc, #68]	; (8003b98 <I2SEx_TxISR_I2SExt+0x94>)
 8003b52:	e001      	b.n	8003b58 <I2SEx_TxISR_I2SExt+0x54>
 8003b54:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b58:	685a      	ldr	r2, [r3, #4]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	490d      	ldr	r1, [pc, #52]	; (8003b94 <I2SEx_TxISR_I2SExt+0x90>)
 8003b60:	428b      	cmp	r3, r1
 8003b62:	d101      	bne.n	8003b68 <I2SEx_TxISR_I2SExt+0x64>
 8003b64:	4b0c      	ldr	r3, [pc, #48]	; (8003b98 <I2SEx_TxISR_I2SExt+0x94>)
 8003b66:	e001      	b.n	8003b6c <I2SEx_TxISR_I2SExt+0x68>
 8003b68:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b6c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b70:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d106      	bne.n	8003b8a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f7ff ff81 	bl	8003a8c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b8a:	bf00      	nop
 8003b8c:	3708      	adds	r7, #8
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	40003800 	.word	0x40003800
 8003b98:	40003400 	.word	0x40003400

08003b9c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68d8      	ldr	r0, [r3, #12]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bae:	1c99      	adds	r1, r3, #2
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003bb4:	b282      	uxth	r2, r0
 8003bb6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	3b01      	subs	r3, #1
 8003bc0:	b29a      	uxth	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d113      	bne.n	8003bf8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	685a      	ldr	r2, [r3, #4]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003bde:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d106      	bne.n	8003bf8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2201      	movs	r2, #1
 8003bee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f7ff ff4a 	bl	8003a8c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003bf8:	bf00      	nop
 8003bfa:	3708      	adds	r7, #8
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a20      	ldr	r2, [pc, #128]	; (8003c90 <I2SEx_RxISR_I2SExt+0x90>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d101      	bne.n	8003c16 <I2SEx_RxISR_I2SExt+0x16>
 8003c12:	4b20      	ldr	r3, [pc, #128]	; (8003c94 <I2SEx_RxISR_I2SExt+0x94>)
 8003c14:	e001      	b.n	8003c1a <I2SEx_RxISR_I2SExt+0x1a>
 8003c16:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c1a:	68d8      	ldr	r0, [r3, #12]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c20:	1c99      	adds	r1, r3, #2
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003c26:	b282      	uxth	r2, r0
 8003c28:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	3b01      	subs	r3, #1
 8003c32:	b29a      	uxth	r2, r3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d121      	bne.n	8003c86 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a12      	ldr	r2, [pc, #72]	; (8003c90 <I2SEx_RxISR_I2SExt+0x90>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d101      	bne.n	8003c50 <I2SEx_RxISR_I2SExt+0x50>
 8003c4c:	4b11      	ldr	r3, [pc, #68]	; (8003c94 <I2SEx_RxISR_I2SExt+0x94>)
 8003c4e:	e001      	b.n	8003c54 <I2SEx_RxISR_I2SExt+0x54>
 8003c50:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c54:	685a      	ldr	r2, [r3, #4]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	490d      	ldr	r1, [pc, #52]	; (8003c90 <I2SEx_RxISR_I2SExt+0x90>)
 8003c5c:	428b      	cmp	r3, r1
 8003c5e:	d101      	bne.n	8003c64 <I2SEx_RxISR_I2SExt+0x64>
 8003c60:	4b0c      	ldr	r3, [pc, #48]	; (8003c94 <I2SEx_RxISR_I2SExt+0x94>)
 8003c62:	e001      	b.n	8003c68 <I2SEx_RxISR_I2SExt+0x68>
 8003c64:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c68:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c6c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d106      	bne.n	8003c86 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f7ff ff03 	bl	8003a8c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c86:	bf00      	nop
 8003c88:	3708      	adds	r7, #8
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	40003800 	.word	0x40003800
 8003c94:	40003400 	.word	0x40003400

08003c98 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b086      	sub	sp, #24
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d101      	bne.n	8003caa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e25b      	b.n	8004162 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0301 	and.w	r3, r3, #1
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d075      	beq.n	8003da2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003cb6:	4ba3      	ldr	r3, [pc, #652]	; (8003f44 <HAL_RCC_OscConfig+0x2ac>)
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f003 030c 	and.w	r3, r3, #12
 8003cbe:	2b04      	cmp	r3, #4
 8003cc0:	d00c      	beq.n	8003cdc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cc2:	4ba0      	ldr	r3, [pc, #640]	; (8003f44 <HAL_RCC_OscConfig+0x2ac>)
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003cca:	2b08      	cmp	r3, #8
 8003ccc:	d112      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cce:	4b9d      	ldr	r3, [pc, #628]	; (8003f44 <HAL_RCC_OscConfig+0x2ac>)
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cda:	d10b      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cdc:	4b99      	ldr	r3, [pc, #612]	; (8003f44 <HAL_RCC_OscConfig+0x2ac>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d05b      	beq.n	8003da0 <HAL_RCC_OscConfig+0x108>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d157      	bne.n	8003da0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e236      	b.n	8004162 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cfc:	d106      	bne.n	8003d0c <HAL_RCC_OscConfig+0x74>
 8003cfe:	4b91      	ldr	r3, [pc, #580]	; (8003f44 <HAL_RCC_OscConfig+0x2ac>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a90      	ldr	r2, [pc, #576]	; (8003f44 <HAL_RCC_OscConfig+0x2ac>)
 8003d04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d08:	6013      	str	r3, [r2, #0]
 8003d0a:	e01d      	b.n	8003d48 <HAL_RCC_OscConfig+0xb0>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d14:	d10c      	bne.n	8003d30 <HAL_RCC_OscConfig+0x98>
 8003d16:	4b8b      	ldr	r3, [pc, #556]	; (8003f44 <HAL_RCC_OscConfig+0x2ac>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a8a      	ldr	r2, [pc, #552]	; (8003f44 <HAL_RCC_OscConfig+0x2ac>)
 8003d1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d20:	6013      	str	r3, [r2, #0]
 8003d22:	4b88      	ldr	r3, [pc, #544]	; (8003f44 <HAL_RCC_OscConfig+0x2ac>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a87      	ldr	r2, [pc, #540]	; (8003f44 <HAL_RCC_OscConfig+0x2ac>)
 8003d28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d2c:	6013      	str	r3, [r2, #0]
 8003d2e:	e00b      	b.n	8003d48 <HAL_RCC_OscConfig+0xb0>
 8003d30:	4b84      	ldr	r3, [pc, #528]	; (8003f44 <HAL_RCC_OscConfig+0x2ac>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a83      	ldr	r2, [pc, #524]	; (8003f44 <HAL_RCC_OscConfig+0x2ac>)
 8003d36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d3a:	6013      	str	r3, [r2, #0]
 8003d3c:	4b81      	ldr	r3, [pc, #516]	; (8003f44 <HAL_RCC_OscConfig+0x2ac>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a80      	ldr	r2, [pc, #512]	; (8003f44 <HAL_RCC_OscConfig+0x2ac>)
 8003d42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d013      	beq.n	8003d78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d50:	f7fd f9c4 	bl	80010dc <HAL_GetTick>
 8003d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d56:	e008      	b.n	8003d6a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d58:	f7fd f9c0 	bl	80010dc <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	2b64      	cmp	r3, #100	; 0x64
 8003d64:	d901      	bls.n	8003d6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e1fb      	b.n	8004162 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d6a:	4b76      	ldr	r3, [pc, #472]	; (8003f44 <HAL_RCC_OscConfig+0x2ac>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d0f0      	beq.n	8003d58 <HAL_RCC_OscConfig+0xc0>
 8003d76:	e014      	b.n	8003da2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d78:	f7fd f9b0 	bl	80010dc <HAL_GetTick>
 8003d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d7e:	e008      	b.n	8003d92 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d80:	f7fd f9ac 	bl	80010dc <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	2b64      	cmp	r3, #100	; 0x64
 8003d8c:	d901      	bls.n	8003d92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e1e7      	b.n	8004162 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d92:	4b6c      	ldr	r3, [pc, #432]	; (8003f44 <HAL_RCC_OscConfig+0x2ac>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d1f0      	bne.n	8003d80 <HAL_RCC_OscConfig+0xe8>
 8003d9e:	e000      	b.n	8003da2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003da0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0302 	and.w	r3, r3, #2
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d063      	beq.n	8003e76 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003dae:	4b65      	ldr	r3, [pc, #404]	; (8003f44 <HAL_RCC_OscConfig+0x2ac>)
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	f003 030c 	and.w	r3, r3, #12
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d00b      	beq.n	8003dd2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dba:	4b62      	ldr	r3, [pc, #392]	; (8003f44 <HAL_RCC_OscConfig+0x2ac>)
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003dc2:	2b08      	cmp	r3, #8
 8003dc4:	d11c      	bne.n	8003e00 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dc6:	4b5f      	ldr	r3, [pc, #380]	; (8003f44 <HAL_RCC_OscConfig+0x2ac>)
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d116      	bne.n	8003e00 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dd2:	4b5c      	ldr	r3, [pc, #368]	; (8003f44 <HAL_RCC_OscConfig+0x2ac>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0302 	and.w	r3, r3, #2
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d005      	beq.n	8003dea <HAL_RCC_OscConfig+0x152>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d001      	beq.n	8003dea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e1bb      	b.n	8004162 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dea:	4b56      	ldr	r3, [pc, #344]	; (8003f44 <HAL_RCC_OscConfig+0x2ac>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	00db      	lsls	r3, r3, #3
 8003df8:	4952      	ldr	r1, [pc, #328]	; (8003f44 <HAL_RCC_OscConfig+0x2ac>)
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dfe:	e03a      	b.n	8003e76 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d020      	beq.n	8003e4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e08:	4b4f      	ldr	r3, [pc, #316]	; (8003f48 <HAL_RCC_OscConfig+0x2b0>)
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e0e:	f7fd f965 	bl	80010dc <HAL_GetTick>
 8003e12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e14:	e008      	b.n	8003e28 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e16:	f7fd f961 	bl	80010dc <HAL_GetTick>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	1ad3      	subs	r3, r2, r3
 8003e20:	2b02      	cmp	r3, #2
 8003e22:	d901      	bls.n	8003e28 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e24:	2303      	movs	r3, #3
 8003e26:	e19c      	b.n	8004162 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e28:	4b46      	ldr	r3, [pc, #280]	; (8003f44 <HAL_RCC_OscConfig+0x2ac>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0302 	and.w	r3, r3, #2
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d0f0      	beq.n	8003e16 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e34:	4b43      	ldr	r3, [pc, #268]	; (8003f44 <HAL_RCC_OscConfig+0x2ac>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	691b      	ldr	r3, [r3, #16]
 8003e40:	00db      	lsls	r3, r3, #3
 8003e42:	4940      	ldr	r1, [pc, #256]	; (8003f44 <HAL_RCC_OscConfig+0x2ac>)
 8003e44:	4313      	orrs	r3, r2
 8003e46:	600b      	str	r3, [r1, #0]
 8003e48:	e015      	b.n	8003e76 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e4a:	4b3f      	ldr	r3, [pc, #252]	; (8003f48 <HAL_RCC_OscConfig+0x2b0>)
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e50:	f7fd f944 	bl	80010dc <HAL_GetTick>
 8003e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e56:	e008      	b.n	8003e6a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e58:	f7fd f940 	bl	80010dc <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d901      	bls.n	8003e6a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e17b      	b.n	8004162 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e6a:	4b36      	ldr	r3, [pc, #216]	; (8003f44 <HAL_RCC_OscConfig+0x2ac>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 0302 	and.w	r3, r3, #2
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d1f0      	bne.n	8003e58 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0308 	and.w	r3, r3, #8
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d030      	beq.n	8003ee4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	695b      	ldr	r3, [r3, #20]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d016      	beq.n	8003eb8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e8a:	4b30      	ldr	r3, [pc, #192]	; (8003f4c <HAL_RCC_OscConfig+0x2b4>)
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e90:	f7fd f924 	bl	80010dc <HAL_GetTick>
 8003e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e96:	e008      	b.n	8003eaa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e98:	f7fd f920 	bl	80010dc <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d901      	bls.n	8003eaa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e15b      	b.n	8004162 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003eaa:	4b26      	ldr	r3, [pc, #152]	; (8003f44 <HAL_RCC_OscConfig+0x2ac>)
 8003eac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eae:	f003 0302 	and.w	r3, r3, #2
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d0f0      	beq.n	8003e98 <HAL_RCC_OscConfig+0x200>
 8003eb6:	e015      	b.n	8003ee4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003eb8:	4b24      	ldr	r3, [pc, #144]	; (8003f4c <HAL_RCC_OscConfig+0x2b4>)
 8003eba:	2200      	movs	r2, #0
 8003ebc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ebe:	f7fd f90d 	bl	80010dc <HAL_GetTick>
 8003ec2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ec4:	e008      	b.n	8003ed8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ec6:	f7fd f909 	bl	80010dc <HAL_GetTick>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	2b02      	cmp	r3, #2
 8003ed2:	d901      	bls.n	8003ed8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003ed4:	2303      	movs	r3, #3
 8003ed6:	e144      	b.n	8004162 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ed8:	4b1a      	ldr	r3, [pc, #104]	; (8003f44 <HAL_RCC_OscConfig+0x2ac>)
 8003eda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003edc:	f003 0302 	and.w	r3, r3, #2
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d1f0      	bne.n	8003ec6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0304 	and.w	r3, r3, #4
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	f000 80a0 	beq.w	8004032 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ef6:	4b13      	ldr	r3, [pc, #76]	; (8003f44 <HAL_RCC_OscConfig+0x2ac>)
 8003ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d10f      	bne.n	8003f22 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f02:	2300      	movs	r3, #0
 8003f04:	60bb      	str	r3, [r7, #8]
 8003f06:	4b0f      	ldr	r3, [pc, #60]	; (8003f44 <HAL_RCC_OscConfig+0x2ac>)
 8003f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0a:	4a0e      	ldr	r2, [pc, #56]	; (8003f44 <HAL_RCC_OscConfig+0x2ac>)
 8003f0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f10:	6413      	str	r3, [r2, #64]	; 0x40
 8003f12:	4b0c      	ldr	r3, [pc, #48]	; (8003f44 <HAL_RCC_OscConfig+0x2ac>)
 8003f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f1a:	60bb      	str	r3, [r7, #8]
 8003f1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f22:	4b0b      	ldr	r3, [pc, #44]	; (8003f50 <HAL_RCC_OscConfig+0x2b8>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d121      	bne.n	8003f72 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f2e:	4b08      	ldr	r3, [pc, #32]	; (8003f50 <HAL_RCC_OscConfig+0x2b8>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a07      	ldr	r2, [pc, #28]	; (8003f50 <HAL_RCC_OscConfig+0x2b8>)
 8003f34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f3a:	f7fd f8cf 	bl	80010dc <HAL_GetTick>
 8003f3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f40:	e011      	b.n	8003f66 <HAL_RCC_OscConfig+0x2ce>
 8003f42:	bf00      	nop
 8003f44:	40023800 	.word	0x40023800
 8003f48:	42470000 	.word	0x42470000
 8003f4c:	42470e80 	.word	0x42470e80
 8003f50:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f54:	f7fd f8c2 	bl	80010dc <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	d901      	bls.n	8003f66 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e0fd      	b.n	8004162 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f66:	4b81      	ldr	r3, [pc, #516]	; (800416c <HAL_RCC_OscConfig+0x4d4>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d0f0      	beq.n	8003f54 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d106      	bne.n	8003f88 <HAL_RCC_OscConfig+0x2f0>
 8003f7a:	4b7d      	ldr	r3, [pc, #500]	; (8004170 <HAL_RCC_OscConfig+0x4d8>)
 8003f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f7e:	4a7c      	ldr	r2, [pc, #496]	; (8004170 <HAL_RCC_OscConfig+0x4d8>)
 8003f80:	f043 0301 	orr.w	r3, r3, #1
 8003f84:	6713      	str	r3, [r2, #112]	; 0x70
 8003f86:	e01c      	b.n	8003fc2 <HAL_RCC_OscConfig+0x32a>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	2b05      	cmp	r3, #5
 8003f8e:	d10c      	bne.n	8003faa <HAL_RCC_OscConfig+0x312>
 8003f90:	4b77      	ldr	r3, [pc, #476]	; (8004170 <HAL_RCC_OscConfig+0x4d8>)
 8003f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f94:	4a76      	ldr	r2, [pc, #472]	; (8004170 <HAL_RCC_OscConfig+0x4d8>)
 8003f96:	f043 0304 	orr.w	r3, r3, #4
 8003f9a:	6713      	str	r3, [r2, #112]	; 0x70
 8003f9c:	4b74      	ldr	r3, [pc, #464]	; (8004170 <HAL_RCC_OscConfig+0x4d8>)
 8003f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa0:	4a73      	ldr	r2, [pc, #460]	; (8004170 <HAL_RCC_OscConfig+0x4d8>)
 8003fa2:	f043 0301 	orr.w	r3, r3, #1
 8003fa6:	6713      	str	r3, [r2, #112]	; 0x70
 8003fa8:	e00b      	b.n	8003fc2 <HAL_RCC_OscConfig+0x32a>
 8003faa:	4b71      	ldr	r3, [pc, #452]	; (8004170 <HAL_RCC_OscConfig+0x4d8>)
 8003fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fae:	4a70      	ldr	r2, [pc, #448]	; (8004170 <HAL_RCC_OscConfig+0x4d8>)
 8003fb0:	f023 0301 	bic.w	r3, r3, #1
 8003fb4:	6713      	str	r3, [r2, #112]	; 0x70
 8003fb6:	4b6e      	ldr	r3, [pc, #440]	; (8004170 <HAL_RCC_OscConfig+0x4d8>)
 8003fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fba:	4a6d      	ldr	r2, [pc, #436]	; (8004170 <HAL_RCC_OscConfig+0x4d8>)
 8003fbc:	f023 0304 	bic.w	r3, r3, #4
 8003fc0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d015      	beq.n	8003ff6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fca:	f7fd f887 	bl	80010dc <HAL_GetTick>
 8003fce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fd0:	e00a      	b.n	8003fe8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fd2:	f7fd f883 	bl	80010dc <HAL_GetTick>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d901      	bls.n	8003fe8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003fe4:	2303      	movs	r3, #3
 8003fe6:	e0bc      	b.n	8004162 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fe8:	4b61      	ldr	r3, [pc, #388]	; (8004170 <HAL_RCC_OscConfig+0x4d8>)
 8003fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fec:	f003 0302 	and.w	r3, r3, #2
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d0ee      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x33a>
 8003ff4:	e014      	b.n	8004020 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ff6:	f7fd f871 	bl	80010dc <HAL_GetTick>
 8003ffa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ffc:	e00a      	b.n	8004014 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ffe:	f7fd f86d 	bl	80010dc <HAL_GetTick>
 8004002:	4602      	mov	r2, r0
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	f241 3288 	movw	r2, #5000	; 0x1388
 800400c:	4293      	cmp	r3, r2
 800400e:	d901      	bls.n	8004014 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004010:	2303      	movs	r3, #3
 8004012:	e0a6      	b.n	8004162 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004014:	4b56      	ldr	r3, [pc, #344]	; (8004170 <HAL_RCC_OscConfig+0x4d8>)
 8004016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004018:	f003 0302 	and.w	r3, r3, #2
 800401c:	2b00      	cmp	r3, #0
 800401e:	d1ee      	bne.n	8003ffe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004020:	7dfb      	ldrb	r3, [r7, #23]
 8004022:	2b01      	cmp	r3, #1
 8004024:	d105      	bne.n	8004032 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004026:	4b52      	ldr	r3, [pc, #328]	; (8004170 <HAL_RCC_OscConfig+0x4d8>)
 8004028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402a:	4a51      	ldr	r2, [pc, #324]	; (8004170 <HAL_RCC_OscConfig+0x4d8>)
 800402c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004030:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	699b      	ldr	r3, [r3, #24]
 8004036:	2b00      	cmp	r3, #0
 8004038:	f000 8092 	beq.w	8004160 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800403c:	4b4c      	ldr	r3, [pc, #304]	; (8004170 <HAL_RCC_OscConfig+0x4d8>)
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	f003 030c 	and.w	r3, r3, #12
 8004044:	2b08      	cmp	r3, #8
 8004046:	d05c      	beq.n	8004102 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	699b      	ldr	r3, [r3, #24]
 800404c:	2b02      	cmp	r3, #2
 800404e:	d141      	bne.n	80040d4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004050:	4b48      	ldr	r3, [pc, #288]	; (8004174 <HAL_RCC_OscConfig+0x4dc>)
 8004052:	2200      	movs	r2, #0
 8004054:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004056:	f7fd f841 	bl	80010dc <HAL_GetTick>
 800405a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800405c:	e008      	b.n	8004070 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800405e:	f7fd f83d 	bl	80010dc <HAL_GetTick>
 8004062:	4602      	mov	r2, r0
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	2b02      	cmp	r3, #2
 800406a:	d901      	bls.n	8004070 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800406c:	2303      	movs	r3, #3
 800406e:	e078      	b.n	8004162 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004070:	4b3f      	ldr	r3, [pc, #252]	; (8004170 <HAL_RCC_OscConfig+0x4d8>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004078:	2b00      	cmp	r3, #0
 800407a:	d1f0      	bne.n	800405e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	69da      	ldr	r2, [r3, #28]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6a1b      	ldr	r3, [r3, #32]
 8004084:	431a      	orrs	r2, r3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408a:	019b      	lsls	r3, r3, #6
 800408c:	431a      	orrs	r2, r3
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004092:	085b      	lsrs	r3, r3, #1
 8004094:	3b01      	subs	r3, #1
 8004096:	041b      	lsls	r3, r3, #16
 8004098:	431a      	orrs	r2, r3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800409e:	061b      	lsls	r3, r3, #24
 80040a0:	4933      	ldr	r1, [pc, #204]	; (8004170 <HAL_RCC_OscConfig+0x4d8>)
 80040a2:	4313      	orrs	r3, r2
 80040a4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040a6:	4b33      	ldr	r3, [pc, #204]	; (8004174 <HAL_RCC_OscConfig+0x4dc>)
 80040a8:	2201      	movs	r2, #1
 80040aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ac:	f7fd f816 	bl	80010dc <HAL_GetTick>
 80040b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040b2:	e008      	b.n	80040c6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040b4:	f7fd f812 	bl	80010dc <HAL_GetTick>
 80040b8:	4602      	mov	r2, r0
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d901      	bls.n	80040c6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	e04d      	b.n	8004162 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040c6:	4b2a      	ldr	r3, [pc, #168]	; (8004170 <HAL_RCC_OscConfig+0x4d8>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d0f0      	beq.n	80040b4 <HAL_RCC_OscConfig+0x41c>
 80040d2:	e045      	b.n	8004160 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040d4:	4b27      	ldr	r3, [pc, #156]	; (8004174 <HAL_RCC_OscConfig+0x4dc>)
 80040d6:	2200      	movs	r2, #0
 80040d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040da:	f7fc ffff 	bl	80010dc <HAL_GetTick>
 80040de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040e0:	e008      	b.n	80040f4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040e2:	f7fc fffb 	bl	80010dc <HAL_GetTick>
 80040e6:	4602      	mov	r2, r0
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	1ad3      	subs	r3, r2, r3
 80040ec:	2b02      	cmp	r3, #2
 80040ee:	d901      	bls.n	80040f4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80040f0:	2303      	movs	r3, #3
 80040f2:	e036      	b.n	8004162 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040f4:	4b1e      	ldr	r3, [pc, #120]	; (8004170 <HAL_RCC_OscConfig+0x4d8>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d1f0      	bne.n	80040e2 <HAL_RCC_OscConfig+0x44a>
 8004100:	e02e      	b.n	8004160 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	699b      	ldr	r3, [r3, #24]
 8004106:	2b01      	cmp	r3, #1
 8004108:	d101      	bne.n	800410e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e029      	b.n	8004162 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800410e:	4b18      	ldr	r3, [pc, #96]	; (8004170 <HAL_RCC_OscConfig+0x4d8>)
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	69db      	ldr	r3, [r3, #28]
 800411e:	429a      	cmp	r2, r3
 8004120:	d11c      	bne.n	800415c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800412c:	429a      	cmp	r2, r3
 800412e:	d115      	bne.n	800415c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004136:	4013      	ands	r3, r2
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800413c:	4293      	cmp	r3, r2
 800413e:	d10d      	bne.n	800415c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800414a:	429a      	cmp	r2, r3
 800414c:	d106      	bne.n	800415c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004158:	429a      	cmp	r2, r3
 800415a:	d001      	beq.n	8004160 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e000      	b.n	8004162 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004160:	2300      	movs	r3, #0
}
 8004162:	4618      	mov	r0, r3
 8004164:	3718      	adds	r7, #24
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	40007000 	.word	0x40007000
 8004170:	40023800 	.word	0x40023800
 8004174:	42470060 	.word	0x42470060

08004178 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b084      	sub	sp, #16
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d101      	bne.n	800418c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	e0cc      	b.n	8004326 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800418c:	4b68      	ldr	r3, [pc, #416]	; (8004330 <HAL_RCC_ClockConfig+0x1b8>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 030f 	and.w	r3, r3, #15
 8004194:	683a      	ldr	r2, [r7, #0]
 8004196:	429a      	cmp	r2, r3
 8004198:	d90c      	bls.n	80041b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800419a:	4b65      	ldr	r3, [pc, #404]	; (8004330 <HAL_RCC_ClockConfig+0x1b8>)
 800419c:	683a      	ldr	r2, [r7, #0]
 800419e:	b2d2      	uxtb	r2, r2
 80041a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041a2:	4b63      	ldr	r3, [pc, #396]	; (8004330 <HAL_RCC_ClockConfig+0x1b8>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 030f 	and.w	r3, r3, #15
 80041aa:	683a      	ldr	r2, [r7, #0]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d001      	beq.n	80041b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e0b8      	b.n	8004326 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0302 	and.w	r3, r3, #2
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d020      	beq.n	8004202 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0304 	and.w	r3, r3, #4
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d005      	beq.n	80041d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041cc:	4b59      	ldr	r3, [pc, #356]	; (8004334 <HAL_RCC_ClockConfig+0x1bc>)
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	4a58      	ldr	r2, [pc, #352]	; (8004334 <HAL_RCC_ClockConfig+0x1bc>)
 80041d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80041d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0308 	and.w	r3, r3, #8
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d005      	beq.n	80041f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041e4:	4b53      	ldr	r3, [pc, #332]	; (8004334 <HAL_RCC_ClockConfig+0x1bc>)
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	4a52      	ldr	r2, [pc, #328]	; (8004334 <HAL_RCC_ClockConfig+0x1bc>)
 80041ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80041ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041f0:	4b50      	ldr	r3, [pc, #320]	; (8004334 <HAL_RCC_ClockConfig+0x1bc>)
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	494d      	ldr	r1, [pc, #308]	; (8004334 <HAL_RCC_ClockConfig+0x1bc>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0301 	and.w	r3, r3, #1
 800420a:	2b00      	cmp	r3, #0
 800420c:	d044      	beq.n	8004298 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	2b01      	cmp	r3, #1
 8004214:	d107      	bne.n	8004226 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004216:	4b47      	ldr	r3, [pc, #284]	; (8004334 <HAL_RCC_ClockConfig+0x1bc>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d119      	bne.n	8004256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e07f      	b.n	8004326 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	2b02      	cmp	r3, #2
 800422c:	d003      	beq.n	8004236 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004232:	2b03      	cmp	r3, #3
 8004234:	d107      	bne.n	8004246 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004236:	4b3f      	ldr	r3, [pc, #252]	; (8004334 <HAL_RCC_ClockConfig+0x1bc>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d109      	bne.n	8004256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e06f      	b.n	8004326 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004246:	4b3b      	ldr	r3, [pc, #236]	; (8004334 <HAL_RCC_ClockConfig+0x1bc>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 0302 	and.w	r3, r3, #2
 800424e:	2b00      	cmp	r3, #0
 8004250:	d101      	bne.n	8004256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e067      	b.n	8004326 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004256:	4b37      	ldr	r3, [pc, #220]	; (8004334 <HAL_RCC_ClockConfig+0x1bc>)
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f023 0203 	bic.w	r2, r3, #3
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	4934      	ldr	r1, [pc, #208]	; (8004334 <HAL_RCC_ClockConfig+0x1bc>)
 8004264:	4313      	orrs	r3, r2
 8004266:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004268:	f7fc ff38 	bl	80010dc <HAL_GetTick>
 800426c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800426e:	e00a      	b.n	8004286 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004270:	f7fc ff34 	bl	80010dc <HAL_GetTick>
 8004274:	4602      	mov	r2, r0
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	f241 3288 	movw	r2, #5000	; 0x1388
 800427e:	4293      	cmp	r3, r2
 8004280:	d901      	bls.n	8004286 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	e04f      	b.n	8004326 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004286:	4b2b      	ldr	r3, [pc, #172]	; (8004334 <HAL_RCC_ClockConfig+0x1bc>)
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	f003 020c 	and.w	r2, r3, #12
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	429a      	cmp	r2, r3
 8004296:	d1eb      	bne.n	8004270 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004298:	4b25      	ldr	r3, [pc, #148]	; (8004330 <HAL_RCC_ClockConfig+0x1b8>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 030f 	and.w	r3, r3, #15
 80042a0:	683a      	ldr	r2, [r7, #0]
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d20c      	bcs.n	80042c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042a6:	4b22      	ldr	r3, [pc, #136]	; (8004330 <HAL_RCC_ClockConfig+0x1b8>)
 80042a8:	683a      	ldr	r2, [r7, #0]
 80042aa:	b2d2      	uxtb	r2, r2
 80042ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ae:	4b20      	ldr	r3, [pc, #128]	; (8004330 <HAL_RCC_ClockConfig+0x1b8>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 030f 	and.w	r3, r3, #15
 80042b6:	683a      	ldr	r2, [r7, #0]
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d001      	beq.n	80042c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e032      	b.n	8004326 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0304 	and.w	r3, r3, #4
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d008      	beq.n	80042de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042cc:	4b19      	ldr	r3, [pc, #100]	; (8004334 <HAL_RCC_ClockConfig+0x1bc>)
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	4916      	ldr	r1, [pc, #88]	; (8004334 <HAL_RCC_ClockConfig+0x1bc>)
 80042da:	4313      	orrs	r3, r2
 80042dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0308 	and.w	r3, r3, #8
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d009      	beq.n	80042fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042ea:	4b12      	ldr	r3, [pc, #72]	; (8004334 <HAL_RCC_ClockConfig+0x1bc>)
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	00db      	lsls	r3, r3, #3
 80042f8:	490e      	ldr	r1, [pc, #56]	; (8004334 <HAL_RCC_ClockConfig+0x1bc>)
 80042fa:	4313      	orrs	r3, r2
 80042fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80042fe:	f000 f821 	bl	8004344 <HAL_RCC_GetSysClockFreq>
 8004302:	4601      	mov	r1, r0
 8004304:	4b0b      	ldr	r3, [pc, #44]	; (8004334 <HAL_RCC_ClockConfig+0x1bc>)
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	091b      	lsrs	r3, r3, #4
 800430a:	f003 030f 	and.w	r3, r3, #15
 800430e:	4a0a      	ldr	r2, [pc, #40]	; (8004338 <HAL_RCC_ClockConfig+0x1c0>)
 8004310:	5cd3      	ldrb	r3, [r2, r3]
 8004312:	fa21 f303 	lsr.w	r3, r1, r3
 8004316:	4a09      	ldr	r2, [pc, #36]	; (800433c <HAL_RCC_ClockConfig+0x1c4>)
 8004318:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800431a:	4b09      	ldr	r3, [pc, #36]	; (8004340 <HAL_RCC_ClockConfig+0x1c8>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4618      	mov	r0, r3
 8004320:	f7fc fe98 	bl	8001054 <HAL_InitTick>

  return HAL_OK;
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	3710      	adds	r7, #16
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	40023c00 	.word	0x40023c00
 8004334:	40023800 	.word	0x40023800
 8004338:	0800980c 	.word	0x0800980c
 800433c:	20000000 	.word	0x20000000
 8004340:	20000004 	.word	0x20000004

08004344 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004344:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004346:	b085      	sub	sp, #20
 8004348:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800434a:	2300      	movs	r3, #0
 800434c:	607b      	str	r3, [r7, #4]
 800434e:	2300      	movs	r3, #0
 8004350:	60fb      	str	r3, [r7, #12]
 8004352:	2300      	movs	r3, #0
 8004354:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004356:	2300      	movs	r3, #0
 8004358:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800435a:	4b63      	ldr	r3, [pc, #396]	; (80044e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	f003 030c 	and.w	r3, r3, #12
 8004362:	2b04      	cmp	r3, #4
 8004364:	d007      	beq.n	8004376 <HAL_RCC_GetSysClockFreq+0x32>
 8004366:	2b08      	cmp	r3, #8
 8004368:	d008      	beq.n	800437c <HAL_RCC_GetSysClockFreq+0x38>
 800436a:	2b00      	cmp	r3, #0
 800436c:	f040 80b4 	bne.w	80044d8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004370:	4b5e      	ldr	r3, [pc, #376]	; (80044ec <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004372:	60bb      	str	r3, [r7, #8]
       break;
 8004374:	e0b3      	b.n	80044de <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004376:	4b5e      	ldr	r3, [pc, #376]	; (80044f0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004378:	60bb      	str	r3, [r7, #8]
      break;
 800437a:	e0b0      	b.n	80044de <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800437c:	4b5a      	ldr	r3, [pc, #360]	; (80044e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004384:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004386:	4b58      	ldr	r3, [pc, #352]	; (80044e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800438e:	2b00      	cmp	r3, #0
 8004390:	d04a      	beq.n	8004428 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004392:	4b55      	ldr	r3, [pc, #340]	; (80044e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	099b      	lsrs	r3, r3, #6
 8004398:	f04f 0400 	mov.w	r4, #0
 800439c:	f240 11ff 	movw	r1, #511	; 0x1ff
 80043a0:	f04f 0200 	mov.w	r2, #0
 80043a4:	ea03 0501 	and.w	r5, r3, r1
 80043a8:	ea04 0602 	and.w	r6, r4, r2
 80043ac:	4629      	mov	r1, r5
 80043ae:	4632      	mov	r2, r6
 80043b0:	f04f 0300 	mov.w	r3, #0
 80043b4:	f04f 0400 	mov.w	r4, #0
 80043b8:	0154      	lsls	r4, r2, #5
 80043ba:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80043be:	014b      	lsls	r3, r1, #5
 80043c0:	4619      	mov	r1, r3
 80043c2:	4622      	mov	r2, r4
 80043c4:	1b49      	subs	r1, r1, r5
 80043c6:	eb62 0206 	sbc.w	r2, r2, r6
 80043ca:	f04f 0300 	mov.w	r3, #0
 80043ce:	f04f 0400 	mov.w	r4, #0
 80043d2:	0194      	lsls	r4, r2, #6
 80043d4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80043d8:	018b      	lsls	r3, r1, #6
 80043da:	1a5b      	subs	r3, r3, r1
 80043dc:	eb64 0402 	sbc.w	r4, r4, r2
 80043e0:	f04f 0100 	mov.w	r1, #0
 80043e4:	f04f 0200 	mov.w	r2, #0
 80043e8:	00e2      	lsls	r2, r4, #3
 80043ea:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80043ee:	00d9      	lsls	r1, r3, #3
 80043f0:	460b      	mov	r3, r1
 80043f2:	4614      	mov	r4, r2
 80043f4:	195b      	adds	r3, r3, r5
 80043f6:	eb44 0406 	adc.w	r4, r4, r6
 80043fa:	f04f 0100 	mov.w	r1, #0
 80043fe:	f04f 0200 	mov.w	r2, #0
 8004402:	0262      	lsls	r2, r4, #9
 8004404:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004408:	0259      	lsls	r1, r3, #9
 800440a:	460b      	mov	r3, r1
 800440c:	4614      	mov	r4, r2
 800440e:	4618      	mov	r0, r3
 8004410:	4621      	mov	r1, r4
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f04f 0400 	mov.w	r4, #0
 8004418:	461a      	mov	r2, r3
 800441a:	4623      	mov	r3, r4
 800441c:	f7fb ff28 	bl	8000270 <__aeabi_uldivmod>
 8004420:	4603      	mov	r3, r0
 8004422:	460c      	mov	r4, r1
 8004424:	60fb      	str	r3, [r7, #12]
 8004426:	e049      	b.n	80044bc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004428:	4b2f      	ldr	r3, [pc, #188]	; (80044e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	099b      	lsrs	r3, r3, #6
 800442e:	f04f 0400 	mov.w	r4, #0
 8004432:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004436:	f04f 0200 	mov.w	r2, #0
 800443a:	ea03 0501 	and.w	r5, r3, r1
 800443e:	ea04 0602 	and.w	r6, r4, r2
 8004442:	4629      	mov	r1, r5
 8004444:	4632      	mov	r2, r6
 8004446:	f04f 0300 	mov.w	r3, #0
 800444a:	f04f 0400 	mov.w	r4, #0
 800444e:	0154      	lsls	r4, r2, #5
 8004450:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004454:	014b      	lsls	r3, r1, #5
 8004456:	4619      	mov	r1, r3
 8004458:	4622      	mov	r2, r4
 800445a:	1b49      	subs	r1, r1, r5
 800445c:	eb62 0206 	sbc.w	r2, r2, r6
 8004460:	f04f 0300 	mov.w	r3, #0
 8004464:	f04f 0400 	mov.w	r4, #0
 8004468:	0194      	lsls	r4, r2, #6
 800446a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800446e:	018b      	lsls	r3, r1, #6
 8004470:	1a5b      	subs	r3, r3, r1
 8004472:	eb64 0402 	sbc.w	r4, r4, r2
 8004476:	f04f 0100 	mov.w	r1, #0
 800447a:	f04f 0200 	mov.w	r2, #0
 800447e:	00e2      	lsls	r2, r4, #3
 8004480:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004484:	00d9      	lsls	r1, r3, #3
 8004486:	460b      	mov	r3, r1
 8004488:	4614      	mov	r4, r2
 800448a:	195b      	adds	r3, r3, r5
 800448c:	eb44 0406 	adc.w	r4, r4, r6
 8004490:	f04f 0100 	mov.w	r1, #0
 8004494:	f04f 0200 	mov.w	r2, #0
 8004498:	02a2      	lsls	r2, r4, #10
 800449a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800449e:	0299      	lsls	r1, r3, #10
 80044a0:	460b      	mov	r3, r1
 80044a2:	4614      	mov	r4, r2
 80044a4:	4618      	mov	r0, r3
 80044a6:	4621      	mov	r1, r4
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f04f 0400 	mov.w	r4, #0
 80044ae:	461a      	mov	r2, r3
 80044b0:	4623      	mov	r3, r4
 80044b2:	f7fb fedd 	bl	8000270 <__aeabi_uldivmod>
 80044b6:	4603      	mov	r3, r0
 80044b8:	460c      	mov	r4, r1
 80044ba:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80044bc:	4b0a      	ldr	r3, [pc, #40]	; (80044e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	0c1b      	lsrs	r3, r3, #16
 80044c2:	f003 0303 	and.w	r3, r3, #3
 80044c6:	3301      	adds	r3, #1
 80044c8:	005b      	lsls	r3, r3, #1
 80044ca:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80044cc:	68fa      	ldr	r2, [r7, #12]
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044d4:	60bb      	str	r3, [r7, #8]
      break;
 80044d6:	e002      	b.n	80044de <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80044d8:	4b04      	ldr	r3, [pc, #16]	; (80044ec <HAL_RCC_GetSysClockFreq+0x1a8>)
 80044da:	60bb      	str	r3, [r7, #8]
      break;
 80044dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044de:	68bb      	ldr	r3, [r7, #8]
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3714      	adds	r7, #20
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044e8:	40023800 	.word	0x40023800
 80044ec:	00f42400 	.word	0x00f42400
 80044f0:	007a1200 	.word	0x007a1200

080044f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044f4:	b480      	push	{r7}
 80044f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044f8:	4b03      	ldr	r3, [pc, #12]	; (8004508 <HAL_RCC_GetHCLKFreq+0x14>)
 80044fa:	681b      	ldr	r3, [r3, #0]
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr
 8004506:	bf00      	nop
 8004508:	20000000 	.word	0x20000000

0800450c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004510:	f7ff fff0 	bl	80044f4 <HAL_RCC_GetHCLKFreq>
 8004514:	4601      	mov	r1, r0
 8004516:	4b05      	ldr	r3, [pc, #20]	; (800452c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	0a9b      	lsrs	r3, r3, #10
 800451c:	f003 0307 	and.w	r3, r3, #7
 8004520:	4a03      	ldr	r2, [pc, #12]	; (8004530 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004522:	5cd3      	ldrb	r3, [r2, r3]
 8004524:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004528:	4618      	mov	r0, r3
 800452a:	bd80      	pop	{r7, pc}
 800452c:	40023800 	.word	0x40023800
 8004530:	0800981c 	.word	0x0800981c

08004534 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004538:	f7ff ffdc 	bl	80044f4 <HAL_RCC_GetHCLKFreq>
 800453c:	4601      	mov	r1, r0
 800453e:	4b05      	ldr	r3, [pc, #20]	; (8004554 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	0b5b      	lsrs	r3, r3, #13
 8004544:	f003 0307 	and.w	r3, r3, #7
 8004548:	4a03      	ldr	r2, [pc, #12]	; (8004558 <HAL_RCC_GetPCLK2Freq+0x24>)
 800454a:	5cd3      	ldrb	r3, [r2, r3]
 800454c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004550:	4618      	mov	r0, r3
 8004552:	bd80      	pop	{r7, pc}
 8004554:	40023800 	.word	0x40023800
 8004558:	0800981c 	.word	0x0800981c

0800455c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b086      	sub	sp, #24
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004564:	2300      	movs	r3, #0
 8004566:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004568:	2300      	movs	r3, #0
 800456a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 0301 	and.w	r3, r3, #1
 8004574:	2b00      	cmp	r3, #0
 8004576:	d105      	bne.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004580:	2b00      	cmp	r3, #0
 8004582:	d035      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004584:	4b62      	ldr	r3, [pc, #392]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004586:	2200      	movs	r2, #0
 8004588:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800458a:	f7fc fda7 	bl	80010dc <HAL_GetTick>
 800458e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004590:	e008      	b.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004592:	f7fc fda3 	bl	80010dc <HAL_GetTick>
 8004596:	4602      	mov	r2, r0
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	2b02      	cmp	r3, #2
 800459e:	d901      	bls.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045a0:	2303      	movs	r3, #3
 80045a2:	e0b0      	b.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80045a4:	4b5b      	ldr	r3, [pc, #364]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d1f0      	bne.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	019a      	lsls	r2, r3, #6
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	071b      	lsls	r3, r3, #28
 80045bc:	4955      	ldr	r1, [pc, #340]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045be:	4313      	orrs	r3, r2
 80045c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80045c4:	4b52      	ldr	r3, [pc, #328]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80045c6:	2201      	movs	r2, #1
 80045c8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80045ca:	f7fc fd87 	bl	80010dc <HAL_GetTick>
 80045ce:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80045d0:	e008      	b.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80045d2:	f7fc fd83 	bl	80010dc <HAL_GetTick>
 80045d6:	4602      	mov	r2, r0
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	1ad3      	subs	r3, r2, r3
 80045dc:	2b02      	cmp	r3, #2
 80045de:	d901      	bls.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045e0:	2303      	movs	r3, #3
 80045e2:	e090      	b.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80045e4:	4b4b      	ldr	r3, [pc, #300]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d0f0      	beq.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 0302 	and.w	r3, r3, #2
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	f000 8083 	beq.w	8004704 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80045fe:	2300      	movs	r3, #0
 8004600:	60fb      	str	r3, [r7, #12]
 8004602:	4b44      	ldr	r3, [pc, #272]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004606:	4a43      	ldr	r2, [pc, #268]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800460c:	6413      	str	r3, [r2, #64]	; 0x40
 800460e:	4b41      	ldr	r3, [pc, #260]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004616:	60fb      	str	r3, [r7, #12]
 8004618:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800461a:	4b3f      	ldr	r3, [pc, #252]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a3e      	ldr	r2, [pc, #248]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004620:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004624:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004626:	f7fc fd59 	bl	80010dc <HAL_GetTick>
 800462a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800462c:	e008      	b.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800462e:	f7fc fd55 	bl	80010dc <HAL_GetTick>
 8004632:	4602      	mov	r2, r0
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	1ad3      	subs	r3, r2, r3
 8004638:	2b02      	cmp	r3, #2
 800463a:	d901      	bls.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800463c:	2303      	movs	r3, #3
 800463e:	e062      	b.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004640:	4b35      	ldr	r3, [pc, #212]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004648:	2b00      	cmp	r3, #0
 800464a:	d0f0      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800464c:	4b31      	ldr	r3, [pc, #196]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800464e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004650:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004654:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d02f      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x160>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004664:	693a      	ldr	r2, [r7, #16]
 8004666:	429a      	cmp	r2, r3
 8004668:	d028      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800466a:	4b2a      	ldr	r3, [pc, #168]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800466c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800466e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004672:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004674:	4b29      	ldr	r3, [pc, #164]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004676:	2201      	movs	r2, #1
 8004678:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800467a:	4b28      	ldr	r3, [pc, #160]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800467c:	2200      	movs	r2, #0
 800467e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004680:	4a24      	ldr	r2, [pc, #144]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004686:	4b23      	ldr	r3, [pc, #140]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800468a:	f003 0301 	and.w	r3, r3, #1
 800468e:	2b01      	cmp	r3, #1
 8004690:	d114      	bne.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004692:	f7fc fd23 	bl	80010dc <HAL_GetTick>
 8004696:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004698:	e00a      	b.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800469a:	f7fc fd1f 	bl	80010dc <HAL_GetTick>
 800469e:	4602      	mov	r2, r0
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d901      	bls.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	e02a      	b.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046b0:	4b18      	ldr	r3, [pc, #96]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b4:	f003 0302 	and.w	r3, r3, #2
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d0ee      	beq.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046c8:	d10d      	bne.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80046ca:	4b12      	ldr	r3, [pc, #72]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80046da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046de:	490d      	ldr	r1, [pc, #52]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046e0:	4313      	orrs	r3, r2
 80046e2:	608b      	str	r3, [r1, #8]
 80046e4:	e005      	b.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80046e6:	4b0b      	ldr	r3, [pc, #44]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	4a0a      	ldr	r2, [pc, #40]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046ec:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80046f0:	6093      	str	r3, [r2, #8]
 80046f2:	4b08      	ldr	r3, [pc, #32]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046f4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046fe:	4905      	ldr	r1, [pc, #20]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004700:	4313      	orrs	r3, r2
 8004702:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004704:	2300      	movs	r3, #0
}
 8004706:	4618      	mov	r0, r3
 8004708:	3718      	adds	r7, #24
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop
 8004710:	42470068 	.word	0x42470068
 8004714:	40023800 	.word	0x40023800
 8004718:	40007000 	.word	0x40007000
 800471c:	42470e40 	.word	0x42470e40

08004720 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004720:	b480      	push	{r7}
 8004722:	b087      	sub	sp, #28
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004728:	2300      	movs	r3, #0
 800472a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800472c:	2300      	movs	r3, #0
 800472e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004730:	2300      	movs	r3, #0
 8004732:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004734:	2300      	movs	r3, #0
 8004736:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2b01      	cmp	r3, #1
 800473c:	d13d      	bne.n	80047ba <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800473e:	4b22      	ldr	r3, [pc, #136]	; (80047c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004746:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d004      	beq.n	8004758 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800474e:	2b01      	cmp	r3, #1
 8004750:	d12f      	bne.n	80047b2 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004752:	4b1e      	ldr	r3, [pc, #120]	; (80047cc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004754:	617b      	str	r3, [r7, #20]
          break;
 8004756:	e02f      	b.n	80047b8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004758:	4b1b      	ldr	r3, [pc, #108]	; (80047c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004760:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004764:	d108      	bne.n	8004778 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004766:	4b18      	ldr	r3, [pc, #96]	; (80047c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800476e:	4a18      	ldr	r2, [pc, #96]	; (80047d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004770:	fbb2 f3f3 	udiv	r3, r2, r3
 8004774:	613b      	str	r3, [r7, #16]
 8004776:	e007      	b.n	8004788 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004778:	4b13      	ldr	r3, [pc, #76]	; (80047c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004780:	4a14      	ldr	r2, [pc, #80]	; (80047d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004782:	fbb2 f3f3 	udiv	r3, r2, r3
 8004786:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004788:	4b0f      	ldr	r3, [pc, #60]	; (80047c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800478a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800478e:	099b      	lsrs	r3, r3, #6
 8004790:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	fb02 f303 	mul.w	r3, r2, r3
 800479a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800479c:	4b0a      	ldr	r3, [pc, #40]	; (80047c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800479e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047a2:	0f1b      	lsrs	r3, r3, #28
 80047a4:	f003 0307 	and.w	r3, r3, #7
 80047a8:	68ba      	ldr	r2, [r7, #8]
 80047aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ae:	617b      	str	r3, [r7, #20]
          break;
 80047b0:	e002      	b.n	80047b8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80047b2:	2300      	movs	r3, #0
 80047b4:	617b      	str	r3, [r7, #20]
          break;
 80047b6:	bf00      	nop
        }
      }
      break;
 80047b8:	bf00      	nop
    }
  }
  return frequency;
 80047ba:	697b      	ldr	r3, [r7, #20]
}
 80047bc:	4618      	mov	r0, r3
 80047be:	371c      	adds	r7, #28
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr
 80047c8:	40023800 	.word	0x40023800
 80047cc:	00bb8000 	.word	0x00bb8000
 80047d0:	007a1200 	.word	0x007a1200
 80047d4:	00f42400 	.word	0x00f42400

080047d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b082      	sub	sp, #8
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d101      	bne.n	80047ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e056      	b.n	8004898 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d106      	bne.n	800480a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f7fc fa21 	bl	8000c4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2202      	movs	r2, #2
 800480e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004820:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	685a      	ldr	r2, [r3, #4]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	431a      	orrs	r2, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	431a      	orrs	r2, r3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	691b      	ldr	r3, [r3, #16]
 8004836:	431a      	orrs	r2, r3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	695b      	ldr	r3, [r3, #20]
 800483c:	431a      	orrs	r2, r3
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	699b      	ldr	r3, [r3, #24]
 8004842:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004846:	431a      	orrs	r2, r3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	69db      	ldr	r3, [r3, #28]
 800484c:	431a      	orrs	r2, r3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a1b      	ldr	r3, [r3, #32]
 8004852:	ea42 0103 	orr.w	r1, r2, r3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	430a      	orrs	r2, r1
 8004860:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	699b      	ldr	r3, [r3, #24]
 8004866:	0c1b      	lsrs	r3, r3, #16
 8004868:	f003 0104 	and.w	r1, r3, #4
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	430a      	orrs	r2, r1
 8004876:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	69da      	ldr	r2, [r3, #28]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004886:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2201      	movs	r2, #1
 8004892:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004896:	2300      	movs	r3, #0
}
 8004898:	4618      	mov	r0, r3
 800489a:	3708      	adds	r7, #8
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}

080048a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d101      	bne.n	80048b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e03f      	b.n	8004932 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d106      	bne.n	80048cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f7fc fb30 	bl	8000f2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2224      	movs	r2, #36	; 0x24
 80048d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68da      	ldr	r2, [r3, #12]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f000 fb97 	bl	8005018 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	691a      	ldr	r2, [r3, #16]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	695a      	ldr	r2, [r3, #20]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004908:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	68da      	ldr	r2, [r3, #12]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004918:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2220      	movs	r2, #32
 8004924:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2220      	movs	r2, #32
 800492c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004930:	2300      	movs	r3, #0
}
 8004932:	4618      	mov	r0, r3
 8004934:	3708      	adds	r7, #8
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}

0800493a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800493a:	b580      	push	{r7, lr}
 800493c:	b088      	sub	sp, #32
 800493e:	af02      	add	r7, sp, #8
 8004940:	60f8      	str	r0, [r7, #12]
 8004942:	60b9      	str	r1, [r7, #8]
 8004944:	603b      	str	r3, [r7, #0]
 8004946:	4613      	mov	r3, r2
 8004948:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800494a:	2300      	movs	r3, #0
 800494c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004954:	b2db      	uxtb	r3, r3
 8004956:	2b20      	cmp	r3, #32
 8004958:	f040 8083 	bne.w	8004a62 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d002      	beq.n	8004968 <HAL_UART_Transmit+0x2e>
 8004962:	88fb      	ldrh	r3, [r7, #6]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d101      	bne.n	800496c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e07b      	b.n	8004a64 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004972:	2b01      	cmp	r3, #1
 8004974:	d101      	bne.n	800497a <HAL_UART_Transmit+0x40>
 8004976:	2302      	movs	r3, #2
 8004978:	e074      	b.n	8004a64 <HAL_UART_Transmit+0x12a>
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2201      	movs	r2, #1
 800497e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2200      	movs	r2, #0
 8004986:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2221      	movs	r2, #33	; 0x21
 800498c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004990:	f7fc fba4 	bl	80010dc <HAL_GetTick>
 8004994:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	88fa      	ldrh	r2, [r7, #6]
 800499a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	88fa      	ldrh	r2, [r7, #6]
 80049a0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2200      	movs	r2, #0
 80049a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80049aa:	e042      	b.n	8004a32 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	3b01      	subs	r3, #1
 80049b4:	b29a      	uxth	r2, r3
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049c2:	d122      	bne.n	8004a0a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	9300      	str	r3, [sp, #0]
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	2200      	movs	r2, #0
 80049cc:	2180      	movs	r1, #128	; 0x80
 80049ce:	68f8      	ldr	r0, [r7, #12]
 80049d0:	f000 f9b6 	bl	8004d40 <UART_WaitOnFlagUntilTimeout>
 80049d4:	4603      	mov	r3, r0
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d001      	beq.n	80049de <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e042      	b.n	8004a64 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	881b      	ldrh	r3, [r3, #0]
 80049e6:	461a      	mov	r2, r3
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049f0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d103      	bne.n	8004a02 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	3302      	adds	r3, #2
 80049fe:	60bb      	str	r3, [r7, #8]
 8004a00:	e017      	b.n	8004a32 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	3301      	adds	r3, #1
 8004a06:	60bb      	str	r3, [r7, #8]
 8004a08:	e013      	b.n	8004a32 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	9300      	str	r3, [sp, #0]
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	2200      	movs	r2, #0
 8004a12:	2180      	movs	r1, #128	; 0x80
 8004a14:	68f8      	ldr	r0, [r7, #12]
 8004a16:	f000 f993 	bl	8004d40 <UART_WaitOnFlagUntilTimeout>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d001      	beq.n	8004a24 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004a20:	2303      	movs	r3, #3
 8004a22:	e01f      	b.n	8004a64 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	1c5a      	adds	r2, r3, #1
 8004a28:	60ba      	str	r2, [r7, #8]
 8004a2a:	781a      	ldrb	r2, [r3, #0]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d1b7      	bne.n	80049ac <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	9300      	str	r3, [sp, #0]
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	2200      	movs	r2, #0
 8004a44:	2140      	movs	r1, #64	; 0x40
 8004a46:	68f8      	ldr	r0, [r7, #12]
 8004a48:	f000 f97a 	bl	8004d40 <UART_WaitOnFlagUntilTimeout>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d001      	beq.n	8004a56 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	e006      	b.n	8004a64 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2220      	movs	r2, #32
 8004a5a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	e000      	b.n	8004a64 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004a62:	2302      	movs	r3, #2
  }
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3718      	adds	r7, #24
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}

08004a6c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b085      	sub	sp, #20
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	60f8      	str	r0, [r7, #12]
 8004a74:	60b9      	str	r1, [r7, #8]
 8004a76:	4613      	mov	r3, r2
 8004a78:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	2b20      	cmp	r3, #32
 8004a84:	d140      	bne.n	8004b08 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d002      	beq.n	8004a92 <HAL_UART_Receive_IT+0x26>
 8004a8c:	88fb      	ldrh	r3, [r7, #6]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d101      	bne.n	8004a96 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e039      	b.n	8004b0a <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d101      	bne.n	8004aa4 <HAL_UART_Receive_IT+0x38>
 8004aa0:	2302      	movs	r3, #2
 8004aa2:	e032      	b.n	8004b0a <HAL_UART_Receive_IT+0x9e>
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	68ba      	ldr	r2, [r7, #8]
 8004ab0:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	88fa      	ldrh	r2, [r7, #6]
 8004ab6:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	88fa      	ldrh	r2, [r7, #6]
 8004abc:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2222      	movs	r2, #34	; 0x22
 8004ac8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	68da      	ldr	r2, [r3, #12]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ae2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	695a      	ldr	r2, [r3, #20]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f042 0201 	orr.w	r2, r2, #1
 8004af2:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	68da      	ldr	r2, [r3, #12]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f042 0220 	orr.w	r2, r2, #32
 8004b02:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004b04:	2300      	movs	r3, #0
 8004b06:	e000      	b.n	8004b0a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004b08:	2302      	movs	r3, #2
  }
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3714      	adds	r7, #20
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr
	...

08004b18 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b088      	sub	sp, #32
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	695b      	ldr	r3, [r3, #20]
 8004b36:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	f003 030f 	and.w	r3, r3, #15
 8004b46:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d10d      	bne.n	8004b6a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b4e:	69fb      	ldr	r3, [r7, #28]
 8004b50:	f003 0320 	and.w	r3, r3, #32
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d008      	beq.n	8004b6a <HAL_UART_IRQHandler+0x52>
 8004b58:	69bb      	ldr	r3, [r7, #24]
 8004b5a:	f003 0320 	and.w	r3, r3, #32
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d003      	beq.n	8004b6a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 f9d6 	bl	8004f14 <UART_Receive_IT>
      return;
 8004b68:	e0d1      	b.n	8004d0e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	f000 80b0 	beq.w	8004cd2 <HAL_UART_IRQHandler+0x1ba>
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	f003 0301 	and.w	r3, r3, #1
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d105      	bne.n	8004b88 <HAL_UART_IRQHandler+0x70>
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	f000 80a5 	beq.w	8004cd2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	f003 0301 	and.w	r3, r3, #1
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d00a      	beq.n	8004ba8 <HAL_UART_IRQHandler+0x90>
 8004b92:	69bb      	ldr	r3, [r7, #24]
 8004b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d005      	beq.n	8004ba8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ba0:	f043 0201 	orr.w	r2, r3, #1
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ba8:	69fb      	ldr	r3, [r7, #28]
 8004baa:	f003 0304 	and.w	r3, r3, #4
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d00a      	beq.n	8004bc8 <HAL_UART_IRQHandler+0xb0>
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	f003 0301 	and.w	r3, r3, #1
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d005      	beq.n	8004bc8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bc0:	f043 0202 	orr.w	r2, r3, #2
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004bc8:	69fb      	ldr	r3, [r7, #28]
 8004bca:	f003 0302 	and.w	r3, r3, #2
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d00a      	beq.n	8004be8 <HAL_UART_IRQHandler+0xd0>
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	f003 0301 	and.w	r3, r3, #1
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d005      	beq.n	8004be8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004be0:	f043 0204 	orr.w	r2, r3, #4
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004be8:	69fb      	ldr	r3, [r7, #28]
 8004bea:	f003 0308 	and.w	r3, r3, #8
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d00f      	beq.n	8004c12 <HAL_UART_IRQHandler+0xfa>
 8004bf2:	69bb      	ldr	r3, [r7, #24]
 8004bf4:	f003 0320 	and.w	r3, r3, #32
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d104      	bne.n	8004c06 <HAL_UART_IRQHandler+0xee>
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	f003 0301 	and.w	r3, r3, #1
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d005      	beq.n	8004c12 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c0a:	f043 0208 	orr.w	r2, r3, #8
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d078      	beq.n	8004d0c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c1a:	69fb      	ldr	r3, [r7, #28]
 8004c1c:	f003 0320 	and.w	r3, r3, #32
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d007      	beq.n	8004c34 <HAL_UART_IRQHandler+0x11c>
 8004c24:	69bb      	ldr	r3, [r7, #24]
 8004c26:	f003 0320 	and.w	r3, r3, #32
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d002      	beq.n	8004c34 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f000 f970 	bl	8004f14 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	695b      	ldr	r3, [r3, #20]
 8004c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c3e:	2b40      	cmp	r3, #64	; 0x40
 8004c40:	bf0c      	ite	eq
 8004c42:	2301      	moveq	r3, #1
 8004c44:	2300      	movne	r3, #0
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c4e:	f003 0308 	and.w	r3, r3, #8
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d102      	bne.n	8004c5c <HAL_UART_IRQHandler+0x144>
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d031      	beq.n	8004cc0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f000 f8b9 	bl	8004dd4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	695b      	ldr	r3, [r3, #20]
 8004c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c6c:	2b40      	cmp	r3, #64	; 0x40
 8004c6e:	d123      	bne.n	8004cb8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	695a      	ldr	r2, [r3, #20]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c7e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d013      	beq.n	8004cb0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c8c:	4a21      	ldr	r2, [pc, #132]	; (8004d14 <HAL_UART_IRQHandler+0x1fc>)
 8004c8e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c94:	4618      	mov	r0, r3
 8004c96:	f7fc fb60 	bl	800135a <HAL_DMA_Abort_IT>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d016      	beq.n	8004cce <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ca4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004caa:	4610      	mov	r0, r2
 8004cac:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cae:	e00e      	b.n	8004cce <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f000 f83b 	bl	8004d2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cb6:	e00a      	b.n	8004cce <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f000 f837 	bl	8004d2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cbe:	e006      	b.n	8004cce <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f000 f833 	bl	8004d2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004ccc:	e01e      	b.n	8004d0c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cce:	bf00      	nop
    return;
 8004cd0:	e01c      	b.n	8004d0c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004cd2:	69fb      	ldr	r3, [r7, #28]
 8004cd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d008      	beq.n	8004cee <HAL_UART_IRQHandler+0x1d6>
 8004cdc:	69bb      	ldr	r3, [r7, #24]
 8004cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d003      	beq.n	8004cee <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f000 f8a6 	bl	8004e38 <UART_Transmit_IT>
    return;
 8004cec:	e00f      	b.n	8004d0e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d00a      	beq.n	8004d0e <HAL_UART_IRQHandler+0x1f6>
 8004cf8:	69bb      	ldr	r3, [r7, #24]
 8004cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d005      	beq.n	8004d0e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f000 f8ee 	bl	8004ee4 <UART_EndTransmit_IT>
    return;
 8004d08:	bf00      	nop
 8004d0a:	e000      	b.n	8004d0e <HAL_UART_IRQHandler+0x1f6>
    return;
 8004d0c:	bf00      	nop
  }
}
 8004d0e:	3720      	adds	r7, #32
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	08004e11 	.word	0x08004e11

08004d18 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b083      	sub	sp, #12
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004d20:	bf00      	nop
 8004d22:	370c      	adds	r7, #12
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr

08004d2c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b083      	sub	sp, #12
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004d34:	bf00      	nop
 8004d36:	370c      	adds	r7, #12
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr

08004d40 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b084      	sub	sp, #16
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	60f8      	str	r0, [r7, #12]
 8004d48:	60b9      	str	r1, [r7, #8]
 8004d4a:	603b      	str	r3, [r7, #0]
 8004d4c:	4613      	mov	r3, r2
 8004d4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d50:	e02c      	b.n	8004dac <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d52:	69bb      	ldr	r3, [r7, #24]
 8004d54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d58:	d028      	beq.n	8004dac <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004d5a:	69bb      	ldr	r3, [r7, #24]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d007      	beq.n	8004d70 <UART_WaitOnFlagUntilTimeout+0x30>
 8004d60:	f7fc f9bc 	bl	80010dc <HAL_GetTick>
 8004d64:	4602      	mov	r2, r0
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	69ba      	ldr	r2, [r7, #24]
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d21d      	bcs.n	8004dac <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	68da      	ldr	r2, [r3, #12]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004d7e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	695a      	ldr	r2, [r3, #20]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f022 0201 	bic.w	r2, r2, #1
 8004d8e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2220      	movs	r2, #32
 8004d94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2220      	movs	r2, #32
 8004d9c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004da8:	2303      	movs	r3, #3
 8004daa:	e00f      	b.n	8004dcc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	4013      	ands	r3, r2
 8004db6:	68ba      	ldr	r2, [r7, #8]
 8004db8:	429a      	cmp	r2, r3
 8004dba:	bf0c      	ite	eq
 8004dbc:	2301      	moveq	r3, #1
 8004dbe:	2300      	movne	r3, #0
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	79fb      	ldrb	r3, [r7, #7]
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d0c3      	beq.n	8004d52 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004dca:	2300      	movs	r3, #0
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3710      	adds	r7, #16
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b083      	sub	sp, #12
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	68da      	ldr	r2, [r3, #12]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004dea:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	695a      	ldr	r2, [r3, #20]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f022 0201 	bic.w	r2, r2, #1
 8004dfa:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2220      	movs	r2, #32
 8004e00:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004e04:	bf00      	nop
 8004e06:	370c      	adds	r7, #12
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr

08004e10 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e1c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2200      	movs	r2, #0
 8004e22:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2200      	movs	r2, #0
 8004e28:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e2a:	68f8      	ldr	r0, [r7, #12]
 8004e2c:	f7ff ff7e 	bl	8004d2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e30:	bf00      	nop
 8004e32:	3710      	adds	r7, #16
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}

08004e38 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b085      	sub	sp, #20
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	2b21      	cmp	r3, #33	; 0x21
 8004e4a:	d144      	bne.n	8004ed6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e54:	d11a      	bne.n	8004e8c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6a1b      	ldr	r3, [r3, #32]
 8004e5a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	881b      	ldrh	r3, [r3, #0]
 8004e60:	461a      	mov	r2, r3
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e6a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	691b      	ldr	r3, [r3, #16]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d105      	bne.n	8004e80 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6a1b      	ldr	r3, [r3, #32]
 8004e78:	1c9a      	adds	r2, r3, #2
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	621a      	str	r2, [r3, #32]
 8004e7e:	e00e      	b.n	8004e9e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6a1b      	ldr	r3, [r3, #32]
 8004e84:	1c5a      	adds	r2, r3, #1
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	621a      	str	r2, [r3, #32]
 8004e8a:	e008      	b.n	8004e9e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6a1b      	ldr	r3, [r3, #32]
 8004e90:	1c59      	adds	r1, r3, #1
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	6211      	str	r1, [r2, #32]
 8004e96:	781a      	ldrb	r2, [r3, #0]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	3b01      	subs	r3, #1
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	687a      	ldr	r2, [r7, #4]
 8004eaa:	4619      	mov	r1, r3
 8004eac:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d10f      	bne.n	8004ed2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	68da      	ldr	r2, [r3, #12]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ec0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	68da      	ldr	r2, [r3, #12]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ed0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	e000      	b.n	8004ed8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004ed6:	2302      	movs	r3, #2
  }
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3714      	adds	r7, #20
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b082      	sub	sp, #8
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	68da      	ldr	r2, [r3, #12]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004efa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2220      	movs	r2, #32
 8004f00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f7ff ff07 	bl	8004d18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004f0a:	2300      	movs	r3, #0
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3708      	adds	r7, #8
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	2b22      	cmp	r3, #34	; 0x22
 8004f26:	d171      	bne.n	800500c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f30:	d123      	bne.n	8004f7a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f36:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	691b      	ldr	r3, [r3, #16]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d10e      	bne.n	8004f5e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f4c:	b29a      	uxth	r2, r3
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f56:	1c9a      	adds	r2, r3, #2
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	629a      	str	r2, [r3, #40]	; 0x28
 8004f5c:	e029      	b.n	8004fb2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	b29a      	uxth	r2, r3
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f72:	1c5a      	adds	r2, r3, #1
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	629a      	str	r2, [r3, #40]	; 0x28
 8004f78:	e01b      	b.n	8004fb2 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	691b      	ldr	r3, [r3, #16]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d10a      	bne.n	8004f98 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	6858      	ldr	r0, [r3, #4]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f8c:	1c59      	adds	r1, r3, #1
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	6291      	str	r1, [r2, #40]	; 0x28
 8004f92:	b2c2      	uxtb	r2, r0
 8004f94:	701a      	strb	r2, [r3, #0]
 8004f96:	e00c      	b.n	8004fb2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	b2da      	uxtb	r2, r3
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa4:	1c58      	adds	r0, r3, #1
 8004fa6:	6879      	ldr	r1, [r7, #4]
 8004fa8:	6288      	str	r0, [r1, #40]	; 0x28
 8004faa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004fae:	b2d2      	uxtb	r2, r2
 8004fb0:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	3b01      	subs	r3, #1
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d120      	bne.n	8005008 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	68da      	ldr	r2, [r3, #12]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f022 0220 	bic.w	r2, r2, #32
 8004fd4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	68da      	ldr	r2, [r3, #12]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004fe4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	695a      	ldr	r2, [r3, #20]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f022 0201 	bic.w	r2, r2, #1
 8004ff4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2220      	movs	r2, #32
 8004ffa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f7fb fdc8 	bl	8000b94 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005004:	2300      	movs	r3, #0
 8005006:	e002      	b.n	800500e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005008:	2300      	movs	r3, #0
 800500a:	e000      	b.n	800500e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800500c:	2302      	movs	r3, #2
  }
}
 800500e:	4618      	mov	r0, r3
 8005010:	3710      	adds	r7, #16
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
	...

08005018 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800501c:	b085      	sub	sp, #20
 800501e:	af00      	add	r7, sp, #0
 8005020:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	691b      	ldr	r3, [r3, #16]
 8005028:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	68da      	ldr	r2, [r3, #12]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	430a      	orrs	r2, r1
 8005036:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	689a      	ldr	r2, [r3, #8]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	691b      	ldr	r3, [r3, #16]
 8005040:	431a      	orrs	r2, r3
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	695b      	ldr	r3, [r3, #20]
 8005046:	431a      	orrs	r2, r3
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	69db      	ldr	r3, [r3, #28]
 800504c:	4313      	orrs	r3, r2
 800504e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	68db      	ldr	r3, [r3, #12]
 8005056:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800505a:	f023 030c 	bic.w	r3, r3, #12
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	6812      	ldr	r2, [r2, #0]
 8005062:	68f9      	ldr	r1, [r7, #12]
 8005064:	430b      	orrs	r3, r1
 8005066:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	695b      	ldr	r3, [r3, #20]
 800506e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	699a      	ldr	r2, [r3, #24]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	430a      	orrs	r2, r1
 800507c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	69db      	ldr	r3, [r3, #28]
 8005082:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005086:	f040 818b 	bne.w	80053a0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4ac1      	ldr	r2, [pc, #772]	; (8005394 <UART_SetConfig+0x37c>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d005      	beq.n	80050a0 <UART_SetConfig+0x88>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4abf      	ldr	r2, [pc, #764]	; (8005398 <UART_SetConfig+0x380>)
 800509a:	4293      	cmp	r3, r2
 800509c:	f040 80bd 	bne.w	800521a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80050a0:	f7ff fa48 	bl	8004534 <HAL_RCC_GetPCLK2Freq>
 80050a4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	461d      	mov	r5, r3
 80050aa:	f04f 0600 	mov.w	r6, #0
 80050ae:	46a8      	mov	r8, r5
 80050b0:	46b1      	mov	r9, r6
 80050b2:	eb18 0308 	adds.w	r3, r8, r8
 80050b6:	eb49 0409 	adc.w	r4, r9, r9
 80050ba:	4698      	mov	r8, r3
 80050bc:	46a1      	mov	r9, r4
 80050be:	eb18 0805 	adds.w	r8, r8, r5
 80050c2:	eb49 0906 	adc.w	r9, r9, r6
 80050c6:	f04f 0100 	mov.w	r1, #0
 80050ca:	f04f 0200 	mov.w	r2, #0
 80050ce:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80050d2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80050d6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80050da:	4688      	mov	r8, r1
 80050dc:	4691      	mov	r9, r2
 80050de:	eb18 0005 	adds.w	r0, r8, r5
 80050e2:	eb49 0106 	adc.w	r1, r9, r6
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	461d      	mov	r5, r3
 80050ec:	f04f 0600 	mov.w	r6, #0
 80050f0:	196b      	adds	r3, r5, r5
 80050f2:	eb46 0406 	adc.w	r4, r6, r6
 80050f6:	461a      	mov	r2, r3
 80050f8:	4623      	mov	r3, r4
 80050fa:	f7fb f8b9 	bl	8000270 <__aeabi_uldivmod>
 80050fe:	4603      	mov	r3, r0
 8005100:	460c      	mov	r4, r1
 8005102:	461a      	mov	r2, r3
 8005104:	4ba5      	ldr	r3, [pc, #660]	; (800539c <UART_SetConfig+0x384>)
 8005106:	fba3 2302 	umull	r2, r3, r3, r2
 800510a:	095b      	lsrs	r3, r3, #5
 800510c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	461d      	mov	r5, r3
 8005114:	f04f 0600 	mov.w	r6, #0
 8005118:	46a9      	mov	r9, r5
 800511a:	46b2      	mov	sl, r6
 800511c:	eb19 0309 	adds.w	r3, r9, r9
 8005120:	eb4a 040a 	adc.w	r4, sl, sl
 8005124:	4699      	mov	r9, r3
 8005126:	46a2      	mov	sl, r4
 8005128:	eb19 0905 	adds.w	r9, r9, r5
 800512c:	eb4a 0a06 	adc.w	sl, sl, r6
 8005130:	f04f 0100 	mov.w	r1, #0
 8005134:	f04f 0200 	mov.w	r2, #0
 8005138:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800513c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005140:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005144:	4689      	mov	r9, r1
 8005146:	4692      	mov	sl, r2
 8005148:	eb19 0005 	adds.w	r0, r9, r5
 800514c:	eb4a 0106 	adc.w	r1, sl, r6
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	461d      	mov	r5, r3
 8005156:	f04f 0600 	mov.w	r6, #0
 800515a:	196b      	adds	r3, r5, r5
 800515c:	eb46 0406 	adc.w	r4, r6, r6
 8005160:	461a      	mov	r2, r3
 8005162:	4623      	mov	r3, r4
 8005164:	f7fb f884 	bl	8000270 <__aeabi_uldivmod>
 8005168:	4603      	mov	r3, r0
 800516a:	460c      	mov	r4, r1
 800516c:	461a      	mov	r2, r3
 800516e:	4b8b      	ldr	r3, [pc, #556]	; (800539c <UART_SetConfig+0x384>)
 8005170:	fba3 1302 	umull	r1, r3, r3, r2
 8005174:	095b      	lsrs	r3, r3, #5
 8005176:	2164      	movs	r1, #100	; 0x64
 8005178:	fb01 f303 	mul.w	r3, r1, r3
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	00db      	lsls	r3, r3, #3
 8005180:	3332      	adds	r3, #50	; 0x32
 8005182:	4a86      	ldr	r2, [pc, #536]	; (800539c <UART_SetConfig+0x384>)
 8005184:	fba2 2303 	umull	r2, r3, r2, r3
 8005188:	095b      	lsrs	r3, r3, #5
 800518a:	005b      	lsls	r3, r3, #1
 800518c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005190:	4498      	add	r8, r3
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	461d      	mov	r5, r3
 8005196:	f04f 0600 	mov.w	r6, #0
 800519a:	46a9      	mov	r9, r5
 800519c:	46b2      	mov	sl, r6
 800519e:	eb19 0309 	adds.w	r3, r9, r9
 80051a2:	eb4a 040a 	adc.w	r4, sl, sl
 80051a6:	4699      	mov	r9, r3
 80051a8:	46a2      	mov	sl, r4
 80051aa:	eb19 0905 	adds.w	r9, r9, r5
 80051ae:	eb4a 0a06 	adc.w	sl, sl, r6
 80051b2:	f04f 0100 	mov.w	r1, #0
 80051b6:	f04f 0200 	mov.w	r2, #0
 80051ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80051be:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80051c2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80051c6:	4689      	mov	r9, r1
 80051c8:	4692      	mov	sl, r2
 80051ca:	eb19 0005 	adds.w	r0, r9, r5
 80051ce:	eb4a 0106 	adc.w	r1, sl, r6
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	461d      	mov	r5, r3
 80051d8:	f04f 0600 	mov.w	r6, #0
 80051dc:	196b      	adds	r3, r5, r5
 80051de:	eb46 0406 	adc.w	r4, r6, r6
 80051e2:	461a      	mov	r2, r3
 80051e4:	4623      	mov	r3, r4
 80051e6:	f7fb f843 	bl	8000270 <__aeabi_uldivmod>
 80051ea:	4603      	mov	r3, r0
 80051ec:	460c      	mov	r4, r1
 80051ee:	461a      	mov	r2, r3
 80051f0:	4b6a      	ldr	r3, [pc, #424]	; (800539c <UART_SetConfig+0x384>)
 80051f2:	fba3 1302 	umull	r1, r3, r3, r2
 80051f6:	095b      	lsrs	r3, r3, #5
 80051f8:	2164      	movs	r1, #100	; 0x64
 80051fa:	fb01 f303 	mul.w	r3, r1, r3
 80051fe:	1ad3      	subs	r3, r2, r3
 8005200:	00db      	lsls	r3, r3, #3
 8005202:	3332      	adds	r3, #50	; 0x32
 8005204:	4a65      	ldr	r2, [pc, #404]	; (800539c <UART_SetConfig+0x384>)
 8005206:	fba2 2303 	umull	r2, r3, r2, r3
 800520a:	095b      	lsrs	r3, r3, #5
 800520c:	f003 0207 	and.w	r2, r3, #7
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4442      	add	r2, r8
 8005216:	609a      	str	r2, [r3, #8]
 8005218:	e26f      	b.n	80056fa <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800521a:	f7ff f977 	bl	800450c <HAL_RCC_GetPCLK1Freq>
 800521e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	461d      	mov	r5, r3
 8005224:	f04f 0600 	mov.w	r6, #0
 8005228:	46a8      	mov	r8, r5
 800522a:	46b1      	mov	r9, r6
 800522c:	eb18 0308 	adds.w	r3, r8, r8
 8005230:	eb49 0409 	adc.w	r4, r9, r9
 8005234:	4698      	mov	r8, r3
 8005236:	46a1      	mov	r9, r4
 8005238:	eb18 0805 	adds.w	r8, r8, r5
 800523c:	eb49 0906 	adc.w	r9, r9, r6
 8005240:	f04f 0100 	mov.w	r1, #0
 8005244:	f04f 0200 	mov.w	r2, #0
 8005248:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800524c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005250:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005254:	4688      	mov	r8, r1
 8005256:	4691      	mov	r9, r2
 8005258:	eb18 0005 	adds.w	r0, r8, r5
 800525c:	eb49 0106 	adc.w	r1, r9, r6
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	461d      	mov	r5, r3
 8005266:	f04f 0600 	mov.w	r6, #0
 800526a:	196b      	adds	r3, r5, r5
 800526c:	eb46 0406 	adc.w	r4, r6, r6
 8005270:	461a      	mov	r2, r3
 8005272:	4623      	mov	r3, r4
 8005274:	f7fa fffc 	bl	8000270 <__aeabi_uldivmod>
 8005278:	4603      	mov	r3, r0
 800527a:	460c      	mov	r4, r1
 800527c:	461a      	mov	r2, r3
 800527e:	4b47      	ldr	r3, [pc, #284]	; (800539c <UART_SetConfig+0x384>)
 8005280:	fba3 2302 	umull	r2, r3, r3, r2
 8005284:	095b      	lsrs	r3, r3, #5
 8005286:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	461d      	mov	r5, r3
 800528e:	f04f 0600 	mov.w	r6, #0
 8005292:	46a9      	mov	r9, r5
 8005294:	46b2      	mov	sl, r6
 8005296:	eb19 0309 	adds.w	r3, r9, r9
 800529a:	eb4a 040a 	adc.w	r4, sl, sl
 800529e:	4699      	mov	r9, r3
 80052a0:	46a2      	mov	sl, r4
 80052a2:	eb19 0905 	adds.w	r9, r9, r5
 80052a6:	eb4a 0a06 	adc.w	sl, sl, r6
 80052aa:	f04f 0100 	mov.w	r1, #0
 80052ae:	f04f 0200 	mov.w	r2, #0
 80052b2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80052b6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80052ba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80052be:	4689      	mov	r9, r1
 80052c0:	4692      	mov	sl, r2
 80052c2:	eb19 0005 	adds.w	r0, r9, r5
 80052c6:	eb4a 0106 	adc.w	r1, sl, r6
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	461d      	mov	r5, r3
 80052d0:	f04f 0600 	mov.w	r6, #0
 80052d4:	196b      	adds	r3, r5, r5
 80052d6:	eb46 0406 	adc.w	r4, r6, r6
 80052da:	461a      	mov	r2, r3
 80052dc:	4623      	mov	r3, r4
 80052de:	f7fa ffc7 	bl	8000270 <__aeabi_uldivmod>
 80052e2:	4603      	mov	r3, r0
 80052e4:	460c      	mov	r4, r1
 80052e6:	461a      	mov	r2, r3
 80052e8:	4b2c      	ldr	r3, [pc, #176]	; (800539c <UART_SetConfig+0x384>)
 80052ea:	fba3 1302 	umull	r1, r3, r3, r2
 80052ee:	095b      	lsrs	r3, r3, #5
 80052f0:	2164      	movs	r1, #100	; 0x64
 80052f2:	fb01 f303 	mul.w	r3, r1, r3
 80052f6:	1ad3      	subs	r3, r2, r3
 80052f8:	00db      	lsls	r3, r3, #3
 80052fa:	3332      	adds	r3, #50	; 0x32
 80052fc:	4a27      	ldr	r2, [pc, #156]	; (800539c <UART_SetConfig+0x384>)
 80052fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005302:	095b      	lsrs	r3, r3, #5
 8005304:	005b      	lsls	r3, r3, #1
 8005306:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800530a:	4498      	add	r8, r3
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	461d      	mov	r5, r3
 8005310:	f04f 0600 	mov.w	r6, #0
 8005314:	46a9      	mov	r9, r5
 8005316:	46b2      	mov	sl, r6
 8005318:	eb19 0309 	adds.w	r3, r9, r9
 800531c:	eb4a 040a 	adc.w	r4, sl, sl
 8005320:	4699      	mov	r9, r3
 8005322:	46a2      	mov	sl, r4
 8005324:	eb19 0905 	adds.w	r9, r9, r5
 8005328:	eb4a 0a06 	adc.w	sl, sl, r6
 800532c:	f04f 0100 	mov.w	r1, #0
 8005330:	f04f 0200 	mov.w	r2, #0
 8005334:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005338:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800533c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005340:	4689      	mov	r9, r1
 8005342:	4692      	mov	sl, r2
 8005344:	eb19 0005 	adds.w	r0, r9, r5
 8005348:	eb4a 0106 	adc.w	r1, sl, r6
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	461d      	mov	r5, r3
 8005352:	f04f 0600 	mov.w	r6, #0
 8005356:	196b      	adds	r3, r5, r5
 8005358:	eb46 0406 	adc.w	r4, r6, r6
 800535c:	461a      	mov	r2, r3
 800535e:	4623      	mov	r3, r4
 8005360:	f7fa ff86 	bl	8000270 <__aeabi_uldivmod>
 8005364:	4603      	mov	r3, r0
 8005366:	460c      	mov	r4, r1
 8005368:	461a      	mov	r2, r3
 800536a:	4b0c      	ldr	r3, [pc, #48]	; (800539c <UART_SetConfig+0x384>)
 800536c:	fba3 1302 	umull	r1, r3, r3, r2
 8005370:	095b      	lsrs	r3, r3, #5
 8005372:	2164      	movs	r1, #100	; 0x64
 8005374:	fb01 f303 	mul.w	r3, r1, r3
 8005378:	1ad3      	subs	r3, r2, r3
 800537a:	00db      	lsls	r3, r3, #3
 800537c:	3332      	adds	r3, #50	; 0x32
 800537e:	4a07      	ldr	r2, [pc, #28]	; (800539c <UART_SetConfig+0x384>)
 8005380:	fba2 2303 	umull	r2, r3, r2, r3
 8005384:	095b      	lsrs	r3, r3, #5
 8005386:	f003 0207 	and.w	r2, r3, #7
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4442      	add	r2, r8
 8005390:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005392:	e1b2      	b.n	80056fa <UART_SetConfig+0x6e2>
 8005394:	40011000 	.word	0x40011000
 8005398:	40011400 	.word	0x40011400
 800539c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4ad7      	ldr	r2, [pc, #860]	; (8005704 <UART_SetConfig+0x6ec>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d005      	beq.n	80053b6 <UART_SetConfig+0x39e>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4ad6      	ldr	r2, [pc, #856]	; (8005708 <UART_SetConfig+0x6f0>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	f040 80d1 	bne.w	8005558 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80053b6:	f7ff f8bd 	bl	8004534 <HAL_RCC_GetPCLK2Freq>
 80053ba:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	469a      	mov	sl, r3
 80053c0:	f04f 0b00 	mov.w	fp, #0
 80053c4:	46d0      	mov	r8, sl
 80053c6:	46d9      	mov	r9, fp
 80053c8:	eb18 0308 	adds.w	r3, r8, r8
 80053cc:	eb49 0409 	adc.w	r4, r9, r9
 80053d0:	4698      	mov	r8, r3
 80053d2:	46a1      	mov	r9, r4
 80053d4:	eb18 080a 	adds.w	r8, r8, sl
 80053d8:	eb49 090b 	adc.w	r9, r9, fp
 80053dc:	f04f 0100 	mov.w	r1, #0
 80053e0:	f04f 0200 	mov.w	r2, #0
 80053e4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80053e8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80053ec:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80053f0:	4688      	mov	r8, r1
 80053f2:	4691      	mov	r9, r2
 80053f4:	eb1a 0508 	adds.w	r5, sl, r8
 80053f8:	eb4b 0609 	adc.w	r6, fp, r9
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	4619      	mov	r1, r3
 8005402:	f04f 0200 	mov.w	r2, #0
 8005406:	f04f 0300 	mov.w	r3, #0
 800540a:	f04f 0400 	mov.w	r4, #0
 800540e:	0094      	lsls	r4, r2, #2
 8005410:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005414:	008b      	lsls	r3, r1, #2
 8005416:	461a      	mov	r2, r3
 8005418:	4623      	mov	r3, r4
 800541a:	4628      	mov	r0, r5
 800541c:	4631      	mov	r1, r6
 800541e:	f7fa ff27 	bl	8000270 <__aeabi_uldivmod>
 8005422:	4603      	mov	r3, r0
 8005424:	460c      	mov	r4, r1
 8005426:	461a      	mov	r2, r3
 8005428:	4bb8      	ldr	r3, [pc, #736]	; (800570c <UART_SetConfig+0x6f4>)
 800542a:	fba3 2302 	umull	r2, r3, r3, r2
 800542e:	095b      	lsrs	r3, r3, #5
 8005430:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	469b      	mov	fp, r3
 8005438:	f04f 0c00 	mov.w	ip, #0
 800543c:	46d9      	mov	r9, fp
 800543e:	46e2      	mov	sl, ip
 8005440:	eb19 0309 	adds.w	r3, r9, r9
 8005444:	eb4a 040a 	adc.w	r4, sl, sl
 8005448:	4699      	mov	r9, r3
 800544a:	46a2      	mov	sl, r4
 800544c:	eb19 090b 	adds.w	r9, r9, fp
 8005450:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005454:	f04f 0100 	mov.w	r1, #0
 8005458:	f04f 0200 	mov.w	r2, #0
 800545c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005460:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005464:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005468:	4689      	mov	r9, r1
 800546a:	4692      	mov	sl, r2
 800546c:	eb1b 0509 	adds.w	r5, fp, r9
 8005470:	eb4c 060a 	adc.w	r6, ip, sl
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	4619      	mov	r1, r3
 800547a:	f04f 0200 	mov.w	r2, #0
 800547e:	f04f 0300 	mov.w	r3, #0
 8005482:	f04f 0400 	mov.w	r4, #0
 8005486:	0094      	lsls	r4, r2, #2
 8005488:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800548c:	008b      	lsls	r3, r1, #2
 800548e:	461a      	mov	r2, r3
 8005490:	4623      	mov	r3, r4
 8005492:	4628      	mov	r0, r5
 8005494:	4631      	mov	r1, r6
 8005496:	f7fa feeb 	bl	8000270 <__aeabi_uldivmod>
 800549a:	4603      	mov	r3, r0
 800549c:	460c      	mov	r4, r1
 800549e:	461a      	mov	r2, r3
 80054a0:	4b9a      	ldr	r3, [pc, #616]	; (800570c <UART_SetConfig+0x6f4>)
 80054a2:	fba3 1302 	umull	r1, r3, r3, r2
 80054a6:	095b      	lsrs	r3, r3, #5
 80054a8:	2164      	movs	r1, #100	; 0x64
 80054aa:	fb01 f303 	mul.w	r3, r1, r3
 80054ae:	1ad3      	subs	r3, r2, r3
 80054b0:	011b      	lsls	r3, r3, #4
 80054b2:	3332      	adds	r3, #50	; 0x32
 80054b4:	4a95      	ldr	r2, [pc, #596]	; (800570c <UART_SetConfig+0x6f4>)
 80054b6:	fba2 2303 	umull	r2, r3, r2, r3
 80054ba:	095b      	lsrs	r3, r3, #5
 80054bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80054c0:	4498      	add	r8, r3
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	469b      	mov	fp, r3
 80054c6:	f04f 0c00 	mov.w	ip, #0
 80054ca:	46d9      	mov	r9, fp
 80054cc:	46e2      	mov	sl, ip
 80054ce:	eb19 0309 	adds.w	r3, r9, r9
 80054d2:	eb4a 040a 	adc.w	r4, sl, sl
 80054d6:	4699      	mov	r9, r3
 80054d8:	46a2      	mov	sl, r4
 80054da:	eb19 090b 	adds.w	r9, r9, fp
 80054de:	eb4a 0a0c 	adc.w	sl, sl, ip
 80054e2:	f04f 0100 	mov.w	r1, #0
 80054e6:	f04f 0200 	mov.w	r2, #0
 80054ea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80054ee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80054f2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80054f6:	4689      	mov	r9, r1
 80054f8:	4692      	mov	sl, r2
 80054fa:	eb1b 0509 	adds.w	r5, fp, r9
 80054fe:	eb4c 060a 	adc.w	r6, ip, sl
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	4619      	mov	r1, r3
 8005508:	f04f 0200 	mov.w	r2, #0
 800550c:	f04f 0300 	mov.w	r3, #0
 8005510:	f04f 0400 	mov.w	r4, #0
 8005514:	0094      	lsls	r4, r2, #2
 8005516:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800551a:	008b      	lsls	r3, r1, #2
 800551c:	461a      	mov	r2, r3
 800551e:	4623      	mov	r3, r4
 8005520:	4628      	mov	r0, r5
 8005522:	4631      	mov	r1, r6
 8005524:	f7fa fea4 	bl	8000270 <__aeabi_uldivmod>
 8005528:	4603      	mov	r3, r0
 800552a:	460c      	mov	r4, r1
 800552c:	461a      	mov	r2, r3
 800552e:	4b77      	ldr	r3, [pc, #476]	; (800570c <UART_SetConfig+0x6f4>)
 8005530:	fba3 1302 	umull	r1, r3, r3, r2
 8005534:	095b      	lsrs	r3, r3, #5
 8005536:	2164      	movs	r1, #100	; 0x64
 8005538:	fb01 f303 	mul.w	r3, r1, r3
 800553c:	1ad3      	subs	r3, r2, r3
 800553e:	011b      	lsls	r3, r3, #4
 8005540:	3332      	adds	r3, #50	; 0x32
 8005542:	4a72      	ldr	r2, [pc, #456]	; (800570c <UART_SetConfig+0x6f4>)
 8005544:	fba2 2303 	umull	r2, r3, r2, r3
 8005548:	095b      	lsrs	r3, r3, #5
 800554a:	f003 020f 	and.w	r2, r3, #15
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4442      	add	r2, r8
 8005554:	609a      	str	r2, [r3, #8]
 8005556:	e0d0      	b.n	80056fa <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005558:	f7fe ffd8 	bl	800450c <HAL_RCC_GetPCLK1Freq>
 800555c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	469a      	mov	sl, r3
 8005562:	f04f 0b00 	mov.w	fp, #0
 8005566:	46d0      	mov	r8, sl
 8005568:	46d9      	mov	r9, fp
 800556a:	eb18 0308 	adds.w	r3, r8, r8
 800556e:	eb49 0409 	adc.w	r4, r9, r9
 8005572:	4698      	mov	r8, r3
 8005574:	46a1      	mov	r9, r4
 8005576:	eb18 080a 	adds.w	r8, r8, sl
 800557a:	eb49 090b 	adc.w	r9, r9, fp
 800557e:	f04f 0100 	mov.w	r1, #0
 8005582:	f04f 0200 	mov.w	r2, #0
 8005586:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800558a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800558e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005592:	4688      	mov	r8, r1
 8005594:	4691      	mov	r9, r2
 8005596:	eb1a 0508 	adds.w	r5, sl, r8
 800559a:	eb4b 0609 	adc.w	r6, fp, r9
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	4619      	mov	r1, r3
 80055a4:	f04f 0200 	mov.w	r2, #0
 80055a8:	f04f 0300 	mov.w	r3, #0
 80055ac:	f04f 0400 	mov.w	r4, #0
 80055b0:	0094      	lsls	r4, r2, #2
 80055b2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80055b6:	008b      	lsls	r3, r1, #2
 80055b8:	461a      	mov	r2, r3
 80055ba:	4623      	mov	r3, r4
 80055bc:	4628      	mov	r0, r5
 80055be:	4631      	mov	r1, r6
 80055c0:	f7fa fe56 	bl	8000270 <__aeabi_uldivmod>
 80055c4:	4603      	mov	r3, r0
 80055c6:	460c      	mov	r4, r1
 80055c8:	461a      	mov	r2, r3
 80055ca:	4b50      	ldr	r3, [pc, #320]	; (800570c <UART_SetConfig+0x6f4>)
 80055cc:	fba3 2302 	umull	r2, r3, r3, r2
 80055d0:	095b      	lsrs	r3, r3, #5
 80055d2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	469b      	mov	fp, r3
 80055da:	f04f 0c00 	mov.w	ip, #0
 80055de:	46d9      	mov	r9, fp
 80055e0:	46e2      	mov	sl, ip
 80055e2:	eb19 0309 	adds.w	r3, r9, r9
 80055e6:	eb4a 040a 	adc.w	r4, sl, sl
 80055ea:	4699      	mov	r9, r3
 80055ec:	46a2      	mov	sl, r4
 80055ee:	eb19 090b 	adds.w	r9, r9, fp
 80055f2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80055f6:	f04f 0100 	mov.w	r1, #0
 80055fa:	f04f 0200 	mov.w	r2, #0
 80055fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005602:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005606:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800560a:	4689      	mov	r9, r1
 800560c:	4692      	mov	sl, r2
 800560e:	eb1b 0509 	adds.w	r5, fp, r9
 8005612:	eb4c 060a 	adc.w	r6, ip, sl
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	4619      	mov	r1, r3
 800561c:	f04f 0200 	mov.w	r2, #0
 8005620:	f04f 0300 	mov.w	r3, #0
 8005624:	f04f 0400 	mov.w	r4, #0
 8005628:	0094      	lsls	r4, r2, #2
 800562a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800562e:	008b      	lsls	r3, r1, #2
 8005630:	461a      	mov	r2, r3
 8005632:	4623      	mov	r3, r4
 8005634:	4628      	mov	r0, r5
 8005636:	4631      	mov	r1, r6
 8005638:	f7fa fe1a 	bl	8000270 <__aeabi_uldivmod>
 800563c:	4603      	mov	r3, r0
 800563e:	460c      	mov	r4, r1
 8005640:	461a      	mov	r2, r3
 8005642:	4b32      	ldr	r3, [pc, #200]	; (800570c <UART_SetConfig+0x6f4>)
 8005644:	fba3 1302 	umull	r1, r3, r3, r2
 8005648:	095b      	lsrs	r3, r3, #5
 800564a:	2164      	movs	r1, #100	; 0x64
 800564c:	fb01 f303 	mul.w	r3, r1, r3
 8005650:	1ad3      	subs	r3, r2, r3
 8005652:	011b      	lsls	r3, r3, #4
 8005654:	3332      	adds	r3, #50	; 0x32
 8005656:	4a2d      	ldr	r2, [pc, #180]	; (800570c <UART_SetConfig+0x6f4>)
 8005658:	fba2 2303 	umull	r2, r3, r2, r3
 800565c:	095b      	lsrs	r3, r3, #5
 800565e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005662:	4498      	add	r8, r3
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	469b      	mov	fp, r3
 8005668:	f04f 0c00 	mov.w	ip, #0
 800566c:	46d9      	mov	r9, fp
 800566e:	46e2      	mov	sl, ip
 8005670:	eb19 0309 	adds.w	r3, r9, r9
 8005674:	eb4a 040a 	adc.w	r4, sl, sl
 8005678:	4699      	mov	r9, r3
 800567a:	46a2      	mov	sl, r4
 800567c:	eb19 090b 	adds.w	r9, r9, fp
 8005680:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005684:	f04f 0100 	mov.w	r1, #0
 8005688:	f04f 0200 	mov.w	r2, #0
 800568c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005690:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005694:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005698:	4689      	mov	r9, r1
 800569a:	4692      	mov	sl, r2
 800569c:	eb1b 0509 	adds.w	r5, fp, r9
 80056a0:	eb4c 060a 	adc.w	r6, ip, sl
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	4619      	mov	r1, r3
 80056aa:	f04f 0200 	mov.w	r2, #0
 80056ae:	f04f 0300 	mov.w	r3, #0
 80056b2:	f04f 0400 	mov.w	r4, #0
 80056b6:	0094      	lsls	r4, r2, #2
 80056b8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80056bc:	008b      	lsls	r3, r1, #2
 80056be:	461a      	mov	r2, r3
 80056c0:	4623      	mov	r3, r4
 80056c2:	4628      	mov	r0, r5
 80056c4:	4631      	mov	r1, r6
 80056c6:	f7fa fdd3 	bl	8000270 <__aeabi_uldivmod>
 80056ca:	4603      	mov	r3, r0
 80056cc:	460c      	mov	r4, r1
 80056ce:	461a      	mov	r2, r3
 80056d0:	4b0e      	ldr	r3, [pc, #56]	; (800570c <UART_SetConfig+0x6f4>)
 80056d2:	fba3 1302 	umull	r1, r3, r3, r2
 80056d6:	095b      	lsrs	r3, r3, #5
 80056d8:	2164      	movs	r1, #100	; 0x64
 80056da:	fb01 f303 	mul.w	r3, r1, r3
 80056de:	1ad3      	subs	r3, r2, r3
 80056e0:	011b      	lsls	r3, r3, #4
 80056e2:	3332      	adds	r3, #50	; 0x32
 80056e4:	4a09      	ldr	r2, [pc, #36]	; (800570c <UART_SetConfig+0x6f4>)
 80056e6:	fba2 2303 	umull	r2, r3, r2, r3
 80056ea:	095b      	lsrs	r3, r3, #5
 80056ec:	f003 020f 	and.w	r2, r3, #15
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4442      	add	r2, r8
 80056f6:	609a      	str	r2, [r3, #8]
}
 80056f8:	e7ff      	b.n	80056fa <UART_SetConfig+0x6e2>
 80056fa:	bf00      	nop
 80056fc:	3714      	adds	r7, #20
 80056fe:	46bd      	mov	sp, r7
 8005700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005704:	40011000 	.word	0x40011000
 8005708:	40011400 	.word	0x40011400
 800570c:	51eb851f 	.word	0x51eb851f

08005710 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005710:	b084      	sub	sp, #16
 8005712:	b580      	push	{r7, lr}
 8005714:	b084      	sub	sp, #16
 8005716:	af00      	add	r7, sp, #0
 8005718:	6078      	str	r0, [r7, #4]
 800571a:	f107 001c 	add.w	r0, r7, #28
 800571e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005724:	2b01      	cmp	r3, #1
 8005726:	d122      	bne.n	800576e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800572c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800573c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005750:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005752:	2b01      	cmp	r3, #1
 8005754:	d105      	bne.n	8005762 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f000 f94a 	bl	80059fc <USB_CoreReset>
 8005768:	4603      	mov	r3, r0
 800576a:	73fb      	strb	r3, [r7, #15]
 800576c:	e01a      	b.n	80057a4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f000 f93e 	bl	80059fc <USB_CoreReset>
 8005780:	4603      	mov	r3, r0
 8005782:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005784:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005786:	2b00      	cmp	r3, #0
 8005788:	d106      	bne.n	8005798 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800578e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	639a      	str	r2, [r3, #56]	; 0x38
 8005796:	e005      	b.n	80057a4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800579c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80057a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d10b      	bne.n	80057c2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	f043 0206 	orr.w	r2, r3, #6
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	f043 0220 	orr.w	r2, r3, #32
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80057c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	3710      	adds	r7, #16
 80057c8:	46bd      	mov	sp, r7
 80057ca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80057ce:	b004      	add	sp, #16
 80057d0:	4770      	bx	lr

080057d2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80057d2:	b480      	push	{r7}
 80057d4:	b083      	sub	sp, #12
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	f043 0201 	orr.w	r2, r3, #1
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80057e6:	2300      	movs	r3, #0
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	370c      	adds	r7, #12
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr

080057f4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b083      	sub	sp, #12
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	f023 0201 	bic.w	r2, r3, #1
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005808:	2300      	movs	r3, #0
}
 800580a:	4618      	mov	r0, r3
 800580c:	370c      	adds	r7, #12
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr

08005816 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005816:	b580      	push	{r7, lr}
 8005818:	b082      	sub	sp, #8
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
 800581e:	460b      	mov	r3, r1
 8005820:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	68db      	ldr	r3, [r3, #12]
 8005826:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800582e:	78fb      	ldrb	r3, [r7, #3]
 8005830:	2b01      	cmp	r3, #1
 8005832:	d106      	bne.n	8005842 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	60da      	str	r2, [r3, #12]
 8005840:	e00b      	b.n	800585a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005842:	78fb      	ldrb	r3, [r7, #3]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d106      	bne.n	8005856 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	68db      	ldr	r3, [r3, #12]
 800584c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	60da      	str	r2, [r3, #12]
 8005854:	e001      	b.n	800585a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	e003      	b.n	8005862 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800585a:	2032      	movs	r0, #50	; 0x32
 800585c:	f7fb fc4a 	bl	80010f4 <HAL_Delay>

  return HAL_OK;
 8005860:	2300      	movs	r3, #0
}
 8005862:	4618      	mov	r0, r3
 8005864:	3708      	adds	r7, #8
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}
	...

0800586c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800586c:	b480      	push	{r7}
 800586e:	b085      	sub	sp, #20
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005876:	2300      	movs	r3, #0
 8005878:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	019b      	lsls	r3, r3, #6
 800587e:	f043 0220 	orr.w	r2, r3, #32
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	3301      	adds	r3, #1
 800588a:	60fb      	str	r3, [r7, #12]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	4a09      	ldr	r2, [pc, #36]	; (80058b4 <USB_FlushTxFifo+0x48>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d901      	bls.n	8005898 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005894:	2303      	movs	r3, #3
 8005896:	e006      	b.n	80058a6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	691b      	ldr	r3, [r3, #16]
 800589c:	f003 0320 	and.w	r3, r3, #32
 80058a0:	2b20      	cmp	r3, #32
 80058a2:	d0f0      	beq.n	8005886 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80058a4:	2300      	movs	r3, #0
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3714      	adds	r7, #20
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr
 80058b2:	bf00      	nop
 80058b4:	00030d40 	.word	0x00030d40

080058b8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b085      	sub	sp, #20
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80058c0:	2300      	movs	r3, #0
 80058c2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2210      	movs	r2, #16
 80058c8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	3301      	adds	r3, #1
 80058ce:	60fb      	str	r3, [r7, #12]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	4a09      	ldr	r2, [pc, #36]	; (80058f8 <USB_FlushRxFifo+0x40>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d901      	bls.n	80058dc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80058d8:	2303      	movs	r3, #3
 80058da:	e006      	b.n	80058ea <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	691b      	ldr	r3, [r3, #16]
 80058e0:	f003 0310 	and.w	r3, r3, #16
 80058e4:	2b10      	cmp	r3, #16
 80058e6:	d0f0      	beq.n	80058ca <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80058e8:	2300      	movs	r3, #0
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3714      	adds	r7, #20
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr
 80058f6:	bf00      	nop
 80058f8:	00030d40 	.word	0x00030d40

080058fc <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b089      	sub	sp, #36	; 0x24
 8005900:	af00      	add	r7, sp, #0
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	60b9      	str	r1, [r7, #8]
 8005906:	4611      	mov	r1, r2
 8005908:	461a      	mov	r2, r3
 800590a:	460b      	mov	r3, r1
 800590c:	71fb      	strb	r3, [r7, #7]
 800590e:	4613      	mov	r3, r2
 8005910:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800591a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800591e:	2b00      	cmp	r3, #0
 8005920:	d11a      	bne.n	8005958 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005922:	88bb      	ldrh	r3, [r7, #4]
 8005924:	3303      	adds	r3, #3
 8005926:	089b      	lsrs	r3, r3, #2
 8005928:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800592a:	2300      	movs	r3, #0
 800592c:	61bb      	str	r3, [r7, #24]
 800592e:	e00f      	b.n	8005950 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005930:	79fb      	ldrb	r3, [r7, #7]
 8005932:	031a      	lsls	r2, r3, #12
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	4413      	add	r3, r2
 8005938:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800593c:	461a      	mov	r2, r3
 800593e:	69fb      	ldr	r3, [r7, #28]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005944:	69fb      	ldr	r3, [r7, #28]
 8005946:	3304      	adds	r3, #4
 8005948:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800594a:	69bb      	ldr	r3, [r7, #24]
 800594c:	3301      	adds	r3, #1
 800594e:	61bb      	str	r3, [r7, #24]
 8005950:	69ba      	ldr	r2, [r7, #24]
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	429a      	cmp	r2, r3
 8005956:	d3eb      	bcc.n	8005930 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005958:	2300      	movs	r3, #0
}
 800595a:	4618      	mov	r0, r3
 800595c:	3724      	adds	r7, #36	; 0x24
 800595e:	46bd      	mov	sp, r7
 8005960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005964:	4770      	bx	lr

08005966 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005966:	b480      	push	{r7}
 8005968:	b089      	sub	sp, #36	; 0x24
 800596a:	af00      	add	r7, sp, #0
 800596c:	60f8      	str	r0, [r7, #12]
 800596e:	60b9      	str	r1, [r7, #8]
 8005970:	4613      	mov	r3, r2
 8005972:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800597c:	88fb      	ldrh	r3, [r7, #6]
 800597e:	3303      	adds	r3, #3
 8005980:	089b      	lsrs	r3, r3, #2
 8005982:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005984:	2300      	movs	r3, #0
 8005986:	61bb      	str	r3, [r7, #24]
 8005988:	e00b      	b.n	80059a2 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	69fb      	ldr	r3, [r7, #28]
 8005994:	601a      	str	r2, [r3, #0]
    pDest++;
 8005996:	69fb      	ldr	r3, [r7, #28]
 8005998:	3304      	adds	r3, #4
 800599a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800599c:	69bb      	ldr	r3, [r7, #24]
 800599e:	3301      	adds	r3, #1
 80059a0:	61bb      	str	r3, [r7, #24]
 80059a2:	69ba      	ldr	r2, [r7, #24]
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d3ef      	bcc.n	800598a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80059aa:	69fb      	ldr	r3, [r7, #28]
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3724      	adds	r7, #36	; 0x24
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr

080059b8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b085      	sub	sp, #20
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	695b      	ldr	r3, [r3, #20]
 80059c4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	699b      	ldr	r3, [r3, #24]
 80059ca:	68fa      	ldr	r2, [r7, #12]
 80059cc:	4013      	ands	r3, r2
 80059ce:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80059d0:	68fb      	ldr	r3, [r7, #12]
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3714      	adds	r7, #20
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr

080059de <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80059de:	b480      	push	{r7}
 80059e0:	b083      	sub	sp, #12
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	695b      	ldr	r3, [r3, #20]
 80059ea:	f003 0301 	and.w	r3, r3, #1
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	370c      	adds	r7, #12
 80059f2:	46bd      	mov	sp, r7
 80059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f8:	4770      	bx	lr
	...

080059fc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b085      	sub	sp, #20
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005a04:	2300      	movs	r3, #0
 8005a06:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	3301      	adds	r3, #1
 8005a0c:	60fb      	str	r3, [r7, #12]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	4a13      	ldr	r2, [pc, #76]	; (8005a60 <USB_CoreReset+0x64>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d901      	bls.n	8005a1a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005a16:	2303      	movs	r3, #3
 8005a18:	e01b      	b.n	8005a52 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	691b      	ldr	r3, [r3, #16]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	daf2      	bge.n	8005a08 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005a22:	2300      	movs	r3, #0
 8005a24:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	691b      	ldr	r3, [r3, #16]
 8005a2a:	f043 0201 	orr.w	r2, r3, #1
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	3301      	adds	r3, #1
 8005a36:	60fb      	str	r3, [r7, #12]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	4a09      	ldr	r2, [pc, #36]	; (8005a60 <USB_CoreReset+0x64>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d901      	bls.n	8005a44 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005a40:	2303      	movs	r3, #3
 8005a42:	e006      	b.n	8005a52 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	691b      	ldr	r3, [r3, #16]
 8005a48:	f003 0301 	and.w	r3, r3, #1
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d0f0      	beq.n	8005a32 <USB_CoreReset+0x36>

  return HAL_OK;
 8005a50:	2300      	movs	r3, #0
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3714      	adds	r7, #20
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr
 8005a5e:	bf00      	nop
 8005a60:	00030d40 	.word	0x00030d40

08005a64 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005a64:	b084      	sub	sp, #16
 8005a66:	b580      	push	{r7, lr}
 8005a68:	b084      	sub	sp, #16
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	6078      	str	r0, [r7, #4]
 8005a6e:	f107 001c 	add.w	r0, r7, #28
 8005a72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005a80:	461a      	mov	r2, r3
 8005a82:	2300      	movs	r3, #0
 8005a84:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a8a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a96:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aa2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d018      	beq.n	8005ae8 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d10a      	bne.n	8005ad2 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	68ba      	ldr	r2, [r7, #8]
 8005ac6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005aca:	f043 0304 	orr.w	r3, r3, #4
 8005ace:	6013      	str	r3, [r2, #0]
 8005ad0:	e014      	b.n	8005afc <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	68ba      	ldr	r2, [r7, #8]
 8005adc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005ae0:	f023 0304 	bic.w	r3, r3, #4
 8005ae4:	6013      	str	r3, [r2, #0]
 8005ae6:	e009      	b.n	8005afc <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	68ba      	ldr	r2, [r7, #8]
 8005af2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005af6:	f023 0304 	bic.w	r3, r3, #4
 8005afa:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8005afc:	2110      	movs	r1, #16
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f7ff feb4 	bl	800586c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f7ff fed7 	bl	80058b8 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	60fb      	str	r3, [r7, #12]
 8005b0e:	e015      	b.n	8005b3c <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	015a      	lsls	r2, r3, #5
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	4413      	add	r3, r2
 8005b18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b1c:	461a      	mov	r2, r3
 8005b1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b22:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	015a      	lsls	r2, r3, #5
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	4413      	add	r3, r2
 8005b2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b30:	461a      	mov	r2, r3
 8005b32:	2300      	movs	r3, #0
 8005b34:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	3301      	adds	r3, #1
 8005b3a:	60fb      	str	r3, [r7, #12]
 8005b3c:	6a3b      	ldr	r3, [r7, #32]
 8005b3e:	68fa      	ldr	r2, [r7, #12]
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d3e5      	bcc.n	8005b10 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8005b44:	2101      	movs	r1, #1
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f000 f8ac 	bl	8005ca4 <USB_DriveVbus>

  HAL_Delay(200U);
 8005b4c:	20c8      	movs	r0, #200	; 0xc8
 8005b4e:	f7fb fad1 	bl	80010f4 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2200      	movs	r2, #0
 8005b56:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005b5e:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d00b      	beq.n	8005b84 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b72:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	4a14      	ldr	r2, [pc, #80]	; (8005bc8 <USB_HostInit+0x164>)
 8005b78:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4a13      	ldr	r2, [pc, #76]	; (8005bcc <USB_HostInit+0x168>)
 8005b7e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005b82:	e009      	b.n	8005b98 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2280      	movs	r2, #128	; 0x80
 8005b88:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	4a10      	ldr	r2, [pc, #64]	; (8005bd0 <USB_HostInit+0x16c>)
 8005b8e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	4a10      	ldr	r2, [pc, #64]	; (8005bd4 <USB_HostInit+0x170>)
 8005b94:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d105      	bne.n	8005baa <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	699b      	ldr	r3, [r3, #24]
 8005ba2:	f043 0210 	orr.w	r2, r3, #16
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	699a      	ldr	r2, [r3, #24]
 8005bae:	4b0a      	ldr	r3, [pc, #40]	; (8005bd8 <USB_HostInit+0x174>)
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	687a      	ldr	r2, [r7, #4]
 8005bb4:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8005bb6:	2300      	movs	r3, #0
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3710      	adds	r7, #16
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005bc2:	b004      	add	sp, #16
 8005bc4:	4770      	bx	lr
 8005bc6:	bf00      	nop
 8005bc8:	01000200 	.word	0x01000200
 8005bcc:	00e00300 	.word	0x00e00300
 8005bd0:	00600080 	.word	0x00600080
 8005bd4:	004000e0 	.word	0x004000e0
 8005bd8:	a3200008 	.word	0xa3200008

08005bdc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b085      	sub	sp, #20
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	460b      	mov	r3, r1
 8005be6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	68fa      	ldr	r2, [r7, #12]
 8005bf6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005bfa:	f023 0303 	bic.w	r3, r3, #3
 8005bfe:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	78fb      	ldrb	r3, [r7, #3]
 8005c0a:	f003 0303 	and.w	r3, r3, #3
 8005c0e:	68f9      	ldr	r1, [r7, #12]
 8005c10:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005c14:	4313      	orrs	r3, r2
 8005c16:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005c18:	78fb      	ldrb	r3, [r7, #3]
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	d107      	bne.n	8005c2e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c24:	461a      	mov	r2, r3
 8005c26:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005c2a:	6053      	str	r3, [r2, #4]
 8005c2c:	e009      	b.n	8005c42 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005c2e:	78fb      	ldrb	r3, [r7, #3]
 8005c30:	2b02      	cmp	r3, #2
 8005c32:	d106      	bne.n	8005c42 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	f241 7370 	movw	r3, #6000	; 0x1770
 8005c40:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005c42:	2300      	movs	r3, #0
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3714      	adds	r7, #20
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr

08005c50 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b084      	sub	sp, #16
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005c70:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	68fa      	ldr	r2, [r7, #12]
 8005c76:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005c7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c7e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005c80:	2064      	movs	r0, #100	; 0x64
 8005c82:	f7fb fa37 	bl	80010f4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	68fa      	ldr	r2, [r7, #12]
 8005c8a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005c8e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c92:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005c94:	200a      	movs	r0, #10
 8005c96:	f7fb fa2d 	bl	80010f4 <HAL_Delay>

  return HAL_OK;
 8005c9a:	2300      	movs	r3, #0
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3710      	adds	r7, #16
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}

08005ca4 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b085      	sub	sp, #20
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	460b      	mov	r3, r1
 8005cae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005cc8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d109      	bne.n	8005ce8 <USB_DriveVbus+0x44>
 8005cd4:	78fb      	ldrb	r3, [r7, #3]
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d106      	bne.n	8005ce8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	68fa      	ldr	r2, [r7, #12]
 8005cde:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005ce2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005ce6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005cee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cf2:	d109      	bne.n	8005d08 <USB_DriveVbus+0x64>
 8005cf4:	78fb      	ldrb	r3, [r7, #3]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d106      	bne.n	8005d08 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	68fa      	ldr	r2, [r7, #12]
 8005cfe:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005d02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d06:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005d08:	2300      	movs	r3, #0
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3714      	adds	r7, #20
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr

08005d16 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005d16:	b480      	push	{r7}
 8005d18:	b085      	sub	sp, #20
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005d22:	2300      	movs	r3, #0
 8005d24:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	0c5b      	lsrs	r3, r3, #17
 8005d34:	f003 0303 	and.w	r3, r3, #3
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3714      	adds	r7, #20
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr

08005d44 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b085      	sub	sp, #20
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	b29b      	uxth	r3, r3
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3714      	adds	r7, #20
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr
	...

08005d68 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b087      	sub	sp, #28
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	4608      	mov	r0, r1
 8005d72:	4611      	mov	r1, r2
 8005d74:	461a      	mov	r2, r3
 8005d76:	4603      	mov	r3, r0
 8005d78:	70fb      	strb	r3, [r7, #3]
 8005d7a:	460b      	mov	r3, r1
 8005d7c:	70bb      	strb	r3, [r7, #2]
 8005d7e:	4613      	mov	r3, r2
 8005d80:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005d82:	2300      	movs	r3, #0
 8005d84:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005d8a:	78fb      	ldrb	r3, [r7, #3]
 8005d8c:	015a      	lsls	r2, r3, #5
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	4413      	add	r3, r2
 8005d92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d96:	461a      	mov	r2, r3
 8005d98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d9c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005d9e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005da2:	2b03      	cmp	r3, #3
 8005da4:	d87e      	bhi.n	8005ea4 <USB_HC_Init+0x13c>
 8005da6:	a201      	add	r2, pc, #4	; (adr r2, 8005dac <USB_HC_Init+0x44>)
 8005da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dac:	08005dbd 	.word	0x08005dbd
 8005db0:	08005e67 	.word	0x08005e67
 8005db4:	08005dbd 	.word	0x08005dbd
 8005db8:	08005e29 	.word	0x08005e29
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005dbc:	78fb      	ldrb	r3, [r7, #3]
 8005dbe:	015a      	lsls	r2, r3, #5
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	4413      	add	r3, r2
 8005dc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dc8:	461a      	mov	r2, r3
 8005dca:	f240 439d 	movw	r3, #1181	; 0x49d
 8005dce:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005dd0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	da10      	bge.n	8005dfa <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005dd8:	78fb      	ldrb	r3, [r7, #3]
 8005dda:	015a      	lsls	r2, r3, #5
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	4413      	add	r3, r2
 8005de0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005de4:	68db      	ldr	r3, [r3, #12]
 8005de6:	78fa      	ldrb	r2, [r7, #3]
 8005de8:	0151      	lsls	r1, r2, #5
 8005dea:	68ba      	ldr	r2, [r7, #8]
 8005dec:	440a      	add	r2, r1
 8005dee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005df2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005df6:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8005df8:	e057      	b.n	8005eaa <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d051      	beq.n	8005eaa <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8005e06:	78fb      	ldrb	r3, [r7, #3]
 8005e08:	015a      	lsls	r2, r3, #5
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	4413      	add	r3, r2
 8005e0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e12:	68db      	ldr	r3, [r3, #12]
 8005e14:	78fa      	ldrb	r2, [r7, #3]
 8005e16:	0151      	lsls	r1, r2, #5
 8005e18:	68ba      	ldr	r2, [r7, #8]
 8005e1a:	440a      	add	r2, r1
 8005e1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e20:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005e24:	60d3      	str	r3, [r2, #12]
      break;
 8005e26:	e040      	b.n	8005eaa <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005e28:	78fb      	ldrb	r3, [r7, #3]
 8005e2a:	015a      	lsls	r2, r3, #5
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	4413      	add	r3, r2
 8005e30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e34:	461a      	mov	r2, r3
 8005e36:	f240 639d 	movw	r3, #1693	; 0x69d
 8005e3a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005e3c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	da34      	bge.n	8005eae <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005e44:	78fb      	ldrb	r3, [r7, #3]
 8005e46:	015a      	lsls	r2, r3, #5
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	4413      	add	r3, r2
 8005e4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e50:	68db      	ldr	r3, [r3, #12]
 8005e52:	78fa      	ldrb	r2, [r7, #3]
 8005e54:	0151      	lsls	r1, r2, #5
 8005e56:	68ba      	ldr	r2, [r7, #8]
 8005e58:	440a      	add	r2, r1
 8005e5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e62:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005e64:	e023      	b.n	8005eae <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005e66:	78fb      	ldrb	r3, [r7, #3]
 8005e68:	015a      	lsls	r2, r3, #5
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	4413      	add	r3, r2
 8005e6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e72:	461a      	mov	r2, r3
 8005e74:	f240 2325 	movw	r3, #549	; 0x225
 8005e78:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005e7a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	da17      	bge.n	8005eb2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005e82:	78fb      	ldrb	r3, [r7, #3]
 8005e84:	015a      	lsls	r2, r3, #5
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	4413      	add	r3, r2
 8005e8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	78fa      	ldrb	r2, [r7, #3]
 8005e92:	0151      	lsls	r1, r2, #5
 8005e94:	68ba      	ldr	r2, [r7, #8]
 8005e96:	440a      	add	r2, r1
 8005e98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e9c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005ea0:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005ea2:	e006      	b.n	8005eb2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	75fb      	strb	r3, [r7, #23]
      break;
 8005ea8:	e004      	b.n	8005eb4 <USB_HC_Init+0x14c>
      break;
 8005eaa:	bf00      	nop
 8005eac:	e002      	b.n	8005eb4 <USB_HC_Init+0x14c>
      break;
 8005eae:	bf00      	nop
 8005eb0:	e000      	b.n	8005eb4 <USB_HC_Init+0x14c>
      break;
 8005eb2:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005eba:	699a      	ldr	r2, [r3, #24]
 8005ebc:	78fb      	ldrb	r3, [r7, #3]
 8005ebe:	f003 030f 	and.w	r3, r3, #15
 8005ec2:	2101      	movs	r1, #1
 8005ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8005ec8:	68b9      	ldr	r1, [r7, #8]
 8005eca:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	699b      	ldr	r3, [r3, #24]
 8005ed6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005ede:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	da03      	bge.n	8005eee <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005ee6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005eea:	613b      	str	r3, [r7, #16]
 8005eec:	e001      	b.n	8005ef2 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8005ef2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005ef6:	2b02      	cmp	r3, #2
 8005ef8:	d103      	bne.n	8005f02 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005efa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005efe:	60fb      	str	r3, [r7, #12]
 8005f00:	e001      	b.n	8005f06 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005f02:	2300      	movs	r3, #0
 8005f04:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005f06:	787b      	ldrb	r3, [r7, #1]
 8005f08:	059b      	lsls	r3, r3, #22
 8005f0a:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005f0e:	78bb      	ldrb	r3, [r7, #2]
 8005f10:	02db      	lsls	r3, r3, #11
 8005f12:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005f16:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005f18:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005f1c:	049b      	lsls	r3, r3, #18
 8005f1e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005f22:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005f24:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005f26:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005f2a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005f30:	78fb      	ldrb	r3, [r7, #3]
 8005f32:	0159      	lsls	r1, r3, #5
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	440b      	add	r3, r1
 8005f38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f3c:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005f42:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8005f44:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005f48:	2b03      	cmp	r3, #3
 8005f4a:	d10f      	bne.n	8005f6c <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8005f4c:	78fb      	ldrb	r3, [r7, #3]
 8005f4e:	015a      	lsls	r2, r3, #5
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	4413      	add	r3, r2
 8005f54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	78fa      	ldrb	r2, [r7, #3]
 8005f5c:	0151      	lsls	r1, r2, #5
 8005f5e:	68ba      	ldr	r2, [r7, #8]
 8005f60:	440a      	add	r2, r1
 8005f62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f66:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f6a:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005f6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	371c      	adds	r7, #28
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr
 8005f7a:	bf00      	nop

08005f7c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b08c      	sub	sp, #48	; 0x30
 8005f80:	af02      	add	r7, sp, #8
 8005f82:	60f8      	str	r0, [r7, #12]
 8005f84:	60b9      	str	r1, [r7, #8]
 8005f86:	4613      	mov	r3, r2
 8005f88:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	785b      	ldrb	r3, [r3, #1]
 8005f92:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005f94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005f98:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d028      	beq.n	8005ff8 <USB_HC_StartXfer+0x7c>
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	791b      	ldrb	r3, [r3, #4]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d124      	bne.n	8005ff8 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8005fae:	79fb      	ldrb	r3, [r7, #7]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d10b      	bne.n	8005fcc <USB_HC_StartXfer+0x50>
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	795b      	ldrb	r3, [r3, #5]
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d107      	bne.n	8005fcc <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	785b      	ldrb	r3, [r3, #1]
 8005fc0:	4619      	mov	r1, r3
 8005fc2:	68f8      	ldr	r0, [r7, #12]
 8005fc4:	f000 fa2e 	bl	8006424 <USB_DoPing>
      return HAL_OK;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	e112      	b.n	80061f2 <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 8005fcc:	79fb      	ldrb	r3, [r7, #7]
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	d112      	bne.n	8005ff8 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8005fd2:	69fb      	ldr	r3, [r7, #28]
 8005fd4:	015a      	lsls	r2, r3, #5
 8005fd6:	6a3b      	ldr	r3, [r7, #32]
 8005fd8:	4413      	add	r3, r2
 8005fda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fde:	68db      	ldr	r3, [r3, #12]
 8005fe0:	69fa      	ldr	r2, [r7, #28]
 8005fe2:	0151      	lsls	r1, r2, #5
 8005fe4:	6a3a      	ldr	r2, [r7, #32]
 8005fe6:	440a      	add	r2, r1
 8005fe8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fec:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8005ff0:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	691b      	ldr	r3, [r3, #16]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d018      	beq.n	8006032 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	691b      	ldr	r3, [r3, #16]
 8006004:	68ba      	ldr	r2, [r7, #8]
 8006006:	8912      	ldrh	r2, [r2, #8]
 8006008:	4413      	add	r3, r2
 800600a:	3b01      	subs	r3, #1
 800600c:	68ba      	ldr	r2, [r7, #8]
 800600e:	8912      	ldrh	r2, [r2, #8]
 8006010:	fbb3 f3f2 	udiv	r3, r3, r2
 8006014:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006016:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006018:	8b7b      	ldrh	r3, [r7, #26]
 800601a:	429a      	cmp	r2, r3
 800601c:	d90b      	bls.n	8006036 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800601e:	8b7b      	ldrh	r3, [r7, #26]
 8006020:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8006022:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006024:	68ba      	ldr	r2, [r7, #8]
 8006026:	8912      	ldrh	r2, [r2, #8]
 8006028:	fb02 f203 	mul.w	r2, r2, r3
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	611a      	str	r2, [r3, #16]
 8006030:	e001      	b.n	8006036 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8006032:	2301      	movs	r3, #1
 8006034:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	78db      	ldrb	r3, [r3, #3]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d006      	beq.n	800604c <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800603e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006040:	68ba      	ldr	r2, [r7, #8]
 8006042:	8912      	ldrh	r2, [r2, #8]
 8006044:	fb02 f203 	mul.w	r2, r2, r3
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	691b      	ldr	r3, [r3, #16]
 8006050:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006054:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006056:	04d9      	lsls	r1, r3, #19
 8006058:	4b68      	ldr	r3, [pc, #416]	; (80061fc <USB_HC_StartXfer+0x280>)
 800605a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800605c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	7a9b      	ldrb	r3, [r3, #10]
 8006062:	075b      	lsls	r3, r3, #29
 8006064:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006068:	69f9      	ldr	r1, [r7, #28]
 800606a:	0148      	lsls	r0, r1, #5
 800606c:	6a39      	ldr	r1, [r7, #32]
 800606e:	4401      	add	r1, r0
 8006070:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006074:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006076:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006078:	79fb      	ldrb	r3, [r7, #7]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d009      	beq.n	8006092 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	68d9      	ldr	r1, [r3, #12]
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	015a      	lsls	r2, r3, #5
 8006086:	6a3b      	ldr	r3, [r7, #32]
 8006088:	4413      	add	r3, r2
 800608a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800608e:	460a      	mov	r2, r1
 8006090:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006092:	6a3b      	ldr	r3, [r7, #32]
 8006094:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	f003 0301 	and.w	r3, r3, #1
 800609e:	2b00      	cmp	r3, #0
 80060a0:	bf0c      	ite	eq
 80060a2:	2301      	moveq	r3, #1
 80060a4:	2300      	movne	r3, #0
 80060a6:	b2db      	uxtb	r3, r3
 80060a8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80060aa:	69fb      	ldr	r3, [r7, #28]
 80060ac:	015a      	lsls	r2, r3, #5
 80060ae:	6a3b      	ldr	r3, [r7, #32]
 80060b0:	4413      	add	r3, r2
 80060b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	69fa      	ldr	r2, [r7, #28]
 80060ba:	0151      	lsls	r1, r2, #5
 80060bc:	6a3a      	ldr	r2, [r7, #32]
 80060be:	440a      	add	r2, r1
 80060c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060c4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80060c8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80060ca:	69fb      	ldr	r3, [r7, #28]
 80060cc:	015a      	lsls	r2, r3, #5
 80060ce:	6a3b      	ldr	r3, [r7, #32]
 80060d0:	4413      	add	r3, r2
 80060d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	7e7b      	ldrb	r3, [r7, #25]
 80060da:	075b      	lsls	r3, r3, #29
 80060dc:	69f9      	ldr	r1, [r7, #28]
 80060de:	0148      	lsls	r0, r1, #5
 80060e0:	6a39      	ldr	r1, [r7, #32]
 80060e2:	4401      	add	r1, r0
 80060e4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80060e8:	4313      	orrs	r3, r2
 80060ea:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80060ec:	69fb      	ldr	r3, [r7, #28]
 80060ee:	015a      	lsls	r2, r3, #5
 80060f0:	6a3b      	ldr	r3, [r7, #32]
 80060f2:	4413      	add	r3, r2
 80060f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a41      	ldr	r2, [pc, #260]	; (8006200 <USB_HC_StartXfer+0x284>)
 80060fc:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80060fe:	4b40      	ldr	r3, [pc, #256]	; (8006200 <USB_HC_StartXfer+0x284>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006106:	4a3e      	ldr	r2, [pc, #248]	; (8006200 <USB_HC_StartXfer+0x284>)
 8006108:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	78db      	ldrb	r3, [r3, #3]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d006      	beq.n	8006120 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006112:	4b3b      	ldr	r3, [pc, #236]	; (8006200 <USB_HC_StartXfer+0x284>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800611a:	4a39      	ldr	r2, [pc, #228]	; (8006200 <USB_HC_StartXfer+0x284>)
 800611c:	6013      	str	r3, [r2, #0]
 800611e:	e005      	b.n	800612c <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006120:	4b37      	ldr	r3, [pc, #220]	; (8006200 <USB_HC_StartXfer+0x284>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006128:	4a35      	ldr	r2, [pc, #212]	; (8006200 <USB_HC_StartXfer+0x284>)
 800612a:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800612c:	4b34      	ldr	r3, [pc, #208]	; (8006200 <USB_HC_StartXfer+0x284>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006134:	4a32      	ldr	r2, [pc, #200]	; (8006200 <USB_HC_StartXfer+0x284>)
 8006136:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006138:	69fb      	ldr	r3, [r7, #28]
 800613a:	015a      	lsls	r2, r3, #5
 800613c:	6a3b      	ldr	r3, [r7, #32]
 800613e:	4413      	add	r3, r2
 8006140:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006144:	461a      	mov	r2, r3
 8006146:	4b2e      	ldr	r3, [pc, #184]	; (8006200 <USB_HC_StartXfer+0x284>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 800614c:	79fb      	ldrb	r3, [r7, #7]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d14e      	bne.n	80061f0 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	78db      	ldrb	r3, [r3, #3]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d14a      	bne.n	80061f0 <USB_HC_StartXfer+0x274>
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	691b      	ldr	r3, [r3, #16]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d046      	beq.n	80061f0 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	79db      	ldrb	r3, [r3, #7]
 8006166:	2b03      	cmp	r3, #3
 8006168:	d830      	bhi.n	80061cc <USB_HC_StartXfer+0x250>
 800616a:	a201      	add	r2, pc, #4	; (adr r2, 8006170 <USB_HC_StartXfer+0x1f4>)
 800616c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006170:	08006181 	.word	0x08006181
 8006174:	080061a5 	.word	0x080061a5
 8006178:	08006181 	.word	0x08006181
 800617c:	080061a5 	.word	0x080061a5
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	691b      	ldr	r3, [r3, #16]
 8006184:	3303      	adds	r3, #3
 8006186:	089b      	lsrs	r3, r3, #2
 8006188:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800618a:	8afa      	ldrh	r2, [r7, #22]
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006190:	b29b      	uxth	r3, r3
 8006192:	429a      	cmp	r2, r3
 8006194:	d91c      	bls.n	80061d0 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	699b      	ldr	r3, [r3, #24]
 800619a:	f043 0220 	orr.w	r2, r3, #32
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	619a      	str	r2, [r3, #24]
          }
          break;
 80061a2:	e015      	b.n	80061d0 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	691b      	ldr	r3, [r3, #16]
 80061a8:	3303      	adds	r3, #3
 80061aa:	089b      	lsrs	r3, r3, #2
 80061ac:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80061ae:	8afa      	ldrh	r2, [r7, #22]
 80061b0:	6a3b      	ldr	r3, [r7, #32]
 80061b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061b6:	691b      	ldr	r3, [r3, #16]
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d90a      	bls.n	80061d4 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	699b      	ldr	r3, [r3, #24]
 80061c2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	619a      	str	r2, [r3, #24]
          }
          break;
 80061ca:	e003      	b.n	80061d4 <USB_HC_StartXfer+0x258>

        default:
          break;
 80061cc:	bf00      	nop
 80061ce:	e002      	b.n	80061d6 <USB_HC_StartXfer+0x25a>
          break;
 80061d0:	bf00      	nop
 80061d2:	e000      	b.n	80061d6 <USB_HC_StartXfer+0x25a>
          break;
 80061d4:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	68d9      	ldr	r1, [r3, #12]
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	785a      	ldrb	r2, [r3, #1]
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	691b      	ldr	r3, [r3, #16]
 80061e2:	b298      	uxth	r0, r3
 80061e4:	2300      	movs	r3, #0
 80061e6:	9300      	str	r3, [sp, #0]
 80061e8:	4603      	mov	r3, r0
 80061ea:	68f8      	ldr	r0, [r7, #12]
 80061ec:	f7ff fb86 	bl	80058fc <USB_WritePacket>
    }
  }

  return HAL_OK;
 80061f0:	2300      	movs	r3, #0
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3728      	adds	r7, #40	; 0x28
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}
 80061fa:	bf00      	nop
 80061fc:	1ff80000 	.word	0x1ff80000
 8006200:	200000b0 	.word	0x200000b0

08006204 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006204:	b480      	push	{r7}
 8006206:	b085      	sub	sp, #20
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006216:	695b      	ldr	r3, [r3, #20]
 8006218:	b29b      	uxth	r3, r3
}
 800621a:	4618      	mov	r0, r3
 800621c:	3714      	adds	r7, #20
 800621e:	46bd      	mov	sp, r7
 8006220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006224:	4770      	bx	lr

08006226 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006226:	b480      	push	{r7}
 8006228:	b087      	sub	sp, #28
 800622a:	af00      	add	r7, sp, #0
 800622c:	6078      	str	r0, [r7, #4]
 800622e:	460b      	mov	r3, r1
 8006230:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8006236:	78fb      	ldrb	r3, [r7, #3]
 8006238:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800623a:	2300      	movs	r3, #0
 800623c:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	015a      	lsls	r2, r3, #5
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	4413      	add	r3, r2
 8006246:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	0c9b      	lsrs	r3, r3, #18
 800624e:	f003 0303 	and.w	r3, r3, #3
 8006252:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d002      	beq.n	8006260 <USB_HC_Halt+0x3a>
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	2b02      	cmp	r3, #2
 800625e:	d16c      	bne.n	800633a <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	015a      	lsls	r2, r3, #5
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	4413      	add	r3, r2
 8006268:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	68fa      	ldr	r2, [r7, #12]
 8006270:	0151      	lsls	r1, r2, #5
 8006272:	693a      	ldr	r2, [r7, #16]
 8006274:	440a      	add	r2, r1
 8006276:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800627a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800627e:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006284:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006288:	2b00      	cmp	r3, #0
 800628a:	d143      	bne.n	8006314 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	015a      	lsls	r2, r3, #5
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	4413      	add	r3, r2
 8006294:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	68fa      	ldr	r2, [r7, #12]
 800629c:	0151      	lsls	r1, r2, #5
 800629e:	693a      	ldr	r2, [r7, #16]
 80062a0:	440a      	add	r2, r1
 80062a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80062aa:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	015a      	lsls	r2, r3, #5
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	4413      	add	r3, r2
 80062b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	68fa      	ldr	r2, [r7, #12]
 80062bc:	0151      	lsls	r1, r2, #5
 80062be:	693a      	ldr	r2, [r7, #16]
 80062c0:	440a      	add	r2, r1
 80062c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80062ca:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	015a      	lsls	r2, r3, #5
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	4413      	add	r3, r2
 80062d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	68fa      	ldr	r2, [r7, #12]
 80062dc:	0151      	lsls	r1, r2, #5
 80062de:	693a      	ldr	r2, [r7, #16]
 80062e0:	440a      	add	r2, r1
 80062e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062e6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80062ea:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	3301      	adds	r3, #1
 80062f0:	617b      	str	r3, [r7, #20]
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80062f8:	d81d      	bhi.n	8006336 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	015a      	lsls	r2, r3, #5
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	4413      	add	r3, r2
 8006302:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800630c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006310:	d0ec      	beq.n	80062ec <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006312:	e080      	b.n	8006416 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	015a      	lsls	r2, r3, #5
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	4413      	add	r3, r2
 800631c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	68fa      	ldr	r2, [r7, #12]
 8006324:	0151      	lsls	r1, r2, #5
 8006326:	693a      	ldr	r2, [r7, #16]
 8006328:	440a      	add	r2, r1
 800632a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800632e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006332:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006334:	e06f      	b.n	8006416 <USB_HC_Halt+0x1f0>
          break;
 8006336:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006338:	e06d      	b.n	8006416 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	015a      	lsls	r2, r3, #5
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	4413      	add	r3, r2
 8006342:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	68fa      	ldr	r2, [r7, #12]
 800634a:	0151      	lsls	r1, r2, #5
 800634c:	693a      	ldr	r2, [r7, #16]
 800634e:	440a      	add	r2, r1
 8006350:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006354:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006358:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006360:	691b      	ldr	r3, [r3, #16]
 8006362:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006366:	2b00      	cmp	r3, #0
 8006368:	d143      	bne.n	80063f2 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	015a      	lsls	r2, r3, #5
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	4413      	add	r3, r2
 8006372:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	68fa      	ldr	r2, [r7, #12]
 800637a:	0151      	lsls	r1, r2, #5
 800637c:	693a      	ldr	r2, [r7, #16]
 800637e:	440a      	add	r2, r1
 8006380:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006384:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006388:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	015a      	lsls	r2, r3, #5
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	4413      	add	r3, r2
 8006392:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	68fa      	ldr	r2, [r7, #12]
 800639a:	0151      	lsls	r1, r2, #5
 800639c:	693a      	ldr	r2, [r7, #16]
 800639e:	440a      	add	r2, r1
 80063a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80063a8:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	015a      	lsls	r2, r3, #5
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	4413      	add	r3, r2
 80063b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	68fa      	ldr	r2, [r7, #12]
 80063ba:	0151      	lsls	r1, r2, #5
 80063bc:	693a      	ldr	r2, [r7, #16]
 80063be:	440a      	add	r2, r1
 80063c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063c4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80063c8:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	3301      	adds	r3, #1
 80063ce:	617b      	str	r3, [r7, #20]
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80063d6:	d81d      	bhi.n	8006414 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	015a      	lsls	r2, r3, #5
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	4413      	add	r3, r2
 80063e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80063ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063ee:	d0ec      	beq.n	80063ca <USB_HC_Halt+0x1a4>
 80063f0:	e011      	b.n	8006416 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	015a      	lsls	r2, r3, #5
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	4413      	add	r3, r2
 80063fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	68fa      	ldr	r2, [r7, #12]
 8006402:	0151      	lsls	r1, r2, #5
 8006404:	693a      	ldr	r2, [r7, #16]
 8006406:	440a      	add	r2, r1
 8006408:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800640c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006410:	6013      	str	r3, [r2, #0]
 8006412:	e000      	b.n	8006416 <USB_HC_Halt+0x1f0>
          break;
 8006414:	bf00      	nop
    }
  }

  return HAL_OK;
 8006416:	2300      	movs	r3, #0
}
 8006418:	4618      	mov	r0, r3
 800641a:	371c      	adds	r7, #28
 800641c:	46bd      	mov	sp, r7
 800641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006422:	4770      	bx	lr

08006424 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006424:	b480      	push	{r7}
 8006426:	b087      	sub	sp, #28
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	460b      	mov	r3, r1
 800642e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006434:	78fb      	ldrb	r3, [r7, #3]
 8006436:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006438:	2301      	movs	r3, #1
 800643a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	04da      	lsls	r2, r3, #19
 8006440:	4b15      	ldr	r3, [pc, #84]	; (8006498 <USB_DoPing+0x74>)
 8006442:	4013      	ands	r3, r2
 8006444:	693a      	ldr	r2, [r7, #16]
 8006446:	0151      	lsls	r1, r2, #5
 8006448:	697a      	ldr	r2, [r7, #20]
 800644a:	440a      	add	r2, r1
 800644c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006450:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006454:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	015a      	lsls	r2, r3, #5
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	4413      	add	r3, r2
 800645e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800646c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006474:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	015a      	lsls	r2, r3, #5
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	4413      	add	r3, r2
 800647e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006482:	461a      	mov	r2, r3
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006488:	2300      	movs	r3, #0
}
 800648a:	4618      	mov	r0, r3
 800648c:	371c      	adds	r7, #28
 800648e:	46bd      	mov	sp, r7
 8006490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006494:	4770      	bx	lr
 8006496:	bf00      	nop
 8006498:	1ff80000 	.word	0x1ff80000

0800649c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b086      	sub	sp, #24
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80064a8:	2300      	movs	r3, #0
 80064aa:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f7ff f9a1 	bl	80057f4 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80064b2:	2110      	movs	r1, #16
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f7ff f9d9 	bl	800586c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f7ff f9fc 	bl	80058b8 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80064c0:	2300      	movs	r3, #0
 80064c2:	613b      	str	r3, [r7, #16]
 80064c4:	e01f      	b.n	8006506 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	015a      	lsls	r2, r3, #5
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	4413      	add	r3, r2
 80064ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80064dc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80064e4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80064ec:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	015a      	lsls	r2, r3, #5
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	4413      	add	r3, r2
 80064f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064fa:	461a      	mov	r2, r3
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	3301      	adds	r3, #1
 8006504:	613b      	str	r3, [r7, #16]
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	2b0f      	cmp	r3, #15
 800650a:	d9dc      	bls.n	80064c6 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800650c:	2300      	movs	r3, #0
 800650e:	613b      	str	r3, [r7, #16]
 8006510:	e034      	b.n	800657c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	015a      	lsls	r2, r3, #5
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	4413      	add	r3, r2
 800651a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006528:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006530:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006538:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	015a      	lsls	r2, r3, #5
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	4413      	add	r3, r2
 8006542:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006546:	461a      	mov	r2, r3
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	3301      	adds	r3, #1
 8006550:	617b      	str	r3, [r7, #20]
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006558:	d80c      	bhi.n	8006574 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	015a      	lsls	r2, r3, #5
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	4413      	add	r3, r2
 8006562:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800656c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006570:	d0ec      	beq.n	800654c <USB_StopHost+0xb0>
 8006572:	e000      	b.n	8006576 <USB_StopHost+0xda>
        break;
 8006574:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	3301      	adds	r3, #1
 800657a:	613b      	str	r3, [r7, #16]
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	2b0f      	cmp	r3, #15
 8006580:	d9c7      	bls.n	8006512 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006588:	461a      	mov	r2, r3
 800658a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800658e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006596:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f7ff f91a 	bl	80057d2 <USB_EnableGlobalInt>

  return HAL_OK;
 800659e:	2300      	movs	r3, #0
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3718      	adds	r7, #24
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}

080065a8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80065a8:	b590      	push	{r4, r7, lr}
 80065aa:	b089      	sub	sp, #36	; 0x24
 80065ac:	af04      	add	r7, sp, #16
 80065ae:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80065b0:	2301      	movs	r3, #1
 80065b2:	2202      	movs	r2, #2
 80065b4:	2102      	movs	r1, #2
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f000 fc68 	bl	8006e8c <USBH_FindInterface>
 80065bc:	4603      	mov	r3, r0
 80065be:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80065c0:	7bfb      	ldrb	r3, [r7, #15]
 80065c2:	2bff      	cmp	r3, #255	; 0xff
 80065c4:	d002      	beq.n	80065cc <USBH_CDC_InterfaceInit+0x24>
 80065c6:	7bfb      	ldrb	r3, [r7, #15]
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d901      	bls.n	80065d0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80065cc:	2302      	movs	r3, #2
 80065ce:	e13d      	b.n	800684c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80065d0:	7bfb      	ldrb	r3, [r7, #15]
 80065d2:	4619      	mov	r1, r3
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f000 fc3d 	bl	8006e54 <USBH_SelectInterface>
 80065da:	4603      	mov	r3, r0
 80065dc:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80065de:	7bbb      	ldrb	r3, [r7, #14]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d001      	beq.n	80065e8 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80065e4:	2302      	movs	r3, #2
 80065e6:	e131      	b.n	800684c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80065ee:	2050      	movs	r0, #80	; 0x50
 80065f0:	f002 f9fc 	bl	80089ec <malloc>
 80065f4:	4603      	mov	r3, r0
 80065f6:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80065fe:	69db      	ldr	r3, [r3, #28]
 8006600:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d101      	bne.n	800660c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006608:	2302      	movs	r3, #2
 800660a:	e11f      	b.n	800684c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800660c:	2250      	movs	r2, #80	; 0x50
 800660e:	2100      	movs	r1, #0
 8006610:	68b8      	ldr	r0, [r7, #8]
 8006612:	f002 f9fb 	bl	8008a0c <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006616:	7bfb      	ldrb	r3, [r7, #15]
 8006618:	687a      	ldr	r2, [r7, #4]
 800661a:	211a      	movs	r1, #26
 800661c:	fb01 f303 	mul.w	r3, r1, r3
 8006620:	4413      	add	r3, r2
 8006622:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	b25b      	sxtb	r3, r3
 800662a:	2b00      	cmp	r3, #0
 800662c:	da15      	bge.n	800665a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800662e:	7bfb      	ldrb	r3, [r7, #15]
 8006630:	687a      	ldr	r2, [r7, #4]
 8006632:	211a      	movs	r1, #26
 8006634:	fb01 f303 	mul.w	r3, r1, r3
 8006638:	4413      	add	r3, r2
 800663a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800663e:	781a      	ldrb	r2, [r3, #0]
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006644:	7bfb      	ldrb	r3, [r7, #15]
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	211a      	movs	r1, #26
 800664a:	fb01 f303 	mul.w	r3, r1, r3
 800664e:	4413      	add	r3, r2
 8006650:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006654:	881a      	ldrh	r2, [r3, #0]
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	785b      	ldrb	r3, [r3, #1]
 800665e:	4619      	mov	r1, r3
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f001 fe36 	bl	80082d2 <USBH_AllocPipe>
 8006666:	4603      	mov	r3, r0
 8006668:	461a      	mov	r2, r3
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	7819      	ldrb	r1, [r3, #0]
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	7858      	ldrb	r0, [r3, #1]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006682:	68ba      	ldr	r2, [r7, #8]
 8006684:	8952      	ldrh	r2, [r2, #10]
 8006686:	9202      	str	r2, [sp, #8]
 8006688:	2203      	movs	r2, #3
 800668a:	9201      	str	r2, [sp, #4]
 800668c:	9300      	str	r3, [sp, #0]
 800668e:	4623      	mov	r3, r4
 8006690:	4602      	mov	r2, r0
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f001 fdee 	bl	8008274 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	2200      	movs	r2, #0
 800669e:	4619      	mov	r1, r3
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f002 f8f3 	bl	800888c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80066a6:	2300      	movs	r3, #0
 80066a8:	2200      	movs	r2, #0
 80066aa:	210a      	movs	r1, #10
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f000 fbed 	bl	8006e8c <USBH_FindInterface>
 80066b2:	4603      	mov	r3, r0
 80066b4:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80066b6:	7bfb      	ldrb	r3, [r7, #15]
 80066b8:	2bff      	cmp	r3, #255	; 0xff
 80066ba:	d002      	beq.n	80066c2 <USBH_CDC_InterfaceInit+0x11a>
 80066bc:	7bfb      	ldrb	r3, [r7, #15]
 80066be:	2b01      	cmp	r3, #1
 80066c0:	d901      	bls.n	80066c6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80066c2:	2302      	movs	r3, #2
 80066c4:	e0c2      	b.n	800684c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80066c6:	7bfb      	ldrb	r3, [r7, #15]
 80066c8:	687a      	ldr	r2, [r7, #4]
 80066ca:	211a      	movs	r1, #26
 80066cc:	fb01 f303 	mul.w	r3, r1, r3
 80066d0:	4413      	add	r3, r2
 80066d2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80066d6:	781b      	ldrb	r3, [r3, #0]
 80066d8:	b25b      	sxtb	r3, r3
 80066da:	2b00      	cmp	r3, #0
 80066dc:	da16      	bge.n	800670c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80066de:	7bfb      	ldrb	r3, [r7, #15]
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	211a      	movs	r1, #26
 80066e4:	fb01 f303 	mul.w	r3, r1, r3
 80066e8:	4413      	add	r3, r2
 80066ea:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80066ee:	781a      	ldrb	r2, [r3, #0]
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80066f4:	7bfb      	ldrb	r3, [r7, #15]
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	211a      	movs	r1, #26
 80066fa:	fb01 f303 	mul.w	r3, r1, r3
 80066fe:	4413      	add	r3, r2
 8006700:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006704:	881a      	ldrh	r2, [r3, #0]
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	835a      	strh	r2, [r3, #26]
 800670a:	e015      	b.n	8006738 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800670c:	7bfb      	ldrb	r3, [r7, #15]
 800670e:	687a      	ldr	r2, [r7, #4]
 8006710:	211a      	movs	r1, #26
 8006712:	fb01 f303 	mul.w	r3, r1, r3
 8006716:	4413      	add	r3, r2
 8006718:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800671c:	781a      	ldrb	r2, [r3, #0]
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006722:	7bfb      	ldrb	r3, [r7, #15]
 8006724:	687a      	ldr	r2, [r7, #4]
 8006726:	211a      	movs	r1, #26
 8006728:	fb01 f303 	mul.w	r3, r1, r3
 800672c:	4413      	add	r3, r2
 800672e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006732:	881a      	ldrh	r2, [r3, #0]
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8006738:	7bfb      	ldrb	r3, [r7, #15]
 800673a:	687a      	ldr	r2, [r7, #4]
 800673c:	211a      	movs	r1, #26
 800673e:	fb01 f303 	mul.w	r3, r1, r3
 8006742:	4413      	add	r3, r2
 8006744:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006748:	781b      	ldrb	r3, [r3, #0]
 800674a:	b25b      	sxtb	r3, r3
 800674c:	2b00      	cmp	r3, #0
 800674e:	da16      	bge.n	800677e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006750:	7bfb      	ldrb	r3, [r7, #15]
 8006752:	687a      	ldr	r2, [r7, #4]
 8006754:	211a      	movs	r1, #26
 8006756:	fb01 f303 	mul.w	r3, r1, r3
 800675a:	4413      	add	r3, r2
 800675c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006760:	781a      	ldrb	r2, [r3, #0]
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006766:	7bfb      	ldrb	r3, [r7, #15]
 8006768:	687a      	ldr	r2, [r7, #4]
 800676a:	211a      	movs	r1, #26
 800676c:	fb01 f303 	mul.w	r3, r1, r3
 8006770:	4413      	add	r3, r2
 8006772:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006776:	881a      	ldrh	r2, [r3, #0]
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	835a      	strh	r2, [r3, #26]
 800677c:	e015      	b.n	80067aa <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800677e:	7bfb      	ldrb	r3, [r7, #15]
 8006780:	687a      	ldr	r2, [r7, #4]
 8006782:	211a      	movs	r1, #26
 8006784:	fb01 f303 	mul.w	r3, r1, r3
 8006788:	4413      	add	r3, r2
 800678a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800678e:	781a      	ldrb	r2, [r3, #0]
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006794:	7bfb      	ldrb	r3, [r7, #15]
 8006796:	687a      	ldr	r2, [r7, #4]
 8006798:	211a      	movs	r1, #26
 800679a:	fb01 f303 	mul.w	r3, r1, r3
 800679e:	4413      	add	r3, r2
 80067a0:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80067a4:	881a      	ldrh	r2, [r3, #0]
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	7b9b      	ldrb	r3, [r3, #14]
 80067ae:	4619      	mov	r1, r3
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f001 fd8e 	bl	80082d2 <USBH_AllocPipe>
 80067b6:	4603      	mov	r3, r0
 80067b8:	461a      	mov	r2, r3
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	7bdb      	ldrb	r3, [r3, #15]
 80067c2:	4619      	mov	r1, r3
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f001 fd84 	bl	80082d2 <USBH_AllocPipe>
 80067ca:	4603      	mov	r3, r0
 80067cc:	461a      	mov	r2, r3
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	7b59      	ldrb	r1, [r3, #13]
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	7b98      	ldrb	r0, [r3, #14]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80067e6:	68ba      	ldr	r2, [r7, #8]
 80067e8:	8b12      	ldrh	r2, [r2, #24]
 80067ea:	9202      	str	r2, [sp, #8]
 80067ec:	2202      	movs	r2, #2
 80067ee:	9201      	str	r2, [sp, #4]
 80067f0:	9300      	str	r3, [sp, #0]
 80067f2:	4623      	mov	r3, r4
 80067f4:	4602      	mov	r2, r0
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f001 fd3c 	bl	8008274 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	7b19      	ldrb	r1, [r3, #12]
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	7bd8      	ldrb	r0, [r3, #15]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006810:	68ba      	ldr	r2, [r7, #8]
 8006812:	8b52      	ldrh	r2, [r2, #26]
 8006814:	9202      	str	r2, [sp, #8]
 8006816:	2202      	movs	r2, #2
 8006818:	9201      	str	r2, [sp, #4]
 800681a:	9300      	str	r3, [sp, #0]
 800681c:	4623      	mov	r3, r4
 800681e:	4602      	mov	r2, r0
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f001 fd27 	bl	8008274 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	2200      	movs	r2, #0
 800682a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	7b5b      	ldrb	r3, [r3, #13]
 8006832:	2200      	movs	r2, #0
 8006834:	4619      	mov	r1, r3
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f002 f828 	bl	800888c <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	7b1b      	ldrb	r3, [r3, #12]
 8006840:	2200      	movs	r2, #0
 8006842:	4619      	mov	r1, r3
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f002 f821 	bl	800888c <USBH_LL_SetToggle>

  return USBH_OK;
 800684a:	2300      	movs	r3, #0
}
 800684c:	4618      	mov	r0, r3
 800684e:	3714      	adds	r7, #20
 8006850:	46bd      	mov	sp, r7
 8006852:	bd90      	pop	{r4, r7, pc}

08006854 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b084      	sub	sp, #16
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006862:	69db      	ldr	r3, [r3, #28]
 8006864:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	781b      	ldrb	r3, [r3, #0]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d00e      	beq.n	800688c <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	781b      	ldrb	r3, [r3, #0]
 8006872:	4619      	mov	r1, r3
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f001 fd1c 	bl	80082b2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	4619      	mov	r1, r3
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f001 fd47 	bl	8008314 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2200      	movs	r2, #0
 800688a:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	7b1b      	ldrb	r3, [r3, #12]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d00e      	beq.n	80068b2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	7b1b      	ldrb	r3, [r3, #12]
 8006898:	4619      	mov	r1, r3
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f001 fd09 	bl	80082b2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	7b1b      	ldrb	r3, [r3, #12]
 80068a4:	4619      	mov	r1, r3
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f001 fd34 	bl	8008314 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2200      	movs	r2, #0
 80068b0:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	7b5b      	ldrb	r3, [r3, #13]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d00e      	beq.n	80068d8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	7b5b      	ldrb	r3, [r3, #13]
 80068be:	4619      	mov	r1, r3
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f001 fcf6 	bl	80082b2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	7b5b      	ldrb	r3, [r3, #13]
 80068ca:	4619      	mov	r1, r3
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f001 fd21 	bl	8008314 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2200      	movs	r2, #0
 80068d6:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068de:	69db      	ldr	r3, [r3, #28]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d00b      	beq.n	80068fc <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068ea:	69db      	ldr	r3, [r3, #28]
 80068ec:	4618      	mov	r0, r3
 80068ee:	f002 f885 	bl	80089fc <free>
    phost->pActiveClass->pData = 0U;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068f8:	2200      	movs	r2, #0
 80068fa:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80068fc:	2300      	movs	r3, #0
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3710      	adds	r7, #16
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}

08006906 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006906:	b580      	push	{r7, lr}
 8006908:	b084      	sub	sp, #16
 800690a:	af00      	add	r7, sp, #0
 800690c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006914:	69db      	ldr	r3, [r3, #28]
 8006916:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	3340      	adds	r3, #64	; 0x40
 800691c:	4619      	mov	r1, r3
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f000 f8b1 	bl	8006a86 <GetLineCoding>
 8006924:	4603      	mov	r3, r0
 8006926:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006928:	7afb      	ldrb	r3, [r7, #11]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d105      	bne.n	800693a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006934:	2102      	movs	r1, #2
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800693a:	7afb      	ldrb	r3, [r7, #11]
}
 800693c:	4618      	mov	r0, r3
 800693e:	3710      	adds	r7, #16
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}

08006944 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b084      	sub	sp, #16
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800694c:	2301      	movs	r3, #1
 800694e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006950:	2300      	movs	r3, #0
 8006952:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800695a:	69db      	ldr	r3, [r3, #28]
 800695c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006964:	2b04      	cmp	r3, #4
 8006966:	d877      	bhi.n	8006a58 <USBH_CDC_Process+0x114>
 8006968:	a201      	add	r2, pc, #4	; (adr r2, 8006970 <USBH_CDC_Process+0x2c>)
 800696a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800696e:	bf00      	nop
 8006970:	08006985 	.word	0x08006985
 8006974:	0800698b 	.word	0x0800698b
 8006978:	080069bb 	.word	0x080069bb
 800697c:	08006a2f 	.word	0x08006a2f
 8006980:	08006a3d 	.word	0x08006a3d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006984:	2300      	movs	r3, #0
 8006986:	73fb      	strb	r3, [r7, #15]
      break;
 8006988:	e06d      	b.n	8006a66 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800698e:	4619      	mov	r1, r3
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f000 f897 	bl	8006ac4 <SetLineCoding>
 8006996:	4603      	mov	r3, r0
 8006998:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800699a:	7bbb      	ldrb	r3, [r7, #14]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d104      	bne.n	80069aa <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	2202      	movs	r2, #2
 80069a4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80069a8:	e058      	b.n	8006a5c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80069aa:	7bbb      	ldrb	r3, [r7, #14]
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d055      	beq.n	8006a5c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	2204      	movs	r2, #4
 80069b4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80069b8:	e050      	b.n	8006a5c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	3340      	adds	r3, #64	; 0x40
 80069be:	4619      	mov	r1, r3
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f000 f860 	bl	8006a86 <GetLineCoding>
 80069c6:	4603      	mov	r3, r0
 80069c8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80069ca:	7bbb      	ldrb	r3, [r7, #14]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d126      	bne.n	8006a1e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	2200      	movs	r2, #0
 80069d4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069e2:	791b      	ldrb	r3, [r3, #4]
 80069e4:	429a      	cmp	r2, r3
 80069e6:	d13b      	bne.n	8006a60 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069f2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80069f4:	429a      	cmp	r2, r3
 80069f6:	d133      	bne.n	8006a60 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a02:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006a04:	429a      	cmp	r2, r3
 8006a06:	d12b      	bne.n	8006a60 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a10:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d124      	bne.n	8006a60 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f000 f95a 	bl	8006cd0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006a1c:	e020      	b.n	8006a60 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006a1e:	7bbb      	ldrb	r3, [r7, #14]
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	d01d      	beq.n	8006a60 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	2204      	movs	r2, #4
 8006a28:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006a2c:	e018      	b.n	8006a60 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f000 f867 	bl	8006b02 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f000 f8dc 	bl	8006bf2 <CDC_ProcessReception>
      break;
 8006a3a:	e014      	b.n	8006a66 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006a3c:	2100      	movs	r1, #0
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f000 ffe5 	bl	8007a0e <USBH_ClrFeature>
 8006a44:	4603      	mov	r3, r0
 8006a46:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006a48:	7bbb      	ldrb	r3, [r7, #14]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d10a      	bne.n	8006a64 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	2200      	movs	r2, #0
 8006a52:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006a56:	e005      	b.n	8006a64 <USBH_CDC_Process+0x120>

    default:
      break;
 8006a58:	bf00      	nop
 8006a5a:	e004      	b.n	8006a66 <USBH_CDC_Process+0x122>
      break;
 8006a5c:	bf00      	nop
 8006a5e:	e002      	b.n	8006a66 <USBH_CDC_Process+0x122>
      break;
 8006a60:	bf00      	nop
 8006a62:	e000      	b.n	8006a66 <USBH_CDC_Process+0x122>
      break;
 8006a64:	bf00      	nop

  }

  return status;
 8006a66:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3710      	adds	r7, #16
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}

08006a70 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b083      	sub	sp, #12
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006a78:	2300      	movs	r3, #0
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	370c      	adds	r7, #12
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a84:	4770      	bx	lr

08006a86 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006a86:	b580      	push	{r7, lr}
 8006a88:	b082      	sub	sp, #8
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	6078      	str	r0, [r7, #4]
 8006a8e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	22a1      	movs	r2, #161	; 0xa1
 8006a94:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2221      	movs	r2, #33	; 0x21
 8006a9a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2207      	movs	r2, #7
 8006aac:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	2207      	movs	r2, #7
 8006ab2:	4619      	mov	r1, r3
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f001 f98a 	bl	8007dce <USBH_CtlReq>
 8006aba:	4603      	mov	r3, r0
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3708      	adds	r7, #8
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}

08006ac4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b082      	sub	sp, #8
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2221      	movs	r2, #33	; 0x21
 8006ad2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2220      	movs	r2, #32
 8006ad8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2200      	movs	r2, #0
 8006ade:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2207      	movs	r2, #7
 8006aea:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	2207      	movs	r2, #7
 8006af0:	4619      	mov	r1, r3
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f001 f96b 	bl	8007dce <USBH_CtlReq>
 8006af8:	4603      	mov	r3, r0
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3708      	adds	r7, #8
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}

08006b02 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006b02:	b580      	push	{r7, lr}
 8006b04:	b086      	sub	sp, #24
 8006b06:	af02      	add	r7, sp, #8
 8006b08:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b10:	69db      	ldr	r3, [r3, #28]
 8006b12:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006b14:	2300      	movs	r3, #0
 8006b16:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006b1e:	2b01      	cmp	r3, #1
 8006b20:	d002      	beq.n	8006b28 <CDC_ProcessTransmission+0x26>
 8006b22:	2b02      	cmp	r3, #2
 8006b24:	d025      	beq.n	8006b72 <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 8006b26:	e060      	b.n	8006bea <CDC_ProcessTransmission+0xe8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b2c:	68fa      	ldr	r2, [r7, #12]
 8006b2e:	8b12      	ldrh	r2, [r2, #24]
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d90c      	bls.n	8006b4e <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	69d9      	ldr	r1, [r3, #28]
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	8b1a      	ldrh	r2, [r3, #24]
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	7b58      	ldrb	r0, [r3, #13]
 8006b40:	2301      	movs	r3, #1
 8006b42:	9300      	str	r3, [sp, #0]
 8006b44:	4603      	mov	r3, r0
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f001 fb51 	bl	80081ee <USBH_BulkSendData>
 8006b4c:	e00c      	b.n	8006b68 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8006b56:	b29a      	uxth	r2, r3
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	7b58      	ldrb	r0, [r3, #13]
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	9300      	str	r3, [sp, #0]
 8006b60:	4603      	mov	r3, r0
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f001 fb43 	bl	80081ee <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	2202      	movs	r2, #2
 8006b6c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006b70:	e03b      	b.n	8006bea <CDC_ProcessTransmission+0xe8>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	7b5b      	ldrb	r3, [r3, #13]
 8006b76:	4619      	mov	r1, r3
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f001 fe5d 	bl	8008838 <USBH_LL_GetURBState>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006b82:	7afb      	ldrb	r3, [r7, #11]
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d128      	bne.n	8006bda <CDC_ProcessTransmission+0xd8>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b8c:	68fa      	ldr	r2, [r7, #12]
 8006b8e:	8b12      	ldrh	r2, [r2, #24]
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d90e      	bls.n	8006bb2 <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b98:	68fa      	ldr	r2, [r7, #12]
 8006b9a:	8b12      	ldrh	r2, [r2, #24]
 8006b9c:	1a9a      	subs	r2, r3, r2
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	69db      	ldr	r3, [r3, #28]
 8006ba6:	68fa      	ldr	r2, [r7, #12]
 8006ba8:	8b12      	ldrh	r2, [r2, #24]
 8006baa:	441a      	add	r2, r3
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	61da      	str	r2, [r3, #28]
 8006bb0:	e002      	b.n	8006bb8 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d004      	beq.n	8006bca <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006bc8:	e00e      	b.n	8006be8 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f000 f868 	bl	8006ca8 <USBH_CDC_TransmitCallback>
      break;
 8006bd8:	e006      	b.n	8006be8 <CDC_ProcessTransmission+0xe6>
        if (URB_Status == USBH_URB_NOTREADY)
 8006bda:	7afb      	ldrb	r3, [r7, #11]
 8006bdc:	2b02      	cmp	r3, #2
 8006bde:	d103      	bne.n	8006be8 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2201      	movs	r2, #1
 8006be4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006be8:	bf00      	nop
  }
}
 8006bea:	bf00      	nop
 8006bec:	3710      	adds	r7, #16
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}

08006bf2 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006bf2:	b580      	push	{r7, lr}
 8006bf4:	b086      	sub	sp, #24
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c00:	69db      	ldr	r3, [r3, #28]
 8006c02:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006c04:	2300      	movs	r3, #0
 8006c06:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006c0e:	2b03      	cmp	r3, #3
 8006c10:	d002      	beq.n	8006c18 <CDC_ProcessReception+0x26>
 8006c12:	2b04      	cmp	r3, #4
 8006c14:	d00e      	beq.n	8006c34 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006c16:	e043      	b.n	8006ca0 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	6a19      	ldr	r1, [r3, #32]
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	8b5a      	ldrh	r2, [r3, #26]
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	7b1b      	ldrb	r3, [r3, #12]
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f001 fb07 	bl	8008238 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	2204      	movs	r2, #4
 8006c2e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006c32:	e035      	b.n	8006ca0 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	7b1b      	ldrb	r3, [r3, #12]
 8006c38:	4619      	mov	r1, r3
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f001 fdfc 	bl	8008838 <USBH_LL_GetURBState>
 8006c40:	4603      	mov	r3, r0
 8006c42:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006c44:	7cfb      	ldrb	r3, [r7, #19]
 8006c46:	2b01      	cmp	r3, #1
 8006c48:	d129      	bne.n	8006c9e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	7b1b      	ldrb	r3, [r3, #12]
 8006c4e:	4619      	mov	r1, r3
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f001 fd5f 	bl	8008714 <USBH_LL_GetLastXferSize>
 8006c56:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c5c:	68fa      	ldr	r2, [r7, #12]
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	d016      	beq.n	8006c90 <CDC_ProcessReception+0x9e>
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	8b5b      	ldrh	r3, [r3, #26]
 8006c66:	461a      	mov	r2, r3
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d910      	bls.n	8006c90 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	1ad2      	subs	r2, r2, r3
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	6a1a      	ldr	r2, [r3, #32]
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	441a      	add	r2, r3
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	2203      	movs	r2, #3
 8006c8a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006c8e:	e006      	b.n	8006c9e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	2200      	movs	r2, #0
 8006c94:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f000 f80f 	bl	8006cbc <USBH_CDC_ReceiveCallback>
      break;
 8006c9e:	bf00      	nop
  }
}
 8006ca0:	bf00      	nop
 8006ca2:	3718      	adds	r7, #24
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}

08006ca8 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b083      	sub	sp, #12
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006cb0:	bf00      	nop
 8006cb2:	370c      	adds	r7, #12
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cba:	4770      	bx	lr

08006cbc <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b083      	sub	sp, #12
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006cc4:	bf00      	nop
 8006cc6:	370c      	adds	r7, #12
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr

08006cd0 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b083      	sub	sp, #12
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006cd8:	bf00      	nop
 8006cda:	370c      	adds	r7, #12
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr

08006ce4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b084      	sub	sp, #16
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	60f8      	str	r0, [r7, #12]
 8006cec:	60b9      	str	r1, [r7, #8]
 8006cee:	4613      	mov	r3, r2
 8006cf0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d101      	bne.n	8006cfc <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006cf8:	2302      	movs	r3, #2
 8006cfa:	e029      	b.n	8006d50 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	79fa      	ldrb	r2, [r7, #7]
 8006d00:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2200      	movs	r2, #0
 8006d08:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8006d14:	68f8      	ldr	r0, [r7, #12]
 8006d16:	f000 f81f 	bl	8006d58 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2200      	movs	r2, #0
 8006d26:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2200      	movs	r2, #0
 8006d36:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d003      	beq.n	8006d48 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	68ba      	ldr	r2, [r7, #8]
 8006d44:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8006d48:	68f8      	ldr	r0, [r7, #12]
 8006d4a:	f001 fc31 	bl	80085b0 <USBH_LL_Init>

  return USBH_OK;
 8006d4e:	2300      	movs	r3, #0
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	3710      	adds	r7, #16
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}

08006d58 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b085      	sub	sp, #20
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006d60:	2300      	movs	r3, #0
 8006d62:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006d64:	2300      	movs	r3, #0
 8006d66:	60fb      	str	r3, [r7, #12]
 8006d68:	e009      	b.n	8006d7e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006d6a:	687a      	ldr	r2, [r7, #4]
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	33e0      	adds	r3, #224	; 0xe0
 8006d70:	009b      	lsls	r3, r3, #2
 8006d72:	4413      	add	r3, r2
 8006d74:	2200      	movs	r2, #0
 8006d76:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	3301      	adds	r3, #1
 8006d7c:	60fb      	str	r3, [r7, #12]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2b0e      	cmp	r3, #14
 8006d82:	d9f2      	bls.n	8006d6a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006d84:	2300      	movs	r3, #0
 8006d86:	60fb      	str	r3, [r7, #12]
 8006d88:	e009      	b.n	8006d9e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006d8a:	687a      	ldr	r2, [r7, #4]
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	4413      	add	r3, r2
 8006d90:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006d94:	2200      	movs	r2, #0
 8006d96:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	3301      	adds	r3, #1
 8006d9c:	60fb      	str	r3, [r7, #12]
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006da4:	d3f1      	bcc.n	8006d8a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2200      	movs	r2, #0
 8006daa:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2200      	movs	r2, #0
 8006db0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2201      	movs	r2, #1
 8006db6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2240      	movs	r2, #64	; 0x40
 8006dca:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2201      	movs	r2, #1
 8006dde:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2200      	movs	r2, #0
 8006de6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2200      	movs	r2, #0
 8006dee:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006df2:	2300      	movs	r3, #0
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3714      	adds	r7, #20
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr

08006e00 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b085      	sub	sp, #20
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d016      	beq.n	8006e42 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d10e      	bne.n	8006e3c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006e24:	1c59      	adds	r1, r3, #1
 8006e26:	687a      	ldr	r2, [r7, #4]
 8006e28:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006e2c:	687a      	ldr	r2, [r7, #4]
 8006e2e:	33de      	adds	r3, #222	; 0xde
 8006e30:	6839      	ldr	r1, [r7, #0]
 8006e32:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006e36:	2300      	movs	r3, #0
 8006e38:	73fb      	strb	r3, [r7, #15]
 8006e3a:	e004      	b.n	8006e46 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006e3c:	2302      	movs	r3, #2
 8006e3e:	73fb      	strb	r3, [r7, #15]
 8006e40:	e001      	b.n	8006e46 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006e42:	2302      	movs	r3, #2
 8006e44:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3714      	adds	r7, #20
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e52:	4770      	bx	lr

08006e54 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b085      	sub	sp, #20
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
 8006e5c:	460b      	mov	r3, r1
 8006e5e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006e60:	2300      	movs	r3, #0
 8006e62:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006e6a:	78fa      	ldrb	r2, [r7, #3]
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	d204      	bcs.n	8006e7a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	78fa      	ldrb	r2, [r7, #3]
 8006e74:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006e78:	e001      	b.n	8006e7e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006e7a:	2302      	movs	r3, #2
 8006e7c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3714      	adds	r7, #20
 8006e84:	46bd      	mov	sp, r7
 8006e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8a:	4770      	bx	lr

08006e8c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b087      	sub	sp, #28
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
 8006e94:	4608      	mov	r0, r1
 8006e96:	4611      	mov	r1, r2
 8006e98:	461a      	mov	r2, r3
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	70fb      	strb	r3, [r7, #3]
 8006e9e:	460b      	mov	r3, r1
 8006ea0:	70bb      	strb	r3, [r7, #2]
 8006ea2:	4613      	mov	r3, r2
 8006ea4:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006eb4:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006eb6:	e025      	b.n	8006f04 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006eb8:	7dfb      	ldrb	r3, [r7, #23]
 8006eba:	221a      	movs	r2, #26
 8006ebc:	fb02 f303 	mul.w	r3, r2, r3
 8006ec0:	3308      	adds	r3, #8
 8006ec2:	68fa      	ldr	r2, [r7, #12]
 8006ec4:	4413      	add	r3, r2
 8006ec6:	3302      	adds	r3, #2
 8006ec8:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	795b      	ldrb	r3, [r3, #5]
 8006ece:	78fa      	ldrb	r2, [r7, #3]
 8006ed0:	429a      	cmp	r2, r3
 8006ed2:	d002      	beq.n	8006eda <USBH_FindInterface+0x4e>
 8006ed4:	78fb      	ldrb	r3, [r7, #3]
 8006ed6:	2bff      	cmp	r3, #255	; 0xff
 8006ed8:	d111      	bne.n	8006efe <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006ede:	78ba      	ldrb	r2, [r7, #2]
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d002      	beq.n	8006eea <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006ee4:	78bb      	ldrb	r3, [r7, #2]
 8006ee6:	2bff      	cmp	r3, #255	; 0xff
 8006ee8:	d109      	bne.n	8006efe <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006eee:	787a      	ldrb	r2, [r7, #1]
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	d002      	beq.n	8006efa <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006ef4:	787b      	ldrb	r3, [r7, #1]
 8006ef6:	2bff      	cmp	r3, #255	; 0xff
 8006ef8:	d101      	bne.n	8006efe <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006efa:	7dfb      	ldrb	r3, [r7, #23]
 8006efc:	e006      	b.n	8006f0c <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006efe:	7dfb      	ldrb	r3, [r7, #23]
 8006f00:	3301      	adds	r3, #1
 8006f02:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006f04:	7dfb      	ldrb	r3, [r7, #23]
 8006f06:	2b01      	cmp	r3, #1
 8006f08:	d9d6      	bls.n	8006eb8 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006f0a:	23ff      	movs	r3, #255	; 0xff
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	371c      	adds	r7, #28
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr

08006f18 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b082      	sub	sp, #8
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f001 fb81 	bl	8008628 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8006f26:	2101      	movs	r1, #1
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f001 fc98 	bl	800885e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006f2e:	2300      	movs	r3, #0
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3708      	adds	r7, #8
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}

08006f38 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b088      	sub	sp, #32
 8006f3c:	af04      	add	r7, sp, #16
 8006f3e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006f40:	2302      	movs	r3, #2
 8006f42:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006f44:	2300      	movs	r3, #0
 8006f46:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006f4e:	b2db      	uxtb	r3, r3
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	d102      	bne.n	8006f5a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2203      	movs	r2, #3
 8006f58:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	781b      	ldrb	r3, [r3, #0]
 8006f5e:	b2db      	uxtb	r3, r3
 8006f60:	2b0b      	cmp	r3, #11
 8006f62:	f200 81b3 	bhi.w	80072cc <USBH_Process+0x394>
 8006f66:	a201      	add	r2, pc, #4	; (adr r2, 8006f6c <USBH_Process+0x34>)
 8006f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f6c:	08006f9d 	.word	0x08006f9d
 8006f70:	08006fcf 	.word	0x08006fcf
 8006f74:	08007037 	.word	0x08007037
 8006f78:	08007267 	.word	0x08007267
 8006f7c:	080072cd 	.word	0x080072cd
 8006f80:	080070db 	.word	0x080070db
 8006f84:	0800720d 	.word	0x0800720d
 8006f88:	08007111 	.word	0x08007111
 8006f8c:	08007131 	.word	0x08007131
 8006f90:	08007151 	.word	0x08007151
 8006f94:	0800717f 	.word	0x0800717f
 8006f98:	0800724f 	.word	0x0800724f
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006fa2:	b2db      	uxtb	r3, r3
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	f000 8193 	beq.w	80072d0 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2201      	movs	r2, #1
 8006fae:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006fb0:	20c8      	movs	r0, #200	; 0xc8
 8006fb2:	f001 fc9e 	bl	80088f2 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f001 fb91 	bl	80086de <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006fcc:	e180      	b.n	80072d0 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d107      	bne.n	8006fe8 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2202      	movs	r2, #2
 8006fe4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006fe6:	e182      	b.n	80072ee <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006fee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006ff2:	d914      	bls.n	800701e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006ffa:	3301      	adds	r3, #1
 8006ffc:	b2da      	uxtb	r2, r3
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800700a:	2b03      	cmp	r3, #3
 800700c:	d903      	bls.n	8007016 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	220d      	movs	r2, #13
 8007012:	701a      	strb	r2, [r3, #0]
      break;
 8007014:	e16b      	b.n	80072ee <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2200      	movs	r2, #0
 800701a:	701a      	strb	r2, [r3, #0]
      break;
 800701c:	e167      	b.n	80072ee <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007024:	f103 020a 	add.w	r2, r3, #10
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800702e:	200a      	movs	r0, #10
 8007030:	f001 fc5f 	bl	80088f2 <USBH_Delay>
      break;
 8007034:	e15b      	b.n	80072ee <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800703c:	2b00      	cmp	r3, #0
 800703e:	d005      	beq.n	800704c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007046:	2104      	movs	r1, #4
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800704c:	2064      	movs	r0, #100	; 0x64
 800704e:	f001 fc50 	bl	80088f2 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f001 fb1e 	bl	8008694 <USBH_LL_GetSpeed>
 8007058:	4603      	mov	r3, r0
 800705a:	461a      	mov	r2, r3
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2205      	movs	r2, #5
 8007066:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007068:	2100      	movs	r1, #0
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f001 f931 	bl	80082d2 <USBH_AllocPipe>
 8007070:	4603      	mov	r3, r0
 8007072:	461a      	mov	r2, r3
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007078:	2180      	movs	r1, #128	; 0x80
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f001 f929 	bl	80082d2 <USBH_AllocPipe>
 8007080:	4603      	mov	r3, r0
 8007082:	461a      	mov	r2, r3
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	7919      	ldrb	r1, [r3, #4]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007098:	687a      	ldr	r2, [r7, #4]
 800709a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800709c:	b292      	uxth	r2, r2
 800709e:	9202      	str	r2, [sp, #8]
 80070a0:	2200      	movs	r2, #0
 80070a2:	9201      	str	r2, [sp, #4]
 80070a4:	9300      	str	r3, [sp, #0]
 80070a6:	4603      	mov	r3, r0
 80070a8:	2280      	movs	r2, #128	; 0x80
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f001 f8e2 	bl	8008274 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	7959      	ldrb	r1, [r3, #5]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80070c0:	687a      	ldr	r2, [r7, #4]
 80070c2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80070c4:	b292      	uxth	r2, r2
 80070c6:	9202      	str	r2, [sp, #8]
 80070c8:	2200      	movs	r2, #0
 80070ca:	9201      	str	r2, [sp, #4]
 80070cc:	9300      	str	r3, [sp, #0]
 80070ce:	4603      	mov	r3, r0
 80070d0:	2200      	movs	r2, #0
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f001 f8ce 	bl	8008274 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80070d8:	e109      	b.n	80072ee <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f000 f90c 	bl	80072f8 <USBH_HandleEnum>
 80070e0:	4603      	mov	r3, r0
 80070e2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80070e4:	7bbb      	ldrb	r3, [r7, #14]
 80070e6:	b2db      	uxtb	r3, r3
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	f040 80f3 	bne.w	80072d4 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2200      	movs	r2, #0
 80070f2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80070fc:	2b01      	cmp	r3, #1
 80070fe:	d103      	bne.n	8007108 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2208      	movs	r2, #8
 8007104:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007106:	e0e5      	b.n	80072d4 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2207      	movs	r2, #7
 800710c:	701a      	strb	r2, [r3, #0]
      break;
 800710e:	e0e1      	b.n	80072d4 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007116:	2b00      	cmp	r3, #0
 8007118:	f000 80de 	beq.w	80072d8 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007122:	2101      	movs	r1, #1
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2208      	movs	r2, #8
 800712c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800712e:	e0d3      	b.n	80072d8 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007136:	b29b      	uxth	r3, r3
 8007138:	4619      	mov	r1, r3
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f000 fc20 	bl	8007980 <USBH_SetCfg>
 8007140:	4603      	mov	r3, r0
 8007142:	2b00      	cmp	r3, #0
 8007144:	f040 80ca 	bne.w	80072dc <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2209      	movs	r2, #9
 800714c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800714e:	e0c5      	b.n	80072dc <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007156:	f003 0320 	and.w	r3, r3, #32
 800715a:	2b00      	cmp	r3, #0
 800715c:	d00b      	beq.n	8007176 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800715e:	2101      	movs	r1, #1
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f000 fc30 	bl	80079c6 <USBH_SetFeature>
 8007166:	4603      	mov	r3, r0
 8007168:	2b00      	cmp	r3, #0
 800716a:	f040 80b9 	bne.w	80072e0 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	220a      	movs	r2, #10
 8007172:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007174:	e0b4      	b.n	80072e0 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	220a      	movs	r2, #10
 800717a:	701a      	strb	r2, [r3, #0]
      break;
 800717c:	e0b0      	b.n	80072e0 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007184:	2b00      	cmp	r3, #0
 8007186:	f000 80ad 	beq.w	80072e4 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2200      	movs	r2, #0
 800718e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007192:	2300      	movs	r3, #0
 8007194:	73fb      	strb	r3, [r7, #15]
 8007196:	e016      	b.n	80071c6 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007198:	7bfa      	ldrb	r2, [r7, #15]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	32de      	adds	r2, #222	; 0xde
 800719e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071a2:	791a      	ldrb	r2, [r3, #4]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80071aa:	429a      	cmp	r2, r3
 80071ac:	d108      	bne.n	80071c0 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 80071ae:	7bfa      	ldrb	r2, [r7, #15]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	32de      	adds	r2, #222	; 0xde
 80071b4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80071be:	e005      	b.n	80071cc <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80071c0:	7bfb      	ldrb	r3, [r7, #15]
 80071c2:	3301      	adds	r3, #1
 80071c4:	73fb      	strb	r3, [r7, #15]
 80071c6:	7bfb      	ldrb	r3, [r7, #15]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d0e5      	beq.n	8007198 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d016      	beq.n	8007204 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80071dc:	689b      	ldr	r3, [r3, #8]
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	4798      	blx	r3
 80071e2:	4603      	mov	r3, r0
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d109      	bne.n	80071fc <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2206      	movs	r2, #6
 80071ec:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80071f4:	2103      	movs	r1, #3
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80071fa:	e073      	b.n	80072e4 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	220d      	movs	r2, #13
 8007200:	701a      	strb	r2, [r3, #0]
      break;
 8007202:	e06f      	b.n	80072e4 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	220d      	movs	r2, #13
 8007208:	701a      	strb	r2, [r3, #0]
      break;
 800720a:	e06b      	b.n	80072e4 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007212:	2b00      	cmp	r3, #0
 8007214:	d017      	beq.n	8007246 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800721c:	691b      	ldr	r3, [r3, #16]
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	4798      	blx	r3
 8007222:	4603      	mov	r3, r0
 8007224:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007226:	7bbb      	ldrb	r3, [r7, #14]
 8007228:	b2db      	uxtb	r3, r3
 800722a:	2b00      	cmp	r3, #0
 800722c:	d103      	bne.n	8007236 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	220b      	movs	r2, #11
 8007232:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007234:	e058      	b.n	80072e8 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8007236:	7bbb      	ldrb	r3, [r7, #14]
 8007238:	b2db      	uxtb	r3, r3
 800723a:	2b02      	cmp	r3, #2
 800723c:	d154      	bne.n	80072e8 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	220d      	movs	r2, #13
 8007242:	701a      	strb	r2, [r3, #0]
      break;
 8007244:	e050      	b.n	80072e8 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	220d      	movs	r2, #13
 800724a:	701a      	strb	r2, [r3, #0]
      break;
 800724c:	e04c      	b.n	80072e8 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007254:	2b00      	cmp	r3, #0
 8007256:	d049      	beq.n	80072ec <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800725e:	695b      	ldr	r3, [r3, #20]
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	4798      	blx	r3
      }
      break;
 8007264:	e042      	b.n	80072ec <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2200      	movs	r2, #0
 800726a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f7ff fd72 	bl	8006d58 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800727a:	2b00      	cmp	r3, #0
 800727c:	d009      	beq.n	8007292 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007284:	68db      	ldr	r3, [r3, #12]
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2200      	movs	r2, #0
 800728e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007298:	2b00      	cmp	r3, #0
 800729a:	d005      	beq.n	80072a8 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80072a2:	2105      	movs	r1, #5
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80072ae:	b2db      	uxtb	r3, r3
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	d107      	bne.n	80072c4 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2200      	movs	r2, #0
 80072b8:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f7ff fe2b 	bl	8006f18 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80072c2:	e014      	b.n	80072ee <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f001 f9af 	bl	8008628 <USBH_LL_Start>
      break;
 80072ca:	e010      	b.n	80072ee <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 80072cc:	bf00      	nop
 80072ce:	e00e      	b.n	80072ee <USBH_Process+0x3b6>
      break;
 80072d0:	bf00      	nop
 80072d2:	e00c      	b.n	80072ee <USBH_Process+0x3b6>
      break;
 80072d4:	bf00      	nop
 80072d6:	e00a      	b.n	80072ee <USBH_Process+0x3b6>
    break;
 80072d8:	bf00      	nop
 80072da:	e008      	b.n	80072ee <USBH_Process+0x3b6>
      break;
 80072dc:	bf00      	nop
 80072de:	e006      	b.n	80072ee <USBH_Process+0x3b6>
      break;
 80072e0:	bf00      	nop
 80072e2:	e004      	b.n	80072ee <USBH_Process+0x3b6>
      break;
 80072e4:	bf00      	nop
 80072e6:	e002      	b.n	80072ee <USBH_Process+0x3b6>
      break;
 80072e8:	bf00      	nop
 80072ea:	e000      	b.n	80072ee <USBH_Process+0x3b6>
      break;
 80072ec:	bf00      	nop
  }
  return USBH_OK;
 80072ee:	2300      	movs	r3, #0
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3710      	adds	r7, #16
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}

080072f8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b088      	sub	sp, #32
 80072fc:	af04      	add	r7, sp, #16
 80072fe:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007300:	2301      	movs	r3, #1
 8007302:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007304:	2301      	movs	r3, #1
 8007306:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	785b      	ldrb	r3, [r3, #1]
 800730c:	2b07      	cmp	r3, #7
 800730e:	f200 81c1 	bhi.w	8007694 <USBH_HandleEnum+0x39c>
 8007312:	a201      	add	r2, pc, #4	; (adr r2, 8007318 <USBH_HandleEnum+0x20>)
 8007314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007318:	08007339 	.word	0x08007339
 800731c:	080073f7 	.word	0x080073f7
 8007320:	08007461 	.word	0x08007461
 8007324:	080074ef 	.word	0x080074ef
 8007328:	08007559 	.word	0x08007559
 800732c:	080075c9 	.word	0x080075c9
 8007330:	0800760f 	.word	0x0800760f
 8007334:	08007655 	.word	0x08007655
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007338:	2108      	movs	r1, #8
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f000 fa50 	bl	80077e0 <USBH_Get_DevDesc>
 8007340:	4603      	mov	r3, r0
 8007342:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007344:	7bbb      	ldrb	r3, [r7, #14]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d130      	bne.n	80073ac <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2201      	movs	r2, #1
 8007358:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	7919      	ldrb	r1, [r3, #4]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800736a:	687a      	ldr	r2, [r7, #4]
 800736c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800736e:	b292      	uxth	r2, r2
 8007370:	9202      	str	r2, [sp, #8]
 8007372:	2200      	movs	r2, #0
 8007374:	9201      	str	r2, [sp, #4]
 8007376:	9300      	str	r3, [sp, #0]
 8007378:	4603      	mov	r3, r0
 800737a:	2280      	movs	r2, #128	; 0x80
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f000 ff79 	bl	8008274 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	7959      	ldrb	r1, [r3, #5]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007392:	687a      	ldr	r2, [r7, #4]
 8007394:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007396:	b292      	uxth	r2, r2
 8007398:	9202      	str	r2, [sp, #8]
 800739a:	2200      	movs	r2, #0
 800739c:	9201      	str	r2, [sp, #4]
 800739e:	9300      	str	r3, [sp, #0]
 80073a0:	4603      	mov	r3, r0
 80073a2:	2200      	movs	r2, #0
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f000 ff65 	bl	8008274 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80073aa:	e175      	b.n	8007698 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80073ac:	7bbb      	ldrb	r3, [r7, #14]
 80073ae:	2b03      	cmp	r3, #3
 80073b0:	f040 8172 	bne.w	8007698 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80073ba:	3301      	adds	r3, #1
 80073bc:	b2da      	uxtb	r2, r3
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80073ca:	2b03      	cmp	r3, #3
 80073cc:	d903      	bls.n	80073d6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	220d      	movs	r2, #13
 80073d2:	701a      	strb	r2, [r3, #0]
      break;
 80073d4:	e160      	b.n	8007698 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	795b      	ldrb	r3, [r3, #5]
 80073da:	4619      	mov	r1, r3
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f000 ff99 	bl	8008314 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	791b      	ldrb	r3, [r3, #4]
 80073e6:	4619      	mov	r1, r3
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f000 ff93 	bl	8008314 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2200      	movs	r2, #0
 80073f2:	701a      	strb	r2, [r3, #0]
      break;
 80073f4:	e150      	b.n	8007698 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80073f6:	2112      	movs	r1, #18
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f000 f9f1 	bl	80077e0 <USBH_Get_DevDesc>
 80073fe:	4603      	mov	r3, r0
 8007400:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007402:	7bbb      	ldrb	r3, [r7, #14]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d103      	bne.n	8007410 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2202      	movs	r2, #2
 800740c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800740e:	e145      	b.n	800769c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007410:	7bbb      	ldrb	r3, [r7, #14]
 8007412:	2b03      	cmp	r3, #3
 8007414:	f040 8142 	bne.w	800769c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800741e:	3301      	adds	r3, #1
 8007420:	b2da      	uxtb	r2, r3
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800742e:	2b03      	cmp	r3, #3
 8007430:	d903      	bls.n	800743a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	220d      	movs	r2, #13
 8007436:	701a      	strb	r2, [r3, #0]
      break;
 8007438:	e130      	b.n	800769c <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	795b      	ldrb	r3, [r3, #5]
 800743e:	4619      	mov	r1, r3
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f000 ff67 	bl	8008314 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	791b      	ldrb	r3, [r3, #4]
 800744a:	4619      	mov	r1, r3
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f000 ff61 	bl	8008314 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2200      	movs	r2, #0
 8007456:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2200      	movs	r2, #0
 800745c:	701a      	strb	r2, [r3, #0]
      break;
 800745e:	e11d      	b.n	800769c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007460:	2101      	movs	r1, #1
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f000 fa68 	bl	8007938 <USBH_SetAddress>
 8007468:	4603      	mov	r3, r0
 800746a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800746c:	7bbb      	ldrb	r3, [r7, #14]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d132      	bne.n	80074d8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007472:	2002      	movs	r0, #2
 8007474:	f001 fa3d 	bl	80088f2 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2201      	movs	r2, #1
 800747c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2203      	movs	r2, #3
 8007484:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	7919      	ldrb	r1, [r3, #4]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007496:	687a      	ldr	r2, [r7, #4]
 8007498:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800749a:	b292      	uxth	r2, r2
 800749c:	9202      	str	r2, [sp, #8]
 800749e:	2200      	movs	r2, #0
 80074a0:	9201      	str	r2, [sp, #4]
 80074a2:	9300      	str	r3, [sp, #0]
 80074a4:	4603      	mov	r3, r0
 80074a6:	2280      	movs	r2, #128	; 0x80
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f000 fee3 	bl	8008274 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	7959      	ldrb	r1, [r3, #5]
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80074be:	687a      	ldr	r2, [r7, #4]
 80074c0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80074c2:	b292      	uxth	r2, r2
 80074c4:	9202      	str	r2, [sp, #8]
 80074c6:	2200      	movs	r2, #0
 80074c8:	9201      	str	r2, [sp, #4]
 80074ca:	9300      	str	r3, [sp, #0]
 80074cc:	4603      	mov	r3, r0
 80074ce:	2200      	movs	r2, #0
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f000 fecf 	bl	8008274 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80074d6:	e0e3      	b.n	80076a0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80074d8:	7bbb      	ldrb	r3, [r7, #14]
 80074da:	2b03      	cmp	r3, #3
 80074dc:	f040 80e0 	bne.w	80076a0 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	220d      	movs	r2, #13
 80074e4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2200      	movs	r2, #0
 80074ea:	705a      	strb	r2, [r3, #1]
      break;
 80074ec:	e0d8      	b.n	80076a0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80074ee:	2109      	movs	r1, #9
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f000 f99d 	bl	8007830 <USBH_Get_CfgDesc>
 80074f6:	4603      	mov	r3, r0
 80074f8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80074fa:	7bbb      	ldrb	r3, [r7, #14]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d103      	bne.n	8007508 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2204      	movs	r2, #4
 8007504:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007506:	e0cd      	b.n	80076a4 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007508:	7bbb      	ldrb	r3, [r7, #14]
 800750a:	2b03      	cmp	r3, #3
 800750c:	f040 80ca 	bne.w	80076a4 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007516:	3301      	adds	r3, #1
 8007518:	b2da      	uxtb	r2, r3
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007526:	2b03      	cmp	r3, #3
 8007528:	d903      	bls.n	8007532 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	220d      	movs	r2, #13
 800752e:	701a      	strb	r2, [r3, #0]
      break;
 8007530:	e0b8      	b.n	80076a4 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	795b      	ldrb	r3, [r3, #5]
 8007536:	4619      	mov	r1, r3
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f000 feeb 	bl	8008314 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	791b      	ldrb	r3, [r3, #4]
 8007542:	4619      	mov	r1, r3
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f000 fee5 	bl	8008314 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2200      	movs	r2, #0
 800754e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2200      	movs	r2, #0
 8007554:	701a      	strb	r2, [r3, #0]
      break;
 8007556:	e0a5      	b.n	80076a4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800755e:	4619      	mov	r1, r3
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f000 f965 	bl	8007830 <USBH_Get_CfgDesc>
 8007566:	4603      	mov	r3, r0
 8007568:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800756a:	7bbb      	ldrb	r3, [r7, #14]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d103      	bne.n	8007578 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2205      	movs	r2, #5
 8007574:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007576:	e097      	b.n	80076a8 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007578:	7bbb      	ldrb	r3, [r7, #14]
 800757a:	2b03      	cmp	r3, #3
 800757c:	f040 8094 	bne.w	80076a8 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007586:	3301      	adds	r3, #1
 8007588:	b2da      	uxtb	r2, r3
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007596:	2b03      	cmp	r3, #3
 8007598:	d903      	bls.n	80075a2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	220d      	movs	r2, #13
 800759e:	701a      	strb	r2, [r3, #0]
      break;
 80075a0:	e082      	b.n	80076a8 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	795b      	ldrb	r3, [r3, #5]
 80075a6:	4619      	mov	r1, r3
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f000 feb3 	bl	8008314 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	791b      	ldrb	r3, [r3, #4]
 80075b2:	4619      	mov	r1, r3
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f000 fead 	bl	8008314 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2200      	movs	r2, #0
 80075be:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2200      	movs	r2, #0
 80075c4:	701a      	strb	r2, [r3, #0]
      break;
 80075c6:	e06f      	b.n	80076a8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d019      	beq.n	8007606 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80075de:	23ff      	movs	r3, #255	; 0xff
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f000 f949 	bl	8007878 <USBH_Get_StringDesc>
 80075e6:	4603      	mov	r3, r0
 80075e8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80075ea:	7bbb      	ldrb	r3, [r7, #14]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d103      	bne.n	80075f8 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2206      	movs	r2, #6
 80075f4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80075f6:	e059      	b.n	80076ac <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80075f8:	7bbb      	ldrb	r3, [r7, #14]
 80075fa:	2b03      	cmp	r3, #3
 80075fc:	d156      	bne.n	80076ac <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2206      	movs	r2, #6
 8007602:	705a      	strb	r2, [r3, #1]
      break;
 8007604:	e052      	b.n	80076ac <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2206      	movs	r2, #6
 800760a:	705a      	strb	r2, [r3, #1]
      break;
 800760c:	e04e      	b.n	80076ac <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007614:	2b00      	cmp	r3, #0
 8007616:	d019      	beq.n	800764c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007624:	23ff      	movs	r3, #255	; 0xff
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f000 f926 	bl	8007878 <USBH_Get_StringDesc>
 800762c:	4603      	mov	r3, r0
 800762e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007630:	7bbb      	ldrb	r3, [r7, #14]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d103      	bne.n	800763e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2207      	movs	r2, #7
 800763a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800763c:	e038      	b.n	80076b0 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800763e:	7bbb      	ldrb	r3, [r7, #14]
 8007640:	2b03      	cmp	r3, #3
 8007642:	d135      	bne.n	80076b0 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2207      	movs	r2, #7
 8007648:	705a      	strb	r2, [r3, #1]
      break;
 800764a:	e031      	b.n	80076b0 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2207      	movs	r2, #7
 8007650:	705a      	strb	r2, [r3, #1]
      break;
 8007652:	e02d      	b.n	80076b0 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800765a:	2b00      	cmp	r3, #0
 800765c:	d017      	beq.n	800768e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800766a:	23ff      	movs	r3, #255	; 0xff
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f000 f903 	bl	8007878 <USBH_Get_StringDesc>
 8007672:	4603      	mov	r3, r0
 8007674:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007676:	7bbb      	ldrb	r3, [r7, #14]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d102      	bne.n	8007682 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800767c:	2300      	movs	r3, #0
 800767e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007680:	e018      	b.n	80076b4 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007682:	7bbb      	ldrb	r3, [r7, #14]
 8007684:	2b03      	cmp	r3, #3
 8007686:	d115      	bne.n	80076b4 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007688:	2300      	movs	r3, #0
 800768a:	73fb      	strb	r3, [r7, #15]
      break;
 800768c:	e012      	b.n	80076b4 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800768e:	2300      	movs	r3, #0
 8007690:	73fb      	strb	r3, [r7, #15]
      break;
 8007692:	e00f      	b.n	80076b4 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007694:	bf00      	nop
 8007696:	e00e      	b.n	80076b6 <USBH_HandleEnum+0x3be>
      break;
 8007698:	bf00      	nop
 800769a:	e00c      	b.n	80076b6 <USBH_HandleEnum+0x3be>
      break;
 800769c:	bf00      	nop
 800769e:	e00a      	b.n	80076b6 <USBH_HandleEnum+0x3be>
      break;
 80076a0:	bf00      	nop
 80076a2:	e008      	b.n	80076b6 <USBH_HandleEnum+0x3be>
      break;
 80076a4:	bf00      	nop
 80076a6:	e006      	b.n	80076b6 <USBH_HandleEnum+0x3be>
      break;
 80076a8:	bf00      	nop
 80076aa:	e004      	b.n	80076b6 <USBH_HandleEnum+0x3be>
      break;
 80076ac:	bf00      	nop
 80076ae:	e002      	b.n	80076b6 <USBH_HandleEnum+0x3be>
      break;
 80076b0:	bf00      	nop
 80076b2:	e000      	b.n	80076b6 <USBH_HandleEnum+0x3be>
      break;
 80076b4:	bf00      	nop
  }
  return Status;
 80076b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	3710      	adds	r7, #16
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}

080076c0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b083      	sub	sp, #12
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
 80076c8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	683a      	ldr	r2, [r7, #0]
 80076ce:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80076d2:	bf00      	nop
 80076d4:	370c      	adds	r7, #12
 80076d6:	46bd      	mov	sp, r7
 80076d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076dc:	4770      	bx	lr

080076de <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80076de:	b580      	push	{r7, lr}
 80076e0:	b082      	sub	sp, #8
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80076ec:	1c5a      	adds	r2, r3, #1
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f000 f804 	bl	8007702 <USBH_HandleSof>
}
 80076fa:	bf00      	nop
 80076fc:	3708      	adds	r7, #8
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}

08007702 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007702:	b580      	push	{r7, lr}
 8007704:	b082      	sub	sp, #8
 8007706:	af00      	add	r7, sp, #0
 8007708:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	781b      	ldrb	r3, [r3, #0]
 800770e:	b2db      	uxtb	r3, r3
 8007710:	2b0b      	cmp	r3, #11
 8007712:	d10a      	bne.n	800772a <USBH_HandleSof+0x28>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800771a:	2b00      	cmp	r3, #0
 800771c:	d005      	beq.n	800772a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007724:	699b      	ldr	r3, [r3, #24]
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	4798      	blx	r3
  }
}
 800772a:	bf00      	nop
 800772c:	3708      	adds	r7, #8
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}

08007732 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007732:	b480      	push	{r7}
 8007734:	b083      	sub	sp, #12
 8007736:	af00      	add	r7, sp, #0
 8007738:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2201      	movs	r2, #1
 800773e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8007742:	bf00      	nop
}
 8007744:	370c      	adds	r7, #12
 8007746:	46bd      	mov	sp, r7
 8007748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774c:	4770      	bx	lr

0800774e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800774e:	b480      	push	{r7}
 8007750:	b083      	sub	sp, #12
 8007752:	af00      	add	r7, sp, #0
 8007754:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2200      	movs	r2, #0
 800775a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800775e:	bf00      	nop
}
 8007760:	370c      	adds	r7, #12
 8007762:	46bd      	mov	sp, r7
 8007764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007768:	4770      	bx	lr

0800776a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800776a:	b480      	push	{r7}
 800776c:	b083      	sub	sp, #12
 800776e:	af00      	add	r7, sp, #0
 8007770:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2201      	movs	r2, #1
 8007776:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2200      	movs	r2, #0
 800777e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2200      	movs	r2, #0
 8007786:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800778a:	2300      	movs	r3, #0
}
 800778c:	4618      	mov	r0, r3
 800778e:	370c      	adds	r7, #12
 8007790:	46bd      	mov	sp, r7
 8007792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007796:	4770      	bx	lr

08007798 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b082      	sub	sp, #8
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2201      	movs	r2, #1
 80077a4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2200      	movs	r2, #0
 80077ac:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2200      	movs	r2, #0
 80077b4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f000 ff50 	bl	800865e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	791b      	ldrb	r3, [r3, #4]
 80077c2:	4619      	mov	r1, r3
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f000 fda5 	bl	8008314 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	795b      	ldrb	r3, [r3, #5]
 80077ce:	4619      	mov	r1, r3
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f000 fd9f 	bl	8008314 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80077d6:	2300      	movs	r3, #0
}
 80077d8:	4618      	mov	r0, r3
 80077da:	3708      	adds	r7, #8
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}

080077e0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b086      	sub	sp, #24
 80077e4:	af02      	add	r7, sp, #8
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	460b      	mov	r3, r1
 80077ea:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80077f2:	78fb      	ldrb	r3, [r7, #3]
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	9300      	str	r3, [sp, #0]
 80077f8:	4613      	mov	r3, r2
 80077fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80077fe:	2100      	movs	r1, #0
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f000 f864 	bl	80078ce <USBH_GetDescriptor>
 8007806:	4603      	mov	r3, r0
 8007808:	73fb      	strb	r3, [r7, #15]
 800780a:	7bfb      	ldrb	r3, [r7, #15]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d10a      	bne.n	8007826 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800781c:	78fa      	ldrb	r2, [r7, #3]
 800781e:	b292      	uxth	r2, r2
 8007820:	4619      	mov	r1, r3
 8007822:	f000 f918 	bl	8007a56 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007826:	7bfb      	ldrb	r3, [r7, #15]
}
 8007828:	4618      	mov	r0, r3
 800782a:	3710      	adds	r7, #16
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}

08007830 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007830:	b580      	push	{r7, lr}
 8007832:	b086      	sub	sp, #24
 8007834:	af02      	add	r7, sp, #8
 8007836:	6078      	str	r0, [r7, #4]
 8007838:	460b      	mov	r3, r1
 800783a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	331c      	adds	r3, #28
 8007840:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007842:	887b      	ldrh	r3, [r7, #2]
 8007844:	9300      	str	r3, [sp, #0]
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	f44f 7200 	mov.w	r2, #512	; 0x200
 800784c:	2100      	movs	r1, #0
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f000 f83d 	bl	80078ce <USBH_GetDescriptor>
 8007854:	4603      	mov	r3, r0
 8007856:	72fb      	strb	r3, [r7, #11]
 8007858:	7afb      	ldrb	r3, [r7, #11]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d107      	bne.n	800786e <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007864:	887a      	ldrh	r2, [r7, #2]
 8007866:	68f9      	ldr	r1, [r7, #12]
 8007868:	4618      	mov	r0, r3
 800786a:	f000 f964 	bl	8007b36 <USBH_ParseCfgDesc>
  }

  return status;
 800786e:	7afb      	ldrb	r3, [r7, #11]
}
 8007870:	4618      	mov	r0, r3
 8007872:	3710      	adds	r7, #16
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}

08007878 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b088      	sub	sp, #32
 800787c:	af02      	add	r7, sp, #8
 800787e:	60f8      	str	r0, [r7, #12]
 8007880:	607a      	str	r2, [r7, #4]
 8007882:	461a      	mov	r2, r3
 8007884:	460b      	mov	r3, r1
 8007886:	72fb      	strb	r3, [r7, #11]
 8007888:	4613      	mov	r3, r2
 800788a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800788c:	7afb      	ldrb	r3, [r7, #11]
 800788e:	b29b      	uxth	r3, r3
 8007890:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007894:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800789c:	893b      	ldrh	r3, [r7, #8]
 800789e:	9300      	str	r3, [sp, #0]
 80078a0:	460b      	mov	r3, r1
 80078a2:	2100      	movs	r1, #0
 80078a4:	68f8      	ldr	r0, [r7, #12]
 80078a6:	f000 f812 	bl	80078ce <USBH_GetDescriptor>
 80078aa:	4603      	mov	r3, r0
 80078ac:	75fb      	strb	r3, [r7, #23]
 80078ae:	7dfb      	ldrb	r3, [r7, #23]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d107      	bne.n	80078c4 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80078ba:	893a      	ldrh	r2, [r7, #8]
 80078bc:	6879      	ldr	r1, [r7, #4]
 80078be:	4618      	mov	r0, r3
 80078c0:	f000 fa37 	bl	8007d32 <USBH_ParseStringDesc>
  }

  return status;
 80078c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	3718      	adds	r7, #24
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}

080078ce <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80078ce:	b580      	push	{r7, lr}
 80078d0:	b084      	sub	sp, #16
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	60f8      	str	r0, [r7, #12]
 80078d6:	607b      	str	r3, [r7, #4]
 80078d8:	460b      	mov	r3, r1
 80078da:	72fb      	strb	r3, [r7, #11]
 80078dc:	4613      	mov	r3, r2
 80078de:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	789b      	ldrb	r3, [r3, #2]
 80078e4:	2b01      	cmp	r3, #1
 80078e6:	d11c      	bne.n	8007922 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80078e8:	7afb      	ldrb	r3, [r7, #11]
 80078ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80078ee:	b2da      	uxtb	r2, r3
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2206      	movs	r2, #6
 80078f8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	893a      	ldrh	r2, [r7, #8]
 80078fe:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007900:	893b      	ldrh	r3, [r7, #8]
 8007902:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007906:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800790a:	d104      	bne.n	8007916 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	f240 4209 	movw	r2, #1033	; 0x409
 8007912:	829a      	strh	r2, [r3, #20]
 8007914:	e002      	b.n	800791c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2200      	movs	r2, #0
 800791a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	8b3a      	ldrh	r2, [r7, #24]
 8007920:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007922:	8b3b      	ldrh	r3, [r7, #24]
 8007924:	461a      	mov	r2, r3
 8007926:	6879      	ldr	r1, [r7, #4]
 8007928:	68f8      	ldr	r0, [r7, #12]
 800792a:	f000 fa50 	bl	8007dce <USBH_CtlReq>
 800792e:	4603      	mov	r3, r0
}
 8007930:	4618      	mov	r0, r3
 8007932:	3710      	adds	r7, #16
 8007934:	46bd      	mov	sp, r7
 8007936:	bd80      	pop	{r7, pc}

08007938 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b082      	sub	sp, #8
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
 8007940:	460b      	mov	r3, r1
 8007942:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	789b      	ldrb	r3, [r3, #2]
 8007948:	2b01      	cmp	r3, #1
 800794a:	d10f      	bne.n	800796c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2200      	movs	r2, #0
 8007950:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2205      	movs	r2, #5
 8007956:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007958:	78fb      	ldrb	r3, [r7, #3]
 800795a:	b29a      	uxth	r2, r3
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2200      	movs	r2, #0
 8007964:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2200      	movs	r2, #0
 800796a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800796c:	2200      	movs	r2, #0
 800796e:	2100      	movs	r1, #0
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f000 fa2c 	bl	8007dce <USBH_CtlReq>
 8007976:	4603      	mov	r3, r0
}
 8007978:	4618      	mov	r0, r3
 800797a:	3708      	adds	r7, #8
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}

08007980 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b082      	sub	sp, #8
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	460b      	mov	r3, r1
 800798a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	789b      	ldrb	r3, [r3, #2]
 8007990:	2b01      	cmp	r3, #1
 8007992:	d10e      	bne.n	80079b2 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2200      	movs	r2, #0
 8007998:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2209      	movs	r2, #9
 800799e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	887a      	ldrh	r2, [r7, #2]
 80079a4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2200      	movs	r2, #0
 80079aa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2200      	movs	r2, #0
 80079b0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80079b2:	2200      	movs	r2, #0
 80079b4:	2100      	movs	r1, #0
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f000 fa09 	bl	8007dce <USBH_CtlReq>
 80079bc:	4603      	mov	r3, r0
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3708      	adds	r7, #8
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}

080079c6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80079c6:	b580      	push	{r7, lr}
 80079c8:	b082      	sub	sp, #8
 80079ca:	af00      	add	r7, sp, #0
 80079cc:	6078      	str	r0, [r7, #4]
 80079ce:	460b      	mov	r3, r1
 80079d0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	789b      	ldrb	r3, [r3, #2]
 80079d6:	2b01      	cmp	r3, #1
 80079d8:	d10f      	bne.n	80079fa <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2200      	movs	r2, #0
 80079de:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2203      	movs	r2, #3
 80079e4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80079e6:	78fb      	ldrb	r3, [r7, #3]
 80079e8:	b29a      	uxth	r2, r3
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2200      	movs	r2, #0
 80079f2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2200      	movs	r2, #0
 80079f8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80079fa:	2200      	movs	r2, #0
 80079fc:	2100      	movs	r1, #0
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f000 f9e5 	bl	8007dce <USBH_CtlReq>
 8007a04:	4603      	mov	r3, r0
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	3708      	adds	r7, #8
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}

08007a0e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007a0e:	b580      	push	{r7, lr}
 8007a10:	b082      	sub	sp, #8
 8007a12:	af00      	add	r7, sp, #0
 8007a14:	6078      	str	r0, [r7, #4]
 8007a16:	460b      	mov	r3, r1
 8007a18:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	789b      	ldrb	r3, [r3, #2]
 8007a1e:	2b01      	cmp	r3, #1
 8007a20:	d10f      	bne.n	8007a42 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2202      	movs	r2, #2
 8007a26:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2200      	movs	r2, #0
 8007a32:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007a34:	78fb      	ldrb	r3, [r7, #3]
 8007a36:	b29a      	uxth	r2, r3
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8007a42:	2200      	movs	r2, #0
 8007a44:	2100      	movs	r1, #0
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f000 f9c1 	bl	8007dce <USBH_CtlReq>
 8007a4c:	4603      	mov	r3, r0
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	3708      	adds	r7, #8
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}

08007a56 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007a56:	b480      	push	{r7}
 8007a58:	b085      	sub	sp, #20
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	60f8      	str	r0, [r7, #12]
 8007a5e:	60b9      	str	r1, [r7, #8]
 8007a60:	4613      	mov	r3, r2
 8007a62:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	781a      	ldrb	r2, [r3, #0]
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	785a      	ldrb	r2, [r3, #1]
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	3302      	adds	r3, #2
 8007a78:	781b      	ldrb	r3, [r3, #0]
 8007a7a:	b29a      	uxth	r2, r3
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	3303      	adds	r3, #3
 8007a80:	781b      	ldrb	r3, [r3, #0]
 8007a82:	b29b      	uxth	r3, r3
 8007a84:	021b      	lsls	r3, r3, #8
 8007a86:	b29b      	uxth	r3, r3
 8007a88:	4313      	orrs	r3, r2
 8007a8a:	b29a      	uxth	r2, r3
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	791a      	ldrb	r2, [r3, #4]
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	795a      	ldrb	r2, [r3, #5]
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	799a      	ldrb	r2, [r3, #6]
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	79da      	ldrb	r2, [r3, #7]
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8007ab0:	88fb      	ldrh	r3, [r7, #6]
 8007ab2:	2b08      	cmp	r3, #8
 8007ab4:	d939      	bls.n	8007b2a <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	3308      	adds	r3, #8
 8007aba:	781b      	ldrb	r3, [r3, #0]
 8007abc:	b29a      	uxth	r2, r3
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	3309      	adds	r3, #9
 8007ac2:	781b      	ldrb	r3, [r3, #0]
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	021b      	lsls	r3, r3, #8
 8007ac8:	b29b      	uxth	r3, r3
 8007aca:	4313      	orrs	r3, r2
 8007acc:	b29a      	uxth	r2, r3
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	330a      	adds	r3, #10
 8007ad6:	781b      	ldrb	r3, [r3, #0]
 8007ad8:	b29a      	uxth	r2, r3
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	330b      	adds	r3, #11
 8007ade:	781b      	ldrb	r3, [r3, #0]
 8007ae0:	b29b      	uxth	r3, r3
 8007ae2:	021b      	lsls	r3, r3, #8
 8007ae4:	b29b      	uxth	r3, r3
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	b29a      	uxth	r2, r3
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	330c      	adds	r3, #12
 8007af2:	781b      	ldrb	r3, [r3, #0]
 8007af4:	b29a      	uxth	r2, r3
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	330d      	adds	r3, #13
 8007afa:	781b      	ldrb	r3, [r3, #0]
 8007afc:	b29b      	uxth	r3, r3
 8007afe:	021b      	lsls	r3, r3, #8
 8007b00:	b29b      	uxth	r3, r3
 8007b02:	4313      	orrs	r3, r2
 8007b04:	b29a      	uxth	r2, r3
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	7b9a      	ldrb	r2, [r3, #14]
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	7bda      	ldrb	r2, [r3, #15]
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	7c1a      	ldrb	r2, [r3, #16]
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	7c5a      	ldrb	r2, [r3, #17]
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	745a      	strb	r2, [r3, #17]
  }
}
 8007b2a:	bf00      	nop
 8007b2c:	3714      	adds	r7, #20
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b34:	4770      	bx	lr

08007b36 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8007b36:	b580      	push	{r7, lr}
 8007b38:	b08a      	sub	sp, #40	; 0x28
 8007b3a:	af00      	add	r7, sp, #0
 8007b3c:	60f8      	str	r0, [r7, #12]
 8007b3e:	60b9      	str	r1, [r7, #8]
 8007b40:	4613      	mov	r3, r2
 8007b42:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	781a      	ldrb	r2, [r3, #0]
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	785a      	ldrb	r2, [r3, #1]
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	3302      	adds	r3, #2
 8007b6c:	781b      	ldrb	r3, [r3, #0]
 8007b6e:	b29a      	uxth	r2, r3
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	3303      	adds	r3, #3
 8007b74:	781b      	ldrb	r3, [r3, #0]
 8007b76:	b29b      	uxth	r3, r3
 8007b78:	021b      	lsls	r3, r3, #8
 8007b7a:	b29b      	uxth	r3, r3
 8007b7c:	4313      	orrs	r3, r2
 8007b7e:	b29a      	uxth	r2, r3
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	791a      	ldrb	r2, [r3, #4]
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	795a      	ldrb	r2, [r3, #5]
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	799a      	ldrb	r2, [r3, #6]
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	79da      	ldrb	r2, [r3, #7]
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	7a1a      	ldrb	r2, [r3, #8]
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007bac:	88fb      	ldrh	r3, [r7, #6]
 8007bae:	2b09      	cmp	r3, #9
 8007bb0:	d95f      	bls.n	8007c72 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8007bb2:	2309      	movs	r3, #9
 8007bb4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007bba:	e051      	b.n	8007c60 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007bbc:	f107 0316 	add.w	r3, r7, #22
 8007bc0:	4619      	mov	r1, r3
 8007bc2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007bc4:	f000 f8e8 	bl	8007d98 <USBH_GetNextDesc>
 8007bc8:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8007bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bcc:	785b      	ldrb	r3, [r3, #1]
 8007bce:	2b04      	cmp	r3, #4
 8007bd0:	d146      	bne.n	8007c60 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8007bd2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007bd6:	221a      	movs	r2, #26
 8007bd8:	fb02 f303 	mul.w	r3, r2, r3
 8007bdc:	3308      	adds	r3, #8
 8007bde:	68fa      	ldr	r2, [r7, #12]
 8007be0:	4413      	add	r3, r2
 8007be2:	3302      	adds	r3, #2
 8007be4:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007be6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007be8:	69f8      	ldr	r0, [r7, #28]
 8007bea:	f000 f846 	bl	8007c7a <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007bf8:	e022      	b.n	8007c40 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007bfa:	f107 0316 	add.w	r3, r7, #22
 8007bfe:	4619      	mov	r1, r3
 8007c00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007c02:	f000 f8c9 	bl	8007d98 <USBH_GetNextDesc>
 8007c06:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8007c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c0a:	785b      	ldrb	r3, [r3, #1]
 8007c0c:	2b05      	cmp	r3, #5
 8007c0e:	d117      	bne.n	8007c40 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007c10:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007c14:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007c18:	3201      	adds	r2, #1
 8007c1a:	00d2      	lsls	r2, r2, #3
 8007c1c:	211a      	movs	r1, #26
 8007c1e:	fb01 f303 	mul.w	r3, r1, r3
 8007c22:	4413      	add	r3, r2
 8007c24:	3308      	adds	r3, #8
 8007c26:	68fa      	ldr	r2, [r7, #12]
 8007c28:	4413      	add	r3, r2
 8007c2a:	3304      	adds	r3, #4
 8007c2c:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8007c2e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007c30:	69b8      	ldr	r0, [r7, #24]
 8007c32:	f000 f851 	bl	8007cd8 <USBH_ParseEPDesc>
            ep_ix++;
 8007c36:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007c3a:	3301      	adds	r3, #1
 8007c3c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007c40:	69fb      	ldr	r3, [r7, #28]
 8007c42:	791b      	ldrb	r3, [r3, #4]
 8007c44:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007c48:	429a      	cmp	r2, r3
 8007c4a:	d204      	bcs.n	8007c56 <USBH_ParseCfgDesc+0x120>
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	885a      	ldrh	r2, [r3, #2]
 8007c50:	8afb      	ldrh	r3, [r7, #22]
 8007c52:	429a      	cmp	r2, r3
 8007c54:	d8d1      	bhi.n	8007bfa <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8007c56:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007c5a:	3301      	adds	r3, #1
 8007c5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007c60:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007c64:	2b01      	cmp	r3, #1
 8007c66:	d804      	bhi.n	8007c72 <USBH_ParseCfgDesc+0x13c>
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	885a      	ldrh	r2, [r3, #2]
 8007c6c:	8afb      	ldrh	r3, [r7, #22]
 8007c6e:	429a      	cmp	r2, r3
 8007c70:	d8a4      	bhi.n	8007bbc <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8007c72:	bf00      	nop
 8007c74:	3728      	adds	r7, #40	; 0x28
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}

08007c7a <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007c7a:	b480      	push	{r7}
 8007c7c:	b083      	sub	sp, #12
 8007c7e:	af00      	add	r7, sp, #0
 8007c80:	6078      	str	r0, [r7, #4]
 8007c82:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	781a      	ldrb	r2, [r3, #0]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	785a      	ldrb	r2, [r3, #1]
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	789a      	ldrb	r2, [r3, #2]
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	78da      	ldrb	r2, [r3, #3]
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	791a      	ldrb	r2, [r3, #4]
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	795a      	ldrb	r2, [r3, #5]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	799a      	ldrb	r2, [r3, #6]
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	79da      	ldrb	r2, [r3, #7]
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	7a1a      	ldrb	r2, [r3, #8]
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	721a      	strb	r2, [r3, #8]
}
 8007ccc:	bf00      	nop
 8007cce:	370c      	adds	r7, #12
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd6:	4770      	bx	lr

08007cd8 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b083      	sub	sp, #12
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
 8007ce0:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	781a      	ldrb	r2, [r3, #0]
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	785a      	ldrb	r2, [r3, #1]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	789a      	ldrb	r2, [r3, #2]
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	78da      	ldrb	r2, [r3, #3]
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	3304      	adds	r3, #4
 8007d06:	781b      	ldrb	r3, [r3, #0]
 8007d08:	b29a      	uxth	r2, r3
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	3305      	adds	r3, #5
 8007d0e:	781b      	ldrb	r3, [r3, #0]
 8007d10:	b29b      	uxth	r3, r3
 8007d12:	021b      	lsls	r3, r3, #8
 8007d14:	b29b      	uxth	r3, r3
 8007d16:	4313      	orrs	r3, r2
 8007d18:	b29a      	uxth	r2, r3
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	799a      	ldrb	r2, [r3, #6]
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	719a      	strb	r2, [r3, #6]
}
 8007d26:	bf00      	nop
 8007d28:	370c      	adds	r7, #12
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d30:	4770      	bx	lr

08007d32 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007d32:	b480      	push	{r7}
 8007d34:	b087      	sub	sp, #28
 8007d36:	af00      	add	r7, sp, #0
 8007d38:	60f8      	str	r0, [r7, #12]
 8007d3a:	60b9      	str	r1, [r7, #8]
 8007d3c:	4613      	mov	r3, r2
 8007d3e:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	3301      	adds	r3, #1
 8007d44:	781b      	ldrb	r3, [r3, #0]
 8007d46:	2b03      	cmp	r3, #3
 8007d48:	d120      	bne.n	8007d8c <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	781b      	ldrb	r3, [r3, #0]
 8007d4e:	1e9a      	subs	r2, r3, #2
 8007d50:	88fb      	ldrh	r3, [r7, #6]
 8007d52:	4293      	cmp	r3, r2
 8007d54:	bf28      	it	cs
 8007d56:	4613      	movcs	r3, r2
 8007d58:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	3302      	adds	r3, #2
 8007d5e:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007d60:	2300      	movs	r3, #0
 8007d62:	82fb      	strh	r3, [r7, #22]
 8007d64:	e00b      	b.n	8007d7e <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007d66:	8afb      	ldrh	r3, [r7, #22]
 8007d68:	68fa      	ldr	r2, [r7, #12]
 8007d6a:	4413      	add	r3, r2
 8007d6c:	781a      	ldrb	r2, [r3, #0]
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	3301      	adds	r3, #1
 8007d76:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007d78:	8afb      	ldrh	r3, [r7, #22]
 8007d7a:	3302      	adds	r3, #2
 8007d7c:	82fb      	strh	r3, [r7, #22]
 8007d7e:	8afa      	ldrh	r2, [r7, #22]
 8007d80:	8abb      	ldrh	r3, [r7, #20]
 8007d82:	429a      	cmp	r2, r3
 8007d84:	d3ef      	bcc.n	8007d66 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	701a      	strb	r2, [r3, #0]
  }
}
 8007d8c:	bf00      	nop
 8007d8e:	371c      	adds	r7, #28
 8007d90:	46bd      	mov	sp, r7
 8007d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d96:	4770      	bx	lr

08007d98 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b085      	sub	sp, #20
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
 8007da0:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	881a      	ldrh	r2, [r3, #0]
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	781b      	ldrb	r3, [r3, #0]
 8007daa:	b29b      	uxth	r3, r3
 8007dac:	4413      	add	r3, r2
 8007dae:	b29a      	uxth	r2, r3
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	781b      	ldrb	r3, [r3, #0]
 8007db8:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	4413      	add	r3, r2
 8007dbe:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007dc0:	68fb      	ldr	r3, [r7, #12]
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	3714      	adds	r7, #20
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dcc:	4770      	bx	lr

08007dce <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007dce:	b580      	push	{r7, lr}
 8007dd0:	b086      	sub	sp, #24
 8007dd2:	af00      	add	r7, sp, #0
 8007dd4:	60f8      	str	r0, [r7, #12]
 8007dd6:	60b9      	str	r1, [r7, #8]
 8007dd8:	4613      	mov	r3, r2
 8007dda:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007ddc:	2301      	movs	r3, #1
 8007dde:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	789b      	ldrb	r3, [r3, #2]
 8007de4:	2b01      	cmp	r3, #1
 8007de6:	d002      	beq.n	8007dee <USBH_CtlReq+0x20>
 8007de8:	2b02      	cmp	r3, #2
 8007dea:	d00f      	beq.n	8007e0c <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007dec:	e027      	b.n	8007e3e <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	68ba      	ldr	r2, [r7, #8]
 8007df2:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	88fa      	ldrh	r2, [r7, #6]
 8007df8:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	2202      	movs	r2, #2
 8007e04:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007e06:	2301      	movs	r3, #1
 8007e08:	75fb      	strb	r3, [r7, #23]
      break;
 8007e0a:	e018      	b.n	8007e3e <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007e0c:	68f8      	ldr	r0, [r7, #12]
 8007e0e:	f000 f81b 	bl	8007e48 <USBH_HandleControl>
 8007e12:	4603      	mov	r3, r0
 8007e14:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007e16:	7dfb      	ldrb	r3, [r7, #23]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d002      	beq.n	8007e22 <USBH_CtlReq+0x54>
 8007e1c:	7dfb      	ldrb	r3, [r7, #23]
 8007e1e:	2b03      	cmp	r3, #3
 8007e20:	d106      	bne.n	8007e30 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	2201      	movs	r2, #1
 8007e26:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	761a      	strb	r2, [r3, #24]
      break;
 8007e2e:	e005      	b.n	8007e3c <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007e30:	7dfb      	ldrb	r3, [r7, #23]
 8007e32:	2b02      	cmp	r3, #2
 8007e34:	d102      	bne.n	8007e3c <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	2201      	movs	r2, #1
 8007e3a:	709a      	strb	r2, [r3, #2]
      break;
 8007e3c:	bf00      	nop
  }
  return status;
 8007e3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	3718      	adds	r7, #24
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}

08007e48 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b086      	sub	sp, #24
 8007e4c:	af02      	add	r7, sp, #8
 8007e4e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007e50:	2301      	movs	r3, #1
 8007e52:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007e54:	2300      	movs	r3, #0
 8007e56:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	7e1b      	ldrb	r3, [r3, #24]
 8007e5c:	3b01      	subs	r3, #1
 8007e5e:	2b0a      	cmp	r3, #10
 8007e60:	f200 8158 	bhi.w	8008114 <USBH_HandleControl+0x2cc>
 8007e64:	a201      	add	r2, pc, #4	; (adr r2, 8007e6c <USBH_HandleControl+0x24>)
 8007e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e6a:	bf00      	nop
 8007e6c:	08007e99 	.word	0x08007e99
 8007e70:	08007eb3 	.word	0x08007eb3
 8007e74:	08007f1d 	.word	0x08007f1d
 8007e78:	08007f43 	.word	0x08007f43
 8007e7c:	08007f7b 	.word	0x08007f7b
 8007e80:	08007fa7 	.word	0x08007fa7
 8007e84:	08007ff9 	.word	0x08007ff9
 8007e88:	0800801b 	.word	0x0800801b
 8007e8c:	08008057 	.word	0x08008057
 8007e90:	0800807f 	.word	0x0800807f
 8007e94:	080080bd 	.word	0x080080bd
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f103 0110 	add.w	r1, r3, #16
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	795b      	ldrb	r3, [r3, #5]
 8007ea2:	461a      	mov	r2, r3
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f000 f945 	bl	8008134 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2202      	movs	r2, #2
 8007eae:	761a      	strb	r2, [r3, #24]
      break;
 8007eb0:	e13b      	b.n	800812a <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	795b      	ldrb	r3, [r3, #5]
 8007eb6:	4619      	mov	r1, r3
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f000 fcbd 	bl	8008838 <USBH_LL_GetURBState>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007ec2:	7bbb      	ldrb	r3, [r7, #14]
 8007ec4:	2b01      	cmp	r3, #1
 8007ec6:	d11e      	bne.n	8007f06 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	7c1b      	ldrb	r3, [r3, #16]
 8007ecc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007ed0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	8adb      	ldrh	r3, [r3, #22]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d00a      	beq.n	8007ef0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007eda:	7b7b      	ldrb	r3, [r7, #13]
 8007edc:	2b80      	cmp	r3, #128	; 0x80
 8007ede:	d103      	bne.n	8007ee8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2203      	movs	r2, #3
 8007ee4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007ee6:	e117      	b.n	8008118 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2205      	movs	r2, #5
 8007eec:	761a      	strb	r2, [r3, #24]
      break;
 8007eee:	e113      	b.n	8008118 <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 8007ef0:	7b7b      	ldrb	r3, [r7, #13]
 8007ef2:	2b80      	cmp	r3, #128	; 0x80
 8007ef4:	d103      	bne.n	8007efe <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2209      	movs	r2, #9
 8007efa:	761a      	strb	r2, [r3, #24]
      break;
 8007efc:	e10c      	b.n	8008118 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2207      	movs	r2, #7
 8007f02:	761a      	strb	r2, [r3, #24]
      break;
 8007f04:	e108      	b.n	8008118 <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007f06:	7bbb      	ldrb	r3, [r7, #14]
 8007f08:	2b04      	cmp	r3, #4
 8007f0a:	d003      	beq.n	8007f14 <USBH_HandleControl+0xcc>
 8007f0c:	7bbb      	ldrb	r3, [r7, #14]
 8007f0e:	2b02      	cmp	r3, #2
 8007f10:	f040 8102 	bne.w	8008118 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	220b      	movs	r2, #11
 8007f18:	761a      	strb	r2, [r3, #24]
      break;
 8007f1a:	e0fd      	b.n	8008118 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007f22:	b29a      	uxth	r2, r3
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6899      	ldr	r1, [r3, #8]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	899a      	ldrh	r2, [r3, #12]
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	791b      	ldrb	r3, [r3, #4]
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f000 f93c 	bl	80081b2 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2204      	movs	r2, #4
 8007f3e:	761a      	strb	r2, [r3, #24]
      break;
 8007f40:	e0f3      	b.n	800812a <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	791b      	ldrb	r3, [r3, #4]
 8007f46:	4619      	mov	r1, r3
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f000 fc75 	bl	8008838 <USBH_LL_GetURBState>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007f52:	7bbb      	ldrb	r3, [r7, #14]
 8007f54:	2b01      	cmp	r3, #1
 8007f56:	d102      	bne.n	8007f5e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2209      	movs	r2, #9
 8007f5c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007f5e:	7bbb      	ldrb	r3, [r7, #14]
 8007f60:	2b05      	cmp	r3, #5
 8007f62:	d102      	bne.n	8007f6a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007f64:	2303      	movs	r3, #3
 8007f66:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007f68:	e0d8      	b.n	800811c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007f6a:	7bbb      	ldrb	r3, [r7, #14]
 8007f6c:	2b04      	cmp	r3, #4
 8007f6e:	f040 80d5 	bne.w	800811c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	220b      	movs	r2, #11
 8007f76:	761a      	strb	r2, [r3, #24]
      break;
 8007f78:	e0d0      	b.n	800811c <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6899      	ldr	r1, [r3, #8]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	899a      	ldrh	r2, [r3, #12]
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	7958      	ldrb	r0, [r3, #5]
 8007f86:	2301      	movs	r3, #1
 8007f88:	9300      	str	r3, [sp, #0]
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f000 f8eb 	bl	8008168 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007f98:	b29a      	uxth	r2, r3
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2206      	movs	r2, #6
 8007fa2:	761a      	strb	r2, [r3, #24]
      break;
 8007fa4:	e0c1      	b.n	800812a <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	795b      	ldrb	r3, [r3, #5]
 8007faa:	4619      	mov	r1, r3
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f000 fc43 	bl	8008838 <USBH_LL_GetURBState>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007fb6:	7bbb      	ldrb	r3, [r7, #14]
 8007fb8:	2b01      	cmp	r3, #1
 8007fba:	d103      	bne.n	8007fc4 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2207      	movs	r2, #7
 8007fc0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007fc2:	e0ad      	b.n	8008120 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 8007fc4:	7bbb      	ldrb	r3, [r7, #14]
 8007fc6:	2b05      	cmp	r3, #5
 8007fc8:	d105      	bne.n	8007fd6 <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	220c      	movs	r2, #12
 8007fce:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007fd0:	2303      	movs	r3, #3
 8007fd2:	73fb      	strb	r3, [r7, #15]
      break;
 8007fd4:	e0a4      	b.n	8008120 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007fd6:	7bbb      	ldrb	r3, [r7, #14]
 8007fd8:	2b02      	cmp	r3, #2
 8007fda:	d103      	bne.n	8007fe4 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2205      	movs	r2, #5
 8007fe0:	761a      	strb	r2, [r3, #24]
      break;
 8007fe2:	e09d      	b.n	8008120 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 8007fe4:	7bbb      	ldrb	r3, [r7, #14]
 8007fe6:	2b04      	cmp	r3, #4
 8007fe8:	f040 809a 	bne.w	8008120 <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	220b      	movs	r2, #11
 8007ff0:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007ff2:	2302      	movs	r3, #2
 8007ff4:	73fb      	strb	r3, [r7, #15]
      break;
 8007ff6:	e093      	b.n	8008120 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	791b      	ldrb	r3, [r3, #4]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	2100      	movs	r1, #0
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f000 f8d6 	bl	80081b2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800800c:	b29a      	uxth	r2, r3
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2208      	movs	r2, #8
 8008016:	761a      	strb	r2, [r3, #24]

      break;
 8008018:	e087      	b.n	800812a <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	791b      	ldrb	r3, [r3, #4]
 800801e:	4619      	mov	r1, r3
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f000 fc09 	bl	8008838 <USBH_LL_GetURBState>
 8008026:	4603      	mov	r3, r0
 8008028:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800802a:	7bbb      	ldrb	r3, [r7, #14]
 800802c:	2b01      	cmp	r3, #1
 800802e:	d105      	bne.n	800803c <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	220d      	movs	r2, #13
 8008034:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008036:	2300      	movs	r3, #0
 8008038:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800803a:	e073      	b.n	8008124 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 800803c:	7bbb      	ldrb	r3, [r7, #14]
 800803e:	2b04      	cmp	r3, #4
 8008040:	d103      	bne.n	800804a <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	220b      	movs	r2, #11
 8008046:	761a      	strb	r2, [r3, #24]
      break;
 8008048:	e06c      	b.n	8008124 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 800804a:	7bbb      	ldrb	r3, [r7, #14]
 800804c:	2b05      	cmp	r3, #5
 800804e:	d169      	bne.n	8008124 <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 8008050:	2303      	movs	r3, #3
 8008052:	73fb      	strb	r3, [r7, #15]
      break;
 8008054:	e066      	b.n	8008124 <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	795a      	ldrb	r2, [r3, #5]
 800805a:	2301      	movs	r3, #1
 800805c:	9300      	str	r3, [sp, #0]
 800805e:	4613      	mov	r3, r2
 8008060:	2200      	movs	r2, #0
 8008062:	2100      	movs	r1, #0
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f000 f87f 	bl	8008168 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008070:	b29a      	uxth	r2, r3
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	220a      	movs	r2, #10
 800807a:	761a      	strb	r2, [r3, #24]
      break;
 800807c:	e055      	b.n	800812a <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	795b      	ldrb	r3, [r3, #5]
 8008082:	4619      	mov	r1, r3
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f000 fbd7 	bl	8008838 <USBH_LL_GetURBState>
 800808a:	4603      	mov	r3, r0
 800808c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800808e:	7bbb      	ldrb	r3, [r7, #14]
 8008090:	2b01      	cmp	r3, #1
 8008092:	d105      	bne.n	80080a0 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 8008094:	2300      	movs	r3, #0
 8008096:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	220d      	movs	r2, #13
 800809c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800809e:	e043      	b.n	8008128 <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 80080a0:	7bbb      	ldrb	r3, [r7, #14]
 80080a2:	2b02      	cmp	r3, #2
 80080a4:	d103      	bne.n	80080ae <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2209      	movs	r2, #9
 80080aa:	761a      	strb	r2, [r3, #24]
      break;
 80080ac:	e03c      	b.n	8008128 <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 80080ae:	7bbb      	ldrb	r3, [r7, #14]
 80080b0:	2b04      	cmp	r3, #4
 80080b2:	d139      	bne.n	8008128 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	220b      	movs	r2, #11
 80080b8:	761a      	strb	r2, [r3, #24]
      break;
 80080ba:	e035      	b.n	8008128 <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	7e5b      	ldrb	r3, [r3, #25]
 80080c0:	3301      	adds	r3, #1
 80080c2:	b2da      	uxtb	r2, r3
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	765a      	strb	r2, [r3, #25]
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	7e5b      	ldrb	r3, [r3, #25]
 80080cc:	2b02      	cmp	r3, #2
 80080ce:	d806      	bhi.n	80080de <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2201      	movs	r2, #1
 80080d4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2201      	movs	r2, #1
 80080da:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80080dc:	e025      	b.n	800812a <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80080e4:	2106      	movs	r1, #6
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2200      	movs	r2, #0
 80080ee:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	795b      	ldrb	r3, [r3, #5]
 80080f4:	4619      	mov	r1, r3
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f000 f90c 	bl	8008314 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	791b      	ldrb	r3, [r3, #4]
 8008100:	4619      	mov	r1, r3
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f000 f906 	bl	8008314 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2200      	movs	r2, #0
 800810c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800810e:	2302      	movs	r3, #2
 8008110:	73fb      	strb	r3, [r7, #15]
      break;
 8008112:	e00a      	b.n	800812a <USBH_HandleControl+0x2e2>

    default:
      break;
 8008114:	bf00      	nop
 8008116:	e008      	b.n	800812a <USBH_HandleControl+0x2e2>
      break;
 8008118:	bf00      	nop
 800811a:	e006      	b.n	800812a <USBH_HandleControl+0x2e2>
      break;
 800811c:	bf00      	nop
 800811e:	e004      	b.n	800812a <USBH_HandleControl+0x2e2>
      break;
 8008120:	bf00      	nop
 8008122:	e002      	b.n	800812a <USBH_HandleControl+0x2e2>
      break;
 8008124:	bf00      	nop
 8008126:	e000      	b.n	800812a <USBH_HandleControl+0x2e2>
      break;
 8008128:	bf00      	nop
  }

  return status;
 800812a:	7bfb      	ldrb	r3, [r7, #15]
}
 800812c:	4618      	mov	r0, r3
 800812e:	3710      	adds	r7, #16
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}

08008134 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b088      	sub	sp, #32
 8008138:	af04      	add	r7, sp, #16
 800813a:	60f8      	str	r0, [r7, #12]
 800813c:	60b9      	str	r1, [r7, #8]
 800813e:	4613      	mov	r3, r2
 8008140:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008142:	79f9      	ldrb	r1, [r7, #7]
 8008144:	2300      	movs	r3, #0
 8008146:	9303      	str	r3, [sp, #12]
 8008148:	2308      	movs	r3, #8
 800814a:	9302      	str	r3, [sp, #8]
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	9301      	str	r3, [sp, #4]
 8008150:	2300      	movs	r3, #0
 8008152:	9300      	str	r3, [sp, #0]
 8008154:	2300      	movs	r3, #0
 8008156:	2200      	movs	r2, #0
 8008158:	68f8      	ldr	r0, [r7, #12]
 800815a:	f000 fb3c 	bl	80087d6 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800815e:	2300      	movs	r3, #0
}
 8008160:	4618      	mov	r0, r3
 8008162:	3710      	adds	r7, #16
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}

08008168 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b088      	sub	sp, #32
 800816c:	af04      	add	r7, sp, #16
 800816e:	60f8      	str	r0, [r7, #12]
 8008170:	60b9      	str	r1, [r7, #8]
 8008172:	4611      	mov	r1, r2
 8008174:	461a      	mov	r2, r3
 8008176:	460b      	mov	r3, r1
 8008178:	80fb      	strh	r3, [r7, #6]
 800817a:	4613      	mov	r3, r2
 800817c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008184:	2b00      	cmp	r3, #0
 8008186:	d001      	beq.n	800818c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008188:	2300      	movs	r3, #0
 800818a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800818c:	7979      	ldrb	r1, [r7, #5]
 800818e:	7e3b      	ldrb	r3, [r7, #24]
 8008190:	9303      	str	r3, [sp, #12]
 8008192:	88fb      	ldrh	r3, [r7, #6]
 8008194:	9302      	str	r3, [sp, #8]
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	9301      	str	r3, [sp, #4]
 800819a:	2301      	movs	r3, #1
 800819c:	9300      	str	r3, [sp, #0]
 800819e:	2300      	movs	r3, #0
 80081a0:	2200      	movs	r2, #0
 80081a2:	68f8      	ldr	r0, [r7, #12]
 80081a4:	f000 fb17 	bl	80087d6 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80081a8:	2300      	movs	r3, #0
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	3710      	adds	r7, #16
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}

080081b2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80081b2:	b580      	push	{r7, lr}
 80081b4:	b088      	sub	sp, #32
 80081b6:	af04      	add	r7, sp, #16
 80081b8:	60f8      	str	r0, [r7, #12]
 80081ba:	60b9      	str	r1, [r7, #8]
 80081bc:	4611      	mov	r1, r2
 80081be:	461a      	mov	r2, r3
 80081c0:	460b      	mov	r3, r1
 80081c2:	80fb      	strh	r3, [r7, #6]
 80081c4:	4613      	mov	r3, r2
 80081c6:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80081c8:	7979      	ldrb	r1, [r7, #5]
 80081ca:	2300      	movs	r3, #0
 80081cc:	9303      	str	r3, [sp, #12]
 80081ce:	88fb      	ldrh	r3, [r7, #6]
 80081d0:	9302      	str	r3, [sp, #8]
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	9301      	str	r3, [sp, #4]
 80081d6:	2301      	movs	r3, #1
 80081d8:	9300      	str	r3, [sp, #0]
 80081da:	2300      	movs	r3, #0
 80081dc:	2201      	movs	r2, #1
 80081de:	68f8      	ldr	r0, [r7, #12]
 80081e0:	f000 faf9 	bl	80087d6 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80081e4:	2300      	movs	r3, #0

}
 80081e6:	4618      	mov	r0, r3
 80081e8:	3710      	adds	r7, #16
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}

080081ee <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80081ee:	b580      	push	{r7, lr}
 80081f0:	b088      	sub	sp, #32
 80081f2:	af04      	add	r7, sp, #16
 80081f4:	60f8      	str	r0, [r7, #12]
 80081f6:	60b9      	str	r1, [r7, #8]
 80081f8:	4611      	mov	r1, r2
 80081fa:	461a      	mov	r2, r3
 80081fc:	460b      	mov	r3, r1
 80081fe:	80fb      	strh	r3, [r7, #6]
 8008200:	4613      	mov	r3, r2
 8008202:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800820a:	2b00      	cmp	r3, #0
 800820c:	d001      	beq.n	8008212 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800820e:	2300      	movs	r3, #0
 8008210:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008212:	7979      	ldrb	r1, [r7, #5]
 8008214:	7e3b      	ldrb	r3, [r7, #24]
 8008216:	9303      	str	r3, [sp, #12]
 8008218:	88fb      	ldrh	r3, [r7, #6]
 800821a:	9302      	str	r3, [sp, #8]
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	9301      	str	r3, [sp, #4]
 8008220:	2301      	movs	r3, #1
 8008222:	9300      	str	r3, [sp, #0]
 8008224:	2302      	movs	r3, #2
 8008226:	2200      	movs	r2, #0
 8008228:	68f8      	ldr	r0, [r7, #12]
 800822a:	f000 fad4 	bl	80087d6 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800822e:	2300      	movs	r3, #0
}
 8008230:	4618      	mov	r0, r3
 8008232:	3710      	adds	r7, #16
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}

08008238 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b088      	sub	sp, #32
 800823c:	af04      	add	r7, sp, #16
 800823e:	60f8      	str	r0, [r7, #12]
 8008240:	60b9      	str	r1, [r7, #8]
 8008242:	4611      	mov	r1, r2
 8008244:	461a      	mov	r2, r3
 8008246:	460b      	mov	r3, r1
 8008248:	80fb      	strh	r3, [r7, #6]
 800824a:	4613      	mov	r3, r2
 800824c:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800824e:	7979      	ldrb	r1, [r7, #5]
 8008250:	2300      	movs	r3, #0
 8008252:	9303      	str	r3, [sp, #12]
 8008254:	88fb      	ldrh	r3, [r7, #6]
 8008256:	9302      	str	r3, [sp, #8]
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	9301      	str	r3, [sp, #4]
 800825c:	2301      	movs	r3, #1
 800825e:	9300      	str	r3, [sp, #0]
 8008260:	2302      	movs	r3, #2
 8008262:	2201      	movs	r2, #1
 8008264:	68f8      	ldr	r0, [r7, #12]
 8008266:	f000 fab6 	bl	80087d6 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800826a:	2300      	movs	r3, #0
}
 800826c:	4618      	mov	r0, r3
 800826e:	3710      	adds	r7, #16
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}

08008274 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b086      	sub	sp, #24
 8008278:	af04      	add	r7, sp, #16
 800827a:	6078      	str	r0, [r7, #4]
 800827c:	4608      	mov	r0, r1
 800827e:	4611      	mov	r1, r2
 8008280:	461a      	mov	r2, r3
 8008282:	4603      	mov	r3, r0
 8008284:	70fb      	strb	r3, [r7, #3]
 8008286:	460b      	mov	r3, r1
 8008288:	70bb      	strb	r3, [r7, #2]
 800828a:	4613      	mov	r3, r2
 800828c:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800828e:	7878      	ldrb	r0, [r7, #1]
 8008290:	78ba      	ldrb	r2, [r7, #2]
 8008292:	78f9      	ldrb	r1, [r7, #3]
 8008294:	8b3b      	ldrh	r3, [r7, #24]
 8008296:	9302      	str	r3, [sp, #8]
 8008298:	7d3b      	ldrb	r3, [r7, #20]
 800829a:	9301      	str	r3, [sp, #4]
 800829c:	7c3b      	ldrb	r3, [r7, #16]
 800829e:	9300      	str	r3, [sp, #0]
 80082a0:	4603      	mov	r3, r0
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f000 fa49 	bl	800873a <USBH_LL_OpenPipe>

  return USBH_OK;
 80082a8:	2300      	movs	r3, #0
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3708      	adds	r7, #8
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}

080082b2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80082b2:	b580      	push	{r7, lr}
 80082b4:	b082      	sub	sp, #8
 80082b6:	af00      	add	r7, sp, #0
 80082b8:	6078      	str	r0, [r7, #4]
 80082ba:	460b      	mov	r3, r1
 80082bc:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 80082be:	78fb      	ldrb	r3, [r7, #3]
 80082c0:	4619      	mov	r1, r3
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f000 fa68 	bl	8008798 <USBH_LL_ClosePipe>

  return USBH_OK;
 80082c8:	2300      	movs	r3, #0
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3708      	adds	r7, #8
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}

080082d2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80082d2:	b580      	push	{r7, lr}
 80082d4:	b084      	sub	sp, #16
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	6078      	str	r0, [r7, #4]
 80082da:	460b      	mov	r3, r1
 80082dc:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f000 f836 	bl	8008350 <USBH_GetFreePipe>
 80082e4:	4603      	mov	r3, r0
 80082e6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80082e8:	89fb      	ldrh	r3, [r7, #14]
 80082ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d00a      	beq.n	8008308 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 80082f2:	78fa      	ldrb	r2, [r7, #3]
 80082f4:	89fb      	ldrh	r3, [r7, #14]
 80082f6:	f003 030f 	and.w	r3, r3, #15
 80082fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80082fe:	6879      	ldr	r1, [r7, #4]
 8008300:	33e0      	adds	r3, #224	; 0xe0
 8008302:	009b      	lsls	r3, r3, #2
 8008304:	440b      	add	r3, r1
 8008306:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008308:	89fb      	ldrh	r3, [r7, #14]
 800830a:	b2db      	uxtb	r3, r3
}
 800830c:	4618      	mov	r0, r3
 800830e:	3710      	adds	r7, #16
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}

08008314 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008314:	b480      	push	{r7}
 8008316:	b083      	sub	sp, #12
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
 800831c:	460b      	mov	r3, r1
 800831e:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8008320:	78fb      	ldrb	r3, [r7, #3]
 8008322:	2b0a      	cmp	r3, #10
 8008324:	d80d      	bhi.n	8008342 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008326:	78fb      	ldrb	r3, [r7, #3]
 8008328:	687a      	ldr	r2, [r7, #4]
 800832a:	33e0      	adds	r3, #224	; 0xe0
 800832c:	009b      	lsls	r3, r3, #2
 800832e:	4413      	add	r3, r2
 8008330:	685a      	ldr	r2, [r3, #4]
 8008332:	78fb      	ldrb	r3, [r7, #3]
 8008334:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008338:	6879      	ldr	r1, [r7, #4]
 800833a:	33e0      	adds	r3, #224	; 0xe0
 800833c:	009b      	lsls	r3, r3, #2
 800833e:	440b      	add	r3, r1
 8008340:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008342:	2300      	movs	r3, #0
}
 8008344:	4618      	mov	r0, r3
 8008346:	370c      	adds	r7, #12
 8008348:	46bd      	mov	sp, r7
 800834a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834e:	4770      	bx	lr

08008350 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008350:	b480      	push	{r7}
 8008352:	b085      	sub	sp, #20
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008358:	2300      	movs	r3, #0
 800835a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800835c:	2300      	movs	r3, #0
 800835e:	73fb      	strb	r3, [r7, #15]
 8008360:	e00f      	b.n	8008382 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008362:	7bfb      	ldrb	r3, [r7, #15]
 8008364:	687a      	ldr	r2, [r7, #4]
 8008366:	33e0      	adds	r3, #224	; 0xe0
 8008368:	009b      	lsls	r3, r3, #2
 800836a:	4413      	add	r3, r2
 800836c:	685b      	ldr	r3, [r3, #4]
 800836e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008372:	2b00      	cmp	r3, #0
 8008374:	d102      	bne.n	800837c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008376:	7bfb      	ldrb	r3, [r7, #15]
 8008378:	b29b      	uxth	r3, r3
 800837a:	e007      	b.n	800838c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800837c:	7bfb      	ldrb	r3, [r7, #15]
 800837e:	3301      	adds	r3, #1
 8008380:	73fb      	strb	r3, [r7, #15]
 8008382:	7bfb      	ldrb	r3, [r7, #15]
 8008384:	2b0a      	cmp	r3, #10
 8008386:	d9ec      	bls.n	8008362 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008388:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800838c:	4618      	mov	r0, r3
 800838e:	3714      	adds	r7, #20
 8008390:	46bd      	mov	sp, r7
 8008392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008396:	4770      	bx	lr

08008398 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800839c:	2201      	movs	r2, #1
 800839e:	490e      	ldr	r1, [pc, #56]	; (80083d8 <MX_USB_HOST_Init+0x40>)
 80083a0:	480e      	ldr	r0, [pc, #56]	; (80083dc <MX_USB_HOST_Init+0x44>)
 80083a2:	f7fe fc9f 	bl	8006ce4 <USBH_Init>
 80083a6:	4603      	mov	r3, r0
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d001      	beq.n	80083b0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80083ac:	f7f8 fc10 	bl	8000bd0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80083b0:	490b      	ldr	r1, [pc, #44]	; (80083e0 <MX_USB_HOST_Init+0x48>)
 80083b2:	480a      	ldr	r0, [pc, #40]	; (80083dc <MX_USB_HOST_Init+0x44>)
 80083b4:	f7fe fd24 	bl	8006e00 <USBH_RegisterClass>
 80083b8:	4603      	mov	r3, r0
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d001      	beq.n	80083c2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80083be:	f7f8 fc07 	bl	8000bd0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80083c2:	4806      	ldr	r0, [pc, #24]	; (80083dc <MX_USB_HOST_Init+0x44>)
 80083c4:	f7fe fda8 	bl	8006f18 <USBH_Start>
 80083c8:	4603      	mov	r3, r0
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d001      	beq.n	80083d2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80083ce:	f7f8 fbff 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80083d2:	bf00      	nop
 80083d4:	bd80      	pop	{r7, pc}
 80083d6:	bf00      	nop
 80083d8:	080083f9 	.word	0x080083f9
 80083dc:	200001fc 	.word	0x200001fc
 80083e0:	2000000c 	.word	0x2000000c

080083e4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80083e8:	4802      	ldr	r0, [pc, #8]	; (80083f4 <MX_USB_HOST_Process+0x10>)
 80083ea:	f7fe fda5 	bl	8006f38 <USBH_Process>
}
 80083ee:	bf00      	nop
 80083f0:	bd80      	pop	{r7, pc}
 80083f2:	bf00      	nop
 80083f4:	200001fc 	.word	0x200001fc

080083f8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80083f8:	b480      	push	{r7}
 80083fa:	b083      	sub	sp, #12
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
 8008400:	460b      	mov	r3, r1
 8008402:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008404:	78fb      	ldrb	r3, [r7, #3]
 8008406:	3b01      	subs	r3, #1
 8008408:	2b04      	cmp	r3, #4
 800840a:	d819      	bhi.n	8008440 <USBH_UserProcess+0x48>
 800840c:	a201      	add	r2, pc, #4	; (adr r2, 8008414 <USBH_UserProcess+0x1c>)
 800840e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008412:	bf00      	nop
 8008414:	08008441 	.word	0x08008441
 8008418:	08008431 	.word	0x08008431
 800841c:	08008441 	.word	0x08008441
 8008420:	08008439 	.word	0x08008439
 8008424:	08008429 	.word	0x08008429
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008428:	4b09      	ldr	r3, [pc, #36]	; (8008450 <USBH_UserProcess+0x58>)
 800842a:	2203      	movs	r2, #3
 800842c:	701a      	strb	r2, [r3, #0]
  break;
 800842e:	e008      	b.n	8008442 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008430:	4b07      	ldr	r3, [pc, #28]	; (8008450 <USBH_UserProcess+0x58>)
 8008432:	2202      	movs	r2, #2
 8008434:	701a      	strb	r2, [r3, #0]
  break;
 8008436:	e004      	b.n	8008442 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008438:	4b05      	ldr	r3, [pc, #20]	; (8008450 <USBH_UserProcess+0x58>)
 800843a:	2201      	movs	r2, #1
 800843c:	701a      	strb	r2, [r3, #0]
  break;
 800843e:	e000      	b.n	8008442 <USBH_UserProcess+0x4a>

  default:
  break;
 8008440:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008442:	bf00      	nop
 8008444:	370c      	adds	r7, #12
 8008446:	46bd      	mov	sp, r7
 8008448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844c:	4770      	bx	lr
 800844e:	bf00      	nop
 8008450:	200000b4 	.word	0x200000b4

08008454 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b08a      	sub	sp, #40	; 0x28
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800845c:	f107 0314 	add.w	r3, r7, #20
 8008460:	2200      	movs	r2, #0
 8008462:	601a      	str	r2, [r3, #0]
 8008464:	605a      	str	r2, [r3, #4]
 8008466:	609a      	str	r2, [r3, #8]
 8008468:	60da      	str	r2, [r3, #12]
 800846a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008474:	d13f      	bne.n	80084f6 <HAL_HCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008476:	2300      	movs	r3, #0
 8008478:	613b      	str	r3, [r7, #16]
 800847a:	4b21      	ldr	r3, [pc, #132]	; (8008500 <HAL_HCD_MspInit+0xac>)
 800847c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800847e:	4a20      	ldr	r2, [pc, #128]	; (8008500 <HAL_HCD_MspInit+0xac>)
 8008480:	f043 0301 	orr.w	r3, r3, #1
 8008484:	6313      	str	r3, [r2, #48]	; 0x30
 8008486:	4b1e      	ldr	r3, [pc, #120]	; (8008500 <HAL_HCD_MspInit+0xac>)
 8008488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800848a:	f003 0301 	and.w	r3, r3, #1
 800848e:	613b      	str	r3, [r7, #16]
 8008490:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008492:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008496:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008498:	2300      	movs	r3, #0
 800849a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800849c:	2300      	movs	r3, #0
 800849e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80084a0:	f107 0314 	add.w	r3, r7, #20
 80084a4:	4619      	mov	r1, r3
 80084a6:	4817      	ldr	r0, [pc, #92]	; (8008504 <HAL_HCD_MspInit+0xb0>)
 80084a8:	f7f8 ff7a 	bl	80013a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80084ac:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80084b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80084b2:	2302      	movs	r3, #2
 80084b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084b6:	2300      	movs	r3, #0
 80084b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80084ba:	2300      	movs	r3, #0
 80084bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80084be:	230a      	movs	r3, #10
 80084c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80084c2:	f107 0314 	add.w	r3, r7, #20
 80084c6:	4619      	mov	r1, r3
 80084c8:	480e      	ldr	r0, [pc, #56]	; (8008504 <HAL_HCD_MspInit+0xb0>)
 80084ca:	f7f8 ff69 	bl	80013a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80084ce:	4b0c      	ldr	r3, [pc, #48]	; (8008500 <HAL_HCD_MspInit+0xac>)
 80084d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084d2:	4a0b      	ldr	r2, [pc, #44]	; (8008500 <HAL_HCD_MspInit+0xac>)
 80084d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084d8:	6353      	str	r3, [r2, #52]	; 0x34
 80084da:	2300      	movs	r3, #0
 80084dc:	60fb      	str	r3, [r7, #12]
 80084de:	4b08      	ldr	r3, [pc, #32]	; (8008500 <HAL_HCD_MspInit+0xac>)
 80084e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084e2:	4a07      	ldr	r2, [pc, #28]	; (8008500 <HAL_HCD_MspInit+0xac>)
 80084e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80084e8:	6453      	str	r3, [r2, #68]	; 0x44
 80084ea:	4b05      	ldr	r3, [pc, #20]	; (8008500 <HAL_HCD_MspInit+0xac>)
 80084ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80084f2:	60fb      	str	r3, [r7, #12]
 80084f4:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral interrupt init */
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80084f6:	bf00      	nop
 80084f8:	3728      	adds	r7, #40	; 0x28
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}
 80084fe:	bf00      	nop
 8008500:	40023800 	.word	0x40023800
 8008504:	40020000 	.word	0x40020000

08008508 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b082      	sub	sp, #8
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008516:	4618      	mov	r0, r3
 8008518:	f7ff f8e1 	bl	80076de <USBH_LL_IncTimer>
}
 800851c:	bf00      	nop
 800851e:	3708      	adds	r7, #8
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}

08008524 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b082      	sub	sp, #8
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008532:	4618      	mov	r0, r3
 8008534:	f7ff f919 	bl	800776a <USBH_LL_Connect>
}
 8008538:	bf00      	nop
 800853a:	3708      	adds	r7, #8
 800853c:	46bd      	mov	sp, r7
 800853e:	bd80      	pop	{r7, pc}

08008540 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b082      	sub	sp, #8
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800854e:	4618      	mov	r0, r3
 8008550:	f7ff f922 	bl	8007798 <USBH_LL_Disconnect>
}
 8008554:	bf00      	nop
 8008556:	3708      	adds	r7, #8
 8008558:	46bd      	mov	sp, r7
 800855a:	bd80      	pop	{r7, pc}

0800855c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800855c:	b480      	push	{r7}
 800855e:	b083      	sub	sp, #12
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
 8008564:	460b      	mov	r3, r1
 8008566:	70fb      	strb	r3, [r7, #3]
 8008568:	4613      	mov	r3, r2
 800856a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800856c:	bf00      	nop
 800856e:	370c      	adds	r7, #12
 8008570:	46bd      	mov	sp, r7
 8008572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008576:	4770      	bx	lr

08008578 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b082      	sub	sp, #8
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008586:	4618      	mov	r0, r3
 8008588:	f7ff f8d3 	bl	8007732 <USBH_LL_PortEnabled>
} 
 800858c:	bf00      	nop
 800858e:	3708      	adds	r7, #8
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}

08008594 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b082      	sub	sp, #8
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80085a2:	4618      	mov	r0, r3
 80085a4:	f7ff f8d3 	bl	800774e <USBH_LL_PortDisabled>
} 
 80085a8:	bf00      	nop
 80085aa:	3708      	adds	r7, #8
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}

080085b0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b082      	sub	sp, #8
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80085be:	2b01      	cmp	r3, #1
 80085c0:	d12a      	bne.n	8008618 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80085c2:	4a18      	ldr	r2, [pc, #96]	; (8008624 <USBH_LL_Init+0x74>)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	4a15      	ldr	r2, [pc, #84]	; (8008624 <USBH_LL_Init+0x74>)
 80085ce:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80085d2:	4b14      	ldr	r3, [pc, #80]	; (8008624 <USBH_LL_Init+0x74>)
 80085d4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80085d8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80085da:	4b12      	ldr	r3, [pc, #72]	; (8008624 <USBH_LL_Init+0x74>)
 80085dc:	2208      	movs	r2, #8
 80085de:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80085e0:	4b10      	ldr	r3, [pc, #64]	; (8008624 <USBH_LL_Init+0x74>)
 80085e2:	2201      	movs	r2, #1
 80085e4:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80085e6:	4b0f      	ldr	r3, [pc, #60]	; (8008624 <USBH_LL_Init+0x74>)
 80085e8:	2200      	movs	r2, #0
 80085ea:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80085ec:	4b0d      	ldr	r3, [pc, #52]	; (8008624 <USBH_LL_Init+0x74>)
 80085ee:	2202      	movs	r2, #2
 80085f0:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80085f2:	4b0c      	ldr	r3, [pc, #48]	; (8008624 <USBH_LL_Init+0x74>)
 80085f4:	2200      	movs	r2, #0
 80085f6:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80085f8:	480a      	ldr	r0, [pc, #40]	; (8008624 <USBH_LL_Init+0x74>)
 80085fa:	f7f9 f884 	bl	8001706 <HAL_HCD_Init>
 80085fe:	4603      	mov	r3, r0
 8008600:	2b00      	cmp	r3, #0
 8008602:	d001      	beq.n	8008608 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008604:	f7f8 fae4 	bl	8000bd0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008608:	4806      	ldr	r0, [pc, #24]	; (8008624 <USBH_LL_Init+0x74>)
 800860a:	f7f9 fc87 	bl	8001f1c <HAL_HCD_GetCurrentFrame>
 800860e:	4603      	mov	r3, r0
 8008610:	4619      	mov	r1, r3
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f7ff f854 	bl	80076c0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008618:	2300      	movs	r3, #0
}
 800861a:	4618      	mov	r0, r3
 800861c:	3708      	adds	r7, #8
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}
 8008622:	bf00      	nop
 8008624:	200005d4 	.word	0x200005d4

08008628 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b084      	sub	sp, #16
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008630:	2300      	movs	r3, #0
 8008632:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008634:	2300      	movs	r3, #0
 8008636:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800863e:	4618      	mov	r0, r3
 8008640:	f7f9 fbf4 	bl	8001e2c <HAL_HCD_Start>
 8008644:	4603      	mov	r3, r0
 8008646:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008648:	7bfb      	ldrb	r3, [r7, #15]
 800864a:	4618      	mov	r0, r3
 800864c:	f000 f95c 	bl	8008908 <USBH_Get_USB_Status>
 8008650:	4603      	mov	r3, r0
 8008652:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008654:	7bbb      	ldrb	r3, [r7, #14]
}
 8008656:	4618      	mov	r0, r3
 8008658:	3710      	adds	r7, #16
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}

0800865e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800865e:	b580      	push	{r7, lr}
 8008660:	b084      	sub	sp, #16
 8008662:	af00      	add	r7, sp, #0
 8008664:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008666:	2300      	movs	r3, #0
 8008668:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800866a:	2300      	movs	r3, #0
 800866c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008674:	4618      	mov	r0, r3
 8008676:	f7f9 fbfc 	bl	8001e72 <HAL_HCD_Stop>
 800867a:	4603      	mov	r3, r0
 800867c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800867e:	7bfb      	ldrb	r3, [r7, #15]
 8008680:	4618      	mov	r0, r3
 8008682:	f000 f941 	bl	8008908 <USBH_Get_USB_Status>
 8008686:	4603      	mov	r3, r0
 8008688:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 800868a:	7bbb      	ldrb	r3, [r7, #14]
}
 800868c:	4618      	mov	r0, r3
 800868e:	3710      	adds	r7, #16
 8008690:	46bd      	mov	sp, r7
 8008692:	bd80      	pop	{r7, pc}

08008694 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b084      	sub	sp, #16
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800869c:	2301      	movs	r3, #1
 800869e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80086a6:	4618      	mov	r0, r3
 80086a8:	f7f9 fc46 	bl	8001f38 <HAL_HCD_GetCurrentSpeed>
 80086ac:	4603      	mov	r3, r0
 80086ae:	2b01      	cmp	r3, #1
 80086b0:	d007      	beq.n	80086c2 <USBH_LL_GetSpeed+0x2e>
 80086b2:	2b01      	cmp	r3, #1
 80086b4:	d302      	bcc.n	80086bc <USBH_LL_GetSpeed+0x28>
 80086b6:	2b02      	cmp	r3, #2
 80086b8:	d006      	beq.n	80086c8 <USBH_LL_GetSpeed+0x34>
 80086ba:	e008      	b.n	80086ce <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80086bc:	2300      	movs	r3, #0
 80086be:	73fb      	strb	r3, [r7, #15]
    break;
 80086c0:	e008      	b.n	80086d4 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 80086c2:	2301      	movs	r3, #1
 80086c4:	73fb      	strb	r3, [r7, #15]
    break;
 80086c6:	e005      	b.n	80086d4 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 80086c8:	2302      	movs	r3, #2
 80086ca:	73fb      	strb	r3, [r7, #15]
    break;
 80086cc:	e002      	b.n	80086d4 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 80086ce:	2301      	movs	r3, #1
 80086d0:	73fb      	strb	r3, [r7, #15]
    break;
 80086d2:	bf00      	nop
  }
  return  speed;
 80086d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	3710      	adds	r7, #16
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}

080086de <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80086de:	b580      	push	{r7, lr}
 80086e0:	b084      	sub	sp, #16
 80086e2:	af00      	add	r7, sp, #0
 80086e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086e6:	2300      	movs	r3, #0
 80086e8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80086ea:	2300      	movs	r3, #0
 80086ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80086f4:	4618      	mov	r0, r3
 80086f6:	f7f9 fbd9 	bl	8001eac <HAL_HCD_ResetPort>
 80086fa:	4603      	mov	r3, r0
 80086fc:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 80086fe:	7bfb      	ldrb	r3, [r7, #15]
 8008700:	4618      	mov	r0, r3
 8008702:	f000 f901 	bl	8008908 <USBH_Get_USB_Status>
 8008706:	4603      	mov	r3, r0
 8008708:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800870a:	7bbb      	ldrb	r3, [r7, #14]
}
 800870c:	4618      	mov	r0, r3
 800870e:	3710      	adds	r7, #16
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}

08008714 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b082      	sub	sp, #8
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
 800871c:	460b      	mov	r3, r1
 800871e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008726:	78fa      	ldrb	r2, [r7, #3]
 8008728:	4611      	mov	r1, r2
 800872a:	4618      	mov	r0, r3
 800872c:	f7f9 fbe1 	bl	8001ef2 <HAL_HCD_HC_GetXferCount>
 8008730:	4603      	mov	r3, r0
}
 8008732:	4618      	mov	r0, r3
 8008734:	3708      	adds	r7, #8
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}

0800873a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800873a:	b590      	push	{r4, r7, lr}
 800873c:	b089      	sub	sp, #36	; 0x24
 800873e:	af04      	add	r7, sp, #16
 8008740:	6078      	str	r0, [r7, #4]
 8008742:	4608      	mov	r0, r1
 8008744:	4611      	mov	r1, r2
 8008746:	461a      	mov	r2, r3
 8008748:	4603      	mov	r3, r0
 800874a:	70fb      	strb	r3, [r7, #3]
 800874c:	460b      	mov	r3, r1
 800874e:	70bb      	strb	r3, [r7, #2]
 8008750:	4613      	mov	r3, r2
 8008752:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008754:	2300      	movs	r3, #0
 8008756:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008758:	2300      	movs	r3, #0
 800875a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008762:	787c      	ldrb	r4, [r7, #1]
 8008764:	78ba      	ldrb	r2, [r7, #2]
 8008766:	78f9      	ldrb	r1, [r7, #3]
 8008768:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800876a:	9302      	str	r3, [sp, #8]
 800876c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008770:	9301      	str	r3, [sp, #4]
 8008772:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008776:	9300      	str	r3, [sp, #0]
 8008778:	4623      	mov	r3, r4
 800877a:	f7f9 f826 	bl	80017ca <HAL_HCD_HC_Init>
 800877e:	4603      	mov	r3, r0
 8008780:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008782:	7bfb      	ldrb	r3, [r7, #15]
 8008784:	4618      	mov	r0, r3
 8008786:	f000 f8bf 	bl	8008908 <USBH_Get_USB_Status>
 800878a:	4603      	mov	r3, r0
 800878c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800878e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008790:	4618      	mov	r0, r3
 8008792:	3714      	adds	r7, #20
 8008794:	46bd      	mov	sp, r7
 8008796:	bd90      	pop	{r4, r7, pc}

08008798 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b084      	sub	sp, #16
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
 80087a0:	460b      	mov	r3, r1
 80087a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087a4:	2300      	movs	r3, #0
 80087a6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80087a8:	2300      	movs	r3, #0
 80087aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80087b2:	78fa      	ldrb	r2, [r7, #3]
 80087b4:	4611      	mov	r1, r2
 80087b6:	4618      	mov	r0, r3
 80087b8:	f7f9 f89f 	bl	80018fa <HAL_HCD_HC_Halt>
 80087bc:	4603      	mov	r3, r0
 80087be:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80087c0:	7bfb      	ldrb	r3, [r7, #15]
 80087c2:	4618      	mov	r0, r3
 80087c4:	f000 f8a0 	bl	8008908 <USBH_Get_USB_Status>
 80087c8:	4603      	mov	r3, r0
 80087ca:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80087cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3710      	adds	r7, #16
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}

080087d6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80087d6:	b590      	push	{r4, r7, lr}
 80087d8:	b089      	sub	sp, #36	; 0x24
 80087da:	af04      	add	r7, sp, #16
 80087dc:	6078      	str	r0, [r7, #4]
 80087de:	4608      	mov	r0, r1
 80087e0:	4611      	mov	r1, r2
 80087e2:	461a      	mov	r2, r3
 80087e4:	4603      	mov	r3, r0
 80087e6:	70fb      	strb	r3, [r7, #3]
 80087e8:	460b      	mov	r3, r1
 80087ea:	70bb      	strb	r3, [r7, #2]
 80087ec:	4613      	mov	r3, r2
 80087ee:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087f0:	2300      	movs	r3, #0
 80087f2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80087f4:	2300      	movs	r3, #0
 80087f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80087fe:	787c      	ldrb	r4, [r7, #1]
 8008800:	78ba      	ldrb	r2, [r7, #2]
 8008802:	78f9      	ldrb	r1, [r7, #3]
 8008804:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008808:	9303      	str	r3, [sp, #12]
 800880a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800880c:	9302      	str	r3, [sp, #8]
 800880e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008810:	9301      	str	r3, [sp, #4]
 8008812:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008816:	9300      	str	r3, [sp, #0]
 8008818:	4623      	mov	r3, r4
 800881a:	f7f9 f891 	bl	8001940 <HAL_HCD_HC_SubmitRequest>
 800881e:	4603      	mov	r3, r0
 8008820:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008822:	7bfb      	ldrb	r3, [r7, #15]
 8008824:	4618      	mov	r0, r3
 8008826:	f000 f86f 	bl	8008908 <USBH_Get_USB_Status>
 800882a:	4603      	mov	r3, r0
 800882c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800882e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008830:	4618      	mov	r0, r3
 8008832:	3714      	adds	r7, #20
 8008834:	46bd      	mov	sp, r7
 8008836:	bd90      	pop	{r4, r7, pc}

08008838 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b082      	sub	sp, #8
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
 8008840:	460b      	mov	r3, r1
 8008842:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800884a:	78fa      	ldrb	r2, [r7, #3]
 800884c:	4611      	mov	r1, r2
 800884e:	4618      	mov	r0, r3
 8008850:	f7f9 fb3a 	bl	8001ec8 <HAL_HCD_HC_GetURBState>
 8008854:	4603      	mov	r3, r0
}
 8008856:	4618      	mov	r0, r3
 8008858:	3708      	adds	r7, #8
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}

0800885e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800885e:	b580      	push	{r7, lr}
 8008860:	b082      	sub	sp, #8
 8008862:	af00      	add	r7, sp, #0
 8008864:	6078      	str	r0, [r7, #4]
 8008866:	460b      	mov	r3, r1
 8008868:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008870:	2b01      	cmp	r3, #1
 8008872:	d103      	bne.n	800887c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008874:	78fb      	ldrb	r3, [r7, #3]
 8008876:	4618      	mov	r0, r3
 8008878:	f000 f872 	bl	8008960 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800887c:	20c8      	movs	r0, #200	; 0xc8
 800887e:	f7f8 fc39 	bl	80010f4 <HAL_Delay>
  return USBH_OK;
 8008882:	2300      	movs	r3, #0
}
 8008884:	4618      	mov	r0, r3
 8008886:	3708      	adds	r7, #8
 8008888:	46bd      	mov	sp, r7
 800888a:	bd80      	pop	{r7, pc}

0800888c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800888c:	b480      	push	{r7}
 800888e:	b085      	sub	sp, #20
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
 8008894:	460b      	mov	r3, r1
 8008896:	70fb      	strb	r3, [r7, #3]
 8008898:	4613      	mov	r3, r2
 800889a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80088a2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80088a4:	78fa      	ldrb	r2, [r7, #3]
 80088a6:	68f9      	ldr	r1, [r7, #12]
 80088a8:	4613      	mov	r3, r2
 80088aa:	009b      	lsls	r3, r3, #2
 80088ac:	4413      	add	r3, r2
 80088ae:	00db      	lsls	r3, r3, #3
 80088b0:	440b      	add	r3, r1
 80088b2:	333b      	adds	r3, #59	; 0x3b
 80088b4:	781b      	ldrb	r3, [r3, #0]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d00a      	beq.n	80088d0 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80088ba:	78fa      	ldrb	r2, [r7, #3]
 80088bc:	68f9      	ldr	r1, [r7, #12]
 80088be:	4613      	mov	r3, r2
 80088c0:	009b      	lsls	r3, r3, #2
 80088c2:	4413      	add	r3, r2
 80088c4:	00db      	lsls	r3, r3, #3
 80088c6:	440b      	add	r3, r1
 80088c8:	3350      	adds	r3, #80	; 0x50
 80088ca:	78ba      	ldrb	r2, [r7, #2]
 80088cc:	701a      	strb	r2, [r3, #0]
 80088ce:	e009      	b.n	80088e4 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80088d0:	78fa      	ldrb	r2, [r7, #3]
 80088d2:	68f9      	ldr	r1, [r7, #12]
 80088d4:	4613      	mov	r3, r2
 80088d6:	009b      	lsls	r3, r3, #2
 80088d8:	4413      	add	r3, r2
 80088da:	00db      	lsls	r3, r3, #3
 80088dc:	440b      	add	r3, r1
 80088de:	3351      	adds	r3, #81	; 0x51
 80088e0:	78ba      	ldrb	r2, [r7, #2]
 80088e2:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80088e4:	2300      	movs	r3, #0
}
 80088e6:	4618      	mov	r0, r3
 80088e8:	3714      	adds	r7, #20
 80088ea:	46bd      	mov	sp, r7
 80088ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f0:	4770      	bx	lr

080088f2 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80088f2:	b580      	push	{r7, lr}
 80088f4:	b082      	sub	sp, #8
 80088f6:	af00      	add	r7, sp, #0
 80088f8:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f7f8 fbfa 	bl	80010f4 <HAL_Delay>
}
 8008900:	bf00      	nop
 8008902:	3708      	adds	r7, #8
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}

08008908 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008908:	b480      	push	{r7}
 800890a:	b085      	sub	sp, #20
 800890c:	af00      	add	r7, sp, #0
 800890e:	4603      	mov	r3, r0
 8008910:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008912:	2300      	movs	r3, #0
 8008914:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008916:	79fb      	ldrb	r3, [r7, #7]
 8008918:	2b03      	cmp	r3, #3
 800891a:	d817      	bhi.n	800894c <USBH_Get_USB_Status+0x44>
 800891c:	a201      	add	r2, pc, #4	; (adr r2, 8008924 <USBH_Get_USB_Status+0x1c>)
 800891e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008922:	bf00      	nop
 8008924:	08008935 	.word	0x08008935
 8008928:	0800893b 	.word	0x0800893b
 800892c:	08008941 	.word	0x08008941
 8008930:	08008947 	.word	0x08008947
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008934:	2300      	movs	r3, #0
 8008936:	73fb      	strb	r3, [r7, #15]
    break;
 8008938:	e00b      	b.n	8008952 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800893a:	2302      	movs	r3, #2
 800893c:	73fb      	strb	r3, [r7, #15]
    break;
 800893e:	e008      	b.n	8008952 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008940:	2301      	movs	r3, #1
 8008942:	73fb      	strb	r3, [r7, #15]
    break;
 8008944:	e005      	b.n	8008952 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008946:	2302      	movs	r3, #2
 8008948:	73fb      	strb	r3, [r7, #15]
    break;
 800894a:	e002      	b.n	8008952 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800894c:	2302      	movs	r3, #2
 800894e:	73fb      	strb	r3, [r7, #15]
    break;
 8008950:	bf00      	nop
  }
  return usb_status;
 8008952:	7bfb      	ldrb	r3, [r7, #15]
}
 8008954:	4618      	mov	r0, r3
 8008956:	3714      	adds	r7, #20
 8008958:	46bd      	mov	sp, r7
 800895a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895e:	4770      	bx	lr

08008960 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 8008960:	b580      	push	{r7, lr}
 8008962:	b084      	sub	sp, #16
 8008964:	af00      	add	r7, sp, #0
 8008966:	4603      	mov	r3, r0
 8008968:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 800896a:	79fb      	ldrb	r3, [r7, #7]
 800896c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800896e:	79fb      	ldrb	r3, [r7, #7]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d102      	bne.n	800897a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 8008974:	2301      	movs	r3, #1
 8008976:	73fb      	strb	r3, [r7, #15]
 8008978:	e001      	b.n	800897e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800897a:	2300      	movs	r3, #0
 800897c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800897e:	7bfb      	ldrb	r3, [r7, #15]
 8008980:	461a      	mov	r2, r3
 8008982:	2101      	movs	r1, #1
 8008984:	4803      	ldr	r0, [pc, #12]	; (8008994 <MX_DriverVbusFS+0x34>)
 8008986:	f7f8 fea5 	bl	80016d4 <HAL_GPIO_WritePin>
}
 800898a:	bf00      	nop
 800898c:	3710      	adds	r7, #16
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}
 8008992:	bf00      	nop
 8008994:	40020800 	.word	0x40020800

08008998 <__errno>:
 8008998:	4b01      	ldr	r3, [pc, #4]	; (80089a0 <__errno+0x8>)
 800899a:	6818      	ldr	r0, [r3, #0]
 800899c:	4770      	bx	lr
 800899e:	bf00      	nop
 80089a0:	2000002c 	.word	0x2000002c

080089a4 <__libc_init_array>:
 80089a4:	b570      	push	{r4, r5, r6, lr}
 80089a6:	4e0d      	ldr	r6, [pc, #52]	; (80089dc <__libc_init_array+0x38>)
 80089a8:	4c0d      	ldr	r4, [pc, #52]	; (80089e0 <__libc_init_array+0x3c>)
 80089aa:	1ba4      	subs	r4, r4, r6
 80089ac:	10a4      	asrs	r4, r4, #2
 80089ae:	2500      	movs	r5, #0
 80089b0:	42a5      	cmp	r5, r4
 80089b2:	d109      	bne.n	80089c8 <__libc_init_array+0x24>
 80089b4:	4e0b      	ldr	r6, [pc, #44]	; (80089e4 <__libc_init_array+0x40>)
 80089b6:	4c0c      	ldr	r4, [pc, #48]	; (80089e8 <__libc_init_array+0x44>)
 80089b8:	f000 ff14 	bl	80097e4 <_init>
 80089bc:	1ba4      	subs	r4, r4, r6
 80089be:	10a4      	asrs	r4, r4, #2
 80089c0:	2500      	movs	r5, #0
 80089c2:	42a5      	cmp	r5, r4
 80089c4:	d105      	bne.n	80089d2 <__libc_init_array+0x2e>
 80089c6:	bd70      	pop	{r4, r5, r6, pc}
 80089c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80089cc:	4798      	blx	r3
 80089ce:	3501      	adds	r5, #1
 80089d0:	e7ee      	b.n	80089b0 <__libc_init_array+0xc>
 80089d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80089d6:	4798      	blx	r3
 80089d8:	3501      	adds	r5, #1
 80089da:	e7f2      	b.n	80089c2 <__libc_init_array+0x1e>
 80089dc:	080098c4 	.word	0x080098c4
 80089e0:	080098c4 	.word	0x080098c4
 80089e4:	080098c4 	.word	0x080098c4
 80089e8:	080098c8 	.word	0x080098c8

080089ec <malloc>:
 80089ec:	4b02      	ldr	r3, [pc, #8]	; (80089f8 <malloc+0xc>)
 80089ee:	4601      	mov	r1, r0
 80089f0:	6818      	ldr	r0, [r3, #0]
 80089f2:	f000 b861 	b.w	8008ab8 <_malloc_r>
 80089f6:	bf00      	nop
 80089f8:	2000002c 	.word	0x2000002c

080089fc <free>:
 80089fc:	4b02      	ldr	r3, [pc, #8]	; (8008a08 <free+0xc>)
 80089fe:	4601      	mov	r1, r0
 8008a00:	6818      	ldr	r0, [r3, #0]
 8008a02:	f000 b80b 	b.w	8008a1c <_free_r>
 8008a06:	bf00      	nop
 8008a08:	2000002c 	.word	0x2000002c

08008a0c <memset>:
 8008a0c:	4402      	add	r2, r0
 8008a0e:	4603      	mov	r3, r0
 8008a10:	4293      	cmp	r3, r2
 8008a12:	d100      	bne.n	8008a16 <memset+0xa>
 8008a14:	4770      	bx	lr
 8008a16:	f803 1b01 	strb.w	r1, [r3], #1
 8008a1a:	e7f9      	b.n	8008a10 <memset+0x4>

08008a1c <_free_r>:
 8008a1c:	b538      	push	{r3, r4, r5, lr}
 8008a1e:	4605      	mov	r5, r0
 8008a20:	2900      	cmp	r1, #0
 8008a22:	d045      	beq.n	8008ab0 <_free_r+0x94>
 8008a24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a28:	1f0c      	subs	r4, r1, #4
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	bfb8      	it	lt
 8008a2e:	18e4      	addlt	r4, r4, r3
 8008a30:	f000 f98e 	bl	8008d50 <__malloc_lock>
 8008a34:	4a1f      	ldr	r2, [pc, #124]	; (8008ab4 <_free_r+0x98>)
 8008a36:	6813      	ldr	r3, [r2, #0]
 8008a38:	4610      	mov	r0, r2
 8008a3a:	b933      	cbnz	r3, 8008a4a <_free_r+0x2e>
 8008a3c:	6063      	str	r3, [r4, #4]
 8008a3e:	6014      	str	r4, [r2, #0]
 8008a40:	4628      	mov	r0, r5
 8008a42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a46:	f000 b984 	b.w	8008d52 <__malloc_unlock>
 8008a4a:	42a3      	cmp	r3, r4
 8008a4c:	d90c      	bls.n	8008a68 <_free_r+0x4c>
 8008a4e:	6821      	ldr	r1, [r4, #0]
 8008a50:	1862      	adds	r2, r4, r1
 8008a52:	4293      	cmp	r3, r2
 8008a54:	bf04      	itt	eq
 8008a56:	681a      	ldreq	r2, [r3, #0]
 8008a58:	685b      	ldreq	r3, [r3, #4]
 8008a5a:	6063      	str	r3, [r4, #4]
 8008a5c:	bf04      	itt	eq
 8008a5e:	1852      	addeq	r2, r2, r1
 8008a60:	6022      	streq	r2, [r4, #0]
 8008a62:	6004      	str	r4, [r0, #0]
 8008a64:	e7ec      	b.n	8008a40 <_free_r+0x24>
 8008a66:	4613      	mov	r3, r2
 8008a68:	685a      	ldr	r2, [r3, #4]
 8008a6a:	b10a      	cbz	r2, 8008a70 <_free_r+0x54>
 8008a6c:	42a2      	cmp	r2, r4
 8008a6e:	d9fa      	bls.n	8008a66 <_free_r+0x4a>
 8008a70:	6819      	ldr	r1, [r3, #0]
 8008a72:	1858      	adds	r0, r3, r1
 8008a74:	42a0      	cmp	r0, r4
 8008a76:	d10b      	bne.n	8008a90 <_free_r+0x74>
 8008a78:	6820      	ldr	r0, [r4, #0]
 8008a7a:	4401      	add	r1, r0
 8008a7c:	1858      	adds	r0, r3, r1
 8008a7e:	4282      	cmp	r2, r0
 8008a80:	6019      	str	r1, [r3, #0]
 8008a82:	d1dd      	bne.n	8008a40 <_free_r+0x24>
 8008a84:	6810      	ldr	r0, [r2, #0]
 8008a86:	6852      	ldr	r2, [r2, #4]
 8008a88:	605a      	str	r2, [r3, #4]
 8008a8a:	4401      	add	r1, r0
 8008a8c:	6019      	str	r1, [r3, #0]
 8008a8e:	e7d7      	b.n	8008a40 <_free_r+0x24>
 8008a90:	d902      	bls.n	8008a98 <_free_r+0x7c>
 8008a92:	230c      	movs	r3, #12
 8008a94:	602b      	str	r3, [r5, #0]
 8008a96:	e7d3      	b.n	8008a40 <_free_r+0x24>
 8008a98:	6820      	ldr	r0, [r4, #0]
 8008a9a:	1821      	adds	r1, r4, r0
 8008a9c:	428a      	cmp	r2, r1
 8008a9e:	bf04      	itt	eq
 8008aa0:	6811      	ldreq	r1, [r2, #0]
 8008aa2:	6852      	ldreq	r2, [r2, #4]
 8008aa4:	6062      	str	r2, [r4, #4]
 8008aa6:	bf04      	itt	eq
 8008aa8:	1809      	addeq	r1, r1, r0
 8008aaa:	6021      	streq	r1, [r4, #0]
 8008aac:	605c      	str	r4, [r3, #4]
 8008aae:	e7c7      	b.n	8008a40 <_free_r+0x24>
 8008ab0:	bd38      	pop	{r3, r4, r5, pc}
 8008ab2:	bf00      	nop
 8008ab4:	200000b8 	.word	0x200000b8

08008ab8 <_malloc_r>:
 8008ab8:	b570      	push	{r4, r5, r6, lr}
 8008aba:	1ccd      	adds	r5, r1, #3
 8008abc:	f025 0503 	bic.w	r5, r5, #3
 8008ac0:	3508      	adds	r5, #8
 8008ac2:	2d0c      	cmp	r5, #12
 8008ac4:	bf38      	it	cc
 8008ac6:	250c      	movcc	r5, #12
 8008ac8:	2d00      	cmp	r5, #0
 8008aca:	4606      	mov	r6, r0
 8008acc:	db01      	blt.n	8008ad2 <_malloc_r+0x1a>
 8008ace:	42a9      	cmp	r1, r5
 8008ad0:	d903      	bls.n	8008ada <_malloc_r+0x22>
 8008ad2:	230c      	movs	r3, #12
 8008ad4:	6033      	str	r3, [r6, #0]
 8008ad6:	2000      	movs	r0, #0
 8008ad8:	bd70      	pop	{r4, r5, r6, pc}
 8008ada:	f000 f939 	bl	8008d50 <__malloc_lock>
 8008ade:	4a21      	ldr	r2, [pc, #132]	; (8008b64 <_malloc_r+0xac>)
 8008ae0:	6814      	ldr	r4, [r2, #0]
 8008ae2:	4621      	mov	r1, r4
 8008ae4:	b991      	cbnz	r1, 8008b0c <_malloc_r+0x54>
 8008ae6:	4c20      	ldr	r4, [pc, #128]	; (8008b68 <_malloc_r+0xb0>)
 8008ae8:	6823      	ldr	r3, [r4, #0]
 8008aea:	b91b      	cbnz	r3, 8008af4 <_malloc_r+0x3c>
 8008aec:	4630      	mov	r0, r6
 8008aee:	f000 f855 	bl	8008b9c <_sbrk_r>
 8008af2:	6020      	str	r0, [r4, #0]
 8008af4:	4629      	mov	r1, r5
 8008af6:	4630      	mov	r0, r6
 8008af8:	f000 f850 	bl	8008b9c <_sbrk_r>
 8008afc:	1c43      	adds	r3, r0, #1
 8008afe:	d124      	bne.n	8008b4a <_malloc_r+0x92>
 8008b00:	230c      	movs	r3, #12
 8008b02:	6033      	str	r3, [r6, #0]
 8008b04:	4630      	mov	r0, r6
 8008b06:	f000 f924 	bl	8008d52 <__malloc_unlock>
 8008b0a:	e7e4      	b.n	8008ad6 <_malloc_r+0x1e>
 8008b0c:	680b      	ldr	r3, [r1, #0]
 8008b0e:	1b5b      	subs	r3, r3, r5
 8008b10:	d418      	bmi.n	8008b44 <_malloc_r+0x8c>
 8008b12:	2b0b      	cmp	r3, #11
 8008b14:	d90f      	bls.n	8008b36 <_malloc_r+0x7e>
 8008b16:	600b      	str	r3, [r1, #0]
 8008b18:	50cd      	str	r5, [r1, r3]
 8008b1a:	18cc      	adds	r4, r1, r3
 8008b1c:	4630      	mov	r0, r6
 8008b1e:	f000 f918 	bl	8008d52 <__malloc_unlock>
 8008b22:	f104 000b 	add.w	r0, r4, #11
 8008b26:	1d23      	adds	r3, r4, #4
 8008b28:	f020 0007 	bic.w	r0, r0, #7
 8008b2c:	1ac3      	subs	r3, r0, r3
 8008b2e:	d0d3      	beq.n	8008ad8 <_malloc_r+0x20>
 8008b30:	425a      	negs	r2, r3
 8008b32:	50e2      	str	r2, [r4, r3]
 8008b34:	e7d0      	b.n	8008ad8 <_malloc_r+0x20>
 8008b36:	428c      	cmp	r4, r1
 8008b38:	684b      	ldr	r3, [r1, #4]
 8008b3a:	bf16      	itet	ne
 8008b3c:	6063      	strne	r3, [r4, #4]
 8008b3e:	6013      	streq	r3, [r2, #0]
 8008b40:	460c      	movne	r4, r1
 8008b42:	e7eb      	b.n	8008b1c <_malloc_r+0x64>
 8008b44:	460c      	mov	r4, r1
 8008b46:	6849      	ldr	r1, [r1, #4]
 8008b48:	e7cc      	b.n	8008ae4 <_malloc_r+0x2c>
 8008b4a:	1cc4      	adds	r4, r0, #3
 8008b4c:	f024 0403 	bic.w	r4, r4, #3
 8008b50:	42a0      	cmp	r0, r4
 8008b52:	d005      	beq.n	8008b60 <_malloc_r+0xa8>
 8008b54:	1a21      	subs	r1, r4, r0
 8008b56:	4630      	mov	r0, r6
 8008b58:	f000 f820 	bl	8008b9c <_sbrk_r>
 8008b5c:	3001      	adds	r0, #1
 8008b5e:	d0cf      	beq.n	8008b00 <_malloc_r+0x48>
 8008b60:	6025      	str	r5, [r4, #0]
 8008b62:	e7db      	b.n	8008b1c <_malloc_r+0x64>
 8008b64:	200000b8 	.word	0x200000b8
 8008b68:	200000bc 	.word	0x200000bc

08008b6c <iprintf>:
 8008b6c:	b40f      	push	{r0, r1, r2, r3}
 8008b6e:	4b0a      	ldr	r3, [pc, #40]	; (8008b98 <iprintf+0x2c>)
 8008b70:	b513      	push	{r0, r1, r4, lr}
 8008b72:	681c      	ldr	r4, [r3, #0]
 8008b74:	b124      	cbz	r4, 8008b80 <iprintf+0x14>
 8008b76:	69a3      	ldr	r3, [r4, #24]
 8008b78:	b913      	cbnz	r3, 8008b80 <iprintf+0x14>
 8008b7a:	4620      	mov	r0, r4
 8008b7c:	f000 f85e 	bl	8008c3c <__sinit>
 8008b80:	ab05      	add	r3, sp, #20
 8008b82:	9a04      	ldr	r2, [sp, #16]
 8008b84:	68a1      	ldr	r1, [r4, #8]
 8008b86:	9301      	str	r3, [sp, #4]
 8008b88:	4620      	mov	r0, r4
 8008b8a:	f000 f90d 	bl	8008da8 <_vfiprintf_r>
 8008b8e:	b002      	add	sp, #8
 8008b90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b94:	b004      	add	sp, #16
 8008b96:	4770      	bx	lr
 8008b98:	2000002c 	.word	0x2000002c

08008b9c <_sbrk_r>:
 8008b9c:	b538      	push	{r3, r4, r5, lr}
 8008b9e:	4c06      	ldr	r4, [pc, #24]	; (8008bb8 <_sbrk_r+0x1c>)
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	4605      	mov	r5, r0
 8008ba4:	4608      	mov	r0, r1
 8008ba6:	6023      	str	r3, [r4, #0]
 8008ba8:	f7f8 f954 	bl	8000e54 <_sbrk>
 8008bac:	1c43      	adds	r3, r0, #1
 8008bae:	d102      	bne.n	8008bb6 <_sbrk_r+0x1a>
 8008bb0:	6823      	ldr	r3, [r4, #0]
 8008bb2:	b103      	cbz	r3, 8008bb6 <_sbrk_r+0x1a>
 8008bb4:	602b      	str	r3, [r5, #0]
 8008bb6:	bd38      	pop	{r3, r4, r5, pc}
 8008bb8:	20000898 	.word	0x20000898

08008bbc <std>:
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	b510      	push	{r4, lr}
 8008bc0:	4604      	mov	r4, r0
 8008bc2:	e9c0 3300 	strd	r3, r3, [r0]
 8008bc6:	6083      	str	r3, [r0, #8]
 8008bc8:	8181      	strh	r1, [r0, #12]
 8008bca:	6643      	str	r3, [r0, #100]	; 0x64
 8008bcc:	81c2      	strh	r2, [r0, #14]
 8008bce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008bd2:	6183      	str	r3, [r0, #24]
 8008bd4:	4619      	mov	r1, r3
 8008bd6:	2208      	movs	r2, #8
 8008bd8:	305c      	adds	r0, #92	; 0x5c
 8008bda:	f7ff ff17 	bl	8008a0c <memset>
 8008bde:	4b05      	ldr	r3, [pc, #20]	; (8008bf4 <std+0x38>)
 8008be0:	6263      	str	r3, [r4, #36]	; 0x24
 8008be2:	4b05      	ldr	r3, [pc, #20]	; (8008bf8 <std+0x3c>)
 8008be4:	62a3      	str	r3, [r4, #40]	; 0x28
 8008be6:	4b05      	ldr	r3, [pc, #20]	; (8008bfc <std+0x40>)
 8008be8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008bea:	4b05      	ldr	r3, [pc, #20]	; (8008c00 <std+0x44>)
 8008bec:	6224      	str	r4, [r4, #32]
 8008bee:	6323      	str	r3, [r4, #48]	; 0x30
 8008bf0:	bd10      	pop	{r4, pc}
 8008bf2:	bf00      	nop
 8008bf4:	080092e5 	.word	0x080092e5
 8008bf8:	08009307 	.word	0x08009307
 8008bfc:	0800933f 	.word	0x0800933f
 8008c00:	08009363 	.word	0x08009363

08008c04 <_cleanup_r>:
 8008c04:	4901      	ldr	r1, [pc, #4]	; (8008c0c <_cleanup_r+0x8>)
 8008c06:	f000 b885 	b.w	8008d14 <_fwalk_reent>
 8008c0a:	bf00      	nop
 8008c0c:	0800963d 	.word	0x0800963d

08008c10 <__sfmoreglue>:
 8008c10:	b570      	push	{r4, r5, r6, lr}
 8008c12:	1e4a      	subs	r2, r1, #1
 8008c14:	2568      	movs	r5, #104	; 0x68
 8008c16:	4355      	muls	r5, r2
 8008c18:	460e      	mov	r6, r1
 8008c1a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008c1e:	f7ff ff4b 	bl	8008ab8 <_malloc_r>
 8008c22:	4604      	mov	r4, r0
 8008c24:	b140      	cbz	r0, 8008c38 <__sfmoreglue+0x28>
 8008c26:	2100      	movs	r1, #0
 8008c28:	e9c0 1600 	strd	r1, r6, [r0]
 8008c2c:	300c      	adds	r0, #12
 8008c2e:	60a0      	str	r0, [r4, #8]
 8008c30:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008c34:	f7ff feea 	bl	8008a0c <memset>
 8008c38:	4620      	mov	r0, r4
 8008c3a:	bd70      	pop	{r4, r5, r6, pc}

08008c3c <__sinit>:
 8008c3c:	6983      	ldr	r3, [r0, #24]
 8008c3e:	b510      	push	{r4, lr}
 8008c40:	4604      	mov	r4, r0
 8008c42:	bb33      	cbnz	r3, 8008c92 <__sinit+0x56>
 8008c44:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8008c48:	6503      	str	r3, [r0, #80]	; 0x50
 8008c4a:	4b12      	ldr	r3, [pc, #72]	; (8008c94 <__sinit+0x58>)
 8008c4c:	4a12      	ldr	r2, [pc, #72]	; (8008c98 <__sinit+0x5c>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	6282      	str	r2, [r0, #40]	; 0x28
 8008c52:	4298      	cmp	r0, r3
 8008c54:	bf04      	itt	eq
 8008c56:	2301      	moveq	r3, #1
 8008c58:	6183      	streq	r3, [r0, #24]
 8008c5a:	f000 f81f 	bl	8008c9c <__sfp>
 8008c5e:	6060      	str	r0, [r4, #4]
 8008c60:	4620      	mov	r0, r4
 8008c62:	f000 f81b 	bl	8008c9c <__sfp>
 8008c66:	60a0      	str	r0, [r4, #8]
 8008c68:	4620      	mov	r0, r4
 8008c6a:	f000 f817 	bl	8008c9c <__sfp>
 8008c6e:	2200      	movs	r2, #0
 8008c70:	60e0      	str	r0, [r4, #12]
 8008c72:	2104      	movs	r1, #4
 8008c74:	6860      	ldr	r0, [r4, #4]
 8008c76:	f7ff ffa1 	bl	8008bbc <std>
 8008c7a:	2201      	movs	r2, #1
 8008c7c:	2109      	movs	r1, #9
 8008c7e:	68a0      	ldr	r0, [r4, #8]
 8008c80:	f7ff ff9c 	bl	8008bbc <std>
 8008c84:	2202      	movs	r2, #2
 8008c86:	2112      	movs	r1, #18
 8008c88:	68e0      	ldr	r0, [r4, #12]
 8008c8a:	f7ff ff97 	bl	8008bbc <std>
 8008c8e:	2301      	movs	r3, #1
 8008c90:	61a3      	str	r3, [r4, #24]
 8008c92:	bd10      	pop	{r4, pc}
 8008c94:	08009824 	.word	0x08009824
 8008c98:	08008c05 	.word	0x08008c05

08008c9c <__sfp>:
 8008c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c9e:	4b1b      	ldr	r3, [pc, #108]	; (8008d0c <__sfp+0x70>)
 8008ca0:	681e      	ldr	r6, [r3, #0]
 8008ca2:	69b3      	ldr	r3, [r6, #24]
 8008ca4:	4607      	mov	r7, r0
 8008ca6:	b913      	cbnz	r3, 8008cae <__sfp+0x12>
 8008ca8:	4630      	mov	r0, r6
 8008caa:	f7ff ffc7 	bl	8008c3c <__sinit>
 8008cae:	3648      	adds	r6, #72	; 0x48
 8008cb0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008cb4:	3b01      	subs	r3, #1
 8008cb6:	d503      	bpl.n	8008cc0 <__sfp+0x24>
 8008cb8:	6833      	ldr	r3, [r6, #0]
 8008cba:	b133      	cbz	r3, 8008cca <__sfp+0x2e>
 8008cbc:	6836      	ldr	r6, [r6, #0]
 8008cbe:	e7f7      	b.n	8008cb0 <__sfp+0x14>
 8008cc0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008cc4:	b16d      	cbz	r5, 8008ce2 <__sfp+0x46>
 8008cc6:	3468      	adds	r4, #104	; 0x68
 8008cc8:	e7f4      	b.n	8008cb4 <__sfp+0x18>
 8008cca:	2104      	movs	r1, #4
 8008ccc:	4638      	mov	r0, r7
 8008cce:	f7ff ff9f 	bl	8008c10 <__sfmoreglue>
 8008cd2:	6030      	str	r0, [r6, #0]
 8008cd4:	2800      	cmp	r0, #0
 8008cd6:	d1f1      	bne.n	8008cbc <__sfp+0x20>
 8008cd8:	230c      	movs	r3, #12
 8008cda:	603b      	str	r3, [r7, #0]
 8008cdc:	4604      	mov	r4, r0
 8008cde:	4620      	mov	r0, r4
 8008ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ce2:	4b0b      	ldr	r3, [pc, #44]	; (8008d10 <__sfp+0x74>)
 8008ce4:	6665      	str	r5, [r4, #100]	; 0x64
 8008ce6:	e9c4 5500 	strd	r5, r5, [r4]
 8008cea:	60a5      	str	r5, [r4, #8]
 8008cec:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8008cf0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8008cf4:	2208      	movs	r2, #8
 8008cf6:	4629      	mov	r1, r5
 8008cf8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008cfc:	f7ff fe86 	bl	8008a0c <memset>
 8008d00:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008d04:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008d08:	e7e9      	b.n	8008cde <__sfp+0x42>
 8008d0a:	bf00      	nop
 8008d0c:	08009824 	.word	0x08009824
 8008d10:	ffff0001 	.word	0xffff0001

08008d14 <_fwalk_reent>:
 8008d14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d18:	4680      	mov	r8, r0
 8008d1a:	4689      	mov	r9, r1
 8008d1c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008d20:	2600      	movs	r6, #0
 8008d22:	b914      	cbnz	r4, 8008d2a <_fwalk_reent+0x16>
 8008d24:	4630      	mov	r0, r6
 8008d26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d2a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8008d2e:	3f01      	subs	r7, #1
 8008d30:	d501      	bpl.n	8008d36 <_fwalk_reent+0x22>
 8008d32:	6824      	ldr	r4, [r4, #0]
 8008d34:	e7f5      	b.n	8008d22 <_fwalk_reent+0xe>
 8008d36:	89ab      	ldrh	r3, [r5, #12]
 8008d38:	2b01      	cmp	r3, #1
 8008d3a:	d907      	bls.n	8008d4c <_fwalk_reent+0x38>
 8008d3c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008d40:	3301      	adds	r3, #1
 8008d42:	d003      	beq.n	8008d4c <_fwalk_reent+0x38>
 8008d44:	4629      	mov	r1, r5
 8008d46:	4640      	mov	r0, r8
 8008d48:	47c8      	blx	r9
 8008d4a:	4306      	orrs	r6, r0
 8008d4c:	3568      	adds	r5, #104	; 0x68
 8008d4e:	e7ee      	b.n	8008d2e <_fwalk_reent+0x1a>

08008d50 <__malloc_lock>:
 8008d50:	4770      	bx	lr

08008d52 <__malloc_unlock>:
 8008d52:	4770      	bx	lr

08008d54 <__sfputc_r>:
 8008d54:	6893      	ldr	r3, [r2, #8]
 8008d56:	3b01      	subs	r3, #1
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	b410      	push	{r4}
 8008d5c:	6093      	str	r3, [r2, #8]
 8008d5e:	da08      	bge.n	8008d72 <__sfputc_r+0x1e>
 8008d60:	6994      	ldr	r4, [r2, #24]
 8008d62:	42a3      	cmp	r3, r4
 8008d64:	db01      	blt.n	8008d6a <__sfputc_r+0x16>
 8008d66:	290a      	cmp	r1, #10
 8008d68:	d103      	bne.n	8008d72 <__sfputc_r+0x1e>
 8008d6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d6e:	f000 bafd 	b.w	800936c <__swbuf_r>
 8008d72:	6813      	ldr	r3, [r2, #0]
 8008d74:	1c58      	adds	r0, r3, #1
 8008d76:	6010      	str	r0, [r2, #0]
 8008d78:	7019      	strb	r1, [r3, #0]
 8008d7a:	4608      	mov	r0, r1
 8008d7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d80:	4770      	bx	lr

08008d82 <__sfputs_r>:
 8008d82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d84:	4606      	mov	r6, r0
 8008d86:	460f      	mov	r7, r1
 8008d88:	4614      	mov	r4, r2
 8008d8a:	18d5      	adds	r5, r2, r3
 8008d8c:	42ac      	cmp	r4, r5
 8008d8e:	d101      	bne.n	8008d94 <__sfputs_r+0x12>
 8008d90:	2000      	movs	r0, #0
 8008d92:	e007      	b.n	8008da4 <__sfputs_r+0x22>
 8008d94:	463a      	mov	r2, r7
 8008d96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d9a:	4630      	mov	r0, r6
 8008d9c:	f7ff ffda 	bl	8008d54 <__sfputc_r>
 8008da0:	1c43      	adds	r3, r0, #1
 8008da2:	d1f3      	bne.n	8008d8c <__sfputs_r+0xa>
 8008da4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008da8 <_vfiprintf_r>:
 8008da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dac:	460c      	mov	r4, r1
 8008dae:	b09d      	sub	sp, #116	; 0x74
 8008db0:	4617      	mov	r7, r2
 8008db2:	461d      	mov	r5, r3
 8008db4:	4606      	mov	r6, r0
 8008db6:	b118      	cbz	r0, 8008dc0 <_vfiprintf_r+0x18>
 8008db8:	6983      	ldr	r3, [r0, #24]
 8008dba:	b90b      	cbnz	r3, 8008dc0 <_vfiprintf_r+0x18>
 8008dbc:	f7ff ff3e 	bl	8008c3c <__sinit>
 8008dc0:	4b7c      	ldr	r3, [pc, #496]	; (8008fb4 <_vfiprintf_r+0x20c>)
 8008dc2:	429c      	cmp	r4, r3
 8008dc4:	d158      	bne.n	8008e78 <_vfiprintf_r+0xd0>
 8008dc6:	6874      	ldr	r4, [r6, #4]
 8008dc8:	89a3      	ldrh	r3, [r4, #12]
 8008dca:	0718      	lsls	r0, r3, #28
 8008dcc:	d55e      	bpl.n	8008e8c <_vfiprintf_r+0xe4>
 8008dce:	6923      	ldr	r3, [r4, #16]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d05b      	beq.n	8008e8c <_vfiprintf_r+0xe4>
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	9309      	str	r3, [sp, #36]	; 0x24
 8008dd8:	2320      	movs	r3, #32
 8008dda:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008dde:	2330      	movs	r3, #48	; 0x30
 8008de0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008de4:	9503      	str	r5, [sp, #12]
 8008de6:	f04f 0b01 	mov.w	fp, #1
 8008dea:	46b8      	mov	r8, r7
 8008dec:	4645      	mov	r5, r8
 8008dee:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008df2:	b10b      	cbz	r3, 8008df8 <_vfiprintf_r+0x50>
 8008df4:	2b25      	cmp	r3, #37	; 0x25
 8008df6:	d154      	bne.n	8008ea2 <_vfiprintf_r+0xfa>
 8008df8:	ebb8 0a07 	subs.w	sl, r8, r7
 8008dfc:	d00b      	beq.n	8008e16 <_vfiprintf_r+0x6e>
 8008dfe:	4653      	mov	r3, sl
 8008e00:	463a      	mov	r2, r7
 8008e02:	4621      	mov	r1, r4
 8008e04:	4630      	mov	r0, r6
 8008e06:	f7ff ffbc 	bl	8008d82 <__sfputs_r>
 8008e0a:	3001      	adds	r0, #1
 8008e0c:	f000 80c2 	beq.w	8008f94 <_vfiprintf_r+0x1ec>
 8008e10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e12:	4453      	add	r3, sl
 8008e14:	9309      	str	r3, [sp, #36]	; 0x24
 8008e16:	f898 3000 	ldrb.w	r3, [r8]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	f000 80ba 	beq.w	8008f94 <_vfiprintf_r+0x1ec>
 8008e20:	2300      	movs	r3, #0
 8008e22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008e26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e2a:	9304      	str	r3, [sp, #16]
 8008e2c:	9307      	str	r3, [sp, #28]
 8008e2e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008e32:	931a      	str	r3, [sp, #104]	; 0x68
 8008e34:	46a8      	mov	r8, r5
 8008e36:	2205      	movs	r2, #5
 8008e38:	f818 1b01 	ldrb.w	r1, [r8], #1
 8008e3c:	485e      	ldr	r0, [pc, #376]	; (8008fb8 <_vfiprintf_r+0x210>)
 8008e3e:	f7f7 f9c7 	bl	80001d0 <memchr>
 8008e42:	9b04      	ldr	r3, [sp, #16]
 8008e44:	bb78      	cbnz	r0, 8008ea6 <_vfiprintf_r+0xfe>
 8008e46:	06d9      	lsls	r1, r3, #27
 8008e48:	bf44      	itt	mi
 8008e4a:	2220      	movmi	r2, #32
 8008e4c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008e50:	071a      	lsls	r2, r3, #28
 8008e52:	bf44      	itt	mi
 8008e54:	222b      	movmi	r2, #43	; 0x2b
 8008e56:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008e5a:	782a      	ldrb	r2, [r5, #0]
 8008e5c:	2a2a      	cmp	r2, #42	; 0x2a
 8008e5e:	d02a      	beq.n	8008eb6 <_vfiprintf_r+0x10e>
 8008e60:	9a07      	ldr	r2, [sp, #28]
 8008e62:	46a8      	mov	r8, r5
 8008e64:	2000      	movs	r0, #0
 8008e66:	250a      	movs	r5, #10
 8008e68:	4641      	mov	r1, r8
 8008e6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e6e:	3b30      	subs	r3, #48	; 0x30
 8008e70:	2b09      	cmp	r3, #9
 8008e72:	d969      	bls.n	8008f48 <_vfiprintf_r+0x1a0>
 8008e74:	b360      	cbz	r0, 8008ed0 <_vfiprintf_r+0x128>
 8008e76:	e024      	b.n	8008ec2 <_vfiprintf_r+0x11a>
 8008e78:	4b50      	ldr	r3, [pc, #320]	; (8008fbc <_vfiprintf_r+0x214>)
 8008e7a:	429c      	cmp	r4, r3
 8008e7c:	d101      	bne.n	8008e82 <_vfiprintf_r+0xda>
 8008e7e:	68b4      	ldr	r4, [r6, #8]
 8008e80:	e7a2      	b.n	8008dc8 <_vfiprintf_r+0x20>
 8008e82:	4b4f      	ldr	r3, [pc, #316]	; (8008fc0 <_vfiprintf_r+0x218>)
 8008e84:	429c      	cmp	r4, r3
 8008e86:	bf08      	it	eq
 8008e88:	68f4      	ldreq	r4, [r6, #12]
 8008e8a:	e79d      	b.n	8008dc8 <_vfiprintf_r+0x20>
 8008e8c:	4621      	mov	r1, r4
 8008e8e:	4630      	mov	r0, r6
 8008e90:	f000 fad0 	bl	8009434 <__swsetup_r>
 8008e94:	2800      	cmp	r0, #0
 8008e96:	d09d      	beq.n	8008dd4 <_vfiprintf_r+0x2c>
 8008e98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e9c:	b01d      	add	sp, #116	; 0x74
 8008e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ea2:	46a8      	mov	r8, r5
 8008ea4:	e7a2      	b.n	8008dec <_vfiprintf_r+0x44>
 8008ea6:	4a44      	ldr	r2, [pc, #272]	; (8008fb8 <_vfiprintf_r+0x210>)
 8008ea8:	1a80      	subs	r0, r0, r2
 8008eaa:	fa0b f000 	lsl.w	r0, fp, r0
 8008eae:	4318      	orrs	r0, r3
 8008eb0:	9004      	str	r0, [sp, #16]
 8008eb2:	4645      	mov	r5, r8
 8008eb4:	e7be      	b.n	8008e34 <_vfiprintf_r+0x8c>
 8008eb6:	9a03      	ldr	r2, [sp, #12]
 8008eb8:	1d11      	adds	r1, r2, #4
 8008eba:	6812      	ldr	r2, [r2, #0]
 8008ebc:	9103      	str	r1, [sp, #12]
 8008ebe:	2a00      	cmp	r2, #0
 8008ec0:	db01      	blt.n	8008ec6 <_vfiprintf_r+0x11e>
 8008ec2:	9207      	str	r2, [sp, #28]
 8008ec4:	e004      	b.n	8008ed0 <_vfiprintf_r+0x128>
 8008ec6:	4252      	negs	r2, r2
 8008ec8:	f043 0302 	orr.w	r3, r3, #2
 8008ecc:	9207      	str	r2, [sp, #28]
 8008ece:	9304      	str	r3, [sp, #16]
 8008ed0:	f898 3000 	ldrb.w	r3, [r8]
 8008ed4:	2b2e      	cmp	r3, #46	; 0x2e
 8008ed6:	d10e      	bne.n	8008ef6 <_vfiprintf_r+0x14e>
 8008ed8:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008edc:	2b2a      	cmp	r3, #42	; 0x2a
 8008ede:	d138      	bne.n	8008f52 <_vfiprintf_r+0x1aa>
 8008ee0:	9b03      	ldr	r3, [sp, #12]
 8008ee2:	1d1a      	adds	r2, r3, #4
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	9203      	str	r2, [sp, #12]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	bfb8      	it	lt
 8008eec:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008ef0:	f108 0802 	add.w	r8, r8, #2
 8008ef4:	9305      	str	r3, [sp, #20]
 8008ef6:	4d33      	ldr	r5, [pc, #204]	; (8008fc4 <_vfiprintf_r+0x21c>)
 8008ef8:	f898 1000 	ldrb.w	r1, [r8]
 8008efc:	2203      	movs	r2, #3
 8008efe:	4628      	mov	r0, r5
 8008f00:	f7f7 f966 	bl	80001d0 <memchr>
 8008f04:	b140      	cbz	r0, 8008f18 <_vfiprintf_r+0x170>
 8008f06:	2340      	movs	r3, #64	; 0x40
 8008f08:	1b40      	subs	r0, r0, r5
 8008f0a:	fa03 f000 	lsl.w	r0, r3, r0
 8008f0e:	9b04      	ldr	r3, [sp, #16]
 8008f10:	4303      	orrs	r3, r0
 8008f12:	f108 0801 	add.w	r8, r8, #1
 8008f16:	9304      	str	r3, [sp, #16]
 8008f18:	f898 1000 	ldrb.w	r1, [r8]
 8008f1c:	482a      	ldr	r0, [pc, #168]	; (8008fc8 <_vfiprintf_r+0x220>)
 8008f1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008f22:	2206      	movs	r2, #6
 8008f24:	f108 0701 	add.w	r7, r8, #1
 8008f28:	f7f7 f952 	bl	80001d0 <memchr>
 8008f2c:	2800      	cmp	r0, #0
 8008f2e:	d037      	beq.n	8008fa0 <_vfiprintf_r+0x1f8>
 8008f30:	4b26      	ldr	r3, [pc, #152]	; (8008fcc <_vfiprintf_r+0x224>)
 8008f32:	bb1b      	cbnz	r3, 8008f7c <_vfiprintf_r+0x1d4>
 8008f34:	9b03      	ldr	r3, [sp, #12]
 8008f36:	3307      	adds	r3, #7
 8008f38:	f023 0307 	bic.w	r3, r3, #7
 8008f3c:	3308      	adds	r3, #8
 8008f3e:	9303      	str	r3, [sp, #12]
 8008f40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f42:	444b      	add	r3, r9
 8008f44:	9309      	str	r3, [sp, #36]	; 0x24
 8008f46:	e750      	b.n	8008dea <_vfiprintf_r+0x42>
 8008f48:	fb05 3202 	mla	r2, r5, r2, r3
 8008f4c:	2001      	movs	r0, #1
 8008f4e:	4688      	mov	r8, r1
 8008f50:	e78a      	b.n	8008e68 <_vfiprintf_r+0xc0>
 8008f52:	2300      	movs	r3, #0
 8008f54:	f108 0801 	add.w	r8, r8, #1
 8008f58:	9305      	str	r3, [sp, #20]
 8008f5a:	4619      	mov	r1, r3
 8008f5c:	250a      	movs	r5, #10
 8008f5e:	4640      	mov	r0, r8
 8008f60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f64:	3a30      	subs	r2, #48	; 0x30
 8008f66:	2a09      	cmp	r2, #9
 8008f68:	d903      	bls.n	8008f72 <_vfiprintf_r+0x1ca>
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d0c3      	beq.n	8008ef6 <_vfiprintf_r+0x14e>
 8008f6e:	9105      	str	r1, [sp, #20]
 8008f70:	e7c1      	b.n	8008ef6 <_vfiprintf_r+0x14e>
 8008f72:	fb05 2101 	mla	r1, r5, r1, r2
 8008f76:	2301      	movs	r3, #1
 8008f78:	4680      	mov	r8, r0
 8008f7a:	e7f0      	b.n	8008f5e <_vfiprintf_r+0x1b6>
 8008f7c:	ab03      	add	r3, sp, #12
 8008f7e:	9300      	str	r3, [sp, #0]
 8008f80:	4622      	mov	r2, r4
 8008f82:	4b13      	ldr	r3, [pc, #76]	; (8008fd0 <_vfiprintf_r+0x228>)
 8008f84:	a904      	add	r1, sp, #16
 8008f86:	4630      	mov	r0, r6
 8008f88:	f3af 8000 	nop.w
 8008f8c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8008f90:	4681      	mov	r9, r0
 8008f92:	d1d5      	bne.n	8008f40 <_vfiprintf_r+0x198>
 8008f94:	89a3      	ldrh	r3, [r4, #12]
 8008f96:	065b      	lsls	r3, r3, #25
 8008f98:	f53f af7e 	bmi.w	8008e98 <_vfiprintf_r+0xf0>
 8008f9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f9e:	e77d      	b.n	8008e9c <_vfiprintf_r+0xf4>
 8008fa0:	ab03      	add	r3, sp, #12
 8008fa2:	9300      	str	r3, [sp, #0]
 8008fa4:	4622      	mov	r2, r4
 8008fa6:	4b0a      	ldr	r3, [pc, #40]	; (8008fd0 <_vfiprintf_r+0x228>)
 8008fa8:	a904      	add	r1, sp, #16
 8008faa:	4630      	mov	r0, r6
 8008fac:	f000 f888 	bl	80090c0 <_printf_i>
 8008fb0:	e7ec      	b.n	8008f8c <_vfiprintf_r+0x1e4>
 8008fb2:	bf00      	nop
 8008fb4:	08009848 	.word	0x08009848
 8008fb8:	08009888 	.word	0x08009888
 8008fbc:	08009868 	.word	0x08009868
 8008fc0:	08009828 	.word	0x08009828
 8008fc4:	0800988e 	.word	0x0800988e
 8008fc8:	08009892 	.word	0x08009892
 8008fcc:	00000000 	.word	0x00000000
 8008fd0:	08008d83 	.word	0x08008d83

08008fd4 <_printf_common>:
 8008fd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fd8:	4691      	mov	r9, r2
 8008fda:	461f      	mov	r7, r3
 8008fdc:	688a      	ldr	r2, [r1, #8]
 8008fde:	690b      	ldr	r3, [r1, #16]
 8008fe0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008fe4:	4293      	cmp	r3, r2
 8008fe6:	bfb8      	it	lt
 8008fe8:	4613      	movlt	r3, r2
 8008fea:	f8c9 3000 	str.w	r3, [r9]
 8008fee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008ff2:	4606      	mov	r6, r0
 8008ff4:	460c      	mov	r4, r1
 8008ff6:	b112      	cbz	r2, 8008ffe <_printf_common+0x2a>
 8008ff8:	3301      	adds	r3, #1
 8008ffa:	f8c9 3000 	str.w	r3, [r9]
 8008ffe:	6823      	ldr	r3, [r4, #0]
 8009000:	0699      	lsls	r1, r3, #26
 8009002:	bf42      	ittt	mi
 8009004:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009008:	3302      	addmi	r3, #2
 800900a:	f8c9 3000 	strmi.w	r3, [r9]
 800900e:	6825      	ldr	r5, [r4, #0]
 8009010:	f015 0506 	ands.w	r5, r5, #6
 8009014:	d107      	bne.n	8009026 <_printf_common+0x52>
 8009016:	f104 0a19 	add.w	sl, r4, #25
 800901a:	68e3      	ldr	r3, [r4, #12]
 800901c:	f8d9 2000 	ldr.w	r2, [r9]
 8009020:	1a9b      	subs	r3, r3, r2
 8009022:	42ab      	cmp	r3, r5
 8009024:	dc28      	bgt.n	8009078 <_printf_common+0xa4>
 8009026:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800902a:	6822      	ldr	r2, [r4, #0]
 800902c:	3300      	adds	r3, #0
 800902e:	bf18      	it	ne
 8009030:	2301      	movne	r3, #1
 8009032:	0692      	lsls	r2, r2, #26
 8009034:	d42d      	bmi.n	8009092 <_printf_common+0xbe>
 8009036:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800903a:	4639      	mov	r1, r7
 800903c:	4630      	mov	r0, r6
 800903e:	47c0      	blx	r8
 8009040:	3001      	adds	r0, #1
 8009042:	d020      	beq.n	8009086 <_printf_common+0xb2>
 8009044:	6823      	ldr	r3, [r4, #0]
 8009046:	68e5      	ldr	r5, [r4, #12]
 8009048:	f8d9 2000 	ldr.w	r2, [r9]
 800904c:	f003 0306 	and.w	r3, r3, #6
 8009050:	2b04      	cmp	r3, #4
 8009052:	bf08      	it	eq
 8009054:	1aad      	subeq	r5, r5, r2
 8009056:	68a3      	ldr	r3, [r4, #8]
 8009058:	6922      	ldr	r2, [r4, #16]
 800905a:	bf0c      	ite	eq
 800905c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009060:	2500      	movne	r5, #0
 8009062:	4293      	cmp	r3, r2
 8009064:	bfc4      	itt	gt
 8009066:	1a9b      	subgt	r3, r3, r2
 8009068:	18ed      	addgt	r5, r5, r3
 800906a:	f04f 0900 	mov.w	r9, #0
 800906e:	341a      	adds	r4, #26
 8009070:	454d      	cmp	r5, r9
 8009072:	d11a      	bne.n	80090aa <_printf_common+0xd6>
 8009074:	2000      	movs	r0, #0
 8009076:	e008      	b.n	800908a <_printf_common+0xb6>
 8009078:	2301      	movs	r3, #1
 800907a:	4652      	mov	r2, sl
 800907c:	4639      	mov	r1, r7
 800907e:	4630      	mov	r0, r6
 8009080:	47c0      	blx	r8
 8009082:	3001      	adds	r0, #1
 8009084:	d103      	bne.n	800908e <_printf_common+0xba>
 8009086:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800908a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800908e:	3501      	adds	r5, #1
 8009090:	e7c3      	b.n	800901a <_printf_common+0x46>
 8009092:	18e1      	adds	r1, r4, r3
 8009094:	1c5a      	adds	r2, r3, #1
 8009096:	2030      	movs	r0, #48	; 0x30
 8009098:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800909c:	4422      	add	r2, r4
 800909e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80090a2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80090a6:	3302      	adds	r3, #2
 80090a8:	e7c5      	b.n	8009036 <_printf_common+0x62>
 80090aa:	2301      	movs	r3, #1
 80090ac:	4622      	mov	r2, r4
 80090ae:	4639      	mov	r1, r7
 80090b0:	4630      	mov	r0, r6
 80090b2:	47c0      	blx	r8
 80090b4:	3001      	adds	r0, #1
 80090b6:	d0e6      	beq.n	8009086 <_printf_common+0xb2>
 80090b8:	f109 0901 	add.w	r9, r9, #1
 80090bc:	e7d8      	b.n	8009070 <_printf_common+0x9c>
	...

080090c0 <_printf_i>:
 80090c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80090c4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80090c8:	460c      	mov	r4, r1
 80090ca:	7e09      	ldrb	r1, [r1, #24]
 80090cc:	b085      	sub	sp, #20
 80090ce:	296e      	cmp	r1, #110	; 0x6e
 80090d0:	4617      	mov	r7, r2
 80090d2:	4606      	mov	r6, r0
 80090d4:	4698      	mov	r8, r3
 80090d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80090d8:	f000 80b3 	beq.w	8009242 <_printf_i+0x182>
 80090dc:	d822      	bhi.n	8009124 <_printf_i+0x64>
 80090de:	2963      	cmp	r1, #99	; 0x63
 80090e0:	d036      	beq.n	8009150 <_printf_i+0x90>
 80090e2:	d80a      	bhi.n	80090fa <_printf_i+0x3a>
 80090e4:	2900      	cmp	r1, #0
 80090e6:	f000 80b9 	beq.w	800925c <_printf_i+0x19c>
 80090ea:	2958      	cmp	r1, #88	; 0x58
 80090ec:	f000 8083 	beq.w	80091f6 <_printf_i+0x136>
 80090f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80090f4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80090f8:	e032      	b.n	8009160 <_printf_i+0xa0>
 80090fa:	2964      	cmp	r1, #100	; 0x64
 80090fc:	d001      	beq.n	8009102 <_printf_i+0x42>
 80090fe:	2969      	cmp	r1, #105	; 0x69
 8009100:	d1f6      	bne.n	80090f0 <_printf_i+0x30>
 8009102:	6820      	ldr	r0, [r4, #0]
 8009104:	6813      	ldr	r3, [r2, #0]
 8009106:	0605      	lsls	r5, r0, #24
 8009108:	f103 0104 	add.w	r1, r3, #4
 800910c:	d52a      	bpl.n	8009164 <_printf_i+0xa4>
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	6011      	str	r1, [r2, #0]
 8009112:	2b00      	cmp	r3, #0
 8009114:	da03      	bge.n	800911e <_printf_i+0x5e>
 8009116:	222d      	movs	r2, #45	; 0x2d
 8009118:	425b      	negs	r3, r3
 800911a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800911e:	486f      	ldr	r0, [pc, #444]	; (80092dc <_printf_i+0x21c>)
 8009120:	220a      	movs	r2, #10
 8009122:	e039      	b.n	8009198 <_printf_i+0xd8>
 8009124:	2973      	cmp	r1, #115	; 0x73
 8009126:	f000 809d 	beq.w	8009264 <_printf_i+0x1a4>
 800912a:	d808      	bhi.n	800913e <_printf_i+0x7e>
 800912c:	296f      	cmp	r1, #111	; 0x6f
 800912e:	d020      	beq.n	8009172 <_printf_i+0xb2>
 8009130:	2970      	cmp	r1, #112	; 0x70
 8009132:	d1dd      	bne.n	80090f0 <_printf_i+0x30>
 8009134:	6823      	ldr	r3, [r4, #0]
 8009136:	f043 0320 	orr.w	r3, r3, #32
 800913a:	6023      	str	r3, [r4, #0]
 800913c:	e003      	b.n	8009146 <_printf_i+0x86>
 800913e:	2975      	cmp	r1, #117	; 0x75
 8009140:	d017      	beq.n	8009172 <_printf_i+0xb2>
 8009142:	2978      	cmp	r1, #120	; 0x78
 8009144:	d1d4      	bne.n	80090f0 <_printf_i+0x30>
 8009146:	2378      	movs	r3, #120	; 0x78
 8009148:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800914c:	4864      	ldr	r0, [pc, #400]	; (80092e0 <_printf_i+0x220>)
 800914e:	e055      	b.n	80091fc <_printf_i+0x13c>
 8009150:	6813      	ldr	r3, [r2, #0]
 8009152:	1d19      	adds	r1, r3, #4
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	6011      	str	r1, [r2, #0]
 8009158:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800915c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009160:	2301      	movs	r3, #1
 8009162:	e08c      	b.n	800927e <_printf_i+0x1be>
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	6011      	str	r1, [r2, #0]
 8009168:	f010 0f40 	tst.w	r0, #64	; 0x40
 800916c:	bf18      	it	ne
 800916e:	b21b      	sxthne	r3, r3
 8009170:	e7cf      	b.n	8009112 <_printf_i+0x52>
 8009172:	6813      	ldr	r3, [r2, #0]
 8009174:	6825      	ldr	r5, [r4, #0]
 8009176:	1d18      	adds	r0, r3, #4
 8009178:	6010      	str	r0, [r2, #0]
 800917a:	0628      	lsls	r0, r5, #24
 800917c:	d501      	bpl.n	8009182 <_printf_i+0xc2>
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	e002      	b.n	8009188 <_printf_i+0xc8>
 8009182:	0668      	lsls	r0, r5, #25
 8009184:	d5fb      	bpl.n	800917e <_printf_i+0xbe>
 8009186:	881b      	ldrh	r3, [r3, #0]
 8009188:	4854      	ldr	r0, [pc, #336]	; (80092dc <_printf_i+0x21c>)
 800918a:	296f      	cmp	r1, #111	; 0x6f
 800918c:	bf14      	ite	ne
 800918e:	220a      	movne	r2, #10
 8009190:	2208      	moveq	r2, #8
 8009192:	2100      	movs	r1, #0
 8009194:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009198:	6865      	ldr	r5, [r4, #4]
 800919a:	60a5      	str	r5, [r4, #8]
 800919c:	2d00      	cmp	r5, #0
 800919e:	f2c0 8095 	blt.w	80092cc <_printf_i+0x20c>
 80091a2:	6821      	ldr	r1, [r4, #0]
 80091a4:	f021 0104 	bic.w	r1, r1, #4
 80091a8:	6021      	str	r1, [r4, #0]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d13d      	bne.n	800922a <_printf_i+0x16a>
 80091ae:	2d00      	cmp	r5, #0
 80091b0:	f040 808e 	bne.w	80092d0 <_printf_i+0x210>
 80091b4:	4665      	mov	r5, ip
 80091b6:	2a08      	cmp	r2, #8
 80091b8:	d10b      	bne.n	80091d2 <_printf_i+0x112>
 80091ba:	6823      	ldr	r3, [r4, #0]
 80091bc:	07db      	lsls	r3, r3, #31
 80091be:	d508      	bpl.n	80091d2 <_printf_i+0x112>
 80091c0:	6923      	ldr	r3, [r4, #16]
 80091c2:	6862      	ldr	r2, [r4, #4]
 80091c4:	429a      	cmp	r2, r3
 80091c6:	bfde      	ittt	le
 80091c8:	2330      	movle	r3, #48	; 0x30
 80091ca:	f805 3c01 	strble.w	r3, [r5, #-1]
 80091ce:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80091d2:	ebac 0305 	sub.w	r3, ip, r5
 80091d6:	6123      	str	r3, [r4, #16]
 80091d8:	f8cd 8000 	str.w	r8, [sp]
 80091dc:	463b      	mov	r3, r7
 80091de:	aa03      	add	r2, sp, #12
 80091e0:	4621      	mov	r1, r4
 80091e2:	4630      	mov	r0, r6
 80091e4:	f7ff fef6 	bl	8008fd4 <_printf_common>
 80091e8:	3001      	adds	r0, #1
 80091ea:	d14d      	bne.n	8009288 <_printf_i+0x1c8>
 80091ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80091f0:	b005      	add	sp, #20
 80091f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80091f6:	4839      	ldr	r0, [pc, #228]	; (80092dc <_printf_i+0x21c>)
 80091f8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80091fc:	6813      	ldr	r3, [r2, #0]
 80091fe:	6821      	ldr	r1, [r4, #0]
 8009200:	1d1d      	adds	r5, r3, #4
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	6015      	str	r5, [r2, #0]
 8009206:	060a      	lsls	r2, r1, #24
 8009208:	d50b      	bpl.n	8009222 <_printf_i+0x162>
 800920a:	07ca      	lsls	r2, r1, #31
 800920c:	bf44      	itt	mi
 800920e:	f041 0120 	orrmi.w	r1, r1, #32
 8009212:	6021      	strmi	r1, [r4, #0]
 8009214:	b91b      	cbnz	r3, 800921e <_printf_i+0x15e>
 8009216:	6822      	ldr	r2, [r4, #0]
 8009218:	f022 0220 	bic.w	r2, r2, #32
 800921c:	6022      	str	r2, [r4, #0]
 800921e:	2210      	movs	r2, #16
 8009220:	e7b7      	b.n	8009192 <_printf_i+0xd2>
 8009222:	064d      	lsls	r5, r1, #25
 8009224:	bf48      	it	mi
 8009226:	b29b      	uxthmi	r3, r3
 8009228:	e7ef      	b.n	800920a <_printf_i+0x14a>
 800922a:	4665      	mov	r5, ip
 800922c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009230:	fb02 3311 	mls	r3, r2, r1, r3
 8009234:	5cc3      	ldrb	r3, [r0, r3]
 8009236:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800923a:	460b      	mov	r3, r1
 800923c:	2900      	cmp	r1, #0
 800923e:	d1f5      	bne.n	800922c <_printf_i+0x16c>
 8009240:	e7b9      	b.n	80091b6 <_printf_i+0xf6>
 8009242:	6813      	ldr	r3, [r2, #0]
 8009244:	6825      	ldr	r5, [r4, #0]
 8009246:	6961      	ldr	r1, [r4, #20]
 8009248:	1d18      	adds	r0, r3, #4
 800924a:	6010      	str	r0, [r2, #0]
 800924c:	0628      	lsls	r0, r5, #24
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	d501      	bpl.n	8009256 <_printf_i+0x196>
 8009252:	6019      	str	r1, [r3, #0]
 8009254:	e002      	b.n	800925c <_printf_i+0x19c>
 8009256:	066a      	lsls	r2, r5, #25
 8009258:	d5fb      	bpl.n	8009252 <_printf_i+0x192>
 800925a:	8019      	strh	r1, [r3, #0]
 800925c:	2300      	movs	r3, #0
 800925e:	6123      	str	r3, [r4, #16]
 8009260:	4665      	mov	r5, ip
 8009262:	e7b9      	b.n	80091d8 <_printf_i+0x118>
 8009264:	6813      	ldr	r3, [r2, #0]
 8009266:	1d19      	adds	r1, r3, #4
 8009268:	6011      	str	r1, [r2, #0]
 800926a:	681d      	ldr	r5, [r3, #0]
 800926c:	6862      	ldr	r2, [r4, #4]
 800926e:	2100      	movs	r1, #0
 8009270:	4628      	mov	r0, r5
 8009272:	f7f6 ffad 	bl	80001d0 <memchr>
 8009276:	b108      	cbz	r0, 800927c <_printf_i+0x1bc>
 8009278:	1b40      	subs	r0, r0, r5
 800927a:	6060      	str	r0, [r4, #4]
 800927c:	6863      	ldr	r3, [r4, #4]
 800927e:	6123      	str	r3, [r4, #16]
 8009280:	2300      	movs	r3, #0
 8009282:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009286:	e7a7      	b.n	80091d8 <_printf_i+0x118>
 8009288:	6923      	ldr	r3, [r4, #16]
 800928a:	462a      	mov	r2, r5
 800928c:	4639      	mov	r1, r7
 800928e:	4630      	mov	r0, r6
 8009290:	47c0      	blx	r8
 8009292:	3001      	adds	r0, #1
 8009294:	d0aa      	beq.n	80091ec <_printf_i+0x12c>
 8009296:	6823      	ldr	r3, [r4, #0]
 8009298:	079b      	lsls	r3, r3, #30
 800929a:	d413      	bmi.n	80092c4 <_printf_i+0x204>
 800929c:	68e0      	ldr	r0, [r4, #12]
 800929e:	9b03      	ldr	r3, [sp, #12]
 80092a0:	4298      	cmp	r0, r3
 80092a2:	bfb8      	it	lt
 80092a4:	4618      	movlt	r0, r3
 80092a6:	e7a3      	b.n	80091f0 <_printf_i+0x130>
 80092a8:	2301      	movs	r3, #1
 80092aa:	464a      	mov	r2, r9
 80092ac:	4639      	mov	r1, r7
 80092ae:	4630      	mov	r0, r6
 80092b0:	47c0      	blx	r8
 80092b2:	3001      	adds	r0, #1
 80092b4:	d09a      	beq.n	80091ec <_printf_i+0x12c>
 80092b6:	3501      	adds	r5, #1
 80092b8:	68e3      	ldr	r3, [r4, #12]
 80092ba:	9a03      	ldr	r2, [sp, #12]
 80092bc:	1a9b      	subs	r3, r3, r2
 80092be:	42ab      	cmp	r3, r5
 80092c0:	dcf2      	bgt.n	80092a8 <_printf_i+0x1e8>
 80092c2:	e7eb      	b.n	800929c <_printf_i+0x1dc>
 80092c4:	2500      	movs	r5, #0
 80092c6:	f104 0919 	add.w	r9, r4, #25
 80092ca:	e7f5      	b.n	80092b8 <_printf_i+0x1f8>
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d1ac      	bne.n	800922a <_printf_i+0x16a>
 80092d0:	7803      	ldrb	r3, [r0, #0]
 80092d2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80092d6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80092da:	e76c      	b.n	80091b6 <_printf_i+0xf6>
 80092dc:	08009899 	.word	0x08009899
 80092e0:	080098aa 	.word	0x080098aa

080092e4 <__sread>:
 80092e4:	b510      	push	{r4, lr}
 80092e6:	460c      	mov	r4, r1
 80092e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092ec:	f000 fa46 	bl	800977c <_read_r>
 80092f0:	2800      	cmp	r0, #0
 80092f2:	bfab      	itete	ge
 80092f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80092f6:	89a3      	ldrhlt	r3, [r4, #12]
 80092f8:	181b      	addge	r3, r3, r0
 80092fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80092fe:	bfac      	ite	ge
 8009300:	6563      	strge	r3, [r4, #84]	; 0x54
 8009302:	81a3      	strhlt	r3, [r4, #12]
 8009304:	bd10      	pop	{r4, pc}

08009306 <__swrite>:
 8009306:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800930a:	461f      	mov	r7, r3
 800930c:	898b      	ldrh	r3, [r1, #12]
 800930e:	05db      	lsls	r3, r3, #23
 8009310:	4605      	mov	r5, r0
 8009312:	460c      	mov	r4, r1
 8009314:	4616      	mov	r6, r2
 8009316:	d505      	bpl.n	8009324 <__swrite+0x1e>
 8009318:	2302      	movs	r3, #2
 800931a:	2200      	movs	r2, #0
 800931c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009320:	f000 f9b6 	bl	8009690 <_lseek_r>
 8009324:	89a3      	ldrh	r3, [r4, #12]
 8009326:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800932a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800932e:	81a3      	strh	r3, [r4, #12]
 8009330:	4632      	mov	r2, r6
 8009332:	463b      	mov	r3, r7
 8009334:	4628      	mov	r0, r5
 8009336:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800933a:	f000 b869 	b.w	8009410 <_write_r>

0800933e <__sseek>:
 800933e:	b510      	push	{r4, lr}
 8009340:	460c      	mov	r4, r1
 8009342:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009346:	f000 f9a3 	bl	8009690 <_lseek_r>
 800934a:	1c43      	adds	r3, r0, #1
 800934c:	89a3      	ldrh	r3, [r4, #12]
 800934e:	bf15      	itete	ne
 8009350:	6560      	strne	r0, [r4, #84]	; 0x54
 8009352:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009356:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800935a:	81a3      	strheq	r3, [r4, #12]
 800935c:	bf18      	it	ne
 800935e:	81a3      	strhne	r3, [r4, #12]
 8009360:	bd10      	pop	{r4, pc}

08009362 <__sclose>:
 8009362:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009366:	f000 b8d3 	b.w	8009510 <_close_r>
	...

0800936c <__swbuf_r>:
 800936c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800936e:	460e      	mov	r6, r1
 8009370:	4614      	mov	r4, r2
 8009372:	4605      	mov	r5, r0
 8009374:	b118      	cbz	r0, 800937e <__swbuf_r+0x12>
 8009376:	6983      	ldr	r3, [r0, #24]
 8009378:	b90b      	cbnz	r3, 800937e <__swbuf_r+0x12>
 800937a:	f7ff fc5f 	bl	8008c3c <__sinit>
 800937e:	4b21      	ldr	r3, [pc, #132]	; (8009404 <__swbuf_r+0x98>)
 8009380:	429c      	cmp	r4, r3
 8009382:	d12a      	bne.n	80093da <__swbuf_r+0x6e>
 8009384:	686c      	ldr	r4, [r5, #4]
 8009386:	69a3      	ldr	r3, [r4, #24]
 8009388:	60a3      	str	r3, [r4, #8]
 800938a:	89a3      	ldrh	r3, [r4, #12]
 800938c:	071a      	lsls	r2, r3, #28
 800938e:	d52e      	bpl.n	80093ee <__swbuf_r+0x82>
 8009390:	6923      	ldr	r3, [r4, #16]
 8009392:	b363      	cbz	r3, 80093ee <__swbuf_r+0x82>
 8009394:	6923      	ldr	r3, [r4, #16]
 8009396:	6820      	ldr	r0, [r4, #0]
 8009398:	1ac0      	subs	r0, r0, r3
 800939a:	6963      	ldr	r3, [r4, #20]
 800939c:	b2f6      	uxtb	r6, r6
 800939e:	4283      	cmp	r3, r0
 80093a0:	4637      	mov	r7, r6
 80093a2:	dc04      	bgt.n	80093ae <__swbuf_r+0x42>
 80093a4:	4621      	mov	r1, r4
 80093a6:	4628      	mov	r0, r5
 80093a8:	f000 f948 	bl	800963c <_fflush_r>
 80093ac:	bb28      	cbnz	r0, 80093fa <__swbuf_r+0x8e>
 80093ae:	68a3      	ldr	r3, [r4, #8]
 80093b0:	3b01      	subs	r3, #1
 80093b2:	60a3      	str	r3, [r4, #8]
 80093b4:	6823      	ldr	r3, [r4, #0]
 80093b6:	1c5a      	adds	r2, r3, #1
 80093b8:	6022      	str	r2, [r4, #0]
 80093ba:	701e      	strb	r6, [r3, #0]
 80093bc:	6963      	ldr	r3, [r4, #20]
 80093be:	3001      	adds	r0, #1
 80093c0:	4283      	cmp	r3, r0
 80093c2:	d004      	beq.n	80093ce <__swbuf_r+0x62>
 80093c4:	89a3      	ldrh	r3, [r4, #12]
 80093c6:	07db      	lsls	r3, r3, #31
 80093c8:	d519      	bpl.n	80093fe <__swbuf_r+0x92>
 80093ca:	2e0a      	cmp	r6, #10
 80093cc:	d117      	bne.n	80093fe <__swbuf_r+0x92>
 80093ce:	4621      	mov	r1, r4
 80093d0:	4628      	mov	r0, r5
 80093d2:	f000 f933 	bl	800963c <_fflush_r>
 80093d6:	b190      	cbz	r0, 80093fe <__swbuf_r+0x92>
 80093d8:	e00f      	b.n	80093fa <__swbuf_r+0x8e>
 80093da:	4b0b      	ldr	r3, [pc, #44]	; (8009408 <__swbuf_r+0x9c>)
 80093dc:	429c      	cmp	r4, r3
 80093de:	d101      	bne.n	80093e4 <__swbuf_r+0x78>
 80093e0:	68ac      	ldr	r4, [r5, #8]
 80093e2:	e7d0      	b.n	8009386 <__swbuf_r+0x1a>
 80093e4:	4b09      	ldr	r3, [pc, #36]	; (800940c <__swbuf_r+0xa0>)
 80093e6:	429c      	cmp	r4, r3
 80093e8:	bf08      	it	eq
 80093ea:	68ec      	ldreq	r4, [r5, #12]
 80093ec:	e7cb      	b.n	8009386 <__swbuf_r+0x1a>
 80093ee:	4621      	mov	r1, r4
 80093f0:	4628      	mov	r0, r5
 80093f2:	f000 f81f 	bl	8009434 <__swsetup_r>
 80093f6:	2800      	cmp	r0, #0
 80093f8:	d0cc      	beq.n	8009394 <__swbuf_r+0x28>
 80093fa:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80093fe:	4638      	mov	r0, r7
 8009400:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009402:	bf00      	nop
 8009404:	08009848 	.word	0x08009848
 8009408:	08009868 	.word	0x08009868
 800940c:	08009828 	.word	0x08009828

08009410 <_write_r>:
 8009410:	b538      	push	{r3, r4, r5, lr}
 8009412:	4c07      	ldr	r4, [pc, #28]	; (8009430 <_write_r+0x20>)
 8009414:	4605      	mov	r5, r0
 8009416:	4608      	mov	r0, r1
 8009418:	4611      	mov	r1, r2
 800941a:	2200      	movs	r2, #0
 800941c:	6022      	str	r2, [r4, #0]
 800941e:	461a      	mov	r2, r3
 8009420:	f7f7 fac6 	bl	80009b0 <_write>
 8009424:	1c43      	adds	r3, r0, #1
 8009426:	d102      	bne.n	800942e <_write_r+0x1e>
 8009428:	6823      	ldr	r3, [r4, #0]
 800942a:	b103      	cbz	r3, 800942e <_write_r+0x1e>
 800942c:	602b      	str	r3, [r5, #0]
 800942e:	bd38      	pop	{r3, r4, r5, pc}
 8009430:	20000898 	.word	0x20000898

08009434 <__swsetup_r>:
 8009434:	4b32      	ldr	r3, [pc, #200]	; (8009500 <__swsetup_r+0xcc>)
 8009436:	b570      	push	{r4, r5, r6, lr}
 8009438:	681d      	ldr	r5, [r3, #0]
 800943a:	4606      	mov	r6, r0
 800943c:	460c      	mov	r4, r1
 800943e:	b125      	cbz	r5, 800944a <__swsetup_r+0x16>
 8009440:	69ab      	ldr	r3, [r5, #24]
 8009442:	b913      	cbnz	r3, 800944a <__swsetup_r+0x16>
 8009444:	4628      	mov	r0, r5
 8009446:	f7ff fbf9 	bl	8008c3c <__sinit>
 800944a:	4b2e      	ldr	r3, [pc, #184]	; (8009504 <__swsetup_r+0xd0>)
 800944c:	429c      	cmp	r4, r3
 800944e:	d10f      	bne.n	8009470 <__swsetup_r+0x3c>
 8009450:	686c      	ldr	r4, [r5, #4]
 8009452:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009456:	b29a      	uxth	r2, r3
 8009458:	0715      	lsls	r5, r2, #28
 800945a:	d42c      	bmi.n	80094b6 <__swsetup_r+0x82>
 800945c:	06d0      	lsls	r0, r2, #27
 800945e:	d411      	bmi.n	8009484 <__swsetup_r+0x50>
 8009460:	2209      	movs	r2, #9
 8009462:	6032      	str	r2, [r6, #0]
 8009464:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009468:	81a3      	strh	r3, [r4, #12]
 800946a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800946e:	e03e      	b.n	80094ee <__swsetup_r+0xba>
 8009470:	4b25      	ldr	r3, [pc, #148]	; (8009508 <__swsetup_r+0xd4>)
 8009472:	429c      	cmp	r4, r3
 8009474:	d101      	bne.n	800947a <__swsetup_r+0x46>
 8009476:	68ac      	ldr	r4, [r5, #8]
 8009478:	e7eb      	b.n	8009452 <__swsetup_r+0x1e>
 800947a:	4b24      	ldr	r3, [pc, #144]	; (800950c <__swsetup_r+0xd8>)
 800947c:	429c      	cmp	r4, r3
 800947e:	bf08      	it	eq
 8009480:	68ec      	ldreq	r4, [r5, #12]
 8009482:	e7e6      	b.n	8009452 <__swsetup_r+0x1e>
 8009484:	0751      	lsls	r1, r2, #29
 8009486:	d512      	bpl.n	80094ae <__swsetup_r+0x7a>
 8009488:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800948a:	b141      	cbz	r1, 800949e <__swsetup_r+0x6a>
 800948c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009490:	4299      	cmp	r1, r3
 8009492:	d002      	beq.n	800949a <__swsetup_r+0x66>
 8009494:	4630      	mov	r0, r6
 8009496:	f7ff fac1 	bl	8008a1c <_free_r>
 800949a:	2300      	movs	r3, #0
 800949c:	6363      	str	r3, [r4, #52]	; 0x34
 800949e:	89a3      	ldrh	r3, [r4, #12]
 80094a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80094a4:	81a3      	strh	r3, [r4, #12]
 80094a6:	2300      	movs	r3, #0
 80094a8:	6063      	str	r3, [r4, #4]
 80094aa:	6923      	ldr	r3, [r4, #16]
 80094ac:	6023      	str	r3, [r4, #0]
 80094ae:	89a3      	ldrh	r3, [r4, #12]
 80094b0:	f043 0308 	orr.w	r3, r3, #8
 80094b4:	81a3      	strh	r3, [r4, #12]
 80094b6:	6923      	ldr	r3, [r4, #16]
 80094b8:	b94b      	cbnz	r3, 80094ce <__swsetup_r+0x9a>
 80094ba:	89a3      	ldrh	r3, [r4, #12]
 80094bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80094c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80094c4:	d003      	beq.n	80094ce <__swsetup_r+0x9a>
 80094c6:	4621      	mov	r1, r4
 80094c8:	4630      	mov	r0, r6
 80094ca:	f000 f917 	bl	80096fc <__smakebuf_r>
 80094ce:	89a2      	ldrh	r2, [r4, #12]
 80094d0:	f012 0301 	ands.w	r3, r2, #1
 80094d4:	d00c      	beq.n	80094f0 <__swsetup_r+0xbc>
 80094d6:	2300      	movs	r3, #0
 80094d8:	60a3      	str	r3, [r4, #8]
 80094da:	6963      	ldr	r3, [r4, #20]
 80094dc:	425b      	negs	r3, r3
 80094de:	61a3      	str	r3, [r4, #24]
 80094e0:	6923      	ldr	r3, [r4, #16]
 80094e2:	b953      	cbnz	r3, 80094fa <__swsetup_r+0xc6>
 80094e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094e8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80094ec:	d1ba      	bne.n	8009464 <__swsetup_r+0x30>
 80094ee:	bd70      	pop	{r4, r5, r6, pc}
 80094f0:	0792      	lsls	r2, r2, #30
 80094f2:	bf58      	it	pl
 80094f4:	6963      	ldrpl	r3, [r4, #20]
 80094f6:	60a3      	str	r3, [r4, #8]
 80094f8:	e7f2      	b.n	80094e0 <__swsetup_r+0xac>
 80094fa:	2000      	movs	r0, #0
 80094fc:	e7f7      	b.n	80094ee <__swsetup_r+0xba>
 80094fe:	bf00      	nop
 8009500:	2000002c 	.word	0x2000002c
 8009504:	08009848 	.word	0x08009848
 8009508:	08009868 	.word	0x08009868
 800950c:	08009828 	.word	0x08009828

08009510 <_close_r>:
 8009510:	b538      	push	{r3, r4, r5, lr}
 8009512:	4c06      	ldr	r4, [pc, #24]	; (800952c <_close_r+0x1c>)
 8009514:	2300      	movs	r3, #0
 8009516:	4605      	mov	r5, r0
 8009518:	4608      	mov	r0, r1
 800951a:	6023      	str	r3, [r4, #0]
 800951c:	f7f7 fc65 	bl	8000dea <_close>
 8009520:	1c43      	adds	r3, r0, #1
 8009522:	d102      	bne.n	800952a <_close_r+0x1a>
 8009524:	6823      	ldr	r3, [r4, #0]
 8009526:	b103      	cbz	r3, 800952a <_close_r+0x1a>
 8009528:	602b      	str	r3, [r5, #0]
 800952a:	bd38      	pop	{r3, r4, r5, pc}
 800952c:	20000898 	.word	0x20000898

08009530 <__sflush_r>:
 8009530:	898a      	ldrh	r2, [r1, #12]
 8009532:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009536:	4605      	mov	r5, r0
 8009538:	0710      	lsls	r0, r2, #28
 800953a:	460c      	mov	r4, r1
 800953c:	d458      	bmi.n	80095f0 <__sflush_r+0xc0>
 800953e:	684b      	ldr	r3, [r1, #4]
 8009540:	2b00      	cmp	r3, #0
 8009542:	dc05      	bgt.n	8009550 <__sflush_r+0x20>
 8009544:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009546:	2b00      	cmp	r3, #0
 8009548:	dc02      	bgt.n	8009550 <__sflush_r+0x20>
 800954a:	2000      	movs	r0, #0
 800954c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009550:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009552:	2e00      	cmp	r6, #0
 8009554:	d0f9      	beq.n	800954a <__sflush_r+0x1a>
 8009556:	2300      	movs	r3, #0
 8009558:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800955c:	682f      	ldr	r7, [r5, #0]
 800955e:	6a21      	ldr	r1, [r4, #32]
 8009560:	602b      	str	r3, [r5, #0]
 8009562:	d032      	beq.n	80095ca <__sflush_r+0x9a>
 8009564:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009566:	89a3      	ldrh	r3, [r4, #12]
 8009568:	075a      	lsls	r2, r3, #29
 800956a:	d505      	bpl.n	8009578 <__sflush_r+0x48>
 800956c:	6863      	ldr	r3, [r4, #4]
 800956e:	1ac0      	subs	r0, r0, r3
 8009570:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009572:	b10b      	cbz	r3, 8009578 <__sflush_r+0x48>
 8009574:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009576:	1ac0      	subs	r0, r0, r3
 8009578:	2300      	movs	r3, #0
 800957a:	4602      	mov	r2, r0
 800957c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800957e:	6a21      	ldr	r1, [r4, #32]
 8009580:	4628      	mov	r0, r5
 8009582:	47b0      	blx	r6
 8009584:	1c43      	adds	r3, r0, #1
 8009586:	89a3      	ldrh	r3, [r4, #12]
 8009588:	d106      	bne.n	8009598 <__sflush_r+0x68>
 800958a:	6829      	ldr	r1, [r5, #0]
 800958c:	291d      	cmp	r1, #29
 800958e:	d848      	bhi.n	8009622 <__sflush_r+0xf2>
 8009590:	4a29      	ldr	r2, [pc, #164]	; (8009638 <__sflush_r+0x108>)
 8009592:	40ca      	lsrs	r2, r1
 8009594:	07d6      	lsls	r6, r2, #31
 8009596:	d544      	bpl.n	8009622 <__sflush_r+0xf2>
 8009598:	2200      	movs	r2, #0
 800959a:	6062      	str	r2, [r4, #4]
 800959c:	04d9      	lsls	r1, r3, #19
 800959e:	6922      	ldr	r2, [r4, #16]
 80095a0:	6022      	str	r2, [r4, #0]
 80095a2:	d504      	bpl.n	80095ae <__sflush_r+0x7e>
 80095a4:	1c42      	adds	r2, r0, #1
 80095a6:	d101      	bne.n	80095ac <__sflush_r+0x7c>
 80095a8:	682b      	ldr	r3, [r5, #0]
 80095aa:	b903      	cbnz	r3, 80095ae <__sflush_r+0x7e>
 80095ac:	6560      	str	r0, [r4, #84]	; 0x54
 80095ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80095b0:	602f      	str	r7, [r5, #0]
 80095b2:	2900      	cmp	r1, #0
 80095b4:	d0c9      	beq.n	800954a <__sflush_r+0x1a>
 80095b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80095ba:	4299      	cmp	r1, r3
 80095bc:	d002      	beq.n	80095c4 <__sflush_r+0x94>
 80095be:	4628      	mov	r0, r5
 80095c0:	f7ff fa2c 	bl	8008a1c <_free_r>
 80095c4:	2000      	movs	r0, #0
 80095c6:	6360      	str	r0, [r4, #52]	; 0x34
 80095c8:	e7c0      	b.n	800954c <__sflush_r+0x1c>
 80095ca:	2301      	movs	r3, #1
 80095cc:	4628      	mov	r0, r5
 80095ce:	47b0      	blx	r6
 80095d0:	1c41      	adds	r1, r0, #1
 80095d2:	d1c8      	bne.n	8009566 <__sflush_r+0x36>
 80095d4:	682b      	ldr	r3, [r5, #0]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d0c5      	beq.n	8009566 <__sflush_r+0x36>
 80095da:	2b1d      	cmp	r3, #29
 80095dc:	d001      	beq.n	80095e2 <__sflush_r+0xb2>
 80095de:	2b16      	cmp	r3, #22
 80095e0:	d101      	bne.n	80095e6 <__sflush_r+0xb6>
 80095e2:	602f      	str	r7, [r5, #0]
 80095e4:	e7b1      	b.n	800954a <__sflush_r+0x1a>
 80095e6:	89a3      	ldrh	r3, [r4, #12]
 80095e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095ec:	81a3      	strh	r3, [r4, #12]
 80095ee:	e7ad      	b.n	800954c <__sflush_r+0x1c>
 80095f0:	690f      	ldr	r7, [r1, #16]
 80095f2:	2f00      	cmp	r7, #0
 80095f4:	d0a9      	beq.n	800954a <__sflush_r+0x1a>
 80095f6:	0793      	lsls	r3, r2, #30
 80095f8:	680e      	ldr	r6, [r1, #0]
 80095fa:	bf08      	it	eq
 80095fc:	694b      	ldreq	r3, [r1, #20]
 80095fe:	600f      	str	r7, [r1, #0]
 8009600:	bf18      	it	ne
 8009602:	2300      	movne	r3, #0
 8009604:	eba6 0807 	sub.w	r8, r6, r7
 8009608:	608b      	str	r3, [r1, #8]
 800960a:	f1b8 0f00 	cmp.w	r8, #0
 800960e:	dd9c      	ble.n	800954a <__sflush_r+0x1a>
 8009610:	4643      	mov	r3, r8
 8009612:	463a      	mov	r2, r7
 8009614:	6a21      	ldr	r1, [r4, #32]
 8009616:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009618:	4628      	mov	r0, r5
 800961a:	47b0      	blx	r6
 800961c:	2800      	cmp	r0, #0
 800961e:	dc06      	bgt.n	800962e <__sflush_r+0xfe>
 8009620:	89a3      	ldrh	r3, [r4, #12]
 8009622:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009626:	81a3      	strh	r3, [r4, #12]
 8009628:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800962c:	e78e      	b.n	800954c <__sflush_r+0x1c>
 800962e:	4407      	add	r7, r0
 8009630:	eba8 0800 	sub.w	r8, r8, r0
 8009634:	e7e9      	b.n	800960a <__sflush_r+0xda>
 8009636:	bf00      	nop
 8009638:	20400001 	.word	0x20400001

0800963c <_fflush_r>:
 800963c:	b538      	push	{r3, r4, r5, lr}
 800963e:	690b      	ldr	r3, [r1, #16]
 8009640:	4605      	mov	r5, r0
 8009642:	460c      	mov	r4, r1
 8009644:	b1db      	cbz	r3, 800967e <_fflush_r+0x42>
 8009646:	b118      	cbz	r0, 8009650 <_fflush_r+0x14>
 8009648:	6983      	ldr	r3, [r0, #24]
 800964a:	b90b      	cbnz	r3, 8009650 <_fflush_r+0x14>
 800964c:	f7ff faf6 	bl	8008c3c <__sinit>
 8009650:	4b0c      	ldr	r3, [pc, #48]	; (8009684 <_fflush_r+0x48>)
 8009652:	429c      	cmp	r4, r3
 8009654:	d109      	bne.n	800966a <_fflush_r+0x2e>
 8009656:	686c      	ldr	r4, [r5, #4]
 8009658:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800965c:	b17b      	cbz	r3, 800967e <_fflush_r+0x42>
 800965e:	4621      	mov	r1, r4
 8009660:	4628      	mov	r0, r5
 8009662:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009666:	f7ff bf63 	b.w	8009530 <__sflush_r>
 800966a:	4b07      	ldr	r3, [pc, #28]	; (8009688 <_fflush_r+0x4c>)
 800966c:	429c      	cmp	r4, r3
 800966e:	d101      	bne.n	8009674 <_fflush_r+0x38>
 8009670:	68ac      	ldr	r4, [r5, #8]
 8009672:	e7f1      	b.n	8009658 <_fflush_r+0x1c>
 8009674:	4b05      	ldr	r3, [pc, #20]	; (800968c <_fflush_r+0x50>)
 8009676:	429c      	cmp	r4, r3
 8009678:	bf08      	it	eq
 800967a:	68ec      	ldreq	r4, [r5, #12]
 800967c:	e7ec      	b.n	8009658 <_fflush_r+0x1c>
 800967e:	2000      	movs	r0, #0
 8009680:	bd38      	pop	{r3, r4, r5, pc}
 8009682:	bf00      	nop
 8009684:	08009848 	.word	0x08009848
 8009688:	08009868 	.word	0x08009868
 800968c:	08009828 	.word	0x08009828

08009690 <_lseek_r>:
 8009690:	b538      	push	{r3, r4, r5, lr}
 8009692:	4c07      	ldr	r4, [pc, #28]	; (80096b0 <_lseek_r+0x20>)
 8009694:	4605      	mov	r5, r0
 8009696:	4608      	mov	r0, r1
 8009698:	4611      	mov	r1, r2
 800969a:	2200      	movs	r2, #0
 800969c:	6022      	str	r2, [r4, #0]
 800969e:	461a      	mov	r2, r3
 80096a0:	f7f7 fbca 	bl	8000e38 <_lseek>
 80096a4:	1c43      	adds	r3, r0, #1
 80096a6:	d102      	bne.n	80096ae <_lseek_r+0x1e>
 80096a8:	6823      	ldr	r3, [r4, #0]
 80096aa:	b103      	cbz	r3, 80096ae <_lseek_r+0x1e>
 80096ac:	602b      	str	r3, [r5, #0]
 80096ae:	bd38      	pop	{r3, r4, r5, pc}
 80096b0:	20000898 	.word	0x20000898

080096b4 <__swhatbuf_r>:
 80096b4:	b570      	push	{r4, r5, r6, lr}
 80096b6:	460e      	mov	r6, r1
 80096b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096bc:	2900      	cmp	r1, #0
 80096be:	b096      	sub	sp, #88	; 0x58
 80096c0:	4614      	mov	r4, r2
 80096c2:	461d      	mov	r5, r3
 80096c4:	da07      	bge.n	80096d6 <__swhatbuf_r+0x22>
 80096c6:	2300      	movs	r3, #0
 80096c8:	602b      	str	r3, [r5, #0]
 80096ca:	89b3      	ldrh	r3, [r6, #12]
 80096cc:	061a      	lsls	r2, r3, #24
 80096ce:	d410      	bmi.n	80096f2 <__swhatbuf_r+0x3e>
 80096d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80096d4:	e00e      	b.n	80096f4 <__swhatbuf_r+0x40>
 80096d6:	466a      	mov	r2, sp
 80096d8:	f000 f862 	bl	80097a0 <_fstat_r>
 80096dc:	2800      	cmp	r0, #0
 80096de:	dbf2      	blt.n	80096c6 <__swhatbuf_r+0x12>
 80096e0:	9a01      	ldr	r2, [sp, #4]
 80096e2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80096e6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80096ea:	425a      	negs	r2, r3
 80096ec:	415a      	adcs	r2, r3
 80096ee:	602a      	str	r2, [r5, #0]
 80096f0:	e7ee      	b.n	80096d0 <__swhatbuf_r+0x1c>
 80096f2:	2340      	movs	r3, #64	; 0x40
 80096f4:	2000      	movs	r0, #0
 80096f6:	6023      	str	r3, [r4, #0]
 80096f8:	b016      	add	sp, #88	; 0x58
 80096fa:	bd70      	pop	{r4, r5, r6, pc}

080096fc <__smakebuf_r>:
 80096fc:	898b      	ldrh	r3, [r1, #12]
 80096fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009700:	079d      	lsls	r5, r3, #30
 8009702:	4606      	mov	r6, r0
 8009704:	460c      	mov	r4, r1
 8009706:	d507      	bpl.n	8009718 <__smakebuf_r+0x1c>
 8009708:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800970c:	6023      	str	r3, [r4, #0]
 800970e:	6123      	str	r3, [r4, #16]
 8009710:	2301      	movs	r3, #1
 8009712:	6163      	str	r3, [r4, #20]
 8009714:	b002      	add	sp, #8
 8009716:	bd70      	pop	{r4, r5, r6, pc}
 8009718:	ab01      	add	r3, sp, #4
 800971a:	466a      	mov	r2, sp
 800971c:	f7ff ffca 	bl	80096b4 <__swhatbuf_r>
 8009720:	9900      	ldr	r1, [sp, #0]
 8009722:	4605      	mov	r5, r0
 8009724:	4630      	mov	r0, r6
 8009726:	f7ff f9c7 	bl	8008ab8 <_malloc_r>
 800972a:	b948      	cbnz	r0, 8009740 <__smakebuf_r+0x44>
 800972c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009730:	059a      	lsls	r2, r3, #22
 8009732:	d4ef      	bmi.n	8009714 <__smakebuf_r+0x18>
 8009734:	f023 0303 	bic.w	r3, r3, #3
 8009738:	f043 0302 	orr.w	r3, r3, #2
 800973c:	81a3      	strh	r3, [r4, #12]
 800973e:	e7e3      	b.n	8009708 <__smakebuf_r+0xc>
 8009740:	4b0d      	ldr	r3, [pc, #52]	; (8009778 <__smakebuf_r+0x7c>)
 8009742:	62b3      	str	r3, [r6, #40]	; 0x28
 8009744:	89a3      	ldrh	r3, [r4, #12]
 8009746:	6020      	str	r0, [r4, #0]
 8009748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800974c:	81a3      	strh	r3, [r4, #12]
 800974e:	9b00      	ldr	r3, [sp, #0]
 8009750:	6163      	str	r3, [r4, #20]
 8009752:	9b01      	ldr	r3, [sp, #4]
 8009754:	6120      	str	r0, [r4, #16]
 8009756:	b15b      	cbz	r3, 8009770 <__smakebuf_r+0x74>
 8009758:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800975c:	4630      	mov	r0, r6
 800975e:	f000 f831 	bl	80097c4 <_isatty_r>
 8009762:	b128      	cbz	r0, 8009770 <__smakebuf_r+0x74>
 8009764:	89a3      	ldrh	r3, [r4, #12]
 8009766:	f023 0303 	bic.w	r3, r3, #3
 800976a:	f043 0301 	orr.w	r3, r3, #1
 800976e:	81a3      	strh	r3, [r4, #12]
 8009770:	89a3      	ldrh	r3, [r4, #12]
 8009772:	431d      	orrs	r5, r3
 8009774:	81a5      	strh	r5, [r4, #12]
 8009776:	e7cd      	b.n	8009714 <__smakebuf_r+0x18>
 8009778:	08008c05 	.word	0x08008c05

0800977c <_read_r>:
 800977c:	b538      	push	{r3, r4, r5, lr}
 800977e:	4c07      	ldr	r4, [pc, #28]	; (800979c <_read_r+0x20>)
 8009780:	4605      	mov	r5, r0
 8009782:	4608      	mov	r0, r1
 8009784:	4611      	mov	r1, r2
 8009786:	2200      	movs	r2, #0
 8009788:	6022      	str	r2, [r4, #0]
 800978a:	461a      	mov	r2, r3
 800978c:	f7f7 fb10 	bl	8000db0 <_read>
 8009790:	1c43      	adds	r3, r0, #1
 8009792:	d102      	bne.n	800979a <_read_r+0x1e>
 8009794:	6823      	ldr	r3, [r4, #0]
 8009796:	b103      	cbz	r3, 800979a <_read_r+0x1e>
 8009798:	602b      	str	r3, [r5, #0]
 800979a:	bd38      	pop	{r3, r4, r5, pc}
 800979c:	20000898 	.word	0x20000898

080097a0 <_fstat_r>:
 80097a0:	b538      	push	{r3, r4, r5, lr}
 80097a2:	4c07      	ldr	r4, [pc, #28]	; (80097c0 <_fstat_r+0x20>)
 80097a4:	2300      	movs	r3, #0
 80097a6:	4605      	mov	r5, r0
 80097a8:	4608      	mov	r0, r1
 80097aa:	4611      	mov	r1, r2
 80097ac:	6023      	str	r3, [r4, #0]
 80097ae:	f7f7 fb28 	bl	8000e02 <_fstat>
 80097b2:	1c43      	adds	r3, r0, #1
 80097b4:	d102      	bne.n	80097bc <_fstat_r+0x1c>
 80097b6:	6823      	ldr	r3, [r4, #0]
 80097b8:	b103      	cbz	r3, 80097bc <_fstat_r+0x1c>
 80097ba:	602b      	str	r3, [r5, #0]
 80097bc:	bd38      	pop	{r3, r4, r5, pc}
 80097be:	bf00      	nop
 80097c0:	20000898 	.word	0x20000898

080097c4 <_isatty_r>:
 80097c4:	b538      	push	{r3, r4, r5, lr}
 80097c6:	4c06      	ldr	r4, [pc, #24]	; (80097e0 <_isatty_r+0x1c>)
 80097c8:	2300      	movs	r3, #0
 80097ca:	4605      	mov	r5, r0
 80097cc:	4608      	mov	r0, r1
 80097ce:	6023      	str	r3, [r4, #0]
 80097d0:	f7f7 fb27 	bl	8000e22 <_isatty>
 80097d4:	1c43      	adds	r3, r0, #1
 80097d6:	d102      	bne.n	80097de <_isatty_r+0x1a>
 80097d8:	6823      	ldr	r3, [r4, #0]
 80097da:	b103      	cbz	r3, 80097de <_isatty_r+0x1a>
 80097dc:	602b      	str	r3, [r5, #0]
 80097de:	bd38      	pop	{r3, r4, r5, pc}
 80097e0:	20000898 	.word	0x20000898

080097e4 <_init>:
 80097e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097e6:	bf00      	nop
 80097e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097ea:	bc08      	pop	{r3}
 80097ec:	469e      	mov	lr, r3
 80097ee:	4770      	bx	lr

080097f0 <_fini>:
 80097f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097f2:	bf00      	nop
 80097f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097f6:	bc08      	pop	{r3}
 80097f8:	469e      	mov	lr, r3
 80097fa:	4770      	bx	lr
