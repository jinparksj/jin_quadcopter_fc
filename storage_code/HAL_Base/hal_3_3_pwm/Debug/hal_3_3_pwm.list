
hal_3_3_pwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c3c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08009dc4  08009dc4  00019dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009de0  08009de0  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08009de0  08009de0  00019de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009de8  08009de8  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009de8  08009de8  00019de8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009dec  08009dec  00019dec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08009df0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008d4  20000090  08009e80  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000964  08009e80  00020964  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021c90  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000047ea  00000000  00000000  00041d50  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001970  00000000  00000000  00046540  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001768  00000000  00000000  00047eb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000264c9  00000000  00000000  00049618  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001830f  00000000  00000000  0006fae1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d494f  00000000  00000000  00087df0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015c73f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b84  00000000  00000000  0015c7bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009dac 	.word	0x08009dac

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08009dac 	.word	0x08009dac

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <MX_GPIO_Init>:
        * EXTI
     PC3   ------> I2S2_SD
     PB10   ------> I2S2_CK
*/
void MX_GPIO_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b08c      	sub	sp, #48	; 0x30
 80004cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ce:	f107 031c 	add.w	r3, r7, #28
 80004d2:	2200      	movs	r2, #0
 80004d4:	601a      	str	r2, [r3, #0]
 80004d6:	605a      	str	r2, [r3, #4]
 80004d8:	609a      	str	r2, [r3, #8]
 80004da:	60da      	str	r2, [r3, #12]
 80004dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004de:	2300      	movs	r3, #0
 80004e0:	61bb      	str	r3, [r7, #24]
 80004e2:	4b82      	ldr	r3, [pc, #520]	; (80006ec <MX_GPIO_Init+0x224>)
 80004e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e6:	4a81      	ldr	r2, [pc, #516]	; (80006ec <MX_GPIO_Init+0x224>)
 80004e8:	f043 0310 	orr.w	r3, r3, #16
 80004ec:	6313      	str	r3, [r2, #48]	; 0x30
 80004ee:	4b7f      	ldr	r3, [pc, #508]	; (80006ec <MX_GPIO_Init+0x224>)
 80004f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f2:	f003 0310 	and.w	r3, r3, #16
 80004f6:	61bb      	str	r3, [r7, #24]
 80004f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004fa:	2300      	movs	r3, #0
 80004fc:	617b      	str	r3, [r7, #20]
 80004fe:	4b7b      	ldr	r3, [pc, #492]	; (80006ec <MX_GPIO_Init+0x224>)
 8000500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000502:	4a7a      	ldr	r2, [pc, #488]	; (80006ec <MX_GPIO_Init+0x224>)
 8000504:	f043 0304 	orr.w	r3, r3, #4
 8000508:	6313      	str	r3, [r2, #48]	; 0x30
 800050a:	4b78      	ldr	r3, [pc, #480]	; (80006ec <MX_GPIO_Init+0x224>)
 800050c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050e:	f003 0304 	and.w	r3, r3, #4
 8000512:	617b      	str	r3, [r7, #20]
 8000514:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000516:	2300      	movs	r3, #0
 8000518:	613b      	str	r3, [r7, #16]
 800051a:	4b74      	ldr	r3, [pc, #464]	; (80006ec <MX_GPIO_Init+0x224>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051e:	4a73      	ldr	r2, [pc, #460]	; (80006ec <MX_GPIO_Init+0x224>)
 8000520:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000524:	6313      	str	r3, [r2, #48]	; 0x30
 8000526:	4b71      	ldr	r3, [pc, #452]	; (80006ec <MX_GPIO_Init+0x224>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800052e:	613b      	str	r3, [r7, #16]
 8000530:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000532:	2300      	movs	r3, #0
 8000534:	60fb      	str	r3, [r7, #12]
 8000536:	4b6d      	ldr	r3, [pc, #436]	; (80006ec <MX_GPIO_Init+0x224>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053a:	4a6c      	ldr	r2, [pc, #432]	; (80006ec <MX_GPIO_Init+0x224>)
 800053c:	f043 0301 	orr.w	r3, r3, #1
 8000540:	6313      	str	r3, [r2, #48]	; 0x30
 8000542:	4b6a      	ldr	r3, [pc, #424]	; (80006ec <MX_GPIO_Init+0x224>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000546:	f003 0301 	and.w	r3, r3, #1
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800054e:	2300      	movs	r3, #0
 8000550:	60bb      	str	r3, [r7, #8]
 8000552:	4b66      	ldr	r3, [pc, #408]	; (80006ec <MX_GPIO_Init+0x224>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000556:	4a65      	ldr	r2, [pc, #404]	; (80006ec <MX_GPIO_Init+0x224>)
 8000558:	f043 0302 	orr.w	r3, r3, #2
 800055c:	6313      	str	r3, [r2, #48]	; 0x30
 800055e:	4b63      	ldr	r3, [pc, #396]	; (80006ec <MX_GPIO_Init+0x224>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000562:	f003 0302 	and.w	r3, r3, #2
 8000566:	60bb      	str	r3, [r7, #8]
 8000568:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800056a:	2300      	movs	r3, #0
 800056c:	607b      	str	r3, [r7, #4]
 800056e:	4b5f      	ldr	r3, [pc, #380]	; (80006ec <MX_GPIO_Init+0x224>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000572:	4a5e      	ldr	r2, [pc, #376]	; (80006ec <MX_GPIO_Init+0x224>)
 8000574:	f043 0308 	orr.w	r3, r3, #8
 8000578:	6313      	str	r3, [r2, #48]	; 0x30
 800057a:	4b5c      	ldr	r3, [pc, #368]	; (80006ec <MX_GPIO_Init+0x224>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057e:	f003 0308 	and.w	r3, r3, #8
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|CS_I2C_SPI_Pin|GPIO_PIN_4|GPIO_PIN_5 
 8000586:	2200      	movs	r2, #0
 8000588:	f240 11fd 	movw	r1, #509	; 0x1fd
 800058c:	4858      	ldr	r0, [pc, #352]	; (80006f0 <MX_GPIO_Init+0x228>)
 800058e:	f001 fa6b 	bl	8001a68 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_0, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000592:	2201      	movs	r2, #1
 8000594:	2101      	movs	r1, #1
 8000596:	4857      	ldr	r0, [pc, #348]	; (80006f4 <MX_GPIO_Init+0x22c>)
 8000598:	f001 fa66 	bl	8001a68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_5, GPIO_PIN_RESET);
 800059c:	2200      	movs	r2, #0
 800059e:	2121      	movs	r1, #33	; 0x21
 80005a0:	4855      	ldr	r0, [pc, #340]	; (80006f8 <MX_GPIO_Init+0x230>)
 80005a2:	f001 fa61 	bl	8001a68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15|Audio_RST_Pin, GPIO_PIN_RESET);
 80005a6:	2200      	movs	r2, #0
 80005a8:	f248 0110 	movw	r1, #32784	; 0x8010
 80005ac:	4853      	ldr	r0, [pc, #332]	; (80006fc <MX_GPIO_Init+0x234>)
 80005ae:	f001 fa5b 	bl	8001a68 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PEPin PE4 PE5 
                           PE6 PE7 PE8 PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|CS_I2C_SPI_Pin|GPIO_PIN_4|GPIO_PIN_5 
 80005b2:	f240 13fd 	movw	r3, #509	; 0x1fd
 80005b6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b8:	2301      	movs	r3, #1
 80005ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005bc:	2300      	movs	r3, #0
 80005be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c0:	2300      	movs	r3, #0
 80005c2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005c4:	f107 031c 	add.w	r3, r7, #28
 80005c8:	4619      	mov	r1, r3
 80005ca:	4849      	ldr	r0, [pc, #292]	; (80006f0 <MX_GPIO_Init+0x228>)
 80005cc:	f001 f8b2 	bl	8001734 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80005d0:	2301      	movs	r3, #1
 80005d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d4:	2301      	movs	r3, #1
 80005d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d8:	2300      	movs	r3, #0
 80005da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005dc:	2300      	movs	r3, #0
 80005de:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80005e0:	f107 031c 	add.w	r3, r7, #28
 80005e4:	4619      	mov	r1, r3
 80005e6:	4843      	ldr	r0, [pc, #268]	; (80006f4 <MX_GPIO_Init+0x22c>)
 80005e8:	f001 f8a4 	bl	8001734 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80005ec:	2308      	movs	r3, #8
 80005ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005f0:	2302      	movs	r3, #2
 80005f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f4:	2300      	movs	r3, #0
 80005f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f8:	2300      	movs	r3, #0
 80005fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80005fc:	2305      	movs	r3, #5
 80005fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000600:	f107 031c 	add.w	r3, r7, #28
 8000604:	4619      	mov	r1, r3
 8000606:	483b      	ldr	r0, [pc, #236]	; (80006f4 <MX_GPIO_Init+0x22c>)
 8000608:	f001 f894 	bl	8001734 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800060c:	2301      	movs	r3, #1
 800060e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000610:	4b3b      	ldr	r3, [pc, #236]	; (8000700 <MX_GPIO_Init+0x238>)
 8000612:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000614:	2300      	movs	r3, #0
 8000616:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000618:	f107 031c 	add.w	r3, r7, #28
 800061c:	4619      	mov	r1, r3
 800061e:	4839      	ldr	r0, [pc, #228]	; (8000704 <MX_GPIO_Init+0x23c>)
 8000620:	f001 f888 	bl	8001734 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5;
 8000624:	2321      	movs	r3, #33	; 0x21
 8000626:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000628:	2301      	movs	r3, #1
 800062a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062c:	2300      	movs	r3, #0
 800062e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000630:	2300      	movs	r3, #0
 8000632:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000634:	f107 031c 	add.w	r3, r7, #28
 8000638:	4619      	mov	r1, r3
 800063a:	482f      	ldr	r0, [pc, #188]	; (80006f8 <MX_GPIO_Init+0x230>)
 800063c:	f001 f87a 	bl	8001734 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000640:	2304      	movs	r3, #4
 8000642:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000644:	2300      	movs	r3, #0
 8000646:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000648:	2300      	movs	r3, #0
 800064a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800064c:	f107 031c 	add.w	r3, r7, #28
 8000650:	4619      	mov	r1, r3
 8000652:	4829      	ldr	r0, [pc, #164]	; (80006f8 <MX_GPIO_Init+0x230>)
 8000654:	f001 f86e 	bl	8001734 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000658:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800065c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800065e:	2302      	movs	r3, #2
 8000660:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000662:	2300      	movs	r3, #0
 8000664:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000666:	2300      	movs	r3, #0
 8000668:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800066a:	2305      	movs	r3, #5
 800066c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800066e:	f107 031c 	add.w	r3, r7, #28
 8000672:	4619      	mov	r1, r3
 8000674:	4820      	ldr	r0, [pc, #128]	; (80006f8 <MX_GPIO_Init+0x230>)
 8000676:	f001 f85d 	bl	8001734 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800067a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800067e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000680:	4b21      	ldr	r3, [pc, #132]	; (8000708 <MX_GPIO_Init+0x240>)
 8000682:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000684:	2300      	movs	r3, #0
 8000686:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000688:	f107 031c 	add.w	r3, r7, #28
 800068c:	4619      	mov	r1, r3
 800068e:	481b      	ldr	r0, [pc, #108]	; (80006fc <MX_GPIO_Init+0x234>)
 8000690:	f001 f850 	bl	8001734 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD15 PDPin */
  GPIO_InitStruct.Pin = GPIO_PIN_15|Audio_RST_Pin;
 8000694:	f248 0310 	movw	r3, #32784	; 0x8010
 8000698:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800069a:	2301      	movs	r3, #1
 800069c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069e:	2300      	movs	r3, #0
 80006a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a2:	2300      	movs	r3, #0
 80006a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006a6:	f107 031c 	add.w	r3, r7, #28
 80006aa:	4619      	mov	r1, r3
 80006ac:	4813      	ldr	r0, [pc, #76]	; (80006fc <MX_GPIO_Init+0x234>)
 80006ae:	f001 f841 	bl	8001734 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80006b2:	2320      	movs	r3, #32
 80006b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006b6:	2300      	movs	r3, #0
 80006b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ba:	2300      	movs	r3, #0
 80006bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80006be:	f107 031c 	add.w	r3, r7, #28
 80006c2:	4619      	mov	r1, r3
 80006c4:	480d      	ldr	r0, [pc, #52]	; (80006fc <MX_GPIO_Init+0x234>)
 80006c6:	f001 f835 	bl	8001734 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80006ca:	2302      	movs	r3, #2
 80006cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80006ce:	4b0c      	ldr	r3, [pc, #48]	; (8000700 <MX_GPIO_Init+0x238>)
 80006d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d2:	2300      	movs	r3, #0
 80006d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80006d6:	f107 031c 	add.w	r3, r7, #28
 80006da:	4619      	mov	r1, r3
 80006dc:	4804      	ldr	r0, [pc, #16]	; (80006f0 <MX_GPIO_Init+0x228>)
 80006de:	f001 f829 	bl	8001734 <HAL_GPIO_Init>

}
 80006e2:	bf00      	nop
 80006e4:	3730      	adds	r7, #48	; 0x30
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40023800 	.word	0x40023800
 80006f0:	40021000 	.word	0x40021000
 80006f4:	40020800 	.word	0x40020800
 80006f8:	40020400 	.word	0x40020400
 80006fc:	40020c00 	.word	0x40020c00
 8000700:	10120000 	.word	0x10120000
 8000704:	40020000 	.word	0x40020000
 8000708:	10110000 	.word	0x10110000

0800070c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000710:	4b12      	ldr	r3, [pc, #72]	; (800075c <MX_I2C1_Init+0x50>)
 8000712:	4a13      	ldr	r2, [pc, #76]	; (8000760 <MX_I2C1_Init+0x54>)
 8000714:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000716:	4b11      	ldr	r3, [pc, #68]	; (800075c <MX_I2C1_Init+0x50>)
 8000718:	4a12      	ldr	r2, [pc, #72]	; (8000764 <MX_I2C1_Init+0x58>)
 800071a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800071c:	4b0f      	ldr	r3, [pc, #60]	; (800075c <MX_I2C1_Init+0x50>)
 800071e:	2200      	movs	r2, #0
 8000720:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000722:	4b0e      	ldr	r3, [pc, #56]	; (800075c <MX_I2C1_Init+0x50>)
 8000724:	2200      	movs	r2, #0
 8000726:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000728:	4b0c      	ldr	r3, [pc, #48]	; (800075c <MX_I2C1_Init+0x50>)
 800072a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800072e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000730:	4b0a      	ldr	r3, [pc, #40]	; (800075c <MX_I2C1_Init+0x50>)
 8000732:	2200      	movs	r2, #0
 8000734:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000736:	4b09      	ldr	r3, [pc, #36]	; (800075c <MX_I2C1_Init+0x50>)
 8000738:	2200      	movs	r2, #0
 800073a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800073c:	4b07      	ldr	r3, [pc, #28]	; (800075c <MX_I2C1_Init+0x50>)
 800073e:	2200      	movs	r2, #0
 8000740:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000742:	4b06      	ldr	r3, [pc, #24]	; (800075c <MX_I2C1_Init+0x50>)
 8000744:	2200      	movs	r2, #0
 8000746:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000748:	4804      	ldr	r0, [pc, #16]	; (800075c <MX_I2C1_Init+0x50>)
 800074a:	f002 fecb 	bl	80034e4 <HAL_I2C_Init>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000754:	f000 fa6c 	bl	8000c30 <Error_Handler>
  }

}
 8000758:	bf00      	nop
 800075a:	bd80      	pop	{r7, pc}
 800075c:	200000c0 	.word	0x200000c0
 8000760:	40005400 	.word	0x40005400
 8000764:	000186a0 	.word	0x000186a0

08000768 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b08a      	sub	sp, #40	; 0x28
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000770:	f107 0314 	add.w	r3, r7, #20
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]
 800077a:	609a      	str	r2, [r3, #8]
 800077c:	60da      	str	r2, [r3, #12]
 800077e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a19      	ldr	r2, [pc, #100]	; (80007ec <HAL_I2C_MspInit+0x84>)
 8000786:	4293      	cmp	r3, r2
 8000788:	d12c      	bne.n	80007e4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	613b      	str	r3, [r7, #16]
 800078e:	4b18      	ldr	r3, [pc, #96]	; (80007f0 <HAL_I2C_MspInit+0x88>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a17      	ldr	r2, [pc, #92]	; (80007f0 <HAL_I2C_MspInit+0x88>)
 8000794:	f043 0302 	orr.w	r3, r3, #2
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b15      	ldr	r3, [pc, #84]	; (80007f0 <HAL_I2C_MspInit+0x88>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0302 	and.w	r3, r3, #2
 80007a2:	613b      	str	r3, [r7, #16]
 80007a4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80007a6:	f44f 7310 	mov.w	r3, #576	; 0x240
 80007aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007ac:	2312      	movs	r3, #18
 80007ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007b0:	2301      	movs	r3, #1
 80007b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b4:	2300      	movs	r3, #0
 80007b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007b8:	2304      	movs	r3, #4
 80007ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007bc:	f107 0314 	add.w	r3, r7, #20
 80007c0:	4619      	mov	r1, r3
 80007c2:	480c      	ldr	r0, [pc, #48]	; (80007f4 <HAL_I2C_MspInit+0x8c>)
 80007c4:	f000 ffb6 	bl	8001734 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007c8:	2300      	movs	r3, #0
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	4b08      	ldr	r3, [pc, #32]	; (80007f0 <HAL_I2C_MspInit+0x88>)
 80007ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d0:	4a07      	ldr	r2, [pc, #28]	; (80007f0 <HAL_I2C_MspInit+0x88>)
 80007d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007d6:	6413      	str	r3, [r2, #64]	; 0x40
 80007d8:	4b05      	ldr	r3, [pc, #20]	; (80007f0 <HAL_I2C_MspInit+0x88>)
 80007da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007e0:	60fb      	str	r3, [r7, #12]
 80007e2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80007e4:	bf00      	nop
 80007e6:	3728      	adds	r7, #40	; 0x28
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	40005400 	.word	0x40005400
 80007f0:	40023800 	.word	0x40023800
 80007f4:	40020400 	.word	0x40020400

080007f8 <MX_I2S3_Init>:

I2S_HandleTypeDef hi2s3;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0

  hi2s3.Instance = SPI3;
 80007fc:	4b13      	ldr	r3, [pc, #76]	; (800084c <MX_I2S3_Init+0x54>)
 80007fe:	4a14      	ldr	r2, [pc, #80]	; (8000850 <MX_I2S3_Init+0x58>)
 8000800:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000802:	4b12      	ldr	r3, [pc, #72]	; (800084c <MX_I2S3_Init+0x54>)
 8000804:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000808:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800080a:	4b10      	ldr	r3, [pc, #64]	; (800084c <MX_I2S3_Init+0x54>)
 800080c:	2200      	movs	r2, #0
 800080e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000810:	4b0e      	ldr	r3, [pc, #56]	; (800084c <MX_I2S3_Init+0x54>)
 8000812:	2200      	movs	r2, #0
 8000814:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000816:	4b0d      	ldr	r3, [pc, #52]	; (800084c <MX_I2S3_Init+0x54>)
 8000818:	f44f 7200 	mov.w	r2, #512	; 0x200
 800081c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800081e:	4b0b      	ldr	r3, [pc, #44]	; (800084c <MX_I2S3_Init+0x54>)
 8000820:	4a0c      	ldr	r2, [pc, #48]	; (8000854 <MX_I2S3_Init+0x5c>)
 8000822:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000824:	4b09      	ldr	r3, [pc, #36]	; (800084c <MX_I2S3_Init+0x54>)
 8000826:	2200      	movs	r2, #0
 8000828:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800082a:	4b08      	ldr	r3, [pc, #32]	; (800084c <MX_I2S3_Init+0x54>)
 800082c:	2200      	movs	r2, #0
 800082e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000830:	4b06      	ldr	r3, [pc, #24]	; (800084c <MX_I2S3_Init+0x54>)
 8000832:	2200      	movs	r2, #0
 8000834:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000836:	4805      	ldr	r0, [pc, #20]	; (800084c <MX_I2S3_Init+0x54>)
 8000838:	f002 ff8c 	bl	8003754 <HAL_I2S_Init>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000842:	f000 f9f5 	bl	8000c30 <Error_Handler>
  }

}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	20000114 	.word	0x20000114
 8000850:	40003c00 	.word	0x40003c00
 8000854:	00017700 	.word	0x00017700

08000858 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b08a      	sub	sp, #40	; 0x28
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000860:	f107 0314 	add.w	r3, r7, #20
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	605a      	str	r2, [r3, #4]
 800086a:	609a      	str	r2, [r3, #8]
 800086c:	60da      	str	r2, [r3, #12]
 800086e:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI3)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a28      	ldr	r2, [pc, #160]	; (8000918 <HAL_I2S_MspInit+0xc0>)
 8000876:	4293      	cmp	r3, r2
 8000878:	d14a      	bne.n	8000910 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	613b      	str	r3, [r7, #16]
 800087e:	4b27      	ldr	r3, [pc, #156]	; (800091c <HAL_I2S_MspInit+0xc4>)
 8000880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000882:	4a26      	ldr	r2, [pc, #152]	; (800091c <HAL_I2S_MspInit+0xc4>)
 8000884:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000888:	6413      	str	r3, [r2, #64]	; 0x40
 800088a:	4b24      	ldr	r3, [pc, #144]	; (800091c <HAL_I2S_MspInit+0xc4>)
 800088c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000892:	613b      	str	r3, [r7, #16]
 8000894:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	60fb      	str	r3, [r7, #12]
 800089a:	4b20      	ldr	r3, [pc, #128]	; (800091c <HAL_I2S_MspInit+0xc4>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4a1f      	ldr	r2, [pc, #124]	; (800091c <HAL_I2S_MspInit+0xc4>)
 80008a0:	f043 0301 	orr.w	r3, r3, #1
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
 80008a6:	4b1d      	ldr	r3, [pc, #116]	; (800091c <HAL_I2S_MspInit+0xc4>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	f003 0301 	and.w	r3, r3, #1
 80008ae:	60fb      	str	r3, [r7, #12]
 80008b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	60bb      	str	r3, [r7, #8]
 80008b6:	4b19      	ldr	r3, [pc, #100]	; (800091c <HAL_I2S_MspInit+0xc4>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a18      	ldr	r2, [pc, #96]	; (800091c <HAL_I2S_MspInit+0xc4>)
 80008bc:	f043 0304 	orr.w	r3, r3, #4
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
 80008c2:	4b16      	ldr	r3, [pc, #88]	; (800091c <HAL_I2S_MspInit+0xc4>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f003 0304 	and.w	r3, r3, #4
 80008ca:	60bb      	str	r3, [r7, #8]
 80008cc:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008ce:	2310      	movs	r3, #16
 80008d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d2:	2302      	movs	r3, #2
 80008d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008da:	2300      	movs	r3, #0
 80008dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008de:	2306      	movs	r3, #6
 80008e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80008e2:	f107 0314 	add.w	r3, r7, #20
 80008e6:	4619      	mov	r1, r3
 80008e8:	480d      	ldr	r0, [pc, #52]	; (8000920 <HAL_I2S_MspInit+0xc8>)
 80008ea:	f000 ff23 	bl	8001734 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80008ee:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80008f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f4:	2302      	movs	r3, #2
 80008f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fc:	2300      	movs	r3, #0
 80008fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000900:	2306      	movs	r3, #6
 8000902:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000904:	f107 0314 	add.w	r3, r7, #20
 8000908:	4619      	mov	r1, r3
 800090a:	4806      	ldr	r0, [pc, #24]	; (8000924 <HAL_I2S_MspInit+0xcc>)
 800090c:	f000 ff12 	bl	8001734 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000910:	bf00      	nop
 8000912:	3728      	adds	r7, #40	; 0x28
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	40003c00 	.word	0x40003c00
 800091c:	40023800 	.word	0x40023800
 8000920:	40020000 	.word	0x40020000
 8000924:	40020800 	.word	0x40020800

08000928 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800092e:	f000 fd39 	bl	80013a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000932:	f000 f86f 	bl	8000a14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000936:	f7ff fdc7 	bl	80004c8 <MX_GPIO_Init>
  MX_I2C1_Init();
 800093a:	f7ff fee7 	bl	800070c <MX_I2C1_Init>
  MX_I2S3_Init();
 800093e:	f7ff ff5b 	bl	80007f8 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000942:	f000 f97d 	bl	8000c40 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000946:	f008 fe35 	bl	80095b4 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 800094a:	f000 fc8f 	bl	800126c <MX_USART2_UART_Init>
  MX_TIM4_Init();
 800094e:	f000 fac3 	bl	8000ed8 <MX_TIM4_Init>
  MX_TIM7_Init();
 8000952:	f000 fb55 	bl	8001000 <MX_TIM7_Init>
  MX_TIM10_Init();
 8000956:	f000 fb89 	bl	800106c <MX_TIM10_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800095a:	f000 f8dd 	bl	8000b18 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800095e:	2201      	movs	r2, #1
 8000960:	2101      	movs	r1, #1
 8000962:	4822      	ldr	r0, [pc, #136]	; (80009ec <main+0xc4>)
 8000964:	f001 f880 	bl	8001a68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000968:	2201      	movs	r2, #1
 800096a:	2120      	movs	r1, #32
 800096c:	481f      	ldr	r0, [pc, #124]	; (80009ec <main+0xc4>)
 800096e:	f001 f87b 	bl	8001a68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000972:	2201      	movs	r2, #1
 8000974:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000978:	481d      	ldr	r0, [pc, #116]	; (80009f0 <main+0xc8>)
 800097a:	f001 f875 	bl	8001a68 <HAL_GPIO_WritePin>

	//UART2 RX Interrupt
	HAL_UART_Receive_IT(&huart2, &rx2_data, 10);
 800097e:	220a      	movs	r2, #10
 8000980:	491c      	ldr	r1, [pc, #112]	; (80009f4 <main+0xcc>)
 8000982:	481d      	ldr	r0, [pc, #116]	; (80009f8 <main+0xd0>)
 8000984:	f005 f980 	bl	8005c88 <HAL_UART_Receive_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8000988:	481c      	ldr	r0, [pc, #112]	; (80009fc <main+0xd4>)
 800098a:	f004 f9b2 	bl	8004cf2 <HAL_TIM_Base_Start_IT>

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800098e:	2100      	movs	r1, #0
 8000990:	481b      	ldr	r0, [pc, #108]	; (8000a00 <main+0xd8>)
 8000992:	f004 fa07 	bl	8004da4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000996:	2104      	movs	r1, #4
 8000998:	4819      	ldr	r0, [pc, #100]	; (8000a00 <main+0xd8>)
 800099a:	f004 fa03 	bl	8004da4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800099e:	2108      	movs	r1, #8
 80009a0:	4817      	ldr	r0, [pc, #92]	; (8000a00 <main+0xd8>)
 80009a2:	f004 f9ff 	bl	8004da4 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 80009a6:	2100      	movs	r1, #0
 80009a8:	4816      	ldr	r0, [pc, #88]	; (8000a04 <main+0xdc>)
 80009aa:	f004 f9fb 	bl	8004da4 <HAL_TIM_PWM_Start>

	TIM10 -> CCR1 = 1500;
 80009ae:	4b16      	ldr	r3, [pc, #88]	; (8000a08 <main+0xe0>)
 80009b0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80009b4:	635a      	str	r2, [r3, #52]	; 0x34
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	uint8_t a = 'a';
 80009b6:	2361      	movs	r3, #97	; 0x61
 80009b8:	717b      	strb	r3, [r7, #5]
	float f = 1.234;
 80009ba:	4b14      	ldr	r3, [pc, #80]	; (8000a0c <main+0xe4>)
 80009bc:	603b      	str	r3, [r7, #0]
	uint16_t ccr = 0;
 80009be:	2300      	movs	r3, #0
 80009c0:	80fb      	strh	r3, [r7, #6]
	while (1)
	{
		//		TIM4 -> CCR1 = ccr;
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, ccr);
 80009c2:	4b0f      	ldr	r3, [pc, #60]	; (8000a00 <main+0xd8>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	88fa      	ldrh	r2, [r7, #6]
 80009c8:	635a      	str	r2, [r3, #52]	; 0x34
		ccr += 1000;
 80009ca:	88fb      	ldrh	r3, [r7, #6]
 80009cc:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80009d0:	80fb      	strh	r3, [r7, #6]
		if(ccr > TIM4 -> ARR)ccr = 0;
 80009d2:	88fa      	ldrh	r2, [r7, #6]
 80009d4:	4b0e      	ldr	r3, [pc, #56]	; (8000a10 <main+0xe8>)
 80009d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009d8:	429a      	cmp	r2, r3
 80009da:	d901      	bls.n	80009e0 <main+0xb8>
 80009dc:	2300      	movs	r3, #0
 80009de:	80fb      	strh	r3, [r7, #6]
		HAL_Delay(50);
 80009e0:	2032      	movs	r0, #50	; 0x32
 80009e2:	f000 fd51 	bl	8001488 <HAL_Delay>

		//		if(HAL_UART_Receive(&huart2, &a, 1, 10) == HAL_OK) {
		//			HAL_UART_Transmit(&huart2, &a, 1, 10);
		//		}
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80009e6:	f008 fe0b 	bl	8009600 <MX_USB_HOST_Process>
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, ccr);
 80009ea:	e7ea      	b.n	80009c2 <main+0x9a>
 80009ec:	40020400 	.word	0x40020400
 80009f0:	40020c00 	.word	0x40020c00
 80009f4:	2000015c 	.word	0x2000015c
 80009f8:	20000280 	.word	0x20000280
 80009fc:	20000240 	.word	0x20000240
 8000a00:	200001c0 	.word	0x200001c0
 8000a04:	20000200 	.word	0x20000200
 8000a08:	40014400 	.word	0x40014400
 8000a0c:	3f9df3b6 	.word	0x3f9df3b6
 8000a10:	40000800 	.word	0x40000800

08000a14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b098      	sub	sp, #96	; 0x60
 8000a18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a1a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a1e:	2230      	movs	r2, #48	; 0x30
 8000a20:	2100      	movs	r1, #0
 8000a22:	4618      	mov	r0, r3
 8000a24:	f009 f900 	bl	8009c28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a28:	f107 031c 	add.w	r3, r7, #28
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	605a      	str	r2, [r3, #4]
 8000a32:	609a      	str	r2, [r3, #8]
 8000a34:	60da      	str	r2, [r3, #12]
 8000a36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a38:	f107 030c 	add.w	r3, r7, #12
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	609a      	str	r2, [r3, #8]
 8000a44:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	60bb      	str	r3, [r7, #8]
 8000a4a:	4b31      	ldr	r3, [pc, #196]	; (8000b10 <SystemClock_Config+0xfc>)
 8000a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4e:	4a30      	ldr	r2, [pc, #192]	; (8000b10 <SystemClock_Config+0xfc>)
 8000a50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a54:	6413      	str	r3, [r2, #64]	; 0x40
 8000a56:	4b2e      	ldr	r3, [pc, #184]	; (8000b10 <SystemClock_Config+0xfc>)
 8000a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a5e:	60bb      	str	r3, [r7, #8]
 8000a60:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a62:	2300      	movs	r3, #0
 8000a64:	607b      	str	r3, [r7, #4]
 8000a66:	4b2b      	ldr	r3, [pc, #172]	; (8000b14 <SystemClock_Config+0x100>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4a2a      	ldr	r2, [pc, #168]	; (8000b14 <SystemClock_Config+0x100>)
 8000a6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a70:	6013      	str	r3, [r2, #0]
 8000a72:	4b28      	ldr	r3, [pc, #160]	; (8000b14 <SystemClock_Config+0x100>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a7a:	607b      	str	r3, [r7, #4]
 8000a7c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a86:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a8c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a90:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a92:	2308      	movs	r3, #8
 8000a94:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a96:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a9a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000aa0:	2307      	movs	r3, #7
 8000aa2:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aa4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f003 faf3 	bl	8004094 <HAL_RCC_OscConfig>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000ab4:	f000 f8bc 	bl	8000c30 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ab8:	230f      	movs	r3, #15
 8000aba:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000abc:	2302      	movs	r3, #2
 8000abe:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ac4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ac8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000aca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ace:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ad0:	f107 031c 	add.w	r3, r7, #28
 8000ad4:	2105      	movs	r1, #5
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f003 fd4c 	bl	8004574 <HAL_RCC_ClockConfig>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000ae2:	f000 f8a5 	bl	8000c30 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000aea:	23c0      	movs	r3, #192	; 0xc0
 8000aec:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000aee:	2302      	movs	r3, #2
 8000af0:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000af2:	f107 030c 	add.w	r3, r7, #12
 8000af6:	4618      	mov	r0, r3
 8000af8:	f003 ff2e 	bl	8004958 <HAL_RCCEx_PeriphCLKConfig>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000b02:	f000 f895 	bl	8000c30 <Error_Handler>
  }
}
 8000b06:	bf00      	nop
 8000b08:	3760      	adds	r7, #96	; 0x60
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40023800 	.word	0x40023800
 8000b14:	40007000 	.word	0x40007000

08000b18 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	2100      	movs	r1, #0
 8000b20:	2026      	movs	r0, #38	; 0x26
 8000b22:	f000 fdae 	bl	8001682 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b26:	2026      	movs	r0, #38	; 0x26
 8000b28:	f000 fdc7 	bl	80016ba <HAL_NVIC_EnableIRQ>
  /* OTG_FS_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	2100      	movs	r1, #0
 8000b30:	2043      	movs	r0, #67	; 0x43
 8000b32:	f000 fda6 	bl	8001682 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8000b36:	2043      	movs	r0, #67	; 0x43
 8000b38:	f000 fdbf 	bl	80016ba <HAL_NVIC_EnableIRQ>
  /* TIM7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	2100      	movs	r1, #0
 8000b40:	2037      	movs	r0, #55	; 0x37
 8000b42:	f000 fd9e 	bl	8001682 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000b46:	2037      	movs	r0, #55	; 0x37
 8000b48:	f000 fdb7 	bl	80016ba <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	2100      	movs	r1, #0
 8000b50:	2028      	movs	r0, #40	; 0x28
 8000b52:	f000 fd96 	bl	8001682 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b56:	2028      	movs	r0, #40	; 0x28
 8000b58:	f000 fdaf 	bl	80016ba <HAL_NVIC_EnableIRQ>
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	2100      	movs	r1, #0
 8000b60:	2017      	movs	r0, #23
 8000b62:	f000 fd8e 	bl	8001682 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000b66:	2017      	movs	r0, #23
 8000b68:	f000 fda7 	bl	80016ba <HAL_NVIC_EnableIRQ>
}
 8000b6c:	bf00      	nop
 8000b6e:	bd80      	pop	{r7, pc}

08000b70 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
	if (huart -> Instance == USART2) {
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a08      	ldr	r2, [pc, #32]	; (8000ba0 <HAL_UART_RxCpltCallback+0x30>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d10a      	bne.n	8000b98 <HAL_UART_RxCpltCallback+0x28>
		HAL_UART_Receive_IT(&huart2, &rx2_data, 10);
 8000b82:	220a      	movs	r2, #10
 8000b84:	4907      	ldr	r1, [pc, #28]	; (8000ba4 <HAL_UART_RxCpltCallback+0x34>)
 8000b86:	4808      	ldr	r0, [pc, #32]	; (8000ba8 <HAL_UART_RxCpltCallback+0x38>)
 8000b88:	f005 f87e 	bl	8005c88 <HAL_UART_Receive_IT>
		HAL_UART_Transmit(&huart2, &rx2_data, 1, 10);
 8000b8c:	230a      	movs	r3, #10
 8000b8e:	2201      	movs	r2, #1
 8000b90:	4904      	ldr	r1, [pc, #16]	; (8000ba4 <HAL_UART_RxCpltCallback+0x34>)
 8000b92:	4805      	ldr	r0, [pc, #20]	; (8000ba8 <HAL_UART_RxCpltCallback+0x38>)
 8000b94:	f004 ffdf 	bl	8005b56 <HAL_UART_Transmit>
	}
}
 8000b98:	bf00      	nop
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	40004400 	.word	0x40004400
 8000ba4:	2000015c 	.word	0x2000015c
 8000ba8:	20000280 	.word	0x20000280

08000bac <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
	if (htim -> Instance == TIM7) {
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a05      	ldr	r2, [pc, #20]	; (8000bd0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d104      	bne.n	8000bc8 <HAL_TIM_PeriodElapsedCallback+0x1c>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000bbe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bc2:	4804      	ldr	r0, [pc, #16]	; (8000bd4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000bc4:	f000 ff69 	bl	8001a9a <HAL_GPIO_TogglePin>
	}
}
 8000bc8:	bf00      	nop
 8000bca:	3708      	adds	r7, #8
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	40001400 	.word	0x40001400
 8000bd4:	40020c00 	.word	0x40020c00

08000bd8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_8) {
 8000be2:	88fb      	ldrh	r3, [r7, #6]
 8000be4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000be8:	d103      	bne.n	8000bf2 <HAL_GPIO_EXTI_Callback+0x1a>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000bea:	2101      	movs	r1, #1
 8000bec:	480f      	ldr	r0, [pc, #60]	; (8000c2c <HAL_GPIO_EXTI_Callback+0x54>)
 8000bee:	f000 ff54 	bl	8001a9a <HAL_GPIO_TogglePin>
	}
	if (GPIO_Pin == GPIO_PIN_9) {
 8000bf2:	88fb      	ldrh	r3, [r7, #6]
 8000bf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000bf8:	d103      	bne.n	8000c02 <HAL_GPIO_EXTI_Callback+0x2a>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 8000bfa:	2120      	movs	r1, #32
 8000bfc:	480b      	ldr	r0, [pc, #44]	; (8000c2c <HAL_GPIO_EXTI_Callback+0x54>)
 8000bfe:	f000 ff4c 	bl	8001a9a <HAL_GPIO_TogglePin>
	}
	if (GPIO_Pin == GPIO_PIN_10) {
 8000c02:	88fb      	ldrh	r3, [r7, #6]
 8000c04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c08:	d103      	bne.n	8000c12 <HAL_GPIO_EXTI_Callback+0x3a>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000c0a:	2101      	movs	r1, #1
 8000c0c:	4807      	ldr	r0, [pc, #28]	; (8000c2c <HAL_GPIO_EXTI_Callback+0x54>)
 8000c0e:	f000 ff44 	bl	8001a9a <HAL_GPIO_TogglePin>
	}
	if (GPIO_Pin == GPIO_PIN_11) {
 8000c12:	88fb      	ldrh	r3, [r7, #6]
 8000c14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000c18:	d103      	bne.n	8000c22 <HAL_GPIO_EXTI_Callback+0x4a>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 8000c1a:	2120      	movs	r1, #32
 8000c1c:	4803      	ldr	r0, [pc, #12]	; (8000c2c <HAL_GPIO_EXTI_Callback+0x54>)
 8000c1e:	f000 ff3c 	bl	8001a9a <HAL_GPIO_TogglePin>
	}
}
 8000c22:	bf00      	nop
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40020400 	.word	0x40020400

08000c30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
	...

08000c40 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000c44:	4b17      	ldr	r3, [pc, #92]	; (8000ca4 <MX_SPI1_Init+0x64>)
 8000c46:	4a18      	ldr	r2, [pc, #96]	; (8000ca8 <MX_SPI1_Init+0x68>)
 8000c48:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c4a:	4b16      	ldr	r3, [pc, #88]	; (8000ca4 <MX_SPI1_Init+0x64>)
 8000c4c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c50:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c52:	4b14      	ldr	r3, [pc, #80]	; (8000ca4 <MX_SPI1_Init+0x64>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c58:	4b12      	ldr	r3, [pc, #72]	; (8000ca4 <MX_SPI1_Init+0x64>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c5e:	4b11      	ldr	r3, [pc, #68]	; (8000ca4 <MX_SPI1_Init+0x64>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c64:	4b0f      	ldr	r3, [pc, #60]	; (8000ca4 <MX_SPI1_Init+0x64>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ca4 <MX_SPI1_Init+0x64>)
 8000c6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c70:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c72:	4b0c      	ldr	r3, [pc, #48]	; (8000ca4 <MX_SPI1_Init+0x64>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c78:	4b0a      	ldr	r3, [pc, #40]	; (8000ca4 <MX_SPI1_Init+0x64>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c7e:	4b09      	ldr	r3, [pc, #36]	; (8000ca4 <MX_SPI1_Init+0x64>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c84:	4b07      	ldr	r3, [pc, #28]	; (8000ca4 <MX_SPI1_Init+0x64>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000c8a:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <MX_SPI1_Init+0x64>)
 8000c8c:	220a      	movs	r2, #10
 8000c8e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c90:	4804      	ldr	r0, [pc, #16]	; (8000ca4 <MX_SPI1_Init+0x64>)
 8000c92:	f003 ff9f 	bl	8004bd4 <HAL_SPI_Init>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000c9c:	f7ff ffc8 	bl	8000c30 <Error_Handler>
  }

}
 8000ca0:	bf00      	nop
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	20000168 	.word	0x20000168
 8000ca8:	40013000 	.word	0x40013000

08000cac <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b08a      	sub	sp, #40	; 0x28
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb4:	f107 0314 	add.w	r3, r7, #20
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
 8000cc0:	60da      	str	r2, [r3, #12]
 8000cc2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a19      	ldr	r2, [pc, #100]	; (8000d30 <HAL_SPI_MspInit+0x84>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d12b      	bne.n	8000d26 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	613b      	str	r3, [r7, #16]
 8000cd2:	4b18      	ldr	r3, [pc, #96]	; (8000d34 <HAL_SPI_MspInit+0x88>)
 8000cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd6:	4a17      	ldr	r2, [pc, #92]	; (8000d34 <HAL_SPI_MspInit+0x88>)
 8000cd8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000cdc:	6453      	str	r3, [r2, #68]	; 0x44
 8000cde:	4b15      	ldr	r3, [pc, #84]	; (8000d34 <HAL_SPI_MspInit+0x88>)
 8000ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ce6:	613b      	str	r3, [r7, #16]
 8000ce8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	60fb      	str	r3, [r7, #12]
 8000cee:	4b11      	ldr	r3, [pc, #68]	; (8000d34 <HAL_SPI_MspInit+0x88>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	4a10      	ldr	r2, [pc, #64]	; (8000d34 <HAL_SPI_MspInit+0x88>)
 8000cf4:	f043 0301 	orr.w	r3, r3, #1
 8000cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfa:	4b0e      	ldr	r3, [pc, #56]	; (8000d34 <HAL_SPI_MspInit+0x88>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000d06:	23e0      	movs	r3, #224	; 0xe0
 8000d08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d12:	2300      	movs	r3, #0
 8000d14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d16:	2305      	movs	r3, #5
 8000d18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d1a:	f107 0314 	add.w	r3, r7, #20
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4805      	ldr	r0, [pc, #20]	; (8000d38 <HAL_SPI_MspInit+0x8c>)
 8000d22:	f000 fd07 	bl	8001734 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000d26:	bf00      	nop
 8000d28:	3728      	adds	r7, #40	; 0x28
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40013000 	.word	0x40013000
 8000d34:	40023800 	.word	0x40023800
 8000d38:	40020000 	.word	0x40020000

08000d3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	607b      	str	r3, [r7, #4]
 8000d46:	4b10      	ldr	r3, [pc, #64]	; (8000d88 <HAL_MspInit+0x4c>)
 8000d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4a:	4a0f      	ldr	r2, [pc, #60]	; (8000d88 <HAL_MspInit+0x4c>)
 8000d4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d50:	6453      	str	r3, [r2, #68]	; 0x44
 8000d52:	4b0d      	ldr	r3, [pc, #52]	; (8000d88 <HAL_MspInit+0x4c>)
 8000d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d5a:	607b      	str	r3, [r7, #4]
 8000d5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	603b      	str	r3, [r7, #0]
 8000d62:	4b09      	ldr	r3, [pc, #36]	; (8000d88 <HAL_MspInit+0x4c>)
 8000d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d66:	4a08      	ldr	r2, [pc, #32]	; (8000d88 <HAL_MspInit+0x4c>)
 8000d68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d6e:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <HAL_MspInit+0x4c>)
 8000d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d76:	603b      	str	r3, [r7, #0]
 8000d78:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d7a:	2007      	movs	r0, #7
 8000d7c:	f000 fc76 	bl	800166c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d80:	bf00      	nop
 8000d82:	3708      	adds	r7, #8
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	40023800 	.word	0x40023800

08000d8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr

08000d9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d9e:	e7fe      	b.n	8000d9e <HardFault_Handler+0x4>

08000da0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000da4:	e7fe      	b.n	8000da4 <MemManage_Handler+0x4>

08000da6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000daa:	e7fe      	b.n	8000daa <BusFault_Handler+0x4>

08000dac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000db0:	e7fe      	b.n	8000db0 <UsageFault_Handler+0x4>

08000db2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000db2:	b480      	push	{r7}
 8000db4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr

08000dc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr

08000dce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr

08000ddc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000de0:	f000 fb32 	bl	8001448 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000de4:	bf00      	nop
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000dec:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000df0:	f000 fe6e 	bl	8001ad0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8000df4:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000df8:	f000 fe6a 	bl	8001ad0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000dfc:	bf00      	nop
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e04:	4802      	ldr	r0, [pc, #8]	; (8000e10 <USART2_IRQHandler+0x10>)
 8000e06:	f004 ff95 	bl	8005d34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	20000280 	.word	0x20000280

08000e14 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000e18:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000e1c:	f000 fe58 	bl	8001ad0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8000e20:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000e24:	f000 fe54 	bl	8001ad0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e28:	bf00      	nop
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000e30:	4802      	ldr	r0, [pc, #8]	; (8000e3c <TIM7_IRQHandler+0x10>)
 8000e32:	f003 fff5 	bl	8004e20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	20000240 	.word	0x20000240

08000e40 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000e44:	4802      	ldr	r0, [pc, #8]	; (8000e50 <OTG_FS_IRQHandler+0x10>)
 8000e46:	f001 f8eb 	bl	8002020 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	2000069c 	.word	0x2000069c

08000e54 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000e5c:	4b11      	ldr	r3, [pc, #68]	; (8000ea4 <_sbrk+0x50>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d102      	bne.n	8000e6a <_sbrk+0x16>
		heap_end = &end;
 8000e64:	4b0f      	ldr	r3, [pc, #60]	; (8000ea4 <_sbrk+0x50>)
 8000e66:	4a10      	ldr	r2, [pc, #64]	; (8000ea8 <_sbrk+0x54>)
 8000e68:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000e6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ea4 <_sbrk+0x50>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000e70:	4b0c      	ldr	r3, [pc, #48]	; (8000ea4 <_sbrk+0x50>)
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	4413      	add	r3, r2
 8000e78:	466a      	mov	r2, sp
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d907      	bls.n	8000e8e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000e7e:	f008 fe99 	bl	8009bb4 <__errno>
 8000e82:	4602      	mov	r2, r0
 8000e84:	230c      	movs	r3, #12
 8000e86:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000e88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e8c:	e006      	b.n	8000e9c <_sbrk+0x48>
	}

	heap_end += incr;
 8000e8e:	4b05      	ldr	r3, [pc, #20]	; (8000ea4 <_sbrk+0x50>)
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4413      	add	r3, r2
 8000e96:	4a03      	ldr	r2, [pc, #12]	; (8000ea4 <_sbrk+0x50>)
 8000e98:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000e9a:	68fb      	ldr	r3, [r7, #12]
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3710      	adds	r7, #16
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	200000ac 	.word	0x200000ac
 8000ea8:	20000968 	.word	0x20000968

08000eac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000eb0:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <SystemInit+0x28>)
 8000eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eb6:	4a07      	ldr	r2, [pc, #28]	; (8000ed4 <SystemInit+0x28>)
 8000eb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ebc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ec0:	4b04      	ldr	r3, [pc, #16]	; (8000ed4 <SystemInit+0x28>)
 8000ec2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ec6:	609a      	str	r2, [r3, #8]
#endif
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	e000ed00 	.word	0xe000ed00

08000ed8 <MX_TIM4_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim10;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b08e      	sub	sp, #56	; 0x38
 8000edc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ede:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	605a      	str	r2, [r3, #4]
 8000ee8:	609a      	str	r2, [r3, #8]
 8000eea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eec:	f107 0320 	add.w	r3, r7, #32
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ef6:	1d3b      	adds	r3, r7, #4
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	60da      	str	r2, [r3, #12]
 8000f02:	611a      	str	r2, [r3, #16]
 8000f04:	615a      	str	r2, [r3, #20]
 8000f06:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8000f08:	4b3b      	ldr	r3, [pc, #236]	; (8000ff8 <MX_TIM4_Init+0x120>)
 8000f0a:	4a3c      	ldr	r2, [pc, #240]	; (8000ffc <MX_TIM4_Init+0x124>)
 8000f0c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 19;
 8000f0e:	4b3a      	ldr	r3, [pc, #232]	; (8000ff8 <MX_TIM4_Init+0x120>)
 8000f10:	2213      	movs	r2, #19
 8000f12:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f14:	4b38      	ldr	r3, [pc, #224]	; (8000ff8 <MX_TIM4_Init+0x120>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 41999;
 8000f1a:	4b37      	ldr	r3, [pc, #220]	; (8000ff8 <MX_TIM4_Init+0x120>)
 8000f1c:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8000f20:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f22:	4b35      	ldr	r3, [pc, #212]	; (8000ff8 <MX_TIM4_Init+0x120>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f28:	4b33      	ldr	r3, [pc, #204]	; (8000ff8 <MX_TIM4_Init+0x120>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000f2e:	4832      	ldr	r0, [pc, #200]	; (8000ff8 <MX_TIM4_Init+0x120>)
 8000f30:	f003 feb4 	bl	8004c9c <HAL_TIM_Base_Init>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000f3a:	f7ff fe79 	bl	8000c30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f42:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000f44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f48:	4619      	mov	r1, r3
 8000f4a:	482b      	ldr	r0, [pc, #172]	; (8000ff8 <MX_TIM4_Init+0x120>)
 8000f4c:	f004 f936 	bl	80051bc <HAL_TIM_ConfigClockSource>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000f56:	f7ff fe6b 	bl	8000c30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000f5a:	4827      	ldr	r0, [pc, #156]	; (8000ff8 <MX_TIM4_Init+0x120>)
 8000f5c:	f003 feed 	bl	8004d3a <HAL_TIM_PWM_Init>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000f66:	f7ff fe63 	bl	8000c30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000f72:	f107 0320 	add.w	r3, r7, #32
 8000f76:	4619      	mov	r1, r3
 8000f78:	481f      	ldr	r0, [pc, #124]	; (8000ff8 <MX_TIM4_Init+0x120>)
 8000f7a:	f004 fd0f 	bl	800599c <HAL_TIMEx_MasterConfigSynchronization>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000f84:	f7ff fe54 	bl	8000c30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f88:	2360      	movs	r3, #96	; 0x60
 8000f8a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 20999;
 8000f8c:	f245 2307 	movw	r3, #20999	; 0x5207
 8000f90:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f92:	2300      	movs	r3, #0
 8000f94:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f96:	2300      	movs	r3, #0
 8000f98:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f9a:	1d3b      	adds	r3, r7, #4
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4815      	ldr	r0, [pc, #84]	; (8000ff8 <MX_TIM4_Init+0x120>)
 8000fa2:	f004 f845 	bl	8005030 <HAL_TIM_PWM_ConfigChannel>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8000fac:	f7ff fe40 	bl	8000c30 <Error_Handler>
  }
  sConfigOC.Pulse = 10500 - 1;
 8000fb0:	f642 1303 	movw	r3, #10499	; 0x2903
 8000fb4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000fb6:	1d3b      	adds	r3, r7, #4
 8000fb8:	2204      	movs	r2, #4
 8000fba:	4619      	mov	r1, r3
 8000fbc:	480e      	ldr	r0, [pc, #56]	; (8000ff8 <MX_TIM4_Init+0x120>)
 8000fbe:	f004 f837 	bl	8005030 <HAL_TIM_PWM_ConfigChannel>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <MX_TIM4_Init+0xf4>
  {
    Error_Handler();
 8000fc8:	f7ff fe32 	bl	8000c30 <Error_Handler>
  }
  sConfigOC.Pulse = 5250 - 1;
 8000fcc:	f241 4381 	movw	r3, #5249	; 0x1481
 8000fd0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000fd2:	1d3b      	adds	r3, r7, #4
 8000fd4:	2208      	movs	r2, #8
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4807      	ldr	r0, [pc, #28]	; (8000ff8 <MX_TIM4_Init+0x120>)
 8000fda:	f004 f829 	bl	8005030 <HAL_TIM_PWM_ConfigChannel>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_TIM4_Init+0x110>
  {
    Error_Handler();
 8000fe4:	f7ff fe24 	bl	8000c30 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 8000fe8:	4803      	ldr	r0, [pc, #12]	; (8000ff8 <MX_TIM4_Init+0x120>)
 8000fea:	f000 f8db 	bl	80011a4 <HAL_TIM_MspPostInit>

}
 8000fee:	bf00      	nop
 8000ff0:	3738      	adds	r7, #56	; 0x38
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	200001c0 	.word	0x200001c0
 8000ffc:	40000800 	.word	0x40000800

08001000 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001006:	463b      	mov	r3, r7
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]

  htim7.Instance = TIM7;
 800100e:	4b15      	ldr	r3, [pc, #84]	; (8001064 <MX_TIM7_Init+0x64>)
 8001010:	4a15      	ldr	r2, [pc, #84]	; (8001068 <MX_TIM7_Init+0x68>)
 8001012:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 9999;
 8001014:	4b13      	ldr	r3, [pc, #76]	; (8001064 <MX_TIM7_Init+0x64>)
 8001016:	f242 720f 	movw	r2, #9999	; 0x270f
 800101a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800101c:	4b11      	ldr	r3, [pc, #68]	; (8001064 <MX_TIM7_Init+0x64>)
 800101e:	2200      	movs	r2, #0
 8001020:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 8399;
 8001022:	4b10      	ldr	r3, [pc, #64]	; (8001064 <MX_TIM7_Init+0x64>)
 8001024:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001028:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800102a:	4b0e      	ldr	r3, [pc, #56]	; (8001064 <MX_TIM7_Init+0x64>)
 800102c:	2200      	movs	r2, #0
 800102e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001030:	480c      	ldr	r0, [pc, #48]	; (8001064 <MX_TIM7_Init+0x64>)
 8001032:	f003 fe33 	bl	8004c9c <HAL_TIM_Base_Init>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 800103c:	f7ff fdf8 	bl	8000c30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001040:	2300      	movs	r3, #0
 8001042:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001044:	2300      	movs	r3, #0
 8001046:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001048:	463b      	mov	r3, r7
 800104a:	4619      	mov	r1, r3
 800104c:	4805      	ldr	r0, [pc, #20]	; (8001064 <MX_TIM7_Init+0x64>)
 800104e:	f004 fca5 	bl	800599c <HAL_TIMEx_MasterConfigSynchronization>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001058:	f7ff fdea 	bl	8000c30 <Error_Handler>
  }

}
 800105c:	bf00      	nop
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	20000240 	.word	0x20000240
 8001068:	40001400 	.word	0x40001400

0800106c <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b088      	sub	sp, #32
 8001070:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001072:	1d3b      	adds	r3, r7, #4
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	60da      	str	r2, [r3, #12]
 800107e:	611a      	str	r2, [r3, #16]
 8001080:	615a      	str	r2, [r3, #20]
 8001082:	619a      	str	r2, [r3, #24]

  htim10.Instance = TIM10;
 8001084:	4b1e      	ldr	r3, [pc, #120]	; (8001100 <MX_TIM10_Init+0x94>)
 8001086:	4a1f      	ldr	r2, [pc, #124]	; (8001104 <MX_TIM10_Init+0x98>)
 8001088:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 336-1;
 800108a:	4b1d      	ldr	r3, [pc, #116]	; (8001100 <MX_TIM10_Init+0x94>)
 800108c:	f240 124f 	movw	r2, #335	; 0x14f
 8001090:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001092:	4b1b      	ldr	r3, [pc, #108]	; (8001100 <MX_TIM10_Init+0x94>)
 8001094:	2200      	movs	r2, #0
 8001096:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10000-1;
 8001098:	4b19      	ldr	r3, [pc, #100]	; (8001100 <MX_TIM10_Init+0x94>)
 800109a:	f242 720f 	movw	r2, #9999	; 0x270f
 800109e:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010a0:	4b17      	ldr	r3, [pc, #92]	; (8001100 <MX_TIM10_Init+0x94>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010a6:	4b16      	ldr	r3, [pc, #88]	; (8001100 <MX_TIM10_Init+0x94>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80010ac:	4814      	ldr	r0, [pc, #80]	; (8001100 <MX_TIM10_Init+0x94>)
 80010ae:	f003 fdf5 	bl	8004c9c <HAL_TIM_Base_Init>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_TIM10_Init+0x50>
  {
    Error_Handler();
 80010b8:	f7ff fdba 	bl	8000c30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80010bc:	4810      	ldr	r0, [pc, #64]	; (8001100 <MX_TIM10_Init+0x94>)
 80010be:	f003 fe3c 	bl	8004d3a <HAL_TIM_PWM_Init>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_TIM10_Init+0x60>
  {
    Error_Handler();
 80010c8:	f7ff fdb2 	bl	8000c30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010cc:	2360      	movs	r3, #96	; 0x60
 80010ce:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 80010d0:	2364      	movs	r3, #100	; 0x64
 80010d2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010d4:	2300      	movs	r3, #0
 80010d6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010dc:	1d3b      	adds	r3, r7, #4
 80010de:	2200      	movs	r2, #0
 80010e0:	4619      	mov	r1, r3
 80010e2:	4807      	ldr	r0, [pc, #28]	; (8001100 <MX_TIM10_Init+0x94>)
 80010e4:	f003 ffa4 	bl	8005030 <HAL_TIM_PWM_ConfigChannel>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_TIM10_Init+0x86>
  {
    Error_Handler();
 80010ee:	f7ff fd9f 	bl	8000c30 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim10);
 80010f2:	4803      	ldr	r0, [pc, #12]	; (8001100 <MX_TIM10_Init+0x94>)
 80010f4:	f000 f856 	bl	80011a4 <HAL_TIM_MspPostInit>

}
 80010f8:	bf00      	nop
 80010fa:	3720      	adds	r7, #32
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20000200 	.word	0x20000200
 8001104:	40014400 	.word	0x40014400

08001108 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001108:	b480      	push	{r7}
 800110a:	b087      	sub	sp, #28
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a1f      	ldr	r2, [pc, #124]	; (8001194 <HAL_TIM_Base_MspInit+0x8c>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d10e      	bne.n	8001138 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	617b      	str	r3, [r7, #20]
 800111e:	4b1e      	ldr	r3, [pc, #120]	; (8001198 <HAL_TIM_Base_MspInit+0x90>)
 8001120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001122:	4a1d      	ldr	r2, [pc, #116]	; (8001198 <HAL_TIM_Base_MspInit+0x90>)
 8001124:	f043 0304 	orr.w	r3, r3, #4
 8001128:	6413      	str	r3, [r2, #64]	; 0x40
 800112a:	4b1b      	ldr	r3, [pc, #108]	; (8001198 <HAL_TIM_Base_MspInit+0x90>)
 800112c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112e:	f003 0304 	and.w	r3, r3, #4
 8001132:	617b      	str	r3, [r7, #20]
 8001134:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM10_CLK_ENABLE();
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8001136:	e026      	b.n	8001186 <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM7)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a17      	ldr	r2, [pc, #92]	; (800119c <HAL_TIM_Base_MspInit+0x94>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d10e      	bne.n	8001160 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	613b      	str	r3, [r7, #16]
 8001146:	4b14      	ldr	r3, [pc, #80]	; (8001198 <HAL_TIM_Base_MspInit+0x90>)
 8001148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114a:	4a13      	ldr	r2, [pc, #76]	; (8001198 <HAL_TIM_Base_MspInit+0x90>)
 800114c:	f043 0320 	orr.w	r3, r3, #32
 8001150:	6413      	str	r3, [r2, #64]	; 0x40
 8001152:	4b11      	ldr	r3, [pc, #68]	; (8001198 <HAL_TIM_Base_MspInit+0x90>)
 8001154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001156:	f003 0320 	and.w	r3, r3, #32
 800115a:	613b      	str	r3, [r7, #16]
 800115c:	693b      	ldr	r3, [r7, #16]
}
 800115e:	e012      	b.n	8001186 <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM10)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a0e      	ldr	r2, [pc, #56]	; (80011a0 <HAL_TIM_Base_MspInit+0x98>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d10d      	bne.n	8001186 <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	60fb      	str	r3, [r7, #12]
 800116e:	4b0a      	ldr	r3, [pc, #40]	; (8001198 <HAL_TIM_Base_MspInit+0x90>)
 8001170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001172:	4a09      	ldr	r2, [pc, #36]	; (8001198 <HAL_TIM_Base_MspInit+0x90>)
 8001174:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001178:	6453      	str	r3, [r2, #68]	; 0x44
 800117a:	4b07      	ldr	r3, [pc, #28]	; (8001198 <HAL_TIM_Base_MspInit+0x90>)
 800117c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	68fb      	ldr	r3, [r7, #12]
}
 8001186:	bf00      	nop
 8001188:	371c      	adds	r7, #28
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	40000800 	.word	0x40000800
 8001198:	40023800 	.word	0x40023800
 800119c:	40001400 	.word	0x40001400
 80011a0:	40014400 	.word	0x40014400

080011a4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b08a      	sub	sp, #40	; 0x28
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ac:	f107 0314 	add.w	r3, r7, #20
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]
 80011ba:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a25      	ldr	r2, [pc, #148]	; (8001258 <HAL_TIM_MspPostInit+0xb4>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d11f      	bne.n	8001206 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	613b      	str	r3, [r7, #16]
 80011ca:	4b24      	ldr	r3, [pc, #144]	; (800125c <HAL_TIM_MspPostInit+0xb8>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	4a23      	ldr	r2, [pc, #140]	; (800125c <HAL_TIM_MspPostInit+0xb8>)
 80011d0:	f043 0308 	orr.w	r3, r3, #8
 80011d4:	6313      	str	r3, [r2, #48]	; 0x30
 80011d6:	4b21      	ldr	r3, [pc, #132]	; (800125c <HAL_TIM_MspPostInit+0xb8>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	f003 0308 	and.w	r3, r3, #8
 80011de:	613b      	str	r3, [r7, #16]
 80011e0:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration    
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 80011e2:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80011e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e8:	2302      	movs	r3, #2
 80011ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ec:	2300      	movs	r3, #0
 80011ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f0:	2300      	movs	r3, #0
 80011f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80011f4:	2302      	movs	r3, #2
 80011f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011f8:	f107 0314 	add.w	r3, r7, #20
 80011fc:	4619      	mov	r1, r3
 80011fe:	4818      	ldr	r0, [pc, #96]	; (8001260 <HAL_TIM_MspPostInit+0xbc>)
 8001200:	f000 fa98 	bl	8001734 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8001204:	e023      	b.n	800124e <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM10)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a16      	ldr	r2, [pc, #88]	; (8001264 <HAL_TIM_MspPostInit+0xc0>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d11e      	bne.n	800124e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001210:	2300      	movs	r3, #0
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	4b11      	ldr	r3, [pc, #68]	; (800125c <HAL_TIM_MspPostInit+0xb8>)
 8001216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001218:	4a10      	ldr	r2, [pc, #64]	; (800125c <HAL_TIM_MspPostInit+0xb8>)
 800121a:	f043 0302 	orr.w	r3, r3, #2
 800121e:	6313      	str	r3, [r2, #48]	; 0x30
 8001220:	4b0e      	ldr	r3, [pc, #56]	; (800125c <HAL_TIM_MspPostInit+0xb8>)
 8001222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001224:	f003 0302 	and.w	r3, r3, #2
 8001228:	60fb      	str	r3, [r7, #12]
 800122a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800122c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001230:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001232:	2302      	movs	r3, #2
 8001234:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001236:	2300      	movs	r3, #0
 8001238:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123a:	2300      	movs	r3, #0
 800123c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 800123e:	2303      	movs	r3, #3
 8001240:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001242:	f107 0314 	add.w	r3, r7, #20
 8001246:	4619      	mov	r1, r3
 8001248:	4807      	ldr	r0, [pc, #28]	; (8001268 <HAL_TIM_MspPostInit+0xc4>)
 800124a:	f000 fa73 	bl	8001734 <HAL_GPIO_Init>
}
 800124e:	bf00      	nop
 8001250:	3728      	adds	r7, #40	; 0x28
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40000800 	.word	0x40000800
 800125c:	40023800 	.word	0x40023800
 8001260:	40020c00 	.word	0x40020c00
 8001264:	40014400 	.word	0x40014400
 8001268:	40020400 	.word	0x40020400

0800126c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001270:	4b11      	ldr	r3, [pc, #68]	; (80012b8 <MX_USART2_UART_Init+0x4c>)
 8001272:	4a12      	ldr	r2, [pc, #72]	; (80012bc <MX_USART2_UART_Init+0x50>)
 8001274:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001276:	4b10      	ldr	r3, [pc, #64]	; (80012b8 <MX_USART2_UART_Init+0x4c>)
 8001278:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800127c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800127e:	4b0e      	ldr	r3, [pc, #56]	; (80012b8 <MX_USART2_UART_Init+0x4c>)
 8001280:	2200      	movs	r2, #0
 8001282:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001284:	4b0c      	ldr	r3, [pc, #48]	; (80012b8 <MX_USART2_UART_Init+0x4c>)
 8001286:	2200      	movs	r2, #0
 8001288:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800128a:	4b0b      	ldr	r3, [pc, #44]	; (80012b8 <MX_USART2_UART_Init+0x4c>)
 800128c:	2200      	movs	r2, #0
 800128e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001290:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <MX_USART2_UART_Init+0x4c>)
 8001292:	220c      	movs	r2, #12
 8001294:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001296:	4b08      	ldr	r3, [pc, #32]	; (80012b8 <MX_USART2_UART_Init+0x4c>)
 8001298:	2200      	movs	r2, #0
 800129a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800129c:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <MX_USART2_UART_Init+0x4c>)
 800129e:	2200      	movs	r2, #0
 80012a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012a2:	4805      	ldr	r0, [pc, #20]	; (80012b8 <MX_USART2_UART_Init+0x4c>)
 80012a4:	f004 fc0a 	bl	8005abc <HAL_UART_Init>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80012ae:	f7ff fcbf 	bl	8000c30 <Error_Handler>
  }

}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000280 	.word	0x20000280
 80012bc:	40004400 	.word	0x40004400

080012c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b08a      	sub	sp, #40	; 0x28
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c8:	f107 0314 	add.w	r3, r7, #20
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	60da      	str	r2, [r3, #12]
 80012d6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a19      	ldr	r2, [pc, #100]	; (8001344 <HAL_UART_MspInit+0x84>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d12b      	bne.n	800133a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	613b      	str	r3, [r7, #16]
 80012e6:	4b18      	ldr	r3, [pc, #96]	; (8001348 <HAL_UART_MspInit+0x88>)
 80012e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ea:	4a17      	ldr	r2, [pc, #92]	; (8001348 <HAL_UART_MspInit+0x88>)
 80012ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012f0:	6413      	str	r3, [r2, #64]	; 0x40
 80012f2:	4b15      	ldr	r3, [pc, #84]	; (8001348 <HAL_UART_MspInit+0x88>)
 80012f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012fa:	613b      	str	r3, [r7, #16]
 80012fc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fe:	2300      	movs	r3, #0
 8001300:	60fb      	str	r3, [r7, #12]
 8001302:	4b11      	ldr	r3, [pc, #68]	; (8001348 <HAL_UART_MspInit+0x88>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	4a10      	ldr	r2, [pc, #64]	; (8001348 <HAL_UART_MspInit+0x88>)
 8001308:	f043 0301 	orr.w	r3, r3, #1
 800130c:	6313      	str	r3, [r2, #48]	; 0x30
 800130e:	4b0e      	ldr	r3, [pc, #56]	; (8001348 <HAL_UART_MspInit+0x88>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	60fb      	str	r3, [r7, #12]
 8001318:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800131a:	230c      	movs	r3, #12
 800131c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131e:	2302      	movs	r3, #2
 8001320:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001322:	2300      	movs	r3, #0
 8001324:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001326:	2303      	movs	r3, #3
 8001328:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800132a:	2307      	movs	r3, #7
 800132c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800132e:	f107 0314 	add.w	r3, r7, #20
 8001332:	4619      	mov	r1, r3
 8001334:	4805      	ldr	r0, [pc, #20]	; (800134c <HAL_UART_MspInit+0x8c>)
 8001336:	f000 f9fd 	bl	8001734 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800133a:	bf00      	nop
 800133c:	3728      	adds	r7, #40	; 0x28
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40004400 	.word	0x40004400
 8001348:	40023800 	.word	0x40023800
 800134c:	40020000 	.word	0x40020000

08001350 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001350:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001388 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001354:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001356:	e003      	b.n	8001360 <LoopCopyDataInit>

08001358 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001358:	4b0c      	ldr	r3, [pc, #48]	; (800138c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800135a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800135c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800135e:	3104      	adds	r1, #4

08001360 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001360:	480b      	ldr	r0, [pc, #44]	; (8001390 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001362:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001364:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001366:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001368:	d3f6      	bcc.n	8001358 <CopyDataInit>
  ldr  r2, =_sbss
 800136a:	4a0b      	ldr	r2, [pc, #44]	; (8001398 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800136c:	e002      	b.n	8001374 <LoopFillZerobss>

0800136e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800136e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001370:	f842 3b04 	str.w	r3, [r2], #4

08001374 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001374:	4b09      	ldr	r3, [pc, #36]	; (800139c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001376:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001378:	d3f9      	bcc.n	800136e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800137a:	f7ff fd97 	bl	8000eac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800137e:	f008 fc1f 	bl	8009bc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001382:	f7ff fad1 	bl	8000928 <main>
  bx  lr    
 8001386:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001388:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800138c:	08009df0 	.word	0x08009df0
  ldr  r0, =_sdata
 8001390:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001394:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8001398:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 800139c:	20000964 	.word	0x20000964

080013a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013a0:	e7fe      	b.n	80013a0 <ADC_IRQHandler>
	...

080013a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013a8:	4b0e      	ldr	r3, [pc, #56]	; (80013e4 <HAL_Init+0x40>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a0d      	ldr	r2, [pc, #52]	; (80013e4 <HAL_Init+0x40>)
 80013ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013b4:	4b0b      	ldr	r3, [pc, #44]	; (80013e4 <HAL_Init+0x40>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a0a      	ldr	r2, [pc, #40]	; (80013e4 <HAL_Init+0x40>)
 80013ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013c0:	4b08      	ldr	r3, [pc, #32]	; (80013e4 <HAL_Init+0x40>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a07      	ldr	r2, [pc, #28]	; (80013e4 <HAL_Init+0x40>)
 80013c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013cc:	2003      	movs	r0, #3
 80013ce:	f000 f94d 	bl	800166c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013d2:	2000      	movs	r0, #0
 80013d4:	f000 f808 	bl	80013e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013d8:	f7ff fcb0 	bl	8000d3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013dc:	2300      	movs	r3, #0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	40023c00 	.word	0x40023c00

080013e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013f0:	4b12      	ldr	r3, [pc, #72]	; (800143c <HAL_InitTick+0x54>)
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	4b12      	ldr	r3, [pc, #72]	; (8001440 <HAL_InitTick+0x58>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	4619      	mov	r1, r3
 80013fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001402:	fbb2 f3f3 	udiv	r3, r2, r3
 8001406:	4618      	mov	r0, r3
 8001408:	f000 f965 	bl	80016d6 <HAL_SYSTICK_Config>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e00e      	b.n	8001434 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2b0f      	cmp	r3, #15
 800141a:	d80a      	bhi.n	8001432 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800141c:	2200      	movs	r2, #0
 800141e:	6879      	ldr	r1, [r7, #4]
 8001420:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001424:	f000 f92d 	bl	8001682 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001428:	4a06      	ldr	r2, [pc, #24]	; (8001444 <HAL_InitTick+0x5c>)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800142e:	2300      	movs	r3, #0
 8001430:	e000      	b.n	8001434 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
}
 8001434:	4618      	mov	r0, r3
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	20000000 	.word	0x20000000
 8001440:	20000008 	.word	0x20000008
 8001444:	20000004 	.word	0x20000004

08001448 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800144c:	4b06      	ldr	r3, [pc, #24]	; (8001468 <HAL_IncTick+0x20>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	461a      	mov	r2, r3
 8001452:	4b06      	ldr	r3, [pc, #24]	; (800146c <HAL_IncTick+0x24>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4413      	add	r3, r2
 8001458:	4a04      	ldr	r2, [pc, #16]	; (800146c <HAL_IncTick+0x24>)
 800145a:	6013      	str	r3, [r2, #0]
}
 800145c:	bf00      	nop
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	20000008 	.word	0x20000008
 800146c:	200002c0 	.word	0x200002c0

08001470 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  return uwTick;
 8001474:	4b03      	ldr	r3, [pc, #12]	; (8001484 <HAL_GetTick+0x14>)
 8001476:	681b      	ldr	r3, [r3, #0]
}
 8001478:	4618      	mov	r0, r3
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	200002c0 	.word	0x200002c0

08001488 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001490:	f7ff ffee 	bl	8001470 <HAL_GetTick>
 8001494:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80014a0:	d005      	beq.n	80014ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014a2:	4b09      	ldr	r3, [pc, #36]	; (80014c8 <HAL_Delay+0x40>)
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	461a      	mov	r2, r3
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	4413      	add	r3, r2
 80014ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014ae:	bf00      	nop
 80014b0:	f7ff ffde 	bl	8001470 <HAL_GetTick>
 80014b4:	4602      	mov	r2, r0
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	68fa      	ldr	r2, [r7, #12]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d8f7      	bhi.n	80014b0 <HAL_Delay+0x28>
  {
  }
}
 80014c0:	bf00      	nop
 80014c2:	3710      	adds	r7, #16
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	20000008 	.word	0x20000008

080014cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b085      	sub	sp, #20
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	f003 0307 	and.w	r3, r3, #7
 80014da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014dc:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <__NVIC_SetPriorityGrouping+0x44>)
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014e2:	68ba      	ldr	r2, [r7, #8]
 80014e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014e8:	4013      	ands	r3, r2
 80014ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014fe:	4a04      	ldr	r2, [pc, #16]	; (8001510 <__NVIC_SetPriorityGrouping+0x44>)
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	60d3      	str	r3, [r2, #12]
}
 8001504:	bf00      	nop
 8001506:	3714      	adds	r7, #20
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr
 8001510:	e000ed00 	.word	0xe000ed00

08001514 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001518:	4b04      	ldr	r3, [pc, #16]	; (800152c <__NVIC_GetPriorityGrouping+0x18>)
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	0a1b      	lsrs	r3, r3, #8
 800151e:	f003 0307 	and.w	r3, r3, #7
}
 8001522:	4618      	mov	r0, r3
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr
 800152c:	e000ed00 	.word	0xe000ed00

08001530 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	4603      	mov	r3, r0
 8001538:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800153a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153e:	2b00      	cmp	r3, #0
 8001540:	db0b      	blt.n	800155a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001542:	79fb      	ldrb	r3, [r7, #7]
 8001544:	f003 021f 	and.w	r2, r3, #31
 8001548:	4907      	ldr	r1, [pc, #28]	; (8001568 <__NVIC_EnableIRQ+0x38>)
 800154a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154e:	095b      	lsrs	r3, r3, #5
 8001550:	2001      	movs	r0, #1
 8001552:	fa00 f202 	lsl.w	r2, r0, r2
 8001556:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800155a:	bf00      	nop
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	e000e100 	.word	0xe000e100

0800156c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	4603      	mov	r3, r0
 8001574:	6039      	str	r1, [r7, #0]
 8001576:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157c:	2b00      	cmp	r3, #0
 800157e:	db0a      	blt.n	8001596 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	b2da      	uxtb	r2, r3
 8001584:	490c      	ldr	r1, [pc, #48]	; (80015b8 <__NVIC_SetPriority+0x4c>)
 8001586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158a:	0112      	lsls	r2, r2, #4
 800158c:	b2d2      	uxtb	r2, r2
 800158e:	440b      	add	r3, r1
 8001590:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001594:	e00a      	b.n	80015ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	b2da      	uxtb	r2, r3
 800159a:	4908      	ldr	r1, [pc, #32]	; (80015bc <__NVIC_SetPriority+0x50>)
 800159c:	79fb      	ldrb	r3, [r7, #7]
 800159e:	f003 030f 	and.w	r3, r3, #15
 80015a2:	3b04      	subs	r3, #4
 80015a4:	0112      	lsls	r2, r2, #4
 80015a6:	b2d2      	uxtb	r2, r2
 80015a8:	440b      	add	r3, r1
 80015aa:	761a      	strb	r2, [r3, #24]
}
 80015ac:	bf00      	nop
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr
 80015b8:	e000e100 	.word	0xe000e100
 80015bc:	e000ed00 	.word	0xe000ed00

080015c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b089      	sub	sp, #36	; 0x24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	60b9      	str	r1, [r7, #8]
 80015ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	f003 0307 	and.w	r3, r3, #7
 80015d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	f1c3 0307 	rsb	r3, r3, #7
 80015da:	2b04      	cmp	r3, #4
 80015dc:	bf28      	it	cs
 80015de:	2304      	movcs	r3, #4
 80015e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	3304      	adds	r3, #4
 80015e6:	2b06      	cmp	r3, #6
 80015e8:	d902      	bls.n	80015f0 <NVIC_EncodePriority+0x30>
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	3b03      	subs	r3, #3
 80015ee:	e000      	b.n	80015f2 <NVIC_EncodePriority+0x32>
 80015f0:	2300      	movs	r3, #0
 80015f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	fa02 f303 	lsl.w	r3, r2, r3
 80015fe:	43da      	mvns	r2, r3
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	401a      	ands	r2, r3
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001608:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	fa01 f303 	lsl.w	r3, r1, r3
 8001612:	43d9      	mvns	r1, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001618:	4313      	orrs	r3, r2
         );
}
 800161a:	4618      	mov	r0, r3
 800161c:	3724      	adds	r7, #36	; 0x24
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
	...

08001628 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	3b01      	subs	r3, #1
 8001634:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001638:	d301      	bcc.n	800163e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800163a:	2301      	movs	r3, #1
 800163c:	e00f      	b.n	800165e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800163e:	4a0a      	ldr	r2, [pc, #40]	; (8001668 <SysTick_Config+0x40>)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	3b01      	subs	r3, #1
 8001644:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001646:	210f      	movs	r1, #15
 8001648:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800164c:	f7ff ff8e 	bl	800156c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001650:	4b05      	ldr	r3, [pc, #20]	; (8001668 <SysTick_Config+0x40>)
 8001652:	2200      	movs	r2, #0
 8001654:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001656:	4b04      	ldr	r3, [pc, #16]	; (8001668 <SysTick_Config+0x40>)
 8001658:	2207      	movs	r2, #7
 800165a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800165c:	2300      	movs	r3, #0
}
 800165e:	4618      	mov	r0, r3
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	e000e010 	.word	0xe000e010

0800166c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f7ff ff29 	bl	80014cc <__NVIC_SetPriorityGrouping>
}
 800167a:	bf00      	nop
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001682:	b580      	push	{r7, lr}
 8001684:	b086      	sub	sp, #24
 8001686:	af00      	add	r7, sp, #0
 8001688:	4603      	mov	r3, r0
 800168a:	60b9      	str	r1, [r7, #8]
 800168c:	607a      	str	r2, [r7, #4]
 800168e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001690:	2300      	movs	r3, #0
 8001692:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001694:	f7ff ff3e 	bl	8001514 <__NVIC_GetPriorityGrouping>
 8001698:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	68b9      	ldr	r1, [r7, #8]
 800169e:	6978      	ldr	r0, [r7, #20]
 80016a0:	f7ff ff8e 	bl	80015c0 <NVIC_EncodePriority>
 80016a4:	4602      	mov	r2, r0
 80016a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016aa:	4611      	mov	r1, r2
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7ff ff5d 	bl	800156c <__NVIC_SetPriority>
}
 80016b2:	bf00      	nop
 80016b4:	3718      	adds	r7, #24
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b082      	sub	sp, #8
 80016be:	af00      	add	r7, sp, #0
 80016c0:	4603      	mov	r3, r0
 80016c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff ff31 	bl	8001530 <__NVIC_EnableIRQ>
}
 80016ce:	bf00      	nop
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b082      	sub	sp, #8
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f7ff ffa2 	bl	8001628 <SysTick_Config>
 80016e4:	4603      	mov	r3, r0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80016ee:	b480      	push	{r7}
 80016f0:	b083      	sub	sp, #12
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d004      	beq.n	800170c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2280      	movs	r2, #128	; 0x80
 8001706:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e00c      	b.n	8001726 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2205      	movs	r2, #5
 8001710:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f022 0201 	bic.w	r2, r2, #1
 8001722:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
	...

08001734 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001734:	b480      	push	{r7}
 8001736:	b089      	sub	sp, #36	; 0x24
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800173e:	2300      	movs	r3, #0
 8001740:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001742:	2300      	movs	r3, #0
 8001744:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001746:	2300      	movs	r3, #0
 8001748:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800174a:	2300      	movs	r3, #0
 800174c:	61fb      	str	r3, [r7, #28]
 800174e:	e16b      	b.n	8001a28 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001750:	2201      	movs	r2, #1
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	fa02 f303 	lsl.w	r3, r2, r3
 8001758:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	697a      	ldr	r2, [r7, #20]
 8001760:	4013      	ands	r3, r2
 8001762:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001764:	693a      	ldr	r2, [r7, #16]
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	429a      	cmp	r2, r3
 800176a:	f040 815a 	bne.w	8001a22 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	2b01      	cmp	r3, #1
 8001774:	d00b      	beq.n	800178e <HAL_GPIO_Init+0x5a>
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	2b02      	cmp	r3, #2
 800177c:	d007      	beq.n	800178e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001782:	2b11      	cmp	r3, #17
 8001784:	d003      	beq.n	800178e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	2b12      	cmp	r3, #18
 800178c:	d130      	bne.n	80017f0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	005b      	lsls	r3, r3, #1
 8001798:	2203      	movs	r2, #3
 800179a:	fa02 f303 	lsl.w	r3, r2, r3
 800179e:	43db      	mvns	r3, r3
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	4013      	ands	r3, r2
 80017a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	68da      	ldr	r2, [r3, #12]
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	fa02 f303 	lsl.w	r3, r2, r3
 80017b2:	69ba      	ldr	r2, [r7, #24]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	69ba      	ldr	r2, [r7, #24]
 80017bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017c4:	2201      	movs	r2, #1
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	43db      	mvns	r3, r3
 80017ce:	69ba      	ldr	r2, [r7, #24]
 80017d0:	4013      	ands	r3, r2
 80017d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	091b      	lsrs	r3, r3, #4
 80017da:	f003 0201 	and.w	r2, r3, #1
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	fa02 f303 	lsl.w	r3, r2, r3
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	2203      	movs	r2, #3
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	43db      	mvns	r3, r3
 8001802:	69ba      	ldr	r2, [r7, #24]
 8001804:	4013      	ands	r3, r2
 8001806:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	689a      	ldr	r2, [r3, #8]
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	4313      	orrs	r3, r2
 8001818:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	2b02      	cmp	r3, #2
 8001826:	d003      	beq.n	8001830 <HAL_GPIO_Init+0xfc>
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	2b12      	cmp	r3, #18
 800182e:	d123      	bne.n	8001878 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	08da      	lsrs	r2, r3, #3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	3208      	adds	r2, #8
 8001838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800183c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	f003 0307 	and.w	r3, r3, #7
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	220f      	movs	r2, #15
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	43db      	mvns	r3, r3
 800184e:	69ba      	ldr	r2, [r7, #24]
 8001850:	4013      	ands	r3, r2
 8001852:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	691a      	ldr	r2, [r3, #16]
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	f003 0307 	and.w	r3, r3, #7
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	fa02 f303 	lsl.w	r3, r2, r3
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	4313      	orrs	r3, r2
 8001868:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	08da      	lsrs	r2, r3, #3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	3208      	adds	r2, #8
 8001872:	69b9      	ldr	r1, [r7, #24]
 8001874:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	2203      	movs	r2, #3
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	43db      	mvns	r3, r3
 800188a:	69ba      	ldr	r2, [r7, #24]
 800188c:	4013      	ands	r3, r2
 800188e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f003 0203 	and.w	r2, r3, #3
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	69ba      	ldr	r2, [r7, #24]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	f000 80b4 	beq.w	8001a22 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	60fb      	str	r3, [r7, #12]
 80018be:	4b5f      	ldr	r3, [pc, #380]	; (8001a3c <HAL_GPIO_Init+0x308>)
 80018c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c2:	4a5e      	ldr	r2, [pc, #376]	; (8001a3c <HAL_GPIO_Init+0x308>)
 80018c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018c8:	6453      	str	r3, [r2, #68]	; 0x44
 80018ca:	4b5c      	ldr	r3, [pc, #368]	; (8001a3c <HAL_GPIO_Init+0x308>)
 80018cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018d6:	4a5a      	ldr	r2, [pc, #360]	; (8001a40 <HAL_GPIO_Init+0x30c>)
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	089b      	lsrs	r3, r3, #2
 80018dc:	3302      	adds	r3, #2
 80018de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	f003 0303 	and.w	r3, r3, #3
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	220f      	movs	r2, #15
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	43db      	mvns	r3, r3
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	4013      	ands	r3, r2
 80018f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4a51      	ldr	r2, [pc, #324]	; (8001a44 <HAL_GPIO_Init+0x310>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d02b      	beq.n	800195a <HAL_GPIO_Init+0x226>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a50      	ldr	r2, [pc, #320]	; (8001a48 <HAL_GPIO_Init+0x314>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d025      	beq.n	8001956 <HAL_GPIO_Init+0x222>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4a4f      	ldr	r2, [pc, #316]	; (8001a4c <HAL_GPIO_Init+0x318>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d01f      	beq.n	8001952 <HAL_GPIO_Init+0x21e>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a4e      	ldr	r2, [pc, #312]	; (8001a50 <HAL_GPIO_Init+0x31c>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d019      	beq.n	800194e <HAL_GPIO_Init+0x21a>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4a4d      	ldr	r2, [pc, #308]	; (8001a54 <HAL_GPIO_Init+0x320>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d013      	beq.n	800194a <HAL_GPIO_Init+0x216>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4a4c      	ldr	r2, [pc, #304]	; (8001a58 <HAL_GPIO_Init+0x324>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d00d      	beq.n	8001946 <HAL_GPIO_Init+0x212>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4a4b      	ldr	r2, [pc, #300]	; (8001a5c <HAL_GPIO_Init+0x328>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d007      	beq.n	8001942 <HAL_GPIO_Init+0x20e>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4a4a      	ldr	r2, [pc, #296]	; (8001a60 <HAL_GPIO_Init+0x32c>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d101      	bne.n	800193e <HAL_GPIO_Init+0x20a>
 800193a:	2307      	movs	r3, #7
 800193c:	e00e      	b.n	800195c <HAL_GPIO_Init+0x228>
 800193e:	2308      	movs	r3, #8
 8001940:	e00c      	b.n	800195c <HAL_GPIO_Init+0x228>
 8001942:	2306      	movs	r3, #6
 8001944:	e00a      	b.n	800195c <HAL_GPIO_Init+0x228>
 8001946:	2305      	movs	r3, #5
 8001948:	e008      	b.n	800195c <HAL_GPIO_Init+0x228>
 800194a:	2304      	movs	r3, #4
 800194c:	e006      	b.n	800195c <HAL_GPIO_Init+0x228>
 800194e:	2303      	movs	r3, #3
 8001950:	e004      	b.n	800195c <HAL_GPIO_Init+0x228>
 8001952:	2302      	movs	r3, #2
 8001954:	e002      	b.n	800195c <HAL_GPIO_Init+0x228>
 8001956:	2301      	movs	r3, #1
 8001958:	e000      	b.n	800195c <HAL_GPIO_Init+0x228>
 800195a:	2300      	movs	r3, #0
 800195c:	69fa      	ldr	r2, [r7, #28]
 800195e:	f002 0203 	and.w	r2, r2, #3
 8001962:	0092      	lsls	r2, r2, #2
 8001964:	4093      	lsls	r3, r2
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	4313      	orrs	r3, r2
 800196a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800196c:	4934      	ldr	r1, [pc, #208]	; (8001a40 <HAL_GPIO_Init+0x30c>)
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	089b      	lsrs	r3, r3, #2
 8001972:	3302      	adds	r3, #2
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800197a:	4b3a      	ldr	r3, [pc, #232]	; (8001a64 <HAL_GPIO_Init+0x330>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	43db      	mvns	r3, r3
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	4013      	ands	r3, r2
 8001988:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d003      	beq.n	800199e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	4313      	orrs	r3, r2
 800199c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800199e:	4a31      	ldr	r2, [pc, #196]	; (8001a64 <HAL_GPIO_Init+0x330>)
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80019a4:	4b2f      	ldr	r3, [pc, #188]	; (8001a64 <HAL_GPIO_Init+0x330>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	43db      	mvns	r3, r3
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	4013      	ands	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d003      	beq.n	80019c8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019c8:	4a26      	ldr	r2, [pc, #152]	; (8001a64 <HAL_GPIO_Init+0x330>)
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019ce:	4b25      	ldr	r3, [pc, #148]	; (8001a64 <HAL_GPIO_Init+0x330>)
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	43db      	mvns	r3, r3
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	4013      	ands	r3, r2
 80019dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d003      	beq.n	80019f2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80019ea:	69ba      	ldr	r2, [r7, #24]
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019f2:	4a1c      	ldr	r2, [pc, #112]	; (8001a64 <HAL_GPIO_Init+0x330>)
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019f8:	4b1a      	ldr	r3, [pc, #104]	; (8001a64 <HAL_GPIO_Init+0x330>)
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	43db      	mvns	r3, r3
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	4013      	ands	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d003      	beq.n	8001a1c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a1c:	4a11      	ldr	r2, [pc, #68]	; (8001a64 <HAL_GPIO_Init+0x330>)
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	3301      	adds	r3, #1
 8001a26:	61fb      	str	r3, [r7, #28]
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	2b0f      	cmp	r3, #15
 8001a2c:	f67f ae90 	bls.w	8001750 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a30:	bf00      	nop
 8001a32:	3724      	adds	r7, #36	; 0x24
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr
 8001a3c:	40023800 	.word	0x40023800
 8001a40:	40013800 	.word	0x40013800
 8001a44:	40020000 	.word	0x40020000
 8001a48:	40020400 	.word	0x40020400
 8001a4c:	40020800 	.word	0x40020800
 8001a50:	40020c00 	.word	0x40020c00
 8001a54:	40021000 	.word	0x40021000
 8001a58:	40021400 	.word	0x40021400
 8001a5c:	40021800 	.word	0x40021800
 8001a60:	40021c00 	.word	0x40021c00
 8001a64:	40013c00 	.word	0x40013c00

08001a68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	460b      	mov	r3, r1
 8001a72:	807b      	strh	r3, [r7, #2]
 8001a74:	4613      	mov	r3, r2
 8001a76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a78:	787b      	ldrb	r3, [r7, #1]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d003      	beq.n	8001a86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a7e:	887a      	ldrh	r2, [r7, #2]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a84:	e003      	b.n	8001a8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a86:	887b      	ldrh	r3, [r7, #2]
 8001a88:	041a      	lsls	r2, r3, #16
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	619a      	str	r2, [r3, #24]
}
 8001a8e:	bf00      	nop
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr

08001a9a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	b083      	sub	sp, #12
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	695a      	ldr	r2, [r3, #20]
 8001aaa:	887b      	ldrh	r3, [r7, #2]
 8001aac:	401a      	ands	r2, r3
 8001aae:	887b      	ldrh	r3, [r7, #2]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d104      	bne.n	8001abe <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001ab4:	887b      	ldrh	r3, [r7, #2]
 8001ab6:	041a      	lsls	r2, r3, #16
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001abc:	e002      	b.n	8001ac4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001abe:	887a      	ldrh	r2, [r7, #2]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	619a      	str	r2, [r3, #24]
}
 8001ac4:	bf00      	nop
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001ada:	4b08      	ldr	r3, [pc, #32]	; (8001afc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001adc:	695a      	ldr	r2, [r3, #20]
 8001ade:	88fb      	ldrh	r3, [r7, #6]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d006      	beq.n	8001af4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ae6:	4a05      	ldr	r2, [pc, #20]	; (8001afc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ae8:	88fb      	ldrh	r3, [r7, #6]
 8001aea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001aec:	88fb      	ldrh	r3, [r7, #6]
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7ff f872 	bl	8000bd8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001af4:	bf00      	nop
 8001af6:	3708      	adds	r7, #8
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	40013c00 	.word	0x40013c00

08001b00 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001b00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b02:	b08f      	sub	sp, #60	; 0x3c
 8001b04:	af0a      	add	r7, sp, #40	; 0x28
 8001b06:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d101      	bne.n	8001b12 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e054      	b.n	8001bbc <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d106      	bne.n	8001b32 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2200      	movs	r2, #0
 8001b28:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f007 fd9f 	bl	8009670 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2203      	movs	r2, #3
 8001b36:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d102      	bne.n	8001b4c <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f004 ff5d 	bl	8006a10 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	603b      	str	r3, [r7, #0]
 8001b5c:	687e      	ldr	r6, [r7, #4]
 8001b5e:	466d      	mov	r5, sp
 8001b60:	f106 0410 	add.w	r4, r6, #16
 8001b64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b6c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b70:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b74:	1d33      	adds	r3, r6, #4
 8001b76:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b78:	6838      	ldr	r0, [r7, #0]
 8001b7a:	f004 fed7 	bl	800692c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2101      	movs	r1, #1
 8001b84:	4618      	mov	r0, r3
 8001b86:	f004 ff54 	bl	8006a32 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	603b      	str	r3, [r7, #0]
 8001b90:	687e      	ldr	r6, [r7, #4]
 8001b92:	466d      	mov	r5, sp
 8001b94:	f106 0410 	add.w	r4, r6, #16
 8001b98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ba0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ba4:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ba8:	1d33      	adds	r3, r6, #4
 8001baa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001bac:	6838      	ldr	r0, [r7, #0]
 8001bae:	f005 f867 	bl	8006c80 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8001bba:	2300      	movs	r3, #0
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3714      	adds	r7, #20
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001bc4 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001bc4:	b590      	push	{r4, r7, lr}
 8001bc6:	b089      	sub	sp, #36	; 0x24
 8001bc8:	af04      	add	r7, sp, #16
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	4608      	mov	r0, r1
 8001bce:	4611      	mov	r1, r2
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	70fb      	strb	r3, [r7, #3]
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	70bb      	strb	r3, [r7, #2]
 8001bda:	4613      	mov	r3, r2
 8001bdc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d101      	bne.n	8001bec <HAL_HCD_HC_Init+0x28>
 8001be8:	2302      	movs	r3, #2
 8001bea:	e07f      	b.n	8001cec <HAL_HCD_HC_Init+0x128>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8001bf4:	78fa      	ldrb	r2, [r7, #3]
 8001bf6:	6879      	ldr	r1, [r7, #4]
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	4413      	add	r3, r2
 8001bfe:	00db      	lsls	r3, r3, #3
 8001c00:	440b      	add	r3, r1
 8001c02:	333d      	adds	r3, #61	; 0x3d
 8001c04:	2200      	movs	r2, #0
 8001c06:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001c08:	78fa      	ldrb	r2, [r7, #3]
 8001c0a:	6879      	ldr	r1, [r7, #4]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	4413      	add	r3, r2
 8001c12:	00db      	lsls	r3, r3, #3
 8001c14:	440b      	add	r3, r1
 8001c16:	3338      	adds	r3, #56	; 0x38
 8001c18:	787a      	ldrb	r2, [r7, #1]
 8001c1a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001c1c:	78fa      	ldrb	r2, [r7, #3]
 8001c1e:	6879      	ldr	r1, [r7, #4]
 8001c20:	4613      	mov	r3, r2
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	4413      	add	r3, r2
 8001c26:	00db      	lsls	r3, r3, #3
 8001c28:	440b      	add	r3, r1
 8001c2a:	3340      	adds	r3, #64	; 0x40
 8001c2c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001c2e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001c30:	78fa      	ldrb	r2, [r7, #3]
 8001c32:	6879      	ldr	r1, [r7, #4]
 8001c34:	4613      	mov	r3, r2
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	4413      	add	r3, r2
 8001c3a:	00db      	lsls	r3, r3, #3
 8001c3c:	440b      	add	r3, r1
 8001c3e:	3339      	adds	r3, #57	; 0x39
 8001c40:	78fa      	ldrb	r2, [r7, #3]
 8001c42:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001c44:	78fa      	ldrb	r2, [r7, #3]
 8001c46:	6879      	ldr	r1, [r7, #4]
 8001c48:	4613      	mov	r3, r2
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	4413      	add	r3, r2
 8001c4e:	00db      	lsls	r3, r3, #3
 8001c50:	440b      	add	r3, r1
 8001c52:	333f      	adds	r3, #63	; 0x3f
 8001c54:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001c58:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001c5a:	78fa      	ldrb	r2, [r7, #3]
 8001c5c:	78bb      	ldrb	r3, [r7, #2]
 8001c5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c62:	b2d8      	uxtb	r0, r3
 8001c64:	6879      	ldr	r1, [r7, #4]
 8001c66:	4613      	mov	r3, r2
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	4413      	add	r3, r2
 8001c6c:	00db      	lsls	r3, r3, #3
 8001c6e:	440b      	add	r3, r1
 8001c70:	333a      	adds	r3, #58	; 0x3a
 8001c72:	4602      	mov	r2, r0
 8001c74:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001c76:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	da0a      	bge.n	8001c94 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001c7e:	78fa      	ldrb	r2, [r7, #3]
 8001c80:	6879      	ldr	r1, [r7, #4]
 8001c82:	4613      	mov	r3, r2
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	4413      	add	r3, r2
 8001c88:	00db      	lsls	r3, r3, #3
 8001c8a:	440b      	add	r3, r1
 8001c8c:	333b      	adds	r3, #59	; 0x3b
 8001c8e:	2201      	movs	r2, #1
 8001c90:	701a      	strb	r2, [r3, #0]
 8001c92:	e009      	b.n	8001ca8 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001c94:	78fa      	ldrb	r2, [r7, #3]
 8001c96:	6879      	ldr	r1, [r7, #4]
 8001c98:	4613      	mov	r3, r2
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	4413      	add	r3, r2
 8001c9e:	00db      	lsls	r3, r3, #3
 8001ca0:	440b      	add	r3, r1
 8001ca2:	333b      	adds	r3, #59	; 0x3b
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001ca8:	78fa      	ldrb	r2, [r7, #3]
 8001caa:	6879      	ldr	r1, [r7, #4]
 8001cac:	4613      	mov	r3, r2
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	4413      	add	r3, r2
 8001cb2:	00db      	lsls	r3, r3, #3
 8001cb4:	440b      	add	r3, r1
 8001cb6:	333c      	adds	r3, #60	; 0x3c
 8001cb8:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001cbc:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6818      	ldr	r0, [r3, #0]
 8001cc2:	787c      	ldrb	r4, [r7, #1]
 8001cc4:	78ba      	ldrb	r2, [r7, #2]
 8001cc6:	78f9      	ldrb	r1, [r7, #3]
 8001cc8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001cca:	9302      	str	r3, [sp, #8]
 8001ccc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001cd0:	9301      	str	r3, [sp, #4]
 8001cd2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001cd6:	9300      	str	r3, [sp, #0]
 8001cd8:	4623      	mov	r3, r4
 8001cda:	f005 f953 	bl	8006f84 <USB_HC_Init>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001cea:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3714      	adds	r7, #20
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd90      	pop	{r4, r7, pc}

08001cf4 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001d00:	2300      	movs	r3, #0
 8001d02:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d101      	bne.n	8001d12 <HAL_HCD_HC_Halt+0x1e>
 8001d0e:	2302      	movs	r3, #2
 8001d10:	e00f      	b.n	8001d32 <HAL_HCD_HC_Halt+0x3e>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2201      	movs	r2, #1
 8001d16:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	78fa      	ldrb	r2, [r7, #3]
 8001d20:	4611      	mov	r1, r2
 8001d22:	4618      	mov	r0, r3
 8001d24:	f005 fb8d 	bl	8007442 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
	...

08001d3c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	4608      	mov	r0, r1
 8001d46:	4611      	mov	r1, r2
 8001d48:	461a      	mov	r2, r3
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	70fb      	strb	r3, [r7, #3]
 8001d4e:	460b      	mov	r3, r1
 8001d50:	70bb      	strb	r3, [r7, #2]
 8001d52:	4613      	mov	r3, r2
 8001d54:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001d56:	78fa      	ldrb	r2, [r7, #3]
 8001d58:	6879      	ldr	r1, [r7, #4]
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	4413      	add	r3, r2
 8001d60:	00db      	lsls	r3, r3, #3
 8001d62:	440b      	add	r3, r1
 8001d64:	333b      	adds	r3, #59	; 0x3b
 8001d66:	78ba      	ldrb	r2, [r7, #2]
 8001d68:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001d6a:	78fa      	ldrb	r2, [r7, #3]
 8001d6c:	6879      	ldr	r1, [r7, #4]
 8001d6e:	4613      	mov	r3, r2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	4413      	add	r3, r2
 8001d74:	00db      	lsls	r3, r3, #3
 8001d76:	440b      	add	r3, r1
 8001d78:	333f      	adds	r3, #63	; 0x3f
 8001d7a:	787a      	ldrb	r2, [r7, #1]
 8001d7c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001d7e:	7c3b      	ldrb	r3, [r7, #16]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d114      	bne.n	8001dae <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001d84:	78fa      	ldrb	r2, [r7, #3]
 8001d86:	6879      	ldr	r1, [r7, #4]
 8001d88:	4613      	mov	r3, r2
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	4413      	add	r3, r2
 8001d8e:	00db      	lsls	r3, r3, #3
 8001d90:	440b      	add	r3, r1
 8001d92:	3342      	adds	r3, #66	; 0x42
 8001d94:	2203      	movs	r2, #3
 8001d96:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001d98:	78fa      	ldrb	r2, [r7, #3]
 8001d9a:	6879      	ldr	r1, [r7, #4]
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	4413      	add	r3, r2
 8001da2:	00db      	lsls	r3, r3, #3
 8001da4:	440b      	add	r3, r1
 8001da6:	333d      	adds	r3, #61	; 0x3d
 8001da8:	7f3a      	ldrb	r2, [r7, #28]
 8001daa:	701a      	strb	r2, [r3, #0]
 8001dac:	e009      	b.n	8001dc2 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001dae:	78fa      	ldrb	r2, [r7, #3]
 8001db0:	6879      	ldr	r1, [r7, #4]
 8001db2:	4613      	mov	r3, r2
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	4413      	add	r3, r2
 8001db8:	00db      	lsls	r3, r3, #3
 8001dba:	440b      	add	r3, r1
 8001dbc:	3342      	adds	r3, #66	; 0x42
 8001dbe:	2202      	movs	r2, #2
 8001dc0:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001dc2:	787b      	ldrb	r3, [r7, #1]
 8001dc4:	2b03      	cmp	r3, #3
 8001dc6:	f200 80d6 	bhi.w	8001f76 <HAL_HCD_HC_SubmitRequest+0x23a>
 8001dca:	a201      	add	r2, pc, #4	; (adr r2, 8001dd0 <HAL_HCD_HC_SubmitRequest+0x94>)
 8001dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dd0:	08001de1 	.word	0x08001de1
 8001dd4:	08001f61 	.word	0x08001f61
 8001dd8:	08001e4d 	.word	0x08001e4d
 8001ddc:	08001ed7 	.word	0x08001ed7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001de0:	7c3b      	ldrb	r3, [r7, #16]
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	f040 80c9 	bne.w	8001f7a <HAL_HCD_HC_SubmitRequest+0x23e>
 8001de8:	78bb      	ldrb	r3, [r7, #2]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	f040 80c5 	bne.w	8001f7a <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8001df0:	8b3b      	ldrh	r3, [r7, #24]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d109      	bne.n	8001e0a <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001df6:	78fa      	ldrb	r2, [r7, #3]
 8001df8:	6879      	ldr	r1, [r7, #4]
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	4413      	add	r3, r2
 8001e00:	00db      	lsls	r3, r3, #3
 8001e02:	440b      	add	r3, r1
 8001e04:	3351      	adds	r3, #81	; 0x51
 8001e06:	2201      	movs	r2, #1
 8001e08:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001e0a:	78fa      	ldrb	r2, [r7, #3]
 8001e0c:	6879      	ldr	r1, [r7, #4]
 8001e0e:	4613      	mov	r3, r2
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	4413      	add	r3, r2
 8001e14:	00db      	lsls	r3, r3, #3
 8001e16:	440b      	add	r3, r1
 8001e18:	3351      	adds	r3, #81	; 0x51
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d10a      	bne.n	8001e36 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001e20:	78fa      	ldrb	r2, [r7, #3]
 8001e22:	6879      	ldr	r1, [r7, #4]
 8001e24:	4613      	mov	r3, r2
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	4413      	add	r3, r2
 8001e2a:	00db      	lsls	r3, r3, #3
 8001e2c:	440b      	add	r3, r1
 8001e2e:	3342      	adds	r3, #66	; 0x42
 8001e30:	2200      	movs	r2, #0
 8001e32:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001e34:	e0a1      	b.n	8001f7a <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001e36:	78fa      	ldrb	r2, [r7, #3]
 8001e38:	6879      	ldr	r1, [r7, #4]
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	4413      	add	r3, r2
 8001e40:	00db      	lsls	r3, r3, #3
 8001e42:	440b      	add	r3, r1
 8001e44:	3342      	adds	r3, #66	; 0x42
 8001e46:	2202      	movs	r2, #2
 8001e48:	701a      	strb	r2, [r3, #0]
      break;
 8001e4a:	e096      	b.n	8001f7a <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001e4c:	78bb      	ldrb	r3, [r7, #2]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d120      	bne.n	8001e94 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001e52:	78fa      	ldrb	r2, [r7, #3]
 8001e54:	6879      	ldr	r1, [r7, #4]
 8001e56:	4613      	mov	r3, r2
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	4413      	add	r3, r2
 8001e5c:	00db      	lsls	r3, r3, #3
 8001e5e:	440b      	add	r3, r1
 8001e60:	3351      	adds	r3, #81	; 0x51
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d10a      	bne.n	8001e7e <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001e68:	78fa      	ldrb	r2, [r7, #3]
 8001e6a:	6879      	ldr	r1, [r7, #4]
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	4413      	add	r3, r2
 8001e72:	00db      	lsls	r3, r3, #3
 8001e74:	440b      	add	r3, r1
 8001e76:	3342      	adds	r3, #66	; 0x42
 8001e78:	2200      	movs	r2, #0
 8001e7a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001e7c:	e07e      	b.n	8001f7c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001e7e:	78fa      	ldrb	r2, [r7, #3]
 8001e80:	6879      	ldr	r1, [r7, #4]
 8001e82:	4613      	mov	r3, r2
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	4413      	add	r3, r2
 8001e88:	00db      	lsls	r3, r3, #3
 8001e8a:	440b      	add	r3, r1
 8001e8c:	3342      	adds	r3, #66	; 0x42
 8001e8e:	2202      	movs	r2, #2
 8001e90:	701a      	strb	r2, [r3, #0]
      break;
 8001e92:	e073      	b.n	8001f7c <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001e94:	78fa      	ldrb	r2, [r7, #3]
 8001e96:	6879      	ldr	r1, [r7, #4]
 8001e98:	4613      	mov	r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	4413      	add	r3, r2
 8001e9e:	00db      	lsls	r3, r3, #3
 8001ea0:	440b      	add	r3, r1
 8001ea2:	3350      	adds	r3, #80	; 0x50
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d10a      	bne.n	8001ec0 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001eaa:	78fa      	ldrb	r2, [r7, #3]
 8001eac:	6879      	ldr	r1, [r7, #4]
 8001eae:	4613      	mov	r3, r2
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	4413      	add	r3, r2
 8001eb4:	00db      	lsls	r3, r3, #3
 8001eb6:	440b      	add	r3, r1
 8001eb8:	3342      	adds	r3, #66	; 0x42
 8001eba:	2200      	movs	r2, #0
 8001ebc:	701a      	strb	r2, [r3, #0]
      break;
 8001ebe:	e05d      	b.n	8001f7c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ec0:	78fa      	ldrb	r2, [r7, #3]
 8001ec2:	6879      	ldr	r1, [r7, #4]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	4413      	add	r3, r2
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	440b      	add	r3, r1
 8001ece:	3342      	adds	r3, #66	; 0x42
 8001ed0:	2202      	movs	r2, #2
 8001ed2:	701a      	strb	r2, [r3, #0]
      break;
 8001ed4:	e052      	b.n	8001f7c <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001ed6:	78bb      	ldrb	r3, [r7, #2]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d120      	bne.n	8001f1e <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001edc:	78fa      	ldrb	r2, [r7, #3]
 8001ede:	6879      	ldr	r1, [r7, #4]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	4413      	add	r3, r2
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	440b      	add	r3, r1
 8001eea:	3351      	adds	r3, #81	; 0x51
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d10a      	bne.n	8001f08 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ef2:	78fa      	ldrb	r2, [r7, #3]
 8001ef4:	6879      	ldr	r1, [r7, #4]
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	4413      	add	r3, r2
 8001efc:	00db      	lsls	r3, r3, #3
 8001efe:	440b      	add	r3, r1
 8001f00:	3342      	adds	r3, #66	; 0x42
 8001f02:	2200      	movs	r2, #0
 8001f04:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001f06:	e039      	b.n	8001f7c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001f08:	78fa      	ldrb	r2, [r7, #3]
 8001f0a:	6879      	ldr	r1, [r7, #4]
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	4413      	add	r3, r2
 8001f12:	00db      	lsls	r3, r3, #3
 8001f14:	440b      	add	r3, r1
 8001f16:	3342      	adds	r3, #66	; 0x42
 8001f18:	2202      	movs	r2, #2
 8001f1a:	701a      	strb	r2, [r3, #0]
      break;
 8001f1c:	e02e      	b.n	8001f7c <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001f1e:	78fa      	ldrb	r2, [r7, #3]
 8001f20:	6879      	ldr	r1, [r7, #4]
 8001f22:	4613      	mov	r3, r2
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	4413      	add	r3, r2
 8001f28:	00db      	lsls	r3, r3, #3
 8001f2a:	440b      	add	r3, r1
 8001f2c:	3350      	adds	r3, #80	; 0x50
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d10a      	bne.n	8001f4a <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001f34:	78fa      	ldrb	r2, [r7, #3]
 8001f36:	6879      	ldr	r1, [r7, #4]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	4413      	add	r3, r2
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	440b      	add	r3, r1
 8001f42:	3342      	adds	r3, #66	; 0x42
 8001f44:	2200      	movs	r2, #0
 8001f46:	701a      	strb	r2, [r3, #0]
      break;
 8001f48:	e018      	b.n	8001f7c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001f4a:	78fa      	ldrb	r2, [r7, #3]
 8001f4c:	6879      	ldr	r1, [r7, #4]
 8001f4e:	4613      	mov	r3, r2
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	4413      	add	r3, r2
 8001f54:	00db      	lsls	r3, r3, #3
 8001f56:	440b      	add	r3, r1
 8001f58:	3342      	adds	r3, #66	; 0x42
 8001f5a:	2202      	movs	r2, #2
 8001f5c:	701a      	strb	r2, [r3, #0]
      break;
 8001f5e:	e00d      	b.n	8001f7c <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001f60:	78fa      	ldrb	r2, [r7, #3]
 8001f62:	6879      	ldr	r1, [r7, #4]
 8001f64:	4613      	mov	r3, r2
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	4413      	add	r3, r2
 8001f6a:	00db      	lsls	r3, r3, #3
 8001f6c:	440b      	add	r3, r1
 8001f6e:	3342      	adds	r3, #66	; 0x42
 8001f70:	2200      	movs	r2, #0
 8001f72:	701a      	strb	r2, [r3, #0]
      break;
 8001f74:	e002      	b.n	8001f7c <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8001f76:	bf00      	nop
 8001f78:	e000      	b.n	8001f7c <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8001f7a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001f7c:	78fa      	ldrb	r2, [r7, #3]
 8001f7e:	6879      	ldr	r1, [r7, #4]
 8001f80:	4613      	mov	r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	4413      	add	r3, r2
 8001f86:	00db      	lsls	r3, r3, #3
 8001f88:	440b      	add	r3, r1
 8001f8a:	3344      	adds	r3, #68	; 0x44
 8001f8c:	697a      	ldr	r2, [r7, #20]
 8001f8e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001f90:	78fa      	ldrb	r2, [r7, #3]
 8001f92:	8b39      	ldrh	r1, [r7, #24]
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	4613      	mov	r3, r2
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	4413      	add	r3, r2
 8001f9c:	00db      	lsls	r3, r3, #3
 8001f9e:	4403      	add	r3, r0
 8001fa0:	3348      	adds	r3, #72	; 0x48
 8001fa2:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001fa4:	78fa      	ldrb	r2, [r7, #3]
 8001fa6:	6879      	ldr	r1, [r7, #4]
 8001fa8:	4613      	mov	r3, r2
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	4413      	add	r3, r2
 8001fae:	00db      	lsls	r3, r3, #3
 8001fb0:	440b      	add	r3, r1
 8001fb2:	335c      	adds	r3, #92	; 0x5c
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001fb8:	78fa      	ldrb	r2, [r7, #3]
 8001fba:	6879      	ldr	r1, [r7, #4]
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	4413      	add	r3, r2
 8001fc2:	00db      	lsls	r3, r3, #3
 8001fc4:	440b      	add	r3, r1
 8001fc6:	334c      	adds	r3, #76	; 0x4c
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001fcc:	78fa      	ldrb	r2, [r7, #3]
 8001fce:	6879      	ldr	r1, [r7, #4]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	4413      	add	r3, r2
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	440b      	add	r3, r1
 8001fda:	3339      	adds	r3, #57	; 0x39
 8001fdc:	78fa      	ldrb	r2, [r7, #3]
 8001fde:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001fe0:	78fa      	ldrb	r2, [r7, #3]
 8001fe2:	6879      	ldr	r1, [r7, #4]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	4413      	add	r3, r2
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	440b      	add	r3, r1
 8001fee:	335d      	adds	r3, #93	; 0x5d
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6818      	ldr	r0, [r3, #0]
 8001ff8:	78fa      	ldrb	r2, [r7, #3]
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	4413      	add	r3, r2
 8002000:	00db      	lsls	r3, r3, #3
 8002002:	3338      	adds	r3, #56	; 0x38
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	18d1      	adds	r1, r2, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	691b      	ldr	r3, [r3, #16]
 800200c:	b2db      	uxtb	r3, r3
 800200e:	461a      	mov	r2, r3
 8002010:	f005 f8c2 	bl	8007198 <USB_HC_StartXfer>
 8002014:	4603      	mov	r3, r0
}
 8002016:	4618      	mov	r0, r3
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop

08002020 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b086      	sub	sp, #24
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4618      	mov	r0, r3
 8002038:	f004 fddf 	bl	8006bfa <USB_GetMode>
 800203c:	4603      	mov	r3, r0
 800203e:	2b01      	cmp	r3, #1
 8002040:	f040 80ef 	bne.w	8002222 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4618      	mov	r0, r3
 800204a:	f004 fdc3 	bl	8006bd4 <USB_ReadInterrupts>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	f000 80e5 	beq.w	8002220 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4618      	mov	r0, r3
 800205c:	f004 fdba 	bl	8006bd4 <USB_ReadInterrupts>
 8002060:	4603      	mov	r3, r0
 8002062:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002066:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800206a:	d104      	bne.n	8002076 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002074:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4618      	mov	r0, r3
 800207c:	f004 fdaa 	bl	8006bd4 <USB_ReadInterrupts>
 8002080:	4603      	mov	r3, r0
 8002082:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002086:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800208a:	d104      	bne.n	8002096 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002094:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4618      	mov	r0, r3
 800209c:	f004 fd9a 	bl	8006bd4 <USB_ReadInterrupts>
 80020a0:	4603      	mov	r3, r0
 80020a2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80020a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80020aa:	d104      	bne.n	80020b6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80020b4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f004 fd8a 	bl	8006bd4 <USB_ReadInterrupts>
 80020c0:	4603      	mov	r3, r0
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d103      	bne.n	80020d2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2202      	movs	r2, #2
 80020d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f004 fd7c 	bl	8006bd4 <USB_ReadInterrupts>
 80020dc:	4603      	mov	r3, r0
 80020de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80020e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80020e6:	d115      	bne.n	8002114 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80020f0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0301 	and.w	r3, r3, #1
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d108      	bne.n	8002114 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f007 fb2a 	bl	800975c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2101      	movs	r1, #1
 800210e:	4618      	mov	r0, r3
 8002110:	f004 fe72 	bl	8006df8 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4618      	mov	r0, r3
 800211a:	f004 fd5b 	bl	8006bd4 <USB_ReadInterrupts>
 800211e:	4603      	mov	r3, r0
 8002120:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002124:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002128:	d102      	bne.n	8002130 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f001 f966 	bl	80033fc <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4618      	mov	r0, r3
 8002136:	f004 fd4d 	bl	8006bd4 <USB_ReadInterrupts>
 800213a:	4603      	mov	r3, r0
 800213c:	f003 0308 	and.w	r3, r3, #8
 8002140:	2b08      	cmp	r3, #8
 8002142:	d106      	bne.n	8002152 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f007 faed 	bl	8009724 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	2208      	movs	r2, #8
 8002150:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4618      	mov	r0, r3
 8002158:	f004 fd3c 	bl	8006bd4 <USB_ReadInterrupts>
 800215c:	4603      	mov	r3, r0
 800215e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002162:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002166:	d138      	bne.n	80021da <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4618      	mov	r0, r3
 800216e:	f005 f957 	bl	8007420 <USB_HC_ReadInterrupt>
 8002172:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002174:	2300      	movs	r3, #0
 8002176:	617b      	str	r3, [r7, #20]
 8002178:	e025      	b.n	80021c6 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	f003 030f 	and.w	r3, r3, #15
 8002180:	68ba      	ldr	r2, [r7, #8]
 8002182:	fa22 f303 	lsr.w	r3, r2, r3
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	2b00      	cmp	r3, #0
 800218c:	d018      	beq.n	80021c0 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	015a      	lsls	r2, r3, #5
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	4413      	add	r3, r2
 8002196:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021a4:	d106      	bne.n	80021b4 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	4619      	mov	r1, r3
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f000 f8cf 	bl	8002350 <HCD_HC_IN_IRQHandler>
 80021b2:	e005      	b.n	80021c0 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	4619      	mov	r1, r3
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f000 fcfd 	bl	8002bba <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	3301      	adds	r3, #1
 80021c4:	617b      	str	r3, [r7, #20]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	697a      	ldr	r2, [r7, #20]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d3d4      	bcc.n	800217a <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4618      	mov	r0, r3
 80021e0:	f004 fcf8 	bl	8006bd4 <USB_ReadInterrupts>
 80021e4:	4603      	mov	r3, r0
 80021e6:	f003 0310 	and.w	r3, r3, #16
 80021ea:	2b10      	cmp	r3, #16
 80021ec:	d101      	bne.n	80021f2 <HAL_HCD_IRQHandler+0x1d2>
 80021ee:	2301      	movs	r3, #1
 80021f0:	e000      	b.n	80021f4 <HAL_HCD_IRQHandler+0x1d4>
 80021f2:	2300      	movs	r3, #0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d014      	beq.n	8002222 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	699a      	ldr	r2, [r3, #24]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f022 0210 	bic.w	r2, r2, #16
 8002206:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f001 f84b 	bl	80032a4 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	699a      	ldr	r2, [r3, #24]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f042 0210 	orr.w	r2, r2, #16
 800221c:	619a      	str	r2, [r3, #24]
 800221e:	e000      	b.n	8002222 <HAL_HCD_IRQHandler+0x202>
      return;
 8002220:	bf00      	nop
    }
  }
}
 8002222:	3718      	adds	r7, #24
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002236:	2b01      	cmp	r3, #1
 8002238:	d101      	bne.n	800223e <HAL_HCD_Start+0x16>
 800223a:	2302      	movs	r3, #2
 800223c:	e013      	b.n	8002266 <HAL_HCD_Start+0x3e>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2201      	movs	r2, #1
 8002242:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4618      	mov	r0, r3
 800224c:	f004 fbcf 	bl	80069ee <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	2101      	movs	r1, #1
 8002256:	4618      	mov	r0, r3
 8002258:	f004 fe32 	bl	8006ec0 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800226e:	b580      	push	{r7, lr}
 8002270:	b082      	sub	sp, #8
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800227c:	2b01      	cmp	r3, #1
 800227e:	d101      	bne.n	8002284 <HAL_HCD_Stop+0x16>
 8002280:	2302      	movs	r3, #2
 8002282:	e00d      	b.n	80022a0 <HAL_HCD_Stop+0x32>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4618      	mov	r0, r3
 8002292:	f005 fa11 	bl	80076b8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 800229e:	2300      	movs	r3, #0
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3708      	adds	r7, #8
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4618      	mov	r0, r3
 80022b6:	f004 fdd9 	bl	8006e6c <USB_ResetPort>
 80022ba:	4603      	mov	r3, r0
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3708      	adds	r7, #8
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	460b      	mov	r3, r1
 80022ce:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80022d0:	78fa      	ldrb	r2, [r7, #3]
 80022d2:	6879      	ldr	r1, [r7, #4]
 80022d4:	4613      	mov	r3, r2
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	4413      	add	r3, r2
 80022da:	00db      	lsls	r3, r3, #3
 80022dc:	440b      	add	r3, r1
 80022de:	335c      	adds	r3, #92	; 0x5c
 80022e0:	781b      	ldrb	r3, [r3, #0]
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	370c      	adds	r7, #12
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr

080022ee <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80022ee:	b480      	push	{r7}
 80022f0:	b083      	sub	sp, #12
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
 80022f6:	460b      	mov	r3, r1
 80022f8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80022fa:	78fa      	ldrb	r2, [r7, #3]
 80022fc:	6879      	ldr	r1, [r7, #4]
 80022fe:	4613      	mov	r3, r2
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	4413      	add	r3, r2
 8002304:	00db      	lsls	r3, r3, #3
 8002306:	440b      	add	r3, r1
 8002308:	334c      	adds	r3, #76	; 0x4c
 800230a:	681b      	ldr	r3, [r3, #0]
}
 800230c:	4618      	mov	r0, r3
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4618      	mov	r0, r3
 8002326:	f004 fe1b 	bl	8006f60 <USB_GetCurrentFrame>
 800232a:	4603      	mov	r3, r0
}
 800232c:	4618      	mov	r0, r3
 800232e:	3708      	adds	r7, #8
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}

08002334 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4618      	mov	r0, r3
 8002342:	f004 fdf6 	bl	8006f32 <USB_GetHostSpeed>
 8002346:	4603      	mov	r3, r0
}
 8002348:	4618      	mov	r0, r3
 800234a:	3708      	adds	r7, #8
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}

08002350 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b086      	sub	sp, #24
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	460b      	mov	r3, r1
 800235a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002366:	78fb      	ldrb	r3, [r7, #3]
 8002368:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	015a      	lsls	r2, r3, #5
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	4413      	add	r3, r2
 8002372:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	f003 0304 	and.w	r3, r3, #4
 800237c:	2b04      	cmp	r3, #4
 800237e:	d119      	bne.n	80023b4 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	015a      	lsls	r2, r3, #5
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	4413      	add	r3, r2
 8002388:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800238c:	461a      	mov	r2, r3
 800238e:	2304      	movs	r3, #4
 8002390:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	015a      	lsls	r2, r3, #5
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	4413      	add	r3, r2
 800239a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	68fa      	ldr	r2, [r7, #12]
 80023a2:	0151      	lsls	r1, r2, #5
 80023a4:	693a      	ldr	r2, [r7, #16]
 80023a6:	440a      	add	r2, r1
 80023a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023ac:	f043 0302 	orr.w	r3, r3, #2
 80023b0:	60d3      	str	r3, [r2, #12]
 80023b2:	e0ce      	b.n	8002552 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	015a      	lsls	r2, r3, #5
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	4413      	add	r3, r2
 80023bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023ca:	d12c      	bne.n	8002426 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	015a      	lsls	r2, r3, #5
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	4413      	add	r3, r2
 80023d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023d8:	461a      	mov	r2, r3
 80023da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023de:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80023e0:	6879      	ldr	r1, [r7, #4]
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	4613      	mov	r3, r2
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	4413      	add	r3, r2
 80023ea:	00db      	lsls	r3, r3, #3
 80023ec:	440b      	add	r3, r1
 80023ee:	335d      	adds	r3, #93	; 0x5d
 80023f0:	2207      	movs	r2, #7
 80023f2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	015a      	lsls	r2, r3, #5
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	4413      	add	r3, r2
 80023fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	68fa      	ldr	r2, [r7, #12]
 8002404:	0151      	lsls	r1, r2, #5
 8002406:	693a      	ldr	r2, [r7, #16]
 8002408:	440a      	add	r2, r1
 800240a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800240e:	f043 0302 	orr.w	r3, r3, #2
 8002412:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	68fa      	ldr	r2, [r7, #12]
 800241a:	b2d2      	uxtb	r2, r2
 800241c:	4611      	mov	r1, r2
 800241e:	4618      	mov	r0, r3
 8002420:	f005 f80f 	bl	8007442 <USB_HC_Halt>
 8002424:	e095      	b.n	8002552 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	015a      	lsls	r2, r3, #5
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	4413      	add	r3, r2
 800242e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	f003 0320 	and.w	r3, r3, #32
 8002438:	2b20      	cmp	r3, #32
 800243a:	d109      	bne.n	8002450 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	015a      	lsls	r2, r3, #5
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	4413      	add	r3, r2
 8002444:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002448:	461a      	mov	r2, r3
 800244a:	2320      	movs	r3, #32
 800244c:	6093      	str	r3, [r2, #8]
 800244e:	e080      	b.n	8002552 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	015a      	lsls	r2, r3, #5
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	4413      	add	r3, r2
 8002458:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f003 0308 	and.w	r3, r3, #8
 8002462:	2b08      	cmp	r3, #8
 8002464:	d134      	bne.n	80024d0 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	015a      	lsls	r2, r3, #5
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	4413      	add	r3, r2
 800246e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	68fa      	ldr	r2, [r7, #12]
 8002476:	0151      	lsls	r1, r2, #5
 8002478:	693a      	ldr	r2, [r7, #16]
 800247a:	440a      	add	r2, r1
 800247c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002480:	f043 0302 	orr.w	r3, r3, #2
 8002484:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002486:	6879      	ldr	r1, [r7, #4]
 8002488:	68fa      	ldr	r2, [r7, #12]
 800248a:	4613      	mov	r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	4413      	add	r3, r2
 8002490:	00db      	lsls	r3, r3, #3
 8002492:	440b      	add	r3, r1
 8002494:	335d      	adds	r3, #93	; 0x5d
 8002496:	2205      	movs	r2, #5
 8002498:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	015a      	lsls	r2, r3, #5
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	4413      	add	r3, r2
 80024a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024a6:	461a      	mov	r2, r3
 80024a8:	2310      	movs	r3, #16
 80024aa:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	015a      	lsls	r2, r3, #5
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	4413      	add	r3, r2
 80024b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024b8:	461a      	mov	r2, r3
 80024ba:	2308      	movs	r3, #8
 80024bc:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	68fa      	ldr	r2, [r7, #12]
 80024c4:	b2d2      	uxtb	r2, r2
 80024c6:	4611      	mov	r1, r2
 80024c8:	4618      	mov	r0, r3
 80024ca:	f004 ffba 	bl	8007442 <USB_HC_Halt>
 80024ce:	e040      	b.n	8002552 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	015a      	lsls	r2, r3, #5
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	4413      	add	r3, r2
 80024d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024e6:	d134      	bne.n	8002552 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	015a      	lsls	r2, r3, #5
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	4413      	add	r3, r2
 80024f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	68fa      	ldr	r2, [r7, #12]
 80024f8:	0151      	lsls	r1, r2, #5
 80024fa:	693a      	ldr	r2, [r7, #16]
 80024fc:	440a      	add	r2, r1
 80024fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002502:	f043 0302 	orr.w	r3, r3, #2
 8002506:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	68fa      	ldr	r2, [r7, #12]
 800250e:	b2d2      	uxtb	r2, r2
 8002510:	4611      	mov	r1, r2
 8002512:	4618      	mov	r0, r3
 8002514:	f004 ff95 	bl	8007442 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	015a      	lsls	r2, r3, #5
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	4413      	add	r3, r2
 8002520:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002524:	461a      	mov	r2, r3
 8002526:	2310      	movs	r3, #16
 8002528:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800252a:	6879      	ldr	r1, [r7, #4]
 800252c:	68fa      	ldr	r2, [r7, #12]
 800252e:	4613      	mov	r3, r2
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	4413      	add	r3, r2
 8002534:	00db      	lsls	r3, r3, #3
 8002536:	440b      	add	r3, r1
 8002538:	335d      	adds	r3, #93	; 0x5d
 800253a:	2208      	movs	r2, #8
 800253c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	015a      	lsls	r2, r3, #5
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	4413      	add	r3, r2
 8002546:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800254a:	461a      	mov	r2, r3
 800254c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002550:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	015a      	lsls	r2, r3, #5
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	4413      	add	r3, r2
 800255a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002564:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002568:	d122      	bne.n	80025b0 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	015a      	lsls	r2, r3, #5
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	4413      	add	r3, r2
 8002572:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	68fa      	ldr	r2, [r7, #12]
 800257a:	0151      	lsls	r1, r2, #5
 800257c:	693a      	ldr	r2, [r7, #16]
 800257e:	440a      	add	r2, r1
 8002580:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002584:	f043 0302 	orr.w	r3, r3, #2
 8002588:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	68fa      	ldr	r2, [r7, #12]
 8002590:	b2d2      	uxtb	r2, r2
 8002592:	4611      	mov	r1, r2
 8002594:	4618      	mov	r0, r3
 8002596:	f004 ff54 	bl	8007442 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	015a      	lsls	r2, r3, #5
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	4413      	add	r3, r2
 80025a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025a6:	461a      	mov	r2, r3
 80025a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025ac:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80025ae:	e300      	b.n	8002bb2 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	015a      	lsls	r2, r3, #5
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	4413      	add	r3, r2
 80025b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f003 0301 	and.w	r3, r3, #1
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	f040 80fd 	bne.w	80027c2 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	691b      	ldr	r3, [r3, #16]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d01b      	beq.n	8002608 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80025d0:	6879      	ldr	r1, [r7, #4]
 80025d2:	68fa      	ldr	r2, [r7, #12]
 80025d4:	4613      	mov	r3, r2
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	4413      	add	r3, r2
 80025da:	00db      	lsls	r3, r3, #3
 80025dc:	440b      	add	r3, r1
 80025de:	3348      	adds	r3, #72	; 0x48
 80025e0:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	0159      	lsls	r1, r3, #5
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	440b      	add	r3, r1
 80025ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ee:	691b      	ldr	r3, [r3, #16]
 80025f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80025f4:	1ad1      	subs	r1, r2, r3
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	68fa      	ldr	r2, [r7, #12]
 80025fa:	4613      	mov	r3, r2
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	4413      	add	r3, r2
 8002600:	00db      	lsls	r3, r3, #3
 8002602:	4403      	add	r3, r0
 8002604:	334c      	adds	r3, #76	; 0x4c
 8002606:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002608:	6879      	ldr	r1, [r7, #4]
 800260a:	68fa      	ldr	r2, [r7, #12]
 800260c:	4613      	mov	r3, r2
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	4413      	add	r3, r2
 8002612:	00db      	lsls	r3, r3, #3
 8002614:	440b      	add	r3, r1
 8002616:	335d      	adds	r3, #93	; 0x5d
 8002618:	2201      	movs	r2, #1
 800261a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800261c:	6879      	ldr	r1, [r7, #4]
 800261e:	68fa      	ldr	r2, [r7, #12]
 8002620:	4613      	mov	r3, r2
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	4413      	add	r3, r2
 8002626:	00db      	lsls	r3, r3, #3
 8002628:	440b      	add	r3, r1
 800262a:	3358      	adds	r3, #88	; 0x58
 800262c:	2200      	movs	r2, #0
 800262e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	015a      	lsls	r2, r3, #5
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	4413      	add	r3, r2
 8002638:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800263c:	461a      	mov	r2, r3
 800263e:	2301      	movs	r3, #1
 8002640:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002642:	6879      	ldr	r1, [r7, #4]
 8002644:	68fa      	ldr	r2, [r7, #12]
 8002646:	4613      	mov	r3, r2
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	4413      	add	r3, r2
 800264c:	00db      	lsls	r3, r3, #3
 800264e:	440b      	add	r3, r1
 8002650:	333f      	adds	r3, #63	; 0x3f
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d00a      	beq.n	800266e <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002658:	6879      	ldr	r1, [r7, #4]
 800265a:	68fa      	ldr	r2, [r7, #12]
 800265c:	4613      	mov	r3, r2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	4413      	add	r3, r2
 8002662:	00db      	lsls	r3, r3, #3
 8002664:	440b      	add	r3, r1
 8002666:	333f      	adds	r3, #63	; 0x3f
 8002668:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800266a:	2b02      	cmp	r3, #2
 800266c:	d121      	bne.n	80026b2 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	015a      	lsls	r2, r3, #5
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	4413      	add	r3, r2
 8002676:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	68fa      	ldr	r2, [r7, #12]
 800267e:	0151      	lsls	r1, r2, #5
 8002680:	693a      	ldr	r2, [r7, #16]
 8002682:	440a      	add	r2, r1
 8002684:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002688:	f043 0302 	orr.w	r3, r3, #2
 800268c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	68fa      	ldr	r2, [r7, #12]
 8002694:	b2d2      	uxtb	r2, r2
 8002696:	4611      	mov	r1, r2
 8002698:	4618      	mov	r0, r3
 800269a:	f004 fed2 	bl	8007442 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	015a      	lsls	r2, r3, #5
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	4413      	add	r3, r2
 80026a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026aa:	461a      	mov	r2, r3
 80026ac:	2310      	movs	r3, #16
 80026ae:	6093      	str	r3, [r2, #8]
 80026b0:	e070      	b.n	8002794 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80026b2:	6879      	ldr	r1, [r7, #4]
 80026b4:	68fa      	ldr	r2, [r7, #12]
 80026b6:	4613      	mov	r3, r2
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	4413      	add	r3, r2
 80026bc:	00db      	lsls	r3, r3, #3
 80026be:	440b      	add	r3, r1
 80026c0:	333f      	adds	r3, #63	; 0x3f
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	2b03      	cmp	r3, #3
 80026c6:	d12a      	bne.n	800271e <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	015a      	lsls	r2, r3, #5
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	4413      	add	r3, r2
 80026d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	68fa      	ldr	r2, [r7, #12]
 80026d8:	0151      	lsls	r1, r2, #5
 80026da:	693a      	ldr	r2, [r7, #16]
 80026dc:	440a      	add	r2, r1
 80026de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026e2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80026e6:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80026e8:	6879      	ldr	r1, [r7, #4]
 80026ea:	68fa      	ldr	r2, [r7, #12]
 80026ec:	4613      	mov	r3, r2
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	4413      	add	r3, r2
 80026f2:	00db      	lsls	r3, r3, #3
 80026f4:	440b      	add	r3, r1
 80026f6:	335c      	adds	r3, #92	; 0x5c
 80026f8:	2201      	movs	r2, #1
 80026fa:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	b2d8      	uxtb	r0, r3
 8002700:	6879      	ldr	r1, [r7, #4]
 8002702:	68fa      	ldr	r2, [r7, #12]
 8002704:	4613      	mov	r3, r2
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	4413      	add	r3, r2
 800270a:	00db      	lsls	r3, r3, #3
 800270c:	440b      	add	r3, r1
 800270e:	335c      	adds	r3, #92	; 0x5c
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	461a      	mov	r2, r3
 8002714:	4601      	mov	r1, r0
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f007 f82e 	bl	8009778 <HAL_HCD_HC_NotifyURBChange_Callback>
 800271c:	e03a      	b.n	8002794 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800271e:	6879      	ldr	r1, [r7, #4]
 8002720:	68fa      	ldr	r2, [r7, #12]
 8002722:	4613      	mov	r3, r2
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	4413      	add	r3, r2
 8002728:	00db      	lsls	r3, r3, #3
 800272a:	440b      	add	r3, r1
 800272c:	333f      	adds	r3, #63	; 0x3f
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	2b01      	cmp	r3, #1
 8002732:	d12f      	bne.n	8002794 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002734:	6879      	ldr	r1, [r7, #4]
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	4613      	mov	r3, r2
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	4413      	add	r3, r2
 800273e:	00db      	lsls	r3, r3, #3
 8002740:	440b      	add	r3, r1
 8002742:	335c      	adds	r3, #92	; 0x5c
 8002744:	2201      	movs	r2, #1
 8002746:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002748:	6879      	ldr	r1, [r7, #4]
 800274a:	68fa      	ldr	r2, [r7, #12]
 800274c:	4613      	mov	r3, r2
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	4413      	add	r3, r2
 8002752:	00db      	lsls	r3, r3, #3
 8002754:	440b      	add	r3, r1
 8002756:	3350      	adds	r3, #80	; 0x50
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	f083 0301 	eor.w	r3, r3, #1
 800275e:	b2d8      	uxtb	r0, r3
 8002760:	6879      	ldr	r1, [r7, #4]
 8002762:	68fa      	ldr	r2, [r7, #12]
 8002764:	4613      	mov	r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	4413      	add	r3, r2
 800276a:	00db      	lsls	r3, r3, #3
 800276c:	440b      	add	r3, r1
 800276e:	3350      	adds	r3, #80	; 0x50
 8002770:	4602      	mov	r2, r0
 8002772:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	b2d8      	uxtb	r0, r3
 8002778:	6879      	ldr	r1, [r7, #4]
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	4613      	mov	r3, r2
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	4413      	add	r3, r2
 8002782:	00db      	lsls	r3, r3, #3
 8002784:	440b      	add	r3, r1
 8002786:	335c      	adds	r3, #92	; 0x5c
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	461a      	mov	r2, r3
 800278c:	4601      	mov	r1, r0
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f006 fff2 	bl	8009778 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8002794:	6879      	ldr	r1, [r7, #4]
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	4613      	mov	r3, r2
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	4413      	add	r3, r2
 800279e:	00db      	lsls	r3, r3, #3
 80027a0:	440b      	add	r3, r1
 80027a2:	3350      	adds	r3, #80	; 0x50
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	f083 0301 	eor.w	r3, r3, #1
 80027aa:	b2d8      	uxtb	r0, r3
 80027ac:	6879      	ldr	r1, [r7, #4]
 80027ae:	68fa      	ldr	r2, [r7, #12]
 80027b0:	4613      	mov	r3, r2
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	4413      	add	r3, r2
 80027b6:	00db      	lsls	r3, r3, #3
 80027b8:	440b      	add	r3, r1
 80027ba:	3350      	adds	r3, #80	; 0x50
 80027bc:	4602      	mov	r2, r0
 80027be:	701a      	strb	r2, [r3, #0]
}
 80027c0:	e1f7      	b.n	8002bb2 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	015a      	lsls	r2, r3, #5
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	4413      	add	r3, r2
 80027ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	f003 0302 	and.w	r3, r3, #2
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	f040 811a 	bne.w	8002a0e <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	015a      	lsls	r2, r3, #5
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	4413      	add	r3, r2
 80027e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	68fa      	ldr	r2, [r7, #12]
 80027ea:	0151      	lsls	r1, r2, #5
 80027ec:	693a      	ldr	r2, [r7, #16]
 80027ee:	440a      	add	r2, r1
 80027f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027f4:	f023 0302 	bic.w	r3, r3, #2
 80027f8:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80027fa:	6879      	ldr	r1, [r7, #4]
 80027fc:	68fa      	ldr	r2, [r7, #12]
 80027fe:	4613      	mov	r3, r2
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	4413      	add	r3, r2
 8002804:	00db      	lsls	r3, r3, #3
 8002806:	440b      	add	r3, r1
 8002808:	335d      	adds	r3, #93	; 0x5d
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	2b01      	cmp	r3, #1
 800280e:	d10a      	bne.n	8002826 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002810:	6879      	ldr	r1, [r7, #4]
 8002812:	68fa      	ldr	r2, [r7, #12]
 8002814:	4613      	mov	r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	4413      	add	r3, r2
 800281a:	00db      	lsls	r3, r3, #3
 800281c:	440b      	add	r3, r1
 800281e:	335c      	adds	r3, #92	; 0x5c
 8002820:	2201      	movs	r2, #1
 8002822:	701a      	strb	r2, [r3, #0]
 8002824:	e0d9      	b.n	80029da <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002826:	6879      	ldr	r1, [r7, #4]
 8002828:	68fa      	ldr	r2, [r7, #12]
 800282a:	4613      	mov	r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	4413      	add	r3, r2
 8002830:	00db      	lsls	r3, r3, #3
 8002832:	440b      	add	r3, r1
 8002834:	335d      	adds	r3, #93	; 0x5d
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	2b05      	cmp	r3, #5
 800283a:	d10a      	bne.n	8002852 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800283c:	6879      	ldr	r1, [r7, #4]
 800283e:	68fa      	ldr	r2, [r7, #12]
 8002840:	4613      	mov	r3, r2
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	4413      	add	r3, r2
 8002846:	00db      	lsls	r3, r3, #3
 8002848:	440b      	add	r3, r1
 800284a:	335c      	adds	r3, #92	; 0x5c
 800284c:	2205      	movs	r2, #5
 800284e:	701a      	strb	r2, [r3, #0]
 8002850:	e0c3      	b.n	80029da <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002852:	6879      	ldr	r1, [r7, #4]
 8002854:	68fa      	ldr	r2, [r7, #12]
 8002856:	4613      	mov	r3, r2
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	4413      	add	r3, r2
 800285c:	00db      	lsls	r3, r3, #3
 800285e:	440b      	add	r3, r1
 8002860:	335d      	adds	r3, #93	; 0x5d
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	2b06      	cmp	r3, #6
 8002866:	d00a      	beq.n	800287e <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002868:	6879      	ldr	r1, [r7, #4]
 800286a:	68fa      	ldr	r2, [r7, #12]
 800286c:	4613      	mov	r3, r2
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	4413      	add	r3, r2
 8002872:	00db      	lsls	r3, r3, #3
 8002874:	440b      	add	r3, r1
 8002876:	335d      	adds	r3, #93	; 0x5d
 8002878:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800287a:	2b08      	cmp	r3, #8
 800287c:	d156      	bne.n	800292c <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 800287e:	6879      	ldr	r1, [r7, #4]
 8002880:	68fa      	ldr	r2, [r7, #12]
 8002882:	4613      	mov	r3, r2
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	4413      	add	r3, r2
 8002888:	00db      	lsls	r3, r3, #3
 800288a:	440b      	add	r3, r1
 800288c:	3358      	adds	r3, #88	; 0x58
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	1c59      	adds	r1, r3, #1
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	68fa      	ldr	r2, [r7, #12]
 8002896:	4613      	mov	r3, r2
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	4413      	add	r3, r2
 800289c:	00db      	lsls	r3, r3, #3
 800289e:	4403      	add	r3, r0
 80028a0:	3358      	adds	r3, #88	; 0x58
 80028a2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80028a4:	6879      	ldr	r1, [r7, #4]
 80028a6:	68fa      	ldr	r2, [r7, #12]
 80028a8:	4613      	mov	r3, r2
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	4413      	add	r3, r2
 80028ae:	00db      	lsls	r3, r3, #3
 80028b0:	440b      	add	r3, r1
 80028b2:	3358      	adds	r3, #88	; 0x58
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2b03      	cmp	r3, #3
 80028b8:	d914      	bls.n	80028e4 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80028ba:	6879      	ldr	r1, [r7, #4]
 80028bc:	68fa      	ldr	r2, [r7, #12]
 80028be:	4613      	mov	r3, r2
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	4413      	add	r3, r2
 80028c4:	00db      	lsls	r3, r3, #3
 80028c6:	440b      	add	r3, r1
 80028c8:	3358      	adds	r3, #88	; 0x58
 80028ca:	2200      	movs	r2, #0
 80028cc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80028ce:	6879      	ldr	r1, [r7, #4]
 80028d0:	68fa      	ldr	r2, [r7, #12]
 80028d2:	4613      	mov	r3, r2
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	4413      	add	r3, r2
 80028d8:	00db      	lsls	r3, r3, #3
 80028da:	440b      	add	r3, r1
 80028dc:	335c      	adds	r3, #92	; 0x5c
 80028de:	2204      	movs	r2, #4
 80028e0:	701a      	strb	r2, [r3, #0]
 80028e2:	e009      	b.n	80028f8 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80028e4:	6879      	ldr	r1, [r7, #4]
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	4613      	mov	r3, r2
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	4413      	add	r3, r2
 80028ee:	00db      	lsls	r3, r3, #3
 80028f0:	440b      	add	r3, r1
 80028f2:	335c      	adds	r3, #92	; 0x5c
 80028f4:	2202      	movs	r2, #2
 80028f6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	015a      	lsls	r2, r3, #5
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	4413      	add	r3, r2
 8002900:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800290e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002916:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	015a      	lsls	r2, r3, #5
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	4413      	add	r3, r2
 8002920:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002924:	461a      	mov	r2, r3
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	6013      	str	r3, [r2, #0]
 800292a:	e056      	b.n	80029da <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800292c:	6879      	ldr	r1, [r7, #4]
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	4613      	mov	r3, r2
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	4413      	add	r3, r2
 8002936:	00db      	lsls	r3, r3, #3
 8002938:	440b      	add	r3, r1
 800293a:	335d      	adds	r3, #93	; 0x5d
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	2b03      	cmp	r3, #3
 8002940:	d123      	bne.n	800298a <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002942:	6879      	ldr	r1, [r7, #4]
 8002944:	68fa      	ldr	r2, [r7, #12]
 8002946:	4613      	mov	r3, r2
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	4413      	add	r3, r2
 800294c:	00db      	lsls	r3, r3, #3
 800294e:	440b      	add	r3, r1
 8002950:	335c      	adds	r3, #92	; 0x5c
 8002952:	2202      	movs	r2, #2
 8002954:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	015a      	lsls	r2, r3, #5
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	4413      	add	r3, r2
 800295e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800296c:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002974:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	015a      	lsls	r2, r3, #5
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	4413      	add	r3, r2
 800297e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002982:	461a      	mov	r2, r3
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	6013      	str	r3, [r2, #0]
 8002988:	e027      	b.n	80029da <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800298a:	6879      	ldr	r1, [r7, #4]
 800298c:	68fa      	ldr	r2, [r7, #12]
 800298e:	4613      	mov	r3, r2
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	4413      	add	r3, r2
 8002994:	00db      	lsls	r3, r3, #3
 8002996:	440b      	add	r3, r1
 8002998:	335d      	adds	r3, #93	; 0x5d
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	2b07      	cmp	r3, #7
 800299e:	d11c      	bne.n	80029da <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 80029a0:	6879      	ldr	r1, [r7, #4]
 80029a2:	68fa      	ldr	r2, [r7, #12]
 80029a4:	4613      	mov	r3, r2
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	4413      	add	r3, r2
 80029aa:	00db      	lsls	r3, r3, #3
 80029ac:	440b      	add	r3, r1
 80029ae:	3358      	adds	r3, #88	; 0x58
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	1c59      	adds	r1, r3, #1
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	68fa      	ldr	r2, [r7, #12]
 80029b8:	4613      	mov	r3, r2
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	4413      	add	r3, r2
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	4403      	add	r3, r0
 80029c2:	3358      	adds	r3, #88	; 0x58
 80029c4:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80029c6:	6879      	ldr	r1, [r7, #4]
 80029c8:	68fa      	ldr	r2, [r7, #12]
 80029ca:	4613      	mov	r3, r2
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	4413      	add	r3, r2
 80029d0:	00db      	lsls	r3, r3, #3
 80029d2:	440b      	add	r3, r1
 80029d4:	335c      	adds	r3, #92	; 0x5c
 80029d6:	2204      	movs	r2, #4
 80029d8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	015a      	lsls	r2, r3, #5
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	4413      	add	r3, r2
 80029e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029e6:	461a      	mov	r2, r3
 80029e8:	2302      	movs	r3, #2
 80029ea:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	b2d8      	uxtb	r0, r3
 80029f0:	6879      	ldr	r1, [r7, #4]
 80029f2:	68fa      	ldr	r2, [r7, #12]
 80029f4:	4613      	mov	r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	4413      	add	r3, r2
 80029fa:	00db      	lsls	r3, r3, #3
 80029fc:	440b      	add	r3, r1
 80029fe:	335c      	adds	r3, #92	; 0x5c
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	461a      	mov	r2, r3
 8002a04:	4601      	mov	r1, r0
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f006 feb6 	bl	8009778 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002a0c:	e0d1      	b.n	8002bb2 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	015a      	lsls	r2, r3, #5
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	4413      	add	r3, r2
 8002a16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a20:	2b80      	cmp	r3, #128	; 0x80
 8002a22:	d13e      	bne.n	8002aa2 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	015a      	lsls	r2, r3, #5
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	68fa      	ldr	r2, [r7, #12]
 8002a34:	0151      	lsls	r1, r2, #5
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	440a      	add	r2, r1
 8002a3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a3e:	f043 0302 	orr.w	r3, r3, #2
 8002a42:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002a44:	6879      	ldr	r1, [r7, #4]
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	4613      	mov	r3, r2
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	4413      	add	r3, r2
 8002a4e:	00db      	lsls	r3, r3, #3
 8002a50:	440b      	add	r3, r1
 8002a52:	3358      	adds	r3, #88	; 0x58
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	1c59      	adds	r1, r3, #1
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	68fa      	ldr	r2, [r7, #12]
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	4413      	add	r3, r2
 8002a62:	00db      	lsls	r3, r3, #3
 8002a64:	4403      	add	r3, r0
 8002a66:	3358      	adds	r3, #88	; 0x58
 8002a68:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002a6a:	6879      	ldr	r1, [r7, #4]
 8002a6c:	68fa      	ldr	r2, [r7, #12]
 8002a6e:	4613      	mov	r3, r2
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	4413      	add	r3, r2
 8002a74:	00db      	lsls	r3, r3, #3
 8002a76:	440b      	add	r3, r1
 8002a78:	335d      	adds	r3, #93	; 0x5d
 8002a7a:	2206      	movs	r2, #6
 8002a7c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	68fa      	ldr	r2, [r7, #12]
 8002a84:	b2d2      	uxtb	r2, r2
 8002a86:	4611      	mov	r1, r2
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f004 fcda 	bl	8007442 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	015a      	lsls	r2, r3, #5
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	4413      	add	r3, r2
 8002a96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	2380      	movs	r3, #128	; 0x80
 8002a9e:	6093      	str	r3, [r2, #8]
}
 8002aa0:	e087      	b.n	8002bb2 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	015a      	lsls	r2, r3, #5
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	4413      	add	r3, r2
 8002aaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	f003 0310 	and.w	r3, r3, #16
 8002ab4:	2b10      	cmp	r3, #16
 8002ab6:	d17c      	bne.n	8002bb2 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002ab8:	6879      	ldr	r1, [r7, #4]
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	4613      	mov	r3, r2
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	4413      	add	r3, r2
 8002ac2:	00db      	lsls	r3, r3, #3
 8002ac4:	440b      	add	r3, r1
 8002ac6:	333f      	adds	r3, #63	; 0x3f
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	2b03      	cmp	r3, #3
 8002acc:	d122      	bne.n	8002b14 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002ace:	6879      	ldr	r1, [r7, #4]
 8002ad0:	68fa      	ldr	r2, [r7, #12]
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	4413      	add	r3, r2
 8002ad8:	00db      	lsls	r3, r3, #3
 8002ada:	440b      	add	r3, r1
 8002adc:	3358      	adds	r3, #88	; 0x58
 8002ade:	2200      	movs	r2, #0
 8002ae0:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	015a      	lsls	r2, r3, #5
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	4413      	add	r3, r2
 8002aea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	68fa      	ldr	r2, [r7, #12]
 8002af2:	0151      	lsls	r1, r2, #5
 8002af4:	693a      	ldr	r2, [r7, #16]
 8002af6:	440a      	add	r2, r1
 8002af8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002afc:	f043 0302 	orr.w	r3, r3, #2
 8002b00:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	68fa      	ldr	r2, [r7, #12]
 8002b08:	b2d2      	uxtb	r2, r2
 8002b0a:	4611      	mov	r1, r2
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f004 fc98 	bl	8007442 <USB_HC_Halt>
 8002b12:	e045      	b.n	8002ba0 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002b14:	6879      	ldr	r1, [r7, #4]
 8002b16:	68fa      	ldr	r2, [r7, #12]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	4413      	add	r3, r2
 8002b1e:	00db      	lsls	r3, r3, #3
 8002b20:	440b      	add	r3, r1
 8002b22:	333f      	adds	r3, #63	; 0x3f
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d00a      	beq.n	8002b40 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002b2a:	6879      	ldr	r1, [r7, #4]
 8002b2c:	68fa      	ldr	r2, [r7, #12]
 8002b2e:	4613      	mov	r3, r2
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	4413      	add	r3, r2
 8002b34:	00db      	lsls	r3, r3, #3
 8002b36:	440b      	add	r3, r1
 8002b38:	333f      	adds	r3, #63	; 0x3f
 8002b3a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d12f      	bne.n	8002ba0 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002b40:	6879      	ldr	r1, [r7, #4]
 8002b42:	68fa      	ldr	r2, [r7, #12]
 8002b44:	4613      	mov	r3, r2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	4413      	add	r3, r2
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	440b      	add	r3, r1
 8002b4e:	3358      	adds	r3, #88	; 0x58
 8002b50:	2200      	movs	r2, #0
 8002b52:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	691b      	ldr	r3, [r3, #16]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d121      	bne.n	8002ba0 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8002b5c:	6879      	ldr	r1, [r7, #4]
 8002b5e:	68fa      	ldr	r2, [r7, #12]
 8002b60:	4613      	mov	r3, r2
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	4413      	add	r3, r2
 8002b66:	00db      	lsls	r3, r3, #3
 8002b68:	440b      	add	r3, r1
 8002b6a:	335d      	adds	r3, #93	; 0x5d
 8002b6c:	2203      	movs	r2, #3
 8002b6e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	015a      	lsls	r2, r3, #5
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	4413      	add	r3, r2
 8002b78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	68fa      	ldr	r2, [r7, #12]
 8002b80:	0151      	lsls	r1, r2, #5
 8002b82:	693a      	ldr	r2, [r7, #16]
 8002b84:	440a      	add	r2, r1
 8002b86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b8a:	f043 0302 	orr.w	r3, r3, #2
 8002b8e:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	68fa      	ldr	r2, [r7, #12]
 8002b96:	b2d2      	uxtb	r2, r2
 8002b98:	4611      	mov	r1, r2
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f004 fc51 	bl	8007442 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	015a      	lsls	r2, r3, #5
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	4413      	add	r3, r2
 8002ba8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bac:	461a      	mov	r2, r3
 8002bae:	2310      	movs	r3, #16
 8002bb0:	6093      	str	r3, [r2, #8]
}
 8002bb2:	bf00      	nop
 8002bb4:	3718      	adds	r7, #24
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b086      	sub	sp, #24
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002bd0:	78fb      	ldrb	r3, [r7, #3]
 8002bd2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	015a      	lsls	r2, r3, #5
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	4413      	add	r3, r2
 8002bdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f003 0304 	and.w	r3, r3, #4
 8002be6:	2b04      	cmp	r3, #4
 8002be8:	d119      	bne.n	8002c1e <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	015a      	lsls	r2, r3, #5
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	4413      	add	r3, r2
 8002bf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	2304      	movs	r3, #4
 8002bfa:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	015a      	lsls	r2, r3, #5
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	4413      	add	r3, r2
 8002c04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	68fa      	ldr	r2, [r7, #12]
 8002c0c:	0151      	lsls	r1, r2, #5
 8002c0e:	693a      	ldr	r2, [r7, #16]
 8002c10:	440a      	add	r2, r1
 8002c12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c16:	f043 0302 	orr.w	r3, r3, #2
 8002c1a:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002c1c:	e33e      	b.n	800329c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	015a      	lsls	r2, r3, #5
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	4413      	add	r3, r2
 8002c26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f003 0320 	and.w	r3, r3, #32
 8002c30:	2b20      	cmp	r3, #32
 8002c32:	d141      	bne.n	8002cb8 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	015a      	lsls	r2, r3, #5
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c40:	461a      	mov	r2, r3
 8002c42:	2320      	movs	r3, #32
 8002c44:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002c46:	6879      	ldr	r1, [r7, #4]
 8002c48:	68fa      	ldr	r2, [r7, #12]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	4413      	add	r3, r2
 8002c50:	00db      	lsls	r3, r3, #3
 8002c52:	440b      	add	r3, r1
 8002c54:	333d      	adds	r3, #61	; 0x3d
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	f040 831f 	bne.w	800329c <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8002c5e:	6879      	ldr	r1, [r7, #4]
 8002c60:	68fa      	ldr	r2, [r7, #12]
 8002c62:	4613      	mov	r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	4413      	add	r3, r2
 8002c68:	00db      	lsls	r3, r3, #3
 8002c6a:	440b      	add	r3, r1
 8002c6c:	333d      	adds	r3, #61	; 0x3d
 8002c6e:	2200      	movs	r2, #0
 8002c70:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002c72:	6879      	ldr	r1, [r7, #4]
 8002c74:	68fa      	ldr	r2, [r7, #12]
 8002c76:	4613      	mov	r3, r2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	4413      	add	r3, r2
 8002c7c:	00db      	lsls	r3, r3, #3
 8002c7e:	440b      	add	r3, r1
 8002c80:	335c      	adds	r3, #92	; 0x5c
 8002c82:	2202      	movs	r2, #2
 8002c84:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	015a      	lsls	r2, r3, #5
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	68fa      	ldr	r2, [r7, #12]
 8002c96:	0151      	lsls	r1, r2, #5
 8002c98:	693a      	ldr	r2, [r7, #16]
 8002c9a:	440a      	add	r2, r1
 8002c9c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ca0:	f043 0302 	orr.w	r3, r3, #2
 8002ca4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	68fa      	ldr	r2, [r7, #12]
 8002cac:	b2d2      	uxtb	r2, r2
 8002cae:	4611      	mov	r1, r2
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f004 fbc6 	bl	8007442 <USB_HC_Halt>
}
 8002cb6:	e2f1      	b.n	800329c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	015a      	lsls	r2, r3, #5
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cca:	2b40      	cmp	r3, #64	; 0x40
 8002ccc:	d13f      	bne.n	8002d4e <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8002cce:	6879      	ldr	r1, [r7, #4]
 8002cd0:	68fa      	ldr	r2, [r7, #12]
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	4413      	add	r3, r2
 8002cd8:	00db      	lsls	r3, r3, #3
 8002cda:	440b      	add	r3, r1
 8002cdc:	335d      	adds	r3, #93	; 0x5d
 8002cde:	2204      	movs	r2, #4
 8002ce0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002ce2:	6879      	ldr	r1, [r7, #4]
 8002ce4:	68fa      	ldr	r2, [r7, #12]
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	4413      	add	r3, r2
 8002cec:	00db      	lsls	r3, r3, #3
 8002cee:	440b      	add	r3, r1
 8002cf0:	333d      	adds	r3, #61	; 0x3d
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002cf6:	6879      	ldr	r1, [r7, #4]
 8002cf8:	68fa      	ldr	r2, [r7, #12]
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	4413      	add	r3, r2
 8002d00:	00db      	lsls	r3, r3, #3
 8002d02:	440b      	add	r3, r1
 8002d04:	3358      	adds	r3, #88	; 0x58
 8002d06:	2200      	movs	r2, #0
 8002d08:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	015a      	lsls	r2, r3, #5
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	4413      	add	r3, r2
 8002d12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	68fa      	ldr	r2, [r7, #12]
 8002d1a:	0151      	lsls	r1, r2, #5
 8002d1c:	693a      	ldr	r2, [r7, #16]
 8002d1e:	440a      	add	r2, r1
 8002d20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d24:	f043 0302 	orr.w	r3, r3, #2
 8002d28:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	68fa      	ldr	r2, [r7, #12]
 8002d30:	b2d2      	uxtb	r2, r2
 8002d32:	4611      	mov	r1, r2
 8002d34:	4618      	mov	r0, r3
 8002d36:	f004 fb84 	bl	8007442 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	015a      	lsls	r2, r3, #5
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	4413      	add	r3, r2
 8002d42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d46:	461a      	mov	r2, r3
 8002d48:	2340      	movs	r3, #64	; 0x40
 8002d4a:	6093      	str	r3, [r2, #8]
}
 8002d4c:	e2a6      	b.n	800329c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	015a      	lsls	r2, r3, #5
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	4413      	add	r3, r2
 8002d56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d64:	d122      	bne.n	8002dac <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	015a      	lsls	r2, r3, #5
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	68fa      	ldr	r2, [r7, #12]
 8002d76:	0151      	lsls	r1, r2, #5
 8002d78:	693a      	ldr	r2, [r7, #16]
 8002d7a:	440a      	add	r2, r1
 8002d7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d80:	f043 0302 	orr.w	r3, r3, #2
 8002d84:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68fa      	ldr	r2, [r7, #12]
 8002d8c:	b2d2      	uxtb	r2, r2
 8002d8e:	4611      	mov	r1, r2
 8002d90:	4618      	mov	r0, r3
 8002d92:	f004 fb56 	bl	8007442 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	015a      	lsls	r2, r3, #5
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	4413      	add	r3, r2
 8002d9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002da2:	461a      	mov	r2, r3
 8002da4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002da8:	6093      	str	r3, [r2, #8]
}
 8002daa:	e277      	b.n	800329c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	015a      	lsls	r2, r3, #5
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	4413      	add	r3, r2
 8002db4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f003 0301 	and.w	r3, r3, #1
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d135      	bne.n	8002e2e <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002dc2:	6879      	ldr	r1, [r7, #4]
 8002dc4:	68fa      	ldr	r2, [r7, #12]
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	4413      	add	r3, r2
 8002dcc:	00db      	lsls	r3, r3, #3
 8002dce:	440b      	add	r3, r1
 8002dd0:	3358      	adds	r3, #88	; 0x58
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	015a      	lsls	r2, r3, #5
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	4413      	add	r3, r2
 8002dde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	68fa      	ldr	r2, [r7, #12]
 8002de6:	0151      	lsls	r1, r2, #5
 8002de8:	693a      	ldr	r2, [r7, #16]
 8002dea:	440a      	add	r2, r1
 8002dec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002df0:	f043 0302 	orr.w	r3, r3, #2
 8002df4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	68fa      	ldr	r2, [r7, #12]
 8002dfc:	b2d2      	uxtb	r2, r2
 8002dfe:	4611      	mov	r1, r2
 8002e00:	4618      	mov	r0, r3
 8002e02:	f004 fb1e 	bl	8007442 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	015a      	lsls	r2, r3, #5
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	4413      	add	r3, r2
 8002e0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e12:	461a      	mov	r2, r3
 8002e14:	2301      	movs	r3, #1
 8002e16:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002e18:	6879      	ldr	r1, [r7, #4]
 8002e1a:	68fa      	ldr	r2, [r7, #12]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	4413      	add	r3, r2
 8002e22:	00db      	lsls	r3, r3, #3
 8002e24:	440b      	add	r3, r1
 8002e26:	335d      	adds	r3, #93	; 0x5d
 8002e28:	2201      	movs	r2, #1
 8002e2a:	701a      	strb	r2, [r3, #0]
}
 8002e2c:	e236      	b.n	800329c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	015a      	lsls	r2, r3, #5
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	4413      	add	r3, r2
 8002e36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	f003 0308 	and.w	r3, r3, #8
 8002e40:	2b08      	cmp	r3, #8
 8002e42:	d12b      	bne.n	8002e9c <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	015a      	lsls	r2, r3, #5
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	4413      	add	r3, r2
 8002e4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e50:	461a      	mov	r2, r3
 8002e52:	2308      	movs	r3, #8
 8002e54:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	015a      	lsls	r2, r3, #5
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	4413      	add	r3, r2
 8002e5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	68fa      	ldr	r2, [r7, #12]
 8002e66:	0151      	lsls	r1, r2, #5
 8002e68:	693a      	ldr	r2, [r7, #16]
 8002e6a:	440a      	add	r2, r1
 8002e6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e70:	f043 0302 	orr.w	r3, r3, #2
 8002e74:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	68fa      	ldr	r2, [r7, #12]
 8002e7c:	b2d2      	uxtb	r2, r2
 8002e7e:	4611      	mov	r1, r2
 8002e80:	4618      	mov	r0, r3
 8002e82:	f004 fade 	bl	8007442 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002e86:	6879      	ldr	r1, [r7, #4]
 8002e88:	68fa      	ldr	r2, [r7, #12]
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	4413      	add	r3, r2
 8002e90:	00db      	lsls	r3, r3, #3
 8002e92:	440b      	add	r3, r1
 8002e94:	335d      	adds	r3, #93	; 0x5d
 8002e96:	2205      	movs	r2, #5
 8002e98:	701a      	strb	r2, [r3, #0]
}
 8002e9a:	e1ff      	b.n	800329c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	015a      	lsls	r2, r3, #5
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f003 0310 	and.w	r3, r3, #16
 8002eae:	2b10      	cmp	r3, #16
 8002eb0:	d155      	bne.n	8002f5e <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002eb2:	6879      	ldr	r1, [r7, #4]
 8002eb4:	68fa      	ldr	r2, [r7, #12]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	4413      	add	r3, r2
 8002ebc:	00db      	lsls	r3, r3, #3
 8002ebe:	440b      	add	r3, r1
 8002ec0:	3358      	adds	r3, #88	; 0x58
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002ec6:	6879      	ldr	r1, [r7, #4]
 8002ec8:	68fa      	ldr	r2, [r7, #12]
 8002eca:	4613      	mov	r3, r2
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	4413      	add	r3, r2
 8002ed0:	00db      	lsls	r3, r3, #3
 8002ed2:	440b      	add	r3, r1
 8002ed4:	335d      	adds	r3, #93	; 0x5d
 8002ed6:	2203      	movs	r2, #3
 8002ed8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002eda:	6879      	ldr	r1, [r7, #4]
 8002edc:	68fa      	ldr	r2, [r7, #12]
 8002ede:	4613      	mov	r3, r2
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	4413      	add	r3, r2
 8002ee4:	00db      	lsls	r3, r3, #3
 8002ee6:	440b      	add	r3, r1
 8002ee8:	333d      	adds	r3, #61	; 0x3d
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d114      	bne.n	8002f1a <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8002ef0:	6879      	ldr	r1, [r7, #4]
 8002ef2:	68fa      	ldr	r2, [r7, #12]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	4413      	add	r3, r2
 8002efa:	00db      	lsls	r3, r3, #3
 8002efc:	440b      	add	r3, r1
 8002efe:	333c      	adds	r3, #60	; 0x3c
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d109      	bne.n	8002f1a <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8002f06:	6879      	ldr	r1, [r7, #4]
 8002f08:	68fa      	ldr	r2, [r7, #12]
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	4413      	add	r3, r2
 8002f10:	00db      	lsls	r3, r3, #3
 8002f12:	440b      	add	r3, r1
 8002f14:	333d      	adds	r3, #61	; 0x3d
 8002f16:	2201      	movs	r2, #1
 8002f18:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	015a      	lsls	r2, r3, #5
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	4413      	add	r3, r2
 8002f22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	68fa      	ldr	r2, [r7, #12]
 8002f2a:	0151      	lsls	r1, r2, #5
 8002f2c:	693a      	ldr	r2, [r7, #16]
 8002f2e:	440a      	add	r2, r1
 8002f30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f34:	f043 0302 	orr.w	r3, r3, #2
 8002f38:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	68fa      	ldr	r2, [r7, #12]
 8002f40:	b2d2      	uxtb	r2, r2
 8002f42:	4611      	mov	r1, r2
 8002f44:	4618      	mov	r0, r3
 8002f46:	f004 fa7c 	bl	8007442 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	015a      	lsls	r2, r3, #5
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	4413      	add	r3, r2
 8002f52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f56:	461a      	mov	r2, r3
 8002f58:	2310      	movs	r3, #16
 8002f5a:	6093      	str	r3, [r2, #8]
}
 8002f5c:	e19e      	b.n	800329c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	015a      	lsls	r2, r3, #5
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	4413      	add	r3, r2
 8002f66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f70:	2b80      	cmp	r3, #128	; 0x80
 8002f72:	d12b      	bne.n	8002fcc <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	015a      	lsls	r2, r3, #5
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	4413      	add	r3, r2
 8002f7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	68fa      	ldr	r2, [r7, #12]
 8002f84:	0151      	lsls	r1, r2, #5
 8002f86:	693a      	ldr	r2, [r7, #16]
 8002f88:	440a      	add	r2, r1
 8002f8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f8e:	f043 0302 	orr.w	r3, r3, #2
 8002f92:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68fa      	ldr	r2, [r7, #12]
 8002f9a:	b2d2      	uxtb	r2, r2
 8002f9c:	4611      	mov	r1, r2
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f004 fa4f 	bl	8007442 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002fa4:	6879      	ldr	r1, [r7, #4]
 8002fa6:	68fa      	ldr	r2, [r7, #12]
 8002fa8:	4613      	mov	r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	4413      	add	r3, r2
 8002fae:	00db      	lsls	r3, r3, #3
 8002fb0:	440b      	add	r3, r1
 8002fb2:	335d      	adds	r3, #93	; 0x5d
 8002fb4:	2206      	movs	r2, #6
 8002fb6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	015a      	lsls	r2, r3, #5
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	2380      	movs	r3, #128	; 0x80
 8002fc8:	6093      	str	r3, [r2, #8]
}
 8002fca:	e167      	b.n	800329c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	015a      	lsls	r2, r3, #5
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	4413      	add	r3, r2
 8002fd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fe2:	d135      	bne.n	8003050 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	015a      	lsls	r2, r3, #5
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	4413      	add	r3, r2
 8002fec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	68fa      	ldr	r2, [r7, #12]
 8002ff4:	0151      	lsls	r1, r2, #5
 8002ff6:	693a      	ldr	r2, [r7, #16]
 8002ff8:	440a      	add	r2, r1
 8002ffa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ffe:	f043 0302 	orr.w	r3, r3, #2
 8003002:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68fa      	ldr	r2, [r7, #12]
 800300a:	b2d2      	uxtb	r2, r2
 800300c:	4611      	mov	r1, r2
 800300e:	4618      	mov	r0, r3
 8003010:	f004 fa17 	bl	8007442 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	015a      	lsls	r2, r3, #5
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	4413      	add	r3, r2
 800301c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003020:	461a      	mov	r2, r3
 8003022:	2310      	movs	r3, #16
 8003024:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	015a      	lsls	r2, r3, #5
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	4413      	add	r3, r2
 800302e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003032:	461a      	mov	r2, r3
 8003034:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003038:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800303a:	6879      	ldr	r1, [r7, #4]
 800303c:	68fa      	ldr	r2, [r7, #12]
 800303e:	4613      	mov	r3, r2
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	4413      	add	r3, r2
 8003044:	00db      	lsls	r3, r3, #3
 8003046:	440b      	add	r3, r1
 8003048:	335d      	adds	r3, #93	; 0x5d
 800304a:	2208      	movs	r2, #8
 800304c:	701a      	strb	r2, [r3, #0]
}
 800304e:	e125      	b.n	800329c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	015a      	lsls	r2, r3, #5
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	4413      	add	r3, r2
 8003058:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f003 0302 	and.w	r3, r3, #2
 8003062:	2b02      	cmp	r3, #2
 8003064:	f040 811a 	bne.w	800329c <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	015a      	lsls	r2, r3, #5
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	4413      	add	r3, r2
 8003070:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	68fa      	ldr	r2, [r7, #12]
 8003078:	0151      	lsls	r1, r2, #5
 800307a:	693a      	ldr	r2, [r7, #16]
 800307c:	440a      	add	r2, r1
 800307e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003082:	f023 0302 	bic.w	r3, r3, #2
 8003086:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003088:	6879      	ldr	r1, [r7, #4]
 800308a:	68fa      	ldr	r2, [r7, #12]
 800308c:	4613      	mov	r3, r2
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	4413      	add	r3, r2
 8003092:	00db      	lsls	r3, r3, #3
 8003094:	440b      	add	r3, r1
 8003096:	335d      	adds	r3, #93	; 0x5d
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	2b01      	cmp	r3, #1
 800309c:	d137      	bne.n	800310e <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800309e:	6879      	ldr	r1, [r7, #4]
 80030a0:	68fa      	ldr	r2, [r7, #12]
 80030a2:	4613      	mov	r3, r2
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	4413      	add	r3, r2
 80030a8:	00db      	lsls	r3, r3, #3
 80030aa:	440b      	add	r3, r1
 80030ac:	335c      	adds	r3, #92	; 0x5c
 80030ae:	2201      	movs	r2, #1
 80030b0:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80030b2:	6879      	ldr	r1, [r7, #4]
 80030b4:	68fa      	ldr	r2, [r7, #12]
 80030b6:	4613      	mov	r3, r2
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	4413      	add	r3, r2
 80030bc:	00db      	lsls	r3, r3, #3
 80030be:	440b      	add	r3, r1
 80030c0:	333f      	adds	r3, #63	; 0x3f
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d00b      	beq.n	80030e0 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80030c8:	6879      	ldr	r1, [r7, #4]
 80030ca:	68fa      	ldr	r2, [r7, #12]
 80030cc:	4613      	mov	r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	4413      	add	r3, r2
 80030d2:	00db      	lsls	r3, r3, #3
 80030d4:	440b      	add	r3, r1
 80030d6:	333f      	adds	r3, #63	; 0x3f
 80030d8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80030da:	2b03      	cmp	r3, #3
 80030dc:	f040 80c5 	bne.w	800326a <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80030e0:	6879      	ldr	r1, [r7, #4]
 80030e2:	68fa      	ldr	r2, [r7, #12]
 80030e4:	4613      	mov	r3, r2
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	4413      	add	r3, r2
 80030ea:	00db      	lsls	r3, r3, #3
 80030ec:	440b      	add	r3, r1
 80030ee:	3351      	adds	r3, #81	; 0x51
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	f083 0301 	eor.w	r3, r3, #1
 80030f6:	b2d8      	uxtb	r0, r3
 80030f8:	6879      	ldr	r1, [r7, #4]
 80030fa:	68fa      	ldr	r2, [r7, #12]
 80030fc:	4613      	mov	r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	4413      	add	r3, r2
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	440b      	add	r3, r1
 8003106:	3351      	adds	r3, #81	; 0x51
 8003108:	4602      	mov	r2, r0
 800310a:	701a      	strb	r2, [r3, #0]
 800310c:	e0ad      	b.n	800326a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800310e:	6879      	ldr	r1, [r7, #4]
 8003110:	68fa      	ldr	r2, [r7, #12]
 8003112:	4613      	mov	r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	4413      	add	r3, r2
 8003118:	00db      	lsls	r3, r3, #3
 800311a:	440b      	add	r3, r1
 800311c:	335d      	adds	r3, #93	; 0x5d
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	2b03      	cmp	r3, #3
 8003122:	d10a      	bne.n	800313a <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003124:	6879      	ldr	r1, [r7, #4]
 8003126:	68fa      	ldr	r2, [r7, #12]
 8003128:	4613      	mov	r3, r2
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	4413      	add	r3, r2
 800312e:	00db      	lsls	r3, r3, #3
 8003130:	440b      	add	r3, r1
 8003132:	335c      	adds	r3, #92	; 0x5c
 8003134:	2202      	movs	r2, #2
 8003136:	701a      	strb	r2, [r3, #0]
 8003138:	e097      	b.n	800326a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800313a:	6879      	ldr	r1, [r7, #4]
 800313c:	68fa      	ldr	r2, [r7, #12]
 800313e:	4613      	mov	r3, r2
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	4413      	add	r3, r2
 8003144:	00db      	lsls	r3, r3, #3
 8003146:	440b      	add	r3, r1
 8003148:	335d      	adds	r3, #93	; 0x5d
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	2b04      	cmp	r3, #4
 800314e:	d10a      	bne.n	8003166 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003150:	6879      	ldr	r1, [r7, #4]
 8003152:	68fa      	ldr	r2, [r7, #12]
 8003154:	4613      	mov	r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	4413      	add	r3, r2
 800315a:	00db      	lsls	r3, r3, #3
 800315c:	440b      	add	r3, r1
 800315e:	335c      	adds	r3, #92	; 0x5c
 8003160:	2202      	movs	r2, #2
 8003162:	701a      	strb	r2, [r3, #0]
 8003164:	e081      	b.n	800326a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003166:	6879      	ldr	r1, [r7, #4]
 8003168:	68fa      	ldr	r2, [r7, #12]
 800316a:	4613      	mov	r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	4413      	add	r3, r2
 8003170:	00db      	lsls	r3, r3, #3
 8003172:	440b      	add	r3, r1
 8003174:	335d      	adds	r3, #93	; 0x5d
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	2b05      	cmp	r3, #5
 800317a:	d10a      	bne.n	8003192 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800317c:	6879      	ldr	r1, [r7, #4]
 800317e:	68fa      	ldr	r2, [r7, #12]
 8003180:	4613      	mov	r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	4413      	add	r3, r2
 8003186:	00db      	lsls	r3, r3, #3
 8003188:	440b      	add	r3, r1
 800318a:	335c      	adds	r3, #92	; 0x5c
 800318c:	2205      	movs	r2, #5
 800318e:	701a      	strb	r2, [r3, #0]
 8003190:	e06b      	b.n	800326a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003192:	6879      	ldr	r1, [r7, #4]
 8003194:	68fa      	ldr	r2, [r7, #12]
 8003196:	4613      	mov	r3, r2
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	4413      	add	r3, r2
 800319c:	00db      	lsls	r3, r3, #3
 800319e:	440b      	add	r3, r1
 80031a0:	335d      	adds	r3, #93	; 0x5d
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	2b06      	cmp	r3, #6
 80031a6:	d00a      	beq.n	80031be <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80031a8:	6879      	ldr	r1, [r7, #4]
 80031aa:	68fa      	ldr	r2, [r7, #12]
 80031ac:	4613      	mov	r3, r2
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	4413      	add	r3, r2
 80031b2:	00db      	lsls	r3, r3, #3
 80031b4:	440b      	add	r3, r1
 80031b6:	335d      	adds	r3, #93	; 0x5d
 80031b8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80031ba:	2b08      	cmp	r3, #8
 80031bc:	d155      	bne.n	800326a <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 80031be:	6879      	ldr	r1, [r7, #4]
 80031c0:	68fa      	ldr	r2, [r7, #12]
 80031c2:	4613      	mov	r3, r2
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	4413      	add	r3, r2
 80031c8:	00db      	lsls	r3, r3, #3
 80031ca:	440b      	add	r3, r1
 80031cc:	3358      	adds	r3, #88	; 0x58
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	1c59      	adds	r1, r3, #1
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	68fa      	ldr	r2, [r7, #12]
 80031d6:	4613      	mov	r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	4413      	add	r3, r2
 80031dc:	00db      	lsls	r3, r3, #3
 80031de:	4403      	add	r3, r0
 80031e0:	3358      	adds	r3, #88	; 0x58
 80031e2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80031e4:	6879      	ldr	r1, [r7, #4]
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	4613      	mov	r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	4413      	add	r3, r2
 80031ee:	00db      	lsls	r3, r3, #3
 80031f0:	440b      	add	r3, r1
 80031f2:	3358      	adds	r3, #88	; 0x58
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2b03      	cmp	r3, #3
 80031f8:	d914      	bls.n	8003224 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80031fa:	6879      	ldr	r1, [r7, #4]
 80031fc:	68fa      	ldr	r2, [r7, #12]
 80031fe:	4613      	mov	r3, r2
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	4413      	add	r3, r2
 8003204:	00db      	lsls	r3, r3, #3
 8003206:	440b      	add	r3, r1
 8003208:	3358      	adds	r3, #88	; 0x58
 800320a:	2200      	movs	r2, #0
 800320c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800320e:	6879      	ldr	r1, [r7, #4]
 8003210:	68fa      	ldr	r2, [r7, #12]
 8003212:	4613      	mov	r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	4413      	add	r3, r2
 8003218:	00db      	lsls	r3, r3, #3
 800321a:	440b      	add	r3, r1
 800321c:	335c      	adds	r3, #92	; 0x5c
 800321e:	2204      	movs	r2, #4
 8003220:	701a      	strb	r2, [r3, #0]
 8003222:	e009      	b.n	8003238 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003224:	6879      	ldr	r1, [r7, #4]
 8003226:	68fa      	ldr	r2, [r7, #12]
 8003228:	4613      	mov	r3, r2
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	4413      	add	r3, r2
 800322e:	00db      	lsls	r3, r3, #3
 8003230:	440b      	add	r3, r1
 8003232:	335c      	adds	r3, #92	; 0x5c
 8003234:	2202      	movs	r2, #2
 8003236:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	015a      	lsls	r2, r3, #5
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	4413      	add	r3, r2
 8003240:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800324e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003256:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	015a      	lsls	r2, r3, #5
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	4413      	add	r3, r2
 8003260:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003264:	461a      	mov	r2, r3
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	015a      	lsls	r2, r3, #5
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	4413      	add	r3, r2
 8003272:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003276:	461a      	mov	r2, r3
 8003278:	2302      	movs	r3, #2
 800327a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	b2d8      	uxtb	r0, r3
 8003280:	6879      	ldr	r1, [r7, #4]
 8003282:	68fa      	ldr	r2, [r7, #12]
 8003284:	4613      	mov	r3, r2
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	4413      	add	r3, r2
 800328a:	00db      	lsls	r3, r3, #3
 800328c:	440b      	add	r3, r1
 800328e:	335c      	adds	r3, #92	; 0x5c
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	461a      	mov	r2, r3
 8003294:	4601      	mov	r1, r0
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f006 fa6e 	bl	8009778 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800329c:	bf00      	nop
 800329e:	3718      	adds	r7, #24
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}

080032a4 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b08a      	sub	sp, #40	; 0x28
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b4:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	6a1b      	ldr	r3, [r3, #32]
 80032bc:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	f003 030f 	and.w	r3, r3, #15
 80032c4:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	0c5b      	lsrs	r3, r3, #17
 80032ca:	f003 030f 	and.w	r3, r3, #15
 80032ce:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	091b      	lsrs	r3, r3, #4
 80032d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032d8:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d003      	beq.n	80032e8 <HCD_RXQLVL_IRQHandler+0x44>
 80032e0:	2b05      	cmp	r3, #5
 80032e2:	f000 8082 	beq.w	80033ea <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80032e6:	e083      	b.n	80033f0 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d07f      	beq.n	80033ee <HCD_RXQLVL_IRQHandler+0x14a>
 80032ee:	6879      	ldr	r1, [r7, #4]
 80032f0:	69ba      	ldr	r2, [r7, #24]
 80032f2:	4613      	mov	r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	4413      	add	r3, r2
 80032f8:	00db      	lsls	r3, r3, #3
 80032fa:	440b      	add	r3, r1
 80032fc:	3344      	adds	r3, #68	; 0x44
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d074      	beq.n	80033ee <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6818      	ldr	r0, [r3, #0]
 8003308:	6879      	ldr	r1, [r7, #4]
 800330a:	69ba      	ldr	r2, [r7, #24]
 800330c:	4613      	mov	r3, r2
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	4413      	add	r3, r2
 8003312:	00db      	lsls	r3, r3, #3
 8003314:	440b      	add	r3, r1
 8003316:	3344      	adds	r3, #68	; 0x44
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	693a      	ldr	r2, [r7, #16]
 800331c:	b292      	uxth	r2, r2
 800331e:	4619      	mov	r1, r3
 8003320:	f003 fc2f 	bl	8006b82 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003324:	6879      	ldr	r1, [r7, #4]
 8003326:	69ba      	ldr	r2, [r7, #24]
 8003328:	4613      	mov	r3, r2
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	4413      	add	r3, r2
 800332e:	00db      	lsls	r3, r3, #3
 8003330:	440b      	add	r3, r1
 8003332:	3344      	adds	r3, #68	; 0x44
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	18d1      	adds	r1, r2, r3
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	69ba      	ldr	r2, [r7, #24]
 800333e:	4613      	mov	r3, r2
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	4413      	add	r3, r2
 8003344:	00db      	lsls	r3, r3, #3
 8003346:	4403      	add	r3, r0
 8003348:	3344      	adds	r3, #68	; 0x44
 800334a:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 800334c:	6879      	ldr	r1, [r7, #4]
 800334e:	69ba      	ldr	r2, [r7, #24]
 8003350:	4613      	mov	r3, r2
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	4413      	add	r3, r2
 8003356:	00db      	lsls	r3, r3, #3
 8003358:	440b      	add	r3, r1
 800335a:	334c      	adds	r3, #76	; 0x4c
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	18d1      	adds	r1, r2, r3
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	69ba      	ldr	r2, [r7, #24]
 8003366:	4613      	mov	r3, r2
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	4413      	add	r3, r2
 800336c:	00db      	lsls	r3, r3, #3
 800336e:	4403      	add	r3, r0
 8003370:	334c      	adds	r3, #76	; 0x4c
 8003372:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	015a      	lsls	r2, r3, #5
 8003378:	6a3b      	ldr	r3, [r7, #32]
 800337a:	4413      	add	r3, r2
 800337c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003380:	691a      	ldr	r2, [r3, #16]
 8003382:	4b1d      	ldr	r3, [pc, #116]	; (80033f8 <HCD_RXQLVL_IRQHandler+0x154>)
 8003384:	4013      	ands	r3, r2
 8003386:	2b00      	cmp	r3, #0
 8003388:	d031      	beq.n	80033ee <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	015a      	lsls	r2, r3, #5
 800338e:	6a3b      	ldr	r3, [r7, #32]
 8003390:	4413      	add	r3, r2
 8003392:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80033a0:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80033a8:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	015a      	lsls	r2, r3, #5
 80033ae:	6a3b      	ldr	r3, [r7, #32]
 80033b0:	4413      	add	r3, r2
 80033b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033b6:	461a      	mov	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 80033bc:	6879      	ldr	r1, [r7, #4]
 80033be:	69ba      	ldr	r2, [r7, #24]
 80033c0:	4613      	mov	r3, r2
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	4413      	add	r3, r2
 80033c6:	00db      	lsls	r3, r3, #3
 80033c8:	440b      	add	r3, r1
 80033ca:	3350      	adds	r3, #80	; 0x50
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	f083 0301 	eor.w	r3, r3, #1
 80033d2:	b2d8      	uxtb	r0, r3
 80033d4:	6879      	ldr	r1, [r7, #4]
 80033d6:	69ba      	ldr	r2, [r7, #24]
 80033d8:	4613      	mov	r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	4413      	add	r3, r2
 80033de:	00db      	lsls	r3, r3, #3
 80033e0:	440b      	add	r3, r1
 80033e2:	3350      	adds	r3, #80	; 0x50
 80033e4:	4602      	mov	r2, r0
 80033e6:	701a      	strb	r2, [r3, #0]
      break;
 80033e8:	e001      	b.n	80033ee <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 80033ea:	bf00      	nop
 80033ec:	e000      	b.n	80033f0 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 80033ee:	bf00      	nop
  }
}
 80033f0:	bf00      	nop
 80033f2:	3728      	adds	r7, #40	; 0x28
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	1ff80000 	.word	0x1ff80000

080033fc <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b086      	sub	sp, #24
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003428:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f003 0302 	and.w	r3, r3, #2
 8003430:	2b02      	cmp	r3, #2
 8003432:	d10b      	bne.n	800344c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f003 0301 	and.w	r3, r3, #1
 800343a:	2b01      	cmp	r3, #1
 800343c:	d102      	bne.n	8003444 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f006 f97e 	bl	8009740 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	f043 0302 	orr.w	r3, r3, #2
 800344a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f003 0308 	and.w	r3, r3, #8
 8003452:	2b08      	cmp	r3, #8
 8003454:	d132      	bne.n	80034bc <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	f043 0308 	orr.w	r3, r3, #8
 800345c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f003 0304 	and.w	r3, r3, #4
 8003464:	2b04      	cmp	r3, #4
 8003466:	d126      	bne.n	80034b6 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	699b      	ldr	r3, [r3, #24]
 800346c:	2b02      	cmp	r3, #2
 800346e:	d113      	bne.n	8003498 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003476:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800347a:	d106      	bne.n	800348a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2102      	movs	r1, #2
 8003482:	4618      	mov	r0, r3
 8003484:	f003 fcb8 	bl	8006df8 <USB_InitFSLSPClkSel>
 8003488:	e011      	b.n	80034ae <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2101      	movs	r1, #1
 8003490:	4618      	mov	r0, r3
 8003492:	f003 fcb1 	bl	8006df8 <USB_InitFSLSPClkSel>
 8003496:	e00a      	b.n	80034ae <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	2b01      	cmp	r3, #1
 800349e:	d106      	bne.n	80034ae <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80034a6:	461a      	mov	r2, r3
 80034a8:	f64e 2360 	movw	r3, #60000	; 0xea60
 80034ac:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f006 f970 	bl	8009794 <HAL_HCD_PortEnabled_Callback>
 80034b4:	e002      	b.n	80034bc <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f006 f97a 	bl	80097b0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f003 0320 	and.w	r3, r3, #32
 80034c2:	2b20      	cmp	r3, #32
 80034c4:	d103      	bne.n	80034ce <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	f043 0320 	orr.w	r3, r3, #32
 80034cc:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80034d4:	461a      	mov	r2, r3
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	6013      	str	r3, [r2, #0]
}
 80034da:	bf00      	nop
 80034dc:	3718      	adds	r7, #24
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
	...

080034e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d101      	bne.n	80034f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e11f      	b.n	8003736 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d106      	bne.n	8003510 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f7fd f92c 	bl	8000768 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2224      	movs	r2, #36	; 0x24
 8003514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f022 0201 	bic.w	r2, r2, #1
 8003526:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003536:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003546:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003548:	f001 f9de 	bl	8004908 <HAL_RCC_GetPCLK1Freq>
 800354c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	4a7b      	ldr	r2, [pc, #492]	; (8003740 <HAL_I2C_Init+0x25c>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d807      	bhi.n	8003568 <HAL_I2C_Init+0x84>
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	4a7a      	ldr	r2, [pc, #488]	; (8003744 <HAL_I2C_Init+0x260>)
 800355c:	4293      	cmp	r3, r2
 800355e:	bf94      	ite	ls
 8003560:	2301      	movls	r3, #1
 8003562:	2300      	movhi	r3, #0
 8003564:	b2db      	uxtb	r3, r3
 8003566:	e006      	b.n	8003576 <HAL_I2C_Init+0x92>
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	4a77      	ldr	r2, [pc, #476]	; (8003748 <HAL_I2C_Init+0x264>)
 800356c:	4293      	cmp	r3, r2
 800356e:	bf94      	ite	ls
 8003570:	2301      	movls	r3, #1
 8003572:	2300      	movhi	r3, #0
 8003574:	b2db      	uxtb	r3, r3
 8003576:	2b00      	cmp	r3, #0
 8003578:	d001      	beq.n	800357e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e0db      	b.n	8003736 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	4a72      	ldr	r2, [pc, #456]	; (800374c <HAL_I2C_Init+0x268>)
 8003582:	fba2 2303 	umull	r2, r3, r2, r3
 8003586:	0c9b      	lsrs	r3, r3, #18
 8003588:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	68ba      	ldr	r2, [r7, #8]
 800359a:	430a      	orrs	r2, r1
 800359c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	6a1b      	ldr	r3, [r3, #32]
 80035a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	4a64      	ldr	r2, [pc, #400]	; (8003740 <HAL_I2C_Init+0x25c>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d802      	bhi.n	80035b8 <HAL_I2C_Init+0xd4>
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	3301      	adds	r3, #1
 80035b6:	e009      	b.n	80035cc <HAL_I2C_Init+0xe8>
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80035be:	fb02 f303 	mul.w	r3, r2, r3
 80035c2:	4a63      	ldr	r2, [pc, #396]	; (8003750 <HAL_I2C_Init+0x26c>)
 80035c4:	fba2 2303 	umull	r2, r3, r2, r3
 80035c8:	099b      	lsrs	r3, r3, #6
 80035ca:	3301      	adds	r3, #1
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	6812      	ldr	r2, [r2, #0]
 80035d0:	430b      	orrs	r3, r1
 80035d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	69db      	ldr	r3, [r3, #28]
 80035da:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80035de:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	4956      	ldr	r1, [pc, #344]	; (8003740 <HAL_I2C_Init+0x25c>)
 80035e8:	428b      	cmp	r3, r1
 80035ea:	d80d      	bhi.n	8003608 <HAL_I2C_Init+0x124>
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	1e59      	subs	r1, r3, #1
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	005b      	lsls	r3, r3, #1
 80035f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80035fa:	3301      	adds	r3, #1
 80035fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003600:	2b04      	cmp	r3, #4
 8003602:	bf38      	it	cc
 8003604:	2304      	movcc	r3, #4
 8003606:	e04f      	b.n	80036a8 <HAL_I2C_Init+0x1c4>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d111      	bne.n	8003634 <HAL_I2C_Init+0x150>
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	1e58      	subs	r0, r3, #1
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6859      	ldr	r1, [r3, #4]
 8003618:	460b      	mov	r3, r1
 800361a:	005b      	lsls	r3, r3, #1
 800361c:	440b      	add	r3, r1
 800361e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003622:	3301      	adds	r3, #1
 8003624:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003628:	2b00      	cmp	r3, #0
 800362a:	bf0c      	ite	eq
 800362c:	2301      	moveq	r3, #1
 800362e:	2300      	movne	r3, #0
 8003630:	b2db      	uxtb	r3, r3
 8003632:	e012      	b.n	800365a <HAL_I2C_Init+0x176>
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	1e58      	subs	r0, r3, #1
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6859      	ldr	r1, [r3, #4]
 800363c:	460b      	mov	r3, r1
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	440b      	add	r3, r1
 8003642:	0099      	lsls	r1, r3, #2
 8003644:	440b      	add	r3, r1
 8003646:	fbb0 f3f3 	udiv	r3, r0, r3
 800364a:	3301      	adds	r3, #1
 800364c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003650:	2b00      	cmp	r3, #0
 8003652:	bf0c      	ite	eq
 8003654:	2301      	moveq	r3, #1
 8003656:	2300      	movne	r3, #0
 8003658:	b2db      	uxtb	r3, r3
 800365a:	2b00      	cmp	r3, #0
 800365c:	d001      	beq.n	8003662 <HAL_I2C_Init+0x17e>
 800365e:	2301      	movs	r3, #1
 8003660:	e022      	b.n	80036a8 <HAL_I2C_Init+0x1c4>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d10e      	bne.n	8003688 <HAL_I2C_Init+0x1a4>
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	1e58      	subs	r0, r3, #1
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6859      	ldr	r1, [r3, #4]
 8003672:	460b      	mov	r3, r1
 8003674:	005b      	lsls	r3, r3, #1
 8003676:	440b      	add	r3, r1
 8003678:	fbb0 f3f3 	udiv	r3, r0, r3
 800367c:	3301      	adds	r3, #1
 800367e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003682:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003686:	e00f      	b.n	80036a8 <HAL_I2C_Init+0x1c4>
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	1e58      	subs	r0, r3, #1
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6859      	ldr	r1, [r3, #4]
 8003690:	460b      	mov	r3, r1
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	440b      	add	r3, r1
 8003696:	0099      	lsls	r1, r3, #2
 8003698:	440b      	add	r3, r1
 800369a:	fbb0 f3f3 	udiv	r3, r0, r3
 800369e:	3301      	adds	r3, #1
 80036a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80036a8:	6879      	ldr	r1, [r7, #4]
 80036aa:	6809      	ldr	r1, [r1, #0]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	69da      	ldr	r2, [r3, #28]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a1b      	ldr	r3, [r3, #32]
 80036c2:	431a      	orrs	r2, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	430a      	orrs	r2, r1
 80036ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80036d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	6911      	ldr	r1, [r2, #16]
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	68d2      	ldr	r2, [r2, #12]
 80036e2:	4311      	orrs	r1, r2
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	6812      	ldr	r2, [r2, #0]
 80036e8:	430b      	orrs	r3, r1
 80036ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	695a      	ldr	r2, [r3, #20]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	699b      	ldr	r3, [r3, #24]
 80036fe:	431a      	orrs	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	430a      	orrs	r2, r1
 8003706:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f042 0201 	orr.w	r2, r2, #1
 8003716:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2220      	movs	r2, #32
 8003722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003734:	2300      	movs	r3, #0
}
 8003736:	4618      	mov	r0, r3
 8003738:	3710      	adds	r7, #16
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	000186a0 	.word	0x000186a0
 8003744:	001e847f 	.word	0x001e847f
 8003748:	003d08ff 	.word	0x003d08ff
 800374c:	431bde83 	.word	0x431bde83
 8003750:	10624dd3 	.word	0x10624dd3

08003754 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b088      	sub	sp, #32
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d101      	bne.n	8003766 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e128      	b.n	80039b8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800376c:	b2db      	uxtb	r3, r3
 800376e:	2b00      	cmp	r3, #0
 8003770:	d109      	bne.n	8003786 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a90      	ldr	r2, [pc, #576]	; (80039c0 <HAL_I2S_Init+0x26c>)
 800377e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f7fd f869 	bl	8000858 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2202      	movs	r2, #2
 800378a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	69db      	ldr	r3, [r3, #28]
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	6812      	ldr	r2, [r2, #0]
 8003798:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800379c:	f023 030f 	bic.w	r3, r3, #15
 80037a0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2202      	movs	r2, #2
 80037a8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	695b      	ldr	r3, [r3, #20]
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d060      	beq.n	8003874 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d102      	bne.n	80037c0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80037ba:	2310      	movs	r3, #16
 80037bc:	617b      	str	r3, [r7, #20]
 80037be:	e001      	b.n	80037c4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80037c0:	2320      	movs	r3, #32
 80037c2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	2b20      	cmp	r3, #32
 80037ca:	d802      	bhi.n	80037d2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	005b      	lsls	r3, r3, #1
 80037d0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80037d2:	2001      	movs	r0, #1
 80037d4:	f001 f9a2 	bl	8004b1c <HAL_RCCEx_GetPeriphCLKFreq>
 80037d8:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037e2:	d125      	bne.n	8003830 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d010      	beq.n	800380e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	68fa      	ldr	r2, [r7, #12]
 80037f2:	fbb2 f2f3 	udiv	r2, r2, r3
 80037f6:	4613      	mov	r3, r2
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	4413      	add	r3, r2
 80037fc:	005b      	lsls	r3, r3, #1
 80037fe:	461a      	mov	r2, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	695b      	ldr	r3, [r3, #20]
 8003804:	fbb2 f3f3 	udiv	r3, r2, r3
 8003808:	3305      	adds	r3, #5
 800380a:	613b      	str	r3, [r7, #16]
 800380c:	e01f      	b.n	800384e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	00db      	lsls	r3, r3, #3
 8003812:	68fa      	ldr	r2, [r7, #12]
 8003814:	fbb2 f2f3 	udiv	r2, r2, r3
 8003818:	4613      	mov	r3, r2
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	4413      	add	r3, r2
 800381e:	005b      	lsls	r3, r3, #1
 8003820:	461a      	mov	r2, r3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	695b      	ldr	r3, [r3, #20]
 8003826:	fbb2 f3f3 	udiv	r3, r2, r3
 800382a:	3305      	adds	r3, #5
 800382c:	613b      	str	r3, [r7, #16]
 800382e:	e00e      	b.n	800384e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003830:	68fa      	ldr	r2, [r7, #12]
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	fbb2 f2f3 	udiv	r2, r2, r3
 8003838:	4613      	mov	r3, r2
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	4413      	add	r3, r2
 800383e:	005b      	lsls	r3, r3, #1
 8003840:	461a      	mov	r2, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	695b      	ldr	r3, [r3, #20]
 8003846:	fbb2 f3f3 	udiv	r3, r2, r3
 800384a:	3305      	adds	r3, #5
 800384c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	4a5c      	ldr	r2, [pc, #368]	; (80039c4 <HAL_I2S_Init+0x270>)
 8003852:	fba2 2303 	umull	r2, r3, r2, r3
 8003856:	08db      	lsrs	r3, r3, #3
 8003858:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	f003 0301 	and.w	r3, r3, #1
 8003860:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003862:	693a      	ldr	r2, [r7, #16]
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	085b      	lsrs	r3, r3, #1
 800386a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	021b      	lsls	r3, r3, #8
 8003870:	61bb      	str	r3, [r7, #24]
 8003872:	e003      	b.n	800387c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003874:	2302      	movs	r3, #2
 8003876:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003878:	2300      	movs	r3, #0
 800387a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	2b01      	cmp	r3, #1
 8003880:	d902      	bls.n	8003888 <HAL_I2S_Init+0x134>
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	2bff      	cmp	r3, #255	; 0xff
 8003886:	d907      	bls.n	8003898 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800388c:	f043 0210 	orr.w	r2, r3, #16
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e08f      	b.n	80039b8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	691a      	ldr	r2, [r3, #16]
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	ea42 0103 	orr.w	r1, r2, r3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	69fa      	ldr	r2, [r7, #28]
 80038a8:	430a      	orrs	r2, r1
 80038aa:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	69db      	ldr	r3, [r3, #28]
 80038b2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80038b6:	f023 030f 	bic.w	r3, r3, #15
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	6851      	ldr	r1, [r2, #4]
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	6892      	ldr	r2, [r2, #8]
 80038c2:	4311      	orrs	r1, r2
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	68d2      	ldr	r2, [r2, #12]
 80038c8:	4311      	orrs	r1, r2
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	6992      	ldr	r2, [r2, #24]
 80038ce:	430a      	orrs	r2, r1
 80038d0:	431a      	orrs	r2, r3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038da:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a1b      	ldr	r3, [r3, #32]
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d161      	bne.n	80039a8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	4a38      	ldr	r2, [pc, #224]	; (80039c8 <HAL_I2S_Init+0x274>)
 80038e8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a37      	ldr	r2, [pc, #220]	; (80039cc <HAL_I2S_Init+0x278>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d101      	bne.n	80038f8 <HAL_I2S_Init+0x1a4>
 80038f4:	4b36      	ldr	r3, [pc, #216]	; (80039d0 <HAL_I2S_Init+0x27c>)
 80038f6:	e001      	b.n	80038fc <HAL_I2S_Init+0x1a8>
 80038f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038fc:	69db      	ldr	r3, [r3, #28]
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	6812      	ldr	r2, [r2, #0]
 8003902:	4932      	ldr	r1, [pc, #200]	; (80039cc <HAL_I2S_Init+0x278>)
 8003904:	428a      	cmp	r2, r1
 8003906:	d101      	bne.n	800390c <HAL_I2S_Init+0x1b8>
 8003908:	4a31      	ldr	r2, [pc, #196]	; (80039d0 <HAL_I2S_Init+0x27c>)
 800390a:	e001      	b.n	8003910 <HAL_I2S_Init+0x1bc>
 800390c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003910:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003914:	f023 030f 	bic.w	r3, r3, #15
 8003918:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a2b      	ldr	r2, [pc, #172]	; (80039cc <HAL_I2S_Init+0x278>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d101      	bne.n	8003928 <HAL_I2S_Init+0x1d4>
 8003924:	4b2a      	ldr	r3, [pc, #168]	; (80039d0 <HAL_I2S_Init+0x27c>)
 8003926:	e001      	b.n	800392c <HAL_I2S_Init+0x1d8>
 8003928:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800392c:	2202      	movs	r2, #2
 800392e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a25      	ldr	r2, [pc, #148]	; (80039cc <HAL_I2S_Init+0x278>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d101      	bne.n	800393e <HAL_I2S_Init+0x1ea>
 800393a:	4b25      	ldr	r3, [pc, #148]	; (80039d0 <HAL_I2S_Init+0x27c>)
 800393c:	e001      	b.n	8003942 <HAL_I2S_Init+0x1ee>
 800393e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003942:	69db      	ldr	r3, [r3, #28]
 8003944:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800394e:	d003      	beq.n	8003958 <HAL_I2S_Init+0x204>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d103      	bne.n	8003960 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003958:	f44f 7380 	mov.w	r3, #256	; 0x100
 800395c:	613b      	str	r3, [r7, #16]
 800395e:	e001      	b.n	8003964 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003960:	2300      	movs	r3, #0
 8003962:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	b299      	uxth	r1, r3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	699b      	ldr	r3, [r3, #24]
 8003978:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800397a:	4303      	orrs	r3, r0
 800397c:	b29b      	uxth	r3, r3
 800397e:	430b      	orrs	r3, r1
 8003980:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003982:	4313      	orrs	r3, r2
 8003984:	b29a      	uxth	r2, r3
 8003986:	897b      	ldrh	r3, [r7, #10]
 8003988:	4313      	orrs	r3, r2
 800398a:	b29b      	uxth	r3, r3
 800398c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003990:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a0d      	ldr	r2, [pc, #52]	; (80039cc <HAL_I2S_Init+0x278>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d101      	bne.n	80039a0 <HAL_I2S_Init+0x24c>
 800399c:	4b0c      	ldr	r3, [pc, #48]	; (80039d0 <HAL_I2S_Init+0x27c>)
 800399e:	e001      	b.n	80039a4 <HAL_I2S_Init+0x250>
 80039a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039a4:	897a      	ldrh	r2, [r7, #10]
 80039a6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2200      	movs	r2, #0
 80039ac:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2201      	movs	r2, #1
 80039b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80039b6:	2300      	movs	r3, #0
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3720      	adds	r7, #32
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	08003acb 	.word	0x08003acb
 80039c4:	cccccccd 	.word	0xcccccccd
 80039c8:	08003be1 	.word	0x08003be1
 80039cc:	40003800 	.word	0x40003800
 80039d0:	40003400 	.word	0x40003400

080039d4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80039dc:	bf00      	nop
 80039de:	370c      	adds	r7, #12
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr

080039e8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80039f0:	bf00      	nop
 80039f2:	370c      	adds	r7, #12
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr

080039fc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003a04:	bf00      	nop
 8003a06:	370c      	adds	r7, #12
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr

08003a10 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1c:	881a      	ldrh	r2, [r3, #0]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a28:	1c9a      	adds	r2, r3, #2
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	3b01      	subs	r3, #1
 8003a36:	b29a      	uxth	r2, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d10e      	bne.n	8003a64 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	685a      	ldr	r2, [r3, #4]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a54:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f7ff ffb8 	bl	80039d4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003a64:	bf00      	nop
 8003a66:	3708      	adds	r7, #8
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}

08003a6c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	68da      	ldr	r2, [r3, #12]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a7e:	b292      	uxth	r2, r2
 8003a80:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a86:	1c9a      	adds	r2, r3, #2
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	3b01      	subs	r3, #1
 8003a94:	b29a      	uxth	r2, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d10e      	bne.n	8003ac2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	685a      	ldr	r2, [r3, #4]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ab2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f7ff ff93 	bl	80039e8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003ac2:	bf00      	nop
 8003ac4:	3708      	adds	r7, #8
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}

08003aca <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003aca:	b580      	push	{r7, lr}
 8003acc:	b086      	sub	sp, #24
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	2b04      	cmp	r3, #4
 8003ae4:	d13a      	bne.n	8003b5c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	f003 0301 	and.w	r3, r3, #1
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d109      	bne.n	8003b04 <I2S_IRQHandler+0x3a>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003afa:	2b40      	cmp	r3, #64	; 0x40
 8003afc:	d102      	bne.n	8003b04 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f7ff ffb4 	bl	8003a6c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b0a:	2b40      	cmp	r3, #64	; 0x40
 8003b0c:	d126      	bne.n	8003b5c <I2S_IRQHandler+0x92>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f003 0320 	and.w	r3, r3, #32
 8003b18:	2b20      	cmp	r3, #32
 8003b1a:	d11f      	bne.n	8003b5c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	685a      	ldr	r2, [r3, #4]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b2a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	613b      	str	r3, [r7, #16]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	613b      	str	r3, [r7, #16]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	613b      	str	r3, [r7, #16]
 8003b40:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2201      	movs	r2, #1
 8003b46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b4e:	f043 0202 	orr.w	r2, r3, #2
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f7ff ff50 	bl	80039fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	2b03      	cmp	r3, #3
 8003b66:	d136      	bne.n	8003bd6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d109      	bne.n	8003b86 <I2S_IRQHandler+0xbc>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b7c:	2b80      	cmp	r3, #128	; 0x80
 8003b7e:	d102      	bne.n	8003b86 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f7ff ff45 	bl	8003a10 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	f003 0308 	and.w	r3, r3, #8
 8003b8c:	2b08      	cmp	r3, #8
 8003b8e:	d122      	bne.n	8003bd6 <I2S_IRQHandler+0x10c>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f003 0320 	and.w	r3, r3, #32
 8003b9a:	2b20      	cmp	r3, #32
 8003b9c:	d11b      	bne.n	8003bd6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	685a      	ldr	r2, [r3, #4]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003bac:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003bae:	2300      	movs	r3, #0
 8003bb0:	60fb      	str	r3, [r7, #12]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	60fb      	str	r3, [r7, #12]
 8003bba:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc8:	f043 0204 	orr.w	r2, r3, #4
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f7ff ff13 	bl	80039fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003bd6:	bf00      	nop
 8003bd8:	3718      	adds	r7, #24
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
	...

08003be0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b088      	sub	sp, #32
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4aa2      	ldr	r2, [pc, #648]	; (8003e80 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d101      	bne.n	8003bfe <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003bfa:	4ba2      	ldr	r3, [pc, #648]	; (8003e84 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003bfc:	e001      	b.n	8003c02 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003bfe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a9b      	ldr	r2, [pc, #620]	; (8003e80 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d101      	bne.n	8003c1c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003c18:	4b9a      	ldr	r3, [pc, #616]	; (8003e84 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003c1a:	e001      	b.n	8003c20 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003c1c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c2c:	d004      	beq.n	8003c38 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	f040 8099 	bne.w	8003d6a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	f003 0302 	and.w	r3, r3, #2
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d107      	bne.n	8003c52 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d002      	beq.n	8003c52 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f000 f925 	bl	8003e9c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	f003 0301 	and.w	r3, r3, #1
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d107      	bne.n	8003c6c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d002      	beq.n	8003c6c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f000 f9c8 	bl	8003ffc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003c6c:	69bb      	ldr	r3, [r7, #24]
 8003c6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c72:	2b40      	cmp	r3, #64	; 0x40
 8003c74:	d13a      	bne.n	8003cec <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	f003 0320 	and.w	r3, r3, #32
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d035      	beq.n	8003cec <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a7e      	ldr	r2, [pc, #504]	; (8003e80 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d101      	bne.n	8003c8e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003c8a:	4b7e      	ldr	r3, [pc, #504]	; (8003e84 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003c8c:	e001      	b.n	8003c92 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003c8e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c92:	685a      	ldr	r2, [r3, #4]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4979      	ldr	r1, [pc, #484]	; (8003e80 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003c9a:	428b      	cmp	r3, r1
 8003c9c:	d101      	bne.n	8003ca2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003c9e:	4b79      	ldr	r3, [pc, #484]	; (8003e84 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003ca0:	e001      	b.n	8003ca6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003ca2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ca6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003caa:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	685a      	ldr	r2, [r3, #4]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003cba:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	60fb      	str	r3, [r7, #12]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	60fb      	str	r3, [r7, #12]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	60fb      	str	r3, [r7, #12]
 8003cd0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cde:	f043 0202 	orr.w	r2, r3, #2
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f7ff fe88 	bl	80039fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	f003 0308 	and.w	r3, r3, #8
 8003cf2:	2b08      	cmp	r3, #8
 8003cf4:	f040 80be 	bne.w	8003e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	f003 0320 	and.w	r3, r3, #32
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	f000 80b8 	beq.w	8003e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	685a      	ldr	r2, [r3, #4]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d12:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a59      	ldr	r2, [pc, #356]	; (8003e80 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d101      	bne.n	8003d22 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003d1e:	4b59      	ldr	r3, [pc, #356]	; (8003e84 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003d20:	e001      	b.n	8003d26 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003d22:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d26:	685a      	ldr	r2, [r3, #4]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4954      	ldr	r1, [pc, #336]	; (8003e80 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003d2e:	428b      	cmp	r3, r1
 8003d30:	d101      	bne.n	8003d36 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003d32:	4b54      	ldr	r3, [pc, #336]	; (8003e84 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003d34:	e001      	b.n	8003d3a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003d36:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d3a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d3e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003d40:	2300      	movs	r3, #0
 8003d42:	60bb      	str	r3, [r7, #8]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	60bb      	str	r3, [r7, #8]
 8003d4c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2201      	movs	r2, #1
 8003d52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d5a:	f043 0204 	orr.w	r2, r3, #4
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f7ff fe4a 	bl	80039fc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003d68:	e084      	b.n	8003e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	f003 0302 	and.w	r3, r3, #2
 8003d70:	2b02      	cmp	r3, #2
 8003d72:	d107      	bne.n	8003d84 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d002      	beq.n	8003d84 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f000 f8be 	bl	8003f00 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	f003 0301 	and.w	r3, r3, #1
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d107      	bne.n	8003d9e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d002      	beq.n	8003d9e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f000 f8fd 	bl	8003f98 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003da4:	2b40      	cmp	r3, #64	; 0x40
 8003da6:	d12f      	bne.n	8003e08 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	f003 0320 	and.w	r3, r3, #32
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d02a      	beq.n	8003e08 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	685a      	ldr	r2, [r3, #4]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003dc0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a2e      	ldr	r2, [pc, #184]	; (8003e80 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d101      	bne.n	8003dd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003dcc:	4b2d      	ldr	r3, [pc, #180]	; (8003e84 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003dce:	e001      	b.n	8003dd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003dd0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003dd4:	685a      	ldr	r2, [r3, #4]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4929      	ldr	r1, [pc, #164]	; (8003e80 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003ddc:	428b      	cmp	r3, r1
 8003dde:	d101      	bne.n	8003de4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003de0:	4b28      	ldr	r3, [pc, #160]	; (8003e84 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003de2:	e001      	b.n	8003de8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003de4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003de8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003dec:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2201      	movs	r2, #1
 8003df2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dfa:	f043 0202 	orr.w	r2, r3, #2
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f7ff fdfa 	bl	80039fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003e08:	69bb      	ldr	r3, [r7, #24]
 8003e0a:	f003 0308 	and.w	r3, r3, #8
 8003e0e:	2b08      	cmp	r3, #8
 8003e10:	d131      	bne.n	8003e76 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	f003 0320 	and.w	r3, r3, #32
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d02c      	beq.n	8003e76 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a17      	ldr	r2, [pc, #92]	; (8003e80 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d101      	bne.n	8003e2a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003e26:	4b17      	ldr	r3, [pc, #92]	; (8003e84 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003e28:	e001      	b.n	8003e2e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003e2a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e2e:	685a      	ldr	r2, [r3, #4]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4912      	ldr	r1, [pc, #72]	; (8003e80 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003e36:	428b      	cmp	r3, r1
 8003e38:	d101      	bne.n	8003e3e <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8003e3a:	4b12      	ldr	r3, [pc, #72]	; (8003e84 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003e3c:	e001      	b.n	8003e42 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8003e3e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e42:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e46:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	685a      	ldr	r2, [r3, #4]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003e56:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e64:	f043 0204 	orr.w	r2, r3, #4
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f7ff fdc5 	bl	80039fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e72:	e000      	b.n	8003e76 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003e74:	bf00      	nop
}
 8003e76:	bf00      	nop
 8003e78:	3720      	adds	r7, #32
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	40003800 	.word	0x40003800
 8003e84:	40003400 	.word	0x40003400

08003e88 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003e90:	bf00      	nop
 8003e92:	370c      	adds	r7, #12
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea8:	1c99      	adds	r1, r3, #2
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	6251      	str	r1, [r2, #36]	; 0x24
 8003eae:	881a      	ldrh	r2, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	3b01      	subs	r3, #1
 8003ebe:	b29a      	uxth	r2, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d113      	bne.n	8003ef6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	685a      	ldr	r2, [r3, #4]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003edc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d106      	bne.n	8003ef6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f7ff ffc9 	bl	8003e88 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ef6:	bf00      	nop
 8003ef8:	3708      	adds	r7, #8
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
	...

08003f00 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b082      	sub	sp, #8
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0c:	1c99      	adds	r1, r3, #2
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	6251      	str	r1, [r2, #36]	; 0x24
 8003f12:	8819      	ldrh	r1, [r3, #0]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a1d      	ldr	r2, [pc, #116]	; (8003f90 <I2SEx_TxISR_I2SExt+0x90>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d101      	bne.n	8003f22 <I2SEx_TxISR_I2SExt+0x22>
 8003f1e:	4b1d      	ldr	r3, [pc, #116]	; (8003f94 <I2SEx_TxISR_I2SExt+0x94>)
 8003f20:	e001      	b.n	8003f26 <I2SEx_TxISR_I2SExt+0x26>
 8003f22:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f26:	460a      	mov	r2, r1
 8003f28:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	3b01      	subs	r3, #1
 8003f32:	b29a      	uxth	r2, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d121      	bne.n	8003f86 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a12      	ldr	r2, [pc, #72]	; (8003f90 <I2SEx_TxISR_I2SExt+0x90>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d101      	bne.n	8003f50 <I2SEx_TxISR_I2SExt+0x50>
 8003f4c:	4b11      	ldr	r3, [pc, #68]	; (8003f94 <I2SEx_TxISR_I2SExt+0x94>)
 8003f4e:	e001      	b.n	8003f54 <I2SEx_TxISR_I2SExt+0x54>
 8003f50:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f54:	685a      	ldr	r2, [r3, #4]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	490d      	ldr	r1, [pc, #52]	; (8003f90 <I2SEx_TxISR_I2SExt+0x90>)
 8003f5c:	428b      	cmp	r3, r1
 8003f5e:	d101      	bne.n	8003f64 <I2SEx_TxISR_I2SExt+0x64>
 8003f60:	4b0c      	ldr	r3, [pc, #48]	; (8003f94 <I2SEx_TxISR_I2SExt+0x94>)
 8003f62:	e001      	b.n	8003f68 <I2SEx_TxISR_I2SExt+0x68>
 8003f64:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f68:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f6c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d106      	bne.n	8003f86 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f7ff ff81 	bl	8003e88 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003f86:	bf00      	nop
 8003f88:	3708      	adds	r7, #8
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	40003800 	.word	0x40003800
 8003f94:	40003400 	.word	0x40003400

08003f98 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	68d8      	ldr	r0, [r3, #12]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003faa:	1c99      	adds	r1, r3, #2
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003fb0:	b282      	uxth	r2, r0
 8003fb2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	3b01      	subs	r3, #1
 8003fbc:	b29a      	uxth	r2, r3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d113      	bne.n	8003ff4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	685a      	ldr	r2, [r3, #4]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003fda:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d106      	bne.n	8003ff4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f7ff ff4a 	bl	8003e88 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ff4:	bf00      	nop
 8003ff6:	3708      	adds	r7, #8
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b082      	sub	sp, #8
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a20      	ldr	r2, [pc, #128]	; (800408c <I2SEx_RxISR_I2SExt+0x90>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d101      	bne.n	8004012 <I2SEx_RxISR_I2SExt+0x16>
 800400e:	4b20      	ldr	r3, [pc, #128]	; (8004090 <I2SEx_RxISR_I2SExt+0x94>)
 8004010:	e001      	b.n	8004016 <I2SEx_RxISR_I2SExt+0x1a>
 8004012:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004016:	68d8      	ldr	r0, [r3, #12]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800401c:	1c99      	adds	r1, r3, #2
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004022:	b282      	uxth	r2, r0
 8004024:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800402a:	b29b      	uxth	r3, r3
 800402c:	3b01      	subs	r3, #1
 800402e:	b29a      	uxth	r2, r3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004038:	b29b      	uxth	r3, r3
 800403a:	2b00      	cmp	r3, #0
 800403c:	d121      	bne.n	8004082 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a12      	ldr	r2, [pc, #72]	; (800408c <I2SEx_RxISR_I2SExt+0x90>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d101      	bne.n	800404c <I2SEx_RxISR_I2SExt+0x50>
 8004048:	4b11      	ldr	r3, [pc, #68]	; (8004090 <I2SEx_RxISR_I2SExt+0x94>)
 800404a:	e001      	b.n	8004050 <I2SEx_RxISR_I2SExt+0x54>
 800404c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004050:	685a      	ldr	r2, [r3, #4]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	490d      	ldr	r1, [pc, #52]	; (800408c <I2SEx_RxISR_I2SExt+0x90>)
 8004058:	428b      	cmp	r3, r1
 800405a:	d101      	bne.n	8004060 <I2SEx_RxISR_I2SExt+0x64>
 800405c:	4b0c      	ldr	r3, [pc, #48]	; (8004090 <I2SEx_RxISR_I2SExt+0x94>)
 800405e:	e001      	b.n	8004064 <I2SEx_RxISR_I2SExt+0x68>
 8004060:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004064:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004068:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800406e:	b29b      	uxth	r3, r3
 8004070:	2b00      	cmp	r3, #0
 8004072:	d106      	bne.n	8004082 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f7ff ff03 	bl	8003e88 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004082:	bf00      	nop
 8004084:	3708      	adds	r7, #8
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	40003800 	.word	0x40003800
 8004090:	40003400 	.word	0x40003400

08004094 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b086      	sub	sp, #24
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d101      	bne.n	80040a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e25b      	b.n	800455e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0301 	and.w	r3, r3, #1
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d075      	beq.n	800419e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040b2:	4ba3      	ldr	r3, [pc, #652]	; (8004340 <HAL_RCC_OscConfig+0x2ac>)
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	f003 030c 	and.w	r3, r3, #12
 80040ba:	2b04      	cmp	r3, #4
 80040bc:	d00c      	beq.n	80040d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040be:	4ba0      	ldr	r3, [pc, #640]	; (8004340 <HAL_RCC_OscConfig+0x2ac>)
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040c6:	2b08      	cmp	r3, #8
 80040c8:	d112      	bne.n	80040f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040ca:	4b9d      	ldr	r3, [pc, #628]	; (8004340 <HAL_RCC_OscConfig+0x2ac>)
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040d6:	d10b      	bne.n	80040f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040d8:	4b99      	ldr	r3, [pc, #612]	; (8004340 <HAL_RCC_OscConfig+0x2ac>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d05b      	beq.n	800419c <HAL_RCC_OscConfig+0x108>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d157      	bne.n	800419c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e236      	b.n	800455e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040f8:	d106      	bne.n	8004108 <HAL_RCC_OscConfig+0x74>
 80040fa:	4b91      	ldr	r3, [pc, #580]	; (8004340 <HAL_RCC_OscConfig+0x2ac>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a90      	ldr	r2, [pc, #576]	; (8004340 <HAL_RCC_OscConfig+0x2ac>)
 8004100:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004104:	6013      	str	r3, [r2, #0]
 8004106:	e01d      	b.n	8004144 <HAL_RCC_OscConfig+0xb0>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004110:	d10c      	bne.n	800412c <HAL_RCC_OscConfig+0x98>
 8004112:	4b8b      	ldr	r3, [pc, #556]	; (8004340 <HAL_RCC_OscConfig+0x2ac>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a8a      	ldr	r2, [pc, #552]	; (8004340 <HAL_RCC_OscConfig+0x2ac>)
 8004118:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800411c:	6013      	str	r3, [r2, #0]
 800411e:	4b88      	ldr	r3, [pc, #544]	; (8004340 <HAL_RCC_OscConfig+0x2ac>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a87      	ldr	r2, [pc, #540]	; (8004340 <HAL_RCC_OscConfig+0x2ac>)
 8004124:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004128:	6013      	str	r3, [r2, #0]
 800412a:	e00b      	b.n	8004144 <HAL_RCC_OscConfig+0xb0>
 800412c:	4b84      	ldr	r3, [pc, #528]	; (8004340 <HAL_RCC_OscConfig+0x2ac>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a83      	ldr	r2, [pc, #524]	; (8004340 <HAL_RCC_OscConfig+0x2ac>)
 8004132:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004136:	6013      	str	r3, [r2, #0]
 8004138:	4b81      	ldr	r3, [pc, #516]	; (8004340 <HAL_RCC_OscConfig+0x2ac>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a80      	ldr	r2, [pc, #512]	; (8004340 <HAL_RCC_OscConfig+0x2ac>)
 800413e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004142:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d013      	beq.n	8004174 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800414c:	f7fd f990 	bl	8001470 <HAL_GetTick>
 8004150:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004152:	e008      	b.n	8004166 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004154:	f7fd f98c 	bl	8001470 <HAL_GetTick>
 8004158:	4602      	mov	r2, r0
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	2b64      	cmp	r3, #100	; 0x64
 8004160:	d901      	bls.n	8004166 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e1fb      	b.n	800455e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004166:	4b76      	ldr	r3, [pc, #472]	; (8004340 <HAL_RCC_OscConfig+0x2ac>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d0f0      	beq.n	8004154 <HAL_RCC_OscConfig+0xc0>
 8004172:	e014      	b.n	800419e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004174:	f7fd f97c 	bl	8001470 <HAL_GetTick>
 8004178:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800417a:	e008      	b.n	800418e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800417c:	f7fd f978 	bl	8001470 <HAL_GetTick>
 8004180:	4602      	mov	r2, r0
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	2b64      	cmp	r3, #100	; 0x64
 8004188:	d901      	bls.n	800418e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	e1e7      	b.n	800455e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800418e:	4b6c      	ldr	r3, [pc, #432]	; (8004340 <HAL_RCC_OscConfig+0x2ac>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d1f0      	bne.n	800417c <HAL_RCC_OscConfig+0xe8>
 800419a:	e000      	b.n	800419e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800419c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0302 	and.w	r3, r3, #2
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d063      	beq.n	8004272 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041aa:	4b65      	ldr	r3, [pc, #404]	; (8004340 <HAL_RCC_OscConfig+0x2ac>)
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	f003 030c 	and.w	r3, r3, #12
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d00b      	beq.n	80041ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041b6:	4b62      	ldr	r3, [pc, #392]	; (8004340 <HAL_RCC_OscConfig+0x2ac>)
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041be:	2b08      	cmp	r3, #8
 80041c0:	d11c      	bne.n	80041fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041c2:	4b5f      	ldr	r3, [pc, #380]	; (8004340 <HAL_RCC_OscConfig+0x2ac>)
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d116      	bne.n	80041fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041ce:	4b5c      	ldr	r3, [pc, #368]	; (8004340 <HAL_RCC_OscConfig+0x2ac>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 0302 	and.w	r3, r3, #2
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d005      	beq.n	80041e6 <HAL_RCC_OscConfig+0x152>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d001      	beq.n	80041e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e1bb      	b.n	800455e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041e6:	4b56      	ldr	r3, [pc, #344]	; (8004340 <HAL_RCC_OscConfig+0x2ac>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	00db      	lsls	r3, r3, #3
 80041f4:	4952      	ldr	r1, [pc, #328]	; (8004340 <HAL_RCC_OscConfig+0x2ac>)
 80041f6:	4313      	orrs	r3, r2
 80041f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041fa:	e03a      	b.n	8004272 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d020      	beq.n	8004246 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004204:	4b4f      	ldr	r3, [pc, #316]	; (8004344 <HAL_RCC_OscConfig+0x2b0>)
 8004206:	2201      	movs	r2, #1
 8004208:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800420a:	f7fd f931 	bl	8001470 <HAL_GetTick>
 800420e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004210:	e008      	b.n	8004224 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004212:	f7fd f92d 	bl	8001470 <HAL_GetTick>
 8004216:	4602      	mov	r2, r0
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	2b02      	cmp	r3, #2
 800421e:	d901      	bls.n	8004224 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004220:	2303      	movs	r3, #3
 8004222:	e19c      	b.n	800455e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004224:	4b46      	ldr	r3, [pc, #280]	; (8004340 <HAL_RCC_OscConfig+0x2ac>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0302 	and.w	r3, r3, #2
 800422c:	2b00      	cmp	r3, #0
 800422e:	d0f0      	beq.n	8004212 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004230:	4b43      	ldr	r3, [pc, #268]	; (8004340 <HAL_RCC_OscConfig+0x2ac>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	691b      	ldr	r3, [r3, #16]
 800423c:	00db      	lsls	r3, r3, #3
 800423e:	4940      	ldr	r1, [pc, #256]	; (8004340 <HAL_RCC_OscConfig+0x2ac>)
 8004240:	4313      	orrs	r3, r2
 8004242:	600b      	str	r3, [r1, #0]
 8004244:	e015      	b.n	8004272 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004246:	4b3f      	ldr	r3, [pc, #252]	; (8004344 <HAL_RCC_OscConfig+0x2b0>)
 8004248:	2200      	movs	r2, #0
 800424a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800424c:	f7fd f910 	bl	8001470 <HAL_GetTick>
 8004250:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004252:	e008      	b.n	8004266 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004254:	f7fd f90c 	bl	8001470 <HAL_GetTick>
 8004258:	4602      	mov	r2, r0
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	2b02      	cmp	r3, #2
 8004260:	d901      	bls.n	8004266 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e17b      	b.n	800455e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004266:	4b36      	ldr	r3, [pc, #216]	; (8004340 <HAL_RCC_OscConfig+0x2ac>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0302 	and.w	r3, r3, #2
 800426e:	2b00      	cmp	r3, #0
 8004270:	d1f0      	bne.n	8004254 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0308 	and.w	r3, r3, #8
 800427a:	2b00      	cmp	r3, #0
 800427c:	d030      	beq.n	80042e0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	695b      	ldr	r3, [r3, #20]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d016      	beq.n	80042b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004286:	4b30      	ldr	r3, [pc, #192]	; (8004348 <HAL_RCC_OscConfig+0x2b4>)
 8004288:	2201      	movs	r2, #1
 800428a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800428c:	f7fd f8f0 	bl	8001470 <HAL_GetTick>
 8004290:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004292:	e008      	b.n	80042a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004294:	f7fd f8ec 	bl	8001470 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d901      	bls.n	80042a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e15b      	b.n	800455e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042a6:	4b26      	ldr	r3, [pc, #152]	; (8004340 <HAL_RCC_OscConfig+0x2ac>)
 80042a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042aa:	f003 0302 	and.w	r3, r3, #2
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d0f0      	beq.n	8004294 <HAL_RCC_OscConfig+0x200>
 80042b2:	e015      	b.n	80042e0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042b4:	4b24      	ldr	r3, [pc, #144]	; (8004348 <HAL_RCC_OscConfig+0x2b4>)
 80042b6:	2200      	movs	r2, #0
 80042b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042ba:	f7fd f8d9 	bl	8001470 <HAL_GetTick>
 80042be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042c0:	e008      	b.n	80042d4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042c2:	f7fd f8d5 	bl	8001470 <HAL_GetTick>
 80042c6:	4602      	mov	r2, r0
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	d901      	bls.n	80042d4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80042d0:	2303      	movs	r3, #3
 80042d2:	e144      	b.n	800455e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042d4:	4b1a      	ldr	r3, [pc, #104]	; (8004340 <HAL_RCC_OscConfig+0x2ac>)
 80042d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042d8:	f003 0302 	and.w	r3, r3, #2
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d1f0      	bne.n	80042c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0304 	and.w	r3, r3, #4
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	f000 80a0 	beq.w	800442e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042ee:	2300      	movs	r3, #0
 80042f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042f2:	4b13      	ldr	r3, [pc, #76]	; (8004340 <HAL_RCC_OscConfig+0x2ac>)
 80042f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d10f      	bne.n	800431e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042fe:	2300      	movs	r3, #0
 8004300:	60bb      	str	r3, [r7, #8]
 8004302:	4b0f      	ldr	r3, [pc, #60]	; (8004340 <HAL_RCC_OscConfig+0x2ac>)
 8004304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004306:	4a0e      	ldr	r2, [pc, #56]	; (8004340 <HAL_RCC_OscConfig+0x2ac>)
 8004308:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800430c:	6413      	str	r3, [r2, #64]	; 0x40
 800430e:	4b0c      	ldr	r3, [pc, #48]	; (8004340 <HAL_RCC_OscConfig+0x2ac>)
 8004310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004316:	60bb      	str	r3, [r7, #8]
 8004318:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800431a:	2301      	movs	r3, #1
 800431c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800431e:	4b0b      	ldr	r3, [pc, #44]	; (800434c <HAL_RCC_OscConfig+0x2b8>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004326:	2b00      	cmp	r3, #0
 8004328:	d121      	bne.n	800436e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800432a:	4b08      	ldr	r3, [pc, #32]	; (800434c <HAL_RCC_OscConfig+0x2b8>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a07      	ldr	r2, [pc, #28]	; (800434c <HAL_RCC_OscConfig+0x2b8>)
 8004330:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004334:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004336:	f7fd f89b 	bl	8001470 <HAL_GetTick>
 800433a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800433c:	e011      	b.n	8004362 <HAL_RCC_OscConfig+0x2ce>
 800433e:	bf00      	nop
 8004340:	40023800 	.word	0x40023800
 8004344:	42470000 	.word	0x42470000
 8004348:	42470e80 	.word	0x42470e80
 800434c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004350:	f7fd f88e 	bl	8001470 <HAL_GetTick>
 8004354:	4602      	mov	r2, r0
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	2b02      	cmp	r3, #2
 800435c:	d901      	bls.n	8004362 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e0fd      	b.n	800455e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004362:	4b81      	ldr	r3, [pc, #516]	; (8004568 <HAL_RCC_OscConfig+0x4d4>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800436a:	2b00      	cmp	r3, #0
 800436c:	d0f0      	beq.n	8004350 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	2b01      	cmp	r3, #1
 8004374:	d106      	bne.n	8004384 <HAL_RCC_OscConfig+0x2f0>
 8004376:	4b7d      	ldr	r3, [pc, #500]	; (800456c <HAL_RCC_OscConfig+0x4d8>)
 8004378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800437a:	4a7c      	ldr	r2, [pc, #496]	; (800456c <HAL_RCC_OscConfig+0x4d8>)
 800437c:	f043 0301 	orr.w	r3, r3, #1
 8004380:	6713      	str	r3, [r2, #112]	; 0x70
 8004382:	e01c      	b.n	80043be <HAL_RCC_OscConfig+0x32a>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	2b05      	cmp	r3, #5
 800438a:	d10c      	bne.n	80043a6 <HAL_RCC_OscConfig+0x312>
 800438c:	4b77      	ldr	r3, [pc, #476]	; (800456c <HAL_RCC_OscConfig+0x4d8>)
 800438e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004390:	4a76      	ldr	r2, [pc, #472]	; (800456c <HAL_RCC_OscConfig+0x4d8>)
 8004392:	f043 0304 	orr.w	r3, r3, #4
 8004396:	6713      	str	r3, [r2, #112]	; 0x70
 8004398:	4b74      	ldr	r3, [pc, #464]	; (800456c <HAL_RCC_OscConfig+0x4d8>)
 800439a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800439c:	4a73      	ldr	r2, [pc, #460]	; (800456c <HAL_RCC_OscConfig+0x4d8>)
 800439e:	f043 0301 	orr.w	r3, r3, #1
 80043a2:	6713      	str	r3, [r2, #112]	; 0x70
 80043a4:	e00b      	b.n	80043be <HAL_RCC_OscConfig+0x32a>
 80043a6:	4b71      	ldr	r3, [pc, #452]	; (800456c <HAL_RCC_OscConfig+0x4d8>)
 80043a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043aa:	4a70      	ldr	r2, [pc, #448]	; (800456c <HAL_RCC_OscConfig+0x4d8>)
 80043ac:	f023 0301 	bic.w	r3, r3, #1
 80043b0:	6713      	str	r3, [r2, #112]	; 0x70
 80043b2:	4b6e      	ldr	r3, [pc, #440]	; (800456c <HAL_RCC_OscConfig+0x4d8>)
 80043b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b6:	4a6d      	ldr	r2, [pc, #436]	; (800456c <HAL_RCC_OscConfig+0x4d8>)
 80043b8:	f023 0304 	bic.w	r3, r3, #4
 80043bc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d015      	beq.n	80043f2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043c6:	f7fd f853 	bl	8001470 <HAL_GetTick>
 80043ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043cc:	e00a      	b.n	80043e4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043ce:	f7fd f84f 	bl	8001470 <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80043dc:	4293      	cmp	r3, r2
 80043de:	d901      	bls.n	80043e4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80043e0:	2303      	movs	r3, #3
 80043e2:	e0bc      	b.n	800455e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043e4:	4b61      	ldr	r3, [pc, #388]	; (800456c <HAL_RCC_OscConfig+0x4d8>)
 80043e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043e8:	f003 0302 	and.w	r3, r3, #2
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d0ee      	beq.n	80043ce <HAL_RCC_OscConfig+0x33a>
 80043f0:	e014      	b.n	800441c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043f2:	f7fd f83d 	bl	8001470 <HAL_GetTick>
 80043f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043f8:	e00a      	b.n	8004410 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043fa:	f7fd f839 	bl	8001470 <HAL_GetTick>
 80043fe:	4602      	mov	r2, r0
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	f241 3288 	movw	r2, #5000	; 0x1388
 8004408:	4293      	cmp	r3, r2
 800440a:	d901      	bls.n	8004410 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800440c:	2303      	movs	r3, #3
 800440e:	e0a6      	b.n	800455e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004410:	4b56      	ldr	r3, [pc, #344]	; (800456c <HAL_RCC_OscConfig+0x4d8>)
 8004412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004414:	f003 0302 	and.w	r3, r3, #2
 8004418:	2b00      	cmp	r3, #0
 800441a:	d1ee      	bne.n	80043fa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800441c:	7dfb      	ldrb	r3, [r7, #23]
 800441e:	2b01      	cmp	r3, #1
 8004420:	d105      	bne.n	800442e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004422:	4b52      	ldr	r3, [pc, #328]	; (800456c <HAL_RCC_OscConfig+0x4d8>)
 8004424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004426:	4a51      	ldr	r2, [pc, #324]	; (800456c <HAL_RCC_OscConfig+0x4d8>)
 8004428:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800442c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	2b00      	cmp	r3, #0
 8004434:	f000 8092 	beq.w	800455c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004438:	4b4c      	ldr	r3, [pc, #304]	; (800456c <HAL_RCC_OscConfig+0x4d8>)
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	f003 030c 	and.w	r3, r3, #12
 8004440:	2b08      	cmp	r3, #8
 8004442:	d05c      	beq.n	80044fe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	699b      	ldr	r3, [r3, #24]
 8004448:	2b02      	cmp	r3, #2
 800444a:	d141      	bne.n	80044d0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800444c:	4b48      	ldr	r3, [pc, #288]	; (8004570 <HAL_RCC_OscConfig+0x4dc>)
 800444e:	2200      	movs	r2, #0
 8004450:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004452:	f7fd f80d 	bl	8001470 <HAL_GetTick>
 8004456:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004458:	e008      	b.n	800446c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800445a:	f7fd f809 	bl	8001470 <HAL_GetTick>
 800445e:	4602      	mov	r2, r0
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	2b02      	cmp	r3, #2
 8004466:	d901      	bls.n	800446c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004468:	2303      	movs	r3, #3
 800446a:	e078      	b.n	800455e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800446c:	4b3f      	ldr	r3, [pc, #252]	; (800456c <HAL_RCC_OscConfig+0x4d8>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004474:	2b00      	cmp	r3, #0
 8004476:	d1f0      	bne.n	800445a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	69da      	ldr	r2, [r3, #28]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6a1b      	ldr	r3, [r3, #32]
 8004480:	431a      	orrs	r2, r3
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004486:	019b      	lsls	r3, r3, #6
 8004488:	431a      	orrs	r2, r3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800448e:	085b      	lsrs	r3, r3, #1
 8004490:	3b01      	subs	r3, #1
 8004492:	041b      	lsls	r3, r3, #16
 8004494:	431a      	orrs	r2, r3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800449a:	061b      	lsls	r3, r3, #24
 800449c:	4933      	ldr	r1, [pc, #204]	; (800456c <HAL_RCC_OscConfig+0x4d8>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044a2:	4b33      	ldr	r3, [pc, #204]	; (8004570 <HAL_RCC_OscConfig+0x4dc>)
 80044a4:	2201      	movs	r2, #1
 80044a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044a8:	f7fc ffe2 	bl	8001470 <HAL_GetTick>
 80044ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044ae:	e008      	b.n	80044c2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044b0:	f7fc ffde 	bl	8001470 <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	d901      	bls.n	80044c2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e04d      	b.n	800455e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044c2:	4b2a      	ldr	r3, [pc, #168]	; (800456c <HAL_RCC_OscConfig+0x4d8>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d0f0      	beq.n	80044b0 <HAL_RCC_OscConfig+0x41c>
 80044ce:	e045      	b.n	800455c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044d0:	4b27      	ldr	r3, [pc, #156]	; (8004570 <HAL_RCC_OscConfig+0x4dc>)
 80044d2:	2200      	movs	r2, #0
 80044d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044d6:	f7fc ffcb 	bl	8001470 <HAL_GetTick>
 80044da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044dc:	e008      	b.n	80044f0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044de:	f7fc ffc7 	bl	8001470 <HAL_GetTick>
 80044e2:	4602      	mov	r2, r0
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	1ad3      	subs	r3, r2, r3
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d901      	bls.n	80044f0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80044ec:	2303      	movs	r3, #3
 80044ee:	e036      	b.n	800455e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044f0:	4b1e      	ldr	r3, [pc, #120]	; (800456c <HAL_RCC_OscConfig+0x4d8>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d1f0      	bne.n	80044de <HAL_RCC_OscConfig+0x44a>
 80044fc:	e02e      	b.n	800455c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	699b      	ldr	r3, [r3, #24]
 8004502:	2b01      	cmp	r3, #1
 8004504:	d101      	bne.n	800450a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e029      	b.n	800455e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800450a:	4b18      	ldr	r3, [pc, #96]	; (800456c <HAL_RCC_OscConfig+0x4d8>)
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	69db      	ldr	r3, [r3, #28]
 800451a:	429a      	cmp	r2, r3
 800451c:	d11c      	bne.n	8004558 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004528:	429a      	cmp	r2, r3
 800452a:	d115      	bne.n	8004558 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800452c:	68fa      	ldr	r2, [r7, #12]
 800452e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004532:	4013      	ands	r3, r2
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004538:	4293      	cmp	r3, r2
 800453a:	d10d      	bne.n	8004558 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004546:	429a      	cmp	r2, r3
 8004548:	d106      	bne.n	8004558 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004554:	429a      	cmp	r2, r3
 8004556:	d001      	beq.n	800455c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	e000      	b.n	800455e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800455c:	2300      	movs	r3, #0
}
 800455e:	4618      	mov	r0, r3
 8004560:	3718      	adds	r7, #24
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	40007000 	.word	0x40007000
 800456c:	40023800 	.word	0x40023800
 8004570:	42470060 	.word	0x42470060

08004574 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d101      	bne.n	8004588 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	e0cc      	b.n	8004722 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004588:	4b68      	ldr	r3, [pc, #416]	; (800472c <HAL_RCC_ClockConfig+0x1b8>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 030f 	and.w	r3, r3, #15
 8004590:	683a      	ldr	r2, [r7, #0]
 8004592:	429a      	cmp	r2, r3
 8004594:	d90c      	bls.n	80045b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004596:	4b65      	ldr	r3, [pc, #404]	; (800472c <HAL_RCC_ClockConfig+0x1b8>)
 8004598:	683a      	ldr	r2, [r7, #0]
 800459a:	b2d2      	uxtb	r2, r2
 800459c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800459e:	4b63      	ldr	r3, [pc, #396]	; (800472c <HAL_RCC_ClockConfig+0x1b8>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 030f 	and.w	r3, r3, #15
 80045a6:	683a      	ldr	r2, [r7, #0]
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d001      	beq.n	80045b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e0b8      	b.n	8004722 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0302 	and.w	r3, r3, #2
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d020      	beq.n	80045fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0304 	and.w	r3, r3, #4
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d005      	beq.n	80045d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045c8:	4b59      	ldr	r3, [pc, #356]	; (8004730 <HAL_RCC_ClockConfig+0x1bc>)
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	4a58      	ldr	r2, [pc, #352]	; (8004730 <HAL_RCC_ClockConfig+0x1bc>)
 80045ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80045d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0308 	and.w	r3, r3, #8
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d005      	beq.n	80045ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045e0:	4b53      	ldr	r3, [pc, #332]	; (8004730 <HAL_RCC_ClockConfig+0x1bc>)
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	4a52      	ldr	r2, [pc, #328]	; (8004730 <HAL_RCC_ClockConfig+0x1bc>)
 80045e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80045ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045ec:	4b50      	ldr	r3, [pc, #320]	; (8004730 <HAL_RCC_ClockConfig+0x1bc>)
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	494d      	ldr	r1, [pc, #308]	; (8004730 <HAL_RCC_ClockConfig+0x1bc>)
 80045fa:	4313      	orrs	r3, r2
 80045fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0301 	and.w	r3, r3, #1
 8004606:	2b00      	cmp	r3, #0
 8004608:	d044      	beq.n	8004694 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	2b01      	cmp	r3, #1
 8004610:	d107      	bne.n	8004622 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004612:	4b47      	ldr	r3, [pc, #284]	; (8004730 <HAL_RCC_ClockConfig+0x1bc>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d119      	bne.n	8004652 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e07f      	b.n	8004722 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	2b02      	cmp	r3, #2
 8004628:	d003      	beq.n	8004632 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800462e:	2b03      	cmp	r3, #3
 8004630:	d107      	bne.n	8004642 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004632:	4b3f      	ldr	r3, [pc, #252]	; (8004730 <HAL_RCC_ClockConfig+0x1bc>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d109      	bne.n	8004652 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e06f      	b.n	8004722 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004642:	4b3b      	ldr	r3, [pc, #236]	; (8004730 <HAL_RCC_ClockConfig+0x1bc>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0302 	and.w	r3, r3, #2
 800464a:	2b00      	cmp	r3, #0
 800464c:	d101      	bne.n	8004652 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e067      	b.n	8004722 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004652:	4b37      	ldr	r3, [pc, #220]	; (8004730 <HAL_RCC_ClockConfig+0x1bc>)
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	f023 0203 	bic.w	r2, r3, #3
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	4934      	ldr	r1, [pc, #208]	; (8004730 <HAL_RCC_ClockConfig+0x1bc>)
 8004660:	4313      	orrs	r3, r2
 8004662:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004664:	f7fc ff04 	bl	8001470 <HAL_GetTick>
 8004668:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800466a:	e00a      	b.n	8004682 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800466c:	f7fc ff00 	bl	8001470 <HAL_GetTick>
 8004670:	4602      	mov	r2, r0
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	f241 3288 	movw	r2, #5000	; 0x1388
 800467a:	4293      	cmp	r3, r2
 800467c:	d901      	bls.n	8004682 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e04f      	b.n	8004722 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004682:	4b2b      	ldr	r3, [pc, #172]	; (8004730 <HAL_RCC_ClockConfig+0x1bc>)
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	f003 020c 	and.w	r2, r3, #12
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	429a      	cmp	r2, r3
 8004692:	d1eb      	bne.n	800466c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004694:	4b25      	ldr	r3, [pc, #148]	; (800472c <HAL_RCC_ClockConfig+0x1b8>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 030f 	and.w	r3, r3, #15
 800469c:	683a      	ldr	r2, [r7, #0]
 800469e:	429a      	cmp	r2, r3
 80046a0:	d20c      	bcs.n	80046bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046a2:	4b22      	ldr	r3, [pc, #136]	; (800472c <HAL_RCC_ClockConfig+0x1b8>)
 80046a4:	683a      	ldr	r2, [r7, #0]
 80046a6:	b2d2      	uxtb	r2, r2
 80046a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046aa:	4b20      	ldr	r3, [pc, #128]	; (800472c <HAL_RCC_ClockConfig+0x1b8>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 030f 	and.w	r3, r3, #15
 80046b2:	683a      	ldr	r2, [r7, #0]
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d001      	beq.n	80046bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	e032      	b.n	8004722 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 0304 	and.w	r3, r3, #4
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d008      	beq.n	80046da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046c8:	4b19      	ldr	r3, [pc, #100]	; (8004730 <HAL_RCC_ClockConfig+0x1bc>)
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	4916      	ldr	r1, [pc, #88]	; (8004730 <HAL_RCC_ClockConfig+0x1bc>)
 80046d6:	4313      	orrs	r3, r2
 80046d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 0308 	and.w	r3, r3, #8
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d009      	beq.n	80046fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046e6:	4b12      	ldr	r3, [pc, #72]	; (8004730 <HAL_RCC_ClockConfig+0x1bc>)
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	691b      	ldr	r3, [r3, #16]
 80046f2:	00db      	lsls	r3, r3, #3
 80046f4:	490e      	ldr	r1, [pc, #56]	; (8004730 <HAL_RCC_ClockConfig+0x1bc>)
 80046f6:	4313      	orrs	r3, r2
 80046f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80046fa:	f000 f821 	bl	8004740 <HAL_RCC_GetSysClockFreq>
 80046fe:	4601      	mov	r1, r0
 8004700:	4b0b      	ldr	r3, [pc, #44]	; (8004730 <HAL_RCC_ClockConfig+0x1bc>)
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	091b      	lsrs	r3, r3, #4
 8004706:	f003 030f 	and.w	r3, r3, #15
 800470a:	4a0a      	ldr	r2, [pc, #40]	; (8004734 <HAL_RCC_ClockConfig+0x1c0>)
 800470c:	5cd3      	ldrb	r3, [r2, r3]
 800470e:	fa21 f303 	lsr.w	r3, r1, r3
 8004712:	4a09      	ldr	r2, [pc, #36]	; (8004738 <HAL_RCC_ClockConfig+0x1c4>)
 8004714:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004716:	4b09      	ldr	r3, [pc, #36]	; (800473c <HAL_RCC_ClockConfig+0x1c8>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4618      	mov	r0, r3
 800471c:	f7fc fe64 	bl	80013e8 <HAL_InitTick>

  return HAL_OK;
 8004720:	2300      	movs	r3, #0
}
 8004722:	4618      	mov	r0, r3
 8004724:	3710      	adds	r7, #16
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop
 800472c:	40023c00 	.word	0x40023c00
 8004730:	40023800 	.word	0x40023800
 8004734:	08009dc8 	.word	0x08009dc8
 8004738:	20000000 	.word	0x20000000
 800473c:	20000004 	.word	0x20000004

08004740 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004740:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004742:	b085      	sub	sp, #20
 8004744:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004746:	2300      	movs	r3, #0
 8004748:	607b      	str	r3, [r7, #4]
 800474a:	2300      	movs	r3, #0
 800474c:	60fb      	str	r3, [r7, #12]
 800474e:	2300      	movs	r3, #0
 8004750:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004752:	2300      	movs	r3, #0
 8004754:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004756:	4b63      	ldr	r3, [pc, #396]	; (80048e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f003 030c 	and.w	r3, r3, #12
 800475e:	2b04      	cmp	r3, #4
 8004760:	d007      	beq.n	8004772 <HAL_RCC_GetSysClockFreq+0x32>
 8004762:	2b08      	cmp	r3, #8
 8004764:	d008      	beq.n	8004778 <HAL_RCC_GetSysClockFreq+0x38>
 8004766:	2b00      	cmp	r3, #0
 8004768:	f040 80b4 	bne.w	80048d4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800476c:	4b5e      	ldr	r3, [pc, #376]	; (80048e8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800476e:	60bb      	str	r3, [r7, #8]
       break;
 8004770:	e0b3      	b.n	80048da <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004772:	4b5e      	ldr	r3, [pc, #376]	; (80048ec <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004774:	60bb      	str	r3, [r7, #8]
      break;
 8004776:	e0b0      	b.n	80048da <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004778:	4b5a      	ldr	r3, [pc, #360]	; (80048e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004780:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004782:	4b58      	ldr	r3, [pc, #352]	; (80048e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800478a:	2b00      	cmp	r3, #0
 800478c:	d04a      	beq.n	8004824 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800478e:	4b55      	ldr	r3, [pc, #340]	; (80048e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	099b      	lsrs	r3, r3, #6
 8004794:	f04f 0400 	mov.w	r4, #0
 8004798:	f240 11ff 	movw	r1, #511	; 0x1ff
 800479c:	f04f 0200 	mov.w	r2, #0
 80047a0:	ea03 0501 	and.w	r5, r3, r1
 80047a4:	ea04 0602 	and.w	r6, r4, r2
 80047a8:	4629      	mov	r1, r5
 80047aa:	4632      	mov	r2, r6
 80047ac:	f04f 0300 	mov.w	r3, #0
 80047b0:	f04f 0400 	mov.w	r4, #0
 80047b4:	0154      	lsls	r4, r2, #5
 80047b6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80047ba:	014b      	lsls	r3, r1, #5
 80047bc:	4619      	mov	r1, r3
 80047be:	4622      	mov	r2, r4
 80047c0:	1b49      	subs	r1, r1, r5
 80047c2:	eb62 0206 	sbc.w	r2, r2, r6
 80047c6:	f04f 0300 	mov.w	r3, #0
 80047ca:	f04f 0400 	mov.w	r4, #0
 80047ce:	0194      	lsls	r4, r2, #6
 80047d0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80047d4:	018b      	lsls	r3, r1, #6
 80047d6:	1a5b      	subs	r3, r3, r1
 80047d8:	eb64 0402 	sbc.w	r4, r4, r2
 80047dc:	f04f 0100 	mov.w	r1, #0
 80047e0:	f04f 0200 	mov.w	r2, #0
 80047e4:	00e2      	lsls	r2, r4, #3
 80047e6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80047ea:	00d9      	lsls	r1, r3, #3
 80047ec:	460b      	mov	r3, r1
 80047ee:	4614      	mov	r4, r2
 80047f0:	195b      	adds	r3, r3, r5
 80047f2:	eb44 0406 	adc.w	r4, r4, r6
 80047f6:	f04f 0100 	mov.w	r1, #0
 80047fa:	f04f 0200 	mov.w	r2, #0
 80047fe:	0262      	lsls	r2, r4, #9
 8004800:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004804:	0259      	lsls	r1, r3, #9
 8004806:	460b      	mov	r3, r1
 8004808:	4614      	mov	r4, r2
 800480a:	4618      	mov	r0, r3
 800480c:	4621      	mov	r1, r4
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f04f 0400 	mov.w	r4, #0
 8004814:	461a      	mov	r2, r3
 8004816:	4623      	mov	r3, r4
 8004818:	f7fb fcd6 	bl	80001c8 <__aeabi_uldivmod>
 800481c:	4603      	mov	r3, r0
 800481e:	460c      	mov	r4, r1
 8004820:	60fb      	str	r3, [r7, #12]
 8004822:	e049      	b.n	80048b8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004824:	4b2f      	ldr	r3, [pc, #188]	; (80048e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	099b      	lsrs	r3, r3, #6
 800482a:	f04f 0400 	mov.w	r4, #0
 800482e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004832:	f04f 0200 	mov.w	r2, #0
 8004836:	ea03 0501 	and.w	r5, r3, r1
 800483a:	ea04 0602 	and.w	r6, r4, r2
 800483e:	4629      	mov	r1, r5
 8004840:	4632      	mov	r2, r6
 8004842:	f04f 0300 	mov.w	r3, #0
 8004846:	f04f 0400 	mov.w	r4, #0
 800484a:	0154      	lsls	r4, r2, #5
 800484c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004850:	014b      	lsls	r3, r1, #5
 8004852:	4619      	mov	r1, r3
 8004854:	4622      	mov	r2, r4
 8004856:	1b49      	subs	r1, r1, r5
 8004858:	eb62 0206 	sbc.w	r2, r2, r6
 800485c:	f04f 0300 	mov.w	r3, #0
 8004860:	f04f 0400 	mov.w	r4, #0
 8004864:	0194      	lsls	r4, r2, #6
 8004866:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800486a:	018b      	lsls	r3, r1, #6
 800486c:	1a5b      	subs	r3, r3, r1
 800486e:	eb64 0402 	sbc.w	r4, r4, r2
 8004872:	f04f 0100 	mov.w	r1, #0
 8004876:	f04f 0200 	mov.w	r2, #0
 800487a:	00e2      	lsls	r2, r4, #3
 800487c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004880:	00d9      	lsls	r1, r3, #3
 8004882:	460b      	mov	r3, r1
 8004884:	4614      	mov	r4, r2
 8004886:	195b      	adds	r3, r3, r5
 8004888:	eb44 0406 	adc.w	r4, r4, r6
 800488c:	f04f 0100 	mov.w	r1, #0
 8004890:	f04f 0200 	mov.w	r2, #0
 8004894:	02a2      	lsls	r2, r4, #10
 8004896:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800489a:	0299      	lsls	r1, r3, #10
 800489c:	460b      	mov	r3, r1
 800489e:	4614      	mov	r4, r2
 80048a0:	4618      	mov	r0, r3
 80048a2:	4621      	mov	r1, r4
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f04f 0400 	mov.w	r4, #0
 80048aa:	461a      	mov	r2, r3
 80048ac:	4623      	mov	r3, r4
 80048ae:	f7fb fc8b 	bl	80001c8 <__aeabi_uldivmod>
 80048b2:	4603      	mov	r3, r0
 80048b4:	460c      	mov	r4, r1
 80048b6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80048b8:	4b0a      	ldr	r3, [pc, #40]	; (80048e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	0c1b      	lsrs	r3, r3, #16
 80048be:	f003 0303 	and.w	r3, r3, #3
 80048c2:	3301      	adds	r3, #1
 80048c4:	005b      	lsls	r3, r3, #1
 80048c6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80048c8:	68fa      	ldr	r2, [r7, #12]
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80048d0:	60bb      	str	r3, [r7, #8]
      break;
 80048d2:	e002      	b.n	80048da <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80048d4:	4b04      	ldr	r3, [pc, #16]	; (80048e8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80048d6:	60bb      	str	r3, [r7, #8]
      break;
 80048d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048da:	68bb      	ldr	r3, [r7, #8]
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3714      	adds	r7, #20
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048e4:	40023800 	.word	0x40023800
 80048e8:	00f42400 	.word	0x00f42400
 80048ec:	007a1200 	.word	0x007a1200

080048f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048f0:	b480      	push	{r7}
 80048f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048f4:	4b03      	ldr	r3, [pc, #12]	; (8004904 <HAL_RCC_GetHCLKFreq+0x14>)
 80048f6:	681b      	ldr	r3, [r3, #0]
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr
 8004902:	bf00      	nop
 8004904:	20000000 	.word	0x20000000

08004908 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800490c:	f7ff fff0 	bl	80048f0 <HAL_RCC_GetHCLKFreq>
 8004910:	4601      	mov	r1, r0
 8004912:	4b05      	ldr	r3, [pc, #20]	; (8004928 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	0a9b      	lsrs	r3, r3, #10
 8004918:	f003 0307 	and.w	r3, r3, #7
 800491c:	4a03      	ldr	r2, [pc, #12]	; (800492c <HAL_RCC_GetPCLK1Freq+0x24>)
 800491e:	5cd3      	ldrb	r3, [r2, r3]
 8004920:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004924:	4618      	mov	r0, r3
 8004926:	bd80      	pop	{r7, pc}
 8004928:	40023800 	.word	0x40023800
 800492c:	08009dd8 	.word	0x08009dd8

08004930 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004934:	f7ff ffdc 	bl	80048f0 <HAL_RCC_GetHCLKFreq>
 8004938:	4601      	mov	r1, r0
 800493a:	4b05      	ldr	r3, [pc, #20]	; (8004950 <HAL_RCC_GetPCLK2Freq+0x20>)
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	0b5b      	lsrs	r3, r3, #13
 8004940:	f003 0307 	and.w	r3, r3, #7
 8004944:	4a03      	ldr	r2, [pc, #12]	; (8004954 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004946:	5cd3      	ldrb	r3, [r2, r3]
 8004948:	fa21 f303 	lsr.w	r3, r1, r3
}
 800494c:	4618      	mov	r0, r3
 800494e:	bd80      	pop	{r7, pc}
 8004950:	40023800 	.word	0x40023800
 8004954:	08009dd8 	.word	0x08009dd8

08004958 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b086      	sub	sp, #24
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004960:	2300      	movs	r3, #0
 8004962:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004964:	2300      	movs	r3, #0
 8004966:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 0301 	and.w	r3, r3, #1
 8004970:	2b00      	cmp	r3, #0
 8004972:	d105      	bne.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800497c:	2b00      	cmp	r3, #0
 800497e:	d035      	beq.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004980:	4b62      	ldr	r3, [pc, #392]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004982:	2200      	movs	r2, #0
 8004984:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004986:	f7fc fd73 	bl	8001470 <HAL_GetTick>
 800498a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800498c:	e008      	b.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800498e:	f7fc fd6f 	bl	8001470 <HAL_GetTick>
 8004992:	4602      	mov	r2, r0
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	1ad3      	subs	r3, r2, r3
 8004998:	2b02      	cmp	r3, #2
 800499a:	d901      	bls.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800499c:	2303      	movs	r3, #3
 800499e:	e0b0      	b.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80049a0:	4b5b      	ldr	r3, [pc, #364]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d1f0      	bne.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	019a      	lsls	r2, r3, #6
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	071b      	lsls	r3, r3, #28
 80049b8:	4955      	ldr	r1, [pc, #340]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049ba:	4313      	orrs	r3, r2
 80049bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80049c0:	4b52      	ldr	r3, [pc, #328]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80049c2:	2201      	movs	r2, #1
 80049c4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80049c6:	f7fc fd53 	bl	8001470 <HAL_GetTick>
 80049ca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80049cc:	e008      	b.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80049ce:	f7fc fd4f 	bl	8001470 <HAL_GetTick>
 80049d2:	4602      	mov	r2, r0
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	1ad3      	subs	r3, r2, r3
 80049d8:	2b02      	cmp	r3, #2
 80049da:	d901      	bls.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049dc:	2303      	movs	r3, #3
 80049de:	e090      	b.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80049e0:	4b4b      	ldr	r3, [pc, #300]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d0f0      	beq.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 0302 	and.w	r3, r3, #2
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	f000 8083 	beq.w	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80049fa:	2300      	movs	r3, #0
 80049fc:	60fb      	str	r3, [r7, #12]
 80049fe:	4b44      	ldr	r3, [pc, #272]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a02:	4a43      	ldr	r2, [pc, #268]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a08:	6413      	str	r3, [r2, #64]	; 0x40
 8004a0a:	4b41      	ldr	r3, [pc, #260]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a12:	60fb      	str	r3, [r7, #12]
 8004a14:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004a16:	4b3f      	ldr	r3, [pc, #252]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a3e      	ldr	r2, [pc, #248]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004a1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a20:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004a22:	f7fc fd25 	bl	8001470 <HAL_GetTick>
 8004a26:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004a28:	e008      	b.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004a2a:	f7fc fd21 	bl	8001470 <HAL_GetTick>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	1ad3      	subs	r3, r2, r3
 8004a34:	2b02      	cmp	r3, #2
 8004a36:	d901      	bls.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	e062      	b.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004a3c:	4b35      	ldr	r3, [pc, #212]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d0f0      	beq.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004a48:	4b31      	ldr	r3, [pc, #196]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a50:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d02f      	beq.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a60:	693a      	ldr	r2, [r7, #16]
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d028      	beq.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a66:	4b2a      	ldr	r3, [pc, #168]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a6e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004a70:	4b29      	ldr	r3, [pc, #164]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004a72:	2201      	movs	r2, #1
 8004a74:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a76:	4b28      	ldr	r3, [pc, #160]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004a78:	2200      	movs	r2, #0
 8004a7a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004a7c:	4a24      	ldr	r2, [pc, #144]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004a82:	4b23      	ldr	r3, [pc, #140]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a86:	f003 0301 	and.w	r3, r3, #1
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d114      	bne.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004a8e:	f7fc fcef 	bl	8001470 <HAL_GetTick>
 8004a92:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a94:	e00a      	b.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a96:	f7fc fceb 	bl	8001470 <HAL_GetTick>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d901      	bls.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	e02a      	b.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004aac:	4b18      	ldr	r3, [pc, #96]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ab0:	f003 0302 	and.w	r3, r3, #2
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d0ee      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ac0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ac4:	d10d      	bne.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004ac6:	4b12      	ldr	r3, [pc, #72]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004ad6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ada:	490d      	ldr	r1, [pc, #52]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004adc:	4313      	orrs	r3, r2
 8004ade:	608b      	str	r3, [r1, #8]
 8004ae0:	e005      	b.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004ae2:	4b0b      	ldr	r3, [pc, #44]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	4a0a      	ldr	r2, [pc, #40]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ae8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004aec:	6093      	str	r3, [r2, #8]
 8004aee:	4b08      	ldr	r3, [pc, #32]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004af0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004afa:	4905      	ldr	r1, [pc, #20]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004afc:	4313      	orrs	r3, r2
 8004afe:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3718      	adds	r7, #24
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	42470068 	.word	0x42470068
 8004b10:	40023800 	.word	0x40023800
 8004b14:	40007000 	.word	0x40007000
 8004b18:	42470e40 	.word	0x42470e40

08004b1c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b087      	sub	sp, #28
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004b24:	2300      	movs	r3, #0
 8004b26:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004b30:	2300      	movs	r3, #0
 8004b32:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d13d      	bne.n	8004bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004b3a:	4b22      	ldr	r3, [pc, #136]	; (8004bc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b42:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d004      	beq.n	8004b54 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d12f      	bne.n	8004bae <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004b4e:	4b1e      	ldr	r3, [pc, #120]	; (8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004b50:	617b      	str	r3, [r7, #20]
          break;
 8004b52:	e02f      	b.n	8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004b54:	4b1b      	ldr	r3, [pc, #108]	; (8004bc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b60:	d108      	bne.n	8004b74 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004b62:	4b18      	ldr	r3, [pc, #96]	; (8004bc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b6a:	4a18      	ldr	r2, [pc, #96]	; (8004bcc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b70:	613b      	str	r3, [r7, #16]
 8004b72:	e007      	b.n	8004b84 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004b74:	4b13      	ldr	r3, [pc, #76]	; (8004bc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b7c:	4a14      	ldr	r2, [pc, #80]	; (8004bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b82:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004b84:	4b0f      	ldr	r3, [pc, #60]	; (8004bc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004b86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b8a:	099b      	lsrs	r3, r3, #6
 8004b8c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	fb02 f303 	mul.w	r3, r2, r3
 8004b96:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004b98:	4b0a      	ldr	r3, [pc, #40]	; (8004bc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004b9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b9e:	0f1b      	lsrs	r3, r3, #28
 8004ba0:	f003 0307 	and.w	r3, r3, #7
 8004ba4:	68ba      	ldr	r2, [r7, #8]
 8004ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004baa:	617b      	str	r3, [r7, #20]
          break;
 8004bac:	e002      	b.n	8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	617b      	str	r3, [r7, #20]
          break;
 8004bb2:	bf00      	nop
        }
      }
      break;
 8004bb4:	bf00      	nop
    }
  }
  return frequency;
 8004bb6:	697b      	ldr	r3, [r7, #20]
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	371c      	adds	r7, #28
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr
 8004bc4:	40023800 	.word	0x40023800
 8004bc8:	00bb8000 	.word	0x00bb8000
 8004bcc:	007a1200 	.word	0x007a1200
 8004bd0:	00f42400 	.word	0x00f42400

08004bd4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b082      	sub	sp, #8
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d101      	bne.n	8004be6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e056      	b.n	8004c94 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d106      	bne.n	8004c06 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f7fc f853 	bl	8000cac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2202      	movs	r2, #2
 8004c0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c1c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	685a      	ldr	r2, [r3, #4]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	431a      	orrs	r2, r3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	431a      	orrs	r2, r3
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	691b      	ldr	r3, [r3, #16]
 8004c32:	431a      	orrs	r2, r3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	695b      	ldr	r3, [r3, #20]
 8004c38:	431a      	orrs	r2, r3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	699b      	ldr	r3, [r3, #24]
 8004c3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c42:	431a      	orrs	r2, r3
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	69db      	ldr	r3, [r3, #28]
 8004c48:	431a      	orrs	r2, r3
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a1b      	ldr	r3, [r3, #32]
 8004c4e:	ea42 0103 	orr.w	r1, r2, r3
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	430a      	orrs	r2, r1
 8004c5c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	699b      	ldr	r3, [r3, #24]
 8004c62:	0c1b      	lsrs	r3, r3, #16
 8004c64:	f003 0104 	and.w	r1, r3, #4
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	430a      	orrs	r2, r1
 8004c72:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	69da      	ldr	r2, [r3, #28]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c82:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004c92:	2300      	movs	r3, #0
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3708      	adds	r7, #8
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b082      	sub	sp, #8
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d101      	bne.n	8004cae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e01d      	b.n	8004cea <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d106      	bne.n	8004cc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f7fc fa20 	bl	8001108 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2202      	movs	r2, #2
 8004ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	3304      	adds	r3, #4
 8004cd8:	4619      	mov	r1, r3
 8004cda:	4610      	mov	r0, r2
 8004cdc:	f000 fb4e 	bl	800537c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ce8:	2300      	movs	r3, #0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3708      	adds	r7, #8
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}

08004cf2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004cf2:	b480      	push	{r7}
 8004cf4:	b085      	sub	sp, #20
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	68da      	ldr	r2, [r3, #12]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f042 0201 	orr.w	r2, r2, #1
 8004d08:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	f003 0307 	and.w	r3, r3, #7
 8004d14:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2b06      	cmp	r3, #6
 8004d1a:	d007      	beq.n	8004d2c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f042 0201 	orr.w	r2, r2, #1
 8004d2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d2c:	2300      	movs	r3, #0
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3714      	adds	r7, #20
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr

08004d3a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004d3a:	b580      	push	{r7, lr}
 8004d3c:	b082      	sub	sp, #8
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d101      	bne.n	8004d4c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e01d      	b.n	8004d88 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d52:	b2db      	uxtb	r3, r3
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d106      	bne.n	8004d66 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f000 f815 	bl	8004d90 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2202      	movs	r2, #2
 8004d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	3304      	adds	r3, #4
 8004d76:	4619      	mov	r1, r3
 8004d78:	4610      	mov	r0, r2
 8004d7a:	f000 faff 	bl	800537c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2201      	movs	r2, #1
 8004d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d86:	2300      	movs	r3, #0
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3708      	adds	r7, #8
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}

08004d90 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b083      	sub	sp, #12
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004d98:	bf00      	nop
 8004d9a:	370c      	adds	r7, #12
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b084      	sub	sp, #16
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	2201      	movs	r2, #1
 8004db4:	6839      	ldr	r1, [r7, #0]
 8004db6:	4618      	mov	r0, r3
 8004db8:	f000 fdca 	bl	8005950 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a15      	ldr	r2, [pc, #84]	; (8004e18 <HAL_TIM_PWM_Start+0x74>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d004      	beq.n	8004dd0 <HAL_TIM_PWM_Start+0x2c>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a14      	ldr	r2, [pc, #80]	; (8004e1c <HAL_TIM_PWM_Start+0x78>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d101      	bne.n	8004dd4 <HAL_TIM_PWM_Start+0x30>
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e000      	b.n	8004dd6 <HAL_TIM_PWM_Start+0x32>
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d007      	beq.n	8004dea <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004de8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	f003 0307 	and.w	r3, r3, #7
 8004df4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2b06      	cmp	r3, #6
 8004dfa:	d007      	beq.n	8004e0c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f042 0201 	orr.w	r2, r2, #1
 8004e0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e0c:	2300      	movs	r3, #0
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3710      	adds	r7, #16
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop
 8004e18:	40010000 	.word	0x40010000
 8004e1c:	40010400 	.word	0x40010400

08004e20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b082      	sub	sp, #8
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	691b      	ldr	r3, [r3, #16]
 8004e2e:	f003 0302 	and.w	r3, r3, #2
 8004e32:	2b02      	cmp	r3, #2
 8004e34:	d122      	bne.n	8004e7c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	f003 0302 	and.w	r3, r3, #2
 8004e40:	2b02      	cmp	r3, #2
 8004e42:	d11b      	bne.n	8004e7c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f06f 0202 	mvn.w	r2, #2
 8004e4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2201      	movs	r2, #1
 8004e52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	699b      	ldr	r3, [r3, #24]
 8004e5a:	f003 0303 	and.w	r3, r3, #3
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d003      	beq.n	8004e6a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f000 fa6b 	bl	800533e <HAL_TIM_IC_CaptureCallback>
 8004e68:	e005      	b.n	8004e76 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f000 fa5d 	bl	800532a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f000 fa6e 	bl	8005352 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	691b      	ldr	r3, [r3, #16]
 8004e82:	f003 0304 	and.w	r3, r3, #4
 8004e86:	2b04      	cmp	r3, #4
 8004e88:	d122      	bne.n	8004ed0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	f003 0304 	and.w	r3, r3, #4
 8004e94:	2b04      	cmp	r3, #4
 8004e96:	d11b      	bne.n	8004ed0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f06f 0204 	mvn.w	r2, #4
 8004ea0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2202      	movs	r2, #2
 8004ea6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	699b      	ldr	r3, [r3, #24]
 8004eae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d003      	beq.n	8004ebe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f000 fa41 	bl	800533e <HAL_TIM_IC_CaptureCallback>
 8004ebc:	e005      	b.n	8004eca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f000 fa33 	bl	800532a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f000 fa44 	bl	8005352 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	f003 0308 	and.w	r3, r3, #8
 8004eda:	2b08      	cmp	r3, #8
 8004edc:	d122      	bne.n	8004f24 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	f003 0308 	and.w	r3, r3, #8
 8004ee8:	2b08      	cmp	r3, #8
 8004eea:	d11b      	bne.n	8004f24 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f06f 0208 	mvn.w	r2, #8
 8004ef4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2204      	movs	r2, #4
 8004efa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	69db      	ldr	r3, [r3, #28]
 8004f02:	f003 0303 	and.w	r3, r3, #3
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d003      	beq.n	8004f12 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f000 fa17 	bl	800533e <HAL_TIM_IC_CaptureCallback>
 8004f10:	e005      	b.n	8004f1e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f000 fa09 	bl	800532a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f000 fa1a 	bl	8005352 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	f003 0310 	and.w	r3, r3, #16
 8004f2e:	2b10      	cmp	r3, #16
 8004f30:	d122      	bne.n	8004f78 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	f003 0310 	and.w	r3, r3, #16
 8004f3c:	2b10      	cmp	r3, #16
 8004f3e:	d11b      	bne.n	8004f78 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f06f 0210 	mvn.w	r2, #16
 8004f48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2208      	movs	r2, #8
 8004f4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	69db      	ldr	r3, [r3, #28]
 8004f56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d003      	beq.n	8004f66 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f000 f9ed 	bl	800533e <HAL_TIM_IC_CaptureCallback>
 8004f64:	e005      	b.n	8004f72 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f000 f9df 	bl	800532a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f000 f9f0 	bl	8005352 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	691b      	ldr	r3, [r3, #16]
 8004f7e:	f003 0301 	and.w	r3, r3, #1
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d10e      	bne.n	8004fa4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	f003 0301 	and.w	r3, r3, #1
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d107      	bne.n	8004fa4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f06f 0201 	mvn.w	r2, #1
 8004f9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f7fb fe04 	bl	8000bac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	691b      	ldr	r3, [r3, #16]
 8004faa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fae:	2b80      	cmp	r3, #128	; 0x80
 8004fb0:	d10e      	bne.n	8004fd0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fbc:	2b80      	cmp	r3, #128	; 0x80
 8004fbe:	d107      	bne.n	8004fd0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004fc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f000 fd6c 	bl	8005aa8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	691b      	ldr	r3, [r3, #16]
 8004fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fda:	2b40      	cmp	r3, #64	; 0x40
 8004fdc:	d10e      	bne.n	8004ffc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fe8:	2b40      	cmp	r3, #64	; 0x40
 8004fea:	d107      	bne.n	8004ffc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ff4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f000 f9b5 	bl	8005366 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	691b      	ldr	r3, [r3, #16]
 8005002:	f003 0320 	and.w	r3, r3, #32
 8005006:	2b20      	cmp	r3, #32
 8005008:	d10e      	bne.n	8005028 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	f003 0320 	and.w	r3, r3, #32
 8005014:	2b20      	cmp	r3, #32
 8005016:	d107      	bne.n	8005028 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f06f 0220 	mvn.w	r2, #32
 8005020:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f000 fd36 	bl	8005a94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005028:	bf00      	nop
 800502a:	3708      	adds	r7, #8
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}

08005030 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b084      	sub	sp, #16
 8005034:	af00      	add	r7, sp, #0
 8005036:	60f8      	str	r0, [r7, #12]
 8005038:	60b9      	str	r1, [r7, #8]
 800503a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005042:	2b01      	cmp	r3, #1
 8005044:	d101      	bne.n	800504a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005046:	2302      	movs	r3, #2
 8005048:	e0b4      	b.n	80051b4 <HAL_TIM_PWM_ConfigChannel+0x184>
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2201      	movs	r2, #1
 800504e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2202      	movs	r2, #2
 8005056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2b0c      	cmp	r3, #12
 800505e:	f200 809f 	bhi.w	80051a0 <HAL_TIM_PWM_ConfigChannel+0x170>
 8005062:	a201      	add	r2, pc, #4	; (adr r2, 8005068 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005068:	0800509d 	.word	0x0800509d
 800506c:	080051a1 	.word	0x080051a1
 8005070:	080051a1 	.word	0x080051a1
 8005074:	080051a1 	.word	0x080051a1
 8005078:	080050dd 	.word	0x080050dd
 800507c:	080051a1 	.word	0x080051a1
 8005080:	080051a1 	.word	0x080051a1
 8005084:	080051a1 	.word	0x080051a1
 8005088:	0800511f 	.word	0x0800511f
 800508c:	080051a1 	.word	0x080051a1
 8005090:	080051a1 	.word	0x080051a1
 8005094:	080051a1 	.word	0x080051a1
 8005098:	0800515f 	.word	0x0800515f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	68b9      	ldr	r1, [r7, #8]
 80050a2:	4618      	mov	r0, r3
 80050a4:	f000 fa0a 	bl	80054bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	699a      	ldr	r2, [r3, #24]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f042 0208 	orr.w	r2, r2, #8
 80050b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	699a      	ldr	r2, [r3, #24]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f022 0204 	bic.w	r2, r2, #4
 80050c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	6999      	ldr	r1, [r3, #24]
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	691a      	ldr	r2, [r3, #16]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	430a      	orrs	r2, r1
 80050d8:	619a      	str	r2, [r3, #24]
      break;
 80050da:	e062      	b.n	80051a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68b9      	ldr	r1, [r7, #8]
 80050e2:	4618      	mov	r0, r3
 80050e4:	f000 fa5a 	bl	800559c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	699a      	ldr	r2, [r3, #24]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	699a      	ldr	r2, [r3, #24]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005106:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	6999      	ldr	r1, [r3, #24]
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	691b      	ldr	r3, [r3, #16]
 8005112:	021a      	lsls	r2, r3, #8
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	430a      	orrs	r2, r1
 800511a:	619a      	str	r2, [r3, #24]
      break;
 800511c:	e041      	b.n	80051a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	68b9      	ldr	r1, [r7, #8]
 8005124:	4618      	mov	r0, r3
 8005126:	f000 faaf 	bl	8005688 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	69da      	ldr	r2, [r3, #28]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f042 0208 	orr.w	r2, r2, #8
 8005138:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	69da      	ldr	r2, [r3, #28]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f022 0204 	bic.w	r2, r2, #4
 8005148:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	69d9      	ldr	r1, [r3, #28]
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	691a      	ldr	r2, [r3, #16]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	430a      	orrs	r2, r1
 800515a:	61da      	str	r2, [r3, #28]
      break;
 800515c:	e021      	b.n	80051a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	68b9      	ldr	r1, [r7, #8]
 8005164:	4618      	mov	r0, r3
 8005166:	f000 fb03 	bl	8005770 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	69da      	ldr	r2, [r3, #28]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005178:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	69da      	ldr	r2, [r3, #28]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005188:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	69d9      	ldr	r1, [r3, #28]
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	691b      	ldr	r3, [r3, #16]
 8005194:	021a      	lsls	r2, r3, #8
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	430a      	orrs	r2, r1
 800519c:	61da      	str	r2, [r3, #28]
      break;
 800519e:	e000      	b.n	80051a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80051a0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2201      	movs	r2, #1
 80051a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2200      	movs	r2, #0
 80051ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051b2:	2300      	movs	r3, #0
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3710      	adds	r7, #16
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}

080051bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d101      	bne.n	80051d4 <HAL_TIM_ConfigClockSource+0x18>
 80051d0:	2302      	movs	r3, #2
 80051d2:	e0a6      	b.n	8005322 <HAL_TIM_ConfigClockSource+0x166>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2202      	movs	r2, #2
 80051e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80051f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051fa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	68fa      	ldr	r2, [r7, #12]
 8005202:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	2b40      	cmp	r3, #64	; 0x40
 800520a:	d067      	beq.n	80052dc <HAL_TIM_ConfigClockSource+0x120>
 800520c:	2b40      	cmp	r3, #64	; 0x40
 800520e:	d80b      	bhi.n	8005228 <HAL_TIM_ConfigClockSource+0x6c>
 8005210:	2b10      	cmp	r3, #16
 8005212:	d073      	beq.n	80052fc <HAL_TIM_ConfigClockSource+0x140>
 8005214:	2b10      	cmp	r3, #16
 8005216:	d802      	bhi.n	800521e <HAL_TIM_ConfigClockSource+0x62>
 8005218:	2b00      	cmp	r3, #0
 800521a:	d06f      	beq.n	80052fc <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800521c:	e078      	b.n	8005310 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800521e:	2b20      	cmp	r3, #32
 8005220:	d06c      	beq.n	80052fc <HAL_TIM_ConfigClockSource+0x140>
 8005222:	2b30      	cmp	r3, #48	; 0x30
 8005224:	d06a      	beq.n	80052fc <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005226:	e073      	b.n	8005310 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005228:	2b70      	cmp	r3, #112	; 0x70
 800522a:	d00d      	beq.n	8005248 <HAL_TIM_ConfigClockSource+0x8c>
 800522c:	2b70      	cmp	r3, #112	; 0x70
 800522e:	d804      	bhi.n	800523a <HAL_TIM_ConfigClockSource+0x7e>
 8005230:	2b50      	cmp	r3, #80	; 0x50
 8005232:	d033      	beq.n	800529c <HAL_TIM_ConfigClockSource+0xe0>
 8005234:	2b60      	cmp	r3, #96	; 0x60
 8005236:	d041      	beq.n	80052bc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005238:	e06a      	b.n	8005310 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800523a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800523e:	d066      	beq.n	800530e <HAL_TIM_ConfigClockSource+0x152>
 8005240:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005244:	d017      	beq.n	8005276 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005246:	e063      	b.n	8005310 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6818      	ldr	r0, [r3, #0]
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	6899      	ldr	r1, [r3, #8]
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	685a      	ldr	r2, [r3, #4]
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	f000 fb5a 	bl	8005910 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800526a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	68fa      	ldr	r2, [r7, #12]
 8005272:	609a      	str	r2, [r3, #8]
      break;
 8005274:	e04c      	b.n	8005310 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6818      	ldr	r0, [r3, #0]
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	6899      	ldr	r1, [r3, #8]
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	685a      	ldr	r2, [r3, #4]
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	f000 fb43 	bl	8005910 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	689a      	ldr	r2, [r3, #8]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005298:	609a      	str	r2, [r3, #8]
      break;
 800529a:	e039      	b.n	8005310 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6818      	ldr	r0, [r3, #0]
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	6859      	ldr	r1, [r3, #4]
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	461a      	mov	r2, r3
 80052aa:	f000 fab7 	bl	800581c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	2150      	movs	r1, #80	; 0x50
 80052b4:	4618      	mov	r0, r3
 80052b6:	f000 fb10 	bl	80058da <TIM_ITRx_SetConfig>
      break;
 80052ba:	e029      	b.n	8005310 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6818      	ldr	r0, [r3, #0]
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	6859      	ldr	r1, [r3, #4]
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	461a      	mov	r2, r3
 80052ca:	f000 fad6 	bl	800587a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2160      	movs	r1, #96	; 0x60
 80052d4:	4618      	mov	r0, r3
 80052d6:	f000 fb00 	bl	80058da <TIM_ITRx_SetConfig>
      break;
 80052da:	e019      	b.n	8005310 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6818      	ldr	r0, [r3, #0]
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	6859      	ldr	r1, [r3, #4]
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	68db      	ldr	r3, [r3, #12]
 80052e8:	461a      	mov	r2, r3
 80052ea:	f000 fa97 	bl	800581c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	2140      	movs	r1, #64	; 0x40
 80052f4:	4618      	mov	r0, r3
 80052f6:	f000 faf0 	bl	80058da <TIM_ITRx_SetConfig>
      break;
 80052fa:	e009      	b.n	8005310 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4619      	mov	r1, r3
 8005306:	4610      	mov	r0, r2
 8005308:	f000 fae7 	bl	80058da <TIM_ITRx_SetConfig>
      break;
 800530c:	e000      	b.n	8005310 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800530e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2201      	movs	r2, #1
 8005314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2200      	movs	r2, #0
 800531c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005320:	2300      	movs	r3, #0
}
 8005322:	4618      	mov	r0, r3
 8005324:	3710      	adds	r7, #16
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}

0800532a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800532a:	b480      	push	{r7}
 800532c:	b083      	sub	sp, #12
 800532e:	af00      	add	r7, sp, #0
 8005330:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005332:	bf00      	nop
 8005334:	370c      	adds	r7, #12
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr

0800533e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800533e:	b480      	push	{r7}
 8005340:	b083      	sub	sp, #12
 8005342:	af00      	add	r7, sp, #0
 8005344:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005346:	bf00      	nop
 8005348:	370c      	adds	r7, #12
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr

08005352 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005352:	b480      	push	{r7}
 8005354:	b083      	sub	sp, #12
 8005356:	af00      	add	r7, sp, #0
 8005358:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800535a:	bf00      	nop
 800535c:	370c      	adds	r7, #12
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr

08005366 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005366:	b480      	push	{r7}
 8005368:	b083      	sub	sp, #12
 800536a:	af00      	add	r7, sp, #0
 800536c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800536e:	bf00      	nop
 8005370:	370c      	adds	r7, #12
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr
	...

0800537c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800537c:	b480      	push	{r7}
 800537e:	b085      	sub	sp, #20
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	4a40      	ldr	r2, [pc, #256]	; (8005490 <TIM_Base_SetConfig+0x114>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d013      	beq.n	80053bc <TIM_Base_SetConfig+0x40>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800539a:	d00f      	beq.n	80053bc <TIM_Base_SetConfig+0x40>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4a3d      	ldr	r2, [pc, #244]	; (8005494 <TIM_Base_SetConfig+0x118>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d00b      	beq.n	80053bc <TIM_Base_SetConfig+0x40>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	4a3c      	ldr	r2, [pc, #240]	; (8005498 <TIM_Base_SetConfig+0x11c>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d007      	beq.n	80053bc <TIM_Base_SetConfig+0x40>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	4a3b      	ldr	r2, [pc, #236]	; (800549c <TIM_Base_SetConfig+0x120>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d003      	beq.n	80053bc <TIM_Base_SetConfig+0x40>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	4a3a      	ldr	r2, [pc, #232]	; (80054a0 <TIM_Base_SetConfig+0x124>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d108      	bne.n	80053ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	68fa      	ldr	r2, [r7, #12]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a2f      	ldr	r2, [pc, #188]	; (8005490 <TIM_Base_SetConfig+0x114>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d02b      	beq.n	800542e <TIM_Base_SetConfig+0xb2>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053dc:	d027      	beq.n	800542e <TIM_Base_SetConfig+0xb2>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4a2c      	ldr	r2, [pc, #176]	; (8005494 <TIM_Base_SetConfig+0x118>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d023      	beq.n	800542e <TIM_Base_SetConfig+0xb2>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	4a2b      	ldr	r2, [pc, #172]	; (8005498 <TIM_Base_SetConfig+0x11c>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d01f      	beq.n	800542e <TIM_Base_SetConfig+0xb2>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a2a      	ldr	r2, [pc, #168]	; (800549c <TIM_Base_SetConfig+0x120>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d01b      	beq.n	800542e <TIM_Base_SetConfig+0xb2>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4a29      	ldr	r2, [pc, #164]	; (80054a0 <TIM_Base_SetConfig+0x124>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d017      	beq.n	800542e <TIM_Base_SetConfig+0xb2>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	4a28      	ldr	r2, [pc, #160]	; (80054a4 <TIM_Base_SetConfig+0x128>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d013      	beq.n	800542e <TIM_Base_SetConfig+0xb2>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	4a27      	ldr	r2, [pc, #156]	; (80054a8 <TIM_Base_SetConfig+0x12c>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d00f      	beq.n	800542e <TIM_Base_SetConfig+0xb2>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4a26      	ldr	r2, [pc, #152]	; (80054ac <TIM_Base_SetConfig+0x130>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d00b      	beq.n	800542e <TIM_Base_SetConfig+0xb2>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	4a25      	ldr	r2, [pc, #148]	; (80054b0 <TIM_Base_SetConfig+0x134>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d007      	beq.n	800542e <TIM_Base_SetConfig+0xb2>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4a24      	ldr	r2, [pc, #144]	; (80054b4 <TIM_Base_SetConfig+0x138>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d003      	beq.n	800542e <TIM_Base_SetConfig+0xb2>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4a23      	ldr	r2, [pc, #140]	; (80054b8 <TIM_Base_SetConfig+0x13c>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d108      	bne.n	8005440 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005434:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	68fa      	ldr	r2, [r7, #12]
 800543c:	4313      	orrs	r3, r2
 800543e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	695b      	ldr	r3, [r3, #20]
 800544a:	4313      	orrs	r3, r2
 800544c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	68fa      	ldr	r2, [r7, #12]
 8005452:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	689a      	ldr	r2, [r3, #8]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4a0a      	ldr	r2, [pc, #40]	; (8005490 <TIM_Base_SetConfig+0x114>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d003      	beq.n	8005474 <TIM_Base_SetConfig+0xf8>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	4a0c      	ldr	r2, [pc, #48]	; (80054a0 <TIM_Base_SetConfig+0x124>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d103      	bne.n	800547c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	691a      	ldr	r2, [r3, #16]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	615a      	str	r2, [r3, #20]
}
 8005482:	bf00      	nop
 8005484:	3714      	adds	r7, #20
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr
 800548e:	bf00      	nop
 8005490:	40010000 	.word	0x40010000
 8005494:	40000400 	.word	0x40000400
 8005498:	40000800 	.word	0x40000800
 800549c:	40000c00 	.word	0x40000c00
 80054a0:	40010400 	.word	0x40010400
 80054a4:	40014000 	.word	0x40014000
 80054a8:	40014400 	.word	0x40014400
 80054ac:	40014800 	.word	0x40014800
 80054b0:	40001800 	.word	0x40001800
 80054b4:	40001c00 	.word	0x40001c00
 80054b8:	40002000 	.word	0x40002000

080054bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054bc:	b480      	push	{r7}
 80054be:	b087      	sub	sp, #28
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a1b      	ldr	r3, [r3, #32]
 80054ca:	f023 0201 	bic.w	r2, r3, #1
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6a1b      	ldr	r3, [r3, #32]
 80054d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	699b      	ldr	r3, [r3, #24]
 80054e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f023 0303 	bic.w	r3, r3, #3
 80054f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	68fa      	ldr	r2, [r7, #12]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	f023 0302 	bic.w	r3, r3, #2
 8005504:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	697a      	ldr	r2, [r7, #20]
 800550c:	4313      	orrs	r3, r2
 800550e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	4a20      	ldr	r2, [pc, #128]	; (8005594 <TIM_OC1_SetConfig+0xd8>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d003      	beq.n	8005520 <TIM_OC1_SetConfig+0x64>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	4a1f      	ldr	r2, [pc, #124]	; (8005598 <TIM_OC1_SetConfig+0xdc>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d10c      	bne.n	800553a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	f023 0308 	bic.w	r3, r3, #8
 8005526:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	697a      	ldr	r2, [r7, #20]
 800552e:	4313      	orrs	r3, r2
 8005530:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	f023 0304 	bic.w	r3, r3, #4
 8005538:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4a15      	ldr	r2, [pc, #84]	; (8005594 <TIM_OC1_SetConfig+0xd8>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d003      	beq.n	800554a <TIM_OC1_SetConfig+0x8e>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4a14      	ldr	r2, [pc, #80]	; (8005598 <TIM_OC1_SetConfig+0xdc>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d111      	bne.n	800556e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005550:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005558:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	695b      	ldr	r3, [r3, #20]
 800555e:	693a      	ldr	r2, [r7, #16]
 8005560:	4313      	orrs	r3, r2
 8005562:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	699b      	ldr	r3, [r3, #24]
 8005568:	693a      	ldr	r2, [r7, #16]
 800556a:	4313      	orrs	r3, r2
 800556c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	693a      	ldr	r2, [r7, #16]
 8005572:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	68fa      	ldr	r2, [r7, #12]
 8005578:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	685a      	ldr	r2, [r3, #4]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	697a      	ldr	r2, [r7, #20]
 8005586:	621a      	str	r2, [r3, #32]
}
 8005588:	bf00      	nop
 800558a:	371c      	adds	r7, #28
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr
 8005594:	40010000 	.word	0x40010000
 8005598:	40010400 	.word	0x40010400

0800559c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800559c:	b480      	push	{r7}
 800559e:	b087      	sub	sp, #28
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6a1b      	ldr	r3, [r3, #32]
 80055aa:	f023 0210 	bic.w	r2, r3, #16
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6a1b      	ldr	r3, [r3, #32]
 80055b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	699b      	ldr	r3, [r3, #24]
 80055c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	021b      	lsls	r3, r3, #8
 80055da:	68fa      	ldr	r2, [r7, #12]
 80055dc:	4313      	orrs	r3, r2
 80055de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	f023 0320 	bic.w	r3, r3, #32
 80055e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	011b      	lsls	r3, r3, #4
 80055ee:	697a      	ldr	r2, [r7, #20]
 80055f0:	4313      	orrs	r3, r2
 80055f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	4a22      	ldr	r2, [pc, #136]	; (8005680 <TIM_OC2_SetConfig+0xe4>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d003      	beq.n	8005604 <TIM_OC2_SetConfig+0x68>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	4a21      	ldr	r2, [pc, #132]	; (8005684 <TIM_OC2_SetConfig+0xe8>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d10d      	bne.n	8005620 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800560a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	011b      	lsls	r3, r3, #4
 8005612:	697a      	ldr	r2, [r7, #20]
 8005614:	4313      	orrs	r3, r2
 8005616:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800561e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	4a17      	ldr	r2, [pc, #92]	; (8005680 <TIM_OC2_SetConfig+0xe4>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d003      	beq.n	8005630 <TIM_OC2_SetConfig+0x94>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	4a16      	ldr	r2, [pc, #88]	; (8005684 <TIM_OC2_SetConfig+0xe8>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d113      	bne.n	8005658 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005636:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800563e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	695b      	ldr	r3, [r3, #20]
 8005644:	009b      	lsls	r3, r3, #2
 8005646:	693a      	ldr	r2, [r7, #16]
 8005648:	4313      	orrs	r3, r2
 800564a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	699b      	ldr	r3, [r3, #24]
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	693a      	ldr	r2, [r7, #16]
 8005654:	4313      	orrs	r3, r2
 8005656:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	693a      	ldr	r2, [r7, #16]
 800565c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	68fa      	ldr	r2, [r7, #12]
 8005662:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	685a      	ldr	r2, [r3, #4]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	697a      	ldr	r2, [r7, #20]
 8005670:	621a      	str	r2, [r3, #32]
}
 8005672:	bf00      	nop
 8005674:	371c      	adds	r7, #28
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr
 800567e:	bf00      	nop
 8005680:	40010000 	.word	0x40010000
 8005684:	40010400 	.word	0x40010400

08005688 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005688:	b480      	push	{r7}
 800568a:	b087      	sub	sp, #28
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
 8005690:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6a1b      	ldr	r3, [r3, #32]
 8005696:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6a1b      	ldr	r3, [r3, #32]
 80056a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	69db      	ldr	r3, [r3, #28]
 80056ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f023 0303 	bic.w	r3, r3, #3
 80056be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	68fa      	ldr	r2, [r7, #12]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80056d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	021b      	lsls	r3, r3, #8
 80056d8:	697a      	ldr	r2, [r7, #20]
 80056da:	4313      	orrs	r3, r2
 80056dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a21      	ldr	r2, [pc, #132]	; (8005768 <TIM_OC3_SetConfig+0xe0>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d003      	beq.n	80056ee <TIM_OC3_SetConfig+0x66>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a20      	ldr	r2, [pc, #128]	; (800576c <TIM_OC3_SetConfig+0xe4>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d10d      	bne.n	800570a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80056f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	021b      	lsls	r3, r3, #8
 80056fc:	697a      	ldr	r2, [r7, #20]
 80056fe:	4313      	orrs	r3, r2
 8005700:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005708:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a16      	ldr	r2, [pc, #88]	; (8005768 <TIM_OC3_SetConfig+0xe0>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d003      	beq.n	800571a <TIM_OC3_SetConfig+0x92>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	4a15      	ldr	r2, [pc, #84]	; (800576c <TIM_OC3_SetConfig+0xe4>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d113      	bne.n	8005742 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005720:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005728:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	695b      	ldr	r3, [r3, #20]
 800572e:	011b      	lsls	r3, r3, #4
 8005730:	693a      	ldr	r2, [r7, #16]
 8005732:	4313      	orrs	r3, r2
 8005734:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	699b      	ldr	r3, [r3, #24]
 800573a:	011b      	lsls	r3, r3, #4
 800573c:	693a      	ldr	r2, [r7, #16]
 800573e:	4313      	orrs	r3, r2
 8005740:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	693a      	ldr	r2, [r7, #16]
 8005746:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	68fa      	ldr	r2, [r7, #12]
 800574c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	685a      	ldr	r2, [r3, #4]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	697a      	ldr	r2, [r7, #20]
 800575a:	621a      	str	r2, [r3, #32]
}
 800575c:	bf00      	nop
 800575e:	371c      	adds	r7, #28
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr
 8005768:	40010000 	.word	0x40010000
 800576c:	40010400 	.word	0x40010400

08005770 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005770:	b480      	push	{r7}
 8005772:	b087      	sub	sp, #28
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6a1b      	ldr	r3, [r3, #32]
 800577e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6a1b      	ldr	r3, [r3, #32]
 800578a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	69db      	ldr	r3, [r3, #28]
 8005796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800579e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	021b      	lsls	r3, r3, #8
 80057ae:	68fa      	ldr	r2, [r7, #12]
 80057b0:	4313      	orrs	r3, r2
 80057b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80057ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	031b      	lsls	r3, r3, #12
 80057c2:	693a      	ldr	r2, [r7, #16]
 80057c4:	4313      	orrs	r3, r2
 80057c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	4a12      	ldr	r2, [pc, #72]	; (8005814 <TIM_OC4_SetConfig+0xa4>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d003      	beq.n	80057d8 <TIM_OC4_SetConfig+0x68>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	4a11      	ldr	r2, [pc, #68]	; (8005818 <TIM_OC4_SetConfig+0xa8>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d109      	bne.n	80057ec <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	695b      	ldr	r3, [r3, #20]
 80057e4:	019b      	lsls	r3, r3, #6
 80057e6:	697a      	ldr	r2, [r7, #20]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	697a      	ldr	r2, [r7, #20]
 80057f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	68fa      	ldr	r2, [r7, #12]
 80057f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	685a      	ldr	r2, [r3, #4]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	693a      	ldr	r2, [r7, #16]
 8005804:	621a      	str	r2, [r3, #32]
}
 8005806:	bf00      	nop
 8005808:	371c      	adds	r7, #28
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr
 8005812:	bf00      	nop
 8005814:	40010000 	.word	0x40010000
 8005818:	40010400 	.word	0x40010400

0800581c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800581c:	b480      	push	{r7}
 800581e:	b087      	sub	sp, #28
 8005820:	af00      	add	r7, sp, #0
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	6a1b      	ldr	r3, [r3, #32]
 800582c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	6a1b      	ldr	r3, [r3, #32]
 8005832:	f023 0201 	bic.w	r2, r3, #1
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	699b      	ldr	r3, [r3, #24]
 800583e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005846:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	011b      	lsls	r3, r3, #4
 800584c:	693a      	ldr	r2, [r7, #16]
 800584e:	4313      	orrs	r3, r2
 8005850:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	f023 030a 	bic.w	r3, r3, #10
 8005858:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800585a:	697a      	ldr	r2, [r7, #20]
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	4313      	orrs	r3, r2
 8005860:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	693a      	ldr	r2, [r7, #16]
 8005866:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	697a      	ldr	r2, [r7, #20]
 800586c:	621a      	str	r2, [r3, #32]
}
 800586e:	bf00      	nop
 8005870:	371c      	adds	r7, #28
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr

0800587a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800587a:	b480      	push	{r7}
 800587c:	b087      	sub	sp, #28
 800587e:	af00      	add	r7, sp, #0
 8005880:	60f8      	str	r0, [r7, #12]
 8005882:	60b9      	str	r1, [r7, #8]
 8005884:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	6a1b      	ldr	r3, [r3, #32]
 800588a:	f023 0210 	bic.w	r2, r3, #16
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	699b      	ldr	r3, [r3, #24]
 8005896:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	6a1b      	ldr	r3, [r3, #32]
 800589c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80058a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	031b      	lsls	r3, r3, #12
 80058aa:	697a      	ldr	r2, [r7, #20]
 80058ac:	4313      	orrs	r3, r2
 80058ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80058b6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	011b      	lsls	r3, r3, #4
 80058bc:	693a      	ldr	r2, [r7, #16]
 80058be:	4313      	orrs	r3, r2
 80058c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	697a      	ldr	r2, [r7, #20]
 80058c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	693a      	ldr	r2, [r7, #16]
 80058cc:	621a      	str	r2, [r3, #32]
}
 80058ce:	bf00      	nop
 80058d0:	371c      	adds	r7, #28
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr

080058da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80058da:	b480      	push	{r7}
 80058dc:	b085      	sub	sp, #20
 80058de:	af00      	add	r7, sp, #0
 80058e0:	6078      	str	r0, [r7, #4]
 80058e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058f2:	683a      	ldr	r2, [r7, #0]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	f043 0307 	orr.w	r3, r3, #7
 80058fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	68fa      	ldr	r2, [r7, #12]
 8005902:	609a      	str	r2, [r3, #8]
}
 8005904:	bf00      	nop
 8005906:	3714      	adds	r7, #20
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr

08005910 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005910:	b480      	push	{r7}
 8005912:	b087      	sub	sp, #28
 8005914:	af00      	add	r7, sp, #0
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	60b9      	str	r1, [r7, #8]
 800591a:	607a      	str	r2, [r7, #4]
 800591c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800592a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	021a      	lsls	r2, r3, #8
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	431a      	orrs	r2, r3
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	4313      	orrs	r3, r2
 8005938:	697a      	ldr	r2, [r7, #20]
 800593a:	4313      	orrs	r3, r2
 800593c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	697a      	ldr	r2, [r7, #20]
 8005942:	609a      	str	r2, [r3, #8]
}
 8005944:	bf00      	nop
 8005946:	371c      	adds	r7, #28
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005950:	b480      	push	{r7}
 8005952:	b087      	sub	sp, #28
 8005954:	af00      	add	r7, sp, #0
 8005956:	60f8      	str	r0, [r7, #12]
 8005958:	60b9      	str	r1, [r7, #8]
 800595a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	f003 031f 	and.w	r3, r3, #31
 8005962:	2201      	movs	r2, #1
 8005964:	fa02 f303 	lsl.w	r3, r2, r3
 8005968:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	6a1a      	ldr	r2, [r3, #32]
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	43db      	mvns	r3, r3
 8005972:	401a      	ands	r2, r3
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	6a1a      	ldr	r2, [r3, #32]
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	f003 031f 	and.w	r3, r3, #31
 8005982:	6879      	ldr	r1, [r7, #4]
 8005984:	fa01 f303 	lsl.w	r3, r1, r3
 8005988:	431a      	orrs	r2, r3
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	621a      	str	r2, [r3, #32]
}
 800598e:	bf00      	nop
 8005990:	371c      	adds	r7, #28
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr
	...

0800599c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800599c:	b480      	push	{r7}
 800599e:	b085      	sub	sp, #20
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d101      	bne.n	80059b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80059b0:	2302      	movs	r3, #2
 80059b2:	e05a      	b.n	8005a6a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2201      	movs	r2, #1
 80059b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2202      	movs	r2, #2
 80059c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	68fa      	ldr	r2, [r7, #12]
 80059e2:	4313      	orrs	r3, r2
 80059e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	68fa      	ldr	r2, [r7, #12]
 80059ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a21      	ldr	r2, [pc, #132]	; (8005a78 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d022      	beq.n	8005a3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a00:	d01d      	beq.n	8005a3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a1d      	ldr	r2, [pc, #116]	; (8005a7c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d018      	beq.n	8005a3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a1b      	ldr	r2, [pc, #108]	; (8005a80 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d013      	beq.n	8005a3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a1a      	ldr	r2, [pc, #104]	; (8005a84 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d00e      	beq.n	8005a3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a18      	ldr	r2, [pc, #96]	; (8005a88 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d009      	beq.n	8005a3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a17      	ldr	r2, [pc, #92]	; (8005a8c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d004      	beq.n	8005a3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a15      	ldr	r2, [pc, #84]	; (8005a90 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d10c      	bne.n	8005a58 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	68ba      	ldr	r2, [r7, #8]
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	68ba      	ldr	r2, [r7, #8]
 8005a56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2200      	movs	r2, #0
 8005a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a68:	2300      	movs	r3, #0
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3714      	adds	r7, #20
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr
 8005a76:	bf00      	nop
 8005a78:	40010000 	.word	0x40010000
 8005a7c:	40000400 	.word	0x40000400
 8005a80:	40000800 	.word	0x40000800
 8005a84:	40000c00 	.word	0x40000c00
 8005a88:	40010400 	.word	0x40010400
 8005a8c:	40014000 	.word	0x40014000
 8005a90:	40001800 	.word	0x40001800

08005a94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b083      	sub	sp, #12
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a9c:	bf00      	nop
 8005a9e:	370c      	adds	r7, #12
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr

08005aa8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b083      	sub	sp, #12
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ab0:	bf00      	nop
 8005ab2:	370c      	adds	r7, #12
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr

08005abc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b082      	sub	sp, #8
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d101      	bne.n	8005ace <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	e03f      	b.n	8005b4e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d106      	bne.n	8005ae8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2200      	movs	r2, #0
 8005ade:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f7fb fbec 	bl	80012c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2224      	movs	r2, #36	; 0x24
 8005aec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	68da      	ldr	r2, [r3, #12]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005afe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f000 fb97 	bl	8006234 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	691a      	ldr	r2, [r3, #16]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	695a      	ldr	r2, [r3, #20]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b24:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	68da      	ldr	r2, [r3, #12]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b34:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2220      	movs	r2, #32
 8005b40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2220      	movs	r2, #32
 8005b48:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005b4c:	2300      	movs	r3, #0
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3708      	adds	r7, #8
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}

08005b56 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b56:	b580      	push	{r7, lr}
 8005b58:	b088      	sub	sp, #32
 8005b5a:	af02      	add	r7, sp, #8
 8005b5c:	60f8      	str	r0, [r7, #12]
 8005b5e:	60b9      	str	r1, [r7, #8]
 8005b60:	603b      	str	r3, [r7, #0]
 8005b62:	4613      	mov	r3, r2
 8005b64:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005b66:	2300      	movs	r3, #0
 8005b68:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	2b20      	cmp	r3, #32
 8005b74:	f040 8083 	bne.w	8005c7e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d002      	beq.n	8005b84 <HAL_UART_Transmit+0x2e>
 8005b7e:	88fb      	ldrh	r3, [r7, #6]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d101      	bne.n	8005b88 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	e07b      	b.n	8005c80 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d101      	bne.n	8005b96 <HAL_UART_Transmit+0x40>
 8005b92:	2302      	movs	r3, #2
 8005b94:	e074      	b.n	8005c80 <HAL_UART_Transmit+0x12a>
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2201      	movs	r2, #1
 8005b9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2221      	movs	r2, #33	; 0x21
 8005ba8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005bac:	f7fb fc60 	bl	8001470 <HAL_GetTick>
 8005bb0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	88fa      	ldrh	r2, [r7, #6]
 8005bb6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	88fa      	ldrh	r2, [r7, #6]
 8005bbc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005bc6:	e042      	b.n	8005c4e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	3b01      	subs	r3, #1
 8005bd0:	b29a      	uxth	r2, r3
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bde:	d122      	bne.n	8005c26 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	9300      	str	r3, [sp, #0]
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	2200      	movs	r2, #0
 8005be8:	2180      	movs	r1, #128	; 0x80
 8005bea:	68f8      	ldr	r0, [r7, #12]
 8005bec:	f000 f9b6 	bl	8005f5c <UART_WaitOnFlagUntilTimeout>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d001      	beq.n	8005bfa <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8005bf6:	2303      	movs	r3, #3
 8005bf8:	e042      	b.n	8005c80 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	881b      	ldrh	r3, [r3, #0]
 8005c02:	461a      	mov	r2, r3
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c0c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	691b      	ldr	r3, [r3, #16]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d103      	bne.n	8005c1e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	3302      	adds	r3, #2
 8005c1a:	60bb      	str	r3, [r7, #8]
 8005c1c:	e017      	b.n	8005c4e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	3301      	adds	r3, #1
 8005c22:	60bb      	str	r3, [r7, #8]
 8005c24:	e013      	b.n	8005c4e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	9300      	str	r3, [sp, #0]
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	2180      	movs	r1, #128	; 0x80
 8005c30:	68f8      	ldr	r0, [r7, #12]
 8005c32:	f000 f993 	bl	8005f5c <UART_WaitOnFlagUntilTimeout>
 8005c36:	4603      	mov	r3, r0
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d001      	beq.n	8005c40 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8005c3c:	2303      	movs	r3, #3
 8005c3e:	e01f      	b.n	8005c80 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	1c5a      	adds	r2, r3, #1
 8005c44:	60ba      	str	r2, [r7, #8]
 8005c46:	781a      	ldrb	r2, [r3, #0]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d1b7      	bne.n	8005bc8 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	9300      	str	r3, [sp, #0]
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	2140      	movs	r1, #64	; 0x40
 8005c62:	68f8      	ldr	r0, [r7, #12]
 8005c64:	f000 f97a 	bl	8005f5c <UART_WaitOnFlagUntilTimeout>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d001      	beq.n	8005c72 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8005c6e:	2303      	movs	r3, #3
 8005c70:	e006      	b.n	8005c80 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2220      	movs	r2, #32
 8005c76:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	e000      	b.n	8005c80 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8005c7e:	2302      	movs	r3, #2
  }
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3718      	adds	r7, #24
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}

08005c88 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b085      	sub	sp, #20
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	60f8      	str	r0, [r7, #12]
 8005c90:	60b9      	str	r1, [r7, #8]
 8005c92:	4613      	mov	r3, r2
 8005c94:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	2b20      	cmp	r3, #32
 8005ca0:	d140      	bne.n	8005d24 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d002      	beq.n	8005cae <HAL_UART_Receive_IT+0x26>
 8005ca8:	88fb      	ldrh	r3, [r7, #6]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d101      	bne.n	8005cb2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e039      	b.n	8005d26 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d101      	bne.n	8005cc0 <HAL_UART_Receive_IT+0x38>
 8005cbc:	2302      	movs	r3, #2
 8005cbe:	e032      	b.n	8005d26 <HAL_UART_Receive_IT+0x9e>
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	68ba      	ldr	r2, [r7, #8]
 8005ccc:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	88fa      	ldrh	r2, [r7, #6]
 8005cd2:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	88fa      	ldrh	r2, [r7, #6]
 8005cd8:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2222      	movs	r2, #34	; 0x22
 8005ce4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2200      	movs	r2, #0
 8005cec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	68da      	ldr	r2, [r3, #12]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005cfe:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	695a      	ldr	r2, [r3, #20]
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f042 0201 	orr.w	r2, r2, #1
 8005d0e:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	68da      	ldr	r2, [r3, #12]
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f042 0220 	orr.w	r2, r2, #32
 8005d1e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005d20:	2300      	movs	r3, #0
 8005d22:	e000      	b.n	8005d26 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005d24:	2302      	movs	r3, #2
  }
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3714      	adds	r7, #20
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr
	...

08005d34 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b088      	sub	sp, #32
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	68db      	ldr	r3, [r3, #12]
 8005d4a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	695b      	ldr	r3, [r3, #20]
 8005d52:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005d54:	2300      	movs	r3, #0
 8005d56:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005d5c:	69fb      	ldr	r3, [r7, #28]
 8005d5e:	f003 030f 	and.w	r3, r3, #15
 8005d62:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d10d      	bne.n	8005d86 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	f003 0320 	and.w	r3, r3, #32
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d008      	beq.n	8005d86 <HAL_UART_IRQHandler+0x52>
 8005d74:	69bb      	ldr	r3, [r7, #24]
 8005d76:	f003 0320 	and.w	r3, r3, #32
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d003      	beq.n	8005d86 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f000 f9d6 	bl	8006130 <UART_Receive_IT>
      return;
 8005d84:	e0d1      	b.n	8005f2a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	f000 80b0 	beq.w	8005eee <HAL_UART_IRQHandler+0x1ba>
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	f003 0301 	and.w	r3, r3, #1
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d105      	bne.n	8005da4 <HAL_UART_IRQHandler+0x70>
 8005d98:	69bb      	ldr	r3, [r7, #24]
 8005d9a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	f000 80a5 	beq.w	8005eee <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005da4:	69fb      	ldr	r3, [r7, #28]
 8005da6:	f003 0301 	and.w	r3, r3, #1
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d00a      	beq.n	8005dc4 <HAL_UART_IRQHandler+0x90>
 8005dae:	69bb      	ldr	r3, [r7, #24]
 8005db0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d005      	beq.n	8005dc4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dbc:	f043 0201 	orr.w	r2, r3, #1
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005dc4:	69fb      	ldr	r3, [r7, #28]
 8005dc6:	f003 0304 	and.w	r3, r3, #4
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d00a      	beq.n	8005de4 <HAL_UART_IRQHandler+0xb0>
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	f003 0301 	and.w	r3, r3, #1
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d005      	beq.n	8005de4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ddc:	f043 0202 	orr.w	r2, r3, #2
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005de4:	69fb      	ldr	r3, [r7, #28]
 8005de6:	f003 0302 	and.w	r3, r3, #2
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d00a      	beq.n	8005e04 <HAL_UART_IRQHandler+0xd0>
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	f003 0301 	and.w	r3, r3, #1
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d005      	beq.n	8005e04 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dfc:	f043 0204 	orr.w	r2, r3, #4
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005e04:	69fb      	ldr	r3, [r7, #28]
 8005e06:	f003 0308 	and.w	r3, r3, #8
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d00f      	beq.n	8005e2e <HAL_UART_IRQHandler+0xfa>
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	f003 0320 	and.w	r3, r3, #32
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d104      	bne.n	8005e22 <HAL_UART_IRQHandler+0xee>
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	f003 0301 	and.w	r3, r3, #1
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d005      	beq.n	8005e2e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e26:	f043 0208 	orr.w	r2, r3, #8
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d078      	beq.n	8005f28 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e36:	69fb      	ldr	r3, [r7, #28]
 8005e38:	f003 0320 	and.w	r3, r3, #32
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d007      	beq.n	8005e50 <HAL_UART_IRQHandler+0x11c>
 8005e40:	69bb      	ldr	r3, [r7, #24]
 8005e42:	f003 0320 	and.w	r3, r3, #32
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d002      	beq.n	8005e50 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f000 f970 	bl	8006130 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	695b      	ldr	r3, [r3, #20]
 8005e56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e5a:	2b40      	cmp	r3, #64	; 0x40
 8005e5c:	bf0c      	ite	eq
 8005e5e:	2301      	moveq	r3, #1
 8005e60:	2300      	movne	r3, #0
 8005e62:	b2db      	uxtb	r3, r3
 8005e64:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e6a:	f003 0308 	and.w	r3, r3, #8
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d102      	bne.n	8005e78 <HAL_UART_IRQHandler+0x144>
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d031      	beq.n	8005edc <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f000 f8b9 	bl	8005ff0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	695b      	ldr	r3, [r3, #20]
 8005e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e88:	2b40      	cmp	r3, #64	; 0x40
 8005e8a:	d123      	bne.n	8005ed4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	695a      	ldr	r2, [r3, #20]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e9a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d013      	beq.n	8005ecc <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ea8:	4a21      	ldr	r2, [pc, #132]	; (8005f30 <HAL_UART_IRQHandler+0x1fc>)
 8005eaa:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	f7fb fc1c 	bl	80016ee <HAL_DMA_Abort_IT>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d016      	beq.n	8005eea <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ec0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005ec6:	4610      	mov	r0, r2
 8005ec8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005eca:	e00e      	b.n	8005eea <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f000 f83b 	bl	8005f48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ed2:	e00a      	b.n	8005eea <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f000 f837 	bl	8005f48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005eda:	e006      	b.n	8005eea <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f000 f833 	bl	8005f48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005ee8:	e01e      	b.n	8005f28 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005eea:	bf00      	nop
    return;
 8005eec:	e01c      	b.n	8005f28 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005eee:	69fb      	ldr	r3, [r7, #28]
 8005ef0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d008      	beq.n	8005f0a <HAL_UART_IRQHandler+0x1d6>
 8005ef8:	69bb      	ldr	r3, [r7, #24]
 8005efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d003      	beq.n	8005f0a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 f8a6 	bl	8006054 <UART_Transmit_IT>
    return;
 8005f08:	e00f      	b.n	8005f2a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005f0a:	69fb      	ldr	r3, [r7, #28]
 8005f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d00a      	beq.n	8005f2a <HAL_UART_IRQHandler+0x1f6>
 8005f14:	69bb      	ldr	r3, [r7, #24]
 8005f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d005      	beq.n	8005f2a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f000 f8ee 	bl	8006100 <UART_EndTransmit_IT>
    return;
 8005f24:	bf00      	nop
 8005f26:	e000      	b.n	8005f2a <HAL_UART_IRQHandler+0x1f6>
    return;
 8005f28:	bf00      	nop
  }
}
 8005f2a:	3720      	adds	r7, #32
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}
 8005f30:	0800602d 	.word	0x0800602d

08005f34 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b083      	sub	sp, #12
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005f3c:	bf00      	nop
 8005f3e:	370c      	adds	r7, #12
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr

08005f48 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b083      	sub	sp, #12
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005f50:	bf00      	nop
 8005f52:	370c      	adds	r7, #12
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr

08005f5c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b084      	sub	sp, #16
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	60f8      	str	r0, [r7, #12]
 8005f64:	60b9      	str	r1, [r7, #8]
 8005f66:	603b      	str	r3, [r7, #0]
 8005f68:	4613      	mov	r3, r2
 8005f6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f6c:	e02c      	b.n	8005fc8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f6e:	69bb      	ldr	r3, [r7, #24]
 8005f70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f74:	d028      	beq.n	8005fc8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005f76:	69bb      	ldr	r3, [r7, #24]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d007      	beq.n	8005f8c <UART_WaitOnFlagUntilTimeout+0x30>
 8005f7c:	f7fb fa78 	bl	8001470 <HAL_GetTick>
 8005f80:	4602      	mov	r2, r0
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	1ad3      	subs	r3, r2, r3
 8005f86:	69ba      	ldr	r2, [r7, #24]
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d21d      	bcs.n	8005fc8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	68da      	ldr	r2, [r3, #12]
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005f9a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	695a      	ldr	r2, [r3, #20]
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f022 0201 	bic.w	r2, r2, #1
 8005faa:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2220      	movs	r2, #32
 8005fb0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2220      	movs	r2, #32
 8005fb8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005fc4:	2303      	movs	r3, #3
 8005fc6:	e00f      	b.n	8005fe8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	4013      	ands	r3, r2
 8005fd2:	68ba      	ldr	r2, [r7, #8]
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	bf0c      	ite	eq
 8005fd8:	2301      	moveq	r3, #1
 8005fda:	2300      	movne	r3, #0
 8005fdc:	b2db      	uxtb	r3, r3
 8005fde:	461a      	mov	r2, r3
 8005fe0:	79fb      	ldrb	r3, [r7, #7]
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d0c3      	beq.n	8005f6e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005fe6:	2300      	movs	r3, #0
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3710      	adds	r7, #16
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}

08005ff0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b083      	sub	sp, #12
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	68da      	ldr	r2, [r3, #12]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006006:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	695a      	ldr	r2, [r3, #20]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f022 0201 	bic.w	r2, r2, #1
 8006016:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2220      	movs	r2, #32
 800601c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006020:	bf00      	nop
 8006022:	370c      	adds	r7, #12
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr

0800602c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b084      	sub	sp, #16
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006038:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2200      	movs	r2, #0
 800603e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2200      	movs	r2, #0
 8006044:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006046:	68f8      	ldr	r0, [r7, #12]
 8006048:	f7ff ff7e 	bl	8005f48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800604c:	bf00      	nop
 800604e:	3710      	adds	r7, #16
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}

08006054 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006054:	b480      	push	{r7}
 8006056:	b085      	sub	sp, #20
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006062:	b2db      	uxtb	r3, r3
 8006064:	2b21      	cmp	r3, #33	; 0x21
 8006066:	d144      	bne.n	80060f2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	689b      	ldr	r3, [r3, #8]
 800606c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006070:	d11a      	bne.n	80060a8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6a1b      	ldr	r3, [r3, #32]
 8006076:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	881b      	ldrh	r3, [r3, #0]
 800607c:	461a      	mov	r2, r3
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006086:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	691b      	ldr	r3, [r3, #16]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d105      	bne.n	800609c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6a1b      	ldr	r3, [r3, #32]
 8006094:	1c9a      	adds	r2, r3, #2
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	621a      	str	r2, [r3, #32]
 800609a:	e00e      	b.n	80060ba <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6a1b      	ldr	r3, [r3, #32]
 80060a0:	1c5a      	adds	r2, r3, #1
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	621a      	str	r2, [r3, #32]
 80060a6:	e008      	b.n	80060ba <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6a1b      	ldr	r3, [r3, #32]
 80060ac:	1c59      	adds	r1, r3, #1
 80060ae:	687a      	ldr	r2, [r7, #4]
 80060b0:	6211      	str	r1, [r2, #32]
 80060b2:	781a      	ldrb	r2, [r3, #0]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80060be:	b29b      	uxth	r3, r3
 80060c0:	3b01      	subs	r3, #1
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	687a      	ldr	r2, [r7, #4]
 80060c6:	4619      	mov	r1, r3
 80060c8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d10f      	bne.n	80060ee <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	68da      	ldr	r2, [r3, #12]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80060dc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	68da      	ldr	r2, [r3, #12]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060ec:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80060ee:	2300      	movs	r3, #0
 80060f0:	e000      	b.n	80060f4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80060f2:	2302      	movs	r3, #2
  }
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3714      	adds	r7, #20
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr

08006100 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b082      	sub	sp, #8
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	68da      	ldr	r2, [r3, #12]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006116:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2220      	movs	r2, #32
 800611c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f7ff ff07 	bl	8005f34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006126:	2300      	movs	r3, #0
}
 8006128:	4618      	mov	r0, r3
 800612a:	3708      	adds	r7, #8
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}

08006130 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b084      	sub	sp, #16
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800613e:	b2db      	uxtb	r3, r3
 8006140:	2b22      	cmp	r3, #34	; 0x22
 8006142:	d171      	bne.n	8006228 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800614c:	d123      	bne.n	8006196 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006152:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	691b      	ldr	r3, [r3, #16]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d10e      	bne.n	800617a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	b29b      	uxth	r3, r3
 8006164:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006168:	b29a      	uxth	r2, r3
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006172:	1c9a      	adds	r2, r3, #2
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	629a      	str	r2, [r3, #40]	; 0x28
 8006178:	e029      	b.n	80061ce <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	b29b      	uxth	r3, r3
 8006182:	b2db      	uxtb	r3, r3
 8006184:	b29a      	uxth	r2, r3
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800618e:	1c5a      	adds	r2, r3, #1
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	629a      	str	r2, [r3, #40]	; 0x28
 8006194:	e01b      	b.n	80061ce <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	691b      	ldr	r3, [r3, #16]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d10a      	bne.n	80061b4 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	6858      	ldr	r0, [r3, #4]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061a8:	1c59      	adds	r1, r3, #1
 80061aa:	687a      	ldr	r2, [r7, #4]
 80061ac:	6291      	str	r1, [r2, #40]	; 0x28
 80061ae:	b2c2      	uxtb	r2, r0
 80061b0:	701a      	strb	r2, [r3, #0]
 80061b2:	e00c      	b.n	80061ce <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	b2da      	uxtb	r2, r3
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061c0:	1c58      	adds	r0, r3, #1
 80061c2:	6879      	ldr	r1, [r7, #4]
 80061c4:	6288      	str	r0, [r1, #40]	; 0x28
 80061c6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80061ca:	b2d2      	uxtb	r2, r2
 80061cc:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061d2:	b29b      	uxth	r3, r3
 80061d4:	3b01      	subs	r3, #1
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	687a      	ldr	r2, [r7, #4]
 80061da:	4619      	mov	r1, r3
 80061dc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d120      	bne.n	8006224 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	68da      	ldr	r2, [r3, #12]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f022 0220 	bic.w	r2, r2, #32
 80061f0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	68da      	ldr	r2, [r3, #12]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006200:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	695a      	ldr	r2, [r3, #20]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f022 0201 	bic.w	r2, r2, #1
 8006210:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2220      	movs	r2, #32
 8006216:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f7fa fca8 	bl	8000b70 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006220:	2300      	movs	r3, #0
 8006222:	e002      	b.n	800622a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006224:	2300      	movs	r3, #0
 8006226:	e000      	b.n	800622a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006228:	2302      	movs	r3, #2
  }
}
 800622a:	4618      	mov	r0, r3
 800622c:	3710      	adds	r7, #16
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}
	...

08006234 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006238:	b085      	sub	sp, #20
 800623a:	af00      	add	r7, sp, #0
 800623c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	691b      	ldr	r3, [r3, #16]
 8006244:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	68da      	ldr	r2, [r3, #12]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	430a      	orrs	r2, r1
 8006252:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	689a      	ldr	r2, [r3, #8]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	691b      	ldr	r3, [r3, #16]
 800625c:	431a      	orrs	r2, r3
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	695b      	ldr	r3, [r3, #20]
 8006262:	431a      	orrs	r2, r3
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	69db      	ldr	r3, [r3, #28]
 8006268:	4313      	orrs	r3, r2
 800626a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	68db      	ldr	r3, [r3, #12]
 8006272:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006276:	f023 030c 	bic.w	r3, r3, #12
 800627a:	687a      	ldr	r2, [r7, #4]
 800627c:	6812      	ldr	r2, [r2, #0]
 800627e:	68f9      	ldr	r1, [r7, #12]
 8006280:	430b      	orrs	r3, r1
 8006282:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	695b      	ldr	r3, [r3, #20]
 800628a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	699a      	ldr	r2, [r3, #24]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	430a      	orrs	r2, r1
 8006298:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	69db      	ldr	r3, [r3, #28]
 800629e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062a2:	f040 818b 	bne.w	80065bc <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4ac1      	ldr	r2, [pc, #772]	; (80065b0 <UART_SetConfig+0x37c>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d005      	beq.n	80062bc <UART_SetConfig+0x88>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4abf      	ldr	r2, [pc, #764]	; (80065b4 <UART_SetConfig+0x380>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	f040 80bd 	bne.w	8006436 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80062bc:	f7fe fb38 	bl	8004930 <HAL_RCC_GetPCLK2Freq>
 80062c0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	461d      	mov	r5, r3
 80062c6:	f04f 0600 	mov.w	r6, #0
 80062ca:	46a8      	mov	r8, r5
 80062cc:	46b1      	mov	r9, r6
 80062ce:	eb18 0308 	adds.w	r3, r8, r8
 80062d2:	eb49 0409 	adc.w	r4, r9, r9
 80062d6:	4698      	mov	r8, r3
 80062d8:	46a1      	mov	r9, r4
 80062da:	eb18 0805 	adds.w	r8, r8, r5
 80062de:	eb49 0906 	adc.w	r9, r9, r6
 80062e2:	f04f 0100 	mov.w	r1, #0
 80062e6:	f04f 0200 	mov.w	r2, #0
 80062ea:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80062ee:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80062f2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80062f6:	4688      	mov	r8, r1
 80062f8:	4691      	mov	r9, r2
 80062fa:	eb18 0005 	adds.w	r0, r8, r5
 80062fe:	eb49 0106 	adc.w	r1, r9, r6
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	461d      	mov	r5, r3
 8006308:	f04f 0600 	mov.w	r6, #0
 800630c:	196b      	adds	r3, r5, r5
 800630e:	eb46 0406 	adc.w	r4, r6, r6
 8006312:	461a      	mov	r2, r3
 8006314:	4623      	mov	r3, r4
 8006316:	f7f9 ff57 	bl	80001c8 <__aeabi_uldivmod>
 800631a:	4603      	mov	r3, r0
 800631c:	460c      	mov	r4, r1
 800631e:	461a      	mov	r2, r3
 8006320:	4ba5      	ldr	r3, [pc, #660]	; (80065b8 <UART_SetConfig+0x384>)
 8006322:	fba3 2302 	umull	r2, r3, r3, r2
 8006326:	095b      	lsrs	r3, r3, #5
 8006328:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	461d      	mov	r5, r3
 8006330:	f04f 0600 	mov.w	r6, #0
 8006334:	46a9      	mov	r9, r5
 8006336:	46b2      	mov	sl, r6
 8006338:	eb19 0309 	adds.w	r3, r9, r9
 800633c:	eb4a 040a 	adc.w	r4, sl, sl
 8006340:	4699      	mov	r9, r3
 8006342:	46a2      	mov	sl, r4
 8006344:	eb19 0905 	adds.w	r9, r9, r5
 8006348:	eb4a 0a06 	adc.w	sl, sl, r6
 800634c:	f04f 0100 	mov.w	r1, #0
 8006350:	f04f 0200 	mov.w	r2, #0
 8006354:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006358:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800635c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006360:	4689      	mov	r9, r1
 8006362:	4692      	mov	sl, r2
 8006364:	eb19 0005 	adds.w	r0, r9, r5
 8006368:	eb4a 0106 	adc.w	r1, sl, r6
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	461d      	mov	r5, r3
 8006372:	f04f 0600 	mov.w	r6, #0
 8006376:	196b      	adds	r3, r5, r5
 8006378:	eb46 0406 	adc.w	r4, r6, r6
 800637c:	461a      	mov	r2, r3
 800637e:	4623      	mov	r3, r4
 8006380:	f7f9 ff22 	bl	80001c8 <__aeabi_uldivmod>
 8006384:	4603      	mov	r3, r0
 8006386:	460c      	mov	r4, r1
 8006388:	461a      	mov	r2, r3
 800638a:	4b8b      	ldr	r3, [pc, #556]	; (80065b8 <UART_SetConfig+0x384>)
 800638c:	fba3 1302 	umull	r1, r3, r3, r2
 8006390:	095b      	lsrs	r3, r3, #5
 8006392:	2164      	movs	r1, #100	; 0x64
 8006394:	fb01 f303 	mul.w	r3, r1, r3
 8006398:	1ad3      	subs	r3, r2, r3
 800639a:	00db      	lsls	r3, r3, #3
 800639c:	3332      	adds	r3, #50	; 0x32
 800639e:	4a86      	ldr	r2, [pc, #536]	; (80065b8 <UART_SetConfig+0x384>)
 80063a0:	fba2 2303 	umull	r2, r3, r2, r3
 80063a4:	095b      	lsrs	r3, r3, #5
 80063a6:	005b      	lsls	r3, r3, #1
 80063a8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80063ac:	4498      	add	r8, r3
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	461d      	mov	r5, r3
 80063b2:	f04f 0600 	mov.w	r6, #0
 80063b6:	46a9      	mov	r9, r5
 80063b8:	46b2      	mov	sl, r6
 80063ba:	eb19 0309 	adds.w	r3, r9, r9
 80063be:	eb4a 040a 	adc.w	r4, sl, sl
 80063c2:	4699      	mov	r9, r3
 80063c4:	46a2      	mov	sl, r4
 80063c6:	eb19 0905 	adds.w	r9, r9, r5
 80063ca:	eb4a 0a06 	adc.w	sl, sl, r6
 80063ce:	f04f 0100 	mov.w	r1, #0
 80063d2:	f04f 0200 	mov.w	r2, #0
 80063d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80063da:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80063de:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80063e2:	4689      	mov	r9, r1
 80063e4:	4692      	mov	sl, r2
 80063e6:	eb19 0005 	adds.w	r0, r9, r5
 80063ea:	eb4a 0106 	adc.w	r1, sl, r6
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	461d      	mov	r5, r3
 80063f4:	f04f 0600 	mov.w	r6, #0
 80063f8:	196b      	adds	r3, r5, r5
 80063fa:	eb46 0406 	adc.w	r4, r6, r6
 80063fe:	461a      	mov	r2, r3
 8006400:	4623      	mov	r3, r4
 8006402:	f7f9 fee1 	bl	80001c8 <__aeabi_uldivmod>
 8006406:	4603      	mov	r3, r0
 8006408:	460c      	mov	r4, r1
 800640a:	461a      	mov	r2, r3
 800640c:	4b6a      	ldr	r3, [pc, #424]	; (80065b8 <UART_SetConfig+0x384>)
 800640e:	fba3 1302 	umull	r1, r3, r3, r2
 8006412:	095b      	lsrs	r3, r3, #5
 8006414:	2164      	movs	r1, #100	; 0x64
 8006416:	fb01 f303 	mul.w	r3, r1, r3
 800641a:	1ad3      	subs	r3, r2, r3
 800641c:	00db      	lsls	r3, r3, #3
 800641e:	3332      	adds	r3, #50	; 0x32
 8006420:	4a65      	ldr	r2, [pc, #404]	; (80065b8 <UART_SetConfig+0x384>)
 8006422:	fba2 2303 	umull	r2, r3, r2, r3
 8006426:	095b      	lsrs	r3, r3, #5
 8006428:	f003 0207 	and.w	r2, r3, #7
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4442      	add	r2, r8
 8006432:	609a      	str	r2, [r3, #8]
 8006434:	e26f      	b.n	8006916 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006436:	f7fe fa67 	bl	8004908 <HAL_RCC_GetPCLK1Freq>
 800643a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	461d      	mov	r5, r3
 8006440:	f04f 0600 	mov.w	r6, #0
 8006444:	46a8      	mov	r8, r5
 8006446:	46b1      	mov	r9, r6
 8006448:	eb18 0308 	adds.w	r3, r8, r8
 800644c:	eb49 0409 	adc.w	r4, r9, r9
 8006450:	4698      	mov	r8, r3
 8006452:	46a1      	mov	r9, r4
 8006454:	eb18 0805 	adds.w	r8, r8, r5
 8006458:	eb49 0906 	adc.w	r9, r9, r6
 800645c:	f04f 0100 	mov.w	r1, #0
 8006460:	f04f 0200 	mov.w	r2, #0
 8006464:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006468:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800646c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006470:	4688      	mov	r8, r1
 8006472:	4691      	mov	r9, r2
 8006474:	eb18 0005 	adds.w	r0, r8, r5
 8006478:	eb49 0106 	adc.w	r1, r9, r6
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	461d      	mov	r5, r3
 8006482:	f04f 0600 	mov.w	r6, #0
 8006486:	196b      	adds	r3, r5, r5
 8006488:	eb46 0406 	adc.w	r4, r6, r6
 800648c:	461a      	mov	r2, r3
 800648e:	4623      	mov	r3, r4
 8006490:	f7f9 fe9a 	bl	80001c8 <__aeabi_uldivmod>
 8006494:	4603      	mov	r3, r0
 8006496:	460c      	mov	r4, r1
 8006498:	461a      	mov	r2, r3
 800649a:	4b47      	ldr	r3, [pc, #284]	; (80065b8 <UART_SetConfig+0x384>)
 800649c:	fba3 2302 	umull	r2, r3, r3, r2
 80064a0:	095b      	lsrs	r3, r3, #5
 80064a2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	461d      	mov	r5, r3
 80064aa:	f04f 0600 	mov.w	r6, #0
 80064ae:	46a9      	mov	r9, r5
 80064b0:	46b2      	mov	sl, r6
 80064b2:	eb19 0309 	adds.w	r3, r9, r9
 80064b6:	eb4a 040a 	adc.w	r4, sl, sl
 80064ba:	4699      	mov	r9, r3
 80064bc:	46a2      	mov	sl, r4
 80064be:	eb19 0905 	adds.w	r9, r9, r5
 80064c2:	eb4a 0a06 	adc.w	sl, sl, r6
 80064c6:	f04f 0100 	mov.w	r1, #0
 80064ca:	f04f 0200 	mov.w	r2, #0
 80064ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80064d2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80064d6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80064da:	4689      	mov	r9, r1
 80064dc:	4692      	mov	sl, r2
 80064de:	eb19 0005 	adds.w	r0, r9, r5
 80064e2:	eb4a 0106 	adc.w	r1, sl, r6
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	461d      	mov	r5, r3
 80064ec:	f04f 0600 	mov.w	r6, #0
 80064f0:	196b      	adds	r3, r5, r5
 80064f2:	eb46 0406 	adc.w	r4, r6, r6
 80064f6:	461a      	mov	r2, r3
 80064f8:	4623      	mov	r3, r4
 80064fa:	f7f9 fe65 	bl	80001c8 <__aeabi_uldivmod>
 80064fe:	4603      	mov	r3, r0
 8006500:	460c      	mov	r4, r1
 8006502:	461a      	mov	r2, r3
 8006504:	4b2c      	ldr	r3, [pc, #176]	; (80065b8 <UART_SetConfig+0x384>)
 8006506:	fba3 1302 	umull	r1, r3, r3, r2
 800650a:	095b      	lsrs	r3, r3, #5
 800650c:	2164      	movs	r1, #100	; 0x64
 800650e:	fb01 f303 	mul.w	r3, r1, r3
 8006512:	1ad3      	subs	r3, r2, r3
 8006514:	00db      	lsls	r3, r3, #3
 8006516:	3332      	adds	r3, #50	; 0x32
 8006518:	4a27      	ldr	r2, [pc, #156]	; (80065b8 <UART_SetConfig+0x384>)
 800651a:	fba2 2303 	umull	r2, r3, r2, r3
 800651e:	095b      	lsrs	r3, r3, #5
 8006520:	005b      	lsls	r3, r3, #1
 8006522:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006526:	4498      	add	r8, r3
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	461d      	mov	r5, r3
 800652c:	f04f 0600 	mov.w	r6, #0
 8006530:	46a9      	mov	r9, r5
 8006532:	46b2      	mov	sl, r6
 8006534:	eb19 0309 	adds.w	r3, r9, r9
 8006538:	eb4a 040a 	adc.w	r4, sl, sl
 800653c:	4699      	mov	r9, r3
 800653e:	46a2      	mov	sl, r4
 8006540:	eb19 0905 	adds.w	r9, r9, r5
 8006544:	eb4a 0a06 	adc.w	sl, sl, r6
 8006548:	f04f 0100 	mov.w	r1, #0
 800654c:	f04f 0200 	mov.w	r2, #0
 8006550:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006554:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006558:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800655c:	4689      	mov	r9, r1
 800655e:	4692      	mov	sl, r2
 8006560:	eb19 0005 	adds.w	r0, r9, r5
 8006564:	eb4a 0106 	adc.w	r1, sl, r6
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	461d      	mov	r5, r3
 800656e:	f04f 0600 	mov.w	r6, #0
 8006572:	196b      	adds	r3, r5, r5
 8006574:	eb46 0406 	adc.w	r4, r6, r6
 8006578:	461a      	mov	r2, r3
 800657a:	4623      	mov	r3, r4
 800657c:	f7f9 fe24 	bl	80001c8 <__aeabi_uldivmod>
 8006580:	4603      	mov	r3, r0
 8006582:	460c      	mov	r4, r1
 8006584:	461a      	mov	r2, r3
 8006586:	4b0c      	ldr	r3, [pc, #48]	; (80065b8 <UART_SetConfig+0x384>)
 8006588:	fba3 1302 	umull	r1, r3, r3, r2
 800658c:	095b      	lsrs	r3, r3, #5
 800658e:	2164      	movs	r1, #100	; 0x64
 8006590:	fb01 f303 	mul.w	r3, r1, r3
 8006594:	1ad3      	subs	r3, r2, r3
 8006596:	00db      	lsls	r3, r3, #3
 8006598:	3332      	adds	r3, #50	; 0x32
 800659a:	4a07      	ldr	r2, [pc, #28]	; (80065b8 <UART_SetConfig+0x384>)
 800659c:	fba2 2303 	umull	r2, r3, r2, r3
 80065a0:	095b      	lsrs	r3, r3, #5
 80065a2:	f003 0207 	and.w	r2, r3, #7
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4442      	add	r2, r8
 80065ac:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80065ae:	e1b2      	b.n	8006916 <UART_SetConfig+0x6e2>
 80065b0:	40011000 	.word	0x40011000
 80065b4:	40011400 	.word	0x40011400
 80065b8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4ad7      	ldr	r2, [pc, #860]	; (8006920 <UART_SetConfig+0x6ec>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d005      	beq.n	80065d2 <UART_SetConfig+0x39e>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4ad6      	ldr	r2, [pc, #856]	; (8006924 <UART_SetConfig+0x6f0>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	f040 80d1 	bne.w	8006774 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80065d2:	f7fe f9ad 	bl	8004930 <HAL_RCC_GetPCLK2Freq>
 80065d6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	469a      	mov	sl, r3
 80065dc:	f04f 0b00 	mov.w	fp, #0
 80065e0:	46d0      	mov	r8, sl
 80065e2:	46d9      	mov	r9, fp
 80065e4:	eb18 0308 	adds.w	r3, r8, r8
 80065e8:	eb49 0409 	adc.w	r4, r9, r9
 80065ec:	4698      	mov	r8, r3
 80065ee:	46a1      	mov	r9, r4
 80065f0:	eb18 080a 	adds.w	r8, r8, sl
 80065f4:	eb49 090b 	adc.w	r9, r9, fp
 80065f8:	f04f 0100 	mov.w	r1, #0
 80065fc:	f04f 0200 	mov.w	r2, #0
 8006600:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006604:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006608:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800660c:	4688      	mov	r8, r1
 800660e:	4691      	mov	r9, r2
 8006610:	eb1a 0508 	adds.w	r5, sl, r8
 8006614:	eb4b 0609 	adc.w	r6, fp, r9
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	4619      	mov	r1, r3
 800661e:	f04f 0200 	mov.w	r2, #0
 8006622:	f04f 0300 	mov.w	r3, #0
 8006626:	f04f 0400 	mov.w	r4, #0
 800662a:	0094      	lsls	r4, r2, #2
 800662c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006630:	008b      	lsls	r3, r1, #2
 8006632:	461a      	mov	r2, r3
 8006634:	4623      	mov	r3, r4
 8006636:	4628      	mov	r0, r5
 8006638:	4631      	mov	r1, r6
 800663a:	f7f9 fdc5 	bl	80001c8 <__aeabi_uldivmod>
 800663e:	4603      	mov	r3, r0
 8006640:	460c      	mov	r4, r1
 8006642:	461a      	mov	r2, r3
 8006644:	4bb8      	ldr	r3, [pc, #736]	; (8006928 <UART_SetConfig+0x6f4>)
 8006646:	fba3 2302 	umull	r2, r3, r3, r2
 800664a:	095b      	lsrs	r3, r3, #5
 800664c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	469b      	mov	fp, r3
 8006654:	f04f 0c00 	mov.w	ip, #0
 8006658:	46d9      	mov	r9, fp
 800665a:	46e2      	mov	sl, ip
 800665c:	eb19 0309 	adds.w	r3, r9, r9
 8006660:	eb4a 040a 	adc.w	r4, sl, sl
 8006664:	4699      	mov	r9, r3
 8006666:	46a2      	mov	sl, r4
 8006668:	eb19 090b 	adds.w	r9, r9, fp
 800666c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006670:	f04f 0100 	mov.w	r1, #0
 8006674:	f04f 0200 	mov.w	r2, #0
 8006678:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800667c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006680:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006684:	4689      	mov	r9, r1
 8006686:	4692      	mov	sl, r2
 8006688:	eb1b 0509 	adds.w	r5, fp, r9
 800668c:	eb4c 060a 	adc.w	r6, ip, sl
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	4619      	mov	r1, r3
 8006696:	f04f 0200 	mov.w	r2, #0
 800669a:	f04f 0300 	mov.w	r3, #0
 800669e:	f04f 0400 	mov.w	r4, #0
 80066a2:	0094      	lsls	r4, r2, #2
 80066a4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80066a8:	008b      	lsls	r3, r1, #2
 80066aa:	461a      	mov	r2, r3
 80066ac:	4623      	mov	r3, r4
 80066ae:	4628      	mov	r0, r5
 80066b0:	4631      	mov	r1, r6
 80066b2:	f7f9 fd89 	bl	80001c8 <__aeabi_uldivmod>
 80066b6:	4603      	mov	r3, r0
 80066b8:	460c      	mov	r4, r1
 80066ba:	461a      	mov	r2, r3
 80066bc:	4b9a      	ldr	r3, [pc, #616]	; (8006928 <UART_SetConfig+0x6f4>)
 80066be:	fba3 1302 	umull	r1, r3, r3, r2
 80066c2:	095b      	lsrs	r3, r3, #5
 80066c4:	2164      	movs	r1, #100	; 0x64
 80066c6:	fb01 f303 	mul.w	r3, r1, r3
 80066ca:	1ad3      	subs	r3, r2, r3
 80066cc:	011b      	lsls	r3, r3, #4
 80066ce:	3332      	adds	r3, #50	; 0x32
 80066d0:	4a95      	ldr	r2, [pc, #596]	; (8006928 <UART_SetConfig+0x6f4>)
 80066d2:	fba2 2303 	umull	r2, r3, r2, r3
 80066d6:	095b      	lsrs	r3, r3, #5
 80066d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80066dc:	4498      	add	r8, r3
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	469b      	mov	fp, r3
 80066e2:	f04f 0c00 	mov.w	ip, #0
 80066e6:	46d9      	mov	r9, fp
 80066e8:	46e2      	mov	sl, ip
 80066ea:	eb19 0309 	adds.w	r3, r9, r9
 80066ee:	eb4a 040a 	adc.w	r4, sl, sl
 80066f2:	4699      	mov	r9, r3
 80066f4:	46a2      	mov	sl, r4
 80066f6:	eb19 090b 	adds.w	r9, r9, fp
 80066fa:	eb4a 0a0c 	adc.w	sl, sl, ip
 80066fe:	f04f 0100 	mov.w	r1, #0
 8006702:	f04f 0200 	mov.w	r2, #0
 8006706:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800670a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800670e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006712:	4689      	mov	r9, r1
 8006714:	4692      	mov	sl, r2
 8006716:	eb1b 0509 	adds.w	r5, fp, r9
 800671a:	eb4c 060a 	adc.w	r6, ip, sl
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	4619      	mov	r1, r3
 8006724:	f04f 0200 	mov.w	r2, #0
 8006728:	f04f 0300 	mov.w	r3, #0
 800672c:	f04f 0400 	mov.w	r4, #0
 8006730:	0094      	lsls	r4, r2, #2
 8006732:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006736:	008b      	lsls	r3, r1, #2
 8006738:	461a      	mov	r2, r3
 800673a:	4623      	mov	r3, r4
 800673c:	4628      	mov	r0, r5
 800673e:	4631      	mov	r1, r6
 8006740:	f7f9 fd42 	bl	80001c8 <__aeabi_uldivmod>
 8006744:	4603      	mov	r3, r0
 8006746:	460c      	mov	r4, r1
 8006748:	461a      	mov	r2, r3
 800674a:	4b77      	ldr	r3, [pc, #476]	; (8006928 <UART_SetConfig+0x6f4>)
 800674c:	fba3 1302 	umull	r1, r3, r3, r2
 8006750:	095b      	lsrs	r3, r3, #5
 8006752:	2164      	movs	r1, #100	; 0x64
 8006754:	fb01 f303 	mul.w	r3, r1, r3
 8006758:	1ad3      	subs	r3, r2, r3
 800675a:	011b      	lsls	r3, r3, #4
 800675c:	3332      	adds	r3, #50	; 0x32
 800675e:	4a72      	ldr	r2, [pc, #456]	; (8006928 <UART_SetConfig+0x6f4>)
 8006760:	fba2 2303 	umull	r2, r3, r2, r3
 8006764:	095b      	lsrs	r3, r3, #5
 8006766:	f003 020f 	and.w	r2, r3, #15
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4442      	add	r2, r8
 8006770:	609a      	str	r2, [r3, #8]
 8006772:	e0d0      	b.n	8006916 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006774:	f7fe f8c8 	bl	8004908 <HAL_RCC_GetPCLK1Freq>
 8006778:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	469a      	mov	sl, r3
 800677e:	f04f 0b00 	mov.w	fp, #0
 8006782:	46d0      	mov	r8, sl
 8006784:	46d9      	mov	r9, fp
 8006786:	eb18 0308 	adds.w	r3, r8, r8
 800678a:	eb49 0409 	adc.w	r4, r9, r9
 800678e:	4698      	mov	r8, r3
 8006790:	46a1      	mov	r9, r4
 8006792:	eb18 080a 	adds.w	r8, r8, sl
 8006796:	eb49 090b 	adc.w	r9, r9, fp
 800679a:	f04f 0100 	mov.w	r1, #0
 800679e:	f04f 0200 	mov.w	r2, #0
 80067a2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80067a6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80067aa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80067ae:	4688      	mov	r8, r1
 80067b0:	4691      	mov	r9, r2
 80067b2:	eb1a 0508 	adds.w	r5, sl, r8
 80067b6:	eb4b 0609 	adc.w	r6, fp, r9
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	4619      	mov	r1, r3
 80067c0:	f04f 0200 	mov.w	r2, #0
 80067c4:	f04f 0300 	mov.w	r3, #0
 80067c8:	f04f 0400 	mov.w	r4, #0
 80067cc:	0094      	lsls	r4, r2, #2
 80067ce:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80067d2:	008b      	lsls	r3, r1, #2
 80067d4:	461a      	mov	r2, r3
 80067d6:	4623      	mov	r3, r4
 80067d8:	4628      	mov	r0, r5
 80067da:	4631      	mov	r1, r6
 80067dc:	f7f9 fcf4 	bl	80001c8 <__aeabi_uldivmod>
 80067e0:	4603      	mov	r3, r0
 80067e2:	460c      	mov	r4, r1
 80067e4:	461a      	mov	r2, r3
 80067e6:	4b50      	ldr	r3, [pc, #320]	; (8006928 <UART_SetConfig+0x6f4>)
 80067e8:	fba3 2302 	umull	r2, r3, r3, r2
 80067ec:	095b      	lsrs	r3, r3, #5
 80067ee:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	469b      	mov	fp, r3
 80067f6:	f04f 0c00 	mov.w	ip, #0
 80067fa:	46d9      	mov	r9, fp
 80067fc:	46e2      	mov	sl, ip
 80067fe:	eb19 0309 	adds.w	r3, r9, r9
 8006802:	eb4a 040a 	adc.w	r4, sl, sl
 8006806:	4699      	mov	r9, r3
 8006808:	46a2      	mov	sl, r4
 800680a:	eb19 090b 	adds.w	r9, r9, fp
 800680e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006812:	f04f 0100 	mov.w	r1, #0
 8006816:	f04f 0200 	mov.w	r2, #0
 800681a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800681e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006822:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006826:	4689      	mov	r9, r1
 8006828:	4692      	mov	sl, r2
 800682a:	eb1b 0509 	adds.w	r5, fp, r9
 800682e:	eb4c 060a 	adc.w	r6, ip, sl
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	4619      	mov	r1, r3
 8006838:	f04f 0200 	mov.w	r2, #0
 800683c:	f04f 0300 	mov.w	r3, #0
 8006840:	f04f 0400 	mov.w	r4, #0
 8006844:	0094      	lsls	r4, r2, #2
 8006846:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800684a:	008b      	lsls	r3, r1, #2
 800684c:	461a      	mov	r2, r3
 800684e:	4623      	mov	r3, r4
 8006850:	4628      	mov	r0, r5
 8006852:	4631      	mov	r1, r6
 8006854:	f7f9 fcb8 	bl	80001c8 <__aeabi_uldivmod>
 8006858:	4603      	mov	r3, r0
 800685a:	460c      	mov	r4, r1
 800685c:	461a      	mov	r2, r3
 800685e:	4b32      	ldr	r3, [pc, #200]	; (8006928 <UART_SetConfig+0x6f4>)
 8006860:	fba3 1302 	umull	r1, r3, r3, r2
 8006864:	095b      	lsrs	r3, r3, #5
 8006866:	2164      	movs	r1, #100	; 0x64
 8006868:	fb01 f303 	mul.w	r3, r1, r3
 800686c:	1ad3      	subs	r3, r2, r3
 800686e:	011b      	lsls	r3, r3, #4
 8006870:	3332      	adds	r3, #50	; 0x32
 8006872:	4a2d      	ldr	r2, [pc, #180]	; (8006928 <UART_SetConfig+0x6f4>)
 8006874:	fba2 2303 	umull	r2, r3, r2, r3
 8006878:	095b      	lsrs	r3, r3, #5
 800687a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800687e:	4498      	add	r8, r3
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	469b      	mov	fp, r3
 8006884:	f04f 0c00 	mov.w	ip, #0
 8006888:	46d9      	mov	r9, fp
 800688a:	46e2      	mov	sl, ip
 800688c:	eb19 0309 	adds.w	r3, r9, r9
 8006890:	eb4a 040a 	adc.w	r4, sl, sl
 8006894:	4699      	mov	r9, r3
 8006896:	46a2      	mov	sl, r4
 8006898:	eb19 090b 	adds.w	r9, r9, fp
 800689c:	eb4a 0a0c 	adc.w	sl, sl, ip
 80068a0:	f04f 0100 	mov.w	r1, #0
 80068a4:	f04f 0200 	mov.w	r2, #0
 80068a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80068ac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80068b0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80068b4:	4689      	mov	r9, r1
 80068b6:	4692      	mov	sl, r2
 80068b8:	eb1b 0509 	adds.w	r5, fp, r9
 80068bc:	eb4c 060a 	adc.w	r6, ip, sl
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	4619      	mov	r1, r3
 80068c6:	f04f 0200 	mov.w	r2, #0
 80068ca:	f04f 0300 	mov.w	r3, #0
 80068ce:	f04f 0400 	mov.w	r4, #0
 80068d2:	0094      	lsls	r4, r2, #2
 80068d4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80068d8:	008b      	lsls	r3, r1, #2
 80068da:	461a      	mov	r2, r3
 80068dc:	4623      	mov	r3, r4
 80068de:	4628      	mov	r0, r5
 80068e0:	4631      	mov	r1, r6
 80068e2:	f7f9 fc71 	bl	80001c8 <__aeabi_uldivmod>
 80068e6:	4603      	mov	r3, r0
 80068e8:	460c      	mov	r4, r1
 80068ea:	461a      	mov	r2, r3
 80068ec:	4b0e      	ldr	r3, [pc, #56]	; (8006928 <UART_SetConfig+0x6f4>)
 80068ee:	fba3 1302 	umull	r1, r3, r3, r2
 80068f2:	095b      	lsrs	r3, r3, #5
 80068f4:	2164      	movs	r1, #100	; 0x64
 80068f6:	fb01 f303 	mul.w	r3, r1, r3
 80068fa:	1ad3      	subs	r3, r2, r3
 80068fc:	011b      	lsls	r3, r3, #4
 80068fe:	3332      	adds	r3, #50	; 0x32
 8006900:	4a09      	ldr	r2, [pc, #36]	; (8006928 <UART_SetConfig+0x6f4>)
 8006902:	fba2 2303 	umull	r2, r3, r2, r3
 8006906:	095b      	lsrs	r3, r3, #5
 8006908:	f003 020f 	and.w	r2, r3, #15
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4442      	add	r2, r8
 8006912:	609a      	str	r2, [r3, #8]
}
 8006914:	e7ff      	b.n	8006916 <UART_SetConfig+0x6e2>
 8006916:	bf00      	nop
 8006918:	3714      	adds	r7, #20
 800691a:	46bd      	mov	sp, r7
 800691c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006920:	40011000 	.word	0x40011000
 8006924:	40011400 	.word	0x40011400
 8006928:	51eb851f 	.word	0x51eb851f

0800692c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800692c:	b084      	sub	sp, #16
 800692e:	b580      	push	{r7, lr}
 8006930:	b084      	sub	sp, #16
 8006932:	af00      	add	r7, sp, #0
 8006934:	6078      	str	r0, [r7, #4]
 8006936:	f107 001c 	add.w	r0, r7, #28
 800693a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800693e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006940:	2b01      	cmp	r3, #1
 8006942:	d122      	bne.n	800698a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006948:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	68db      	ldr	r3, [r3, #12]
 8006954:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006958:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800695c:	687a      	ldr	r2, [r7, #4]
 800695e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	68db      	ldr	r3, [r3, #12]
 8006964:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800696c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800696e:	2b01      	cmp	r3, #1
 8006970:	d105      	bne.n	800697e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	68db      	ldr	r3, [r3, #12]
 8006976:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f000 f94a 	bl	8006c18 <USB_CoreReset>
 8006984:	4603      	mov	r3, r0
 8006986:	73fb      	strb	r3, [r7, #15]
 8006988:	e01a      	b.n	80069c0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	68db      	ldr	r3, [r3, #12]
 800698e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f000 f93e 	bl	8006c18 <USB_CoreReset>
 800699c:	4603      	mov	r3, r0
 800699e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80069a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d106      	bne.n	80069b4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069aa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	639a      	str	r2, [r3, #56]	; 0x38
 80069b2:	e005      	b.n	80069c0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80069c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c2:	2b01      	cmp	r3, #1
 80069c4:	d10b      	bne.n	80069de <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	689b      	ldr	r3, [r3, #8]
 80069ca:	f043 0206 	orr.w	r2, r3, #6
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	689b      	ldr	r3, [r3, #8]
 80069d6:	f043 0220 	orr.w	r2, r3, #32
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80069de:	7bfb      	ldrb	r3, [r7, #15]
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3710      	adds	r7, #16
 80069e4:	46bd      	mov	sp, r7
 80069e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80069ea:	b004      	add	sp, #16
 80069ec:	4770      	bx	lr

080069ee <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80069ee:	b480      	push	{r7}
 80069f0:	b083      	sub	sp, #12
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	f043 0201 	orr.w	r2, r3, #1
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006a02:	2300      	movs	r3, #0
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	370c      	adds	r7, #12
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0e:	4770      	bx	lr

08006a10 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b083      	sub	sp, #12
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	f023 0201 	bic.w	r2, r3, #1
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006a24:	2300      	movs	r3, #0
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	370c      	adds	r7, #12
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a30:	4770      	bx	lr

08006a32 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006a32:	b580      	push	{r7, lr}
 8006a34:	b082      	sub	sp, #8
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	6078      	str	r0, [r7, #4]
 8006a3a:	460b      	mov	r3, r1
 8006a3c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	68db      	ldr	r3, [r3, #12]
 8006a42:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006a4a:	78fb      	ldrb	r3, [r7, #3]
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	d106      	bne.n	8006a5e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	68db      	ldr	r3, [r3, #12]
 8006a54:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	60da      	str	r2, [r3, #12]
 8006a5c:	e00b      	b.n	8006a76 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006a5e:	78fb      	ldrb	r3, [r7, #3]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d106      	bne.n	8006a72 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	68db      	ldr	r3, [r3, #12]
 8006a68:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	60da      	str	r2, [r3, #12]
 8006a70:	e001      	b.n	8006a76 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006a72:	2301      	movs	r3, #1
 8006a74:	e003      	b.n	8006a7e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006a76:	2032      	movs	r0, #50	; 0x32
 8006a78:	f7fa fd06 	bl	8001488 <HAL_Delay>

  return HAL_OK;
 8006a7c:	2300      	movs	r3, #0
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3708      	adds	r7, #8
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}
	...

08006a88 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b085      	sub	sp, #20
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006a92:	2300      	movs	r3, #0
 8006a94:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	019b      	lsls	r3, r3, #6
 8006a9a:	f043 0220 	orr.w	r2, r3, #32
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	3301      	adds	r3, #1
 8006aa6:	60fb      	str	r3, [r7, #12]
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	4a09      	ldr	r2, [pc, #36]	; (8006ad0 <USB_FlushTxFifo+0x48>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d901      	bls.n	8006ab4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006ab0:	2303      	movs	r3, #3
 8006ab2:	e006      	b.n	8006ac2 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	691b      	ldr	r3, [r3, #16]
 8006ab8:	f003 0320 	and.w	r3, r3, #32
 8006abc:	2b20      	cmp	r3, #32
 8006abe:	d0f0      	beq.n	8006aa2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006ac0:	2300      	movs	r3, #0
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3714      	adds	r7, #20
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr
 8006ace:	bf00      	nop
 8006ad0:	00030d40 	.word	0x00030d40

08006ad4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b085      	sub	sp, #20
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006adc:	2300      	movs	r3, #0
 8006ade:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2210      	movs	r2, #16
 8006ae4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	3301      	adds	r3, #1
 8006aea:	60fb      	str	r3, [r7, #12]
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	4a09      	ldr	r2, [pc, #36]	; (8006b14 <USB_FlushRxFifo+0x40>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d901      	bls.n	8006af8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006af4:	2303      	movs	r3, #3
 8006af6:	e006      	b.n	8006b06 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	691b      	ldr	r3, [r3, #16]
 8006afc:	f003 0310 	and.w	r3, r3, #16
 8006b00:	2b10      	cmp	r3, #16
 8006b02:	d0f0      	beq.n	8006ae6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006b04:	2300      	movs	r3, #0
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3714      	adds	r7, #20
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b10:	4770      	bx	lr
 8006b12:	bf00      	nop
 8006b14:	00030d40 	.word	0x00030d40

08006b18 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b089      	sub	sp, #36	; 0x24
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	60f8      	str	r0, [r7, #12]
 8006b20:	60b9      	str	r1, [r7, #8]
 8006b22:	4611      	mov	r1, r2
 8006b24:	461a      	mov	r2, r3
 8006b26:	460b      	mov	r3, r1
 8006b28:	71fb      	strb	r3, [r7, #7]
 8006b2a:	4613      	mov	r3, r2
 8006b2c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006b36:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d11a      	bne.n	8006b74 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006b3e:	88bb      	ldrh	r3, [r7, #4]
 8006b40:	3303      	adds	r3, #3
 8006b42:	089b      	lsrs	r3, r3, #2
 8006b44:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006b46:	2300      	movs	r3, #0
 8006b48:	61bb      	str	r3, [r7, #24]
 8006b4a:	e00f      	b.n	8006b6c <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006b4c:	79fb      	ldrb	r3, [r7, #7]
 8006b4e:	031a      	lsls	r2, r3, #12
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	4413      	add	r3, r2
 8006b54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b58:	461a      	mov	r2, r3
 8006b5a:	69fb      	ldr	r3, [r7, #28]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006b60:	69fb      	ldr	r3, [r7, #28]
 8006b62:	3304      	adds	r3, #4
 8006b64:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006b66:	69bb      	ldr	r3, [r7, #24]
 8006b68:	3301      	adds	r3, #1
 8006b6a:	61bb      	str	r3, [r7, #24]
 8006b6c:	69ba      	ldr	r2, [r7, #24]
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	429a      	cmp	r2, r3
 8006b72:	d3eb      	bcc.n	8006b4c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006b74:	2300      	movs	r3, #0
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3724      	adds	r7, #36	; 0x24
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr

08006b82 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006b82:	b480      	push	{r7}
 8006b84:	b089      	sub	sp, #36	; 0x24
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	60f8      	str	r0, [r7, #12]
 8006b8a:	60b9      	str	r1, [r7, #8]
 8006b8c:	4613      	mov	r3, r2
 8006b8e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006b98:	88fb      	ldrh	r3, [r7, #6]
 8006b9a:	3303      	adds	r3, #3
 8006b9c:	089b      	lsrs	r3, r3, #2
 8006b9e:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	61bb      	str	r3, [r7, #24]
 8006ba4:	e00b      	b.n	8006bbe <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bac:	681a      	ldr	r2, [r3, #0]
 8006bae:	69fb      	ldr	r3, [r7, #28]
 8006bb0:	601a      	str	r2, [r3, #0]
    pDest++;
 8006bb2:	69fb      	ldr	r3, [r7, #28]
 8006bb4:	3304      	adds	r3, #4
 8006bb6:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006bb8:	69bb      	ldr	r3, [r7, #24]
 8006bba:	3301      	adds	r3, #1
 8006bbc:	61bb      	str	r3, [r7, #24]
 8006bbe:	69ba      	ldr	r2, [r7, #24]
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	d3ef      	bcc.n	8006ba6 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8006bc6:	69fb      	ldr	r3, [r7, #28]
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	3724      	adds	r7, #36	; 0x24
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd2:	4770      	bx	lr

08006bd4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b085      	sub	sp, #20
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	695b      	ldr	r3, [r3, #20]
 8006be0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	699b      	ldr	r3, [r3, #24]
 8006be6:	68fa      	ldr	r2, [r7, #12]
 8006be8:	4013      	ands	r3, r2
 8006bea:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006bec:	68fb      	ldr	r3, [r7, #12]
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3714      	adds	r7, #20
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf8:	4770      	bx	lr

08006bfa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006bfa:	b480      	push	{r7}
 8006bfc:	b083      	sub	sp, #12
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	695b      	ldr	r3, [r3, #20]
 8006c06:	f003 0301 	and.w	r3, r3, #1
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	370c      	adds	r7, #12
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c14:	4770      	bx	lr
	...

08006c18 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b085      	sub	sp, #20
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006c20:	2300      	movs	r3, #0
 8006c22:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	3301      	adds	r3, #1
 8006c28:	60fb      	str	r3, [r7, #12]
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	4a13      	ldr	r2, [pc, #76]	; (8006c7c <USB_CoreReset+0x64>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d901      	bls.n	8006c36 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006c32:	2303      	movs	r3, #3
 8006c34:	e01b      	b.n	8006c6e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	691b      	ldr	r3, [r3, #16]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	daf2      	bge.n	8006c24 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	691b      	ldr	r3, [r3, #16]
 8006c46:	f043 0201 	orr.w	r2, r3, #1
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	3301      	adds	r3, #1
 8006c52:	60fb      	str	r3, [r7, #12]
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	4a09      	ldr	r2, [pc, #36]	; (8006c7c <USB_CoreReset+0x64>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d901      	bls.n	8006c60 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006c5c:	2303      	movs	r3, #3
 8006c5e:	e006      	b.n	8006c6e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	691b      	ldr	r3, [r3, #16]
 8006c64:	f003 0301 	and.w	r3, r3, #1
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	d0f0      	beq.n	8006c4e <USB_CoreReset+0x36>

  return HAL_OK;
 8006c6c:	2300      	movs	r3, #0
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3714      	adds	r7, #20
 8006c72:	46bd      	mov	sp, r7
 8006c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c78:	4770      	bx	lr
 8006c7a:	bf00      	nop
 8006c7c:	00030d40 	.word	0x00030d40

08006c80 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006c80:	b084      	sub	sp, #16
 8006c82:	b580      	push	{r7, lr}
 8006c84:	b084      	sub	sp, #16
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	6078      	str	r0, [r7, #4]
 8006c8a:	f107 001c 	add.w	r0, r7, #28
 8006c8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006c9c:	461a      	mov	r2, r3
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ca6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cb2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cbe:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d018      	beq.n	8006d04 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d10a      	bne.n	8006cee <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	68ba      	ldr	r2, [r7, #8]
 8006ce2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006ce6:	f043 0304 	orr.w	r3, r3, #4
 8006cea:	6013      	str	r3, [r2, #0]
 8006cec:	e014      	b.n	8006d18 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	68ba      	ldr	r2, [r7, #8]
 8006cf8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006cfc:	f023 0304 	bic.w	r3, r3, #4
 8006d00:	6013      	str	r3, [r2, #0]
 8006d02:	e009      	b.n	8006d18 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	68ba      	ldr	r2, [r7, #8]
 8006d0e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006d12:	f023 0304 	bic.w	r3, r3, #4
 8006d16:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8006d18:	2110      	movs	r1, #16
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f7ff feb4 	bl	8006a88 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f7ff fed7 	bl	8006ad4 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006d26:	2300      	movs	r3, #0
 8006d28:	60fb      	str	r3, [r7, #12]
 8006d2a:	e015      	b.n	8006d58 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	015a      	lsls	r2, r3, #5
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	4413      	add	r3, r2
 8006d34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d38:	461a      	mov	r2, r3
 8006d3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d3e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	015a      	lsls	r2, r3, #5
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	4413      	add	r3, r2
 8006d48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	2300      	movs	r3, #0
 8006d50:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	3301      	adds	r3, #1
 8006d56:	60fb      	str	r3, [r7, #12]
 8006d58:	6a3b      	ldr	r3, [r7, #32]
 8006d5a:	68fa      	ldr	r2, [r7, #12]
 8006d5c:	429a      	cmp	r2, r3
 8006d5e:	d3e5      	bcc.n	8006d2c <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8006d60:	2101      	movs	r1, #1
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f000 f8ac 	bl	8006ec0 <USB_DriveVbus>

  HAL_Delay(200U);
 8006d68:	20c8      	movs	r0, #200	; 0xc8
 8006d6a:	f7fa fb8d 	bl	8001488 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2200      	movs	r2, #0
 8006d72:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d7a:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d00b      	beq.n	8006da0 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d8e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	4a14      	ldr	r2, [pc, #80]	; (8006de4 <USB_HostInit+0x164>)
 8006d94:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	4a13      	ldr	r2, [pc, #76]	; (8006de8 <USB_HostInit+0x168>)
 8006d9a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006d9e:	e009      	b.n	8006db4 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2280      	movs	r2, #128	; 0x80
 8006da4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	4a10      	ldr	r2, [pc, #64]	; (8006dec <USB_HostInit+0x16c>)
 8006daa:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	4a10      	ldr	r2, [pc, #64]	; (8006df0 <USB_HostInit+0x170>)
 8006db0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d105      	bne.n	8006dc6 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	699b      	ldr	r3, [r3, #24]
 8006dbe:	f043 0210 	orr.w	r2, r3, #16
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	699a      	ldr	r2, [r3, #24]
 8006dca:	4b0a      	ldr	r3, [pc, #40]	; (8006df4 <USB_HostInit+0x174>)
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	687a      	ldr	r2, [r7, #4]
 8006dd0:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8006dd2:	2300      	movs	r3, #0
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3710      	adds	r7, #16
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006dde:	b004      	add	sp, #16
 8006de0:	4770      	bx	lr
 8006de2:	bf00      	nop
 8006de4:	01000200 	.word	0x01000200
 8006de8:	00e00300 	.word	0x00e00300
 8006dec:	00600080 	.word	0x00600080
 8006df0:	004000e0 	.word	0x004000e0
 8006df4:	a3200008 	.word	0xa3200008

08006df8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b085      	sub	sp, #20
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	460b      	mov	r3, r1
 8006e02:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	68fa      	ldr	r2, [r7, #12]
 8006e12:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006e16:	f023 0303 	bic.w	r3, r3, #3
 8006e1a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e22:	681a      	ldr	r2, [r3, #0]
 8006e24:	78fb      	ldrb	r3, [r7, #3]
 8006e26:	f003 0303 	and.w	r3, r3, #3
 8006e2a:	68f9      	ldr	r1, [r7, #12]
 8006e2c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006e30:	4313      	orrs	r3, r2
 8006e32:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006e34:	78fb      	ldrb	r3, [r7, #3]
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	d107      	bne.n	8006e4a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e40:	461a      	mov	r2, r3
 8006e42:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006e46:	6053      	str	r3, [r2, #4]
 8006e48:	e009      	b.n	8006e5e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006e4a:	78fb      	ldrb	r3, [r7, #3]
 8006e4c:	2b02      	cmp	r3, #2
 8006e4e:	d106      	bne.n	8006e5e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e56:	461a      	mov	r2, r3
 8006e58:	f241 7370 	movw	r3, #6000	; 0x1770
 8006e5c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006e5e:	2300      	movs	r3, #0
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3714      	adds	r7, #20
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr

08006e6c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b084      	sub	sp, #16
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006e8c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	68fa      	ldr	r2, [r7, #12]
 8006e92:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006e96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e9a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006e9c:	2064      	movs	r0, #100	; 0x64
 8006e9e:	f7fa faf3 	bl	8001488 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	68fa      	ldr	r2, [r7, #12]
 8006ea6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006eaa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006eae:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006eb0:	200a      	movs	r0, #10
 8006eb2:	f7fa fae9 	bl	8001488 <HAL_Delay>

  return HAL_OK;
 8006eb6:	2300      	movs	r3, #0
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3710      	adds	r7, #16
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}

08006ec0 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b085      	sub	sp, #20
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	460b      	mov	r3, r1
 8006eca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006ee4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d109      	bne.n	8006f04 <USB_DriveVbus+0x44>
 8006ef0:	78fb      	ldrb	r3, [r7, #3]
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d106      	bne.n	8006f04 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	68fa      	ldr	r2, [r7, #12]
 8006efa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006efe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006f02:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006f0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f0e:	d109      	bne.n	8006f24 <USB_DriveVbus+0x64>
 8006f10:	78fb      	ldrb	r3, [r7, #3]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d106      	bne.n	8006f24 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	68fa      	ldr	r2, [r7, #12]
 8006f1a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006f1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f22:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006f24:	2300      	movs	r3, #0
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3714      	adds	r7, #20
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f30:	4770      	bx	lr

08006f32 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006f32:	b480      	push	{r7}
 8006f34:	b085      	sub	sp, #20
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	0c5b      	lsrs	r3, r3, #17
 8006f50:	f003 0303 	and.w	r3, r3, #3
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	3714      	adds	r7, #20
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5e:	4770      	bx	lr

08006f60 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b085      	sub	sp, #20
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f72:	689b      	ldr	r3, [r3, #8]
 8006f74:	b29b      	uxth	r3, r3
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3714      	adds	r7, #20
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f80:	4770      	bx	lr
	...

08006f84 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b087      	sub	sp, #28
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	4608      	mov	r0, r1
 8006f8e:	4611      	mov	r1, r2
 8006f90:	461a      	mov	r2, r3
 8006f92:	4603      	mov	r3, r0
 8006f94:	70fb      	strb	r3, [r7, #3]
 8006f96:	460b      	mov	r3, r1
 8006f98:	70bb      	strb	r3, [r7, #2]
 8006f9a:	4613      	mov	r3, r2
 8006f9c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006fa6:	78fb      	ldrb	r3, [r7, #3]
 8006fa8:	015a      	lsls	r2, r3, #5
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	4413      	add	r3, r2
 8006fae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006fb8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006fba:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006fbe:	2b03      	cmp	r3, #3
 8006fc0:	d87e      	bhi.n	80070c0 <USB_HC_Init+0x13c>
 8006fc2:	a201      	add	r2, pc, #4	; (adr r2, 8006fc8 <USB_HC_Init+0x44>)
 8006fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fc8:	08006fd9 	.word	0x08006fd9
 8006fcc:	08007083 	.word	0x08007083
 8006fd0:	08006fd9 	.word	0x08006fd9
 8006fd4:	08007045 	.word	0x08007045
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006fd8:	78fb      	ldrb	r3, [r7, #3]
 8006fda:	015a      	lsls	r2, r3, #5
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	4413      	add	r3, r2
 8006fe0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fe4:	461a      	mov	r2, r3
 8006fe6:	f240 439d 	movw	r3, #1181	; 0x49d
 8006fea:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006fec:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	da10      	bge.n	8007016 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006ff4:	78fb      	ldrb	r3, [r7, #3]
 8006ff6:	015a      	lsls	r2, r3, #5
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	4413      	add	r3, r2
 8006ffc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007000:	68db      	ldr	r3, [r3, #12]
 8007002:	78fa      	ldrb	r2, [r7, #3]
 8007004:	0151      	lsls	r1, r2, #5
 8007006:	68ba      	ldr	r2, [r7, #8]
 8007008:	440a      	add	r2, r1
 800700a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800700e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007012:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8007014:	e057      	b.n	80070c6 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800701a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800701e:	2b00      	cmp	r3, #0
 8007020:	d051      	beq.n	80070c6 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8007022:	78fb      	ldrb	r3, [r7, #3]
 8007024:	015a      	lsls	r2, r3, #5
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	4413      	add	r3, r2
 800702a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800702e:	68db      	ldr	r3, [r3, #12]
 8007030:	78fa      	ldrb	r2, [r7, #3]
 8007032:	0151      	lsls	r1, r2, #5
 8007034:	68ba      	ldr	r2, [r7, #8]
 8007036:	440a      	add	r2, r1
 8007038:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800703c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007040:	60d3      	str	r3, [r2, #12]
      break;
 8007042:	e040      	b.n	80070c6 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007044:	78fb      	ldrb	r3, [r7, #3]
 8007046:	015a      	lsls	r2, r3, #5
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	4413      	add	r3, r2
 800704c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007050:	461a      	mov	r2, r3
 8007052:	f240 639d 	movw	r3, #1693	; 0x69d
 8007056:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007058:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800705c:	2b00      	cmp	r3, #0
 800705e:	da34      	bge.n	80070ca <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007060:	78fb      	ldrb	r3, [r7, #3]
 8007062:	015a      	lsls	r2, r3, #5
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	4413      	add	r3, r2
 8007068:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800706c:	68db      	ldr	r3, [r3, #12]
 800706e:	78fa      	ldrb	r2, [r7, #3]
 8007070:	0151      	lsls	r1, r2, #5
 8007072:	68ba      	ldr	r2, [r7, #8]
 8007074:	440a      	add	r2, r1
 8007076:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800707a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800707e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007080:	e023      	b.n	80070ca <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007082:	78fb      	ldrb	r3, [r7, #3]
 8007084:	015a      	lsls	r2, r3, #5
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	4413      	add	r3, r2
 800708a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800708e:	461a      	mov	r2, r3
 8007090:	f240 2325 	movw	r3, #549	; 0x225
 8007094:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007096:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800709a:	2b00      	cmp	r3, #0
 800709c:	da17      	bge.n	80070ce <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800709e:	78fb      	ldrb	r3, [r7, #3]
 80070a0:	015a      	lsls	r2, r3, #5
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	4413      	add	r3, r2
 80070a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070aa:	68db      	ldr	r3, [r3, #12]
 80070ac:	78fa      	ldrb	r2, [r7, #3]
 80070ae:	0151      	lsls	r1, r2, #5
 80070b0:	68ba      	ldr	r2, [r7, #8]
 80070b2:	440a      	add	r2, r1
 80070b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80070b8:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80070bc:	60d3      	str	r3, [r2, #12]
      }
      break;
 80070be:	e006      	b.n	80070ce <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80070c0:	2301      	movs	r3, #1
 80070c2:	75fb      	strb	r3, [r7, #23]
      break;
 80070c4:	e004      	b.n	80070d0 <USB_HC_Init+0x14c>
      break;
 80070c6:	bf00      	nop
 80070c8:	e002      	b.n	80070d0 <USB_HC_Init+0x14c>
      break;
 80070ca:	bf00      	nop
 80070cc:	e000      	b.n	80070d0 <USB_HC_Init+0x14c>
      break;
 80070ce:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80070d6:	699a      	ldr	r2, [r3, #24]
 80070d8:	78fb      	ldrb	r3, [r7, #3]
 80070da:	f003 030f 	and.w	r3, r3, #15
 80070de:	2101      	movs	r1, #1
 80070e0:	fa01 f303 	lsl.w	r3, r1, r3
 80070e4:	68b9      	ldr	r1, [r7, #8]
 80070e6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80070ea:	4313      	orrs	r3, r2
 80070ec:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	699b      	ldr	r3, [r3, #24]
 80070f2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80070fa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	da03      	bge.n	800710a <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007102:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007106:	613b      	str	r3, [r7, #16]
 8007108:	e001      	b.n	800710e <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800710a:	2300      	movs	r3, #0
 800710c:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800710e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007112:	2b02      	cmp	r3, #2
 8007114:	d103      	bne.n	800711e <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007116:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800711a:	60fb      	str	r3, [r7, #12]
 800711c:	e001      	b.n	8007122 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800711e:	2300      	movs	r3, #0
 8007120:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007122:	787b      	ldrb	r3, [r7, #1]
 8007124:	059b      	lsls	r3, r3, #22
 8007126:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800712a:	78bb      	ldrb	r3, [r7, #2]
 800712c:	02db      	lsls	r3, r3, #11
 800712e:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007132:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007134:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007138:	049b      	lsls	r3, r3, #18
 800713a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800713e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007140:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007142:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007146:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800714c:	78fb      	ldrb	r3, [r7, #3]
 800714e:	0159      	lsls	r1, r3, #5
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	440b      	add	r3, r1
 8007154:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007158:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800715e:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8007160:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007164:	2b03      	cmp	r3, #3
 8007166:	d10f      	bne.n	8007188 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8007168:	78fb      	ldrb	r3, [r7, #3]
 800716a:	015a      	lsls	r2, r3, #5
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	4413      	add	r3, r2
 8007170:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	78fa      	ldrb	r2, [r7, #3]
 8007178:	0151      	lsls	r1, r2, #5
 800717a:	68ba      	ldr	r2, [r7, #8]
 800717c:	440a      	add	r2, r1
 800717e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007182:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007186:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007188:	7dfb      	ldrb	r3, [r7, #23]
}
 800718a:	4618      	mov	r0, r3
 800718c:	371c      	adds	r7, #28
 800718e:	46bd      	mov	sp, r7
 8007190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007194:	4770      	bx	lr
 8007196:	bf00      	nop

08007198 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b08c      	sub	sp, #48	; 0x30
 800719c:	af02      	add	r7, sp, #8
 800719e:	60f8      	str	r0, [r7, #12]
 80071a0:	60b9      	str	r1, [r7, #8]
 80071a2:	4613      	mov	r3, r2
 80071a4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	785b      	ldrb	r3, [r3, #1]
 80071ae:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80071b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80071b4:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d028      	beq.n	8007214 <USB_HC_StartXfer+0x7c>
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	791b      	ldrb	r3, [r3, #4]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d124      	bne.n	8007214 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 80071ca:	79fb      	ldrb	r3, [r7, #7]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d10b      	bne.n	80071e8 <USB_HC_StartXfer+0x50>
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	795b      	ldrb	r3, [r3, #5]
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	d107      	bne.n	80071e8 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	785b      	ldrb	r3, [r3, #1]
 80071dc:	4619      	mov	r1, r3
 80071de:	68f8      	ldr	r0, [r7, #12]
 80071e0:	f000 fa2e 	bl	8007640 <USB_DoPing>
      return HAL_OK;
 80071e4:	2300      	movs	r3, #0
 80071e6:	e112      	b.n	800740e <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 80071e8:	79fb      	ldrb	r3, [r7, #7]
 80071ea:	2b01      	cmp	r3, #1
 80071ec:	d112      	bne.n	8007214 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80071ee:	69fb      	ldr	r3, [r7, #28]
 80071f0:	015a      	lsls	r2, r3, #5
 80071f2:	6a3b      	ldr	r3, [r7, #32]
 80071f4:	4413      	add	r3, r2
 80071f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071fa:	68db      	ldr	r3, [r3, #12]
 80071fc:	69fa      	ldr	r2, [r7, #28]
 80071fe:	0151      	lsls	r1, r2, #5
 8007200:	6a3a      	ldr	r2, [r7, #32]
 8007202:	440a      	add	r2, r1
 8007204:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007208:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800720c:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	2200      	movs	r2, #0
 8007212:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	691b      	ldr	r3, [r3, #16]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d018      	beq.n	800724e <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	691b      	ldr	r3, [r3, #16]
 8007220:	68ba      	ldr	r2, [r7, #8]
 8007222:	8912      	ldrh	r2, [r2, #8]
 8007224:	4413      	add	r3, r2
 8007226:	3b01      	subs	r3, #1
 8007228:	68ba      	ldr	r2, [r7, #8]
 800722a:	8912      	ldrh	r2, [r2, #8]
 800722c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007230:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8007232:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007234:	8b7b      	ldrh	r3, [r7, #26]
 8007236:	429a      	cmp	r2, r3
 8007238:	d90b      	bls.n	8007252 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800723a:	8b7b      	ldrh	r3, [r7, #26]
 800723c:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800723e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007240:	68ba      	ldr	r2, [r7, #8]
 8007242:	8912      	ldrh	r2, [r2, #8]
 8007244:	fb02 f203 	mul.w	r2, r2, r3
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	611a      	str	r2, [r3, #16]
 800724c:	e001      	b.n	8007252 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800724e:	2301      	movs	r3, #1
 8007250:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	78db      	ldrb	r3, [r3, #3]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d006      	beq.n	8007268 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800725a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800725c:	68ba      	ldr	r2, [r7, #8]
 800725e:	8912      	ldrh	r2, [r2, #8]
 8007260:	fb02 f203 	mul.w	r2, r2, r3
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	691b      	ldr	r3, [r3, #16]
 800726c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007270:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007272:	04d9      	lsls	r1, r3, #19
 8007274:	4b68      	ldr	r3, [pc, #416]	; (8007418 <USB_HC_StartXfer+0x280>)
 8007276:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8007278:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	7a9b      	ldrb	r3, [r3, #10]
 800727e:	075b      	lsls	r3, r3, #29
 8007280:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8007284:	69f9      	ldr	r1, [r7, #28]
 8007286:	0148      	lsls	r0, r1, #5
 8007288:	6a39      	ldr	r1, [r7, #32]
 800728a:	4401      	add	r1, r0
 800728c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007290:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8007292:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007294:	79fb      	ldrb	r3, [r7, #7]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d009      	beq.n	80072ae <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	68d9      	ldr	r1, [r3, #12]
 800729e:	69fb      	ldr	r3, [r7, #28]
 80072a0:	015a      	lsls	r2, r3, #5
 80072a2:	6a3b      	ldr	r3, [r7, #32]
 80072a4:	4413      	add	r3, r2
 80072a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072aa:	460a      	mov	r2, r1
 80072ac:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80072ae:	6a3b      	ldr	r3, [r7, #32]
 80072b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80072b4:	689b      	ldr	r3, [r3, #8]
 80072b6:	f003 0301 	and.w	r3, r3, #1
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	bf0c      	ite	eq
 80072be:	2301      	moveq	r3, #1
 80072c0:	2300      	movne	r3, #0
 80072c2:	b2db      	uxtb	r3, r3
 80072c4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80072c6:	69fb      	ldr	r3, [r7, #28]
 80072c8:	015a      	lsls	r2, r3, #5
 80072ca:	6a3b      	ldr	r3, [r7, #32]
 80072cc:	4413      	add	r3, r2
 80072ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	69fa      	ldr	r2, [r7, #28]
 80072d6:	0151      	lsls	r1, r2, #5
 80072d8:	6a3a      	ldr	r2, [r7, #32]
 80072da:	440a      	add	r2, r1
 80072dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072e0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80072e4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80072e6:	69fb      	ldr	r3, [r7, #28]
 80072e8:	015a      	lsls	r2, r3, #5
 80072ea:	6a3b      	ldr	r3, [r7, #32]
 80072ec:	4413      	add	r3, r2
 80072ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072f2:	681a      	ldr	r2, [r3, #0]
 80072f4:	7e7b      	ldrb	r3, [r7, #25]
 80072f6:	075b      	lsls	r3, r3, #29
 80072f8:	69f9      	ldr	r1, [r7, #28]
 80072fa:	0148      	lsls	r0, r1, #5
 80072fc:	6a39      	ldr	r1, [r7, #32]
 80072fe:	4401      	add	r1, r0
 8007300:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007304:	4313      	orrs	r3, r2
 8007306:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007308:	69fb      	ldr	r3, [r7, #28]
 800730a:	015a      	lsls	r2, r3, #5
 800730c:	6a3b      	ldr	r3, [r7, #32]
 800730e:	4413      	add	r3, r2
 8007310:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a41      	ldr	r2, [pc, #260]	; (800741c <USB_HC_StartXfer+0x284>)
 8007318:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800731a:	4b40      	ldr	r3, [pc, #256]	; (800741c <USB_HC_StartXfer+0x284>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007322:	4a3e      	ldr	r2, [pc, #248]	; (800741c <USB_HC_StartXfer+0x284>)
 8007324:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	78db      	ldrb	r3, [r3, #3]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d006      	beq.n	800733c <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800732e:	4b3b      	ldr	r3, [pc, #236]	; (800741c <USB_HC_StartXfer+0x284>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007336:	4a39      	ldr	r2, [pc, #228]	; (800741c <USB_HC_StartXfer+0x284>)
 8007338:	6013      	str	r3, [r2, #0]
 800733a:	e005      	b.n	8007348 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800733c:	4b37      	ldr	r3, [pc, #220]	; (800741c <USB_HC_StartXfer+0x284>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007344:	4a35      	ldr	r2, [pc, #212]	; (800741c <USB_HC_StartXfer+0x284>)
 8007346:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007348:	4b34      	ldr	r3, [pc, #208]	; (800741c <USB_HC_StartXfer+0x284>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007350:	4a32      	ldr	r2, [pc, #200]	; (800741c <USB_HC_StartXfer+0x284>)
 8007352:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007354:	69fb      	ldr	r3, [r7, #28]
 8007356:	015a      	lsls	r2, r3, #5
 8007358:	6a3b      	ldr	r3, [r7, #32]
 800735a:	4413      	add	r3, r2
 800735c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007360:	461a      	mov	r2, r3
 8007362:	4b2e      	ldr	r3, [pc, #184]	; (800741c <USB_HC_StartXfer+0x284>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8007368:	79fb      	ldrb	r3, [r7, #7]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d14e      	bne.n	800740c <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	78db      	ldrb	r3, [r3, #3]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d14a      	bne.n	800740c <USB_HC_StartXfer+0x274>
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	691b      	ldr	r3, [r3, #16]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d046      	beq.n	800740c <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	79db      	ldrb	r3, [r3, #7]
 8007382:	2b03      	cmp	r3, #3
 8007384:	d830      	bhi.n	80073e8 <USB_HC_StartXfer+0x250>
 8007386:	a201      	add	r2, pc, #4	; (adr r2, 800738c <USB_HC_StartXfer+0x1f4>)
 8007388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800738c:	0800739d 	.word	0x0800739d
 8007390:	080073c1 	.word	0x080073c1
 8007394:	0800739d 	.word	0x0800739d
 8007398:	080073c1 	.word	0x080073c1
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	691b      	ldr	r3, [r3, #16]
 80073a0:	3303      	adds	r3, #3
 80073a2:	089b      	lsrs	r3, r3, #2
 80073a4:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80073a6:	8afa      	ldrh	r2, [r7, #22]
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ac:	b29b      	uxth	r3, r3
 80073ae:	429a      	cmp	r2, r3
 80073b0:	d91c      	bls.n	80073ec <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	699b      	ldr	r3, [r3, #24]
 80073b6:	f043 0220 	orr.w	r2, r3, #32
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	619a      	str	r2, [r3, #24]
          }
          break;
 80073be:	e015      	b.n	80073ec <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	691b      	ldr	r3, [r3, #16]
 80073c4:	3303      	adds	r3, #3
 80073c6:	089b      	lsrs	r3, r3, #2
 80073c8:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80073ca:	8afa      	ldrh	r2, [r7, #22]
 80073cc:	6a3b      	ldr	r3, [r7, #32]
 80073ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80073d2:	691b      	ldr	r3, [r3, #16]
 80073d4:	b29b      	uxth	r3, r3
 80073d6:	429a      	cmp	r2, r3
 80073d8:	d90a      	bls.n	80073f0 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	699b      	ldr	r3, [r3, #24]
 80073de:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	619a      	str	r2, [r3, #24]
          }
          break;
 80073e6:	e003      	b.n	80073f0 <USB_HC_StartXfer+0x258>

        default:
          break;
 80073e8:	bf00      	nop
 80073ea:	e002      	b.n	80073f2 <USB_HC_StartXfer+0x25a>
          break;
 80073ec:	bf00      	nop
 80073ee:	e000      	b.n	80073f2 <USB_HC_StartXfer+0x25a>
          break;
 80073f0:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	68d9      	ldr	r1, [r3, #12]
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	785a      	ldrb	r2, [r3, #1]
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	691b      	ldr	r3, [r3, #16]
 80073fe:	b298      	uxth	r0, r3
 8007400:	2300      	movs	r3, #0
 8007402:	9300      	str	r3, [sp, #0]
 8007404:	4603      	mov	r3, r0
 8007406:	68f8      	ldr	r0, [r7, #12]
 8007408:	f7ff fb86 	bl	8006b18 <USB_WritePacket>
    }
  }

  return HAL_OK;
 800740c:	2300      	movs	r3, #0
}
 800740e:	4618      	mov	r0, r3
 8007410:	3728      	adds	r7, #40	; 0x28
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}
 8007416:	bf00      	nop
 8007418:	1ff80000 	.word	0x1ff80000
 800741c:	200000b0 	.word	0x200000b0

08007420 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007420:	b480      	push	{r7}
 8007422:	b085      	sub	sp, #20
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007432:	695b      	ldr	r3, [r3, #20]
 8007434:	b29b      	uxth	r3, r3
}
 8007436:	4618      	mov	r0, r3
 8007438:	3714      	adds	r7, #20
 800743a:	46bd      	mov	sp, r7
 800743c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007440:	4770      	bx	lr

08007442 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007442:	b480      	push	{r7}
 8007444:	b087      	sub	sp, #28
 8007446:	af00      	add	r7, sp, #0
 8007448:	6078      	str	r0, [r7, #4]
 800744a:	460b      	mov	r3, r1
 800744c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8007452:	78fb      	ldrb	r3, [r7, #3]
 8007454:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8007456:	2300      	movs	r3, #0
 8007458:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	015a      	lsls	r2, r3, #5
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	4413      	add	r3, r2
 8007462:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	0c9b      	lsrs	r3, r3, #18
 800746a:	f003 0303 	and.w	r3, r3, #3
 800746e:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d002      	beq.n	800747c <USB_HC_Halt+0x3a>
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	2b02      	cmp	r3, #2
 800747a:	d16c      	bne.n	8007556 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	015a      	lsls	r2, r3, #5
 8007480:	693b      	ldr	r3, [r7, #16]
 8007482:	4413      	add	r3, r2
 8007484:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	68fa      	ldr	r2, [r7, #12]
 800748c:	0151      	lsls	r1, r2, #5
 800748e:	693a      	ldr	r2, [r7, #16]
 8007490:	440a      	add	r2, r1
 8007492:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007496:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800749a:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074a0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d143      	bne.n	8007530 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	015a      	lsls	r2, r3, #5
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	4413      	add	r3, r2
 80074b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	68fa      	ldr	r2, [r7, #12]
 80074b8:	0151      	lsls	r1, r2, #5
 80074ba:	693a      	ldr	r2, [r7, #16]
 80074bc:	440a      	add	r2, r1
 80074be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80074c2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80074c6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	015a      	lsls	r2, r3, #5
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	4413      	add	r3, r2
 80074d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	68fa      	ldr	r2, [r7, #12]
 80074d8:	0151      	lsls	r1, r2, #5
 80074da:	693a      	ldr	r2, [r7, #16]
 80074dc:	440a      	add	r2, r1
 80074de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80074e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80074e6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	015a      	lsls	r2, r3, #5
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	4413      	add	r3, r2
 80074f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	68fa      	ldr	r2, [r7, #12]
 80074f8:	0151      	lsls	r1, r2, #5
 80074fa:	693a      	ldr	r2, [r7, #16]
 80074fc:	440a      	add	r2, r1
 80074fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007502:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007506:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	3301      	adds	r3, #1
 800750c:	617b      	str	r3, [r7, #20]
 800750e:	697b      	ldr	r3, [r7, #20]
 8007510:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007514:	d81d      	bhi.n	8007552 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	015a      	lsls	r2, r3, #5
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	4413      	add	r3, r2
 800751e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007528:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800752c:	d0ec      	beq.n	8007508 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800752e:	e080      	b.n	8007632 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	015a      	lsls	r2, r3, #5
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	4413      	add	r3, r2
 8007538:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	68fa      	ldr	r2, [r7, #12]
 8007540:	0151      	lsls	r1, r2, #5
 8007542:	693a      	ldr	r2, [r7, #16]
 8007544:	440a      	add	r2, r1
 8007546:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800754a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800754e:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007550:	e06f      	b.n	8007632 <USB_HC_Halt+0x1f0>
          break;
 8007552:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007554:	e06d      	b.n	8007632 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	015a      	lsls	r2, r3, #5
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	4413      	add	r3, r2
 800755e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	68fa      	ldr	r2, [r7, #12]
 8007566:	0151      	lsls	r1, r2, #5
 8007568:	693a      	ldr	r2, [r7, #16]
 800756a:	440a      	add	r2, r1
 800756c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007570:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007574:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800757c:	691b      	ldr	r3, [r3, #16]
 800757e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007582:	2b00      	cmp	r3, #0
 8007584:	d143      	bne.n	800760e <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	015a      	lsls	r2, r3, #5
 800758a:	693b      	ldr	r3, [r7, #16]
 800758c:	4413      	add	r3, r2
 800758e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	68fa      	ldr	r2, [r7, #12]
 8007596:	0151      	lsls	r1, r2, #5
 8007598:	693a      	ldr	r2, [r7, #16]
 800759a:	440a      	add	r2, r1
 800759c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80075a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80075a4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	015a      	lsls	r2, r3, #5
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	4413      	add	r3, r2
 80075ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	68fa      	ldr	r2, [r7, #12]
 80075b6:	0151      	lsls	r1, r2, #5
 80075b8:	693a      	ldr	r2, [r7, #16]
 80075ba:	440a      	add	r2, r1
 80075bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80075c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80075c4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	015a      	lsls	r2, r3, #5
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	4413      	add	r3, r2
 80075ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	68fa      	ldr	r2, [r7, #12]
 80075d6:	0151      	lsls	r1, r2, #5
 80075d8:	693a      	ldr	r2, [r7, #16]
 80075da:	440a      	add	r2, r1
 80075dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80075e0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80075e4:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	3301      	adds	r3, #1
 80075ea:	617b      	str	r3, [r7, #20]
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80075f2:	d81d      	bhi.n	8007630 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	015a      	lsls	r2, r3, #5
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	4413      	add	r3, r2
 80075fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007606:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800760a:	d0ec      	beq.n	80075e6 <USB_HC_Halt+0x1a4>
 800760c:	e011      	b.n	8007632 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	015a      	lsls	r2, r3, #5
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	4413      	add	r3, r2
 8007616:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	68fa      	ldr	r2, [r7, #12]
 800761e:	0151      	lsls	r1, r2, #5
 8007620:	693a      	ldr	r2, [r7, #16]
 8007622:	440a      	add	r2, r1
 8007624:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007628:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800762c:	6013      	str	r3, [r2, #0]
 800762e:	e000      	b.n	8007632 <USB_HC_Halt+0x1f0>
          break;
 8007630:	bf00      	nop
    }
  }

  return HAL_OK;
 8007632:	2300      	movs	r3, #0
}
 8007634:	4618      	mov	r0, r3
 8007636:	371c      	adds	r7, #28
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr

08007640 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007640:	b480      	push	{r7}
 8007642:	b087      	sub	sp, #28
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
 8007648:	460b      	mov	r3, r1
 800764a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007650:	78fb      	ldrb	r3, [r7, #3]
 8007652:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007654:	2301      	movs	r3, #1
 8007656:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	04da      	lsls	r2, r3, #19
 800765c:	4b15      	ldr	r3, [pc, #84]	; (80076b4 <USB_DoPing+0x74>)
 800765e:	4013      	ands	r3, r2
 8007660:	693a      	ldr	r2, [r7, #16]
 8007662:	0151      	lsls	r1, r2, #5
 8007664:	697a      	ldr	r2, [r7, #20]
 8007666:	440a      	add	r2, r1
 8007668:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800766c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007670:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	015a      	lsls	r2, r3, #5
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	4413      	add	r3, r2
 800767a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007688:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007690:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	015a      	lsls	r2, r3, #5
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	4413      	add	r3, r2
 800769a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800769e:	461a      	mov	r2, r3
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80076a4:	2300      	movs	r3, #0
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	371c      	adds	r7, #28
 80076aa:	46bd      	mov	sp, r7
 80076ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b0:	4770      	bx	lr
 80076b2:	bf00      	nop
 80076b4:	1ff80000 	.word	0x1ff80000

080076b8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b086      	sub	sp, #24
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80076c4:	2300      	movs	r3, #0
 80076c6:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f7ff f9a1 	bl	8006a10 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80076ce:	2110      	movs	r1, #16
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f7ff f9d9 	bl	8006a88 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f7ff f9fc 	bl	8006ad4 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80076dc:	2300      	movs	r3, #0
 80076de:	613b      	str	r3, [r7, #16]
 80076e0:	e01f      	b.n	8007722 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	015a      	lsls	r2, r3, #5
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	4413      	add	r3, r2
 80076ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80076f8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007700:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007708:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	015a      	lsls	r2, r3, #5
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	4413      	add	r3, r2
 8007712:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007716:	461a      	mov	r2, r3
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	3301      	adds	r3, #1
 8007720:	613b      	str	r3, [r7, #16]
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	2b0f      	cmp	r3, #15
 8007726:	d9dc      	bls.n	80076e2 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007728:	2300      	movs	r3, #0
 800772a:	613b      	str	r3, [r7, #16]
 800772c:	e034      	b.n	8007798 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	015a      	lsls	r2, r3, #5
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	4413      	add	r3, r2
 8007736:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007744:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800774c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007754:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	015a      	lsls	r2, r3, #5
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	4413      	add	r3, r2
 800775e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007762:	461a      	mov	r2, r3
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	3301      	adds	r3, #1
 800776c:	617b      	str	r3, [r7, #20]
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007774:	d80c      	bhi.n	8007790 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007776:	693b      	ldr	r3, [r7, #16]
 8007778:	015a      	lsls	r2, r3, #5
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	4413      	add	r3, r2
 800777e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007788:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800778c:	d0ec      	beq.n	8007768 <USB_StopHost+0xb0>
 800778e:	e000      	b.n	8007792 <USB_StopHost+0xda>
        break;
 8007790:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007792:	693b      	ldr	r3, [r7, #16]
 8007794:	3301      	adds	r3, #1
 8007796:	613b      	str	r3, [r7, #16]
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	2b0f      	cmp	r3, #15
 800779c:	d9c7      	bls.n	800772e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80077a4:	461a      	mov	r2, r3
 80077a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80077aa:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80077b2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f7ff f91a 	bl	80069ee <USB_EnableGlobalInt>

  return HAL_OK;
 80077ba:	2300      	movs	r3, #0
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3718      	adds	r7, #24
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}

080077c4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80077c4:	b590      	push	{r4, r7, lr}
 80077c6:	b089      	sub	sp, #36	; 0x24
 80077c8:	af04      	add	r7, sp, #16
 80077ca:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80077cc:	2301      	movs	r3, #1
 80077ce:	2202      	movs	r2, #2
 80077d0:	2102      	movs	r1, #2
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f000 fc68 	bl	80080a8 <USBH_FindInterface>
 80077d8:	4603      	mov	r3, r0
 80077da:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80077dc:	7bfb      	ldrb	r3, [r7, #15]
 80077de:	2bff      	cmp	r3, #255	; 0xff
 80077e0:	d002      	beq.n	80077e8 <USBH_CDC_InterfaceInit+0x24>
 80077e2:	7bfb      	ldrb	r3, [r7, #15]
 80077e4:	2b01      	cmp	r3, #1
 80077e6:	d901      	bls.n	80077ec <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80077e8:	2302      	movs	r3, #2
 80077ea:	e13d      	b.n	8007a68 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80077ec:	7bfb      	ldrb	r3, [r7, #15]
 80077ee:	4619      	mov	r1, r3
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f000 fc3d 	bl	8008070 <USBH_SelectInterface>
 80077f6:	4603      	mov	r3, r0
 80077f8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80077fa:	7bbb      	ldrb	r3, [r7, #14]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d001      	beq.n	8007804 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007800:	2302      	movs	r3, #2
 8007802:	e131      	b.n	8007a68 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800780a:	2050      	movs	r0, #80	; 0x50
 800780c:	f002 f9fc 	bl	8009c08 <malloc>
 8007810:	4603      	mov	r3, r0
 8007812:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800781a:	69db      	ldr	r3, [r3, #28]
 800781c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d101      	bne.n	8007828 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007824:	2302      	movs	r3, #2
 8007826:	e11f      	b.n	8007a68 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007828:	2250      	movs	r2, #80	; 0x50
 800782a:	2100      	movs	r1, #0
 800782c:	68b8      	ldr	r0, [r7, #8]
 800782e:	f002 f9fb 	bl	8009c28 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8007832:	7bfb      	ldrb	r3, [r7, #15]
 8007834:	687a      	ldr	r2, [r7, #4]
 8007836:	211a      	movs	r1, #26
 8007838:	fb01 f303 	mul.w	r3, r1, r3
 800783c:	4413      	add	r3, r2
 800783e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007842:	781b      	ldrb	r3, [r3, #0]
 8007844:	b25b      	sxtb	r3, r3
 8007846:	2b00      	cmp	r3, #0
 8007848:	da15      	bge.n	8007876 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800784a:	7bfb      	ldrb	r3, [r7, #15]
 800784c:	687a      	ldr	r2, [r7, #4]
 800784e:	211a      	movs	r1, #26
 8007850:	fb01 f303 	mul.w	r3, r1, r3
 8007854:	4413      	add	r3, r2
 8007856:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800785a:	781a      	ldrb	r2, [r3, #0]
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007860:	7bfb      	ldrb	r3, [r7, #15]
 8007862:	687a      	ldr	r2, [r7, #4]
 8007864:	211a      	movs	r1, #26
 8007866:	fb01 f303 	mul.w	r3, r1, r3
 800786a:	4413      	add	r3, r2
 800786c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007870:	881a      	ldrh	r2, [r3, #0]
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	785b      	ldrb	r3, [r3, #1]
 800787a:	4619      	mov	r1, r3
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f001 fe36 	bl	80094ee <USBH_AllocPipe>
 8007882:	4603      	mov	r3, r0
 8007884:	461a      	mov	r2, r3
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	7819      	ldrb	r1, [r3, #0]
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	7858      	ldrb	r0, [r3, #1]
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800789e:	68ba      	ldr	r2, [r7, #8]
 80078a0:	8952      	ldrh	r2, [r2, #10]
 80078a2:	9202      	str	r2, [sp, #8]
 80078a4:	2203      	movs	r2, #3
 80078a6:	9201      	str	r2, [sp, #4]
 80078a8:	9300      	str	r3, [sp, #0]
 80078aa:	4623      	mov	r3, r4
 80078ac:	4602      	mov	r2, r0
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f001 fdee 	bl	8009490 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	781b      	ldrb	r3, [r3, #0]
 80078b8:	2200      	movs	r2, #0
 80078ba:	4619      	mov	r1, r3
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f002 f8f3 	bl	8009aa8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80078c2:	2300      	movs	r3, #0
 80078c4:	2200      	movs	r2, #0
 80078c6:	210a      	movs	r1, #10
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f000 fbed 	bl	80080a8 <USBH_FindInterface>
 80078ce:	4603      	mov	r3, r0
 80078d0:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80078d2:	7bfb      	ldrb	r3, [r7, #15]
 80078d4:	2bff      	cmp	r3, #255	; 0xff
 80078d6:	d002      	beq.n	80078de <USBH_CDC_InterfaceInit+0x11a>
 80078d8:	7bfb      	ldrb	r3, [r7, #15]
 80078da:	2b01      	cmp	r3, #1
 80078dc:	d901      	bls.n	80078e2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80078de:	2302      	movs	r3, #2
 80078e0:	e0c2      	b.n	8007a68 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80078e2:	7bfb      	ldrb	r3, [r7, #15]
 80078e4:	687a      	ldr	r2, [r7, #4]
 80078e6:	211a      	movs	r1, #26
 80078e8:	fb01 f303 	mul.w	r3, r1, r3
 80078ec:	4413      	add	r3, r2
 80078ee:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80078f2:	781b      	ldrb	r3, [r3, #0]
 80078f4:	b25b      	sxtb	r3, r3
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	da16      	bge.n	8007928 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80078fa:	7bfb      	ldrb	r3, [r7, #15]
 80078fc:	687a      	ldr	r2, [r7, #4]
 80078fe:	211a      	movs	r1, #26
 8007900:	fb01 f303 	mul.w	r3, r1, r3
 8007904:	4413      	add	r3, r2
 8007906:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800790a:	781a      	ldrb	r2, [r3, #0]
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007910:	7bfb      	ldrb	r3, [r7, #15]
 8007912:	687a      	ldr	r2, [r7, #4]
 8007914:	211a      	movs	r1, #26
 8007916:	fb01 f303 	mul.w	r3, r1, r3
 800791a:	4413      	add	r3, r2
 800791c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007920:	881a      	ldrh	r2, [r3, #0]
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	835a      	strh	r2, [r3, #26]
 8007926:	e015      	b.n	8007954 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007928:	7bfb      	ldrb	r3, [r7, #15]
 800792a:	687a      	ldr	r2, [r7, #4]
 800792c:	211a      	movs	r1, #26
 800792e:	fb01 f303 	mul.w	r3, r1, r3
 8007932:	4413      	add	r3, r2
 8007934:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007938:	781a      	ldrb	r2, [r3, #0]
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800793e:	7bfb      	ldrb	r3, [r7, #15]
 8007940:	687a      	ldr	r2, [r7, #4]
 8007942:	211a      	movs	r1, #26
 8007944:	fb01 f303 	mul.w	r3, r1, r3
 8007948:	4413      	add	r3, r2
 800794a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800794e:	881a      	ldrh	r2, [r3, #0]
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8007954:	7bfb      	ldrb	r3, [r7, #15]
 8007956:	687a      	ldr	r2, [r7, #4]
 8007958:	211a      	movs	r1, #26
 800795a:	fb01 f303 	mul.w	r3, r1, r3
 800795e:	4413      	add	r3, r2
 8007960:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007964:	781b      	ldrb	r3, [r3, #0]
 8007966:	b25b      	sxtb	r3, r3
 8007968:	2b00      	cmp	r3, #0
 800796a:	da16      	bge.n	800799a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800796c:	7bfb      	ldrb	r3, [r7, #15]
 800796e:	687a      	ldr	r2, [r7, #4]
 8007970:	211a      	movs	r1, #26
 8007972:	fb01 f303 	mul.w	r3, r1, r3
 8007976:	4413      	add	r3, r2
 8007978:	f203 3356 	addw	r3, r3, #854	; 0x356
 800797c:	781a      	ldrb	r2, [r3, #0]
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007982:	7bfb      	ldrb	r3, [r7, #15]
 8007984:	687a      	ldr	r2, [r7, #4]
 8007986:	211a      	movs	r1, #26
 8007988:	fb01 f303 	mul.w	r3, r1, r3
 800798c:	4413      	add	r3, r2
 800798e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007992:	881a      	ldrh	r2, [r3, #0]
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	835a      	strh	r2, [r3, #26]
 8007998:	e015      	b.n	80079c6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800799a:	7bfb      	ldrb	r3, [r7, #15]
 800799c:	687a      	ldr	r2, [r7, #4]
 800799e:	211a      	movs	r1, #26
 80079a0:	fb01 f303 	mul.w	r3, r1, r3
 80079a4:	4413      	add	r3, r2
 80079a6:	f203 3356 	addw	r3, r3, #854	; 0x356
 80079aa:	781a      	ldrb	r2, [r3, #0]
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80079b0:	7bfb      	ldrb	r3, [r7, #15]
 80079b2:	687a      	ldr	r2, [r7, #4]
 80079b4:	211a      	movs	r1, #26
 80079b6:	fb01 f303 	mul.w	r3, r1, r3
 80079ba:	4413      	add	r3, r2
 80079bc:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80079c0:	881a      	ldrh	r2, [r3, #0]
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	7b9b      	ldrb	r3, [r3, #14]
 80079ca:	4619      	mov	r1, r3
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f001 fd8e 	bl	80094ee <USBH_AllocPipe>
 80079d2:	4603      	mov	r3, r0
 80079d4:	461a      	mov	r2, r3
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	7bdb      	ldrb	r3, [r3, #15]
 80079de:	4619      	mov	r1, r3
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f001 fd84 	bl	80094ee <USBH_AllocPipe>
 80079e6:	4603      	mov	r3, r0
 80079e8:	461a      	mov	r2, r3
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	7b59      	ldrb	r1, [r3, #13]
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	7b98      	ldrb	r0, [r3, #14]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007a02:	68ba      	ldr	r2, [r7, #8]
 8007a04:	8b12      	ldrh	r2, [r2, #24]
 8007a06:	9202      	str	r2, [sp, #8]
 8007a08:	2202      	movs	r2, #2
 8007a0a:	9201      	str	r2, [sp, #4]
 8007a0c:	9300      	str	r3, [sp, #0]
 8007a0e:	4623      	mov	r3, r4
 8007a10:	4602      	mov	r2, r0
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f001 fd3c 	bl	8009490 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	7b19      	ldrb	r1, [r3, #12]
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	7bd8      	ldrb	r0, [r3, #15]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007a2c:	68ba      	ldr	r2, [r7, #8]
 8007a2e:	8b52      	ldrh	r2, [r2, #26]
 8007a30:	9202      	str	r2, [sp, #8]
 8007a32:	2202      	movs	r2, #2
 8007a34:	9201      	str	r2, [sp, #4]
 8007a36:	9300      	str	r3, [sp, #0]
 8007a38:	4623      	mov	r3, r4
 8007a3a:	4602      	mov	r2, r0
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f001 fd27 	bl	8009490 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	2200      	movs	r2, #0
 8007a46:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007a4a:	68bb      	ldr	r3, [r7, #8]
 8007a4c:	7b5b      	ldrb	r3, [r3, #13]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	4619      	mov	r1, r3
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f002 f828 	bl	8009aa8 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	7b1b      	ldrb	r3, [r3, #12]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	4619      	mov	r1, r3
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f002 f821 	bl	8009aa8 <USBH_LL_SetToggle>

  return USBH_OK;
 8007a66:	2300      	movs	r3, #0
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3714      	adds	r7, #20
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd90      	pop	{r4, r7, pc}

08007a70 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b084      	sub	sp, #16
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a7e:	69db      	ldr	r3, [r3, #28]
 8007a80:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	781b      	ldrb	r3, [r3, #0]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d00e      	beq.n	8007aa8 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	781b      	ldrb	r3, [r3, #0]
 8007a8e:	4619      	mov	r1, r3
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f001 fd1c 	bl	80094ce <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	781b      	ldrb	r3, [r3, #0]
 8007a9a:	4619      	mov	r1, r3
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f001 fd47 	bl	8009530 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	7b1b      	ldrb	r3, [r3, #12]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d00e      	beq.n	8007ace <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	7b1b      	ldrb	r3, [r3, #12]
 8007ab4:	4619      	mov	r1, r3
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f001 fd09 	bl	80094ce <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	7b1b      	ldrb	r3, [r3, #12]
 8007ac0:	4619      	mov	r1, r3
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f001 fd34 	bl	8009530 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	2200      	movs	r2, #0
 8007acc:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	7b5b      	ldrb	r3, [r3, #13]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d00e      	beq.n	8007af4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	7b5b      	ldrb	r3, [r3, #13]
 8007ada:	4619      	mov	r1, r3
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f001 fcf6 	bl	80094ce <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	7b5b      	ldrb	r3, [r3, #13]
 8007ae6:	4619      	mov	r1, r3
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f001 fd21 	bl	8009530 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2200      	movs	r2, #0
 8007af2:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007afa:	69db      	ldr	r3, [r3, #28]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d00b      	beq.n	8007b18 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b06:	69db      	ldr	r3, [r3, #28]
 8007b08:	4618      	mov	r0, r3
 8007b0a:	f002 f885 	bl	8009c18 <free>
    phost->pActiveClass->pData = 0U;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b14:	2200      	movs	r2, #0
 8007b16:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007b18:	2300      	movs	r3, #0
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3710      	adds	r7, #16
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}

08007b22 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007b22:	b580      	push	{r7, lr}
 8007b24:	b084      	sub	sp, #16
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b30:	69db      	ldr	r3, [r3, #28]
 8007b32:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	3340      	adds	r3, #64	; 0x40
 8007b38:	4619      	mov	r1, r3
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f000 f8b1 	bl	8007ca2 <GetLineCoding>
 8007b40:	4603      	mov	r3, r0
 8007b42:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007b44:	7afb      	ldrb	r3, [r7, #11]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d105      	bne.n	8007b56 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007b50:	2102      	movs	r1, #2
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8007b56:	7afb      	ldrb	r3, [r7, #11]
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	3710      	adds	r7, #16
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}

08007b60 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b084      	sub	sp, #16
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007b68:	2301      	movs	r3, #1
 8007b6a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b76:	69db      	ldr	r3, [r3, #28]
 8007b78:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007b80:	2b04      	cmp	r3, #4
 8007b82:	d877      	bhi.n	8007c74 <USBH_CDC_Process+0x114>
 8007b84:	a201      	add	r2, pc, #4	; (adr r2, 8007b8c <USBH_CDC_Process+0x2c>)
 8007b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b8a:	bf00      	nop
 8007b8c:	08007ba1 	.word	0x08007ba1
 8007b90:	08007ba7 	.word	0x08007ba7
 8007b94:	08007bd7 	.word	0x08007bd7
 8007b98:	08007c4b 	.word	0x08007c4b
 8007b9c:	08007c59 	.word	0x08007c59
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	73fb      	strb	r3, [r7, #15]
      break;
 8007ba4:	e06d      	b.n	8007c82 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007baa:	4619      	mov	r1, r3
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f000 f897 	bl	8007ce0 <SetLineCoding>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007bb6:	7bbb      	ldrb	r3, [r7, #14]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d104      	bne.n	8007bc6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	2202      	movs	r2, #2
 8007bc0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007bc4:	e058      	b.n	8007c78 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8007bc6:	7bbb      	ldrb	r3, [r7, #14]
 8007bc8:	2b01      	cmp	r3, #1
 8007bca:	d055      	beq.n	8007c78 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	2204      	movs	r2, #4
 8007bd0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007bd4:	e050      	b.n	8007c78 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	3340      	adds	r3, #64	; 0x40
 8007bda:	4619      	mov	r1, r3
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f000 f860 	bl	8007ca2 <GetLineCoding>
 8007be2:	4603      	mov	r3, r0
 8007be4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007be6:	7bbb      	ldrb	r3, [r7, #14]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d126      	bne.n	8007c3a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bfe:	791b      	ldrb	r3, [r3, #4]
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d13b      	bne.n	8007c7c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c0e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007c10:	429a      	cmp	r2, r3
 8007c12:	d133      	bne.n	8007c7c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c1e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007c20:	429a      	cmp	r2, r3
 8007c22:	d12b      	bne.n	8007c7c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c2c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007c2e:	429a      	cmp	r2, r3
 8007c30:	d124      	bne.n	8007c7c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f000 f95a 	bl	8007eec <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007c38:	e020      	b.n	8007c7c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007c3a:	7bbb      	ldrb	r3, [r7, #14]
 8007c3c:	2b01      	cmp	r3, #1
 8007c3e:	d01d      	beq.n	8007c7c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	2204      	movs	r2, #4
 8007c44:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007c48:	e018      	b.n	8007c7c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f000 f867 	bl	8007d1e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f000 f8dc 	bl	8007e0e <CDC_ProcessReception>
      break;
 8007c56:	e014      	b.n	8007c82 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007c58:	2100      	movs	r1, #0
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f000 ffe5 	bl	8008c2a <USBH_ClrFeature>
 8007c60:	4603      	mov	r3, r0
 8007c62:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007c64:	7bbb      	ldrb	r3, [r7, #14]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d10a      	bne.n	8007c80 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8007c72:	e005      	b.n	8007c80 <USBH_CDC_Process+0x120>

    default:
      break;
 8007c74:	bf00      	nop
 8007c76:	e004      	b.n	8007c82 <USBH_CDC_Process+0x122>
      break;
 8007c78:	bf00      	nop
 8007c7a:	e002      	b.n	8007c82 <USBH_CDC_Process+0x122>
      break;
 8007c7c:	bf00      	nop
 8007c7e:	e000      	b.n	8007c82 <USBH_CDC_Process+0x122>
      break;
 8007c80:	bf00      	nop

  }

  return status;
 8007c82:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	3710      	adds	r7, #16
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}

08007c8c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b083      	sub	sp, #12
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007c94:	2300      	movs	r3, #0
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	370c      	adds	r7, #12
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca0:	4770      	bx	lr

08007ca2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007ca2:	b580      	push	{r7, lr}
 8007ca4:	b082      	sub	sp, #8
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	6078      	str	r0, [r7, #4]
 8007caa:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	22a1      	movs	r2, #161	; 0xa1
 8007cb0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2221      	movs	r2, #33	; 0x21
 8007cb6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2207      	movs	r2, #7
 8007cc8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	2207      	movs	r2, #7
 8007cce:	4619      	mov	r1, r3
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f001 f98a 	bl	8008fea <USBH_CtlReq>
 8007cd6:	4603      	mov	r3, r0
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	3708      	adds	r7, #8
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}

08007ce0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b082      	sub	sp, #8
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2221      	movs	r2, #33	; 0x21
 8007cee:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2220      	movs	r2, #32
 8007cf4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2207      	movs	r2, #7
 8007d06:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	2207      	movs	r2, #7
 8007d0c:	4619      	mov	r1, r3
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f001 f96b 	bl	8008fea <USBH_CtlReq>
 8007d14:	4603      	mov	r3, r0
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3708      	adds	r7, #8
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}

08007d1e <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007d1e:	b580      	push	{r7, lr}
 8007d20:	b086      	sub	sp, #24
 8007d22:	af02      	add	r7, sp, #8
 8007d24:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d2c:	69db      	ldr	r3, [r3, #28]
 8007d2e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007d30:	2300      	movs	r3, #0
 8007d32:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8007d3a:	2b01      	cmp	r3, #1
 8007d3c:	d002      	beq.n	8007d44 <CDC_ProcessTransmission+0x26>
 8007d3e:	2b02      	cmp	r3, #2
 8007d40:	d025      	beq.n	8007d8e <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 8007d42:	e060      	b.n	8007e06 <CDC_ProcessTransmission+0xe8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d48:	68fa      	ldr	r2, [r7, #12]
 8007d4a:	8b12      	ldrh	r2, [r2, #24]
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d90c      	bls.n	8007d6a <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	69d9      	ldr	r1, [r3, #28]
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	8b1a      	ldrh	r2, [r3, #24]
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	7b58      	ldrb	r0, [r3, #13]
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	9300      	str	r3, [sp, #0]
 8007d60:	4603      	mov	r3, r0
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f001 fb51 	bl	800940a <USBH_BulkSendData>
 8007d68:	e00c      	b.n	8007d84 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8007d72:	b29a      	uxth	r2, r3
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	7b58      	ldrb	r0, [r3, #13]
 8007d78:	2301      	movs	r3, #1
 8007d7a:	9300      	str	r3, [sp, #0]
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f001 fb43 	bl	800940a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	2202      	movs	r2, #2
 8007d88:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007d8c:	e03b      	b.n	8007e06 <CDC_ProcessTransmission+0xe8>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	7b5b      	ldrb	r3, [r3, #13]
 8007d92:	4619      	mov	r1, r3
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f001 fe5d 	bl	8009a54 <USBH_LL_GetURBState>
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007d9e:	7afb      	ldrb	r3, [r7, #11]
 8007da0:	2b01      	cmp	r3, #1
 8007da2:	d128      	bne.n	8007df6 <CDC_ProcessTransmission+0xd8>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da8:	68fa      	ldr	r2, [r7, #12]
 8007daa:	8b12      	ldrh	r2, [r2, #24]
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d90e      	bls.n	8007dce <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db4:	68fa      	ldr	r2, [r7, #12]
 8007db6:	8b12      	ldrh	r2, [r2, #24]
 8007db8:	1a9a      	subs	r2, r3, r2
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	69db      	ldr	r3, [r3, #28]
 8007dc2:	68fa      	ldr	r2, [r7, #12]
 8007dc4:	8b12      	ldrh	r2, [r2, #24]
 8007dc6:	441a      	add	r2, r3
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	61da      	str	r2, [r3, #28]
 8007dcc:	e002      	b.n	8007dd4 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d004      	beq.n	8007de6 <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	2201      	movs	r2, #1
 8007de0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007de4:	e00e      	b.n	8007e04 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	2200      	movs	r2, #0
 8007dea:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f000 f868 	bl	8007ec4 <USBH_CDC_TransmitCallback>
      break;
 8007df4:	e006      	b.n	8007e04 <CDC_ProcessTransmission+0xe6>
        if (URB_Status == USBH_URB_NOTREADY)
 8007df6:	7afb      	ldrb	r3, [r7, #11]
 8007df8:	2b02      	cmp	r3, #2
 8007dfa:	d103      	bne.n	8007e04 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	2201      	movs	r2, #1
 8007e00:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007e04:	bf00      	nop
  }
}
 8007e06:	bf00      	nop
 8007e08:	3710      	adds	r7, #16
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}

08007e0e <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007e0e:	b580      	push	{r7, lr}
 8007e10:	b086      	sub	sp, #24
 8007e12:	af00      	add	r7, sp, #0
 8007e14:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e1c:	69db      	ldr	r3, [r3, #28]
 8007e1e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007e20:	2300      	movs	r3, #0
 8007e22:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007e24:	697b      	ldr	r3, [r7, #20]
 8007e26:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007e2a:	2b03      	cmp	r3, #3
 8007e2c:	d002      	beq.n	8007e34 <CDC_ProcessReception+0x26>
 8007e2e:	2b04      	cmp	r3, #4
 8007e30:	d00e      	beq.n	8007e50 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007e32:	e043      	b.n	8007ebc <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8007e34:	697b      	ldr	r3, [r7, #20]
 8007e36:	6a19      	ldr	r1, [r3, #32]
 8007e38:	697b      	ldr	r3, [r7, #20]
 8007e3a:	8b5a      	ldrh	r2, [r3, #26]
 8007e3c:	697b      	ldr	r3, [r7, #20]
 8007e3e:	7b1b      	ldrb	r3, [r3, #12]
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f001 fb07 	bl	8009454 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	2204      	movs	r2, #4
 8007e4a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007e4e:	e035      	b.n	8007ebc <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	7b1b      	ldrb	r3, [r3, #12]
 8007e54:	4619      	mov	r1, r3
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f001 fdfc 	bl	8009a54 <USBH_LL_GetURBState>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007e60:	7cfb      	ldrb	r3, [r7, #19]
 8007e62:	2b01      	cmp	r3, #1
 8007e64:	d129      	bne.n	8007eba <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	7b1b      	ldrb	r3, [r3, #12]
 8007e6a:	4619      	mov	r1, r3
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f001 fd5f 	bl	8009930 <USBH_LL_GetLastXferSize>
 8007e72:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007e74:	697b      	ldr	r3, [r7, #20]
 8007e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e78:	68fa      	ldr	r2, [r7, #12]
 8007e7a:	429a      	cmp	r2, r3
 8007e7c:	d016      	beq.n	8007eac <CDC_ProcessReception+0x9e>
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	8b5b      	ldrh	r3, [r3, #26]
 8007e82:	461a      	mov	r2, r3
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d910      	bls.n	8007eac <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	1ad2      	subs	r2, r2, r3
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8007e96:	697b      	ldr	r3, [r7, #20]
 8007e98:	6a1a      	ldr	r2, [r3, #32]
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	441a      	add	r2, r3
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	2203      	movs	r2, #3
 8007ea6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007eaa:	e006      	b.n	8007eba <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f000 f80f 	bl	8007ed8 <USBH_CDC_ReceiveCallback>
      break;
 8007eba:	bf00      	nop
  }
}
 8007ebc:	bf00      	nop
 8007ebe:	3718      	adds	r7, #24
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}

08007ec4 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b083      	sub	sp, #12
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007ecc:	bf00      	nop
 8007ece:	370c      	adds	r7, #12
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed6:	4770      	bx	lr

08007ed8 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b083      	sub	sp, #12
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007ee0:	bf00      	nop
 8007ee2:	370c      	adds	r7, #12
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eea:	4770      	bx	lr

08007eec <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b083      	sub	sp, #12
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007ef4:	bf00      	nop
 8007ef6:	370c      	adds	r7, #12
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efe:	4770      	bx	lr

08007f00 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b084      	sub	sp, #16
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	60f8      	str	r0, [r7, #12]
 8007f08:	60b9      	str	r1, [r7, #8]
 8007f0a:	4613      	mov	r3, r2
 8007f0c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d101      	bne.n	8007f18 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007f14:	2302      	movs	r3, #2
 8007f16:	e029      	b.n	8007f6c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	79fa      	ldrb	r2, [r7, #7]
 8007f1c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	2200      	movs	r2, #0
 8007f24:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8007f30:	68f8      	ldr	r0, [r7, #12]
 8007f32:	f000 f81f 	bl	8007f74 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	2200      	movs	r2, #0
 8007f42:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	2200      	movs	r2, #0
 8007f52:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d003      	beq.n	8007f64 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	68ba      	ldr	r2, [r7, #8]
 8007f60:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8007f64:	68f8      	ldr	r0, [r7, #12]
 8007f66:	f001 fc31 	bl	80097cc <USBH_LL_Init>

  return USBH_OK;
 8007f6a:	2300      	movs	r3, #0
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	3710      	adds	r7, #16
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}

08007f74 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b085      	sub	sp, #20
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007f80:	2300      	movs	r3, #0
 8007f82:	60fb      	str	r3, [r7, #12]
 8007f84:	e009      	b.n	8007f9a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007f86:	687a      	ldr	r2, [r7, #4]
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	33e0      	adds	r3, #224	; 0xe0
 8007f8c:	009b      	lsls	r3, r3, #2
 8007f8e:	4413      	add	r3, r2
 8007f90:	2200      	movs	r2, #0
 8007f92:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	3301      	adds	r3, #1
 8007f98:	60fb      	str	r3, [r7, #12]
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	2b0e      	cmp	r3, #14
 8007f9e:	d9f2      	bls.n	8007f86 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	60fb      	str	r3, [r7, #12]
 8007fa4:	e009      	b.n	8007fba <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007fa6:	687a      	ldr	r2, [r7, #4]
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	4413      	add	r3, r2
 8007fac:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	3301      	adds	r3, #1
 8007fb8:	60fb      	str	r3, [r7, #12]
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007fc0:	d3f1      	bcc.n	8007fa6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2201      	movs	r2, #1
 8007fd2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2201      	movs	r2, #1
 8007fe0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2240      	movs	r2, #64	; 0x40
 8007fe6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2200      	movs	r2, #0
 8007fec:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2201      	movs	r2, #1
 8007ffa:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2200      	movs	r2, #0
 8008002:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2200      	movs	r2, #0
 800800a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800800e:	2300      	movs	r3, #0
}
 8008010:	4618      	mov	r0, r3
 8008012:	3714      	adds	r7, #20
 8008014:	46bd      	mov	sp, r7
 8008016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801a:	4770      	bx	lr

0800801c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800801c:	b480      	push	{r7}
 800801e:	b085      	sub	sp, #20
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
 8008024:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008026:	2300      	movs	r3, #0
 8008028:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d016      	beq.n	800805e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008036:	2b00      	cmp	r3, #0
 8008038:	d10e      	bne.n	8008058 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008040:	1c59      	adds	r1, r3, #1
 8008042:	687a      	ldr	r2, [r7, #4]
 8008044:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8008048:	687a      	ldr	r2, [r7, #4]
 800804a:	33de      	adds	r3, #222	; 0xde
 800804c:	6839      	ldr	r1, [r7, #0]
 800804e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008052:	2300      	movs	r3, #0
 8008054:	73fb      	strb	r3, [r7, #15]
 8008056:	e004      	b.n	8008062 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008058:	2302      	movs	r3, #2
 800805a:	73fb      	strb	r3, [r7, #15]
 800805c:	e001      	b.n	8008062 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800805e:	2302      	movs	r3, #2
 8008060:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008062:	7bfb      	ldrb	r3, [r7, #15]
}
 8008064:	4618      	mov	r0, r3
 8008066:	3714      	adds	r7, #20
 8008068:	46bd      	mov	sp, r7
 800806a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806e:	4770      	bx	lr

08008070 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008070:	b480      	push	{r7}
 8008072:	b085      	sub	sp, #20
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
 8008078:	460b      	mov	r3, r1
 800807a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800807c:	2300      	movs	r3, #0
 800807e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8008086:	78fa      	ldrb	r2, [r7, #3]
 8008088:	429a      	cmp	r2, r3
 800808a:	d204      	bcs.n	8008096 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	78fa      	ldrb	r2, [r7, #3]
 8008090:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8008094:	e001      	b.n	800809a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008096:	2302      	movs	r3, #2
 8008098:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800809a:	7bfb      	ldrb	r3, [r7, #15]
}
 800809c:	4618      	mov	r0, r3
 800809e:	3714      	adds	r7, #20
 80080a0:	46bd      	mov	sp, r7
 80080a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a6:	4770      	bx	lr

080080a8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b087      	sub	sp, #28
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
 80080b0:	4608      	mov	r0, r1
 80080b2:	4611      	mov	r1, r2
 80080b4:	461a      	mov	r2, r3
 80080b6:	4603      	mov	r3, r0
 80080b8:	70fb      	strb	r3, [r7, #3]
 80080ba:	460b      	mov	r3, r1
 80080bc:	70bb      	strb	r3, [r7, #2]
 80080be:	4613      	mov	r3, r2
 80080c0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80080c2:	2300      	movs	r3, #0
 80080c4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 80080c6:	2300      	movs	r3, #0
 80080c8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80080d0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80080d2:	e025      	b.n	8008120 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80080d4:	7dfb      	ldrb	r3, [r7, #23]
 80080d6:	221a      	movs	r2, #26
 80080d8:	fb02 f303 	mul.w	r3, r2, r3
 80080dc:	3308      	adds	r3, #8
 80080de:	68fa      	ldr	r2, [r7, #12]
 80080e0:	4413      	add	r3, r2
 80080e2:	3302      	adds	r3, #2
 80080e4:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	795b      	ldrb	r3, [r3, #5]
 80080ea:	78fa      	ldrb	r2, [r7, #3]
 80080ec:	429a      	cmp	r2, r3
 80080ee:	d002      	beq.n	80080f6 <USBH_FindInterface+0x4e>
 80080f0:	78fb      	ldrb	r3, [r7, #3]
 80080f2:	2bff      	cmp	r3, #255	; 0xff
 80080f4:	d111      	bne.n	800811a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80080fa:	78ba      	ldrb	r2, [r7, #2]
 80080fc:	429a      	cmp	r2, r3
 80080fe:	d002      	beq.n	8008106 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008100:	78bb      	ldrb	r3, [r7, #2]
 8008102:	2bff      	cmp	r3, #255	; 0xff
 8008104:	d109      	bne.n	800811a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800810a:	787a      	ldrb	r2, [r7, #1]
 800810c:	429a      	cmp	r2, r3
 800810e:	d002      	beq.n	8008116 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008110:	787b      	ldrb	r3, [r7, #1]
 8008112:	2bff      	cmp	r3, #255	; 0xff
 8008114:	d101      	bne.n	800811a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008116:	7dfb      	ldrb	r3, [r7, #23]
 8008118:	e006      	b.n	8008128 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800811a:	7dfb      	ldrb	r3, [r7, #23]
 800811c:	3301      	adds	r3, #1
 800811e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008120:	7dfb      	ldrb	r3, [r7, #23]
 8008122:	2b01      	cmp	r3, #1
 8008124:	d9d6      	bls.n	80080d4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008126:	23ff      	movs	r3, #255	; 0xff
}
 8008128:	4618      	mov	r0, r3
 800812a:	371c      	adds	r7, #28
 800812c:	46bd      	mov	sp, r7
 800812e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008132:	4770      	bx	lr

08008134 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b082      	sub	sp, #8
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f001 fb81 	bl	8009844 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8008142:	2101      	movs	r1, #1
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f001 fc98 	bl	8009a7a <USBH_LL_DriverVBUS>

  return USBH_OK;
 800814a:	2300      	movs	r3, #0
}
 800814c:	4618      	mov	r0, r3
 800814e:	3708      	adds	r7, #8
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}

08008154 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b088      	sub	sp, #32
 8008158:	af04      	add	r7, sp, #16
 800815a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800815c:	2302      	movs	r3, #2
 800815e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008160:	2300      	movs	r3, #0
 8008162:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800816a:	b2db      	uxtb	r3, r3
 800816c:	2b01      	cmp	r3, #1
 800816e:	d102      	bne.n	8008176 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2203      	movs	r2, #3
 8008174:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	781b      	ldrb	r3, [r3, #0]
 800817a:	b2db      	uxtb	r3, r3
 800817c:	2b0b      	cmp	r3, #11
 800817e:	f200 81b3 	bhi.w	80084e8 <USBH_Process+0x394>
 8008182:	a201      	add	r2, pc, #4	; (adr r2, 8008188 <USBH_Process+0x34>)
 8008184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008188:	080081b9 	.word	0x080081b9
 800818c:	080081eb 	.word	0x080081eb
 8008190:	08008253 	.word	0x08008253
 8008194:	08008483 	.word	0x08008483
 8008198:	080084e9 	.word	0x080084e9
 800819c:	080082f7 	.word	0x080082f7
 80081a0:	08008429 	.word	0x08008429
 80081a4:	0800832d 	.word	0x0800832d
 80081a8:	0800834d 	.word	0x0800834d
 80081ac:	0800836d 	.word	0x0800836d
 80081b0:	0800839b 	.word	0x0800839b
 80081b4:	0800846b 	.word	0x0800846b
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80081be:	b2db      	uxtb	r3, r3
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	f000 8193 	beq.w	80084ec <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2201      	movs	r2, #1
 80081ca:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80081cc:	20c8      	movs	r0, #200	; 0xc8
 80081ce:	f001 fc9e 	bl	8009b0e <USBH_Delay>
        USBH_LL_ResetPort(phost);
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f001 fb91 	bl	80098fa <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2200      	movs	r2, #0
 80081dc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2200      	movs	r2, #0
 80081e4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80081e8:	e180      	b.n	80084ec <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80081f0:	2b01      	cmp	r3, #1
 80081f2:	d107      	bne.n	8008204 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2200      	movs	r2, #0
 80081f8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2202      	movs	r2, #2
 8008200:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008202:	e182      	b.n	800850a <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800820a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800820e:	d914      	bls.n	800823a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008216:	3301      	adds	r3, #1
 8008218:	b2da      	uxtb	r2, r3
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008226:	2b03      	cmp	r3, #3
 8008228:	d903      	bls.n	8008232 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	220d      	movs	r2, #13
 800822e:	701a      	strb	r2, [r3, #0]
      break;
 8008230:	e16b      	b.n	800850a <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2200      	movs	r2, #0
 8008236:	701a      	strb	r2, [r3, #0]
      break;
 8008238:	e167      	b.n	800850a <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008240:	f103 020a 	add.w	r2, r3, #10
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800824a:	200a      	movs	r0, #10
 800824c:	f001 fc5f 	bl	8009b0e <USBH_Delay>
      break;
 8008250:	e15b      	b.n	800850a <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008258:	2b00      	cmp	r3, #0
 800825a:	d005      	beq.n	8008268 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008262:	2104      	movs	r1, #4
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008268:	2064      	movs	r0, #100	; 0x64
 800826a:	f001 fc50 	bl	8009b0e <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f001 fb1e 	bl	80098b0 <USBH_LL_GetSpeed>
 8008274:	4603      	mov	r3, r0
 8008276:	461a      	mov	r2, r3
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2205      	movs	r2, #5
 8008282:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008284:	2100      	movs	r1, #0
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f001 f931 	bl	80094ee <USBH_AllocPipe>
 800828c:	4603      	mov	r3, r0
 800828e:	461a      	mov	r2, r3
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008294:	2180      	movs	r1, #128	; 0x80
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f001 f929 	bl	80094ee <USBH_AllocPipe>
 800829c:	4603      	mov	r3, r0
 800829e:	461a      	mov	r2, r3
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	7919      	ldrb	r1, [r3, #4]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80082b4:	687a      	ldr	r2, [r7, #4]
 80082b6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80082b8:	b292      	uxth	r2, r2
 80082ba:	9202      	str	r2, [sp, #8]
 80082bc:	2200      	movs	r2, #0
 80082be:	9201      	str	r2, [sp, #4]
 80082c0:	9300      	str	r3, [sp, #0]
 80082c2:	4603      	mov	r3, r0
 80082c4:	2280      	movs	r2, #128	; 0x80
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f001 f8e2 	bl	8009490 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	7959      	ldrb	r1, [r3, #5]
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80082dc:	687a      	ldr	r2, [r7, #4]
 80082de:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80082e0:	b292      	uxth	r2, r2
 80082e2:	9202      	str	r2, [sp, #8]
 80082e4:	2200      	movs	r2, #0
 80082e6:	9201      	str	r2, [sp, #4]
 80082e8:	9300      	str	r3, [sp, #0]
 80082ea:	4603      	mov	r3, r0
 80082ec:	2200      	movs	r2, #0
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f001 f8ce 	bl	8009490 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80082f4:	e109      	b.n	800850a <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f000 f90c 	bl	8008514 <USBH_HandleEnum>
 80082fc:	4603      	mov	r3, r0
 80082fe:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008300:	7bbb      	ldrb	r3, [r7, #14]
 8008302:	b2db      	uxtb	r3, r3
 8008304:	2b00      	cmp	r3, #0
 8008306:	f040 80f3 	bne.w	80084f0 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2200      	movs	r2, #0
 800830e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8008318:	2b01      	cmp	r3, #1
 800831a:	d103      	bne.n	8008324 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2208      	movs	r2, #8
 8008320:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008322:	e0e5      	b.n	80084f0 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2207      	movs	r2, #7
 8008328:	701a      	strb	r2, [r3, #0]
      break;
 800832a:	e0e1      	b.n	80084f0 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008332:	2b00      	cmp	r3, #0
 8008334:	f000 80de 	beq.w	80084f4 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800833e:	2101      	movs	r1, #1
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2208      	movs	r2, #8
 8008348:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800834a:	e0d3      	b.n	80084f4 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8008352:	b29b      	uxth	r3, r3
 8008354:	4619      	mov	r1, r3
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f000 fc20 	bl	8008b9c <USBH_SetCfg>
 800835c:	4603      	mov	r3, r0
 800835e:	2b00      	cmp	r3, #0
 8008360:	f040 80ca 	bne.w	80084f8 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2209      	movs	r2, #9
 8008368:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800836a:	e0c5      	b.n	80084f8 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8008372:	f003 0320 	and.w	r3, r3, #32
 8008376:	2b00      	cmp	r3, #0
 8008378:	d00b      	beq.n	8008392 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800837a:	2101      	movs	r1, #1
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f000 fc30 	bl	8008be2 <USBH_SetFeature>
 8008382:	4603      	mov	r3, r0
 8008384:	2b00      	cmp	r3, #0
 8008386:	f040 80b9 	bne.w	80084fc <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	220a      	movs	r2, #10
 800838e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008390:	e0b4      	b.n	80084fc <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	220a      	movs	r2, #10
 8008396:	701a      	strb	r2, [r3, #0]
      break;
 8008398:	e0b0      	b.n	80084fc <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	f000 80ad 	beq.w	8008500 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2200      	movs	r2, #0
 80083aa:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80083ae:	2300      	movs	r3, #0
 80083b0:	73fb      	strb	r3, [r7, #15]
 80083b2:	e016      	b.n	80083e2 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80083b4:	7bfa      	ldrb	r2, [r7, #15]
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	32de      	adds	r2, #222	; 0xde
 80083ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083be:	791a      	ldrb	r2, [r3, #4]
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80083c6:	429a      	cmp	r2, r3
 80083c8:	d108      	bne.n	80083dc <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 80083ca:	7bfa      	ldrb	r2, [r7, #15]
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	32de      	adds	r2, #222	; 0xde
 80083d0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80083da:	e005      	b.n	80083e8 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80083dc:	7bfb      	ldrb	r3, [r7, #15]
 80083de:	3301      	adds	r3, #1
 80083e0:	73fb      	strb	r3, [r7, #15]
 80083e2:	7bfb      	ldrb	r3, [r7, #15]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d0e5      	beq.n	80083b4 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d016      	beq.n	8008420 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80083f8:	689b      	ldr	r3, [r3, #8]
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	4798      	blx	r3
 80083fe:	4603      	mov	r3, r0
 8008400:	2b00      	cmp	r3, #0
 8008402:	d109      	bne.n	8008418 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2206      	movs	r2, #6
 8008408:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008410:	2103      	movs	r1, #3
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008416:	e073      	b.n	8008500 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	220d      	movs	r2, #13
 800841c:	701a      	strb	r2, [r3, #0]
      break;
 800841e:	e06f      	b.n	8008500 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	220d      	movs	r2, #13
 8008424:	701a      	strb	r2, [r3, #0]
      break;
 8008426:	e06b      	b.n	8008500 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800842e:	2b00      	cmp	r3, #0
 8008430:	d017      	beq.n	8008462 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008438:	691b      	ldr	r3, [r3, #16]
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	4798      	blx	r3
 800843e:	4603      	mov	r3, r0
 8008440:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008442:	7bbb      	ldrb	r3, [r7, #14]
 8008444:	b2db      	uxtb	r3, r3
 8008446:	2b00      	cmp	r3, #0
 8008448:	d103      	bne.n	8008452 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	220b      	movs	r2, #11
 800844e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008450:	e058      	b.n	8008504 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8008452:	7bbb      	ldrb	r3, [r7, #14]
 8008454:	b2db      	uxtb	r3, r3
 8008456:	2b02      	cmp	r3, #2
 8008458:	d154      	bne.n	8008504 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	220d      	movs	r2, #13
 800845e:	701a      	strb	r2, [r3, #0]
      break;
 8008460:	e050      	b.n	8008504 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	220d      	movs	r2, #13
 8008466:	701a      	strb	r2, [r3, #0]
      break;
 8008468:	e04c      	b.n	8008504 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008470:	2b00      	cmp	r3, #0
 8008472:	d049      	beq.n	8008508 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800847a:	695b      	ldr	r3, [r3, #20]
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	4798      	blx	r3
      }
      break;
 8008480:	e042      	b.n	8008508 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2200      	movs	r2, #0
 8008486:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f7ff fd72 	bl	8007f74 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008496:	2b00      	cmp	r3, #0
 8008498:	d009      	beq.n	80084ae <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80084a0:	68db      	ldr	r3, [r3, #12]
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2200      	movs	r2, #0
 80084aa:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d005      	beq.n	80084c4 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80084be:	2105      	movs	r1, #5
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80084ca:	b2db      	uxtb	r3, r3
 80084cc:	2b01      	cmp	r3, #1
 80084ce:	d107      	bne.n	80084e0 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2200      	movs	r2, #0
 80084d4:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f7ff fe2b 	bl	8008134 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80084de:	e014      	b.n	800850a <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f001 f9af 	bl	8009844 <USBH_LL_Start>
      break;
 80084e6:	e010      	b.n	800850a <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 80084e8:	bf00      	nop
 80084ea:	e00e      	b.n	800850a <USBH_Process+0x3b6>
      break;
 80084ec:	bf00      	nop
 80084ee:	e00c      	b.n	800850a <USBH_Process+0x3b6>
      break;
 80084f0:	bf00      	nop
 80084f2:	e00a      	b.n	800850a <USBH_Process+0x3b6>
    break;
 80084f4:	bf00      	nop
 80084f6:	e008      	b.n	800850a <USBH_Process+0x3b6>
      break;
 80084f8:	bf00      	nop
 80084fa:	e006      	b.n	800850a <USBH_Process+0x3b6>
      break;
 80084fc:	bf00      	nop
 80084fe:	e004      	b.n	800850a <USBH_Process+0x3b6>
      break;
 8008500:	bf00      	nop
 8008502:	e002      	b.n	800850a <USBH_Process+0x3b6>
      break;
 8008504:	bf00      	nop
 8008506:	e000      	b.n	800850a <USBH_Process+0x3b6>
      break;
 8008508:	bf00      	nop
  }
  return USBH_OK;
 800850a:	2300      	movs	r3, #0
}
 800850c:	4618      	mov	r0, r3
 800850e:	3710      	adds	r7, #16
 8008510:	46bd      	mov	sp, r7
 8008512:	bd80      	pop	{r7, pc}

08008514 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b088      	sub	sp, #32
 8008518:	af04      	add	r7, sp, #16
 800851a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800851c:	2301      	movs	r3, #1
 800851e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008520:	2301      	movs	r3, #1
 8008522:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	785b      	ldrb	r3, [r3, #1]
 8008528:	2b07      	cmp	r3, #7
 800852a:	f200 81c1 	bhi.w	80088b0 <USBH_HandleEnum+0x39c>
 800852e:	a201      	add	r2, pc, #4	; (adr r2, 8008534 <USBH_HandleEnum+0x20>)
 8008530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008534:	08008555 	.word	0x08008555
 8008538:	08008613 	.word	0x08008613
 800853c:	0800867d 	.word	0x0800867d
 8008540:	0800870b 	.word	0x0800870b
 8008544:	08008775 	.word	0x08008775
 8008548:	080087e5 	.word	0x080087e5
 800854c:	0800882b 	.word	0x0800882b
 8008550:	08008871 	.word	0x08008871
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008554:	2108      	movs	r1, #8
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f000 fa50 	bl	80089fc <USBH_Get_DevDesc>
 800855c:	4603      	mov	r3, r0
 800855e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008560:	7bbb      	ldrb	r3, [r7, #14]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d130      	bne.n	80085c8 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2201      	movs	r2, #1
 8008574:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	7919      	ldrb	r1, [r3, #4]
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008586:	687a      	ldr	r2, [r7, #4]
 8008588:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800858a:	b292      	uxth	r2, r2
 800858c:	9202      	str	r2, [sp, #8]
 800858e:	2200      	movs	r2, #0
 8008590:	9201      	str	r2, [sp, #4]
 8008592:	9300      	str	r3, [sp, #0]
 8008594:	4603      	mov	r3, r0
 8008596:	2280      	movs	r2, #128	; 0x80
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f000 ff79 	bl	8009490 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	7959      	ldrb	r1, [r3, #5]
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80085ae:	687a      	ldr	r2, [r7, #4]
 80085b0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80085b2:	b292      	uxth	r2, r2
 80085b4:	9202      	str	r2, [sp, #8]
 80085b6:	2200      	movs	r2, #0
 80085b8:	9201      	str	r2, [sp, #4]
 80085ba:	9300      	str	r3, [sp, #0]
 80085bc:	4603      	mov	r3, r0
 80085be:	2200      	movs	r2, #0
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f000 ff65 	bl	8009490 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80085c6:	e175      	b.n	80088b4 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80085c8:	7bbb      	ldrb	r3, [r7, #14]
 80085ca:	2b03      	cmp	r3, #3
 80085cc:	f040 8172 	bne.w	80088b4 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80085d6:	3301      	adds	r3, #1
 80085d8:	b2da      	uxtb	r2, r3
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80085e6:	2b03      	cmp	r3, #3
 80085e8:	d903      	bls.n	80085f2 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	220d      	movs	r2, #13
 80085ee:	701a      	strb	r2, [r3, #0]
      break;
 80085f0:	e160      	b.n	80088b4 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	795b      	ldrb	r3, [r3, #5]
 80085f6:	4619      	mov	r1, r3
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f000 ff99 	bl	8009530 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	791b      	ldrb	r3, [r3, #4]
 8008602:	4619      	mov	r1, r3
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f000 ff93 	bl	8009530 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2200      	movs	r2, #0
 800860e:	701a      	strb	r2, [r3, #0]
      break;
 8008610:	e150      	b.n	80088b4 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8008612:	2112      	movs	r1, #18
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f000 f9f1 	bl	80089fc <USBH_Get_DevDesc>
 800861a:	4603      	mov	r3, r0
 800861c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800861e:	7bbb      	ldrb	r3, [r7, #14]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d103      	bne.n	800862c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2202      	movs	r2, #2
 8008628:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800862a:	e145      	b.n	80088b8 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800862c:	7bbb      	ldrb	r3, [r7, #14]
 800862e:	2b03      	cmp	r3, #3
 8008630:	f040 8142 	bne.w	80088b8 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800863a:	3301      	adds	r3, #1
 800863c:	b2da      	uxtb	r2, r3
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800864a:	2b03      	cmp	r3, #3
 800864c:	d903      	bls.n	8008656 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	220d      	movs	r2, #13
 8008652:	701a      	strb	r2, [r3, #0]
      break;
 8008654:	e130      	b.n	80088b8 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	795b      	ldrb	r3, [r3, #5]
 800865a:	4619      	mov	r1, r3
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f000 ff67 	bl	8009530 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	791b      	ldrb	r3, [r3, #4]
 8008666:	4619      	mov	r1, r3
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f000 ff61 	bl	8009530 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2200      	movs	r2, #0
 8008672:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2200      	movs	r2, #0
 8008678:	701a      	strb	r2, [r3, #0]
      break;
 800867a:	e11d      	b.n	80088b8 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800867c:	2101      	movs	r1, #1
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f000 fa68 	bl	8008b54 <USBH_SetAddress>
 8008684:	4603      	mov	r3, r0
 8008686:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008688:	7bbb      	ldrb	r3, [r7, #14]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d132      	bne.n	80086f4 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800868e:	2002      	movs	r0, #2
 8008690:	f001 fa3d 	bl	8009b0e <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2201      	movs	r2, #1
 8008698:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2203      	movs	r2, #3
 80086a0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	7919      	ldrb	r1, [r3, #4]
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80086b2:	687a      	ldr	r2, [r7, #4]
 80086b4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80086b6:	b292      	uxth	r2, r2
 80086b8:	9202      	str	r2, [sp, #8]
 80086ba:	2200      	movs	r2, #0
 80086bc:	9201      	str	r2, [sp, #4]
 80086be:	9300      	str	r3, [sp, #0]
 80086c0:	4603      	mov	r3, r0
 80086c2:	2280      	movs	r2, #128	; 0x80
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	f000 fee3 	bl	8009490 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	7959      	ldrb	r1, [r3, #5]
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80086da:	687a      	ldr	r2, [r7, #4]
 80086dc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80086de:	b292      	uxth	r2, r2
 80086e0:	9202      	str	r2, [sp, #8]
 80086e2:	2200      	movs	r2, #0
 80086e4:	9201      	str	r2, [sp, #4]
 80086e6:	9300      	str	r3, [sp, #0]
 80086e8:	4603      	mov	r3, r0
 80086ea:	2200      	movs	r2, #0
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f000 fecf 	bl	8009490 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80086f2:	e0e3      	b.n	80088bc <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80086f4:	7bbb      	ldrb	r3, [r7, #14]
 80086f6:	2b03      	cmp	r3, #3
 80086f8:	f040 80e0 	bne.w	80088bc <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	220d      	movs	r2, #13
 8008700:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2200      	movs	r2, #0
 8008706:	705a      	strb	r2, [r3, #1]
      break;
 8008708:	e0d8      	b.n	80088bc <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800870a:	2109      	movs	r1, #9
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f000 f99d 	bl	8008a4c <USBH_Get_CfgDesc>
 8008712:	4603      	mov	r3, r0
 8008714:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008716:	7bbb      	ldrb	r3, [r7, #14]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d103      	bne.n	8008724 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2204      	movs	r2, #4
 8008720:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008722:	e0cd      	b.n	80088c0 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008724:	7bbb      	ldrb	r3, [r7, #14]
 8008726:	2b03      	cmp	r3, #3
 8008728:	f040 80ca 	bne.w	80088c0 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008732:	3301      	adds	r3, #1
 8008734:	b2da      	uxtb	r2, r3
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008742:	2b03      	cmp	r3, #3
 8008744:	d903      	bls.n	800874e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	220d      	movs	r2, #13
 800874a:	701a      	strb	r2, [r3, #0]
      break;
 800874c:	e0b8      	b.n	80088c0 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	795b      	ldrb	r3, [r3, #5]
 8008752:	4619      	mov	r1, r3
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f000 feeb 	bl	8009530 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	791b      	ldrb	r3, [r3, #4]
 800875e:	4619      	mov	r1, r3
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	f000 fee5 	bl	8009530 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2200      	movs	r2, #0
 800876a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2200      	movs	r2, #0
 8008770:	701a      	strb	r2, [r3, #0]
      break;
 8008772:	e0a5      	b.n	80088c0 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800877a:	4619      	mov	r1, r3
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f000 f965 	bl	8008a4c <USBH_Get_CfgDesc>
 8008782:	4603      	mov	r3, r0
 8008784:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008786:	7bbb      	ldrb	r3, [r7, #14]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d103      	bne.n	8008794 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2205      	movs	r2, #5
 8008790:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008792:	e097      	b.n	80088c4 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008794:	7bbb      	ldrb	r3, [r7, #14]
 8008796:	2b03      	cmp	r3, #3
 8008798:	f040 8094 	bne.w	80088c4 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80087a2:	3301      	adds	r3, #1
 80087a4:	b2da      	uxtb	r2, r3
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80087b2:	2b03      	cmp	r3, #3
 80087b4:	d903      	bls.n	80087be <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	220d      	movs	r2, #13
 80087ba:	701a      	strb	r2, [r3, #0]
      break;
 80087bc:	e082      	b.n	80088c4 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	795b      	ldrb	r3, [r3, #5]
 80087c2:	4619      	mov	r1, r3
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f000 feb3 	bl	8009530 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	791b      	ldrb	r3, [r3, #4]
 80087ce:	4619      	mov	r1, r3
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f000 fead 	bl	8009530 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2200      	movs	r2, #0
 80087da:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2200      	movs	r2, #0
 80087e0:	701a      	strb	r2, [r3, #0]
      break;
 80087e2:	e06f      	b.n	80088c4 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d019      	beq.n	8008822 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80087fa:	23ff      	movs	r3, #255	; 0xff
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	f000 f949 	bl	8008a94 <USBH_Get_StringDesc>
 8008802:	4603      	mov	r3, r0
 8008804:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008806:	7bbb      	ldrb	r3, [r7, #14]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d103      	bne.n	8008814 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2206      	movs	r2, #6
 8008810:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008812:	e059      	b.n	80088c8 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008814:	7bbb      	ldrb	r3, [r7, #14]
 8008816:	2b03      	cmp	r3, #3
 8008818:	d156      	bne.n	80088c8 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2206      	movs	r2, #6
 800881e:	705a      	strb	r2, [r3, #1]
      break;
 8008820:	e052      	b.n	80088c8 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2206      	movs	r2, #6
 8008826:	705a      	strb	r2, [r3, #1]
      break;
 8008828:	e04e      	b.n	80088c8 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8008830:	2b00      	cmp	r3, #0
 8008832:	d019      	beq.n	8008868 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008840:	23ff      	movs	r3, #255	; 0xff
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f000 f926 	bl	8008a94 <USBH_Get_StringDesc>
 8008848:	4603      	mov	r3, r0
 800884a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800884c:	7bbb      	ldrb	r3, [r7, #14]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d103      	bne.n	800885a <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2207      	movs	r2, #7
 8008856:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008858:	e038      	b.n	80088cc <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800885a:	7bbb      	ldrb	r3, [r7, #14]
 800885c:	2b03      	cmp	r3, #3
 800885e:	d135      	bne.n	80088cc <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2207      	movs	r2, #7
 8008864:	705a      	strb	r2, [r3, #1]
      break;
 8008866:	e031      	b.n	80088cc <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2207      	movs	r2, #7
 800886c:	705a      	strb	r2, [r3, #1]
      break;
 800886e:	e02d      	b.n	80088cc <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8008876:	2b00      	cmp	r3, #0
 8008878:	d017      	beq.n	80088aa <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008886:	23ff      	movs	r3, #255	; 0xff
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f000 f903 	bl	8008a94 <USBH_Get_StringDesc>
 800888e:	4603      	mov	r3, r0
 8008890:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008892:	7bbb      	ldrb	r3, [r7, #14]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d102      	bne.n	800889e <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008898:	2300      	movs	r3, #0
 800889a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800889c:	e018      	b.n	80088d0 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800889e:	7bbb      	ldrb	r3, [r7, #14]
 80088a0:	2b03      	cmp	r3, #3
 80088a2:	d115      	bne.n	80088d0 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80088a4:	2300      	movs	r3, #0
 80088a6:	73fb      	strb	r3, [r7, #15]
      break;
 80088a8:	e012      	b.n	80088d0 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80088aa:	2300      	movs	r3, #0
 80088ac:	73fb      	strb	r3, [r7, #15]
      break;
 80088ae:	e00f      	b.n	80088d0 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80088b0:	bf00      	nop
 80088b2:	e00e      	b.n	80088d2 <USBH_HandleEnum+0x3be>
      break;
 80088b4:	bf00      	nop
 80088b6:	e00c      	b.n	80088d2 <USBH_HandleEnum+0x3be>
      break;
 80088b8:	bf00      	nop
 80088ba:	e00a      	b.n	80088d2 <USBH_HandleEnum+0x3be>
      break;
 80088bc:	bf00      	nop
 80088be:	e008      	b.n	80088d2 <USBH_HandleEnum+0x3be>
      break;
 80088c0:	bf00      	nop
 80088c2:	e006      	b.n	80088d2 <USBH_HandleEnum+0x3be>
      break;
 80088c4:	bf00      	nop
 80088c6:	e004      	b.n	80088d2 <USBH_HandleEnum+0x3be>
      break;
 80088c8:	bf00      	nop
 80088ca:	e002      	b.n	80088d2 <USBH_HandleEnum+0x3be>
      break;
 80088cc:	bf00      	nop
 80088ce:	e000      	b.n	80088d2 <USBH_HandleEnum+0x3be>
      break;
 80088d0:	bf00      	nop
  }
  return Status;
 80088d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80088d4:	4618      	mov	r0, r3
 80088d6:	3710      	adds	r7, #16
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}

080088dc <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80088dc:	b480      	push	{r7}
 80088de:	b083      	sub	sp, #12
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
 80088e4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	683a      	ldr	r2, [r7, #0]
 80088ea:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80088ee:	bf00      	nop
 80088f0:	370c      	adds	r7, #12
 80088f2:	46bd      	mov	sp, r7
 80088f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f8:	4770      	bx	lr

080088fa <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80088fa:	b580      	push	{r7, lr}
 80088fc:	b082      	sub	sp, #8
 80088fe:	af00      	add	r7, sp, #0
 8008900:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008908:	1c5a      	adds	r2, r3, #1
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f000 f804 	bl	800891e <USBH_HandleSof>
}
 8008916:	bf00      	nop
 8008918:	3708      	adds	r7, #8
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}

0800891e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800891e:	b580      	push	{r7, lr}
 8008920:	b082      	sub	sp, #8
 8008922:	af00      	add	r7, sp, #0
 8008924:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	781b      	ldrb	r3, [r3, #0]
 800892a:	b2db      	uxtb	r3, r3
 800892c:	2b0b      	cmp	r3, #11
 800892e:	d10a      	bne.n	8008946 <USBH_HandleSof+0x28>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008936:	2b00      	cmp	r3, #0
 8008938:	d005      	beq.n	8008946 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008940:	699b      	ldr	r3, [r3, #24]
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	4798      	blx	r3
  }
}
 8008946:	bf00      	nop
 8008948:	3708      	adds	r7, #8
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}

0800894e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800894e:	b480      	push	{r7}
 8008950:	b083      	sub	sp, #12
 8008952:	af00      	add	r7, sp, #0
 8008954:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2201      	movs	r2, #1
 800895a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800895e:	bf00      	nop
}
 8008960:	370c      	adds	r7, #12
 8008962:	46bd      	mov	sp, r7
 8008964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008968:	4770      	bx	lr

0800896a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800896a:	b480      	push	{r7}
 800896c:	b083      	sub	sp, #12
 800896e:	af00      	add	r7, sp, #0
 8008970:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2200      	movs	r2, #0
 8008976:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800897a:	bf00      	nop
}
 800897c:	370c      	adds	r7, #12
 800897e:	46bd      	mov	sp, r7
 8008980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008984:	4770      	bx	lr

08008986 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008986:	b480      	push	{r7}
 8008988:	b083      	sub	sp, #12
 800898a:	af00      	add	r7, sp, #0
 800898c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2201      	movs	r2, #1
 8008992:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2200      	movs	r2, #0
 800899a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2200      	movs	r2, #0
 80089a2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80089a6:	2300      	movs	r3, #0
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	370c      	adds	r7, #12
 80089ac:	46bd      	mov	sp, r7
 80089ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b2:	4770      	bx	lr

080089b4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b082      	sub	sp, #8
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2201      	movs	r2, #1
 80089c0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2200      	movs	r2, #0
 80089c8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2200      	movs	r2, #0
 80089d0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	f000 ff50 	bl	800987a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	791b      	ldrb	r3, [r3, #4]
 80089de:	4619      	mov	r1, r3
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f000 fda5 	bl	8009530 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	795b      	ldrb	r3, [r3, #5]
 80089ea:	4619      	mov	r1, r3
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f000 fd9f 	bl	8009530 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80089f2:	2300      	movs	r3, #0
}
 80089f4:	4618      	mov	r0, r3
 80089f6:	3708      	adds	r7, #8
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bd80      	pop	{r7, pc}

080089fc <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b086      	sub	sp, #24
 8008a00:	af02      	add	r7, sp, #8
 8008a02:	6078      	str	r0, [r7, #4]
 8008a04:	460b      	mov	r3, r1
 8008a06:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8008a0e:	78fb      	ldrb	r3, [r7, #3]
 8008a10:	b29b      	uxth	r3, r3
 8008a12:	9300      	str	r3, [sp, #0]
 8008a14:	4613      	mov	r3, r2
 8008a16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008a1a:	2100      	movs	r1, #0
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	f000 f864 	bl	8008aea <USBH_GetDescriptor>
 8008a22:	4603      	mov	r3, r0
 8008a24:	73fb      	strb	r3, [r7, #15]
 8008a26:	7bfb      	ldrb	r3, [r7, #15]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d10a      	bne.n	8008a42 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f203 3026 	addw	r0, r3, #806	; 0x326
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008a38:	78fa      	ldrb	r2, [r7, #3]
 8008a3a:	b292      	uxth	r2, r2
 8008a3c:	4619      	mov	r1, r3
 8008a3e:	f000 f918 	bl	8008c72 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8008a42:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	3710      	adds	r7, #16
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}

08008a4c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b086      	sub	sp, #24
 8008a50:	af02      	add	r7, sp, #8
 8008a52:	6078      	str	r0, [r7, #4]
 8008a54:	460b      	mov	r3, r1
 8008a56:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	331c      	adds	r3, #28
 8008a5c:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008a5e:	887b      	ldrh	r3, [r7, #2]
 8008a60:	9300      	str	r3, [sp, #0]
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a68:	2100      	movs	r1, #0
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f000 f83d 	bl	8008aea <USBH_GetDescriptor>
 8008a70:	4603      	mov	r3, r0
 8008a72:	72fb      	strb	r3, [r7, #11]
 8008a74:	7afb      	ldrb	r3, [r7, #11]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d107      	bne.n	8008a8a <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008a80:	887a      	ldrh	r2, [r7, #2]
 8008a82:	68f9      	ldr	r1, [r7, #12]
 8008a84:	4618      	mov	r0, r3
 8008a86:	f000 f964 	bl	8008d52 <USBH_ParseCfgDesc>
  }

  return status;
 8008a8a:	7afb      	ldrb	r3, [r7, #11]
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	3710      	adds	r7, #16
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bd80      	pop	{r7, pc}

08008a94 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b088      	sub	sp, #32
 8008a98:	af02      	add	r7, sp, #8
 8008a9a:	60f8      	str	r0, [r7, #12]
 8008a9c:	607a      	str	r2, [r7, #4]
 8008a9e:	461a      	mov	r2, r3
 8008aa0:	460b      	mov	r3, r1
 8008aa2:	72fb      	strb	r3, [r7, #11]
 8008aa4:	4613      	mov	r3, r2
 8008aa6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8008aa8:	7afb      	ldrb	r3, [r7, #11]
 8008aaa:	b29b      	uxth	r3, r3
 8008aac:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008ab0:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8008ab8:	893b      	ldrh	r3, [r7, #8]
 8008aba:	9300      	str	r3, [sp, #0]
 8008abc:	460b      	mov	r3, r1
 8008abe:	2100      	movs	r1, #0
 8008ac0:	68f8      	ldr	r0, [r7, #12]
 8008ac2:	f000 f812 	bl	8008aea <USBH_GetDescriptor>
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	75fb      	strb	r3, [r7, #23]
 8008aca:	7dfb      	ldrb	r3, [r7, #23]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d107      	bne.n	8008ae0 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008ad6:	893a      	ldrh	r2, [r7, #8]
 8008ad8:	6879      	ldr	r1, [r7, #4]
 8008ada:	4618      	mov	r0, r3
 8008adc:	f000 fa37 	bl	8008f4e <USBH_ParseStringDesc>
  }

  return status;
 8008ae0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	3718      	adds	r7, #24
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}

08008aea <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8008aea:	b580      	push	{r7, lr}
 8008aec:	b084      	sub	sp, #16
 8008aee:	af00      	add	r7, sp, #0
 8008af0:	60f8      	str	r0, [r7, #12]
 8008af2:	607b      	str	r3, [r7, #4]
 8008af4:	460b      	mov	r3, r1
 8008af6:	72fb      	strb	r3, [r7, #11]
 8008af8:	4613      	mov	r3, r2
 8008afa:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	789b      	ldrb	r3, [r3, #2]
 8008b00:	2b01      	cmp	r3, #1
 8008b02:	d11c      	bne.n	8008b3e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008b04:	7afb      	ldrb	r3, [r7, #11]
 8008b06:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008b0a:	b2da      	uxtb	r2, r3
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	2206      	movs	r2, #6
 8008b14:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	893a      	ldrh	r2, [r7, #8]
 8008b1a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008b1c:	893b      	ldrh	r3, [r7, #8]
 8008b1e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008b22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b26:	d104      	bne.n	8008b32 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	f240 4209 	movw	r2, #1033	; 0x409
 8008b2e:	829a      	strh	r2, [r3, #20]
 8008b30:	e002      	b.n	8008b38 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	2200      	movs	r2, #0
 8008b36:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	8b3a      	ldrh	r2, [r7, #24]
 8008b3c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008b3e:	8b3b      	ldrh	r3, [r7, #24]
 8008b40:	461a      	mov	r2, r3
 8008b42:	6879      	ldr	r1, [r7, #4]
 8008b44:	68f8      	ldr	r0, [r7, #12]
 8008b46:	f000 fa50 	bl	8008fea <USBH_CtlReq>
 8008b4a:	4603      	mov	r3, r0
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	3710      	adds	r7, #16
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd80      	pop	{r7, pc}

08008b54 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b082      	sub	sp, #8
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
 8008b5c:	460b      	mov	r3, r1
 8008b5e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	789b      	ldrb	r3, [r3, #2]
 8008b64:	2b01      	cmp	r3, #1
 8008b66:	d10f      	bne.n	8008b88 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2205      	movs	r2, #5
 8008b72:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008b74:	78fb      	ldrb	r3, [r7, #3]
 8008b76:	b29a      	uxth	r2, r3
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2200      	movs	r2, #0
 8008b80:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2200      	movs	r2, #0
 8008b86:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008b88:	2200      	movs	r2, #0
 8008b8a:	2100      	movs	r1, #0
 8008b8c:	6878      	ldr	r0, [r7, #4]
 8008b8e:	f000 fa2c 	bl	8008fea <USBH_CtlReq>
 8008b92:	4603      	mov	r3, r0
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	3708      	adds	r7, #8
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}

08008b9c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b082      	sub	sp, #8
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
 8008ba4:	460b      	mov	r3, r1
 8008ba6:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	789b      	ldrb	r3, [r3, #2]
 8008bac:	2b01      	cmp	r3, #1
 8008bae:	d10e      	bne.n	8008bce <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2209      	movs	r2, #9
 8008bba:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	887a      	ldrh	r2, [r7, #2]
 8008bc0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2200      	movs	r2, #0
 8008bcc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008bce:	2200      	movs	r2, #0
 8008bd0:	2100      	movs	r1, #0
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f000 fa09 	bl	8008fea <USBH_CtlReq>
 8008bd8:	4603      	mov	r3, r0
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3708      	adds	r7, #8
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}

08008be2 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008be2:	b580      	push	{r7, lr}
 8008be4:	b082      	sub	sp, #8
 8008be6:	af00      	add	r7, sp, #0
 8008be8:	6078      	str	r0, [r7, #4]
 8008bea:	460b      	mov	r3, r1
 8008bec:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	789b      	ldrb	r3, [r3, #2]
 8008bf2:	2b01      	cmp	r3, #1
 8008bf4:	d10f      	bne.n	8008c16 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2203      	movs	r2, #3
 8008c00:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008c02:	78fb      	ldrb	r3, [r7, #3]
 8008c04:	b29a      	uxth	r2, r3
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2200      	movs	r2, #0
 8008c14:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008c16:	2200      	movs	r2, #0
 8008c18:	2100      	movs	r1, #0
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f000 f9e5 	bl	8008fea <USBH_CtlReq>
 8008c20:	4603      	mov	r3, r0
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	3708      	adds	r7, #8
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}

08008c2a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008c2a:	b580      	push	{r7, lr}
 8008c2c:	b082      	sub	sp, #8
 8008c2e:	af00      	add	r7, sp, #0
 8008c30:	6078      	str	r0, [r7, #4]
 8008c32:	460b      	mov	r3, r1
 8008c34:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	789b      	ldrb	r3, [r3, #2]
 8008c3a:	2b01      	cmp	r3, #1
 8008c3c:	d10f      	bne.n	8008c5e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2202      	movs	r2, #2
 8008c42:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2201      	movs	r2, #1
 8008c48:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008c50:	78fb      	ldrb	r3, [r7, #3]
 8008c52:	b29a      	uxth	r2, r3
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8008c5e:	2200      	movs	r2, #0
 8008c60:	2100      	movs	r1, #0
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f000 f9c1 	bl	8008fea <USBH_CtlReq>
 8008c68:	4603      	mov	r3, r0
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3708      	adds	r7, #8
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}

08008c72 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8008c72:	b480      	push	{r7}
 8008c74:	b085      	sub	sp, #20
 8008c76:	af00      	add	r7, sp, #0
 8008c78:	60f8      	str	r0, [r7, #12]
 8008c7a:	60b9      	str	r1, [r7, #8]
 8008c7c:	4613      	mov	r3, r2
 8008c7e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	781a      	ldrb	r2, [r3, #0]
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8008c88:	68bb      	ldr	r3, [r7, #8]
 8008c8a:	785a      	ldrb	r2, [r3, #1]
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	3302      	adds	r3, #2
 8008c94:	781b      	ldrb	r3, [r3, #0]
 8008c96:	b29a      	uxth	r2, r3
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	3303      	adds	r3, #3
 8008c9c:	781b      	ldrb	r3, [r3, #0]
 8008c9e:	b29b      	uxth	r3, r3
 8008ca0:	021b      	lsls	r3, r3, #8
 8008ca2:	b29b      	uxth	r3, r3
 8008ca4:	4313      	orrs	r3, r2
 8008ca6:	b29a      	uxth	r2, r3
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	791a      	ldrb	r2, [r3, #4]
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	795a      	ldrb	r2, [r3, #5]
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	799a      	ldrb	r2, [r3, #6]
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	79da      	ldrb	r2, [r3, #7]
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8008ccc:	88fb      	ldrh	r3, [r7, #6]
 8008cce:	2b08      	cmp	r3, #8
 8008cd0:	d939      	bls.n	8008d46 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	3308      	adds	r3, #8
 8008cd6:	781b      	ldrb	r3, [r3, #0]
 8008cd8:	b29a      	uxth	r2, r3
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	3309      	adds	r3, #9
 8008cde:	781b      	ldrb	r3, [r3, #0]
 8008ce0:	b29b      	uxth	r3, r3
 8008ce2:	021b      	lsls	r3, r3, #8
 8008ce4:	b29b      	uxth	r3, r3
 8008ce6:	4313      	orrs	r3, r2
 8008ce8:	b29a      	uxth	r2, r3
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8008cee:	68bb      	ldr	r3, [r7, #8]
 8008cf0:	330a      	adds	r3, #10
 8008cf2:	781b      	ldrb	r3, [r3, #0]
 8008cf4:	b29a      	uxth	r2, r3
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	330b      	adds	r3, #11
 8008cfa:	781b      	ldrb	r3, [r3, #0]
 8008cfc:	b29b      	uxth	r3, r3
 8008cfe:	021b      	lsls	r3, r3, #8
 8008d00:	b29b      	uxth	r3, r3
 8008d02:	4313      	orrs	r3, r2
 8008d04:	b29a      	uxth	r2, r3
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	330c      	adds	r3, #12
 8008d0e:	781b      	ldrb	r3, [r3, #0]
 8008d10:	b29a      	uxth	r2, r3
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	330d      	adds	r3, #13
 8008d16:	781b      	ldrb	r3, [r3, #0]
 8008d18:	b29b      	uxth	r3, r3
 8008d1a:	021b      	lsls	r3, r3, #8
 8008d1c:	b29b      	uxth	r3, r3
 8008d1e:	4313      	orrs	r3, r2
 8008d20:	b29a      	uxth	r2, r3
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	7b9a      	ldrb	r2, [r3, #14]
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8008d2e:	68bb      	ldr	r3, [r7, #8]
 8008d30:	7bda      	ldrb	r2, [r3, #15]
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	7c1a      	ldrb	r2, [r3, #16]
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8008d3e:	68bb      	ldr	r3, [r7, #8]
 8008d40:	7c5a      	ldrb	r2, [r3, #17]
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	745a      	strb	r2, [r3, #17]
  }
}
 8008d46:	bf00      	nop
 8008d48:	3714      	adds	r7, #20
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d50:	4770      	bx	lr

08008d52 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8008d52:	b580      	push	{r7, lr}
 8008d54:	b08a      	sub	sp, #40	; 0x28
 8008d56:	af00      	add	r7, sp, #0
 8008d58:	60f8      	str	r0, [r7, #12]
 8008d5a:	60b9      	str	r1, [r7, #8]
 8008d5c:	4613      	mov	r3, r2
 8008d5e:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008d64:	2300      	movs	r3, #0
 8008d66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	781a      	ldrb	r2, [r3, #0]
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	785a      	ldrb	r2, [r3, #1]
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8008d84:	68bb      	ldr	r3, [r7, #8]
 8008d86:	3302      	adds	r3, #2
 8008d88:	781b      	ldrb	r3, [r3, #0]
 8008d8a:	b29a      	uxth	r2, r3
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	3303      	adds	r3, #3
 8008d90:	781b      	ldrb	r3, [r3, #0]
 8008d92:	b29b      	uxth	r3, r3
 8008d94:	021b      	lsls	r3, r3, #8
 8008d96:	b29b      	uxth	r3, r3
 8008d98:	4313      	orrs	r3, r2
 8008d9a:	b29a      	uxth	r2, r3
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	791a      	ldrb	r2, [r3, #4]
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	795a      	ldrb	r2, [r3, #5]
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	799a      	ldrb	r2, [r3, #6]
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	79da      	ldrb	r2, [r3, #7]
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	7a1a      	ldrb	r2, [r3, #8]
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008dc8:	88fb      	ldrh	r3, [r7, #6]
 8008dca:	2b09      	cmp	r3, #9
 8008dcc:	d95f      	bls.n	8008e8e <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8008dce:	2309      	movs	r3, #9
 8008dd0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008dd6:	e051      	b.n	8008e7c <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008dd8:	f107 0316 	add.w	r3, r7, #22
 8008ddc:	4619      	mov	r1, r3
 8008dde:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008de0:	f000 f8e8 	bl	8008fb4 <USBH_GetNextDesc>
 8008de4:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8008de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008de8:	785b      	ldrb	r3, [r3, #1]
 8008dea:	2b04      	cmp	r3, #4
 8008dec:	d146      	bne.n	8008e7c <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8008dee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008df2:	221a      	movs	r2, #26
 8008df4:	fb02 f303 	mul.w	r3, r2, r3
 8008df8:	3308      	adds	r3, #8
 8008dfa:	68fa      	ldr	r2, [r7, #12]
 8008dfc:	4413      	add	r3, r2
 8008dfe:	3302      	adds	r3, #2
 8008e00:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008e02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008e04:	69f8      	ldr	r0, [r7, #28]
 8008e06:	f000 f846 	bl	8008e96 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8008e10:	2300      	movs	r3, #0
 8008e12:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008e14:	e022      	b.n	8008e5c <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008e16:	f107 0316 	add.w	r3, r7, #22
 8008e1a:	4619      	mov	r1, r3
 8008e1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008e1e:	f000 f8c9 	bl	8008fb4 <USBH_GetNextDesc>
 8008e22:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8008e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e26:	785b      	ldrb	r3, [r3, #1]
 8008e28:	2b05      	cmp	r3, #5
 8008e2a:	d117      	bne.n	8008e5c <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008e2c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008e30:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008e34:	3201      	adds	r2, #1
 8008e36:	00d2      	lsls	r2, r2, #3
 8008e38:	211a      	movs	r1, #26
 8008e3a:	fb01 f303 	mul.w	r3, r1, r3
 8008e3e:	4413      	add	r3, r2
 8008e40:	3308      	adds	r3, #8
 8008e42:	68fa      	ldr	r2, [r7, #12]
 8008e44:	4413      	add	r3, r2
 8008e46:	3304      	adds	r3, #4
 8008e48:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8008e4a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008e4c:	69b8      	ldr	r0, [r7, #24]
 8008e4e:	f000 f851 	bl	8008ef4 <USBH_ParseEPDesc>
            ep_ix++;
 8008e52:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008e56:	3301      	adds	r3, #1
 8008e58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008e5c:	69fb      	ldr	r3, [r7, #28]
 8008e5e:	791b      	ldrb	r3, [r3, #4]
 8008e60:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008e64:	429a      	cmp	r2, r3
 8008e66:	d204      	bcs.n	8008e72 <USBH_ParseCfgDesc+0x120>
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	885a      	ldrh	r2, [r3, #2]
 8008e6c:	8afb      	ldrh	r3, [r7, #22]
 8008e6e:	429a      	cmp	r2, r3
 8008e70:	d8d1      	bhi.n	8008e16 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8008e72:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008e76:	3301      	adds	r3, #1
 8008e78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008e7c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008e80:	2b01      	cmp	r3, #1
 8008e82:	d804      	bhi.n	8008e8e <USBH_ParseCfgDesc+0x13c>
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	885a      	ldrh	r2, [r3, #2]
 8008e88:	8afb      	ldrh	r3, [r7, #22]
 8008e8a:	429a      	cmp	r2, r3
 8008e8c:	d8a4      	bhi.n	8008dd8 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8008e8e:	bf00      	nop
 8008e90:	3728      	adds	r7, #40	; 0x28
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}

08008e96 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008e96:	b480      	push	{r7}
 8008e98:	b083      	sub	sp, #12
 8008e9a:	af00      	add	r7, sp, #0
 8008e9c:	6078      	str	r0, [r7, #4]
 8008e9e:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	781a      	ldrb	r2, [r3, #0]
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	785a      	ldrb	r2, [r3, #1]
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	789a      	ldrb	r2, [r3, #2]
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	78da      	ldrb	r2, [r3, #3]
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	791a      	ldrb	r2, [r3, #4]
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	795a      	ldrb	r2, [r3, #5]
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	799a      	ldrb	r2, [r3, #6]
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	79da      	ldrb	r2, [r3, #7]
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	7a1a      	ldrb	r2, [r3, #8]
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	721a      	strb	r2, [r3, #8]
}
 8008ee8:	bf00      	nop
 8008eea:	370c      	adds	r7, #12
 8008eec:	46bd      	mov	sp, r7
 8008eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef2:	4770      	bx	lr

08008ef4 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	b083      	sub	sp, #12
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
 8008efc:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	781a      	ldrb	r2, [r3, #0]
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	785a      	ldrb	r2, [r3, #1]
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	789a      	ldrb	r2, [r3, #2]
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	78da      	ldrb	r2, [r3, #3]
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	3304      	adds	r3, #4
 8008f22:	781b      	ldrb	r3, [r3, #0]
 8008f24:	b29a      	uxth	r2, r3
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	3305      	adds	r3, #5
 8008f2a:	781b      	ldrb	r3, [r3, #0]
 8008f2c:	b29b      	uxth	r3, r3
 8008f2e:	021b      	lsls	r3, r3, #8
 8008f30:	b29b      	uxth	r3, r3
 8008f32:	4313      	orrs	r3, r2
 8008f34:	b29a      	uxth	r2, r3
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	799a      	ldrb	r2, [r3, #6]
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	719a      	strb	r2, [r3, #6]
}
 8008f42:	bf00      	nop
 8008f44:	370c      	adds	r7, #12
 8008f46:	46bd      	mov	sp, r7
 8008f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4c:	4770      	bx	lr

08008f4e <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008f4e:	b480      	push	{r7}
 8008f50:	b087      	sub	sp, #28
 8008f52:	af00      	add	r7, sp, #0
 8008f54:	60f8      	str	r0, [r7, #12]
 8008f56:	60b9      	str	r1, [r7, #8]
 8008f58:	4613      	mov	r3, r2
 8008f5a:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	3301      	adds	r3, #1
 8008f60:	781b      	ldrb	r3, [r3, #0]
 8008f62:	2b03      	cmp	r3, #3
 8008f64:	d120      	bne.n	8008fa8 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	781b      	ldrb	r3, [r3, #0]
 8008f6a:	1e9a      	subs	r2, r3, #2
 8008f6c:	88fb      	ldrh	r3, [r7, #6]
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	bf28      	it	cs
 8008f72:	4613      	movcs	r3, r2
 8008f74:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	3302      	adds	r3, #2
 8008f7a:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	82fb      	strh	r3, [r7, #22]
 8008f80:	e00b      	b.n	8008f9a <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008f82:	8afb      	ldrh	r3, [r7, #22]
 8008f84:	68fa      	ldr	r2, [r7, #12]
 8008f86:	4413      	add	r3, r2
 8008f88:	781a      	ldrb	r2, [r3, #0]
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	3301      	adds	r3, #1
 8008f92:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008f94:	8afb      	ldrh	r3, [r7, #22]
 8008f96:	3302      	adds	r3, #2
 8008f98:	82fb      	strh	r3, [r7, #22]
 8008f9a:	8afa      	ldrh	r2, [r7, #22]
 8008f9c:	8abb      	ldrh	r3, [r7, #20]
 8008f9e:	429a      	cmp	r2, r3
 8008fa0:	d3ef      	bcc.n	8008f82 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008fa2:	68bb      	ldr	r3, [r7, #8]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	701a      	strb	r2, [r3, #0]
  }
}
 8008fa8:	bf00      	nop
 8008faa:	371c      	adds	r7, #28
 8008fac:	46bd      	mov	sp, r7
 8008fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb2:	4770      	bx	lr

08008fb4 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b085      	sub	sp, #20
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
 8008fbc:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	881a      	ldrh	r2, [r3, #0]
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	781b      	ldrb	r3, [r3, #0]
 8008fc6:	b29b      	uxth	r3, r3
 8008fc8:	4413      	add	r3, r2
 8008fca:	b29a      	uxth	r2, r3
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	781b      	ldrb	r3, [r3, #0]
 8008fd4:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	4413      	add	r3, r2
 8008fda:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008fdc:	68fb      	ldr	r3, [r7, #12]
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3714      	adds	r7, #20
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe8:	4770      	bx	lr

08008fea <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008fea:	b580      	push	{r7, lr}
 8008fec:	b086      	sub	sp, #24
 8008fee:	af00      	add	r7, sp, #0
 8008ff0:	60f8      	str	r0, [r7, #12]
 8008ff2:	60b9      	str	r1, [r7, #8]
 8008ff4:	4613      	mov	r3, r2
 8008ff6:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008ff8:	2301      	movs	r3, #1
 8008ffa:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	789b      	ldrb	r3, [r3, #2]
 8009000:	2b01      	cmp	r3, #1
 8009002:	d002      	beq.n	800900a <USBH_CtlReq+0x20>
 8009004:	2b02      	cmp	r3, #2
 8009006:	d00f      	beq.n	8009028 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8009008:	e027      	b.n	800905a <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	68ba      	ldr	r2, [r7, #8]
 800900e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	88fa      	ldrh	r2, [r7, #6]
 8009014:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	2201      	movs	r2, #1
 800901a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	2202      	movs	r2, #2
 8009020:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009022:	2301      	movs	r3, #1
 8009024:	75fb      	strb	r3, [r7, #23]
      break;
 8009026:	e018      	b.n	800905a <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8009028:	68f8      	ldr	r0, [r7, #12]
 800902a:	f000 f81b 	bl	8009064 <USBH_HandleControl>
 800902e:	4603      	mov	r3, r0
 8009030:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009032:	7dfb      	ldrb	r3, [r7, #23]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d002      	beq.n	800903e <USBH_CtlReq+0x54>
 8009038:	7dfb      	ldrb	r3, [r7, #23]
 800903a:	2b03      	cmp	r3, #3
 800903c:	d106      	bne.n	800904c <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	2201      	movs	r2, #1
 8009042:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	2200      	movs	r2, #0
 8009048:	761a      	strb	r2, [r3, #24]
      break;
 800904a:	e005      	b.n	8009058 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800904c:	7dfb      	ldrb	r3, [r7, #23]
 800904e:	2b02      	cmp	r3, #2
 8009050:	d102      	bne.n	8009058 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	2201      	movs	r2, #1
 8009056:	709a      	strb	r2, [r3, #2]
      break;
 8009058:	bf00      	nop
  }
  return status;
 800905a:	7dfb      	ldrb	r3, [r7, #23]
}
 800905c:	4618      	mov	r0, r3
 800905e:	3718      	adds	r7, #24
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}

08009064 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b086      	sub	sp, #24
 8009068:	af02      	add	r7, sp, #8
 800906a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800906c:	2301      	movs	r3, #1
 800906e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009070:	2300      	movs	r3, #0
 8009072:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	7e1b      	ldrb	r3, [r3, #24]
 8009078:	3b01      	subs	r3, #1
 800907a:	2b0a      	cmp	r3, #10
 800907c:	f200 8158 	bhi.w	8009330 <USBH_HandleControl+0x2cc>
 8009080:	a201      	add	r2, pc, #4	; (adr r2, 8009088 <USBH_HandleControl+0x24>)
 8009082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009086:	bf00      	nop
 8009088:	080090b5 	.word	0x080090b5
 800908c:	080090cf 	.word	0x080090cf
 8009090:	08009139 	.word	0x08009139
 8009094:	0800915f 	.word	0x0800915f
 8009098:	08009197 	.word	0x08009197
 800909c:	080091c3 	.word	0x080091c3
 80090a0:	08009215 	.word	0x08009215
 80090a4:	08009237 	.word	0x08009237
 80090a8:	08009273 	.word	0x08009273
 80090ac:	0800929b 	.word	0x0800929b
 80090b0:	080092d9 	.word	0x080092d9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f103 0110 	add.w	r1, r3, #16
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	795b      	ldrb	r3, [r3, #5]
 80090be:	461a      	mov	r2, r3
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f000 f945 	bl	8009350 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2202      	movs	r2, #2
 80090ca:	761a      	strb	r2, [r3, #24]
      break;
 80090cc:	e13b      	b.n	8009346 <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	795b      	ldrb	r3, [r3, #5]
 80090d2:	4619      	mov	r1, r3
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f000 fcbd 	bl	8009a54 <USBH_LL_GetURBState>
 80090da:	4603      	mov	r3, r0
 80090dc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80090de:	7bbb      	ldrb	r3, [r7, #14]
 80090e0:	2b01      	cmp	r3, #1
 80090e2:	d11e      	bne.n	8009122 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	7c1b      	ldrb	r3, [r3, #16]
 80090e8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80090ec:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	8adb      	ldrh	r3, [r3, #22]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d00a      	beq.n	800910c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80090f6:	7b7b      	ldrb	r3, [r7, #13]
 80090f8:	2b80      	cmp	r3, #128	; 0x80
 80090fa:	d103      	bne.n	8009104 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2203      	movs	r2, #3
 8009100:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009102:	e117      	b.n	8009334 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2205      	movs	r2, #5
 8009108:	761a      	strb	r2, [r3, #24]
      break;
 800910a:	e113      	b.n	8009334 <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 800910c:	7b7b      	ldrb	r3, [r7, #13]
 800910e:	2b80      	cmp	r3, #128	; 0x80
 8009110:	d103      	bne.n	800911a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2209      	movs	r2, #9
 8009116:	761a      	strb	r2, [r3, #24]
      break;
 8009118:	e10c      	b.n	8009334 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2207      	movs	r2, #7
 800911e:	761a      	strb	r2, [r3, #24]
      break;
 8009120:	e108      	b.n	8009334 <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009122:	7bbb      	ldrb	r3, [r7, #14]
 8009124:	2b04      	cmp	r3, #4
 8009126:	d003      	beq.n	8009130 <USBH_HandleControl+0xcc>
 8009128:	7bbb      	ldrb	r3, [r7, #14]
 800912a:	2b02      	cmp	r3, #2
 800912c:	f040 8102 	bne.w	8009334 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	220b      	movs	r2, #11
 8009134:	761a      	strb	r2, [r3, #24]
      break;
 8009136:	e0fd      	b.n	8009334 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800913e:	b29a      	uxth	r2, r3
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	6899      	ldr	r1, [r3, #8]
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	899a      	ldrh	r2, [r3, #12]
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	791b      	ldrb	r3, [r3, #4]
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f000 f93c 	bl	80093ce <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2204      	movs	r2, #4
 800915a:	761a      	strb	r2, [r3, #24]
      break;
 800915c:	e0f3      	b.n	8009346 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	791b      	ldrb	r3, [r3, #4]
 8009162:	4619      	mov	r1, r3
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f000 fc75 	bl	8009a54 <USBH_LL_GetURBState>
 800916a:	4603      	mov	r3, r0
 800916c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800916e:	7bbb      	ldrb	r3, [r7, #14]
 8009170:	2b01      	cmp	r3, #1
 8009172:	d102      	bne.n	800917a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2209      	movs	r2, #9
 8009178:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800917a:	7bbb      	ldrb	r3, [r7, #14]
 800917c:	2b05      	cmp	r3, #5
 800917e:	d102      	bne.n	8009186 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009180:	2303      	movs	r3, #3
 8009182:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009184:	e0d8      	b.n	8009338 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8009186:	7bbb      	ldrb	r3, [r7, #14]
 8009188:	2b04      	cmp	r3, #4
 800918a:	f040 80d5 	bne.w	8009338 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	220b      	movs	r2, #11
 8009192:	761a      	strb	r2, [r3, #24]
      break;
 8009194:	e0d0      	b.n	8009338 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6899      	ldr	r1, [r3, #8]
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	899a      	ldrh	r2, [r3, #12]
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	7958      	ldrb	r0, [r3, #5]
 80091a2:	2301      	movs	r3, #1
 80091a4:	9300      	str	r3, [sp, #0]
 80091a6:	4603      	mov	r3, r0
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f000 f8eb 	bl	8009384 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80091b4:	b29a      	uxth	r2, r3
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2206      	movs	r2, #6
 80091be:	761a      	strb	r2, [r3, #24]
      break;
 80091c0:	e0c1      	b.n	8009346 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	795b      	ldrb	r3, [r3, #5]
 80091c6:	4619      	mov	r1, r3
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	f000 fc43 	bl	8009a54 <USBH_LL_GetURBState>
 80091ce:	4603      	mov	r3, r0
 80091d0:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80091d2:	7bbb      	ldrb	r3, [r7, #14]
 80091d4:	2b01      	cmp	r3, #1
 80091d6:	d103      	bne.n	80091e0 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2207      	movs	r2, #7
 80091dc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80091de:	e0ad      	b.n	800933c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 80091e0:	7bbb      	ldrb	r3, [r7, #14]
 80091e2:	2b05      	cmp	r3, #5
 80091e4:	d105      	bne.n	80091f2 <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	220c      	movs	r2, #12
 80091ea:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80091ec:	2303      	movs	r3, #3
 80091ee:	73fb      	strb	r3, [r7, #15]
      break;
 80091f0:	e0a4      	b.n	800933c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 80091f2:	7bbb      	ldrb	r3, [r7, #14]
 80091f4:	2b02      	cmp	r3, #2
 80091f6:	d103      	bne.n	8009200 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2205      	movs	r2, #5
 80091fc:	761a      	strb	r2, [r3, #24]
      break;
 80091fe:	e09d      	b.n	800933c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 8009200:	7bbb      	ldrb	r3, [r7, #14]
 8009202:	2b04      	cmp	r3, #4
 8009204:	f040 809a 	bne.w	800933c <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	220b      	movs	r2, #11
 800920c:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800920e:	2302      	movs	r3, #2
 8009210:	73fb      	strb	r3, [r7, #15]
      break;
 8009212:	e093      	b.n	800933c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	791b      	ldrb	r3, [r3, #4]
 8009218:	2200      	movs	r2, #0
 800921a:	2100      	movs	r1, #0
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	f000 f8d6 	bl	80093ce <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009228:	b29a      	uxth	r2, r3
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2208      	movs	r2, #8
 8009232:	761a      	strb	r2, [r3, #24]

      break;
 8009234:	e087      	b.n	8009346 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	791b      	ldrb	r3, [r3, #4]
 800923a:	4619      	mov	r1, r3
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f000 fc09 	bl	8009a54 <USBH_LL_GetURBState>
 8009242:	4603      	mov	r3, r0
 8009244:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009246:	7bbb      	ldrb	r3, [r7, #14]
 8009248:	2b01      	cmp	r3, #1
 800924a:	d105      	bne.n	8009258 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	220d      	movs	r2, #13
 8009250:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009252:	2300      	movs	r3, #0
 8009254:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009256:	e073      	b.n	8009340 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 8009258:	7bbb      	ldrb	r3, [r7, #14]
 800925a:	2b04      	cmp	r3, #4
 800925c:	d103      	bne.n	8009266 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	220b      	movs	r2, #11
 8009262:	761a      	strb	r2, [r3, #24]
      break;
 8009264:	e06c      	b.n	8009340 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 8009266:	7bbb      	ldrb	r3, [r7, #14]
 8009268:	2b05      	cmp	r3, #5
 800926a:	d169      	bne.n	8009340 <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 800926c:	2303      	movs	r3, #3
 800926e:	73fb      	strb	r3, [r7, #15]
      break;
 8009270:	e066      	b.n	8009340 <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	795a      	ldrb	r2, [r3, #5]
 8009276:	2301      	movs	r3, #1
 8009278:	9300      	str	r3, [sp, #0]
 800927a:	4613      	mov	r3, r2
 800927c:	2200      	movs	r2, #0
 800927e:	2100      	movs	r1, #0
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	f000 f87f 	bl	8009384 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800928c:	b29a      	uxth	r2, r3
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	220a      	movs	r2, #10
 8009296:	761a      	strb	r2, [r3, #24]
      break;
 8009298:	e055      	b.n	8009346 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	795b      	ldrb	r3, [r3, #5]
 800929e:	4619      	mov	r1, r3
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f000 fbd7 	bl	8009a54 <USBH_LL_GetURBState>
 80092a6:	4603      	mov	r3, r0
 80092a8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80092aa:	7bbb      	ldrb	r3, [r7, #14]
 80092ac:	2b01      	cmp	r3, #1
 80092ae:	d105      	bne.n	80092bc <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 80092b0:	2300      	movs	r3, #0
 80092b2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	220d      	movs	r2, #13
 80092b8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80092ba:	e043      	b.n	8009344 <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 80092bc:	7bbb      	ldrb	r3, [r7, #14]
 80092be:	2b02      	cmp	r3, #2
 80092c0:	d103      	bne.n	80092ca <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	2209      	movs	r2, #9
 80092c6:	761a      	strb	r2, [r3, #24]
      break;
 80092c8:	e03c      	b.n	8009344 <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 80092ca:	7bbb      	ldrb	r3, [r7, #14]
 80092cc:	2b04      	cmp	r3, #4
 80092ce:	d139      	bne.n	8009344 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	220b      	movs	r2, #11
 80092d4:	761a      	strb	r2, [r3, #24]
      break;
 80092d6:	e035      	b.n	8009344 <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	7e5b      	ldrb	r3, [r3, #25]
 80092dc:	3301      	adds	r3, #1
 80092de:	b2da      	uxtb	r2, r3
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	765a      	strb	r2, [r3, #25]
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	7e5b      	ldrb	r3, [r3, #25]
 80092e8:	2b02      	cmp	r3, #2
 80092ea:	d806      	bhi.n	80092fa <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2201      	movs	r2, #1
 80092f0:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	2201      	movs	r2, #1
 80092f6:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80092f8:	e025      	b.n	8009346 <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009300:	2106      	movs	r1, #6
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2200      	movs	r2, #0
 800930a:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	795b      	ldrb	r3, [r3, #5]
 8009310:	4619      	mov	r1, r3
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f000 f90c 	bl	8009530 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	791b      	ldrb	r3, [r3, #4]
 800931c:	4619      	mov	r1, r3
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	f000 f906 	bl	8009530 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2200      	movs	r2, #0
 8009328:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800932a:	2302      	movs	r3, #2
 800932c:	73fb      	strb	r3, [r7, #15]
      break;
 800932e:	e00a      	b.n	8009346 <USBH_HandleControl+0x2e2>

    default:
      break;
 8009330:	bf00      	nop
 8009332:	e008      	b.n	8009346 <USBH_HandleControl+0x2e2>
      break;
 8009334:	bf00      	nop
 8009336:	e006      	b.n	8009346 <USBH_HandleControl+0x2e2>
      break;
 8009338:	bf00      	nop
 800933a:	e004      	b.n	8009346 <USBH_HandleControl+0x2e2>
      break;
 800933c:	bf00      	nop
 800933e:	e002      	b.n	8009346 <USBH_HandleControl+0x2e2>
      break;
 8009340:	bf00      	nop
 8009342:	e000      	b.n	8009346 <USBH_HandleControl+0x2e2>
      break;
 8009344:	bf00      	nop
  }

  return status;
 8009346:	7bfb      	ldrb	r3, [r7, #15]
}
 8009348:	4618      	mov	r0, r3
 800934a:	3710      	adds	r7, #16
 800934c:	46bd      	mov	sp, r7
 800934e:	bd80      	pop	{r7, pc}

08009350 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b088      	sub	sp, #32
 8009354:	af04      	add	r7, sp, #16
 8009356:	60f8      	str	r0, [r7, #12]
 8009358:	60b9      	str	r1, [r7, #8]
 800935a:	4613      	mov	r3, r2
 800935c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800935e:	79f9      	ldrb	r1, [r7, #7]
 8009360:	2300      	movs	r3, #0
 8009362:	9303      	str	r3, [sp, #12]
 8009364:	2308      	movs	r3, #8
 8009366:	9302      	str	r3, [sp, #8]
 8009368:	68bb      	ldr	r3, [r7, #8]
 800936a:	9301      	str	r3, [sp, #4]
 800936c:	2300      	movs	r3, #0
 800936e:	9300      	str	r3, [sp, #0]
 8009370:	2300      	movs	r3, #0
 8009372:	2200      	movs	r2, #0
 8009374:	68f8      	ldr	r0, [r7, #12]
 8009376:	f000 fb3c 	bl	80099f2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800937a:	2300      	movs	r3, #0
}
 800937c:	4618      	mov	r0, r3
 800937e:	3710      	adds	r7, #16
 8009380:	46bd      	mov	sp, r7
 8009382:	bd80      	pop	{r7, pc}

08009384 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b088      	sub	sp, #32
 8009388:	af04      	add	r7, sp, #16
 800938a:	60f8      	str	r0, [r7, #12]
 800938c:	60b9      	str	r1, [r7, #8]
 800938e:	4611      	mov	r1, r2
 8009390:	461a      	mov	r2, r3
 8009392:	460b      	mov	r3, r1
 8009394:	80fb      	strh	r3, [r7, #6]
 8009396:	4613      	mov	r3, r2
 8009398:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d001      	beq.n	80093a8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80093a4:	2300      	movs	r3, #0
 80093a6:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80093a8:	7979      	ldrb	r1, [r7, #5]
 80093aa:	7e3b      	ldrb	r3, [r7, #24]
 80093ac:	9303      	str	r3, [sp, #12]
 80093ae:	88fb      	ldrh	r3, [r7, #6]
 80093b0:	9302      	str	r3, [sp, #8]
 80093b2:	68bb      	ldr	r3, [r7, #8]
 80093b4:	9301      	str	r3, [sp, #4]
 80093b6:	2301      	movs	r3, #1
 80093b8:	9300      	str	r3, [sp, #0]
 80093ba:	2300      	movs	r3, #0
 80093bc:	2200      	movs	r2, #0
 80093be:	68f8      	ldr	r0, [r7, #12]
 80093c0:	f000 fb17 	bl	80099f2 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80093c4:	2300      	movs	r3, #0
}
 80093c6:	4618      	mov	r0, r3
 80093c8:	3710      	adds	r7, #16
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bd80      	pop	{r7, pc}

080093ce <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80093ce:	b580      	push	{r7, lr}
 80093d0:	b088      	sub	sp, #32
 80093d2:	af04      	add	r7, sp, #16
 80093d4:	60f8      	str	r0, [r7, #12]
 80093d6:	60b9      	str	r1, [r7, #8]
 80093d8:	4611      	mov	r1, r2
 80093da:	461a      	mov	r2, r3
 80093dc:	460b      	mov	r3, r1
 80093de:	80fb      	strh	r3, [r7, #6]
 80093e0:	4613      	mov	r3, r2
 80093e2:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80093e4:	7979      	ldrb	r1, [r7, #5]
 80093e6:	2300      	movs	r3, #0
 80093e8:	9303      	str	r3, [sp, #12]
 80093ea:	88fb      	ldrh	r3, [r7, #6]
 80093ec:	9302      	str	r3, [sp, #8]
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	9301      	str	r3, [sp, #4]
 80093f2:	2301      	movs	r3, #1
 80093f4:	9300      	str	r3, [sp, #0]
 80093f6:	2300      	movs	r3, #0
 80093f8:	2201      	movs	r2, #1
 80093fa:	68f8      	ldr	r0, [r7, #12]
 80093fc:	f000 faf9 	bl	80099f2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8009400:	2300      	movs	r3, #0

}
 8009402:	4618      	mov	r0, r3
 8009404:	3710      	adds	r7, #16
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}

0800940a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800940a:	b580      	push	{r7, lr}
 800940c:	b088      	sub	sp, #32
 800940e:	af04      	add	r7, sp, #16
 8009410:	60f8      	str	r0, [r7, #12]
 8009412:	60b9      	str	r1, [r7, #8]
 8009414:	4611      	mov	r1, r2
 8009416:	461a      	mov	r2, r3
 8009418:	460b      	mov	r3, r1
 800941a:	80fb      	strh	r3, [r7, #6]
 800941c:	4613      	mov	r3, r2
 800941e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009426:	2b00      	cmp	r3, #0
 8009428:	d001      	beq.n	800942e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800942a:	2300      	movs	r3, #0
 800942c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800942e:	7979      	ldrb	r1, [r7, #5]
 8009430:	7e3b      	ldrb	r3, [r7, #24]
 8009432:	9303      	str	r3, [sp, #12]
 8009434:	88fb      	ldrh	r3, [r7, #6]
 8009436:	9302      	str	r3, [sp, #8]
 8009438:	68bb      	ldr	r3, [r7, #8]
 800943a:	9301      	str	r3, [sp, #4]
 800943c:	2301      	movs	r3, #1
 800943e:	9300      	str	r3, [sp, #0]
 8009440:	2302      	movs	r3, #2
 8009442:	2200      	movs	r2, #0
 8009444:	68f8      	ldr	r0, [r7, #12]
 8009446:	f000 fad4 	bl	80099f2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800944a:	2300      	movs	r3, #0
}
 800944c:	4618      	mov	r0, r3
 800944e:	3710      	adds	r7, #16
 8009450:	46bd      	mov	sp, r7
 8009452:	bd80      	pop	{r7, pc}

08009454 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b088      	sub	sp, #32
 8009458:	af04      	add	r7, sp, #16
 800945a:	60f8      	str	r0, [r7, #12]
 800945c:	60b9      	str	r1, [r7, #8]
 800945e:	4611      	mov	r1, r2
 8009460:	461a      	mov	r2, r3
 8009462:	460b      	mov	r3, r1
 8009464:	80fb      	strh	r3, [r7, #6]
 8009466:	4613      	mov	r3, r2
 8009468:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800946a:	7979      	ldrb	r1, [r7, #5]
 800946c:	2300      	movs	r3, #0
 800946e:	9303      	str	r3, [sp, #12]
 8009470:	88fb      	ldrh	r3, [r7, #6]
 8009472:	9302      	str	r3, [sp, #8]
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	9301      	str	r3, [sp, #4]
 8009478:	2301      	movs	r3, #1
 800947a:	9300      	str	r3, [sp, #0]
 800947c:	2302      	movs	r3, #2
 800947e:	2201      	movs	r2, #1
 8009480:	68f8      	ldr	r0, [r7, #12]
 8009482:	f000 fab6 	bl	80099f2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8009486:	2300      	movs	r3, #0
}
 8009488:	4618      	mov	r0, r3
 800948a:	3710      	adds	r7, #16
 800948c:	46bd      	mov	sp, r7
 800948e:	bd80      	pop	{r7, pc}

08009490 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b086      	sub	sp, #24
 8009494:	af04      	add	r7, sp, #16
 8009496:	6078      	str	r0, [r7, #4]
 8009498:	4608      	mov	r0, r1
 800949a:	4611      	mov	r1, r2
 800949c:	461a      	mov	r2, r3
 800949e:	4603      	mov	r3, r0
 80094a0:	70fb      	strb	r3, [r7, #3]
 80094a2:	460b      	mov	r3, r1
 80094a4:	70bb      	strb	r3, [r7, #2]
 80094a6:	4613      	mov	r3, r2
 80094a8:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80094aa:	7878      	ldrb	r0, [r7, #1]
 80094ac:	78ba      	ldrb	r2, [r7, #2]
 80094ae:	78f9      	ldrb	r1, [r7, #3]
 80094b0:	8b3b      	ldrh	r3, [r7, #24]
 80094b2:	9302      	str	r3, [sp, #8]
 80094b4:	7d3b      	ldrb	r3, [r7, #20]
 80094b6:	9301      	str	r3, [sp, #4]
 80094b8:	7c3b      	ldrb	r3, [r7, #16]
 80094ba:	9300      	str	r3, [sp, #0]
 80094bc:	4603      	mov	r3, r0
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f000 fa49 	bl	8009956 <USBH_LL_OpenPipe>

  return USBH_OK;
 80094c4:	2300      	movs	r3, #0
}
 80094c6:	4618      	mov	r0, r3
 80094c8:	3708      	adds	r7, #8
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bd80      	pop	{r7, pc}

080094ce <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80094ce:	b580      	push	{r7, lr}
 80094d0:	b082      	sub	sp, #8
 80094d2:	af00      	add	r7, sp, #0
 80094d4:	6078      	str	r0, [r7, #4]
 80094d6:	460b      	mov	r3, r1
 80094d8:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 80094da:	78fb      	ldrb	r3, [r7, #3]
 80094dc:	4619      	mov	r1, r3
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	f000 fa68 	bl	80099b4 <USBH_LL_ClosePipe>

  return USBH_OK;
 80094e4:	2300      	movs	r3, #0
}
 80094e6:	4618      	mov	r0, r3
 80094e8:	3708      	adds	r7, #8
 80094ea:	46bd      	mov	sp, r7
 80094ec:	bd80      	pop	{r7, pc}

080094ee <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80094ee:	b580      	push	{r7, lr}
 80094f0:	b084      	sub	sp, #16
 80094f2:	af00      	add	r7, sp, #0
 80094f4:	6078      	str	r0, [r7, #4]
 80094f6:	460b      	mov	r3, r1
 80094f8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f000 f836 	bl	800956c <USBH_GetFreePipe>
 8009500:	4603      	mov	r3, r0
 8009502:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009504:	89fb      	ldrh	r3, [r7, #14]
 8009506:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800950a:	4293      	cmp	r3, r2
 800950c:	d00a      	beq.n	8009524 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800950e:	78fa      	ldrb	r2, [r7, #3]
 8009510:	89fb      	ldrh	r3, [r7, #14]
 8009512:	f003 030f 	and.w	r3, r3, #15
 8009516:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800951a:	6879      	ldr	r1, [r7, #4]
 800951c:	33e0      	adds	r3, #224	; 0xe0
 800951e:	009b      	lsls	r3, r3, #2
 8009520:	440b      	add	r3, r1
 8009522:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009524:	89fb      	ldrh	r3, [r7, #14]
 8009526:	b2db      	uxtb	r3, r3
}
 8009528:	4618      	mov	r0, r3
 800952a:	3710      	adds	r7, #16
 800952c:	46bd      	mov	sp, r7
 800952e:	bd80      	pop	{r7, pc}

08009530 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009530:	b480      	push	{r7}
 8009532:	b083      	sub	sp, #12
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
 8009538:	460b      	mov	r3, r1
 800953a:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800953c:	78fb      	ldrb	r3, [r7, #3]
 800953e:	2b0a      	cmp	r3, #10
 8009540:	d80d      	bhi.n	800955e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009542:	78fb      	ldrb	r3, [r7, #3]
 8009544:	687a      	ldr	r2, [r7, #4]
 8009546:	33e0      	adds	r3, #224	; 0xe0
 8009548:	009b      	lsls	r3, r3, #2
 800954a:	4413      	add	r3, r2
 800954c:	685a      	ldr	r2, [r3, #4]
 800954e:	78fb      	ldrb	r3, [r7, #3]
 8009550:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009554:	6879      	ldr	r1, [r7, #4]
 8009556:	33e0      	adds	r3, #224	; 0xe0
 8009558:	009b      	lsls	r3, r3, #2
 800955a:	440b      	add	r3, r1
 800955c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800955e:	2300      	movs	r3, #0
}
 8009560:	4618      	mov	r0, r3
 8009562:	370c      	adds	r7, #12
 8009564:	46bd      	mov	sp, r7
 8009566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956a:	4770      	bx	lr

0800956c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800956c:	b480      	push	{r7}
 800956e:	b085      	sub	sp, #20
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009574:	2300      	movs	r3, #0
 8009576:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8009578:	2300      	movs	r3, #0
 800957a:	73fb      	strb	r3, [r7, #15]
 800957c:	e00f      	b.n	800959e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800957e:	7bfb      	ldrb	r3, [r7, #15]
 8009580:	687a      	ldr	r2, [r7, #4]
 8009582:	33e0      	adds	r3, #224	; 0xe0
 8009584:	009b      	lsls	r3, r3, #2
 8009586:	4413      	add	r3, r2
 8009588:	685b      	ldr	r3, [r3, #4]
 800958a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800958e:	2b00      	cmp	r3, #0
 8009590:	d102      	bne.n	8009598 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009592:	7bfb      	ldrb	r3, [r7, #15]
 8009594:	b29b      	uxth	r3, r3
 8009596:	e007      	b.n	80095a8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8009598:	7bfb      	ldrb	r3, [r7, #15]
 800959a:	3301      	adds	r3, #1
 800959c:	73fb      	strb	r3, [r7, #15]
 800959e:	7bfb      	ldrb	r3, [r7, #15]
 80095a0:	2b0a      	cmp	r3, #10
 80095a2:	d9ec      	bls.n	800957e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80095a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80095a8:	4618      	mov	r0, r3
 80095aa:	3714      	adds	r7, #20
 80095ac:	46bd      	mov	sp, r7
 80095ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b2:	4770      	bx	lr

080095b4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80095b8:	2201      	movs	r2, #1
 80095ba:	490e      	ldr	r1, [pc, #56]	; (80095f4 <MX_USB_HOST_Init+0x40>)
 80095bc:	480e      	ldr	r0, [pc, #56]	; (80095f8 <MX_USB_HOST_Init+0x44>)
 80095be:	f7fe fc9f 	bl	8007f00 <USBH_Init>
 80095c2:	4603      	mov	r3, r0
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d001      	beq.n	80095cc <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80095c8:	f7f7 fb32 	bl	8000c30 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80095cc:	490b      	ldr	r1, [pc, #44]	; (80095fc <MX_USB_HOST_Init+0x48>)
 80095ce:	480a      	ldr	r0, [pc, #40]	; (80095f8 <MX_USB_HOST_Init+0x44>)
 80095d0:	f7fe fd24 	bl	800801c <USBH_RegisterClass>
 80095d4:	4603      	mov	r3, r0
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d001      	beq.n	80095de <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80095da:	f7f7 fb29 	bl	8000c30 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80095de:	4806      	ldr	r0, [pc, #24]	; (80095f8 <MX_USB_HOST_Init+0x44>)
 80095e0:	f7fe fda8 	bl	8008134 <USBH_Start>
 80095e4:	4603      	mov	r3, r0
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d001      	beq.n	80095ee <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80095ea:	f7f7 fb21 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80095ee:	bf00      	nop
 80095f0:	bd80      	pop	{r7, pc}
 80095f2:	bf00      	nop
 80095f4:	08009615 	.word	0x08009615
 80095f8:	200002c4 	.word	0x200002c4
 80095fc:	2000000c 	.word	0x2000000c

08009600 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8009604:	4802      	ldr	r0, [pc, #8]	; (8009610 <MX_USB_HOST_Process+0x10>)
 8009606:	f7fe fda5 	bl	8008154 <USBH_Process>
}
 800960a:	bf00      	nop
 800960c:	bd80      	pop	{r7, pc}
 800960e:	bf00      	nop
 8009610:	200002c4 	.word	0x200002c4

08009614 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009614:	b480      	push	{r7}
 8009616:	b083      	sub	sp, #12
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
 800961c:	460b      	mov	r3, r1
 800961e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009620:	78fb      	ldrb	r3, [r7, #3]
 8009622:	3b01      	subs	r3, #1
 8009624:	2b04      	cmp	r3, #4
 8009626:	d819      	bhi.n	800965c <USBH_UserProcess+0x48>
 8009628:	a201      	add	r2, pc, #4	; (adr r2, 8009630 <USBH_UserProcess+0x1c>)
 800962a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800962e:	bf00      	nop
 8009630:	0800965d 	.word	0x0800965d
 8009634:	0800964d 	.word	0x0800964d
 8009638:	0800965d 	.word	0x0800965d
 800963c:	08009655 	.word	0x08009655
 8009640:	08009645 	.word	0x08009645
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009644:	4b09      	ldr	r3, [pc, #36]	; (800966c <USBH_UserProcess+0x58>)
 8009646:	2203      	movs	r2, #3
 8009648:	701a      	strb	r2, [r3, #0]
  break;
 800964a:	e008      	b.n	800965e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800964c:	4b07      	ldr	r3, [pc, #28]	; (800966c <USBH_UserProcess+0x58>)
 800964e:	2202      	movs	r2, #2
 8009650:	701a      	strb	r2, [r3, #0]
  break;
 8009652:	e004      	b.n	800965e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009654:	4b05      	ldr	r3, [pc, #20]	; (800966c <USBH_UserProcess+0x58>)
 8009656:	2201      	movs	r2, #1
 8009658:	701a      	strb	r2, [r3, #0]
  break;
 800965a:	e000      	b.n	800965e <USBH_UserProcess+0x4a>

  default:
  break;
 800965c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800965e:	bf00      	nop
 8009660:	370c      	adds	r7, #12
 8009662:	46bd      	mov	sp, r7
 8009664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009668:	4770      	bx	lr
 800966a:	bf00      	nop
 800966c:	200000b4 	.word	0x200000b4

08009670 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b08a      	sub	sp, #40	; 0x28
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009678:	f107 0314 	add.w	r3, r7, #20
 800967c:	2200      	movs	r2, #0
 800967e:	601a      	str	r2, [r3, #0]
 8009680:	605a      	str	r2, [r3, #4]
 8009682:	609a      	str	r2, [r3, #8]
 8009684:	60da      	str	r2, [r3, #12]
 8009686:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009690:	d13f      	bne.n	8009712 <HAL_HCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009692:	2300      	movs	r3, #0
 8009694:	613b      	str	r3, [r7, #16]
 8009696:	4b21      	ldr	r3, [pc, #132]	; (800971c <HAL_HCD_MspInit+0xac>)
 8009698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800969a:	4a20      	ldr	r2, [pc, #128]	; (800971c <HAL_HCD_MspInit+0xac>)
 800969c:	f043 0301 	orr.w	r3, r3, #1
 80096a0:	6313      	str	r3, [r2, #48]	; 0x30
 80096a2:	4b1e      	ldr	r3, [pc, #120]	; (800971c <HAL_HCD_MspInit+0xac>)
 80096a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096a6:	f003 0301 	and.w	r3, r3, #1
 80096aa:	613b      	str	r3, [r7, #16]
 80096ac:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80096ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80096b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80096b4:	2300      	movs	r3, #0
 80096b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096b8:	2300      	movs	r3, #0
 80096ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80096bc:	f107 0314 	add.w	r3, r7, #20
 80096c0:	4619      	mov	r1, r3
 80096c2:	4817      	ldr	r0, [pc, #92]	; (8009720 <HAL_HCD_MspInit+0xb0>)
 80096c4:	f7f8 f836 	bl	8001734 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80096c8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80096cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80096ce:	2302      	movs	r3, #2
 80096d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096d2:	2300      	movs	r3, #0
 80096d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80096d6:	2300      	movs	r3, #0
 80096d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80096da:	230a      	movs	r3, #10
 80096dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80096de:	f107 0314 	add.w	r3, r7, #20
 80096e2:	4619      	mov	r1, r3
 80096e4:	480e      	ldr	r0, [pc, #56]	; (8009720 <HAL_HCD_MspInit+0xb0>)
 80096e6:	f7f8 f825 	bl	8001734 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80096ea:	4b0c      	ldr	r3, [pc, #48]	; (800971c <HAL_HCD_MspInit+0xac>)
 80096ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096ee:	4a0b      	ldr	r2, [pc, #44]	; (800971c <HAL_HCD_MspInit+0xac>)
 80096f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096f4:	6353      	str	r3, [r2, #52]	; 0x34
 80096f6:	2300      	movs	r3, #0
 80096f8:	60fb      	str	r3, [r7, #12]
 80096fa:	4b08      	ldr	r3, [pc, #32]	; (800971c <HAL_HCD_MspInit+0xac>)
 80096fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096fe:	4a07      	ldr	r2, [pc, #28]	; (800971c <HAL_HCD_MspInit+0xac>)
 8009700:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009704:	6453      	str	r3, [r2, #68]	; 0x44
 8009706:	4b05      	ldr	r3, [pc, #20]	; (800971c <HAL_HCD_MspInit+0xac>)
 8009708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800970a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800970e:	60fb      	str	r3, [r7, #12]
 8009710:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral interrupt init */
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009712:	bf00      	nop
 8009714:	3728      	adds	r7, #40	; 0x28
 8009716:	46bd      	mov	sp, r7
 8009718:	bd80      	pop	{r7, pc}
 800971a:	bf00      	nop
 800971c:	40023800 	.word	0x40023800
 8009720:	40020000 	.word	0x40020000

08009724 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b082      	sub	sp, #8
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009732:	4618      	mov	r0, r3
 8009734:	f7ff f8e1 	bl	80088fa <USBH_LL_IncTimer>
}
 8009738:	bf00      	nop
 800973a:	3708      	adds	r7, #8
 800973c:	46bd      	mov	sp, r7
 800973e:	bd80      	pop	{r7, pc}

08009740 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b082      	sub	sp, #8
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800974e:	4618      	mov	r0, r3
 8009750:	f7ff f919 	bl	8008986 <USBH_LL_Connect>
}
 8009754:	bf00      	nop
 8009756:	3708      	adds	r7, #8
 8009758:	46bd      	mov	sp, r7
 800975a:	bd80      	pop	{r7, pc}

0800975c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b082      	sub	sp, #8
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800976a:	4618      	mov	r0, r3
 800976c:	f7ff f922 	bl	80089b4 <USBH_LL_Disconnect>
}
 8009770:	bf00      	nop
 8009772:	3708      	adds	r7, #8
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}

08009778 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009778:	b480      	push	{r7}
 800977a:	b083      	sub	sp, #12
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
 8009780:	460b      	mov	r3, r1
 8009782:	70fb      	strb	r3, [r7, #3]
 8009784:	4613      	mov	r3, r2
 8009786:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009788:	bf00      	nop
 800978a:	370c      	adds	r7, #12
 800978c:	46bd      	mov	sp, r7
 800978e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009792:	4770      	bx	lr

08009794 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b082      	sub	sp, #8
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80097a2:	4618      	mov	r0, r3
 80097a4:	f7ff f8d3 	bl	800894e <USBH_LL_PortEnabled>
} 
 80097a8:	bf00      	nop
 80097aa:	3708      	adds	r7, #8
 80097ac:	46bd      	mov	sp, r7
 80097ae:	bd80      	pop	{r7, pc}

080097b0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b082      	sub	sp, #8
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80097be:	4618      	mov	r0, r3
 80097c0:	f7ff f8d3 	bl	800896a <USBH_LL_PortDisabled>
} 
 80097c4:	bf00      	nop
 80097c6:	3708      	adds	r7, #8
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd80      	pop	{r7, pc}

080097cc <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b082      	sub	sp, #8
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80097da:	2b01      	cmp	r3, #1
 80097dc:	d12a      	bne.n	8009834 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80097de:	4a18      	ldr	r2, [pc, #96]	; (8009840 <USBH_LL_Init+0x74>)
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	4a15      	ldr	r2, [pc, #84]	; (8009840 <USBH_LL_Init+0x74>)
 80097ea:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80097ee:	4b14      	ldr	r3, [pc, #80]	; (8009840 <USBH_LL_Init+0x74>)
 80097f0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80097f4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80097f6:	4b12      	ldr	r3, [pc, #72]	; (8009840 <USBH_LL_Init+0x74>)
 80097f8:	2208      	movs	r2, #8
 80097fa:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80097fc:	4b10      	ldr	r3, [pc, #64]	; (8009840 <USBH_LL_Init+0x74>)
 80097fe:	2201      	movs	r2, #1
 8009800:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009802:	4b0f      	ldr	r3, [pc, #60]	; (8009840 <USBH_LL_Init+0x74>)
 8009804:	2200      	movs	r2, #0
 8009806:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009808:	4b0d      	ldr	r3, [pc, #52]	; (8009840 <USBH_LL_Init+0x74>)
 800980a:	2202      	movs	r2, #2
 800980c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800980e:	4b0c      	ldr	r3, [pc, #48]	; (8009840 <USBH_LL_Init+0x74>)
 8009810:	2200      	movs	r2, #0
 8009812:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009814:	480a      	ldr	r0, [pc, #40]	; (8009840 <USBH_LL_Init+0x74>)
 8009816:	f7f8 f973 	bl	8001b00 <HAL_HCD_Init>
 800981a:	4603      	mov	r3, r0
 800981c:	2b00      	cmp	r3, #0
 800981e:	d001      	beq.n	8009824 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8009820:	f7f7 fa06 	bl	8000c30 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009824:	4806      	ldr	r0, [pc, #24]	; (8009840 <USBH_LL_Init+0x74>)
 8009826:	f7f8 fd77 	bl	8002318 <HAL_HCD_GetCurrentFrame>
 800982a:	4603      	mov	r3, r0
 800982c:	4619      	mov	r1, r3
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	f7ff f854 	bl	80088dc <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009834:	2300      	movs	r3, #0
}
 8009836:	4618      	mov	r0, r3
 8009838:	3708      	adds	r7, #8
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}
 800983e:	bf00      	nop
 8009840:	2000069c 	.word	0x2000069c

08009844 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b084      	sub	sp, #16
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800984c:	2300      	movs	r3, #0
 800984e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009850:	2300      	movs	r3, #0
 8009852:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800985a:	4618      	mov	r0, r3
 800985c:	f7f8 fce4 	bl	8002228 <HAL_HCD_Start>
 8009860:	4603      	mov	r3, r0
 8009862:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009864:	7bfb      	ldrb	r3, [r7, #15]
 8009866:	4618      	mov	r0, r3
 8009868:	f000 f95c 	bl	8009b24 <USBH_Get_USB_Status>
 800986c:	4603      	mov	r3, r0
 800986e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8009870:	7bbb      	ldrb	r3, [r7, #14]
}
 8009872:	4618      	mov	r0, r3
 8009874:	3710      	adds	r7, #16
 8009876:	46bd      	mov	sp, r7
 8009878:	bd80      	pop	{r7, pc}

0800987a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800987a:	b580      	push	{r7, lr}
 800987c:	b084      	sub	sp, #16
 800987e:	af00      	add	r7, sp, #0
 8009880:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009882:	2300      	movs	r3, #0
 8009884:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009886:	2300      	movs	r3, #0
 8009888:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009890:	4618      	mov	r0, r3
 8009892:	f7f8 fcec 	bl	800226e <HAL_HCD_Stop>
 8009896:	4603      	mov	r3, r0
 8009898:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800989a:	7bfb      	ldrb	r3, [r7, #15]
 800989c:	4618      	mov	r0, r3
 800989e:	f000 f941 	bl	8009b24 <USBH_Get_USB_Status>
 80098a2:	4603      	mov	r3, r0
 80098a4:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 80098a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80098a8:	4618      	mov	r0, r3
 80098aa:	3710      	adds	r7, #16
 80098ac:	46bd      	mov	sp, r7
 80098ae:	bd80      	pop	{r7, pc}

080098b0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b084      	sub	sp, #16
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80098b8:	2301      	movs	r3, #1
 80098ba:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80098c2:	4618      	mov	r0, r3
 80098c4:	f7f8 fd36 	bl	8002334 <HAL_HCD_GetCurrentSpeed>
 80098c8:	4603      	mov	r3, r0
 80098ca:	2b01      	cmp	r3, #1
 80098cc:	d007      	beq.n	80098de <USBH_LL_GetSpeed+0x2e>
 80098ce:	2b01      	cmp	r3, #1
 80098d0:	d302      	bcc.n	80098d8 <USBH_LL_GetSpeed+0x28>
 80098d2:	2b02      	cmp	r3, #2
 80098d4:	d006      	beq.n	80098e4 <USBH_LL_GetSpeed+0x34>
 80098d6:	e008      	b.n	80098ea <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80098d8:	2300      	movs	r3, #0
 80098da:	73fb      	strb	r3, [r7, #15]
    break;
 80098dc:	e008      	b.n	80098f0 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 80098de:	2301      	movs	r3, #1
 80098e0:	73fb      	strb	r3, [r7, #15]
    break;
 80098e2:	e005      	b.n	80098f0 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 80098e4:	2302      	movs	r3, #2
 80098e6:	73fb      	strb	r3, [r7, #15]
    break;
 80098e8:	e002      	b.n	80098f0 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 80098ea:	2301      	movs	r3, #1
 80098ec:	73fb      	strb	r3, [r7, #15]
    break;
 80098ee:	bf00      	nop
  }
  return  speed;
 80098f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80098f2:	4618      	mov	r0, r3
 80098f4:	3710      	adds	r7, #16
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bd80      	pop	{r7, pc}

080098fa <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80098fa:	b580      	push	{r7, lr}
 80098fc:	b084      	sub	sp, #16
 80098fe:	af00      	add	r7, sp, #0
 8009900:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009902:	2300      	movs	r3, #0
 8009904:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009906:	2300      	movs	r3, #0
 8009908:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009910:	4618      	mov	r0, r3
 8009912:	f7f8 fcc9 	bl	80022a8 <HAL_HCD_ResetPort>
 8009916:	4603      	mov	r3, r0
 8009918:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 800991a:	7bfb      	ldrb	r3, [r7, #15]
 800991c:	4618      	mov	r0, r3
 800991e:	f000 f901 	bl	8009b24 <USBH_Get_USB_Status>
 8009922:	4603      	mov	r3, r0
 8009924:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8009926:	7bbb      	ldrb	r3, [r7, #14]
}
 8009928:	4618      	mov	r0, r3
 800992a:	3710      	adds	r7, #16
 800992c:	46bd      	mov	sp, r7
 800992e:	bd80      	pop	{r7, pc}

08009930 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b082      	sub	sp, #8
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
 8009938:	460b      	mov	r3, r1
 800993a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009942:	78fa      	ldrb	r2, [r7, #3]
 8009944:	4611      	mov	r1, r2
 8009946:	4618      	mov	r0, r3
 8009948:	f7f8 fcd1 	bl	80022ee <HAL_HCD_HC_GetXferCount>
 800994c:	4603      	mov	r3, r0
}
 800994e:	4618      	mov	r0, r3
 8009950:	3708      	adds	r7, #8
 8009952:	46bd      	mov	sp, r7
 8009954:	bd80      	pop	{r7, pc}

08009956 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009956:	b590      	push	{r4, r7, lr}
 8009958:	b089      	sub	sp, #36	; 0x24
 800995a:	af04      	add	r7, sp, #16
 800995c:	6078      	str	r0, [r7, #4]
 800995e:	4608      	mov	r0, r1
 8009960:	4611      	mov	r1, r2
 8009962:	461a      	mov	r2, r3
 8009964:	4603      	mov	r3, r0
 8009966:	70fb      	strb	r3, [r7, #3]
 8009968:	460b      	mov	r3, r1
 800996a:	70bb      	strb	r3, [r7, #2]
 800996c:	4613      	mov	r3, r2
 800996e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009970:	2300      	movs	r3, #0
 8009972:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009974:	2300      	movs	r3, #0
 8009976:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800997e:	787c      	ldrb	r4, [r7, #1]
 8009980:	78ba      	ldrb	r2, [r7, #2]
 8009982:	78f9      	ldrb	r1, [r7, #3]
 8009984:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009986:	9302      	str	r3, [sp, #8]
 8009988:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800998c:	9301      	str	r3, [sp, #4]
 800998e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009992:	9300      	str	r3, [sp, #0]
 8009994:	4623      	mov	r3, r4
 8009996:	f7f8 f915 	bl	8001bc4 <HAL_HCD_HC_Init>
 800999a:	4603      	mov	r3, r0
 800999c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800999e:	7bfb      	ldrb	r3, [r7, #15]
 80099a0:	4618      	mov	r0, r3
 80099a2:	f000 f8bf 	bl	8009b24 <USBH_Get_USB_Status>
 80099a6:	4603      	mov	r3, r0
 80099a8:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80099aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80099ac:	4618      	mov	r0, r3
 80099ae:	3714      	adds	r7, #20
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bd90      	pop	{r4, r7, pc}

080099b4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b084      	sub	sp, #16
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
 80099bc:	460b      	mov	r3, r1
 80099be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099c0:	2300      	movs	r3, #0
 80099c2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80099c4:	2300      	movs	r3, #0
 80099c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80099ce:	78fa      	ldrb	r2, [r7, #3]
 80099d0:	4611      	mov	r1, r2
 80099d2:	4618      	mov	r0, r3
 80099d4:	f7f8 f98e 	bl	8001cf4 <HAL_HCD_HC_Halt>
 80099d8:	4603      	mov	r3, r0
 80099da:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80099dc:	7bfb      	ldrb	r3, [r7, #15]
 80099de:	4618      	mov	r0, r3
 80099e0:	f000 f8a0 	bl	8009b24 <USBH_Get_USB_Status>
 80099e4:	4603      	mov	r3, r0
 80099e6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80099e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	3710      	adds	r7, #16
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd80      	pop	{r7, pc}

080099f2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80099f2:	b590      	push	{r4, r7, lr}
 80099f4:	b089      	sub	sp, #36	; 0x24
 80099f6:	af04      	add	r7, sp, #16
 80099f8:	6078      	str	r0, [r7, #4]
 80099fa:	4608      	mov	r0, r1
 80099fc:	4611      	mov	r1, r2
 80099fe:	461a      	mov	r2, r3
 8009a00:	4603      	mov	r3, r0
 8009a02:	70fb      	strb	r3, [r7, #3]
 8009a04:	460b      	mov	r3, r1
 8009a06:	70bb      	strb	r3, [r7, #2]
 8009a08:	4613      	mov	r3, r2
 8009a0a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009a10:	2300      	movs	r3, #0
 8009a12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009a1a:	787c      	ldrb	r4, [r7, #1]
 8009a1c:	78ba      	ldrb	r2, [r7, #2]
 8009a1e:	78f9      	ldrb	r1, [r7, #3]
 8009a20:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009a24:	9303      	str	r3, [sp, #12]
 8009a26:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009a28:	9302      	str	r3, [sp, #8]
 8009a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a2c:	9301      	str	r3, [sp, #4]
 8009a2e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009a32:	9300      	str	r3, [sp, #0]
 8009a34:	4623      	mov	r3, r4
 8009a36:	f7f8 f981 	bl	8001d3c <HAL_HCD_HC_SubmitRequest>
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8009a3e:	7bfb      	ldrb	r3, [r7, #15]
 8009a40:	4618      	mov	r0, r3
 8009a42:	f000 f86f 	bl	8009b24 <USBH_Get_USB_Status>
 8009a46:	4603      	mov	r3, r0
 8009a48:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8009a4a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	3714      	adds	r7, #20
 8009a50:	46bd      	mov	sp, r7
 8009a52:	bd90      	pop	{r4, r7, pc}

08009a54 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b082      	sub	sp, #8
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
 8009a5c:	460b      	mov	r3, r1
 8009a5e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009a66:	78fa      	ldrb	r2, [r7, #3]
 8009a68:	4611      	mov	r1, r2
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f7f8 fc2a 	bl	80022c4 <HAL_HCD_HC_GetURBState>
 8009a70:	4603      	mov	r3, r0
}
 8009a72:	4618      	mov	r0, r3
 8009a74:	3708      	adds	r7, #8
 8009a76:	46bd      	mov	sp, r7
 8009a78:	bd80      	pop	{r7, pc}

08009a7a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009a7a:	b580      	push	{r7, lr}
 8009a7c:	b082      	sub	sp, #8
 8009a7e:	af00      	add	r7, sp, #0
 8009a80:	6078      	str	r0, [r7, #4]
 8009a82:	460b      	mov	r3, r1
 8009a84:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009a8c:	2b01      	cmp	r3, #1
 8009a8e:	d103      	bne.n	8009a98 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009a90:	78fb      	ldrb	r3, [r7, #3]
 8009a92:	4618      	mov	r0, r3
 8009a94:	f000 f872 	bl	8009b7c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009a98:	20c8      	movs	r0, #200	; 0xc8
 8009a9a:	f7f7 fcf5 	bl	8001488 <HAL_Delay>
  return USBH_OK;
 8009a9e:	2300      	movs	r3, #0
}
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	3708      	adds	r7, #8
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}

08009aa8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009aa8:	b480      	push	{r7}
 8009aaa:	b085      	sub	sp, #20
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
 8009ab0:	460b      	mov	r3, r1
 8009ab2:	70fb      	strb	r3, [r7, #3]
 8009ab4:	4613      	mov	r3, r2
 8009ab6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009abe:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009ac0:	78fa      	ldrb	r2, [r7, #3]
 8009ac2:	68f9      	ldr	r1, [r7, #12]
 8009ac4:	4613      	mov	r3, r2
 8009ac6:	009b      	lsls	r3, r3, #2
 8009ac8:	4413      	add	r3, r2
 8009aca:	00db      	lsls	r3, r3, #3
 8009acc:	440b      	add	r3, r1
 8009ace:	333b      	adds	r3, #59	; 0x3b
 8009ad0:	781b      	ldrb	r3, [r3, #0]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d00a      	beq.n	8009aec <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009ad6:	78fa      	ldrb	r2, [r7, #3]
 8009ad8:	68f9      	ldr	r1, [r7, #12]
 8009ada:	4613      	mov	r3, r2
 8009adc:	009b      	lsls	r3, r3, #2
 8009ade:	4413      	add	r3, r2
 8009ae0:	00db      	lsls	r3, r3, #3
 8009ae2:	440b      	add	r3, r1
 8009ae4:	3350      	adds	r3, #80	; 0x50
 8009ae6:	78ba      	ldrb	r2, [r7, #2]
 8009ae8:	701a      	strb	r2, [r3, #0]
 8009aea:	e009      	b.n	8009b00 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009aec:	78fa      	ldrb	r2, [r7, #3]
 8009aee:	68f9      	ldr	r1, [r7, #12]
 8009af0:	4613      	mov	r3, r2
 8009af2:	009b      	lsls	r3, r3, #2
 8009af4:	4413      	add	r3, r2
 8009af6:	00db      	lsls	r3, r3, #3
 8009af8:	440b      	add	r3, r1
 8009afa:	3351      	adds	r3, #81	; 0x51
 8009afc:	78ba      	ldrb	r2, [r7, #2]
 8009afe:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009b00:	2300      	movs	r3, #0
}
 8009b02:	4618      	mov	r0, r3
 8009b04:	3714      	adds	r7, #20
 8009b06:	46bd      	mov	sp, r7
 8009b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0c:	4770      	bx	lr

08009b0e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8009b0e:	b580      	push	{r7, lr}
 8009b10:	b082      	sub	sp, #8
 8009b12:	af00      	add	r7, sp, #0
 8009b14:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009b16:	6878      	ldr	r0, [r7, #4]
 8009b18:	f7f7 fcb6 	bl	8001488 <HAL_Delay>
}
 8009b1c:	bf00      	nop
 8009b1e:	3708      	adds	r7, #8
 8009b20:	46bd      	mov	sp, r7
 8009b22:	bd80      	pop	{r7, pc}

08009b24 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009b24:	b480      	push	{r7}
 8009b26:	b085      	sub	sp, #20
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009b2e:	2300      	movs	r3, #0
 8009b30:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009b32:	79fb      	ldrb	r3, [r7, #7]
 8009b34:	2b03      	cmp	r3, #3
 8009b36:	d817      	bhi.n	8009b68 <USBH_Get_USB_Status+0x44>
 8009b38:	a201      	add	r2, pc, #4	; (adr r2, 8009b40 <USBH_Get_USB_Status+0x1c>)
 8009b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b3e:	bf00      	nop
 8009b40:	08009b51 	.word	0x08009b51
 8009b44:	08009b57 	.word	0x08009b57
 8009b48:	08009b5d 	.word	0x08009b5d
 8009b4c:	08009b63 	.word	0x08009b63
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009b50:	2300      	movs	r3, #0
 8009b52:	73fb      	strb	r3, [r7, #15]
    break;
 8009b54:	e00b      	b.n	8009b6e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009b56:	2302      	movs	r3, #2
 8009b58:	73fb      	strb	r3, [r7, #15]
    break;
 8009b5a:	e008      	b.n	8009b6e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009b5c:	2301      	movs	r3, #1
 8009b5e:	73fb      	strb	r3, [r7, #15]
    break;
 8009b60:	e005      	b.n	8009b6e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009b62:	2302      	movs	r3, #2
 8009b64:	73fb      	strb	r3, [r7, #15]
    break;
 8009b66:	e002      	b.n	8009b6e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009b68:	2302      	movs	r3, #2
 8009b6a:	73fb      	strb	r3, [r7, #15]
    break;
 8009b6c:	bf00      	nop
  }
  return usb_status;
 8009b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b70:	4618      	mov	r0, r3
 8009b72:	3714      	adds	r7, #20
 8009b74:	46bd      	mov	sp, r7
 8009b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7a:	4770      	bx	lr

08009b7c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b084      	sub	sp, #16
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	4603      	mov	r3, r0
 8009b84:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 8009b86:	79fb      	ldrb	r3, [r7, #7]
 8009b88:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8009b8a:	79fb      	ldrb	r3, [r7, #7]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d102      	bne.n	8009b96 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 8009b90:	2301      	movs	r3, #1
 8009b92:	73fb      	strb	r3, [r7, #15]
 8009b94:	e001      	b.n	8009b9a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8009b96:	2300      	movs	r3, #0
 8009b98:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8009b9a:	7bfb      	ldrb	r3, [r7, #15]
 8009b9c:	461a      	mov	r2, r3
 8009b9e:	2101      	movs	r1, #1
 8009ba0:	4803      	ldr	r0, [pc, #12]	; (8009bb0 <MX_DriverVbusFS+0x34>)
 8009ba2:	f7f7 ff61 	bl	8001a68 <HAL_GPIO_WritePin>
}
 8009ba6:	bf00      	nop
 8009ba8:	3710      	adds	r7, #16
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}
 8009bae:	bf00      	nop
 8009bb0:	40020800 	.word	0x40020800

08009bb4 <__errno>:
 8009bb4:	4b01      	ldr	r3, [pc, #4]	; (8009bbc <__errno+0x8>)
 8009bb6:	6818      	ldr	r0, [r3, #0]
 8009bb8:	4770      	bx	lr
 8009bba:	bf00      	nop
 8009bbc:	2000002c 	.word	0x2000002c

08009bc0 <__libc_init_array>:
 8009bc0:	b570      	push	{r4, r5, r6, lr}
 8009bc2:	4e0d      	ldr	r6, [pc, #52]	; (8009bf8 <__libc_init_array+0x38>)
 8009bc4:	4c0d      	ldr	r4, [pc, #52]	; (8009bfc <__libc_init_array+0x3c>)
 8009bc6:	1ba4      	subs	r4, r4, r6
 8009bc8:	10a4      	asrs	r4, r4, #2
 8009bca:	2500      	movs	r5, #0
 8009bcc:	42a5      	cmp	r5, r4
 8009bce:	d109      	bne.n	8009be4 <__libc_init_array+0x24>
 8009bd0:	4e0b      	ldr	r6, [pc, #44]	; (8009c00 <__libc_init_array+0x40>)
 8009bd2:	4c0c      	ldr	r4, [pc, #48]	; (8009c04 <__libc_init_array+0x44>)
 8009bd4:	f000 f8ea 	bl	8009dac <_init>
 8009bd8:	1ba4      	subs	r4, r4, r6
 8009bda:	10a4      	asrs	r4, r4, #2
 8009bdc:	2500      	movs	r5, #0
 8009bde:	42a5      	cmp	r5, r4
 8009be0:	d105      	bne.n	8009bee <__libc_init_array+0x2e>
 8009be2:	bd70      	pop	{r4, r5, r6, pc}
 8009be4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009be8:	4798      	blx	r3
 8009bea:	3501      	adds	r5, #1
 8009bec:	e7ee      	b.n	8009bcc <__libc_init_array+0xc>
 8009bee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009bf2:	4798      	blx	r3
 8009bf4:	3501      	adds	r5, #1
 8009bf6:	e7f2      	b.n	8009bde <__libc_init_array+0x1e>
 8009bf8:	08009de8 	.word	0x08009de8
 8009bfc:	08009de8 	.word	0x08009de8
 8009c00:	08009de8 	.word	0x08009de8
 8009c04:	08009dec 	.word	0x08009dec

08009c08 <malloc>:
 8009c08:	4b02      	ldr	r3, [pc, #8]	; (8009c14 <malloc+0xc>)
 8009c0a:	4601      	mov	r1, r0
 8009c0c:	6818      	ldr	r0, [r3, #0]
 8009c0e:	f000 b861 	b.w	8009cd4 <_malloc_r>
 8009c12:	bf00      	nop
 8009c14:	2000002c 	.word	0x2000002c

08009c18 <free>:
 8009c18:	4b02      	ldr	r3, [pc, #8]	; (8009c24 <free+0xc>)
 8009c1a:	4601      	mov	r1, r0
 8009c1c:	6818      	ldr	r0, [r3, #0]
 8009c1e:	f000 b80b 	b.w	8009c38 <_free_r>
 8009c22:	bf00      	nop
 8009c24:	2000002c 	.word	0x2000002c

08009c28 <memset>:
 8009c28:	4402      	add	r2, r0
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	4293      	cmp	r3, r2
 8009c2e:	d100      	bne.n	8009c32 <memset+0xa>
 8009c30:	4770      	bx	lr
 8009c32:	f803 1b01 	strb.w	r1, [r3], #1
 8009c36:	e7f9      	b.n	8009c2c <memset+0x4>

08009c38 <_free_r>:
 8009c38:	b538      	push	{r3, r4, r5, lr}
 8009c3a:	4605      	mov	r5, r0
 8009c3c:	2900      	cmp	r1, #0
 8009c3e:	d045      	beq.n	8009ccc <_free_r+0x94>
 8009c40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c44:	1f0c      	subs	r4, r1, #4
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	bfb8      	it	lt
 8009c4a:	18e4      	addlt	r4, r4, r3
 8009c4c:	f000 f8ac 	bl	8009da8 <__malloc_lock>
 8009c50:	4a1f      	ldr	r2, [pc, #124]	; (8009cd0 <_free_r+0x98>)
 8009c52:	6813      	ldr	r3, [r2, #0]
 8009c54:	4610      	mov	r0, r2
 8009c56:	b933      	cbnz	r3, 8009c66 <_free_r+0x2e>
 8009c58:	6063      	str	r3, [r4, #4]
 8009c5a:	6014      	str	r4, [r2, #0]
 8009c5c:	4628      	mov	r0, r5
 8009c5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c62:	f000 b8a2 	b.w	8009daa <__malloc_unlock>
 8009c66:	42a3      	cmp	r3, r4
 8009c68:	d90c      	bls.n	8009c84 <_free_r+0x4c>
 8009c6a:	6821      	ldr	r1, [r4, #0]
 8009c6c:	1862      	adds	r2, r4, r1
 8009c6e:	4293      	cmp	r3, r2
 8009c70:	bf04      	itt	eq
 8009c72:	681a      	ldreq	r2, [r3, #0]
 8009c74:	685b      	ldreq	r3, [r3, #4]
 8009c76:	6063      	str	r3, [r4, #4]
 8009c78:	bf04      	itt	eq
 8009c7a:	1852      	addeq	r2, r2, r1
 8009c7c:	6022      	streq	r2, [r4, #0]
 8009c7e:	6004      	str	r4, [r0, #0]
 8009c80:	e7ec      	b.n	8009c5c <_free_r+0x24>
 8009c82:	4613      	mov	r3, r2
 8009c84:	685a      	ldr	r2, [r3, #4]
 8009c86:	b10a      	cbz	r2, 8009c8c <_free_r+0x54>
 8009c88:	42a2      	cmp	r2, r4
 8009c8a:	d9fa      	bls.n	8009c82 <_free_r+0x4a>
 8009c8c:	6819      	ldr	r1, [r3, #0]
 8009c8e:	1858      	adds	r0, r3, r1
 8009c90:	42a0      	cmp	r0, r4
 8009c92:	d10b      	bne.n	8009cac <_free_r+0x74>
 8009c94:	6820      	ldr	r0, [r4, #0]
 8009c96:	4401      	add	r1, r0
 8009c98:	1858      	adds	r0, r3, r1
 8009c9a:	4282      	cmp	r2, r0
 8009c9c:	6019      	str	r1, [r3, #0]
 8009c9e:	d1dd      	bne.n	8009c5c <_free_r+0x24>
 8009ca0:	6810      	ldr	r0, [r2, #0]
 8009ca2:	6852      	ldr	r2, [r2, #4]
 8009ca4:	605a      	str	r2, [r3, #4]
 8009ca6:	4401      	add	r1, r0
 8009ca8:	6019      	str	r1, [r3, #0]
 8009caa:	e7d7      	b.n	8009c5c <_free_r+0x24>
 8009cac:	d902      	bls.n	8009cb4 <_free_r+0x7c>
 8009cae:	230c      	movs	r3, #12
 8009cb0:	602b      	str	r3, [r5, #0]
 8009cb2:	e7d3      	b.n	8009c5c <_free_r+0x24>
 8009cb4:	6820      	ldr	r0, [r4, #0]
 8009cb6:	1821      	adds	r1, r4, r0
 8009cb8:	428a      	cmp	r2, r1
 8009cba:	bf04      	itt	eq
 8009cbc:	6811      	ldreq	r1, [r2, #0]
 8009cbe:	6852      	ldreq	r2, [r2, #4]
 8009cc0:	6062      	str	r2, [r4, #4]
 8009cc2:	bf04      	itt	eq
 8009cc4:	1809      	addeq	r1, r1, r0
 8009cc6:	6021      	streq	r1, [r4, #0]
 8009cc8:	605c      	str	r4, [r3, #4]
 8009cca:	e7c7      	b.n	8009c5c <_free_r+0x24>
 8009ccc:	bd38      	pop	{r3, r4, r5, pc}
 8009cce:	bf00      	nop
 8009cd0:	200000b8 	.word	0x200000b8

08009cd4 <_malloc_r>:
 8009cd4:	b570      	push	{r4, r5, r6, lr}
 8009cd6:	1ccd      	adds	r5, r1, #3
 8009cd8:	f025 0503 	bic.w	r5, r5, #3
 8009cdc:	3508      	adds	r5, #8
 8009cde:	2d0c      	cmp	r5, #12
 8009ce0:	bf38      	it	cc
 8009ce2:	250c      	movcc	r5, #12
 8009ce4:	2d00      	cmp	r5, #0
 8009ce6:	4606      	mov	r6, r0
 8009ce8:	db01      	blt.n	8009cee <_malloc_r+0x1a>
 8009cea:	42a9      	cmp	r1, r5
 8009cec:	d903      	bls.n	8009cf6 <_malloc_r+0x22>
 8009cee:	230c      	movs	r3, #12
 8009cf0:	6033      	str	r3, [r6, #0]
 8009cf2:	2000      	movs	r0, #0
 8009cf4:	bd70      	pop	{r4, r5, r6, pc}
 8009cf6:	f000 f857 	bl	8009da8 <__malloc_lock>
 8009cfa:	4a21      	ldr	r2, [pc, #132]	; (8009d80 <_malloc_r+0xac>)
 8009cfc:	6814      	ldr	r4, [r2, #0]
 8009cfe:	4621      	mov	r1, r4
 8009d00:	b991      	cbnz	r1, 8009d28 <_malloc_r+0x54>
 8009d02:	4c20      	ldr	r4, [pc, #128]	; (8009d84 <_malloc_r+0xb0>)
 8009d04:	6823      	ldr	r3, [r4, #0]
 8009d06:	b91b      	cbnz	r3, 8009d10 <_malloc_r+0x3c>
 8009d08:	4630      	mov	r0, r6
 8009d0a:	f000 f83d 	bl	8009d88 <_sbrk_r>
 8009d0e:	6020      	str	r0, [r4, #0]
 8009d10:	4629      	mov	r1, r5
 8009d12:	4630      	mov	r0, r6
 8009d14:	f000 f838 	bl	8009d88 <_sbrk_r>
 8009d18:	1c43      	adds	r3, r0, #1
 8009d1a:	d124      	bne.n	8009d66 <_malloc_r+0x92>
 8009d1c:	230c      	movs	r3, #12
 8009d1e:	6033      	str	r3, [r6, #0]
 8009d20:	4630      	mov	r0, r6
 8009d22:	f000 f842 	bl	8009daa <__malloc_unlock>
 8009d26:	e7e4      	b.n	8009cf2 <_malloc_r+0x1e>
 8009d28:	680b      	ldr	r3, [r1, #0]
 8009d2a:	1b5b      	subs	r3, r3, r5
 8009d2c:	d418      	bmi.n	8009d60 <_malloc_r+0x8c>
 8009d2e:	2b0b      	cmp	r3, #11
 8009d30:	d90f      	bls.n	8009d52 <_malloc_r+0x7e>
 8009d32:	600b      	str	r3, [r1, #0]
 8009d34:	50cd      	str	r5, [r1, r3]
 8009d36:	18cc      	adds	r4, r1, r3
 8009d38:	4630      	mov	r0, r6
 8009d3a:	f000 f836 	bl	8009daa <__malloc_unlock>
 8009d3e:	f104 000b 	add.w	r0, r4, #11
 8009d42:	1d23      	adds	r3, r4, #4
 8009d44:	f020 0007 	bic.w	r0, r0, #7
 8009d48:	1ac3      	subs	r3, r0, r3
 8009d4a:	d0d3      	beq.n	8009cf4 <_malloc_r+0x20>
 8009d4c:	425a      	negs	r2, r3
 8009d4e:	50e2      	str	r2, [r4, r3]
 8009d50:	e7d0      	b.n	8009cf4 <_malloc_r+0x20>
 8009d52:	428c      	cmp	r4, r1
 8009d54:	684b      	ldr	r3, [r1, #4]
 8009d56:	bf16      	itet	ne
 8009d58:	6063      	strne	r3, [r4, #4]
 8009d5a:	6013      	streq	r3, [r2, #0]
 8009d5c:	460c      	movne	r4, r1
 8009d5e:	e7eb      	b.n	8009d38 <_malloc_r+0x64>
 8009d60:	460c      	mov	r4, r1
 8009d62:	6849      	ldr	r1, [r1, #4]
 8009d64:	e7cc      	b.n	8009d00 <_malloc_r+0x2c>
 8009d66:	1cc4      	adds	r4, r0, #3
 8009d68:	f024 0403 	bic.w	r4, r4, #3
 8009d6c:	42a0      	cmp	r0, r4
 8009d6e:	d005      	beq.n	8009d7c <_malloc_r+0xa8>
 8009d70:	1a21      	subs	r1, r4, r0
 8009d72:	4630      	mov	r0, r6
 8009d74:	f000 f808 	bl	8009d88 <_sbrk_r>
 8009d78:	3001      	adds	r0, #1
 8009d7a:	d0cf      	beq.n	8009d1c <_malloc_r+0x48>
 8009d7c:	6025      	str	r5, [r4, #0]
 8009d7e:	e7db      	b.n	8009d38 <_malloc_r+0x64>
 8009d80:	200000b8 	.word	0x200000b8
 8009d84:	200000bc 	.word	0x200000bc

08009d88 <_sbrk_r>:
 8009d88:	b538      	push	{r3, r4, r5, lr}
 8009d8a:	4c06      	ldr	r4, [pc, #24]	; (8009da4 <_sbrk_r+0x1c>)
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	4605      	mov	r5, r0
 8009d90:	4608      	mov	r0, r1
 8009d92:	6023      	str	r3, [r4, #0]
 8009d94:	f7f7 f85e 	bl	8000e54 <_sbrk>
 8009d98:	1c43      	adds	r3, r0, #1
 8009d9a:	d102      	bne.n	8009da2 <_sbrk_r+0x1a>
 8009d9c:	6823      	ldr	r3, [r4, #0]
 8009d9e:	b103      	cbz	r3, 8009da2 <_sbrk_r+0x1a>
 8009da0:	602b      	str	r3, [r5, #0]
 8009da2:	bd38      	pop	{r3, r4, r5, pc}
 8009da4:	20000960 	.word	0x20000960

08009da8 <__malloc_lock>:
 8009da8:	4770      	bx	lr

08009daa <__malloc_unlock>:
 8009daa:	4770      	bx	lr

08009dac <_init>:
 8009dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dae:	bf00      	nop
 8009db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009db2:	bc08      	pop	{r3}
 8009db4:	469e      	mov	lr, r3
 8009db6:	4770      	bx	lr

08009db8 <_fini>:
 8009db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dba:	bf00      	nop
 8009dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009dbe:	bc08      	pop	{r3}
 8009dc0:	469e      	mov	lr, r3
 8009dc2:	4770      	bx	lr
